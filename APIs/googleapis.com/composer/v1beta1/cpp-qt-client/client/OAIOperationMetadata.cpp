/**
 * Cloud Composer API
 * Manages Apache Airflow environments on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOperationMetadata.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOperationMetadata::OAIOperationMetadata(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOperationMetadata::OAIOperationMetadata() {
    this->initializeModel();
}

OAIOperationMetadata::~OAIOperationMetadata() {}

void OAIOperationMetadata::initializeModel() {

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_operation_type_isSet = false;
    m_operation_type_isValid = false;

    m_resource_isSet = false;
    m_resource_isValid = false;

    m_resource_uuid_isSet = false;
    m_resource_uuid_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;
}

void OAIOperationMetadata::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOperationMetadata::fromJsonObject(QJsonObject json) {

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("endTime")]);
    m_end_time_isSet = !json[QString("endTime")].isNull() && m_end_time_isValid;

    m_operation_type_isValid = ::OpenAPI::fromJsonValue(m_operation_type, json[QString("operationType")]);
    m_operation_type_isSet = !json[QString("operationType")].isNull() && m_operation_type_isValid;

    m_resource_isValid = ::OpenAPI::fromJsonValue(m_resource, json[QString("resource")]);
    m_resource_isSet = !json[QString("resource")].isNull() && m_resource_isValid;

    m_resource_uuid_isValid = ::OpenAPI::fromJsonValue(m_resource_uuid, json[QString("resourceUuid")]);
    m_resource_uuid_isSet = !json[QString("resourceUuid")].isNull() && m_resource_uuid_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;
}

QString OAIOperationMetadata::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOperationMetadata::asJsonObject() const {
    QJsonObject obj;
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("endTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_operation_type_isSet) {
        obj.insert(QString("operationType"), ::OpenAPI::toJsonValue(m_operation_type));
    }
    if (m_resource_isSet) {
        obj.insert(QString("resource"), ::OpenAPI::toJsonValue(m_resource));
    }
    if (m_resource_uuid_isSet) {
        obj.insert(QString("resourceUuid"), ::OpenAPI::toJsonValue(m_resource_uuid));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    return obj;
}

QString OAIOperationMetadata::getCreateTime() const {
    return m_create_time;
}
void OAIOperationMetadata::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIOperationMetadata::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIOperationMetadata::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAIOperationMetadata::getEndTime() const {
    return m_end_time;
}
void OAIOperationMetadata::setEndTime(const QString &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIOperationMetadata::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIOperationMetadata::is_end_time_Valid() const{
    return m_end_time_isValid;
}

QString OAIOperationMetadata::getOperationType() const {
    return m_operation_type;
}
void OAIOperationMetadata::setOperationType(const QString &operation_type) {
    m_operation_type = operation_type;
    m_operation_type_isSet = true;
}

bool OAIOperationMetadata::is_operation_type_Set() const{
    return m_operation_type_isSet;
}

bool OAIOperationMetadata::is_operation_type_Valid() const{
    return m_operation_type_isValid;
}

QString OAIOperationMetadata::getResource() const {
    return m_resource;
}
void OAIOperationMetadata::setResource(const QString &resource) {
    m_resource = resource;
    m_resource_isSet = true;
}

bool OAIOperationMetadata::is_resource_Set() const{
    return m_resource_isSet;
}

bool OAIOperationMetadata::is_resource_Valid() const{
    return m_resource_isValid;
}

QString OAIOperationMetadata::getResourceUuid() const {
    return m_resource_uuid;
}
void OAIOperationMetadata::setResourceUuid(const QString &resource_uuid) {
    m_resource_uuid = resource_uuid;
    m_resource_uuid_isSet = true;
}

bool OAIOperationMetadata::is_resource_uuid_Set() const{
    return m_resource_uuid_isSet;
}

bool OAIOperationMetadata::is_resource_uuid_Valid() const{
    return m_resource_uuid_isValid;
}

QString OAIOperationMetadata::getState() const {
    return m_state;
}
void OAIOperationMetadata::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIOperationMetadata::is_state_Set() const{
    return m_state_isSet;
}

bool OAIOperationMetadata::is_state_Valid() const{
    return m_state_isValid;
}

bool OAIOperationMetadata::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_operation_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_uuid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOperationMetadata::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
