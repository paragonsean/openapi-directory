/**
 * Cloud Composer API
 * Manages Apache Airflow environments on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPrivateClusterConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPrivateClusterConfig::OAIPrivateClusterConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPrivateClusterConfig::OAIPrivateClusterConfig() {
    this->initializeModel();
}

OAIPrivateClusterConfig::~OAIPrivateClusterConfig() {}

void OAIPrivateClusterConfig::initializeModel() {

    m_enable_private_endpoint_isSet = false;
    m_enable_private_endpoint_isValid = false;

    m_master_ipv4_cidr_block_isSet = false;
    m_master_ipv4_cidr_block_isValid = false;

    m_master_ipv4_reserved_range_isSet = false;
    m_master_ipv4_reserved_range_isValid = false;
}

void OAIPrivateClusterConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPrivateClusterConfig::fromJsonObject(QJsonObject json) {

    m_enable_private_endpoint_isValid = ::OpenAPI::fromJsonValue(m_enable_private_endpoint, json[QString("enablePrivateEndpoint")]);
    m_enable_private_endpoint_isSet = !json[QString("enablePrivateEndpoint")].isNull() && m_enable_private_endpoint_isValid;

    m_master_ipv4_cidr_block_isValid = ::OpenAPI::fromJsonValue(m_master_ipv4_cidr_block, json[QString("masterIpv4CidrBlock")]);
    m_master_ipv4_cidr_block_isSet = !json[QString("masterIpv4CidrBlock")].isNull() && m_master_ipv4_cidr_block_isValid;

    m_master_ipv4_reserved_range_isValid = ::OpenAPI::fromJsonValue(m_master_ipv4_reserved_range, json[QString("masterIpv4ReservedRange")]);
    m_master_ipv4_reserved_range_isSet = !json[QString("masterIpv4ReservedRange")].isNull() && m_master_ipv4_reserved_range_isValid;
}

QString OAIPrivateClusterConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPrivateClusterConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_enable_private_endpoint_isSet) {
        obj.insert(QString("enablePrivateEndpoint"), ::OpenAPI::toJsonValue(m_enable_private_endpoint));
    }
    if (m_master_ipv4_cidr_block_isSet) {
        obj.insert(QString("masterIpv4CidrBlock"), ::OpenAPI::toJsonValue(m_master_ipv4_cidr_block));
    }
    if (m_master_ipv4_reserved_range_isSet) {
        obj.insert(QString("masterIpv4ReservedRange"), ::OpenAPI::toJsonValue(m_master_ipv4_reserved_range));
    }
    return obj;
}

bool OAIPrivateClusterConfig::isEnablePrivateEndpoint() const {
    return m_enable_private_endpoint;
}
void OAIPrivateClusterConfig::setEnablePrivateEndpoint(const bool &enable_private_endpoint) {
    m_enable_private_endpoint = enable_private_endpoint;
    m_enable_private_endpoint_isSet = true;
}

bool OAIPrivateClusterConfig::is_enable_private_endpoint_Set() const{
    return m_enable_private_endpoint_isSet;
}

bool OAIPrivateClusterConfig::is_enable_private_endpoint_Valid() const{
    return m_enable_private_endpoint_isValid;
}

QString OAIPrivateClusterConfig::getMasterIpv4CidrBlock() const {
    return m_master_ipv4_cidr_block;
}
void OAIPrivateClusterConfig::setMasterIpv4CidrBlock(const QString &master_ipv4_cidr_block) {
    m_master_ipv4_cidr_block = master_ipv4_cidr_block;
    m_master_ipv4_cidr_block_isSet = true;
}

bool OAIPrivateClusterConfig::is_master_ipv4_cidr_block_Set() const{
    return m_master_ipv4_cidr_block_isSet;
}

bool OAIPrivateClusterConfig::is_master_ipv4_cidr_block_Valid() const{
    return m_master_ipv4_cidr_block_isValid;
}

QString OAIPrivateClusterConfig::getMasterIpv4ReservedRange() const {
    return m_master_ipv4_reserved_range;
}
void OAIPrivateClusterConfig::setMasterIpv4ReservedRange(const QString &master_ipv4_reserved_range) {
    m_master_ipv4_reserved_range = master_ipv4_reserved_range;
    m_master_ipv4_reserved_range_isSet = true;
}

bool OAIPrivateClusterConfig::is_master_ipv4_reserved_range_Set() const{
    return m_master_ipv4_reserved_range_isSet;
}

bool OAIPrivateClusterConfig::is_master_ipv4_reserved_range_Valid() const{
    return m_master_ipv4_reserved_range_isValid;
}

bool OAIPrivateClusterConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_enable_private_endpoint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_master_ipv4_cidr_block_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_master_ipv4_reserved_range_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPrivateClusterConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
