/**
 * Cloud Composer API
 * Manages Apache Airflow environments on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICheckUpgradeRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICheckUpgradeRequest::OAICheckUpgradeRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICheckUpgradeRequest::OAICheckUpgradeRequest() {
    this->initializeModel();
}

OAICheckUpgradeRequest::~OAICheckUpgradeRequest() {}

void OAICheckUpgradeRequest::initializeModel() {

    m_image_version_isSet = false;
    m_image_version_isValid = false;
}

void OAICheckUpgradeRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICheckUpgradeRequest::fromJsonObject(QJsonObject json) {

    m_image_version_isValid = ::OpenAPI::fromJsonValue(m_image_version, json[QString("imageVersion")]);
    m_image_version_isSet = !json[QString("imageVersion")].isNull() && m_image_version_isValid;
}

QString OAICheckUpgradeRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICheckUpgradeRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_image_version_isSet) {
        obj.insert(QString("imageVersion"), ::OpenAPI::toJsonValue(m_image_version));
    }
    return obj;
}

QString OAICheckUpgradeRequest::getImageVersion() const {
    return m_image_version;
}
void OAICheckUpgradeRequest::setImageVersion(const QString &image_version) {
    m_image_version = image_version;
    m_image_version_isSet = true;
}

bool OAICheckUpgradeRequest::is_image_version_Set() const{
    return m_image_version_isSet;
}

bool OAICheckUpgradeRequest::is_image_version_Valid() const{
    return m_image_version_isValid;
}

bool OAICheckUpgradeRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_image_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICheckUpgradeRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
