/**
 * Cloud Composer API
 * Manages Apache Airflow environments on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPollAirflowCommandRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPollAirflowCommandRequest::OAIPollAirflowCommandRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPollAirflowCommandRequest::OAIPollAirflowCommandRequest() {
    this->initializeModel();
}

OAIPollAirflowCommandRequest::~OAIPollAirflowCommandRequest() {}

void OAIPollAirflowCommandRequest::initializeModel() {

    m_execution_id_isSet = false;
    m_execution_id_isValid = false;

    m_next_line_number_isSet = false;
    m_next_line_number_isValid = false;

    m_pod_isSet = false;
    m_pod_isValid = false;

    m_pod_namespace_isSet = false;
    m_pod_namespace_isValid = false;
}

void OAIPollAirflowCommandRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPollAirflowCommandRequest::fromJsonObject(QJsonObject json) {

    m_execution_id_isValid = ::OpenAPI::fromJsonValue(m_execution_id, json[QString("executionId")]);
    m_execution_id_isSet = !json[QString("executionId")].isNull() && m_execution_id_isValid;

    m_next_line_number_isValid = ::OpenAPI::fromJsonValue(m_next_line_number, json[QString("nextLineNumber")]);
    m_next_line_number_isSet = !json[QString("nextLineNumber")].isNull() && m_next_line_number_isValid;

    m_pod_isValid = ::OpenAPI::fromJsonValue(m_pod, json[QString("pod")]);
    m_pod_isSet = !json[QString("pod")].isNull() && m_pod_isValid;

    m_pod_namespace_isValid = ::OpenAPI::fromJsonValue(m_pod_namespace, json[QString("podNamespace")]);
    m_pod_namespace_isSet = !json[QString("podNamespace")].isNull() && m_pod_namespace_isValid;
}

QString OAIPollAirflowCommandRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPollAirflowCommandRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_execution_id_isSet) {
        obj.insert(QString("executionId"), ::OpenAPI::toJsonValue(m_execution_id));
    }
    if (m_next_line_number_isSet) {
        obj.insert(QString("nextLineNumber"), ::OpenAPI::toJsonValue(m_next_line_number));
    }
    if (m_pod_isSet) {
        obj.insert(QString("pod"), ::OpenAPI::toJsonValue(m_pod));
    }
    if (m_pod_namespace_isSet) {
        obj.insert(QString("podNamespace"), ::OpenAPI::toJsonValue(m_pod_namespace));
    }
    return obj;
}

QString OAIPollAirflowCommandRequest::getExecutionId() const {
    return m_execution_id;
}
void OAIPollAirflowCommandRequest::setExecutionId(const QString &execution_id) {
    m_execution_id = execution_id;
    m_execution_id_isSet = true;
}

bool OAIPollAirflowCommandRequest::is_execution_id_Set() const{
    return m_execution_id_isSet;
}

bool OAIPollAirflowCommandRequest::is_execution_id_Valid() const{
    return m_execution_id_isValid;
}

qint32 OAIPollAirflowCommandRequest::getNextLineNumber() const {
    return m_next_line_number;
}
void OAIPollAirflowCommandRequest::setNextLineNumber(const qint32 &next_line_number) {
    m_next_line_number = next_line_number;
    m_next_line_number_isSet = true;
}

bool OAIPollAirflowCommandRequest::is_next_line_number_Set() const{
    return m_next_line_number_isSet;
}

bool OAIPollAirflowCommandRequest::is_next_line_number_Valid() const{
    return m_next_line_number_isValid;
}

QString OAIPollAirflowCommandRequest::getPod() const {
    return m_pod;
}
void OAIPollAirflowCommandRequest::setPod(const QString &pod) {
    m_pod = pod;
    m_pod_isSet = true;
}

bool OAIPollAirflowCommandRequest::is_pod_Set() const{
    return m_pod_isSet;
}

bool OAIPollAirflowCommandRequest::is_pod_Valid() const{
    return m_pod_isValid;
}

QString OAIPollAirflowCommandRequest::getPodNamespace() const {
    return m_pod_namespace;
}
void OAIPollAirflowCommandRequest::setPodNamespace(const QString &pod_namespace) {
    m_pod_namespace = pod_namespace;
    m_pod_namespace_isSet = true;
}

bool OAIPollAirflowCommandRequest::is_pod_namespace_Set() const{
    return m_pod_namespace_isSet;
}

bool OAIPollAirflowCommandRequest::is_pod_namespace_Valid() const{
    return m_pod_namespace_isValid;
}

bool OAIPollAirflowCommandRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_execution_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_line_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pod_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pod_namespace_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPollAirflowCommandRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
