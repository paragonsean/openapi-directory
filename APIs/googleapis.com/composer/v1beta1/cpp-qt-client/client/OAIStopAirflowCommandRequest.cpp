/**
 * Cloud Composer API
 * Manages Apache Airflow environments on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStopAirflowCommandRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStopAirflowCommandRequest::OAIStopAirflowCommandRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStopAirflowCommandRequest::OAIStopAirflowCommandRequest() {
    this->initializeModel();
}

OAIStopAirflowCommandRequest::~OAIStopAirflowCommandRequest() {}

void OAIStopAirflowCommandRequest::initializeModel() {

    m_execution_id_isSet = false;
    m_execution_id_isValid = false;

    m_force_isSet = false;
    m_force_isValid = false;

    m_pod_isSet = false;
    m_pod_isValid = false;

    m_pod_namespace_isSet = false;
    m_pod_namespace_isValid = false;
}

void OAIStopAirflowCommandRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStopAirflowCommandRequest::fromJsonObject(QJsonObject json) {

    m_execution_id_isValid = ::OpenAPI::fromJsonValue(m_execution_id, json[QString("executionId")]);
    m_execution_id_isSet = !json[QString("executionId")].isNull() && m_execution_id_isValid;

    m_force_isValid = ::OpenAPI::fromJsonValue(m_force, json[QString("force")]);
    m_force_isSet = !json[QString("force")].isNull() && m_force_isValid;

    m_pod_isValid = ::OpenAPI::fromJsonValue(m_pod, json[QString("pod")]);
    m_pod_isSet = !json[QString("pod")].isNull() && m_pod_isValid;

    m_pod_namespace_isValid = ::OpenAPI::fromJsonValue(m_pod_namespace, json[QString("podNamespace")]);
    m_pod_namespace_isSet = !json[QString("podNamespace")].isNull() && m_pod_namespace_isValid;
}

QString OAIStopAirflowCommandRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStopAirflowCommandRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_execution_id_isSet) {
        obj.insert(QString("executionId"), ::OpenAPI::toJsonValue(m_execution_id));
    }
    if (m_force_isSet) {
        obj.insert(QString("force"), ::OpenAPI::toJsonValue(m_force));
    }
    if (m_pod_isSet) {
        obj.insert(QString("pod"), ::OpenAPI::toJsonValue(m_pod));
    }
    if (m_pod_namespace_isSet) {
        obj.insert(QString("podNamespace"), ::OpenAPI::toJsonValue(m_pod_namespace));
    }
    return obj;
}

QString OAIStopAirflowCommandRequest::getExecutionId() const {
    return m_execution_id;
}
void OAIStopAirflowCommandRequest::setExecutionId(const QString &execution_id) {
    m_execution_id = execution_id;
    m_execution_id_isSet = true;
}

bool OAIStopAirflowCommandRequest::is_execution_id_Set() const{
    return m_execution_id_isSet;
}

bool OAIStopAirflowCommandRequest::is_execution_id_Valid() const{
    return m_execution_id_isValid;
}

bool OAIStopAirflowCommandRequest::isForce() const {
    return m_force;
}
void OAIStopAirflowCommandRequest::setForce(const bool &force) {
    m_force = force;
    m_force_isSet = true;
}

bool OAIStopAirflowCommandRequest::is_force_Set() const{
    return m_force_isSet;
}

bool OAIStopAirflowCommandRequest::is_force_Valid() const{
    return m_force_isValid;
}

QString OAIStopAirflowCommandRequest::getPod() const {
    return m_pod;
}
void OAIStopAirflowCommandRequest::setPod(const QString &pod) {
    m_pod = pod;
    m_pod_isSet = true;
}

bool OAIStopAirflowCommandRequest::is_pod_Set() const{
    return m_pod_isSet;
}

bool OAIStopAirflowCommandRequest::is_pod_Valid() const{
    return m_pod_isValid;
}

QString OAIStopAirflowCommandRequest::getPodNamespace() const {
    return m_pod_namespace;
}
void OAIStopAirflowCommandRequest::setPodNamespace(const QString &pod_namespace) {
    m_pod_namespace = pod_namespace;
    m_pod_namespace_isSet = true;
}

bool OAIStopAirflowCommandRequest::is_pod_namespace_Set() const{
    return m_pod_namespace_isSet;
}

bool OAIStopAirflowCommandRequest::is_pod_namespace_Valid() const{
    return m_pod_namespace_isValid;
}

bool OAIStopAirflowCommandRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_execution_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_force_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pod_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pod_namespace_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStopAirflowCommandRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
