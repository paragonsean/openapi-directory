/**
 * Cloud Composer API
 * Manages Apache Airflow environments on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEnvironment.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEnvironment::OAIEnvironment(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEnvironment::OAIEnvironment() {
    this->initializeModel();
}

OAIEnvironment::~OAIEnvironment() {}

void OAIEnvironment::initializeModel() {

    m_config_isSet = false;
    m_config_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_satisfies_pzs_isSet = false;
    m_satisfies_pzs_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_storage_config_isSet = false;
    m_storage_config_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;

    m_uuid_isSet = false;
    m_uuid_isValid = false;
}

void OAIEnvironment::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEnvironment::fromJsonObject(QJsonObject json) {

    m_config_isValid = ::OpenAPI::fromJsonValue(m_config, json[QString("config")]);
    m_config_isSet = !json[QString("config")].isNull() && m_config_isValid;

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_satisfies_pzs_isValid = ::OpenAPI::fromJsonValue(m_satisfies_pzs, json[QString("satisfiesPzs")]);
    m_satisfies_pzs_isSet = !json[QString("satisfiesPzs")].isNull() && m_satisfies_pzs_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_storage_config_isValid = ::OpenAPI::fromJsonValue(m_storage_config, json[QString("storageConfig")]);
    m_storage_config_isSet = !json[QString("storageConfig")].isNull() && m_storage_config_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;

    m_uuid_isValid = ::OpenAPI::fromJsonValue(m_uuid, json[QString("uuid")]);
    m_uuid_isSet = !json[QString("uuid")].isNull() && m_uuid_isValid;
}

QString OAIEnvironment::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEnvironment::asJsonObject() const {
    QJsonObject obj;
    if (m_config.isSet()) {
        obj.insert(QString("config"), ::OpenAPI::toJsonValue(m_config));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_satisfies_pzs_isSet) {
        obj.insert(QString("satisfiesPzs"), ::OpenAPI::toJsonValue(m_satisfies_pzs));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_storage_config.isSet()) {
        obj.insert(QString("storageConfig"), ::OpenAPI::toJsonValue(m_storage_config));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    if (m_uuid_isSet) {
        obj.insert(QString("uuid"), ::OpenAPI::toJsonValue(m_uuid));
    }
    return obj;
}

OAIEnvironmentConfig OAIEnvironment::getConfig() const {
    return m_config;
}
void OAIEnvironment::setConfig(const OAIEnvironmentConfig &config) {
    m_config = config;
    m_config_isSet = true;
}

bool OAIEnvironment::is_config_Set() const{
    return m_config_isSet;
}

bool OAIEnvironment::is_config_Valid() const{
    return m_config_isValid;
}

QString OAIEnvironment::getCreateTime() const {
    return m_create_time;
}
void OAIEnvironment::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIEnvironment::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIEnvironment::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QMap<QString, QString> OAIEnvironment::getLabels() const {
    return m_labels;
}
void OAIEnvironment::setLabels(const QMap<QString, QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIEnvironment::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIEnvironment::is_labels_Valid() const{
    return m_labels_isValid;
}

QString OAIEnvironment::getName() const {
    return m_name;
}
void OAIEnvironment::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIEnvironment::is_name_Set() const{
    return m_name_isSet;
}

bool OAIEnvironment::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIEnvironment::isSatisfiesPzs() const {
    return m_satisfies_pzs;
}
void OAIEnvironment::setSatisfiesPzs(const bool &satisfies_pzs) {
    m_satisfies_pzs = satisfies_pzs;
    m_satisfies_pzs_isSet = true;
}

bool OAIEnvironment::is_satisfies_pzs_Set() const{
    return m_satisfies_pzs_isSet;
}

bool OAIEnvironment::is_satisfies_pzs_Valid() const{
    return m_satisfies_pzs_isValid;
}

QString OAIEnvironment::getState() const {
    return m_state;
}
void OAIEnvironment::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIEnvironment::is_state_Set() const{
    return m_state_isSet;
}

bool OAIEnvironment::is_state_Valid() const{
    return m_state_isValid;
}

OAIStorageConfig OAIEnvironment::getStorageConfig() const {
    return m_storage_config;
}
void OAIEnvironment::setStorageConfig(const OAIStorageConfig &storage_config) {
    m_storage_config = storage_config;
    m_storage_config_isSet = true;
}

bool OAIEnvironment::is_storage_config_Set() const{
    return m_storage_config_isSet;
}

bool OAIEnvironment::is_storage_config_Valid() const{
    return m_storage_config_isValid;
}

QString OAIEnvironment::getUpdateTime() const {
    return m_update_time;
}
void OAIEnvironment::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAIEnvironment::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAIEnvironment::is_update_time_Valid() const{
    return m_update_time_isValid;
}

QString OAIEnvironment::getUuid() const {
    return m_uuid;
}
void OAIEnvironment::setUuid(const QString &uuid) {
    m_uuid = uuid;
    m_uuid_isSet = true;
}

bool OAIEnvironment::is_uuid_Set() const{
    return m_uuid_isSet;
}

bool OAIEnvironment::is_uuid_Valid() const{
    return m_uuid_isValid;
}

bool OAIEnvironment::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_satisfies_pzs_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uuid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEnvironment::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
