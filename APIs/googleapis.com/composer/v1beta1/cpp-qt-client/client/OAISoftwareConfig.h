/**
 * Cloud Composer API
 * Manages Apache Airflow environments on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAISoftwareConfig.h
 *
 * Specifies the selection and configuration of software inside the environment.
 */

#ifndef OAISoftwareConfig_H
#define OAISoftwareConfig_H

#include <QJsonObject>

#include "OAICloudDataLineageIntegration.h"
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAICloudDataLineageIntegration;

class OAISoftwareConfig : public OAIObject {
public:
    OAISoftwareConfig();
    OAISoftwareConfig(QString json);
    ~OAISoftwareConfig() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QMap<QString, QString> getAirflowConfigOverrides() const;
    void setAirflowConfigOverrides(const QMap<QString, QString> &airflow_config_overrides);
    bool is_airflow_config_overrides_Set() const;
    bool is_airflow_config_overrides_Valid() const;

    OAICloudDataLineageIntegration getCloudDataLineageIntegration() const;
    void setCloudDataLineageIntegration(const OAICloudDataLineageIntegration &cloud_data_lineage_integration);
    bool is_cloud_data_lineage_integration_Set() const;
    bool is_cloud_data_lineage_integration_Valid() const;

    QMap<QString, QString> getEnvVariables() const;
    void setEnvVariables(const QMap<QString, QString> &env_variables);
    bool is_env_variables_Set() const;
    bool is_env_variables_Valid() const;

    QString getImageVersion() const;
    void setImageVersion(const QString &image_version);
    bool is_image_version_Set() const;
    bool is_image_version_Valid() const;

    QMap<QString, QString> getPypiPackages() const;
    void setPypiPackages(const QMap<QString, QString> &pypi_packages);
    bool is_pypi_packages_Set() const;
    bool is_pypi_packages_Valid() const;

    QString getPythonVersion() const;
    void setPythonVersion(const QString &python_version);
    bool is_python_version_Set() const;
    bool is_python_version_Valid() const;

    qint32 getSchedulerCount() const;
    void setSchedulerCount(const qint32 &scheduler_count);
    bool is_scheduler_count_Set() const;
    bool is_scheduler_count_Valid() const;

    QString getWebServerPluginsMode() const;
    void setWebServerPluginsMode(const QString &web_server_plugins_mode);
    bool is_web_server_plugins_mode_Set() const;
    bool is_web_server_plugins_mode_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QMap<QString, QString> m_airflow_config_overrides;
    bool m_airflow_config_overrides_isSet;
    bool m_airflow_config_overrides_isValid;

    OAICloudDataLineageIntegration m_cloud_data_lineage_integration;
    bool m_cloud_data_lineage_integration_isSet;
    bool m_cloud_data_lineage_integration_isValid;

    QMap<QString, QString> m_env_variables;
    bool m_env_variables_isSet;
    bool m_env_variables_isValid;

    QString m_image_version;
    bool m_image_version_isSet;
    bool m_image_version_isValid;

    QMap<QString, QString> m_pypi_packages;
    bool m_pypi_packages_isSet;
    bool m_pypi_packages_isValid;

    QString m_python_version;
    bool m_python_version_isSet;
    bool m_python_version_isValid;

    qint32 m_scheduler_count;
    bool m_scheduler_count_isSet;
    bool m_scheduler_count_isValid;

    QString m_web_server_plugins_mode;
    bool m_web_server_plugins_mode_isSet;
    bool m_web_server_plugins_mode_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAISoftwareConfig)

#endif // OAISoftwareConfig_H
