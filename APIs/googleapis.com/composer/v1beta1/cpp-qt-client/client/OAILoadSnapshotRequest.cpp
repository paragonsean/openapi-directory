/**
 * Cloud Composer API
 * Manages Apache Airflow environments on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILoadSnapshotRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILoadSnapshotRequest::OAILoadSnapshotRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILoadSnapshotRequest::OAILoadSnapshotRequest() {
    this->initializeModel();
}

OAILoadSnapshotRequest::~OAILoadSnapshotRequest() {}

void OAILoadSnapshotRequest::initializeModel() {

    m_skip_airflow_overrides_setting_isSet = false;
    m_skip_airflow_overrides_setting_isValid = false;

    m_skip_environment_variables_setting_isSet = false;
    m_skip_environment_variables_setting_isValid = false;

    m_skip_gcs_data_copying_isSet = false;
    m_skip_gcs_data_copying_isValid = false;

    m_skip_pypi_packages_installation_isSet = false;
    m_skip_pypi_packages_installation_isValid = false;

    m_snapshot_path_isSet = false;
    m_snapshot_path_isValid = false;
}

void OAILoadSnapshotRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILoadSnapshotRequest::fromJsonObject(QJsonObject json) {

    m_skip_airflow_overrides_setting_isValid = ::OpenAPI::fromJsonValue(m_skip_airflow_overrides_setting, json[QString("skipAirflowOverridesSetting")]);
    m_skip_airflow_overrides_setting_isSet = !json[QString("skipAirflowOverridesSetting")].isNull() && m_skip_airflow_overrides_setting_isValid;

    m_skip_environment_variables_setting_isValid = ::OpenAPI::fromJsonValue(m_skip_environment_variables_setting, json[QString("skipEnvironmentVariablesSetting")]);
    m_skip_environment_variables_setting_isSet = !json[QString("skipEnvironmentVariablesSetting")].isNull() && m_skip_environment_variables_setting_isValid;

    m_skip_gcs_data_copying_isValid = ::OpenAPI::fromJsonValue(m_skip_gcs_data_copying, json[QString("skipGcsDataCopying")]);
    m_skip_gcs_data_copying_isSet = !json[QString("skipGcsDataCopying")].isNull() && m_skip_gcs_data_copying_isValid;

    m_skip_pypi_packages_installation_isValid = ::OpenAPI::fromJsonValue(m_skip_pypi_packages_installation, json[QString("skipPypiPackagesInstallation")]);
    m_skip_pypi_packages_installation_isSet = !json[QString("skipPypiPackagesInstallation")].isNull() && m_skip_pypi_packages_installation_isValid;

    m_snapshot_path_isValid = ::OpenAPI::fromJsonValue(m_snapshot_path, json[QString("snapshotPath")]);
    m_snapshot_path_isSet = !json[QString("snapshotPath")].isNull() && m_snapshot_path_isValid;
}

QString OAILoadSnapshotRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILoadSnapshotRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_skip_airflow_overrides_setting_isSet) {
        obj.insert(QString("skipAirflowOverridesSetting"), ::OpenAPI::toJsonValue(m_skip_airflow_overrides_setting));
    }
    if (m_skip_environment_variables_setting_isSet) {
        obj.insert(QString("skipEnvironmentVariablesSetting"), ::OpenAPI::toJsonValue(m_skip_environment_variables_setting));
    }
    if (m_skip_gcs_data_copying_isSet) {
        obj.insert(QString("skipGcsDataCopying"), ::OpenAPI::toJsonValue(m_skip_gcs_data_copying));
    }
    if (m_skip_pypi_packages_installation_isSet) {
        obj.insert(QString("skipPypiPackagesInstallation"), ::OpenAPI::toJsonValue(m_skip_pypi_packages_installation));
    }
    if (m_snapshot_path_isSet) {
        obj.insert(QString("snapshotPath"), ::OpenAPI::toJsonValue(m_snapshot_path));
    }
    return obj;
}

bool OAILoadSnapshotRequest::isSkipAirflowOverridesSetting() const {
    return m_skip_airflow_overrides_setting;
}
void OAILoadSnapshotRequest::setSkipAirflowOverridesSetting(const bool &skip_airflow_overrides_setting) {
    m_skip_airflow_overrides_setting = skip_airflow_overrides_setting;
    m_skip_airflow_overrides_setting_isSet = true;
}

bool OAILoadSnapshotRequest::is_skip_airflow_overrides_setting_Set() const{
    return m_skip_airflow_overrides_setting_isSet;
}

bool OAILoadSnapshotRequest::is_skip_airflow_overrides_setting_Valid() const{
    return m_skip_airflow_overrides_setting_isValid;
}

bool OAILoadSnapshotRequest::isSkipEnvironmentVariablesSetting() const {
    return m_skip_environment_variables_setting;
}
void OAILoadSnapshotRequest::setSkipEnvironmentVariablesSetting(const bool &skip_environment_variables_setting) {
    m_skip_environment_variables_setting = skip_environment_variables_setting;
    m_skip_environment_variables_setting_isSet = true;
}

bool OAILoadSnapshotRequest::is_skip_environment_variables_setting_Set() const{
    return m_skip_environment_variables_setting_isSet;
}

bool OAILoadSnapshotRequest::is_skip_environment_variables_setting_Valid() const{
    return m_skip_environment_variables_setting_isValid;
}

bool OAILoadSnapshotRequest::isSkipGcsDataCopying() const {
    return m_skip_gcs_data_copying;
}
void OAILoadSnapshotRequest::setSkipGcsDataCopying(const bool &skip_gcs_data_copying) {
    m_skip_gcs_data_copying = skip_gcs_data_copying;
    m_skip_gcs_data_copying_isSet = true;
}

bool OAILoadSnapshotRequest::is_skip_gcs_data_copying_Set() const{
    return m_skip_gcs_data_copying_isSet;
}

bool OAILoadSnapshotRequest::is_skip_gcs_data_copying_Valid() const{
    return m_skip_gcs_data_copying_isValid;
}

bool OAILoadSnapshotRequest::isSkipPypiPackagesInstallation() const {
    return m_skip_pypi_packages_installation;
}
void OAILoadSnapshotRequest::setSkipPypiPackagesInstallation(const bool &skip_pypi_packages_installation) {
    m_skip_pypi_packages_installation = skip_pypi_packages_installation;
    m_skip_pypi_packages_installation_isSet = true;
}

bool OAILoadSnapshotRequest::is_skip_pypi_packages_installation_Set() const{
    return m_skip_pypi_packages_installation_isSet;
}

bool OAILoadSnapshotRequest::is_skip_pypi_packages_installation_Valid() const{
    return m_skip_pypi_packages_installation_isValid;
}

QString OAILoadSnapshotRequest::getSnapshotPath() const {
    return m_snapshot_path;
}
void OAILoadSnapshotRequest::setSnapshotPath(const QString &snapshot_path) {
    m_snapshot_path = snapshot_path;
    m_snapshot_path_isSet = true;
}

bool OAILoadSnapshotRequest::is_snapshot_path_Set() const{
    return m_snapshot_path_isSet;
}

bool OAILoadSnapshotRequest::is_snapshot_path_Valid() const{
    return m_snapshot_path_isValid;
}

bool OAILoadSnapshotRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_skip_airflow_overrides_setting_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_skip_environment_variables_setting_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_skip_gcs_data_copying_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_skip_pypi_packages_installation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_snapshot_path_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILoadSnapshotRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
