/**
 * Cloud Composer API
 * Manages Apache Airflow environments on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFetchDatabasePropertiesResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFetchDatabasePropertiesResponse::OAIFetchDatabasePropertiesResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFetchDatabasePropertiesResponse::OAIFetchDatabasePropertiesResponse() {
    this->initializeModel();
}

OAIFetchDatabasePropertiesResponse::~OAIFetchDatabasePropertiesResponse() {}

void OAIFetchDatabasePropertiesResponse::initializeModel() {

    m_is_failover_replica_available_isSet = false;
    m_is_failover_replica_available_isValid = false;

    m_primary_gce_zone_isSet = false;
    m_primary_gce_zone_isValid = false;

    m_secondary_gce_zone_isSet = false;
    m_secondary_gce_zone_isValid = false;
}

void OAIFetchDatabasePropertiesResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFetchDatabasePropertiesResponse::fromJsonObject(QJsonObject json) {

    m_is_failover_replica_available_isValid = ::OpenAPI::fromJsonValue(m_is_failover_replica_available, json[QString("isFailoverReplicaAvailable")]);
    m_is_failover_replica_available_isSet = !json[QString("isFailoverReplicaAvailable")].isNull() && m_is_failover_replica_available_isValid;

    m_primary_gce_zone_isValid = ::OpenAPI::fromJsonValue(m_primary_gce_zone, json[QString("primaryGceZone")]);
    m_primary_gce_zone_isSet = !json[QString("primaryGceZone")].isNull() && m_primary_gce_zone_isValid;

    m_secondary_gce_zone_isValid = ::OpenAPI::fromJsonValue(m_secondary_gce_zone, json[QString("secondaryGceZone")]);
    m_secondary_gce_zone_isSet = !json[QString("secondaryGceZone")].isNull() && m_secondary_gce_zone_isValid;
}

QString OAIFetchDatabasePropertiesResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFetchDatabasePropertiesResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_is_failover_replica_available_isSet) {
        obj.insert(QString("isFailoverReplicaAvailable"), ::OpenAPI::toJsonValue(m_is_failover_replica_available));
    }
    if (m_primary_gce_zone_isSet) {
        obj.insert(QString("primaryGceZone"), ::OpenAPI::toJsonValue(m_primary_gce_zone));
    }
    if (m_secondary_gce_zone_isSet) {
        obj.insert(QString("secondaryGceZone"), ::OpenAPI::toJsonValue(m_secondary_gce_zone));
    }
    return obj;
}

bool OAIFetchDatabasePropertiesResponse::isIsFailoverReplicaAvailable() const {
    return m_is_failover_replica_available;
}
void OAIFetchDatabasePropertiesResponse::setIsFailoverReplicaAvailable(const bool &is_failover_replica_available) {
    m_is_failover_replica_available = is_failover_replica_available;
    m_is_failover_replica_available_isSet = true;
}

bool OAIFetchDatabasePropertiesResponse::is_is_failover_replica_available_Set() const{
    return m_is_failover_replica_available_isSet;
}

bool OAIFetchDatabasePropertiesResponse::is_is_failover_replica_available_Valid() const{
    return m_is_failover_replica_available_isValid;
}

QString OAIFetchDatabasePropertiesResponse::getPrimaryGceZone() const {
    return m_primary_gce_zone;
}
void OAIFetchDatabasePropertiesResponse::setPrimaryGceZone(const QString &primary_gce_zone) {
    m_primary_gce_zone = primary_gce_zone;
    m_primary_gce_zone_isSet = true;
}

bool OAIFetchDatabasePropertiesResponse::is_primary_gce_zone_Set() const{
    return m_primary_gce_zone_isSet;
}

bool OAIFetchDatabasePropertiesResponse::is_primary_gce_zone_Valid() const{
    return m_primary_gce_zone_isValid;
}

QString OAIFetchDatabasePropertiesResponse::getSecondaryGceZone() const {
    return m_secondary_gce_zone;
}
void OAIFetchDatabasePropertiesResponse::setSecondaryGceZone(const QString &secondary_gce_zone) {
    m_secondary_gce_zone = secondary_gce_zone;
    m_secondary_gce_zone_isSet = true;
}

bool OAIFetchDatabasePropertiesResponse::is_secondary_gce_zone_Set() const{
    return m_secondary_gce_zone_isSet;
}

bool OAIFetchDatabasePropertiesResponse::is_secondary_gce_zone_Valid() const{
    return m_secondary_gce_zone_isValid;
}

bool OAIFetchDatabasePropertiesResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_is_failover_replica_available_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_gce_zone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secondary_gce_zone_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFetchDatabasePropertiesResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
