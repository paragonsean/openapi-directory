/**
 * Cloud Composer API
 * Manages Apache Airflow environments on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISoftwareConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISoftwareConfig::OAISoftwareConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISoftwareConfig::OAISoftwareConfig() {
    this->initializeModel();
}

OAISoftwareConfig::~OAISoftwareConfig() {}

void OAISoftwareConfig::initializeModel() {

    m_airflow_config_overrides_isSet = false;
    m_airflow_config_overrides_isValid = false;

    m_cloud_data_lineage_integration_isSet = false;
    m_cloud_data_lineage_integration_isValid = false;

    m_env_variables_isSet = false;
    m_env_variables_isValid = false;

    m_image_version_isSet = false;
    m_image_version_isValid = false;

    m_pypi_packages_isSet = false;
    m_pypi_packages_isValid = false;

    m_python_version_isSet = false;
    m_python_version_isValid = false;

    m_scheduler_count_isSet = false;
    m_scheduler_count_isValid = false;

    m_web_server_plugins_mode_isSet = false;
    m_web_server_plugins_mode_isValid = false;
}

void OAISoftwareConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISoftwareConfig::fromJsonObject(QJsonObject json) {

    m_airflow_config_overrides_isValid = ::OpenAPI::fromJsonValue(m_airflow_config_overrides, json[QString("airflowConfigOverrides")]);
    m_airflow_config_overrides_isSet = !json[QString("airflowConfigOverrides")].isNull() && m_airflow_config_overrides_isValid;

    m_cloud_data_lineage_integration_isValid = ::OpenAPI::fromJsonValue(m_cloud_data_lineage_integration, json[QString("cloudDataLineageIntegration")]);
    m_cloud_data_lineage_integration_isSet = !json[QString("cloudDataLineageIntegration")].isNull() && m_cloud_data_lineage_integration_isValid;

    m_env_variables_isValid = ::OpenAPI::fromJsonValue(m_env_variables, json[QString("envVariables")]);
    m_env_variables_isSet = !json[QString("envVariables")].isNull() && m_env_variables_isValid;

    m_image_version_isValid = ::OpenAPI::fromJsonValue(m_image_version, json[QString("imageVersion")]);
    m_image_version_isSet = !json[QString("imageVersion")].isNull() && m_image_version_isValid;

    m_pypi_packages_isValid = ::OpenAPI::fromJsonValue(m_pypi_packages, json[QString("pypiPackages")]);
    m_pypi_packages_isSet = !json[QString("pypiPackages")].isNull() && m_pypi_packages_isValid;

    m_python_version_isValid = ::OpenAPI::fromJsonValue(m_python_version, json[QString("pythonVersion")]);
    m_python_version_isSet = !json[QString("pythonVersion")].isNull() && m_python_version_isValid;

    m_scheduler_count_isValid = ::OpenAPI::fromJsonValue(m_scheduler_count, json[QString("schedulerCount")]);
    m_scheduler_count_isSet = !json[QString("schedulerCount")].isNull() && m_scheduler_count_isValid;

    m_web_server_plugins_mode_isValid = ::OpenAPI::fromJsonValue(m_web_server_plugins_mode, json[QString("webServerPluginsMode")]);
    m_web_server_plugins_mode_isSet = !json[QString("webServerPluginsMode")].isNull() && m_web_server_plugins_mode_isValid;
}

QString OAISoftwareConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISoftwareConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_airflow_config_overrides.size() > 0) {
        obj.insert(QString("airflowConfigOverrides"), ::OpenAPI::toJsonValue(m_airflow_config_overrides));
    }
    if (m_cloud_data_lineage_integration.isSet()) {
        obj.insert(QString("cloudDataLineageIntegration"), ::OpenAPI::toJsonValue(m_cloud_data_lineage_integration));
    }
    if (m_env_variables.size() > 0) {
        obj.insert(QString("envVariables"), ::OpenAPI::toJsonValue(m_env_variables));
    }
    if (m_image_version_isSet) {
        obj.insert(QString("imageVersion"), ::OpenAPI::toJsonValue(m_image_version));
    }
    if (m_pypi_packages.size() > 0) {
        obj.insert(QString("pypiPackages"), ::OpenAPI::toJsonValue(m_pypi_packages));
    }
    if (m_python_version_isSet) {
        obj.insert(QString("pythonVersion"), ::OpenAPI::toJsonValue(m_python_version));
    }
    if (m_scheduler_count_isSet) {
        obj.insert(QString("schedulerCount"), ::OpenAPI::toJsonValue(m_scheduler_count));
    }
    if (m_web_server_plugins_mode_isSet) {
        obj.insert(QString("webServerPluginsMode"), ::OpenAPI::toJsonValue(m_web_server_plugins_mode));
    }
    return obj;
}

QMap<QString, QString> OAISoftwareConfig::getAirflowConfigOverrides() const {
    return m_airflow_config_overrides;
}
void OAISoftwareConfig::setAirflowConfigOverrides(const QMap<QString, QString> &airflow_config_overrides) {
    m_airflow_config_overrides = airflow_config_overrides;
    m_airflow_config_overrides_isSet = true;
}

bool OAISoftwareConfig::is_airflow_config_overrides_Set() const{
    return m_airflow_config_overrides_isSet;
}

bool OAISoftwareConfig::is_airflow_config_overrides_Valid() const{
    return m_airflow_config_overrides_isValid;
}

OAICloudDataLineageIntegration OAISoftwareConfig::getCloudDataLineageIntegration() const {
    return m_cloud_data_lineage_integration;
}
void OAISoftwareConfig::setCloudDataLineageIntegration(const OAICloudDataLineageIntegration &cloud_data_lineage_integration) {
    m_cloud_data_lineage_integration = cloud_data_lineage_integration;
    m_cloud_data_lineage_integration_isSet = true;
}

bool OAISoftwareConfig::is_cloud_data_lineage_integration_Set() const{
    return m_cloud_data_lineage_integration_isSet;
}

bool OAISoftwareConfig::is_cloud_data_lineage_integration_Valid() const{
    return m_cloud_data_lineage_integration_isValid;
}

QMap<QString, QString> OAISoftwareConfig::getEnvVariables() const {
    return m_env_variables;
}
void OAISoftwareConfig::setEnvVariables(const QMap<QString, QString> &env_variables) {
    m_env_variables = env_variables;
    m_env_variables_isSet = true;
}

bool OAISoftwareConfig::is_env_variables_Set() const{
    return m_env_variables_isSet;
}

bool OAISoftwareConfig::is_env_variables_Valid() const{
    return m_env_variables_isValid;
}

QString OAISoftwareConfig::getImageVersion() const {
    return m_image_version;
}
void OAISoftwareConfig::setImageVersion(const QString &image_version) {
    m_image_version = image_version;
    m_image_version_isSet = true;
}

bool OAISoftwareConfig::is_image_version_Set() const{
    return m_image_version_isSet;
}

bool OAISoftwareConfig::is_image_version_Valid() const{
    return m_image_version_isValid;
}

QMap<QString, QString> OAISoftwareConfig::getPypiPackages() const {
    return m_pypi_packages;
}
void OAISoftwareConfig::setPypiPackages(const QMap<QString, QString> &pypi_packages) {
    m_pypi_packages = pypi_packages;
    m_pypi_packages_isSet = true;
}

bool OAISoftwareConfig::is_pypi_packages_Set() const{
    return m_pypi_packages_isSet;
}

bool OAISoftwareConfig::is_pypi_packages_Valid() const{
    return m_pypi_packages_isValid;
}

QString OAISoftwareConfig::getPythonVersion() const {
    return m_python_version;
}
void OAISoftwareConfig::setPythonVersion(const QString &python_version) {
    m_python_version = python_version;
    m_python_version_isSet = true;
}

bool OAISoftwareConfig::is_python_version_Set() const{
    return m_python_version_isSet;
}

bool OAISoftwareConfig::is_python_version_Valid() const{
    return m_python_version_isValid;
}

qint32 OAISoftwareConfig::getSchedulerCount() const {
    return m_scheduler_count;
}
void OAISoftwareConfig::setSchedulerCount(const qint32 &scheduler_count) {
    m_scheduler_count = scheduler_count;
    m_scheduler_count_isSet = true;
}

bool OAISoftwareConfig::is_scheduler_count_Set() const{
    return m_scheduler_count_isSet;
}

bool OAISoftwareConfig::is_scheduler_count_Valid() const{
    return m_scheduler_count_isValid;
}

QString OAISoftwareConfig::getWebServerPluginsMode() const {
    return m_web_server_plugins_mode;
}
void OAISoftwareConfig::setWebServerPluginsMode(const QString &web_server_plugins_mode) {
    m_web_server_plugins_mode = web_server_plugins_mode;
    m_web_server_plugins_mode_isSet = true;
}

bool OAISoftwareConfig::is_web_server_plugins_mode_Set() const{
    return m_web_server_plugins_mode_isSet;
}

bool OAISoftwareConfig::is_web_server_plugins_mode_Valid() const{
    return m_web_server_plugins_mode_isValid;
}

bool OAISoftwareConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_airflow_config_overrides.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_cloud_data_lineage_integration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_env_variables.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pypi_packages.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_python_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scheduler_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_server_plugins_mode_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISoftwareConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
