/*
 * Contact Center AI Insights API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.GoogleCloudContactcenterinsightsV1Analysis;
import org.openapitools.client.model.GoogleCloudContactcenterinsightsV1BulkAnalyzeConversationsRequest;
import org.openapitools.client.model.GoogleCloudContactcenterinsightsV1BulkDeleteConversationsRequest;
import org.openapitools.client.model.GoogleCloudContactcenterinsightsV1CalculateIssueModelStatsResponse;
import org.openapitools.client.model.GoogleCloudContactcenterinsightsV1CalculateStatsResponse;
import org.openapitools.client.model.GoogleCloudContactcenterinsightsV1Conversation;
import org.openapitools.client.model.GoogleCloudContactcenterinsightsV1DeployIssueModelRequest;
import org.openapitools.client.model.GoogleCloudContactcenterinsightsV1ExportInsightsDataRequest;
import org.openapitools.client.model.GoogleCloudContactcenterinsightsV1ExportIssueModelRequest;
import org.openapitools.client.model.GoogleCloudContactcenterinsightsV1ImportIssueModelRequest;
import org.openapitools.client.model.GoogleCloudContactcenterinsightsV1IngestConversationsRequest;
import org.openapitools.client.model.GoogleCloudContactcenterinsightsV1IssueModel;
import org.openapitools.client.model.GoogleCloudContactcenterinsightsV1ListAnalysesResponse;
import org.openapitools.client.model.GoogleCloudContactcenterinsightsV1ListConversationsResponse;
import org.openapitools.client.model.GoogleCloudContactcenterinsightsV1ListIssueModelsResponse;
import org.openapitools.client.model.GoogleCloudContactcenterinsightsV1ListIssuesResponse;
import org.openapitools.client.model.GoogleCloudContactcenterinsightsV1ListPhraseMatchersResponse;
import org.openapitools.client.model.GoogleCloudContactcenterinsightsV1ListViewsResponse;
import org.openapitools.client.model.GoogleCloudContactcenterinsightsV1PhraseMatcher;
import org.openapitools.client.model.GoogleCloudContactcenterinsightsV1UndeployIssueModelRequest;
import org.openapitools.client.model.GoogleCloudContactcenterinsightsV1UploadConversationRequest;
import org.openapitools.client.model.GoogleCloudContactcenterinsightsV1View;
import org.openapitools.client.model.GoogleLongrunningListOperationsResponse;
import org.openapitools.client.model.GoogleLongrunningOperation;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProjectsApi
 */
@Disabled
public class ProjectsApiTest {

    private final ProjectsApi api = new ProjectsApi();

    /**
     * Creates an analysis. The long running operation is done when the analysis has completed.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contactcenterinsightsProjectsLocationsConversationsAnalysesCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleCloudContactcenterinsightsV1Analysis googleCloudContactcenterinsightsV1Analysis = null;
        GoogleLongrunningOperation response = api.contactcenterinsightsProjectsLocationsConversationsAnalysesCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleCloudContactcenterinsightsV1Analysis);
        // TODO: test validations
    }

    /**
     * Lists analyses.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contactcenterinsightsProjectsLocationsConversationsAnalysesListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        Integer pageSize = null;
        String pageToken = null;
        GoogleCloudContactcenterinsightsV1ListAnalysesResponse response = api.contactcenterinsightsProjectsLocationsConversationsAnalysesList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Analyzes multiple conversations in a single request.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contactcenterinsightsProjectsLocationsConversationsBulkAnalyzeTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleCloudContactcenterinsightsV1BulkAnalyzeConversationsRequest googleCloudContactcenterinsightsV1BulkAnalyzeConversationsRequest = null;
        GoogleLongrunningOperation response = api.contactcenterinsightsProjectsLocationsConversationsBulkAnalyze(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleCloudContactcenterinsightsV1BulkAnalyzeConversationsRequest);
        // TODO: test validations
    }

    /**
     * Deletes multiple conversations in a single request.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contactcenterinsightsProjectsLocationsConversationsBulkDeleteTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleCloudContactcenterinsightsV1BulkDeleteConversationsRequest googleCloudContactcenterinsightsV1BulkDeleteConversationsRequest = null;
        GoogleLongrunningOperation response = api.contactcenterinsightsProjectsLocationsConversationsBulkDelete(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleCloudContactcenterinsightsV1BulkDeleteConversationsRequest);
        // TODO: test validations
    }

    /**
     * Gets conversation statistics.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contactcenterinsightsProjectsLocationsConversationsCalculateStatsTest() throws ApiException {
        String location = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        GoogleCloudContactcenterinsightsV1CalculateStatsResponse response = api.contactcenterinsightsProjectsLocationsConversationsCalculateStats(location, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter);
        // TODO: test validations
    }

    /**
     * Creates a conversation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contactcenterinsightsProjectsLocationsConversationsCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String conversationId = null;
        GoogleCloudContactcenterinsightsV1Conversation googleCloudContactcenterinsightsV1Conversation = null;
        GoogleCloudContactcenterinsightsV1Conversation response = api.contactcenterinsightsProjectsLocationsConversationsCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, conversationId, googleCloudContactcenterinsightsV1Conversation);
        // TODO: test validations
    }

    /**
     * Imports conversations and processes them according to the user&#39;s configuration.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contactcenterinsightsProjectsLocationsConversationsIngestTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleCloudContactcenterinsightsV1IngestConversationsRequest googleCloudContactcenterinsightsV1IngestConversationsRequest = null;
        GoogleLongrunningOperation response = api.contactcenterinsightsProjectsLocationsConversationsIngest(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleCloudContactcenterinsightsV1IngestConversationsRequest);
        // TODO: test validations
    }

    /**
     * Lists conversations.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contactcenterinsightsProjectsLocationsConversationsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        String orderBy = null;
        Integer pageSize = null;
        String pageToken = null;
        String view = null;
        GoogleCloudContactcenterinsightsV1ListConversationsResponse response = api.contactcenterinsightsProjectsLocationsConversationsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, orderBy, pageSize, pageToken, view);
        // TODO: test validations
    }

    /**
     * Create a longrunning conversation upload operation. This method differs from CreateConversation by allowing audio transcription and optional DLP redaction.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contactcenterinsightsProjectsLocationsConversationsUploadTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleCloudContactcenterinsightsV1UploadConversationRequest googleCloudContactcenterinsightsV1UploadConversationRequest = null;
        GoogleLongrunningOperation response = api.contactcenterinsightsProjectsLocationsConversationsUpload(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleCloudContactcenterinsightsV1UploadConversationRequest);
        // TODO: test validations
    }

    /**
     * Export insights data to a destination defined in the request body.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contactcenterinsightsProjectsLocationsInsightsdataExportTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleCloudContactcenterinsightsV1ExportInsightsDataRequest googleCloudContactcenterinsightsV1ExportInsightsDataRequest = null;
        GoogleLongrunningOperation response = api.contactcenterinsightsProjectsLocationsInsightsdataExport(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleCloudContactcenterinsightsV1ExportInsightsDataRequest);
        // TODO: test validations
    }

    /**
     * Gets an issue model&#39;s statistics.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contactcenterinsightsProjectsLocationsIssueModelsCalculateIssueModelStatsTest() throws ApiException {
        String issueModel = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleCloudContactcenterinsightsV1CalculateIssueModelStatsResponse response = api.contactcenterinsightsProjectsLocationsIssueModelsCalculateIssueModelStats(issueModel, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Creates an issue model.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contactcenterinsightsProjectsLocationsIssueModelsCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleCloudContactcenterinsightsV1IssueModel googleCloudContactcenterinsightsV1IssueModel = null;
        GoogleLongrunningOperation response = api.contactcenterinsightsProjectsLocationsIssueModelsCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleCloudContactcenterinsightsV1IssueModel);
        // TODO: test validations
    }

    /**
     * Deploys an issue model. Returns an error if a model is already deployed. An issue model can only be used in analysis after it has been deployed.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contactcenterinsightsProjectsLocationsIssueModelsDeployTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleCloudContactcenterinsightsV1DeployIssueModelRequest googleCloudContactcenterinsightsV1DeployIssueModelRequest = null;
        GoogleLongrunningOperation response = api.contactcenterinsightsProjectsLocationsIssueModelsDeploy(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleCloudContactcenterinsightsV1DeployIssueModelRequest);
        // TODO: test validations
    }

    /**
     * Exports an issue model to the provided destination.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contactcenterinsightsProjectsLocationsIssueModelsExportTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleCloudContactcenterinsightsV1ExportIssueModelRequest googleCloudContactcenterinsightsV1ExportIssueModelRequest = null;
        GoogleLongrunningOperation response = api.contactcenterinsightsProjectsLocationsIssueModelsExport(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleCloudContactcenterinsightsV1ExportIssueModelRequest);
        // TODO: test validations
    }

    /**
     * Imports an issue model from a Cloud Storage bucket.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contactcenterinsightsProjectsLocationsIssueModelsImportTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleCloudContactcenterinsightsV1ImportIssueModelRequest googleCloudContactcenterinsightsV1ImportIssueModelRequest = null;
        GoogleLongrunningOperation response = api.contactcenterinsightsProjectsLocationsIssueModelsImport(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleCloudContactcenterinsightsV1ImportIssueModelRequest);
        // TODO: test validations
    }

    /**
     * Lists issues.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contactcenterinsightsProjectsLocationsIssueModelsIssuesListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleCloudContactcenterinsightsV1ListIssuesResponse response = api.contactcenterinsightsProjectsLocationsIssueModelsIssuesList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Lists issue models.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contactcenterinsightsProjectsLocationsIssueModelsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleCloudContactcenterinsightsV1ListIssueModelsResponse response = api.contactcenterinsightsProjectsLocationsIssueModelsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Undeploys an issue model. An issue model can not be used in analysis after it has been undeployed.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contactcenterinsightsProjectsLocationsIssueModelsUndeployTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleCloudContactcenterinsightsV1UndeployIssueModelRequest googleCloudContactcenterinsightsV1UndeployIssueModelRequest = null;
        GoogleLongrunningOperation response = api.contactcenterinsightsProjectsLocationsIssueModelsUndeploy(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleCloudContactcenterinsightsV1UndeployIssueModelRequest);
        // TODO: test validations
    }

    /**
     * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn&#39;t support this method, it returns &#x60;google.rpc.Code.UNIMPLEMENTED&#x60;. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to &#x60;Code.CANCELLED&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contactcenterinsightsProjectsLocationsOperationsCancelTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object response = api.contactcenterinsightsProjectsLocationsOperationsCancel(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Lists operations that match the specified filter in the request. If the server doesn&#39;t support this method, it returns &#x60;UNIMPLEMENTED&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contactcenterinsightsProjectsLocationsOperationsListTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        Integer pageSize = null;
        String pageToken = null;
        GoogleLongrunningListOperationsResponse response = api.contactcenterinsightsProjectsLocationsOperationsList(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Creates a phrase matcher.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contactcenterinsightsProjectsLocationsPhraseMatchersCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleCloudContactcenterinsightsV1PhraseMatcher googleCloudContactcenterinsightsV1PhraseMatcher = null;
        GoogleCloudContactcenterinsightsV1PhraseMatcher response = api.contactcenterinsightsProjectsLocationsPhraseMatchersCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleCloudContactcenterinsightsV1PhraseMatcher);
        // TODO: test validations
    }

    /**
     * Lists phrase matchers.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contactcenterinsightsProjectsLocationsPhraseMatchersListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        Integer pageSize = null;
        String pageToken = null;
        GoogleCloudContactcenterinsightsV1ListPhraseMatchersResponse response = api.contactcenterinsightsProjectsLocationsPhraseMatchersList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Creates a view.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contactcenterinsightsProjectsLocationsViewsCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleCloudContactcenterinsightsV1View googleCloudContactcenterinsightsV1View = null;
        GoogleCloudContactcenterinsightsV1View response = api.contactcenterinsightsProjectsLocationsViewsCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleCloudContactcenterinsightsV1View);
        // TODO: test validations
    }

    /**
     * Deletes a view.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contactcenterinsightsProjectsLocationsViewsDeleteTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Boolean force = null;
        Object response = api.contactcenterinsightsProjectsLocationsViewsDelete(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, force);
        // TODO: test validations
    }

    /**
     * Gets a view.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contactcenterinsightsProjectsLocationsViewsGetTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String view = null;
        GoogleCloudContactcenterinsightsV1View response = api.contactcenterinsightsProjectsLocationsViewsGet(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, view);
        // TODO: test validations
    }

    /**
     * Lists views.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contactcenterinsightsProjectsLocationsViewsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        GoogleCloudContactcenterinsightsV1ListViewsResponse response = api.contactcenterinsightsProjectsLocationsViewsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Updates a view.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contactcenterinsightsProjectsLocationsViewsPatchTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String updateMask = null;
        GoogleCloudContactcenterinsightsV1View googleCloudContactcenterinsightsV1View = null;
        GoogleCloudContactcenterinsightsV1View response = api.contactcenterinsightsProjectsLocationsViewsPatch(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, updateMask, googleCloudContactcenterinsightsV1View);
        // TODO: test validations
    }

}
