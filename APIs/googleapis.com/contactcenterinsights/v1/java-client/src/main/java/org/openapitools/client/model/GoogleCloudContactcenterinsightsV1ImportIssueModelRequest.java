/*
 * Contact Center AI Insights API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.GoogleCloudContactcenterinsightsV1ImportIssueModelRequestGcsSource;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Request to import an issue model.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:46:41.653092-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudContactcenterinsightsV1ImportIssueModelRequest {
  public static final String SERIALIZED_NAME_CREATE_NEW_MODEL = "createNewModel";
  @SerializedName(SERIALIZED_NAME_CREATE_NEW_MODEL)
  private Boolean createNewModel;

  public static final String SERIALIZED_NAME_GCS_SOURCE = "gcsSource";
  @SerializedName(SERIALIZED_NAME_GCS_SOURCE)
  private GoogleCloudContactcenterinsightsV1ImportIssueModelRequestGcsSource gcsSource;

  public static final String SERIALIZED_NAME_PARENT = "parent";
  @SerializedName(SERIALIZED_NAME_PARENT)
  private String parent;

  public GoogleCloudContactcenterinsightsV1ImportIssueModelRequest() {
  }

  public GoogleCloudContactcenterinsightsV1ImportIssueModelRequest createNewModel(Boolean createNewModel) {
    this.createNewModel = createNewModel;
    return this;
  }

  /**
   * Optional. If set to true, will create a new issue model from the imported file with randomly generated IDs for the issue model and corresponding issues. Otherwise, replaces an existing model with the same ID as the file.
   * @return createNewModel
   */
  @javax.annotation.Nullable
  public Boolean getCreateNewModel() {
    return createNewModel;
  }

  public void setCreateNewModel(Boolean createNewModel) {
    this.createNewModel = createNewModel;
  }


  public GoogleCloudContactcenterinsightsV1ImportIssueModelRequest gcsSource(GoogleCloudContactcenterinsightsV1ImportIssueModelRequestGcsSource gcsSource) {
    this.gcsSource = gcsSource;
    return this;
  }

  /**
   * Get gcsSource
   * @return gcsSource
   */
  @javax.annotation.Nullable
  public GoogleCloudContactcenterinsightsV1ImportIssueModelRequestGcsSource getGcsSource() {
    return gcsSource;
  }

  public void setGcsSource(GoogleCloudContactcenterinsightsV1ImportIssueModelRequestGcsSource gcsSource) {
    this.gcsSource = gcsSource;
  }


  public GoogleCloudContactcenterinsightsV1ImportIssueModelRequest parent(String parent) {
    this.parent = parent;
    return this;
  }

  /**
   * Required. The parent resource of the issue model.
   * @return parent
   */
  @javax.annotation.Nullable
  public String getParent() {
    return parent;
  }

  public void setParent(String parent) {
    this.parent = parent;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudContactcenterinsightsV1ImportIssueModelRequest googleCloudContactcenterinsightsV1ImportIssueModelRequest = (GoogleCloudContactcenterinsightsV1ImportIssueModelRequest) o;
    return Objects.equals(this.createNewModel, googleCloudContactcenterinsightsV1ImportIssueModelRequest.createNewModel) &&
        Objects.equals(this.gcsSource, googleCloudContactcenterinsightsV1ImportIssueModelRequest.gcsSource) &&
        Objects.equals(this.parent, googleCloudContactcenterinsightsV1ImportIssueModelRequest.parent);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createNewModel, gcsSource, parent);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudContactcenterinsightsV1ImportIssueModelRequest {\n");
    sb.append("    createNewModel: ").append(toIndentedString(createNewModel)).append("\n");
    sb.append("    gcsSource: ").append(toIndentedString(gcsSource)).append("\n");
    sb.append("    parent: ").append(toIndentedString(parent)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("createNewModel");
    openapiFields.add("gcsSource");
    openapiFields.add("parent");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudContactcenterinsightsV1ImportIssueModelRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudContactcenterinsightsV1ImportIssueModelRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudContactcenterinsightsV1ImportIssueModelRequest is not found in the empty JSON string", GoogleCloudContactcenterinsightsV1ImportIssueModelRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudContactcenterinsightsV1ImportIssueModelRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudContactcenterinsightsV1ImportIssueModelRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `gcsSource`
      if (jsonObj.get("gcsSource") != null && !jsonObj.get("gcsSource").isJsonNull()) {
        GoogleCloudContactcenterinsightsV1ImportIssueModelRequestGcsSource.validateJsonElement(jsonObj.get("gcsSource"));
      }
      if ((jsonObj.get("parent") != null && !jsonObj.get("parent").isJsonNull()) && !jsonObj.get("parent").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parent` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parent").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudContactcenterinsightsV1ImportIssueModelRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudContactcenterinsightsV1ImportIssueModelRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudContactcenterinsightsV1ImportIssueModelRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudContactcenterinsightsV1ImportIssueModelRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudContactcenterinsightsV1ImportIssueModelRequest>() {
           @Override
           public void write(JsonWriter out, GoogleCloudContactcenterinsightsV1ImportIssueModelRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudContactcenterinsightsV1ImportIssueModelRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudContactcenterinsightsV1ImportIssueModelRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudContactcenterinsightsV1ImportIssueModelRequest
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudContactcenterinsightsV1ImportIssueModelRequest
   */
  public static GoogleCloudContactcenterinsightsV1ImportIssueModelRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudContactcenterinsightsV1ImportIssueModelRequest.class);
  }

  /**
   * Convert an instance of GoogleCloudContactcenterinsightsV1ImportIssueModelRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

