/*
 * Contact Center AI Insights API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GoogleCloudContactcenterinsightsV1PhraseMatchRuleGroup;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The phrase matcher resource.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:46:41.653092-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudContactcenterinsightsV1PhraseMatcher {
  public static final String SERIALIZED_NAME_ACTIVATION_UPDATE_TIME = "activationUpdateTime";
  @SerializedName(SERIALIZED_NAME_ACTIVATION_UPDATE_TIME)
  private String activationUpdateTime;

  public static final String SERIALIZED_NAME_ACTIVE = "active";
  @SerializedName(SERIALIZED_NAME_ACTIVE)
  private Boolean active;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PHRASE_MATCH_RULE_GROUPS = "phraseMatchRuleGroups";
  @SerializedName(SERIALIZED_NAME_PHRASE_MATCH_RULE_GROUPS)
  private List<GoogleCloudContactcenterinsightsV1PhraseMatchRuleGroup> phraseMatchRuleGroups = new ArrayList<>();

  public static final String SERIALIZED_NAME_REVISION_CREATE_TIME = "revisionCreateTime";
  @SerializedName(SERIALIZED_NAME_REVISION_CREATE_TIME)
  private String revisionCreateTime;

  public static final String SERIALIZED_NAME_REVISION_ID = "revisionId";
  @SerializedName(SERIALIZED_NAME_REVISION_ID)
  private String revisionId;

  /**
   * The role whose utterances the phrase matcher should be matched against. If the role is ROLE_UNSPECIFIED it will be matched against any utterances in the transcript.
   */
  @JsonAdapter(RoleMatchEnum.Adapter.class)
  public enum RoleMatchEnum {
    ROLE_UNSPECIFIED("ROLE_UNSPECIFIED"),
    
    HUMAN_AGENT("HUMAN_AGENT"),
    
    AUTOMATED_AGENT("AUTOMATED_AGENT"),
    
    END_USER("END_USER"),
    
    ANY_AGENT("ANY_AGENT");

    private String value;

    RoleMatchEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RoleMatchEnum fromValue(String value) {
      for (RoleMatchEnum b : RoleMatchEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RoleMatchEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RoleMatchEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RoleMatchEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RoleMatchEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RoleMatchEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ROLE_MATCH = "roleMatch";
  @SerializedName(SERIALIZED_NAME_ROLE_MATCH)
  private RoleMatchEnum roleMatch;

  /**
   * Required. The type of this phrase matcher.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    PHRASE_MATCHER_TYPE_UNSPECIFIED("PHRASE_MATCHER_TYPE_UNSPECIFIED"),
    
    ALL_OF("ALL_OF"),
    
    ANY_OF("ANY_OF");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_UPDATE_TIME = "updateTime";
  @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
  private String updateTime;

  public static final String SERIALIZED_NAME_VERSION_TAG = "versionTag";
  @SerializedName(SERIALIZED_NAME_VERSION_TAG)
  private String versionTag;

  public GoogleCloudContactcenterinsightsV1PhraseMatcher() {
  }

  public GoogleCloudContactcenterinsightsV1PhraseMatcher(
     String activationUpdateTime, 
     String revisionCreateTime, 
     String revisionId, 
     String updateTime
  ) {
    this();
    this.activationUpdateTime = activationUpdateTime;
    this.revisionCreateTime = revisionCreateTime;
    this.revisionId = revisionId;
    this.updateTime = updateTime;
  }

  /**
   * Output only. The most recent time at which the activation status was updated.
   * @return activationUpdateTime
   */
  @javax.annotation.Nullable
  public String getActivationUpdateTime() {
    return activationUpdateTime;
  }



  public GoogleCloudContactcenterinsightsV1PhraseMatcher active(Boolean active) {
    this.active = active;
    return this;
  }

  /**
   * Applies the phrase matcher only when it is active.
   * @return active
   */
  @javax.annotation.Nullable
  public Boolean getActive() {
    return active;
  }

  public void setActive(Boolean active) {
    this.active = active;
  }


  public GoogleCloudContactcenterinsightsV1PhraseMatcher displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * The human-readable name of the phrase matcher.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public GoogleCloudContactcenterinsightsV1PhraseMatcher name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The resource name of the phrase matcher. Format: projects/{project}/locations/{location}/phraseMatchers/{phrase_matcher}
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public GoogleCloudContactcenterinsightsV1PhraseMatcher phraseMatchRuleGroups(List<GoogleCloudContactcenterinsightsV1PhraseMatchRuleGroup> phraseMatchRuleGroups) {
    this.phraseMatchRuleGroups = phraseMatchRuleGroups;
    return this;
  }

  public GoogleCloudContactcenterinsightsV1PhraseMatcher addPhraseMatchRuleGroupsItem(GoogleCloudContactcenterinsightsV1PhraseMatchRuleGroup phraseMatchRuleGroupsItem) {
    if (this.phraseMatchRuleGroups == null) {
      this.phraseMatchRuleGroups = new ArrayList<>();
    }
    this.phraseMatchRuleGroups.add(phraseMatchRuleGroupsItem);
    return this;
  }

  /**
   * A list of phase match rule groups that are included in this matcher.
   * @return phraseMatchRuleGroups
   */
  @javax.annotation.Nullable
  public List<GoogleCloudContactcenterinsightsV1PhraseMatchRuleGroup> getPhraseMatchRuleGroups() {
    return phraseMatchRuleGroups;
  }

  public void setPhraseMatchRuleGroups(List<GoogleCloudContactcenterinsightsV1PhraseMatchRuleGroup> phraseMatchRuleGroups) {
    this.phraseMatchRuleGroups = phraseMatchRuleGroups;
  }


  /**
   * Output only. The timestamp of when the revision was created. It is also the create time when a new matcher is added.
   * @return revisionCreateTime
   */
  @javax.annotation.Nullable
  public String getRevisionCreateTime() {
    return revisionCreateTime;
  }



  /**
   * Output only. Immutable. The revision ID of the phrase matcher. A new revision is committed whenever the matcher is changed, except when it is activated or deactivated. A server generated random ID will be used. Example: locations/global/phraseMatchers/my-first-matcher@1234567
   * @return revisionId
   */
  @javax.annotation.Nullable
  public String getRevisionId() {
    return revisionId;
  }



  public GoogleCloudContactcenterinsightsV1PhraseMatcher roleMatch(RoleMatchEnum roleMatch) {
    this.roleMatch = roleMatch;
    return this;
  }

  /**
   * The role whose utterances the phrase matcher should be matched against. If the role is ROLE_UNSPECIFIED it will be matched against any utterances in the transcript.
   * @return roleMatch
   */
  @javax.annotation.Nullable
  public RoleMatchEnum getRoleMatch() {
    return roleMatch;
  }

  public void setRoleMatch(RoleMatchEnum roleMatch) {
    this.roleMatch = roleMatch;
  }


  public GoogleCloudContactcenterinsightsV1PhraseMatcher type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * Required. The type of this phrase matcher.
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }


  /**
   * Output only. The most recent time at which the phrase matcher was updated.
   * @return updateTime
   */
  @javax.annotation.Nullable
  public String getUpdateTime() {
    return updateTime;
  }



  public GoogleCloudContactcenterinsightsV1PhraseMatcher versionTag(String versionTag) {
    this.versionTag = versionTag;
    return this;
  }

  /**
   * The customized version tag to use for the phrase matcher. If not specified, it will default to &#x60;revision_id&#x60;.
   * @return versionTag
   */
  @javax.annotation.Nullable
  public String getVersionTag() {
    return versionTag;
  }

  public void setVersionTag(String versionTag) {
    this.versionTag = versionTag;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudContactcenterinsightsV1PhraseMatcher googleCloudContactcenterinsightsV1PhraseMatcher = (GoogleCloudContactcenterinsightsV1PhraseMatcher) o;
    return Objects.equals(this.activationUpdateTime, googleCloudContactcenterinsightsV1PhraseMatcher.activationUpdateTime) &&
        Objects.equals(this.active, googleCloudContactcenterinsightsV1PhraseMatcher.active) &&
        Objects.equals(this.displayName, googleCloudContactcenterinsightsV1PhraseMatcher.displayName) &&
        Objects.equals(this.name, googleCloudContactcenterinsightsV1PhraseMatcher.name) &&
        Objects.equals(this.phraseMatchRuleGroups, googleCloudContactcenterinsightsV1PhraseMatcher.phraseMatchRuleGroups) &&
        Objects.equals(this.revisionCreateTime, googleCloudContactcenterinsightsV1PhraseMatcher.revisionCreateTime) &&
        Objects.equals(this.revisionId, googleCloudContactcenterinsightsV1PhraseMatcher.revisionId) &&
        Objects.equals(this.roleMatch, googleCloudContactcenterinsightsV1PhraseMatcher.roleMatch) &&
        Objects.equals(this.type, googleCloudContactcenterinsightsV1PhraseMatcher.type) &&
        Objects.equals(this.updateTime, googleCloudContactcenterinsightsV1PhraseMatcher.updateTime) &&
        Objects.equals(this.versionTag, googleCloudContactcenterinsightsV1PhraseMatcher.versionTag);
  }

  @Override
  public int hashCode() {
    return Objects.hash(activationUpdateTime, active, displayName, name, phraseMatchRuleGroups, revisionCreateTime, revisionId, roleMatch, type, updateTime, versionTag);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudContactcenterinsightsV1PhraseMatcher {\n");
    sb.append("    activationUpdateTime: ").append(toIndentedString(activationUpdateTime)).append("\n");
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    phraseMatchRuleGroups: ").append(toIndentedString(phraseMatchRuleGroups)).append("\n");
    sb.append("    revisionCreateTime: ").append(toIndentedString(revisionCreateTime)).append("\n");
    sb.append("    revisionId: ").append(toIndentedString(revisionId)).append("\n");
    sb.append("    roleMatch: ").append(toIndentedString(roleMatch)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("    versionTag: ").append(toIndentedString(versionTag)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("activationUpdateTime");
    openapiFields.add("active");
    openapiFields.add("displayName");
    openapiFields.add("name");
    openapiFields.add("phraseMatchRuleGroups");
    openapiFields.add("revisionCreateTime");
    openapiFields.add("revisionId");
    openapiFields.add("roleMatch");
    openapiFields.add("type");
    openapiFields.add("updateTime");
    openapiFields.add("versionTag");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudContactcenterinsightsV1PhraseMatcher
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudContactcenterinsightsV1PhraseMatcher.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudContactcenterinsightsV1PhraseMatcher is not found in the empty JSON string", GoogleCloudContactcenterinsightsV1PhraseMatcher.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudContactcenterinsightsV1PhraseMatcher.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudContactcenterinsightsV1PhraseMatcher` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("activationUpdateTime") != null && !jsonObj.get("activationUpdateTime").isJsonNull()) && !jsonObj.get("activationUpdateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `activationUpdateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("activationUpdateTime").toString()));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (jsonObj.get("phraseMatchRuleGroups") != null && !jsonObj.get("phraseMatchRuleGroups").isJsonNull()) {
        JsonArray jsonArrayphraseMatchRuleGroups = jsonObj.getAsJsonArray("phraseMatchRuleGroups");
        if (jsonArrayphraseMatchRuleGroups != null) {
          // ensure the json data is an array
          if (!jsonObj.get("phraseMatchRuleGroups").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `phraseMatchRuleGroups` to be an array in the JSON string but got `%s`", jsonObj.get("phraseMatchRuleGroups").toString()));
          }

          // validate the optional field `phraseMatchRuleGroups` (array)
          for (int i = 0; i < jsonArrayphraseMatchRuleGroups.size(); i++) {
            GoogleCloudContactcenterinsightsV1PhraseMatchRuleGroup.validateJsonElement(jsonArrayphraseMatchRuleGroups.get(i));
          };
        }
      }
      if ((jsonObj.get("revisionCreateTime") != null && !jsonObj.get("revisionCreateTime").isJsonNull()) && !jsonObj.get("revisionCreateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `revisionCreateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("revisionCreateTime").toString()));
      }
      if ((jsonObj.get("revisionId") != null && !jsonObj.get("revisionId").isJsonNull()) && !jsonObj.get("revisionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `revisionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("revisionId").toString()));
      }
      if ((jsonObj.get("roleMatch") != null && !jsonObj.get("roleMatch").isJsonNull()) && !jsonObj.get("roleMatch").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `roleMatch` to be a primitive type in the JSON string but got `%s`", jsonObj.get("roleMatch").toString()));
      }
      // validate the optional field `roleMatch`
      if (jsonObj.get("roleMatch") != null && !jsonObj.get("roleMatch").isJsonNull()) {
        RoleMatchEnum.validateJsonElement(jsonObj.get("roleMatch"));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
      if ((jsonObj.get("updateTime") != null && !jsonObj.get("updateTime").isJsonNull()) && !jsonObj.get("updateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updateTime").toString()));
      }
      if ((jsonObj.get("versionTag") != null && !jsonObj.get("versionTag").isJsonNull()) && !jsonObj.get("versionTag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `versionTag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("versionTag").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudContactcenterinsightsV1PhraseMatcher.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudContactcenterinsightsV1PhraseMatcher' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudContactcenterinsightsV1PhraseMatcher> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudContactcenterinsightsV1PhraseMatcher.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudContactcenterinsightsV1PhraseMatcher>() {
           @Override
           public void write(JsonWriter out, GoogleCloudContactcenterinsightsV1PhraseMatcher value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudContactcenterinsightsV1PhraseMatcher read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudContactcenterinsightsV1PhraseMatcher given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudContactcenterinsightsV1PhraseMatcher
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudContactcenterinsightsV1PhraseMatcher
   */
  public static GoogleCloudContactcenterinsightsV1PhraseMatcher fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudContactcenterinsightsV1PhraseMatcher.class);
  }

  /**
   * Convert an instance of GoogleCloudContactcenterinsightsV1PhraseMatcher to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

