/*
 * Contact Center AI Insights API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.GoogleCloudContactcenterinsightsV1alpha1CallAnnotation;
import org.openapitools.client.model.GoogleCloudContactcenterinsightsV1alpha1ConversationLevelSentiment;
import org.openapitools.client.model.GoogleCloudContactcenterinsightsV1alpha1Entity;
import org.openapitools.client.model.GoogleCloudContactcenterinsightsV1alpha1Intent;
import org.openapitools.client.model.GoogleCloudContactcenterinsightsV1alpha1IssueModelResult;
import org.openapitools.client.model.GoogleCloudContactcenterinsightsV1alpha1PhraseMatchData;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Call-specific metadata created during analysis.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:46:41.653092-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudContactcenterinsightsV1alpha1AnalysisResultCallAnalysisMetadata {
  public static final String SERIALIZED_NAME_ANNOTATIONS = "annotations";
  @SerializedName(SERIALIZED_NAME_ANNOTATIONS)
  private List<GoogleCloudContactcenterinsightsV1alpha1CallAnnotation> annotations = new ArrayList<>();

  public static final String SERIALIZED_NAME_ENTITIES = "entities";
  @SerializedName(SERIALIZED_NAME_ENTITIES)
  private Map<String, GoogleCloudContactcenterinsightsV1alpha1Entity> entities = new HashMap<>();

  public static final String SERIALIZED_NAME_INTENTS = "intents";
  @SerializedName(SERIALIZED_NAME_INTENTS)
  private Map<String, GoogleCloudContactcenterinsightsV1alpha1Intent> intents = new HashMap<>();

  public static final String SERIALIZED_NAME_ISSUE_MODEL_RESULT = "issueModelResult";
  @SerializedName(SERIALIZED_NAME_ISSUE_MODEL_RESULT)
  private GoogleCloudContactcenterinsightsV1alpha1IssueModelResult issueModelResult;

  public static final String SERIALIZED_NAME_PHRASE_MATCHERS = "phraseMatchers";
  @SerializedName(SERIALIZED_NAME_PHRASE_MATCHERS)
  private Map<String, GoogleCloudContactcenterinsightsV1alpha1PhraseMatchData> phraseMatchers = new HashMap<>();

  public static final String SERIALIZED_NAME_SENTIMENTS = "sentiments";
  @SerializedName(SERIALIZED_NAME_SENTIMENTS)
  private List<GoogleCloudContactcenterinsightsV1alpha1ConversationLevelSentiment> sentiments = new ArrayList<>();

  public GoogleCloudContactcenterinsightsV1alpha1AnalysisResultCallAnalysisMetadata() {
  }

  public GoogleCloudContactcenterinsightsV1alpha1AnalysisResultCallAnalysisMetadata annotations(List<GoogleCloudContactcenterinsightsV1alpha1CallAnnotation> annotations) {
    this.annotations = annotations;
    return this;
  }

  public GoogleCloudContactcenterinsightsV1alpha1AnalysisResultCallAnalysisMetadata addAnnotationsItem(GoogleCloudContactcenterinsightsV1alpha1CallAnnotation annotationsItem) {
    if (this.annotations == null) {
      this.annotations = new ArrayList<>();
    }
    this.annotations.add(annotationsItem);
    return this;
  }

  /**
   * A list of call annotations that apply to this call.
   * @return annotations
   */
  @javax.annotation.Nullable
  public List<GoogleCloudContactcenterinsightsV1alpha1CallAnnotation> getAnnotations() {
    return annotations;
  }

  public void setAnnotations(List<GoogleCloudContactcenterinsightsV1alpha1CallAnnotation> annotations) {
    this.annotations = annotations;
  }


  public GoogleCloudContactcenterinsightsV1alpha1AnalysisResultCallAnalysisMetadata entities(Map<String, GoogleCloudContactcenterinsightsV1alpha1Entity> entities) {
    this.entities = entities;
    return this;
  }

  public GoogleCloudContactcenterinsightsV1alpha1AnalysisResultCallAnalysisMetadata putEntitiesItem(String key, GoogleCloudContactcenterinsightsV1alpha1Entity entitiesItem) {
    if (this.entities == null) {
      this.entities = new HashMap<>();
    }
    this.entities.put(key, entitiesItem);
    return this;
  }

  /**
   * All the entities in the call.
   * @return entities
   */
  @javax.annotation.Nullable
  public Map<String, GoogleCloudContactcenterinsightsV1alpha1Entity> getEntities() {
    return entities;
  }

  public void setEntities(Map<String, GoogleCloudContactcenterinsightsV1alpha1Entity> entities) {
    this.entities = entities;
  }


  public GoogleCloudContactcenterinsightsV1alpha1AnalysisResultCallAnalysisMetadata intents(Map<String, GoogleCloudContactcenterinsightsV1alpha1Intent> intents) {
    this.intents = intents;
    return this;
  }

  public GoogleCloudContactcenterinsightsV1alpha1AnalysisResultCallAnalysisMetadata putIntentsItem(String key, GoogleCloudContactcenterinsightsV1alpha1Intent intentsItem) {
    if (this.intents == null) {
      this.intents = new HashMap<>();
    }
    this.intents.put(key, intentsItem);
    return this;
  }

  /**
   * All the matched intents in the call.
   * @return intents
   */
  @javax.annotation.Nullable
  public Map<String, GoogleCloudContactcenterinsightsV1alpha1Intent> getIntents() {
    return intents;
  }

  public void setIntents(Map<String, GoogleCloudContactcenterinsightsV1alpha1Intent> intents) {
    this.intents = intents;
  }


  public GoogleCloudContactcenterinsightsV1alpha1AnalysisResultCallAnalysisMetadata issueModelResult(GoogleCloudContactcenterinsightsV1alpha1IssueModelResult issueModelResult) {
    this.issueModelResult = issueModelResult;
    return this;
  }

  /**
   * Get issueModelResult
   * @return issueModelResult
   */
  @javax.annotation.Nullable
  public GoogleCloudContactcenterinsightsV1alpha1IssueModelResult getIssueModelResult() {
    return issueModelResult;
  }

  public void setIssueModelResult(GoogleCloudContactcenterinsightsV1alpha1IssueModelResult issueModelResult) {
    this.issueModelResult = issueModelResult;
  }


  public GoogleCloudContactcenterinsightsV1alpha1AnalysisResultCallAnalysisMetadata phraseMatchers(Map<String, GoogleCloudContactcenterinsightsV1alpha1PhraseMatchData> phraseMatchers) {
    this.phraseMatchers = phraseMatchers;
    return this;
  }

  public GoogleCloudContactcenterinsightsV1alpha1AnalysisResultCallAnalysisMetadata putPhraseMatchersItem(String key, GoogleCloudContactcenterinsightsV1alpha1PhraseMatchData phraseMatchersItem) {
    if (this.phraseMatchers == null) {
      this.phraseMatchers = new HashMap<>();
    }
    this.phraseMatchers.put(key, phraseMatchersItem);
    return this;
  }

  /**
   * All the matched phrase matchers in the call.
   * @return phraseMatchers
   */
  @javax.annotation.Nullable
  public Map<String, GoogleCloudContactcenterinsightsV1alpha1PhraseMatchData> getPhraseMatchers() {
    return phraseMatchers;
  }

  public void setPhraseMatchers(Map<String, GoogleCloudContactcenterinsightsV1alpha1PhraseMatchData> phraseMatchers) {
    this.phraseMatchers = phraseMatchers;
  }


  public GoogleCloudContactcenterinsightsV1alpha1AnalysisResultCallAnalysisMetadata sentiments(List<GoogleCloudContactcenterinsightsV1alpha1ConversationLevelSentiment> sentiments) {
    this.sentiments = sentiments;
    return this;
  }

  public GoogleCloudContactcenterinsightsV1alpha1AnalysisResultCallAnalysisMetadata addSentimentsItem(GoogleCloudContactcenterinsightsV1alpha1ConversationLevelSentiment sentimentsItem) {
    if (this.sentiments == null) {
      this.sentiments = new ArrayList<>();
    }
    this.sentiments.add(sentimentsItem);
    return this;
  }

  /**
   * Overall conversation-level sentiment for each channel of the call.
   * @return sentiments
   */
  @javax.annotation.Nullable
  public List<GoogleCloudContactcenterinsightsV1alpha1ConversationLevelSentiment> getSentiments() {
    return sentiments;
  }

  public void setSentiments(List<GoogleCloudContactcenterinsightsV1alpha1ConversationLevelSentiment> sentiments) {
    this.sentiments = sentiments;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudContactcenterinsightsV1alpha1AnalysisResultCallAnalysisMetadata googleCloudContactcenterinsightsV1alpha1AnalysisResultCallAnalysisMetadata = (GoogleCloudContactcenterinsightsV1alpha1AnalysisResultCallAnalysisMetadata) o;
    return Objects.equals(this.annotations, googleCloudContactcenterinsightsV1alpha1AnalysisResultCallAnalysisMetadata.annotations) &&
        Objects.equals(this.entities, googleCloudContactcenterinsightsV1alpha1AnalysisResultCallAnalysisMetadata.entities) &&
        Objects.equals(this.intents, googleCloudContactcenterinsightsV1alpha1AnalysisResultCallAnalysisMetadata.intents) &&
        Objects.equals(this.issueModelResult, googleCloudContactcenterinsightsV1alpha1AnalysisResultCallAnalysisMetadata.issueModelResult) &&
        Objects.equals(this.phraseMatchers, googleCloudContactcenterinsightsV1alpha1AnalysisResultCallAnalysisMetadata.phraseMatchers) &&
        Objects.equals(this.sentiments, googleCloudContactcenterinsightsV1alpha1AnalysisResultCallAnalysisMetadata.sentiments);
  }

  @Override
  public int hashCode() {
    return Objects.hash(annotations, entities, intents, issueModelResult, phraseMatchers, sentiments);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudContactcenterinsightsV1alpha1AnalysisResultCallAnalysisMetadata {\n");
    sb.append("    annotations: ").append(toIndentedString(annotations)).append("\n");
    sb.append("    entities: ").append(toIndentedString(entities)).append("\n");
    sb.append("    intents: ").append(toIndentedString(intents)).append("\n");
    sb.append("    issueModelResult: ").append(toIndentedString(issueModelResult)).append("\n");
    sb.append("    phraseMatchers: ").append(toIndentedString(phraseMatchers)).append("\n");
    sb.append("    sentiments: ").append(toIndentedString(sentiments)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("annotations");
    openapiFields.add("entities");
    openapiFields.add("intents");
    openapiFields.add("issueModelResult");
    openapiFields.add("phraseMatchers");
    openapiFields.add("sentiments");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudContactcenterinsightsV1alpha1AnalysisResultCallAnalysisMetadata
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudContactcenterinsightsV1alpha1AnalysisResultCallAnalysisMetadata.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudContactcenterinsightsV1alpha1AnalysisResultCallAnalysisMetadata is not found in the empty JSON string", GoogleCloudContactcenterinsightsV1alpha1AnalysisResultCallAnalysisMetadata.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudContactcenterinsightsV1alpha1AnalysisResultCallAnalysisMetadata.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudContactcenterinsightsV1alpha1AnalysisResultCallAnalysisMetadata` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("annotations") != null && !jsonObj.get("annotations").isJsonNull()) {
        JsonArray jsonArrayannotations = jsonObj.getAsJsonArray("annotations");
        if (jsonArrayannotations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("annotations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `annotations` to be an array in the JSON string but got `%s`", jsonObj.get("annotations").toString()));
          }

          // validate the optional field `annotations` (array)
          for (int i = 0; i < jsonArrayannotations.size(); i++) {
            GoogleCloudContactcenterinsightsV1alpha1CallAnnotation.validateJsonElement(jsonArrayannotations.get(i));
          };
        }
      }
      // validate the optional field `issueModelResult`
      if (jsonObj.get("issueModelResult") != null && !jsonObj.get("issueModelResult").isJsonNull()) {
        GoogleCloudContactcenterinsightsV1alpha1IssueModelResult.validateJsonElement(jsonObj.get("issueModelResult"));
      }
      if (jsonObj.get("sentiments") != null && !jsonObj.get("sentiments").isJsonNull()) {
        JsonArray jsonArraysentiments = jsonObj.getAsJsonArray("sentiments");
        if (jsonArraysentiments != null) {
          // ensure the json data is an array
          if (!jsonObj.get("sentiments").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `sentiments` to be an array in the JSON string but got `%s`", jsonObj.get("sentiments").toString()));
          }

          // validate the optional field `sentiments` (array)
          for (int i = 0; i < jsonArraysentiments.size(); i++) {
            GoogleCloudContactcenterinsightsV1alpha1ConversationLevelSentiment.validateJsonElement(jsonArraysentiments.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudContactcenterinsightsV1alpha1AnalysisResultCallAnalysisMetadata.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudContactcenterinsightsV1alpha1AnalysisResultCallAnalysisMetadata' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudContactcenterinsightsV1alpha1AnalysisResultCallAnalysisMetadata> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudContactcenterinsightsV1alpha1AnalysisResultCallAnalysisMetadata.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudContactcenterinsightsV1alpha1AnalysisResultCallAnalysisMetadata>() {
           @Override
           public void write(JsonWriter out, GoogleCloudContactcenterinsightsV1alpha1AnalysisResultCallAnalysisMetadata value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudContactcenterinsightsV1alpha1AnalysisResultCallAnalysisMetadata read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudContactcenterinsightsV1alpha1AnalysisResultCallAnalysisMetadata given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudContactcenterinsightsV1alpha1AnalysisResultCallAnalysisMetadata
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudContactcenterinsightsV1alpha1AnalysisResultCallAnalysisMetadata
   */
  public static GoogleCloudContactcenterinsightsV1alpha1AnalysisResultCallAnalysisMetadata fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudContactcenterinsightsV1alpha1AnalysisResultCallAnalysisMetadata.class);
  }

  /**
   * Convert an instance of GoogleCloudContactcenterinsightsV1alpha1AnalysisResultCallAnalysisMetadata to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

