/*
 * Contact Center AI Insights API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Agent Assist Smart Reply data.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:46:41.653092-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudContactcenterinsightsV1SmartReplyData {
  public static final String SERIALIZED_NAME_CONFIDENCE_SCORE = "confidenceScore";
  @SerializedName(SERIALIZED_NAME_CONFIDENCE_SCORE)
  private Double confidenceScore;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private Map<String, String> metadata = new HashMap<>();

  public static final String SERIALIZED_NAME_QUERY_RECORD = "queryRecord";
  @SerializedName(SERIALIZED_NAME_QUERY_RECORD)
  private String queryRecord;

  public static final String SERIALIZED_NAME_REPLY = "reply";
  @SerializedName(SERIALIZED_NAME_REPLY)
  private String reply;

  public GoogleCloudContactcenterinsightsV1SmartReplyData() {
  }

  public GoogleCloudContactcenterinsightsV1SmartReplyData confidenceScore(Double confidenceScore) {
    this.confidenceScore = confidenceScore;
    return this;
  }

  /**
   * The system&#39;s confidence score that this reply is a good match for this conversation, ranging from 0.0 (completely uncertain) to 1.0 (completely certain).
   * @return confidenceScore
   */
  @javax.annotation.Nullable
  public Double getConfidenceScore() {
    return confidenceScore;
  }

  public void setConfidenceScore(Double confidenceScore) {
    this.confidenceScore = confidenceScore;
  }


  public GoogleCloudContactcenterinsightsV1SmartReplyData metadata(Map<String, String> metadata) {
    this.metadata = metadata;
    return this;
  }

  public GoogleCloudContactcenterinsightsV1SmartReplyData putMetadataItem(String key, String metadataItem) {
    if (this.metadata == null) {
      this.metadata = new HashMap<>();
    }
    this.metadata.put(key, metadataItem);
    return this;
  }

  /**
   * Map that contains metadata about the Smart Reply and the document from which it originates.
   * @return metadata
   */
  @javax.annotation.Nullable
  public Map<String, String> getMetadata() {
    return metadata;
  }

  public void setMetadata(Map<String, String> metadata) {
    this.metadata = metadata;
  }


  public GoogleCloudContactcenterinsightsV1SmartReplyData queryRecord(String queryRecord) {
    this.queryRecord = queryRecord;
    return this;
  }

  /**
   * The name of the answer record. Format: projects/{project}/locations/{location}/answerRecords/{answer_record}
   * @return queryRecord
   */
  @javax.annotation.Nullable
  public String getQueryRecord() {
    return queryRecord;
  }

  public void setQueryRecord(String queryRecord) {
    this.queryRecord = queryRecord;
  }


  public GoogleCloudContactcenterinsightsV1SmartReplyData reply(String reply) {
    this.reply = reply;
    return this;
  }

  /**
   * The content of the reply.
   * @return reply
   */
  @javax.annotation.Nullable
  public String getReply() {
    return reply;
  }

  public void setReply(String reply) {
    this.reply = reply;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudContactcenterinsightsV1SmartReplyData googleCloudContactcenterinsightsV1SmartReplyData = (GoogleCloudContactcenterinsightsV1SmartReplyData) o;
    return Objects.equals(this.confidenceScore, googleCloudContactcenterinsightsV1SmartReplyData.confidenceScore) &&
        Objects.equals(this.metadata, googleCloudContactcenterinsightsV1SmartReplyData.metadata) &&
        Objects.equals(this.queryRecord, googleCloudContactcenterinsightsV1SmartReplyData.queryRecord) &&
        Objects.equals(this.reply, googleCloudContactcenterinsightsV1SmartReplyData.reply);
  }

  @Override
  public int hashCode() {
    return Objects.hash(confidenceScore, metadata, queryRecord, reply);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudContactcenterinsightsV1SmartReplyData {\n");
    sb.append("    confidenceScore: ").append(toIndentedString(confidenceScore)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    queryRecord: ").append(toIndentedString(queryRecord)).append("\n");
    sb.append("    reply: ").append(toIndentedString(reply)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("confidenceScore");
    openapiFields.add("metadata");
    openapiFields.add("queryRecord");
    openapiFields.add("reply");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudContactcenterinsightsV1SmartReplyData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudContactcenterinsightsV1SmartReplyData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudContactcenterinsightsV1SmartReplyData is not found in the empty JSON string", GoogleCloudContactcenterinsightsV1SmartReplyData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudContactcenterinsightsV1SmartReplyData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudContactcenterinsightsV1SmartReplyData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("queryRecord") != null && !jsonObj.get("queryRecord").isJsonNull()) && !jsonObj.get("queryRecord").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `queryRecord` to be a primitive type in the JSON string but got `%s`", jsonObj.get("queryRecord").toString()));
      }
      if ((jsonObj.get("reply") != null && !jsonObj.get("reply").isJsonNull()) && !jsonObj.get("reply").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reply` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reply").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudContactcenterinsightsV1SmartReplyData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudContactcenterinsightsV1SmartReplyData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudContactcenterinsightsV1SmartReplyData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudContactcenterinsightsV1SmartReplyData.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudContactcenterinsightsV1SmartReplyData>() {
           @Override
           public void write(JsonWriter out, GoogleCloudContactcenterinsightsV1SmartReplyData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudContactcenterinsightsV1SmartReplyData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudContactcenterinsightsV1SmartReplyData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudContactcenterinsightsV1SmartReplyData
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudContactcenterinsightsV1SmartReplyData
   */
  public static GoogleCloudContactcenterinsightsV1SmartReplyData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudContactcenterinsightsV1SmartReplyData.class);
  }

  /**
   * Convert an instance of GoogleCloudContactcenterinsightsV1SmartReplyData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

