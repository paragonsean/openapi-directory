/*
 * Contact Center AI Insights API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.GoogleCloudContactcenterinsightsV1IssueModelInputDataConfig;
import org.openapitools.client.model.GoogleCloudContactcenterinsightsV1IssueModelLabelStats;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The issue model resource.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:46:41.653092-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudContactcenterinsightsV1IssueModel {
  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private String createTime;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_INPUT_DATA_CONFIG = "inputDataConfig";
  @SerializedName(SERIALIZED_NAME_INPUT_DATA_CONFIG)
  private GoogleCloudContactcenterinsightsV1IssueModelInputDataConfig inputDataConfig;

  public static final String SERIALIZED_NAME_ISSUE_COUNT = "issueCount";
  @SerializedName(SERIALIZED_NAME_ISSUE_COUNT)
  private String issueCount;

  public static final String SERIALIZED_NAME_LANGUAGE_CODE = "languageCode";
  @SerializedName(SERIALIZED_NAME_LANGUAGE_CODE)
  private String languageCode;

  /**
   * Type of the model.
   */
  @JsonAdapter(ModelTypeEnum.Adapter.class)
  public enum ModelTypeEnum {
    MODEL_TYPE_UNSPECIFIED("MODEL_TYPE_UNSPECIFIED"),
    
    TYPE_V1("TYPE_V1"),
    
    TYPE_V2("TYPE_V2");

    private String value;

    ModelTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ModelTypeEnum fromValue(String value) {
      for (ModelTypeEnum b : ModelTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ModelTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ModelTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ModelTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ModelTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ModelTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MODEL_TYPE = "modelType";
  @SerializedName(SERIALIZED_NAME_MODEL_TYPE)
  private ModelTypeEnum modelType;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  /**
   * Output only. State of the model.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    STATE_UNSPECIFIED("STATE_UNSPECIFIED"),
    
    UNDEPLOYED("UNDEPLOYED"),
    
    DEPLOYING("DEPLOYING"),
    
    DEPLOYED("DEPLOYED"),
    
    UNDEPLOYING("UNDEPLOYING"),
    
    DELETING("DELETING");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public static final String SERIALIZED_NAME_TRAINING_STATS = "trainingStats";
  @SerializedName(SERIALIZED_NAME_TRAINING_STATS)
  private GoogleCloudContactcenterinsightsV1IssueModelLabelStats trainingStats;

  public static final String SERIALIZED_NAME_UPDATE_TIME = "updateTime";
  @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
  private String updateTime;

  public GoogleCloudContactcenterinsightsV1IssueModel() {
  }

  public GoogleCloudContactcenterinsightsV1IssueModel(
     String createTime, 
     String issueCount, 
     StateEnum state, 
     String updateTime
  ) {
    this();
    this.createTime = createTime;
    this.issueCount = issueCount;
    this.state = state;
    this.updateTime = updateTime;
  }

  /**
   * Output only. The time at which this issue model was created.
   * @return createTime
   */
  @javax.annotation.Nullable
  public String getCreateTime() {
    return createTime;
  }



  public GoogleCloudContactcenterinsightsV1IssueModel displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * The representative name for the issue model.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public GoogleCloudContactcenterinsightsV1IssueModel inputDataConfig(GoogleCloudContactcenterinsightsV1IssueModelInputDataConfig inputDataConfig) {
    this.inputDataConfig = inputDataConfig;
    return this;
  }

  /**
   * Get inputDataConfig
   * @return inputDataConfig
   */
  @javax.annotation.Nullable
  public GoogleCloudContactcenterinsightsV1IssueModelInputDataConfig getInputDataConfig() {
    return inputDataConfig;
  }

  public void setInputDataConfig(GoogleCloudContactcenterinsightsV1IssueModelInputDataConfig inputDataConfig) {
    this.inputDataConfig = inputDataConfig;
  }


  /**
   * Output only. Number of issues in this issue model.
   * @return issueCount
   */
  @javax.annotation.Nullable
  public String getIssueCount() {
    return issueCount;
  }



  public GoogleCloudContactcenterinsightsV1IssueModel languageCode(String languageCode) {
    this.languageCode = languageCode;
    return this;
  }

  /**
   * Language of the model.
   * @return languageCode
   */
  @javax.annotation.Nullable
  public String getLanguageCode() {
    return languageCode;
  }

  public void setLanguageCode(String languageCode) {
    this.languageCode = languageCode;
  }


  public GoogleCloudContactcenterinsightsV1IssueModel modelType(ModelTypeEnum modelType) {
    this.modelType = modelType;
    return this;
  }

  /**
   * Type of the model.
   * @return modelType
   */
  @javax.annotation.Nullable
  public ModelTypeEnum getModelType() {
    return modelType;
  }

  public void setModelType(ModelTypeEnum modelType) {
    this.modelType = modelType;
  }


  public GoogleCloudContactcenterinsightsV1IssueModel name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Immutable. The resource name of the issue model. Format: projects/{project}/locations/{location}/issueModels/{issue_model}
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  /**
   * Output only. State of the model.
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }



  public GoogleCloudContactcenterinsightsV1IssueModel trainingStats(GoogleCloudContactcenterinsightsV1IssueModelLabelStats trainingStats) {
    this.trainingStats = trainingStats;
    return this;
  }

  /**
   * Get trainingStats
   * @return trainingStats
   */
  @javax.annotation.Nullable
  public GoogleCloudContactcenterinsightsV1IssueModelLabelStats getTrainingStats() {
    return trainingStats;
  }

  public void setTrainingStats(GoogleCloudContactcenterinsightsV1IssueModelLabelStats trainingStats) {
    this.trainingStats = trainingStats;
  }


  /**
   * Output only. The most recent time at which the issue model was updated.
   * @return updateTime
   */
  @javax.annotation.Nullable
  public String getUpdateTime() {
    return updateTime;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudContactcenterinsightsV1IssueModel googleCloudContactcenterinsightsV1IssueModel = (GoogleCloudContactcenterinsightsV1IssueModel) o;
    return Objects.equals(this.createTime, googleCloudContactcenterinsightsV1IssueModel.createTime) &&
        Objects.equals(this.displayName, googleCloudContactcenterinsightsV1IssueModel.displayName) &&
        Objects.equals(this.inputDataConfig, googleCloudContactcenterinsightsV1IssueModel.inputDataConfig) &&
        Objects.equals(this.issueCount, googleCloudContactcenterinsightsV1IssueModel.issueCount) &&
        Objects.equals(this.languageCode, googleCloudContactcenterinsightsV1IssueModel.languageCode) &&
        Objects.equals(this.modelType, googleCloudContactcenterinsightsV1IssueModel.modelType) &&
        Objects.equals(this.name, googleCloudContactcenterinsightsV1IssueModel.name) &&
        Objects.equals(this.state, googleCloudContactcenterinsightsV1IssueModel.state) &&
        Objects.equals(this.trainingStats, googleCloudContactcenterinsightsV1IssueModel.trainingStats) &&
        Objects.equals(this.updateTime, googleCloudContactcenterinsightsV1IssueModel.updateTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createTime, displayName, inputDataConfig, issueCount, languageCode, modelType, name, state, trainingStats, updateTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudContactcenterinsightsV1IssueModel {\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    inputDataConfig: ").append(toIndentedString(inputDataConfig)).append("\n");
    sb.append("    issueCount: ").append(toIndentedString(issueCount)).append("\n");
    sb.append("    languageCode: ").append(toIndentedString(languageCode)).append("\n");
    sb.append("    modelType: ").append(toIndentedString(modelType)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    trainingStats: ").append(toIndentedString(trainingStats)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("createTime");
    openapiFields.add("displayName");
    openapiFields.add("inputDataConfig");
    openapiFields.add("issueCount");
    openapiFields.add("languageCode");
    openapiFields.add("modelType");
    openapiFields.add("name");
    openapiFields.add("state");
    openapiFields.add("trainingStats");
    openapiFields.add("updateTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudContactcenterinsightsV1IssueModel
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudContactcenterinsightsV1IssueModel.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudContactcenterinsightsV1IssueModel is not found in the empty JSON string", GoogleCloudContactcenterinsightsV1IssueModel.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudContactcenterinsightsV1IssueModel.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudContactcenterinsightsV1IssueModel` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("createTime") != null && !jsonObj.get("createTime").isJsonNull()) && !jsonObj.get("createTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createTime").toString()));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      // validate the optional field `inputDataConfig`
      if (jsonObj.get("inputDataConfig") != null && !jsonObj.get("inputDataConfig").isJsonNull()) {
        GoogleCloudContactcenterinsightsV1IssueModelInputDataConfig.validateJsonElement(jsonObj.get("inputDataConfig"));
      }
      if ((jsonObj.get("issueCount") != null && !jsonObj.get("issueCount").isJsonNull()) && !jsonObj.get("issueCount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `issueCount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("issueCount").toString()));
      }
      if ((jsonObj.get("languageCode") != null && !jsonObj.get("languageCode").isJsonNull()) && !jsonObj.get("languageCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `languageCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("languageCode").toString()));
      }
      if ((jsonObj.get("modelType") != null && !jsonObj.get("modelType").isJsonNull()) && !jsonObj.get("modelType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `modelType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("modelType").toString()));
      }
      // validate the optional field `modelType`
      if (jsonObj.get("modelType") != null && !jsonObj.get("modelType").isJsonNull()) {
        ModelTypeEnum.validateJsonElement(jsonObj.get("modelType"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
      // validate the optional field `trainingStats`
      if (jsonObj.get("trainingStats") != null && !jsonObj.get("trainingStats").isJsonNull()) {
        GoogleCloudContactcenterinsightsV1IssueModelLabelStats.validateJsonElement(jsonObj.get("trainingStats"));
      }
      if ((jsonObj.get("updateTime") != null && !jsonObj.get("updateTime").isJsonNull()) && !jsonObj.get("updateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updateTime").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudContactcenterinsightsV1IssueModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudContactcenterinsightsV1IssueModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudContactcenterinsightsV1IssueModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudContactcenterinsightsV1IssueModel.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudContactcenterinsightsV1IssueModel>() {
           @Override
           public void write(JsonWriter out, GoogleCloudContactcenterinsightsV1IssueModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudContactcenterinsightsV1IssueModel read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudContactcenterinsightsV1IssueModel given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudContactcenterinsightsV1IssueModel
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudContactcenterinsightsV1IssueModel
   */
  public static GoogleCloudContactcenterinsightsV1IssueModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudContactcenterinsightsV1IssueModel.class);
  }

  /**
   * Convert an instance of GoogleCloudContactcenterinsightsV1IssueModel to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

