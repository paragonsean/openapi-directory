/*
 * Contact Center AI Insights API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GoogleCloudContactcenterinsightsV1alpha1AnnotatorSelectorSummarizationConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Selector of all available annotators and phrase matchers to run.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:46:41.653092-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector {
  public static final String SERIALIZED_NAME_ISSUE_MODELS = "issueModels";
  @SerializedName(SERIALIZED_NAME_ISSUE_MODELS)
  private List<String> issueModels = new ArrayList<>();

  public static final String SERIALIZED_NAME_PHRASE_MATCHERS = "phraseMatchers";
  @SerializedName(SERIALIZED_NAME_PHRASE_MATCHERS)
  private List<String> phraseMatchers = new ArrayList<>();

  public static final String SERIALIZED_NAME_RUN_ENTITY_ANNOTATOR = "runEntityAnnotator";
  @SerializedName(SERIALIZED_NAME_RUN_ENTITY_ANNOTATOR)
  private Boolean runEntityAnnotator;

  public static final String SERIALIZED_NAME_RUN_INTENT_ANNOTATOR = "runIntentAnnotator";
  @SerializedName(SERIALIZED_NAME_RUN_INTENT_ANNOTATOR)
  private Boolean runIntentAnnotator;

  public static final String SERIALIZED_NAME_RUN_INTERRUPTION_ANNOTATOR = "runInterruptionAnnotator";
  @SerializedName(SERIALIZED_NAME_RUN_INTERRUPTION_ANNOTATOR)
  private Boolean runInterruptionAnnotator;

  public static final String SERIALIZED_NAME_RUN_ISSUE_MODEL_ANNOTATOR = "runIssueModelAnnotator";
  @SerializedName(SERIALIZED_NAME_RUN_ISSUE_MODEL_ANNOTATOR)
  private Boolean runIssueModelAnnotator;

  public static final String SERIALIZED_NAME_RUN_PHRASE_MATCHER_ANNOTATOR = "runPhraseMatcherAnnotator";
  @SerializedName(SERIALIZED_NAME_RUN_PHRASE_MATCHER_ANNOTATOR)
  private Boolean runPhraseMatcherAnnotator;

  public static final String SERIALIZED_NAME_RUN_SENTIMENT_ANNOTATOR = "runSentimentAnnotator";
  @SerializedName(SERIALIZED_NAME_RUN_SENTIMENT_ANNOTATOR)
  private Boolean runSentimentAnnotator;

  public static final String SERIALIZED_NAME_RUN_SILENCE_ANNOTATOR = "runSilenceAnnotator";
  @SerializedName(SERIALIZED_NAME_RUN_SILENCE_ANNOTATOR)
  private Boolean runSilenceAnnotator;

  public static final String SERIALIZED_NAME_RUN_SUMMARIZATION_ANNOTATOR = "runSummarizationAnnotator";
  @SerializedName(SERIALIZED_NAME_RUN_SUMMARIZATION_ANNOTATOR)
  private Boolean runSummarizationAnnotator;

  public static final String SERIALIZED_NAME_SUMMARIZATION_CONFIG = "summarizationConfig";
  @SerializedName(SERIALIZED_NAME_SUMMARIZATION_CONFIG)
  private GoogleCloudContactcenterinsightsV1alpha1AnnotatorSelectorSummarizationConfig summarizationConfig;

  public GoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector() {
  }

  public GoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector issueModels(List<String> issueModels) {
    this.issueModels = issueModels;
    return this;
  }

  public GoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector addIssueModelsItem(String issueModelsItem) {
    if (this.issueModels == null) {
      this.issueModels = new ArrayList<>();
    }
    this.issueModels.add(issueModelsItem);
    return this;
  }

  /**
   * The issue model to run. If not provided, the most recently deployed topic model will be used. The provided issue model will only be used for inference if the issue model is deployed and if run_issue_model_annotator is set to true. If more than one issue model is provided, only the first provided issue model will be used for inference.
   * @return issueModels
   */
  @javax.annotation.Nullable
  public List<String> getIssueModels() {
    return issueModels;
  }

  public void setIssueModels(List<String> issueModels) {
    this.issueModels = issueModels;
  }


  public GoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector phraseMatchers(List<String> phraseMatchers) {
    this.phraseMatchers = phraseMatchers;
    return this;
  }

  public GoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector addPhraseMatchersItem(String phraseMatchersItem) {
    if (this.phraseMatchers == null) {
      this.phraseMatchers = new ArrayList<>();
    }
    this.phraseMatchers.add(phraseMatchersItem);
    return this;
  }

  /**
   * The list of phrase matchers to run. If not provided, all active phrase matchers will be used. If inactive phrase matchers are provided, they will not be used. Phrase matchers will be run only if run_phrase_matcher_annotator is set to true. Format: projects/{project}/locations/{location}/phraseMatchers/{phrase_matcher}
   * @return phraseMatchers
   */
  @javax.annotation.Nullable
  public List<String> getPhraseMatchers() {
    return phraseMatchers;
  }

  public void setPhraseMatchers(List<String> phraseMatchers) {
    this.phraseMatchers = phraseMatchers;
  }


  public GoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector runEntityAnnotator(Boolean runEntityAnnotator) {
    this.runEntityAnnotator = runEntityAnnotator;
    return this;
  }

  /**
   * Whether to run the entity annotator.
   * @return runEntityAnnotator
   */
  @javax.annotation.Nullable
  public Boolean getRunEntityAnnotator() {
    return runEntityAnnotator;
  }

  public void setRunEntityAnnotator(Boolean runEntityAnnotator) {
    this.runEntityAnnotator = runEntityAnnotator;
  }


  public GoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector runIntentAnnotator(Boolean runIntentAnnotator) {
    this.runIntentAnnotator = runIntentAnnotator;
    return this;
  }

  /**
   * Whether to run the intent annotator.
   * @return runIntentAnnotator
   */
  @javax.annotation.Nullable
  public Boolean getRunIntentAnnotator() {
    return runIntentAnnotator;
  }

  public void setRunIntentAnnotator(Boolean runIntentAnnotator) {
    this.runIntentAnnotator = runIntentAnnotator;
  }


  public GoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector runInterruptionAnnotator(Boolean runInterruptionAnnotator) {
    this.runInterruptionAnnotator = runInterruptionAnnotator;
    return this;
  }

  /**
   * Whether to run the interruption annotator.
   * @return runInterruptionAnnotator
   */
  @javax.annotation.Nullable
  public Boolean getRunInterruptionAnnotator() {
    return runInterruptionAnnotator;
  }

  public void setRunInterruptionAnnotator(Boolean runInterruptionAnnotator) {
    this.runInterruptionAnnotator = runInterruptionAnnotator;
  }


  public GoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector runIssueModelAnnotator(Boolean runIssueModelAnnotator) {
    this.runIssueModelAnnotator = runIssueModelAnnotator;
    return this;
  }

  /**
   * Whether to run the issue model annotator. A model should have already been deployed for this to take effect.
   * @return runIssueModelAnnotator
   */
  @javax.annotation.Nullable
  public Boolean getRunIssueModelAnnotator() {
    return runIssueModelAnnotator;
  }

  public void setRunIssueModelAnnotator(Boolean runIssueModelAnnotator) {
    this.runIssueModelAnnotator = runIssueModelAnnotator;
  }


  public GoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector runPhraseMatcherAnnotator(Boolean runPhraseMatcherAnnotator) {
    this.runPhraseMatcherAnnotator = runPhraseMatcherAnnotator;
    return this;
  }

  /**
   * Whether to run the active phrase matcher annotator(s).
   * @return runPhraseMatcherAnnotator
   */
  @javax.annotation.Nullable
  public Boolean getRunPhraseMatcherAnnotator() {
    return runPhraseMatcherAnnotator;
  }

  public void setRunPhraseMatcherAnnotator(Boolean runPhraseMatcherAnnotator) {
    this.runPhraseMatcherAnnotator = runPhraseMatcherAnnotator;
  }


  public GoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector runSentimentAnnotator(Boolean runSentimentAnnotator) {
    this.runSentimentAnnotator = runSentimentAnnotator;
    return this;
  }

  /**
   * Whether to run the sentiment annotator.
   * @return runSentimentAnnotator
   */
  @javax.annotation.Nullable
  public Boolean getRunSentimentAnnotator() {
    return runSentimentAnnotator;
  }

  public void setRunSentimentAnnotator(Boolean runSentimentAnnotator) {
    this.runSentimentAnnotator = runSentimentAnnotator;
  }


  public GoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector runSilenceAnnotator(Boolean runSilenceAnnotator) {
    this.runSilenceAnnotator = runSilenceAnnotator;
    return this;
  }

  /**
   * Whether to run the silence annotator.
   * @return runSilenceAnnotator
   */
  @javax.annotation.Nullable
  public Boolean getRunSilenceAnnotator() {
    return runSilenceAnnotator;
  }

  public void setRunSilenceAnnotator(Boolean runSilenceAnnotator) {
    this.runSilenceAnnotator = runSilenceAnnotator;
  }


  public GoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector runSummarizationAnnotator(Boolean runSummarizationAnnotator) {
    this.runSummarizationAnnotator = runSummarizationAnnotator;
    return this;
  }

  /**
   * Whether to run the summarization annotator.
   * @return runSummarizationAnnotator
   */
  @javax.annotation.Nullable
  public Boolean getRunSummarizationAnnotator() {
    return runSummarizationAnnotator;
  }

  public void setRunSummarizationAnnotator(Boolean runSummarizationAnnotator) {
    this.runSummarizationAnnotator = runSummarizationAnnotator;
  }


  public GoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector summarizationConfig(GoogleCloudContactcenterinsightsV1alpha1AnnotatorSelectorSummarizationConfig summarizationConfig) {
    this.summarizationConfig = summarizationConfig;
    return this;
  }

  /**
   * Get summarizationConfig
   * @return summarizationConfig
   */
  @javax.annotation.Nullable
  public GoogleCloudContactcenterinsightsV1alpha1AnnotatorSelectorSummarizationConfig getSummarizationConfig() {
    return summarizationConfig;
  }

  public void setSummarizationConfig(GoogleCloudContactcenterinsightsV1alpha1AnnotatorSelectorSummarizationConfig summarizationConfig) {
    this.summarizationConfig = summarizationConfig;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector googleCloudContactcenterinsightsV1alpha1AnnotatorSelector = (GoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector) o;
    return Objects.equals(this.issueModels, googleCloudContactcenterinsightsV1alpha1AnnotatorSelector.issueModels) &&
        Objects.equals(this.phraseMatchers, googleCloudContactcenterinsightsV1alpha1AnnotatorSelector.phraseMatchers) &&
        Objects.equals(this.runEntityAnnotator, googleCloudContactcenterinsightsV1alpha1AnnotatorSelector.runEntityAnnotator) &&
        Objects.equals(this.runIntentAnnotator, googleCloudContactcenterinsightsV1alpha1AnnotatorSelector.runIntentAnnotator) &&
        Objects.equals(this.runInterruptionAnnotator, googleCloudContactcenterinsightsV1alpha1AnnotatorSelector.runInterruptionAnnotator) &&
        Objects.equals(this.runIssueModelAnnotator, googleCloudContactcenterinsightsV1alpha1AnnotatorSelector.runIssueModelAnnotator) &&
        Objects.equals(this.runPhraseMatcherAnnotator, googleCloudContactcenterinsightsV1alpha1AnnotatorSelector.runPhraseMatcherAnnotator) &&
        Objects.equals(this.runSentimentAnnotator, googleCloudContactcenterinsightsV1alpha1AnnotatorSelector.runSentimentAnnotator) &&
        Objects.equals(this.runSilenceAnnotator, googleCloudContactcenterinsightsV1alpha1AnnotatorSelector.runSilenceAnnotator) &&
        Objects.equals(this.runSummarizationAnnotator, googleCloudContactcenterinsightsV1alpha1AnnotatorSelector.runSummarizationAnnotator) &&
        Objects.equals(this.summarizationConfig, googleCloudContactcenterinsightsV1alpha1AnnotatorSelector.summarizationConfig);
  }

  @Override
  public int hashCode() {
    return Objects.hash(issueModels, phraseMatchers, runEntityAnnotator, runIntentAnnotator, runInterruptionAnnotator, runIssueModelAnnotator, runPhraseMatcherAnnotator, runSentimentAnnotator, runSilenceAnnotator, runSummarizationAnnotator, summarizationConfig);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector {\n");
    sb.append("    issueModels: ").append(toIndentedString(issueModels)).append("\n");
    sb.append("    phraseMatchers: ").append(toIndentedString(phraseMatchers)).append("\n");
    sb.append("    runEntityAnnotator: ").append(toIndentedString(runEntityAnnotator)).append("\n");
    sb.append("    runIntentAnnotator: ").append(toIndentedString(runIntentAnnotator)).append("\n");
    sb.append("    runInterruptionAnnotator: ").append(toIndentedString(runInterruptionAnnotator)).append("\n");
    sb.append("    runIssueModelAnnotator: ").append(toIndentedString(runIssueModelAnnotator)).append("\n");
    sb.append("    runPhraseMatcherAnnotator: ").append(toIndentedString(runPhraseMatcherAnnotator)).append("\n");
    sb.append("    runSentimentAnnotator: ").append(toIndentedString(runSentimentAnnotator)).append("\n");
    sb.append("    runSilenceAnnotator: ").append(toIndentedString(runSilenceAnnotator)).append("\n");
    sb.append("    runSummarizationAnnotator: ").append(toIndentedString(runSummarizationAnnotator)).append("\n");
    sb.append("    summarizationConfig: ").append(toIndentedString(summarizationConfig)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("issueModels");
    openapiFields.add("phraseMatchers");
    openapiFields.add("runEntityAnnotator");
    openapiFields.add("runIntentAnnotator");
    openapiFields.add("runInterruptionAnnotator");
    openapiFields.add("runIssueModelAnnotator");
    openapiFields.add("runPhraseMatcherAnnotator");
    openapiFields.add("runSentimentAnnotator");
    openapiFields.add("runSilenceAnnotator");
    openapiFields.add("runSummarizationAnnotator");
    openapiFields.add("summarizationConfig");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector is not found in the empty JSON string", GoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("issueModels") != null && !jsonObj.get("issueModels").isJsonNull() && !jsonObj.get("issueModels").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `issueModels` to be an array in the JSON string but got `%s`", jsonObj.get("issueModels").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("phraseMatchers") != null && !jsonObj.get("phraseMatchers").isJsonNull() && !jsonObj.get("phraseMatchers").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `phraseMatchers` to be an array in the JSON string but got `%s`", jsonObj.get("phraseMatchers").toString()));
      }
      // validate the optional field `summarizationConfig`
      if (jsonObj.get("summarizationConfig") != null && !jsonObj.get("summarizationConfig").isJsonNull()) {
        GoogleCloudContactcenterinsightsV1alpha1AnnotatorSelectorSummarizationConfig.validateJsonElement(jsonObj.get("summarizationConfig"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector>() {
           @Override
           public void write(JsonWriter out, GoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector
   */
  public static GoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector.class);
  }

  /**
   * Convert an instance of GoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

