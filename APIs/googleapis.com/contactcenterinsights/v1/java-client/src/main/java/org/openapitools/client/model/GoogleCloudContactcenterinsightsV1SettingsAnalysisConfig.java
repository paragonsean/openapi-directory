/*
 * Contact Center AI Insights API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.GoogleCloudContactcenterinsightsV1AnnotatorSelector;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Default configuration when creating Analyses in Insights.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:46:41.653092-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudContactcenterinsightsV1SettingsAnalysisConfig {
  public static final String SERIALIZED_NAME_ANNOTATOR_SELECTOR = "annotatorSelector";
  @SerializedName(SERIALIZED_NAME_ANNOTATOR_SELECTOR)
  private GoogleCloudContactcenterinsightsV1AnnotatorSelector annotatorSelector;

  public static final String SERIALIZED_NAME_RUNTIME_INTEGRATION_ANALYSIS_PERCENTAGE = "runtimeIntegrationAnalysisPercentage";
  @SerializedName(SERIALIZED_NAME_RUNTIME_INTEGRATION_ANALYSIS_PERCENTAGE)
  private Double runtimeIntegrationAnalysisPercentage;

  public static final String SERIALIZED_NAME_UPLOAD_CONVERSATION_ANALYSIS_PERCENTAGE = "uploadConversationAnalysisPercentage";
  @SerializedName(SERIALIZED_NAME_UPLOAD_CONVERSATION_ANALYSIS_PERCENTAGE)
  private Double uploadConversationAnalysisPercentage;

  public GoogleCloudContactcenterinsightsV1SettingsAnalysisConfig() {
  }

  public GoogleCloudContactcenterinsightsV1SettingsAnalysisConfig annotatorSelector(GoogleCloudContactcenterinsightsV1AnnotatorSelector annotatorSelector) {
    this.annotatorSelector = annotatorSelector;
    return this;
  }

  /**
   * Get annotatorSelector
   * @return annotatorSelector
   */
  @javax.annotation.Nullable
  public GoogleCloudContactcenterinsightsV1AnnotatorSelector getAnnotatorSelector() {
    return annotatorSelector;
  }

  public void setAnnotatorSelector(GoogleCloudContactcenterinsightsV1AnnotatorSelector annotatorSelector) {
    this.annotatorSelector = annotatorSelector;
  }


  public GoogleCloudContactcenterinsightsV1SettingsAnalysisConfig runtimeIntegrationAnalysisPercentage(Double runtimeIntegrationAnalysisPercentage) {
    this.runtimeIntegrationAnalysisPercentage = runtimeIntegrationAnalysisPercentage;
    return this;
  }

  /**
   * Percentage of conversations created using Dialogflow runtime integration to analyze automatically, between [0, 100].
   * @return runtimeIntegrationAnalysisPercentage
   */
  @javax.annotation.Nullable
  public Double getRuntimeIntegrationAnalysisPercentage() {
    return runtimeIntegrationAnalysisPercentage;
  }

  public void setRuntimeIntegrationAnalysisPercentage(Double runtimeIntegrationAnalysisPercentage) {
    this.runtimeIntegrationAnalysisPercentage = runtimeIntegrationAnalysisPercentage;
  }


  public GoogleCloudContactcenterinsightsV1SettingsAnalysisConfig uploadConversationAnalysisPercentage(Double uploadConversationAnalysisPercentage) {
    this.uploadConversationAnalysisPercentage = uploadConversationAnalysisPercentage;
    return this;
  }

  /**
   * Percentage of conversations created using the UploadConversation endpoint to analyze automatically, between [0, 100].
   * @return uploadConversationAnalysisPercentage
   */
  @javax.annotation.Nullable
  public Double getUploadConversationAnalysisPercentage() {
    return uploadConversationAnalysisPercentage;
  }

  public void setUploadConversationAnalysisPercentage(Double uploadConversationAnalysisPercentage) {
    this.uploadConversationAnalysisPercentage = uploadConversationAnalysisPercentage;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudContactcenterinsightsV1SettingsAnalysisConfig googleCloudContactcenterinsightsV1SettingsAnalysisConfig = (GoogleCloudContactcenterinsightsV1SettingsAnalysisConfig) o;
    return Objects.equals(this.annotatorSelector, googleCloudContactcenterinsightsV1SettingsAnalysisConfig.annotatorSelector) &&
        Objects.equals(this.runtimeIntegrationAnalysisPercentage, googleCloudContactcenterinsightsV1SettingsAnalysisConfig.runtimeIntegrationAnalysisPercentage) &&
        Objects.equals(this.uploadConversationAnalysisPercentage, googleCloudContactcenterinsightsV1SettingsAnalysisConfig.uploadConversationAnalysisPercentage);
  }

  @Override
  public int hashCode() {
    return Objects.hash(annotatorSelector, runtimeIntegrationAnalysisPercentage, uploadConversationAnalysisPercentage);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudContactcenterinsightsV1SettingsAnalysisConfig {\n");
    sb.append("    annotatorSelector: ").append(toIndentedString(annotatorSelector)).append("\n");
    sb.append("    runtimeIntegrationAnalysisPercentage: ").append(toIndentedString(runtimeIntegrationAnalysisPercentage)).append("\n");
    sb.append("    uploadConversationAnalysisPercentage: ").append(toIndentedString(uploadConversationAnalysisPercentage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("annotatorSelector");
    openapiFields.add("runtimeIntegrationAnalysisPercentage");
    openapiFields.add("uploadConversationAnalysisPercentage");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudContactcenterinsightsV1SettingsAnalysisConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudContactcenterinsightsV1SettingsAnalysisConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudContactcenterinsightsV1SettingsAnalysisConfig is not found in the empty JSON string", GoogleCloudContactcenterinsightsV1SettingsAnalysisConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudContactcenterinsightsV1SettingsAnalysisConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudContactcenterinsightsV1SettingsAnalysisConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `annotatorSelector`
      if (jsonObj.get("annotatorSelector") != null && !jsonObj.get("annotatorSelector").isJsonNull()) {
        GoogleCloudContactcenterinsightsV1AnnotatorSelector.validateJsonElement(jsonObj.get("annotatorSelector"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudContactcenterinsightsV1SettingsAnalysisConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudContactcenterinsightsV1SettingsAnalysisConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudContactcenterinsightsV1SettingsAnalysisConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudContactcenterinsightsV1SettingsAnalysisConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudContactcenterinsightsV1SettingsAnalysisConfig>() {
           @Override
           public void write(JsonWriter out, GoogleCloudContactcenterinsightsV1SettingsAnalysisConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudContactcenterinsightsV1SettingsAnalysisConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudContactcenterinsightsV1SettingsAnalysisConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudContactcenterinsightsV1SettingsAnalysisConfig
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudContactcenterinsightsV1SettingsAnalysisConfig
   */
  public static GoogleCloudContactcenterinsightsV1SettingsAnalysisConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudContactcenterinsightsV1SettingsAnalysisConfig.class);
  }

  /**
   * Convert an instance of GoogleCloudContactcenterinsightsV1SettingsAnalysisConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

