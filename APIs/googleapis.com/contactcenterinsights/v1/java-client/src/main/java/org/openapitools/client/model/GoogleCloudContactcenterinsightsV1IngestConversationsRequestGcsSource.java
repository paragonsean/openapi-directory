/*
 * Contact Center AI Insights API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Configuration for Cloud Storage bucket sources.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:46:41.653092-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudContactcenterinsightsV1IngestConversationsRequestGcsSource {
  /**
   * Optional. Specifies the type of the objects in &#x60;bucket_uri&#x60;.
   */
  @JsonAdapter(BucketObjectTypeEnum.Adapter.class)
  public enum BucketObjectTypeEnum {
    BUCKET_OBJECT_TYPE_UNSPECIFIED("BUCKET_OBJECT_TYPE_UNSPECIFIED"),
    
    TRANSCRIPT("TRANSCRIPT"),
    
    AUDIO("AUDIO");

    private String value;

    BucketObjectTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BucketObjectTypeEnum fromValue(String value) {
      for (BucketObjectTypeEnum b : BucketObjectTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<BucketObjectTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BucketObjectTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BucketObjectTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return BucketObjectTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      BucketObjectTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_BUCKET_OBJECT_TYPE = "bucketObjectType";
  @SerializedName(SERIALIZED_NAME_BUCKET_OBJECT_TYPE)
  private BucketObjectTypeEnum bucketObjectType;

  public static final String SERIALIZED_NAME_BUCKET_URI = "bucketUri";
  @SerializedName(SERIALIZED_NAME_BUCKET_URI)
  private String bucketUri;

  public static final String SERIALIZED_NAME_CUSTOM_METADATA_KEYS = "customMetadataKeys";
  @SerializedName(SERIALIZED_NAME_CUSTOM_METADATA_KEYS)
  private List<String> customMetadataKeys = new ArrayList<>();

  public static final String SERIALIZED_NAME_METADATA_BUCKET_URI = "metadataBucketUri";
  @SerializedName(SERIALIZED_NAME_METADATA_BUCKET_URI)
  private String metadataBucketUri;

  public GoogleCloudContactcenterinsightsV1IngestConversationsRequestGcsSource() {
  }

  public GoogleCloudContactcenterinsightsV1IngestConversationsRequestGcsSource bucketObjectType(BucketObjectTypeEnum bucketObjectType) {
    this.bucketObjectType = bucketObjectType;
    return this;
  }

  /**
   * Optional. Specifies the type of the objects in &#x60;bucket_uri&#x60;.
   * @return bucketObjectType
   */
  @javax.annotation.Nullable
  public BucketObjectTypeEnum getBucketObjectType() {
    return bucketObjectType;
  }

  public void setBucketObjectType(BucketObjectTypeEnum bucketObjectType) {
    this.bucketObjectType = bucketObjectType;
  }


  public GoogleCloudContactcenterinsightsV1IngestConversationsRequestGcsSource bucketUri(String bucketUri) {
    this.bucketUri = bucketUri;
    return this;
  }

  /**
   * Required. The Cloud Storage bucket containing source objects.
   * @return bucketUri
   */
  @javax.annotation.Nullable
  public String getBucketUri() {
    return bucketUri;
  }

  public void setBucketUri(String bucketUri) {
    this.bucketUri = bucketUri;
  }


  public GoogleCloudContactcenterinsightsV1IngestConversationsRequestGcsSource customMetadataKeys(List<String> customMetadataKeys) {
    this.customMetadataKeys = customMetadataKeys;
    return this;
  }

  public GoogleCloudContactcenterinsightsV1IngestConversationsRequestGcsSource addCustomMetadataKeysItem(String customMetadataKeysItem) {
    if (this.customMetadataKeys == null) {
      this.customMetadataKeys = new ArrayList<>();
    }
    this.customMetadataKeys.add(customMetadataKeysItem);
    return this;
  }

  /**
   * Optional. Custom keys to extract as conversation labels from metadata files in &#x60;metadata_bucket_uri&#x60;. Keys not included in this field will be ignored. Note that there is a limit of 20 labels per conversation.
   * @return customMetadataKeys
   */
  @javax.annotation.Nullable
  public List<String> getCustomMetadataKeys() {
    return customMetadataKeys;
  }

  public void setCustomMetadataKeys(List<String> customMetadataKeys) {
    this.customMetadataKeys = customMetadataKeys;
  }


  public GoogleCloudContactcenterinsightsV1IngestConversationsRequestGcsSource metadataBucketUri(String metadataBucketUri) {
    this.metadataBucketUri = metadataBucketUri;
    return this;
  }

  /**
   * Optional. The Cloud Storage path to the source object metadata. Note that: [1] metadata files are expected to be in JSON format [2] metadata and source objects must be in separate buckets [3] a source object&#39;s metadata object must share the same name to be properly ingested
   * @return metadataBucketUri
   */
  @javax.annotation.Nullable
  public String getMetadataBucketUri() {
    return metadataBucketUri;
  }

  public void setMetadataBucketUri(String metadataBucketUri) {
    this.metadataBucketUri = metadataBucketUri;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudContactcenterinsightsV1IngestConversationsRequestGcsSource googleCloudContactcenterinsightsV1IngestConversationsRequestGcsSource = (GoogleCloudContactcenterinsightsV1IngestConversationsRequestGcsSource) o;
    return Objects.equals(this.bucketObjectType, googleCloudContactcenterinsightsV1IngestConversationsRequestGcsSource.bucketObjectType) &&
        Objects.equals(this.bucketUri, googleCloudContactcenterinsightsV1IngestConversationsRequestGcsSource.bucketUri) &&
        Objects.equals(this.customMetadataKeys, googleCloudContactcenterinsightsV1IngestConversationsRequestGcsSource.customMetadataKeys) &&
        Objects.equals(this.metadataBucketUri, googleCloudContactcenterinsightsV1IngestConversationsRequestGcsSource.metadataBucketUri);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bucketObjectType, bucketUri, customMetadataKeys, metadataBucketUri);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudContactcenterinsightsV1IngestConversationsRequestGcsSource {\n");
    sb.append("    bucketObjectType: ").append(toIndentedString(bucketObjectType)).append("\n");
    sb.append("    bucketUri: ").append(toIndentedString(bucketUri)).append("\n");
    sb.append("    customMetadataKeys: ").append(toIndentedString(customMetadataKeys)).append("\n");
    sb.append("    metadataBucketUri: ").append(toIndentedString(metadataBucketUri)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bucketObjectType");
    openapiFields.add("bucketUri");
    openapiFields.add("customMetadataKeys");
    openapiFields.add("metadataBucketUri");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudContactcenterinsightsV1IngestConversationsRequestGcsSource
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudContactcenterinsightsV1IngestConversationsRequestGcsSource.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudContactcenterinsightsV1IngestConversationsRequestGcsSource is not found in the empty JSON string", GoogleCloudContactcenterinsightsV1IngestConversationsRequestGcsSource.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudContactcenterinsightsV1IngestConversationsRequestGcsSource.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudContactcenterinsightsV1IngestConversationsRequestGcsSource` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("bucketObjectType") != null && !jsonObj.get("bucketObjectType").isJsonNull()) && !jsonObj.get("bucketObjectType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bucketObjectType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bucketObjectType").toString()));
      }
      // validate the optional field `bucketObjectType`
      if (jsonObj.get("bucketObjectType") != null && !jsonObj.get("bucketObjectType").isJsonNull()) {
        BucketObjectTypeEnum.validateJsonElement(jsonObj.get("bucketObjectType"));
      }
      if ((jsonObj.get("bucketUri") != null && !jsonObj.get("bucketUri").isJsonNull()) && !jsonObj.get("bucketUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bucketUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bucketUri").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("customMetadataKeys") != null && !jsonObj.get("customMetadataKeys").isJsonNull() && !jsonObj.get("customMetadataKeys").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `customMetadataKeys` to be an array in the JSON string but got `%s`", jsonObj.get("customMetadataKeys").toString()));
      }
      if ((jsonObj.get("metadataBucketUri") != null && !jsonObj.get("metadataBucketUri").isJsonNull()) && !jsonObj.get("metadataBucketUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `metadataBucketUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("metadataBucketUri").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudContactcenterinsightsV1IngestConversationsRequestGcsSource.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudContactcenterinsightsV1IngestConversationsRequestGcsSource' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudContactcenterinsightsV1IngestConversationsRequestGcsSource> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudContactcenterinsightsV1IngestConversationsRequestGcsSource.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudContactcenterinsightsV1IngestConversationsRequestGcsSource>() {
           @Override
           public void write(JsonWriter out, GoogleCloudContactcenterinsightsV1IngestConversationsRequestGcsSource value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudContactcenterinsightsV1IngestConversationsRequestGcsSource read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudContactcenterinsightsV1IngestConversationsRequestGcsSource given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudContactcenterinsightsV1IngestConversationsRequestGcsSource
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudContactcenterinsightsV1IngestConversationsRequestGcsSource
   */
  public static GoogleCloudContactcenterinsightsV1IngestConversationsRequestGcsSource fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudContactcenterinsightsV1IngestConversationsRequestGcsSource.class);
  }

  /**
   * Convert an instance of GoogleCloudContactcenterinsightsV1IngestConversationsRequestGcsSource to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

