/*
 * Contact Center AI Insights API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.GoogleCloudContactcenterinsightsV1alpha1Analysis;
import org.openapitools.client.model.GoogleCloudContactcenterinsightsV1alpha1ConversationCallMetadata;
import org.openapitools.client.model.GoogleCloudContactcenterinsightsV1alpha1ConversationDataSource;
import org.openapitools.client.model.GoogleCloudContactcenterinsightsV1alpha1ConversationQualityMetadata;
import org.openapitools.client.model.GoogleCloudContactcenterinsightsV1alpha1ConversationSummarizationSuggestionData;
import org.openapitools.client.model.GoogleCloudContactcenterinsightsV1alpha1ConversationTranscript;
import org.openapitools.client.model.GoogleCloudContactcenterinsightsV1alpha1DialogflowIntent;
import org.openapitools.client.model.GoogleCloudContactcenterinsightsV1alpha1RuntimeAnnotation;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The conversation resource.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:46:41.653092-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudContactcenterinsightsV1alpha1Conversation {
  public static final String SERIALIZED_NAME_AGENT_ID = "agentId";
  @SerializedName(SERIALIZED_NAME_AGENT_ID)
  private String agentId;

  public static final String SERIALIZED_NAME_CALL_METADATA = "callMetadata";
  @SerializedName(SERIALIZED_NAME_CALL_METADATA)
  private GoogleCloudContactcenterinsightsV1alpha1ConversationCallMetadata callMetadata;

  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private String createTime;

  public static final String SERIALIZED_NAME_DATA_SOURCE = "dataSource";
  @SerializedName(SERIALIZED_NAME_DATA_SOURCE)
  private GoogleCloudContactcenterinsightsV1alpha1ConversationDataSource dataSource;

  public static final String SERIALIZED_NAME_DIALOGFLOW_INTENTS = "dialogflowIntents";
  @SerializedName(SERIALIZED_NAME_DIALOGFLOW_INTENTS)
  private Map<String, GoogleCloudContactcenterinsightsV1alpha1DialogflowIntent> dialogflowIntents = new HashMap<>();

  public static final String SERIALIZED_NAME_DURATION = "duration";
  @SerializedName(SERIALIZED_NAME_DURATION)
  private String duration;

  public static final String SERIALIZED_NAME_EXPIRE_TIME = "expireTime";
  @SerializedName(SERIALIZED_NAME_EXPIRE_TIME)
  private String expireTime;

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private Map<String, String> labels = new HashMap<>();

  public static final String SERIALIZED_NAME_LANGUAGE_CODE = "languageCode";
  @SerializedName(SERIALIZED_NAME_LANGUAGE_CODE)
  private String languageCode;

  public static final String SERIALIZED_NAME_LATEST_ANALYSIS = "latestAnalysis";
  @SerializedName(SERIALIZED_NAME_LATEST_ANALYSIS)
  private GoogleCloudContactcenterinsightsV1alpha1Analysis latestAnalysis;

  public static final String SERIALIZED_NAME_LATEST_SUMMARY = "latestSummary";
  @SerializedName(SERIALIZED_NAME_LATEST_SUMMARY)
  private GoogleCloudContactcenterinsightsV1alpha1ConversationSummarizationSuggestionData latestSummary;

  /**
   * Immutable. The conversation medium, if unspecified will default to PHONE_CALL.
   */
  @JsonAdapter(MediumEnum.Adapter.class)
  public enum MediumEnum {
    MEDIUM_UNSPECIFIED("MEDIUM_UNSPECIFIED"),
    
    PHONE_CALL("PHONE_CALL"),
    
    CHAT("CHAT");

    private String value;

    MediumEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MediumEnum fromValue(String value) {
      for (MediumEnum b : MediumEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MediumEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MediumEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MediumEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MediumEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MediumEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MEDIUM = "medium";
  @SerializedName(SERIALIZED_NAME_MEDIUM)
  private MediumEnum medium;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_OBFUSCATED_USER_ID = "obfuscatedUserId";
  @SerializedName(SERIALIZED_NAME_OBFUSCATED_USER_ID)
  private String obfuscatedUserId;

  public static final String SERIALIZED_NAME_QUALITY_METADATA = "qualityMetadata";
  @SerializedName(SERIALIZED_NAME_QUALITY_METADATA)
  private GoogleCloudContactcenterinsightsV1alpha1ConversationQualityMetadata qualityMetadata;

  public static final String SERIALIZED_NAME_RUNTIME_ANNOTATIONS = "runtimeAnnotations";
  @SerializedName(SERIALIZED_NAME_RUNTIME_ANNOTATIONS)
  private List<GoogleCloudContactcenterinsightsV1alpha1RuntimeAnnotation> runtimeAnnotations = new ArrayList<>();

  public static final String SERIALIZED_NAME_START_TIME = "startTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private String startTime;

  public static final String SERIALIZED_NAME_TRANSCRIPT = "transcript";
  @SerializedName(SERIALIZED_NAME_TRANSCRIPT)
  private GoogleCloudContactcenterinsightsV1alpha1ConversationTranscript transcript;

  public static final String SERIALIZED_NAME_TTL = "ttl";
  @SerializedName(SERIALIZED_NAME_TTL)
  private String ttl;

  public static final String SERIALIZED_NAME_TURN_COUNT = "turnCount";
  @SerializedName(SERIALIZED_NAME_TURN_COUNT)
  private Integer turnCount;

  public static final String SERIALIZED_NAME_UPDATE_TIME = "updateTime";
  @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
  private String updateTime;

  public GoogleCloudContactcenterinsightsV1alpha1Conversation() {
  }

  public GoogleCloudContactcenterinsightsV1alpha1Conversation(
     String createTime, 
     Map<String, GoogleCloudContactcenterinsightsV1alpha1DialogflowIntent> dialogflowIntents, 
     String duration, 
     List<GoogleCloudContactcenterinsightsV1alpha1RuntimeAnnotation> runtimeAnnotations, 
     Integer turnCount, 
     String updateTime
  ) {
    this();
    this.createTime = createTime;
    this.dialogflowIntents = dialogflowIntents;
    this.duration = duration;
    this.runtimeAnnotations = runtimeAnnotations;
    this.turnCount = turnCount;
    this.updateTime = updateTime;
  }

  public GoogleCloudContactcenterinsightsV1alpha1Conversation agentId(String agentId) {
    this.agentId = agentId;
    return this;
  }

  /**
   * An opaque, user-specified string representing the human agent who handled the conversation.
   * @return agentId
   */
  @javax.annotation.Nullable
  public String getAgentId() {
    return agentId;
  }

  public void setAgentId(String agentId) {
    this.agentId = agentId;
  }


  public GoogleCloudContactcenterinsightsV1alpha1Conversation callMetadata(GoogleCloudContactcenterinsightsV1alpha1ConversationCallMetadata callMetadata) {
    this.callMetadata = callMetadata;
    return this;
  }

  /**
   * Get callMetadata
   * @return callMetadata
   */
  @javax.annotation.Nullable
  public GoogleCloudContactcenterinsightsV1alpha1ConversationCallMetadata getCallMetadata() {
    return callMetadata;
  }

  public void setCallMetadata(GoogleCloudContactcenterinsightsV1alpha1ConversationCallMetadata callMetadata) {
    this.callMetadata = callMetadata;
  }


  /**
   * Output only. The time at which the conversation was created.
   * @return createTime
   */
  @javax.annotation.Nullable
  public String getCreateTime() {
    return createTime;
  }



  public GoogleCloudContactcenterinsightsV1alpha1Conversation dataSource(GoogleCloudContactcenterinsightsV1alpha1ConversationDataSource dataSource) {
    this.dataSource = dataSource;
    return this;
  }

  /**
   * Get dataSource
   * @return dataSource
   */
  @javax.annotation.Nullable
  public GoogleCloudContactcenterinsightsV1alpha1ConversationDataSource getDataSource() {
    return dataSource;
  }

  public void setDataSource(GoogleCloudContactcenterinsightsV1alpha1ConversationDataSource dataSource) {
    this.dataSource = dataSource;
  }


  /**
   * Output only. All the matched Dialogflow intents in the call. The key corresponds to a Dialogflow intent, format: projects/{project}/agent/{agent}/intents/{intent}
   * @return dialogflowIntents
   */
  @javax.annotation.Nullable
  public Map<String, GoogleCloudContactcenterinsightsV1alpha1DialogflowIntent> getDialogflowIntents() {
    return dialogflowIntents;
  }



  /**
   * Output only. The duration of the conversation.
   * @return duration
   */
  @javax.annotation.Nullable
  public String getDuration() {
    return duration;
  }



  public GoogleCloudContactcenterinsightsV1alpha1Conversation expireTime(String expireTime) {
    this.expireTime = expireTime;
    return this;
  }

  /**
   * The time at which this conversation should expire. After this time, the conversation data and any associated analyses will be deleted.
   * @return expireTime
   */
  @javax.annotation.Nullable
  public String getExpireTime() {
    return expireTime;
  }

  public void setExpireTime(String expireTime) {
    this.expireTime = expireTime;
  }


  public GoogleCloudContactcenterinsightsV1alpha1Conversation labels(Map<String, String> labels) {
    this.labels = labels;
    return this;
  }

  public GoogleCloudContactcenterinsightsV1alpha1Conversation putLabelsItem(String key, String labelsItem) {
    if (this.labels == null) {
      this.labels = new HashMap<>();
    }
    this.labels.put(key, labelsItem);
    return this;
  }

  /**
   * A map for the user to specify any custom fields. A maximum of 20 labels per conversation is allowed, with a maximum of 256 characters per entry.
   * @return labels
   */
  @javax.annotation.Nullable
  public Map<String, String> getLabels() {
    return labels;
  }

  public void setLabels(Map<String, String> labels) {
    this.labels = labels;
  }


  public GoogleCloudContactcenterinsightsV1alpha1Conversation languageCode(String languageCode) {
    this.languageCode = languageCode;
    return this;
  }

  /**
   * A user-specified language code for the conversation.
   * @return languageCode
   */
  @javax.annotation.Nullable
  public String getLanguageCode() {
    return languageCode;
  }

  public void setLanguageCode(String languageCode) {
    this.languageCode = languageCode;
  }


  public GoogleCloudContactcenterinsightsV1alpha1Conversation latestAnalysis(GoogleCloudContactcenterinsightsV1alpha1Analysis latestAnalysis) {
    this.latestAnalysis = latestAnalysis;
    return this;
  }

  /**
   * Get latestAnalysis
   * @return latestAnalysis
   */
  @javax.annotation.Nullable
  public GoogleCloudContactcenterinsightsV1alpha1Analysis getLatestAnalysis() {
    return latestAnalysis;
  }

  public void setLatestAnalysis(GoogleCloudContactcenterinsightsV1alpha1Analysis latestAnalysis) {
    this.latestAnalysis = latestAnalysis;
  }


  public GoogleCloudContactcenterinsightsV1alpha1Conversation latestSummary(GoogleCloudContactcenterinsightsV1alpha1ConversationSummarizationSuggestionData latestSummary) {
    this.latestSummary = latestSummary;
    return this;
  }

  /**
   * Get latestSummary
   * @return latestSummary
   */
  @javax.annotation.Nullable
  public GoogleCloudContactcenterinsightsV1alpha1ConversationSummarizationSuggestionData getLatestSummary() {
    return latestSummary;
  }

  public void setLatestSummary(GoogleCloudContactcenterinsightsV1alpha1ConversationSummarizationSuggestionData latestSummary) {
    this.latestSummary = latestSummary;
  }


  public GoogleCloudContactcenterinsightsV1alpha1Conversation medium(MediumEnum medium) {
    this.medium = medium;
    return this;
  }

  /**
   * Immutable. The conversation medium, if unspecified will default to PHONE_CALL.
   * @return medium
   */
  @javax.annotation.Nullable
  public MediumEnum getMedium() {
    return medium;
  }

  public void setMedium(MediumEnum medium) {
    this.medium = medium;
  }


  public GoogleCloudContactcenterinsightsV1alpha1Conversation name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Immutable. The resource name of the conversation. Format: projects/{project}/locations/{location}/conversations/{conversation}
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public GoogleCloudContactcenterinsightsV1alpha1Conversation obfuscatedUserId(String obfuscatedUserId) {
    this.obfuscatedUserId = obfuscatedUserId;
    return this;
  }

  /**
   * Obfuscated user ID which the customer sent to us.
   * @return obfuscatedUserId
   */
  @javax.annotation.Nullable
  public String getObfuscatedUserId() {
    return obfuscatedUserId;
  }

  public void setObfuscatedUserId(String obfuscatedUserId) {
    this.obfuscatedUserId = obfuscatedUserId;
  }


  public GoogleCloudContactcenterinsightsV1alpha1Conversation qualityMetadata(GoogleCloudContactcenterinsightsV1alpha1ConversationQualityMetadata qualityMetadata) {
    this.qualityMetadata = qualityMetadata;
    return this;
  }

  /**
   * Get qualityMetadata
   * @return qualityMetadata
   */
  @javax.annotation.Nullable
  public GoogleCloudContactcenterinsightsV1alpha1ConversationQualityMetadata getQualityMetadata() {
    return qualityMetadata;
  }

  public void setQualityMetadata(GoogleCloudContactcenterinsightsV1alpha1ConversationQualityMetadata qualityMetadata) {
    this.qualityMetadata = qualityMetadata;
  }


  /**
   * Output only. The annotations that were generated during the customer and agent interaction.
   * @return runtimeAnnotations
   */
  @javax.annotation.Nullable
  public List<GoogleCloudContactcenterinsightsV1alpha1RuntimeAnnotation> getRuntimeAnnotations() {
    return runtimeAnnotations;
  }



  public GoogleCloudContactcenterinsightsV1alpha1Conversation startTime(String startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * The time at which the conversation started.
   * @return startTime
   */
  @javax.annotation.Nullable
  public String getStartTime() {
    return startTime;
  }

  public void setStartTime(String startTime) {
    this.startTime = startTime;
  }


  public GoogleCloudContactcenterinsightsV1alpha1Conversation transcript(GoogleCloudContactcenterinsightsV1alpha1ConversationTranscript transcript) {
    this.transcript = transcript;
    return this;
  }

  /**
   * Get transcript
   * @return transcript
   */
  @javax.annotation.Nullable
  public GoogleCloudContactcenterinsightsV1alpha1ConversationTranscript getTranscript() {
    return transcript;
  }

  public void setTranscript(GoogleCloudContactcenterinsightsV1alpha1ConversationTranscript transcript) {
    this.transcript = transcript;
  }


  public GoogleCloudContactcenterinsightsV1alpha1Conversation ttl(String ttl) {
    this.ttl = ttl;
    return this;
  }

  /**
   * Input only. The TTL for this resource. If specified, then this TTL will be used to calculate the expire time.
   * @return ttl
   */
  @javax.annotation.Nullable
  public String getTtl() {
    return ttl;
  }

  public void setTtl(String ttl) {
    this.ttl = ttl;
  }


  /**
   * Output only. The number of turns in the conversation.
   * @return turnCount
   */
  @javax.annotation.Nullable
  public Integer getTurnCount() {
    return turnCount;
  }



  /**
   * Output only. The most recent time at which the conversation was updated.
   * @return updateTime
   */
  @javax.annotation.Nullable
  public String getUpdateTime() {
    return updateTime;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudContactcenterinsightsV1alpha1Conversation googleCloudContactcenterinsightsV1alpha1Conversation = (GoogleCloudContactcenterinsightsV1alpha1Conversation) o;
    return Objects.equals(this.agentId, googleCloudContactcenterinsightsV1alpha1Conversation.agentId) &&
        Objects.equals(this.callMetadata, googleCloudContactcenterinsightsV1alpha1Conversation.callMetadata) &&
        Objects.equals(this.createTime, googleCloudContactcenterinsightsV1alpha1Conversation.createTime) &&
        Objects.equals(this.dataSource, googleCloudContactcenterinsightsV1alpha1Conversation.dataSource) &&
        Objects.equals(this.dialogflowIntents, googleCloudContactcenterinsightsV1alpha1Conversation.dialogflowIntents) &&
        Objects.equals(this.duration, googleCloudContactcenterinsightsV1alpha1Conversation.duration) &&
        Objects.equals(this.expireTime, googleCloudContactcenterinsightsV1alpha1Conversation.expireTime) &&
        Objects.equals(this.labels, googleCloudContactcenterinsightsV1alpha1Conversation.labels) &&
        Objects.equals(this.languageCode, googleCloudContactcenterinsightsV1alpha1Conversation.languageCode) &&
        Objects.equals(this.latestAnalysis, googleCloudContactcenterinsightsV1alpha1Conversation.latestAnalysis) &&
        Objects.equals(this.latestSummary, googleCloudContactcenterinsightsV1alpha1Conversation.latestSummary) &&
        Objects.equals(this.medium, googleCloudContactcenterinsightsV1alpha1Conversation.medium) &&
        Objects.equals(this.name, googleCloudContactcenterinsightsV1alpha1Conversation.name) &&
        Objects.equals(this.obfuscatedUserId, googleCloudContactcenterinsightsV1alpha1Conversation.obfuscatedUserId) &&
        Objects.equals(this.qualityMetadata, googleCloudContactcenterinsightsV1alpha1Conversation.qualityMetadata) &&
        Objects.equals(this.runtimeAnnotations, googleCloudContactcenterinsightsV1alpha1Conversation.runtimeAnnotations) &&
        Objects.equals(this.startTime, googleCloudContactcenterinsightsV1alpha1Conversation.startTime) &&
        Objects.equals(this.transcript, googleCloudContactcenterinsightsV1alpha1Conversation.transcript) &&
        Objects.equals(this.ttl, googleCloudContactcenterinsightsV1alpha1Conversation.ttl) &&
        Objects.equals(this.turnCount, googleCloudContactcenterinsightsV1alpha1Conversation.turnCount) &&
        Objects.equals(this.updateTime, googleCloudContactcenterinsightsV1alpha1Conversation.updateTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(agentId, callMetadata, createTime, dataSource, dialogflowIntents, duration, expireTime, labels, languageCode, latestAnalysis, latestSummary, medium, name, obfuscatedUserId, qualityMetadata, runtimeAnnotations, startTime, transcript, ttl, turnCount, updateTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudContactcenterinsightsV1alpha1Conversation {\n");
    sb.append("    agentId: ").append(toIndentedString(agentId)).append("\n");
    sb.append("    callMetadata: ").append(toIndentedString(callMetadata)).append("\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    dataSource: ").append(toIndentedString(dataSource)).append("\n");
    sb.append("    dialogflowIntents: ").append(toIndentedString(dialogflowIntents)).append("\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("    expireTime: ").append(toIndentedString(expireTime)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    languageCode: ").append(toIndentedString(languageCode)).append("\n");
    sb.append("    latestAnalysis: ").append(toIndentedString(latestAnalysis)).append("\n");
    sb.append("    latestSummary: ").append(toIndentedString(latestSummary)).append("\n");
    sb.append("    medium: ").append(toIndentedString(medium)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    obfuscatedUserId: ").append(toIndentedString(obfuscatedUserId)).append("\n");
    sb.append("    qualityMetadata: ").append(toIndentedString(qualityMetadata)).append("\n");
    sb.append("    runtimeAnnotations: ").append(toIndentedString(runtimeAnnotations)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    transcript: ").append(toIndentedString(transcript)).append("\n");
    sb.append("    ttl: ").append(toIndentedString(ttl)).append("\n");
    sb.append("    turnCount: ").append(toIndentedString(turnCount)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("agentId");
    openapiFields.add("callMetadata");
    openapiFields.add("createTime");
    openapiFields.add("dataSource");
    openapiFields.add("dialogflowIntents");
    openapiFields.add("duration");
    openapiFields.add("expireTime");
    openapiFields.add("labels");
    openapiFields.add("languageCode");
    openapiFields.add("latestAnalysis");
    openapiFields.add("latestSummary");
    openapiFields.add("medium");
    openapiFields.add("name");
    openapiFields.add("obfuscatedUserId");
    openapiFields.add("qualityMetadata");
    openapiFields.add("runtimeAnnotations");
    openapiFields.add("startTime");
    openapiFields.add("transcript");
    openapiFields.add("ttl");
    openapiFields.add("turnCount");
    openapiFields.add("updateTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudContactcenterinsightsV1alpha1Conversation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudContactcenterinsightsV1alpha1Conversation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudContactcenterinsightsV1alpha1Conversation is not found in the empty JSON string", GoogleCloudContactcenterinsightsV1alpha1Conversation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudContactcenterinsightsV1alpha1Conversation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudContactcenterinsightsV1alpha1Conversation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("agentId") != null && !jsonObj.get("agentId").isJsonNull()) && !jsonObj.get("agentId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `agentId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("agentId").toString()));
      }
      // validate the optional field `callMetadata`
      if (jsonObj.get("callMetadata") != null && !jsonObj.get("callMetadata").isJsonNull()) {
        GoogleCloudContactcenterinsightsV1alpha1ConversationCallMetadata.validateJsonElement(jsonObj.get("callMetadata"));
      }
      if ((jsonObj.get("createTime") != null && !jsonObj.get("createTime").isJsonNull()) && !jsonObj.get("createTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createTime").toString()));
      }
      // validate the optional field `dataSource`
      if (jsonObj.get("dataSource") != null && !jsonObj.get("dataSource").isJsonNull()) {
        GoogleCloudContactcenterinsightsV1alpha1ConversationDataSource.validateJsonElement(jsonObj.get("dataSource"));
      }
      if ((jsonObj.get("duration") != null && !jsonObj.get("duration").isJsonNull()) && !jsonObj.get("duration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `duration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("duration").toString()));
      }
      if ((jsonObj.get("expireTime") != null && !jsonObj.get("expireTime").isJsonNull()) && !jsonObj.get("expireTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expireTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expireTime").toString()));
      }
      if ((jsonObj.get("languageCode") != null && !jsonObj.get("languageCode").isJsonNull()) && !jsonObj.get("languageCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `languageCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("languageCode").toString()));
      }
      // validate the optional field `latestAnalysis`
      if (jsonObj.get("latestAnalysis") != null && !jsonObj.get("latestAnalysis").isJsonNull()) {
        GoogleCloudContactcenterinsightsV1alpha1Analysis.validateJsonElement(jsonObj.get("latestAnalysis"));
      }
      // validate the optional field `latestSummary`
      if (jsonObj.get("latestSummary") != null && !jsonObj.get("latestSummary").isJsonNull()) {
        GoogleCloudContactcenterinsightsV1alpha1ConversationSummarizationSuggestionData.validateJsonElement(jsonObj.get("latestSummary"));
      }
      if ((jsonObj.get("medium") != null && !jsonObj.get("medium").isJsonNull()) && !jsonObj.get("medium").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `medium` to be a primitive type in the JSON string but got `%s`", jsonObj.get("medium").toString()));
      }
      // validate the optional field `medium`
      if (jsonObj.get("medium") != null && !jsonObj.get("medium").isJsonNull()) {
        MediumEnum.validateJsonElement(jsonObj.get("medium"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("obfuscatedUserId") != null && !jsonObj.get("obfuscatedUserId").isJsonNull()) && !jsonObj.get("obfuscatedUserId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `obfuscatedUserId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("obfuscatedUserId").toString()));
      }
      // validate the optional field `qualityMetadata`
      if (jsonObj.get("qualityMetadata") != null && !jsonObj.get("qualityMetadata").isJsonNull()) {
        GoogleCloudContactcenterinsightsV1alpha1ConversationQualityMetadata.validateJsonElement(jsonObj.get("qualityMetadata"));
      }
      if (jsonObj.get("runtimeAnnotations") != null && !jsonObj.get("runtimeAnnotations").isJsonNull()) {
        JsonArray jsonArrayruntimeAnnotations = jsonObj.getAsJsonArray("runtimeAnnotations");
        if (jsonArrayruntimeAnnotations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("runtimeAnnotations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `runtimeAnnotations` to be an array in the JSON string but got `%s`", jsonObj.get("runtimeAnnotations").toString()));
          }

          // validate the optional field `runtimeAnnotations` (array)
          for (int i = 0; i < jsonArrayruntimeAnnotations.size(); i++) {
            GoogleCloudContactcenterinsightsV1alpha1RuntimeAnnotation.validateJsonElement(jsonArrayruntimeAnnotations.get(i));
          };
        }
      }
      if ((jsonObj.get("startTime") != null && !jsonObj.get("startTime").isJsonNull()) && !jsonObj.get("startTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `startTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("startTime").toString()));
      }
      // validate the optional field `transcript`
      if (jsonObj.get("transcript") != null && !jsonObj.get("transcript").isJsonNull()) {
        GoogleCloudContactcenterinsightsV1alpha1ConversationTranscript.validateJsonElement(jsonObj.get("transcript"));
      }
      if ((jsonObj.get("ttl") != null && !jsonObj.get("ttl").isJsonNull()) && !jsonObj.get("ttl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ttl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ttl").toString()));
      }
      if ((jsonObj.get("updateTime") != null && !jsonObj.get("updateTime").isJsonNull()) && !jsonObj.get("updateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updateTime").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudContactcenterinsightsV1alpha1Conversation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudContactcenterinsightsV1alpha1Conversation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudContactcenterinsightsV1alpha1Conversation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudContactcenterinsightsV1alpha1Conversation.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudContactcenterinsightsV1alpha1Conversation>() {
           @Override
           public void write(JsonWriter out, GoogleCloudContactcenterinsightsV1alpha1Conversation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudContactcenterinsightsV1alpha1Conversation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudContactcenterinsightsV1alpha1Conversation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudContactcenterinsightsV1alpha1Conversation
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudContactcenterinsightsV1alpha1Conversation
   */
  public static GoogleCloudContactcenterinsightsV1alpha1Conversation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudContactcenterinsightsV1alpha1Conversation.class);
  }

  /**
   * Convert an instance of GoogleCloudContactcenterinsightsV1alpha1Conversation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

