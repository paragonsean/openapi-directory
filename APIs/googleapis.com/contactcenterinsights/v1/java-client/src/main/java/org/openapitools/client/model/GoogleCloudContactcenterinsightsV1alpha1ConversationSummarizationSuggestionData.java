/*
 * Contact Center AI Insights API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Conversation summarization suggestion data.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:46:41.653092-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudContactcenterinsightsV1alpha1ConversationSummarizationSuggestionData {
  public static final String SERIALIZED_NAME_ANSWER_RECORD = "answerRecord";
  @SerializedName(SERIALIZED_NAME_ANSWER_RECORD)
  private String answerRecord;

  public static final String SERIALIZED_NAME_CONFIDENCE = "confidence";
  @SerializedName(SERIALIZED_NAME_CONFIDENCE)
  private Float confidence;

  public static final String SERIALIZED_NAME_CONVERSATION_MODEL = "conversationModel";
  @SerializedName(SERIALIZED_NAME_CONVERSATION_MODEL)
  private String conversationModel;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private Map<String, String> metadata = new HashMap<>();

  public static final String SERIALIZED_NAME_TEXT = "text";
  @SerializedName(SERIALIZED_NAME_TEXT)
  private String text;

  public static final String SERIALIZED_NAME_TEXT_SECTIONS = "textSections";
  @SerializedName(SERIALIZED_NAME_TEXT_SECTIONS)
  private Map<String, String> textSections = new HashMap<>();

  public GoogleCloudContactcenterinsightsV1alpha1ConversationSummarizationSuggestionData() {
  }

  public GoogleCloudContactcenterinsightsV1alpha1ConversationSummarizationSuggestionData answerRecord(String answerRecord) {
    this.answerRecord = answerRecord;
    return this;
  }

  /**
   * The name of the answer record. Format: projects/{project}/locations/{location}/answerRecords/{answer_record}
   * @return answerRecord
   */
  @javax.annotation.Nullable
  public String getAnswerRecord() {
    return answerRecord;
  }

  public void setAnswerRecord(String answerRecord) {
    this.answerRecord = answerRecord;
  }


  public GoogleCloudContactcenterinsightsV1alpha1ConversationSummarizationSuggestionData confidence(Float confidence) {
    this.confidence = confidence;
    return this;
  }

  /**
   * The confidence score of the summarization.
   * @return confidence
   */
  @javax.annotation.Nullable
  public Float getConfidence() {
    return confidence;
  }

  public void setConfidence(Float confidence) {
    this.confidence = confidence;
  }


  public GoogleCloudContactcenterinsightsV1alpha1ConversationSummarizationSuggestionData conversationModel(String conversationModel) {
    this.conversationModel = conversationModel;
    return this;
  }

  /**
   * The name of the model that generates this summary. Format: projects/{project}/locations/{location}/conversationModels/{conversation_model}
   * @return conversationModel
   */
  @javax.annotation.Nullable
  public String getConversationModel() {
    return conversationModel;
  }

  public void setConversationModel(String conversationModel) {
    this.conversationModel = conversationModel;
  }


  public GoogleCloudContactcenterinsightsV1alpha1ConversationSummarizationSuggestionData metadata(Map<String, String> metadata) {
    this.metadata = metadata;
    return this;
  }

  public GoogleCloudContactcenterinsightsV1alpha1ConversationSummarizationSuggestionData putMetadataItem(String key, String metadataItem) {
    if (this.metadata == null) {
      this.metadata = new HashMap<>();
    }
    this.metadata.put(key, metadataItem);
    return this;
  }

  /**
   * A map that contains metadata about the summarization and the document from which it originates.
   * @return metadata
   */
  @javax.annotation.Nullable
  public Map<String, String> getMetadata() {
    return metadata;
  }

  public void setMetadata(Map<String, String> metadata) {
    this.metadata = metadata;
  }


  public GoogleCloudContactcenterinsightsV1alpha1ConversationSummarizationSuggestionData text(String text) {
    this.text = text;
    return this;
  }

  /**
   * The summarization content that is concatenated into one string.
   * @return text
   */
  @javax.annotation.Nullable
  public String getText() {
    return text;
  }

  public void setText(String text) {
    this.text = text;
  }


  public GoogleCloudContactcenterinsightsV1alpha1ConversationSummarizationSuggestionData textSections(Map<String, String> textSections) {
    this.textSections = textSections;
    return this;
  }

  public GoogleCloudContactcenterinsightsV1alpha1ConversationSummarizationSuggestionData putTextSectionsItem(String key, String textSectionsItem) {
    if (this.textSections == null) {
      this.textSections = new HashMap<>();
    }
    this.textSections.put(key, textSectionsItem);
    return this;
  }

  /**
   * The summarization content that is divided into sections. The key is the section&#39;s name and the value is the section&#39;s content. There is no specific format for the key or value.
   * @return textSections
   */
  @javax.annotation.Nullable
  public Map<String, String> getTextSections() {
    return textSections;
  }

  public void setTextSections(Map<String, String> textSections) {
    this.textSections = textSections;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudContactcenterinsightsV1alpha1ConversationSummarizationSuggestionData googleCloudContactcenterinsightsV1alpha1ConversationSummarizationSuggestionData = (GoogleCloudContactcenterinsightsV1alpha1ConversationSummarizationSuggestionData) o;
    return Objects.equals(this.answerRecord, googleCloudContactcenterinsightsV1alpha1ConversationSummarizationSuggestionData.answerRecord) &&
        Objects.equals(this.confidence, googleCloudContactcenterinsightsV1alpha1ConversationSummarizationSuggestionData.confidence) &&
        Objects.equals(this.conversationModel, googleCloudContactcenterinsightsV1alpha1ConversationSummarizationSuggestionData.conversationModel) &&
        Objects.equals(this.metadata, googleCloudContactcenterinsightsV1alpha1ConversationSummarizationSuggestionData.metadata) &&
        Objects.equals(this.text, googleCloudContactcenterinsightsV1alpha1ConversationSummarizationSuggestionData.text) &&
        Objects.equals(this.textSections, googleCloudContactcenterinsightsV1alpha1ConversationSummarizationSuggestionData.textSections);
  }

  @Override
  public int hashCode() {
    return Objects.hash(answerRecord, confidence, conversationModel, metadata, text, textSections);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudContactcenterinsightsV1alpha1ConversationSummarizationSuggestionData {\n");
    sb.append("    answerRecord: ").append(toIndentedString(answerRecord)).append("\n");
    sb.append("    confidence: ").append(toIndentedString(confidence)).append("\n");
    sb.append("    conversationModel: ").append(toIndentedString(conversationModel)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("    textSections: ").append(toIndentedString(textSections)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("answerRecord");
    openapiFields.add("confidence");
    openapiFields.add("conversationModel");
    openapiFields.add("metadata");
    openapiFields.add("text");
    openapiFields.add("textSections");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudContactcenterinsightsV1alpha1ConversationSummarizationSuggestionData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudContactcenterinsightsV1alpha1ConversationSummarizationSuggestionData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudContactcenterinsightsV1alpha1ConversationSummarizationSuggestionData is not found in the empty JSON string", GoogleCloudContactcenterinsightsV1alpha1ConversationSummarizationSuggestionData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudContactcenterinsightsV1alpha1ConversationSummarizationSuggestionData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudContactcenterinsightsV1alpha1ConversationSummarizationSuggestionData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("answerRecord") != null && !jsonObj.get("answerRecord").isJsonNull()) && !jsonObj.get("answerRecord").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `answerRecord` to be a primitive type in the JSON string but got `%s`", jsonObj.get("answerRecord").toString()));
      }
      if ((jsonObj.get("conversationModel") != null && !jsonObj.get("conversationModel").isJsonNull()) && !jsonObj.get("conversationModel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `conversationModel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("conversationModel").toString()));
      }
      if ((jsonObj.get("text") != null && !jsonObj.get("text").isJsonNull()) && !jsonObj.get("text").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `text` to be a primitive type in the JSON string but got `%s`", jsonObj.get("text").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudContactcenterinsightsV1alpha1ConversationSummarizationSuggestionData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudContactcenterinsightsV1alpha1ConversationSummarizationSuggestionData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudContactcenterinsightsV1alpha1ConversationSummarizationSuggestionData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudContactcenterinsightsV1alpha1ConversationSummarizationSuggestionData.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudContactcenterinsightsV1alpha1ConversationSummarizationSuggestionData>() {
           @Override
           public void write(JsonWriter out, GoogleCloudContactcenterinsightsV1alpha1ConversationSummarizationSuggestionData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudContactcenterinsightsV1alpha1ConversationSummarizationSuggestionData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudContactcenterinsightsV1alpha1ConversationSummarizationSuggestionData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudContactcenterinsightsV1alpha1ConversationSummarizationSuggestionData
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudContactcenterinsightsV1alpha1ConversationSummarizationSuggestionData
   */
  public static GoogleCloudContactcenterinsightsV1alpha1ConversationSummarizationSuggestionData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudContactcenterinsightsV1alpha1ConversationSummarizationSuggestionData.class);
  }

  /**
   * Convert an instance of GoogleCloudContactcenterinsightsV1alpha1ConversationSummarizationSuggestionData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

