/*
 * Contact Center AI Insights API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.GoogleCloudContactcenterinsightsV1RedactionConfig;
import org.openapitools.client.model.GoogleCloudContactcenterinsightsV1SettingsAnalysisConfig;
import org.openapitools.client.model.GoogleCloudContactcenterinsightsV1SpeechConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The settings resource.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:46:41.653092-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudContactcenterinsightsV1Settings {
  public static final String SERIALIZED_NAME_ANALYSIS_CONFIG = "analysisConfig";
  @SerializedName(SERIALIZED_NAME_ANALYSIS_CONFIG)
  private GoogleCloudContactcenterinsightsV1SettingsAnalysisConfig analysisConfig;

  public static final String SERIALIZED_NAME_CONVERSATION_TTL = "conversationTtl";
  @SerializedName(SERIALIZED_NAME_CONVERSATION_TTL)
  private String conversationTtl;

  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private String createTime;

  public static final String SERIALIZED_NAME_LANGUAGE_CODE = "languageCode";
  @SerializedName(SERIALIZED_NAME_LANGUAGE_CODE)
  private String languageCode;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PUBSUB_NOTIFICATION_SETTINGS = "pubsubNotificationSettings";
  @SerializedName(SERIALIZED_NAME_PUBSUB_NOTIFICATION_SETTINGS)
  private Map<String, String> pubsubNotificationSettings = new HashMap<>();

  public static final String SERIALIZED_NAME_REDACTION_CONFIG = "redactionConfig";
  @SerializedName(SERIALIZED_NAME_REDACTION_CONFIG)
  private GoogleCloudContactcenterinsightsV1RedactionConfig redactionConfig;

  public static final String SERIALIZED_NAME_SPEECH_CONFIG = "speechConfig";
  @SerializedName(SERIALIZED_NAME_SPEECH_CONFIG)
  private GoogleCloudContactcenterinsightsV1SpeechConfig speechConfig;

  public static final String SERIALIZED_NAME_UPDATE_TIME = "updateTime";
  @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
  private String updateTime;

  public GoogleCloudContactcenterinsightsV1Settings() {
  }

  public GoogleCloudContactcenterinsightsV1Settings(
     String createTime, 
     String updateTime
  ) {
    this();
    this.createTime = createTime;
    this.updateTime = updateTime;
  }

  public GoogleCloudContactcenterinsightsV1Settings analysisConfig(GoogleCloudContactcenterinsightsV1SettingsAnalysisConfig analysisConfig) {
    this.analysisConfig = analysisConfig;
    return this;
  }

  /**
   * Get analysisConfig
   * @return analysisConfig
   */
  @javax.annotation.Nullable
  public GoogleCloudContactcenterinsightsV1SettingsAnalysisConfig getAnalysisConfig() {
    return analysisConfig;
  }

  public void setAnalysisConfig(GoogleCloudContactcenterinsightsV1SettingsAnalysisConfig analysisConfig) {
    this.analysisConfig = analysisConfig;
  }


  public GoogleCloudContactcenterinsightsV1Settings conversationTtl(String conversationTtl) {
    this.conversationTtl = conversationTtl;
    return this;
  }

  /**
   * The default TTL for newly-created conversations. If a conversation has a specified expiration, that value will be used instead. Changing this value will not change the expiration of existing conversations. Conversations with no expire time persist until they are deleted.
   * @return conversationTtl
   */
  @javax.annotation.Nullable
  public String getConversationTtl() {
    return conversationTtl;
  }

  public void setConversationTtl(String conversationTtl) {
    this.conversationTtl = conversationTtl;
  }


  /**
   * Output only. The time at which the settings was created.
   * @return createTime
   */
  @javax.annotation.Nullable
  public String getCreateTime() {
    return createTime;
  }



  public GoogleCloudContactcenterinsightsV1Settings languageCode(String languageCode) {
    this.languageCode = languageCode;
    return this;
  }

  /**
   * A language code to be applied to each transcript segment unless the segment already specifies a language code. Language code defaults to \&quot;en-US\&quot; if it is neither specified on the segment nor here.
   * @return languageCode
   */
  @javax.annotation.Nullable
  public String getLanguageCode() {
    return languageCode;
  }

  public void setLanguageCode(String languageCode) {
    this.languageCode = languageCode;
  }


  public GoogleCloudContactcenterinsightsV1Settings name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Immutable. The resource name of the settings resource. Format: projects/{project}/locations/{location}/settings
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public GoogleCloudContactcenterinsightsV1Settings pubsubNotificationSettings(Map<String, String> pubsubNotificationSettings) {
    this.pubsubNotificationSettings = pubsubNotificationSettings;
    return this;
  }

  public GoogleCloudContactcenterinsightsV1Settings putPubsubNotificationSettingsItem(String key, String pubsubNotificationSettingsItem) {
    if (this.pubsubNotificationSettings == null) {
      this.pubsubNotificationSettings = new HashMap<>();
    }
    this.pubsubNotificationSettings.put(key, pubsubNotificationSettingsItem);
    return this;
  }

  /**
   * A map that maps a notification trigger to a Pub/Sub topic. Each time a specified trigger occurs, Insights will notify the corresponding Pub/Sub topic. Keys are notification triggers. Supported keys are: * \&quot;all-triggers\&quot;: Notify each time any of the supported triggers occurs. * \&quot;create-analysis\&quot;: Notify each time an analysis is created. * \&quot;create-conversation\&quot;: Notify each time a conversation is created. * \&quot;export-insights-data\&quot;: Notify each time an export is complete. * \&quot;update-conversation\&quot;: Notify each time a conversation is updated via UpdateConversation. * \&quot;upload-conversation\&quot;: Notify when an UploadConversation LRO completes. Values are Pub/Sub topics. The format of each Pub/Sub topic is: projects/{project}/topics/{topic}
   * @return pubsubNotificationSettings
   */
  @javax.annotation.Nullable
  public Map<String, String> getPubsubNotificationSettings() {
    return pubsubNotificationSettings;
  }

  public void setPubsubNotificationSettings(Map<String, String> pubsubNotificationSettings) {
    this.pubsubNotificationSettings = pubsubNotificationSettings;
  }


  public GoogleCloudContactcenterinsightsV1Settings redactionConfig(GoogleCloudContactcenterinsightsV1RedactionConfig redactionConfig) {
    this.redactionConfig = redactionConfig;
    return this;
  }

  /**
   * Get redactionConfig
   * @return redactionConfig
   */
  @javax.annotation.Nullable
  public GoogleCloudContactcenterinsightsV1RedactionConfig getRedactionConfig() {
    return redactionConfig;
  }

  public void setRedactionConfig(GoogleCloudContactcenterinsightsV1RedactionConfig redactionConfig) {
    this.redactionConfig = redactionConfig;
  }


  public GoogleCloudContactcenterinsightsV1Settings speechConfig(GoogleCloudContactcenterinsightsV1SpeechConfig speechConfig) {
    this.speechConfig = speechConfig;
    return this;
  }

  /**
   * Get speechConfig
   * @return speechConfig
   */
  @javax.annotation.Nullable
  public GoogleCloudContactcenterinsightsV1SpeechConfig getSpeechConfig() {
    return speechConfig;
  }

  public void setSpeechConfig(GoogleCloudContactcenterinsightsV1SpeechConfig speechConfig) {
    this.speechConfig = speechConfig;
  }


  /**
   * Output only. The time at which the settings were last updated.
   * @return updateTime
   */
  @javax.annotation.Nullable
  public String getUpdateTime() {
    return updateTime;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudContactcenterinsightsV1Settings googleCloudContactcenterinsightsV1Settings = (GoogleCloudContactcenterinsightsV1Settings) o;
    return Objects.equals(this.analysisConfig, googleCloudContactcenterinsightsV1Settings.analysisConfig) &&
        Objects.equals(this.conversationTtl, googleCloudContactcenterinsightsV1Settings.conversationTtl) &&
        Objects.equals(this.createTime, googleCloudContactcenterinsightsV1Settings.createTime) &&
        Objects.equals(this.languageCode, googleCloudContactcenterinsightsV1Settings.languageCode) &&
        Objects.equals(this.name, googleCloudContactcenterinsightsV1Settings.name) &&
        Objects.equals(this.pubsubNotificationSettings, googleCloudContactcenterinsightsV1Settings.pubsubNotificationSettings) &&
        Objects.equals(this.redactionConfig, googleCloudContactcenterinsightsV1Settings.redactionConfig) &&
        Objects.equals(this.speechConfig, googleCloudContactcenterinsightsV1Settings.speechConfig) &&
        Objects.equals(this.updateTime, googleCloudContactcenterinsightsV1Settings.updateTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(analysisConfig, conversationTtl, createTime, languageCode, name, pubsubNotificationSettings, redactionConfig, speechConfig, updateTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudContactcenterinsightsV1Settings {\n");
    sb.append("    analysisConfig: ").append(toIndentedString(analysisConfig)).append("\n");
    sb.append("    conversationTtl: ").append(toIndentedString(conversationTtl)).append("\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    languageCode: ").append(toIndentedString(languageCode)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    pubsubNotificationSettings: ").append(toIndentedString(pubsubNotificationSettings)).append("\n");
    sb.append("    redactionConfig: ").append(toIndentedString(redactionConfig)).append("\n");
    sb.append("    speechConfig: ").append(toIndentedString(speechConfig)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("analysisConfig");
    openapiFields.add("conversationTtl");
    openapiFields.add("createTime");
    openapiFields.add("languageCode");
    openapiFields.add("name");
    openapiFields.add("pubsubNotificationSettings");
    openapiFields.add("redactionConfig");
    openapiFields.add("speechConfig");
    openapiFields.add("updateTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudContactcenterinsightsV1Settings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudContactcenterinsightsV1Settings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudContactcenterinsightsV1Settings is not found in the empty JSON string", GoogleCloudContactcenterinsightsV1Settings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudContactcenterinsightsV1Settings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudContactcenterinsightsV1Settings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `analysisConfig`
      if (jsonObj.get("analysisConfig") != null && !jsonObj.get("analysisConfig").isJsonNull()) {
        GoogleCloudContactcenterinsightsV1SettingsAnalysisConfig.validateJsonElement(jsonObj.get("analysisConfig"));
      }
      if ((jsonObj.get("conversationTtl") != null && !jsonObj.get("conversationTtl").isJsonNull()) && !jsonObj.get("conversationTtl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `conversationTtl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("conversationTtl").toString()));
      }
      if ((jsonObj.get("createTime") != null && !jsonObj.get("createTime").isJsonNull()) && !jsonObj.get("createTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createTime").toString()));
      }
      if ((jsonObj.get("languageCode") != null && !jsonObj.get("languageCode").isJsonNull()) && !jsonObj.get("languageCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `languageCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("languageCode").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `redactionConfig`
      if (jsonObj.get("redactionConfig") != null && !jsonObj.get("redactionConfig").isJsonNull()) {
        GoogleCloudContactcenterinsightsV1RedactionConfig.validateJsonElement(jsonObj.get("redactionConfig"));
      }
      // validate the optional field `speechConfig`
      if (jsonObj.get("speechConfig") != null && !jsonObj.get("speechConfig").isJsonNull()) {
        GoogleCloudContactcenterinsightsV1SpeechConfig.validateJsonElement(jsonObj.get("speechConfig"));
      }
      if ((jsonObj.get("updateTime") != null && !jsonObj.get("updateTime").isJsonNull()) && !jsonObj.get("updateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updateTime").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudContactcenterinsightsV1Settings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudContactcenterinsightsV1Settings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudContactcenterinsightsV1Settings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudContactcenterinsightsV1Settings.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudContactcenterinsightsV1Settings>() {
           @Override
           public void write(JsonWriter out, GoogleCloudContactcenterinsightsV1Settings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudContactcenterinsightsV1Settings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudContactcenterinsightsV1Settings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudContactcenterinsightsV1Settings
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudContactcenterinsightsV1Settings
   */
  public static GoogleCloudContactcenterinsightsV1Settings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudContactcenterinsightsV1Settings.class);
  }

  /**
   * Convert an instance of GoogleCloudContactcenterinsightsV1Settings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

