# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_contactcenterinsights_v1_export_insights_data_request_big_query_destination import GoogleCloudContactcenterinsightsV1ExportInsightsDataRequestBigQueryDestination
from openapi_server import util


class GoogleCloudContactcenterinsightsV1ExportInsightsDataRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, big_query_destination: GoogleCloudContactcenterinsightsV1ExportInsightsDataRequestBigQueryDestination=None, filter: str=None, kms_key: str=None, parent: str=None, write_disposition: str=None):
        """GoogleCloudContactcenterinsightsV1ExportInsightsDataRequest - a model defined in OpenAPI

        :param big_query_destination: The big_query_destination of this GoogleCloudContactcenterinsightsV1ExportInsightsDataRequest.
        :param filter: The filter of this GoogleCloudContactcenterinsightsV1ExportInsightsDataRequest.
        :param kms_key: The kms_key of this GoogleCloudContactcenterinsightsV1ExportInsightsDataRequest.
        :param parent: The parent of this GoogleCloudContactcenterinsightsV1ExportInsightsDataRequest.
        :param write_disposition: The write_disposition of this GoogleCloudContactcenterinsightsV1ExportInsightsDataRequest.
        """
        self.openapi_types = {
            'big_query_destination': GoogleCloudContactcenterinsightsV1ExportInsightsDataRequestBigQueryDestination,
            'filter': str,
            'kms_key': str,
            'parent': str,
            'write_disposition': str
        }

        self.attribute_map = {
            'big_query_destination': 'bigQueryDestination',
            'filter': 'filter',
            'kms_key': 'kmsKey',
            'parent': 'parent',
            'write_disposition': 'writeDisposition'
        }

        self._big_query_destination = big_query_destination
        self._filter = filter
        self._kms_key = kms_key
        self._parent = parent
        self._write_disposition = write_disposition

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudContactcenterinsightsV1ExportInsightsDataRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudContactcenterinsightsV1ExportInsightsDataRequest of this GoogleCloudContactcenterinsightsV1ExportInsightsDataRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def big_query_destination(self):
        """Gets the big_query_destination of this GoogleCloudContactcenterinsightsV1ExportInsightsDataRequest.


        :return: The big_query_destination of this GoogleCloudContactcenterinsightsV1ExportInsightsDataRequest.
        :rtype: GoogleCloudContactcenterinsightsV1ExportInsightsDataRequestBigQueryDestination
        """
        return self._big_query_destination

    @big_query_destination.setter
    def big_query_destination(self, big_query_destination):
        """Sets the big_query_destination of this GoogleCloudContactcenterinsightsV1ExportInsightsDataRequest.


        :param big_query_destination: The big_query_destination of this GoogleCloudContactcenterinsightsV1ExportInsightsDataRequest.
        :type big_query_destination: GoogleCloudContactcenterinsightsV1ExportInsightsDataRequestBigQueryDestination
        """

        self._big_query_destination = big_query_destination

    @property
    def filter(self):
        """Gets the filter of this GoogleCloudContactcenterinsightsV1ExportInsightsDataRequest.

        A filter to reduce results to a specific subset. Useful for exporting conversations with specific properties.

        :return: The filter of this GoogleCloudContactcenterinsightsV1ExportInsightsDataRequest.
        :rtype: str
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this GoogleCloudContactcenterinsightsV1ExportInsightsDataRequest.

        A filter to reduce results to a specific subset. Useful for exporting conversations with specific properties.

        :param filter: The filter of this GoogleCloudContactcenterinsightsV1ExportInsightsDataRequest.
        :type filter: str
        """

        self._filter = filter

    @property
    def kms_key(self):
        """Gets the kms_key of this GoogleCloudContactcenterinsightsV1ExportInsightsDataRequest.

        A fully qualified KMS key name for BigQuery tables protected by CMEK. Format: projects/{project}/locations/{location}/keyRings/{keyring}/cryptoKeys/{key}/cryptoKeyVersions/{version}

        :return: The kms_key of this GoogleCloudContactcenterinsightsV1ExportInsightsDataRequest.
        :rtype: str
        """
        return self._kms_key

    @kms_key.setter
    def kms_key(self, kms_key):
        """Sets the kms_key of this GoogleCloudContactcenterinsightsV1ExportInsightsDataRequest.

        A fully qualified KMS key name for BigQuery tables protected by CMEK. Format: projects/{project}/locations/{location}/keyRings/{keyring}/cryptoKeys/{key}/cryptoKeyVersions/{version}

        :param kms_key: The kms_key of this GoogleCloudContactcenterinsightsV1ExportInsightsDataRequest.
        :type kms_key: str
        """

        self._kms_key = kms_key

    @property
    def parent(self):
        """Gets the parent of this GoogleCloudContactcenterinsightsV1ExportInsightsDataRequest.

        Required. The parent resource to export data from.

        :return: The parent of this GoogleCloudContactcenterinsightsV1ExportInsightsDataRequest.
        :rtype: str
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """Sets the parent of this GoogleCloudContactcenterinsightsV1ExportInsightsDataRequest.

        Required. The parent resource to export data from.

        :param parent: The parent of this GoogleCloudContactcenterinsightsV1ExportInsightsDataRequest.
        :type parent: str
        """

        self._parent = parent

    @property
    def write_disposition(self):
        """Gets the write_disposition of this GoogleCloudContactcenterinsightsV1ExportInsightsDataRequest.

        Options for what to do if the destination table already exists.

        :return: The write_disposition of this GoogleCloudContactcenterinsightsV1ExportInsightsDataRequest.
        :rtype: str
        """
        return self._write_disposition

    @write_disposition.setter
    def write_disposition(self, write_disposition):
        """Sets the write_disposition of this GoogleCloudContactcenterinsightsV1ExportInsightsDataRequest.

        Options for what to do if the destination table already exists.

        :param write_disposition: The write_disposition of this GoogleCloudContactcenterinsightsV1ExportInsightsDataRequest.
        :type write_disposition: str
        """
        allowed_values = ["WRITE_DISPOSITION_UNSPECIFIED", "WRITE_TRUNCATE", "WRITE_APPEND"]  # noqa: E501
        if write_disposition not in allowed_values:
            raise ValueError(
                "Invalid value for `write_disposition` ({0}), must be one of {1}"
                .format(write_disposition, allowed_values)
            )

        self._write_disposition = write_disposition
