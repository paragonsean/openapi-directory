# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_contactcenterinsights_v1alpha1_annotator_selector import GoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector
from openapi_server import util


class GoogleCloudContactcenterinsightsV1alpha1BulkAnalyzeConversationsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, analysis_percentage: float=None, annotator_selector: GoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector=None, filter: str=None, parent: str=None):
        """GoogleCloudContactcenterinsightsV1alpha1BulkAnalyzeConversationsRequest - a model defined in OpenAPI

        :param analysis_percentage: The analysis_percentage of this GoogleCloudContactcenterinsightsV1alpha1BulkAnalyzeConversationsRequest.
        :param annotator_selector: The annotator_selector of this GoogleCloudContactcenterinsightsV1alpha1BulkAnalyzeConversationsRequest.
        :param filter: The filter of this GoogleCloudContactcenterinsightsV1alpha1BulkAnalyzeConversationsRequest.
        :param parent: The parent of this GoogleCloudContactcenterinsightsV1alpha1BulkAnalyzeConversationsRequest.
        """
        self.openapi_types = {
            'analysis_percentage': float,
            'annotator_selector': GoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector,
            'filter': str,
            'parent': str
        }

        self.attribute_map = {
            'analysis_percentage': 'analysisPercentage',
            'annotator_selector': 'annotatorSelector',
            'filter': 'filter',
            'parent': 'parent'
        }

        self._analysis_percentage = analysis_percentage
        self._annotator_selector = annotator_selector
        self._filter = filter
        self._parent = parent

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudContactcenterinsightsV1alpha1BulkAnalyzeConversationsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudContactcenterinsightsV1alpha1BulkAnalyzeConversationsRequest of this GoogleCloudContactcenterinsightsV1alpha1BulkAnalyzeConversationsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def analysis_percentage(self):
        """Gets the analysis_percentage of this GoogleCloudContactcenterinsightsV1alpha1BulkAnalyzeConversationsRequest.

        Required. Percentage of selected conversation to analyze, between [0, 100].

        :return: The analysis_percentage of this GoogleCloudContactcenterinsightsV1alpha1BulkAnalyzeConversationsRequest.
        :rtype: float
        """
        return self._analysis_percentage

    @analysis_percentage.setter
    def analysis_percentage(self, analysis_percentage):
        """Sets the analysis_percentage of this GoogleCloudContactcenterinsightsV1alpha1BulkAnalyzeConversationsRequest.

        Required. Percentage of selected conversation to analyze, between [0, 100].

        :param analysis_percentage: The analysis_percentage of this GoogleCloudContactcenterinsightsV1alpha1BulkAnalyzeConversationsRequest.
        :type analysis_percentage: float
        """

        self._analysis_percentage = analysis_percentage

    @property
    def annotator_selector(self):
        """Gets the annotator_selector of this GoogleCloudContactcenterinsightsV1alpha1BulkAnalyzeConversationsRequest.


        :return: The annotator_selector of this GoogleCloudContactcenterinsightsV1alpha1BulkAnalyzeConversationsRequest.
        :rtype: GoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector
        """
        return self._annotator_selector

    @annotator_selector.setter
    def annotator_selector(self, annotator_selector):
        """Sets the annotator_selector of this GoogleCloudContactcenterinsightsV1alpha1BulkAnalyzeConversationsRequest.


        :param annotator_selector: The annotator_selector of this GoogleCloudContactcenterinsightsV1alpha1BulkAnalyzeConversationsRequest.
        :type annotator_selector: GoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector
        """

        self._annotator_selector = annotator_selector

    @property
    def filter(self):
        """Gets the filter of this GoogleCloudContactcenterinsightsV1alpha1BulkAnalyzeConversationsRequest.

        Required. Filter used to select the subset of conversations to analyze.

        :return: The filter of this GoogleCloudContactcenterinsightsV1alpha1BulkAnalyzeConversationsRequest.
        :rtype: str
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this GoogleCloudContactcenterinsightsV1alpha1BulkAnalyzeConversationsRequest.

        Required. Filter used to select the subset of conversations to analyze.

        :param filter: The filter of this GoogleCloudContactcenterinsightsV1alpha1BulkAnalyzeConversationsRequest.
        :type filter: str
        """

        self._filter = filter

    @property
    def parent(self):
        """Gets the parent of this GoogleCloudContactcenterinsightsV1alpha1BulkAnalyzeConversationsRequest.

        Required. The parent resource to create analyses in.

        :return: The parent of this GoogleCloudContactcenterinsightsV1alpha1BulkAnalyzeConversationsRequest.
        :rtype: str
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """Sets the parent of this GoogleCloudContactcenterinsightsV1alpha1BulkAnalyzeConversationsRequest.

        Required. The parent resource to create analyses in.

        :param parent: The parent of this GoogleCloudContactcenterinsightsV1alpha1BulkAnalyzeConversationsRequest.
        :type parent: str
        """

        self._parent = parent
