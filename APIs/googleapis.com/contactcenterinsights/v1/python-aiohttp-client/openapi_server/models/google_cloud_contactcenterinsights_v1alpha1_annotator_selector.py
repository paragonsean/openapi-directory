# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_contactcenterinsights_v1alpha1_annotator_selector_summarization_config import GoogleCloudContactcenterinsightsV1alpha1AnnotatorSelectorSummarizationConfig
from openapi_server import util


class GoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, issue_models: List[str]=None, phrase_matchers: List[str]=None, run_entity_annotator: bool=None, run_intent_annotator: bool=None, run_interruption_annotator: bool=None, run_issue_model_annotator: bool=None, run_phrase_matcher_annotator: bool=None, run_sentiment_annotator: bool=None, run_silence_annotator: bool=None, run_summarization_annotator: bool=None, summarization_config: GoogleCloudContactcenterinsightsV1alpha1AnnotatorSelectorSummarizationConfig=None):
        """GoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector - a model defined in OpenAPI

        :param issue_models: The issue_models of this GoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector.
        :param phrase_matchers: The phrase_matchers of this GoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector.
        :param run_entity_annotator: The run_entity_annotator of this GoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector.
        :param run_intent_annotator: The run_intent_annotator of this GoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector.
        :param run_interruption_annotator: The run_interruption_annotator of this GoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector.
        :param run_issue_model_annotator: The run_issue_model_annotator of this GoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector.
        :param run_phrase_matcher_annotator: The run_phrase_matcher_annotator of this GoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector.
        :param run_sentiment_annotator: The run_sentiment_annotator of this GoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector.
        :param run_silence_annotator: The run_silence_annotator of this GoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector.
        :param run_summarization_annotator: The run_summarization_annotator of this GoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector.
        :param summarization_config: The summarization_config of this GoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector.
        """
        self.openapi_types = {
            'issue_models': List[str],
            'phrase_matchers': List[str],
            'run_entity_annotator': bool,
            'run_intent_annotator': bool,
            'run_interruption_annotator': bool,
            'run_issue_model_annotator': bool,
            'run_phrase_matcher_annotator': bool,
            'run_sentiment_annotator': bool,
            'run_silence_annotator': bool,
            'run_summarization_annotator': bool,
            'summarization_config': GoogleCloudContactcenterinsightsV1alpha1AnnotatorSelectorSummarizationConfig
        }

        self.attribute_map = {
            'issue_models': 'issueModels',
            'phrase_matchers': 'phraseMatchers',
            'run_entity_annotator': 'runEntityAnnotator',
            'run_intent_annotator': 'runIntentAnnotator',
            'run_interruption_annotator': 'runInterruptionAnnotator',
            'run_issue_model_annotator': 'runIssueModelAnnotator',
            'run_phrase_matcher_annotator': 'runPhraseMatcherAnnotator',
            'run_sentiment_annotator': 'runSentimentAnnotator',
            'run_silence_annotator': 'runSilenceAnnotator',
            'run_summarization_annotator': 'runSummarizationAnnotator',
            'summarization_config': 'summarizationConfig'
        }

        self._issue_models = issue_models
        self._phrase_matchers = phrase_matchers
        self._run_entity_annotator = run_entity_annotator
        self._run_intent_annotator = run_intent_annotator
        self._run_interruption_annotator = run_interruption_annotator
        self._run_issue_model_annotator = run_issue_model_annotator
        self._run_phrase_matcher_annotator = run_phrase_matcher_annotator
        self._run_sentiment_annotator = run_sentiment_annotator
        self._run_silence_annotator = run_silence_annotator
        self._run_summarization_annotator = run_summarization_annotator
        self._summarization_config = summarization_config

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector of this GoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def issue_models(self):
        """Gets the issue_models of this GoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector.

        The issue model to run. If not provided, the most recently deployed topic model will be used. The provided issue model will only be used for inference if the issue model is deployed and if run_issue_model_annotator is set to true. If more than one issue model is provided, only the first provided issue model will be used for inference.

        :return: The issue_models of this GoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector.
        :rtype: List[str]
        """
        return self._issue_models

    @issue_models.setter
    def issue_models(self, issue_models):
        """Sets the issue_models of this GoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector.

        The issue model to run. If not provided, the most recently deployed topic model will be used. The provided issue model will only be used for inference if the issue model is deployed and if run_issue_model_annotator is set to true. If more than one issue model is provided, only the first provided issue model will be used for inference.

        :param issue_models: The issue_models of this GoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector.
        :type issue_models: List[str]
        """

        self._issue_models = issue_models

    @property
    def phrase_matchers(self):
        """Gets the phrase_matchers of this GoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector.

        The list of phrase matchers to run. If not provided, all active phrase matchers will be used. If inactive phrase matchers are provided, they will not be used. Phrase matchers will be run only if run_phrase_matcher_annotator is set to true. Format: projects/{project}/locations/{location}/phraseMatchers/{phrase_matcher}

        :return: The phrase_matchers of this GoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector.
        :rtype: List[str]
        """
        return self._phrase_matchers

    @phrase_matchers.setter
    def phrase_matchers(self, phrase_matchers):
        """Sets the phrase_matchers of this GoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector.

        The list of phrase matchers to run. If not provided, all active phrase matchers will be used. If inactive phrase matchers are provided, they will not be used. Phrase matchers will be run only if run_phrase_matcher_annotator is set to true. Format: projects/{project}/locations/{location}/phraseMatchers/{phrase_matcher}

        :param phrase_matchers: The phrase_matchers of this GoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector.
        :type phrase_matchers: List[str]
        """

        self._phrase_matchers = phrase_matchers

    @property
    def run_entity_annotator(self):
        """Gets the run_entity_annotator of this GoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector.

        Whether to run the entity annotator.

        :return: The run_entity_annotator of this GoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector.
        :rtype: bool
        """
        return self._run_entity_annotator

    @run_entity_annotator.setter
    def run_entity_annotator(self, run_entity_annotator):
        """Sets the run_entity_annotator of this GoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector.

        Whether to run the entity annotator.

        :param run_entity_annotator: The run_entity_annotator of this GoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector.
        :type run_entity_annotator: bool
        """

        self._run_entity_annotator = run_entity_annotator

    @property
    def run_intent_annotator(self):
        """Gets the run_intent_annotator of this GoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector.

        Whether to run the intent annotator.

        :return: The run_intent_annotator of this GoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector.
        :rtype: bool
        """
        return self._run_intent_annotator

    @run_intent_annotator.setter
    def run_intent_annotator(self, run_intent_annotator):
        """Sets the run_intent_annotator of this GoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector.

        Whether to run the intent annotator.

        :param run_intent_annotator: The run_intent_annotator of this GoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector.
        :type run_intent_annotator: bool
        """

        self._run_intent_annotator = run_intent_annotator

    @property
    def run_interruption_annotator(self):
        """Gets the run_interruption_annotator of this GoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector.

        Whether to run the interruption annotator.

        :return: The run_interruption_annotator of this GoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector.
        :rtype: bool
        """
        return self._run_interruption_annotator

    @run_interruption_annotator.setter
    def run_interruption_annotator(self, run_interruption_annotator):
        """Sets the run_interruption_annotator of this GoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector.

        Whether to run the interruption annotator.

        :param run_interruption_annotator: The run_interruption_annotator of this GoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector.
        :type run_interruption_annotator: bool
        """

        self._run_interruption_annotator = run_interruption_annotator

    @property
    def run_issue_model_annotator(self):
        """Gets the run_issue_model_annotator of this GoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector.

        Whether to run the issue model annotator. A model should have already been deployed for this to take effect.

        :return: The run_issue_model_annotator of this GoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector.
        :rtype: bool
        """
        return self._run_issue_model_annotator

    @run_issue_model_annotator.setter
    def run_issue_model_annotator(self, run_issue_model_annotator):
        """Sets the run_issue_model_annotator of this GoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector.

        Whether to run the issue model annotator. A model should have already been deployed for this to take effect.

        :param run_issue_model_annotator: The run_issue_model_annotator of this GoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector.
        :type run_issue_model_annotator: bool
        """

        self._run_issue_model_annotator = run_issue_model_annotator

    @property
    def run_phrase_matcher_annotator(self):
        """Gets the run_phrase_matcher_annotator of this GoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector.

        Whether to run the active phrase matcher annotator(s).

        :return: The run_phrase_matcher_annotator of this GoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector.
        :rtype: bool
        """
        return self._run_phrase_matcher_annotator

    @run_phrase_matcher_annotator.setter
    def run_phrase_matcher_annotator(self, run_phrase_matcher_annotator):
        """Sets the run_phrase_matcher_annotator of this GoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector.

        Whether to run the active phrase matcher annotator(s).

        :param run_phrase_matcher_annotator: The run_phrase_matcher_annotator of this GoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector.
        :type run_phrase_matcher_annotator: bool
        """

        self._run_phrase_matcher_annotator = run_phrase_matcher_annotator

    @property
    def run_sentiment_annotator(self):
        """Gets the run_sentiment_annotator of this GoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector.

        Whether to run the sentiment annotator.

        :return: The run_sentiment_annotator of this GoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector.
        :rtype: bool
        """
        return self._run_sentiment_annotator

    @run_sentiment_annotator.setter
    def run_sentiment_annotator(self, run_sentiment_annotator):
        """Sets the run_sentiment_annotator of this GoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector.

        Whether to run the sentiment annotator.

        :param run_sentiment_annotator: The run_sentiment_annotator of this GoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector.
        :type run_sentiment_annotator: bool
        """

        self._run_sentiment_annotator = run_sentiment_annotator

    @property
    def run_silence_annotator(self):
        """Gets the run_silence_annotator of this GoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector.

        Whether to run the silence annotator.

        :return: The run_silence_annotator of this GoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector.
        :rtype: bool
        """
        return self._run_silence_annotator

    @run_silence_annotator.setter
    def run_silence_annotator(self, run_silence_annotator):
        """Sets the run_silence_annotator of this GoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector.

        Whether to run the silence annotator.

        :param run_silence_annotator: The run_silence_annotator of this GoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector.
        :type run_silence_annotator: bool
        """

        self._run_silence_annotator = run_silence_annotator

    @property
    def run_summarization_annotator(self):
        """Gets the run_summarization_annotator of this GoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector.

        Whether to run the summarization annotator.

        :return: The run_summarization_annotator of this GoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector.
        :rtype: bool
        """
        return self._run_summarization_annotator

    @run_summarization_annotator.setter
    def run_summarization_annotator(self, run_summarization_annotator):
        """Sets the run_summarization_annotator of this GoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector.

        Whether to run the summarization annotator.

        :param run_summarization_annotator: The run_summarization_annotator of this GoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector.
        :type run_summarization_annotator: bool
        """

        self._run_summarization_annotator = run_summarization_annotator

    @property
    def summarization_config(self):
        """Gets the summarization_config of this GoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector.


        :return: The summarization_config of this GoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector.
        :rtype: GoogleCloudContactcenterinsightsV1alpha1AnnotatorSelectorSummarizationConfig
        """
        return self._summarization_config

    @summarization_config.setter
    def summarization_config(self, summarization_config):
        """Sets the summarization_config of this GoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector.


        :param summarization_config: The summarization_config of this GoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector.
        :type summarization_config: GoogleCloudContactcenterinsightsV1alpha1AnnotatorSelectorSummarizationConfig
        """

        self._summarization_config = summarization_config
