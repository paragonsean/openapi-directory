# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_contactcenterinsights_v1_phrase_match_rule_config import GoogleCloudContactcenterinsightsV1PhraseMatchRuleConfig
from openapi_server import util


class GoogleCloudContactcenterinsightsV1PhraseMatchRule(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, config: GoogleCloudContactcenterinsightsV1PhraseMatchRuleConfig=None, negated: bool=None, query: str=None):
        """GoogleCloudContactcenterinsightsV1PhraseMatchRule - a model defined in OpenAPI

        :param config: The config of this GoogleCloudContactcenterinsightsV1PhraseMatchRule.
        :param negated: The negated of this GoogleCloudContactcenterinsightsV1PhraseMatchRule.
        :param query: The query of this GoogleCloudContactcenterinsightsV1PhraseMatchRule.
        """
        self.openapi_types = {
            'config': GoogleCloudContactcenterinsightsV1PhraseMatchRuleConfig,
            'negated': bool,
            'query': str
        }

        self.attribute_map = {
            'config': 'config',
            'negated': 'negated',
            'query': 'query'
        }

        self._config = config
        self._negated = negated
        self._query = query

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudContactcenterinsightsV1PhraseMatchRule':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudContactcenterinsightsV1PhraseMatchRule of this GoogleCloudContactcenterinsightsV1PhraseMatchRule.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def config(self):
        """Gets the config of this GoogleCloudContactcenterinsightsV1PhraseMatchRule.


        :return: The config of this GoogleCloudContactcenterinsightsV1PhraseMatchRule.
        :rtype: GoogleCloudContactcenterinsightsV1PhraseMatchRuleConfig
        """
        return self._config

    @config.setter
    def config(self, config):
        """Sets the config of this GoogleCloudContactcenterinsightsV1PhraseMatchRule.


        :param config: The config of this GoogleCloudContactcenterinsightsV1PhraseMatchRule.
        :type config: GoogleCloudContactcenterinsightsV1PhraseMatchRuleConfig
        """

        self._config = config

    @property
    def negated(self):
        """Gets the negated of this GoogleCloudContactcenterinsightsV1PhraseMatchRule.

        Specifies whether the phrase must be missing from the transcript segment or present in the transcript segment.

        :return: The negated of this GoogleCloudContactcenterinsightsV1PhraseMatchRule.
        :rtype: bool
        """
        return self._negated

    @negated.setter
    def negated(self, negated):
        """Sets the negated of this GoogleCloudContactcenterinsightsV1PhraseMatchRule.

        Specifies whether the phrase must be missing from the transcript segment or present in the transcript segment.

        :param negated: The negated of this GoogleCloudContactcenterinsightsV1PhraseMatchRule.
        :type negated: bool
        """

        self._negated = negated

    @property
    def query(self):
        """Gets the query of this GoogleCloudContactcenterinsightsV1PhraseMatchRule.

        Required. The phrase to be matched.

        :return: The query of this GoogleCloudContactcenterinsightsV1PhraseMatchRule.
        :rtype: str
        """
        return self._query

    @query.setter
    def query(self, query):
        """Sets the query of this GoogleCloudContactcenterinsightsV1PhraseMatchRule.

        Required. The phrase to be matched.

        :param query: The query of this GoogleCloudContactcenterinsightsV1PhraseMatchRule.
        :type query: str
        """

        self._query = query
