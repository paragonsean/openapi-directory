# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_contactcenterinsights_v1_sentiment_data import GoogleCloudContactcenterinsightsV1SentimentData
from openapi_server import util


class GoogleCloudContactcenterinsightsV1EntityMentionData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, entity_unique_id: str=None, sentiment: GoogleCloudContactcenterinsightsV1SentimentData=None, type: str=None):
        """GoogleCloudContactcenterinsightsV1EntityMentionData - a model defined in OpenAPI

        :param entity_unique_id: The entity_unique_id of this GoogleCloudContactcenterinsightsV1EntityMentionData.
        :param sentiment: The sentiment of this GoogleCloudContactcenterinsightsV1EntityMentionData.
        :param type: The type of this GoogleCloudContactcenterinsightsV1EntityMentionData.
        """
        self.openapi_types = {
            'entity_unique_id': str,
            'sentiment': GoogleCloudContactcenterinsightsV1SentimentData,
            'type': str
        }

        self.attribute_map = {
            'entity_unique_id': 'entityUniqueId',
            'sentiment': 'sentiment',
            'type': 'type'
        }

        self._entity_unique_id = entity_unique_id
        self._sentiment = sentiment
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudContactcenterinsightsV1EntityMentionData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudContactcenterinsightsV1EntityMentionData of this GoogleCloudContactcenterinsightsV1EntityMentionData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def entity_unique_id(self):
        """Gets the entity_unique_id of this GoogleCloudContactcenterinsightsV1EntityMentionData.

        The key of this entity in conversation entities. Can be used to retrieve the exact `Entity` this mention is attached to.

        :return: The entity_unique_id of this GoogleCloudContactcenterinsightsV1EntityMentionData.
        :rtype: str
        """
        return self._entity_unique_id

    @entity_unique_id.setter
    def entity_unique_id(self, entity_unique_id):
        """Sets the entity_unique_id of this GoogleCloudContactcenterinsightsV1EntityMentionData.

        The key of this entity in conversation entities. Can be used to retrieve the exact `Entity` this mention is attached to.

        :param entity_unique_id: The entity_unique_id of this GoogleCloudContactcenterinsightsV1EntityMentionData.
        :type entity_unique_id: str
        """

        self._entity_unique_id = entity_unique_id

    @property
    def sentiment(self):
        """Gets the sentiment of this GoogleCloudContactcenterinsightsV1EntityMentionData.


        :return: The sentiment of this GoogleCloudContactcenterinsightsV1EntityMentionData.
        :rtype: GoogleCloudContactcenterinsightsV1SentimentData
        """
        return self._sentiment

    @sentiment.setter
    def sentiment(self, sentiment):
        """Sets the sentiment of this GoogleCloudContactcenterinsightsV1EntityMentionData.


        :param sentiment: The sentiment of this GoogleCloudContactcenterinsightsV1EntityMentionData.
        :type sentiment: GoogleCloudContactcenterinsightsV1SentimentData
        """

        self._sentiment = sentiment

    @property
    def type(self):
        """Gets the type of this GoogleCloudContactcenterinsightsV1EntityMentionData.

        The type of the entity mention.

        :return: The type of this GoogleCloudContactcenterinsightsV1EntityMentionData.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this GoogleCloudContactcenterinsightsV1EntityMentionData.

        The type of the entity mention.

        :param type: The type of this GoogleCloudContactcenterinsightsV1EntityMentionData.
        :type type: str
        """
        allowed_values = ["MENTION_TYPE_UNSPECIFIED", "PROPER", "COMMON"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
