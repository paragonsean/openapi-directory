# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleCloudContactcenterinsightsV1alpha1SmartComposeSuggestionData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, confidence_score: float=None, metadata: Dict[str, str]=None, query_record: str=None, suggestion: str=None):
        """GoogleCloudContactcenterinsightsV1alpha1SmartComposeSuggestionData - a model defined in OpenAPI

        :param confidence_score: The confidence_score of this GoogleCloudContactcenterinsightsV1alpha1SmartComposeSuggestionData.
        :param metadata: The metadata of this GoogleCloudContactcenterinsightsV1alpha1SmartComposeSuggestionData.
        :param query_record: The query_record of this GoogleCloudContactcenterinsightsV1alpha1SmartComposeSuggestionData.
        :param suggestion: The suggestion of this GoogleCloudContactcenterinsightsV1alpha1SmartComposeSuggestionData.
        """
        self.openapi_types = {
            'confidence_score': float,
            'metadata': Dict[str, str],
            'query_record': str,
            'suggestion': str
        }

        self.attribute_map = {
            'confidence_score': 'confidenceScore',
            'metadata': 'metadata',
            'query_record': 'queryRecord',
            'suggestion': 'suggestion'
        }

        self._confidence_score = confidence_score
        self._metadata = metadata
        self._query_record = query_record
        self._suggestion = suggestion

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudContactcenterinsightsV1alpha1SmartComposeSuggestionData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudContactcenterinsightsV1alpha1SmartComposeSuggestionData of this GoogleCloudContactcenterinsightsV1alpha1SmartComposeSuggestionData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def confidence_score(self):
        """Gets the confidence_score of this GoogleCloudContactcenterinsightsV1alpha1SmartComposeSuggestionData.

        The system's confidence score that this suggestion is a good match for this conversation, ranging from 0.0 (completely uncertain) to 1.0 (completely certain).

        :return: The confidence_score of this GoogleCloudContactcenterinsightsV1alpha1SmartComposeSuggestionData.
        :rtype: float
        """
        return self._confidence_score

    @confidence_score.setter
    def confidence_score(self, confidence_score):
        """Sets the confidence_score of this GoogleCloudContactcenterinsightsV1alpha1SmartComposeSuggestionData.

        The system's confidence score that this suggestion is a good match for this conversation, ranging from 0.0 (completely uncertain) to 1.0 (completely certain).

        :param confidence_score: The confidence_score of this GoogleCloudContactcenterinsightsV1alpha1SmartComposeSuggestionData.
        :type confidence_score: float
        """

        self._confidence_score = confidence_score

    @property
    def metadata(self):
        """Gets the metadata of this GoogleCloudContactcenterinsightsV1alpha1SmartComposeSuggestionData.

        Map that contains metadata about the Smart Compose suggestion and the document from which it originates.

        :return: The metadata of this GoogleCloudContactcenterinsightsV1alpha1SmartComposeSuggestionData.
        :rtype: Dict[str, str]
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this GoogleCloudContactcenterinsightsV1alpha1SmartComposeSuggestionData.

        Map that contains metadata about the Smart Compose suggestion and the document from which it originates.

        :param metadata: The metadata of this GoogleCloudContactcenterinsightsV1alpha1SmartComposeSuggestionData.
        :type metadata: Dict[str, str]
        """

        self._metadata = metadata

    @property
    def query_record(self):
        """Gets the query_record of this GoogleCloudContactcenterinsightsV1alpha1SmartComposeSuggestionData.

        The name of the answer record. Format: projects/{project}/locations/{location}/answerRecords/{answer_record}

        :return: The query_record of this GoogleCloudContactcenterinsightsV1alpha1SmartComposeSuggestionData.
        :rtype: str
        """
        return self._query_record

    @query_record.setter
    def query_record(self, query_record):
        """Sets the query_record of this GoogleCloudContactcenterinsightsV1alpha1SmartComposeSuggestionData.

        The name of the answer record. Format: projects/{project}/locations/{location}/answerRecords/{answer_record}

        :param query_record: The query_record of this GoogleCloudContactcenterinsightsV1alpha1SmartComposeSuggestionData.
        :type query_record: str
        """

        self._query_record = query_record

    @property
    def suggestion(self):
        """Gets the suggestion of this GoogleCloudContactcenterinsightsV1alpha1SmartComposeSuggestionData.

        The content of the suggestion.

        :return: The suggestion of this GoogleCloudContactcenterinsightsV1alpha1SmartComposeSuggestionData.
        :rtype: str
        """
        return self._suggestion

    @suggestion.setter
    def suggestion(self, suggestion):
        """Sets the suggestion of this GoogleCloudContactcenterinsightsV1alpha1SmartComposeSuggestionData.

        The content of the suggestion.

        :param suggestion: The suggestion of this GoogleCloudContactcenterinsightsV1alpha1SmartComposeSuggestionData.
        :type suggestion: str
        """

        self._suggestion = suggestion
