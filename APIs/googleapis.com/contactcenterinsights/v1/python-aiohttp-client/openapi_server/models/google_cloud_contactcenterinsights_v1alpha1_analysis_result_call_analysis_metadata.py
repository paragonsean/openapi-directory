# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_contactcenterinsights_v1alpha1_call_annotation import GoogleCloudContactcenterinsightsV1alpha1CallAnnotation
from openapi_server.models.google_cloud_contactcenterinsights_v1alpha1_conversation_level_sentiment import GoogleCloudContactcenterinsightsV1alpha1ConversationLevelSentiment
from openapi_server.models.google_cloud_contactcenterinsights_v1alpha1_entity import GoogleCloudContactcenterinsightsV1alpha1Entity
from openapi_server.models.google_cloud_contactcenterinsights_v1alpha1_intent import GoogleCloudContactcenterinsightsV1alpha1Intent
from openapi_server.models.google_cloud_contactcenterinsights_v1alpha1_issue_model_result import GoogleCloudContactcenterinsightsV1alpha1IssueModelResult
from openapi_server.models.google_cloud_contactcenterinsights_v1alpha1_phrase_match_data import GoogleCloudContactcenterinsightsV1alpha1PhraseMatchData
from openapi_server import util


class GoogleCloudContactcenterinsightsV1alpha1AnalysisResultCallAnalysisMetadata(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, annotations: List[GoogleCloudContactcenterinsightsV1alpha1CallAnnotation]=None, entities: Dict[str, GoogleCloudContactcenterinsightsV1alpha1Entity]=None, intents: Dict[str, GoogleCloudContactcenterinsightsV1alpha1Intent]=None, issue_model_result: GoogleCloudContactcenterinsightsV1alpha1IssueModelResult=None, phrase_matchers: Dict[str, GoogleCloudContactcenterinsightsV1alpha1PhraseMatchData]=None, sentiments: List[GoogleCloudContactcenterinsightsV1alpha1ConversationLevelSentiment]=None):
        """GoogleCloudContactcenterinsightsV1alpha1AnalysisResultCallAnalysisMetadata - a model defined in OpenAPI

        :param annotations: The annotations of this GoogleCloudContactcenterinsightsV1alpha1AnalysisResultCallAnalysisMetadata.
        :param entities: The entities of this GoogleCloudContactcenterinsightsV1alpha1AnalysisResultCallAnalysisMetadata.
        :param intents: The intents of this GoogleCloudContactcenterinsightsV1alpha1AnalysisResultCallAnalysisMetadata.
        :param issue_model_result: The issue_model_result of this GoogleCloudContactcenterinsightsV1alpha1AnalysisResultCallAnalysisMetadata.
        :param phrase_matchers: The phrase_matchers of this GoogleCloudContactcenterinsightsV1alpha1AnalysisResultCallAnalysisMetadata.
        :param sentiments: The sentiments of this GoogleCloudContactcenterinsightsV1alpha1AnalysisResultCallAnalysisMetadata.
        """
        self.openapi_types = {
            'annotations': List[GoogleCloudContactcenterinsightsV1alpha1CallAnnotation],
            'entities': Dict[str, GoogleCloudContactcenterinsightsV1alpha1Entity],
            'intents': Dict[str, GoogleCloudContactcenterinsightsV1alpha1Intent],
            'issue_model_result': GoogleCloudContactcenterinsightsV1alpha1IssueModelResult,
            'phrase_matchers': Dict[str, GoogleCloudContactcenterinsightsV1alpha1PhraseMatchData],
            'sentiments': List[GoogleCloudContactcenterinsightsV1alpha1ConversationLevelSentiment]
        }

        self.attribute_map = {
            'annotations': 'annotations',
            'entities': 'entities',
            'intents': 'intents',
            'issue_model_result': 'issueModelResult',
            'phrase_matchers': 'phraseMatchers',
            'sentiments': 'sentiments'
        }

        self._annotations = annotations
        self._entities = entities
        self._intents = intents
        self._issue_model_result = issue_model_result
        self._phrase_matchers = phrase_matchers
        self._sentiments = sentiments

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudContactcenterinsightsV1alpha1AnalysisResultCallAnalysisMetadata':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudContactcenterinsightsV1alpha1AnalysisResultCallAnalysisMetadata of this GoogleCloudContactcenterinsightsV1alpha1AnalysisResultCallAnalysisMetadata.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def annotations(self):
        """Gets the annotations of this GoogleCloudContactcenterinsightsV1alpha1AnalysisResultCallAnalysisMetadata.

        A list of call annotations that apply to this call.

        :return: The annotations of this GoogleCloudContactcenterinsightsV1alpha1AnalysisResultCallAnalysisMetadata.
        :rtype: List[GoogleCloudContactcenterinsightsV1alpha1CallAnnotation]
        """
        return self._annotations

    @annotations.setter
    def annotations(self, annotations):
        """Sets the annotations of this GoogleCloudContactcenterinsightsV1alpha1AnalysisResultCallAnalysisMetadata.

        A list of call annotations that apply to this call.

        :param annotations: The annotations of this GoogleCloudContactcenterinsightsV1alpha1AnalysisResultCallAnalysisMetadata.
        :type annotations: List[GoogleCloudContactcenterinsightsV1alpha1CallAnnotation]
        """

        self._annotations = annotations

    @property
    def entities(self):
        """Gets the entities of this GoogleCloudContactcenterinsightsV1alpha1AnalysisResultCallAnalysisMetadata.

        All the entities in the call.

        :return: The entities of this GoogleCloudContactcenterinsightsV1alpha1AnalysisResultCallAnalysisMetadata.
        :rtype: Dict[str, GoogleCloudContactcenterinsightsV1alpha1Entity]
        """
        return self._entities

    @entities.setter
    def entities(self, entities):
        """Sets the entities of this GoogleCloudContactcenterinsightsV1alpha1AnalysisResultCallAnalysisMetadata.

        All the entities in the call.

        :param entities: The entities of this GoogleCloudContactcenterinsightsV1alpha1AnalysisResultCallAnalysisMetadata.
        :type entities: Dict[str, GoogleCloudContactcenterinsightsV1alpha1Entity]
        """

        self._entities = entities

    @property
    def intents(self):
        """Gets the intents of this GoogleCloudContactcenterinsightsV1alpha1AnalysisResultCallAnalysisMetadata.

        All the matched intents in the call.

        :return: The intents of this GoogleCloudContactcenterinsightsV1alpha1AnalysisResultCallAnalysisMetadata.
        :rtype: Dict[str, GoogleCloudContactcenterinsightsV1alpha1Intent]
        """
        return self._intents

    @intents.setter
    def intents(self, intents):
        """Sets the intents of this GoogleCloudContactcenterinsightsV1alpha1AnalysisResultCallAnalysisMetadata.

        All the matched intents in the call.

        :param intents: The intents of this GoogleCloudContactcenterinsightsV1alpha1AnalysisResultCallAnalysisMetadata.
        :type intents: Dict[str, GoogleCloudContactcenterinsightsV1alpha1Intent]
        """

        self._intents = intents

    @property
    def issue_model_result(self):
        """Gets the issue_model_result of this GoogleCloudContactcenterinsightsV1alpha1AnalysisResultCallAnalysisMetadata.


        :return: The issue_model_result of this GoogleCloudContactcenterinsightsV1alpha1AnalysisResultCallAnalysisMetadata.
        :rtype: GoogleCloudContactcenterinsightsV1alpha1IssueModelResult
        """
        return self._issue_model_result

    @issue_model_result.setter
    def issue_model_result(self, issue_model_result):
        """Sets the issue_model_result of this GoogleCloudContactcenterinsightsV1alpha1AnalysisResultCallAnalysisMetadata.


        :param issue_model_result: The issue_model_result of this GoogleCloudContactcenterinsightsV1alpha1AnalysisResultCallAnalysisMetadata.
        :type issue_model_result: GoogleCloudContactcenterinsightsV1alpha1IssueModelResult
        """

        self._issue_model_result = issue_model_result

    @property
    def phrase_matchers(self):
        """Gets the phrase_matchers of this GoogleCloudContactcenterinsightsV1alpha1AnalysisResultCallAnalysisMetadata.

        All the matched phrase matchers in the call.

        :return: The phrase_matchers of this GoogleCloudContactcenterinsightsV1alpha1AnalysisResultCallAnalysisMetadata.
        :rtype: Dict[str, GoogleCloudContactcenterinsightsV1alpha1PhraseMatchData]
        """
        return self._phrase_matchers

    @phrase_matchers.setter
    def phrase_matchers(self, phrase_matchers):
        """Sets the phrase_matchers of this GoogleCloudContactcenterinsightsV1alpha1AnalysisResultCallAnalysisMetadata.

        All the matched phrase matchers in the call.

        :param phrase_matchers: The phrase_matchers of this GoogleCloudContactcenterinsightsV1alpha1AnalysisResultCallAnalysisMetadata.
        :type phrase_matchers: Dict[str, GoogleCloudContactcenterinsightsV1alpha1PhraseMatchData]
        """

        self._phrase_matchers = phrase_matchers

    @property
    def sentiments(self):
        """Gets the sentiments of this GoogleCloudContactcenterinsightsV1alpha1AnalysisResultCallAnalysisMetadata.

        Overall conversation-level sentiment for each channel of the call.

        :return: The sentiments of this GoogleCloudContactcenterinsightsV1alpha1AnalysisResultCallAnalysisMetadata.
        :rtype: List[GoogleCloudContactcenterinsightsV1alpha1ConversationLevelSentiment]
        """
        return self._sentiments

    @sentiments.setter
    def sentiments(self, sentiments):
        """Sets the sentiments of this GoogleCloudContactcenterinsightsV1alpha1AnalysisResultCallAnalysisMetadata.

        Overall conversation-level sentiment for each channel of the call.

        :param sentiments: The sentiments of this GoogleCloudContactcenterinsightsV1alpha1AnalysisResultCallAnalysisMetadata.
        :type sentiments: List[GoogleCloudContactcenterinsightsV1alpha1ConversationLevelSentiment]
        """

        self._sentiments = sentiments
