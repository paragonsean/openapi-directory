# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleCloudContactcenterinsightsV1ConversationSummarizationSuggestionData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, answer_record: str=None, confidence: float=None, conversation_model: str=None, metadata: Dict[str, str]=None, text: str=None, text_sections: Dict[str, str]=None):
        """GoogleCloudContactcenterinsightsV1ConversationSummarizationSuggestionData - a model defined in OpenAPI

        :param answer_record: The answer_record of this GoogleCloudContactcenterinsightsV1ConversationSummarizationSuggestionData.
        :param confidence: The confidence of this GoogleCloudContactcenterinsightsV1ConversationSummarizationSuggestionData.
        :param conversation_model: The conversation_model of this GoogleCloudContactcenterinsightsV1ConversationSummarizationSuggestionData.
        :param metadata: The metadata of this GoogleCloudContactcenterinsightsV1ConversationSummarizationSuggestionData.
        :param text: The text of this GoogleCloudContactcenterinsightsV1ConversationSummarizationSuggestionData.
        :param text_sections: The text_sections of this GoogleCloudContactcenterinsightsV1ConversationSummarizationSuggestionData.
        """
        self.openapi_types = {
            'answer_record': str,
            'confidence': float,
            'conversation_model': str,
            'metadata': Dict[str, str],
            'text': str,
            'text_sections': Dict[str, str]
        }

        self.attribute_map = {
            'answer_record': 'answerRecord',
            'confidence': 'confidence',
            'conversation_model': 'conversationModel',
            'metadata': 'metadata',
            'text': 'text',
            'text_sections': 'textSections'
        }

        self._answer_record = answer_record
        self._confidence = confidence
        self._conversation_model = conversation_model
        self._metadata = metadata
        self._text = text
        self._text_sections = text_sections

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudContactcenterinsightsV1ConversationSummarizationSuggestionData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudContactcenterinsightsV1ConversationSummarizationSuggestionData of this GoogleCloudContactcenterinsightsV1ConversationSummarizationSuggestionData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def answer_record(self):
        """Gets the answer_record of this GoogleCloudContactcenterinsightsV1ConversationSummarizationSuggestionData.

        The name of the answer record. Format: projects/{project}/locations/{location}/answerRecords/{answer_record}

        :return: The answer_record of this GoogleCloudContactcenterinsightsV1ConversationSummarizationSuggestionData.
        :rtype: str
        """
        return self._answer_record

    @answer_record.setter
    def answer_record(self, answer_record):
        """Sets the answer_record of this GoogleCloudContactcenterinsightsV1ConversationSummarizationSuggestionData.

        The name of the answer record. Format: projects/{project}/locations/{location}/answerRecords/{answer_record}

        :param answer_record: The answer_record of this GoogleCloudContactcenterinsightsV1ConversationSummarizationSuggestionData.
        :type answer_record: str
        """

        self._answer_record = answer_record

    @property
    def confidence(self):
        """Gets the confidence of this GoogleCloudContactcenterinsightsV1ConversationSummarizationSuggestionData.

        The confidence score of the summarization.

        :return: The confidence of this GoogleCloudContactcenterinsightsV1ConversationSummarizationSuggestionData.
        :rtype: float
        """
        return self._confidence

    @confidence.setter
    def confidence(self, confidence):
        """Sets the confidence of this GoogleCloudContactcenterinsightsV1ConversationSummarizationSuggestionData.

        The confidence score of the summarization.

        :param confidence: The confidence of this GoogleCloudContactcenterinsightsV1ConversationSummarizationSuggestionData.
        :type confidence: float
        """

        self._confidence = confidence

    @property
    def conversation_model(self):
        """Gets the conversation_model of this GoogleCloudContactcenterinsightsV1ConversationSummarizationSuggestionData.

        The name of the model that generates this summary. Format: projects/{project}/locations/{location}/conversationModels/{conversation_model}

        :return: The conversation_model of this GoogleCloudContactcenterinsightsV1ConversationSummarizationSuggestionData.
        :rtype: str
        """
        return self._conversation_model

    @conversation_model.setter
    def conversation_model(self, conversation_model):
        """Sets the conversation_model of this GoogleCloudContactcenterinsightsV1ConversationSummarizationSuggestionData.

        The name of the model that generates this summary. Format: projects/{project}/locations/{location}/conversationModels/{conversation_model}

        :param conversation_model: The conversation_model of this GoogleCloudContactcenterinsightsV1ConversationSummarizationSuggestionData.
        :type conversation_model: str
        """

        self._conversation_model = conversation_model

    @property
    def metadata(self):
        """Gets the metadata of this GoogleCloudContactcenterinsightsV1ConversationSummarizationSuggestionData.

        A map that contains metadata about the summarization and the document from which it originates.

        :return: The metadata of this GoogleCloudContactcenterinsightsV1ConversationSummarizationSuggestionData.
        :rtype: Dict[str, str]
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this GoogleCloudContactcenterinsightsV1ConversationSummarizationSuggestionData.

        A map that contains metadata about the summarization and the document from which it originates.

        :param metadata: The metadata of this GoogleCloudContactcenterinsightsV1ConversationSummarizationSuggestionData.
        :type metadata: Dict[str, str]
        """

        self._metadata = metadata

    @property
    def text(self):
        """Gets the text of this GoogleCloudContactcenterinsightsV1ConversationSummarizationSuggestionData.

        The summarization content that is concatenated into one string.

        :return: The text of this GoogleCloudContactcenterinsightsV1ConversationSummarizationSuggestionData.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this GoogleCloudContactcenterinsightsV1ConversationSummarizationSuggestionData.

        The summarization content that is concatenated into one string.

        :param text: The text of this GoogleCloudContactcenterinsightsV1ConversationSummarizationSuggestionData.
        :type text: str
        """

        self._text = text

    @property
    def text_sections(self):
        """Gets the text_sections of this GoogleCloudContactcenterinsightsV1ConversationSummarizationSuggestionData.

        The summarization content that is divided into sections. The key is the section's name and the value is the section's content. There is no specific format for the key or value.

        :return: The text_sections of this GoogleCloudContactcenterinsightsV1ConversationSummarizationSuggestionData.
        :rtype: Dict[str, str]
        """
        return self._text_sections

    @text_sections.setter
    def text_sections(self, text_sections):
        """Sets the text_sections of this GoogleCloudContactcenterinsightsV1ConversationSummarizationSuggestionData.

        The summarization content that is divided into sections. The key is the section's name and the value is the section's content. There is no specific format for the key or value.

        :param text_sections: The text_sections of this GoogleCloudContactcenterinsightsV1ConversationSummarizationSuggestionData.
        :type text_sections: Dict[str, str]
        """

        self._text_sections = text_sections
