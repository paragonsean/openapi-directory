# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_contactcenterinsights_v1alpha1_issue_model_label_stats_issue_stats import GoogleCloudContactcenterinsightsV1alpha1IssueModelLabelStatsIssueStats
from openapi_server import util


class GoogleCloudContactcenterinsightsV1alpha1IssueModelLabelStats(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, analyzed_conversations_count: str=None, issue_stats: Dict[str, GoogleCloudContactcenterinsightsV1alpha1IssueModelLabelStatsIssueStats]=None, unclassified_conversations_count: str=None):
        """GoogleCloudContactcenterinsightsV1alpha1IssueModelLabelStats - a model defined in OpenAPI

        :param analyzed_conversations_count: The analyzed_conversations_count of this GoogleCloudContactcenterinsightsV1alpha1IssueModelLabelStats.
        :param issue_stats: The issue_stats of this GoogleCloudContactcenterinsightsV1alpha1IssueModelLabelStats.
        :param unclassified_conversations_count: The unclassified_conversations_count of this GoogleCloudContactcenterinsightsV1alpha1IssueModelLabelStats.
        """
        self.openapi_types = {
            'analyzed_conversations_count': str,
            'issue_stats': Dict[str, GoogleCloudContactcenterinsightsV1alpha1IssueModelLabelStatsIssueStats],
            'unclassified_conversations_count': str
        }

        self.attribute_map = {
            'analyzed_conversations_count': 'analyzedConversationsCount',
            'issue_stats': 'issueStats',
            'unclassified_conversations_count': 'unclassifiedConversationsCount'
        }

        self._analyzed_conversations_count = analyzed_conversations_count
        self._issue_stats = issue_stats
        self._unclassified_conversations_count = unclassified_conversations_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudContactcenterinsightsV1alpha1IssueModelLabelStats':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudContactcenterinsightsV1alpha1IssueModelLabelStats of this GoogleCloudContactcenterinsightsV1alpha1IssueModelLabelStats.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def analyzed_conversations_count(self):
        """Gets the analyzed_conversations_count of this GoogleCloudContactcenterinsightsV1alpha1IssueModelLabelStats.

        Number of conversations the issue model has analyzed at this point in time.

        :return: The analyzed_conversations_count of this GoogleCloudContactcenterinsightsV1alpha1IssueModelLabelStats.
        :rtype: str
        """
        return self._analyzed_conversations_count

    @analyzed_conversations_count.setter
    def analyzed_conversations_count(self, analyzed_conversations_count):
        """Sets the analyzed_conversations_count of this GoogleCloudContactcenterinsightsV1alpha1IssueModelLabelStats.

        Number of conversations the issue model has analyzed at this point in time.

        :param analyzed_conversations_count: The analyzed_conversations_count of this GoogleCloudContactcenterinsightsV1alpha1IssueModelLabelStats.
        :type analyzed_conversations_count: str
        """

        self._analyzed_conversations_count = analyzed_conversations_count

    @property
    def issue_stats(self):
        """Gets the issue_stats of this GoogleCloudContactcenterinsightsV1alpha1IssueModelLabelStats.

        Statistics on each issue. Key is the issue's resource name.

        :return: The issue_stats of this GoogleCloudContactcenterinsightsV1alpha1IssueModelLabelStats.
        :rtype: Dict[str, GoogleCloudContactcenterinsightsV1alpha1IssueModelLabelStatsIssueStats]
        """
        return self._issue_stats

    @issue_stats.setter
    def issue_stats(self, issue_stats):
        """Sets the issue_stats of this GoogleCloudContactcenterinsightsV1alpha1IssueModelLabelStats.

        Statistics on each issue. Key is the issue's resource name.

        :param issue_stats: The issue_stats of this GoogleCloudContactcenterinsightsV1alpha1IssueModelLabelStats.
        :type issue_stats: Dict[str, GoogleCloudContactcenterinsightsV1alpha1IssueModelLabelStatsIssueStats]
        """

        self._issue_stats = issue_stats

    @property
    def unclassified_conversations_count(self):
        """Gets the unclassified_conversations_count of this GoogleCloudContactcenterinsightsV1alpha1IssueModelLabelStats.

        Number of analyzed conversations for which no issue was applicable at this point in time.

        :return: The unclassified_conversations_count of this GoogleCloudContactcenterinsightsV1alpha1IssueModelLabelStats.
        :rtype: str
        """
        return self._unclassified_conversations_count

    @unclassified_conversations_count.setter
    def unclassified_conversations_count(self, unclassified_conversations_count):
        """Sets the unclassified_conversations_count of this GoogleCloudContactcenterinsightsV1alpha1IssueModelLabelStats.

        Number of analyzed conversations for which no issue was applicable at this point in time.

        :param unclassified_conversations_count: The unclassified_conversations_count of this GoogleCloudContactcenterinsightsV1alpha1IssueModelLabelStats.
        :type unclassified_conversations_count: str
        """

        self._unclassified_conversations_count = unclassified_conversations_count
