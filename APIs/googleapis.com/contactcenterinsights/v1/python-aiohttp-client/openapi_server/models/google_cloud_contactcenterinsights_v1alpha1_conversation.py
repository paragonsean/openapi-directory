# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_contactcenterinsights_v1alpha1_analysis import GoogleCloudContactcenterinsightsV1alpha1Analysis
from openapi_server.models.google_cloud_contactcenterinsights_v1alpha1_conversation_call_metadata import GoogleCloudContactcenterinsightsV1alpha1ConversationCallMetadata
from openapi_server.models.google_cloud_contactcenterinsights_v1alpha1_conversation_data_source import GoogleCloudContactcenterinsightsV1alpha1ConversationDataSource
from openapi_server.models.google_cloud_contactcenterinsights_v1alpha1_conversation_quality_metadata import GoogleCloudContactcenterinsightsV1alpha1ConversationQualityMetadata
from openapi_server.models.google_cloud_contactcenterinsights_v1alpha1_conversation_summarization_suggestion_data import GoogleCloudContactcenterinsightsV1alpha1ConversationSummarizationSuggestionData
from openapi_server.models.google_cloud_contactcenterinsights_v1alpha1_conversation_transcript import GoogleCloudContactcenterinsightsV1alpha1ConversationTranscript
from openapi_server.models.google_cloud_contactcenterinsights_v1alpha1_dialogflow_intent import GoogleCloudContactcenterinsightsV1alpha1DialogflowIntent
from openapi_server.models.google_cloud_contactcenterinsights_v1alpha1_runtime_annotation import GoogleCloudContactcenterinsightsV1alpha1RuntimeAnnotation
from openapi_server import util


class GoogleCloudContactcenterinsightsV1alpha1Conversation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, agent_id: str=None, call_metadata: GoogleCloudContactcenterinsightsV1alpha1ConversationCallMetadata=None, create_time: str=None, data_source: GoogleCloudContactcenterinsightsV1alpha1ConversationDataSource=None, dialogflow_intents: Dict[str, GoogleCloudContactcenterinsightsV1alpha1DialogflowIntent]=None, duration: str=None, expire_time: str=None, labels: Dict[str, str]=None, language_code: str=None, latest_analysis: GoogleCloudContactcenterinsightsV1alpha1Analysis=None, latest_summary: GoogleCloudContactcenterinsightsV1alpha1ConversationSummarizationSuggestionData=None, medium: str=None, name: str=None, obfuscated_user_id: str=None, quality_metadata: GoogleCloudContactcenterinsightsV1alpha1ConversationQualityMetadata=None, runtime_annotations: List[GoogleCloudContactcenterinsightsV1alpha1RuntimeAnnotation]=None, start_time: str=None, transcript: GoogleCloudContactcenterinsightsV1alpha1ConversationTranscript=None, ttl: str=None, turn_count: int=None, update_time: str=None):
        """GoogleCloudContactcenterinsightsV1alpha1Conversation - a model defined in OpenAPI

        :param agent_id: The agent_id of this GoogleCloudContactcenterinsightsV1alpha1Conversation.
        :param call_metadata: The call_metadata of this GoogleCloudContactcenterinsightsV1alpha1Conversation.
        :param create_time: The create_time of this GoogleCloudContactcenterinsightsV1alpha1Conversation.
        :param data_source: The data_source of this GoogleCloudContactcenterinsightsV1alpha1Conversation.
        :param dialogflow_intents: The dialogflow_intents of this GoogleCloudContactcenterinsightsV1alpha1Conversation.
        :param duration: The duration of this GoogleCloudContactcenterinsightsV1alpha1Conversation.
        :param expire_time: The expire_time of this GoogleCloudContactcenterinsightsV1alpha1Conversation.
        :param labels: The labels of this GoogleCloudContactcenterinsightsV1alpha1Conversation.
        :param language_code: The language_code of this GoogleCloudContactcenterinsightsV1alpha1Conversation.
        :param latest_analysis: The latest_analysis of this GoogleCloudContactcenterinsightsV1alpha1Conversation.
        :param latest_summary: The latest_summary of this GoogleCloudContactcenterinsightsV1alpha1Conversation.
        :param medium: The medium of this GoogleCloudContactcenterinsightsV1alpha1Conversation.
        :param name: The name of this GoogleCloudContactcenterinsightsV1alpha1Conversation.
        :param obfuscated_user_id: The obfuscated_user_id of this GoogleCloudContactcenterinsightsV1alpha1Conversation.
        :param quality_metadata: The quality_metadata of this GoogleCloudContactcenterinsightsV1alpha1Conversation.
        :param runtime_annotations: The runtime_annotations of this GoogleCloudContactcenterinsightsV1alpha1Conversation.
        :param start_time: The start_time of this GoogleCloudContactcenterinsightsV1alpha1Conversation.
        :param transcript: The transcript of this GoogleCloudContactcenterinsightsV1alpha1Conversation.
        :param ttl: The ttl of this GoogleCloudContactcenterinsightsV1alpha1Conversation.
        :param turn_count: The turn_count of this GoogleCloudContactcenterinsightsV1alpha1Conversation.
        :param update_time: The update_time of this GoogleCloudContactcenterinsightsV1alpha1Conversation.
        """
        self.openapi_types = {
            'agent_id': str,
            'call_metadata': GoogleCloudContactcenterinsightsV1alpha1ConversationCallMetadata,
            'create_time': str,
            'data_source': GoogleCloudContactcenterinsightsV1alpha1ConversationDataSource,
            'dialogflow_intents': Dict[str, GoogleCloudContactcenterinsightsV1alpha1DialogflowIntent],
            'duration': str,
            'expire_time': str,
            'labels': Dict[str, str],
            'language_code': str,
            'latest_analysis': GoogleCloudContactcenterinsightsV1alpha1Analysis,
            'latest_summary': GoogleCloudContactcenterinsightsV1alpha1ConversationSummarizationSuggestionData,
            'medium': str,
            'name': str,
            'obfuscated_user_id': str,
            'quality_metadata': GoogleCloudContactcenterinsightsV1alpha1ConversationQualityMetadata,
            'runtime_annotations': List[GoogleCloudContactcenterinsightsV1alpha1RuntimeAnnotation],
            'start_time': str,
            'transcript': GoogleCloudContactcenterinsightsV1alpha1ConversationTranscript,
            'ttl': str,
            'turn_count': int,
            'update_time': str
        }

        self.attribute_map = {
            'agent_id': 'agentId',
            'call_metadata': 'callMetadata',
            'create_time': 'createTime',
            'data_source': 'dataSource',
            'dialogflow_intents': 'dialogflowIntents',
            'duration': 'duration',
            'expire_time': 'expireTime',
            'labels': 'labels',
            'language_code': 'languageCode',
            'latest_analysis': 'latestAnalysis',
            'latest_summary': 'latestSummary',
            'medium': 'medium',
            'name': 'name',
            'obfuscated_user_id': 'obfuscatedUserId',
            'quality_metadata': 'qualityMetadata',
            'runtime_annotations': 'runtimeAnnotations',
            'start_time': 'startTime',
            'transcript': 'transcript',
            'ttl': 'ttl',
            'turn_count': 'turnCount',
            'update_time': 'updateTime'
        }

        self._agent_id = agent_id
        self._call_metadata = call_metadata
        self._create_time = create_time
        self._data_source = data_source
        self._dialogflow_intents = dialogflow_intents
        self._duration = duration
        self._expire_time = expire_time
        self._labels = labels
        self._language_code = language_code
        self._latest_analysis = latest_analysis
        self._latest_summary = latest_summary
        self._medium = medium
        self._name = name
        self._obfuscated_user_id = obfuscated_user_id
        self._quality_metadata = quality_metadata
        self._runtime_annotations = runtime_annotations
        self._start_time = start_time
        self._transcript = transcript
        self._ttl = ttl
        self._turn_count = turn_count
        self._update_time = update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudContactcenterinsightsV1alpha1Conversation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudContactcenterinsightsV1alpha1Conversation of this GoogleCloudContactcenterinsightsV1alpha1Conversation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def agent_id(self):
        """Gets the agent_id of this GoogleCloudContactcenterinsightsV1alpha1Conversation.

        An opaque, user-specified string representing the human agent who handled the conversation.

        :return: The agent_id of this GoogleCloudContactcenterinsightsV1alpha1Conversation.
        :rtype: str
        """
        return self._agent_id

    @agent_id.setter
    def agent_id(self, agent_id):
        """Sets the agent_id of this GoogleCloudContactcenterinsightsV1alpha1Conversation.

        An opaque, user-specified string representing the human agent who handled the conversation.

        :param agent_id: The agent_id of this GoogleCloudContactcenterinsightsV1alpha1Conversation.
        :type agent_id: str
        """

        self._agent_id = agent_id

    @property
    def call_metadata(self):
        """Gets the call_metadata of this GoogleCloudContactcenterinsightsV1alpha1Conversation.


        :return: The call_metadata of this GoogleCloudContactcenterinsightsV1alpha1Conversation.
        :rtype: GoogleCloudContactcenterinsightsV1alpha1ConversationCallMetadata
        """
        return self._call_metadata

    @call_metadata.setter
    def call_metadata(self, call_metadata):
        """Sets the call_metadata of this GoogleCloudContactcenterinsightsV1alpha1Conversation.


        :param call_metadata: The call_metadata of this GoogleCloudContactcenterinsightsV1alpha1Conversation.
        :type call_metadata: GoogleCloudContactcenterinsightsV1alpha1ConversationCallMetadata
        """

        self._call_metadata = call_metadata

    @property
    def create_time(self):
        """Gets the create_time of this GoogleCloudContactcenterinsightsV1alpha1Conversation.

        Output only. The time at which the conversation was created.

        :return: The create_time of this GoogleCloudContactcenterinsightsV1alpha1Conversation.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this GoogleCloudContactcenterinsightsV1alpha1Conversation.

        Output only. The time at which the conversation was created.

        :param create_time: The create_time of this GoogleCloudContactcenterinsightsV1alpha1Conversation.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def data_source(self):
        """Gets the data_source of this GoogleCloudContactcenterinsightsV1alpha1Conversation.


        :return: The data_source of this GoogleCloudContactcenterinsightsV1alpha1Conversation.
        :rtype: GoogleCloudContactcenterinsightsV1alpha1ConversationDataSource
        """
        return self._data_source

    @data_source.setter
    def data_source(self, data_source):
        """Sets the data_source of this GoogleCloudContactcenterinsightsV1alpha1Conversation.


        :param data_source: The data_source of this GoogleCloudContactcenterinsightsV1alpha1Conversation.
        :type data_source: GoogleCloudContactcenterinsightsV1alpha1ConversationDataSource
        """

        self._data_source = data_source

    @property
    def dialogflow_intents(self):
        """Gets the dialogflow_intents of this GoogleCloudContactcenterinsightsV1alpha1Conversation.

        Output only. All the matched Dialogflow intents in the call. The key corresponds to a Dialogflow intent, format: projects/{project}/agent/{agent}/intents/{intent}

        :return: The dialogflow_intents of this GoogleCloudContactcenterinsightsV1alpha1Conversation.
        :rtype: Dict[str, GoogleCloudContactcenterinsightsV1alpha1DialogflowIntent]
        """
        return self._dialogflow_intents

    @dialogflow_intents.setter
    def dialogflow_intents(self, dialogflow_intents):
        """Sets the dialogflow_intents of this GoogleCloudContactcenterinsightsV1alpha1Conversation.

        Output only. All the matched Dialogflow intents in the call. The key corresponds to a Dialogflow intent, format: projects/{project}/agent/{agent}/intents/{intent}

        :param dialogflow_intents: The dialogflow_intents of this GoogleCloudContactcenterinsightsV1alpha1Conversation.
        :type dialogflow_intents: Dict[str, GoogleCloudContactcenterinsightsV1alpha1DialogflowIntent]
        """

        self._dialogflow_intents = dialogflow_intents

    @property
    def duration(self):
        """Gets the duration of this GoogleCloudContactcenterinsightsV1alpha1Conversation.

        Output only. The duration of the conversation.

        :return: The duration of this GoogleCloudContactcenterinsightsV1alpha1Conversation.
        :rtype: str
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this GoogleCloudContactcenterinsightsV1alpha1Conversation.

        Output only. The duration of the conversation.

        :param duration: The duration of this GoogleCloudContactcenterinsightsV1alpha1Conversation.
        :type duration: str
        """

        self._duration = duration

    @property
    def expire_time(self):
        """Gets the expire_time of this GoogleCloudContactcenterinsightsV1alpha1Conversation.

        The time at which this conversation should expire. After this time, the conversation data and any associated analyses will be deleted.

        :return: The expire_time of this GoogleCloudContactcenterinsightsV1alpha1Conversation.
        :rtype: str
        """
        return self._expire_time

    @expire_time.setter
    def expire_time(self, expire_time):
        """Sets the expire_time of this GoogleCloudContactcenterinsightsV1alpha1Conversation.

        The time at which this conversation should expire. After this time, the conversation data and any associated analyses will be deleted.

        :param expire_time: The expire_time of this GoogleCloudContactcenterinsightsV1alpha1Conversation.
        :type expire_time: str
        """

        self._expire_time = expire_time

    @property
    def labels(self):
        """Gets the labels of this GoogleCloudContactcenterinsightsV1alpha1Conversation.

        A map for the user to specify any custom fields. A maximum of 20 labels per conversation is allowed, with a maximum of 256 characters per entry.

        :return: The labels of this GoogleCloudContactcenterinsightsV1alpha1Conversation.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this GoogleCloudContactcenterinsightsV1alpha1Conversation.

        A map for the user to specify any custom fields. A maximum of 20 labels per conversation is allowed, with a maximum of 256 characters per entry.

        :param labels: The labels of this GoogleCloudContactcenterinsightsV1alpha1Conversation.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def language_code(self):
        """Gets the language_code of this GoogleCloudContactcenterinsightsV1alpha1Conversation.

        A user-specified language code for the conversation.

        :return: The language_code of this GoogleCloudContactcenterinsightsV1alpha1Conversation.
        :rtype: str
        """
        return self._language_code

    @language_code.setter
    def language_code(self, language_code):
        """Sets the language_code of this GoogleCloudContactcenterinsightsV1alpha1Conversation.

        A user-specified language code for the conversation.

        :param language_code: The language_code of this GoogleCloudContactcenterinsightsV1alpha1Conversation.
        :type language_code: str
        """

        self._language_code = language_code

    @property
    def latest_analysis(self):
        """Gets the latest_analysis of this GoogleCloudContactcenterinsightsV1alpha1Conversation.


        :return: The latest_analysis of this GoogleCloudContactcenterinsightsV1alpha1Conversation.
        :rtype: GoogleCloudContactcenterinsightsV1alpha1Analysis
        """
        return self._latest_analysis

    @latest_analysis.setter
    def latest_analysis(self, latest_analysis):
        """Sets the latest_analysis of this GoogleCloudContactcenterinsightsV1alpha1Conversation.


        :param latest_analysis: The latest_analysis of this GoogleCloudContactcenterinsightsV1alpha1Conversation.
        :type latest_analysis: GoogleCloudContactcenterinsightsV1alpha1Analysis
        """

        self._latest_analysis = latest_analysis

    @property
    def latest_summary(self):
        """Gets the latest_summary of this GoogleCloudContactcenterinsightsV1alpha1Conversation.


        :return: The latest_summary of this GoogleCloudContactcenterinsightsV1alpha1Conversation.
        :rtype: GoogleCloudContactcenterinsightsV1alpha1ConversationSummarizationSuggestionData
        """
        return self._latest_summary

    @latest_summary.setter
    def latest_summary(self, latest_summary):
        """Sets the latest_summary of this GoogleCloudContactcenterinsightsV1alpha1Conversation.


        :param latest_summary: The latest_summary of this GoogleCloudContactcenterinsightsV1alpha1Conversation.
        :type latest_summary: GoogleCloudContactcenterinsightsV1alpha1ConversationSummarizationSuggestionData
        """

        self._latest_summary = latest_summary

    @property
    def medium(self):
        """Gets the medium of this GoogleCloudContactcenterinsightsV1alpha1Conversation.

        Immutable. The conversation medium, if unspecified will default to PHONE_CALL.

        :return: The medium of this GoogleCloudContactcenterinsightsV1alpha1Conversation.
        :rtype: str
        """
        return self._medium

    @medium.setter
    def medium(self, medium):
        """Sets the medium of this GoogleCloudContactcenterinsightsV1alpha1Conversation.

        Immutable. The conversation medium, if unspecified will default to PHONE_CALL.

        :param medium: The medium of this GoogleCloudContactcenterinsightsV1alpha1Conversation.
        :type medium: str
        """
        allowed_values = ["MEDIUM_UNSPECIFIED", "PHONE_CALL", "CHAT"]  # noqa: E501
        if medium not in allowed_values:
            raise ValueError(
                "Invalid value for `medium` ({0}), must be one of {1}"
                .format(medium, allowed_values)
            )

        self._medium = medium

    @property
    def name(self):
        """Gets the name of this GoogleCloudContactcenterinsightsV1alpha1Conversation.

        Immutable. The resource name of the conversation. Format: projects/{project}/locations/{location}/conversations/{conversation}

        :return: The name of this GoogleCloudContactcenterinsightsV1alpha1Conversation.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GoogleCloudContactcenterinsightsV1alpha1Conversation.

        Immutable. The resource name of the conversation. Format: projects/{project}/locations/{location}/conversations/{conversation}

        :param name: The name of this GoogleCloudContactcenterinsightsV1alpha1Conversation.
        :type name: str
        """

        self._name = name

    @property
    def obfuscated_user_id(self):
        """Gets the obfuscated_user_id of this GoogleCloudContactcenterinsightsV1alpha1Conversation.

        Obfuscated user ID which the customer sent to us.

        :return: The obfuscated_user_id of this GoogleCloudContactcenterinsightsV1alpha1Conversation.
        :rtype: str
        """
        return self._obfuscated_user_id

    @obfuscated_user_id.setter
    def obfuscated_user_id(self, obfuscated_user_id):
        """Sets the obfuscated_user_id of this GoogleCloudContactcenterinsightsV1alpha1Conversation.

        Obfuscated user ID which the customer sent to us.

        :param obfuscated_user_id: The obfuscated_user_id of this GoogleCloudContactcenterinsightsV1alpha1Conversation.
        :type obfuscated_user_id: str
        """

        self._obfuscated_user_id = obfuscated_user_id

    @property
    def quality_metadata(self):
        """Gets the quality_metadata of this GoogleCloudContactcenterinsightsV1alpha1Conversation.


        :return: The quality_metadata of this GoogleCloudContactcenterinsightsV1alpha1Conversation.
        :rtype: GoogleCloudContactcenterinsightsV1alpha1ConversationQualityMetadata
        """
        return self._quality_metadata

    @quality_metadata.setter
    def quality_metadata(self, quality_metadata):
        """Sets the quality_metadata of this GoogleCloudContactcenterinsightsV1alpha1Conversation.


        :param quality_metadata: The quality_metadata of this GoogleCloudContactcenterinsightsV1alpha1Conversation.
        :type quality_metadata: GoogleCloudContactcenterinsightsV1alpha1ConversationQualityMetadata
        """

        self._quality_metadata = quality_metadata

    @property
    def runtime_annotations(self):
        """Gets the runtime_annotations of this GoogleCloudContactcenterinsightsV1alpha1Conversation.

        Output only. The annotations that were generated during the customer and agent interaction.

        :return: The runtime_annotations of this GoogleCloudContactcenterinsightsV1alpha1Conversation.
        :rtype: List[GoogleCloudContactcenterinsightsV1alpha1RuntimeAnnotation]
        """
        return self._runtime_annotations

    @runtime_annotations.setter
    def runtime_annotations(self, runtime_annotations):
        """Sets the runtime_annotations of this GoogleCloudContactcenterinsightsV1alpha1Conversation.

        Output only. The annotations that were generated during the customer and agent interaction.

        :param runtime_annotations: The runtime_annotations of this GoogleCloudContactcenterinsightsV1alpha1Conversation.
        :type runtime_annotations: List[GoogleCloudContactcenterinsightsV1alpha1RuntimeAnnotation]
        """

        self._runtime_annotations = runtime_annotations

    @property
    def start_time(self):
        """Gets the start_time of this GoogleCloudContactcenterinsightsV1alpha1Conversation.

        The time at which the conversation started.

        :return: The start_time of this GoogleCloudContactcenterinsightsV1alpha1Conversation.
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this GoogleCloudContactcenterinsightsV1alpha1Conversation.

        The time at which the conversation started.

        :param start_time: The start_time of this GoogleCloudContactcenterinsightsV1alpha1Conversation.
        :type start_time: str
        """

        self._start_time = start_time

    @property
    def transcript(self):
        """Gets the transcript of this GoogleCloudContactcenterinsightsV1alpha1Conversation.


        :return: The transcript of this GoogleCloudContactcenterinsightsV1alpha1Conversation.
        :rtype: GoogleCloudContactcenterinsightsV1alpha1ConversationTranscript
        """
        return self._transcript

    @transcript.setter
    def transcript(self, transcript):
        """Sets the transcript of this GoogleCloudContactcenterinsightsV1alpha1Conversation.


        :param transcript: The transcript of this GoogleCloudContactcenterinsightsV1alpha1Conversation.
        :type transcript: GoogleCloudContactcenterinsightsV1alpha1ConversationTranscript
        """

        self._transcript = transcript

    @property
    def ttl(self):
        """Gets the ttl of this GoogleCloudContactcenterinsightsV1alpha1Conversation.

        Input only. The TTL for this resource. If specified, then this TTL will be used to calculate the expire time.

        :return: The ttl of this GoogleCloudContactcenterinsightsV1alpha1Conversation.
        :rtype: str
        """
        return self._ttl

    @ttl.setter
    def ttl(self, ttl):
        """Sets the ttl of this GoogleCloudContactcenterinsightsV1alpha1Conversation.

        Input only. The TTL for this resource. If specified, then this TTL will be used to calculate the expire time.

        :param ttl: The ttl of this GoogleCloudContactcenterinsightsV1alpha1Conversation.
        :type ttl: str
        """

        self._ttl = ttl

    @property
    def turn_count(self):
        """Gets the turn_count of this GoogleCloudContactcenterinsightsV1alpha1Conversation.

        Output only. The number of turns in the conversation.

        :return: The turn_count of this GoogleCloudContactcenterinsightsV1alpha1Conversation.
        :rtype: int
        """
        return self._turn_count

    @turn_count.setter
    def turn_count(self, turn_count):
        """Sets the turn_count of this GoogleCloudContactcenterinsightsV1alpha1Conversation.

        Output only. The number of turns in the conversation.

        :param turn_count: The turn_count of this GoogleCloudContactcenterinsightsV1alpha1Conversation.
        :type turn_count: int
        """

        self._turn_count = turn_count

    @property
    def update_time(self):
        """Gets the update_time of this GoogleCloudContactcenterinsightsV1alpha1Conversation.

        Output only. The most recent time at which the conversation was updated.

        :return: The update_time of this GoogleCloudContactcenterinsightsV1alpha1Conversation.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this GoogleCloudContactcenterinsightsV1alpha1Conversation.

        Output only. The most recent time at which the conversation was updated.

        :param update_time: The update_time of this GoogleCloudContactcenterinsightsV1alpha1Conversation.
        :type update_time: str
        """

        self._update_time = update_time
