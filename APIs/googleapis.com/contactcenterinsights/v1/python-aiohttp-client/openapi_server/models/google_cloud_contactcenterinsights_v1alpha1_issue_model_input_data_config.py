# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleCloudContactcenterinsightsV1alpha1IssueModelInputDataConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, filter: str=None, medium: str=None, training_conversations_count: str=None):
        """GoogleCloudContactcenterinsightsV1alpha1IssueModelInputDataConfig - a model defined in OpenAPI

        :param filter: The filter of this GoogleCloudContactcenterinsightsV1alpha1IssueModelInputDataConfig.
        :param medium: The medium of this GoogleCloudContactcenterinsightsV1alpha1IssueModelInputDataConfig.
        :param training_conversations_count: The training_conversations_count of this GoogleCloudContactcenterinsightsV1alpha1IssueModelInputDataConfig.
        """
        self.openapi_types = {
            'filter': str,
            'medium': str,
            'training_conversations_count': str
        }

        self.attribute_map = {
            'filter': 'filter',
            'medium': 'medium',
            'training_conversations_count': 'trainingConversationsCount'
        }

        self._filter = filter
        self._medium = medium
        self._training_conversations_count = training_conversations_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudContactcenterinsightsV1alpha1IssueModelInputDataConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudContactcenterinsightsV1alpha1IssueModelInputDataConfig of this GoogleCloudContactcenterinsightsV1alpha1IssueModelInputDataConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def filter(self):
        """Gets the filter of this GoogleCloudContactcenterinsightsV1alpha1IssueModelInputDataConfig.

        A filter to reduce the conversations used for training the model to a specific subset.

        :return: The filter of this GoogleCloudContactcenterinsightsV1alpha1IssueModelInputDataConfig.
        :rtype: str
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this GoogleCloudContactcenterinsightsV1alpha1IssueModelInputDataConfig.

        A filter to reduce the conversations used for training the model to a specific subset.

        :param filter: The filter of this GoogleCloudContactcenterinsightsV1alpha1IssueModelInputDataConfig.
        :type filter: str
        """

        self._filter = filter

    @property
    def medium(self):
        """Gets the medium of this GoogleCloudContactcenterinsightsV1alpha1IssueModelInputDataConfig.

        Medium of conversations used in training data. This field is being deprecated. To specify the medium to be used in training a new issue model, set the `medium` field on `filter`.

        :return: The medium of this GoogleCloudContactcenterinsightsV1alpha1IssueModelInputDataConfig.
        :rtype: str
        """
        return self._medium

    @medium.setter
    def medium(self, medium):
        """Sets the medium of this GoogleCloudContactcenterinsightsV1alpha1IssueModelInputDataConfig.

        Medium of conversations used in training data. This field is being deprecated. To specify the medium to be used in training a new issue model, set the `medium` field on `filter`.

        :param medium: The medium of this GoogleCloudContactcenterinsightsV1alpha1IssueModelInputDataConfig.
        :type medium: str
        """
        allowed_values = ["MEDIUM_UNSPECIFIED", "PHONE_CALL", "CHAT"]  # noqa: E501
        if medium not in allowed_values:
            raise ValueError(
                "Invalid value for `medium` ({0}), must be one of {1}"
                .format(medium, allowed_values)
            )

        self._medium = medium

    @property
    def training_conversations_count(self):
        """Gets the training_conversations_count of this GoogleCloudContactcenterinsightsV1alpha1IssueModelInputDataConfig.

        Output only. Number of conversations used in training. Output only.

        :return: The training_conversations_count of this GoogleCloudContactcenterinsightsV1alpha1IssueModelInputDataConfig.
        :rtype: str
        """
        return self._training_conversations_count

    @training_conversations_count.setter
    def training_conversations_count(self, training_conversations_count):
        """Sets the training_conversations_count of this GoogleCloudContactcenterinsightsV1alpha1IssueModelInputDataConfig.

        Output only. Number of conversations used in training. Output only.

        :param training_conversations_count: The training_conversations_count of this GoogleCloudContactcenterinsightsV1alpha1IssueModelInputDataConfig.
        :type training_conversations_count: str
        """

        self._training_conversations_count = training_conversations_count
