/**
 * Contact Center AI Insights API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudContactcenterinsightsV1alpha1EntityMentionData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudContactcenterinsightsV1alpha1EntityMentionData::OAIGoogleCloudContactcenterinsightsV1alpha1EntityMentionData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudContactcenterinsightsV1alpha1EntityMentionData::OAIGoogleCloudContactcenterinsightsV1alpha1EntityMentionData() {
    this->initializeModel();
}

OAIGoogleCloudContactcenterinsightsV1alpha1EntityMentionData::~OAIGoogleCloudContactcenterinsightsV1alpha1EntityMentionData() {}

void OAIGoogleCloudContactcenterinsightsV1alpha1EntityMentionData::initializeModel() {

    m_entity_unique_id_isSet = false;
    m_entity_unique_id_isValid = false;

    m_sentiment_isSet = false;
    m_sentiment_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIGoogleCloudContactcenterinsightsV1alpha1EntityMentionData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudContactcenterinsightsV1alpha1EntityMentionData::fromJsonObject(QJsonObject json) {

    m_entity_unique_id_isValid = ::OpenAPI::fromJsonValue(m_entity_unique_id, json[QString("entityUniqueId")]);
    m_entity_unique_id_isSet = !json[QString("entityUniqueId")].isNull() && m_entity_unique_id_isValid;

    m_sentiment_isValid = ::OpenAPI::fromJsonValue(m_sentiment, json[QString("sentiment")]);
    m_sentiment_isSet = !json[QString("sentiment")].isNull() && m_sentiment_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIGoogleCloudContactcenterinsightsV1alpha1EntityMentionData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudContactcenterinsightsV1alpha1EntityMentionData::asJsonObject() const {
    QJsonObject obj;
    if (m_entity_unique_id_isSet) {
        obj.insert(QString("entityUniqueId"), ::OpenAPI::toJsonValue(m_entity_unique_id));
    }
    if (m_sentiment.isSet()) {
        obj.insert(QString("sentiment"), ::OpenAPI::toJsonValue(m_sentiment));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIGoogleCloudContactcenterinsightsV1alpha1EntityMentionData::getEntityUniqueId() const {
    return m_entity_unique_id;
}
void OAIGoogleCloudContactcenterinsightsV1alpha1EntityMentionData::setEntityUniqueId(const QString &entity_unique_id) {
    m_entity_unique_id = entity_unique_id;
    m_entity_unique_id_isSet = true;
}

bool OAIGoogleCloudContactcenterinsightsV1alpha1EntityMentionData::is_entity_unique_id_Set() const{
    return m_entity_unique_id_isSet;
}

bool OAIGoogleCloudContactcenterinsightsV1alpha1EntityMentionData::is_entity_unique_id_Valid() const{
    return m_entity_unique_id_isValid;
}

OAIGoogleCloudContactcenterinsightsV1alpha1SentimentData OAIGoogleCloudContactcenterinsightsV1alpha1EntityMentionData::getSentiment() const {
    return m_sentiment;
}
void OAIGoogleCloudContactcenterinsightsV1alpha1EntityMentionData::setSentiment(const OAIGoogleCloudContactcenterinsightsV1alpha1SentimentData &sentiment) {
    m_sentiment = sentiment;
    m_sentiment_isSet = true;
}

bool OAIGoogleCloudContactcenterinsightsV1alpha1EntityMentionData::is_sentiment_Set() const{
    return m_sentiment_isSet;
}

bool OAIGoogleCloudContactcenterinsightsV1alpha1EntityMentionData::is_sentiment_Valid() const{
    return m_sentiment_isValid;
}

QString OAIGoogleCloudContactcenterinsightsV1alpha1EntityMentionData::getType() const {
    return m_type;
}
void OAIGoogleCloudContactcenterinsightsV1alpha1EntityMentionData::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIGoogleCloudContactcenterinsightsV1alpha1EntityMentionData::is_type_Set() const{
    return m_type_isSet;
}

bool OAIGoogleCloudContactcenterinsightsV1alpha1EntityMentionData::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIGoogleCloudContactcenterinsightsV1alpha1EntityMentionData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_entity_unique_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sentiment.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudContactcenterinsightsV1alpha1EntityMentionData::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
