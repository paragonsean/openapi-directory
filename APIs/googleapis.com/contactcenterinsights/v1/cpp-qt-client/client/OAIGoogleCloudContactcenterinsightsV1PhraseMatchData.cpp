/**
 * Contact Center AI Insights API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudContactcenterinsightsV1PhraseMatchData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudContactcenterinsightsV1PhraseMatchData::OAIGoogleCloudContactcenterinsightsV1PhraseMatchData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudContactcenterinsightsV1PhraseMatchData::OAIGoogleCloudContactcenterinsightsV1PhraseMatchData() {
    this->initializeModel();
}

OAIGoogleCloudContactcenterinsightsV1PhraseMatchData::~OAIGoogleCloudContactcenterinsightsV1PhraseMatchData() {}

void OAIGoogleCloudContactcenterinsightsV1PhraseMatchData::initializeModel() {

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_phrase_matcher_isSet = false;
    m_phrase_matcher_isValid = false;
}

void OAIGoogleCloudContactcenterinsightsV1PhraseMatchData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudContactcenterinsightsV1PhraseMatchData::fromJsonObject(QJsonObject json) {

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_phrase_matcher_isValid = ::OpenAPI::fromJsonValue(m_phrase_matcher, json[QString("phraseMatcher")]);
    m_phrase_matcher_isSet = !json[QString("phraseMatcher")].isNull() && m_phrase_matcher_isValid;
}

QString OAIGoogleCloudContactcenterinsightsV1PhraseMatchData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudContactcenterinsightsV1PhraseMatchData::asJsonObject() const {
    QJsonObject obj;
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_phrase_matcher_isSet) {
        obj.insert(QString("phraseMatcher"), ::OpenAPI::toJsonValue(m_phrase_matcher));
    }
    return obj;
}

QString OAIGoogleCloudContactcenterinsightsV1PhraseMatchData::getDisplayName() const {
    return m_display_name;
}
void OAIGoogleCloudContactcenterinsightsV1PhraseMatchData::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIGoogleCloudContactcenterinsightsV1PhraseMatchData::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIGoogleCloudContactcenterinsightsV1PhraseMatchData::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIGoogleCloudContactcenterinsightsV1PhraseMatchData::getPhraseMatcher() const {
    return m_phrase_matcher;
}
void OAIGoogleCloudContactcenterinsightsV1PhraseMatchData::setPhraseMatcher(const QString &phrase_matcher) {
    m_phrase_matcher = phrase_matcher;
    m_phrase_matcher_isSet = true;
}

bool OAIGoogleCloudContactcenterinsightsV1PhraseMatchData::is_phrase_matcher_Set() const{
    return m_phrase_matcher_isSet;
}

bool OAIGoogleCloudContactcenterinsightsV1PhraseMatchData::is_phrase_matcher_Valid() const{
    return m_phrase_matcher_isValid;
}

bool OAIGoogleCloudContactcenterinsightsV1PhraseMatchData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phrase_matcher_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudContactcenterinsightsV1PhraseMatchData::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
