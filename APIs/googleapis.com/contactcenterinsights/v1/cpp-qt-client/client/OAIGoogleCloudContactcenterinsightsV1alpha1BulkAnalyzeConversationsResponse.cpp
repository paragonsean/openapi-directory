/**
 * Contact Center AI Insights API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudContactcenterinsightsV1alpha1BulkAnalyzeConversationsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudContactcenterinsightsV1alpha1BulkAnalyzeConversationsResponse::OAIGoogleCloudContactcenterinsightsV1alpha1BulkAnalyzeConversationsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudContactcenterinsightsV1alpha1BulkAnalyzeConversationsResponse::OAIGoogleCloudContactcenterinsightsV1alpha1BulkAnalyzeConversationsResponse() {
    this->initializeModel();
}

OAIGoogleCloudContactcenterinsightsV1alpha1BulkAnalyzeConversationsResponse::~OAIGoogleCloudContactcenterinsightsV1alpha1BulkAnalyzeConversationsResponse() {}

void OAIGoogleCloudContactcenterinsightsV1alpha1BulkAnalyzeConversationsResponse::initializeModel() {

    m_failed_analysis_count_isSet = false;
    m_failed_analysis_count_isValid = false;

    m_successful_analysis_count_isSet = false;
    m_successful_analysis_count_isValid = false;
}

void OAIGoogleCloudContactcenterinsightsV1alpha1BulkAnalyzeConversationsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudContactcenterinsightsV1alpha1BulkAnalyzeConversationsResponse::fromJsonObject(QJsonObject json) {

    m_failed_analysis_count_isValid = ::OpenAPI::fromJsonValue(m_failed_analysis_count, json[QString("failedAnalysisCount")]);
    m_failed_analysis_count_isSet = !json[QString("failedAnalysisCount")].isNull() && m_failed_analysis_count_isValid;

    m_successful_analysis_count_isValid = ::OpenAPI::fromJsonValue(m_successful_analysis_count, json[QString("successfulAnalysisCount")]);
    m_successful_analysis_count_isSet = !json[QString("successfulAnalysisCount")].isNull() && m_successful_analysis_count_isValid;
}

QString OAIGoogleCloudContactcenterinsightsV1alpha1BulkAnalyzeConversationsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudContactcenterinsightsV1alpha1BulkAnalyzeConversationsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_failed_analysis_count_isSet) {
        obj.insert(QString("failedAnalysisCount"), ::OpenAPI::toJsonValue(m_failed_analysis_count));
    }
    if (m_successful_analysis_count_isSet) {
        obj.insert(QString("successfulAnalysisCount"), ::OpenAPI::toJsonValue(m_successful_analysis_count));
    }
    return obj;
}

qint32 OAIGoogleCloudContactcenterinsightsV1alpha1BulkAnalyzeConversationsResponse::getFailedAnalysisCount() const {
    return m_failed_analysis_count;
}
void OAIGoogleCloudContactcenterinsightsV1alpha1BulkAnalyzeConversationsResponse::setFailedAnalysisCount(const qint32 &failed_analysis_count) {
    m_failed_analysis_count = failed_analysis_count;
    m_failed_analysis_count_isSet = true;
}

bool OAIGoogleCloudContactcenterinsightsV1alpha1BulkAnalyzeConversationsResponse::is_failed_analysis_count_Set() const{
    return m_failed_analysis_count_isSet;
}

bool OAIGoogleCloudContactcenterinsightsV1alpha1BulkAnalyzeConversationsResponse::is_failed_analysis_count_Valid() const{
    return m_failed_analysis_count_isValid;
}

qint32 OAIGoogleCloudContactcenterinsightsV1alpha1BulkAnalyzeConversationsResponse::getSuccessfulAnalysisCount() const {
    return m_successful_analysis_count;
}
void OAIGoogleCloudContactcenterinsightsV1alpha1BulkAnalyzeConversationsResponse::setSuccessfulAnalysisCount(const qint32 &successful_analysis_count) {
    m_successful_analysis_count = successful_analysis_count;
    m_successful_analysis_count_isSet = true;
}

bool OAIGoogleCloudContactcenterinsightsV1alpha1BulkAnalyzeConversationsResponse::is_successful_analysis_count_Set() const{
    return m_successful_analysis_count_isSet;
}

bool OAIGoogleCloudContactcenterinsightsV1alpha1BulkAnalyzeConversationsResponse::is_successful_analysis_count_Valid() const{
    return m_successful_analysis_count_isValid;
}

bool OAIGoogleCloudContactcenterinsightsV1alpha1BulkAnalyzeConversationsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_failed_analysis_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_successful_analysis_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudContactcenterinsightsV1alpha1BulkAnalyzeConversationsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
