/**
 * Contact Center AI Insights API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudContactcenterinsightsV1alpha1IngestConversationsMetadataIngestConversationsStats.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudContactcenterinsightsV1alpha1IngestConversationsMetadataIngestConversationsStats::OAIGoogleCloudContactcenterinsightsV1alpha1IngestConversationsMetadataIngestConversationsStats(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudContactcenterinsightsV1alpha1IngestConversationsMetadataIngestConversationsStats::OAIGoogleCloudContactcenterinsightsV1alpha1IngestConversationsMetadataIngestConversationsStats() {
    this->initializeModel();
}

OAIGoogleCloudContactcenterinsightsV1alpha1IngestConversationsMetadataIngestConversationsStats::~OAIGoogleCloudContactcenterinsightsV1alpha1IngestConversationsMetadataIngestConversationsStats() {}

void OAIGoogleCloudContactcenterinsightsV1alpha1IngestConversationsMetadataIngestConversationsStats::initializeModel() {

    m_duplicates_skipped_count_isSet = false;
    m_duplicates_skipped_count_isValid = false;

    m_failed_ingest_count_isSet = false;
    m_failed_ingest_count_isValid = false;

    m_processed_object_count_isSet = false;
    m_processed_object_count_isValid = false;

    m_successful_ingest_count_isSet = false;
    m_successful_ingest_count_isValid = false;
}

void OAIGoogleCloudContactcenterinsightsV1alpha1IngestConversationsMetadataIngestConversationsStats::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudContactcenterinsightsV1alpha1IngestConversationsMetadataIngestConversationsStats::fromJsonObject(QJsonObject json) {

    m_duplicates_skipped_count_isValid = ::OpenAPI::fromJsonValue(m_duplicates_skipped_count, json[QString("duplicatesSkippedCount")]);
    m_duplicates_skipped_count_isSet = !json[QString("duplicatesSkippedCount")].isNull() && m_duplicates_skipped_count_isValid;

    m_failed_ingest_count_isValid = ::OpenAPI::fromJsonValue(m_failed_ingest_count, json[QString("failedIngestCount")]);
    m_failed_ingest_count_isSet = !json[QString("failedIngestCount")].isNull() && m_failed_ingest_count_isValid;

    m_processed_object_count_isValid = ::OpenAPI::fromJsonValue(m_processed_object_count, json[QString("processedObjectCount")]);
    m_processed_object_count_isSet = !json[QString("processedObjectCount")].isNull() && m_processed_object_count_isValid;

    m_successful_ingest_count_isValid = ::OpenAPI::fromJsonValue(m_successful_ingest_count, json[QString("successfulIngestCount")]);
    m_successful_ingest_count_isSet = !json[QString("successfulIngestCount")].isNull() && m_successful_ingest_count_isValid;
}

QString OAIGoogleCloudContactcenterinsightsV1alpha1IngestConversationsMetadataIngestConversationsStats::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudContactcenterinsightsV1alpha1IngestConversationsMetadataIngestConversationsStats::asJsonObject() const {
    QJsonObject obj;
    if (m_duplicates_skipped_count_isSet) {
        obj.insert(QString("duplicatesSkippedCount"), ::OpenAPI::toJsonValue(m_duplicates_skipped_count));
    }
    if (m_failed_ingest_count_isSet) {
        obj.insert(QString("failedIngestCount"), ::OpenAPI::toJsonValue(m_failed_ingest_count));
    }
    if (m_processed_object_count_isSet) {
        obj.insert(QString("processedObjectCount"), ::OpenAPI::toJsonValue(m_processed_object_count));
    }
    if (m_successful_ingest_count_isSet) {
        obj.insert(QString("successfulIngestCount"), ::OpenAPI::toJsonValue(m_successful_ingest_count));
    }
    return obj;
}

qint32 OAIGoogleCloudContactcenterinsightsV1alpha1IngestConversationsMetadataIngestConversationsStats::getDuplicatesSkippedCount() const {
    return m_duplicates_skipped_count;
}
void OAIGoogleCloudContactcenterinsightsV1alpha1IngestConversationsMetadataIngestConversationsStats::setDuplicatesSkippedCount(const qint32 &duplicates_skipped_count) {
    m_duplicates_skipped_count = duplicates_skipped_count;
    m_duplicates_skipped_count_isSet = true;
}

bool OAIGoogleCloudContactcenterinsightsV1alpha1IngestConversationsMetadataIngestConversationsStats::is_duplicates_skipped_count_Set() const{
    return m_duplicates_skipped_count_isSet;
}

bool OAIGoogleCloudContactcenterinsightsV1alpha1IngestConversationsMetadataIngestConversationsStats::is_duplicates_skipped_count_Valid() const{
    return m_duplicates_skipped_count_isValid;
}

qint32 OAIGoogleCloudContactcenterinsightsV1alpha1IngestConversationsMetadataIngestConversationsStats::getFailedIngestCount() const {
    return m_failed_ingest_count;
}
void OAIGoogleCloudContactcenterinsightsV1alpha1IngestConversationsMetadataIngestConversationsStats::setFailedIngestCount(const qint32 &failed_ingest_count) {
    m_failed_ingest_count = failed_ingest_count;
    m_failed_ingest_count_isSet = true;
}

bool OAIGoogleCloudContactcenterinsightsV1alpha1IngestConversationsMetadataIngestConversationsStats::is_failed_ingest_count_Set() const{
    return m_failed_ingest_count_isSet;
}

bool OAIGoogleCloudContactcenterinsightsV1alpha1IngestConversationsMetadataIngestConversationsStats::is_failed_ingest_count_Valid() const{
    return m_failed_ingest_count_isValid;
}

qint32 OAIGoogleCloudContactcenterinsightsV1alpha1IngestConversationsMetadataIngestConversationsStats::getProcessedObjectCount() const {
    return m_processed_object_count;
}
void OAIGoogleCloudContactcenterinsightsV1alpha1IngestConversationsMetadataIngestConversationsStats::setProcessedObjectCount(const qint32 &processed_object_count) {
    m_processed_object_count = processed_object_count;
    m_processed_object_count_isSet = true;
}

bool OAIGoogleCloudContactcenterinsightsV1alpha1IngestConversationsMetadataIngestConversationsStats::is_processed_object_count_Set() const{
    return m_processed_object_count_isSet;
}

bool OAIGoogleCloudContactcenterinsightsV1alpha1IngestConversationsMetadataIngestConversationsStats::is_processed_object_count_Valid() const{
    return m_processed_object_count_isValid;
}

qint32 OAIGoogleCloudContactcenterinsightsV1alpha1IngestConversationsMetadataIngestConversationsStats::getSuccessfulIngestCount() const {
    return m_successful_ingest_count;
}
void OAIGoogleCloudContactcenterinsightsV1alpha1IngestConversationsMetadataIngestConversationsStats::setSuccessfulIngestCount(const qint32 &successful_ingest_count) {
    m_successful_ingest_count = successful_ingest_count;
    m_successful_ingest_count_isSet = true;
}

bool OAIGoogleCloudContactcenterinsightsV1alpha1IngestConversationsMetadataIngestConversationsStats::is_successful_ingest_count_Set() const{
    return m_successful_ingest_count_isSet;
}

bool OAIGoogleCloudContactcenterinsightsV1alpha1IngestConversationsMetadataIngestConversationsStats::is_successful_ingest_count_Valid() const{
    return m_successful_ingest_count_isValid;
}

bool OAIGoogleCloudContactcenterinsightsV1alpha1IngestConversationsMetadataIngestConversationsStats::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_duplicates_skipped_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_failed_ingest_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_processed_object_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_successful_ingest_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudContactcenterinsightsV1alpha1IngestConversationsMetadataIngestConversationsStats::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
