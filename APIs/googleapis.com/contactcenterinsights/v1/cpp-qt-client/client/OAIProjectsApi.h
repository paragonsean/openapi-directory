/**
 * Contact Center AI Insights API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIProjectsApi_H
#define OAI_OAIProjectsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIGoogleCloudContactcenterinsightsV1Analysis.h"
#include "OAIGoogleCloudContactcenterinsightsV1BulkAnalyzeConversationsRequest.h"
#include "OAIGoogleCloudContactcenterinsightsV1BulkDeleteConversationsRequest.h"
#include "OAIGoogleCloudContactcenterinsightsV1CalculateIssueModelStatsResponse.h"
#include "OAIGoogleCloudContactcenterinsightsV1CalculateStatsResponse.h"
#include "OAIGoogleCloudContactcenterinsightsV1Conversation.h"
#include "OAIGoogleCloudContactcenterinsightsV1DeployIssueModelRequest.h"
#include "OAIGoogleCloudContactcenterinsightsV1ExportInsightsDataRequest.h"
#include "OAIGoogleCloudContactcenterinsightsV1ExportIssueModelRequest.h"
#include "OAIGoogleCloudContactcenterinsightsV1ImportIssueModelRequest.h"
#include "OAIGoogleCloudContactcenterinsightsV1IngestConversationsRequest.h"
#include "OAIGoogleCloudContactcenterinsightsV1IssueModel.h"
#include "OAIGoogleCloudContactcenterinsightsV1ListAnalysesResponse.h"
#include "OAIGoogleCloudContactcenterinsightsV1ListConversationsResponse.h"
#include "OAIGoogleCloudContactcenterinsightsV1ListIssueModelsResponse.h"
#include "OAIGoogleCloudContactcenterinsightsV1ListIssuesResponse.h"
#include "OAIGoogleCloudContactcenterinsightsV1ListPhraseMatchersResponse.h"
#include "OAIGoogleCloudContactcenterinsightsV1ListViewsResponse.h"
#include "OAIGoogleCloudContactcenterinsightsV1PhraseMatcher.h"
#include "OAIGoogleCloudContactcenterinsightsV1UndeployIssueModelRequest.h"
#include "OAIGoogleCloudContactcenterinsightsV1UploadConversationRequest.h"
#include "OAIGoogleCloudContactcenterinsightsV1View.h"
#include "OAIGoogleLongrunningListOperationsResponse.h"
#include "OAIGoogleLongrunningOperation.h"
#include "OAIObject.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIProjectsApi : public QObject {
    Q_OBJECT

public:
    OAIProjectsApi(const int timeOut = 0);
    ~OAIProjectsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_contactcenterinsights_v1_analysis OAIGoogleCloudContactcenterinsightsV1Analysis [optional]
    */
    virtual void contactcenterinsights_projects_locations_conversations_analyses_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudContactcenterinsightsV1Analysis> &oai_google_cloud_contactcenterinsights_v1_analysis = ::OpenAPI::OptionalParam<OAIGoogleCloudContactcenterinsightsV1Analysis>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void contactcenterinsights_projects_locations_conversations_analyses_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_contactcenterinsights_v1_bulk_analyze_conversations_request OAIGoogleCloudContactcenterinsightsV1BulkAnalyzeConversationsRequest [optional]
    */
    virtual void contactcenterinsights_projects_locations_conversations_bulkAnalyze(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudContactcenterinsightsV1BulkAnalyzeConversationsRequest> &oai_google_cloud_contactcenterinsights_v1_bulk_analyze_conversations_request = ::OpenAPI::OptionalParam<OAIGoogleCloudContactcenterinsightsV1BulkAnalyzeConversationsRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_contactcenterinsights_v1_bulk_delete_conversations_request OAIGoogleCloudContactcenterinsightsV1BulkDeleteConversationsRequest [optional]
    */
    virtual void contactcenterinsights_projects_locations_conversations_bulkDelete(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudContactcenterinsightsV1BulkDeleteConversationsRequest> &oai_google_cloud_contactcenterinsights_v1_bulk_delete_conversations_request = ::OpenAPI::OptionalParam<OAIGoogleCloudContactcenterinsightsV1BulkDeleteConversationsRequest>());

    /**
    * @param[in]  location QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    */
    virtual void contactcenterinsights_projects_locations_conversations_calculateStats(const QString &location, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  conversation_id QString [optional]
    * @param[in]  oai_google_cloud_contactcenterinsights_v1_conversation OAIGoogleCloudContactcenterinsightsV1Conversation [optional]
    */
    virtual void contactcenterinsights_projects_locations_conversations_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &conversation_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudContactcenterinsightsV1Conversation> &oai_google_cloud_contactcenterinsights_v1_conversation = ::OpenAPI::OptionalParam<OAIGoogleCloudContactcenterinsightsV1Conversation>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_contactcenterinsights_v1_ingest_conversations_request OAIGoogleCloudContactcenterinsightsV1IngestConversationsRequest [optional]
    */
    virtual void contactcenterinsights_projects_locations_conversations_ingest(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudContactcenterinsightsV1IngestConversationsRequest> &oai_google_cloud_contactcenterinsights_v1_ingest_conversations_request = ::OpenAPI::OptionalParam<OAIGoogleCloudContactcenterinsightsV1IngestConversationsRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  order_by QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    * @param[in]  view QString [optional]
    */
    virtual void contactcenterinsights_projects_locations_conversations_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &view = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_contactcenterinsights_v1_upload_conversation_request OAIGoogleCloudContactcenterinsightsV1UploadConversationRequest [optional]
    */
    virtual void contactcenterinsights_projects_locations_conversations_upload(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudContactcenterinsightsV1UploadConversationRequest> &oai_google_cloud_contactcenterinsights_v1_upload_conversation_request = ::OpenAPI::OptionalParam<OAIGoogleCloudContactcenterinsightsV1UploadConversationRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_contactcenterinsights_v1_export_insights_data_request OAIGoogleCloudContactcenterinsightsV1ExportInsightsDataRequest [optional]
    */
    virtual void contactcenterinsights_projects_locations_insightsdata_export(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudContactcenterinsightsV1ExportInsightsDataRequest> &oai_google_cloud_contactcenterinsights_v1_export_insights_data_request = ::OpenAPI::OptionalParam<OAIGoogleCloudContactcenterinsightsV1ExportInsightsDataRequest>());

    /**
    * @param[in]  issue_model QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    */
    virtual void contactcenterinsights_projects_locations_issueModels_calculateIssueModelStats(const QString &issue_model, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_contactcenterinsights_v1_issue_model OAIGoogleCloudContactcenterinsightsV1IssueModel [optional]
    */
    virtual void contactcenterinsights_projects_locations_issueModels_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudContactcenterinsightsV1IssueModel> &oai_google_cloud_contactcenterinsights_v1_issue_model = ::OpenAPI::OptionalParam<OAIGoogleCloudContactcenterinsightsV1IssueModel>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_contactcenterinsights_v1_deploy_issue_model_request OAIGoogleCloudContactcenterinsightsV1DeployIssueModelRequest [optional]
    */
    virtual void contactcenterinsights_projects_locations_issueModels_deploy(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudContactcenterinsightsV1DeployIssueModelRequest> &oai_google_cloud_contactcenterinsights_v1_deploy_issue_model_request = ::OpenAPI::OptionalParam<OAIGoogleCloudContactcenterinsightsV1DeployIssueModelRequest>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_contactcenterinsights_v1_export_issue_model_request OAIGoogleCloudContactcenterinsightsV1ExportIssueModelRequest [optional]
    */
    virtual void contactcenterinsights_projects_locations_issueModels_export(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudContactcenterinsightsV1ExportIssueModelRequest> &oai_google_cloud_contactcenterinsights_v1_export_issue_model_request = ::OpenAPI::OptionalParam<OAIGoogleCloudContactcenterinsightsV1ExportIssueModelRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_contactcenterinsights_v1_import_issue_model_request OAIGoogleCloudContactcenterinsightsV1ImportIssueModelRequest [optional]
    */
    virtual void contactcenterinsights_projects_locations_issueModels_import(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudContactcenterinsightsV1ImportIssueModelRequest> &oai_google_cloud_contactcenterinsights_v1_import_issue_model_request = ::OpenAPI::OptionalParam<OAIGoogleCloudContactcenterinsightsV1ImportIssueModelRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    */
    virtual void contactcenterinsights_projects_locations_issueModels_issues_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    */
    virtual void contactcenterinsights_projects_locations_issueModels_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_contactcenterinsights_v1_undeploy_issue_model_request OAIGoogleCloudContactcenterinsightsV1UndeployIssueModelRequest [optional]
    */
    virtual void contactcenterinsights_projects_locations_issueModels_undeploy(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudContactcenterinsightsV1UndeployIssueModelRequest> &oai_google_cloud_contactcenterinsights_v1_undeploy_issue_model_request = ::OpenAPI::OptionalParam<OAIGoogleCloudContactcenterinsightsV1UndeployIssueModelRequest>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    */
    virtual void contactcenterinsights_projects_locations_operations_cancel(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void contactcenterinsights_projects_locations_operations_list(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_contactcenterinsights_v1_phrase_matcher OAIGoogleCloudContactcenterinsightsV1PhraseMatcher [optional]
    */
    virtual void contactcenterinsights_projects_locations_phraseMatchers_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudContactcenterinsightsV1PhraseMatcher> &oai_google_cloud_contactcenterinsights_v1_phrase_matcher = ::OpenAPI::OptionalParam<OAIGoogleCloudContactcenterinsightsV1PhraseMatcher>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void contactcenterinsights_projects_locations_phraseMatchers_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_contactcenterinsights_v1_view OAIGoogleCloudContactcenterinsightsV1View [optional]
    */
    virtual void contactcenterinsights_projects_locations_views_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudContactcenterinsightsV1View> &oai_google_cloud_contactcenterinsights_v1_view = ::OpenAPI::OptionalParam<OAIGoogleCloudContactcenterinsightsV1View>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  force bool [optional]
    */
    virtual void contactcenterinsights_projects_locations_views_delete(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &force = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  view QString [optional]
    */
    virtual void contactcenterinsights_projects_locations_views_get(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &view = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void contactcenterinsights_projects_locations_views_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  update_mask QString [optional]
    * @param[in]  oai_google_cloud_contactcenterinsights_v1_view OAIGoogleCloudContactcenterinsightsV1View [optional]
    */
    virtual void contactcenterinsights_projects_locations_views_patch(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &update_mask = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudContactcenterinsightsV1View> &oai_google_cloud_contactcenterinsights_v1_view = ::OpenAPI::OptionalParam<OAIGoogleCloudContactcenterinsightsV1View>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void contactcenterinsights_projects_locations_conversations_analyses_createCallback(OAIHttpRequestWorker *worker);
    void contactcenterinsights_projects_locations_conversations_analyses_listCallback(OAIHttpRequestWorker *worker);
    void contactcenterinsights_projects_locations_conversations_bulkAnalyzeCallback(OAIHttpRequestWorker *worker);
    void contactcenterinsights_projects_locations_conversations_bulkDeleteCallback(OAIHttpRequestWorker *worker);
    void contactcenterinsights_projects_locations_conversations_calculateStatsCallback(OAIHttpRequestWorker *worker);
    void contactcenterinsights_projects_locations_conversations_createCallback(OAIHttpRequestWorker *worker);
    void contactcenterinsights_projects_locations_conversations_ingestCallback(OAIHttpRequestWorker *worker);
    void contactcenterinsights_projects_locations_conversations_listCallback(OAIHttpRequestWorker *worker);
    void contactcenterinsights_projects_locations_conversations_uploadCallback(OAIHttpRequestWorker *worker);
    void contactcenterinsights_projects_locations_insightsdata_exportCallback(OAIHttpRequestWorker *worker);
    void contactcenterinsights_projects_locations_issueModels_calculateIssueModelStatsCallback(OAIHttpRequestWorker *worker);
    void contactcenterinsights_projects_locations_issueModels_createCallback(OAIHttpRequestWorker *worker);
    void contactcenterinsights_projects_locations_issueModels_deployCallback(OAIHttpRequestWorker *worker);
    void contactcenterinsights_projects_locations_issueModels_exportCallback(OAIHttpRequestWorker *worker);
    void contactcenterinsights_projects_locations_issueModels_importCallback(OAIHttpRequestWorker *worker);
    void contactcenterinsights_projects_locations_issueModels_issues_listCallback(OAIHttpRequestWorker *worker);
    void contactcenterinsights_projects_locations_issueModels_listCallback(OAIHttpRequestWorker *worker);
    void contactcenterinsights_projects_locations_issueModels_undeployCallback(OAIHttpRequestWorker *worker);
    void contactcenterinsights_projects_locations_operations_cancelCallback(OAIHttpRequestWorker *worker);
    void contactcenterinsights_projects_locations_operations_listCallback(OAIHttpRequestWorker *worker);
    void contactcenterinsights_projects_locations_phraseMatchers_createCallback(OAIHttpRequestWorker *worker);
    void contactcenterinsights_projects_locations_phraseMatchers_listCallback(OAIHttpRequestWorker *worker);
    void contactcenterinsights_projects_locations_views_createCallback(OAIHttpRequestWorker *worker);
    void contactcenterinsights_projects_locations_views_deleteCallback(OAIHttpRequestWorker *worker);
    void contactcenterinsights_projects_locations_views_getCallback(OAIHttpRequestWorker *worker);
    void contactcenterinsights_projects_locations_views_listCallback(OAIHttpRequestWorker *worker);
    void contactcenterinsights_projects_locations_views_patchCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void contactcenterinsights_projects_locations_conversations_analyses_createSignal(OAIGoogleLongrunningOperation summary);
    void contactcenterinsights_projects_locations_conversations_analyses_listSignal(OAIGoogleCloudContactcenterinsightsV1ListAnalysesResponse summary);
    void contactcenterinsights_projects_locations_conversations_bulkAnalyzeSignal(OAIGoogleLongrunningOperation summary);
    void contactcenterinsights_projects_locations_conversations_bulkDeleteSignal(OAIGoogleLongrunningOperation summary);
    void contactcenterinsights_projects_locations_conversations_calculateStatsSignal(OAIGoogleCloudContactcenterinsightsV1CalculateStatsResponse summary);
    void contactcenterinsights_projects_locations_conversations_createSignal(OAIGoogleCloudContactcenterinsightsV1Conversation summary);
    void contactcenterinsights_projects_locations_conversations_ingestSignal(OAIGoogleLongrunningOperation summary);
    void contactcenterinsights_projects_locations_conversations_listSignal(OAIGoogleCloudContactcenterinsightsV1ListConversationsResponse summary);
    void contactcenterinsights_projects_locations_conversations_uploadSignal(OAIGoogleLongrunningOperation summary);
    void contactcenterinsights_projects_locations_insightsdata_exportSignal(OAIGoogleLongrunningOperation summary);
    void contactcenterinsights_projects_locations_issueModels_calculateIssueModelStatsSignal(OAIGoogleCloudContactcenterinsightsV1CalculateIssueModelStatsResponse summary);
    void contactcenterinsights_projects_locations_issueModels_createSignal(OAIGoogleLongrunningOperation summary);
    void contactcenterinsights_projects_locations_issueModels_deploySignal(OAIGoogleLongrunningOperation summary);
    void contactcenterinsights_projects_locations_issueModels_exportSignal(OAIGoogleLongrunningOperation summary);
    void contactcenterinsights_projects_locations_issueModels_importSignal(OAIGoogleLongrunningOperation summary);
    void contactcenterinsights_projects_locations_issueModels_issues_listSignal(OAIGoogleCloudContactcenterinsightsV1ListIssuesResponse summary);
    void contactcenterinsights_projects_locations_issueModels_listSignal(OAIGoogleCloudContactcenterinsightsV1ListIssueModelsResponse summary);
    void contactcenterinsights_projects_locations_issueModels_undeploySignal(OAIGoogleLongrunningOperation summary);
    void contactcenterinsights_projects_locations_operations_cancelSignal(OAIObject summary);
    void contactcenterinsights_projects_locations_operations_listSignal(OAIGoogleLongrunningListOperationsResponse summary);
    void contactcenterinsights_projects_locations_phraseMatchers_createSignal(OAIGoogleCloudContactcenterinsightsV1PhraseMatcher summary);
    void contactcenterinsights_projects_locations_phraseMatchers_listSignal(OAIGoogleCloudContactcenterinsightsV1ListPhraseMatchersResponse summary);
    void contactcenterinsights_projects_locations_views_createSignal(OAIGoogleCloudContactcenterinsightsV1View summary);
    void contactcenterinsights_projects_locations_views_deleteSignal(OAIObject summary);
    void contactcenterinsights_projects_locations_views_getSignal(OAIGoogleCloudContactcenterinsightsV1View summary);
    void contactcenterinsights_projects_locations_views_listSignal(OAIGoogleCloudContactcenterinsightsV1ListViewsResponse summary);
    void contactcenterinsights_projects_locations_views_patchSignal(OAIGoogleCloudContactcenterinsightsV1View summary);


    void contactcenterinsights_projects_locations_conversations_analyses_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void contactcenterinsights_projects_locations_conversations_analyses_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudContactcenterinsightsV1ListAnalysesResponse summary);
    void contactcenterinsights_projects_locations_conversations_bulkAnalyzeSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void contactcenterinsights_projects_locations_conversations_bulkDeleteSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void contactcenterinsights_projects_locations_conversations_calculateStatsSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudContactcenterinsightsV1CalculateStatsResponse summary);
    void contactcenterinsights_projects_locations_conversations_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudContactcenterinsightsV1Conversation summary);
    void contactcenterinsights_projects_locations_conversations_ingestSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void contactcenterinsights_projects_locations_conversations_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudContactcenterinsightsV1ListConversationsResponse summary);
    void contactcenterinsights_projects_locations_conversations_uploadSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void contactcenterinsights_projects_locations_insightsdata_exportSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void contactcenterinsights_projects_locations_issueModels_calculateIssueModelStatsSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudContactcenterinsightsV1CalculateIssueModelStatsResponse summary);
    void contactcenterinsights_projects_locations_issueModels_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void contactcenterinsights_projects_locations_issueModels_deploySignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void contactcenterinsights_projects_locations_issueModels_exportSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void contactcenterinsights_projects_locations_issueModels_importSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void contactcenterinsights_projects_locations_issueModels_issues_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudContactcenterinsightsV1ListIssuesResponse summary);
    void contactcenterinsights_projects_locations_issueModels_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudContactcenterinsightsV1ListIssueModelsResponse summary);
    void contactcenterinsights_projects_locations_issueModels_undeploySignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void contactcenterinsights_projects_locations_operations_cancelSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void contactcenterinsights_projects_locations_operations_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningListOperationsResponse summary);
    void contactcenterinsights_projects_locations_phraseMatchers_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudContactcenterinsightsV1PhraseMatcher summary);
    void contactcenterinsights_projects_locations_phraseMatchers_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudContactcenterinsightsV1ListPhraseMatchersResponse summary);
    void contactcenterinsights_projects_locations_views_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudContactcenterinsightsV1View summary);
    void contactcenterinsights_projects_locations_views_deleteSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void contactcenterinsights_projects_locations_views_getSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudContactcenterinsightsV1View summary);
    void contactcenterinsights_projects_locations_views_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudContactcenterinsightsV1ListViewsResponse summary);
    void contactcenterinsights_projects_locations_views_patchSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudContactcenterinsightsV1View summary);

    Q_DECL_DEPRECATED_X("Use contactcenterinsights_projects_locations_conversations_analyses_createSignalError() instead")
    void contactcenterinsights_projects_locations_conversations_analyses_createSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void contactcenterinsights_projects_locations_conversations_analyses_createSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contactcenterinsights_projects_locations_conversations_analyses_listSignalError() instead")
    void contactcenterinsights_projects_locations_conversations_analyses_listSignalE(OAIGoogleCloudContactcenterinsightsV1ListAnalysesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void contactcenterinsights_projects_locations_conversations_analyses_listSignalError(OAIGoogleCloudContactcenterinsightsV1ListAnalysesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contactcenterinsights_projects_locations_conversations_bulkAnalyzeSignalError() instead")
    void contactcenterinsights_projects_locations_conversations_bulkAnalyzeSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void contactcenterinsights_projects_locations_conversations_bulkAnalyzeSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contactcenterinsights_projects_locations_conversations_bulkDeleteSignalError() instead")
    void contactcenterinsights_projects_locations_conversations_bulkDeleteSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void contactcenterinsights_projects_locations_conversations_bulkDeleteSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contactcenterinsights_projects_locations_conversations_calculateStatsSignalError() instead")
    void contactcenterinsights_projects_locations_conversations_calculateStatsSignalE(OAIGoogleCloudContactcenterinsightsV1CalculateStatsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void contactcenterinsights_projects_locations_conversations_calculateStatsSignalError(OAIGoogleCloudContactcenterinsightsV1CalculateStatsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contactcenterinsights_projects_locations_conversations_createSignalError() instead")
    void contactcenterinsights_projects_locations_conversations_createSignalE(OAIGoogleCloudContactcenterinsightsV1Conversation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void contactcenterinsights_projects_locations_conversations_createSignalError(OAIGoogleCloudContactcenterinsightsV1Conversation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contactcenterinsights_projects_locations_conversations_ingestSignalError() instead")
    void contactcenterinsights_projects_locations_conversations_ingestSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void contactcenterinsights_projects_locations_conversations_ingestSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contactcenterinsights_projects_locations_conversations_listSignalError() instead")
    void contactcenterinsights_projects_locations_conversations_listSignalE(OAIGoogleCloudContactcenterinsightsV1ListConversationsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void contactcenterinsights_projects_locations_conversations_listSignalError(OAIGoogleCloudContactcenterinsightsV1ListConversationsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contactcenterinsights_projects_locations_conversations_uploadSignalError() instead")
    void contactcenterinsights_projects_locations_conversations_uploadSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void contactcenterinsights_projects_locations_conversations_uploadSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contactcenterinsights_projects_locations_insightsdata_exportSignalError() instead")
    void contactcenterinsights_projects_locations_insightsdata_exportSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void contactcenterinsights_projects_locations_insightsdata_exportSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contactcenterinsights_projects_locations_issueModels_calculateIssueModelStatsSignalError() instead")
    void contactcenterinsights_projects_locations_issueModels_calculateIssueModelStatsSignalE(OAIGoogleCloudContactcenterinsightsV1CalculateIssueModelStatsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void contactcenterinsights_projects_locations_issueModels_calculateIssueModelStatsSignalError(OAIGoogleCloudContactcenterinsightsV1CalculateIssueModelStatsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contactcenterinsights_projects_locations_issueModels_createSignalError() instead")
    void contactcenterinsights_projects_locations_issueModels_createSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void contactcenterinsights_projects_locations_issueModels_createSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contactcenterinsights_projects_locations_issueModels_deploySignalError() instead")
    void contactcenterinsights_projects_locations_issueModels_deploySignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void contactcenterinsights_projects_locations_issueModels_deploySignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contactcenterinsights_projects_locations_issueModels_exportSignalError() instead")
    void contactcenterinsights_projects_locations_issueModels_exportSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void contactcenterinsights_projects_locations_issueModels_exportSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contactcenterinsights_projects_locations_issueModels_importSignalError() instead")
    void contactcenterinsights_projects_locations_issueModels_importSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void contactcenterinsights_projects_locations_issueModels_importSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contactcenterinsights_projects_locations_issueModels_issues_listSignalError() instead")
    void contactcenterinsights_projects_locations_issueModels_issues_listSignalE(OAIGoogleCloudContactcenterinsightsV1ListIssuesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void contactcenterinsights_projects_locations_issueModels_issues_listSignalError(OAIGoogleCloudContactcenterinsightsV1ListIssuesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contactcenterinsights_projects_locations_issueModels_listSignalError() instead")
    void contactcenterinsights_projects_locations_issueModels_listSignalE(OAIGoogleCloudContactcenterinsightsV1ListIssueModelsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void contactcenterinsights_projects_locations_issueModels_listSignalError(OAIGoogleCloudContactcenterinsightsV1ListIssueModelsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contactcenterinsights_projects_locations_issueModels_undeploySignalError() instead")
    void contactcenterinsights_projects_locations_issueModels_undeploySignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void contactcenterinsights_projects_locations_issueModels_undeploySignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contactcenterinsights_projects_locations_operations_cancelSignalError() instead")
    void contactcenterinsights_projects_locations_operations_cancelSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void contactcenterinsights_projects_locations_operations_cancelSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contactcenterinsights_projects_locations_operations_listSignalError() instead")
    void contactcenterinsights_projects_locations_operations_listSignalE(OAIGoogleLongrunningListOperationsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void contactcenterinsights_projects_locations_operations_listSignalError(OAIGoogleLongrunningListOperationsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contactcenterinsights_projects_locations_phraseMatchers_createSignalError() instead")
    void contactcenterinsights_projects_locations_phraseMatchers_createSignalE(OAIGoogleCloudContactcenterinsightsV1PhraseMatcher summary, QNetworkReply::NetworkError error_type, QString error_str);
    void contactcenterinsights_projects_locations_phraseMatchers_createSignalError(OAIGoogleCloudContactcenterinsightsV1PhraseMatcher summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contactcenterinsights_projects_locations_phraseMatchers_listSignalError() instead")
    void contactcenterinsights_projects_locations_phraseMatchers_listSignalE(OAIGoogleCloudContactcenterinsightsV1ListPhraseMatchersResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void contactcenterinsights_projects_locations_phraseMatchers_listSignalError(OAIGoogleCloudContactcenterinsightsV1ListPhraseMatchersResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contactcenterinsights_projects_locations_views_createSignalError() instead")
    void contactcenterinsights_projects_locations_views_createSignalE(OAIGoogleCloudContactcenterinsightsV1View summary, QNetworkReply::NetworkError error_type, QString error_str);
    void contactcenterinsights_projects_locations_views_createSignalError(OAIGoogleCloudContactcenterinsightsV1View summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contactcenterinsights_projects_locations_views_deleteSignalError() instead")
    void contactcenterinsights_projects_locations_views_deleteSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void contactcenterinsights_projects_locations_views_deleteSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contactcenterinsights_projects_locations_views_getSignalError() instead")
    void contactcenterinsights_projects_locations_views_getSignalE(OAIGoogleCloudContactcenterinsightsV1View summary, QNetworkReply::NetworkError error_type, QString error_str);
    void contactcenterinsights_projects_locations_views_getSignalError(OAIGoogleCloudContactcenterinsightsV1View summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contactcenterinsights_projects_locations_views_listSignalError() instead")
    void contactcenterinsights_projects_locations_views_listSignalE(OAIGoogleCloudContactcenterinsightsV1ListViewsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void contactcenterinsights_projects_locations_views_listSignalError(OAIGoogleCloudContactcenterinsightsV1ListViewsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contactcenterinsights_projects_locations_views_patchSignalError() instead")
    void contactcenterinsights_projects_locations_views_patchSignalE(OAIGoogleCloudContactcenterinsightsV1View summary, QNetworkReply::NetworkError error_type, QString error_str);
    void contactcenterinsights_projects_locations_views_patchSignalError(OAIGoogleCloudContactcenterinsightsV1View summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use contactcenterinsights_projects_locations_conversations_analyses_createSignalErrorFull() instead")
    void contactcenterinsights_projects_locations_conversations_analyses_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void contactcenterinsights_projects_locations_conversations_analyses_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contactcenterinsights_projects_locations_conversations_analyses_listSignalErrorFull() instead")
    void contactcenterinsights_projects_locations_conversations_analyses_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void contactcenterinsights_projects_locations_conversations_analyses_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contactcenterinsights_projects_locations_conversations_bulkAnalyzeSignalErrorFull() instead")
    void contactcenterinsights_projects_locations_conversations_bulkAnalyzeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void contactcenterinsights_projects_locations_conversations_bulkAnalyzeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contactcenterinsights_projects_locations_conversations_bulkDeleteSignalErrorFull() instead")
    void contactcenterinsights_projects_locations_conversations_bulkDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void contactcenterinsights_projects_locations_conversations_bulkDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contactcenterinsights_projects_locations_conversations_calculateStatsSignalErrorFull() instead")
    void contactcenterinsights_projects_locations_conversations_calculateStatsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void contactcenterinsights_projects_locations_conversations_calculateStatsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contactcenterinsights_projects_locations_conversations_createSignalErrorFull() instead")
    void contactcenterinsights_projects_locations_conversations_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void contactcenterinsights_projects_locations_conversations_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contactcenterinsights_projects_locations_conversations_ingestSignalErrorFull() instead")
    void contactcenterinsights_projects_locations_conversations_ingestSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void contactcenterinsights_projects_locations_conversations_ingestSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contactcenterinsights_projects_locations_conversations_listSignalErrorFull() instead")
    void contactcenterinsights_projects_locations_conversations_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void contactcenterinsights_projects_locations_conversations_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contactcenterinsights_projects_locations_conversations_uploadSignalErrorFull() instead")
    void contactcenterinsights_projects_locations_conversations_uploadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void contactcenterinsights_projects_locations_conversations_uploadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contactcenterinsights_projects_locations_insightsdata_exportSignalErrorFull() instead")
    void contactcenterinsights_projects_locations_insightsdata_exportSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void contactcenterinsights_projects_locations_insightsdata_exportSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contactcenterinsights_projects_locations_issueModels_calculateIssueModelStatsSignalErrorFull() instead")
    void contactcenterinsights_projects_locations_issueModels_calculateIssueModelStatsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void contactcenterinsights_projects_locations_issueModels_calculateIssueModelStatsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contactcenterinsights_projects_locations_issueModels_createSignalErrorFull() instead")
    void contactcenterinsights_projects_locations_issueModels_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void contactcenterinsights_projects_locations_issueModels_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contactcenterinsights_projects_locations_issueModels_deploySignalErrorFull() instead")
    void contactcenterinsights_projects_locations_issueModels_deploySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void contactcenterinsights_projects_locations_issueModels_deploySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contactcenterinsights_projects_locations_issueModels_exportSignalErrorFull() instead")
    void contactcenterinsights_projects_locations_issueModels_exportSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void contactcenterinsights_projects_locations_issueModels_exportSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contactcenterinsights_projects_locations_issueModels_importSignalErrorFull() instead")
    void contactcenterinsights_projects_locations_issueModels_importSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void contactcenterinsights_projects_locations_issueModels_importSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contactcenterinsights_projects_locations_issueModels_issues_listSignalErrorFull() instead")
    void contactcenterinsights_projects_locations_issueModels_issues_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void contactcenterinsights_projects_locations_issueModels_issues_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contactcenterinsights_projects_locations_issueModels_listSignalErrorFull() instead")
    void contactcenterinsights_projects_locations_issueModels_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void contactcenterinsights_projects_locations_issueModels_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contactcenterinsights_projects_locations_issueModels_undeploySignalErrorFull() instead")
    void contactcenterinsights_projects_locations_issueModels_undeploySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void contactcenterinsights_projects_locations_issueModels_undeploySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contactcenterinsights_projects_locations_operations_cancelSignalErrorFull() instead")
    void contactcenterinsights_projects_locations_operations_cancelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void contactcenterinsights_projects_locations_operations_cancelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contactcenterinsights_projects_locations_operations_listSignalErrorFull() instead")
    void contactcenterinsights_projects_locations_operations_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void contactcenterinsights_projects_locations_operations_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contactcenterinsights_projects_locations_phraseMatchers_createSignalErrorFull() instead")
    void contactcenterinsights_projects_locations_phraseMatchers_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void contactcenterinsights_projects_locations_phraseMatchers_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contactcenterinsights_projects_locations_phraseMatchers_listSignalErrorFull() instead")
    void contactcenterinsights_projects_locations_phraseMatchers_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void contactcenterinsights_projects_locations_phraseMatchers_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contactcenterinsights_projects_locations_views_createSignalErrorFull() instead")
    void contactcenterinsights_projects_locations_views_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void contactcenterinsights_projects_locations_views_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contactcenterinsights_projects_locations_views_deleteSignalErrorFull() instead")
    void contactcenterinsights_projects_locations_views_deleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void contactcenterinsights_projects_locations_views_deleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contactcenterinsights_projects_locations_views_getSignalErrorFull() instead")
    void contactcenterinsights_projects_locations_views_getSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void contactcenterinsights_projects_locations_views_getSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contactcenterinsights_projects_locations_views_listSignalErrorFull() instead")
    void contactcenterinsights_projects_locations_views_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void contactcenterinsights_projects_locations_views_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contactcenterinsights_projects_locations_views_patchSignalErrorFull() instead")
    void contactcenterinsights_projects_locations_views_patchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void contactcenterinsights_projects_locations_views_patchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
