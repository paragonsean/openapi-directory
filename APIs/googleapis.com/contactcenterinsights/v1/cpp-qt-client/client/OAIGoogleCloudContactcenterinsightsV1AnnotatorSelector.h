/**
 * Contact Center AI Insights API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGoogleCloudContactcenterinsightsV1AnnotatorSelector.h
 *
 * Selector of all available annotators and phrase matchers to run.
 */

#ifndef OAIGoogleCloudContactcenterinsightsV1AnnotatorSelector_H
#define OAIGoogleCloudContactcenterinsightsV1AnnotatorSelector_H

#include <QJsonObject>

#include "OAIGoogleCloudContactcenterinsightsV1AnnotatorSelectorSummarizationConfig.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIGoogleCloudContactcenterinsightsV1AnnotatorSelectorSummarizationConfig;

class OAIGoogleCloudContactcenterinsightsV1AnnotatorSelector : public OAIObject {
public:
    OAIGoogleCloudContactcenterinsightsV1AnnotatorSelector();
    OAIGoogleCloudContactcenterinsightsV1AnnotatorSelector(QString json);
    ~OAIGoogleCloudContactcenterinsightsV1AnnotatorSelector() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<QString> getIssueModels() const;
    void setIssueModels(const QList<QString> &issue_models);
    bool is_issue_models_Set() const;
    bool is_issue_models_Valid() const;

    QList<QString> getPhraseMatchers() const;
    void setPhraseMatchers(const QList<QString> &phrase_matchers);
    bool is_phrase_matchers_Set() const;
    bool is_phrase_matchers_Valid() const;

    bool isRunEntityAnnotator() const;
    void setRunEntityAnnotator(const bool &run_entity_annotator);
    bool is_run_entity_annotator_Set() const;
    bool is_run_entity_annotator_Valid() const;

    bool isRunIntentAnnotator() const;
    void setRunIntentAnnotator(const bool &run_intent_annotator);
    bool is_run_intent_annotator_Set() const;
    bool is_run_intent_annotator_Valid() const;

    bool isRunInterruptionAnnotator() const;
    void setRunInterruptionAnnotator(const bool &run_interruption_annotator);
    bool is_run_interruption_annotator_Set() const;
    bool is_run_interruption_annotator_Valid() const;

    bool isRunIssueModelAnnotator() const;
    void setRunIssueModelAnnotator(const bool &run_issue_model_annotator);
    bool is_run_issue_model_annotator_Set() const;
    bool is_run_issue_model_annotator_Valid() const;

    bool isRunPhraseMatcherAnnotator() const;
    void setRunPhraseMatcherAnnotator(const bool &run_phrase_matcher_annotator);
    bool is_run_phrase_matcher_annotator_Set() const;
    bool is_run_phrase_matcher_annotator_Valid() const;

    bool isRunSentimentAnnotator() const;
    void setRunSentimentAnnotator(const bool &run_sentiment_annotator);
    bool is_run_sentiment_annotator_Set() const;
    bool is_run_sentiment_annotator_Valid() const;

    bool isRunSilenceAnnotator() const;
    void setRunSilenceAnnotator(const bool &run_silence_annotator);
    bool is_run_silence_annotator_Set() const;
    bool is_run_silence_annotator_Valid() const;

    bool isRunSummarizationAnnotator() const;
    void setRunSummarizationAnnotator(const bool &run_summarization_annotator);
    bool is_run_summarization_annotator_Set() const;
    bool is_run_summarization_annotator_Valid() const;

    OAIGoogleCloudContactcenterinsightsV1AnnotatorSelectorSummarizationConfig getSummarizationConfig() const;
    void setSummarizationConfig(const OAIGoogleCloudContactcenterinsightsV1AnnotatorSelectorSummarizationConfig &summarization_config);
    bool is_summarization_config_Set() const;
    bool is_summarization_config_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<QString> m_issue_models;
    bool m_issue_models_isSet;
    bool m_issue_models_isValid;

    QList<QString> m_phrase_matchers;
    bool m_phrase_matchers_isSet;
    bool m_phrase_matchers_isValid;

    bool m_run_entity_annotator;
    bool m_run_entity_annotator_isSet;
    bool m_run_entity_annotator_isValid;

    bool m_run_intent_annotator;
    bool m_run_intent_annotator_isSet;
    bool m_run_intent_annotator_isValid;

    bool m_run_interruption_annotator;
    bool m_run_interruption_annotator_isSet;
    bool m_run_interruption_annotator_isValid;

    bool m_run_issue_model_annotator;
    bool m_run_issue_model_annotator_isSet;
    bool m_run_issue_model_annotator_isValid;

    bool m_run_phrase_matcher_annotator;
    bool m_run_phrase_matcher_annotator_isSet;
    bool m_run_phrase_matcher_annotator_isValid;

    bool m_run_sentiment_annotator;
    bool m_run_sentiment_annotator_isSet;
    bool m_run_sentiment_annotator_isValid;

    bool m_run_silence_annotator;
    bool m_run_silence_annotator_isSet;
    bool m_run_silence_annotator_isValid;

    bool m_run_summarization_annotator;
    bool m_run_summarization_annotator_isSet;
    bool m_run_summarization_annotator_isValid;

    OAIGoogleCloudContactcenterinsightsV1AnnotatorSelectorSummarizationConfig m_summarization_config;
    bool m_summarization_config_isSet;
    bool m_summarization_config_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGoogleCloudContactcenterinsightsV1AnnotatorSelector)

#endif // OAIGoogleCloudContactcenterinsightsV1AnnotatorSelector_H
