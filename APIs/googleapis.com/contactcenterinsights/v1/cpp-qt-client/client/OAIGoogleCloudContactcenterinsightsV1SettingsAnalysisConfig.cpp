/**
 * Contact Center AI Insights API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudContactcenterinsightsV1SettingsAnalysisConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudContactcenterinsightsV1SettingsAnalysisConfig::OAIGoogleCloudContactcenterinsightsV1SettingsAnalysisConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudContactcenterinsightsV1SettingsAnalysisConfig::OAIGoogleCloudContactcenterinsightsV1SettingsAnalysisConfig() {
    this->initializeModel();
}

OAIGoogleCloudContactcenterinsightsV1SettingsAnalysisConfig::~OAIGoogleCloudContactcenterinsightsV1SettingsAnalysisConfig() {}

void OAIGoogleCloudContactcenterinsightsV1SettingsAnalysisConfig::initializeModel() {

    m_annotator_selector_isSet = false;
    m_annotator_selector_isValid = false;

    m_runtime_integration_analysis_percentage_isSet = false;
    m_runtime_integration_analysis_percentage_isValid = false;

    m_upload_conversation_analysis_percentage_isSet = false;
    m_upload_conversation_analysis_percentage_isValid = false;
}

void OAIGoogleCloudContactcenterinsightsV1SettingsAnalysisConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudContactcenterinsightsV1SettingsAnalysisConfig::fromJsonObject(QJsonObject json) {

    m_annotator_selector_isValid = ::OpenAPI::fromJsonValue(m_annotator_selector, json[QString("annotatorSelector")]);
    m_annotator_selector_isSet = !json[QString("annotatorSelector")].isNull() && m_annotator_selector_isValid;

    m_runtime_integration_analysis_percentage_isValid = ::OpenAPI::fromJsonValue(m_runtime_integration_analysis_percentage, json[QString("runtimeIntegrationAnalysisPercentage")]);
    m_runtime_integration_analysis_percentage_isSet = !json[QString("runtimeIntegrationAnalysisPercentage")].isNull() && m_runtime_integration_analysis_percentage_isValid;

    m_upload_conversation_analysis_percentage_isValid = ::OpenAPI::fromJsonValue(m_upload_conversation_analysis_percentage, json[QString("uploadConversationAnalysisPercentage")]);
    m_upload_conversation_analysis_percentage_isSet = !json[QString("uploadConversationAnalysisPercentage")].isNull() && m_upload_conversation_analysis_percentage_isValid;
}

QString OAIGoogleCloudContactcenterinsightsV1SettingsAnalysisConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudContactcenterinsightsV1SettingsAnalysisConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_annotator_selector.isSet()) {
        obj.insert(QString("annotatorSelector"), ::OpenAPI::toJsonValue(m_annotator_selector));
    }
    if (m_runtime_integration_analysis_percentage_isSet) {
        obj.insert(QString("runtimeIntegrationAnalysisPercentage"), ::OpenAPI::toJsonValue(m_runtime_integration_analysis_percentage));
    }
    if (m_upload_conversation_analysis_percentage_isSet) {
        obj.insert(QString("uploadConversationAnalysisPercentage"), ::OpenAPI::toJsonValue(m_upload_conversation_analysis_percentage));
    }
    return obj;
}

OAIGoogleCloudContactcenterinsightsV1AnnotatorSelector OAIGoogleCloudContactcenterinsightsV1SettingsAnalysisConfig::getAnnotatorSelector() const {
    return m_annotator_selector;
}
void OAIGoogleCloudContactcenterinsightsV1SettingsAnalysisConfig::setAnnotatorSelector(const OAIGoogleCloudContactcenterinsightsV1AnnotatorSelector &annotator_selector) {
    m_annotator_selector = annotator_selector;
    m_annotator_selector_isSet = true;
}

bool OAIGoogleCloudContactcenterinsightsV1SettingsAnalysisConfig::is_annotator_selector_Set() const{
    return m_annotator_selector_isSet;
}

bool OAIGoogleCloudContactcenterinsightsV1SettingsAnalysisConfig::is_annotator_selector_Valid() const{
    return m_annotator_selector_isValid;
}

double OAIGoogleCloudContactcenterinsightsV1SettingsAnalysisConfig::getRuntimeIntegrationAnalysisPercentage() const {
    return m_runtime_integration_analysis_percentage;
}
void OAIGoogleCloudContactcenterinsightsV1SettingsAnalysisConfig::setRuntimeIntegrationAnalysisPercentage(const double &runtime_integration_analysis_percentage) {
    m_runtime_integration_analysis_percentage = runtime_integration_analysis_percentage;
    m_runtime_integration_analysis_percentage_isSet = true;
}

bool OAIGoogleCloudContactcenterinsightsV1SettingsAnalysisConfig::is_runtime_integration_analysis_percentage_Set() const{
    return m_runtime_integration_analysis_percentage_isSet;
}

bool OAIGoogleCloudContactcenterinsightsV1SettingsAnalysisConfig::is_runtime_integration_analysis_percentage_Valid() const{
    return m_runtime_integration_analysis_percentage_isValid;
}

double OAIGoogleCloudContactcenterinsightsV1SettingsAnalysisConfig::getUploadConversationAnalysisPercentage() const {
    return m_upload_conversation_analysis_percentage;
}
void OAIGoogleCloudContactcenterinsightsV1SettingsAnalysisConfig::setUploadConversationAnalysisPercentage(const double &upload_conversation_analysis_percentage) {
    m_upload_conversation_analysis_percentage = upload_conversation_analysis_percentage;
    m_upload_conversation_analysis_percentage_isSet = true;
}

bool OAIGoogleCloudContactcenterinsightsV1SettingsAnalysisConfig::is_upload_conversation_analysis_percentage_Set() const{
    return m_upload_conversation_analysis_percentage_isSet;
}

bool OAIGoogleCloudContactcenterinsightsV1SettingsAnalysisConfig::is_upload_conversation_analysis_percentage_Valid() const{
    return m_upload_conversation_analysis_percentage_isValid;
}

bool OAIGoogleCloudContactcenterinsightsV1SettingsAnalysisConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_annotator_selector.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_runtime_integration_analysis_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_upload_conversation_analysis_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudContactcenterinsightsV1SettingsAnalysisConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
