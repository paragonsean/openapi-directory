/**
 * Contact Center AI Insights API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudContactcenterinsightsV1PhraseMatchRuleConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudContactcenterinsightsV1PhraseMatchRuleConfig::OAIGoogleCloudContactcenterinsightsV1PhraseMatchRuleConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudContactcenterinsightsV1PhraseMatchRuleConfig::OAIGoogleCloudContactcenterinsightsV1PhraseMatchRuleConfig() {
    this->initializeModel();
}

OAIGoogleCloudContactcenterinsightsV1PhraseMatchRuleConfig::~OAIGoogleCloudContactcenterinsightsV1PhraseMatchRuleConfig() {}

void OAIGoogleCloudContactcenterinsightsV1PhraseMatchRuleConfig::initializeModel() {

    m_exact_match_config_isSet = false;
    m_exact_match_config_isValid = false;
}

void OAIGoogleCloudContactcenterinsightsV1PhraseMatchRuleConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudContactcenterinsightsV1PhraseMatchRuleConfig::fromJsonObject(QJsonObject json) {

    m_exact_match_config_isValid = ::OpenAPI::fromJsonValue(m_exact_match_config, json[QString("exactMatchConfig")]);
    m_exact_match_config_isSet = !json[QString("exactMatchConfig")].isNull() && m_exact_match_config_isValid;
}

QString OAIGoogleCloudContactcenterinsightsV1PhraseMatchRuleConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudContactcenterinsightsV1PhraseMatchRuleConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_exact_match_config.isSet()) {
        obj.insert(QString("exactMatchConfig"), ::OpenAPI::toJsonValue(m_exact_match_config));
    }
    return obj;
}

OAIGoogleCloudContactcenterinsightsV1ExactMatchConfig OAIGoogleCloudContactcenterinsightsV1PhraseMatchRuleConfig::getExactMatchConfig() const {
    return m_exact_match_config;
}
void OAIGoogleCloudContactcenterinsightsV1PhraseMatchRuleConfig::setExactMatchConfig(const OAIGoogleCloudContactcenterinsightsV1ExactMatchConfig &exact_match_config) {
    m_exact_match_config = exact_match_config;
    m_exact_match_config_isSet = true;
}

bool OAIGoogleCloudContactcenterinsightsV1PhraseMatchRuleConfig::is_exact_match_config_Set() const{
    return m_exact_match_config_isSet;
}

bool OAIGoogleCloudContactcenterinsightsV1PhraseMatchRuleConfig::is_exact_match_config_Valid() const{
    return m_exact_match_config_isValid;
}

bool OAIGoogleCloudContactcenterinsightsV1PhraseMatchRuleConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_exact_match_config.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudContactcenterinsightsV1PhraseMatchRuleConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
