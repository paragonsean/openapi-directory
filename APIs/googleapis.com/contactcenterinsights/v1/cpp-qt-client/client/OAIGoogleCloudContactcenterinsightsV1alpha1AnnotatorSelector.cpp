/**
 * Contact Center AI Insights API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector::OAIGoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector::OAIGoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector() {
    this->initializeModel();
}

OAIGoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector::~OAIGoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector() {}

void OAIGoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector::initializeModel() {

    m_issue_models_isSet = false;
    m_issue_models_isValid = false;

    m_phrase_matchers_isSet = false;
    m_phrase_matchers_isValid = false;

    m_run_entity_annotator_isSet = false;
    m_run_entity_annotator_isValid = false;

    m_run_intent_annotator_isSet = false;
    m_run_intent_annotator_isValid = false;

    m_run_interruption_annotator_isSet = false;
    m_run_interruption_annotator_isValid = false;

    m_run_issue_model_annotator_isSet = false;
    m_run_issue_model_annotator_isValid = false;

    m_run_phrase_matcher_annotator_isSet = false;
    m_run_phrase_matcher_annotator_isValid = false;

    m_run_sentiment_annotator_isSet = false;
    m_run_sentiment_annotator_isValid = false;

    m_run_silence_annotator_isSet = false;
    m_run_silence_annotator_isValid = false;

    m_run_summarization_annotator_isSet = false;
    m_run_summarization_annotator_isValid = false;

    m_summarization_config_isSet = false;
    m_summarization_config_isValid = false;
}

void OAIGoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector::fromJsonObject(QJsonObject json) {

    m_issue_models_isValid = ::OpenAPI::fromJsonValue(m_issue_models, json[QString("issueModels")]);
    m_issue_models_isSet = !json[QString("issueModels")].isNull() && m_issue_models_isValid;

    m_phrase_matchers_isValid = ::OpenAPI::fromJsonValue(m_phrase_matchers, json[QString("phraseMatchers")]);
    m_phrase_matchers_isSet = !json[QString("phraseMatchers")].isNull() && m_phrase_matchers_isValid;

    m_run_entity_annotator_isValid = ::OpenAPI::fromJsonValue(m_run_entity_annotator, json[QString("runEntityAnnotator")]);
    m_run_entity_annotator_isSet = !json[QString("runEntityAnnotator")].isNull() && m_run_entity_annotator_isValid;

    m_run_intent_annotator_isValid = ::OpenAPI::fromJsonValue(m_run_intent_annotator, json[QString("runIntentAnnotator")]);
    m_run_intent_annotator_isSet = !json[QString("runIntentAnnotator")].isNull() && m_run_intent_annotator_isValid;

    m_run_interruption_annotator_isValid = ::OpenAPI::fromJsonValue(m_run_interruption_annotator, json[QString("runInterruptionAnnotator")]);
    m_run_interruption_annotator_isSet = !json[QString("runInterruptionAnnotator")].isNull() && m_run_interruption_annotator_isValid;

    m_run_issue_model_annotator_isValid = ::OpenAPI::fromJsonValue(m_run_issue_model_annotator, json[QString("runIssueModelAnnotator")]);
    m_run_issue_model_annotator_isSet = !json[QString("runIssueModelAnnotator")].isNull() && m_run_issue_model_annotator_isValid;

    m_run_phrase_matcher_annotator_isValid = ::OpenAPI::fromJsonValue(m_run_phrase_matcher_annotator, json[QString("runPhraseMatcherAnnotator")]);
    m_run_phrase_matcher_annotator_isSet = !json[QString("runPhraseMatcherAnnotator")].isNull() && m_run_phrase_matcher_annotator_isValid;

    m_run_sentiment_annotator_isValid = ::OpenAPI::fromJsonValue(m_run_sentiment_annotator, json[QString("runSentimentAnnotator")]);
    m_run_sentiment_annotator_isSet = !json[QString("runSentimentAnnotator")].isNull() && m_run_sentiment_annotator_isValid;

    m_run_silence_annotator_isValid = ::OpenAPI::fromJsonValue(m_run_silence_annotator, json[QString("runSilenceAnnotator")]);
    m_run_silence_annotator_isSet = !json[QString("runSilenceAnnotator")].isNull() && m_run_silence_annotator_isValid;

    m_run_summarization_annotator_isValid = ::OpenAPI::fromJsonValue(m_run_summarization_annotator, json[QString("runSummarizationAnnotator")]);
    m_run_summarization_annotator_isSet = !json[QString("runSummarizationAnnotator")].isNull() && m_run_summarization_annotator_isValid;

    m_summarization_config_isValid = ::OpenAPI::fromJsonValue(m_summarization_config, json[QString("summarizationConfig")]);
    m_summarization_config_isSet = !json[QString("summarizationConfig")].isNull() && m_summarization_config_isValid;
}

QString OAIGoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector::asJsonObject() const {
    QJsonObject obj;
    if (m_issue_models.size() > 0) {
        obj.insert(QString("issueModels"), ::OpenAPI::toJsonValue(m_issue_models));
    }
    if (m_phrase_matchers.size() > 0) {
        obj.insert(QString("phraseMatchers"), ::OpenAPI::toJsonValue(m_phrase_matchers));
    }
    if (m_run_entity_annotator_isSet) {
        obj.insert(QString("runEntityAnnotator"), ::OpenAPI::toJsonValue(m_run_entity_annotator));
    }
    if (m_run_intent_annotator_isSet) {
        obj.insert(QString("runIntentAnnotator"), ::OpenAPI::toJsonValue(m_run_intent_annotator));
    }
    if (m_run_interruption_annotator_isSet) {
        obj.insert(QString("runInterruptionAnnotator"), ::OpenAPI::toJsonValue(m_run_interruption_annotator));
    }
    if (m_run_issue_model_annotator_isSet) {
        obj.insert(QString("runIssueModelAnnotator"), ::OpenAPI::toJsonValue(m_run_issue_model_annotator));
    }
    if (m_run_phrase_matcher_annotator_isSet) {
        obj.insert(QString("runPhraseMatcherAnnotator"), ::OpenAPI::toJsonValue(m_run_phrase_matcher_annotator));
    }
    if (m_run_sentiment_annotator_isSet) {
        obj.insert(QString("runSentimentAnnotator"), ::OpenAPI::toJsonValue(m_run_sentiment_annotator));
    }
    if (m_run_silence_annotator_isSet) {
        obj.insert(QString("runSilenceAnnotator"), ::OpenAPI::toJsonValue(m_run_silence_annotator));
    }
    if (m_run_summarization_annotator_isSet) {
        obj.insert(QString("runSummarizationAnnotator"), ::OpenAPI::toJsonValue(m_run_summarization_annotator));
    }
    if (m_summarization_config.isSet()) {
        obj.insert(QString("summarizationConfig"), ::OpenAPI::toJsonValue(m_summarization_config));
    }
    return obj;
}

QList<QString> OAIGoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector::getIssueModels() const {
    return m_issue_models;
}
void OAIGoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector::setIssueModels(const QList<QString> &issue_models) {
    m_issue_models = issue_models;
    m_issue_models_isSet = true;
}

bool OAIGoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector::is_issue_models_Set() const{
    return m_issue_models_isSet;
}

bool OAIGoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector::is_issue_models_Valid() const{
    return m_issue_models_isValid;
}

QList<QString> OAIGoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector::getPhraseMatchers() const {
    return m_phrase_matchers;
}
void OAIGoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector::setPhraseMatchers(const QList<QString> &phrase_matchers) {
    m_phrase_matchers = phrase_matchers;
    m_phrase_matchers_isSet = true;
}

bool OAIGoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector::is_phrase_matchers_Set() const{
    return m_phrase_matchers_isSet;
}

bool OAIGoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector::is_phrase_matchers_Valid() const{
    return m_phrase_matchers_isValid;
}

bool OAIGoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector::isRunEntityAnnotator() const {
    return m_run_entity_annotator;
}
void OAIGoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector::setRunEntityAnnotator(const bool &run_entity_annotator) {
    m_run_entity_annotator = run_entity_annotator;
    m_run_entity_annotator_isSet = true;
}

bool OAIGoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector::is_run_entity_annotator_Set() const{
    return m_run_entity_annotator_isSet;
}

bool OAIGoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector::is_run_entity_annotator_Valid() const{
    return m_run_entity_annotator_isValid;
}

bool OAIGoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector::isRunIntentAnnotator() const {
    return m_run_intent_annotator;
}
void OAIGoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector::setRunIntentAnnotator(const bool &run_intent_annotator) {
    m_run_intent_annotator = run_intent_annotator;
    m_run_intent_annotator_isSet = true;
}

bool OAIGoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector::is_run_intent_annotator_Set() const{
    return m_run_intent_annotator_isSet;
}

bool OAIGoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector::is_run_intent_annotator_Valid() const{
    return m_run_intent_annotator_isValid;
}

bool OAIGoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector::isRunInterruptionAnnotator() const {
    return m_run_interruption_annotator;
}
void OAIGoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector::setRunInterruptionAnnotator(const bool &run_interruption_annotator) {
    m_run_interruption_annotator = run_interruption_annotator;
    m_run_interruption_annotator_isSet = true;
}

bool OAIGoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector::is_run_interruption_annotator_Set() const{
    return m_run_interruption_annotator_isSet;
}

bool OAIGoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector::is_run_interruption_annotator_Valid() const{
    return m_run_interruption_annotator_isValid;
}

bool OAIGoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector::isRunIssueModelAnnotator() const {
    return m_run_issue_model_annotator;
}
void OAIGoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector::setRunIssueModelAnnotator(const bool &run_issue_model_annotator) {
    m_run_issue_model_annotator = run_issue_model_annotator;
    m_run_issue_model_annotator_isSet = true;
}

bool OAIGoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector::is_run_issue_model_annotator_Set() const{
    return m_run_issue_model_annotator_isSet;
}

bool OAIGoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector::is_run_issue_model_annotator_Valid() const{
    return m_run_issue_model_annotator_isValid;
}

bool OAIGoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector::isRunPhraseMatcherAnnotator() const {
    return m_run_phrase_matcher_annotator;
}
void OAIGoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector::setRunPhraseMatcherAnnotator(const bool &run_phrase_matcher_annotator) {
    m_run_phrase_matcher_annotator = run_phrase_matcher_annotator;
    m_run_phrase_matcher_annotator_isSet = true;
}

bool OAIGoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector::is_run_phrase_matcher_annotator_Set() const{
    return m_run_phrase_matcher_annotator_isSet;
}

bool OAIGoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector::is_run_phrase_matcher_annotator_Valid() const{
    return m_run_phrase_matcher_annotator_isValid;
}

bool OAIGoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector::isRunSentimentAnnotator() const {
    return m_run_sentiment_annotator;
}
void OAIGoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector::setRunSentimentAnnotator(const bool &run_sentiment_annotator) {
    m_run_sentiment_annotator = run_sentiment_annotator;
    m_run_sentiment_annotator_isSet = true;
}

bool OAIGoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector::is_run_sentiment_annotator_Set() const{
    return m_run_sentiment_annotator_isSet;
}

bool OAIGoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector::is_run_sentiment_annotator_Valid() const{
    return m_run_sentiment_annotator_isValid;
}

bool OAIGoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector::isRunSilenceAnnotator() const {
    return m_run_silence_annotator;
}
void OAIGoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector::setRunSilenceAnnotator(const bool &run_silence_annotator) {
    m_run_silence_annotator = run_silence_annotator;
    m_run_silence_annotator_isSet = true;
}

bool OAIGoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector::is_run_silence_annotator_Set() const{
    return m_run_silence_annotator_isSet;
}

bool OAIGoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector::is_run_silence_annotator_Valid() const{
    return m_run_silence_annotator_isValid;
}

bool OAIGoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector::isRunSummarizationAnnotator() const {
    return m_run_summarization_annotator;
}
void OAIGoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector::setRunSummarizationAnnotator(const bool &run_summarization_annotator) {
    m_run_summarization_annotator = run_summarization_annotator;
    m_run_summarization_annotator_isSet = true;
}

bool OAIGoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector::is_run_summarization_annotator_Set() const{
    return m_run_summarization_annotator_isSet;
}

bool OAIGoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector::is_run_summarization_annotator_Valid() const{
    return m_run_summarization_annotator_isValid;
}

OAIGoogleCloudContactcenterinsightsV1alpha1AnnotatorSelectorSummarizationConfig OAIGoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector::getSummarizationConfig() const {
    return m_summarization_config;
}
void OAIGoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector::setSummarizationConfig(const OAIGoogleCloudContactcenterinsightsV1alpha1AnnotatorSelectorSummarizationConfig &summarization_config) {
    m_summarization_config = summarization_config;
    m_summarization_config_isSet = true;
}

bool OAIGoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector::is_summarization_config_Set() const{
    return m_summarization_config_isSet;
}

bool OAIGoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector::is_summarization_config_Valid() const{
    return m_summarization_config_isValid;
}

bool OAIGoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_issue_models.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_phrase_matchers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_run_entity_annotator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_run_intent_annotator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_run_interruption_annotator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_run_issue_model_annotator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_run_phrase_matcher_annotator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_run_sentiment_annotator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_run_silence_annotator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_run_summarization_annotator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_summarization_config.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
