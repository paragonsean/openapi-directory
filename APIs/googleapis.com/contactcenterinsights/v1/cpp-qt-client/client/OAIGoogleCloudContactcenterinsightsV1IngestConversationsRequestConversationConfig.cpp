/**
 * Contact Center AI Insights API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudContactcenterinsightsV1IngestConversationsRequestConversationConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudContactcenterinsightsV1IngestConversationsRequestConversationConfig::OAIGoogleCloudContactcenterinsightsV1IngestConversationsRequestConversationConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudContactcenterinsightsV1IngestConversationsRequestConversationConfig::OAIGoogleCloudContactcenterinsightsV1IngestConversationsRequestConversationConfig() {
    this->initializeModel();
}

OAIGoogleCloudContactcenterinsightsV1IngestConversationsRequestConversationConfig::~OAIGoogleCloudContactcenterinsightsV1IngestConversationsRequestConversationConfig() {}

void OAIGoogleCloudContactcenterinsightsV1IngestConversationsRequestConversationConfig::initializeModel() {

    m_agent_channel_isSet = false;
    m_agent_channel_isValid = false;

    m_agent_id_isSet = false;
    m_agent_id_isValid = false;

    m_customer_channel_isSet = false;
    m_customer_channel_isValid = false;
}

void OAIGoogleCloudContactcenterinsightsV1IngestConversationsRequestConversationConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudContactcenterinsightsV1IngestConversationsRequestConversationConfig::fromJsonObject(QJsonObject json) {

    m_agent_channel_isValid = ::OpenAPI::fromJsonValue(m_agent_channel, json[QString("agentChannel")]);
    m_agent_channel_isSet = !json[QString("agentChannel")].isNull() && m_agent_channel_isValid;

    m_agent_id_isValid = ::OpenAPI::fromJsonValue(m_agent_id, json[QString("agentId")]);
    m_agent_id_isSet = !json[QString("agentId")].isNull() && m_agent_id_isValid;

    m_customer_channel_isValid = ::OpenAPI::fromJsonValue(m_customer_channel, json[QString("customerChannel")]);
    m_customer_channel_isSet = !json[QString("customerChannel")].isNull() && m_customer_channel_isValid;
}

QString OAIGoogleCloudContactcenterinsightsV1IngestConversationsRequestConversationConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudContactcenterinsightsV1IngestConversationsRequestConversationConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_agent_channel_isSet) {
        obj.insert(QString("agentChannel"), ::OpenAPI::toJsonValue(m_agent_channel));
    }
    if (m_agent_id_isSet) {
        obj.insert(QString("agentId"), ::OpenAPI::toJsonValue(m_agent_id));
    }
    if (m_customer_channel_isSet) {
        obj.insert(QString("customerChannel"), ::OpenAPI::toJsonValue(m_customer_channel));
    }
    return obj;
}

qint32 OAIGoogleCloudContactcenterinsightsV1IngestConversationsRequestConversationConfig::getAgentChannel() const {
    return m_agent_channel;
}
void OAIGoogleCloudContactcenterinsightsV1IngestConversationsRequestConversationConfig::setAgentChannel(const qint32 &agent_channel) {
    m_agent_channel = agent_channel;
    m_agent_channel_isSet = true;
}

bool OAIGoogleCloudContactcenterinsightsV1IngestConversationsRequestConversationConfig::is_agent_channel_Set() const{
    return m_agent_channel_isSet;
}

bool OAIGoogleCloudContactcenterinsightsV1IngestConversationsRequestConversationConfig::is_agent_channel_Valid() const{
    return m_agent_channel_isValid;
}

QString OAIGoogleCloudContactcenterinsightsV1IngestConversationsRequestConversationConfig::getAgentId() const {
    return m_agent_id;
}
void OAIGoogleCloudContactcenterinsightsV1IngestConversationsRequestConversationConfig::setAgentId(const QString &agent_id) {
    m_agent_id = agent_id;
    m_agent_id_isSet = true;
}

bool OAIGoogleCloudContactcenterinsightsV1IngestConversationsRequestConversationConfig::is_agent_id_Set() const{
    return m_agent_id_isSet;
}

bool OAIGoogleCloudContactcenterinsightsV1IngestConversationsRequestConversationConfig::is_agent_id_Valid() const{
    return m_agent_id_isValid;
}

qint32 OAIGoogleCloudContactcenterinsightsV1IngestConversationsRequestConversationConfig::getCustomerChannel() const {
    return m_customer_channel;
}
void OAIGoogleCloudContactcenterinsightsV1IngestConversationsRequestConversationConfig::setCustomerChannel(const qint32 &customer_channel) {
    m_customer_channel = customer_channel;
    m_customer_channel_isSet = true;
}

bool OAIGoogleCloudContactcenterinsightsV1IngestConversationsRequestConversationConfig::is_customer_channel_Set() const{
    return m_customer_channel_isSet;
}

bool OAIGoogleCloudContactcenterinsightsV1IngestConversationsRequestConversationConfig::is_customer_channel_Valid() const{
    return m_customer_channel_isValid;
}

bool OAIGoogleCloudContactcenterinsightsV1IngestConversationsRequestConversationConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_agent_channel_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_agent_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_channel_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudContactcenterinsightsV1IngestConversationsRequestConversationConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
