/**
 * Contact Center AI Insights API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudContactcenterinsightsV1alpha1SmartReplyData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudContactcenterinsightsV1alpha1SmartReplyData::OAIGoogleCloudContactcenterinsightsV1alpha1SmartReplyData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudContactcenterinsightsV1alpha1SmartReplyData::OAIGoogleCloudContactcenterinsightsV1alpha1SmartReplyData() {
    this->initializeModel();
}

OAIGoogleCloudContactcenterinsightsV1alpha1SmartReplyData::~OAIGoogleCloudContactcenterinsightsV1alpha1SmartReplyData() {}

void OAIGoogleCloudContactcenterinsightsV1alpha1SmartReplyData::initializeModel() {

    m_confidence_score_isSet = false;
    m_confidence_score_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_query_record_isSet = false;
    m_query_record_isValid = false;

    m_reply_isSet = false;
    m_reply_isValid = false;
}

void OAIGoogleCloudContactcenterinsightsV1alpha1SmartReplyData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudContactcenterinsightsV1alpha1SmartReplyData::fromJsonObject(QJsonObject json) {

    m_confidence_score_isValid = ::OpenAPI::fromJsonValue(m_confidence_score, json[QString("confidenceScore")]);
    m_confidence_score_isSet = !json[QString("confidenceScore")].isNull() && m_confidence_score_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_query_record_isValid = ::OpenAPI::fromJsonValue(m_query_record, json[QString("queryRecord")]);
    m_query_record_isSet = !json[QString("queryRecord")].isNull() && m_query_record_isValid;

    m_reply_isValid = ::OpenAPI::fromJsonValue(m_reply, json[QString("reply")]);
    m_reply_isSet = !json[QString("reply")].isNull() && m_reply_isValid;
}

QString OAIGoogleCloudContactcenterinsightsV1alpha1SmartReplyData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudContactcenterinsightsV1alpha1SmartReplyData::asJsonObject() const {
    QJsonObject obj;
    if (m_confidence_score_isSet) {
        obj.insert(QString("confidenceScore"), ::OpenAPI::toJsonValue(m_confidence_score));
    }
    if (m_metadata.size() > 0) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_query_record_isSet) {
        obj.insert(QString("queryRecord"), ::OpenAPI::toJsonValue(m_query_record));
    }
    if (m_reply_isSet) {
        obj.insert(QString("reply"), ::OpenAPI::toJsonValue(m_reply));
    }
    return obj;
}

double OAIGoogleCloudContactcenterinsightsV1alpha1SmartReplyData::getConfidenceScore() const {
    return m_confidence_score;
}
void OAIGoogleCloudContactcenterinsightsV1alpha1SmartReplyData::setConfidenceScore(const double &confidence_score) {
    m_confidence_score = confidence_score;
    m_confidence_score_isSet = true;
}

bool OAIGoogleCloudContactcenterinsightsV1alpha1SmartReplyData::is_confidence_score_Set() const{
    return m_confidence_score_isSet;
}

bool OAIGoogleCloudContactcenterinsightsV1alpha1SmartReplyData::is_confidence_score_Valid() const{
    return m_confidence_score_isValid;
}

QMap<QString, QString> OAIGoogleCloudContactcenterinsightsV1alpha1SmartReplyData::getMetadata() const {
    return m_metadata;
}
void OAIGoogleCloudContactcenterinsightsV1alpha1SmartReplyData::setMetadata(const QMap<QString, QString> &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIGoogleCloudContactcenterinsightsV1alpha1SmartReplyData::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIGoogleCloudContactcenterinsightsV1alpha1SmartReplyData::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QString OAIGoogleCloudContactcenterinsightsV1alpha1SmartReplyData::getQueryRecord() const {
    return m_query_record;
}
void OAIGoogleCloudContactcenterinsightsV1alpha1SmartReplyData::setQueryRecord(const QString &query_record) {
    m_query_record = query_record;
    m_query_record_isSet = true;
}

bool OAIGoogleCloudContactcenterinsightsV1alpha1SmartReplyData::is_query_record_Set() const{
    return m_query_record_isSet;
}

bool OAIGoogleCloudContactcenterinsightsV1alpha1SmartReplyData::is_query_record_Valid() const{
    return m_query_record_isValid;
}

QString OAIGoogleCloudContactcenterinsightsV1alpha1SmartReplyData::getReply() const {
    return m_reply;
}
void OAIGoogleCloudContactcenterinsightsV1alpha1SmartReplyData::setReply(const QString &reply) {
    m_reply = reply;
    m_reply_isSet = true;
}

bool OAIGoogleCloudContactcenterinsightsV1alpha1SmartReplyData::is_reply_Set() const{
    return m_reply_isSet;
}

bool OAIGoogleCloudContactcenterinsightsV1alpha1SmartReplyData::is_reply_Valid() const{
    return m_reply_isValid;
}

bool OAIGoogleCloudContactcenterinsightsV1alpha1SmartReplyData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_confidence_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_record_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reply_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudContactcenterinsightsV1alpha1SmartReplyData::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
