/**
 * Contact Center AI Insights API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudContactcenterinsightsV1alpha1CallAnnotation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudContactcenterinsightsV1alpha1CallAnnotation::OAIGoogleCloudContactcenterinsightsV1alpha1CallAnnotation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudContactcenterinsightsV1alpha1CallAnnotation::OAIGoogleCloudContactcenterinsightsV1alpha1CallAnnotation() {
    this->initializeModel();
}

OAIGoogleCloudContactcenterinsightsV1alpha1CallAnnotation::~OAIGoogleCloudContactcenterinsightsV1alpha1CallAnnotation() {}

void OAIGoogleCloudContactcenterinsightsV1alpha1CallAnnotation::initializeModel() {

    m_annotation_end_boundary_isSet = false;
    m_annotation_end_boundary_isValid = false;

    m_annotation_start_boundary_isSet = false;
    m_annotation_start_boundary_isValid = false;

    m_channel_tag_isSet = false;
    m_channel_tag_isValid = false;

    m_entity_mention_data_isSet = false;
    m_entity_mention_data_isValid = false;

    m_hold_data_isSet = false;
    m_hold_data_isValid = false;

    m_intent_match_data_isSet = false;
    m_intent_match_data_isValid = false;

    m_interruption_data_isSet = false;
    m_interruption_data_isValid = false;

    m_issue_match_data_isSet = false;
    m_issue_match_data_isValid = false;

    m_phrase_match_data_isSet = false;
    m_phrase_match_data_isValid = false;

    m_sentiment_data_isSet = false;
    m_sentiment_data_isValid = false;

    m_silence_data_isSet = false;
    m_silence_data_isValid = false;
}

void OAIGoogleCloudContactcenterinsightsV1alpha1CallAnnotation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudContactcenterinsightsV1alpha1CallAnnotation::fromJsonObject(QJsonObject json) {

    m_annotation_end_boundary_isValid = ::OpenAPI::fromJsonValue(m_annotation_end_boundary, json[QString("annotationEndBoundary")]);
    m_annotation_end_boundary_isSet = !json[QString("annotationEndBoundary")].isNull() && m_annotation_end_boundary_isValid;

    m_annotation_start_boundary_isValid = ::OpenAPI::fromJsonValue(m_annotation_start_boundary, json[QString("annotationStartBoundary")]);
    m_annotation_start_boundary_isSet = !json[QString("annotationStartBoundary")].isNull() && m_annotation_start_boundary_isValid;

    m_channel_tag_isValid = ::OpenAPI::fromJsonValue(m_channel_tag, json[QString("channelTag")]);
    m_channel_tag_isSet = !json[QString("channelTag")].isNull() && m_channel_tag_isValid;

    m_entity_mention_data_isValid = ::OpenAPI::fromJsonValue(m_entity_mention_data, json[QString("entityMentionData")]);
    m_entity_mention_data_isSet = !json[QString("entityMentionData")].isNull() && m_entity_mention_data_isValid;

    m_hold_data_isValid = ::OpenAPI::fromJsonValue(m_hold_data, json[QString("holdData")]);
    m_hold_data_isSet = !json[QString("holdData")].isNull() && m_hold_data_isValid;

    m_intent_match_data_isValid = ::OpenAPI::fromJsonValue(m_intent_match_data, json[QString("intentMatchData")]);
    m_intent_match_data_isSet = !json[QString("intentMatchData")].isNull() && m_intent_match_data_isValid;

    m_interruption_data_isValid = ::OpenAPI::fromJsonValue(m_interruption_data, json[QString("interruptionData")]);
    m_interruption_data_isSet = !json[QString("interruptionData")].isNull() && m_interruption_data_isValid;

    m_issue_match_data_isValid = ::OpenAPI::fromJsonValue(m_issue_match_data, json[QString("issueMatchData")]);
    m_issue_match_data_isSet = !json[QString("issueMatchData")].isNull() && m_issue_match_data_isValid;

    m_phrase_match_data_isValid = ::OpenAPI::fromJsonValue(m_phrase_match_data, json[QString("phraseMatchData")]);
    m_phrase_match_data_isSet = !json[QString("phraseMatchData")].isNull() && m_phrase_match_data_isValid;

    m_sentiment_data_isValid = ::OpenAPI::fromJsonValue(m_sentiment_data, json[QString("sentimentData")]);
    m_sentiment_data_isSet = !json[QString("sentimentData")].isNull() && m_sentiment_data_isValid;

    m_silence_data_isValid = ::OpenAPI::fromJsonValue(m_silence_data, json[QString("silenceData")]);
    m_silence_data_isSet = !json[QString("silenceData")].isNull() && m_silence_data_isValid;
}

QString OAIGoogleCloudContactcenterinsightsV1alpha1CallAnnotation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudContactcenterinsightsV1alpha1CallAnnotation::asJsonObject() const {
    QJsonObject obj;
    if (m_annotation_end_boundary.isSet()) {
        obj.insert(QString("annotationEndBoundary"), ::OpenAPI::toJsonValue(m_annotation_end_boundary));
    }
    if (m_annotation_start_boundary.isSet()) {
        obj.insert(QString("annotationStartBoundary"), ::OpenAPI::toJsonValue(m_annotation_start_boundary));
    }
    if (m_channel_tag_isSet) {
        obj.insert(QString("channelTag"), ::OpenAPI::toJsonValue(m_channel_tag));
    }
    if (m_entity_mention_data.isSet()) {
        obj.insert(QString("entityMentionData"), ::OpenAPI::toJsonValue(m_entity_mention_data));
    }
    if (m_hold_data_isSet) {
        obj.insert(QString("holdData"), ::OpenAPI::toJsonValue(m_hold_data));
    }
    if (m_intent_match_data.isSet()) {
        obj.insert(QString("intentMatchData"), ::OpenAPI::toJsonValue(m_intent_match_data));
    }
    if (m_interruption_data_isSet) {
        obj.insert(QString("interruptionData"), ::OpenAPI::toJsonValue(m_interruption_data));
    }
    if (m_issue_match_data.isSet()) {
        obj.insert(QString("issueMatchData"), ::OpenAPI::toJsonValue(m_issue_match_data));
    }
    if (m_phrase_match_data.isSet()) {
        obj.insert(QString("phraseMatchData"), ::OpenAPI::toJsonValue(m_phrase_match_data));
    }
    if (m_sentiment_data.isSet()) {
        obj.insert(QString("sentimentData"), ::OpenAPI::toJsonValue(m_sentiment_data));
    }
    if (m_silence_data_isSet) {
        obj.insert(QString("silenceData"), ::OpenAPI::toJsonValue(m_silence_data));
    }
    return obj;
}

OAIGoogleCloudContactcenterinsightsV1alpha1AnnotationBoundary OAIGoogleCloudContactcenterinsightsV1alpha1CallAnnotation::getAnnotationEndBoundary() const {
    return m_annotation_end_boundary;
}
void OAIGoogleCloudContactcenterinsightsV1alpha1CallAnnotation::setAnnotationEndBoundary(const OAIGoogleCloudContactcenterinsightsV1alpha1AnnotationBoundary &annotation_end_boundary) {
    m_annotation_end_boundary = annotation_end_boundary;
    m_annotation_end_boundary_isSet = true;
}

bool OAIGoogleCloudContactcenterinsightsV1alpha1CallAnnotation::is_annotation_end_boundary_Set() const{
    return m_annotation_end_boundary_isSet;
}

bool OAIGoogleCloudContactcenterinsightsV1alpha1CallAnnotation::is_annotation_end_boundary_Valid() const{
    return m_annotation_end_boundary_isValid;
}

OAIGoogleCloudContactcenterinsightsV1alpha1AnnotationBoundary OAIGoogleCloudContactcenterinsightsV1alpha1CallAnnotation::getAnnotationStartBoundary() const {
    return m_annotation_start_boundary;
}
void OAIGoogleCloudContactcenterinsightsV1alpha1CallAnnotation::setAnnotationStartBoundary(const OAIGoogleCloudContactcenterinsightsV1alpha1AnnotationBoundary &annotation_start_boundary) {
    m_annotation_start_boundary = annotation_start_boundary;
    m_annotation_start_boundary_isSet = true;
}

bool OAIGoogleCloudContactcenterinsightsV1alpha1CallAnnotation::is_annotation_start_boundary_Set() const{
    return m_annotation_start_boundary_isSet;
}

bool OAIGoogleCloudContactcenterinsightsV1alpha1CallAnnotation::is_annotation_start_boundary_Valid() const{
    return m_annotation_start_boundary_isValid;
}

qint32 OAIGoogleCloudContactcenterinsightsV1alpha1CallAnnotation::getChannelTag() const {
    return m_channel_tag;
}
void OAIGoogleCloudContactcenterinsightsV1alpha1CallAnnotation::setChannelTag(const qint32 &channel_tag) {
    m_channel_tag = channel_tag;
    m_channel_tag_isSet = true;
}

bool OAIGoogleCloudContactcenterinsightsV1alpha1CallAnnotation::is_channel_tag_Set() const{
    return m_channel_tag_isSet;
}

bool OAIGoogleCloudContactcenterinsightsV1alpha1CallAnnotation::is_channel_tag_Valid() const{
    return m_channel_tag_isValid;
}

OAIGoogleCloudContactcenterinsightsV1alpha1EntityMentionData OAIGoogleCloudContactcenterinsightsV1alpha1CallAnnotation::getEntityMentionData() const {
    return m_entity_mention_data;
}
void OAIGoogleCloudContactcenterinsightsV1alpha1CallAnnotation::setEntityMentionData(const OAIGoogleCloudContactcenterinsightsV1alpha1EntityMentionData &entity_mention_data) {
    m_entity_mention_data = entity_mention_data;
    m_entity_mention_data_isSet = true;
}

bool OAIGoogleCloudContactcenterinsightsV1alpha1CallAnnotation::is_entity_mention_data_Set() const{
    return m_entity_mention_data_isSet;
}

bool OAIGoogleCloudContactcenterinsightsV1alpha1CallAnnotation::is_entity_mention_data_Valid() const{
    return m_entity_mention_data_isValid;
}

OAIObject OAIGoogleCloudContactcenterinsightsV1alpha1CallAnnotation::getHoldData() const {
    return m_hold_data;
}
void OAIGoogleCloudContactcenterinsightsV1alpha1CallAnnotation::setHoldData(const OAIObject &hold_data) {
    m_hold_data = hold_data;
    m_hold_data_isSet = true;
}

bool OAIGoogleCloudContactcenterinsightsV1alpha1CallAnnotation::is_hold_data_Set() const{
    return m_hold_data_isSet;
}

bool OAIGoogleCloudContactcenterinsightsV1alpha1CallAnnotation::is_hold_data_Valid() const{
    return m_hold_data_isValid;
}

OAIGoogleCloudContactcenterinsightsV1alpha1IntentMatchData OAIGoogleCloudContactcenterinsightsV1alpha1CallAnnotation::getIntentMatchData() const {
    return m_intent_match_data;
}
void OAIGoogleCloudContactcenterinsightsV1alpha1CallAnnotation::setIntentMatchData(const OAIGoogleCloudContactcenterinsightsV1alpha1IntentMatchData &intent_match_data) {
    m_intent_match_data = intent_match_data;
    m_intent_match_data_isSet = true;
}

bool OAIGoogleCloudContactcenterinsightsV1alpha1CallAnnotation::is_intent_match_data_Set() const{
    return m_intent_match_data_isSet;
}

bool OAIGoogleCloudContactcenterinsightsV1alpha1CallAnnotation::is_intent_match_data_Valid() const{
    return m_intent_match_data_isValid;
}

OAIObject OAIGoogleCloudContactcenterinsightsV1alpha1CallAnnotation::getInterruptionData() const {
    return m_interruption_data;
}
void OAIGoogleCloudContactcenterinsightsV1alpha1CallAnnotation::setInterruptionData(const OAIObject &interruption_data) {
    m_interruption_data = interruption_data;
    m_interruption_data_isSet = true;
}

bool OAIGoogleCloudContactcenterinsightsV1alpha1CallAnnotation::is_interruption_data_Set() const{
    return m_interruption_data_isSet;
}

bool OAIGoogleCloudContactcenterinsightsV1alpha1CallAnnotation::is_interruption_data_Valid() const{
    return m_interruption_data_isValid;
}

OAIGoogleCloudContactcenterinsightsV1alpha1IssueMatchData OAIGoogleCloudContactcenterinsightsV1alpha1CallAnnotation::getIssueMatchData() const {
    return m_issue_match_data;
}
void OAIGoogleCloudContactcenterinsightsV1alpha1CallAnnotation::setIssueMatchData(const OAIGoogleCloudContactcenterinsightsV1alpha1IssueMatchData &issue_match_data) {
    m_issue_match_data = issue_match_data;
    m_issue_match_data_isSet = true;
}

bool OAIGoogleCloudContactcenterinsightsV1alpha1CallAnnotation::is_issue_match_data_Set() const{
    return m_issue_match_data_isSet;
}

bool OAIGoogleCloudContactcenterinsightsV1alpha1CallAnnotation::is_issue_match_data_Valid() const{
    return m_issue_match_data_isValid;
}

OAIGoogleCloudContactcenterinsightsV1alpha1PhraseMatchData OAIGoogleCloudContactcenterinsightsV1alpha1CallAnnotation::getPhraseMatchData() const {
    return m_phrase_match_data;
}
void OAIGoogleCloudContactcenterinsightsV1alpha1CallAnnotation::setPhraseMatchData(const OAIGoogleCloudContactcenterinsightsV1alpha1PhraseMatchData &phrase_match_data) {
    m_phrase_match_data = phrase_match_data;
    m_phrase_match_data_isSet = true;
}

bool OAIGoogleCloudContactcenterinsightsV1alpha1CallAnnotation::is_phrase_match_data_Set() const{
    return m_phrase_match_data_isSet;
}

bool OAIGoogleCloudContactcenterinsightsV1alpha1CallAnnotation::is_phrase_match_data_Valid() const{
    return m_phrase_match_data_isValid;
}

OAIGoogleCloudContactcenterinsightsV1alpha1SentimentData OAIGoogleCloudContactcenterinsightsV1alpha1CallAnnotation::getSentimentData() const {
    return m_sentiment_data;
}
void OAIGoogleCloudContactcenterinsightsV1alpha1CallAnnotation::setSentimentData(const OAIGoogleCloudContactcenterinsightsV1alpha1SentimentData &sentiment_data) {
    m_sentiment_data = sentiment_data;
    m_sentiment_data_isSet = true;
}

bool OAIGoogleCloudContactcenterinsightsV1alpha1CallAnnotation::is_sentiment_data_Set() const{
    return m_sentiment_data_isSet;
}

bool OAIGoogleCloudContactcenterinsightsV1alpha1CallAnnotation::is_sentiment_data_Valid() const{
    return m_sentiment_data_isValid;
}

OAIObject OAIGoogleCloudContactcenterinsightsV1alpha1CallAnnotation::getSilenceData() const {
    return m_silence_data;
}
void OAIGoogleCloudContactcenterinsightsV1alpha1CallAnnotation::setSilenceData(const OAIObject &silence_data) {
    m_silence_data = silence_data;
    m_silence_data_isSet = true;
}

bool OAIGoogleCloudContactcenterinsightsV1alpha1CallAnnotation::is_silence_data_Set() const{
    return m_silence_data_isSet;
}

bool OAIGoogleCloudContactcenterinsightsV1alpha1CallAnnotation::is_silence_data_Valid() const{
    return m_silence_data_isValid;
}

bool OAIGoogleCloudContactcenterinsightsV1alpha1CallAnnotation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_annotation_end_boundary.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_annotation_start_boundary.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_channel_tag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_mention_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_hold_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_intent_match_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_interruption_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_issue_match_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_phrase_match_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sentiment_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_silence_data_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudContactcenterinsightsV1alpha1CallAnnotation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
