/**
 * Contact Center AI Insights API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudContactcenterinsightsV1PhraseMatchRule.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudContactcenterinsightsV1PhraseMatchRule::OAIGoogleCloudContactcenterinsightsV1PhraseMatchRule(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudContactcenterinsightsV1PhraseMatchRule::OAIGoogleCloudContactcenterinsightsV1PhraseMatchRule() {
    this->initializeModel();
}

OAIGoogleCloudContactcenterinsightsV1PhraseMatchRule::~OAIGoogleCloudContactcenterinsightsV1PhraseMatchRule() {}

void OAIGoogleCloudContactcenterinsightsV1PhraseMatchRule::initializeModel() {

    m_config_isSet = false;
    m_config_isValid = false;

    m_negated_isSet = false;
    m_negated_isValid = false;

    m_query_isSet = false;
    m_query_isValid = false;
}

void OAIGoogleCloudContactcenterinsightsV1PhraseMatchRule::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudContactcenterinsightsV1PhraseMatchRule::fromJsonObject(QJsonObject json) {

    m_config_isValid = ::OpenAPI::fromJsonValue(m_config, json[QString("config")]);
    m_config_isSet = !json[QString("config")].isNull() && m_config_isValid;

    m_negated_isValid = ::OpenAPI::fromJsonValue(m_negated, json[QString("negated")]);
    m_negated_isSet = !json[QString("negated")].isNull() && m_negated_isValid;

    m_query_isValid = ::OpenAPI::fromJsonValue(m_query, json[QString("query")]);
    m_query_isSet = !json[QString("query")].isNull() && m_query_isValid;
}

QString OAIGoogleCloudContactcenterinsightsV1PhraseMatchRule::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudContactcenterinsightsV1PhraseMatchRule::asJsonObject() const {
    QJsonObject obj;
    if (m_config.isSet()) {
        obj.insert(QString("config"), ::OpenAPI::toJsonValue(m_config));
    }
    if (m_negated_isSet) {
        obj.insert(QString("negated"), ::OpenAPI::toJsonValue(m_negated));
    }
    if (m_query_isSet) {
        obj.insert(QString("query"), ::OpenAPI::toJsonValue(m_query));
    }
    return obj;
}

OAIGoogleCloudContactcenterinsightsV1PhraseMatchRuleConfig OAIGoogleCloudContactcenterinsightsV1PhraseMatchRule::getConfig() const {
    return m_config;
}
void OAIGoogleCloudContactcenterinsightsV1PhraseMatchRule::setConfig(const OAIGoogleCloudContactcenterinsightsV1PhraseMatchRuleConfig &config) {
    m_config = config;
    m_config_isSet = true;
}

bool OAIGoogleCloudContactcenterinsightsV1PhraseMatchRule::is_config_Set() const{
    return m_config_isSet;
}

bool OAIGoogleCloudContactcenterinsightsV1PhraseMatchRule::is_config_Valid() const{
    return m_config_isValid;
}

bool OAIGoogleCloudContactcenterinsightsV1PhraseMatchRule::isNegated() const {
    return m_negated;
}
void OAIGoogleCloudContactcenterinsightsV1PhraseMatchRule::setNegated(const bool &negated) {
    m_negated = negated;
    m_negated_isSet = true;
}

bool OAIGoogleCloudContactcenterinsightsV1PhraseMatchRule::is_negated_Set() const{
    return m_negated_isSet;
}

bool OAIGoogleCloudContactcenterinsightsV1PhraseMatchRule::is_negated_Valid() const{
    return m_negated_isValid;
}

QString OAIGoogleCloudContactcenterinsightsV1PhraseMatchRule::getQuery() const {
    return m_query;
}
void OAIGoogleCloudContactcenterinsightsV1PhraseMatchRule::setQuery(const QString &query) {
    m_query = query;
    m_query_isSet = true;
}

bool OAIGoogleCloudContactcenterinsightsV1PhraseMatchRule::is_query_Set() const{
    return m_query_isSet;
}

bool OAIGoogleCloudContactcenterinsightsV1PhraseMatchRule::is_query_Valid() const{
    return m_query_isValid;
}

bool OAIGoogleCloudContactcenterinsightsV1PhraseMatchRule::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_negated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudContactcenterinsightsV1PhraseMatchRule::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
