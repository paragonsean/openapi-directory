/**
 * Contact Center AI Insights API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudContactcenterinsightsV1IngestConversationsRequestGcsSource.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudContactcenterinsightsV1IngestConversationsRequestGcsSource::OAIGoogleCloudContactcenterinsightsV1IngestConversationsRequestGcsSource(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudContactcenterinsightsV1IngestConversationsRequestGcsSource::OAIGoogleCloudContactcenterinsightsV1IngestConversationsRequestGcsSource() {
    this->initializeModel();
}

OAIGoogleCloudContactcenterinsightsV1IngestConversationsRequestGcsSource::~OAIGoogleCloudContactcenterinsightsV1IngestConversationsRequestGcsSource() {}

void OAIGoogleCloudContactcenterinsightsV1IngestConversationsRequestGcsSource::initializeModel() {

    m_bucket_object_type_isSet = false;
    m_bucket_object_type_isValid = false;

    m_bucket_uri_isSet = false;
    m_bucket_uri_isValid = false;

    m_custom_metadata_keys_isSet = false;
    m_custom_metadata_keys_isValid = false;

    m_metadata_bucket_uri_isSet = false;
    m_metadata_bucket_uri_isValid = false;
}

void OAIGoogleCloudContactcenterinsightsV1IngestConversationsRequestGcsSource::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudContactcenterinsightsV1IngestConversationsRequestGcsSource::fromJsonObject(QJsonObject json) {

    m_bucket_object_type_isValid = ::OpenAPI::fromJsonValue(m_bucket_object_type, json[QString("bucketObjectType")]);
    m_bucket_object_type_isSet = !json[QString("bucketObjectType")].isNull() && m_bucket_object_type_isValid;

    m_bucket_uri_isValid = ::OpenAPI::fromJsonValue(m_bucket_uri, json[QString("bucketUri")]);
    m_bucket_uri_isSet = !json[QString("bucketUri")].isNull() && m_bucket_uri_isValid;

    m_custom_metadata_keys_isValid = ::OpenAPI::fromJsonValue(m_custom_metadata_keys, json[QString("customMetadataKeys")]);
    m_custom_metadata_keys_isSet = !json[QString("customMetadataKeys")].isNull() && m_custom_metadata_keys_isValid;

    m_metadata_bucket_uri_isValid = ::OpenAPI::fromJsonValue(m_metadata_bucket_uri, json[QString("metadataBucketUri")]);
    m_metadata_bucket_uri_isSet = !json[QString("metadataBucketUri")].isNull() && m_metadata_bucket_uri_isValid;
}

QString OAIGoogleCloudContactcenterinsightsV1IngestConversationsRequestGcsSource::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudContactcenterinsightsV1IngestConversationsRequestGcsSource::asJsonObject() const {
    QJsonObject obj;
    if (m_bucket_object_type_isSet) {
        obj.insert(QString("bucketObjectType"), ::OpenAPI::toJsonValue(m_bucket_object_type));
    }
    if (m_bucket_uri_isSet) {
        obj.insert(QString("bucketUri"), ::OpenAPI::toJsonValue(m_bucket_uri));
    }
    if (m_custom_metadata_keys.size() > 0) {
        obj.insert(QString("customMetadataKeys"), ::OpenAPI::toJsonValue(m_custom_metadata_keys));
    }
    if (m_metadata_bucket_uri_isSet) {
        obj.insert(QString("metadataBucketUri"), ::OpenAPI::toJsonValue(m_metadata_bucket_uri));
    }
    return obj;
}

QString OAIGoogleCloudContactcenterinsightsV1IngestConversationsRequestGcsSource::getBucketObjectType() const {
    return m_bucket_object_type;
}
void OAIGoogleCloudContactcenterinsightsV1IngestConversationsRequestGcsSource::setBucketObjectType(const QString &bucket_object_type) {
    m_bucket_object_type = bucket_object_type;
    m_bucket_object_type_isSet = true;
}

bool OAIGoogleCloudContactcenterinsightsV1IngestConversationsRequestGcsSource::is_bucket_object_type_Set() const{
    return m_bucket_object_type_isSet;
}

bool OAIGoogleCloudContactcenterinsightsV1IngestConversationsRequestGcsSource::is_bucket_object_type_Valid() const{
    return m_bucket_object_type_isValid;
}

QString OAIGoogleCloudContactcenterinsightsV1IngestConversationsRequestGcsSource::getBucketUri() const {
    return m_bucket_uri;
}
void OAIGoogleCloudContactcenterinsightsV1IngestConversationsRequestGcsSource::setBucketUri(const QString &bucket_uri) {
    m_bucket_uri = bucket_uri;
    m_bucket_uri_isSet = true;
}

bool OAIGoogleCloudContactcenterinsightsV1IngestConversationsRequestGcsSource::is_bucket_uri_Set() const{
    return m_bucket_uri_isSet;
}

bool OAIGoogleCloudContactcenterinsightsV1IngestConversationsRequestGcsSource::is_bucket_uri_Valid() const{
    return m_bucket_uri_isValid;
}

QList<QString> OAIGoogleCloudContactcenterinsightsV1IngestConversationsRequestGcsSource::getCustomMetadataKeys() const {
    return m_custom_metadata_keys;
}
void OAIGoogleCloudContactcenterinsightsV1IngestConversationsRequestGcsSource::setCustomMetadataKeys(const QList<QString> &custom_metadata_keys) {
    m_custom_metadata_keys = custom_metadata_keys;
    m_custom_metadata_keys_isSet = true;
}

bool OAIGoogleCloudContactcenterinsightsV1IngestConversationsRequestGcsSource::is_custom_metadata_keys_Set() const{
    return m_custom_metadata_keys_isSet;
}

bool OAIGoogleCloudContactcenterinsightsV1IngestConversationsRequestGcsSource::is_custom_metadata_keys_Valid() const{
    return m_custom_metadata_keys_isValid;
}

QString OAIGoogleCloudContactcenterinsightsV1IngestConversationsRequestGcsSource::getMetadataBucketUri() const {
    return m_metadata_bucket_uri;
}
void OAIGoogleCloudContactcenterinsightsV1IngestConversationsRequestGcsSource::setMetadataBucketUri(const QString &metadata_bucket_uri) {
    m_metadata_bucket_uri = metadata_bucket_uri;
    m_metadata_bucket_uri_isSet = true;
}

bool OAIGoogleCloudContactcenterinsightsV1IngestConversationsRequestGcsSource::is_metadata_bucket_uri_Set() const{
    return m_metadata_bucket_uri_isSet;
}

bool OAIGoogleCloudContactcenterinsightsV1IngestConversationsRequestGcsSource::is_metadata_bucket_uri_Valid() const{
    return m_metadata_bucket_uri_isValid;
}

bool OAIGoogleCloudContactcenterinsightsV1IngestConversationsRequestGcsSource::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bucket_object_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bucket_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_metadata_keys.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata_bucket_uri_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudContactcenterinsightsV1IngestConversationsRequestGcsSource::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
