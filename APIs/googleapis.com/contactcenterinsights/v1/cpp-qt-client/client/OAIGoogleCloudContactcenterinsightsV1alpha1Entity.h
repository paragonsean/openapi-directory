/**
 * Contact Center AI Insights API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGoogleCloudContactcenterinsightsV1alpha1Entity.h
 *
 * The data for an entity annotation. Represents a phrase in the conversation that is a known entity, such as a person, an organization, or location.
 */

#ifndef OAIGoogleCloudContactcenterinsightsV1alpha1Entity_H
#define OAIGoogleCloudContactcenterinsightsV1alpha1Entity_H

#include <QJsonObject>

#include "OAIGoogleCloudContactcenterinsightsV1alpha1SentimentData.h"
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIGoogleCloudContactcenterinsightsV1alpha1SentimentData;

class OAIGoogleCloudContactcenterinsightsV1alpha1Entity : public OAIObject {
public:
    OAIGoogleCloudContactcenterinsightsV1alpha1Entity();
    OAIGoogleCloudContactcenterinsightsV1alpha1Entity(QString json);
    ~OAIGoogleCloudContactcenterinsightsV1alpha1Entity() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getDisplayName() const;
    void setDisplayName(const QString &display_name);
    bool is_display_name_Set() const;
    bool is_display_name_Valid() const;

    QMap<QString, QString> getMetadata() const;
    void setMetadata(const QMap<QString, QString> &metadata);
    bool is_metadata_Set() const;
    bool is_metadata_Valid() const;

    float getSalience() const;
    void setSalience(const float &salience);
    bool is_salience_Set() const;
    bool is_salience_Valid() const;

    OAIGoogleCloudContactcenterinsightsV1alpha1SentimentData getSentiment() const;
    void setSentiment(const OAIGoogleCloudContactcenterinsightsV1alpha1SentimentData &sentiment);
    bool is_sentiment_Set() const;
    bool is_sentiment_Valid() const;

    QString getType() const;
    void setType(const QString &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_display_name;
    bool m_display_name_isSet;
    bool m_display_name_isValid;

    QMap<QString, QString> m_metadata;
    bool m_metadata_isSet;
    bool m_metadata_isValid;

    float m_salience;
    bool m_salience_isSet;
    bool m_salience_isValid;

    OAIGoogleCloudContactcenterinsightsV1alpha1SentimentData m_sentiment;
    bool m_sentiment_isSet;
    bool m_sentiment_isValid;

    QString m_type;
    bool m_type_isSet;
    bool m_type_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGoogleCloudContactcenterinsightsV1alpha1Entity)

#endif // OAIGoogleCloudContactcenterinsightsV1alpha1Entity_H
