/**
 * Contact Center AI Insights API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GoogleCloudContactcenterinsightsV1AnnotationBoundary from './GoogleCloudContactcenterinsightsV1AnnotationBoundary';
import GoogleCloudContactcenterinsightsV1EntityMentionData from './GoogleCloudContactcenterinsightsV1EntityMentionData';
import GoogleCloudContactcenterinsightsV1IntentMatchData from './GoogleCloudContactcenterinsightsV1IntentMatchData';
import GoogleCloudContactcenterinsightsV1IssueMatchData from './GoogleCloudContactcenterinsightsV1IssueMatchData';
import GoogleCloudContactcenterinsightsV1PhraseMatchData from './GoogleCloudContactcenterinsightsV1PhraseMatchData';
import GoogleCloudContactcenterinsightsV1SentimentData from './GoogleCloudContactcenterinsightsV1SentimentData';

/**
 * The GoogleCloudContactcenterinsightsV1CallAnnotation model module.
 * @module model/GoogleCloudContactcenterinsightsV1CallAnnotation
 * @version v1
 */
class GoogleCloudContactcenterinsightsV1CallAnnotation {
    /**
     * Constructs a new <code>GoogleCloudContactcenterinsightsV1CallAnnotation</code>.
     * A piece of metadata that applies to a window of a call.
     * @alias module:model/GoogleCloudContactcenterinsightsV1CallAnnotation
     */
    constructor() { 
        
        GoogleCloudContactcenterinsightsV1CallAnnotation.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleCloudContactcenterinsightsV1CallAnnotation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleCloudContactcenterinsightsV1CallAnnotation} obj Optional instance to populate.
     * @return {module:model/GoogleCloudContactcenterinsightsV1CallAnnotation} The populated <code>GoogleCloudContactcenterinsightsV1CallAnnotation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleCloudContactcenterinsightsV1CallAnnotation();

            if (data.hasOwnProperty('annotationEndBoundary')) {
                obj['annotationEndBoundary'] = GoogleCloudContactcenterinsightsV1AnnotationBoundary.constructFromObject(data['annotationEndBoundary']);
            }
            if (data.hasOwnProperty('annotationStartBoundary')) {
                obj['annotationStartBoundary'] = GoogleCloudContactcenterinsightsV1AnnotationBoundary.constructFromObject(data['annotationStartBoundary']);
            }
            if (data.hasOwnProperty('channelTag')) {
                obj['channelTag'] = ApiClient.convertToType(data['channelTag'], 'Number');
            }
            if (data.hasOwnProperty('entityMentionData')) {
                obj['entityMentionData'] = GoogleCloudContactcenterinsightsV1EntityMentionData.constructFromObject(data['entityMentionData']);
            }
            if (data.hasOwnProperty('holdData')) {
                obj['holdData'] = ApiClient.convertToType(data['holdData'], Object);
            }
            if (data.hasOwnProperty('intentMatchData')) {
                obj['intentMatchData'] = GoogleCloudContactcenterinsightsV1IntentMatchData.constructFromObject(data['intentMatchData']);
            }
            if (data.hasOwnProperty('interruptionData')) {
                obj['interruptionData'] = ApiClient.convertToType(data['interruptionData'], Object);
            }
            if (data.hasOwnProperty('issueMatchData')) {
                obj['issueMatchData'] = GoogleCloudContactcenterinsightsV1IssueMatchData.constructFromObject(data['issueMatchData']);
            }
            if (data.hasOwnProperty('phraseMatchData')) {
                obj['phraseMatchData'] = GoogleCloudContactcenterinsightsV1PhraseMatchData.constructFromObject(data['phraseMatchData']);
            }
            if (data.hasOwnProperty('sentimentData')) {
                obj['sentimentData'] = GoogleCloudContactcenterinsightsV1SentimentData.constructFromObject(data['sentimentData']);
            }
            if (data.hasOwnProperty('silenceData')) {
                obj['silenceData'] = ApiClient.convertToType(data['silenceData'], Object);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleCloudContactcenterinsightsV1CallAnnotation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleCloudContactcenterinsightsV1CallAnnotation</code>.
     */
    static validateJSON(data) {
        // validate the optional field `annotationEndBoundary`
        if (data['annotationEndBoundary']) { // data not null
          GoogleCloudContactcenterinsightsV1AnnotationBoundary.validateJSON(data['annotationEndBoundary']);
        }
        // validate the optional field `annotationStartBoundary`
        if (data['annotationStartBoundary']) { // data not null
          GoogleCloudContactcenterinsightsV1AnnotationBoundary.validateJSON(data['annotationStartBoundary']);
        }
        // validate the optional field `entityMentionData`
        if (data['entityMentionData']) { // data not null
          GoogleCloudContactcenterinsightsV1EntityMentionData.validateJSON(data['entityMentionData']);
        }
        // validate the optional field `intentMatchData`
        if (data['intentMatchData']) { // data not null
          GoogleCloudContactcenterinsightsV1IntentMatchData.validateJSON(data['intentMatchData']);
        }
        // validate the optional field `issueMatchData`
        if (data['issueMatchData']) { // data not null
          GoogleCloudContactcenterinsightsV1IssueMatchData.validateJSON(data['issueMatchData']);
        }
        // validate the optional field `phraseMatchData`
        if (data['phraseMatchData']) { // data not null
          GoogleCloudContactcenterinsightsV1PhraseMatchData.validateJSON(data['phraseMatchData']);
        }
        // validate the optional field `sentimentData`
        if (data['sentimentData']) { // data not null
          GoogleCloudContactcenterinsightsV1SentimentData.validateJSON(data['sentimentData']);
        }

        return true;
    }


}



/**
 * @member {module:model/GoogleCloudContactcenterinsightsV1AnnotationBoundary} annotationEndBoundary
 */
GoogleCloudContactcenterinsightsV1CallAnnotation.prototype['annotationEndBoundary'] = undefined;

/**
 * @member {module:model/GoogleCloudContactcenterinsightsV1AnnotationBoundary} annotationStartBoundary
 */
GoogleCloudContactcenterinsightsV1CallAnnotation.prototype['annotationStartBoundary'] = undefined;

/**
 * The channel of the audio where the annotation occurs. For single-channel audio, this field is not populated.
 * @member {Number} channelTag
 */
GoogleCloudContactcenterinsightsV1CallAnnotation.prototype['channelTag'] = undefined;

/**
 * @member {module:model/GoogleCloudContactcenterinsightsV1EntityMentionData} entityMentionData
 */
GoogleCloudContactcenterinsightsV1CallAnnotation.prototype['entityMentionData'] = undefined;

/**
 * The data for a hold annotation.
 * @member {Object} holdData
 */
GoogleCloudContactcenterinsightsV1CallAnnotation.prototype['holdData'] = undefined;

/**
 * @member {module:model/GoogleCloudContactcenterinsightsV1IntentMatchData} intentMatchData
 */
GoogleCloudContactcenterinsightsV1CallAnnotation.prototype['intentMatchData'] = undefined;

/**
 * The data for an interruption annotation.
 * @member {Object} interruptionData
 */
GoogleCloudContactcenterinsightsV1CallAnnotation.prototype['interruptionData'] = undefined;

/**
 * @member {module:model/GoogleCloudContactcenterinsightsV1IssueMatchData} issueMatchData
 */
GoogleCloudContactcenterinsightsV1CallAnnotation.prototype['issueMatchData'] = undefined;

/**
 * @member {module:model/GoogleCloudContactcenterinsightsV1PhraseMatchData} phraseMatchData
 */
GoogleCloudContactcenterinsightsV1CallAnnotation.prototype['phraseMatchData'] = undefined;

/**
 * @member {module:model/GoogleCloudContactcenterinsightsV1SentimentData} sentimentData
 */
GoogleCloudContactcenterinsightsV1CallAnnotation.prototype['sentimentData'] = undefined;

/**
 * The data for a silence annotation.
 * @member {Object} silenceData
 */
GoogleCloudContactcenterinsightsV1CallAnnotation.prototype['silenceData'] = undefined;






export default GoogleCloudContactcenterinsightsV1CallAnnotation;

