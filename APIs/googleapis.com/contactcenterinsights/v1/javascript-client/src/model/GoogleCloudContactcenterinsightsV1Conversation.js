/**
 * Contact Center AI Insights API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GoogleCloudContactcenterinsightsV1Analysis from './GoogleCloudContactcenterinsightsV1Analysis';
import GoogleCloudContactcenterinsightsV1ConversationCallMetadata from './GoogleCloudContactcenterinsightsV1ConversationCallMetadata';
import GoogleCloudContactcenterinsightsV1ConversationDataSource from './GoogleCloudContactcenterinsightsV1ConversationDataSource';
import GoogleCloudContactcenterinsightsV1ConversationQualityMetadata from './GoogleCloudContactcenterinsightsV1ConversationQualityMetadata';
import GoogleCloudContactcenterinsightsV1ConversationSummarizationSuggestionData from './GoogleCloudContactcenterinsightsV1ConversationSummarizationSuggestionData';
import GoogleCloudContactcenterinsightsV1ConversationTranscript from './GoogleCloudContactcenterinsightsV1ConversationTranscript';
import GoogleCloudContactcenterinsightsV1DialogflowIntent from './GoogleCloudContactcenterinsightsV1DialogflowIntent';
import GoogleCloudContactcenterinsightsV1RuntimeAnnotation from './GoogleCloudContactcenterinsightsV1RuntimeAnnotation';

/**
 * The GoogleCloudContactcenterinsightsV1Conversation model module.
 * @module model/GoogleCloudContactcenterinsightsV1Conversation
 * @version v1
 */
class GoogleCloudContactcenterinsightsV1Conversation {
    /**
     * Constructs a new <code>GoogleCloudContactcenterinsightsV1Conversation</code>.
     * The conversation resource.
     * @alias module:model/GoogleCloudContactcenterinsightsV1Conversation
     */
    constructor() { 
        
        GoogleCloudContactcenterinsightsV1Conversation.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleCloudContactcenterinsightsV1Conversation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleCloudContactcenterinsightsV1Conversation} obj Optional instance to populate.
     * @return {module:model/GoogleCloudContactcenterinsightsV1Conversation} The populated <code>GoogleCloudContactcenterinsightsV1Conversation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleCloudContactcenterinsightsV1Conversation();

            if (data.hasOwnProperty('agentId')) {
                obj['agentId'] = ApiClient.convertToType(data['agentId'], 'String');
            }
            if (data.hasOwnProperty('callMetadata')) {
                obj['callMetadata'] = GoogleCloudContactcenterinsightsV1ConversationCallMetadata.constructFromObject(data['callMetadata']);
            }
            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'String');
            }
            if (data.hasOwnProperty('dataSource')) {
                obj['dataSource'] = GoogleCloudContactcenterinsightsV1ConversationDataSource.constructFromObject(data['dataSource']);
            }
            if (data.hasOwnProperty('dialogflowIntents')) {
                obj['dialogflowIntents'] = ApiClient.convertToType(data['dialogflowIntents'], {'String': GoogleCloudContactcenterinsightsV1DialogflowIntent});
            }
            if (data.hasOwnProperty('duration')) {
                obj['duration'] = ApiClient.convertToType(data['duration'], 'String');
            }
            if (data.hasOwnProperty('expireTime')) {
                obj['expireTime'] = ApiClient.convertToType(data['expireTime'], 'String');
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], {'String': 'String'});
            }
            if (data.hasOwnProperty('languageCode')) {
                obj['languageCode'] = ApiClient.convertToType(data['languageCode'], 'String');
            }
            if (data.hasOwnProperty('latestAnalysis')) {
                obj['latestAnalysis'] = GoogleCloudContactcenterinsightsV1Analysis.constructFromObject(data['latestAnalysis']);
            }
            if (data.hasOwnProperty('latestSummary')) {
                obj['latestSummary'] = GoogleCloudContactcenterinsightsV1ConversationSummarizationSuggestionData.constructFromObject(data['latestSummary']);
            }
            if (data.hasOwnProperty('medium')) {
                obj['medium'] = ApiClient.convertToType(data['medium'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('obfuscatedUserId')) {
                obj['obfuscatedUserId'] = ApiClient.convertToType(data['obfuscatedUserId'], 'String');
            }
            if (data.hasOwnProperty('qualityMetadata')) {
                obj['qualityMetadata'] = GoogleCloudContactcenterinsightsV1ConversationQualityMetadata.constructFromObject(data['qualityMetadata']);
            }
            if (data.hasOwnProperty('runtimeAnnotations')) {
                obj['runtimeAnnotations'] = ApiClient.convertToType(data['runtimeAnnotations'], [GoogleCloudContactcenterinsightsV1RuntimeAnnotation]);
            }
            if (data.hasOwnProperty('startTime')) {
                obj['startTime'] = ApiClient.convertToType(data['startTime'], 'String');
            }
            if (data.hasOwnProperty('transcript')) {
                obj['transcript'] = GoogleCloudContactcenterinsightsV1ConversationTranscript.constructFromObject(data['transcript']);
            }
            if (data.hasOwnProperty('ttl')) {
                obj['ttl'] = ApiClient.convertToType(data['ttl'], 'String');
            }
            if (data.hasOwnProperty('turnCount')) {
                obj['turnCount'] = ApiClient.convertToType(data['turnCount'], 'Number');
            }
            if (data.hasOwnProperty('updateTime')) {
                obj['updateTime'] = ApiClient.convertToType(data['updateTime'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleCloudContactcenterinsightsV1Conversation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleCloudContactcenterinsightsV1Conversation</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['agentId'] && !(typeof data['agentId'] === 'string' || data['agentId'] instanceof String)) {
            throw new Error("Expected the field `agentId` to be a primitive type in the JSON string but got " + data['agentId']);
        }
        // validate the optional field `callMetadata`
        if (data['callMetadata']) { // data not null
          GoogleCloudContactcenterinsightsV1ConversationCallMetadata.validateJSON(data['callMetadata']);
        }
        // ensure the json data is a string
        if (data['createTime'] && !(typeof data['createTime'] === 'string' || data['createTime'] instanceof String)) {
            throw new Error("Expected the field `createTime` to be a primitive type in the JSON string but got " + data['createTime']);
        }
        // validate the optional field `dataSource`
        if (data['dataSource']) { // data not null
          GoogleCloudContactcenterinsightsV1ConversationDataSource.validateJSON(data['dataSource']);
        }
        // ensure the json data is a string
        if (data['duration'] && !(typeof data['duration'] === 'string' || data['duration'] instanceof String)) {
            throw new Error("Expected the field `duration` to be a primitive type in the JSON string but got " + data['duration']);
        }
        // ensure the json data is a string
        if (data['expireTime'] && !(typeof data['expireTime'] === 'string' || data['expireTime'] instanceof String)) {
            throw new Error("Expected the field `expireTime` to be a primitive type in the JSON string but got " + data['expireTime']);
        }
        // ensure the json data is a string
        if (data['languageCode'] && !(typeof data['languageCode'] === 'string' || data['languageCode'] instanceof String)) {
            throw new Error("Expected the field `languageCode` to be a primitive type in the JSON string but got " + data['languageCode']);
        }
        // validate the optional field `latestAnalysis`
        if (data['latestAnalysis']) { // data not null
          GoogleCloudContactcenterinsightsV1Analysis.validateJSON(data['latestAnalysis']);
        }
        // validate the optional field `latestSummary`
        if (data['latestSummary']) { // data not null
          GoogleCloudContactcenterinsightsV1ConversationSummarizationSuggestionData.validateJSON(data['latestSummary']);
        }
        // ensure the json data is a string
        if (data['medium'] && !(typeof data['medium'] === 'string' || data['medium'] instanceof String)) {
            throw new Error("Expected the field `medium` to be a primitive type in the JSON string but got " + data['medium']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['obfuscatedUserId'] && !(typeof data['obfuscatedUserId'] === 'string' || data['obfuscatedUserId'] instanceof String)) {
            throw new Error("Expected the field `obfuscatedUserId` to be a primitive type in the JSON string but got " + data['obfuscatedUserId']);
        }
        // validate the optional field `qualityMetadata`
        if (data['qualityMetadata']) { // data not null
          GoogleCloudContactcenterinsightsV1ConversationQualityMetadata.validateJSON(data['qualityMetadata']);
        }
        if (data['runtimeAnnotations']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['runtimeAnnotations'])) {
                throw new Error("Expected the field `runtimeAnnotations` to be an array in the JSON data but got " + data['runtimeAnnotations']);
            }
            // validate the optional field `runtimeAnnotations` (array)
            for (const item of data['runtimeAnnotations']) {
                GoogleCloudContactcenterinsightsV1RuntimeAnnotation.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['startTime'] && !(typeof data['startTime'] === 'string' || data['startTime'] instanceof String)) {
            throw new Error("Expected the field `startTime` to be a primitive type in the JSON string but got " + data['startTime']);
        }
        // validate the optional field `transcript`
        if (data['transcript']) { // data not null
          GoogleCloudContactcenterinsightsV1ConversationTranscript.validateJSON(data['transcript']);
        }
        // ensure the json data is a string
        if (data['ttl'] && !(typeof data['ttl'] === 'string' || data['ttl'] instanceof String)) {
            throw new Error("Expected the field `ttl` to be a primitive type in the JSON string but got " + data['ttl']);
        }
        // ensure the json data is a string
        if (data['updateTime'] && !(typeof data['updateTime'] === 'string' || data['updateTime'] instanceof String)) {
            throw new Error("Expected the field `updateTime` to be a primitive type in the JSON string but got " + data['updateTime']);
        }

        return true;
    }


}



/**
 * An opaque, user-specified string representing the human agent who handled the conversation.
 * @member {String} agentId
 */
GoogleCloudContactcenterinsightsV1Conversation.prototype['agentId'] = undefined;

/**
 * @member {module:model/GoogleCloudContactcenterinsightsV1ConversationCallMetadata} callMetadata
 */
GoogleCloudContactcenterinsightsV1Conversation.prototype['callMetadata'] = undefined;

/**
 * Output only. The time at which the conversation was created.
 * @member {String} createTime
 */
GoogleCloudContactcenterinsightsV1Conversation.prototype['createTime'] = undefined;

/**
 * @member {module:model/GoogleCloudContactcenterinsightsV1ConversationDataSource} dataSource
 */
GoogleCloudContactcenterinsightsV1Conversation.prototype['dataSource'] = undefined;

/**
 * Output only. All the matched Dialogflow intents in the call. The key corresponds to a Dialogflow intent, format: projects/{project}/agent/{agent}/intents/{intent}
 * @member {Object.<String, module:model/GoogleCloudContactcenterinsightsV1DialogflowIntent>} dialogflowIntents
 */
GoogleCloudContactcenterinsightsV1Conversation.prototype['dialogflowIntents'] = undefined;

/**
 * Output only. The duration of the conversation.
 * @member {String} duration
 */
GoogleCloudContactcenterinsightsV1Conversation.prototype['duration'] = undefined;

/**
 * The time at which this conversation should expire. After this time, the conversation data and any associated analyses will be deleted.
 * @member {String} expireTime
 */
GoogleCloudContactcenterinsightsV1Conversation.prototype['expireTime'] = undefined;

/**
 * A map for the user to specify any custom fields. A maximum of 20 labels per conversation is allowed, with a maximum of 256 characters per entry.
 * @member {Object.<String, String>} labels
 */
GoogleCloudContactcenterinsightsV1Conversation.prototype['labels'] = undefined;

/**
 * A user-specified language code for the conversation.
 * @member {String} languageCode
 */
GoogleCloudContactcenterinsightsV1Conversation.prototype['languageCode'] = undefined;

/**
 * @member {module:model/GoogleCloudContactcenterinsightsV1Analysis} latestAnalysis
 */
GoogleCloudContactcenterinsightsV1Conversation.prototype['latestAnalysis'] = undefined;

/**
 * @member {module:model/GoogleCloudContactcenterinsightsV1ConversationSummarizationSuggestionData} latestSummary
 */
GoogleCloudContactcenterinsightsV1Conversation.prototype['latestSummary'] = undefined;

/**
 * Immutable. The conversation medium, if unspecified will default to PHONE_CALL.
 * @member {module:model/GoogleCloudContactcenterinsightsV1Conversation.MediumEnum} medium
 */
GoogleCloudContactcenterinsightsV1Conversation.prototype['medium'] = undefined;

/**
 * Immutable. The resource name of the conversation. Format: projects/{project}/locations/{location}/conversations/{conversation}
 * @member {String} name
 */
GoogleCloudContactcenterinsightsV1Conversation.prototype['name'] = undefined;

/**
 * Obfuscated user ID which the customer sent to us.
 * @member {String} obfuscatedUserId
 */
GoogleCloudContactcenterinsightsV1Conversation.prototype['obfuscatedUserId'] = undefined;

/**
 * @member {module:model/GoogleCloudContactcenterinsightsV1ConversationQualityMetadata} qualityMetadata
 */
GoogleCloudContactcenterinsightsV1Conversation.prototype['qualityMetadata'] = undefined;

/**
 * Output only. The annotations that were generated during the customer and agent interaction.
 * @member {Array.<module:model/GoogleCloudContactcenterinsightsV1RuntimeAnnotation>} runtimeAnnotations
 */
GoogleCloudContactcenterinsightsV1Conversation.prototype['runtimeAnnotations'] = undefined;

/**
 * The time at which the conversation started.
 * @member {String} startTime
 */
GoogleCloudContactcenterinsightsV1Conversation.prototype['startTime'] = undefined;

/**
 * @member {module:model/GoogleCloudContactcenterinsightsV1ConversationTranscript} transcript
 */
GoogleCloudContactcenterinsightsV1Conversation.prototype['transcript'] = undefined;

/**
 * Input only. The TTL for this resource. If specified, then this TTL will be used to calculate the expire time.
 * @member {String} ttl
 */
GoogleCloudContactcenterinsightsV1Conversation.prototype['ttl'] = undefined;

/**
 * Output only. The number of turns in the conversation.
 * @member {Number} turnCount
 */
GoogleCloudContactcenterinsightsV1Conversation.prototype['turnCount'] = undefined;

/**
 * Output only. The most recent time at which the conversation was updated.
 * @member {String} updateTime
 */
GoogleCloudContactcenterinsightsV1Conversation.prototype['updateTime'] = undefined;





/**
 * Allowed values for the <code>medium</code> property.
 * @enum {String}
 * @readonly
 */
GoogleCloudContactcenterinsightsV1Conversation['MediumEnum'] = {

    /**
     * value: "MEDIUM_UNSPECIFIED"
     * @const
     */
    "MEDIUM_UNSPECIFIED": "MEDIUM_UNSPECIFIED",

    /**
     * value: "PHONE_CALL"
     * @const
     */
    "PHONE_CALL": "PHONE_CALL",

    /**
     * value: "CHAT"
     * @const
     */
    "CHAT": "CHAT"
};



export default GoogleCloudContactcenterinsightsV1Conversation;

