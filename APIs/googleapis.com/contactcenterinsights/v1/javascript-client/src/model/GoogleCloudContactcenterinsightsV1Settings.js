/**
 * Contact Center AI Insights API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GoogleCloudContactcenterinsightsV1RedactionConfig from './GoogleCloudContactcenterinsightsV1RedactionConfig';
import GoogleCloudContactcenterinsightsV1SettingsAnalysisConfig from './GoogleCloudContactcenterinsightsV1SettingsAnalysisConfig';
import GoogleCloudContactcenterinsightsV1SpeechConfig from './GoogleCloudContactcenterinsightsV1SpeechConfig';

/**
 * The GoogleCloudContactcenterinsightsV1Settings model module.
 * @module model/GoogleCloudContactcenterinsightsV1Settings
 * @version v1
 */
class GoogleCloudContactcenterinsightsV1Settings {
    /**
     * Constructs a new <code>GoogleCloudContactcenterinsightsV1Settings</code>.
     * The settings resource.
     * @alias module:model/GoogleCloudContactcenterinsightsV1Settings
     */
    constructor() { 
        
        GoogleCloudContactcenterinsightsV1Settings.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleCloudContactcenterinsightsV1Settings</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleCloudContactcenterinsightsV1Settings} obj Optional instance to populate.
     * @return {module:model/GoogleCloudContactcenterinsightsV1Settings} The populated <code>GoogleCloudContactcenterinsightsV1Settings</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleCloudContactcenterinsightsV1Settings();

            if (data.hasOwnProperty('analysisConfig')) {
                obj['analysisConfig'] = GoogleCloudContactcenterinsightsV1SettingsAnalysisConfig.constructFromObject(data['analysisConfig']);
            }
            if (data.hasOwnProperty('conversationTtl')) {
                obj['conversationTtl'] = ApiClient.convertToType(data['conversationTtl'], 'String');
            }
            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'String');
            }
            if (data.hasOwnProperty('languageCode')) {
                obj['languageCode'] = ApiClient.convertToType(data['languageCode'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('pubsubNotificationSettings')) {
                obj['pubsubNotificationSettings'] = ApiClient.convertToType(data['pubsubNotificationSettings'], {'String': 'String'});
            }
            if (data.hasOwnProperty('redactionConfig')) {
                obj['redactionConfig'] = GoogleCloudContactcenterinsightsV1RedactionConfig.constructFromObject(data['redactionConfig']);
            }
            if (data.hasOwnProperty('speechConfig')) {
                obj['speechConfig'] = GoogleCloudContactcenterinsightsV1SpeechConfig.constructFromObject(data['speechConfig']);
            }
            if (data.hasOwnProperty('updateTime')) {
                obj['updateTime'] = ApiClient.convertToType(data['updateTime'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleCloudContactcenterinsightsV1Settings</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleCloudContactcenterinsightsV1Settings</code>.
     */
    static validateJSON(data) {
        // validate the optional field `analysisConfig`
        if (data['analysisConfig']) { // data not null
          GoogleCloudContactcenterinsightsV1SettingsAnalysisConfig.validateJSON(data['analysisConfig']);
        }
        // ensure the json data is a string
        if (data['conversationTtl'] && !(typeof data['conversationTtl'] === 'string' || data['conversationTtl'] instanceof String)) {
            throw new Error("Expected the field `conversationTtl` to be a primitive type in the JSON string but got " + data['conversationTtl']);
        }
        // ensure the json data is a string
        if (data['createTime'] && !(typeof data['createTime'] === 'string' || data['createTime'] instanceof String)) {
            throw new Error("Expected the field `createTime` to be a primitive type in the JSON string but got " + data['createTime']);
        }
        // ensure the json data is a string
        if (data['languageCode'] && !(typeof data['languageCode'] === 'string' || data['languageCode'] instanceof String)) {
            throw new Error("Expected the field `languageCode` to be a primitive type in the JSON string but got " + data['languageCode']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `redactionConfig`
        if (data['redactionConfig']) { // data not null
          GoogleCloudContactcenterinsightsV1RedactionConfig.validateJSON(data['redactionConfig']);
        }
        // validate the optional field `speechConfig`
        if (data['speechConfig']) { // data not null
          GoogleCloudContactcenterinsightsV1SpeechConfig.validateJSON(data['speechConfig']);
        }
        // ensure the json data is a string
        if (data['updateTime'] && !(typeof data['updateTime'] === 'string' || data['updateTime'] instanceof String)) {
            throw new Error("Expected the field `updateTime` to be a primitive type in the JSON string but got " + data['updateTime']);
        }

        return true;
    }


}



/**
 * @member {module:model/GoogleCloudContactcenterinsightsV1SettingsAnalysisConfig} analysisConfig
 */
GoogleCloudContactcenterinsightsV1Settings.prototype['analysisConfig'] = undefined;

/**
 * The default TTL for newly-created conversations. If a conversation has a specified expiration, that value will be used instead. Changing this value will not change the expiration of existing conversations. Conversations with no expire time persist until they are deleted.
 * @member {String} conversationTtl
 */
GoogleCloudContactcenterinsightsV1Settings.prototype['conversationTtl'] = undefined;

/**
 * Output only. The time at which the settings was created.
 * @member {String} createTime
 */
GoogleCloudContactcenterinsightsV1Settings.prototype['createTime'] = undefined;

/**
 * A language code to be applied to each transcript segment unless the segment already specifies a language code. Language code defaults to \"en-US\" if it is neither specified on the segment nor here.
 * @member {String} languageCode
 */
GoogleCloudContactcenterinsightsV1Settings.prototype['languageCode'] = undefined;

/**
 * Immutable. The resource name of the settings resource. Format: projects/{project}/locations/{location}/settings
 * @member {String} name
 */
GoogleCloudContactcenterinsightsV1Settings.prototype['name'] = undefined;

/**
 * A map that maps a notification trigger to a Pub/Sub topic. Each time a specified trigger occurs, Insights will notify the corresponding Pub/Sub topic. Keys are notification triggers. Supported keys are: * \"all-triggers\": Notify each time any of the supported triggers occurs. * \"create-analysis\": Notify each time an analysis is created. * \"create-conversation\": Notify each time a conversation is created. * \"export-insights-data\": Notify each time an export is complete. * \"update-conversation\": Notify each time a conversation is updated via UpdateConversation. * \"upload-conversation\": Notify when an UploadConversation LRO completes. Values are Pub/Sub topics. The format of each Pub/Sub topic is: projects/{project}/topics/{topic}
 * @member {Object.<String, String>} pubsubNotificationSettings
 */
GoogleCloudContactcenterinsightsV1Settings.prototype['pubsubNotificationSettings'] = undefined;

/**
 * @member {module:model/GoogleCloudContactcenterinsightsV1RedactionConfig} redactionConfig
 */
GoogleCloudContactcenterinsightsV1Settings.prototype['redactionConfig'] = undefined;

/**
 * @member {module:model/GoogleCloudContactcenterinsightsV1SpeechConfig} speechConfig
 */
GoogleCloudContactcenterinsightsV1Settings.prototype['speechConfig'] = undefined;

/**
 * Output only. The time at which the settings were last updated.
 * @member {String} updateTime
 */
GoogleCloudContactcenterinsightsV1Settings.prototype['updateTime'] = undefined;






export default GoogleCloudContactcenterinsightsV1Settings;

