/**
 * Contact Center AI Insights API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GoogleCloudContactcenterinsightsV1AnnotatorSelectorSummarizationConfig from './GoogleCloudContactcenterinsightsV1AnnotatorSelectorSummarizationConfig';

/**
 * The GoogleCloudContactcenterinsightsV1AnnotatorSelector model module.
 * @module model/GoogleCloudContactcenterinsightsV1AnnotatorSelector
 * @version v1
 */
class GoogleCloudContactcenterinsightsV1AnnotatorSelector {
    /**
     * Constructs a new <code>GoogleCloudContactcenterinsightsV1AnnotatorSelector</code>.
     * Selector of all available annotators and phrase matchers to run.
     * @alias module:model/GoogleCloudContactcenterinsightsV1AnnotatorSelector
     */
    constructor() { 
        
        GoogleCloudContactcenterinsightsV1AnnotatorSelector.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleCloudContactcenterinsightsV1AnnotatorSelector</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleCloudContactcenterinsightsV1AnnotatorSelector} obj Optional instance to populate.
     * @return {module:model/GoogleCloudContactcenterinsightsV1AnnotatorSelector} The populated <code>GoogleCloudContactcenterinsightsV1AnnotatorSelector</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleCloudContactcenterinsightsV1AnnotatorSelector();

            if (data.hasOwnProperty('issueModels')) {
                obj['issueModels'] = ApiClient.convertToType(data['issueModels'], ['String']);
            }
            if (data.hasOwnProperty('phraseMatchers')) {
                obj['phraseMatchers'] = ApiClient.convertToType(data['phraseMatchers'], ['String']);
            }
            if (data.hasOwnProperty('runEntityAnnotator')) {
                obj['runEntityAnnotator'] = ApiClient.convertToType(data['runEntityAnnotator'], 'Boolean');
            }
            if (data.hasOwnProperty('runIntentAnnotator')) {
                obj['runIntentAnnotator'] = ApiClient.convertToType(data['runIntentAnnotator'], 'Boolean');
            }
            if (data.hasOwnProperty('runInterruptionAnnotator')) {
                obj['runInterruptionAnnotator'] = ApiClient.convertToType(data['runInterruptionAnnotator'], 'Boolean');
            }
            if (data.hasOwnProperty('runIssueModelAnnotator')) {
                obj['runIssueModelAnnotator'] = ApiClient.convertToType(data['runIssueModelAnnotator'], 'Boolean');
            }
            if (data.hasOwnProperty('runPhraseMatcherAnnotator')) {
                obj['runPhraseMatcherAnnotator'] = ApiClient.convertToType(data['runPhraseMatcherAnnotator'], 'Boolean');
            }
            if (data.hasOwnProperty('runSentimentAnnotator')) {
                obj['runSentimentAnnotator'] = ApiClient.convertToType(data['runSentimentAnnotator'], 'Boolean');
            }
            if (data.hasOwnProperty('runSilenceAnnotator')) {
                obj['runSilenceAnnotator'] = ApiClient.convertToType(data['runSilenceAnnotator'], 'Boolean');
            }
            if (data.hasOwnProperty('runSummarizationAnnotator')) {
                obj['runSummarizationAnnotator'] = ApiClient.convertToType(data['runSummarizationAnnotator'], 'Boolean');
            }
            if (data.hasOwnProperty('summarizationConfig')) {
                obj['summarizationConfig'] = GoogleCloudContactcenterinsightsV1AnnotatorSelectorSummarizationConfig.constructFromObject(data['summarizationConfig']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleCloudContactcenterinsightsV1AnnotatorSelector</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleCloudContactcenterinsightsV1AnnotatorSelector</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['issueModels'])) {
            throw new Error("Expected the field `issueModels` to be an array in the JSON data but got " + data['issueModels']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['phraseMatchers'])) {
            throw new Error("Expected the field `phraseMatchers` to be an array in the JSON data but got " + data['phraseMatchers']);
        }
        // validate the optional field `summarizationConfig`
        if (data['summarizationConfig']) { // data not null
          GoogleCloudContactcenterinsightsV1AnnotatorSelectorSummarizationConfig.validateJSON(data['summarizationConfig']);
        }

        return true;
    }


}



/**
 * The issue model to run. If not provided, the most recently deployed topic model will be used. The provided issue model will only be used for inference if the issue model is deployed and if run_issue_model_annotator is set to true. If more than one issue model is provided, only the first provided issue model will be used for inference.
 * @member {Array.<String>} issueModels
 */
GoogleCloudContactcenterinsightsV1AnnotatorSelector.prototype['issueModels'] = undefined;

/**
 * The list of phrase matchers to run. If not provided, all active phrase matchers will be used. If inactive phrase matchers are provided, they will not be used. Phrase matchers will be run only if run_phrase_matcher_annotator is set to true. Format: projects/{project}/locations/{location}/phraseMatchers/{phrase_matcher}
 * @member {Array.<String>} phraseMatchers
 */
GoogleCloudContactcenterinsightsV1AnnotatorSelector.prototype['phraseMatchers'] = undefined;

/**
 * Whether to run the entity annotator.
 * @member {Boolean} runEntityAnnotator
 */
GoogleCloudContactcenterinsightsV1AnnotatorSelector.prototype['runEntityAnnotator'] = undefined;

/**
 * Whether to run the intent annotator.
 * @member {Boolean} runIntentAnnotator
 */
GoogleCloudContactcenterinsightsV1AnnotatorSelector.prototype['runIntentAnnotator'] = undefined;

/**
 * Whether to run the interruption annotator.
 * @member {Boolean} runInterruptionAnnotator
 */
GoogleCloudContactcenterinsightsV1AnnotatorSelector.prototype['runInterruptionAnnotator'] = undefined;

/**
 * Whether to run the issue model annotator. A model should have already been deployed for this to take effect.
 * @member {Boolean} runIssueModelAnnotator
 */
GoogleCloudContactcenterinsightsV1AnnotatorSelector.prototype['runIssueModelAnnotator'] = undefined;

/**
 * Whether to run the active phrase matcher annotator(s).
 * @member {Boolean} runPhraseMatcherAnnotator
 */
GoogleCloudContactcenterinsightsV1AnnotatorSelector.prototype['runPhraseMatcherAnnotator'] = undefined;

/**
 * Whether to run the sentiment annotator.
 * @member {Boolean} runSentimentAnnotator
 */
GoogleCloudContactcenterinsightsV1AnnotatorSelector.prototype['runSentimentAnnotator'] = undefined;

/**
 * Whether to run the silence annotator.
 * @member {Boolean} runSilenceAnnotator
 */
GoogleCloudContactcenterinsightsV1AnnotatorSelector.prototype['runSilenceAnnotator'] = undefined;

/**
 * Whether to run the summarization annotator.
 * @member {Boolean} runSummarizationAnnotator
 */
GoogleCloudContactcenterinsightsV1AnnotatorSelector.prototype['runSummarizationAnnotator'] = undefined;

/**
 * @member {module:model/GoogleCloudContactcenterinsightsV1AnnotatorSelectorSummarizationConfig} summarizationConfig
 */
GoogleCloudContactcenterinsightsV1AnnotatorSelector.prototype['summarizationConfig'] = undefined;






export default GoogleCloudContactcenterinsightsV1AnnotatorSelector;

