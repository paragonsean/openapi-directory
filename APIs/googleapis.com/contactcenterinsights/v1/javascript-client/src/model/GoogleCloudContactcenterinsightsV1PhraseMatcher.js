/**
 * Contact Center AI Insights API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GoogleCloudContactcenterinsightsV1PhraseMatchRuleGroup from './GoogleCloudContactcenterinsightsV1PhraseMatchRuleGroup';

/**
 * The GoogleCloudContactcenterinsightsV1PhraseMatcher model module.
 * @module model/GoogleCloudContactcenterinsightsV1PhraseMatcher
 * @version v1
 */
class GoogleCloudContactcenterinsightsV1PhraseMatcher {
    /**
     * Constructs a new <code>GoogleCloudContactcenterinsightsV1PhraseMatcher</code>.
     * The phrase matcher resource.
     * @alias module:model/GoogleCloudContactcenterinsightsV1PhraseMatcher
     */
    constructor() { 
        
        GoogleCloudContactcenterinsightsV1PhraseMatcher.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleCloudContactcenterinsightsV1PhraseMatcher</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleCloudContactcenterinsightsV1PhraseMatcher} obj Optional instance to populate.
     * @return {module:model/GoogleCloudContactcenterinsightsV1PhraseMatcher} The populated <code>GoogleCloudContactcenterinsightsV1PhraseMatcher</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleCloudContactcenterinsightsV1PhraseMatcher();

            if (data.hasOwnProperty('activationUpdateTime')) {
                obj['activationUpdateTime'] = ApiClient.convertToType(data['activationUpdateTime'], 'String');
            }
            if (data.hasOwnProperty('active')) {
                obj['active'] = ApiClient.convertToType(data['active'], 'Boolean');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('phraseMatchRuleGroups')) {
                obj['phraseMatchRuleGroups'] = ApiClient.convertToType(data['phraseMatchRuleGroups'], [GoogleCloudContactcenterinsightsV1PhraseMatchRuleGroup]);
            }
            if (data.hasOwnProperty('revisionCreateTime')) {
                obj['revisionCreateTime'] = ApiClient.convertToType(data['revisionCreateTime'], 'String');
            }
            if (data.hasOwnProperty('revisionId')) {
                obj['revisionId'] = ApiClient.convertToType(data['revisionId'], 'String');
            }
            if (data.hasOwnProperty('roleMatch')) {
                obj['roleMatch'] = ApiClient.convertToType(data['roleMatch'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('updateTime')) {
                obj['updateTime'] = ApiClient.convertToType(data['updateTime'], 'String');
            }
            if (data.hasOwnProperty('versionTag')) {
                obj['versionTag'] = ApiClient.convertToType(data['versionTag'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleCloudContactcenterinsightsV1PhraseMatcher</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleCloudContactcenterinsightsV1PhraseMatcher</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['activationUpdateTime'] && !(typeof data['activationUpdateTime'] === 'string' || data['activationUpdateTime'] instanceof String)) {
            throw new Error("Expected the field `activationUpdateTime` to be a primitive type in the JSON string but got " + data['activationUpdateTime']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        if (data['phraseMatchRuleGroups']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['phraseMatchRuleGroups'])) {
                throw new Error("Expected the field `phraseMatchRuleGroups` to be an array in the JSON data but got " + data['phraseMatchRuleGroups']);
            }
            // validate the optional field `phraseMatchRuleGroups` (array)
            for (const item of data['phraseMatchRuleGroups']) {
                GoogleCloudContactcenterinsightsV1PhraseMatchRuleGroup.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['revisionCreateTime'] && !(typeof data['revisionCreateTime'] === 'string' || data['revisionCreateTime'] instanceof String)) {
            throw new Error("Expected the field `revisionCreateTime` to be a primitive type in the JSON string but got " + data['revisionCreateTime']);
        }
        // ensure the json data is a string
        if (data['revisionId'] && !(typeof data['revisionId'] === 'string' || data['revisionId'] instanceof String)) {
            throw new Error("Expected the field `revisionId` to be a primitive type in the JSON string but got " + data['revisionId']);
        }
        // ensure the json data is a string
        if (data['roleMatch'] && !(typeof data['roleMatch'] === 'string' || data['roleMatch'] instanceof String)) {
            throw new Error("Expected the field `roleMatch` to be a primitive type in the JSON string but got " + data['roleMatch']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['updateTime'] && !(typeof data['updateTime'] === 'string' || data['updateTime'] instanceof String)) {
            throw new Error("Expected the field `updateTime` to be a primitive type in the JSON string but got " + data['updateTime']);
        }
        // ensure the json data is a string
        if (data['versionTag'] && !(typeof data['versionTag'] === 'string' || data['versionTag'] instanceof String)) {
            throw new Error("Expected the field `versionTag` to be a primitive type in the JSON string but got " + data['versionTag']);
        }

        return true;
    }


}



/**
 * Output only. The most recent time at which the activation status was updated.
 * @member {String} activationUpdateTime
 */
GoogleCloudContactcenterinsightsV1PhraseMatcher.prototype['activationUpdateTime'] = undefined;

/**
 * Applies the phrase matcher only when it is active.
 * @member {Boolean} active
 */
GoogleCloudContactcenterinsightsV1PhraseMatcher.prototype['active'] = undefined;

/**
 * The human-readable name of the phrase matcher.
 * @member {String} displayName
 */
GoogleCloudContactcenterinsightsV1PhraseMatcher.prototype['displayName'] = undefined;

/**
 * The resource name of the phrase matcher. Format: projects/{project}/locations/{location}/phraseMatchers/{phrase_matcher}
 * @member {String} name
 */
GoogleCloudContactcenterinsightsV1PhraseMatcher.prototype['name'] = undefined;

/**
 * A list of phase match rule groups that are included in this matcher.
 * @member {Array.<module:model/GoogleCloudContactcenterinsightsV1PhraseMatchRuleGroup>} phraseMatchRuleGroups
 */
GoogleCloudContactcenterinsightsV1PhraseMatcher.prototype['phraseMatchRuleGroups'] = undefined;

/**
 * Output only. The timestamp of when the revision was created. It is also the create time when a new matcher is added.
 * @member {String} revisionCreateTime
 */
GoogleCloudContactcenterinsightsV1PhraseMatcher.prototype['revisionCreateTime'] = undefined;

/**
 * Output only. Immutable. The revision ID of the phrase matcher. A new revision is committed whenever the matcher is changed, except when it is activated or deactivated. A server generated random ID will be used. Example: locations/global/phraseMatchers/my-first-matcher@1234567
 * @member {String} revisionId
 */
GoogleCloudContactcenterinsightsV1PhraseMatcher.prototype['revisionId'] = undefined;

/**
 * The role whose utterances the phrase matcher should be matched against. If the role is ROLE_UNSPECIFIED it will be matched against any utterances in the transcript.
 * @member {module:model/GoogleCloudContactcenterinsightsV1PhraseMatcher.RoleMatchEnum} roleMatch
 */
GoogleCloudContactcenterinsightsV1PhraseMatcher.prototype['roleMatch'] = undefined;

/**
 * Required. The type of this phrase matcher.
 * @member {module:model/GoogleCloudContactcenterinsightsV1PhraseMatcher.TypeEnum} type
 */
GoogleCloudContactcenterinsightsV1PhraseMatcher.prototype['type'] = undefined;

/**
 * Output only. The most recent time at which the phrase matcher was updated.
 * @member {String} updateTime
 */
GoogleCloudContactcenterinsightsV1PhraseMatcher.prototype['updateTime'] = undefined;

/**
 * The customized version tag to use for the phrase matcher. If not specified, it will default to `revision_id`.
 * @member {String} versionTag
 */
GoogleCloudContactcenterinsightsV1PhraseMatcher.prototype['versionTag'] = undefined;





/**
 * Allowed values for the <code>roleMatch</code> property.
 * @enum {String}
 * @readonly
 */
GoogleCloudContactcenterinsightsV1PhraseMatcher['RoleMatchEnum'] = {

    /**
     * value: "ROLE_UNSPECIFIED"
     * @const
     */
    "ROLE_UNSPECIFIED": "ROLE_UNSPECIFIED",

    /**
     * value: "HUMAN_AGENT"
     * @const
     */
    "HUMAN_AGENT": "HUMAN_AGENT",

    /**
     * value: "AUTOMATED_AGENT"
     * @const
     */
    "AUTOMATED_AGENT": "AUTOMATED_AGENT",

    /**
     * value: "END_USER"
     * @const
     */
    "END_USER": "END_USER",

    /**
     * value: "ANY_AGENT"
     * @const
     */
    "ANY_AGENT": "ANY_AGENT"
};


/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
GoogleCloudContactcenterinsightsV1PhraseMatcher['TypeEnum'] = {

    /**
     * value: "PHRASE_MATCHER_TYPE_UNSPECIFIED"
     * @const
     */
    "PHRASE_MATCHER_TYPE_UNSPECIFIED": "PHRASE_MATCHER_TYPE_UNSPECIFIED",

    /**
     * value: "ALL_OF"
     * @const
     */
    "ALL_OF": "ALL_OF",

    /**
     * value: "ANY_OF"
     * @const
     */
    "ANY_OF": "ANY_OF"
};



export default GoogleCloudContactcenterinsightsV1PhraseMatcher;

