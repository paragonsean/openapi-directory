/**
 * Google Docs API
 * Reads and writes Google Docs documents.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.GoogleDocsApi);
  }
}(this, function(expect, GoogleDocsApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new GoogleDocsApi.Request();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Request', function() {
    it('should create an instance of Request', function() {
      // uncomment below and update the code to test Request
      //var instance = new GoogleDocsApi.Request();
      //expect(instance).to.be.a(GoogleDocsApi.Request);
    });

    it('should have the property createFooter (base name: "createFooter")', function() {
      // uncomment below and update the code to test the property createFooter
      //var instance = new GoogleDocsApi.Request();
      //expect(instance).to.be();
    });

    it('should have the property createFootnote (base name: "createFootnote")', function() {
      // uncomment below and update the code to test the property createFootnote
      //var instance = new GoogleDocsApi.Request();
      //expect(instance).to.be();
    });

    it('should have the property createHeader (base name: "createHeader")', function() {
      // uncomment below and update the code to test the property createHeader
      //var instance = new GoogleDocsApi.Request();
      //expect(instance).to.be();
    });

    it('should have the property createNamedRange (base name: "createNamedRange")', function() {
      // uncomment below and update the code to test the property createNamedRange
      //var instance = new GoogleDocsApi.Request();
      //expect(instance).to.be();
    });

    it('should have the property createParagraphBullets (base name: "createParagraphBullets")', function() {
      // uncomment below and update the code to test the property createParagraphBullets
      //var instance = new GoogleDocsApi.Request();
      //expect(instance).to.be();
    });

    it('should have the property deleteContentRange (base name: "deleteContentRange")', function() {
      // uncomment below and update the code to test the property deleteContentRange
      //var instance = new GoogleDocsApi.Request();
      //expect(instance).to.be();
    });

    it('should have the property deleteFooter (base name: "deleteFooter")', function() {
      // uncomment below and update the code to test the property deleteFooter
      //var instance = new GoogleDocsApi.Request();
      //expect(instance).to.be();
    });

    it('should have the property deleteHeader (base name: "deleteHeader")', function() {
      // uncomment below and update the code to test the property deleteHeader
      //var instance = new GoogleDocsApi.Request();
      //expect(instance).to.be();
    });

    it('should have the property deleteNamedRange (base name: "deleteNamedRange")', function() {
      // uncomment below and update the code to test the property deleteNamedRange
      //var instance = new GoogleDocsApi.Request();
      //expect(instance).to.be();
    });

    it('should have the property deleteParagraphBullets (base name: "deleteParagraphBullets")', function() {
      // uncomment below and update the code to test the property deleteParagraphBullets
      //var instance = new GoogleDocsApi.Request();
      //expect(instance).to.be();
    });

    it('should have the property deletePositionedObject (base name: "deletePositionedObject")', function() {
      // uncomment below and update the code to test the property deletePositionedObject
      //var instance = new GoogleDocsApi.Request();
      //expect(instance).to.be();
    });

    it('should have the property deleteTableColumn (base name: "deleteTableColumn")', function() {
      // uncomment below and update the code to test the property deleteTableColumn
      //var instance = new GoogleDocsApi.Request();
      //expect(instance).to.be();
    });

    it('should have the property deleteTableRow (base name: "deleteTableRow")', function() {
      // uncomment below and update the code to test the property deleteTableRow
      //var instance = new GoogleDocsApi.Request();
      //expect(instance).to.be();
    });

    it('should have the property insertInlineImage (base name: "insertInlineImage")', function() {
      // uncomment below and update the code to test the property insertInlineImage
      //var instance = new GoogleDocsApi.Request();
      //expect(instance).to.be();
    });

    it('should have the property insertPageBreak (base name: "insertPageBreak")', function() {
      // uncomment below and update the code to test the property insertPageBreak
      //var instance = new GoogleDocsApi.Request();
      //expect(instance).to.be();
    });

    it('should have the property insertSectionBreak (base name: "insertSectionBreak")', function() {
      // uncomment below and update the code to test the property insertSectionBreak
      //var instance = new GoogleDocsApi.Request();
      //expect(instance).to.be();
    });

    it('should have the property insertTable (base name: "insertTable")', function() {
      // uncomment below and update the code to test the property insertTable
      //var instance = new GoogleDocsApi.Request();
      //expect(instance).to.be();
    });

    it('should have the property insertTableColumn (base name: "insertTableColumn")', function() {
      // uncomment below and update the code to test the property insertTableColumn
      //var instance = new GoogleDocsApi.Request();
      //expect(instance).to.be();
    });

    it('should have the property insertTableRow (base name: "insertTableRow")', function() {
      // uncomment below and update the code to test the property insertTableRow
      //var instance = new GoogleDocsApi.Request();
      //expect(instance).to.be();
    });

    it('should have the property insertText (base name: "insertText")', function() {
      // uncomment below and update the code to test the property insertText
      //var instance = new GoogleDocsApi.Request();
      //expect(instance).to.be();
    });

    it('should have the property mergeTableCells (base name: "mergeTableCells")', function() {
      // uncomment below and update the code to test the property mergeTableCells
      //var instance = new GoogleDocsApi.Request();
      //expect(instance).to.be();
    });

    it('should have the property pinTableHeaderRows (base name: "pinTableHeaderRows")', function() {
      // uncomment below and update the code to test the property pinTableHeaderRows
      //var instance = new GoogleDocsApi.Request();
      //expect(instance).to.be();
    });

    it('should have the property replaceAllText (base name: "replaceAllText")', function() {
      // uncomment below and update the code to test the property replaceAllText
      //var instance = new GoogleDocsApi.Request();
      //expect(instance).to.be();
    });

    it('should have the property replaceImage (base name: "replaceImage")', function() {
      // uncomment below and update the code to test the property replaceImage
      //var instance = new GoogleDocsApi.Request();
      //expect(instance).to.be();
    });

    it('should have the property replaceNamedRangeContent (base name: "replaceNamedRangeContent")', function() {
      // uncomment below and update the code to test the property replaceNamedRangeContent
      //var instance = new GoogleDocsApi.Request();
      //expect(instance).to.be();
    });

    it('should have the property unmergeTableCells (base name: "unmergeTableCells")', function() {
      // uncomment below and update the code to test the property unmergeTableCells
      //var instance = new GoogleDocsApi.Request();
      //expect(instance).to.be();
    });

    it('should have the property updateDocumentStyle (base name: "updateDocumentStyle")', function() {
      // uncomment below and update the code to test the property updateDocumentStyle
      //var instance = new GoogleDocsApi.Request();
      //expect(instance).to.be();
    });

    it('should have the property updateParagraphStyle (base name: "updateParagraphStyle")', function() {
      // uncomment below and update the code to test the property updateParagraphStyle
      //var instance = new GoogleDocsApi.Request();
      //expect(instance).to.be();
    });

    it('should have the property updateSectionStyle (base name: "updateSectionStyle")', function() {
      // uncomment below and update the code to test the property updateSectionStyle
      //var instance = new GoogleDocsApi.Request();
      //expect(instance).to.be();
    });

    it('should have the property updateTableCellStyle (base name: "updateTableCellStyle")', function() {
      // uncomment below and update the code to test the property updateTableCellStyle
      //var instance = new GoogleDocsApi.Request();
      //expect(instance).to.be();
    });

    it('should have the property updateTableColumnProperties (base name: "updateTableColumnProperties")', function() {
      // uncomment below and update the code to test the property updateTableColumnProperties
      //var instance = new GoogleDocsApi.Request();
      //expect(instance).to.be();
    });

    it('should have the property updateTableRowStyle (base name: "updateTableRowStyle")', function() {
      // uncomment below and update the code to test the property updateTableRowStyle
      //var instance = new GoogleDocsApi.Request();
      //expect(instance).to.be();
    });

    it('should have the property updateTextStyle (base name: "updateTextStyle")', function() {
      // uncomment below and update the code to test the property updateTextStyle
      //var instance = new GoogleDocsApi.Request();
      //expect(instance).to.be();
    });

  });

}));
