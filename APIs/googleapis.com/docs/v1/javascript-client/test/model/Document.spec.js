/**
 * Google Docs API
 * Reads and writes Google Docs documents.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.GoogleDocsApi);
  }
}(this, function(expect, GoogleDocsApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new GoogleDocsApi.Document();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Document', function() {
    it('should create an instance of Document', function() {
      // uncomment below and update the code to test Document
      //var instance = new GoogleDocsApi.Document();
      //expect(instance).to.be.a(GoogleDocsApi.Document);
    });

    it('should have the property body (base name: "body")', function() {
      // uncomment below and update the code to test the property body
      //var instance = new GoogleDocsApi.Document();
      //expect(instance).to.be();
    });

    it('should have the property documentId (base name: "documentId")', function() {
      // uncomment below and update the code to test the property documentId
      //var instance = new GoogleDocsApi.Document();
      //expect(instance).to.be();
    });

    it('should have the property documentStyle (base name: "documentStyle")', function() {
      // uncomment below and update the code to test the property documentStyle
      //var instance = new GoogleDocsApi.Document();
      //expect(instance).to.be();
    });

    it('should have the property footers (base name: "footers")', function() {
      // uncomment below and update the code to test the property footers
      //var instance = new GoogleDocsApi.Document();
      //expect(instance).to.be();
    });

    it('should have the property footnotes (base name: "footnotes")', function() {
      // uncomment below and update the code to test the property footnotes
      //var instance = new GoogleDocsApi.Document();
      //expect(instance).to.be();
    });

    it('should have the property headers (base name: "headers")', function() {
      // uncomment below and update the code to test the property headers
      //var instance = new GoogleDocsApi.Document();
      //expect(instance).to.be();
    });

    it('should have the property inlineObjects (base name: "inlineObjects")', function() {
      // uncomment below and update the code to test the property inlineObjects
      //var instance = new GoogleDocsApi.Document();
      //expect(instance).to.be();
    });

    it('should have the property lists (base name: "lists")', function() {
      // uncomment below and update the code to test the property lists
      //var instance = new GoogleDocsApi.Document();
      //expect(instance).to.be();
    });

    it('should have the property namedRanges (base name: "namedRanges")', function() {
      // uncomment below and update the code to test the property namedRanges
      //var instance = new GoogleDocsApi.Document();
      //expect(instance).to.be();
    });

    it('should have the property namedStyles (base name: "namedStyles")', function() {
      // uncomment below and update the code to test the property namedStyles
      //var instance = new GoogleDocsApi.Document();
      //expect(instance).to.be();
    });

    it('should have the property positionedObjects (base name: "positionedObjects")', function() {
      // uncomment below and update the code to test the property positionedObjects
      //var instance = new GoogleDocsApi.Document();
      //expect(instance).to.be();
    });

    it('should have the property revisionId (base name: "revisionId")', function() {
      // uncomment below and update the code to test the property revisionId
      //var instance = new GoogleDocsApi.Document();
      //expect(instance).to.be();
    });

    it('should have the property suggestedDocumentStyleChanges (base name: "suggestedDocumentStyleChanges")', function() {
      // uncomment below and update the code to test the property suggestedDocumentStyleChanges
      //var instance = new GoogleDocsApi.Document();
      //expect(instance).to.be();
    });

    it('should have the property suggestedNamedStylesChanges (base name: "suggestedNamedStylesChanges")', function() {
      // uncomment below and update the code to test the property suggestedNamedStylesChanges
      //var instance = new GoogleDocsApi.Document();
      //expect(instance).to.be();
    });

    it('should have the property suggestionsViewMode (base name: "suggestionsViewMode")', function() {
      // uncomment below and update the code to test the property suggestionsViewMode
      //var instance = new GoogleDocsApi.Document();
      //expect(instance).to.be();
    });

    it('should have the property title (base name: "title")', function() {
      // uncomment below and update the code to test the property title
      //var instance = new GoogleDocsApi.Document();
      //expect(instance).to.be();
    });

  });

}));
