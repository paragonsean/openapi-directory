/**
 * Google Docs API
 * Reads and writes Google Docs documents.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Dimension from './Dimension';

/**
 * The TableRowStyle model module.
 * @module model/TableRowStyle
 * @version v1
 */
class TableRowStyle {
    /**
     * Constructs a new <code>TableRowStyle</code>.
     * Styles that apply to a table row.
     * @alias module:model/TableRowStyle
     */
    constructor() { 
        
        TableRowStyle.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TableRowStyle</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TableRowStyle} obj Optional instance to populate.
     * @return {module:model/TableRowStyle} The populated <code>TableRowStyle</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TableRowStyle();

            if (data.hasOwnProperty('minRowHeight')) {
                obj['minRowHeight'] = Dimension.constructFromObject(data['minRowHeight']);
            }
            if (data.hasOwnProperty('preventOverflow')) {
                obj['preventOverflow'] = ApiClient.convertToType(data['preventOverflow'], 'Boolean');
            }
            if (data.hasOwnProperty('tableHeader')) {
                obj['tableHeader'] = ApiClient.convertToType(data['tableHeader'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TableRowStyle</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TableRowStyle</code>.
     */
    static validateJSON(data) {
        // validate the optional field `minRowHeight`
        if (data['minRowHeight']) { // data not null
          Dimension.validateJSON(data['minRowHeight']);
        }

        return true;
    }


}



/**
 * @member {module:model/Dimension} minRowHeight
 */
TableRowStyle.prototype['minRowHeight'] = undefined;

/**
 * Whether the row cannot overflow across page or column boundaries.
 * @member {Boolean} preventOverflow
 */
TableRowStyle.prototype['preventOverflow'] = undefined;

/**
 * Whether the row is a table header.
 * @member {Boolean} tableHeader
 */
TableRowStyle.prototype['tableHeader'] = undefined;






export default TableRowStyle;

