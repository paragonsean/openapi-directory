/**
 * Google Docs API
 * Reads and writes Google Docs documents.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SuggestedTableRowStyle from './SuggestedTableRowStyle';
import TableCell from './TableCell';
import TableRowStyle from './TableRowStyle';

/**
 * The TableRow model module.
 * @module model/TableRow
 * @version v1
 */
class TableRow {
    /**
     * Constructs a new <code>TableRow</code>.
     * The contents and style of a row in a Table.
     * @alias module:model/TableRow
     */
    constructor() { 
        
        TableRow.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TableRow</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TableRow} obj Optional instance to populate.
     * @return {module:model/TableRow} The populated <code>TableRow</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TableRow();

            if (data.hasOwnProperty('endIndex')) {
                obj['endIndex'] = ApiClient.convertToType(data['endIndex'], 'Number');
            }
            if (data.hasOwnProperty('startIndex')) {
                obj['startIndex'] = ApiClient.convertToType(data['startIndex'], 'Number');
            }
            if (data.hasOwnProperty('suggestedDeletionIds')) {
                obj['suggestedDeletionIds'] = ApiClient.convertToType(data['suggestedDeletionIds'], ['String']);
            }
            if (data.hasOwnProperty('suggestedInsertionIds')) {
                obj['suggestedInsertionIds'] = ApiClient.convertToType(data['suggestedInsertionIds'], ['String']);
            }
            if (data.hasOwnProperty('suggestedTableRowStyleChanges')) {
                obj['suggestedTableRowStyleChanges'] = ApiClient.convertToType(data['suggestedTableRowStyleChanges'], {'String': SuggestedTableRowStyle});
            }
            if (data.hasOwnProperty('tableCells')) {
                obj['tableCells'] = ApiClient.convertToType(data['tableCells'], [TableCell]);
            }
            if (data.hasOwnProperty('tableRowStyle')) {
                obj['tableRowStyle'] = TableRowStyle.constructFromObject(data['tableRowStyle']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TableRow</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TableRow</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['suggestedDeletionIds'])) {
            throw new Error("Expected the field `suggestedDeletionIds` to be an array in the JSON data but got " + data['suggestedDeletionIds']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['suggestedInsertionIds'])) {
            throw new Error("Expected the field `suggestedInsertionIds` to be an array in the JSON data but got " + data['suggestedInsertionIds']);
        }
        if (data['tableCells']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['tableCells'])) {
                throw new Error("Expected the field `tableCells` to be an array in the JSON data but got " + data['tableCells']);
            }
            // validate the optional field `tableCells` (array)
            for (const item of data['tableCells']) {
                TableCell.validateJSON(item);
            };
        }
        // validate the optional field `tableRowStyle`
        if (data['tableRowStyle']) { // data not null
          TableRowStyle.validateJSON(data['tableRowStyle']);
        }

        return true;
    }


}



/**
 * The zero-based end index of this row, exclusive, in UTF-16 code units.
 * @member {Number} endIndex
 */
TableRow.prototype['endIndex'] = undefined;

/**
 * The zero-based start index of this row, in UTF-16 code units.
 * @member {Number} startIndex
 */
TableRow.prototype['startIndex'] = undefined;

/**
 * The suggested deletion IDs. If empty, then there are no suggested deletions of this content.
 * @member {Array.<String>} suggestedDeletionIds
 */
TableRow.prototype['suggestedDeletionIds'] = undefined;

/**
 * The suggested insertion IDs. A TableRow may have multiple insertion IDs if it's a nested suggested change. If empty, then this is not a suggested insertion.
 * @member {Array.<String>} suggestedInsertionIds
 */
TableRow.prototype['suggestedInsertionIds'] = undefined;

/**
 * The suggested style changes to this row, keyed by suggestion ID.
 * @member {Object.<String, module:model/SuggestedTableRowStyle>} suggestedTableRowStyleChanges
 */
TableRow.prototype['suggestedTableRowStyleChanges'] = undefined;

/**
 * The contents and style of each cell in this row. It's possible for a table to be non-rectangular, so some rows may have a different number of cells than other rows in the same table.
 * @member {Array.<module:model/TableCell>} tableCells
 */
TableRow.prototype['tableCells'] = undefined;

/**
 * @member {module:model/TableRowStyle} tableRowStyle
 */
TableRow.prototype['tableRowStyle'] = undefined;






export default TableRow;

