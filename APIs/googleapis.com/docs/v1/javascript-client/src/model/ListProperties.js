/**
 * Google Docs API
 * Reads and writes Google Docs documents.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import NestingLevel from './NestingLevel';

/**
 * The ListProperties model module.
 * @module model/ListProperties
 * @version v1
 */
class ListProperties {
    /**
     * Constructs a new <code>ListProperties</code>.
     * The properties of a list that describe the look and feel of bullets belonging to paragraphs associated with a list.
     * @alias module:model/ListProperties
     */
    constructor() { 
        
        ListProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ListProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ListProperties} obj Optional instance to populate.
     * @return {module:model/ListProperties} The populated <code>ListProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ListProperties();

            if (data.hasOwnProperty('nestingLevels')) {
                obj['nestingLevels'] = ApiClient.convertToType(data['nestingLevels'], [NestingLevel]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ListProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ListProperties</code>.
     */
    static validateJSON(data) {
        if (data['nestingLevels']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['nestingLevels'])) {
                throw new Error("Expected the field `nestingLevels` to be an array in the JSON data but got " + data['nestingLevels']);
            }
            // validate the optional field `nestingLevels` (array)
            for (const item of data['nestingLevels']) {
                NestingLevel.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Describes the properties of the bullets at the associated level. A list has at most 9 levels of nesting with nesting level 0 corresponding to the top-most level and nesting level 8 corresponding to the most nested level. The nesting levels are returned in ascending order with the least nested returned first.
 * @member {Array.<module:model/NestingLevel>} nestingLevels
 */
ListProperties.prototype['nestingLevels'] = undefined;






export default ListProperties;

