/**
 * Google Docs API
 * Reads and writes Google Docs documents.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CropProperties from './CropProperties';

/**
 * The ImageProperties model module.
 * @module model/ImageProperties
 * @version v1
 */
class ImageProperties {
    /**
     * Constructs a new <code>ImageProperties</code>.
     * The properties of an image.
     * @alias module:model/ImageProperties
     */
    constructor() { 
        
        ImageProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ImageProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ImageProperties} obj Optional instance to populate.
     * @return {module:model/ImageProperties} The populated <code>ImageProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ImageProperties();

            if (data.hasOwnProperty('angle')) {
                obj['angle'] = ApiClient.convertToType(data['angle'], 'Number');
            }
            if (data.hasOwnProperty('brightness')) {
                obj['brightness'] = ApiClient.convertToType(data['brightness'], 'Number');
            }
            if (data.hasOwnProperty('contentUri')) {
                obj['contentUri'] = ApiClient.convertToType(data['contentUri'], 'String');
            }
            if (data.hasOwnProperty('contrast')) {
                obj['contrast'] = ApiClient.convertToType(data['contrast'], 'Number');
            }
            if (data.hasOwnProperty('cropProperties')) {
                obj['cropProperties'] = CropProperties.constructFromObject(data['cropProperties']);
            }
            if (data.hasOwnProperty('sourceUri')) {
                obj['sourceUri'] = ApiClient.convertToType(data['sourceUri'], 'String');
            }
            if (data.hasOwnProperty('transparency')) {
                obj['transparency'] = ApiClient.convertToType(data['transparency'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ImageProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ImageProperties</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['contentUri'] && !(typeof data['contentUri'] === 'string' || data['contentUri'] instanceof String)) {
            throw new Error("Expected the field `contentUri` to be a primitive type in the JSON string but got " + data['contentUri']);
        }
        // validate the optional field `cropProperties`
        if (data['cropProperties']) { // data not null
          CropProperties.validateJSON(data['cropProperties']);
        }
        // ensure the json data is a string
        if (data['sourceUri'] && !(typeof data['sourceUri'] === 'string' || data['sourceUri'] instanceof String)) {
            throw new Error("Expected the field `sourceUri` to be a primitive type in the JSON string but got " + data['sourceUri']);
        }

        return true;
    }


}



/**
 * The clockwise rotation angle of the image, in radians.
 * @member {Number} angle
 */
ImageProperties.prototype['angle'] = undefined;

/**
 * The brightness effect of the image. The value should be in the interval [-1.0, 1.0], where 0 means no effect.
 * @member {Number} brightness
 */
ImageProperties.prototype['brightness'] = undefined;

/**
 * A URI to the image with a default lifetime of 30 minutes. This URI is tagged with the account of the requester. Anyone with the URI effectively accesses the image as the original requester. Access to the image may be lost if the document's sharing settings change.
 * @member {String} contentUri
 */
ImageProperties.prototype['contentUri'] = undefined;

/**
 * The contrast effect of the image. The value should be in the interval [-1.0, 1.0], where 0 means no effect.
 * @member {Number} contrast
 */
ImageProperties.prototype['contrast'] = undefined;

/**
 * @member {module:model/CropProperties} cropProperties
 */
ImageProperties.prototype['cropProperties'] = undefined;

/**
 * The source URI is the URI used to insert the image. The source URI can be empty.
 * @member {String} sourceUri
 */
ImageProperties.prototype['sourceUri'] = undefined;

/**
 * The transparency effect of the image. The value should be in the interval [0.0, 1.0], where 0 means no effect and 1 means transparent.
 * @member {Number} transparency
 */
ImageProperties.prototype['transparency'] = undefined;






export default ImageProperties;

