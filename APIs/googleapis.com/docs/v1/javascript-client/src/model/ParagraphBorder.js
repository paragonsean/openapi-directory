/**
 * Google Docs API
 * Reads and writes Google Docs documents.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Dimension from './Dimension';
import OptionalColor from './OptionalColor';

/**
 * The ParagraphBorder model module.
 * @module model/ParagraphBorder
 * @version v1
 */
class ParagraphBorder {
    /**
     * Constructs a new <code>ParagraphBorder</code>.
     * A border around a paragraph.
     * @alias module:model/ParagraphBorder
     */
    constructor() { 
        
        ParagraphBorder.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ParagraphBorder</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ParagraphBorder} obj Optional instance to populate.
     * @return {module:model/ParagraphBorder} The populated <code>ParagraphBorder</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ParagraphBorder();

            if (data.hasOwnProperty('color')) {
                obj['color'] = OptionalColor.constructFromObject(data['color']);
            }
            if (data.hasOwnProperty('dashStyle')) {
                obj['dashStyle'] = ApiClient.convertToType(data['dashStyle'], 'String');
            }
            if (data.hasOwnProperty('padding')) {
                obj['padding'] = Dimension.constructFromObject(data['padding']);
            }
            if (data.hasOwnProperty('width')) {
                obj['width'] = Dimension.constructFromObject(data['width']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ParagraphBorder</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ParagraphBorder</code>.
     */
    static validateJSON(data) {
        // validate the optional field `color`
        if (data['color']) { // data not null
          OptionalColor.validateJSON(data['color']);
        }
        // ensure the json data is a string
        if (data['dashStyle'] && !(typeof data['dashStyle'] === 'string' || data['dashStyle'] instanceof String)) {
            throw new Error("Expected the field `dashStyle` to be a primitive type in the JSON string but got " + data['dashStyle']);
        }
        // validate the optional field `padding`
        if (data['padding']) { // data not null
          Dimension.validateJSON(data['padding']);
        }
        // validate the optional field `width`
        if (data['width']) { // data not null
          Dimension.validateJSON(data['width']);
        }

        return true;
    }


}



/**
 * @member {module:model/OptionalColor} color
 */
ParagraphBorder.prototype['color'] = undefined;

/**
 * The dash style of the border.
 * @member {module:model/ParagraphBorder.DashStyleEnum} dashStyle
 */
ParagraphBorder.prototype['dashStyle'] = undefined;

/**
 * @member {module:model/Dimension} padding
 */
ParagraphBorder.prototype['padding'] = undefined;

/**
 * @member {module:model/Dimension} width
 */
ParagraphBorder.prototype['width'] = undefined;





/**
 * Allowed values for the <code>dashStyle</code> property.
 * @enum {String}
 * @readonly
 */
ParagraphBorder['DashStyleEnum'] = {

    /**
     * value: "DASH_STYLE_UNSPECIFIED"
     * @const
     */
    "DASH_STYLE_UNSPECIFIED": "DASH_STYLE_UNSPECIFIED",

    /**
     * value: "SOLID"
     * @const
     */
    "SOLID": "SOLID",

    /**
     * value: "DOT"
     * @const
     */
    "DOT": "DOT",

    /**
     * value: "DASH"
     * @const
     */
    "DASH": "DASH"
};



export default ParagraphBorder;

