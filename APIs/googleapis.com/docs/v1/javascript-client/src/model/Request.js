/**
 * Google Docs API
 * Reads and writes Google Docs documents.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CreateFooterRequest from './CreateFooterRequest';
import CreateFootnoteRequest from './CreateFootnoteRequest';
import CreateHeaderRequest from './CreateHeaderRequest';
import CreateNamedRangeRequest from './CreateNamedRangeRequest';
import CreateParagraphBulletsRequest from './CreateParagraphBulletsRequest';
import DeleteContentRangeRequest from './DeleteContentRangeRequest';
import DeleteFooterRequest from './DeleteFooterRequest';
import DeleteHeaderRequest from './DeleteHeaderRequest';
import DeleteNamedRangeRequest from './DeleteNamedRangeRequest';
import DeleteParagraphBulletsRequest from './DeleteParagraphBulletsRequest';
import DeletePositionedObjectRequest from './DeletePositionedObjectRequest';
import DeleteTableColumnRequest from './DeleteTableColumnRequest';
import DeleteTableRowRequest from './DeleteTableRowRequest';
import InsertInlineImageRequest from './InsertInlineImageRequest';
import InsertPageBreakRequest from './InsertPageBreakRequest';
import InsertSectionBreakRequest from './InsertSectionBreakRequest';
import InsertTableColumnRequest from './InsertTableColumnRequest';
import InsertTableRequest from './InsertTableRequest';
import InsertTableRowRequest from './InsertTableRowRequest';
import InsertTextRequest from './InsertTextRequest';
import MergeTableCellsRequest from './MergeTableCellsRequest';
import PinTableHeaderRowsRequest from './PinTableHeaderRowsRequest';
import ReplaceAllTextRequest from './ReplaceAllTextRequest';
import ReplaceImageRequest from './ReplaceImageRequest';
import ReplaceNamedRangeContentRequest from './ReplaceNamedRangeContentRequest';
import UnmergeTableCellsRequest from './UnmergeTableCellsRequest';
import UpdateDocumentStyleRequest from './UpdateDocumentStyleRequest';
import UpdateParagraphStyleRequest from './UpdateParagraphStyleRequest';
import UpdateSectionStyleRequest from './UpdateSectionStyleRequest';
import UpdateTableCellStyleRequest from './UpdateTableCellStyleRequest';
import UpdateTableColumnPropertiesRequest from './UpdateTableColumnPropertiesRequest';
import UpdateTableRowStyleRequest from './UpdateTableRowStyleRequest';
import UpdateTextStyleRequest from './UpdateTextStyleRequest';

/**
 * The Request model module.
 * @module model/Request
 * @version v1
 */
class Request {
    /**
     * Constructs a new <code>Request</code>.
     * A single update to apply to a document.
     * @alias module:model/Request
     */
    constructor() { 
        
        Request.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Request</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Request} obj Optional instance to populate.
     * @return {module:model/Request} The populated <code>Request</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Request();

            if (data.hasOwnProperty('createFooter')) {
                obj['createFooter'] = CreateFooterRequest.constructFromObject(data['createFooter']);
            }
            if (data.hasOwnProperty('createFootnote')) {
                obj['createFootnote'] = CreateFootnoteRequest.constructFromObject(data['createFootnote']);
            }
            if (data.hasOwnProperty('createHeader')) {
                obj['createHeader'] = CreateHeaderRequest.constructFromObject(data['createHeader']);
            }
            if (data.hasOwnProperty('createNamedRange')) {
                obj['createNamedRange'] = CreateNamedRangeRequest.constructFromObject(data['createNamedRange']);
            }
            if (data.hasOwnProperty('createParagraphBullets')) {
                obj['createParagraphBullets'] = CreateParagraphBulletsRequest.constructFromObject(data['createParagraphBullets']);
            }
            if (data.hasOwnProperty('deleteContentRange')) {
                obj['deleteContentRange'] = DeleteContentRangeRequest.constructFromObject(data['deleteContentRange']);
            }
            if (data.hasOwnProperty('deleteFooter')) {
                obj['deleteFooter'] = DeleteFooterRequest.constructFromObject(data['deleteFooter']);
            }
            if (data.hasOwnProperty('deleteHeader')) {
                obj['deleteHeader'] = DeleteHeaderRequest.constructFromObject(data['deleteHeader']);
            }
            if (data.hasOwnProperty('deleteNamedRange')) {
                obj['deleteNamedRange'] = DeleteNamedRangeRequest.constructFromObject(data['deleteNamedRange']);
            }
            if (data.hasOwnProperty('deleteParagraphBullets')) {
                obj['deleteParagraphBullets'] = DeleteParagraphBulletsRequest.constructFromObject(data['deleteParagraphBullets']);
            }
            if (data.hasOwnProperty('deletePositionedObject')) {
                obj['deletePositionedObject'] = DeletePositionedObjectRequest.constructFromObject(data['deletePositionedObject']);
            }
            if (data.hasOwnProperty('deleteTableColumn')) {
                obj['deleteTableColumn'] = DeleteTableColumnRequest.constructFromObject(data['deleteTableColumn']);
            }
            if (data.hasOwnProperty('deleteTableRow')) {
                obj['deleteTableRow'] = DeleteTableRowRequest.constructFromObject(data['deleteTableRow']);
            }
            if (data.hasOwnProperty('insertInlineImage')) {
                obj['insertInlineImage'] = InsertInlineImageRequest.constructFromObject(data['insertInlineImage']);
            }
            if (data.hasOwnProperty('insertPageBreak')) {
                obj['insertPageBreak'] = InsertPageBreakRequest.constructFromObject(data['insertPageBreak']);
            }
            if (data.hasOwnProperty('insertSectionBreak')) {
                obj['insertSectionBreak'] = InsertSectionBreakRequest.constructFromObject(data['insertSectionBreak']);
            }
            if (data.hasOwnProperty('insertTable')) {
                obj['insertTable'] = InsertTableRequest.constructFromObject(data['insertTable']);
            }
            if (data.hasOwnProperty('insertTableColumn')) {
                obj['insertTableColumn'] = InsertTableColumnRequest.constructFromObject(data['insertTableColumn']);
            }
            if (data.hasOwnProperty('insertTableRow')) {
                obj['insertTableRow'] = InsertTableRowRequest.constructFromObject(data['insertTableRow']);
            }
            if (data.hasOwnProperty('insertText')) {
                obj['insertText'] = InsertTextRequest.constructFromObject(data['insertText']);
            }
            if (data.hasOwnProperty('mergeTableCells')) {
                obj['mergeTableCells'] = MergeTableCellsRequest.constructFromObject(data['mergeTableCells']);
            }
            if (data.hasOwnProperty('pinTableHeaderRows')) {
                obj['pinTableHeaderRows'] = PinTableHeaderRowsRequest.constructFromObject(data['pinTableHeaderRows']);
            }
            if (data.hasOwnProperty('replaceAllText')) {
                obj['replaceAllText'] = ReplaceAllTextRequest.constructFromObject(data['replaceAllText']);
            }
            if (data.hasOwnProperty('replaceImage')) {
                obj['replaceImage'] = ReplaceImageRequest.constructFromObject(data['replaceImage']);
            }
            if (data.hasOwnProperty('replaceNamedRangeContent')) {
                obj['replaceNamedRangeContent'] = ReplaceNamedRangeContentRequest.constructFromObject(data['replaceNamedRangeContent']);
            }
            if (data.hasOwnProperty('unmergeTableCells')) {
                obj['unmergeTableCells'] = UnmergeTableCellsRequest.constructFromObject(data['unmergeTableCells']);
            }
            if (data.hasOwnProperty('updateDocumentStyle')) {
                obj['updateDocumentStyle'] = UpdateDocumentStyleRequest.constructFromObject(data['updateDocumentStyle']);
            }
            if (data.hasOwnProperty('updateParagraphStyle')) {
                obj['updateParagraphStyle'] = UpdateParagraphStyleRequest.constructFromObject(data['updateParagraphStyle']);
            }
            if (data.hasOwnProperty('updateSectionStyle')) {
                obj['updateSectionStyle'] = UpdateSectionStyleRequest.constructFromObject(data['updateSectionStyle']);
            }
            if (data.hasOwnProperty('updateTableCellStyle')) {
                obj['updateTableCellStyle'] = UpdateTableCellStyleRequest.constructFromObject(data['updateTableCellStyle']);
            }
            if (data.hasOwnProperty('updateTableColumnProperties')) {
                obj['updateTableColumnProperties'] = UpdateTableColumnPropertiesRequest.constructFromObject(data['updateTableColumnProperties']);
            }
            if (data.hasOwnProperty('updateTableRowStyle')) {
                obj['updateTableRowStyle'] = UpdateTableRowStyleRequest.constructFromObject(data['updateTableRowStyle']);
            }
            if (data.hasOwnProperty('updateTextStyle')) {
                obj['updateTextStyle'] = UpdateTextStyleRequest.constructFromObject(data['updateTextStyle']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Request</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Request</code>.
     */
    static validateJSON(data) {
        // validate the optional field `createFooter`
        if (data['createFooter']) { // data not null
          CreateFooterRequest.validateJSON(data['createFooter']);
        }
        // validate the optional field `createFootnote`
        if (data['createFootnote']) { // data not null
          CreateFootnoteRequest.validateJSON(data['createFootnote']);
        }
        // validate the optional field `createHeader`
        if (data['createHeader']) { // data not null
          CreateHeaderRequest.validateJSON(data['createHeader']);
        }
        // validate the optional field `createNamedRange`
        if (data['createNamedRange']) { // data not null
          CreateNamedRangeRequest.validateJSON(data['createNamedRange']);
        }
        // validate the optional field `createParagraphBullets`
        if (data['createParagraphBullets']) { // data not null
          CreateParagraphBulletsRequest.validateJSON(data['createParagraphBullets']);
        }
        // validate the optional field `deleteContentRange`
        if (data['deleteContentRange']) { // data not null
          DeleteContentRangeRequest.validateJSON(data['deleteContentRange']);
        }
        // validate the optional field `deleteFooter`
        if (data['deleteFooter']) { // data not null
          DeleteFooterRequest.validateJSON(data['deleteFooter']);
        }
        // validate the optional field `deleteHeader`
        if (data['deleteHeader']) { // data not null
          DeleteHeaderRequest.validateJSON(data['deleteHeader']);
        }
        // validate the optional field `deleteNamedRange`
        if (data['deleteNamedRange']) { // data not null
          DeleteNamedRangeRequest.validateJSON(data['deleteNamedRange']);
        }
        // validate the optional field `deleteParagraphBullets`
        if (data['deleteParagraphBullets']) { // data not null
          DeleteParagraphBulletsRequest.validateJSON(data['deleteParagraphBullets']);
        }
        // validate the optional field `deletePositionedObject`
        if (data['deletePositionedObject']) { // data not null
          DeletePositionedObjectRequest.validateJSON(data['deletePositionedObject']);
        }
        // validate the optional field `deleteTableColumn`
        if (data['deleteTableColumn']) { // data not null
          DeleteTableColumnRequest.validateJSON(data['deleteTableColumn']);
        }
        // validate the optional field `deleteTableRow`
        if (data['deleteTableRow']) { // data not null
          DeleteTableRowRequest.validateJSON(data['deleteTableRow']);
        }
        // validate the optional field `insertInlineImage`
        if (data['insertInlineImage']) { // data not null
          InsertInlineImageRequest.validateJSON(data['insertInlineImage']);
        }
        // validate the optional field `insertPageBreak`
        if (data['insertPageBreak']) { // data not null
          InsertPageBreakRequest.validateJSON(data['insertPageBreak']);
        }
        // validate the optional field `insertSectionBreak`
        if (data['insertSectionBreak']) { // data not null
          InsertSectionBreakRequest.validateJSON(data['insertSectionBreak']);
        }
        // validate the optional field `insertTable`
        if (data['insertTable']) { // data not null
          InsertTableRequest.validateJSON(data['insertTable']);
        }
        // validate the optional field `insertTableColumn`
        if (data['insertTableColumn']) { // data not null
          InsertTableColumnRequest.validateJSON(data['insertTableColumn']);
        }
        // validate the optional field `insertTableRow`
        if (data['insertTableRow']) { // data not null
          InsertTableRowRequest.validateJSON(data['insertTableRow']);
        }
        // validate the optional field `insertText`
        if (data['insertText']) { // data not null
          InsertTextRequest.validateJSON(data['insertText']);
        }
        // validate the optional field `mergeTableCells`
        if (data['mergeTableCells']) { // data not null
          MergeTableCellsRequest.validateJSON(data['mergeTableCells']);
        }
        // validate the optional field `pinTableHeaderRows`
        if (data['pinTableHeaderRows']) { // data not null
          PinTableHeaderRowsRequest.validateJSON(data['pinTableHeaderRows']);
        }
        // validate the optional field `replaceAllText`
        if (data['replaceAllText']) { // data not null
          ReplaceAllTextRequest.validateJSON(data['replaceAllText']);
        }
        // validate the optional field `replaceImage`
        if (data['replaceImage']) { // data not null
          ReplaceImageRequest.validateJSON(data['replaceImage']);
        }
        // validate the optional field `replaceNamedRangeContent`
        if (data['replaceNamedRangeContent']) { // data not null
          ReplaceNamedRangeContentRequest.validateJSON(data['replaceNamedRangeContent']);
        }
        // validate the optional field `unmergeTableCells`
        if (data['unmergeTableCells']) { // data not null
          UnmergeTableCellsRequest.validateJSON(data['unmergeTableCells']);
        }
        // validate the optional field `updateDocumentStyle`
        if (data['updateDocumentStyle']) { // data not null
          UpdateDocumentStyleRequest.validateJSON(data['updateDocumentStyle']);
        }
        // validate the optional field `updateParagraphStyle`
        if (data['updateParagraphStyle']) { // data not null
          UpdateParagraphStyleRequest.validateJSON(data['updateParagraphStyle']);
        }
        // validate the optional field `updateSectionStyle`
        if (data['updateSectionStyle']) { // data not null
          UpdateSectionStyleRequest.validateJSON(data['updateSectionStyle']);
        }
        // validate the optional field `updateTableCellStyle`
        if (data['updateTableCellStyle']) { // data not null
          UpdateTableCellStyleRequest.validateJSON(data['updateTableCellStyle']);
        }
        // validate the optional field `updateTableColumnProperties`
        if (data['updateTableColumnProperties']) { // data not null
          UpdateTableColumnPropertiesRequest.validateJSON(data['updateTableColumnProperties']);
        }
        // validate the optional field `updateTableRowStyle`
        if (data['updateTableRowStyle']) { // data not null
          UpdateTableRowStyleRequest.validateJSON(data['updateTableRowStyle']);
        }
        // validate the optional field `updateTextStyle`
        if (data['updateTextStyle']) { // data not null
          UpdateTextStyleRequest.validateJSON(data['updateTextStyle']);
        }

        return true;
    }


}



/**
 * @member {module:model/CreateFooterRequest} createFooter
 */
Request.prototype['createFooter'] = undefined;

/**
 * @member {module:model/CreateFootnoteRequest} createFootnote
 */
Request.prototype['createFootnote'] = undefined;

/**
 * @member {module:model/CreateHeaderRequest} createHeader
 */
Request.prototype['createHeader'] = undefined;

/**
 * @member {module:model/CreateNamedRangeRequest} createNamedRange
 */
Request.prototype['createNamedRange'] = undefined;

/**
 * @member {module:model/CreateParagraphBulletsRequest} createParagraphBullets
 */
Request.prototype['createParagraphBullets'] = undefined;

/**
 * @member {module:model/DeleteContentRangeRequest} deleteContentRange
 */
Request.prototype['deleteContentRange'] = undefined;

/**
 * @member {module:model/DeleteFooterRequest} deleteFooter
 */
Request.prototype['deleteFooter'] = undefined;

/**
 * @member {module:model/DeleteHeaderRequest} deleteHeader
 */
Request.prototype['deleteHeader'] = undefined;

/**
 * @member {module:model/DeleteNamedRangeRequest} deleteNamedRange
 */
Request.prototype['deleteNamedRange'] = undefined;

/**
 * @member {module:model/DeleteParagraphBulletsRequest} deleteParagraphBullets
 */
Request.prototype['deleteParagraphBullets'] = undefined;

/**
 * @member {module:model/DeletePositionedObjectRequest} deletePositionedObject
 */
Request.prototype['deletePositionedObject'] = undefined;

/**
 * @member {module:model/DeleteTableColumnRequest} deleteTableColumn
 */
Request.prototype['deleteTableColumn'] = undefined;

/**
 * @member {module:model/DeleteTableRowRequest} deleteTableRow
 */
Request.prototype['deleteTableRow'] = undefined;

/**
 * @member {module:model/InsertInlineImageRequest} insertInlineImage
 */
Request.prototype['insertInlineImage'] = undefined;

/**
 * @member {module:model/InsertPageBreakRequest} insertPageBreak
 */
Request.prototype['insertPageBreak'] = undefined;

/**
 * @member {module:model/InsertSectionBreakRequest} insertSectionBreak
 */
Request.prototype['insertSectionBreak'] = undefined;

/**
 * @member {module:model/InsertTableRequest} insertTable
 */
Request.prototype['insertTable'] = undefined;

/**
 * @member {module:model/InsertTableColumnRequest} insertTableColumn
 */
Request.prototype['insertTableColumn'] = undefined;

/**
 * @member {module:model/InsertTableRowRequest} insertTableRow
 */
Request.prototype['insertTableRow'] = undefined;

/**
 * @member {module:model/InsertTextRequest} insertText
 */
Request.prototype['insertText'] = undefined;

/**
 * @member {module:model/MergeTableCellsRequest} mergeTableCells
 */
Request.prototype['mergeTableCells'] = undefined;

/**
 * @member {module:model/PinTableHeaderRowsRequest} pinTableHeaderRows
 */
Request.prototype['pinTableHeaderRows'] = undefined;

/**
 * @member {module:model/ReplaceAllTextRequest} replaceAllText
 */
Request.prototype['replaceAllText'] = undefined;

/**
 * @member {module:model/ReplaceImageRequest} replaceImage
 */
Request.prototype['replaceImage'] = undefined;

/**
 * @member {module:model/ReplaceNamedRangeContentRequest} replaceNamedRangeContent
 */
Request.prototype['replaceNamedRangeContent'] = undefined;

/**
 * @member {module:model/UnmergeTableCellsRequest} unmergeTableCells
 */
Request.prototype['unmergeTableCells'] = undefined;

/**
 * @member {module:model/UpdateDocumentStyleRequest} updateDocumentStyle
 */
Request.prototype['updateDocumentStyle'] = undefined;

/**
 * @member {module:model/UpdateParagraphStyleRequest} updateParagraphStyle
 */
Request.prototype['updateParagraphStyle'] = undefined;

/**
 * @member {module:model/UpdateSectionStyleRequest} updateSectionStyle
 */
Request.prototype['updateSectionStyle'] = undefined;

/**
 * @member {module:model/UpdateTableCellStyleRequest} updateTableCellStyle
 */
Request.prototype['updateTableCellStyle'] = undefined;

/**
 * @member {module:model/UpdateTableColumnPropertiesRequest} updateTableColumnProperties
 */
Request.prototype['updateTableColumnProperties'] = undefined;

/**
 * @member {module:model/UpdateTableRowStyleRequest} updateTableRowStyle
 */
Request.prototype['updateTableRowStyle'] = undefined;

/**
 * @member {module:model/UpdateTextStyleRequest} updateTextStyle
 */
Request.prototype['updateTextStyle'] = undefined;






export default Request;

