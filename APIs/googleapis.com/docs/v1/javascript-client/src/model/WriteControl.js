/**
 * Google Docs API
 * Reads and writes Google Docs documents.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The WriteControl model module.
 * @module model/WriteControl
 * @version v1
 */
class WriteControl {
    /**
     * Constructs a new <code>WriteControl</code>.
     * Provides control over how write requests are executed.
     * @alias module:model/WriteControl
     */
    constructor() { 
        
        WriteControl.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>WriteControl</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/WriteControl} obj Optional instance to populate.
     * @return {module:model/WriteControl} The populated <code>WriteControl</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new WriteControl();

            if (data.hasOwnProperty('requiredRevisionId')) {
                obj['requiredRevisionId'] = ApiClient.convertToType(data['requiredRevisionId'], 'String');
            }
            if (data.hasOwnProperty('targetRevisionId')) {
                obj['targetRevisionId'] = ApiClient.convertToType(data['targetRevisionId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>WriteControl</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>WriteControl</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['requiredRevisionId'] && !(typeof data['requiredRevisionId'] === 'string' || data['requiredRevisionId'] instanceof String)) {
            throw new Error("Expected the field `requiredRevisionId` to be a primitive type in the JSON string but got " + data['requiredRevisionId']);
        }
        // ensure the json data is a string
        if (data['targetRevisionId'] && !(typeof data['targetRevisionId'] === 'string' || data['targetRevisionId'] instanceof String)) {
            throw new Error("Expected the field `targetRevisionId` to be a primitive type in the JSON string but got " + data['targetRevisionId']);
        }

        return true;
    }


}



/**
 * The optional revision ID of the document the write request is applied to. If this is not the latest revision of the document, the request is not processed and returns a 400 bad request error. When a required revision ID is returned in a response, it indicates the revision ID of the document after the request was applied.
 * @member {String} requiredRevisionId
 */
WriteControl.prototype['requiredRevisionId'] = undefined;

/**
 * The optional target revision ID of the document the write request is applied to. If collaborator changes have occurred after the document was read using the API, the changes produced by this write request are applied against the collaborator changes. This results in a new revision of the document that incorporates both the collaborator changes and the changes in the request, with the Docs server resolving conflicting changes. When using target revision ID, the API client can be thought of as another collaborator of the document. The target revision ID can only be used to write to recent versions of a document. If the target revision is too far behind the latest revision, the request is not processed and returns a 400 bad request error. The request should be tried again after retrieving the latest version of the document. Usually a revision ID remains valid for use as a target revision for several minutes after it's read, but for frequently edited documents this window might be shorter.
 * @member {String} targetRevisionId
 */
WriteControl.prototype['targetRevisionId'] = undefined;






export default WriteControl;

