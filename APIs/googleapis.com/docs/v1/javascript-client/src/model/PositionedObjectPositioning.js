/**
 * Google Docs API
 * Reads and writes Google Docs documents.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Dimension from './Dimension';

/**
 * The PositionedObjectPositioning model module.
 * @module model/PositionedObjectPositioning
 * @version v1
 */
class PositionedObjectPositioning {
    /**
     * Constructs a new <code>PositionedObjectPositioning</code>.
     * The positioning of a PositionedObject. The positioned object is positioned relative to the beginning of the Paragraph it&#39;s tethered to.
     * @alias module:model/PositionedObjectPositioning
     */
    constructor() { 
        
        PositionedObjectPositioning.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PositionedObjectPositioning</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PositionedObjectPositioning} obj Optional instance to populate.
     * @return {module:model/PositionedObjectPositioning} The populated <code>PositionedObjectPositioning</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PositionedObjectPositioning();

            if (data.hasOwnProperty('layout')) {
                obj['layout'] = ApiClient.convertToType(data['layout'], 'String');
            }
            if (data.hasOwnProperty('leftOffset')) {
                obj['leftOffset'] = Dimension.constructFromObject(data['leftOffset']);
            }
            if (data.hasOwnProperty('topOffset')) {
                obj['topOffset'] = Dimension.constructFromObject(data['topOffset']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PositionedObjectPositioning</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PositionedObjectPositioning</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['layout'] && !(typeof data['layout'] === 'string' || data['layout'] instanceof String)) {
            throw new Error("Expected the field `layout` to be a primitive type in the JSON string but got " + data['layout']);
        }
        // validate the optional field `leftOffset`
        if (data['leftOffset']) { // data not null
          Dimension.validateJSON(data['leftOffset']);
        }
        // validate the optional field `topOffset`
        if (data['topOffset']) { // data not null
          Dimension.validateJSON(data['topOffset']);
        }

        return true;
    }


}



/**
 * The layout of this positioned object.
 * @member {module:model/PositionedObjectPositioning.LayoutEnum} layout
 */
PositionedObjectPositioning.prototype['layout'] = undefined;

/**
 * @member {module:model/Dimension} leftOffset
 */
PositionedObjectPositioning.prototype['leftOffset'] = undefined;

/**
 * @member {module:model/Dimension} topOffset
 */
PositionedObjectPositioning.prototype['topOffset'] = undefined;





/**
 * Allowed values for the <code>layout</code> property.
 * @enum {String}
 * @readonly
 */
PositionedObjectPositioning['LayoutEnum'] = {

    /**
     * value: "POSITIONED_OBJECT_LAYOUT_UNSPECIFIED"
     * @const
     */
    "POSITIONED_OBJECT_LAYOUT_UNSPECIFIED": "POSITIONED_OBJECT_LAYOUT_UNSPECIFIED",

    /**
     * value: "WRAP_TEXT"
     * @const
     */
    "WRAP_TEXT": "WRAP_TEXT",

    /**
     * value: "BREAK_LEFT"
     * @const
     */
    "BREAK_LEFT": "BREAK_LEFT",

    /**
     * value: "BREAK_RIGHT"
     * @const
     */
    "BREAK_RIGHT": "BREAK_RIGHT",

    /**
     * value: "BREAK_LEFT_RIGHT"
     * @const
     */
    "BREAK_LEFT_RIGHT": "BREAK_LEFT_RIGHT",

    /**
     * value: "IN_FRONT_OF_TEXT"
     * @const
     */
    "IN_FRONT_OF_TEXT": "IN_FRONT_OF_TEXT",

    /**
     * value: "BEHIND_TEXT"
     * @const
     */
    "BEHIND_TEXT": "BEHIND_TEXT"
};



export default PositionedObjectPositioning;

