/**
 * Google Docs API
 * Reads and writes Google Docs documents.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Dimension from './Dimension';
import SectionColumnProperties from './SectionColumnProperties';

/**
 * The SectionStyle model module.
 * @module model/SectionStyle
 * @version v1
 */
class SectionStyle {
    /**
     * Constructs a new <code>SectionStyle</code>.
     * The styling that applies to a section.
     * @alias module:model/SectionStyle
     */
    constructor() { 
        
        SectionStyle.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SectionStyle</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SectionStyle} obj Optional instance to populate.
     * @return {module:model/SectionStyle} The populated <code>SectionStyle</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SectionStyle();

            if (data.hasOwnProperty('columnProperties')) {
                obj['columnProperties'] = ApiClient.convertToType(data['columnProperties'], [SectionColumnProperties]);
            }
            if (data.hasOwnProperty('columnSeparatorStyle')) {
                obj['columnSeparatorStyle'] = ApiClient.convertToType(data['columnSeparatorStyle'], 'String');
            }
            if (data.hasOwnProperty('contentDirection')) {
                obj['contentDirection'] = ApiClient.convertToType(data['contentDirection'], 'String');
            }
            if (data.hasOwnProperty('defaultFooterId')) {
                obj['defaultFooterId'] = ApiClient.convertToType(data['defaultFooterId'], 'String');
            }
            if (data.hasOwnProperty('defaultHeaderId')) {
                obj['defaultHeaderId'] = ApiClient.convertToType(data['defaultHeaderId'], 'String');
            }
            if (data.hasOwnProperty('evenPageFooterId')) {
                obj['evenPageFooterId'] = ApiClient.convertToType(data['evenPageFooterId'], 'String');
            }
            if (data.hasOwnProperty('evenPageHeaderId')) {
                obj['evenPageHeaderId'] = ApiClient.convertToType(data['evenPageHeaderId'], 'String');
            }
            if (data.hasOwnProperty('firstPageFooterId')) {
                obj['firstPageFooterId'] = ApiClient.convertToType(data['firstPageFooterId'], 'String');
            }
            if (data.hasOwnProperty('firstPageHeaderId')) {
                obj['firstPageHeaderId'] = ApiClient.convertToType(data['firstPageHeaderId'], 'String');
            }
            if (data.hasOwnProperty('flipPageOrientation')) {
                obj['flipPageOrientation'] = ApiClient.convertToType(data['flipPageOrientation'], 'Boolean');
            }
            if (data.hasOwnProperty('marginBottom')) {
                obj['marginBottom'] = Dimension.constructFromObject(data['marginBottom']);
            }
            if (data.hasOwnProperty('marginFooter')) {
                obj['marginFooter'] = Dimension.constructFromObject(data['marginFooter']);
            }
            if (data.hasOwnProperty('marginHeader')) {
                obj['marginHeader'] = Dimension.constructFromObject(data['marginHeader']);
            }
            if (data.hasOwnProperty('marginLeft')) {
                obj['marginLeft'] = Dimension.constructFromObject(data['marginLeft']);
            }
            if (data.hasOwnProperty('marginRight')) {
                obj['marginRight'] = Dimension.constructFromObject(data['marginRight']);
            }
            if (data.hasOwnProperty('marginTop')) {
                obj['marginTop'] = Dimension.constructFromObject(data['marginTop']);
            }
            if (data.hasOwnProperty('pageNumberStart')) {
                obj['pageNumberStart'] = ApiClient.convertToType(data['pageNumberStart'], 'Number');
            }
            if (data.hasOwnProperty('sectionType')) {
                obj['sectionType'] = ApiClient.convertToType(data['sectionType'], 'String');
            }
            if (data.hasOwnProperty('useFirstPageHeaderFooter')) {
                obj['useFirstPageHeaderFooter'] = ApiClient.convertToType(data['useFirstPageHeaderFooter'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SectionStyle</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SectionStyle</code>.
     */
    static validateJSON(data) {
        if (data['columnProperties']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['columnProperties'])) {
                throw new Error("Expected the field `columnProperties` to be an array in the JSON data but got " + data['columnProperties']);
            }
            // validate the optional field `columnProperties` (array)
            for (const item of data['columnProperties']) {
                SectionColumnProperties.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['columnSeparatorStyle'] && !(typeof data['columnSeparatorStyle'] === 'string' || data['columnSeparatorStyle'] instanceof String)) {
            throw new Error("Expected the field `columnSeparatorStyle` to be a primitive type in the JSON string but got " + data['columnSeparatorStyle']);
        }
        // ensure the json data is a string
        if (data['contentDirection'] && !(typeof data['contentDirection'] === 'string' || data['contentDirection'] instanceof String)) {
            throw new Error("Expected the field `contentDirection` to be a primitive type in the JSON string but got " + data['contentDirection']);
        }
        // ensure the json data is a string
        if (data['defaultFooterId'] && !(typeof data['defaultFooterId'] === 'string' || data['defaultFooterId'] instanceof String)) {
            throw new Error("Expected the field `defaultFooterId` to be a primitive type in the JSON string but got " + data['defaultFooterId']);
        }
        // ensure the json data is a string
        if (data['defaultHeaderId'] && !(typeof data['defaultHeaderId'] === 'string' || data['defaultHeaderId'] instanceof String)) {
            throw new Error("Expected the field `defaultHeaderId` to be a primitive type in the JSON string but got " + data['defaultHeaderId']);
        }
        // ensure the json data is a string
        if (data['evenPageFooterId'] && !(typeof data['evenPageFooterId'] === 'string' || data['evenPageFooterId'] instanceof String)) {
            throw new Error("Expected the field `evenPageFooterId` to be a primitive type in the JSON string but got " + data['evenPageFooterId']);
        }
        // ensure the json data is a string
        if (data['evenPageHeaderId'] && !(typeof data['evenPageHeaderId'] === 'string' || data['evenPageHeaderId'] instanceof String)) {
            throw new Error("Expected the field `evenPageHeaderId` to be a primitive type in the JSON string but got " + data['evenPageHeaderId']);
        }
        // ensure the json data is a string
        if (data['firstPageFooterId'] && !(typeof data['firstPageFooterId'] === 'string' || data['firstPageFooterId'] instanceof String)) {
            throw new Error("Expected the field `firstPageFooterId` to be a primitive type in the JSON string but got " + data['firstPageFooterId']);
        }
        // ensure the json data is a string
        if (data['firstPageHeaderId'] && !(typeof data['firstPageHeaderId'] === 'string' || data['firstPageHeaderId'] instanceof String)) {
            throw new Error("Expected the field `firstPageHeaderId` to be a primitive type in the JSON string but got " + data['firstPageHeaderId']);
        }
        // validate the optional field `marginBottom`
        if (data['marginBottom']) { // data not null
          Dimension.validateJSON(data['marginBottom']);
        }
        // validate the optional field `marginFooter`
        if (data['marginFooter']) { // data not null
          Dimension.validateJSON(data['marginFooter']);
        }
        // validate the optional field `marginHeader`
        if (data['marginHeader']) { // data not null
          Dimension.validateJSON(data['marginHeader']);
        }
        // validate the optional field `marginLeft`
        if (data['marginLeft']) { // data not null
          Dimension.validateJSON(data['marginLeft']);
        }
        // validate the optional field `marginRight`
        if (data['marginRight']) { // data not null
          Dimension.validateJSON(data['marginRight']);
        }
        // validate the optional field `marginTop`
        if (data['marginTop']) { // data not null
          Dimension.validateJSON(data['marginTop']);
        }
        // ensure the json data is a string
        if (data['sectionType'] && !(typeof data['sectionType'] === 'string' || data['sectionType'] instanceof String)) {
            throw new Error("Expected the field `sectionType` to be a primitive type in the JSON string but got " + data['sectionType']);
        }

        return true;
    }


}



/**
 * The section's columns properties. If empty, the section contains one column with the default properties in the Docs editor. A section can be updated to have no more than 3 columns. When updating this property, setting a concrete value is required. Unsetting this property will result in a 400 bad request error.
 * @member {Array.<module:model/SectionColumnProperties>} columnProperties
 */
SectionStyle.prototype['columnProperties'] = undefined;

/**
 * The style of column separators. This style can be set even when there's one column in the section. When updating this property, setting a concrete value is required. Unsetting this property results in a 400 bad request error.
 * @member {module:model/SectionStyle.ColumnSeparatorStyleEnum} columnSeparatorStyle
 */
SectionStyle.prototype['columnSeparatorStyle'] = undefined;

/**
 * The content direction of this section. If unset, the value defaults to LEFT_TO_RIGHT. When updating this property, setting a concrete value is required. Unsetting this property results in a 400 bad request error.
 * @member {module:model/SectionStyle.ContentDirectionEnum} contentDirection
 */
SectionStyle.prototype['contentDirection'] = undefined;

/**
 * The ID of the default footer. If unset, the value inherits from the previous SectionBreak's SectionStyle. If the value is unset in the first SectionBreak, it inherits from DocumentStyle's default_footer_id. This property is read-only.
 * @member {String} defaultFooterId
 */
SectionStyle.prototype['defaultFooterId'] = undefined;

/**
 * The ID of the default header. If unset, the value inherits from the previous SectionBreak's SectionStyle. If the value is unset in the first SectionBreak, it inherits from DocumentStyle's default_header_id. This property is read-only.
 * @member {String} defaultHeaderId
 */
SectionStyle.prototype['defaultHeaderId'] = undefined;

/**
 * The ID of the footer used only for even pages. If the value of DocumentStyle's use_even_page_header_footer is true, this value is used for the footers on even pages in the section. If it is false, the footers on even pages use the default_footer_id. If unset, the value inherits from the previous SectionBreak's SectionStyle. If the value is unset in the first SectionBreak, it inherits from DocumentStyle's even_page_footer_id. This property is read-only.
 * @member {String} evenPageFooterId
 */
SectionStyle.prototype['evenPageFooterId'] = undefined;

/**
 * The ID of the header used only for even pages. If the value of DocumentStyle's use_even_page_header_footer is true, this value is used for the headers on even pages in the section. If it is false, the headers on even pages use the default_header_id. If unset, the value inherits from the previous SectionBreak's SectionStyle. If the value is unset in the first SectionBreak, it inherits from DocumentStyle's even_page_header_id. This property is read-only.
 * @member {String} evenPageHeaderId
 */
SectionStyle.prototype['evenPageHeaderId'] = undefined;

/**
 * The ID of the footer used only for the first page of the section. If use_first_page_header_footer is true, this value is used for the footer on the first page of the section. If it's false, the footer on the first page of the section uses the default_footer_id. If unset, the value inherits from the previous SectionBreak's SectionStyle. If the value is unset in the first SectionBreak, it inherits from DocumentStyle's first_page_footer_id. This property is read-only.
 * @member {String} firstPageFooterId
 */
SectionStyle.prototype['firstPageFooterId'] = undefined;

/**
 * The ID of the header used only for the first page of the section. If use_first_page_header_footer is true, this value is used for the header on the first page of the section. If it's false, the header on the first page of the section uses the default_header_id. If unset, the value inherits from the previous SectionBreak's SectionStyle. If the value is unset in the first SectionBreak, it inherits from DocumentStyle's first_page_header_id. This property is read-only.
 * @member {String} firstPageHeaderId
 */
SectionStyle.prototype['firstPageHeaderId'] = undefined;

/**
 * Optional. Indicates whether to flip the dimensions of DocumentStyle's page_size for this section, which allows changing the page orientation between portrait and landscape. If unset, the value inherits from DocumentStyle's flip_page_orientation. When updating this property, setting a concrete value is required. Unsetting this property results in a 400 bad request error.
 * @member {Boolean} flipPageOrientation
 */
SectionStyle.prototype['flipPageOrientation'] = undefined;

/**
 * @member {module:model/Dimension} marginBottom
 */
SectionStyle.prototype['marginBottom'] = undefined;

/**
 * @member {module:model/Dimension} marginFooter
 */
SectionStyle.prototype['marginFooter'] = undefined;

/**
 * @member {module:model/Dimension} marginHeader
 */
SectionStyle.prototype['marginHeader'] = undefined;

/**
 * @member {module:model/Dimension} marginLeft
 */
SectionStyle.prototype['marginLeft'] = undefined;

/**
 * @member {module:model/Dimension} marginRight
 */
SectionStyle.prototype['marginRight'] = undefined;

/**
 * @member {module:model/Dimension} marginTop
 */
SectionStyle.prototype['marginTop'] = undefined;

/**
 * The page number from which to start counting the number of pages for this section. If unset, page numbering continues from the previous section. If the value is unset in the first SectionBreak, refer to DocumentStyle's page_number_start. When updating this property, setting a concrete value is required. Unsetting this property results in a 400 bad request error.
 * @member {Number} pageNumberStart
 */
SectionStyle.prototype['pageNumberStart'] = undefined;

/**
 * Output only. The type of section.
 * @member {module:model/SectionStyle.SectionTypeEnum} sectionType
 */
SectionStyle.prototype['sectionType'] = undefined;

/**
 * Indicates whether to use the first page header / footer IDs for the first page of the section. If unset, it inherits from DocumentStyle's use_first_page_header_footer for the first section. If the value is unset for subsequent sectors, it should be interpreted as false. When updating this property, setting a concrete value is required. Unsetting this property results in a 400 bad request error.
 * @member {Boolean} useFirstPageHeaderFooter
 */
SectionStyle.prototype['useFirstPageHeaderFooter'] = undefined;





/**
 * Allowed values for the <code>columnSeparatorStyle</code> property.
 * @enum {String}
 * @readonly
 */
SectionStyle['ColumnSeparatorStyleEnum'] = {

    /**
     * value: "COLUMN_SEPARATOR_STYLE_UNSPECIFIED"
     * @const
     */
    "COLUMN_SEPARATOR_STYLE_UNSPECIFIED": "COLUMN_SEPARATOR_STYLE_UNSPECIFIED",

    /**
     * value: "NONE"
     * @const
     */
    "NONE": "NONE",

    /**
     * value: "BETWEEN_EACH_COLUMN"
     * @const
     */
    "BETWEEN_EACH_COLUMN": "BETWEEN_EACH_COLUMN"
};


/**
 * Allowed values for the <code>contentDirection</code> property.
 * @enum {String}
 * @readonly
 */
SectionStyle['ContentDirectionEnum'] = {

    /**
     * value: "CONTENT_DIRECTION_UNSPECIFIED"
     * @const
     */
    "CONTENT_DIRECTION_UNSPECIFIED": "CONTENT_DIRECTION_UNSPECIFIED",

    /**
     * value: "LEFT_TO_RIGHT"
     * @const
     */
    "LEFT_TO_RIGHT": "LEFT_TO_RIGHT",

    /**
     * value: "RIGHT_TO_LEFT"
     * @const
     */
    "RIGHT_TO_LEFT": "RIGHT_TO_LEFT"
};


/**
 * Allowed values for the <code>sectionType</code> property.
 * @enum {String}
 * @readonly
 */
SectionStyle['SectionTypeEnum'] = {

    /**
     * value: "SECTION_TYPE_UNSPECIFIED"
     * @const
     */
    "SECTION_TYPE_UNSPECIFIED": "SECTION_TYPE_UNSPECIFIED",

    /**
     * value: "CONTINUOUS"
     * @const
     */
    "CONTINUOUS": "CONTINUOUS",

    /**
     * value: "NEXT_PAGE"
     * @const
     */
    "NEXT_PAGE": "NEXT_PAGE"
};



export default SectionStyle;

