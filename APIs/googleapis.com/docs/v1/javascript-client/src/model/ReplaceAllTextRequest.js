/**
 * Google Docs API
 * Reads and writes Google Docs documents.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SubstringMatchCriteria from './SubstringMatchCriteria';

/**
 * The ReplaceAllTextRequest model module.
 * @module model/ReplaceAllTextRequest
 * @version v1
 */
class ReplaceAllTextRequest {
    /**
     * Constructs a new <code>ReplaceAllTextRequest</code>.
     * Replaces all instances of text matching a criteria with replace text.
     * @alias module:model/ReplaceAllTextRequest
     */
    constructor() { 
        
        ReplaceAllTextRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ReplaceAllTextRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ReplaceAllTextRequest} obj Optional instance to populate.
     * @return {module:model/ReplaceAllTextRequest} The populated <code>ReplaceAllTextRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ReplaceAllTextRequest();

            if (data.hasOwnProperty('containsText')) {
                obj['containsText'] = SubstringMatchCriteria.constructFromObject(data['containsText']);
            }
            if (data.hasOwnProperty('replaceText')) {
                obj['replaceText'] = ApiClient.convertToType(data['replaceText'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ReplaceAllTextRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ReplaceAllTextRequest</code>.
     */
    static validateJSON(data) {
        // validate the optional field `containsText`
        if (data['containsText']) { // data not null
          SubstringMatchCriteria.validateJSON(data['containsText']);
        }
        // ensure the json data is a string
        if (data['replaceText'] && !(typeof data['replaceText'] === 'string' || data['replaceText'] instanceof String)) {
            throw new Error("Expected the field `replaceText` to be a primitive type in the JSON string but got " + data['replaceText']);
        }

        return true;
    }


}



/**
 * @member {module:model/SubstringMatchCriteria} containsText
 */
ReplaceAllTextRequest.prototype['containsText'] = undefined;

/**
 * The text that will replace the matched text.
 * @member {String} replaceText
 */
ReplaceAllTextRequest.prototype['replaceText'] = undefined;






export default ReplaceAllTextRequest;

