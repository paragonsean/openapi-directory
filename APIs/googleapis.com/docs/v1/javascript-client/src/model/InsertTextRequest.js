/**
 * Google Docs API
 * Reads and writes Google Docs documents.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EndOfSegmentLocation from './EndOfSegmentLocation';
import Location from './Location';

/**
 * The InsertTextRequest model module.
 * @module model/InsertTextRequest
 * @version v1
 */
class InsertTextRequest {
    /**
     * Constructs a new <code>InsertTextRequest</code>.
     * Inserts text at the specified location.
     * @alias module:model/InsertTextRequest
     */
    constructor() { 
        
        InsertTextRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>InsertTextRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/InsertTextRequest} obj Optional instance to populate.
     * @return {module:model/InsertTextRequest} The populated <code>InsertTextRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new InsertTextRequest();

            if (data.hasOwnProperty('endOfSegmentLocation')) {
                obj['endOfSegmentLocation'] = EndOfSegmentLocation.constructFromObject(data['endOfSegmentLocation']);
            }
            if (data.hasOwnProperty('location')) {
                obj['location'] = Location.constructFromObject(data['location']);
            }
            if (data.hasOwnProperty('text')) {
                obj['text'] = ApiClient.convertToType(data['text'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>InsertTextRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>InsertTextRequest</code>.
     */
    static validateJSON(data) {
        // validate the optional field `endOfSegmentLocation`
        if (data['endOfSegmentLocation']) { // data not null
          EndOfSegmentLocation.validateJSON(data['endOfSegmentLocation']);
        }
        // validate the optional field `location`
        if (data['location']) { // data not null
          Location.validateJSON(data['location']);
        }
        // ensure the json data is a string
        if (data['text'] && !(typeof data['text'] === 'string' || data['text'] instanceof String)) {
            throw new Error("Expected the field `text` to be a primitive type in the JSON string but got " + data['text']);
        }

        return true;
    }


}



/**
 * @member {module:model/EndOfSegmentLocation} endOfSegmentLocation
 */
InsertTextRequest.prototype['endOfSegmentLocation'] = undefined;

/**
 * @member {module:model/Location} location
 */
InsertTextRequest.prototype['location'] = undefined;

/**
 * The text to be inserted. Inserting a newline character will implicitly create a new Paragraph at that index. The paragraph style of the new paragraph will be copied from the paragraph at the current insertion index, including lists and bullets. Text styles for inserted text will be determined automatically, generally preserving the styling of neighboring text. In most cases, the text style for the inserted text will match the text immediately before the insertion index. Some control characters (U+0000-U+0008, U+000C-U+001F) and characters from the Unicode Basic Multilingual Plane Private Use Area (U+E000-U+F8FF) will be stripped out of the inserted text.
 * @member {String} text
 */
InsertTextRequest.prototype['text'] = undefined;






export default InsertTextRequest;

