/**
 * Google Docs API
 * Reads and writes Google Docs documents.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CropProperties model module.
 * @module model/CropProperties
 * @version v1
 */
class CropProperties {
    /**
     * Constructs a new <code>CropProperties</code>.
     * The crop properties of an image. The crop rectangle is represented using fractional offsets from the original content&#39;s 4 edges. - If the offset is in the interval (0, 1), the corresponding edge of crop rectangle is positioned inside of the image&#39;s original bounding rectangle. - If the offset is negative or greater than 1, the corresponding edge of crop rectangle is positioned outside of the image&#39;s original bounding rectangle. - If all offsets and rotation angle are 0, the image is not cropped.
     * @alias module:model/CropProperties
     */
    constructor() { 
        
        CropProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CropProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CropProperties} obj Optional instance to populate.
     * @return {module:model/CropProperties} The populated <code>CropProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CropProperties();

            if (data.hasOwnProperty('angle')) {
                obj['angle'] = ApiClient.convertToType(data['angle'], 'Number');
            }
            if (data.hasOwnProperty('offsetBottom')) {
                obj['offsetBottom'] = ApiClient.convertToType(data['offsetBottom'], 'Number');
            }
            if (data.hasOwnProperty('offsetLeft')) {
                obj['offsetLeft'] = ApiClient.convertToType(data['offsetLeft'], 'Number');
            }
            if (data.hasOwnProperty('offsetRight')) {
                obj['offsetRight'] = ApiClient.convertToType(data['offsetRight'], 'Number');
            }
            if (data.hasOwnProperty('offsetTop')) {
                obj['offsetTop'] = ApiClient.convertToType(data['offsetTop'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CropProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CropProperties</code>.
     */
    static validateJSON(data) {

        return true;
    }


}



/**
 * The clockwise rotation angle of the crop rectangle around its center, in radians. Rotation is applied after the offsets.
 * @member {Number} angle
 */
CropProperties.prototype['angle'] = undefined;

/**
 * The offset specifies how far inwards the bottom edge of the crop rectangle is from the bottom edge of the original content as a fraction of the original content's height.
 * @member {Number} offsetBottom
 */
CropProperties.prototype['offsetBottom'] = undefined;

/**
 * The offset specifies how far inwards the left edge of the crop rectangle is from the left edge of the original content as a fraction of the original content's width.
 * @member {Number} offsetLeft
 */
CropProperties.prototype['offsetLeft'] = undefined;

/**
 * The offset specifies how far inwards the right edge of the crop rectangle is from the right edge of the original content as a fraction of the original content's width.
 * @member {Number} offsetRight
 */
CropProperties.prototype['offsetRight'] = undefined;

/**
 * The offset specifies how far inwards the top edge of the crop rectangle is from the top edge of the original content as a fraction of the original content's height.
 * @member {Number} offsetTop
 */
CropProperties.prototype['offsetTop'] = undefined;






export default CropProperties;

