/**
 * Google Docs API
 * Reads and writes Google Docs documents.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Dimension from './Dimension';
import OptionalColor from './OptionalColor';
import TableCellBorder from './TableCellBorder';

/**
 * The TableCellStyle model module.
 * @module model/TableCellStyle
 * @version v1
 */
class TableCellStyle {
    /**
     * Constructs a new <code>TableCellStyle</code>.
     * The style of a TableCell. Inherited table cell styles are represented as unset fields in this message. A table cell style can inherit from the table&#39;s style.
     * @alias module:model/TableCellStyle
     */
    constructor() { 
        
        TableCellStyle.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TableCellStyle</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TableCellStyle} obj Optional instance to populate.
     * @return {module:model/TableCellStyle} The populated <code>TableCellStyle</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TableCellStyle();

            if (data.hasOwnProperty('backgroundColor')) {
                obj['backgroundColor'] = OptionalColor.constructFromObject(data['backgroundColor']);
            }
            if (data.hasOwnProperty('borderBottom')) {
                obj['borderBottom'] = TableCellBorder.constructFromObject(data['borderBottom']);
            }
            if (data.hasOwnProperty('borderLeft')) {
                obj['borderLeft'] = TableCellBorder.constructFromObject(data['borderLeft']);
            }
            if (data.hasOwnProperty('borderRight')) {
                obj['borderRight'] = TableCellBorder.constructFromObject(data['borderRight']);
            }
            if (data.hasOwnProperty('borderTop')) {
                obj['borderTop'] = TableCellBorder.constructFromObject(data['borderTop']);
            }
            if (data.hasOwnProperty('columnSpan')) {
                obj['columnSpan'] = ApiClient.convertToType(data['columnSpan'], 'Number');
            }
            if (data.hasOwnProperty('contentAlignment')) {
                obj['contentAlignment'] = ApiClient.convertToType(data['contentAlignment'], 'String');
            }
            if (data.hasOwnProperty('paddingBottom')) {
                obj['paddingBottom'] = Dimension.constructFromObject(data['paddingBottom']);
            }
            if (data.hasOwnProperty('paddingLeft')) {
                obj['paddingLeft'] = Dimension.constructFromObject(data['paddingLeft']);
            }
            if (data.hasOwnProperty('paddingRight')) {
                obj['paddingRight'] = Dimension.constructFromObject(data['paddingRight']);
            }
            if (data.hasOwnProperty('paddingTop')) {
                obj['paddingTop'] = Dimension.constructFromObject(data['paddingTop']);
            }
            if (data.hasOwnProperty('rowSpan')) {
                obj['rowSpan'] = ApiClient.convertToType(data['rowSpan'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TableCellStyle</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TableCellStyle</code>.
     */
    static validateJSON(data) {
        // validate the optional field `backgroundColor`
        if (data['backgroundColor']) { // data not null
          OptionalColor.validateJSON(data['backgroundColor']);
        }
        // validate the optional field `borderBottom`
        if (data['borderBottom']) { // data not null
          TableCellBorder.validateJSON(data['borderBottom']);
        }
        // validate the optional field `borderLeft`
        if (data['borderLeft']) { // data not null
          TableCellBorder.validateJSON(data['borderLeft']);
        }
        // validate the optional field `borderRight`
        if (data['borderRight']) { // data not null
          TableCellBorder.validateJSON(data['borderRight']);
        }
        // validate the optional field `borderTop`
        if (data['borderTop']) { // data not null
          TableCellBorder.validateJSON(data['borderTop']);
        }
        // ensure the json data is a string
        if (data['contentAlignment'] && !(typeof data['contentAlignment'] === 'string' || data['contentAlignment'] instanceof String)) {
            throw new Error("Expected the field `contentAlignment` to be a primitive type in the JSON string but got " + data['contentAlignment']);
        }
        // validate the optional field `paddingBottom`
        if (data['paddingBottom']) { // data not null
          Dimension.validateJSON(data['paddingBottom']);
        }
        // validate the optional field `paddingLeft`
        if (data['paddingLeft']) { // data not null
          Dimension.validateJSON(data['paddingLeft']);
        }
        // validate the optional field `paddingRight`
        if (data['paddingRight']) { // data not null
          Dimension.validateJSON(data['paddingRight']);
        }
        // validate the optional field `paddingTop`
        if (data['paddingTop']) { // data not null
          Dimension.validateJSON(data['paddingTop']);
        }

        return true;
    }


}



/**
 * @member {module:model/OptionalColor} backgroundColor
 */
TableCellStyle.prototype['backgroundColor'] = undefined;

/**
 * @member {module:model/TableCellBorder} borderBottom
 */
TableCellStyle.prototype['borderBottom'] = undefined;

/**
 * @member {module:model/TableCellBorder} borderLeft
 */
TableCellStyle.prototype['borderLeft'] = undefined;

/**
 * @member {module:model/TableCellBorder} borderRight
 */
TableCellStyle.prototype['borderRight'] = undefined;

/**
 * @member {module:model/TableCellBorder} borderTop
 */
TableCellStyle.prototype['borderTop'] = undefined;

/**
 * The column span of the cell. This property is read-only.
 * @member {Number} columnSpan
 */
TableCellStyle.prototype['columnSpan'] = undefined;

/**
 * The alignment of the content in the table cell. The default alignment matches the alignment for newly created table cells in the Docs editor.
 * @member {module:model/TableCellStyle.ContentAlignmentEnum} contentAlignment
 */
TableCellStyle.prototype['contentAlignment'] = undefined;

/**
 * @member {module:model/Dimension} paddingBottom
 */
TableCellStyle.prototype['paddingBottom'] = undefined;

/**
 * @member {module:model/Dimension} paddingLeft
 */
TableCellStyle.prototype['paddingLeft'] = undefined;

/**
 * @member {module:model/Dimension} paddingRight
 */
TableCellStyle.prototype['paddingRight'] = undefined;

/**
 * @member {module:model/Dimension} paddingTop
 */
TableCellStyle.prototype['paddingTop'] = undefined;

/**
 * The row span of the cell. This property is read-only.
 * @member {Number} rowSpan
 */
TableCellStyle.prototype['rowSpan'] = undefined;





/**
 * Allowed values for the <code>contentAlignment</code> property.
 * @enum {String}
 * @readonly
 */
TableCellStyle['ContentAlignmentEnum'] = {

    /**
     * value: "CONTENT_ALIGNMENT_UNSPECIFIED"
     * @const
     */
    "CONTENT_ALIGNMENT_UNSPECIFIED": "CONTENT_ALIGNMENT_UNSPECIFIED",

    /**
     * value: "CONTENT_ALIGNMENT_UNSUPPORTED"
     * @const
     */
    "CONTENT_ALIGNMENT_UNSUPPORTED": "CONTENT_ALIGNMENT_UNSUPPORTED",

    /**
     * value: "TOP"
     * @const
     */
    "TOP": "TOP",

    /**
     * value: "MIDDLE"
     * @const
     */
    "MIDDLE": "MIDDLE",

    /**
     * value: "BOTTOM"
     * @const
     */
    "BOTTOM": "BOTTOM"
};



export default TableCellStyle;

