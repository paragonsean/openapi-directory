/**
 * Google Docs API
 * Reads and writes Google Docs documents.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Dimension from './Dimension';
import Link from './Link';
import OptionalColor from './OptionalColor';
import WeightedFontFamily from './WeightedFontFamily';

/**
 * The TextStyle model module.
 * @module model/TextStyle
 * @version v1
 */
class TextStyle {
    /**
     * Constructs a new <code>TextStyle</code>.
     * Represents the styling that can be applied to text. Inherited text styles are represented as unset fields in this message. A text style&#39;s parent depends on where the text style is defined: * The TextStyle of text in a Paragraph inherits from the paragraph&#39;s corresponding named style type. * The TextStyle on a named style inherits from the normal text named style. * The TextStyle of the normal text named style inherits from the default text style in the Docs editor. * The TextStyle on a Paragraph element that&#39;s contained in a table may inherit its text style from the table style. If the text style does not inherit from a parent, unsetting fields will revert the style to a value matching the defaults in the Docs editor.
     * @alias module:model/TextStyle
     */
    constructor() { 
        
        TextStyle.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TextStyle</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TextStyle} obj Optional instance to populate.
     * @return {module:model/TextStyle} The populated <code>TextStyle</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TextStyle();

            if (data.hasOwnProperty('backgroundColor')) {
                obj['backgroundColor'] = OptionalColor.constructFromObject(data['backgroundColor']);
            }
            if (data.hasOwnProperty('baselineOffset')) {
                obj['baselineOffset'] = ApiClient.convertToType(data['baselineOffset'], 'String');
            }
            if (data.hasOwnProperty('bold')) {
                obj['bold'] = ApiClient.convertToType(data['bold'], 'Boolean');
            }
            if (data.hasOwnProperty('fontSize')) {
                obj['fontSize'] = Dimension.constructFromObject(data['fontSize']);
            }
            if (data.hasOwnProperty('foregroundColor')) {
                obj['foregroundColor'] = OptionalColor.constructFromObject(data['foregroundColor']);
            }
            if (data.hasOwnProperty('italic')) {
                obj['italic'] = ApiClient.convertToType(data['italic'], 'Boolean');
            }
            if (data.hasOwnProperty('link')) {
                obj['link'] = Link.constructFromObject(data['link']);
            }
            if (data.hasOwnProperty('smallCaps')) {
                obj['smallCaps'] = ApiClient.convertToType(data['smallCaps'], 'Boolean');
            }
            if (data.hasOwnProperty('strikethrough')) {
                obj['strikethrough'] = ApiClient.convertToType(data['strikethrough'], 'Boolean');
            }
            if (data.hasOwnProperty('underline')) {
                obj['underline'] = ApiClient.convertToType(data['underline'], 'Boolean');
            }
            if (data.hasOwnProperty('weightedFontFamily')) {
                obj['weightedFontFamily'] = WeightedFontFamily.constructFromObject(data['weightedFontFamily']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TextStyle</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TextStyle</code>.
     */
    static validateJSON(data) {
        // validate the optional field `backgroundColor`
        if (data['backgroundColor']) { // data not null
          OptionalColor.validateJSON(data['backgroundColor']);
        }
        // ensure the json data is a string
        if (data['baselineOffset'] && !(typeof data['baselineOffset'] === 'string' || data['baselineOffset'] instanceof String)) {
            throw new Error("Expected the field `baselineOffset` to be a primitive type in the JSON string but got " + data['baselineOffset']);
        }
        // validate the optional field `fontSize`
        if (data['fontSize']) { // data not null
          Dimension.validateJSON(data['fontSize']);
        }
        // validate the optional field `foregroundColor`
        if (data['foregroundColor']) { // data not null
          OptionalColor.validateJSON(data['foregroundColor']);
        }
        // validate the optional field `link`
        if (data['link']) { // data not null
          Link.validateJSON(data['link']);
        }
        // validate the optional field `weightedFontFamily`
        if (data['weightedFontFamily']) { // data not null
          WeightedFontFamily.validateJSON(data['weightedFontFamily']);
        }

        return true;
    }


}



/**
 * @member {module:model/OptionalColor} backgroundColor
 */
TextStyle.prototype['backgroundColor'] = undefined;

/**
 * The text's vertical offset from its normal position. Text with `SUPERSCRIPT` or `SUBSCRIPT` baseline offsets is automatically rendered in a smaller font size, computed based on the `font_size` field. Changes in this field don't affect the `font_size`.
 * @member {module:model/TextStyle.BaselineOffsetEnum} baselineOffset
 */
TextStyle.prototype['baselineOffset'] = undefined;

/**
 * Whether or not the text is rendered as bold.
 * @member {Boolean} bold
 */
TextStyle.prototype['bold'] = undefined;

/**
 * @member {module:model/Dimension} fontSize
 */
TextStyle.prototype['fontSize'] = undefined;

/**
 * @member {module:model/OptionalColor} foregroundColor
 */
TextStyle.prototype['foregroundColor'] = undefined;

/**
 * Whether or not the text is italicized.
 * @member {Boolean} italic
 */
TextStyle.prototype['italic'] = undefined;

/**
 * @member {module:model/Link} link
 */
TextStyle.prototype['link'] = undefined;

/**
 * Whether or not the text is in small capital letters.
 * @member {Boolean} smallCaps
 */
TextStyle.prototype['smallCaps'] = undefined;

/**
 * Whether or not the text is struck through.
 * @member {Boolean} strikethrough
 */
TextStyle.prototype['strikethrough'] = undefined;

/**
 * Whether or not the text is underlined.
 * @member {Boolean} underline
 */
TextStyle.prototype['underline'] = undefined;

/**
 * @member {module:model/WeightedFontFamily} weightedFontFamily
 */
TextStyle.prototype['weightedFontFamily'] = undefined;





/**
 * Allowed values for the <code>baselineOffset</code> property.
 * @enum {String}
 * @readonly
 */
TextStyle['BaselineOffsetEnum'] = {

    /**
     * value: "BASELINE_OFFSET_UNSPECIFIED"
     * @const
     */
    "BASELINE_OFFSET_UNSPECIFIED": "BASELINE_OFFSET_UNSPECIFIED",

    /**
     * value: "NONE"
     * @const
     */
    "NONE": "NONE",

    /**
     * value: "SUPERSCRIPT"
     * @const
     */
    "SUPERSCRIPT": "SUPERSCRIPT",

    /**
     * value: "SUBSCRIPT"
     * @const
     */
    "SUBSCRIPT": "SUBSCRIPT"
};



export default TextStyle;

