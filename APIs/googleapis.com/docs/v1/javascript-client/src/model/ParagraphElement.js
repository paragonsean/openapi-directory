/**
 * Google Docs API
 * Reads and writes Google Docs documents.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AutoText from './AutoText';
import ColumnBreak from './ColumnBreak';
import Equation from './Equation';
import FootnoteReference from './FootnoteReference';
import HorizontalRule from './HorizontalRule';
import InlineObjectElement from './InlineObjectElement';
import PageBreak from './PageBreak';
import Person from './Person';
import RichLink from './RichLink';
import TextRun from './TextRun';

/**
 * The ParagraphElement model module.
 * @module model/ParagraphElement
 * @version v1
 */
class ParagraphElement {
    /**
     * Constructs a new <code>ParagraphElement</code>.
     * A ParagraphElement describes content within a Paragraph.
     * @alias module:model/ParagraphElement
     */
    constructor() { 
        
        ParagraphElement.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ParagraphElement</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ParagraphElement} obj Optional instance to populate.
     * @return {module:model/ParagraphElement} The populated <code>ParagraphElement</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ParagraphElement();

            if (data.hasOwnProperty('autoText')) {
                obj['autoText'] = AutoText.constructFromObject(data['autoText']);
            }
            if (data.hasOwnProperty('columnBreak')) {
                obj['columnBreak'] = ColumnBreak.constructFromObject(data['columnBreak']);
            }
            if (data.hasOwnProperty('endIndex')) {
                obj['endIndex'] = ApiClient.convertToType(data['endIndex'], 'Number');
            }
            if (data.hasOwnProperty('equation')) {
                obj['equation'] = Equation.constructFromObject(data['equation']);
            }
            if (data.hasOwnProperty('footnoteReference')) {
                obj['footnoteReference'] = FootnoteReference.constructFromObject(data['footnoteReference']);
            }
            if (data.hasOwnProperty('horizontalRule')) {
                obj['horizontalRule'] = HorizontalRule.constructFromObject(data['horizontalRule']);
            }
            if (data.hasOwnProperty('inlineObjectElement')) {
                obj['inlineObjectElement'] = InlineObjectElement.constructFromObject(data['inlineObjectElement']);
            }
            if (data.hasOwnProperty('pageBreak')) {
                obj['pageBreak'] = PageBreak.constructFromObject(data['pageBreak']);
            }
            if (data.hasOwnProperty('person')) {
                obj['person'] = Person.constructFromObject(data['person']);
            }
            if (data.hasOwnProperty('richLink')) {
                obj['richLink'] = RichLink.constructFromObject(data['richLink']);
            }
            if (data.hasOwnProperty('startIndex')) {
                obj['startIndex'] = ApiClient.convertToType(data['startIndex'], 'Number');
            }
            if (data.hasOwnProperty('textRun')) {
                obj['textRun'] = TextRun.constructFromObject(data['textRun']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ParagraphElement</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ParagraphElement</code>.
     */
    static validateJSON(data) {
        // validate the optional field `autoText`
        if (data['autoText']) { // data not null
          AutoText.validateJSON(data['autoText']);
        }
        // validate the optional field `columnBreak`
        if (data['columnBreak']) { // data not null
          ColumnBreak.validateJSON(data['columnBreak']);
        }
        // validate the optional field `equation`
        if (data['equation']) { // data not null
          Equation.validateJSON(data['equation']);
        }
        // validate the optional field `footnoteReference`
        if (data['footnoteReference']) { // data not null
          FootnoteReference.validateJSON(data['footnoteReference']);
        }
        // validate the optional field `horizontalRule`
        if (data['horizontalRule']) { // data not null
          HorizontalRule.validateJSON(data['horizontalRule']);
        }
        // validate the optional field `inlineObjectElement`
        if (data['inlineObjectElement']) { // data not null
          InlineObjectElement.validateJSON(data['inlineObjectElement']);
        }
        // validate the optional field `pageBreak`
        if (data['pageBreak']) { // data not null
          PageBreak.validateJSON(data['pageBreak']);
        }
        // validate the optional field `person`
        if (data['person']) { // data not null
          Person.validateJSON(data['person']);
        }
        // validate the optional field `richLink`
        if (data['richLink']) { // data not null
          RichLink.validateJSON(data['richLink']);
        }
        // validate the optional field `textRun`
        if (data['textRun']) { // data not null
          TextRun.validateJSON(data['textRun']);
        }

        return true;
    }


}



/**
 * @member {module:model/AutoText} autoText
 */
ParagraphElement.prototype['autoText'] = undefined;

/**
 * @member {module:model/ColumnBreak} columnBreak
 */
ParagraphElement.prototype['columnBreak'] = undefined;

/**
 * The zero-base end index of this paragraph element, exclusive, in UTF-16 code units.
 * @member {Number} endIndex
 */
ParagraphElement.prototype['endIndex'] = undefined;

/**
 * @member {module:model/Equation} equation
 */
ParagraphElement.prototype['equation'] = undefined;

/**
 * @member {module:model/FootnoteReference} footnoteReference
 */
ParagraphElement.prototype['footnoteReference'] = undefined;

/**
 * @member {module:model/HorizontalRule} horizontalRule
 */
ParagraphElement.prototype['horizontalRule'] = undefined;

/**
 * @member {module:model/InlineObjectElement} inlineObjectElement
 */
ParagraphElement.prototype['inlineObjectElement'] = undefined;

/**
 * @member {module:model/PageBreak} pageBreak
 */
ParagraphElement.prototype['pageBreak'] = undefined;

/**
 * @member {module:model/Person} person
 */
ParagraphElement.prototype['person'] = undefined;

/**
 * @member {module:model/RichLink} richLink
 */
ParagraphElement.prototype['richLink'] = undefined;

/**
 * The zero-based start index of this paragraph element, in UTF-16 code units.
 * @member {Number} startIndex
 */
ParagraphElement.prototype['startIndex'] = undefined;

/**
 * @member {module:model/TextRun} textRun
 */
ParagraphElement.prototype['textRun'] = undefined;






export default ParagraphElement;

