/**
 * Google Docs API
 * Reads and writes Google Docs documents.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Dimension from './Dimension';
import EmbeddedObjectBorder from './EmbeddedObjectBorder';
import ImageProperties from './ImageProperties';
import LinkedContentReference from './LinkedContentReference';
import Size from './Size';

/**
 * The EmbeddedObject model module.
 * @module model/EmbeddedObject
 * @version v1
 */
class EmbeddedObject {
    /**
     * Constructs a new <code>EmbeddedObject</code>.
     * An embedded object in the document.
     * @alias module:model/EmbeddedObject
     */
    constructor() { 
        
        EmbeddedObject.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>EmbeddedObject</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EmbeddedObject} obj Optional instance to populate.
     * @return {module:model/EmbeddedObject} The populated <code>EmbeddedObject</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EmbeddedObject();

            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('embeddedDrawingProperties')) {
                obj['embeddedDrawingProperties'] = ApiClient.convertToType(data['embeddedDrawingProperties'], Object);
            }
            if (data.hasOwnProperty('embeddedObjectBorder')) {
                obj['embeddedObjectBorder'] = EmbeddedObjectBorder.constructFromObject(data['embeddedObjectBorder']);
            }
            if (data.hasOwnProperty('imageProperties')) {
                obj['imageProperties'] = ImageProperties.constructFromObject(data['imageProperties']);
            }
            if (data.hasOwnProperty('linkedContentReference')) {
                obj['linkedContentReference'] = LinkedContentReference.constructFromObject(data['linkedContentReference']);
            }
            if (data.hasOwnProperty('marginBottom')) {
                obj['marginBottom'] = Dimension.constructFromObject(data['marginBottom']);
            }
            if (data.hasOwnProperty('marginLeft')) {
                obj['marginLeft'] = Dimension.constructFromObject(data['marginLeft']);
            }
            if (data.hasOwnProperty('marginRight')) {
                obj['marginRight'] = Dimension.constructFromObject(data['marginRight']);
            }
            if (data.hasOwnProperty('marginTop')) {
                obj['marginTop'] = Dimension.constructFromObject(data['marginTop']);
            }
            if (data.hasOwnProperty('size')) {
                obj['size'] = Size.constructFromObject(data['size']);
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EmbeddedObject</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EmbeddedObject</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // validate the optional field `embeddedObjectBorder`
        if (data['embeddedObjectBorder']) { // data not null
          EmbeddedObjectBorder.validateJSON(data['embeddedObjectBorder']);
        }
        // validate the optional field `imageProperties`
        if (data['imageProperties']) { // data not null
          ImageProperties.validateJSON(data['imageProperties']);
        }
        // validate the optional field `linkedContentReference`
        if (data['linkedContentReference']) { // data not null
          LinkedContentReference.validateJSON(data['linkedContentReference']);
        }
        // validate the optional field `marginBottom`
        if (data['marginBottom']) { // data not null
          Dimension.validateJSON(data['marginBottom']);
        }
        // validate the optional field `marginLeft`
        if (data['marginLeft']) { // data not null
          Dimension.validateJSON(data['marginLeft']);
        }
        // validate the optional field `marginRight`
        if (data['marginRight']) { // data not null
          Dimension.validateJSON(data['marginRight']);
        }
        // validate the optional field `marginTop`
        if (data['marginTop']) { // data not null
          Dimension.validateJSON(data['marginTop']);
        }
        // validate the optional field `size`
        if (data['size']) { // data not null
          Size.validateJSON(data['size']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }

        return true;
    }


}



/**
 * The description of the embedded object. The `title` and `description` are both combined to display alt text.
 * @member {String} description
 */
EmbeddedObject.prototype['description'] = undefined;

/**
 * The properties of an embedded drawing and used to differentiate the object type. An embedded drawing is one that's created and edited within a document. Note that extensive details are not supported.
 * @member {Object} embeddedDrawingProperties
 */
EmbeddedObject.prototype['embeddedDrawingProperties'] = undefined;

/**
 * @member {module:model/EmbeddedObjectBorder} embeddedObjectBorder
 */
EmbeddedObject.prototype['embeddedObjectBorder'] = undefined;

/**
 * @member {module:model/ImageProperties} imageProperties
 */
EmbeddedObject.prototype['imageProperties'] = undefined;

/**
 * @member {module:model/LinkedContentReference} linkedContentReference
 */
EmbeddedObject.prototype['linkedContentReference'] = undefined;

/**
 * @member {module:model/Dimension} marginBottom
 */
EmbeddedObject.prototype['marginBottom'] = undefined;

/**
 * @member {module:model/Dimension} marginLeft
 */
EmbeddedObject.prototype['marginLeft'] = undefined;

/**
 * @member {module:model/Dimension} marginRight
 */
EmbeddedObject.prototype['marginRight'] = undefined;

/**
 * @member {module:model/Dimension} marginTop
 */
EmbeddedObject.prototype['marginTop'] = undefined;

/**
 * @member {module:model/Size} size
 */
EmbeddedObject.prototype['size'] = undefined;

/**
 * The title of the embedded object. The `title` and `description` are both combined to display alt text.
 * @member {String} title
 */
EmbeddedObject.prototype['title'] = undefined;






export default EmbeddedObject;

