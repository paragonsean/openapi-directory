/**
 * Google Docs API
 * Reads and writes Google Docs documents.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Dimension from './Dimension';

/**
 * The TableColumnProperties model module.
 * @module model/TableColumnProperties
 * @version v1
 */
class TableColumnProperties {
    /**
     * Constructs a new <code>TableColumnProperties</code>.
     * The properties of a column in a table.
     * @alias module:model/TableColumnProperties
     */
    constructor() { 
        
        TableColumnProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TableColumnProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TableColumnProperties} obj Optional instance to populate.
     * @return {module:model/TableColumnProperties} The populated <code>TableColumnProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TableColumnProperties();

            if (data.hasOwnProperty('width')) {
                obj['width'] = Dimension.constructFromObject(data['width']);
            }
            if (data.hasOwnProperty('widthType')) {
                obj['widthType'] = ApiClient.convertToType(data['widthType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TableColumnProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TableColumnProperties</code>.
     */
    static validateJSON(data) {
        // validate the optional field `width`
        if (data['width']) { // data not null
          Dimension.validateJSON(data['width']);
        }
        // ensure the json data is a string
        if (data['widthType'] && !(typeof data['widthType'] === 'string' || data['widthType'] instanceof String)) {
            throw new Error("Expected the field `widthType` to be a primitive type in the JSON string but got " + data['widthType']);
        }

        return true;
    }


}



/**
 * @member {module:model/Dimension} width
 */
TableColumnProperties.prototype['width'] = undefined;

/**
 * The width type of the column.
 * @member {module:model/TableColumnProperties.WidthTypeEnum} widthType
 */
TableColumnProperties.prototype['widthType'] = undefined;





/**
 * Allowed values for the <code>widthType</code> property.
 * @enum {String}
 * @readonly
 */
TableColumnProperties['WidthTypeEnum'] = {

    /**
     * value: "WIDTH_TYPE_UNSPECIFIED"
     * @const
     */
    "WIDTH_TYPE_UNSPECIFIED": "WIDTH_TYPE_UNSPECIFIED",

    /**
     * value: "EVENLY_DISTRIBUTED"
     * @const
     */
    "EVENLY_DISTRIBUTED": "EVENLY_DISTRIBUTED",

    /**
     * value: "FIXED_WIDTH"
     * @const
     */
    "FIXED_WIDTH": "FIXED_WIDTH"
};



export default TableColumnProperties;

