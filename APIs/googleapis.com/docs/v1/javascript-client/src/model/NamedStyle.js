/**
 * Google Docs API
 * Reads and writes Google Docs documents.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ParagraphStyle from './ParagraphStyle';
import TextStyle from './TextStyle';

/**
 * The NamedStyle model module.
 * @module model/NamedStyle
 * @version v1
 */
class NamedStyle {
    /**
     * Constructs a new <code>NamedStyle</code>.
     * A named style. Paragraphs in the document can inherit their TextStyle and ParagraphStyle from this named style when they have the same named style type.
     * @alias module:model/NamedStyle
     */
    constructor() { 
        
        NamedStyle.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>NamedStyle</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NamedStyle} obj Optional instance to populate.
     * @return {module:model/NamedStyle} The populated <code>NamedStyle</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NamedStyle();

            if (data.hasOwnProperty('namedStyleType')) {
                obj['namedStyleType'] = ApiClient.convertToType(data['namedStyleType'], 'String');
            }
            if (data.hasOwnProperty('paragraphStyle')) {
                obj['paragraphStyle'] = ParagraphStyle.constructFromObject(data['paragraphStyle']);
            }
            if (data.hasOwnProperty('textStyle')) {
                obj['textStyle'] = TextStyle.constructFromObject(data['textStyle']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NamedStyle</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NamedStyle</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['namedStyleType'] && !(typeof data['namedStyleType'] === 'string' || data['namedStyleType'] instanceof String)) {
            throw new Error("Expected the field `namedStyleType` to be a primitive type in the JSON string but got " + data['namedStyleType']);
        }
        // validate the optional field `paragraphStyle`
        if (data['paragraphStyle']) { // data not null
          ParagraphStyle.validateJSON(data['paragraphStyle']);
        }
        // validate the optional field `textStyle`
        if (data['textStyle']) { // data not null
          TextStyle.validateJSON(data['textStyle']);
        }

        return true;
    }


}



/**
 * The type of this named style.
 * @member {module:model/NamedStyle.NamedStyleTypeEnum} namedStyleType
 */
NamedStyle.prototype['namedStyleType'] = undefined;

/**
 * @member {module:model/ParagraphStyle} paragraphStyle
 */
NamedStyle.prototype['paragraphStyle'] = undefined;

/**
 * @member {module:model/TextStyle} textStyle
 */
NamedStyle.prototype['textStyle'] = undefined;





/**
 * Allowed values for the <code>namedStyleType</code> property.
 * @enum {String}
 * @readonly
 */
NamedStyle['NamedStyleTypeEnum'] = {

    /**
     * value: "NAMED_STYLE_TYPE_UNSPECIFIED"
     * @const
     */
    "NAMED_STYLE_TYPE_UNSPECIFIED": "NAMED_STYLE_TYPE_UNSPECIFIED",

    /**
     * value: "NORMAL_TEXT"
     * @const
     */
    "NORMAL_TEXT": "NORMAL_TEXT",

    /**
     * value: "TITLE"
     * @const
     */
    "TITLE": "TITLE",

    /**
     * value: "SUBTITLE"
     * @const
     */
    "SUBTITLE": "SUBTITLE",

    /**
     * value: "HEADING_1"
     * @const
     */
    "HEADING_1": "HEADING_1",

    /**
     * value: "HEADING_2"
     * @const
     */
    "HEADING_2": "HEADING_2",

    /**
     * value: "HEADING_3"
     * @const
     */
    "HEADING_3": "HEADING_3",

    /**
     * value: "HEADING_4"
     * @const
     */
    "HEADING_4": "HEADING_4",

    /**
     * value: "HEADING_5"
     * @const
     */
    "HEADING_5": "HEADING_5",

    /**
     * value: "HEADING_6"
     * @const
     */
    "HEADING_6": "HEADING_6"
};



export default NamedStyle;

