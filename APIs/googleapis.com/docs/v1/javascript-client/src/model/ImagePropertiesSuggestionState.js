/**
 * Google Docs API
 * Reads and writes Google Docs documents.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CropPropertiesSuggestionState from './CropPropertiesSuggestionState';

/**
 * The ImagePropertiesSuggestionState model module.
 * @module model/ImagePropertiesSuggestionState
 * @version v1
 */
class ImagePropertiesSuggestionState {
    /**
     * Constructs a new <code>ImagePropertiesSuggestionState</code>.
     * A mask that indicates which of the fields on the base ImageProperties have been changed in this suggestion. For any field set to true, there&#39;s a new suggested value.
     * @alias module:model/ImagePropertiesSuggestionState
     */
    constructor() { 
        
        ImagePropertiesSuggestionState.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ImagePropertiesSuggestionState</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ImagePropertiesSuggestionState} obj Optional instance to populate.
     * @return {module:model/ImagePropertiesSuggestionState} The populated <code>ImagePropertiesSuggestionState</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ImagePropertiesSuggestionState();

            if (data.hasOwnProperty('angleSuggested')) {
                obj['angleSuggested'] = ApiClient.convertToType(data['angleSuggested'], 'Boolean');
            }
            if (data.hasOwnProperty('brightnessSuggested')) {
                obj['brightnessSuggested'] = ApiClient.convertToType(data['brightnessSuggested'], 'Boolean');
            }
            if (data.hasOwnProperty('contentUriSuggested')) {
                obj['contentUriSuggested'] = ApiClient.convertToType(data['contentUriSuggested'], 'Boolean');
            }
            if (data.hasOwnProperty('contrastSuggested')) {
                obj['contrastSuggested'] = ApiClient.convertToType(data['contrastSuggested'], 'Boolean');
            }
            if (data.hasOwnProperty('cropPropertiesSuggestionState')) {
                obj['cropPropertiesSuggestionState'] = CropPropertiesSuggestionState.constructFromObject(data['cropPropertiesSuggestionState']);
            }
            if (data.hasOwnProperty('sourceUriSuggested')) {
                obj['sourceUriSuggested'] = ApiClient.convertToType(data['sourceUriSuggested'], 'Boolean');
            }
            if (data.hasOwnProperty('transparencySuggested')) {
                obj['transparencySuggested'] = ApiClient.convertToType(data['transparencySuggested'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ImagePropertiesSuggestionState</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ImagePropertiesSuggestionState</code>.
     */
    static validateJSON(data) {
        // validate the optional field `cropPropertiesSuggestionState`
        if (data['cropPropertiesSuggestionState']) { // data not null
          CropPropertiesSuggestionState.validateJSON(data['cropPropertiesSuggestionState']);
        }

        return true;
    }


}



/**
 * Indicates if there was a suggested change to angle.
 * @member {Boolean} angleSuggested
 */
ImagePropertiesSuggestionState.prototype['angleSuggested'] = undefined;

/**
 * Indicates if there was a suggested change to brightness.
 * @member {Boolean} brightnessSuggested
 */
ImagePropertiesSuggestionState.prototype['brightnessSuggested'] = undefined;

/**
 * Indicates if there was a suggested change to content_uri.
 * @member {Boolean} contentUriSuggested
 */
ImagePropertiesSuggestionState.prototype['contentUriSuggested'] = undefined;

/**
 * Indicates if there was a suggested change to contrast.
 * @member {Boolean} contrastSuggested
 */
ImagePropertiesSuggestionState.prototype['contrastSuggested'] = undefined;

/**
 * @member {module:model/CropPropertiesSuggestionState} cropPropertiesSuggestionState
 */
ImagePropertiesSuggestionState.prototype['cropPropertiesSuggestionState'] = undefined;

/**
 * Indicates if there was a suggested change to source_uri.
 * @member {Boolean} sourceUriSuggested
 */
ImagePropertiesSuggestionState.prototype['sourceUriSuggested'] = undefined;

/**
 * Indicates if there was a suggested change to transparency.
 * @member {Boolean} transparencySuggested
 */
ImagePropertiesSuggestionState.prototype['transparencySuggested'] = undefined;






export default ImagePropertiesSuggestionState;

