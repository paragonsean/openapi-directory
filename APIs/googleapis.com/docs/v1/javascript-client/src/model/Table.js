/**
 * Google Docs API
 * Reads and writes Google Docs documents.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TableRow from './TableRow';
import TableStyle from './TableStyle';

/**
 * The Table model module.
 * @module model/Table
 * @version v1
 */
class Table {
    /**
     * Constructs a new <code>Table</code>.
     * A StructuralElement representing a table.
     * @alias module:model/Table
     */
    constructor() { 
        
        Table.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Table</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Table} obj Optional instance to populate.
     * @return {module:model/Table} The populated <code>Table</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Table();

            if (data.hasOwnProperty('columns')) {
                obj['columns'] = ApiClient.convertToType(data['columns'], 'Number');
            }
            if (data.hasOwnProperty('rows')) {
                obj['rows'] = ApiClient.convertToType(data['rows'], 'Number');
            }
            if (data.hasOwnProperty('suggestedDeletionIds')) {
                obj['suggestedDeletionIds'] = ApiClient.convertToType(data['suggestedDeletionIds'], ['String']);
            }
            if (data.hasOwnProperty('suggestedInsertionIds')) {
                obj['suggestedInsertionIds'] = ApiClient.convertToType(data['suggestedInsertionIds'], ['String']);
            }
            if (data.hasOwnProperty('tableRows')) {
                obj['tableRows'] = ApiClient.convertToType(data['tableRows'], [TableRow]);
            }
            if (data.hasOwnProperty('tableStyle')) {
                obj['tableStyle'] = TableStyle.constructFromObject(data['tableStyle']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Table</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Table</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['suggestedDeletionIds'])) {
            throw new Error("Expected the field `suggestedDeletionIds` to be an array in the JSON data but got " + data['suggestedDeletionIds']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['suggestedInsertionIds'])) {
            throw new Error("Expected the field `suggestedInsertionIds` to be an array in the JSON data but got " + data['suggestedInsertionIds']);
        }
        if (data['tableRows']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['tableRows'])) {
                throw new Error("Expected the field `tableRows` to be an array in the JSON data but got " + data['tableRows']);
            }
            // validate the optional field `tableRows` (array)
            for (const item of data['tableRows']) {
                TableRow.validateJSON(item);
            };
        }
        // validate the optional field `tableStyle`
        if (data['tableStyle']) { // data not null
          TableStyle.validateJSON(data['tableStyle']);
        }

        return true;
    }


}



/**
 * Number of columns in the table. It's possible for a table to be non-rectangular, so some rows may have a different number of cells.
 * @member {Number} columns
 */
Table.prototype['columns'] = undefined;

/**
 * Number of rows in the table.
 * @member {Number} rows
 */
Table.prototype['rows'] = undefined;

/**
 * The suggested deletion IDs. If empty, then there are no suggested deletions of this content.
 * @member {Array.<String>} suggestedDeletionIds
 */
Table.prototype['suggestedDeletionIds'] = undefined;

/**
 * The suggested insertion IDs. A Table may have multiple insertion IDs if it's a nested suggested change. If empty, then this is not a suggested insertion.
 * @member {Array.<String>} suggestedInsertionIds
 */
Table.prototype['suggestedInsertionIds'] = undefined;

/**
 * The contents and style of each row.
 * @member {Array.<module:model/TableRow>} tableRows
 */
Table.prototype['tableRows'] = undefined;

/**
 * @member {module:model/TableStyle} tableStyle
 */
Table.prototype['tableStyle'] = undefined;






export default Table;

