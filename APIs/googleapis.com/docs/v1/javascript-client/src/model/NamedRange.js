/**
 * Google Docs API
 * Reads and writes Google Docs documents.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Range from './Range';

/**
 * The NamedRange model module.
 * @module model/NamedRange
 * @version v1
 */
class NamedRange {
    /**
     * Constructs a new <code>NamedRange</code>.
     * A collection of Ranges with the same named range ID. Named ranges allow developers to associate parts of a document with an arbitrary user-defined label so their contents can be programmatically read or edited later. A document can contain multiple named ranges with the same name, but every named range has a unique ID. A named range is created with a single Range, and content inserted inside a named range generally expands that range. However, certain document changes can cause the range to be split into multiple ranges. Named ranges are not private. All applications and collaborators that have access to the document can see its named ranges.
     * @alias module:model/NamedRange
     */
    constructor() { 
        
        NamedRange.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>NamedRange</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NamedRange} obj Optional instance to populate.
     * @return {module:model/NamedRange} The populated <code>NamedRange</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NamedRange();

            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('namedRangeId')) {
                obj['namedRangeId'] = ApiClient.convertToType(data['namedRangeId'], 'String');
            }
            if (data.hasOwnProperty('ranges')) {
                obj['ranges'] = ApiClient.convertToType(data['ranges'], [Range]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NamedRange</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NamedRange</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['namedRangeId'] && !(typeof data['namedRangeId'] === 'string' || data['namedRangeId'] instanceof String)) {
            throw new Error("Expected the field `namedRangeId` to be a primitive type in the JSON string but got " + data['namedRangeId']);
        }
        if (data['ranges']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['ranges'])) {
                throw new Error("Expected the field `ranges` to be an array in the JSON data but got " + data['ranges']);
            }
            // validate the optional field `ranges` (array)
            for (const item of data['ranges']) {
                Range.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * The name of the named range.
 * @member {String} name
 */
NamedRange.prototype['name'] = undefined;

/**
 * The ID of the named range.
 * @member {String} namedRangeId
 */
NamedRange.prototype['namedRangeId'] = undefined;

/**
 * The ranges that belong to this named range.
 * @member {Array.<module:model/Range>} ranges
 */
NamedRange.prototype['ranges'] = undefined;






export default NamedRange;

