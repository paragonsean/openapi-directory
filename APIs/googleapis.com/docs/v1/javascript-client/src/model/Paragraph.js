/**
 * Google Docs API
 * Reads and writes Google Docs documents.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Bullet from './Bullet';
import ObjectReferences from './ObjectReferences';
import ParagraphElement from './ParagraphElement';
import ParagraphStyle from './ParagraphStyle';
import SuggestedBullet from './SuggestedBullet';
import SuggestedParagraphStyle from './SuggestedParagraphStyle';

/**
 * The Paragraph model module.
 * @module model/Paragraph
 * @version v1
 */
class Paragraph {
    /**
     * Constructs a new <code>Paragraph</code>.
     * A StructuralElement representing a paragraph. A paragraph is a range of content that&#39;s terminated with a newline character.
     * @alias module:model/Paragraph
     */
    constructor() { 
        
        Paragraph.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Paragraph</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Paragraph} obj Optional instance to populate.
     * @return {module:model/Paragraph} The populated <code>Paragraph</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Paragraph();

            if (data.hasOwnProperty('bullet')) {
                obj['bullet'] = Bullet.constructFromObject(data['bullet']);
            }
            if (data.hasOwnProperty('elements')) {
                obj['elements'] = ApiClient.convertToType(data['elements'], [ParagraphElement]);
            }
            if (data.hasOwnProperty('paragraphStyle')) {
                obj['paragraphStyle'] = ParagraphStyle.constructFromObject(data['paragraphStyle']);
            }
            if (data.hasOwnProperty('positionedObjectIds')) {
                obj['positionedObjectIds'] = ApiClient.convertToType(data['positionedObjectIds'], ['String']);
            }
            if (data.hasOwnProperty('suggestedBulletChanges')) {
                obj['suggestedBulletChanges'] = ApiClient.convertToType(data['suggestedBulletChanges'], {'String': SuggestedBullet});
            }
            if (data.hasOwnProperty('suggestedParagraphStyleChanges')) {
                obj['suggestedParagraphStyleChanges'] = ApiClient.convertToType(data['suggestedParagraphStyleChanges'], {'String': SuggestedParagraphStyle});
            }
            if (data.hasOwnProperty('suggestedPositionedObjectIds')) {
                obj['suggestedPositionedObjectIds'] = ApiClient.convertToType(data['suggestedPositionedObjectIds'], {'String': ObjectReferences});
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Paragraph</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Paragraph</code>.
     */
    static validateJSON(data) {
        // validate the optional field `bullet`
        if (data['bullet']) { // data not null
          Bullet.validateJSON(data['bullet']);
        }
        if (data['elements']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['elements'])) {
                throw new Error("Expected the field `elements` to be an array in the JSON data but got " + data['elements']);
            }
            // validate the optional field `elements` (array)
            for (const item of data['elements']) {
                ParagraphElement.validateJSON(item);
            };
        }
        // validate the optional field `paragraphStyle`
        if (data['paragraphStyle']) { // data not null
          ParagraphStyle.validateJSON(data['paragraphStyle']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['positionedObjectIds'])) {
            throw new Error("Expected the field `positionedObjectIds` to be an array in the JSON data but got " + data['positionedObjectIds']);
        }

        return true;
    }


}



/**
 * @member {module:model/Bullet} bullet
 */
Paragraph.prototype['bullet'] = undefined;

/**
 * The content of the paragraph, broken down into its component parts.
 * @member {Array.<module:model/ParagraphElement>} elements
 */
Paragraph.prototype['elements'] = undefined;

/**
 * @member {module:model/ParagraphStyle} paragraphStyle
 */
Paragraph.prototype['paragraphStyle'] = undefined;

/**
 * The IDs of the positioned objects tethered to this paragraph.
 * @member {Array.<String>} positionedObjectIds
 */
Paragraph.prototype['positionedObjectIds'] = undefined;

/**
 * The suggested changes to this paragraph's bullet.
 * @member {Object.<String, module:model/SuggestedBullet>} suggestedBulletChanges
 */
Paragraph.prototype['suggestedBulletChanges'] = undefined;

/**
 * The suggested paragraph style changes to this paragraph, keyed by suggestion ID.
 * @member {Object.<String, module:model/SuggestedParagraphStyle>} suggestedParagraphStyleChanges
 */
Paragraph.prototype['suggestedParagraphStyleChanges'] = undefined;

/**
 * The IDs of the positioned objects suggested to be attached to this paragraph, keyed by suggestion ID.
 * @member {Object.<String, module:model/ObjectReferences>} suggestedPositionedObjectIds
 */
Paragraph.prototype['suggestedPositionedObjectIds'] = undefined;






export default Paragraph;

