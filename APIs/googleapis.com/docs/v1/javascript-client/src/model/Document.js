/**
 * Google Docs API
 * Reads and writes Google Docs documents.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Body from './Body';
import DocumentStyle from './DocumentStyle';
import Footer from './Footer';
import Footnote from './Footnote';
import Header from './Header';
import InlineObject from './InlineObject';
import NamedRanges from './NamedRanges';
import NamedStyles from './NamedStyles';
import PositionedObject from './PositionedObject';
import SuggestedDocumentStyle from './SuggestedDocumentStyle';
import SuggestedNamedStyles from './SuggestedNamedStyles';

/**
 * The Document model module.
 * @module model/Document
 * @version v1
 */
class Document {
    /**
     * Constructs a new <code>Document</code>.
     * A Google Docs document.
     * @alias module:model/Document
     */
    constructor() { 
        
        Document.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Document</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Document} obj Optional instance to populate.
     * @return {module:model/Document} The populated <code>Document</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Document();

            if (data.hasOwnProperty('body')) {
                obj['body'] = Body.constructFromObject(data['body']);
            }
            if (data.hasOwnProperty('documentId')) {
                obj['documentId'] = ApiClient.convertToType(data['documentId'], 'String');
            }
            if (data.hasOwnProperty('documentStyle')) {
                obj['documentStyle'] = DocumentStyle.constructFromObject(data['documentStyle']);
            }
            if (data.hasOwnProperty('footers')) {
                obj['footers'] = ApiClient.convertToType(data['footers'], {'String': Footer});
            }
            if (data.hasOwnProperty('footnotes')) {
                obj['footnotes'] = ApiClient.convertToType(data['footnotes'], {'String': Footnote});
            }
            if (data.hasOwnProperty('headers')) {
                obj['headers'] = ApiClient.convertToType(data['headers'], {'String': Header});
            }
            if (data.hasOwnProperty('inlineObjects')) {
                obj['inlineObjects'] = ApiClient.convertToType(data['inlineObjects'], {'String': InlineObject});
            }
            if (data.hasOwnProperty('lists')) {
                obj['lists'] = ApiClient.convertToType(data['lists'], {'String': Array});
            }
            if (data.hasOwnProperty('namedRanges')) {
                obj['namedRanges'] = ApiClient.convertToType(data['namedRanges'], {'String': NamedRanges});
            }
            if (data.hasOwnProperty('namedStyles')) {
                obj['namedStyles'] = NamedStyles.constructFromObject(data['namedStyles']);
            }
            if (data.hasOwnProperty('positionedObjects')) {
                obj['positionedObjects'] = ApiClient.convertToType(data['positionedObjects'], {'String': PositionedObject});
            }
            if (data.hasOwnProperty('revisionId')) {
                obj['revisionId'] = ApiClient.convertToType(data['revisionId'], 'String');
            }
            if (data.hasOwnProperty('suggestedDocumentStyleChanges')) {
                obj['suggestedDocumentStyleChanges'] = ApiClient.convertToType(data['suggestedDocumentStyleChanges'], {'String': SuggestedDocumentStyle});
            }
            if (data.hasOwnProperty('suggestedNamedStylesChanges')) {
                obj['suggestedNamedStylesChanges'] = ApiClient.convertToType(data['suggestedNamedStylesChanges'], {'String': SuggestedNamedStyles});
            }
            if (data.hasOwnProperty('suggestionsViewMode')) {
                obj['suggestionsViewMode'] = ApiClient.convertToType(data['suggestionsViewMode'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Document</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Document</code>.
     */
    static validateJSON(data) {
        // validate the optional field `body`
        if (data['body']) { // data not null
          Body.validateJSON(data['body']);
        }
        // ensure the json data is a string
        if (data['documentId'] && !(typeof data['documentId'] === 'string' || data['documentId'] instanceof String)) {
            throw new Error("Expected the field `documentId` to be a primitive type in the JSON string but got " + data['documentId']);
        }
        // validate the optional field `documentStyle`
        if (data['documentStyle']) { // data not null
          DocumentStyle.validateJSON(data['documentStyle']);
        }
        // validate the optional field `namedStyles`
        if (data['namedStyles']) { // data not null
          NamedStyles.validateJSON(data['namedStyles']);
        }
        // ensure the json data is a string
        if (data['revisionId'] && !(typeof data['revisionId'] === 'string' || data['revisionId'] instanceof String)) {
            throw new Error("Expected the field `revisionId` to be a primitive type in the JSON string but got " + data['revisionId']);
        }
        // ensure the json data is a string
        if (data['suggestionsViewMode'] && !(typeof data['suggestionsViewMode'] === 'string' || data['suggestionsViewMode'] instanceof String)) {
            throw new Error("Expected the field `suggestionsViewMode` to be a primitive type in the JSON string but got " + data['suggestionsViewMode']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }

        return true;
    }


}



/**
 * @member {module:model/Body} body
 */
Document.prototype['body'] = undefined;

/**
 * Output only. The ID of the document.
 * @member {String} documentId
 */
Document.prototype['documentId'] = undefined;

/**
 * @member {module:model/DocumentStyle} documentStyle
 */
Document.prototype['documentStyle'] = undefined;

/**
 * Output only. The footers in the document, keyed by footer ID.
 * @member {Object.<String, module:model/Footer>} footers
 */
Document.prototype['footers'] = undefined;

/**
 * Output only. The footnotes in the document, keyed by footnote ID.
 * @member {Object.<String, module:model/Footnote>} footnotes
 */
Document.prototype['footnotes'] = undefined;

/**
 * Output only. The headers in the document, keyed by header ID.
 * @member {Object.<String, module:model/Header>} headers
 */
Document.prototype['headers'] = undefined;

/**
 * Output only. The inline objects in the document, keyed by object ID.
 * @member {Object.<String, module:model/InlineObject>} inlineObjects
 */
Document.prototype['inlineObjects'] = undefined;

/**
 * Output only. The lists in the document, keyed by list ID.
 * @member {Object.<String, Array>} lists
 */
Document.prototype['lists'] = undefined;

/**
 * Output only. The named ranges in the document, keyed by name.
 * @member {Object.<String, module:model/NamedRanges>} namedRanges
 */
Document.prototype['namedRanges'] = undefined;

/**
 * @member {module:model/NamedStyles} namedStyles
 */
Document.prototype['namedStyles'] = undefined;

/**
 * Output only. The positioned objects in the document, keyed by object ID.
 * @member {Object.<String, module:model/PositionedObject>} positionedObjects
 */
Document.prototype['positionedObjects'] = undefined;

/**
 * Output only. The revision ID of the document. Can be used in update requests to specify which revision of a document to apply updates to and how the request should behave if the document has been edited since that revision. Only populated if the user has edit access to the document. The revision ID is not a sequential number but an opaque string. The format of the revision ID might change over time. A returned revision ID is only guaranteed to be valid for 24 hours after it has been returned and cannot be shared across users. If the revision ID is unchanged between calls, then the document has not changed. Conversely, a changed ID (for the same document and user) usually means the document has been updated. However, a changed ID can also be due to internal factors such as ID format changes.
 * @member {String} revisionId
 */
Document.prototype['revisionId'] = undefined;

/**
 * Output only. The suggested changes to the style of the document, keyed by suggestion ID.
 * @member {Object.<String, module:model/SuggestedDocumentStyle>} suggestedDocumentStyleChanges
 */
Document.prototype['suggestedDocumentStyleChanges'] = undefined;

/**
 * Output only. The suggested changes to the named styles of the document, keyed by suggestion ID.
 * @member {Object.<String, module:model/SuggestedNamedStyles>} suggestedNamedStylesChanges
 */
Document.prototype['suggestedNamedStylesChanges'] = undefined;

/**
 * Output only. The suggestions view mode applied to the document. Note: When editing a document, changes must be based on a document with SUGGESTIONS_INLINE.
 * @member {module:model/Document.SuggestionsViewModeEnum} suggestionsViewMode
 */
Document.prototype['suggestionsViewMode'] = undefined;

/**
 * The title of the document.
 * @member {String} title
 */
Document.prototype['title'] = undefined;





/**
 * Allowed values for the <code>suggestionsViewMode</code> property.
 * @enum {String}
 * @readonly
 */
Document['SuggestionsViewModeEnum'] = {

    /**
     * value: "DEFAULT_FOR_CURRENT_ACCESS"
     * @const
     */
    "DEFAULT_FOR_CURRENT_ACCESS": "DEFAULT_FOR_CURRENT_ACCESS",

    /**
     * value: "SUGGESTIONS_INLINE"
     * @const
     */
    "SUGGESTIONS_INLINE": "SUGGESTIONS_INLINE",

    /**
     * value: "PREVIEW_SUGGESTIONS_ACCEPTED"
     * @const
     */
    "PREVIEW_SUGGESTIONS_ACCEPTED": "PREVIEW_SUGGESTIONS_ACCEPTED",

    /**
     * value: "PREVIEW_WITHOUT_SUGGESTIONS"
     * @const
     */
    "PREVIEW_WITHOUT_SUGGESTIONS": "PREVIEW_WITHOUT_SUGGESTIONS"
};



export default Document;

