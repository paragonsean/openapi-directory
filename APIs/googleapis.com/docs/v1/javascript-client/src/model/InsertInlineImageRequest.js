/**
 * Google Docs API
 * Reads and writes Google Docs documents.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EndOfSegmentLocation from './EndOfSegmentLocation';
import Location from './Location';
import Size from './Size';

/**
 * The InsertInlineImageRequest model module.
 * @module model/InsertInlineImageRequest
 * @version v1
 */
class InsertInlineImageRequest {
    /**
     * Constructs a new <code>InsertInlineImageRequest</code>.
     * Inserts an InlineObject containing an image at the given location.
     * @alias module:model/InsertInlineImageRequest
     */
    constructor() { 
        
        InsertInlineImageRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>InsertInlineImageRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/InsertInlineImageRequest} obj Optional instance to populate.
     * @return {module:model/InsertInlineImageRequest} The populated <code>InsertInlineImageRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new InsertInlineImageRequest();

            if (data.hasOwnProperty('endOfSegmentLocation')) {
                obj['endOfSegmentLocation'] = EndOfSegmentLocation.constructFromObject(data['endOfSegmentLocation']);
            }
            if (data.hasOwnProperty('location')) {
                obj['location'] = Location.constructFromObject(data['location']);
            }
            if (data.hasOwnProperty('objectSize')) {
                obj['objectSize'] = Size.constructFromObject(data['objectSize']);
            }
            if (data.hasOwnProperty('uri')) {
                obj['uri'] = ApiClient.convertToType(data['uri'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>InsertInlineImageRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>InsertInlineImageRequest</code>.
     */
    static validateJSON(data) {
        // validate the optional field `endOfSegmentLocation`
        if (data['endOfSegmentLocation']) { // data not null
          EndOfSegmentLocation.validateJSON(data['endOfSegmentLocation']);
        }
        // validate the optional field `location`
        if (data['location']) { // data not null
          Location.validateJSON(data['location']);
        }
        // validate the optional field `objectSize`
        if (data['objectSize']) { // data not null
          Size.validateJSON(data['objectSize']);
        }
        // ensure the json data is a string
        if (data['uri'] && !(typeof data['uri'] === 'string' || data['uri'] instanceof String)) {
            throw new Error("Expected the field `uri` to be a primitive type in the JSON string but got " + data['uri']);
        }

        return true;
    }


}



/**
 * @member {module:model/EndOfSegmentLocation} endOfSegmentLocation
 */
InsertInlineImageRequest.prototype['endOfSegmentLocation'] = undefined;

/**
 * @member {module:model/Location} location
 */
InsertInlineImageRequest.prototype['location'] = undefined;

/**
 * @member {module:model/Size} objectSize
 */
InsertInlineImageRequest.prototype['objectSize'] = undefined;

/**
 * The image URI. The image is fetched once at insertion time and a copy is stored for display inside the document. Images must be less than 50MB in size, cannot exceed 25 megapixels, and must be in one of PNG, JPEG, or GIF format. The provided URI must be publicly accessible and at most 2 kB in length. The URI itself is saved with the image, and exposed via the ImageProperties.content_uri field.
 * @member {String} uri
 */
InsertInlineImageRequest.prototype['uri'] = undefined;






export default InsertInlineImageRequest;

