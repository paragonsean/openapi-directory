# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ShadingSuggestionState(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, background_color_suggested: bool=None):
        """ShadingSuggestionState - a model defined in OpenAPI

        :param background_color_suggested: The background_color_suggested of this ShadingSuggestionState.
        """
        self.openapi_types = {
            'background_color_suggested': bool
        }

        self.attribute_map = {
            'background_color_suggested': 'backgroundColorSuggested'
        }

        self._background_color_suggested = background_color_suggested

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ShadingSuggestionState':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ShadingSuggestionState of this ShadingSuggestionState.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def background_color_suggested(self):
        """Gets the background_color_suggested of this ShadingSuggestionState.

        Indicates if there was a suggested change to the Shading.

        :return: The background_color_suggested of this ShadingSuggestionState.
        :rtype: bool
        """
        return self._background_color_suggested

    @background_color_suggested.setter
    def background_color_suggested(self, background_color_suggested):
        """Sets the background_color_suggested of this ShadingSuggestionState.

        Indicates if there was a suggested change to the Shading.

        :param background_color_suggested: The background_color_suggested of this ShadingSuggestionState.
        :type background_color_suggested: bool
        """

        self._background_color_suggested = background_color_suggested
