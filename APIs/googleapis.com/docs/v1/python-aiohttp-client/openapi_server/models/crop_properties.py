# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CropProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, angle: float=None, offset_bottom: float=None, offset_left: float=None, offset_right: float=None, offset_top: float=None):
        """CropProperties - a model defined in OpenAPI

        :param angle: The angle of this CropProperties.
        :param offset_bottom: The offset_bottom of this CropProperties.
        :param offset_left: The offset_left of this CropProperties.
        :param offset_right: The offset_right of this CropProperties.
        :param offset_top: The offset_top of this CropProperties.
        """
        self.openapi_types = {
            'angle': float,
            'offset_bottom': float,
            'offset_left': float,
            'offset_right': float,
            'offset_top': float
        }

        self.attribute_map = {
            'angle': 'angle',
            'offset_bottom': 'offsetBottom',
            'offset_left': 'offsetLeft',
            'offset_right': 'offsetRight',
            'offset_top': 'offsetTop'
        }

        self._angle = angle
        self._offset_bottom = offset_bottom
        self._offset_left = offset_left
        self._offset_right = offset_right
        self._offset_top = offset_top

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CropProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CropProperties of this CropProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def angle(self):
        """Gets the angle of this CropProperties.

        The clockwise rotation angle of the crop rectangle around its center, in radians. Rotation is applied after the offsets.

        :return: The angle of this CropProperties.
        :rtype: float
        """
        return self._angle

    @angle.setter
    def angle(self, angle):
        """Sets the angle of this CropProperties.

        The clockwise rotation angle of the crop rectangle around its center, in radians. Rotation is applied after the offsets.

        :param angle: The angle of this CropProperties.
        :type angle: float
        """

        self._angle = angle

    @property
    def offset_bottom(self):
        """Gets the offset_bottom of this CropProperties.

        The offset specifies how far inwards the bottom edge of the crop rectangle is from the bottom edge of the original content as a fraction of the original content's height.

        :return: The offset_bottom of this CropProperties.
        :rtype: float
        """
        return self._offset_bottom

    @offset_bottom.setter
    def offset_bottom(self, offset_bottom):
        """Sets the offset_bottom of this CropProperties.

        The offset specifies how far inwards the bottom edge of the crop rectangle is from the bottom edge of the original content as a fraction of the original content's height.

        :param offset_bottom: The offset_bottom of this CropProperties.
        :type offset_bottom: float
        """

        self._offset_bottom = offset_bottom

    @property
    def offset_left(self):
        """Gets the offset_left of this CropProperties.

        The offset specifies how far inwards the left edge of the crop rectangle is from the left edge of the original content as a fraction of the original content's width.

        :return: The offset_left of this CropProperties.
        :rtype: float
        """
        return self._offset_left

    @offset_left.setter
    def offset_left(self, offset_left):
        """Sets the offset_left of this CropProperties.

        The offset specifies how far inwards the left edge of the crop rectangle is from the left edge of the original content as a fraction of the original content's width.

        :param offset_left: The offset_left of this CropProperties.
        :type offset_left: float
        """

        self._offset_left = offset_left

    @property
    def offset_right(self):
        """Gets the offset_right of this CropProperties.

        The offset specifies how far inwards the right edge of the crop rectangle is from the right edge of the original content as a fraction of the original content's width.

        :return: The offset_right of this CropProperties.
        :rtype: float
        """
        return self._offset_right

    @offset_right.setter
    def offset_right(self, offset_right):
        """Sets the offset_right of this CropProperties.

        The offset specifies how far inwards the right edge of the crop rectangle is from the right edge of the original content as a fraction of the original content's width.

        :param offset_right: The offset_right of this CropProperties.
        :type offset_right: float
        """

        self._offset_right = offset_right

    @property
    def offset_top(self):
        """Gets the offset_top of this CropProperties.

        The offset specifies how far inwards the top edge of the crop rectangle is from the top edge of the original content as a fraction of the original content's height.

        :return: The offset_top of this CropProperties.
        :rtype: float
        """
        return self._offset_top

    @offset_top.setter
    def offset_top(self, offset_top):
        """Sets the offset_top of this CropProperties.

        The offset specifies how far inwards the top edge of the crop rectangle is from the top edge of the original content as a fraction of the original content's height.

        :param offset_top: The offset_top of this CropProperties.
        :type offset_top: float
        """

        self._offset_top = offset_top
