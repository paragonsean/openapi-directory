# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.dimension import Dimension
from openapi_server.models.paragraph_border import ParagraphBorder
from openapi_server.models.shading import Shading
from openapi_server.models.tab_stop import TabStop
from openapi_server import util


class ParagraphStyle(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, alignment: str=None, avoid_widow_and_orphan: bool=None, border_between: ParagraphBorder=None, border_bottom: ParagraphBorder=None, border_left: ParagraphBorder=None, border_right: ParagraphBorder=None, border_top: ParagraphBorder=None, direction: str=None, heading_id: str=None, indent_end: Dimension=None, indent_first_line: Dimension=None, indent_start: Dimension=None, keep_lines_together: bool=None, keep_with_next: bool=None, line_spacing: float=None, named_style_type: str=None, page_break_before: bool=None, shading: Shading=None, space_above: Dimension=None, space_below: Dimension=None, spacing_mode: str=None, tab_stops: List[TabStop]=None):
        """ParagraphStyle - a model defined in OpenAPI

        :param alignment: The alignment of this ParagraphStyle.
        :param avoid_widow_and_orphan: The avoid_widow_and_orphan of this ParagraphStyle.
        :param border_between: The border_between of this ParagraphStyle.
        :param border_bottom: The border_bottom of this ParagraphStyle.
        :param border_left: The border_left of this ParagraphStyle.
        :param border_right: The border_right of this ParagraphStyle.
        :param border_top: The border_top of this ParagraphStyle.
        :param direction: The direction of this ParagraphStyle.
        :param heading_id: The heading_id of this ParagraphStyle.
        :param indent_end: The indent_end of this ParagraphStyle.
        :param indent_first_line: The indent_first_line of this ParagraphStyle.
        :param indent_start: The indent_start of this ParagraphStyle.
        :param keep_lines_together: The keep_lines_together of this ParagraphStyle.
        :param keep_with_next: The keep_with_next of this ParagraphStyle.
        :param line_spacing: The line_spacing of this ParagraphStyle.
        :param named_style_type: The named_style_type of this ParagraphStyle.
        :param page_break_before: The page_break_before of this ParagraphStyle.
        :param shading: The shading of this ParagraphStyle.
        :param space_above: The space_above of this ParagraphStyle.
        :param space_below: The space_below of this ParagraphStyle.
        :param spacing_mode: The spacing_mode of this ParagraphStyle.
        :param tab_stops: The tab_stops of this ParagraphStyle.
        """
        self.openapi_types = {
            'alignment': str,
            'avoid_widow_and_orphan': bool,
            'border_between': ParagraphBorder,
            'border_bottom': ParagraphBorder,
            'border_left': ParagraphBorder,
            'border_right': ParagraphBorder,
            'border_top': ParagraphBorder,
            'direction': str,
            'heading_id': str,
            'indent_end': Dimension,
            'indent_first_line': Dimension,
            'indent_start': Dimension,
            'keep_lines_together': bool,
            'keep_with_next': bool,
            'line_spacing': float,
            'named_style_type': str,
            'page_break_before': bool,
            'shading': Shading,
            'space_above': Dimension,
            'space_below': Dimension,
            'spacing_mode': str,
            'tab_stops': List[TabStop]
        }

        self.attribute_map = {
            'alignment': 'alignment',
            'avoid_widow_and_orphan': 'avoidWidowAndOrphan',
            'border_between': 'borderBetween',
            'border_bottom': 'borderBottom',
            'border_left': 'borderLeft',
            'border_right': 'borderRight',
            'border_top': 'borderTop',
            'direction': 'direction',
            'heading_id': 'headingId',
            'indent_end': 'indentEnd',
            'indent_first_line': 'indentFirstLine',
            'indent_start': 'indentStart',
            'keep_lines_together': 'keepLinesTogether',
            'keep_with_next': 'keepWithNext',
            'line_spacing': 'lineSpacing',
            'named_style_type': 'namedStyleType',
            'page_break_before': 'pageBreakBefore',
            'shading': 'shading',
            'space_above': 'spaceAbove',
            'space_below': 'spaceBelow',
            'spacing_mode': 'spacingMode',
            'tab_stops': 'tabStops'
        }

        self._alignment = alignment
        self._avoid_widow_and_orphan = avoid_widow_and_orphan
        self._border_between = border_between
        self._border_bottom = border_bottom
        self._border_left = border_left
        self._border_right = border_right
        self._border_top = border_top
        self._direction = direction
        self._heading_id = heading_id
        self._indent_end = indent_end
        self._indent_first_line = indent_first_line
        self._indent_start = indent_start
        self._keep_lines_together = keep_lines_together
        self._keep_with_next = keep_with_next
        self._line_spacing = line_spacing
        self._named_style_type = named_style_type
        self._page_break_before = page_break_before
        self._shading = shading
        self._space_above = space_above
        self._space_below = space_below
        self._spacing_mode = spacing_mode
        self._tab_stops = tab_stops

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ParagraphStyle':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ParagraphStyle of this ParagraphStyle.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def alignment(self):
        """Gets the alignment of this ParagraphStyle.

        The text alignment for this paragraph.

        :return: The alignment of this ParagraphStyle.
        :rtype: str
        """
        return self._alignment

    @alignment.setter
    def alignment(self, alignment):
        """Sets the alignment of this ParagraphStyle.

        The text alignment for this paragraph.

        :param alignment: The alignment of this ParagraphStyle.
        :type alignment: str
        """
        allowed_values = ["ALIGNMENT_UNSPECIFIED", "START", "CENTER", "END", "JUSTIFIED"]  # noqa: E501
        if alignment not in allowed_values:
            raise ValueError(
                "Invalid value for `alignment` ({0}), must be one of {1}"
                .format(alignment, allowed_values)
            )

        self._alignment = alignment

    @property
    def avoid_widow_and_orphan(self):
        """Gets the avoid_widow_and_orphan of this ParagraphStyle.

        Whether to avoid widows and orphans for the paragraph. If unset, the value is inherited from the parent.

        :return: The avoid_widow_and_orphan of this ParagraphStyle.
        :rtype: bool
        """
        return self._avoid_widow_and_orphan

    @avoid_widow_and_orphan.setter
    def avoid_widow_and_orphan(self, avoid_widow_and_orphan):
        """Sets the avoid_widow_and_orphan of this ParagraphStyle.

        Whether to avoid widows and orphans for the paragraph. If unset, the value is inherited from the parent.

        :param avoid_widow_and_orphan: The avoid_widow_and_orphan of this ParagraphStyle.
        :type avoid_widow_and_orphan: bool
        """

        self._avoid_widow_and_orphan = avoid_widow_and_orphan

    @property
    def border_between(self):
        """Gets the border_between of this ParagraphStyle.


        :return: The border_between of this ParagraphStyle.
        :rtype: ParagraphBorder
        """
        return self._border_between

    @border_between.setter
    def border_between(self, border_between):
        """Sets the border_between of this ParagraphStyle.


        :param border_between: The border_between of this ParagraphStyle.
        :type border_between: ParagraphBorder
        """

        self._border_between = border_between

    @property
    def border_bottom(self):
        """Gets the border_bottom of this ParagraphStyle.


        :return: The border_bottom of this ParagraphStyle.
        :rtype: ParagraphBorder
        """
        return self._border_bottom

    @border_bottom.setter
    def border_bottom(self, border_bottom):
        """Sets the border_bottom of this ParagraphStyle.


        :param border_bottom: The border_bottom of this ParagraphStyle.
        :type border_bottom: ParagraphBorder
        """

        self._border_bottom = border_bottom

    @property
    def border_left(self):
        """Gets the border_left of this ParagraphStyle.


        :return: The border_left of this ParagraphStyle.
        :rtype: ParagraphBorder
        """
        return self._border_left

    @border_left.setter
    def border_left(self, border_left):
        """Sets the border_left of this ParagraphStyle.


        :param border_left: The border_left of this ParagraphStyle.
        :type border_left: ParagraphBorder
        """

        self._border_left = border_left

    @property
    def border_right(self):
        """Gets the border_right of this ParagraphStyle.


        :return: The border_right of this ParagraphStyle.
        :rtype: ParagraphBorder
        """
        return self._border_right

    @border_right.setter
    def border_right(self, border_right):
        """Sets the border_right of this ParagraphStyle.


        :param border_right: The border_right of this ParagraphStyle.
        :type border_right: ParagraphBorder
        """

        self._border_right = border_right

    @property
    def border_top(self):
        """Gets the border_top of this ParagraphStyle.


        :return: The border_top of this ParagraphStyle.
        :rtype: ParagraphBorder
        """
        return self._border_top

    @border_top.setter
    def border_top(self, border_top):
        """Sets the border_top of this ParagraphStyle.


        :param border_top: The border_top of this ParagraphStyle.
        :type border_top: ParagraphBorder
        """

        self._border_top = border_top

    @property
    def direction(self):
        """Gets the direction of this ParagraphStyle.

        The text direction of this paragraph. If unset, the value defaults to LEFT_TO_RIGHT since paragraph direction is not inherited.

        :return: The direction of this ParagraphStyle.
        :rtype: str
        """
        return self._direction

    @direction.setter
    def direction(self, direction):
        """Sets the direction of this ParagraphStyle.

        The text direction of this paragraph. If unset, the value defaults to LEFT_TO_RIGHT since paragraph direction is not inherited.

        :param direction: The direction of this ParagraphStyle.
        :type direction: str
        """
        allowed_values = ["CONTENT_DIRECTION_UNSPECIFIED", "LEFT_TO_RIGHT", "RIGHT_TO_LEFT"]  # noqa: E501
        if direction not in allowed_values:
            raise ValueError(
                "Invalid value for `direction` ({0}), must be one of {1}"
                .format(direction, allowed_values)
            )

        self._direction = direction

    @property
    def heading_id(self):
        """Gets the heading_id of this ParagraphStyle.

        The heading ID of the paragraph. If empty, then this paragraph is not a heading. This property is read-only.

        :return: The heading_id of this ParagraphStyle.
        :rtype: str
        """
        return self._heading_id

    @heading_id.setter
    def heading_id(self, heading_id):
        """Sets the heading_id of this ParagraphStyle.

        The heading ID of the paragraph. If empty, then this paragraph is not a heading. This property is read-only.

        :param heading_id: The heading_id of this ParagraphStyle.
        :type heading_id: str
        """

        self._heading_id = heading_id

    @property
    def indent_end(self):
        """Gets the indent_end of this ParagraphStyle.


        :return: The indent_end of this ParagraphStyle.
        :rtype: Dimension
        """
        return self._indent_end

    @indent_end.setter
    def indent_end(self, indent_end):
        """Sets the indent_end of this ParagraphStyle.


        :param indent_end: The indent_end of this ParagraphStyle.
        :type indent_end: Dimension
        """

        self._indent_end = indent_end

    @property
    def indent_first_line(self):
        """Gets the indent_first_line of this ParagraphStyle.


        :return: The indent_first_line of this ParagraphStyle.
        :rtype: Dimension
        """
        return self._indent_first_line

    @indent_first_line.setter
    def indent_first_line(self, indent_first_line):
        """Sets the indent_first_line of this ParagraphStyle.


        :param indent_first_line: The indent_first_line of this ParagraphStyle.
        :type indent_first_line: Dimension
        """

        self._indent_first_line = indent_first_line

    @property
    def indent_start(self):
        """Gets the indent_start of this ParagraphStyle.


        :return: The indent_start of this ParagraphStyle.
        :rtype: Dimension
        """
        return self._indent_start

    @indent_start.setter
    def indent_start(self, indent_start):
        """Sets the indent_start of this ParagraphStyle.


        :param indent_start: The indent_start of this ParagraphStyle.
        :type indent_start: Dimension
        """

        self._indent_start = indent_start

    @property
    def keep_lines_together(self):
        """Gets the keep_lines_together of this ParagraphStyle.

        Whether all lines of the paragraph should be laid out on the same page or column if possible. If unset, the value is inherited from the parent.

        :return: The keep_lines_together of this ParagraphStyle.
        :rtype: bool
        """
        return self._keep_lines_together

    @keep_lines_together.setter
    def keep_lines_together(self, keep_lines_together):
        """Sets the keep_lines_together of this ParagraphStyle.

        Whether all lines of the paragraph should be laid out on the same page or column if possible. If unset, the value is inherited from the parent.

        :param keep_lines_together: The keep_lines_together of this ParagraphStyle.
        :type keep_lines_together: bool
        """

        self._keep_lines_together = keep_lines_together

    @property
    def keep_with_next(self):
        """Gets the keep_with_next of this ParagraphStyle.

        Whether at least a part of this paragraph should be laid out on the same page or column as the next paragraph if possible. If unset, the value is inherited from the parent.

        :return: The keep_with_next of this ParagraphStyle.
        :rtype: bool
        """
        return self._keep_with_next

    @keep_with_next.setter
    def keep_with_next(self, keep_with_next):
        """Sets the keep_with_next of this ParagraphStyle.

        Whether at least a part of this paragraph should be laid out on the same page or column as the next paragraph if possible. If unset, the value is inherited from the parent.

        :param keep_with_next: The keep_with_next of this ParagraphStyle.
        :type keep_with_next: bool
        """

        self._keep_with_next = keep_with_next

    @property
    def line_spacing(self):
        """Gets the line_spacing of this ParagraphStyle.

        The amount of space between lines, as a percentage of normal, where normal is represented as 100.0. If unset, the value is inherited from the parent.

        :return: The line_spacing of this ParagraphStyle.
        :rtype: float
        """
        return self._line_spacing

    @line_spacing.setter
    def line_spacing(self, line_spacing):
        """Sets the line_spacing of this ParagraphStyle.

        The amount of space between lines, as a percentage of normal, where normal is represented as 100.0. If unset, the value is inherited from the parent.

        :param line_spacing: The line_spacing of this ParagraphStyle.
        :type line_spacing: float
        """

        self._line_spacing = line_spacing

    @property
    def named_style_type(self):
        """Gets the named_style_type of this ParagraphStyle.

        The named style type of the paragraph. Since updating the named style type affects other properties within ParagraphStyle, the named style type is applied before the other properties are updated.

        :return: The named_style_type of this ParagraphStyle.
        :rtype: str
        """
        return self._named_style_type

    @named_style_type.setter
    def named_style_type(self, named_style_type):
        """Sets the named_style_type of this ParagraphStyle.

        The named style type of the paragraph. Since updating the named style type affects other properties within ParagraphStyle, the named style type is applied before the other properties are updated.

        :param named_style_type: The named_style_type of this ParagraphStyle.
        :type named_style_type: str
        """
        allowed_values = ["NAMED_STYLE_TYPE_UNSPECIFIED", "NORMAL_TEXT", "TITLE", "SUBTITLE", "HEADING_1", "HEADING_2", "HEADING_3", "HEADING_4", "HEADING_5", "HEADING_6"]  # noqa: E501
        if named_style_type not in allowed_values:
            raise ValueError(
                "Invalid value for `named_style_type` ({0}), must be one of {1}"
                .format(named_style_type, allowed_values)
            )

        self._named_style_type = named_style_type

    @property
    def page_break_before(self):
        """Gets the page_break_before of this ParagraphStyle.

        Whether the current paragraph should always start at the beginning of a page. If unset, the value is inherited from the parent. Attempting to update page_break_before for paragraphs in unsupported regions, including Table, Header, Footer and Footnote, can result in an invalid document state that returns a 400 bad request error.

        :return: The page_break_before of this ParagraphStyle.
        :rtype: bool
        """
        return self._page_break_before

    @page_break_before.setter
    def page_break_before(self, page_break_before):
        """Sets the page_break_before of this ParagraphStyle.

        Whether the current paragraph should always start at the beginning of a page. If unset, the value is inherited from the parent. Attempting to update page_break_before for paragraphs in unsupported regions, including Table, Header, Footer and Footnote, can result in an invalid document state that returns a 400 bad request error.

        :param page_break_before: The page_break_before of this ParagraphStyle.
        :type page_break_before: bool
        """

        self._page_break_before = page_break_before

    @property
    def shading(self):
        """Gets the shading of this ParagraphStyle.


        :return: The shading of this ParagraphStyle.
        :rtype: Shading
        """
        return self._shading

    @shading.setter
    def shading(self, shading):
        """Sets the shading of this ParagraphStyle.


        :param shading: The shading of this ParagraphStyle.
        :type shading: Shading
        """

        self._shading = shading

    @property
    def space_above(self):
        """Gets the space_above of this ParagraphStyle.


        :return: The space_above of this ParagraphStyle.
        :rtype: Dimension
        """
        return self._space_above

    @space_above.setter
    def space_above(self, space_above):
        """Sets the space_above of this ParagraphStyle.


        :param space_above: The space_above of this ParagraphStyle.
        :type space_above: Dimension
        """

        self._space_above = space_above

    @property
    def space_below(self):
        """Gets the space_below of this ParagraphStyle.


        :return: The space_below of this ParagraphStyle.
        :rtype: Dimension
        """
        return self._space_below

    @space_below.setter
    def space_below(self, space_below):
        """Sets the space_below of this ParagraphStyle.


        :param space_below: The space_below of this ParagraphStyle.
        :type space_below: Dimension
        """

        self._space_below = space_below

    @property
    def spacing_mode(self):
        """Gets the spacing_mode of this ParagraphStyle.

        The spacing mode for the paragraph.

        :return: The spacing_mode of this ParagraphStyle.
        :rtype: str
        """
        return self._spacing_mode

    @spacing_mode.setter
    def spacing_mode(self, spacing_mode):
        """Sets the spacing_mode of this ParagraphStyle.

        The spacing mode for the paragraph.

        :param spacing_mode: The spacing_mode of this ParagraphStyle.
        :type spacing_mode: str
        """
        allowed_values = ["SPACING_MODE_UNSPECIFIED", "NEVER_COLLAPSE", "COLLAPSE_LISTS"]  # noqa: E501
        if spacing_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `spacing_mode` ({0}), must be one of {1}"
                .format(spacing_mode, allowed_values)
            )

        self._spacing_mode = spacing_mode

    @property
    def tab_stops(self):
        """Gets the tab_stops of this ParagraphStyle.

        A list of the tab stops for this paragraph. The list of tab stops is not inherited. This property is read-only.

        :return: The tab_stops of this ParagraphStyle.
        :rtype: List[TabStop]
        """
        return self._tab_stops

    @tab_stops.setter
    def tab_stops(self, tab_stops):
        """Sets the tab_stops of this ParagraphStyle.

        A list of the tab stops for this paragraph. The list of tab stops is not inherited. This property is read-only.

        :param tab_stops: The tab_stops of this ParagraphStyle.
        :type tab_stops: List[TabStop]
        """

        self._tab_stops = tab_stops
