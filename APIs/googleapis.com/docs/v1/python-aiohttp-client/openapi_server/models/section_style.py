# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.dimension import Dimension
from openapi_server.models.section_column_properties import SectionColumnProperties
from openapi_server import util


class SectionStyle(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, column_properties: List[SectionColumnProperties]=None, column_separator_style: str=None, content_direction: str=None, default_footer_id: str=None, default_header_id: str=None, even_page_footer_id: str=None, even_page_header_id: str=None, first_page_footer_id: str=None, first_page_header_id: str=None, flip_page_orientation: bool=None, margin_bottom: Dimension=None, margin_footer: Dimension=None, margin_header: Dimension=None, margin_left: Dimension=None, margin_right: Dimension=None, margin_top: Dimension=None, page_number_start: int=None, section_type: str=None, use_first_page_header_footer: bool=None):
        """SectionStyle - a model defined in OpenAPI

        :param column_properties: The column_properties of this SectionStyle.
        :param column_separator_style: The column_separator_style of this SectionStyle.
        :param content_direction: The content_direction of this SectionStyle.
        :param default_footer_id: The default_footer_id of this SectionStyle.
        :param default_header_id: The default_header_id of this SectionStyle.
        :param even_page_footer_id: The even_page_footer_id of this SectionStyle.
        :param even_page_header_id: The even_page_header_id of this SectionStyle.
        :param first_page_footer_id: The first_page_footer_id of this SectionStyle.
        :param first_page_header_id: The first_page_header_id of this SectionStyle.
        :param flip_page_orientation: The flip_page_orientation of this SectionStyle.
        :param margin_bottom: The margin_bottom of this SectionStyle.
        :param margin_footer: The margin_footer of this SectionStyle.
        :param margin_header: The margin_header of this SectionStyle.
        :param margin_left: The margin_left of this SectionStyle.
        :param margin_right: The margin_right of this SectionStyle.
        :param margin_top: The margin_top of this SectionStyle.
        :param page_number_start: The page_number_start of this SectionStyle.
        :param section_type: The section_type of this SectionStyle.
        :param use_first_page_header_footer: The use_first_page_header_footer of this SectionStyle.
        """
        self.openapi_types = {
            'column_properties': List[SectionColumnProperties],
            'column_separator_style': str,
            'content_direction': str,
            'default_footer_id': str,
            'default_header_id': str,
            'even_page_footer_id': str,
            'even_page_header_id': str,
            'first_page_footer_id': str,
            'first_page_header_id': str,
            'flip_page_orientation': bool,
            'margin_bottom': Dimension,
            'margin_footer': Dimension,
            'margin_header': Dimension,
            'margin_left': Dimension,
            'margin_right': Dimension,
            'margin_top': Dimension,
            'page_number_start': int,
            'section_type': str,
            'use_first_page_header_footer': bool
        }

        self.attribute_map = {
            'column_properties': 'columnProperties',
            'column_separator_style': 'columnSeparatorStyle',
            'content_direction': 'contentDirection',
            'default_footer_id': 'defaultFooterId',
            'default_header_id': 'defaultHeaderId',
            'even_page_footer_id': 'evenPageFooterId',
            'even_page_header_id': 'evenPageHeaderId',
            'first_page_footer_id': 'firstPageFooterId',
            'first_page_header_id': 'firstPageHeaderId',
            'flip_page_orientation': 'flipPageOrientation',
            'margin_bottom': 'marginBottom',
            'margin_footer': 'marginFooter',
            'margin_header': 'marginHeader',
            'margin_left': 'marginLeft',
            'margin_right': 'marginRight',
            'margin_top': 'marginTop',
            'page_number_start': 'pageNumberStart',
            'section_type': 'sectionType',
            'use_first_page_header_footer': 'useFirstPageHeaderFooter'
        }

        self._column_properties = column_properties
        self._column_separator_style = column_separator_style
        self._content_direction = content_direction
        self._default_footer_id = default_footer_id
        self._default_header_id = default_header_id
        self._even_page_footer_id = even_page_footer_id
        self._even_page_header_id = even_page_header_id
        self._first_page_footer_id = first_page_footer_id
        self._first_page_header_id = first_page_header_id
        self._flip_page_orientation = flip_page_orientation
        self._margin_bottom = margin_bottom
        self._margin_footer = margin_footer
        self._margin_header = margin_header
        self._margin_left = margin_left
        self._margin_right = margin_right
        self._margin_top = margin_top
        self._page_number_start = page_number_start
        self._section_type = section_type
        self._use_first_page_header_footer = use_first_page_header_footer

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SectionStyle':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SectionStyle of this SectionStyle.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def column_properties(self):
        """Gets the column_properties of this SectionStyle.

        The section's columns properties. If empty, the section contains one column with the default properties in the Docs editor. A section can be updated to have no more than 3 columns. When updating this property, setting a concrete value is required. Unsetting this property will result in a 400 bad request error.

        :return: The column_properties of this SectionStyle.
        :rtype: List[SectionColumnProperties]
        """
        return self._column_properties

    @column_properties.setter
    def column_properties(self, column_properties):
        """Sets the column_properties of this SectionStyle.

        The section's columns properties. If empty, the section contains one column with the default properties in the Docs editor. A section can be updated to have no more than 3 columns. When updating this property, setting a concrete value is required. Unsetting this property will result in a 400 bad request error.

        :param column_properties: The column_properties of this SectionStyle.
        :type column_properties: List[SectionColumnProperties]
        """

        self._column_properties = column_properties

    @property
    def column_separator_style(self):
        """Gets the column_separator_style of this SectionStyle.

        The style of column separators. This style can be set even when there's one column in the section. When updating this property, setting a concrete value is required. Unsetting this property results in a 400 bad request error.

        :return: The column_separator_style of this SectionStyle.
        :rtype: str
        """
        return self._column_separator_style

    @column_separator_style.setter
    def column_separator_style(self, column_separator_style):
        """Sets the column_separator_style of this SectionStyle.

        The style of column separators. This style can be set even when there's one column in the section. When updating this property, setting a concrete value is required. Unsetting this property results in a 400 bad request error.

        :param column_separator_style: The column_separator_style of this SectionStyle.
        :type column_separator_style: str
        """
        allowed_values = ["COLUMN_SEPARATOR_STYLE_UNSPECIFIED", "NONE", "BETWEEN_EACH_COLUMN"]  # noqa: E501
        if column_separator_style not in allowed_values:
            raise ValueError(
                "Invalid value for `column_separator_style` ({0}), must be one of {1}"
                .format(column_separator_style, allowed_values)
            )

        self._column_separator_style = column_separator_style

    @property
    def content_direction(self):
        """Gets the content_direction of this SectionStyle.

        The content direction of this section. If unset, the value defaults to LEFT_TO_RIGHT. When updating this property, setting a concrete value is required. Unsetting this property results in a 400 bad request error.

        :return: The content_direction of this SectionStyle.
        :rtype: str
        """
        return self._content_direction

    @content_direction.setter
    def content_direction(self, content_direction):
        """Sets the content_direction of this SectionStyle.

        The content direction of this section. If unset, the value defaults to LEFT_TO_RIGHT. When updating this property, setting a concrete value is required. Unsetting this property results in a 400 bad request error.

        :param content_direction: The content_direction of this SectionStyle.
        :type content_direction: str
        """
        allowed_values = ["CONTENT_DIRECTION_UNSPECIFIED", "LEFT_TO_RIGHT", "RIGHT_TO_LEFT"]  # noqa: E501
        if content_direction not in allowed_values:
            raise ValueError(
                "Invalid value for `content_direction` ({0}), must be one of {1}"
                .format(content_direction, allowed_values)
            )

        self._content_direction = content_direction

    @property
    def default_footer_id(self):
        """Gets the default_footer_id of this SectionStyle.

        The ID of the default footer. If unset, the value inherits from the previous SectionBreak's SectionStyle. If the value is unset in the first SectionBreak, it inherits from DocumentStyle's default_footer_id. This property is read-only.

        :return: The default_footer_id of this SectionStyle.
        :rtype: str
        """
        return self._default_footer_id

    @default_footer_id.setter
    def default_footer_id(self, default_footer_id):
        """Sets the default_footer_id of this SectionStyle.

        The ID of the default footer. If unset, the value inherits from the previous SectionBreak's SectionStyle. If the value is unset in the first SectionBreak, it inherits from DocumentStyle's default_footer_id. This property is read-only.

        :param default_footer_id: The default_footer_id of this SectionStyle.
        :type default_footer_id: str
        """

        self._default_footer_id = default_footer_id

    @property
    def default_header_id(self):
        """Gets the default_header_id of this SectionStyle.

        The ID of the default header. If unset, the value inherits from the previous SectionBreak's SectionStyle. If the value is unset in the first SectionBreak, it inherits from DocumentStyle's default_header_id. This property is read-only.

        :return: The default_header_id of this SectionStyle.
        :rtype: str
        """
        return self._default_header_id

    @default_header_id.setter
    def default_header_id(self, default_header_id):
        """Sets the default_header_id of this SectionStyle.

        The ID of the default header. If unset, the value inherits from the previous SectionBreak's SectionStyle. If the value is unset in the first SectionBreak, it inherits from DocumentStyle's default_header_id. This property is read-only.

        :param default_header_id: The default_header_id of this SectionStyle.
        :type default_header_id: str
        """

        self._default_header_id = default_header_id

    @property
    def even_page_footer_id(self):
        """Gets the even_page_footer_id of this SectionStyle.

        The ID of the footer used only for even pages. If the value of DocumentStyle's use_even_page_header_footer is true, this value is used for the footers on even pages in the section. If it is false, the footers on even pages use the default_footer_id. If unset, the value inherits from the previous SectionBreak's SectionStyle. If the value is unset in the first SectionBreak, it inherits from DocumentStyle's even_page_footer_id. This property is read-only.

        :return: The even_page_footer_id of this SectionStyle.
        :rtype: str
        """
        return self._even_page_footer_id

    @even_page_footer_id.setter
    def even_page_footer_id(self, even_page_footer_id):
        """Sets the even_page_footer_id of this SectionStyle.

        The ID of the footer used only for even pages. If the value of DocumentStyle's use_even_page_header_footer is true, this value is used for the footers on even pages in the section. If it is false, the footers on even pages use the default_footer_id. If unset, the value inherits from the previous SectionBreak's SectionStyle. If the value is unset in the first SectionBreak, it inherits from DocumentStyle's even_page_footer_id. This property is read-only.

        :param even_page_footer_id: The even_page_footer_id of this SectionStyle.
        :type even_page_footer_id: str
        """

        self._even_page_footer_id = even_page_footer_id

    @property
    def even_page_header_id(self):
        """Gets the even_page_header_id of this SectionStyle.

        The ID of the header used only for even pages. If the value of DocumentStyle's use_even_page_header_footer is true, this value is used for the headers on even pages in the section. If it is false, the headers on even pages use the default_header_id. If unset, the value inherits from the previous SectionBreak's SectionStyle. If the value is unset in the first SectionBreak, it inherits from DocumentStyle's even_page_header_id. This property is read-only.

        :return: The even_page_header_id of this SectionStyle.
        :rtype: str
        """
        return self._even_page_header_id

    @even_page_header_id.setter
    def even_page_header_id(self, even_page_header_id):
        """Sets the even_page_header_id of this SectionStyle.

        The ID of the header used only for even pages. If the value of DocumentStyle's use_even_page_header_footer is true, this value is used for the headers on even pages in the section. If it is false, the headers on even pages use the default_header_id. If unset, the value inherits from the previous SectionBreak's SectionStyle. If the value is unset in the first SectionBreak, it inherits from DocumentStyle's even_page_header_id. This property is read-only.

        :param even_page_header_id: The even_page_header_id of this SectionStyle.
        :type even_page_header_id: str
        """

        self._even_page_header_id = even_page_header_id

    @property
    def first_page_footer_id(self):
        """Gets the first_page_footer_id of this SectionStyle.

        The ID of the footer used only for the first page of the section. If use_first_page_header_footer is true, this value is used for the footer on the first page of the section. If it's false, the footer on the first page of the section uses the default_footer_id. If unset, the value inherits from the previous SectionBreak's SectionStyle. If the value is unset in the first SectionBreak, it inherits from DocumentStyle's first_page_footer_id. This property is read-only.

        :return: The first_page_footer_id of this SectionStyle.
        :rtype: str
        """
        return self._first_page_footer_id

    @first_page_footer_id.setter
    def first_page_footer_id(self, first_page_footer_id):
        """Sets the first_page_footer_id of this SectionStyle.

        The ID of the footer used only for the first page of the section. If use_first_page_header_footer is true, this value is used for the footer on the first page of the section. If it's false, the footer on the first page of the section uses the default_footer_id. If unset, the value inherits from the previous SectionBreak's SectionStyle. If the value is unset in the first SectionBreak, it inherits from DocumentStyle's first_page_footer_id. This property is read-only.

        :param first_page_footer_id: The first_page_footer_id of this SectionStyle.
        :type first_page_footer_id: str
        """

        self._first_page_footer_id = first_page_footer_id

    @property
    def first_page_header_id(self):
        """Gets the first_page_header_id of this SectionStyle.

        The ID of the header used only for the first page of the section. If use_first_page_header_footer is true, this value is used for the header on the first page of the section. If it's false, the header on the first page of the section uses the default_header_id. If unset, the value inherits from the previous SectionBreak's SectionStyle. If the value is unset in the first SectionBreak, it inherits from DocumentStyle's first_page_header_id. This property is read-only.

        :return: The first_page_header_id of this SectionStyle.
        :rtype: str
        """
        return self._first_page_header_id

    @first_page_header_id.setter
    def first_page_header_id(self, first_page_header_id):
        """Sets the first_page_header_id of this SectionStyle.

        The ID of the header used only for the first page of the section. If use_first_page_header_footer is true, this value is used for the header on the first page of the section. If it's false, the header on the first page of the section uses the default_header_id. If unset, the value inherits from the previous SectionBreak's SectionStyle. If the value is unset in the first SectionBreak, it inherits from DocumentStyle's first_page_header_id. This property is read-only.

        :param first_page_header_id: The first_page_header_id of this SectionStyle.
        :type first_page_header_id: str
        """

        self._first_page_header_id = first_page_header_id

    @property
    def flip_page_orientation(self):
        """Gets the flip_page_orientation of this SectionStyle.

        Optional. Indicates whether to flip the dimensions of DocumentStyle's page_size for this section, which allows changing the page orientation between portrait and landscape. If unset, the value inherits from DocumentStyle's flip_page_orientation. When updating this property, setting a concrete value is required. Unsetting this property results in a 400 bad request error.

        :return: The flip_page_orientation of this SectionStyle.
        :rtype: bool
        """
        return self._flip_page_orientation

    @flip_page_orientation.setter
    def flip_page_orientation(self, flip_page_orientation):
        """Sets the flip_page_orientation of this SectionStyle.

        Optional. Indicates whether to flip the dimensions of DocumentStyle's page_size for this section, which allows changing the page orientation between portrait and landscape. If unset, the value inherits from DocumentStyle's flip_page_orientation. When updating this property, setting a concrete value is required. Unsetting this property results in a 400 bad request error.

        :param flip_page_orientation: The flip_page_orientation of this SectionStyle.
        :type flip_page_orientation: bool
        """

        self._flip_page_orientation = flip_page_orientation

    @property
    def margin_bottom(self):
        """Gets the margin_bottom of this SectionStyle.


        :return: The margin_bottom of this SectionStyle.
        :rtype: Dimension
        """
        return self._margin_bottom

    @margin_bottom.setter
    def margin_bottom(self, margin_bottom):
        """Sets the margin_bottom of this SectionStyle.


        :param margin_bottom: The margin_bottom of this SectionStyle.
        :type margin_bottom: Dimension
        """

        self._margin_bottom = margin_bottom

    @property
    def margin_footer(self):
        """Gets the margin_footer of this SectionStyle.


        :return: The margin_footer of this SectionStyle.
        :rtype: Dimension
        """
        return self._margin_footer

    @margin_footer.setter
    def margin_footer(self, margin_footer):
        """Sets the margin_footer of this SectionStyle.


        :param margin_footer: The margin_footer of this SectionStyle.
        :type margin_footer: Dimension
        """

        self._margin_footer = margin_footer

    @property
    def margin_header(self):
        """Gets the margin_header of this SectionStyle.


        :return: The margin_header of this SectionStyle.
        :rtype: Dimension
        """
        return self._margin_header

    @margin_header.setter
    def margin_header(self, margin_header):
        """Sets the margin_header of this SectionStyle.


        :param margin_header: The margin_header of this SectionStyle.
        :type margin_header: Dimension
        """

        self._margin_header = margin_header

    @property
    def margin_left(self):
        """Gets the margin_left of this SectionStyle.


        :return: The margin_left of this SectionStyle.
        :rtype: Dimension
        """
        return self._margin_left

    @margin_left.setter
    def margin_left(self, margin_left):
        """Sets the margin_left of this SectionStyle.


        :param margin_left: The margin_left of this SectionStyle.
        :type margin_left: Dimension
        """

        self._margin_left = margin_left

    @property
    def margin_right(self):
        """Gets the margin_right of this SectionStyle.


        :return: The margin_right of this SectionStyle.
        :rtype: Dimension
        """
        return self._margin_right

    @margin_right.setter
    def margin_right(self, margin_right):
        """Sets the margin_right of this SectionStyle.


        :param margin_right: The margin_right of this SectionStyle.
        :type margin_right: Dimension
        """

        self._margin_right = margin_right

    @property
    def margin_top(self):
        """Gets the margin_top of this SectionStyle.


        :return: The margin_top of this SectionStyle.
        :rtype: Dimension
        """
        return self._margin_top

    @margin_top.setter
    def margin_top(self, margin_top):
        """Sets the margin_top of this SectionStyle.


        :param margin_top: The margin_top of this SectionStyle.
        :type margin_top: Dimension
        """

        self._margin_top = margin_top

    @property
    def page_number_start(self):
        """Gets the page_number_start of this SectionStyle.

        The page number from which to start counting the number of pages for this section. If unset, page numbering continues from the previous section. If the value is unset in the first SectionBreak, refer to DocumentStyle's page_number_start. When updating this property, setting a concrete value is required. Unsetting this property results in a 400 bad request error.

        :return: The page_number_start of this SectionStyle.
        :rtype: int
        """
        return self._page_number_start

    @page_number_start.setter
    def page_number_start(self, page_number_start):
        """Sets the page_number_start of this SectionStyle.

        The page number from which to start counting the number of pages for this section. If unset, page numbering continues from the previous section. If the value is unset in the first SectionBreak, refer to DocumentStyle's page_number_start. When updating this property, setting a concrete value is required. Unsetting this property results in a 400 bad request error.

        :param page_number_start: The page_number_start of this SectionStyle.
        :type page_number_start: int
        """

        self._page_number_start = page_number_start

    @property
    def section_type(self):
        """Gets the section_type of this SectionStyle.

        Output only. The type of section.

        :return: The section_type of this SectionStyle.
        :rtype: str
        """
        return self._section_type

    @section_type.setter
    def section_type(self, section_type):
        """Sets the section_type of this SectionStyle.

        Output only. The type of section.

        :param section_type: The section_type of this SectionStyle.
        :type section_type: str
        """
        allowed_values = ["SECTION_TYPE_UNSPECIFIED", "CONTINUOUS", "NEXT_PAGE"]  # noqa: E501
        if section_type not in allowed_values:
            raise ValueError(
                "Invalid value for `section_type` ({0}), must be one of {1}"
                .format(section_type, allowed_values)
            )

        self._section_type = section_type

    @property
    def use_first_page_header_footer(self):
        """Gets the use_first_page_header_footer of this SectionStyle.

        Indicates whether to use the first page header / footer IDs for the first page of the section. If unset, it inherits from DocumentStyle's use_first_page_header_footer for the first section. If the value is unset for subsequent sectors, it should be interpreted as false. When updating this property, setting a concrete value is required. Unsetting this property results in a 400 bad request error.

        :return: The use_first_page_header_footer of this SectionStyle.
        :rtype: bool
        """
        return self._use_first_page_header_footer

    @use_first_page_header_footer.setter
    def use_first_page_header_footer(self, use_first_page_header_footer):
        """Sets the use_first_page_header_footer of this SectionStyle.

        Indicates whether to use the first page header / footer IDs for the first page of the section. If unset, it inherits from DocumentStyle's use_first_page_header_footer for the first section. If the value is unset for subsequent sectors, it should be interpreted as false. When updating this property, setting a concrete value is required. Unsetting this property results in a 400 bad request error.

        :param use_first_page_header_footer: The use_first_page_header_footer of this SectionStyle.
        :type use_first_page_header_footer: bool
        """

        self._use_first_page_header_footer = use_first_page_header_footer
