# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.crop_properties import CropProperties
from openapi_server import util


class ImageProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, angle: float=None, brightness: float=None, content_uri: str=None, contrast: float=None, crop_properties: CropProperties=None, source_uri: str=None, transparency: float=None):
        """ImageProperties - a model defined in OpenAPI

        :param angle: The angle of this ImageProperties.
        :param brightness: The brightness of this ImageProperties.
        :param content_uri: The content_uri of this ImageProperties.
        :param contrast: The contrast of this ImageProperties.
        :param crop_properties: The crop_properties of this ImageProperties.
        :param source_uri: The source_uri of this ImageProperties.
        :param transparency: The transparency of this ImageProperties.
        """
        self.openapi_types = {
            'angle': float,
            'brightness': float,
            'content_uri': str,
            'contrast': float,
            'crop_properties': CropProperties,
            'source_uri': str,
            'transparency': float
        }

        self.attribute_map = {
            'angle': 'angle',
            'brightness': 'brightness',
            'content_uri': 'contentUri',
            'contrast': 'contrast',
            'crop_properties': 'cropProperties',
            'source_uri': 'sourceUri',
            'transparency': 'transparency'
        }

        self._angle = angle
        self._brightness = brightness
        self._content_uri = content_uri
        self._contrast = contrast
        self._crop_properties = crop_properties
        self._source_uri = source_uri
        self._transparency = transparency

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ImageProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ImageProperties of this ImageProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def angle(self):
        """Gets the angle of this ImageProperties.

        The clockwise rotation angle of the image, in radians.

        :return: The angle of this ImageProperties.
        :rtype: float
        """
        return self._angle

    @angle.setter
    def angle(self, angle):
        """Sets the angle of this ImageProperties.

        The clockwise rotation angle of the image, in radians.

        :param angle: The angle of this ImageProperties.
        :type angle: float
        """

        self._angle = angle

    @property
    def brightness(self):
        """Gets the brightness of this ImageProperties.

        The brightness effect of the image. The value should be in the interval [-1.0, 1.0], where 0 means no effect.

        :return: The brightness of this ImageProperties.
        :rtype: float
        """
        return self._brightness

    @brightness.setter
    def brightness(self, brightness):
        """Sets the brightness of this ImageProperties.

        The brightness effect of the image. The value should be in the interval [-1.0, 1.0], where 0 means no effect.

        :param brightness: The brightness of this ImageProperties.
        :type brightness: float
        """

        self._brightness = brightness

    @property
    def content_uri(self):
        """Gets the content_uri of this ImageProperties.

        A URI to the image with a default lifetime of 30 minutes. This URI is tagged with the account of the requester. Anyone with the URI effectively accesses the image as the original requester. Access to the image may be lost if the document's sharing settings change.

        :return: The content_uri of this ImageProperties.
        :rtype: str
        """
        return self._content_uri

    @content_uri.setter
    def content_uri(self, content_uri):
        """Sets the content_uri of this ImageProperties.

        A URI to the image with a default lifetime of 30 minutes. This URI is tagged with the account of the requester. Anyone with the URI effectively accesses the image as the original requester. Access to the image may be lost if the document's sharing settings change.

        :param content_uri: The content_uri of this ImageProperties.
        :type content_uri: str
        """

        self._content_uri = content_uri

    @property
    def contrast(self):
        """Gets the contrast of this ImageProperties.

        The contrast effect of the image. The value should be in the interval [-1.0, 1.0], where 0 means no effect.

        :return: The contrast of this ImageProperties.
        :rtype: float
        """
        return self._contrast

    @contrast.setter
    def contrast(self, contrast):
        """Sets the contrast of this ImageProperties.

        The contrast effect of the image. The value should be in the interval [-1.0, 1.0], where 0 means no effect.

        :param contrast: The contrast of this ImageProperties.
        :type contrast: float
        """

        self._contrast = contrast

    @property
    def crop_properties(self):
        """Gets the crop_properties of this ImageProperties.


        :return: The crop_properties of this ImageProperties.
        :rtype: CropProperties
        """
        return self._crop_properties

    @crop_properties.setter
    def crop_properties(self, crop_properties):
        """Sets the crop_properties of this ImageProperties.


        :param crop_properties: The crop_properties of this ImageProperties.
        :type crop_properties: CropProperties
        """

        self._crop_properties = crop_properties

    @property
    def source_uri(self):
        """Gets the source_uri of this ImageProperties.

        The source URI is the URI used to insert the image. The source URI can be empty.

        :return: The source_uri of this ImageProperties.
        :rtype: str
        """
        return self._source_uri

    @source_uri.setter
    def source_uri(self, source_uri):
        """Sets the source_uri of this ImageProperties.

        The source URI is the URI used to insert the image. The source URI can be empty.

        :param source_uri: The source_uri of this ImageProperties.
        :type source_uri: str
        """

        self._source_uri = source_uri

    @property
    def transparency(self):
        """Gets the transparency of this ImageProperties.

        The transparency effect of the image. The value should be in the interval [0.0, 1.0], where 0 means no effect and 1 means transparent.

        :return: The transparency of this ImageProperties.
        :rtype: float
        """
        return self._transparency

    @transparency.setter
    def transparency(self, transparency):
        """Sets the transparency of this ImageProperties.

        The transparency effect of the image. The value should be in the interval [0.0, 1.0], where 0 means no effect and 1 means transparent.

        :param transparency: The transparency of this ImageProperties.
        :type transparency: float
        """

        self._transparency = transparency
