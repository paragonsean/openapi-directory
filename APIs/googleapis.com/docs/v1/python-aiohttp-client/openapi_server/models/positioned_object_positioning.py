# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.dimension import Dimension
from openapi_server import util


class PositionedObjectPositioning(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, layout: str=None, left_offset: Dimension=None, top_offset: Dimension=None):
        """PositionedObjectPositioning - a model defined in OpenAPI

        :param layout: The layout of this PositionedObjectPositioning.
        :param left_offset: The left_offset of this PositionedObjectPositioning.
        :param top_offset: The top_offset of this PositionedObjectPositioning.
        """
        self.openapi_types = {
            'layout': str,
            'left_offset': Dimension,
            'top_offset': Dimension
        }

        self.attribute_map = {
            'layout': 'layout',
            'left_offset': 'leftOffset',
            'top_offset': 'topOffset'
        }

        self._layout = layout
        self._left_offset = left_offset
        self._top_offset = top_offset

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PositionedObjectPositioning':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PositionedObjectPositioning of this PositionedObjectPositioning.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def layout(self):
        """Gets the layout of this PositionedObjectPositioning.

        The layout of this positioned object.

        :return: The layout of this PositionedObjectPositioning.
        :rtype: str
        """
        return self._layout

    @layout.setter
    def layout(self, layout):
        """Sets the layout of this PositionedObjectPositioning.

        The layout of this positioned object.

        :param layout: The layout of this PositionedObjectPositioning.
        :type layout: str
        """
        allowed_values = ["POSITIONED_OBJECT_LAYOUT_UNSPECIFIED", "WRAP_TEXT", "BREAK_LEFT", "BREAK_RIGHT", "BREAK_LEFT_RIGHT", "IN_FRONT_OF_TEXT", "BEHIND_TEXT"]  # noqa: E501
        if layout not in allowed_values:
            raise ValueError(
                "Invalid value for `layout` ({0}), must be one of {1}"
                .format(layout, allowed_values)
            )

        self._layout = layout

    @property
    def left_offset(self):
        """Gets the left_offset of this PositionedObjectPositioning.


        :return: The left_offset of this PositionedObjectPositioning.
        :rtype: Dimension
        """
        return self._left_offset

    @left_offset.setter
    def left_offset(self, left_offset):
        """Sets the left_offset of this PositionedObjectPositioning.


        :param left_offset: The left_offset of this PositionedObjectPositioning.
        :type left_offset: Dimension
        """

        self._left_offset = left_offset

    @property
    def top_offset(self):
        """Gets the top_offset of this PositionedObjectPositioning.


        :return: The top_offset of this PositionedObjectPositioning.
        :rtype: Dimension
        """
        return self._top_offset

    @top_offset.setter
    def top_offset(self, top_offset):
        """Sets the top_offset of this PositionedObjectPositioning.


        :param top_offset: The top_offset of this PositionedObjectPositioning.
        :type top_offset: Dimension
        """

        self._top_offset = top_offset
