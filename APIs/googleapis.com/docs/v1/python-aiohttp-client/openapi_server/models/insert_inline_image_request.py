# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.end_of_segment_location import EndOfSegmentLocation
from openapi_server.models.location import Location
from openapi_server.models.size import Size
from openapi_server import util


class InsertInlineImageRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, end_of_segment_location: EndOfSegmentLocation=None, location: Location=None, object_size: Size=None, uri: str=None):
        """InsertInlineImageRequest - a model defined in OpenAPI

        :param end_of_segment_location: The end_of_segment_location of this InsertInlineImageRequest.
        :param location: The location of this InsertInlineImageRequest.
        :param object_size: The object_size of this InsertInlineImageRequest.
        :param uri: The uri of this InsertInlineImageRequest.
        """
        self.openapi_types = {
            'end_of_segment_location': EndOfSegmentLocation,
            'location': Location,
            'object_size': Size,
            'uri': str
        }

        self.attribute_map = {
            'end_of_segment_location': 'endOfSegmentLocation',
            'location': 'location',
            'object_size': 'objectSize',
            'uri': 'uri'
        }

        self._end_of_segment_location = end_of_segment_location
        self._location = location
        self._object_size = object_size
        self._uri = uri

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InsertInlineImageRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InsertInlineImageRequest of this InsertInlineImageRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def end_of_segment_location(self):
        """Gets the end_of_segment_location of this InsertInlineImageRequest.


        :return: The end_of_segment_location of this InsertInlineImageRequest.
        :rtype: EndOfSegmentLocation
        """
        return self._end_of_segment_location

    @end_of_segment_location.setter
    def end_of_segment_location(self, end_of_segment_location):
        """Sets the end_of_segment_location of this InsertInlineImageRequest.


        :param end_of_segment_location: The end_of_segment_location of this InsertInlineImageRequest.
        :type end_of_segment_location: EndOfSegmentLocation
        """

        self._end_of_segment_location = end_of_segment_location

    @property
    def location(self):
        """Gets the location of this InsertInlineImageRequest.


        :return: The location of this InsertInlineImageRequest.
        :rtype: Location
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this InsertInlineImageRequest.


        :param location: The location of this InsertInlineImageRequest.
        :type location: Location
        """

        self._location = location

    @property
    def object_size(self):
        """Gets the object_size of this InsertInlineImageRequest.


        :return: The object_size of this InsertInlineImageRequest.
        :rtype: Size
        """
        return self._object_size

    @object_size.setter
    def object_size(self, object_size):
        """Sets the object_size of this InsertInlineImageRequest.


        :param object_size: The object_size of this InsertInlineImageRequest.
        :type object_size: Size
        """

        self._object_size = object_size

    @property
    def uri(self):
        """Gets the uri of this InsertInlineImageRequest.

        The image URI. The image is fetched once at insertion time and a copy is stored for display inside the document. Images must be less than 50MB in size, cannot exceed 25 megapixels, and must be in one of PNG, JPEG, or GIF format. The provided URI must be publicly accessible and at most 2 kB in length. The URI itself is saved with the image, and exposed via the ImageProperties.content_uri field.

        :return: The uri of this InsertInlineImageRequest.
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this InsertInlineImageRequest.

        The image URI. The image is fetched once at insertion time and a copy is stored for display inside the document. Images must be less than 50MB in size, cannot exceed 25 megapixels, and must be in one of PNG, JPEG, or GIF format. The provided URI must be publicly accessible and at most 2 kB in length. The URI itself is saved with the image, and exposed via the ImageProperties.content_uri field.

        :param uri: The uri of this InsertInlineImageRequest.
        :type uri: str
        """

        self._uri = uri
