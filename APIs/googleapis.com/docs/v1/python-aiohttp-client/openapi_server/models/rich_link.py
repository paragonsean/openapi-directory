# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.rich_link_properties import RichLinkProperties
from openapi_server.models.suggested_text_style import SuggestedTextStyle
from openapi_server.models.text_style import TextStyle
from openapi_server import util


class RichLink(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, rich_link_id: str=None, rich_link_properties: RichLinkProperties=None, suggested_deletion_ids: List[str]=None, suggested_insertion_ids: List[str]=None, suggested_text_style_changes: Dict[str, SuggestedTextStyle]=None, text_style: TextStyle=None):
        """RichLink - a model defined in OpenAPI

        :param rich_link_id: The rich_link_id of this RichLink.
        :param rich_link_properties: The rich_link_properties of this RichLink.
        :param suggested_deletion_ids: The suggested_deletion_ids of this RichLink.
        :param suggested_insertion_ids: The suggested_insertion_ids of this RichLink.
        :param suggested_text_style_changes: The suggested_text_style_changes of this RichLink.
        :param text_style: The text_style of this RichLink.
        """
        self.openapi_types = {
            'rich_link_id': str,
            'rich_link_properties': RichLinkProperties,
            'suggested_deletion_ids': List[str],
            'suggested_insertion_ids': List[str],
            'suggested_text_style_changes': Dict[str, SuggestedTextStyle],
            'text_style': TextStyle
        }

        self.attribute_map = {
            'rich_link_id': 'richLinkId',
            'rich_link_properties': 'richLinkProperties',
            'suggested_deletion_ids': 'suggestedDeletionIds',
            'suggested_insertion_ids': 'suggestedInsertionIds',
            'suggested_text_style_changes': 'suggestedTextStyleChanges',
            'text_style': 'textStyle'
        }

        self._rich_link_id = rich_link_id
        self._rich_link_properties = rich_link_properties
        self._suggested_deletion_ids = suggested_deletion_ids
        self._suggested_insertion_ids = suggested_insertion_ids
        self._suggested_text_style_changes = suggested_text_style_changes
        self._text_style = text_style

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RichLink':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RichLink of this RichLink.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def rich_link_id(self):
        """Gets the rich_link_id of this RichLink.

        Output only. The ID of this link.

        :return: The rich_link_id of this RichLink.
        :rtype: str
        """
        return self._rich_link_id

    @rich_link_id.setter
    def rich_link_id(self, rich_link_id):
        """Sets the rich_link_id of this RichLink.

        Output only. The ID of this link.

        :param rich_link_id: The rich_link_id of this RichLink.
        :type rich_link_id: str
        """

        self._rich_link_id = rich_link_id

    @property
    def rich_link_properties(self):
        """Gets the rich_link_properties of this RichLink.


        :return: The rich_link_properties of this RichLink.
        :rtype: RichLinkProperties
        """
        return self._rich_link_properties

    @rich_link_properties.setter
    def rich_link_properties(self, rich_link_properties):
        """Sets the rich_link_properties of this RichLink.


        :param rich_link_properties: The rich_link_properties of this RichLink.
        :type rich_link_properties: RichLinkProperties
        """

        self._rich_link_properties = rich_link_properties

    @property
    def suggested_deletion_ids(self):
        """Gets the suggested_deletion_ids of this RichLink.

        IDs for suggestions that remove this link from the document. A RichLink might have multiple deletion IDs if, for example, multiple users suggest deleting it. If empty, then this person link isn't suggested for deletion.

        :return: The suggested_deletion_ids of this RichLink.
        :rtype: List[str]
        """
        return self._suggested_deletion_ids

    @suggested_deletion_ids.setter
    def suggested_deletion_ids(self, suggested_deletion_ids):
        """Sets the suggested_deletion_ids of this RichLink.

        IDs for suggestions that remove this link from the document. A RichLink might have multiple deletion IDs if, for example, multiple users suggest deleting it. If empty, then this person link isn't suggested for deletion.

        :param suggested_deletion_ids: The suggested_deletion_ids of this RichLink.
        :type suggested_deletion_ids: List[str]
        """

        self._suggested_deletion_ids = suggested_deletion_ids

    @property
    def suggested_insertion_ids(self):
        """Gets the suggested_insertion_ids of this RichLink.

        IDs for suggestions that insert this link into the document. A RichLink might have multiple insertion IDs if it's a nested suggested change (a suggestion within a suggestion made by a different user, for example). If empty, then this person link isn't a suggested insertion.

        :return: The suggested_insertion_ids of this RichLink.
        :rtype: List[str]
        """
        return self._suggested_insertion_ids

    @suggested_insertion_ids.setter
    def suggested_insertion_ids(self, suggested_insertion_ids):
        """Sets the suggested_insertion_ids of this RichLink.

        IDs for suggestions that insert this link into the document. A RichLink might have multiple insertion IDs if it's a nested suggested change (a suggestion within a suggestion made by a different user, for example). If empty, then this person link isn't a suggested insertion.

        :param suggested_insertion_ids: The suggested_insertion_ids of this RichLink.
        :type suggested_insertion_ids: List[str]
        """

        self._suggested_insertion_ids = suggested_insertion_ids

    @property
    def suggested_text_style_changes(self):
        """Gets the suggested_text_style_changes of this RichLink.

        The suggested text style changes to this RichLink, keyed by suggestion ID.

        :return: The suggested_text_style_changes of this RichLink.
        :rtype: Dict[str, SuggestedTextStyle]
        """
        return self._suggested_text_style_changes

    @suggested_text_style_changes.setter
    def suggested_text_style_changes(self, suggested_text_style_changes):
        """Sets the suggested_text_style_changes of this RichLink.

        The suggested text style changes to this RichLink, keyed by suggestion ID.

        :param suggested_text_style_changes: The suggested_text_style_changes of this RichLink.
        :type suggested_text_style_changes: Dict[str, SuggestedTextStyle]
        """

        self._suggested_text_style_changes = suggested_text_style_changes

    @property
    def text_style(self):
        """Gets the text_style of this RichLink.


        :return: The text_style of this RichLink.
        :rtype: TextStyle
        """
        return self._text_style

    @text_style.setter
    def text_style(self, text_style):
        """Sets the text_style of this RichLink.


        :param text_style: The text_style of this RichLink.
        :type text_style: TextStyle
        """

        self._text_style = text_style
