# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.end_of_segment_location import EndOfSegmentLocation
from openapi_server.models.location import Location
from openapi_server import util


class InsertSectionBreakRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, end_of_segment_location: EndOfSegmentLocation=None, location: Location=None, section_type: str=None):
        """InsertSectionBreakRequest - a model defined in OpenAPI

        :param end_of_segment_location: The end_of_segment_location of this InsertSectionBreakRequest.
        :param location: The location of this InsertSectionBreakRequest.
        :param section_type: The section_type of this InsertSectionBreakRequest.
        """
        self.openapi_types = {
            'end_of_segment_location': EndOfSegmentLocation,
            'location': Location,
            'section_type': str
        }

        self.attribute_map = {
            'end_of_segment_location': 'endOfSegmentLocation',
            'location': 'location',
            'section_type': 'sectionType'
        }

        self._end_of_segment_location = end_of_segment_location
        self._location = location
        self._section_type = section_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InsertSectionBreakRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InsertSectionBreakRequest of this InsertSectionBreakRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def end_of_segment_location(self):
        """Gets the end_of_segment_location of this InsertSectionBreakRequest.


        :return: The end_of_segment_location of this InsertSectionBreakRequest.
        :rtype: EndOfSegmentLocation
        """
        return self._end_of_segment_location

    @end_of_segment_location.setter
    def end_of_segment_location(self, end_of_segment_location):
        """Sets the end_of_segment_location of this InsertSectionBreakRequest.


        :param end_of_segment_location: The end_of_segment_location of this InsertSectionBreakRequest.
        :type end_of_segment_location: EndOfSegmentLocation
        """

        self._end_of_segment_location = end_of_segment_location

    @property
    def location(self):
        """Gets the location of this InsertSectionBreakRequest.


        :return: The location of this InsertSectionBreakRequest.
        :rtype: Location
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this InsertSectionBreakRequest.


        :param location: The location of this InsertSectionBreakRequest.
        :type location: Location
        """

        self._location = location

    @property
    def section_type(self):
        """Gets the section_type of this InsertSectionBreakRequest.

        The type of section to insert.

        :return: The section_type of this InsertSectionBreakRequest.
        :rtype: str
        """
        return self._section_type

    @section_type.setter
    def section_type(self, section_type):
        """Sets the section_type of this InsertSectionBreakRequest.

        The type of section to insert.

        :param section_type: The section_type of this InsertSectionBreakRequest.
        :type section_type: str
        """
        allowed_values = ["SECTION_TYPE_UNSPECIFIED", "CONTINUOUS", "NEXT_PAGE"]  # noqa: E501
        if section_type not in allowed_values:
            raise ValueError(
                "Invalid value for `section_type` ({0}), must be one of {1}"
                .format(section_type, allowed_values)
            )

        self._section_type = section_type
