# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.location import Location
from openapi_server.models.table_column_properties import TableColumnProperties
from openapi_server import util


class UpdateTableColumnPropertiesRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, column_indices: List[int]=None, fields: str=None, table_column_properties: TableColumnProperties=None, table_start_location: Location=None):
        """UpdateTableColumnPropertiesRequest - a model defined in OpenAPI

        :param column_indices: The column_indices of this UpdateTableColumnPropertiesRequest.
        :param fields: The fields of this UpdateTableColumnPropertiesRequest.
        :param table_column_properties: The table_column_properties of this UpdateTableColumnPropertiesRequest.
        :param table_start_location: The table_start_location of this UpdateTableColumnPropertiesRequest.
        """
        self.openapi_types = {
            'column_indices': List[int],
            'fields': str,
            'table_column_properties': TableColumnProperties,
            'table_start_location': Location
        }

        self.attribute_map = {
            'column_indices': 'columnIndices',
            'fields': 'fields',
            'table_column_properties': 'tableColumnProperties',
            'table_start_location': 'tableStartLocation'
        }

        self._column_indices = column_indices
        self._fields = fields
        self._table_column_properties = table_column_properties
        self._table_start_location = table_start_location

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateTableColumnPropertiesRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateTableColumnPropertiesRequest of this UpdateTableColumnPropertiesRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def column_indices(self):
        """Gets the column_indices of this UpdateTableColumnPropertiesRequest.

        The list of zero-based column indices whose property should be updated. If no indices are specified, all columns will be updated.

        :return: The column_indices of this UpdateTableColumnPropertiesRequest.
        :rtype: List[int]
        """
        return self._column_indices

    @column_indices.setter
    def column_indices(self, column_indices):
        """Sets the column_indices of this UpdateTableColumnPropertiesRequest.

        The list of zero-based column indices whose property should be updated. If no indices are specified, all columns will be updated.

        :param column_indices: The column_indices of this UpdateTableColumnPropertiesRequest.
        :type column_indices: List[int]
        """

        self._column_indices = column_indices

    @property
    def fields(self):
        """Gets the fields of this UpdateTableColumnPropertiesRequest.

        The fields that should be updated. At least one field must be specified. The root `tableColumnProperties` is implied and should not be specified. A single `\"*\"` can be used as short-hand for listing every field. For example to update the column width, set `fields` to `\"width\"`.

        :return: The fields of this UpdateTableColumnPropertiesRequest.
        :rtype: str
        """
        return self._fields

    @fields.setter
    def fields(self, fields):
        """Sets the fields of this UpdateTableColumnPropertiesRequest.

        The fields that should be updated. At least one field must be specified. The root `tableColumnProperties` is implied and should not be specified. A single `\"*\"` can be used as short-hand for listing every field. For example to update the column width, set `fields` to `\"width\"`.

        :param fields: The fields of this UpdateTableColumnPropertiesRequest.
        :type fields: str
        """

        self._fields = fields

    @property
    def table_column_properties(self):
        """Gets the table_column_properties of this UpdateTableColumnPropertiesRequest.


        :return: The table_column_properties of this UpdateTableColumnPropertiesRequest.
        :rtype: TableColumnProperties
        """
        return self._table_column_properties

    @table_column_properties.setter
    def table_column_properties(self, table_column_properties):
        """Sets the table_column_properties of this UpdateTableColumnPropertiesRequest.


        :param table_column_properties: The table_column_properties of this UpdateTableColumnPropertiesRequest.
        :type table_column_properties: TableColumnProperties
        """

        self._table_column_properties = table_column_properties

    @property
    def table_start_location(self):
        """Gets the table_start_location of this UpdateTableColumnPropertiesRequest.


        :return: The table_start_location of this UpdateTableColumnPropertiesRequest.
        :rtype: Location
        """
        return self._table_start_location

    @table_start_location.setter
    def table_start_location(self, table_start_location):
        """Sets the table_start_location of this UpdateTableColumnPropertiesRequest.


        :param table_start_location: The table_start_location of this UpdateTableColumnPropertiesRequest.
        :type table_start_location: Location
        """

        self._table_start_location = table_start_location
