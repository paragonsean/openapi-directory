# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.suggested_text_style import SuggestedTextStyle
from openapi_server.models.text_style import TextStyle
from openapi_server import util


class FootnoteReference(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, footnote_id: str=None, footnote_number: str=None, suggested_deletion_ids: List[str]=None, suggested_insertion_ids: List[str]=None, suggested_text_style_changes: Dict[str, SuggestedTextStyle]=None, text_style: TextStyle=None):
        """FootnoteReference - a model defined in OpenAPI

        :param footnote_id: The footnote_id of this FootnoteReference.
        :param footnote_number: The footnote_number of this FootnoteReference.
        :param suggested_deletion_ids: The suggested_deletion_ids of this FootnoteReference.
        :param suggested_insertion_ids: The suggested_insertion_ids of this FootnoteReference.
        :param suggested_text_style_changes: The suggested_text_style_changes of this FootnoteReference.
        :param text_style: The text_style of this FootnoteReference.
        """
        self.openapi_types = {
            'footnote_id': str,
            'footnote_number': str,
            'suggested_deletion_ids': List[str],
            'suggested_insertion_ids': List[str],
            'suggested_text_style_changes': Dict[str, SuggestedTextStyle],
            'text_style': TextStyle
        }

        self.attribute_map = {
            'footnote_id': 'footnoteId',
            'footnote_number': 'footnoteNumber',
            'suggested_deletion_ids': 'suggestedDeletionIds',
            'suggested_insertion_ids': 'suggestedInsertionIds',
            'suggested_text_style_changes': 'suggestedTextStyleChanges',
            'text_style': 'textStyle'
        }

        self._footnote_id = footnote_id
        self._footnote_number = footnote_number
        self._suggested_deletion_ids = suggested_deletion_ids
        self._suggested_insertion_ids = suggested_insertion_ids
        self._suggested_text_style_changes = suggested_text_style_changes
        self._text_style = text_style

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FootnoteReference':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FootnoteReference of this FootnoteReference.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def footnote_id(self):
        """Gets the footnote_id of this FootnoteReference.

        The ID of the footnote that contains the content of this footnote reference.

        :return: The footnote_id of this FootnoteReference.
        :rtype: str
        """
        return self._footnote_id

    @footnote_id.setter
    def footnote_id(self, footnote_id):
        """Sets the footnote_id of this FootnoteReference.

        The ID of the footnote that contains the content of this footnote reference.

        :param footnote_id: The footnote_id of this FootnoteReference.
        :type footnote_id: str
        """

        self._footnote_id = footnote_id

    @property
    def footnote_number(self):
        """Gets the footnote_number of this FootnoteReference.

        The rendered number of this footnote.

        :return: The footnote_number of this FootnoteReference.
        :rtype: str
        """
        return self._footnote_number

    @footnote_number.setter
    def footnote_number(self, footnote_number):
        """Sets the footnote_number of this FootnoteReference.

        The rendered number of this footnote.

        :param footnote_number: The footnote_number of this FootnoteReference.
        :type footnote_number: str
        """

        self._footnote_number = footnote_number

    @property
    def suggested_deletion_ids(self):
        """Gets the suggested_deletion_ids of this FootnoteReference.

        The suggested deletion IDs. If empty, then there are no suggested deletions of this content.

        :return: The suggested_deletion_ids of this FootnoteReference.
        :rtype: List[str]
        """
        return self._suggested_deletion_ids

    @suggested_deletion_ids.setter
    def suggested_deletion_ids(self, suggested_deletion_ids):
        """Sets the suggested_deletion_ids of this FootnoteReference.

        The suggested deletion IDs. If empty, then there are no suggested deletions of this content.

        :param suggested_deletion_ids: The suggested_deletion_ids of this FootnoteReference.
        :type suggested_deletion_ids: List[str]
        """

        self._suggested_deletion_ids = suggested_deletion_ids

    @property
    def suggested_insertion_ids(self):
        """Gets the suggested_insertion_ids of this FootnoteReference.

        The suggested insertion IDs. A FootnoteReference may have multiple insertion IDs if it's a nested suggested change. If empty, then this is not a suggested insertion.

        :return: The suggested_insertion_ids of this FootnoteReference.
        :rtype: List[str]
        """
        return self._suggested_insertion_ids

    @suggested_insertion_ids.setter
    def suggested_insertion_ids(self, suggested_insertion_ids):
        """Sets the suggested_insertion_ids of this FootnoteReference.

        The suggested insertion IDs. A FootnoteReference may have multiple insertion IDs if it's a nested suggested change. If empty, then this is not a suggested insertion.

        :param suggested_insertion_ids: The suggested_insertion_ids of this FootnoteReference.
        :type suggested_insertion_ids: List[str]
        """

        self._suggested_insertion_ids = suggested_insertion_ids

    @property
    def suggested_text_style_changes(self):
        """Gets the suggested_text_style_changes of this FootnoteReference.

        The suggested text style changes to this FootnoteReference, keyed by suggestion ID.

        :return: The suggested_text_style_changes of this FootnoteReference.
        :rtype: Dict[str, SuggestedTextStyle]
        """
        return self._suggested_text_style_changes

    @suggested_text_style_changes.setter
    def suggested_text_style_changes(self, suggested_text_style_changes):
        """Sets the suggested_text_style_changes of this FootnoteReference.

        The suggested text style changes to this FootnoteReference, keyed by suggestion ID.

        :param suggested_text_style_changes: The suggested_text_style_changes of this FootnoteReference.
        :type suggested_text_style_changes: Dict[str, SuggestedTextStyle]
        """

        self._suggested_text_style_changes = suggested_text_style_changes

    @property
    def text_style(self):
        """Gets the text_style of this FootnoteReference.


        :return: The text_style of this FootnoteReference.
        :rtype: TextStyle
        """
        return self._text_style

    @text_style.setter
    def text_style(self, text_style):
        """Sets the text_style of this FootnoteReference.


        :param text_style: The text_style of this FootnoteReference.
        :type text_style: TextStyle
        """

        self._text_style = text_style
