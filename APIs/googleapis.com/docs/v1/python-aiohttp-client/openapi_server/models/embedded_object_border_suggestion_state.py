# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EmbeddedObjectBorderSuggestionState(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, color_suggested: bool=None, dash_style_suggested: bool=None, property_state_suggested: bool=None, width_suggested: bool=None):
        """EmbeddedObjectBorderSuggestionState - a model defined in OpenAPI

        :param color_suggested: The color_suggested of this EmbeddedObjectBorderSuggestionState.
        :param dash_style_suggested: The dash_style_suggested of this EmbeddedObjectBorderSuggestionState.
        :param property_state_suggested: The property_state_suggested of this EmbeddedObjectBorderSuggestionState.
        :param width_suggested: The width_suggested of this EmbeddedObjectBorderSuggestionState.
        """
        self.openapi_types = {
            'color_suggested': bool,
            'dash_style_suggested': bool,
            'property_state_suggested': bool,
            'width_suggested': bool
        }

        self.attribute_map = {
            'color_suggested': 'colorSuggested',
            'dash_style_suggested': 'dashStyleSuggested',
            'property_state_suggested': 'propertyStateSuggested',
            'width_suggested': 'widthSuggested'
        }

        self._color_suggested = color_suggested
        self._dash_style_suggested = dash_style_suggested
        self._property_state_suggested = property_state_suggested
        self._width_suggested = width_suggested

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EmbeddedObjectBorderSuggestionState':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EmbeddedObjectBorderSuggestionState of this EmbeddedObjectBorderSuggestionState.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def color_suggested(self):
        """Gets the color_suggested of this EmbeddedObjectBorderSuggestionState.

        Indicates if there was a suggested change to color.

        :return: The color_suggested of this EmbeddedObjectBorderSuggestionState.
        :rtype: bool
        """
        return self._color_suggested

    @color_suggested.setter
    def color_suggested(self, color_suggested):
        """Sets the color_suggested of this EmbeddedObjectBorderSuggestionState.

        Indicates if there was a suggested change to color.

        :param color_suggested: The color_suggested of this EmbeddedObjectBorderSuggestionState.
        :type color_suggested: bool
        """

        self._color_suggested = color_suggested

    @property
    def dash_style_suggested(self):
        """Gets the dash_style_suggested of this EmbeddedObjectBorderSuggestionState.

        Indicates if there was a suggested change to dash_style.

        :return: The dash_style_suggested of this EmbeddedObjectBorderSuggestionState.
        :rtype: bool
        """
        return self._dash_style_suggested

    @dash_style_suggested.setter
    def dash_style_suggested(self, dash_style_suggested):
        """Sets the dash_style_suggested of this EmbeddedObjectBorderSuggestionState.

        Indicates if there was a suggested change to dash_style.

        :param dash_style_suggested: The dash_style_suggested of this EmbeddedObjectBorderSuggestionState.
        :type dash_style_suggested: bool
        """

        self._dash_style_suggested = dash_style_suggested

    @property
    def property_state_suggested(self):
        """Gets the property_state_suggested of this EmbeddedObjectBorderSuggestionState.

        Indicates if there was a suggested change to property_state.

        :return: The property_state_suggested of this EmbeddedObjectBorderSuggestionState.
        :rtype: bool
        """
        return self._property_state_suggested

    @property_state_suggested.setter
    def property_state_suggested(self, property_state_suggested):
        """Sets the property_state_suggested of this EmbeddedObjectBorderSuggestionState.

        Indicates if there was a suggested change to property_state.

        :param property_state_suggested: The property_state_suggested of this EmbeddedObjectBorderSuggestionState.
        :type property_state_suggested: bool
        """

        self._property_state_suggested = property_state_suggested

    @property
    def width_suggested(self):
        """Gets the width_suggested of this EmbeddedObjectBorderSuggestionState.

        Indicates if there was a suggested change to width.

        :return: The width_suggested of this EmbeddedObjectBorderSuggestionState.
        :rtype: bool
        """
        return self._width_suggested

    @width_suggested.setter
    def width_suggested(self, width_suggested):
        """Sets the width_suggested of this EmbeddedObjectBorderSuggestionState.

        Indicates if there was a suggested change to width.

        :param width_suggested: The width_suggested of this EmbeddedObjectBorderSuggestionState.
        :type width_suggested: bool
        """

        self._width_suggested = width_suggested
