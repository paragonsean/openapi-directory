# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.paragraph_style import ParagraphStyle
from openapi_server.models.text_style import TextStyle
from openapi_server import util


class NamedStyle(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, named_style_type: str=None, paragraph_style: ParagraphStyle=None, text_style: TextStyle=None):
        """NamedStyle - a model defined in OpenAPI

        :param named_style_type: The named_style_type of this NamedStyle.
        :param paragraph_style: The paragraph_style of this NamedStyle.
        :param text_style: The text_style of this NamedStyle.
        """
        self.openapi_types = {
            'named_style_type': str,
            'paragraph_style': ParagraphStyle,
            'text_style': TextStyle
        }

        self.attribute_map = {
            'named_style_type': 'namedStyleType',
            'paragraph_style': 'paragraphStyle',
            'text_style': 'textStyle'
        }

        self._named_style_type = named_style_type
        self._paragraph_style = paragraph_style
        self._text_style = text_style

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NamedStyle':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NamedStyle of this NamedStyle.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def named_style_type(self):
        """Gets the named_style_type of this NamedStyle.

        The type of this named style.

        :return: The named_style_type of this NamedStyle.
        :rtype: str
        """
        return self._named_style_type

    @named_style_type.setter
    def named_style_type(self, named_style_type):
        """Sets the named_style_type of this NamedStyle.

        The type of this named style.

        :param named_style_type: The named_style_type of this NamedStyle.
        :type named_style_type: str
        """
        allowed_values = ["NAMED_STYLE_TYPE_UNSPECIFIED", "NORMAL_TEXT", "TITLE", "SUBTITLE", "HEADING_1", "HEADING_2", "HEADING_3", "HEADING_4", "HEADING_5", "HEADING_6"]  # noqa: E501
        if named_style_type not in allowed_values:
            raise ValueError(
                "Invalid value for `named_style_type` ({0}), must be one of {1}"
                .format(named_style_type, allowed_values)
            )

        self._named_style_type = named_style_type

    @property
    def paragraph_style(self):
        """Gets the paragraph_style of this NamedStyle.


        :return: The paragraph_style of this NamedStyle.
        :rtype: ParagraphStyle
        """
        return self._paragraph_style

    @paragraph_style.setter
    def paragraph_style(self, paragraph_style):
        """Sets the paragraph_style of this NamedStyle.


        :param paragraph_style: The paragraph_style of this NamedStyle.
        :type paragraph_style: ParagraphStyle
        """

        self._paragraph_style = paragraph_style

    @property
    def text_style(self):
        """Gets the text_style of this NamedStyle.


        :return: The text_style of this NamedStyle.
        :rtype: TextStyle
        """
        return self._text_style

    @text_style.setter
    def text_style(self, text_style):
        """Sets the text_style of this NamedStyle.


        :param text_style: The text_style of this NamedStyle.
        :type text_style: TextStyle
        """

        self._text_style = text_style
