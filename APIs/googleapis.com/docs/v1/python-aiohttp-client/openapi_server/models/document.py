# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.body import Body
from openapi_server.models.document_style import DocumentStyle
from openapi_server.models.footer import Footer
from openapi_server.models.footnote import Footnote
from openapi_server.models.header import Header
from openapi_server.models.inline_object import InlineObject
from openapi_server.models.named_ranges import NamedRanges
from openapi_server.models.named_styles import NamedStyles
from openapi_server.models.positioned_object import PositionedObject
from openapi_server.models.suggested_document_style import SuggestedDocumentStyle
from openapi_server.models.suggested_named_styles import SuggestedNamedStyles
from openapi_server import util


class Document(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, body: Body=None, document_id: str=None, document_style: DocumentStyle=None, footers: Dict[str, Footer]=None, footnotes: Dict[str, Footnote]=None, headers: Dict[str, Header]=None, inline_objects: Dict[str, InlineObject]=None, lists: Dict[str, List]=None, named_ranges: Dict[str, NamedRanges]=None, named_styles: NamedStyles=None, positioned_objects: Dict[str, PositionedObject]=None, revision_id: str=None, suggested_document_style_changes: Dict[str, SuggestedDocumentStyle]=None, suggested_named_styles_changes: Dict[str, SuggestedNamedStyles]=None, suggestions_view_mode: str=None, title: str=None):
        """Document - a model defined in OpenAPI

        :param body: The body of this Document.
        :param document_id: The document_id of this Document.
        :param document_style: The document_style of this Document.
        :param footers: The footers of this Document.
        :param footnotes: The footnotes of this Document.
        :param headers: The headers of this Document.
        :param inline_objects: The inline_objects of this Document.
        :param lists: The lists of this Document.
        :param named_ranges: The named_ranges of this Document.
        :param named_styles: The named_styles of this Document.
        :param positioned_objects: The positioned_objects of this Document.
        :param revision_id: The revision_id of this Document.
        :param suggested_document_style_changes: The suggested_document_style_changes of this Document.
        :param suggested_named_styles_changes: The suggested_named_styles_changes of this Document.
        :param suggestions_view_mode: The suggestions_view_mode of this Document.
        :param title: The title of this Document.
        """
        self.openapi_types = {
            'body': Body,
            'document_id': str,
            'document_style': DocumentStyle,
            'footers': Dict[str, Footer],
            'footnotes': Dict[str, Footnote],
            'headers': Dict[str, Header],
            'inline_objects': Dict[str, InlineObject],
            'lists': Dict[str, List],
            'named_ranges': Dict[str, NamedRanges],
            'named_styles': NamedStyles,
            'positioned_objects': Dict[str, PositionedObject],
            'revision_id': str,
            'suggested_document_style_changes': Dict[str, SuggestedDocumentStyle],
            'suggested_named_styles_changes': Dict[str, SuggestedNamedStyles],
            'suggestions_view_mode': str,
            'title': str
        }

        self.attribute_map = {
            'body': 'body',
            'document_id': 'documentId',
            'document_style': 'documentStyle',
            'footers': 'footers',
            'footnotes': 'footnotes',
            'headers': 'headers',
            'inline_objects': 'inlineObjects',
            'lists': 'lists',
            'named_ranges': 'namedRanges',
            'named_styles': 'namedStyles',
            'positioned_objects': 'positionedObjects',
            'revision_id': 'revisionId',
            'suggested_document_style_changes': 'suggestedDocumentStyleChanges',
            'suggested_named_styles_changes': 'suggestedNamedStylesChanges',
            'suggestions_view_mode': 'suggestionsViewMode',
            'title': 'title'
        }

        self._body = body
        self._document_id = document_id
        self._document_style = document_style
        self._footers = footers
        self._footnotes = footnotes
        self._headers = headers
        self._inline_objects = inline_objects
        self._lists = lists
        self._named_ranges = named_ranges
        self._named_styles = named_styles
        self._positioned_objects = positioned_objects
        self._revision_id = revision_id
        self._suggested_document_style_changes = suggested_document_style_changes
        self._suggested_named_styles_changes = suggested_named_styles_changes
        self._suggestions_view_mode = suggestions_view_mode
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Document':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Document of this Document.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def body(self):
        """Gets the body of this Document.


        :return: The body of this Document.
        :rtype: Body
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this Document.


        :param body: The body of this Document.
        :type body: Body
        """

        self._body = body

    @property
    def document_id(self):
        """Gets the document_id of this Document.

        Output only. The ID of the document.

        :return: The document_id of this Document.
        :rtype: str
        """
        return self._document_id

    @document_id.setter
    def document_id(self, document_id):
        """Sets the document_id of this Document.

        Output only. The ID of the document.

        :param document_id: The document_id of this Document.
        :type document_id: str
        """

        self._document_id = document_id

    @property
    def document_style(self):
        """Gets the document_style of this Document.


        :return: The document_style of this Document.
        :rtype: DocumentStyle
        """
        return self._document_style

    @document_style.setter
    def document_style(self, document_style):
        """Sets the document_style of this Document.


        :param document_style: The document_style of this Document.
        :type document_style: DocumentStyle
        """

        self._document_style = document_style

    @property
    def footers(self):
        """Gets the footers of this Document.

        Output only. The footers in the document, keyed by footer ID.

        :return: The footers of this Document.
        :rtype: Dict[str, Footer]
        """
        return self._footers

    @footers.setter
    def footers(self, footers):
        """Sets the footers of this Document.

        Output only. The footers in the document, keyed by footer ID.

        :param footers: The footers of this Document.
        :type footers: Dict[str, Footer]
        """

        self._footers = footers

    @property
    def footnotes(self):
        """Gets the footnotes of this Document.

        Output only. The footnotes in the document, keyed by footnote ID.

        :return: The footnotes of this Document.
        :rtype: Dict[str, Footnote]
        """
        return self._footnotes

    @footnotes.setter
    def footnotes(self, footnotes):
        """Sets the footnotes of this Document.

        Output only. The footnotes in the document, keyed by footnote ID.

        :param footnotes: The footnotes of this Document.
        :type footnotes: Dict[str, Footnote]
        """

        self._footnotes = footnotes

    @property
    def headers(self):
        """Gets the headers of this Document.

        Output only. The headers in the document, keyed by header ID.

        :return: The headers of this Document.
        :rtype: Dict[str, Header]
        """
        return self._headers

    @headers.setter
    def headers(self, headers):
        """Sets the headers of this Document.

        Output only. The headers in the document, keyed by header ID.

        :param headers: The headers of this Document.
        :type headers: Dict[str, Header]
        """

        self._headers = headers

    @property
    def inline_objects(self):
        """Gets the inline_objects of this Document.

        Output only. The inline objects in the document, keyed by object ID.

        :return: The inline_objects of this Document.
        :rtype: Dict[str, InlineObject]
        """
        return self._inline_objects

    @inline_objects.setter
    def inline_objects(self, inline_objects):
        """Sets the inline_objects of this Document.

        Output only. The inline objects in the document, keyed by object ID.

        :param inline_objects: The inline_objects of this Document.
        :type inline_objects: Dict[str, InlineObject]
        """

        self._inline_objects = inline_objects

    @property
    def lists(self):
        """Gets the lists of this Document.

        Output only. The lists in the document, keyed by list ID.

        :return: The lists of this Document.
        :rtype: Dict[str, List]
        """
        return self._lists

    @lists.setter
    def lists(self, lists):
        """Sets the lists of this Document.

        Output only. The lists in the document, keyed by list ID.

        :param lists: The lists of this Document.
        :type lists: Dict[str, List]
        """

        self._lists = lists

    @property
    def named_ranges(self):
        """Gets the named_ranges of this Document.

        Output only. The named ranges in the document, keyed by name.

        :return: The named_ranges of this Document.
        :rtype: Dict[str, NamedRanges]
        """
        return self._named_ranges

    @named_ranges.setter
    def named_ranges(self, named_ranges):
        """Sets the named_ranges of this Document.

        Output only. The named ranges in the document, keyed by name.

        :param named_ranges: The named_ranges of this Document.
        :type named_ranges: Dict[str, NamedRanges]
        """

        self._named_ranges = named_ranges

    @property
    def named_styles(self):
        """Gets the named_styles of this Document.


        :return: The named_styles of this Document.
        :rtype: NamedStyles
        """
        return self._named_styles

    @named_styles.setter
    def named_styles(self, named_styles):
        """Sets the named_styles of this Document.


        :param named_styles: The named_styles of this Document.
        :type named_styles: NamedStyles
        """

        self._named_styles = named_styles

    @property
    def positioned_objects(self):
        """Gets the positioned_objects of this Document.

        Output only. The positioned objects in the document, keyed by object ID.

        :return: The positioned_objects of this Document.
        :rtype: Dict[str, PositionedObject]
        """
        return self._positioned_objects

    @positioned_objects.setter
    def positioned_objects(self, positioned_objects):
        """Sets the positioned_objects of this Document.

        Output only. The positioned objects in the document, keyed by object ID.

        :param positioned_objects: The positioned_objects of this Document.
        :type positioned_objects: Dict[str, PositionedObject]
        """

        self._positioned_objects = positioned_objects

    @property
    def revision_id(self):
        """Gets the revision_id of this Document.

        Output only. The revision ID of the document. Can be used in update requests to specify which revision of a document to apply updates to and how the request should behave if the document has been edited since that revision. Only populated if the user has edit access to the document. The revision ID is not a sequential number but an opaque string. The format of the revision ID might change over time. A returned revision ID is only guaranteed to be valid for 24 hours after it has been returned and cannot be shared across users. If the revision ID is unchanged between calls, then the document has not changed. Conversely, a changed ID (for the same document and user) usually means the document has been updated. However, a changed ID can also be due to internal factors such as ID format changes.

        :return: The revision_id of this Document.
        :rtype: str
        """
        return self._revision_id

    @revision_id.setter
    def revision_id(self, revision_id):
        """Sets the revision_id of this Document.

        Output only. The revision ID of the document. Can be used in update requests to specify which revision of a document to apply updates to and how the request should behave if the document has been edited since that revision. Only populated if the user has edit access to the document. The revision ID is not a sequential number but an opaque string. The format of the revision ID might change over time. A returned revision ID is only guaranteed to be valid for 24 hours after it has been returned and cannot be shared across users. If the revision ID is unchanged between calls, then the document has not changed. Conversely, a changed ID (for the same document and user) usually means the document has been updated. However, a changed ID can also be due to internal factors such as ID format changes.

        :param revision_id: The revision_id of this Document.
        :type revision_id: str
        """

        self._revision_id = revision_id

    @property
    def suggested_document_style_changes(self):
        """Gets the suggested_document_style_changes of this Document.

        Output only. The suggested changes to the style of the document, keyed by suggestion ID.

        :return: The suggested_document_style_changes of this Document.
        :rtype: Dict[str, SuggestedDocumentStyle]
        """
        return self._suggested_document_style_changes

    @suggested_document_style_changes.setter
    def suggested_document_style_changes(self, suggested_document_style_changes):
        """Sets the suggested_document_style_changes of this Document.

        Output only. The suggested changes to the style of the document, keyed by suggestion ID.

        :param suggested_document_style_changes: The suggested_document_style_changes of this Document.
        :type suggested_document_style_changes: Dict[str, SuggestedDocumentStyle]
        """

        self._suggested_document_style_changes = suggested_document_style_changes

    @property
    def suggested_named_styles_changes(self):
        """Gets the suggested_named_styles_changes of this Document.

        Output only. The suggested changes to the named styles of the document, keyed by suggestion ID.

        :return: The suggested_named_styles_changes of this Document.
        :rtype: Dict[str, SuggestedNamedStyles]
        """
        return self._suggested_named_styles_changes

    @suggested_named_styles_changes.setter
    def suggested_named_styles_changes(self, suggested_named_styles_changes):
        """Sets the suggested_named_styles_changes of this Document.

        Output only. The suggested changes to the named styles of the document, keyed by suggestion ID.

        :param suggested_named_styles_changes: The suggested_named_styles_changes of this Document.
        :type suggested_named_styles_changes: Dict[str, SuggestedNamedStyles]
        """

        self._suggested_named_styles_changes = suggested_named_styles_changes

    @property
    def suggestions_view_mode(self):
        """Gets the suggestions_view_mode of this Document.

        Output only. The suggestions view mode applied to the document. Note: When editing a document, changes must be based on a document with SUGGESTIONS_INLINE.

        :return: The suggestions_view_mode of this Document.
        :rtype: str
        """
        return self._suggestions_view_mode

    @suggestions_view_mode.setter
    def suggestions_view_mode(self, suggestions_view_mode):
        """Sets the suggestions_view_mode of this Document.

        Output only. The suggestions view mode applied to the document. Note: When editing a document, changes must be based on a document with SUGGESTIONS_INLINE.

        :param suggestions_view_mode: The suggestions_view_mode of this Document.
        :type suggestions_view_mode: str
        """
        allowed_values = ["DEFAULT_FOR_CURRENT_ACCESS", "SUGGESTIONS_INLINE", "PREVIEW_SUGGESTIONS_ACCEPTED", "PREVIEW_WITHOUT_SUGGESTIONS"]  # noqa: E501
        if suggestions_view_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `suggestions_view_mode` ({0}), must be one of {1}"
                .format(suggestions_view_mode, allowed_values)
            )

        self._suggestions_view_mode = suggestions_view_mode

    @property
    def title(self):
        """Gets the title of this Document.

        The title of the document.

        :return: The title of this Document.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Document.

        The title of the document.

        :param title: The title of this Document.
        :type title: str
        """

        self._title = title
