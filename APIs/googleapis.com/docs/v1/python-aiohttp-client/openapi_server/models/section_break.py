# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.section_style import SectionStyle
from openapi_server import util


class SectionBreak(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, section_style: SectionStyle=None, suggested_deletion_ids: List[str]=None, suggested_insertion_ids: List[str]=None):
        """SectionBreak - a model defined in OpenAPI

        :param section_style: The section_style of this SectionBreak.
        :param suggested_deletion_ids: The suggested_deletion_ids of this SectionBreak.
        :param suggested_insertion_ids: The suggested_insertion_ids of this SectionBreak.
        """
        self.openapi_types = {
            'section_style': SectionStyle,
            'suggested_deletion_ids': List[str],
            'suggested_insertion_ids': List[str]
        }

        self.attribute_map = {
            'section_style': 'sectionStyle',
            'suggested_deletion_ids': 'suggestedDeletionIds',
            'suggested_insertion_ids': 'suggestedInsertionIds'
        }

        self._section_style = section_style
        self._suggested_deletion_ids = suggested_deletion_ids
        self._suggested_insertion_ids = suggested_insertion_ids

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SectionBreak':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SectionBreak of this SectionBreak.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def section_style(self):
        """Gets the section_style of this SectionBreak.


        :return: The section_style of this SectionBreak.
        :rtype: SectionStyle
        """
        return self._section_style

    @section_style.setter
    def section_style(self, section_style):
        """Sets the section_style of this SectionBreak.


        :param section_style: The section_style of this SectionBreak.
        :type section_style: SectionStyle
        """

        self._section_style = section_style

    @property
    def suggested_deletion_ids(self):
        """Gets the suggested_deletion_ids of this SectionBreak.

        The suggested deletion IDs. If empty, then there are no suggested deletions of this content.

        :return: The suggested_deletion_ids of this SectionBreak.
        :rtype: List[str]
        """
        return self._suggested_deletion_ids

    @suggested_deletion_ids.setter
    def suggested_deletion_ids(self, suggested_deletion_ids):
        """Sets the suggested_deletion_ids of this SectionBreak.

        The suggested deletion IDs. If empty, then there are no suggested deletions of this content.

        :param suggested_deletion_ids: The suggested_deletion_ids of this SectionBreak.
        :type suggested_deletion_ids: List[str]
        """

        self._suggested_deletion_ids = suggested_deletion_ids

    @property
    def suggested_insertion_ids(self):
        """Gets the suggested_insertion_ids of this SectionBreak.

        The suggested insertion IDs. A SectionBreak may have multiple insertion IDs if it's a nested suggested change. If empty, then this is not a suggested insertion.

        :return: The suggested_insertion_ids of this SectionBreak.
        :rtype: List[str]
        """
        return self._suggested_insertion_ids

    @suggested_insertion_ids.setter
    def suggested_insertion_ids(self, suggested_insertion_ids):
        """Sets the suggested_insertion_ids of this SectionBreak.

        The suggested insertion IDs. A SectionBreak may have multiple insertion IDs if it's a nested suggested change. If empty, then this is not a suggested insertion.

        :param suggested_insertion_ids: The suggested_insertion_ids of this SectionBreak.
        :type suggested_insertion_ids: List[str]
        """

        self._suggested_insertion_ids = suggested_insertion_ids
