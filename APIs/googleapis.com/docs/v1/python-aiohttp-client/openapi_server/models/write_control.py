# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class WriteControl(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, required_revision_id: str=None, target_revision_id: str=None):
        """WriteControl - a model defined in OpenAPI

        :param required_revision_id: The required_revision_id of this WriteControl.
        :param target_revision_id: The target_revision_id of this WriteControl.
        """
        self.openapi_types = {
            'required_revision_id': str,
            'target_revision_id': str
        }

        self.attribute_map = {
            'required_revision_id': 'requiredRevisionId',
            'target_revision_id': 'targetRevisionId'
        }

        self._required_revision_id = required_revision_id
        self._target_revision_id = target_revision_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WriteControl':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WriteControl of this WriteControl.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def required_revision_id(self):
        """Gets the required_revision_id of this WriteControl.

        The optional revision ID of the document the write request is applied to. If this is not the latest revision of the document, the request is not processed and returns a 400 bad request error. When a required revision ID is returned in a response, it indicates the revision ID of the document after the request was applied.

        :return: The required_revision_id of this WriteControl.
        :rtype: str
        """
        return self._required_revision_id

    @required_revision_id.setter
    def required_revision_id(self, required_revision_id):
        """Sets the required_revision_id of this WriteControl.

        The optional revision ID of the document the write request is applied to. If this is not the latest revision of the document, the request is not processed and returns a 400 bad request error. When a required revision ID is returned in a response, it indicates the revision ID of the document after the request was applied.

        :param required_revision_id: The required_revision_id of this WriteControl.
        :type required_revision_id: str
        """

        self._required_revision_id = required_revision_id

    @property
    def target_revision_id(self):
        """Gets the target_revision_id of this WriteControl.

        The optional target revision ID of the document the write request is applied to. If collaborator changes have occurred after the document was read using the API, the changes produced by this write request are applied against the collaborator changes. This results in a new revision of the document that incorporates both the collaborator changes and the changes in the request, with the Docs server resolving conflicting changes. When using target revision ID, the API client can be thought of as another collaborator of the document. The target revision ID can only be used to write to recent versions of a document. If the target revision is too far behind the latest revision, the request is not processed and returns a 400 bad request error. The request should be tried again after retrieving the latest version of the document. Usually a revision ID remains valid for use as a target revision for several minutes after it's read, but for frequently edited documents this window might be shorter.

        :return: The target_revision_id of this WriteControl.
        :rtype: str
        """
        return self._target_revision_id

    @target_revision_id.setter
    def target_revision_id(self, target_revision_id):
        """Sets the target_revision_id of this WriteControl.

        The optional target revision ID of the document the write request is applied to. If collaborator changes have occurred after the document was read using the API, the changes produced by this write request are applied against the collaborator changes. This results in a new revision of the document that incorporates both the collaborator changes and the changes in the request, with the Docs server resolving conflicting changes. When using target revision ID, the API client can be thought of as another collaborator of the document. The target revision ID can only be used to write to recent versions of a document. If the target revision is too far behind the latest revision, the request is not processed and returns a 400 bad request error. The request should be tried again after retrieving the latest version of the document. Usually a revision ID remains valid for use as a target revision for several minutes after it's read, but for frequently edited documents this window might be shorter.

        :param target_revision_id: The target_revision_id of this WriteControl.
        :type target_revision_id: str
        """

        self._target_revision_id = target_revision_id
