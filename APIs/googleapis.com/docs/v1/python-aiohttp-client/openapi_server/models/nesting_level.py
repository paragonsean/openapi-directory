# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.dimension import Dimension
from openapi_server.models.text_style import TextStyle
from openapi_server import util


class NestingLevel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bullet_alignment: str=None, glyph_format: str=None, glyph_symbol: str=None, glyph_type: str=None, indent_first_line: Dimension=None, indent_start: Dimension=None, start_number: int=None, text_style: TextStyle=None):
        """NestingLevel - a model defined in OpenAPI

        :param bullet_alignment: The bullet_alignment of this NestingLevel.
        :param glyph_format: The glyph_format of this NestingLevel.
        :param glyph_symbol: The glyph_symbol of this NestingLevel.
        :param glyph_type: The glyph_type of this NestingLevel.
        :param indent_first_line: The indent_first_line of this NestingLevel.
        :param indent_start: The indent_start of this NestingLevel.
        :param start_number: The start_number of this NestingLevel.
        :param text_style: The text_style of this NestingLevel.
        """
        self.openapi_types = {
            'bullet_alignment': str,
            'glyph_format': str,
            'glyph_symbol': str,
            'glyph_type': str,
            'indent_first_line': Dimension,
            'indent_start': Dimension,
            'start_number': int,
            'text_style': TextStyle
        }

        self.attribute_map = {
            'bullet_alignment': 'bulletAlignment',
            'glyph_format': 'glyphFormat',
            'glyph_symbol': 'glyphSymbol',
            'glyph_type': 'glyphType',
            'indent_first_line': 'indentFirstLine',
            'indent_start': 'indentStart',
            'start_number': 'startNumber',
            'text_style': 'textStyle'
        }

        self._bullet_alignment = bullet_alignment
        self._glyph_format = glyph_format
        self._glyph_symbol = glyph_symbol
        self._glyph_type = glyph_type
        self._indent_first_line = indent_first_line
        self._indent_start = indent_start
        self._start_number = start_number
        self._text_style = text_style

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NestingLevel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NestingLevel of this NestingLevel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bullet_alignment(self):
        """Gets the bullet_alignment of this NestingLevel.

        The alignment of the bullet within the space allotted for rendering the bullet.

        :return: The bullet_alignment of this NestingLevel.
        :rtype: str
        """
        return self._bullet_alignment

    @bullet_alignment.setter
    def bullet_alignment(self, bullet_alignment):
        """Sets the bullet_alignment of this NestingLevel.

        The alignment of the bullet within the space allotted for rendering the bullet.

        :param bullet_alignment: The bullet_alignment of this NestingLevel.
        :type bullet_alignment: str
        """
        allowed_values = ["BULLET_ALIGNMENT_UNSPECIFIED", "START", "CENTER", "END"]  # noqa: E501
        if bullet_alignment not in allowed_values:
            raise ValueError(
                "Invalid value for `bullet_alignment` ({0}), must be one of {1}"
                .format(bullet_alignment, allowed_values)
            )

        self._bullet_alignment = bullet_alignment

    @property
    def glyph_format(self):
        """Gets the glyph_format of this NestingLevel.

        The format string used by bullets at this level of nesting. The glyph format contains one or more placeholders, and these placeholders are replaced with the appropriate values depending on the glyph_type or glyph_symbol. The placeholders follow the pattern `%[nesting_level]`. Furthermore, placeholders can have prefixes and suffixes. Thus, the glyph format follows the pattern `%[nesting_level]`. Note that the prefix and suffix are optional and can be arbitrary strings. For example, the glyph format `%0.` indicates that the rendered glyph will replace the placeholder with the corresponding glyph for nesting level 0 followed by a period as the suffix. So a list with a glyph type of UPPER_ALPHA and glyph format `%0.` at nesting level 0 will result in a list with rendered glyphs `A.` `B.` `C.` The glyph format can contain placeholders for the current nesting level as well as placeholders for parent nesting levels. For example, a list can have a glyph format of `%0.` at nesting level 0 and a glyph format of `%0.%1.` at nesting level 1. Assuming both nesting levels have DECIMAL glyph types, this would result in a list with rendered glyphs `1.` `2.` ` 2.1.` ` 2.2.` `3.` For nesting levels that are ordered, the string that replaces a placeholder in the glyph format for a particular paragraph depends on the paragraph's order within the list.

        :return: The glyph_format of this NestingLevel.
        :rtype: str
        """
        return self._glyph_format

    @glyph_format.setter
    def glyph_format(self, glyph_format):
        """Sets the glyph_format of this NestingLevel.

        The format string used by bullets at this level of nesting. The glyph format contains one or more placeholders, and these placeholders are replaced with the appropriate values depending on the glyph_type or glyph_symbol. The placeholders follow the pattern `%[nesting_level]`. Furthermore, placeholders can have prefixes and suffixes. Thus, the glyph format follows the pattern `%[nesting_level]`. Note that the prefix and suffix are optional and can be arbitrary strings. For example, the glyph format `%0.` indicates that the rendered glyph will replace the placeholder with the corresponding glyph for nesting level 0 followed by a period as the suffix. So a list with a glyph type of UPPER_ALPHA and glyph format `%0.` at nesting level 0 will result in a list with rendered glyphs `A.` `B.` `C.` The glyph format can contain placeholders for the current nesting level as well as placeholders for parent nesting levels. For example, a list can have a glyph format of `%0.` at nesting level 0 and a glyph format of `%0.%1.` at nesting level 1. Assuming both nesting levels have DECIMAL glyph types, this would result in a list with rendered glyphs `1.` `2.` ` 2.1.` ` 2.2.` `3.` For nesting levels that are ordered, the string that replaces a placeholder in the glyph format for a particular paragraph depends on the paragraph's order within the list.

        :param glyph_format: The glyph_format of this NestingLevel.
        :type glyph_format: str
        """

        self._glyph_format = glyph_format

    @property
    def glyph_symbol(self):
        """Gets the glyph_symbol of this NestingLevel.

        A custom glyph symbol used by bullets when paragraphs at this level of nesting are unordered. The glyph symbol replaces placeholders within the glyph_format. For example, if the glyph_symbol is the solid circle corresponding to Unicode U+25cf code point and the glyph_format is `%0`, the rendered glyph would be the solid circle.

        :return: The glyph_symbol of this NestingLevel.
        :rtype: str
        """
        return self._glyph_symbol

    @glyph_symbol.setter
    def glyph_symbol(self, glyph_symbol):
        """Sets the glyph_symbol of this NestingLevel.

        A custom glyph symbol used by bullets when paragraphs at this level of nesting are unordered. The glyph symbol replaces placeholders within the glyph_format. For example, if the glyph_symbol is the solid circle corresponding to Unicode U+25cf code point and the glyph_format is `%0`, the rendered glyph would be the solid circle.

        :param glyph_symbol: The glyph_symbol of this NestingLevel.
        :type glyph_symbol: str
        """

        self._glyph_symbol = glyph_symbol

    @property
    def glyph_type(self):
        """Gets the glyph_type of this NestingLevel.

        The type of glyph used by bullets when paragraphs at this level of nesting are ordered. The glyph type determines the type of glyph used to replace placeholders within the glyph_format when paragraphs at this level of nesting are ordered. For example, if the nesting level is 0, the glyph_format is `%0.` and the glyph type is DECIMAL, then the rendered glyph would replace the placeholder `%0` in the glyph format with a number corresponding to list item's order within the list.

        :return: The glyph_type of this NestingLevel.
        :rtype: str
        """
        return self._glyph_type

    @glyph_type.setter
    def glyph_type(self, glyph_type):
        """Sets the glyph_type of this NestingLevel.

        The type of glyph used by bullets when paragraphs at this level of nesting are ordered. The glyph type determines the type of glyph used to replace placeholders within the glyph_format when paragraphs at this level of nesting are ordered. For example, if the nesting level is 0, the glyph_format is `%0.` and the glyph type is DECIMAL, then the rendered glyph would replace the placeholder `%0` in the glyph format with a number corresponding to list item's order within the list.

        :param glyph_type: The glyph_type of this NestingLevel.
        :type glyph_type: str
        """
        allowed_values = ["GLYPH_TYPE_UNSPECIFIED", "NONE", "DECIMAL", "ZERO_DECIMAL", "UPPER_ALPHA", "ALPHA", "UPPER_ROMAN", "ROMAN"]  # noqa: E501
        if glyph_type not in allowed_values:
            raise ValueError(
                "Invalid value for `glyph_type` ({0}), must be one of {1}"
                .format(glyph_type, allowed_values)
            )

        self._glyph_type = glyph_type

    @property
    def indent_first_line(self):
        """Gets the indent_first_line of this NestingLevel.


        :return: The indent_first_line of this NestingLevel.
        :rtype: Dimension
        """
        return self._indent_first_line

    @indent_first_line.setter
    def indent_first_line(self, indent_first_line):
        """Sets the indent_first_line of this NestingLevel.


        :param indent_first_line: The indent_first_line of this NestingLevel.
        :type indent_first_line: Dimension
        """

        self._indent_first_line = indent_first_line

    @property
    def indent_start(self):
        """Gets the indent_start of this NestingLevel.


        :return: The indent_start of this NestingLevel.
        :rtype: Dimension
        """
        return self._indent_start

    @indent_start.setter
    def indent_start(self, indent_start):
        """Sets the indent_start of this NestingLevel.


        :param indent_start: The indent_start of this NestingLevel.
        :type indent_start: Dimension
        """

        self._indent_start = indent_start

    @property
    def start_number(self):
        """Gets the start_number of this NestingLevel.

        The number of the first list item at this nesting level. A value of 0 is treated as a value of 1 for lettered lists and Roman numeral lists. For values of both 0 and 1, lettered and Roman numeral lists will begin at `a` and `i` respectively. This value is ignored for nesting levels with unordered glyphs.

        :return: The start_number of this NestingLevel.
        :rtype: int
        """
        return self._start_number

    @start_number.setter
    def start_number(self, start_number):
        """Sets the start_number of this NestingLevel.

        The number of the first list item at this nesting level. A value of 0 is treated as a value of 1 for lettered lists and Roman numeral lists. For values of both 0 and 1, lettered and Roman numeral lists will begin at `a` and `i` respectively. This value is ignored for nesting levels with unordered glyphs.

        :param start_number: The start_number of this NestingLevel.
        :type start_number: int
        """

        self._start_number = start_number

    @property
    def text_style(self):
        """Gets the text_style of this NestingLevel.


        :return: The text_style of this NestingLevel.
        :rtype: TextStyle
        """
        return self._text_style

    @text_style.setter
    def text_style(self, text_style):
        """Sets the text_style of this NestingLevel.


        :param text_style: The text_style of this NestingLevel.
        :type text_style: TextStyle
        """

        self._text_style = text_style
