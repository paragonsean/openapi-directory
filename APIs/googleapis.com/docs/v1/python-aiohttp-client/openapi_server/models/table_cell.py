# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.structural_element import StructuralElement
from openapi_server.models.suggested_table_cell_style import SuggestedTableCellStyle
from openapi_server.models.table_cell_style import TableCellStyle
from openapi_server import util


class TableCell(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, content: List[StructuralElement]=None, end_index: int=None, start_index: int=None, suggested_deletion_ids: List[str]=None, suggested_insertion_ids: List[str]=None, suggested_table_cell_style_changes: Dict[str, SuggestedTableCellStyle]=None, table_cell_style: TableCellStyle=None):
        """TableCell - a model defined in OpenAPI

        :param content: The content of this TableCell.
        :param end_index: The end_index of this TableCell.
        :param start_index: The start_index of this TableCell.
        :param suggested_deletion_ids: The suggested_deletion_ids of this TableCell.
        :param suggested_insertion_ids: The suggested_insertion_ids of this TableCell.
        :param suggested_table_cell_style_changes: The suggested_table_cell_style_changes of this TableCell.
        :param table_cell_style: The table_cell_style of this TableCell.
        """
        self.openapi_types = {
            'content': List[StructuralElement],
            'end_index': int,
            'start_index': int,
            'suggested_deletion_ids': List[str],
            'suggested_insertion_ids': List[str],
            'suggested_table_cell_style_changes': Dict[str, SuggestedTableCellStyle],
            'table_cell_style': TableCellStyle
        }

        self.attribute_map = {
            'content': 'content',
            'end_index': 'endIndex',
            'start_index': 'startIndex',
            'suggested_deletion_ids': 'suggestedDeletionIds',
            'suggested_insertion_ids': 'suggestedInsertionIds',
            'suggested_table_cell_style_changes': 'suggestedTableCellStyleChanges',
            'table_cell_style': 'tableCellStyle'
        }

        self._content = content
        self._end_index = end_index
        self._start_index = start_index
        self._suggested_deletion_ids = suggested_deletion_ids
        self._suggested_insertion_ids = suggested_insertion_ids
        self._suggested_table_cell_style_changes = suggested_table_cell_style_changes
        self._table_cell_style = table_cell_style

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TableCell':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TableCell of this TableCell.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def content(self):
        """Gets the content of this TableCell.

        The content of the cell.

        :return: The content of this TableCell.
        :rtype: List[StructuralElement]
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this TableCell.

        The content of the cell.

        :param content: The content of this TableCell.
        :type content: List[StructuralElement]
        """

        self._content = content

    @property
    def end_index(self):
        """Gets the end_index of this TableCell.

        The zero-based end index of this cell, exclusive, in UTF-16 code units.

        :return: The end_index of this TableCell.
        :rtype: int
        """
        return self._end_index

    @end_index.setter
    def end_index(self, end_index):
        """Sets the end_index of this TableCell.

        The zero-based end index of this cell, exclusive, in UTF-16 code units.

        :param end_index: The end_index of this TableCell.
        :type end_index: int
        """

        self._end_index = end_index

    @property
    def start_index(self):
        """Gets the start_index of this TableCell.

        The zero-based start index of this cell, in UTF-16 code units.

        :return: The start_index of this TableCell.
        :rtype: int
        """
        return self._start_index

    @start_index.setter
    def start_index(self, start_index):
        """Sets the start_index of this TableCell.

        The zero-based start index of this cell, in UTF-16 code units.

        :param start_index: The start_index of this TableCell.
        :type start_index: int
        """

        self._start_index = start_index

    @property
    def suggested_deletion_ids(self):
        """Gets the suggested_deletion_ids of this TableCell.

        The suggested deletion IDs. If empty, then there are no suggested deletions of this content.

        :return: The suggested_deletion_ids of this TableCell.
        :rtype: List[str]
        """
        return self._suggested_deletion_ids

    @suggested_deletion_ids.setter
    def suggested_deletion_ids(self, suggested_deletion_ids):
        """Sets the suggested_deletion_ids of this TableCell.

        The suggested deletion IDs. If empty, then there are no suggested deletions of this content.

        :param suggested_deletion_ids: The suggested_deletion_ids of this TableCell.
        :type suggested_deletion_ids: List[str]
        """

        self._suggested_deletion_ids = suggested_deletion_ids

    @property
    def suggested_insertion_ids(self):
        """Gets the suggested_insertion_ids of this TableCell.

        The suggested insertion IDs. A TableCell may have multiple insertion IDs if it's a nested suggested change. If empty, then this is not a suggested insertion.

        :return: The suggested_insertion_ids of this TableCell.
        :rtype: List[str]
        """
        return self._suggested_insertion_ids

    @suggested_insertion_ids.setter
    def suggested_insertion_ids(self, suggested_insertion_ids):
        """Sets the suggested_insertion_ids of this TableCell.

        The suggested insertion IDs. A TableCell may have multiple insertion IDs if it's a nested suggested change. If empty, then this is not a suggested insertion.

        :param suggested_insertion_ids: The suggested_insertion_ids of this TableCell.
        :type suggested_insertion_ids: List[str]
        """

        self._suggested_insertion_ids = suggested_insertion_ids

    @property
    def suggested_table_cell_style_changes(self):
        """Gets the suggested_table_cell_style_changes of this TableCell.

        The suggested changes to the table cell style, keyed by suggestion ID.

        :return: The suggested_table_cell_style_changes of this TableCell.
        :rtype: Dict[str, SuggestedTableCellStyle]
        """
        return self._suggested_table_cell_style_changes

    @suggested_table_cell_style_changes.setter
    def suggested_table_cell_style_changes(self, suggested_table_cell_style_changes):
        """Sets the suggested_table_cell_style_changes of this TableCell.

        The suggested changes to the table cell style, keyed by suggestion ID.

        :param suggested_table_cell_style_changes: The suggested_table_cell_style_changes of this TableCell.
        :type suggested_table_cell_style_changes: Dict[str, SuggestedTableCellStyle]
        """

        self._suggested_table_cell_style_changes = suggested_table_cell_style_changes

    @property
    def table_cell_style(self):
        """Gets the table_cell_style of this TableCell.


        :return: The table_cell_style of this TableCell.
        :rtype: TableCellStyle
        """
        return self._table_cell_style

    @table_cell_style.setter
    def table_cell_style(self, table_cell_style):
        """Sets the table_cell_style of this TableCell.


        :param table_cell_style: The table_cell_style of this TableCell.
        :type table_cell_style: TableCellStyle
        """

        self._table_cell_style = table_cell_style
