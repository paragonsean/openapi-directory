# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.dimension import Dimension
from openapi_server.models.optional_color import OptionalColor
from openapi_server.models.table_cell_border import TableCellBorder
from openapi_server import util


class TableCellStyle(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, background_color: OptionalColor=None, border_bottom: TableCellBorder=None, border_left: TableCellBorder=None, border_right: TableCellBorder=None, border_top: TableCellBorder=None, column_span: int=None, content_alignment: str=None, padding_bottom: Dimension=None, padding_left: Dimension=None, padding_right: Dimension=None, padding_top: Dimension=None, row_span: int=None):
        """TableCellStyle - a model defined in OpenAPI

        :param background_color: The background_color of this TableCellStyle.
        :param border_bottom: The border_bottom of this TableCellStyle.
        :param border_left: The border_left of this TableCellStyle.
        :param border_right: The border_right of this TableCellStyle.
        :param border_top: The border_top of this TableCellStyle.
        :param column_span: The column_span of this TableCellStyle.
        :param content_alignment: The content_alignment of this TableCellStyle.
        :param padding_bottom: The padding_bottom of this TableCellStyle.
        :param padding_left: The padding_left of this TableCellStyle.
        :param padding_right: The padding_right of this TableCellStyle.
        :param padding_top: The padding_top of this TableCellStyle.
        :param row_span: The row_span of this TableCellStyle.
        """
        self.openapi_types = {
            'background_color': OptionalColor,
            'border_bottom': TableCellBorder,
            'border_left': TableCellBorder,
            'border_right': TableCellBorder,
            'border_top': TableCellBorder,
            'column_span': int,
            'content_alignment': str,
            'padding_bottom': Dimension,
            'padding_left': Dimension,
            'padding_right': Dimension,
            'padding_top': Dimension,
            'row_span': int
        }

        self.attribute_map = {
            'background_color': 'backgroundColor',
            'border_bottom': 'borderBottom',
            'border_left': 'borderLeft',
            'border_right': 'borderRight',
            'border_top': 'borderTop',
            'column_span': 'columnSpan',
            'content_alignment': 'contentAlignment',
            'padding_bottom': 'paddingBottom',
            'padding_left': 'paddingLeft',
            'padding_right': 'paddingRight',
            'padding_top': 'paddingTop',
            'row_span': 'rowSpan'
        }

        self._background_color = background_color
        self._border_bottom = border_bottom
        self._border_left = border_left
        self._border_right = border_right
        self._border_top = border_top
        self._column_span = column_span
        self._content_alignment = content_alignment
        self._padding_bottom = padding_bottom
        self._padding_left = padding_left
        self._padding_right = padding_right
        self._padding_top = padding_top
        self._row_span = row_span

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TableCellStyle':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TableCellStyle of this TableCellStyle.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def background_color(self):
        """Gets the background_color of this TableCellStyle.


        :return: The background_color of this TableCellStyle.
        :rtype: OptionalColor
        """
        return self._background_color

    @background_color.setter
    def background_color(self, background_color):
        """Sets the background_color of this TableCellStyle.


        :param background_color: The background_color of this TableCellStyle.
        :type background_color: OptionalColor
        """

        self._background_color = background_color

    @property
    def border_bottom(self):
        """Gets the border_bottom of this TableCellStyle.


        :return: The border_bottom of this TableCellStyle.
        :rtype: TableCellBorder
        """
        return self._border_bottom

    @border_bottom.setter
    def border_bottom(self, border_bottom):
        """Sets the border_bottom of this TableCellStyle.


        :param border_bottom: The border_bottom of this TableCellStyle.
        :type border_bottom: TableCellBorder
        """

        self._border_bottom = border_bottom

    @property
    def border_left(self):
        """Gets the border_left of this TableCellStyle.


        :return: The border_left of this TableCellStyle.
        :rtype: TableCellBorder
        """
        return self._border_left

    @border_left.setter
    def border_left(self, border_left):
        """Sets the border_left of this TableCellStyle.


        :param border_left: The border_left of this TableCellStyle.
        :type border_left: TableCellBorder
        """

        self._border_left = border_left

    @property
    def border_right(self):
        """Gets the border_right of this TableCellStyle.


        :return: The border_right of this TableCellStyle.
        :rtype: TableCellBorder
        """
        return self._border_right

    @border_right.setter
    def border_right(self, border_right):
        """Sets the border_right of this TableCellStyle.


        :param border_right: The border_right of this TableCellStyle.
        :type border_right: TableCellBorder
        """

        self._border_right = border_right

    @property
    def border_top(self):
        """Gets the border_top of this TableCellStyle.


        :return: The border_top of this TableCellStyle.
        :rtype: TableCellBorder
        """
        return self._border_top

    @border_top.setter
    def border_top(self, border_top):
        """Sets the border_top of this TableCellStyle.


        :param border_top: The border_top of this TableCellStyle.
        :type border_top: TableCellBorder
        """

        self._border_top = border_top

    @property
    def column_span(self):
        """Gets the column_span of this TableCellStyle.

        The column span of the cell. This property is read-only.

        :return: The column_span of this TableCellStyle.
        :rtype: int
        """
        return self._column_span

    @column_span.setter
    def column_span(self, column_span):
        """Sets the column_span of this TableCellStyle.

        The column span of the cell. This property is read-only.

        :param column_span: The column_span of this TableCellStyle.
        :type column_span: int
        """

        self._column_span = column_span

    @property
    def content_alignment(self):
        """Gets the content_alignment of this TableCellStyle.

        The alignment of the content in the table cell. The default alignment matches the alignment for newly created table cells in the Docs editor.

        :return: The content_alignment of this TableCellStyle.
        :rtype: str
        """
        return self._content_alignment

    @content_alignment.setter
    def content_alignment(self, content_alignment):
        """Sets the content_alignment of this TableCellStyle.

        The alignment of the content in the table cell. The default alignment matches the alignment for newly created table cells in the Docs editor.

        :param content_alignment: The content_alignment of this TableCellStyle.
        :type content_alignment: str
        """
        allowed_values = ["CONTENT_ALIGNMENT_UNSPECIFIED", "CONTENT_ALIGNMENT_UNSUPPORTED", "TOP", "MIDDLE", "BOTTOM"]  # noqa: E501
        if content_alignment not in allowed_values:
            raise ValueError(
                "Invalid value for `content_alignment` ({0}), must be one of {1}"
                .format(content_alignment, allowed_values)
            )

        self._content_alignment = content_alignment

    @property
    def padding_bottom(self):
        """Gets the padding_bottom of this TableCellStyle.


        :return: The padding_bottom of this TableCellStyle.
        :rtype: Dimension
        """
        return self._padding_bottom

    @padding_bottom.setter
    def padding_bottom(self, padding_bottom):
        """Sets the padding_bottom of this TableCellStyle.


        :param padding_bottom: The padding_bottom of this TableCellStyle.
        :type padding_bottom: Dimension
        """

        self._padding_bottom = padding_bottom

    @property
    def padding_left(self):
        """Gets the padding_left of this TableCellStyle.


        :return: The padding_left of this TableCellStyle.
        :rtype: Dimension
        """
        return self._padding_left

    @padding_left.setter
    def padding_left(self, padding_left):
        """Sets the padding_left of this TableCellStyle.


        :param padding_left: The padding_left of this TableCellStyle.
        :type padding_left: Dimension
        """

        self._padding_left = padding_left

    @property
    def padding_right(self):
        """Gets the padding_right of this TableCellStyle.


        :return: The padding_right of this TableCellStyle.
        :rtype: Dimension
        """
        return self._padding_right

    @padding_right.setter
    def padding_right(self, padding_right):
        """Sets the padding_right of this TableCellStyle.


        :param padding_right: The padding_right of this TableCellStyle.
        :type padding_right: Dimension
        """

        self._padding_right = padding_right

    @property
    def padding_top(self):
        """Gets the padding_top of this TableCellStyle.


        :return: The padding_top of this TableCellStyle.
        :rtype: Dimension
        """
        return self._padding_top

    @padding_top.setter
    def padding_top(self, padding_top):
        """Sets the padding_top of this TableCellStyle.


        :param padding_top: The padding_top of this TableCellStyle.
        :type padding_top: Dimension
        """

        self._padding_top = padding_top

    @property
    def row_span(self):
        """Gets the row_span of this TableCellStyle.

        The row span of the cell. This property is read-only.

        :return: The row_span of this TableCellStyle.
        :rtype: int
        """
        return self._row_span

    @row_span.setter
    def row_span(self, row_span):
        """Sets the row_span of this TableCellStyle.

        The row span of the cell. This property is read-only.

        :param row_span: The row_span of this TableCellStyle.
        :type row_span: int
        """

        self._row_span = row_span
