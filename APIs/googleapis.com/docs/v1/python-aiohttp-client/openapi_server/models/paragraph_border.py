# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.dimension import Dimension
from openapi_server.models.optional_color import OptionalColor
from openapi_server import util


class ParagraphBorder(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, color: OptionalColor=None, dash_style: str=None, padding: Dimension=None, width: Dimension=None):
        """ParagraphBorder - a model defined in OpenAPI

        :param color: The color of this ParagraphBorder.
        :param dash_style: The dash_style of this ParagraphBorder.
        :param padding: The padding of this ParagraphBorder.
        :param width: The width of this ParagraphBorder.
        """
        self.openapi_types = {
            'color': OptionalColor,
            'dash_style': str,
            'padding': Dimension,
            'width': Dimension
        }

        self.attribute_map = {
            'color': 'color',
            'dash_style': 'dashStyle',
            'padding': 'padding',
            'width': 'width'
        }

        self._color = color
        self._dash_style = dash_style
        self._padding = padding
        self._width = width

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ParagraphBorder':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ParagraphBorder of this ParagraphBorder.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def color(self):
        """Gets the color of this ParagraphBorder.


        :return: The color of this ParagraphBorder.
        :rtype: OptionalColor
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this ParagraphBorder.


        :param color: The color of this ParagraphBorder.
        :type color: OptionalColor
        """

        self._color = color

    @property
    def dash_style(self):
        """Gets the dash_style of this ParagraphBorder.

        The dash style of the border.

        :return: The dash_style of this ParagraphBorder.
        :rtype: str
        """
        return self._dash_style

    @dash_style.setter
    def dash_style(self, dash_style):
        """Sets the dash_style of this ParagraphBorder.

        The dash style of the border.

        :param dash_style: The dash_style of this ParagraphBorder.
        :type dash_style: str
        """
        allowed_values = ["DASH_STYLE_UNSPECIFIED", "SOLID", "DOT", "DASH"]  # noqa: E501
        if dash_style not in allowed_values:
            raise ValueError(
                "Invalid value for `dash_style` ({0}), must be one of {1}"
                .format(dash_style, allowed_values)
            )

        self._dash_style = dash_style

    @property
    def padding(self):
        """Gets the padding of this ParagraphBorder.


        :return: The padding of this ParagraphBorder.
        :rtype: Dimension
        """
        return self._padding

    @padding.setter
    def padding(self, padding):
        """Sets the padding of this ParagraphBorder.


        :param padding: The padding of this ParagraphBorder.
        :type padding: Dimension
        """

        self._padding = padding

    @property
    def width(self):
        """Gets the width of this ParagraphBorder.


        :return: The width of this ParagraphBorder.
        :rtype: Dimension
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this ParagraphBorder.


        :param width: The width of this ParagraphBorder.
        :type width: Dimension
        """

        self._width = width
