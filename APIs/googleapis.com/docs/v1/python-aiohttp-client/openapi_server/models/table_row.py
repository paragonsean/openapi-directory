# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.suggested_table_row_style import SuggestedTableRowStyle
from openapi_server.models.table_cell import TableCell
from openapi_server.models.table_row_style import TableRowStyle
from openapi_server import util


class TableRow(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, end_index: int=None, start_index: int=None, suggested_deletion_ids: List[str]=None, suggested_insertion_ids: List[str]=None, suggested_table_row_style_changes: Dict[str, SuggestedTableRowStyle]=None, table_cells: List[TableCell]=None, table_row_style: TableRowStyle=None):
        """TableRow - a model defined in OpenAPI

        :param end_index: The end_index of this TableRow.
        :param start_index: The start_index of this TableRow.
        :param suggested_deletion_ids: The suggested_deletion_ids of this TableRow.
        :param suggested_insertion_ids: The suggested_insertion_ids of this TableRow.
        :param suggested_table_row_style_changes: The suggested_table_row_style_changes of this TableRow.
        :param table_cells: The table_cells of this TableRow.
        :param table_row_style: The table_row_style of this TableRow.
        """
        self.openapi_types = {
            'end_index': int,
            'start_index': int,
            'suggested_deletion_ids': List[str],
            'suggested_insertion_ids': List[str],
            'suggested_table_row_style_changes': Dict[str, SuggestedTableRowStyle],
            'table_cells': List[TableCell],
            'table_row_style': TableRowStyle
        }

        self.attribute_map = {
            'end_index': 'endIndex',
            'start_index': 'startIndex',
            'suggested_deletion_ids': 'suggestedDeletionIds',
            'suggested_insertion_ids': 'suggestedInsertionIds',
            'suggested_table_row_style_changes': 'suggestedTableRowStyleChanges',
            'table_cells': 'tableCells',
            'table_row_style': 'tableRowStyle'
        }

        self._end_index = end_index
        self._start_index = start_index
        self._suggested_deletion_ids = suggested_deletion_ids
        self._suggested_insertion_ids = suggested_insertion_ids
        self._suggested_table_row_style_changes = suggested_table_row_style_changes
        self._table_cells = table_cells
        self._table_row_style = table_row_style

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TableRow':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TableRow of this TableRow.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def end_index(self):
        """Gets the end_index of this TableRow.

        The zero-based end index of this row, exclusive, in UTF-16 code units.

        :return: The end_index of this TableRow.
        :rtype: int
        """
        return self._end_index

    @end_index.setter
    def end_index(self, end_index):
        """Sets the end_index of this TableRow.

        The zero-based end index of this row, exclusive, in UTF-16 code units.

        :param end_index: The end_index of this TableRow.
        :type end_index: int
        """

        self._end_index = end_index

    @property
    def start_index(self):
        """Gets the start_index of this TableRow.

        The zero-based start index of this row, in UTF-16 code units.

        :return: The start_index of this TableRow.
        :rtype: int
        """
        return self._start_index

    @start_index.setter
    def start_index(self, start_index):
        """Sets the start_index of this TableRow.

        The zero-based start index of this row, in UTF-16 code units.

        :param start_index: The start_index of this TableRow.
        :type start_index: int
        """

        self._start_index = start_index

    @property
    def suggested_deletion_ids(self):
        """Gets the suggested_deletion_ids of this TableRow.

        The suggested deletion IDs. If empty, then there are no suggested deletions of this content.

        :return: The suggested_deletion_ids of this TableRow.
        :rtype: List[str]
        """
        return self._suggested_deletion_ids

    @suggested_deletion_ids.setter
    def suggested_deletion_ids(self, suggested_deletion_ids):
        """Sets the suggested_deletion_ids of this TableRow.

        The suggested deletion IDs. If empty, then there are no suggested deletions of this content.

        :param suggested_deletion_ids: The suggested_deletion_ids of this TableRow.
        :type suggested_deletion_ids: List[str]
        """

        self._suggested_deletion_ids = suggested_deletion_ids

    @property
    def suggested_insertion_ids(self):
        """Gets the suggested_insertion_ids of this TableRow.

        The suggested insertion IDs. A TableRow may have multiple insertion IDs if it's a nested suggested change. If empty, then this is not a suggested insertion.

        :return: The suggested_insertion_ids of this TableRow.
        :rtype: List[str]
        """
        return self._suggested_insertion_ids

    @suggested_insertion_ids.setter
    def suggested_insertion_ids(self, suggested_insertion_ids):
        """Sets the suggested_insertion_ids of this TableRow.

        The suggested insertion IDs. A TableRow may have multiple insertion IDs if it's a nested suggested change. If empty, then this is not a suggested insertion.

        :param suggested_insertion_ids: The suggested_insertion_ids of this TableRow.
        :type suggested_insertion_ids: List[str]
        """

        self._suggested_insertion_ids = suggested_insertion_ids

    @property
    def suggested_table_row_style_changes(self):
        """Gets the suggested_table_row_style_changes of this TableRow.

        The suggested style changes to this row, keyed by suggestion ID.

        :return: The suggested_table_row_style_changes of this TableRow.
        :rtype: Dict[str, SuggestedTableRowStyle]
        """
        return self._suggested_table_row_style_changes

    @suggested_table_row_style_changes.setter
    def suggested_table_row_style_changes(self, suggested_table_row_style_changes):
        """Sets the suggested_table_row_style_changes of this TableRow.

        The suggested style changes to this row, keyed by suggestion ID.

        :param suggested_table_row_style_changes: The suggested_table_row_style_changes of this TableRow.
        :type suggested_table_row_style_changes: Dict[str, SuggestedTableRowStyle]
        """

        self._suggested_table_row_style_changes = suggested_table_row_style_changes

    @property
    def table_cells(self):
        """Gets the table_cells of this TableRow.

        The contents and style of each cell in this row. It's possible for a table to be non-rectangular, so some rows may have a different number of cells than other rows in the same table.

        :return: The table_cells of this TableRow.
        :rtype: List[TableCell]
        """
        return self._table_cells

    @table_cells.setter
    def table_cells(self, table_cells):
        """Sets the table_cells of this TableRow.

        The contents and style of each cell in this row. It's possible for a table to be non-rectangular, so some rows may have a different number of cells than other rows in the same table.

        :param table_cells: The table_cells of this TableRow.
        :type table_cells: List[TableCell]
        """

        self._table_cells = table_cells

    @property
    def table_row_style(self):
        """Gets the table_row_style of this TableRow.


        :return: The table_row_style of this TableRow.
        :rtype: TableRowStyle
        """
        return self._table_row_style

    @table_row_style.setter
    def table_row_style(self, table_row_style):
        """Sets the table_row_style of this TableRow.


        :param table_row_style: The table_row_style of this TableRow.
        :type table_row_style: TableRowStyle
        """

        self._table_row_style = table_row_style
