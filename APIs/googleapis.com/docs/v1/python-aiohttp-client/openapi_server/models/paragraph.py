# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.bullet import Bullet
from openapi_server.models.object_references import ObjectReferences
from openapi_server.models.paragraph_element import ParagraphElement
from openapi_server.models.paragraph_style import ParagraphStyle
from openapi_server.models.suggested_bullet import SuggestedBullet
from openapi_server.models.suggested_paragraph_style import SuggestedParagraphStyle
from openapi_server import util


class Paragraph(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bullet: Bullet=None, elements: List[ParagraphElement]=None, paragraph_style: ParagraphStyle=None, positioned_object_ids: List[str]=None, suggested_bullet_changes: Dict[str, SuggestedBullet]=None, suggested_paragraph_style_changes: Dict[str, SuggestedParagraphStyle]=None, suggested_positioned_object_ids: Dict[str, ObjectReferences]=None):
        """Paragraph - a model defined in OpenAPI

        :param bullet: The bullet of this Paragraph.
        :param elements: The elements of this Paragraph.
        :param paragraph_style: The paragraph_style of this Paragraph.
        :param positioned_object_ids: The positioned_object_ids of this Paragraph.
        :param suggested_bullet_changes: The suggested_bullet_changes of this Paragraph.
        :param suggested_paragraph_style_changes: The suggested_paragraph_style_changes of this Paragraph.
        :param suggested_positioned_object_ids: The suggested_positioned_object_ids of this Paragraph.
        """
        self.openapi_types = {
            'bullet': Bullet,
            'elements': List[ParagraphElement],
            'paragraph_style': ParagraphStyle,
            'positioned_object_ids': List[str],
            'suggested_bullet_changes': Dict[str, SuggestedBullet],
            'suggested_paragraph_style_changes': Dict[str, SuggestedParagraphStyle],
            'suggested_positioned_object_ids': Dict[str, ObjectReferences]
        }

        self.attribute_map = {
            'bullet': 'bullet',
            'elements': 'elements',
            'paragraph_style': 'paragraphStyle',
            'positioned_object_ids': 'positionedObjectIds',
            'suggested_bullet_changes': 'suggestedBulletChanges',
            'suggested_paragraph_style_changes': 'suggestedParagraphStyleChanges',
            'suggested_positioned_object_ids': 'suggestedPositionedObjectIds'
        }

        self._bullet = bullet
        self._elements = elements
        self._paragraph_style = paragraph_style
        self._positioned_object_ids = positioned_object_ids
        self._suggested_bullet_changes = suggested_bullet_changes
        self._suggested_paragraph_style_changes = suggested_paragraph_style_changes
        self._suggested_positioned_object_ids = suggested_positioned_object_ids

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Paragraph':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Paragraph of this Paragraph.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bullet(self):
        """Gets the bullet of this Paragraph.


        :return: The bullet of this Paragraph.
        :rtype: Bullet
        """
        return self._bullet

    @bullet.setter
    def bullet(self, bullet):
        """Sets the bullet of this Paragraph.


        :param bullet: The bullet of this Paragraph.
        :type bullet: Bullet
        """

        self._bullet = bullet

    @property
    def elements(self):
        """Gets the elements of this Paragraph.

        The content of the paragraph, broken down into its component parts.

        :return: The elements of this Paragraph.
        :rtype: List[ParagraphElement]
        """
        return self._elements

    @elements.setter
    def elements(self, elements):
        """Sets the elements of this Paragraph.

        The content of the paragraph, broken down into its component parts.

        :param elements: The elements of this Paragraph.
        :type elements: List[ParagraphElement]
        """

        self._elements = elements

    @property
    def paragraph_style(self):
        """Gets the paragraph_style of this Paragraph.


        :return: The paragraph_style of this Paragraph.
        :rtype: ParagraphStyle
        """
        return self._paragraph_style

    @paragraph_style.setter
    def paragraph_style(self, paragraph_style):
        """Sets the paragraph_style of this Paragraph.


        :param paragraph_style: The paragraph_style of this Paragraph.
        :type paragraph_style: ParagraphStyle
        """

        self._paragraph_style = paragraph_style

    @property
    def positioned_object_ids(self):
        """Gets the positioned_object_ids of this Paragraph.

        The IDs of the positioned objects tethered to this paragraph.

        :return: The positioned_object_ids of this Paragraph.
        :rtype: List[str]
        """
        return self._positioned_object_ids

    @positioned_object_ids.setter
    def positioned_object_ids(self, positioned_object_ids):
        """Sets the positioned_object_ids of this Paragraph.

        The IDs of the positioned objects tethered to this paragraph.

        :param positioned_object_ids: The positioned_object_ids of this Paragraph.
        :type positioned_object_ids: List[str]
        """

        self._positioned_object_ids = positioned_object_ids

    @property
    def suggested_bullet_changes(self):
        """Gets the suggested_bullet_changes of this Paragraph.

        The suggested changes to this paragraph's bullet.

        :return: The suggested_bullet_changes of this Paragraph.
        :rtype: Dict[str, SuggestedBullet]
        """
        return self._suggested_bullet_changes

    @suggested_bullet_changes.setter
    def suggested_bullet_changes(self, suggested_bullet_changes):
        """Sets the suggested_bullet_changes of this Paragraph.

        The suggested changes to this paragraph's bullet.

        :param suggested_bullet_changes: The suggested_bullet_changes of this Paragraph.
        :type suggested_bullet_changes: Dict[str, SuggestedBullet]
        """

        self._suggested_bullet_changes = suggested_bullet_changes

    @property
    def suggested_paragraph_style_changes(self):
        """Gets the suggested_paragraph_style_changes of this Paragraph.

        The suggested paragraph style changes to this paragraph, keyed by suggestion ID.

        :return: The suggested_paragraph_style_changes of this Paragraph.
        :rtype: Dict[str, SuggestedParagraphStyle]
        """
        return self._suggested_paragraph_style_changes

    @suggested_paragraph_style_changes.setter
    def suggested_paragraph_style_changes(self, suggested_paragraph_style_changes):
        """Sets the suggested_paragraph_style_changes of this Paragraph.

        The suggested paragraph style changes to this paragraph, keyed by suggestion ID.

        :param suggested_paragraph_style_changes: The suggested_paragraph_style_changes of this Paragraph.
        :type suggested_paragraph_style_changes: Dict[str, SuggestedParagraphStyle]
        """

        self._suggested_paragraph_style_changes = suggested_paragraph_style_changes

    @property
    def suggested_positioned_object_ids(self):
        """Gets the suggested_positioned_object_ids of this Paragraph.

        The IDs of the positioned objects suggested to be attached to this paragraph, keyed by suggestion ID.

        :return: The suggested_positioned_object_ids of this Paragraph.
        :rtype: Dict[str, ObjectReferences]
        """
        return self._suggested_positioned_object_ids

    @suggested_positioned_object_ids.setter
    def suggested_positioned_object_ids(self, suggested_positioned_object_ids):
        """Sets the suggested_positioned_object_ids of this Paragraph.

        The IDs of the positioned objects suggested to be attached to this paragraph, keyed by suggestion ID.

        :param suggested_positioned_object_ids: The suggested_positioned_object_ids of this Paragraph.
        :type suggested_positioned_object_ids: Dict[str, ObjectReferences]
        """

        self._suggested_positioned_object_ids = suggested_positioned_object_ids
