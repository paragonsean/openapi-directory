# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.crop_properties_suggestion_state import CropPropertiesSuggestionState
from openapi_server import util


class ImagePropertiesSuggestionState(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, angle_suggested: bool=None, brightness_suggested: bool=None, content_uri_suggested: bool=None, contrast_suggested: bool=None, crop_properties_suggestion_state: CropPropertiesSuggestionState=None, source_uri_suggested: bool=None, transparency_suggested: bool=None):
        """ImagePropertiesSuggestionState - a model defined in OpenAPI

        :param angle_suggested: The angle_suggested of this ImagePropertiesSuggestionState.
        :param brightness_suggested: The brightness_suggested of this ImagePropertiesSuggestionState.
        :param content_uri_suggested: The content_uri_suggested of this ImagePropertiesSuggestionState.
        :param contrast_suggested: The contrast_suggested of this ImagePropertiesSuggestionState.
        :param crop_properties_suggestion_state: The crop_properties_suggestion_state of this ImagePropertiesSuggestionState.
        :param source_uri_suggested: The source_uri_suggested of this ImagePropertiesSuggestionState.
        :param transparency_suggested: The transparency_suggested of this ImagePropertiesSuggestionState.
        """
        self.openapi_types = {
            'angle_suggested': bool,
            'brightness_suggested': bool,
            'content_uri_suggested': bool,
            'contrast_suggested': bool,
            'crop_properties_suggestion_state': CropPropertiesSuggestionState,
            'source_uri_suggested': bool,
            'transparency_suggested': bool
        }

        self.attribute_map = {
            'angle_suggested': 'angleSuggested',
            'brightness_suggested': 'brightnessSuggested',
            'content_uri_suggested': 'contentUriSuggested',
            'contrast_suggested': 'contrastSuggested',
            'crop_properties_suggestion_state': 'cropPropertiesSuggestionState',
            'source_uri_suggested': 'sourceUriSuggested',
            'transparency_suggested': 'transparencySuggested'
        }

        self._angle_suggested = angle_suggested
        self._brightness_suggested = brightness_suggested
        self._content_uri_suggested = content_uri_suggested
        self._contrast_suggested = contrast_suggested
        self._crop_properties_suggestion_state = crop_properties_suggestion_state
        self._source_uri_suggested = source_uri_suggested
        self._transparency_suggested = transparency_suggested

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ImagePropertiesSuggestionState':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ImagePropertiesSuggestionState of this ImagePropertiesSuggestionState.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def angle_suggested(self):
        """Gets the angle_suggested of this ImagePropertiesSuggestionState.

        Indicates if there was a suggested change to angle.

        :return: The angle_suggested of this ImagePropertiesSuggestionState.
        :rtype: bool
        """
        return self._angle_suggested

    @angle_suggested.setter
    def angle_suggested(self, angle_suggested):
        """Sets the angle_suggested of this ImagePropertiesSuggestionState.

        Indicates if there was a suggested change to angle.

        :param angle_suggested: The angle_suggested of this ImagePropertiesSuggestionState.
        :type angle_suggested: bool
        """

        self._angle_suggested = angle_suggested

    @property
    def brightness_suggested(self):
        """Gets the brightness_suggested of this ImagePropertiesSuggestionState.

        Indicates if there was a suggested change to brightness.

        :return: The brightness_suggested of this ImagePropertiesSuggestionState.
        :rtype: bool
        """
        return self._brightness_suggested

    @brightness_suggested.setter
    def brightness_suggested(self, brightness_suggested):
        """Sets the brightness_suggested of this ImagePropertiesSuggestionState.

        Indicates if there was a suggested change to brightness.

        :param brightness_suggested: The brightness_suggested of this ImagePropertiesSuggestionState.
        :type brightness_suggested: bool
        """

        self._brightness_suggested = brightness_suggested

    @property
    def content_uri_suggested(self):
        """Gets the content_uri_suggested of this ImagePropertiesSuggestionState.

        Indicates if there was a suggested change to content_uri.

        :return: The content_uri_suggested of this ImagePropertiesSuggestionState.
        :rtype: bool
        """
        return self._content_uri_suggested

    @content_uri_suggested.setter
    def content_uri_suggested(self, content_uri_suggested):
        """Sets the content_uri_suggested of this ImagePropertiesSuggestionState.

        Indicates if there was a suggested change to content_uri.

        :param content_uri_suggested: The content_uri_suggested of this ImagePropertiesSuggestionState.
        :type content_uri_suggested: bool
        """

        self._content_uri_suggested = content_uri_suggested

    @property
    def contrast_suggested(self):
        """Gets the contrast_suggested of this ImagePropertiesSuggestionState.

        Indicates if there was a suggested change to contrast.

        :return: The contrast_suggested of this ImagePropertiesSuggestionState.
        :rtype: bool
        """
        return self._contrast_suggested

    @contrast_suggested.setter
    def contrast_suggested(self, contrast_suggested):
        """Sets the contrast_suggested of this ImagePropertiesSuggestionState.

        Indicates if there was a suggested change to contrast.

        :param contrast_suggested: The contrast_suggested of this ImagePropertiesSuggestionState.
        :type contrast_suggested: bool
        """

        self._contrast_suggested = contrast_suggested

    @property
    def crop_properties_suggestion_state(self):
        """Gets the crop_properties_suggestion_state of this ImagePropertiesSuggestionState.


        :return: The crop_properties_suggestion_state of this ImagePropertiesSuggestionState.
        :rtype: CropPropertiesSuggestionState
        """
        return self._crop_properties_suggestion_state

    @crop_properties_suggestion_state.setter
    def crop_properties_suggestion_state(self, crop_properties_suggestion_state):
        """Sets the crop_properties_suggestion_state of this ImagePropertiesSuggestionState.


        :param crop_properties_suggestion_state: The crop_properties_suggestion_state of this ImagePropertiesSuggestionState.
        :type crop_properties_suggestion_state: CropPropertiesSuggestionState
        """

        self._crop_properties_suggestion_state = crop_properties_suggestion_state

    @property
    def source_uri_suggested(self):
        """Gets the source_uri_suggested of this ImagePropertiesSuggestionState.

        Indicates if there was a suggested change to source_uri.

        :return: The source_uri_suggested of this ImagePropertiesSuggestionState.
        :rtype: bool
        """
        return self._source_uri_suggested

    @source_uri_suggested.setter
    def source_uri_suggested(self, source_uri_suggested):
        """Sets the source_uri_suggested of this ImagePropertiesSuggestionState.

        Indicates if there was a suggested change to source_uri.

        :param source_uri_suggested: The source_uri_suggested of this ImagePropertiesSuggestionState.
        :type source_uri_suggested: bool
        """

        self._source_uri_suggested = source_uri_suggested

    @property
    def transparency_suggested(self):
        """Gets the transparency_suggested of this ImagePropertiesSuggestionState.

        Indicates if there was a suggested change to transparency.

        :return: The transparency_suggested of this ImagePropertiesSuggestionState.
        :rtype: bool
        """
        return self._transparency_suggested

    @transparency_suggested.setter
    def transparency_suggested(self, transparency_suggested):
        """Sets the transparency_suggested of this ImagePropertiesSuggestionState.

        Indicates if there was a suggested change to transparency.

        :param transparency_suggested: The transparency_suggested of this ImagePropertiesSuggestionState.
        :type transparency_suggested: bool
        """

        self._transparency_suggested = transparency_suggested
