# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.dimension import Dimension
from openapi_server import util


class TabStop(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, alignment: str=None, offset: Dimension=None):
        """TabStop - a model defined in OpenAPI

        :param alignment: The alignment of this TabStop.
        :param offset: The offset of this TabStop.
        """
        self.openapi_types = {
            'alignment': str,
            'offset': Dimension
        }

        self.attribute_map = {
            'alignment': 'alignment',
            'offset': 'offset'
        }

        self._alignment = alignment
        self._offset = offset

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TabStop':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TabStop of this TabStop.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def alignment(self):
        """Gets the alignment of this TabStop.

        The alignment of this tab stop. If unset, the value defaults to START.

        :return: The alignment of this TabStop.
        :rtype: str
        """
        return self._alignment

    @alignment.setter
    def alignment(self, alignment):
        """Sets the alignment of this TabStop.

        The alignment of this tab stop. If unset, the value defaults to START.

        :param alignment: The alignment of this TabStop.
        :type alignment: str
        """
        allowed_values = ["TAB_STOP_ALIGNMENT_UNSPECIFIED", "START", "CENTER", "END"]  # noqa: E501
        if alignment not in allowed_values:
            raise ValueError(
                "Invalid value for `alignment` ({0}), must be one of {1}"
                .format(alignment, allowed_values)
            )

        self._alignment = alignment

    @property
    def offset(self):
        """Gets the offset of this TabStop.


        :return: The offset of this TabStop.
        :rtype: Dimension
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this TabStop.


        :param offset: The offset of this TabStop.
        :type offset: Dimension
        """

        self._offset = offset
