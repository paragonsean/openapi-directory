# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.table_row import TableRow
from openapi_server.models.table_style import TableStyle
from openapi_server import util


class Table(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, columns: int=None, rows: int=None, suggested_deletion_ids: List[str]=None, suggested_insertion_ids: List[str]=None, table_rows: List[TableRow]=None, table_style: TableStyle=None):
        """Table - a model defined in OpenAPI

        :param columns: The columns of this Table.
        :param rows: The rows of this Table.
        :param suggested_deletion_ids: The suggested_deletion_ids of this Table.
        :param suggested_insertion_ids: The suggested_insertion_ids of this Table.
        :param table_rows: The table_rows of this Table.
        :param table_style: The table_style of this Table.
        """
        self.openapi_types = {
            'columns': int,
            'rows': int,
            'suggested_deletion_ids': List[str],
            'suggested_insertion_ids': List[str],
            'table_rows': List[TableRow],
            'table_style': TableStyle
        }

        self.attribute_map = {
            'columns': 'columns',
            'rows': 'rows',
            'suggested_deletion_ids': 'suggestedDeletionIds',
            'suggested_insertion_ids': 'suggestedInsertionIds',
            'table_rows': 'tableRows',
            'table_style': 'tableStyle'
        }

        self._columns = columns
        self._rows = rows
        self._suggested_deletion_ids = suggested_deletion_ids
        self._suggested_insertion_ids = suggested_insertion_ids
        self._table_rows = table_rows
        self._table_style = table_style

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Table':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Table of this Table.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def columns(self):
        """Gets the columns of this Table.

        Number of columns in the table. It's possible for a table to be non-rectangular, so some rows may have a different number of cells.

        :return: The columns of this Table.
        :rtype: int
        """
        return self._columns

    @columns.setter
    def columns(self, columns):
        """Sets the columns of this Table.

        Number of columns in the table. It's possible for a table to be non-rectangular, so some rows may have a different number of cells.

        :param columns: The columns of this Table.
        :type columns: int
        """

        self._columns = columns

    @property
    def rows(self):
        """Gets the rows of this Table.

        Number of rows in the table.

        :return: The rows of this Table.
        :rtype: int
        """
        return self._rows

    @rows.setter
    def rows(self, rows):
        """Sets the rows of this Table.

        Number of rows in the table.

        :param rows: The rows of this Table.
        :type rows: int
        """

        self._rows = rows

    @property
    def suggested_deletion_ids(self):
        """Gets the suggested_deletion_ids of this Table.

        The suggested deletion IDs. If empty, then there are no suggested deletions of this content.

        :return: The suggested_deletion_ids of this Table.
        :rtype: List[str]
        """
        return self._suggested_deletion_ids

    @suggested_deletion_ids.setter
    def suggested_deletion_ids(self, suggested_deletion_ids):
        """Sets the suggested_deletion_ids of this Table.

        The suggested deletion IDs. If empty, then there are no suggested deletions of this content.

        :param suggested_deletion_ids: The suggested_deletion_ids of this Table.
        :type suggested_deletion_ids: List[str]
        """

        self._suggested_deletion_ids = suggested_deletion_ids

    @property
    def suggested_insertion_ids(self):
        """Gets the suggested_insertion_ids of this Table.

        The suggested insertion IDs. A Table may have multiple insertion IDs if it's a nested suggested change. If empty, then this is not a suggested insertion.

        :return: The suggested_insertion_ids of this Table.
        :rtype: List[str]
        """
        return self._suggested_insertion_ids

    @suggested_insertion_ids.setter
    def suggested_insertion_ids(self, suggested_insertion_ids):
        """Sets the suggested_insertion_ids of this Table.

        The suggested insertion IDs. A Table may have multiple insertion IDs if it's a nested suggested change. If empty, then this is not a suggested insertion.

        :param suggested_insertion_ids: The suggested_insertion_ids of this Table.
        :type suggested_insertion_ids: List[str]
        """

        self._suggested_insertion_ids = suggested_insertion_ids

    @property
    def table_rows(self):
        """Gets the table_rows of this Table.

        The contents and style of each row.

        :return: The table_rows of this Table.
        :rtype: List[TableRow]
        """
        return self._table_rows

    @table_rows.setter
    def table_rows(self, table_rows):
        """Sets the table_rows of this Table.

        The contents and style of each row.

        :param table_rows: The table_rows of this Table.
        :type table_rows: List[TableRow]
        """

        self._table_rows = table_rows

    @property
    def table_style(self):
        """Gets the table_style of this Table.


        :return: The table_style of this Table.
        :rtype: TableStyle
        """
        return self._table_style

    @table_style.setter
    def table_style(self, table_style):
        """Sets the table_style of this Table.


        :param table_style: The table_style of this Table.
        :type table_style: TableStyle
        """

        self._table_style = table_style
