# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.dimension import Dimension
from openapi_server.models.embedded_object_border import EmbeddedObjectBorder
from openapi_server.models.image_properties import ImageProperties
from openapi_server.models.linked_content_reference import LinkedContentReference
from openapi_server.models.size import Size
from openapi_server import util


class EmbeddedObject(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, embedded_drawing_properties: object=None, embedded_object_border: EmbeddedObjectBorder=None, image_properties: ImageProperties=None, linked_content_reference: LinkedContentReference=None, margin_bottom: Dimension=None, margin_left: Dimension=None, margin_right: Dimension=None, margin_top: Dimension=None, size: Size=None, title: str=None):
        """EmbeddedObject - a model defined in OpenAPI

        :param description: The description of this EmbeddedObject.
        :param embedded_drawing_properties: The embedded_drawing_properties of this EmbeddedObject.
        :param embedded_object_border: The embedded_object_border of this EmbeddedObject.
        :param image_properties: The image_properties of this EmbeddedObject.
        :param linked_content_reference: The linked_content_reference of this EmbeddedObject.
        :param margin_bottom: The margin_bottom of this EmbeddedObject.
        :param margin_left: The margin_left of this EmbeddedObject.
        :param margin_right: The margin_right of this EmbeddedObject.
        :param margin_top: The margin_top of this EmbeddedObject.
        :param size: The size of this EmbeddedObject.
        :param title: The title of this EmbeddedObject.
        """
        self.openapi_types = {
            'description': str,
            'embedded_drawing_properties': object,
            'embedded_object_border': EmbeddedObjectBorder,
            'image_properties': ImageProperties,
            'linked_content_reference': LinkedContentReference,
            'margin_bottom': Dimension,
            'margin_left': Dimension,
            'margin_right': Dimension,
            'margin_top': Dimension,
            'size': Size,
            'title': str
        }

        self.attribute_map = {
            'description': 'description',
            'embedded_drawing_properties': 'embeddedDrawingProperties',
            'embedded_object_border': 'embeddedObjectBorder',
            'image_properties': 'imageProperties',
            'linked_content_reference': 'linkedContentReference',
            'margin_bottom': 'marginBottom',
            'margin_left': 'marginLeft',
            'margin_right': 'marginRight',
            'margin_top': 'marginTop',
            'size': 'size',
            'title': 'title'
        }

        self._description = description
        self._embedded_drawing_properties = embedded_drawing_properties
        self._embedded_object_border = embedded_object_border
        self._image_properties = image_properties
        self._linked_content_reference = linked_content_reference
        self._margin_bottom = margin_bottom
        self._margin_left = margin_left
        self._margin_right = margin_right
        self._margin_top = margin_top
        self._size = size
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EmbeddedObject':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EmbeddedObject of this EmbeddedObject.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this EmbeddedObject.

        The description of the embedded object. The `title` and `description` are both combined to display alt text.

        :return: The description of this EmbeddedObject.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this EmbeddedObject.

        The description of the embedded object. The `title` and `description` are both combined to display alt text.

        :param description: The description of this EmbeddedObject.
        :type description: str
        """

        self._description = description

    @property
    def embedded_drawing_properties(self):
        """Gets the embedded_drawing_properties of this EmbeddedObject.

        The properties of an embedded drawing and used to differentiate the object type. An embedded drawing is one that's created and edited within a document. Note that extensive details are not supported.

        :return: The embedded_drawing_properties of this EmbeddedObject.
        :rtype: object
        """
        return self._embedded_drawing_properties

    @embedded_drawing_properties.setter
    def embedded_drawing_properties(self, embedded_drawing_properties):
        """Sets the embedded_drawing_properties of this EmbeddedObject.

        The properties of an embedded drawing and used to differentiate the object type. An embedded drawing is one that's created and edited within a document. Note that extensive details are not supported.

        :param embedded_drawing_properties: The embedded_drawing_properties of this EmbeddedObject.
        :type embedded_drawing_properties: object
        """

        self._embedded_drawing_properties = embedded_drawing_properties

    @property
    def embedded_object_border(self):
        """Gets the embedded_object_border of this EmbeddedObject.


        :return: The embedded_object_border of this EmbeddedObject.
        :rtype: EmbeddedObjectBorder
        """
        return self._embedded_object_border

    @embedded_object_border.setter
    def embedded_object_border(self, embedded_object_border):
        """Sets the embedded_object_border of this EmbeddedObject.


        :param embedded_object_border: The embedded_object_border of this EmbeddedObject.
        :type embedded_object_border: EmbeddedObjectBorder
        """

        self._embedded_object_border = embedded_object_border

    @property
    def image_properties(self):
        """Gets the image_properties of this EmbeddedObject.


        :return: The image_properties of this EmbeddedObject.
        :rtype: ImageProperties
        """
        return self._image_properties

    @image_properties.setter
    def image_properties(self, image_properties):
        """Sets the image_properties of this EmbeddedObject.


        :param image_properties: The image_properties of this EmbeddedObject.
        :type image_properties: ImageProperties
        """

        self._image_properties = image_properties

    @property
    def linked_content_reference(self):
        """Gets the linked_content_reference of this EmbeddedObject.


        :return: The linked_content_reference of this EmbeddedObject.
        :rtype: LinkedContentReference
        """
        return self._linked_content_reference

    @linked_content_reference.setter
    def linked_content_reference(self, linked_content_reference):
        """Sets the linked_content_reference of this EmbeddedObject.


        :param linked_content_reference: The linked_content_reference of this EmbeddedObject.
        :type linked_content_reference: LinkedContentReference
        """

        self._linked_content_reference = linked_content_reference

    @property
    def margin_bottom(self):
        """Gets the margin_bottom of this EmbeddedObject.


        :return: The margin_bottom of this EmbeddedObject.
        :rtype: Dimension
        """
        return self._margin_bottom

    @margin_bottom.setter
    def margin_bottom(self, margin_bottom):
        """Sets the margin_bottom of this EmbeddedObject.


        :param margin_bottom: The margin_bottom of this EmbeddedObject.
        :type margin_bottom: Dimension
        """

        self._margin_bottom = margin_bottom

    @property
    def margin_left(self):
        """Gets the margin_left of this EmbeddedObject.


        :return: The margin_left of this EmbeddedObject.
        :rtype: Dimension
        """
        return self._margin_left

    @margin_left.setter
    def margin_left(self, margin_left):
        """Sets the margin_left of this EmbeddedObject.


        :param margin_left: The margin_left of this EmbeddedObject.
        :type margin_left: Dimension
        """

        self._margin_left = margin_left

    @property
    def margin_right(self):
        """Gets the margin_right of this EmbeddedObject.


        :return: The margin_right of this EmbeddedObject.
        :rtype: Dimension
        """
        return self._margin_right

    @margin_right.setter
    def margin_right(self, margin_right):
        """Sets the margin_right of this EmbeddedObject.


        :param margin_right: The margin_right of this EmbeddedObject.
        :type margin_right: Dimension
        """

        self._margin_right = margin_right

    @property
    def margin_top(self):
        """Gets the margin_top of this EmbeddedObject.


        :return: The margin_top of this EmbeddedObject.
        :rtype: Dimension
        """
        return self._margin_top

    @margin_top.setter
    def margin_top(self, margin_top):
        """Sets the margin_top of this EmbeddedObject.


        :param margin_top: The margin_top of this EmbeddedObject.
        :type margin_top: Dimension
        """

        self._margin_top = margin_top

    @property
    def size(self):
        """Gets the size of this EmbeddedObject.


        :return: The size of this EmbeddedObject.
        :rtype: Size
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this EmbeddedObject.


        :param size: The size of this EmbeddedObject.
        :type size: Size
        """

        self._size = size

    @property
    def title(self):
        """Gets the title of this EmbeddedObject.

        The title of the embedded object. The `title` and `description` are both combined to display alt text.

        :return: The title of this EmbeddedObject.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this EmbeddedObject.

        The title of the embedded object. The `title` and `description` are both combined to display alt text.

        :param title: The title of this EmbeddedObject.
        :type title: str
        """

        self._title = title
