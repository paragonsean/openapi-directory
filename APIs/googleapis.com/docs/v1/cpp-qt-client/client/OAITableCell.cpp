/**
 * Google Docs API
 * Reads and writes Google Docs documents.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITableCell.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITableCell::OAITableCell(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITableCell::OAITableCell() {
    this->initializeModel();
}

OAITableCell::~OAITableCell() {}

void OAITableCell::initializeModel() {

    m_content_isSet = false;
    m_content_isValid = false;

    m_end_index_isSet = false;
    m_end_index_isValid = false;

    m_start_index_isSet = false;
    m_start_index_isValid = false;

    m_suggested_deletion_ids_isSet = false;
    m_suggested_deletion_ids_isValid = false;

    m_suggested_insertion_ids_isSet = false;
    m_suggested_insertion_ids_isValid = false;

    m_suggested_table_cell_style_changes_isSet = false;
    m_suggested_table_cell_style_changes_isValid = false;

    m_table_cell_style_isSet = false;
    m_table_cell_style_isValid = false;
}

void OAITableCell::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITableCell::fromJsonObject(QJsonObject json) {

    m_content_isValid = ::OpenAPI::fromJsonValue(m_content, json[QString("content")]);
    m_content_isSet = !json[QString("content")].isNull() && m_content_isValid;

    m_end_index_isValid = ::OpenAPI::fromJsonValue(m_end_index, json[QString("endIndex")]);
    m_end_index_isSet = !json[QString("endIndex")].isNull() && m_end_index_isValid;

    m_start_index_isValid = ::OpenAPI::fromJsonValue(m_start_index, json[QString("startIndex")]);
    m_start_index_isSet = !json[QString("startIndex")].isNull() && m_start_index_isValid;

    m_suggested_deletion_ids_isValid = ::OpenAPI::fromJsonValue(m_suggested_deletion_ids, json[QString("suggestedDeletionIds")]);
    m_suggested_deletion_ids_isSet = !json[QString("suggestedDeletionIds")].isNull() && m_suggested_deletion_ids_isValid;

    m_suggested_insertion_ids_isValid = ::OpenAPI::fromJsonValue(m_suggested_insertion_ids, json[QString("suggestedInsertionIds")]);
    m_suggested_insertion_ids_isSet = !json[QString("suggestedInsertionIds")].isNull() && m_suggested_insertion_ids_isValid;

    m_suggested_table_cell_style_changes_isValid = ::OpenAPI::fromJsonValue(m_suggested_table_cell_style_changes, json[QString("suggestedTableCellStyleChanges")]);
    m_suggested_table_cell_style_changes_isSet = !json[QString("suggestedTableCellStyleChanges")].isNull() && m_suggested_table_cell_style_changes_isValid;

    m_table_cell_style_isValid = ::OpenAPI::fromJsonValue(m_table_cell_style, json[QString("tableCellStyle")]);
    m_table_cell_style_isSet = !json[QString("tableCellStyle")].isNull() && m_table_cell_style_isValid;
}

QString OAITableCell::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITableCell::asJsonObject() const {
    QJsonObject obj;
    if (m_content.size() > 0) {
        obj.insert(QString("content"), ::OpenAPI::toJsonValue(m_content));
    }
    if (m_end_index_isSet) {
        obj.insert(QString("endIndex"), ::OpenAPI::toJsonValue(m_end_index));
    }
    if (m_start_index_isSet) {
        obj.insert(QString("startIndex"), ::OpenAPI::toJsonValue(m_start_index));
    }
    if (m_suggested_deletion_ids.size() > 0) {
        obj.insert(QString("suggestedDeletionIds"), ::OpenAPI::toJsonValue(m_suggested_deletion_ids));
    }
    if (m_suggested_insertion_ids.size() > 0) {
        obj.insert(QString("suggestedInsertionIds"), ::OpenAPI::toJsonValue(m_suggested_insertion_ids));
    }
    if (m_suggested_table_cell_style_changes.size() > 0) {
        obj.insert(QString("suggestedTableCellStyleChanges"), ::OpenAPI::toJsonValue(m_suggested_table_cell_style_changes));
    }
    if (m_table_cell_style.isSet()) {
        obj.insert(QString("tableCellStyle"), ::OpenAPI::toJsonValue(m_table_cell_style));
    }
    return obj;
}

QList<OAIStructuralElement> OAITableCell::getContent() const {
    return m_content;
}
void OAITableCell::setContent(const QList<OAIStructuralElement> &content) {
    m_content = content;
    m_content_isSet = true;
}

bool OAITableCell::is_content_Set() const{
    return m_content_isSet;
}

bool OAITableCell::is_content_Valid() const{
    return m_content_isValid;
}

qint32 OAITableCell::getEndIndex() const {
    return m_end_index;
}
void OAITableCell::setEndIndex(const qint32 &end_index) {
    m_end_index = end_index;
    m_end_index_isSet = true;
}

bool OAITableCell::is_end_index_Set() const{
    return m_end_index_isSet;
}

bool OAITableCell::is_end_index_Valid() const{
    return m_end_index_isValid;
}

qint32 OAITableCell::getStartIndex() const {
    return m_start_index;
}
void OAITableCell::setStartIndex(const qint32 &start_index) {
    m_start_index = start_index;
    m_start_index_isSet = true;
}

bool OAITableCell::is_start_index_Set() const{
    return m_start_index_isSet;
}

bool OAITableCell::is_start_index_Valid() const{
    return m_start_index_isValid;
}

QList<QString> OAITableCell::getSuggestedDeletionIds() const {
    return m_suggested_deletion_ids;
}
void OAITableCell::setSuggestedDeletionIds(const QList<QString> &suggested_deletion_ids) {
    m_suggested_deletion_ids = suggested_deletion_ids;
    m_suggested_deletion_ids_isSet = true;
}

bool OAITableCell::is_suggested_deletion_ids_Set() const{
    return m_suggested_deletion_ids_isSet;
}

bool OAITableCell::is_suggested_deletion_ids_Valid() const{
    return m_suggested_deletion_ids_isValid;
}

QList<QString> OAITableCell::getSuggestedInsertionIds() const {
    return m_suggested_insertion_ids;
}
void OAITableCell::setSuggestedInsertionIds(const QList<QString> &suggested_insertion_ids) {
    m_suggested_insertion_ids = suggested_insertion_ids;
    m_suggested_insertion_ids_isSet = true;
}

bool OAITableCell::is_suggested_insertion_ids_Set() const{
    return m_suggested_insertion_ids_isSet;
}

bool OAITableCell::is_suggested_insertion_ids_Valid() const{
    return m_suggested_insertion_ids_isValid;
}

QMap<QString, OAISuggestedTableCellStyle> OAITableCell::getSuggestedTableCellStyleChanges() const {
    return m_suggested_table_cell_style_changes;
}
void OAITableCell::setSuggestedTableCellStyleChanges(const QMap<QString, OAISuggestedTableCellStyle> &suggested_table_cell_style_changes) {
    m_suggested_table_cell_style_changes = suggested_table_cell_style_changes;
    m_suggested_table_cell_style_changes_isSet = true;
}

bool OAITableCell::is_suggested_table_cell_style_changes_Set() const{
    return m_suggested_table_cell_style_changes_isSet;
}

bool OAITableCell::is_suggested_table_cell_style_changes_Valid() const{
    return m_suggested_table_cell_style_changes_isValid;
}

OAITableCellStyle OAITableCell::getTableCellStyle() const {
    return m_table_cell_style;
}
void OAITableCell::setTableCellStyle(const OAITableCellStyle &table_cell_style) {
    m_table_cell_style = table_cell_style;
    m_table_cell_style_isSet = true;
}

bool OAITableCell::is_table_cell_style_Set() const{
    return m_table_cell_style_isSet;
}

bool OAITableCell::is_table_cell_style_Valid() const{
    return m_table_cell_style_isValid;
}

bool OAITableCell::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_content.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_suggested_deletion_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_suggested_insertion_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_suggested_table_cell_style_changes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_table_cell_style.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITableCell::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
