/**
 * Google Docs API
 * Reads and writes Google Docs documents.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIImagePropertiesSuggestionState.h
 *
 * A mask that indicates which of the fields on the base ImageProperties have been changed in this suggestion. For any field set to true, there&#39;s a new suggested value.
 */

#ifndef OAIImagePropertiesSuggestionState_H
#define OAIImagePropertiesSuggestionState_H

#include <QJsonObject>

#include "OAICropPropertiesSuggestionState.h"

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAICropPropertiesSuggestionState;

class OAIImagePropertiesSuggestionState : public OAIObject {
public:
    OAIImagePropertiesSuggestionState();
    OAIImagePropertiesSuggestionState(QString json);
    ~OAIImagePropertiesSuggestionState() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isAngleSuggested() const;
    void setAngleSuggested(const bool &angle_suggested);
    bool is_angle_suggested_Set() const;
    bool is_angle_suggested_Valid() const;

    bool isBrightnessSuggested() const;
    void setBrightnessSuggested(const bool &brightness_suggested);
    bool is_brightness_suggested_Set() const;
    bool is_brightness_suggested_Valid() const;

    bool isContentUriSuggested() const;
    void setContentUriSuggested(const bool &content_uri_suggested);
    bool is_content_uri_suggested_Set() const;
    bool is_content_uri_suggested_Valid() const;

    bool isContrastSuggested() const;
    void setContrastSuggested(const bool &contrast_suggested);
    bool is_contrast_suggested_Set() const;
    bool is_contrast_suggested_Valid() const;

    OAICropPropertiesSuggestionState getCropPropertiesSuggestionState() const;
    void setCropPropertiesSuggestionState(const OAICropPropertiesSuggestionState &crop_properties_suggestion_state);
    bool is_crop_properties_suggestion_state_Set() const;
    bool is_crop_properties_suggestion_state_Valid() const;

    bool isSourceUriSuggested() const;
    void setSourceUriSuggested(const bool &source_uri_suggested);
    bool is_source_uri_suggested_Set() const;
    bool is_source_uri_suggested_Valid() const;

    bool isTransparencySuggested() const;
    void setTransparencySuggested(const bool &transparency_suggested);
    bool is_transparency_suggested_Set() const;
    bool is_transparency_suggested_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_angle_suggested;
    bool m_angle_suggested_isSet;
    bool m_angle_suggested_isValid;

    bool m_brightness_suggested;
    bool m_brightness_suggested_isSet;
    bool m_brightness_suggested_isValid;

    bool m_content_uri_suggested;
    bool m_content_uri_suggested_isSet;
    bool m_content_uri_suggested_isValid;

    bool m_contrast_suggested;
    bool m_contrast_suggested_isSet;
    bool m_contrast_suggested_isValid;

    OAICropPropertiesSuggestionState m_crop_properties_suggestion_state;
    bool m_crop_properties_suggestion_state_isSet;
    bool m_crop_properties_suggestion_state_isValid;

    bool m_source_uri_suggested;
    bool m_source_uri_suggested_isSet;
    bool m_source_uri_suggested_isValid;

    bool m_transparency_suggested;
    bool m_transparency_suggested_isSet;
    bool m_transparency_suggested_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIImagePropertiesSuggestionState)

#endif // OAIImagePropertiesSuggestionState_H
