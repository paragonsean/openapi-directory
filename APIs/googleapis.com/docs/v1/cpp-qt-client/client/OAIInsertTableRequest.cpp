/**
 * Google Docs API
 * Reads and writes Google Docs documents.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInsertTableRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInsertTableRequest::OAIInsertTableRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInsertTableRequest::OAIInsertTableRequest() {
    this->initializeModel();
}

OAIInsertTableRequest::~OAIInsertTableRequest() {}

void OAIInsertTableRequest::initializeModel() {

    m_columns_isSet = false;
    m_columns_isValid = false;

    m_end_of_segment_location_isSet = false;
    m_end_of_segment_location_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_rows_isSet = false;
    m_rows_isValid = false;
}

void OAIInsertTableRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInsertTableRequest::fromJsonObject(QJsonObject json) {

    m_columns_isValid = ::OpenAPI::fromJsonValue(m_columns, json[QString("columns")]);
    m_columns_isSet = !json[QString("columns")].isNull() && m_columns_isValid;

    m_end_of_segment_location_isValid = ::OpenAPI::fromJsonValue(m_end_of_segment_location, json[QString("endOfSegmentLocation")]);
    m_end_of_segment_location_isSet = !json[QString("endOfSegmentLocation")].isNull() && m_end_of_segment_location_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_rows_isValid = ::OpenAPI::fromJsonValue(m_rows, json[QString("rows")]);
    m_rows_isSet = !json[QString("rows")].isNull() && m_rows_isValid;
}

QString OAIInsertTableRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInsertTableRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_columns_isSet) {
        obj.insert(QString("columns"), ::OpenAPI::toJsonValue(m_columns));
    }
    if (m_end_of_segment_location.isSet()) {
        obj.insert(QString("endOfSegmentLocation"), ::OpenAPI::toJsonValue(m_end_of_segment_location));
    }
    if (m_location.isSet()) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_rows_isSet) {
        obj.insert(QString("rows"), ::OpenAPI::toJsonValue(m_rows));
    }
    return obj;
}

qint32 OAIInsertTableRequest::getColumns() const {
    return m_columns;
}
void OAIInsertTableRequest::setColumns(const qint32 &columns) {
    m_columns = columns;
    m_columns_isSet = true;
}

bool OAIInsertTableRequest::is_columns_Set() const{
    return m_columns_isSet;
}

bool OAIInsertTableRequest::is_columns_Valid() const{
    return m_columns_isValid;
}

OAIEndOfSegmentLocation OAIInsertTableRequest::getEndOfSegmentLocation() const {
    return m_end_of_segment_location;
}
void OAIInsertTableRequest::setEndOfSegmentLocation(const OAIEndOfSegmentLocation &end_of_segment_location) {
    m_end_of_segment_location = end_of_segment_location;
    m_end_of_segment_location_isSet = true;
}

bool OAIInsertTableRequest::is_end_of_segment_location_Set() const{
    return m_end_of_segment_location_isSet;
}

bool OAIInsertTableRequest::is_end_of_segment_location_Valid() const{
    return m_end_of_segment_location_isValid;
}

OAILocation OAIInsertTableRequest::getLocation() const {
    return m_location;
}
void OAIInsertTableRequest::setLocation(const OAILocation &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIInsertTableRequest::is_location_Set() const{
    return m_location_isSet;
}

bool OAIInsertTableRequest::is_location_Valid() const{
    return m_location_isValid;
}

qint32 OAIInsertTableRequest::getRows() const {
    return m_rows;
}
void OAIInsertTableRequest::setRows(const qint32 &rows) {
    m_rows = rows;
    m_rows_isSet = true;
}

bool OAIInsertTableRequest::is_rows_Set() const{
    return m_rows_isSet;
}

bool OAIInsertTableRequest::is_rows_Valid() const{
    return m_rows_isValid;
}

bool OAIInsertTableRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_columns_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_of_segment_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_rows_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInsertTableRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
