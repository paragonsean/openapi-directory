/**
 * Google Docs API
 * Reads and writes Google Docs documents.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPinTableHeaderRowsRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPinTableHeaderRowsRequest::OAIPinTableHeaderRowsRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPinTableHeaderRowsRequest::OAIPinTableHeaderRowsRequest() {
    this->initializeModel();
}

OAIPinTableHeaderRowsRequest::~OAIPinTableHeaderRowsRequest() {}

void OAIPinTableHeaderRowsRequest::initializeModel() {

    m_pinned_header_rows_count_isSet = false;
    m_pinned_header_rows_count_isValid = false;

    m_table_start_location_isSet = false;
    m_table_start_location_isValid = false;
}

void OAIPinTableHeaderRowsRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPinTableHeaderRowsRequest::fromJsonObject(QJsonObject json) {

    m_pinned_header_rows_count_isValid = ::OpenAPI::fromJsonValue(m_pinned_header_rows_count, json[QString("pinnedHeaderRowsCount")]);
    m_pinned_header_rows_count_isSet = !json[QString("pinnedHeaderRowsCount")].isNull() && m_pinned_header_rows_count_isValid;

    m_table_start_location_isValid = ::OpenAPI::fromJsonValue(m_table_start_location, json[QString("tableStartLocation")]);
    m_table_start_location_isSet = !json[QString("tableStartLocation")].isNull() && m_table_start_location_isValid;
}

QString OAIPinTableHeaderRowsRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPinTableHeaderRowsRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_pinned_header_rows_count_isSet) {
        obj.insert(QString("pinnedHeaderRowsCount"), ::OpenAPI::toJsonValue(m_pinned_header_rows_count));
    }
    if (m_table_start_location.isSet()) {
        obj.insert(QString("tableStartLocation"), ::OpenAPI::toJsonValue(m_table_start_location));
    }
    return obj;
}

qint32 OAIPinTableHeaderRowsRequest::getPinnedHeaderRowsCount() const {
    return m_pinned_header_rows_count;
}
void OAIPinTableHeaderRowsRequest::setPinnedHeaderRowsCount(const qint32 &pinned_header_rows_count) {
    m_pinned_header_rows_count = pinned_header_rows_count;
    m_pinned_header_rows_count_isSet = true;
}

bool OAIPinTableHeaderRowsRequest::is_pinned_header_rows_count_Set() const{
    return m_pinned_header_rows_count_isSet;
}

bool OAIPinTableHeaderRowsRequest::is_pinned_header_rows_count_Valid() const{
    return m_pinned_header_rows_count_isValid;
}

OAILocation OAIPinTableHeaderRowsRequest::getTableStartLocation() const {
    return m_table_start_location;
}
void OAIPinTableHeaderRowsRequest::setTableStartLocation(const OAILocation &table_start_location) {
    m_table_start_location = table_start_location;
    m_table_start_location_isSet = true;
}

bool OAIPinTableHeaderRowsRequest::is_table_start_location_Set() const{
    return m_table_start_location_isSet;
}

bool OAIPinTableHeaderRowsRequest::is_table_start_location_Valid() const{
    return m_table_start_location_isValid;
}

bool OAIPinTableHeaderRowsRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_pinned_header_rows_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_table_start_location.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPinTableHeaderRowsRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
