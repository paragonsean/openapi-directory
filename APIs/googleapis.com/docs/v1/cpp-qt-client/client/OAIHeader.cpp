/**
 * Google Docs API
 * Reads and writes Google Docs documents.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHeader.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHeader::OAIHeader(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHeader::OAIHeader() {
    this->initializeModel();
}

OAIHeader::~OAIHeader() {}

void OAIHeader::initializeModel() {

    m_content_isSet = false;
    m_content_isValid = false;

    m_header_id_isSet = false;
    m_header_id_isValid = false;
}

void OAIHeader::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHeader::fromJsonObject(QJsonObject json) {

    m_content_isValid = ::OpenAPI::fromJsonValue(m_content, json[QString("content")]);
    m_content_isSet = !json[QString("content")].isNull() && m_content_isValid;

    m_header_id_isValid = ::OpenAPI::fromJsonValue(m_header_id, json[QString("headerId")]);
    m_header_id_isSet = !json[QString("headerId")].isNull() && m_header_id_isValid;
}

QString OAIHeader::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHeader::asJsonObject() const {
    QJsonObject obj;
    if (m_content.size() > 0) {
        obj.insert(QString("content"), ::OpenAPI::toJsonValue(m_content));
    }
    if (m_header_id_isSet) {
        obj.insert(QString("headerId"), ::OpenAPI::toJsonValue(m_header_id));
    }
    return obj;
}

QList<OAIStructuralElement> OAIHeader::getContent() const {
    return m_content;
}
void OAIHeader::setContent(const QList<OAIStructuralElement> &content) {
    m_content = content;
    m_content_isSet = true;
}

bool OAIHeader::is_content_Set() const{
    return m_content_isSet;
}

bool OAIHeader::is_content_Valid() const{
    return m_content_isValid;
}

QString OAIHeader::getHeaderId() const {
    return m_header_id;
}
void OAIHeader::setHeaderId(const QString &header_id) {
    m_header_id = header_id;
    m_header_id_isSet = true;
}

bool OAIHeader::is_header_id_Set() const{
    return m_header_id_isSet;
}

bool OAIHeader::is_header_id_Valid() const{
    return m_header_id_isValid;
}

bool OAIHeader::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_content.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_header_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHeader::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
