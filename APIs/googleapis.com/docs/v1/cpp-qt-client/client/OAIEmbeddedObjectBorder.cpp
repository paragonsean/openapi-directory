/**
 * Google Docs API
 * Reads and writes Google Docs documents.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEmbeddedObjectBorder.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEmbeddedObjectBorder::OAIEmbeddedObjectBorder(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEmbeddedObjectBorder::OAIEmbeddedObjectBorder() {
    this->initializeModel();
}

OAIEmbeddedObjectBorder::~OAIEmbeddedObjectBorder() {}

void OAIEmbeddedObjectBorder::initializeModel() {

    m_color_isSet = false;
    m_color_isValid = false;

    m_dash_style_isSet = false;
    m_dash_style_isValid = false;

    m_property_state_isSet = false;
    m_property_state_isValid = false;

    m_width_isSet = false;
    m_width_isValid = false;
}

void OAIEmbeddedObjectBorder::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEmbeddedObjectBorder::fromJsonObject(QJsonObject json) {

    m_color_isValid = ::OpenAPI::fromJsonValue(m_color, json[QString("color")]);
    m_color_isSet = !json[QString("color")].isNull() && m_color_isValid;

    m_dash_style_isValid = ::OpenAPI::fromJsonValue(m_dash_style, json[QString("dashStyle")]);
    m_dash_style_isSet = !json[QString("dashStyle")].isNull() && m_dash_style_isValid;

    m_property_state_isValid = ::OpenAPI::fromJsonValue(m_property_state, json[QString("propertyState")]);
    m_property_state_isSet = !json[QString("propertyState")].isNull() && m_property_state_isValid;

    m_width_isValid = ::OpenAPI::fromJsonValue(m_width, json[QString("width")]);
    m_width_isSet = !json[QString("width")].isNull() && m_width_isValid;
}

QString OAIEmbeddedObjectBorder::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEmbeddedObjectBorder::asJsonObject() const {
    QJsonObject obj;
    if (m_color.isSet()) {
        obj.insert(QString("color"), ::OpenAPI::toJsonValue(m_color));
    }
    if (m_dash_style_isSet) {
        obj.insert(QString("dashStyle"), ::OpenAPI::toJsonValue(m_dash_style));
    }
    if (m_property_state_isSet) {
        obj.insert(QString("propertyState"), ::OpenAPI::toJsonValue(m_property_state));
    }
    if (m_width.isSet()) {
        obj.insert(QString("width"), ::OpenAPI::toJsonValue(m_width));
    }
    return obj;
}

OAIOptionalColor OAIEmbeddedObjectBorder::getColor() const {
    return m_color;
}
void OAIEmbeddedObjectBorder::setColor(const OAIOptionalColor &color) {
    m_color = color;
    m_color_isSet = true;
}

bool OAIEmbeddedObjectBorder::is_color_Set() const{
    return m_color_isSet;
}

bool OAIEmbeddedObjectBorder::is_color_Valid() const{
    return m_color_isValid;
}

QString OAIEmbeddedObjectBorder::getDashStyle() const {
    return m_dash_style;
}
void OAIEmbeddedObjectBorder::setDashStyle(const QString &dash_style) {
    m_dash_style = dash_style;
    m_dash_style_isSet = true;
}

bool OAIEmbeddedObjectBorder::is_dash_style_Set() const{
    return m_dash_style_isSet;
}

bool OAIEmbeddedObjectBorder::is_dash_style_Valid() const{
    return m_dash_style_isValid;
}

QString OAIEmbeddedObjectBorder::getPropertyState() const {
    return m_property_state;
}
void OAIEmbeddedObjectBorder::setPropertyState(const QString &property_state) {
    m_property_state = property_state;
    m_property_state_isSet = true;
}

bool OAIEmbeddedObjectBorder::is_property_state_Set() const{
    return m_property_state_isSet;
}

bool OAIEmbeddedObjectBorder::is_property_state_Valid() const{
    return m_property_state_isValid;
}

OAIDimension OAIEmbeddedObjectBorder::getWidth() const {
    return m_width;
}
void OAIEmbeddedObjectBorder::setWidth(const OAIDimension &width) {
    m_width = width;
    m_width_isSet = true;
}

bool OAIEmbeddedObjectBorder::is_width_Set() const{
    return m_width_isSet;
}

bool OAIEmbeddedObjectBorder::is_width_Valid() const{
    return m_width_isValid;
}

bool OAIEmbeddedObjectBorder::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_color.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dash_style_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_property_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_width.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEmbeddedObjectBorder::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
