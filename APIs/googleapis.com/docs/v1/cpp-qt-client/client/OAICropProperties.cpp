/**
 * Google Docs API
 * Reads and writes Google Docs documents.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICropProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICropProperties::OAICropProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICropProperties::OAICropProperties() {
    this->initializeModel();
}

OAICropProperties::~OAICropProperties() {}

void OAICropProperties::initializeModel() {

    m_angle_isSet = false;
    m_angle_isValid = false;

    m_offset_bottom_isSet = false;
    m_offset_bottom_isValid = false;

    m_offset_left_isSet = false;
    m_offset_left_isValid = false;

    m_offset_right_isSet = false;
    m_offset_right_isValid = false;

    m_offset_top_isSet = false;
    m_offset_top_isValid = false;
}

void OAICropProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICropProperties::fromJsonObject(QJsonObject json) {

    m_angle_isValid = ::OpenAPI::fromJsonValue(m_angle, json[QString("angle")]);
    m_angle_isSet = !json[QString("angle")].isNull() && m_angle_isValid;

    m_offset_bottom_isValid = ::OpenAPI::fromJsonValue(m_offset_bottom, json[QString("offsetBottom")]);
    m_offset_bottom_isSet = !json[QString("offsetBottom")].isNull() && m_offset_bottom_isValid;

    m_offset_left_isValid = ::OpenAPI::fromJsonValue(m_offset_left, json[QString("offsetLeft")]);
    m_offset_left_isSet = !json[QString("offsetLeft")].isNull() && m_offset_left_isValid;

    m_offset_right_isValid = ::OpenAPI::fromJsonValue(m_offset_right, json[QString("offsetRight")]);
    m_offset_right_isSet = !json[QString("offsetRight")].isNull() && m_offset_right_isValid;

    m_offset_top_isValid = ::OpenAPI::fromJsonValue(m_offset_top, json[QString("offsetTop")]);
    m_offset_top_isSet = !json[QString("offsetTop")].isNull() && m_offset_top_isValid;
}

QString OAICropProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICropProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_angle_isSet) {
        obj.insert(QString("angle"), ::OpenAPI::toJsonValue(m_angle));
    }
    if (m_offset_bottom_isSet) {
        obj.insert(QString("offsetBottom"), ::OpenAPI::toJsonValue(m_offset_bottom));
    }
    if (m_offset_left_isSet) {
        obj.insert(QString("offsetLeft"), ::OpenAPI::toJsonValue(m_offset_left));
    }
    if (m_offset_right_isSet) {
        obj.insert(QString("offsetRight"), ::OpenAPI::toJsonValue(m_offset_right));
    }
    if (m_offset_top_isSet) {
        obj.insert(QString("offsetTop"), ::OpenAPI::toJsonValue(m_offset_top));
    }
    return obj;
}

float OAICropProperties::getAngle() const {
    return m_angle;
}
void OAICropProperties::setAngle(const float &angle) {
    m_angle = angle;
    m_angle_isSet = true;
}

bool OAICropProperties::is_angle_Set() const{
    return m_angle_isSet;
}

bool OAICropProperties::is_angle_Valid() const{
    return m_angle_isValid;
}

float OAICropProperties::getOffsetBottom() const {
    return m_offset_bottom;
}
void OAICropProperties::setOffsetBottom(const float &offset_bottom) {
    m_offset_bottom = offset_bottom;
    m_offset_bottom_isSet = true;
}

bool OAICropProperties::is_offset_bottom_Set() const{
    return m_offset_bottom_isSet;
}

bool OAICropProperties::is_offset_bottom_Valid() const{
    return m_offset_bottom_isValid;
}

float OAICropProperties::getOffsetLeft() const {
    return m_offset_left;
}
void OAICropProperties::setOffsetLeft(const float &offset_left) {
    m_offset_left = offset_left;
    m_offset_left_isSet = true;
}

bool OAICropProperties::is_offset_left_Set() const{
    return m_offset_left_isSet;
}

bool OAICropProperties::is_offset_left_Valid() const{
    return m_offset_left_isValid;
}

float OAICropProperties::getOffsetRight() const {
    return m_offset_right;
}
void OAICropProperties::setOffsetRight(const float &offset_right) {
    m_offset_right = offset_right;
    m_offset_right_isSet = true;
}

bool OAICropProperties::is_offset_right_Set() const{
    return m_offset_right_isSet;
}

bool OAICropProperties::is_offset_right_Valid() const{
    return m_offset_right_isValid;
}

float OAICropProperties::getOffsetTop() const {
    return m_offset_top;
}
void OAICropProperties::setOffsetTop(const float &offset_top) {
    m_offset_top = offset_top;
    m_offset_top_isSet = true;
}

bool OAICropProperties::is_offset_top_Set() const{
    return m_offset_top_isSet;
}

bool OAICropProperties::is_offset_top_Valid() const{
    return m_offset_top_isValid;
}

bool OAICropProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_angle_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offset_bottom_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offset_left_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offset_right_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offset_top_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICropProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
