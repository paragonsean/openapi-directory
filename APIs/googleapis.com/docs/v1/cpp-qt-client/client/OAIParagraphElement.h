/**
 * Google Docs API
 * Reads and writes Google Docs documents.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIParagraphElement.h
 *
 * A ParagraphElement describes content within a Paragraph.
 */

#ifndef OAIParagraphElement_H
#define OAIParagraphElement_H

#include <QJsonObject>

#include "OAIAutoText.h"
#include "OAIColumnBreak.h"
#include "OAIEquation.h"
#include "OAIFootnoteReference.h"
#include "OAIHorizontalRule.h"
#include "OAIInlineObjectElement.h"
#include "OAIPageBreak.h"
#include "OAIPerson.h"
#include "OAIRichLink.h"
#include "OAITextRun.h"

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIAutoText;
class OAIColumnBreak;
class OAIEquation;
class OAIFootnoteReference;
class OAIHorizontalRule;
class OAIInlineObjectElement;
class OAIPageBreak;
class OAIPerson;
class OAIRichLink;
class OAITextRun;

class OAIParagraphElement : public OAIObject {
public:
    OAIParagraphElement();
    OAIParagraphElement(QString json);
    ~OAIParagraphElement() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIAutoText getAutoText() const;
    void setAutoText(const OAIAutoText &auto_text);
    bool is_auto_text_Set() const;
    bool is_auto_text_Valid() const;

    OAIColumnBreak getColumnBreak() const;
    void setColumnBreak(const OAIColumnBreak &column_break);
    bool is_column_break_Set() const;
    bool is_column_break_Valid() const;

    qint32 getEndIndex() const;
    void setEndIndex(const qint32 &end_index);
    bool is_end_index_Set() const;
    bool is_end_index_Valid() const;

    OAIEquation getEquation() const;
    void setEquation(const OAIEquation &equation);
    bool is_equation_Set() const;
    bool is_equation_Valid() const;

    OAIFootnoteReference getFootnoteReference() const;
    void setFootnoteReference(const OAIFootnoteReference &footnote_reference);
    bool is_footnote_reference_Set() const;
    bool is_footnote_reference_Valid() const;

    OAIHorizontalRule getHorizontalRule() const;
    void setHorizontalRule(const OAIHorizontalRule &horizontal_rule);
    bool is_horizontal_rule_Set() const;
    bool is_horizontal_rule_Valid() const;

    OAIInlineObjectElement getInlineObjectElement() const;
    void setInlineObjectElement(const OAIInlineObjectElement &inline_object_element);
    bool is_inline_object_element_Set() const;
    bool is_inline_object_element_Valid() const;

    OAIPageBreak getPageBreak() const;
    void setPageBreak(const OAIPageBreak &page_break);
    bool is_page_break_Set() const;
    bool is_page_break_Valid() const;

    OAIPerson getPerson() const;
    void setPerson(const OAIPerson &person);
    bool is_person_Set() const;
    bool is_person_Valid() const;

    OAIRichLink getRichLink() const;
    void setRichLink(const OAIRichLink &rich_link);
    bool is_rich_link_Set() const;
    bool is_rich_link_Valid() const;

    qint32 getStartIndex() const;
    void setStartIndex(const qint32 &start_index);
    bool is_start_index_Set() const;
    bool is_start_index_Valid() const;

    OAITextRun getTextRun() const;
    void setTextRun(const OAITextRun &text_run);
    bool is_text_run_Set() const;
    bool is_text_run_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIAutoText m_auto_text;
    bool m_auto_text_isSet;
    bool m_auto_text_isValid;

    OAIColumnBreak m_column_break;
    bool m_column_break_isSet;
    bool m_column_break_isValid;

    qint32 m_end_index;
    bool m_end_index_isSet;
    bool m_end_index_isValid;

    OAIEquation m_equation;
    bool m_equation_isSet;
    bool m_equation_isValid;

    OAIFootnoteReference m_footnote_reference;
    bool m_footnote_reference_isSet;
    bool m_footnote_reference_isValid;

    OAIHorizontalRule m_horizontal_rule;
    bool m_horizontal_rule_isSet;
    bool m_horizontal_rule_isValid;

    OAIInlineObjectElement m_inline_object_element;
    bool m_inline_object_element_isSet;
    bool m_inline_object_element_isValid;

    OAIPageBreak m_page_break;
    bool m_page_break_isSet;
    bool m_page_break_isValid;

    OAIPerson m_person;
    bool m_person_isSet;
    bool m_person_isValid;

    OAIRichLink m_rich_link;
    bool m_rich_link_isSet;
    bool m_rich_link_isValid;

    qint32 m_start_index;
    bool m_start_index_isSet;
    bool m_start_index_isValid;

    OAITextRun m_text_run;
    bool m_text_run_isSet;
    bool m_text_run_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIParagraphElement)

#endif // OAIParagraphElement_H
