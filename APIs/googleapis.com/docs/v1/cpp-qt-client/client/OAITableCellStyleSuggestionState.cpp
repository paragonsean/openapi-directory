/**
 * Google Docs API
 * Reads and writes Google Docs documents.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITableCellStyleSuggestionState.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITableCellStyleSuggestionState::OAITableCellStyleSuggestionState(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITableCellStyleSuggestionState::OAITableCellStyleSuggestionState() {
    this->initializeModel();
}

OAITableCellStyleSuggestionState::~OAITableCellStyleSuggestionState() {}

void OAITableCellStyleSuggestionState::initializeModel() {

    m_background_color_suggested_isSet = false;
    m_background_color_suggested_isValid = false;

    m_border_bottom_suggested_isSet = false;
    m_border_bottom_suggested_isValid = false;

    m_border_left_suggested_isSet = false;
    m_border_left_suggested_isValid = false;

    m_border_right_suggested_isSet = false;
    m_border_right_suggested_isValid = false;

    m_border_top_suggested_isSet = false;
    m_border_top_suggested_isValid = false;

    m_column_span_suggested_isSet = false;
    m_column_span_suggested_isValid = false;

    m_content_alignment_suggested_isSet = false;
    m_content_alignment_suggested_isValid = false;

    m_padding_bottom_suggested_isSet = false;
    m_padding_bottom_suggested_isValid = false;

    m_padding_left_suggested_isSet = false;
    m_padding_left_suggested_isValid = false;

    m_padding_right_suggested_isSet = false;
    m_padding_right_suggested_isValid = false;

    m_padding_top_suggested_isSet = false;
    m_padding_top_suggested_isValid = false;

    m_row_span_suggested_isSet = false;
    m_row_span_suggested_isValid = false;
}

void OAITableCellStyleSuggestionState::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITableCellStyleSuggestionState::fromJsonObject(QJsonObject json) {

    m_background_color_suggested_isValid = ::OpenAPI::fromJsonValue(m_background_color_suggested, json[QString("backgroundColorSuggested")]);
    m_background_color_suggested_isSet = !json[QString("backgroundColorSuggested")].isNull() && m_background_color_suggested_isValid;

    m_border_bottom_suggested_isValid = ::OpenAPI::fromJsonValue(m_border_bottom_suggested, json[QString("borderBottomSuggested")]);
    m_border_bottom_suggested_isSet = !json[QString("borderBottomSuggested")].isNull() && m_border_bottom_suggested_isValid;

    m_border_left_suggested_isValid = ::OpenAPI::fromJsonValue(m_border_left_suggested, json[QString("borderLeftSuggested")]);
    m_border_left_suggested_isSet = !json[QString("borderLeftSuggested")].isNull() && m_border_left_suggested_isValid;

    m_border_right_suggested_isValid = ::OpenAPI::fromJsonValue(m_border_right_suggested, json[QString("borderRightSuggested")]);
    m_border_right_suggested_isSet = !json[QString("borderRightSuggested")].isNull() && m_border_right_suggested_isValid;

    m_border_top_suggested_isValid = ::OpenAPI::fromJsonValue(m_border_top_suggested, json[QString("borderTopSuggested")]);
    m_border_top_suggested_isSet = !json[QString("borderTopSuggested")].isNull() && m_border_top_suggested_isValid;

    m_column_span_suggested_isValid = ::OpenAPI::fromJsonValue(m_column_span_suggested, json[QString("columnSpanSuggested")]);
    m_column_span_suggested_isSet = !json[QString("columnSpanSuggested")].isNull() && m_column_span_suggested_isValid;

    m_content_alignment_suggested_isValid = ::OpenAPI::fromJsonValue(m_content_alignment_suggested, json[QString("contentAlignmentSuggested")]);
    m_content_alignment_suggested_isSet = !json[QString("contentAlignmentSuggested")].isNull() && m_content_alignment_suggested_isValid;

    m_padding_bottom_suggested_isValid = ::OpenAPI::fromJsonValue(m_padding_bottom_suggested, json[QString("paddingBottomSuggested")]);
    m_padding_bottom_suggested_isSet = !json[QString("paddingBottomSuggested")].isNull() && m_padding_bottom_suggested_isValid;

    m_padding_left_suggested_isValid = ::OpenAPI::fromJsonValue(m_padding_left_suggested, json[QString("paddingLeftSuggested")]);
    m_padding_left_suggested_isSet = !json[QString("paddingLeftSuggested")].isNull() && m_padding_left_suggested_isValid;

    m_padding_right_suggested_isValid = ::OpenAPI::fromJsonValue(m_padding_right_suggested, json[QString("paddingRightSuggested")]);
    m_padding_right_suggested_isSet = !json[QString("paddingRightSuggested")].isNull() && m_padding_right_suggested_isValid;

    m_padding_top_suggested_isValid = ::OpenAPI::fromJsonValue(m_padding_top_suggested, json[QString("paddingTopSuggested")]);
    m_padding_top_suggested_isSet = !json[QString("paddingTopSuggested")].isNull() && m_padding_top_suggested_isValid;

    m_row_span_suggested_isValid = ::OpenAPI::fromJsonValue(m_row_span_suggested, json[QString("rowSpanSuggested")]);
    m_row_span_suggested_isSet = !json[QString("rowSpanSuggested")].isNull() && m_row_span_suggested_isValid;
}

QString OAITableCellStyleSuggestionState::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITableCellStyleSuggestionState::asJsonObject() const {
    QJsonObject obj;
    if (m_background_color_suggested_isSet) {
        obj.insert(QString("backgroundColorSuggested"), ::OpenAPI::toJsonValue(m_background_color_suggested));
    }
    if (m_border_bottom_suggested_isSet) {
        obj.insert(QString("borderBottomSuggested"), ::OpenAPI::toJsonValue(m_border_bottom_suggested));
    }
    if (m_border_left_suggested_isSet) {
        obj.insert(QString("borderLeftSuggested"), ::OpenAPI::toJsonValue(m_border_left_suggested));
    }
    if (m_border_right_suggested_isSet) {
        obj.insert(QString("borderRightSuggested"), ::OpenAPI::toJsonValue(m_border_right_suggested));
    }
    if (m_border_top_suggested_isSet) {
        obj.insert(QString("borderTopSuggested"), ::OpenAPI::toJsonValue(m_border_top_suggested));
    }
    if (m_column_span_suggested_isSet) {
        obj.insert(QString("columnSpanSuggested"), ::OpenAPI::toJsonValue(m_column_span_suggested));
    }
    if (m_content_alignment_suggested_isSet) {
        obj.insert(QString("contentAlignmentSuggested"), ::OpenAPI::toJsonValue(m_content_alignment_suggested));
    }
    if (m_padding_bottom_suggested_isSet) {
        obj.insert(QString("paddingBottomSuggested"), ::OpenAPI::toJsonValue(m_padding_bottom_suggested));
    }
    if (m_padding_left_suggested_isSet) {
        obj.insert(QString("paddingLeftSuggested"), ::OpenAPI::toJsonValue(m_padding_left_suggested));
    }
    if (m_padding_right_suggested_isSet) {
        obj.insert(QString("paddingRightSuggested"), ::OpenAPI::toJsonValue(m_padding_right_suggested));
    }
    if (m_padding_top_suggested_isSet) {
        obj.insert(QString("paddingTopSuggested"), ::OpenAPI::toJsonValue(m_padding_top_suggested));
    }
    if (m_row_span_suggested_isSet) {
        obj.insert(QString("rowSpanSuggested"), ::OpenAPI::toJsonValue(m_row_span_suggested));
    }
    return obj;
}

bool OAITableCellStyleSuggestionState::isBackgroundColorSuggested() const {
    return m_background_color_suggested;
}
void OAITableCellStyleSuggestionState::setBackgroundColorSuggested(const bool &background_color_suggested) {
    m_background_color_suggested = background_color_suggested;
    m_background_color_suggested_isSet = true;
}

bool OAITableCellStyleSuggestionState::is_background_color_suggested_Set() const{
    return m_background_color_suggested_isSet;
}

bool OAITableCellStyleSuggestionState::is_background_color_suggested_Valid() const{
    return m_background_color_suggested_isValid;
}

bool OAITableCellStyleSuggestionState::isBorderBottomSuggested() const {
    return m_border_bottom_suggested;
}
void OAITableCellStyleSuggestionState::setBorderBottomSuggested(const bool &border_bottom_suggested) {
    m_border_bottom_suggested = border_bottom_suggested;
    m_border_bottom_suggested_isSet = true;
}

bool OAITableCellStyleSuggestionState::is_border_bottom_suggested_Set() const{
    return m_border_bottom_suggested_isSet;
}

bool OAITableCellStyleSuggestionState::is_border_bottom_suggested_Valid() const{
    return m_border_bottom_suggested_isValid;
}

bool OAITableCellStyleSuggestionState::isBorderLeftSuggested() const {
    return m_border_left_suggested;
}
void OAITableCellStyleSuggestionState::setBorderLeftSuggested(const bool &border_left_suggested) {
    m_border_left_suggested = border_left_suggested;
    m_border_left_suggested_isSet = true;
}

bool OAITableCellStyleSuggestionState::is_border_left_suggested_Set() const{
    return m_border_left_suggested_isSet;
}

bool OAITableCellStyleSuggestionState::is_border_left_suggested_Valid() const{
    return m_border_left_suggested_isValid;
}

bool OAITableCellStyleSuggestionState::isBorderRightSuggested() const {
    return m_border_right_suggested;
}
void OAITableCellStyleSuggestionState::setBorderRightSuggested(const bool &border_right_suggested) {
    m_border_right_suggested = border_right_suggested;
    m_border_right_suggested_isSet = true;
}

bool OAITableCellStyleSuggestionState::is_border_right_suggested_Set() const{
    return m_border_right_suggested_isSet;
}

bool OAITableCellStyleSuggestionState::is_border_right_suggested_Valid() const{
    return m_border_right_suggested_isValid;
}

bool OAITableCellStyleSuggestionState::isBorderTopSuggested() const {
    return m_border_top_suggested;
}
void OAITableCellStyleSuggestionState::setBorderTopSuggested(const bool &border_top_suggested) {
    m_border_top_suggested = border_top_suggested;
    m_border_top_suggested_isSet = true;
}

bool OAITableCellStyleSuggestionState::is_border_top_suggested_Set() const{
    return m_border_top_suggested_isSet;
}

bool OAITableCellStyleSuggestionState::is_border_top_suggested_Valid() const{
    return m_border_top_suggested_isValid;
}

bool OAITableCellStyleSuggestionState::isColumnSpanSuggested() const {
    return m_column_span_suggested;
}
void OAITableCellStyleSuggestionState::setColumnSpanSuggested(const bool &column_span_suggested) {
    m_column_span_suggested = column_span_suggested;
    m_column_span_suggested_isSet = true;
}

bool OAITableCellStyleSuggestionState::is_column_span_suggested_Set() const{
    return m_column_span_suggested_isSet;
}

bool OAITableCellStyleSuggestionState::is_column_span_suggested_Valid() const{
    return m_column_span_suggested_isValid;
}

bool OAITableCellStyleSuggestionState::isContentAlignmentSuggested() const {
    return m_content_alignment_suggested;
}
void OAITableCellStyleSuggestionState::setContentAlignmentSuggested(const bool &content_alignment_suggested) {
    m_content_alignment_suggested = content_alignment_suggested;
    m_content_alignment_suggested_isSet = true;
}

bool OAITableCellStyleSuggestionState::is_content_alignment_suggested_Set() const{
    return m_content_alignment_suggested_isSet;
}

bool OAITableCellStyleSuggestionState::is_content_alignment_suggested_Valid() const{
    return m_content_alignment_suggested_isValid;
}

bool OAITableCellStyleSuggestionState::isPaddingBottomSuggested() const {
    return m_padding_bottom_suggested;
}
void OAITableCellStyleSuggestionState::setPaddingBottomSuggested(const bool &padding_bottom_suggested) {
    m_padding_bottom_suggested = padding_bottom_suggested;
    m_padding_bottom_suggested_isSet = true;
}

bool OAITableCellStyleSuggestionState::is_padding_bottom_suggested_Set() const{
    return m_padding_bottom_suggested_isSet;
}

bool OAITableCellStyleSuggestionState::is_padding_bottom_suggested_Valid() const{
    return m_padding_bottom_suggested_isValid;
}

bool OAITableCellStyleSuggestionState::isPaddingLeftSuggested() const {
    return m_padding_left_suggested;
}
void OAITableCellStyleSuggestionState::setPaddingLeftSuggested(const bool &padding_left_suggested) {
    m_padding_left_suggested = padding_left_suggested;
    m_padding_left_suggested_isSet = true;
}

bool OAITableCellStyleSuggestionState::is_padding_left_suggested_Set() const{
    return m_padding_left_suggested_isSet;
}

bool OAITableCellStyleSuggestionState::is_padding_left_suggested_Valid() const{
    return m_padding_left_suggested_isValid;
}

bool OAITableCellStyleSuggestionState::isPaddingRightSuggested() const {
    return m_padding_right_suggested;
}
void OAITableCellStyleSuggestionState::setPaddingRightSuggested(const bool &padding_right_suggested) {
    m_padding_right_suggested = padding_right_suggested;
    m_padding_right_suggested_isSet = true;
}

bool OAITableCellStyleSuggestionState::is_padding_right_suggested_Set() const{
    return m_padding_right_suggested_isSet;
}

bool OAITableCellStyleSuggestionState::is_padding_right_suggested_Valid() const{
    return m_padding_right_suggested_isValid;
}

bool OAITableCellStyleSuggestionState::isPaddingTopSuggested() const {
    return m_padding_top_suggested;
}
void OAITableCellStyleSuggestionState::setPaddingTopSuggested(const bool &padding_top_suggested) {
    m_padding_top_suggested = padding_top_suggested;
    m_padding_top_suggested_isSet = true;
}

bool OAITableCellStyleSuggestionState::is_padding_top_suggested_Set() const{
    return m_padding_top_suggested_isSet;
}

bool OAITableCellStyleSuggestionState::is_padding_top_suggested_Valid() const{
    return m_padding_top_suggested_isValid;
}

bool OAITableCellStyleSuggestionState::isRowSpanSuggested() const {
    return m_row_span_suggested;
}
void OAITableCellStyleSuggestionState::setRowSpanSuggested(const bool &row_span_suggested) {
    m_row_span_suggested = row_span_suggested;
    m_row_span_suggested_isSet = true;
}

bool OAITableCellStyleSuggestionState::is_row_span_suggested_Set() const{
    return m_row_span_suggested_isSet;
}

bool OAITableCellStyleSuggestionState::is_row_span_suggested_Valid() const{
    return m_row_span_suggested_isValid;
}

bool OAITableCellStyleSuggestionState::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_background_color_suggested_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_border_bottom_suggested_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_border_left_suggested_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_border_right_suggested_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_border_top_suggested_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_column_span_suggested_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_alignment_suggested_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_padding_bottom_suggested_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_padding_left_suggested_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_padding_right_suggested_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_padding_top_suggested_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_row_span_suggested_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITableCellStyleSuggestionState::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
