/**
 * Google Docs API
 * Reads and writes Google Docs documents.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInlineObjectProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInlineObjectProperties::OAIInlineObjectProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInlineObjectProperties::OAIInlineObjectProperties() {
    this->initializeModel();
}

OAIInlineObjectProperties::~OAIInlineObjectProperties() {}

void OAIInlineObjectProperties::initializeModel() {

    m_embedded_object_isSet = false;
    m_embedded_object_isValid = false;
}

void OAIInlineObjectProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInlineObjectProperties::fromJsonObject(QJsonObject json) {

    m_embedded_object_isValid = ::OpenAPI::fromJsonValue(m_embedded_object, json[QString("embeddedObject")]);
    m_embedded_object_isSet = !json[QString("embeddedObject")].isNull() && m_embedded_object_isValid;
}

QString OAIInlineObjectProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInlineObjectProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_embedded_object.isSet()) {
        obj.insert(QString("embeddedObject"), ::OpenAPI::toJsonValue(m_embedded_object));
    }
    return obj;
}

OAIEmbeddedObject OAIInlineObjectProperties::getEmbeddedObject() const {
    return m_embedded_object;
}
void OAIInlineObjectProperties::setEmbeddedObject(const OAIEmbeddedObject &embedded_object) {
    m_embedded_object = embedded_object;
    m_embedded_object_isSet = true;
}

bool OAIInlineObjectProperties::is_embedded_object_Set() const{
    return m_embedded_object_isSet;
}

bool OAIInlineObjectProperties::is_embedded_object_Valid() const{
    return m_embedded_object_isValid;
}

bool OAIInlineObjectProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_embedded_object.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInlineObjectProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
