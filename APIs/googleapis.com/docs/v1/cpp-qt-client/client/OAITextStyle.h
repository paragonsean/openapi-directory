/**
 * Google Docs API
 * Reads and writes Google Docs documents.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAITextStyle.h
 *
 * Represents the styling that can be applied to text. Inherited text styles are represented as unset fields in this message. A text style&#39;s parent depends on where the text style is defined: * The TextStyle of text in a Paragraph inherits from the paragraph&#39;s corresponding named style type. * The TextStyle on a named style inherits from the normal text named style. * The TextStyle of the normal text named style inherits from the default text style in the Docs editor. * The TextStyle on a Paragraph element that&#39;s contained in a table may inherit its text style from the table style. If the text style does not inherit from a parent, unsetting fields will revert the style to a value matching the defaults in the Docs editor.
 */

#ifndef OAITextStyle_H
#define OAITextStyle_H

#include <QJsonObject>

#include "OAIDimension.h"
#include "OAILink.h"
#include "OAIOptionalColor.h"
#include "OAIWeightedFontFamily.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIOptionalColor;
class OAIDimension;
class OAILink;
class OAIWeightedFontFamily;

class OAITextStyle : public OAIObject {
public:
    OAITextStyle();
    OAITextStyle(QString json);
    ~OAITextStyle() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIOptionalColor getBackgroundColor() const;
    void setBackgroundColor(const OAIOptionalColor &background_color);
    bool is_background_color_Set() const;
    bool is_background_color_Valid() const;

    QString getBaselineOffset() const;
    void setBaselineOffset(const QString &baseline_offset);
    bool is_baseline_offset_Set() const;
    bool is_baseline_offset_Valid() const;

    bool isBold() const;
    void setBold(const bool &bold);
    bool is_bold_Set() const;
    bool is_bold_Valid() const;

    OAIDimension getFontSize() const;
    void setFontSize(const OAIDimension &font_size);
    bool is_font_size_Set() const;
    bool is_font_size_Valid() const;

    OAIOptionalColor getForegroundColor() const;
    void setForegroundColor(const OAIOptionalColor &foreground_color);
    bool is_foreground_color_Set() const;
    bool is_foreground_color_Valid() const;

    bool isItalic() const;
    void setItalic(const bool &italic);
    bool is_italic_Set() const;
    bool is_italic_Valid() const;

    OAILink getLink() const;
    void setLink(const OAILink &link);
    bool is_link_Set() const;
    bool is_link_Valid() const;

    bool isSmallCaps() const;
    void setSmallCaps(const bool &small_caps);
    bool is_small_caps_Set() const;
    bool is_small_caps_Valid() const;

    bool isStrikethrough() const;
    void setStrikethrough(const bool &strikethrough);
    bool is_strikethrough_Set() const;
    bool is_strikethrough_Valid() const;

    bool isUnderline() const;
    void setUnderline(const bool &underline);
    bool is_underline_Set() const;
    bool is_underline_Valid() const;

    OAIWeightedFontFamily getWeightedFontFamily() const;
    void setWeightedFontFamily(const OAIWeightedFontFamily &weighted_font_family);
    bool is_weighted_font_family_Set() const;
    bool is_weighted_font_family_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIOptionalColor m_background_color;
    bool m_background_color_isSet;
    bool m_background_color_isValid;

    QString m_baseline_offset;
    bool m_baseline_offset_isSet;
    bool m_baseline_offset_isValid;

    bool m_bold;
    bool m_bold_isSet;
    bool m_bold_isValid;

    OAIDimension m_font_size;
    bool m_font_size_isSet;
    bool m_font_size_isValid;

    OAIOptionalColor m_foreground_color;
    bool m_foreground_color_isSet;
    bool m_foreground_color_isValid;

    bool m_italic;
    bool m_italic_isSet;
    bool m_italic_isValid;

    OAILink m_link;
    bool m_link_isSet;
    bool m_link_isValid;

    bool m_small_caps;
    bool m_small_caps_isSet;
    bool m_small_caps_isValid;

    bool m_strikethrough;
    bool m_strikethrough_isSet;
    bool m_strikethrough_isValid;

    bool m_underline;
    bool m_underline_isSet;
    bool m_underline_isValid;

    OAIWeightedFontFamily m_weighted_font_family;
    bool m_weighted_font_family_isSet;
    bool m_weighted_font_family_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAITextStyle)

#endif // OAITextStyle_H
