/**
 * Google Docs API
 * Reads and writes Google Docs documents.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEmbeddedObjectBorderSuggestionState.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEmbeddedObjectBorderSuggestionState::OAIEmbeddedObjectBorderSuggestionState(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEmbeddedObjectBorderSuggestionState::OAIEmbeddedObjectBorderSuggestionState() {
    this->initializeModel();
}

OAIEmbeddedObjectBorderSuggestionState::~OAIEmbeddedObjectBorderSuggestionState() {}

void OAIEmbeddedObjectBorderSuggestionState::initializeModel() {

    m_color_suggested_isSet = false;
    m_color_suggested_isValid = false;

    m_dash_style_suggested_isSet = false;
    m_dash_style_suggested_isValid = false;

    m_property_state_suggested_isSet = false;
    m_property_state_suggested_isValid = false;

    m_width_suggested_isSet = false;
    m_width_suggested_isValid = false;
}

void OAIEmbeddedObjectBorderSuggestionState::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEmbeddedObjectBorderSuggestionState::fromJsonObject(QJsonObject json) {

    m_color_suggested_isValid = ::OpenAPI::fromJsonValue(m_color_suggested, json[QString("colorSuggested")]);
    m_color_suggested_isSet = !json[QString("colorSuggested")].isNull() && m_color_suggested_isValid;

    m_dash_style_suggested_isValid = ::OpenAPI::fromJsonValue(m_dash_style_suggested, json[QString("dashStyleSuggested")]);
    m_dash_style_suggested_isSet = !json[QString("dashStyleSuggested")].isNull() && m_dash_style_suggested_isValid;

    m_property_state_suggested_isValid = ::OpenAPI::fromJsonValue(m_property_state_suggested, json[QString("propertyStateSuggested")]);
    m_property_state_suggested_isSet = !json[QString("propertyStateSuggested")].isNull() && m_property_state_suggested_isValid;

    m_width_suggested_isValid = ::OpenAPI::fromJsonValue(m_width_suggested, json[QString("widthSuggested")]);
    m_width_suggested_isSet = !json[QString("widthSuggested")].isNull() && m_width_suggested_isValid;
}

QString OAIEmbeddedObjectBorderSuggestionState::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEmbeddedObjectBorderSuggestionState::asJsonObject() const {
    QJsonObject obj;
    if (m_color_suggested_isSet) {
        obj.insert(QString("colorSuggested"), ::OpenAPI::toJsonValue(m_color_suggested));
    }
    if (m_dash_style_suggested_isSet) {
        obj.insert(QString("dashStyleSuggested"), ::OpenAPI::toJsonValue(m_dash_style_suggested));
    }
    if (m_property_state_suggested_isSet) {
        obj.insert(QString("propertyStateSuggested"), ::OpenAPI::toJsonValue(m_property_state_suggested));
    }
    if (m_width_suggested_isSet) {
        obj.insert(QString("widthSuggested"), ::OpenAPI::toJsonValue(m_width_suggested));
    }
    return obj;
}

bool OAIEmbeddedObjectBorderSuggestionState::isColorSuggested() const {
    return m_color_suggested;
}
void OAIEmbeddedObjectBorderSuggestionState::setColorSuggested(const bool &color_suggested) {
    m_color_suggested = color_suggested;
    m_color_suggested_isSet = true;
}

bool OAIEmbeddedObjectBorderSuggestionState::is_color_suggested_Set() const{
    return m_color_suggested_isSet;
}

bool OAIEmbeddedObjectBorderSuggestionState::is_color_suggested_Valid() const{
    return m_color_suggested_isValid;
}

bool OAIEmbeddedObjectBorderSuggestionState::isDashStyleSuggested() const {
    return m_dash_style_suggested;
}
void OAIEmbeddedObjectBorderSuggestionState::setDashStyleSuggested(const bool &dash_style_suggested) {
    m_dash_style_suggested = dash_style_suggested;
    m_dash_style_suggested_isSet = true;
}

bool OAIEmbeddedObjectBorderSuggestionState::is_dash_style_suggested_Set() const{
    return m_dash_style_suggested_isSet;
}

bool OAIEmbeddedObjectBorderSuggestionState::is_dash_style_suggested_Valid() const{
    return m_dash_style_suggested_isValid;
}

bool OAIEmbeddedObjectBorderSuggestionState::isPropertyStateSuggested() const {
    return m_property_state_suggested;
}
void OAIEmbeddedObjectBorderSuggestionState::setPropertyStateSuggested(const bool &property_state_suggested) {
    m_property_state_suggested = property_state_suggested;
    m_property_state_suggested_isSet = true;
}

bool OAIEmbeddedObjectBorderSuggestionState::is_property_state_suggested_Set() const{
    return m_property_state_suggested_isSet;
}

bool OAIEmbeddedObjectBorderSuggestionState::is_property_state_suggested_Valid() const{
    return m_property_state_suggested_isValid;
}

bool OAIEmbeddedObjectBorderSuggestionState::isWidthSuggested() const {
    return m_width_suggested;
}
void OAIEmbeddedObjectBorderSuggestionState::setWidthSuggested(const bool &width_suggested) {
    m_width_suggested = width_suggested;
    m_width_suggested_isSet = true;
}

bool OAIEmbeddedObjectBorderSuggestionState::is_width_suggested_Set() const{
    return m_width_suggested_isSet;
}

bool OAIEmbeddedObjectBorderSuggestionState::is_width_suggested_Valid() const{
    return m_width_suggested_isValid;
}

bool OAIEmbeddedObjectBorderSuggestionState::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_color_suggested_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dash_style_suggested_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_property_state_suggested_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_width_suggested_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEmbeddedObjectBorderSuggestionState::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
