/**
 * Google Docs API
 * Reads and writes Google Docs documents.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINestingLevelSuggestionState.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINestingLevelSuggestionState::OAINestingLevelSuggestionState(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINestingLevelSuggestionState::OAINestingLevelSuggestionState() {
    this->initializeModel();
}

OAINestingLevelSuggestionState::~OAINestingLevelSuggestionState() {}

void OAINestingLevelSuggestionState::initializeModel() {

    m_bullet_alignment_suggested_isSet = false;
    m_bullet_alignment_suggested_isValid = false;

    m_glyph_format_suggested_isSet = false;
    m_glyph_format_suggested_isValid = false;

    m_glyph_symbol_suggested_isSet = false;
    m_glyph_symbol_suggested_isValid = false;

    m_glyph_type_suggested_isSet = false;
    m_glyph_type_suggested_isValid = false;

    m_indent_first_line_suggested_isSet = false;
    m_indent_first_line_suggested_isValid = false;

    m_indent_start_suggested_isSet = false;
    m_indent_start_suggested_isValid = false;

    m_start_number_suggested_isSet = false;
    m_start_number_suggested_isValid = false;

    m_text_style_suggestion_state_isSet = false;
    m_text_style_suggestion_state_isValid = false;
}

void OAINestingLevelSuggestionState::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINestingLevelSuggestionState::fromJsonObject(QJsonObject json) {

    m_bullet_alignment_suggested_isValid = ::OpenAPI::fromJsonValue(m_bullet_alignment_suggested, json[QString("bulletAlignmentSuggested")]);
    m_bullet_alignment_suggested_isSet = !json[QString("bulletAlignmentSuggested")].isNull() && m_bullet_alignment_suggested_isValid;

    m_glyph_format_suggested_isValid = ::OpenAPI::fromJsonValue(m_glyph_format_suggested, json[QString("glyphFormatSuggested")]);
    m_glyph_format_suggested_isSet = !json[QString("glyphFormatSuggested")].isNull() && m_glyph_format_suggested_isValid;

    m_glyph_symbol_suggested_isValid = ::OpenAPI::fromJsonValue(m_glyph_symbol_suggested, json[QString("glyphSymbolSuggested")]);
    m_glyph_symbol_suggested_isSet = !json[QString("glyphSymbolSuggested")].isNull() && m_glyph_symbol_suggested_isValid;

    m_glyph_type_suggested_isValid = ::OpenAPI::fromJsonValue(m_glyph_type_suggested, json[QString("glyphTypeSuggested")]);
    m_glyph_type_suggested_isSet = !json[QString("glyphTypeSuggested")].isNull() && m_glyph_type_suggested_isValid;

    m_indent_first_line_suggested_isValid = ::OpenAPI::fromJsonValue(m_indent_first_line_suggested, json[QString("indentFirstLineSuggested")]);
    m_indent_first_line_suggested_isSet = !json[QString("indentFirstLineSuggested")].isNull() && m_indent_first_line_suggested_isValid;

    m_indent_start_suggested_isValid = ::OpenAPI::fromJsonValue(m_indent_start_suggested, json[QString("indentStartSuggested")]);
    m_indent_start_suggested_isSet = !json[QString("indentStartSuggested")].isNull() && m_indent_start_suggested_isValid;

    m_start_number_suggested_isValid = ::OpenAPI::fromJsonValue(m_start_number_suggested, json[QString("startNumberSuggested")]);
    m_start_number_suggested_isSet = !json[QString("startNumberSuggested")].isNull() && m_start_number_suggested_isValid;

    m_text_style_suggestion_state_isValid = ::OpenAPI::fromJsonValue(m_text_style_suggestion_state, json[QString("textStyleSuggestionState")]);
    m_text_style_suggestion_state_isSet = !json[QString("textStyleSuggestionState")].isNull() && m_text_style_suggestion_state_isValid;
}

QString OAINestingLevelSuggestionState::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINestingLevelSuggestionState::asJsonObject() const {
    QJsonObject obj;
    if (m_bullet_alignment_suggested_isSet) {
        obj.insert(QString("bulletAlignmentSuggested"), ::OpenAPI::toJsonValue(m_bullet_alignment_suggested));
    }
    if (m_glyph_format_suggested_isSet) {
        obj.insert(QString("glyphFormatSuggested"), ::OpenAPI::toJsonValue(m_glyph_format_suggested));
    }
    if (m_glyph_symbol_suggested_isSet) {
        obj.insert(QString("glyphSymbolSuggested"), ::OpenAPI::toJsonValue(m_glyph_symbol_suggested));
    }
    if (m_glyph_type_suggested_isSet) {
        obj.insert(QString("glyphTypeSuggested"), ::OpenAPI::toJsonValue(m_glyph_type_suggested));
    }
    if (m_indent_first_line_suggested_isSet) {
        obj.insert(QString("indentFirstLineSuggested"), ::OpenAPI::toJsonValue(m_indent_first_line_suggested));
    }
    if (m_indent_start_suggested_isSet) {
        obj.insert(QString("indentStartSuggested"), ::OpenAPI::toJsonValue(m_indent_start_suggested));
    }
    if (m_start_number_suggested_isSet) {
        obj.insert(QString("startNumberSuggested"), ::OpenAPI::toJsonValue(m_start_number_suggested));
    }
    if (m_text_style_suggestion_state.isSet()) {
        obj.insert(QString("textStyleSuggestionState"), ::OpenAPI::toJsonValue(m_text_style_suggestion_state));
    }
    return obj;
}

bool OAINestingLevelSuggestionState::isBulletAlignmentSuggested() const {
    return m_bullet_alignment_suggested;
}
void OAINestingLevelSuggestionState::setBulletAlignmentSuggested(const bool &bullet_alignment_suggested) {
    m_bullet_alignment_suggested = bullet_alignment_suggested;
    m_bullet_alignment_suggested_isSet = true;
}

bool OAINestingLevelSuggestionState::is_bullet_alignment_suggested_Set() const{
    return m_bullet_alignment_suggested_isSet;
}

bool OAINestingLevelSuggestionState::is_bullet_alignment_suggested_Valid() const{
    return m_bullet_alignment_suggested_isValid;
}

bool OAINestingLevelSuggestionState::isGlyphFormatSuggested() const {
    return m_glyph_format_suggested;
}
void OAINestingLevelSuggestionState::setGlyphFormatSuggested(const bool &glyph_format_suggested) {
    m_glyph_format_suggested = glyph_format_suggested;
    m_glyph_format_suggested_isSet = true;
}

bool OAINestingLevelSuggestionState::is_glyph_format_suggested_Set() const{
    return m_glyph_format_suggested_isSet;
}

bool OAINestingLevelSuggestionState::is_glyph_format_suggested_Valid() const{
    return m_glyph_format_suggested_isValid;
}

bool OAINestingLevelSuggestionState::isGlyphSymbolSuggested() const {
    return m_glyph_symbol_suggested;
}
void OAINestingLevelSuggestionState::setGlyphSymbolSuggested(const bool &glyph_symbol_suggested) {
    m_glyph_symbol_suggested = glyph_symbol_suggested;
    m_glyph_symbol_suggested_isSet = true;
}

bool OAINestingLevelSuggestionState::is_glyph_symbol_suggested_Set() const{
    return m_glyph_symbol_suggested_isSet;
}

bool OAINestingLevelSuggestionState::is_glyph_symbol_suggested_Valid() const{
    return m_glyph_symbol_suggested_isValid;
}

bool OAINestingLevelSuggestionState::isGlyphTypeSuggested() const {
    return m_glyph_type_suggested;
}
void OAINestingLevelSuggestionState::setGlyphTypeSuggested(const bool &glyph_type_suggested) {
    m_glyph_type_suggested = glyph_type_suggested;
    m_glyph_type_suggested_isSet = true;
}

bool OAINestingLevelSuggestionState::is_glyph_type_suggested_Set() const{
    return m_glyph_type_suggested_isSet;
}

bool OAINestingLevelSuggestionState::is_glyph_type_suggested_Valid() const{
    return m_glyph_type_suggested_isValid;
}

bool OAINestingLevelSuggestionState::isIndentFirstLineSuggested() const {
    return m_indent_first_line_suggested;
}
void OAINestingLevelSuggestionState::setIndentFirstLineSuggested(const bool &indent_first_line_suggested) {
    m_indent_first_line_suggested = indent_first_line_suggested;
    m_indent_first_line_suggested_isSet = true;
}

bool OAINestingLevelSuggestionState::is_indent_first_line_suggested_Set() const{
    return m_indent_first_line_suggested_isSet;
}

bool OAINestingLevelSuggestionState::is_indent_first_line_suggested_Valid() const{
    return m_indent_first_line_suggested_isValid;
}

bool OAINestingLevelSuggestionState::isIndentStartSuggested() const {
    return m_indent_start_suggested;
}
void OAINestingLevelSuggestionState::setIndentStartSuggested(const bool &indent_start_suggested) {
    m_indent_start_suggested = indent_start_suggested;
    m_indent_start_suggested_isSet = true;
}

bool OAINestingLevelSuggestionState::is_indent_start_suggested_Set() const{
    return m_indent_start_suggested_isSet;
}

bool OAINestingLevelSuggestionState::is_indent_start_suggested_Valid() const{
    return m_indent_start_suggested_isValid;
}

bool OAINestingLevelSuggestionState::isStartNumberSuggested() const {
    return m_start_number_suggested;
}
void OAINestingLevelSuggestionState::setStartNumberSuggested(const bool &start_number_suggested) {
    m_start_number_suggested = start_number_suggested;
    m_start_number_suggested_isSet = true;
}

bool OAINestingLevelSuggestionState::is_start_number_suggested_Set() const{
    return m_start_number_suggested_isSet;
}

bool OAINestingLevelSuggestionState::is_start_number_suggested_Valid() const{
    return m_start_number_suggested_isValid;
}

OAITextStyleSuggestionState OAINestingLevelSuggestionState::getTextStyleSuggestionState() const {
    return m_text_style_suggestion_state;
}
void OAINestingLevelSuggestionState::setTextStyleSuggestionState(const OAITextStyleSuggestionState &text_style_suggestion_state) {
    m_text_style_suggestion_state = text_style_suggestion_state;
    m_text_style_suggestion_state_isSet = true;
}

bool OAINestingLevelSuggestionState::is_text_style_suggestion_state_Set() const{
    return m_text_style_suggestion_state_isSet;
}

bool OAINestingLevelSuggestionState::is_text_style_suggestion_state_Valid() const{
    return m_text_style_suggestion_state_isValid;
}

bool OAINestingLevelSuggestionState::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bullet_alignment_suggested_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_glyph_format_suggested_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_glyph_symbol_suggested_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_glyph_type_suggested_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_indent_first_line_suggested_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_indent_start_suggested_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_number_suggested_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_style_suggestion_state.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINestingLevelSuggestionState::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
