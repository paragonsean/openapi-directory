/**
 * Google Docs API
 * Reads and writes Google Docs documents.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEmbeddedObject.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEmbeddedObject::OAIEmbeddedObject(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEmbeddedObject::OAIEmbeddedObject() {
    this->initializeModel();
}

OAIEmbeddedObject::~OAIEmbeddedObject() {}

void OAIEmbeddedObject::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_embedded_drawing_properties_isSet = false;
    m_embedded_drawing_properties_isValid = false;

    m_embedded_object_border_isSet = false;
    m_embedded_object_border_isValid = false;

    m_image_properties_isSet = false;
    m_image_properties_isValid = false;

    m_linked_content_reference_isSet = false;
    m_linked_content_reference_isValid = false;

    m_margin_bottom_isSet = false;
    m_margin_bottom_isValid = false;

    m_margin_left_isSet = false;
    m_margin_left_isValid = false;

    m_margin_right_isSet = false;
    m_margin_right_isValid = false;

    m_margin_top_isSet = false;
    m_margin_top_isValid = false;

    m_size_isSet = false;
    m_size_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;
}

void OAIEmbeddedObject::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEmbeddedObject::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_embedded_drawing_properties_isValid = ::OpenAPI::fromJsonValue(m_embedded_drawing_properties, json[QString("embeddedDrawingProperties")]);
    m_embedded_drawing_properties_isSet = !json[QString("embeddedDrawingProperties")].isNull() && m_embedded_drawing_properties_isValid;

    m_embedded_object_border_isValid = ::OpenAPI::fromJsonValue(m_embedded_object_border, json[QString("embeddedObjectBorder")]);
    m_embedded_object_border_isSet = !json[QString("embeddedObjectBorder")].isNull() && m_embedded_object_border_isValid;

    m_image_properties_isValid = ::OpenAPI::fromJsonValue(m_image_properties, json[QString("imageProperties")]);
    m_image_properties_isSet = !json[QString("imageProperties")].isNull() && m_image_properties_isValid;

    m_linked_content_reference_isValid = ::OpenAPI::fromJsonValue(m_linked_content_reference, json[QString("linkedContentReference")]);
    m_linked_content_reference_isSet = !json[QString("linkedContentReference")].isNull() && m_linked_content_reference_isValid;

    m_margin_bottom_isValid = ::OpenAPI::fromJsonValue(m_margin_bottom, json[QString("marginBottom")]);
    m_margin_bottom_isSet = !json[QString("marginBottom")].isNull() && m_margin_bottom_isValid;

    m_margin_left_isValid = ::OpenAPI::fromJsonValue(m_margin_left, json[QString("marginLeft")]);
    m_margin_left_isSet = !json[QString("marginLeft")].isNull() && m_margin_left_isValid;

    m_margin_right_isValid = ::OpenAPI::fromJsonValue(m_margin_right, json[QString("marginRight")]);
    m_margin_right_isSet = !json[QString("marginRight")].isNull() && m_margin_right_isValid;

    m_margin_top_isValid = ::OpenAPI::fromJsonValue(m_margin_top, json[QString("marginTop")]);
    m_margin_top_isSet = !json[QString("marginTop")].isNull() && m_margin_top_isValid;

    m_size_isValid = ::OpenAPI::fromJsonValue(m_size, json[QString("size")]);
    m_size_isSet = !json[QString("size")].isNull() && m_size_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;
}

QString OAIEmbeddedObject::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEmbeddedObject::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_embedded_drawing_properties_isSet) {
        obj.insert(QString("embeddedDrawingProperties"), ::OpenAPI::toJsonValue(m_embedded_drawing_properties));
    }
    if (m_embedded_object_border.isSet()) {
        obj.insert(QString("embeddedObjectBorder"), ::OpenAPI::toJsonValue(m_embedded_object_border));
    }
    if (m_image_properties.isSet()) {
        obj.insert(QString("imageProperties"), ::OpenAPI::toJsonValue(m_image_properties));
    }
    if (m_linked_content_reference.isSet()) {
        obj.insert(QString("linkedContentReference"), ::OpenAPI::toJsonValue(m_linked_content_reference));
    }
    if (m_margin_bottom.isSet()) {
        obj.insert(QString("marginBottom"), ::OpenAPI::toJsonValue(m_margin_bottom));
    }
    if (m_margin_left.isSet()) {
        obj.insert(QString("marginLeft"), ::OpenAPI::toJsonValue(m_margin_left));
    }
    if (m_margin_right.isSet()) {
        obj.insert(QString("marginRight"), ::OpenAPI::toJsonValue(m_margin_right));
    }
    if (m_margin_top.isSet()) {
        obj.insert(QString("marginTop"), ::OpenAPI::toJsonValue(m_margin_top));
    }
    if (m_size.isSet()) {
        obj.insert(QString("size"), ::OpenAPI::toJsonValue(m_size));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    return obj;
}

QString OAIEmbeddedObject::getDescription() const {
    return m_description;
}
void OAIEmbeddedObject::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIEmbeddedObject::is_description_Set() const{
    return m_description_isSet;
}

bool OAIEmbeddedObject::is_description_Valid() const{
    return m_description_isValid;
}

OAIObject OAIEmbeddedObject::getEmbeddedDrawingProperties() const {
    return m_embedded_drawing_properties;
}
void OAIEmbeddedObject::setEmbeddedDrawingProperties(const OAIObject &embedded_drawing_properties) {
    m_embedded_drawing_properties = embedded_drawing_properties;
    m_embedded_drawing_properties_isSet = true;
}

bool OAIEmbeddedObject::is_embedded_drawing_properties_Set() const{
    return m_embedded_drawing_properties_isSet;
}

bool OAIEmbeddedObject::is_embedded_drawing_properties_Valid() const{
    return m_embedded_drawing_properties_isValid;
}

OAIEmbeddedObjectBorder OAIEmbeddedObject::getEmbeddedObjectBorder() const {
    return m_embedded_object_border;
}
void OAIEmbeddedObject::setEmbeddedObjectBorder(const OAIEmbeddedObjectBorder &embedded_object_border) {
    m_embedded_object_border = embedded_object_border;
    m_embedded_object_border_isSet = true;
}

bool OAIEmbeddedObject::is_embedded_object_border_Set() const{
    return m_embedded_object_border_isSet;
}

bool OAIEmbeddedObject::is_embedded_object_border_Valid() const{
    return m_embedded_object_border_isValid;
}

OAIImageProperties OAIEmbeddedObject::getImageProperties() const {
    return m_image_properties;
}
void OAIEmbeddedObject::setImageProperties(const OAIImageProperties &image_properties) {
    m_image_properties = image_properties;
    m_image_properties_isSet = true;
}

bool OAIEmbeddedObject::is_image_properties_Set() const{
    return m_image_properties_isSet;
}

bool OAIEmbeddedObject::is_image_properties_Valid() const{
    return m_image_properties_isValid;
}

OAILinkedContentReference OAIEmbeddedObject::getLinkedContentReference() const {
    return m_linked_content_reference;
}
void OAIEmbeddedObject::setLinkedContentReference(const OAILinkedContentReference &linked_content_reference) {
    m_linked_content_reference = linked_content_reference;
    m_linked_content_reference_isSet = true;
}

bool OAIEmbeddedObject::is_linked_content_reference_Set() const{
    return m_linked_content_reference_isSet;
}

bool OAIEmbeddedObject::is_linked_content_reference_Valid() const{
    return m_linked_content_reference_isValid;
}

OAIDimension OAIEmbeddedObject::getMarginBottom() const {
    return m_margin_bottom;
}
void OAIEmbeddedObject::setMarginBottom(const OAIDimension &margin_bottom) {
    m_margin_bottom = margin_bottom;
    m_margin_bottom_isSet = true;
}

bool OAIEmbeddedObject::is_margin_bottom_Set() const{
    return m_margin_bottom_isSet;
}

bool OAIEmbeddedObject::is_margin_bottom_Valid() const{
    return m_margin_bottom_isValid;
}

OAIDimension OAIEmbeddedObject::getMarginLeft() const {
    return m_margin_left;
}
void OAIEmbeddedObject::setMarginLeft(const OAIDimension &margin_left) {
    m_margin_left = margin_left;
    m_margin_left_isSet = true;
}

bool OAIEmbeddedObject::is_margin_left_Set() const{
    return m_margin_left_isSet;
}

bool OAIEmbeddedObject::is_margin_left_Valid() const{
    return m_margin_left_isValid;
}

OAIDimension OAIEmbeddedObject::getMarginRight() const {
    return m_margin_right;
}
void OAIEmbeddedObject::setMarginRight(const OAIDimension &margin_right) {
    m_margin_right = margin_right;
    m_margin_right_isSet = true;
}

bool OAIEmbeddedObject::is_margin_right_Set() const{
    return m_margin_right_isSet;
}

bool OAIEmbeddedObject::is_margin_right_Valid() const{
    return m_margin_right_isValid;
}

OAIDimension OAIEmbeddedObject::getMarginTop() const {
    return m_margin_top;
}
void OAIEmbeddedObject::setMarginTop(const OAIDimension &margin_top) {
    m_margin_top = margin_top;
    m_margin_top_isSet = true;
}

bool OAIEmbeddedObject::is_margin_top_Set() const{
    return m_margin_top_isSet;
}

bool OAIEmbeddedObject::is_margin_top_Valid() const{
    return m_margin_top_isValid;
}

OAISize OAIEmbeddedObject::getSize() const {
    return m_size;
}
void OAIEmbeddedObject::setSize(const OAISize &size) {
    m_size = size;
    m_size_isSet = true;
}

bool OAIEmbeddedObject::is_size_Set() const{
    return m_size_isSet;
}

bool OAIEmbeddedObject::is_size_Valid() const{
    return m_size_isValid;
}

QString OAIEmbeddedObject::getTitle() const {
    return m_title;
}
void OAIEmbeddedObject::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIEmbeddedObject::is_title_Set() const{
    return m_title_isSet;
}

bool OAIEmbeddedObject::is_title_Valid() const{
    return m_title_isValid;
}

bool OAIEmbeddedObject::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_embedded_drawing_properties_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_embedded_object_border.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_linked_content_reference.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_margin_bottom.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_margin_left.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_margin_right.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_margin_top.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_size.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEmbeddedObject::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
