/**
 * Google Docs API
 * Reads and writes Google Docs documents.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICropPropertiesSuggestionState.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICropPropertiesSuggestionState::OAICropPropertiesSuggestionState(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICropPropertiesSuggestionState::OAICropPropertiesSuggestionState() {
    this->initializeModel();
}

OAICropPropertiesSuggestionState::~OAICropPropertiesSuggestionState() {}

void OAICropPropertiesSuggestionState::initializeModel() {

    m_angle_suggested_isSet = false;
    m_angle_suggested_isValid = false;

    m_offset_bottom_suggested_isSet = false;
    m_offset_bottom_suggested_isValid = false;

    m_offset_left_suggested_isSet = false;
    m_offset_left_suggested_isValid = false;

    m_offset_right_suggested_isSet = false;
    m_offset_right_suggested_isValid = false;

    m_offset_top_suggested_isSet = false;
    m_offset_top_suggested_isValid = false;
}

void OAICropPropertiesSuggestionState::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICropPropertiesSuggestionState::fromJsonObject(QJsonObject json) {

    m_angle_suggested_isValid = ::OpenAPI::fromJsonValue(m_angle_suggested, json[QString("angleSuggested")]);
    m_angle_suggested_isSet = !json[QString("angleSuggested")].isNull() && m_angle_suggested_isValid;

    m_offset_bottom_suggested_isValid = ::OpenAPI::fromJsonValue(m_offset_bottom_suggested, json[QString("offsetBottomSuggested")]);
    m_offset_bottom_suggested_isSet = !json[QString("offsetBottomSuggested")].isNull() && m_offset_bottom_suggested_isValid;

    m_offset_left_suggested_isValid = ::OpenAPI::fromJsonValue(m_offset_left_suggested, json[QString("offsetLeftSuggested")]);
    m_offset_left_suggested_isSet = !json[QString("offsetLeftSuggested")].isNull() && m_offset_left_suggested_isValid;

    m_offset_right_suggested_isValid = ::OpenAPI::fromJsonValue(m_offset_right_suggested, json[QString("offsetRightSuggested")]);
    m_offset_right_suggested_isSet = !json[QString("offsetRightSuggested")].isNull() && m_offset_right_suggested_isValid;

    m_offset_top_suggested_isValid = ::OpenAPI::fromJsonValue(m_offset_top_suggested, json[QString("offsetTopSuggested")]);
    m_offset_top_suggested_isSet = !json[QString("offsetTopSuggested")].isNull() && m_offset_top_suggested_isValid;
}

QString OAICropPropertiesSuggestionState::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICropPropertiesSuggestionState::asJsonObject() const {
    QJsonObject obj;
    if (m_angle_suggested_isSet) {
        obj.insert(QString("angleSuggested"), ::OpenAPI::toJsonValue(m_angle_suggested));
    }
    if (m_offset_bottom_suggested_isSet) {
        obj.insert(QString("offsetBottomSuggested"), ::OpenAPI::toJsonValue(m_offset_bottom_suggested));
    }
    if (m_offset_left_suggested_isSet) {
        obj.insert(QString("offsetLeftSuggested"), ::OpenAPI::toJsonValue(m_offset_left_suggested));
    }
    if (m_offset_right_suggested_isSet) {
        obj.insert(QString("offsetRightSuggested"), ::OpenAPI::toJsonValue(m_offset_right_suggested));
    }
    if (m_offset_top_suggested_isSet) {
        obj.insert(QString("offsetTopSuggested"), ::OpenAPI::toJsonValue(m_offset_top_suggested));
    }
    return obj;
}

bool OAICropPropertiesSuggestionState::isAngleSuggested() const {
    return m_angle_suggested;
}
void OAICropPropertiesSuggestionState::setAngleSuggested(const bool &angle_suggested) {
    m_angle_suggested = angle_suggested;
    m_angle_suggested_isSet = true;
}

bool OAICropPropertiesSuggestionState::is_angle_suggested_Set() const{
    return m_angle_suggested_isSet;
}

bool OAICropPropertiesSuggestionState::is_angle_suggested_Valid() const{
    return m_angle_suggested_isValid;
}

bool OAICropPropertiesSuggestionState::isOffsetBottomSuggested() const {
    return m_offset_bottom_suggested;
}
void OAICropPropertiesSuggestionState::setOffsetBottomSuggested(const bool &offset_bottom_suggested) {
    m_offset_bottom_suggested = offset_bottom_suggested;
    m_offset_bottom_suggested_isSet = true;
}

bool OAICropPropertiesSuggestionState::is_offset_bottom_suggested_Set() const{
    return m_offset_bottom_suggested_isSet;
}

bool OAICropPropertiesSuggestionState::is_offset_bottom_suggested_Valid() const{
    return m_offset_bottom_suggested_isValid;
}

bool OAICropPropertiesSuggestionState::isOffsetLeftSuggested() const {
    return m_offset_left_suggested;
}
void OAICropPropertiesSuggestionState::setOffsetLeftSuggested(const bool &offset_left_suggested) {
    m_offset_left_suggested = offset_left_suggested;
    m_offset_left_suggested_isSet = true;
}

bool OAICropPropertiesSuggestionState::is_offset_left_suggested_Set() const{
    return m_offset_left_suggested_isSet;
}

bool OAICropPropertiesSuggestionState::is_offset_left_suggested_Valid() const{
    return m_offset_left_suggested_isValid;
}

bool OAICropPropertiesSuggestionState::isOffsetRightSuggested() const {
    return m_offset_right_suggested;
}
void OAICropPropertiesSuggestionState::setOffsetRightSuggested(const bool &offset_right_suggested) {
    m_offset_right_suggested = offset_right_suggested;
    m_offset_right_suggested_isSet = true;
}

bool OAICropPropertiesSuggestionState::is_offset_right_suggested_Set() const{
    return m_offset_right_suggested_isSet;
}

bool OAICropPropertiesSuggestionState::is_offset_right_suggested_Valid() const{
    return m_offset_right_suggested_isValid;
}

bool OAICropPropertiesSuggestionState::isOffsetTopSuggested() const {
    return m_offset_top_suggested;
}
void OAICropPropertiesSuggestionState::setOffsetTopSuggested(const bool &offset_top_suggested) {
    m_offset_top_suggested = offset_top_suggested;
    m_offset_top_suggested_isSet = true;
}

bool OAICropPropertiesSuggestionState::is_offset_top_suggested_Set() const{
    return m_offset_top_suggested_isSet;
}

bool OAICropPropertiesSuggestionState::is_offset_top_suggested_Valid() const{
    return m_offset_top_suggested_isValid;
}

bool OAICropPropertiesSuggestionState::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_angle_suggested_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offset_bottom_suggested_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offset_left_suggested_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offset_right_suggested_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offset_top_suggested_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICropPropertiesSuggestionState::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
