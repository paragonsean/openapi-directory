/**
 * Google Docs API
 * Reads and writes Google Docs documents.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINestingLevel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINestingLevel::OAINestingLevel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINestingLevel::OAINestingLevel() {
    this->initializeModel();
}

OAINestingLevel::~OAINestingLevel() {}

void OAINestingLevel::initializeModel() {

    m_bullet_alignment_isSet = false;
    m_bullet_alignment_isValid = false;

    m_glyph_format_isSet = false;
    m_glyph_format_isValid = false;

    m_glyph_symbol_isSet = false;
    m_glyph_symbol_isValid = false;

    m_glyph_type_isSet = false;
    m_glyph_type_isValid = false;

    m_indent_first_line_isSet = false;
    m_indent_first_line_isValid = false;

    m_indent_start_isSet = false;
    m_indent_start_isValid = false;

    m_start_number_isSet = false;
    m_start_number_isValid = false;

    m_text_style_isSet = false;
    m_text_style_isValid = false;
}

void OAINestingLevel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINestingLevel::fromJsonObject(QJsonObject json) {

    m_bullet_alignment_isValid = ::OpenAPI::fromJsonValue(m_bullet_alignment, json[QString("bulletAlignment")]);
    m_bullet_alignment_isSet = !json[QString("bulletAlignment")].isNull() && m_bullet_alignment_isValid;

    m_glyph_format_isValid = ::OpenAPI::fromJsonValue(m_glyph_format, json[QString("glyphFormat")]);
    m_glyph_format_isSet = !json[QString("glyphFormat")].isNull() && m_glyph_format_isValid;

    m_glyph_symbol_isValid = ::OpenAPI::fromJsonValue(m_glyph_symbol, json[QString("glyphSymbol")]);
    m_glyph_symbol_isSet = !json[QString("glyphSymbol")].isNull() && m_glyph_symbol_isValid;

    m_glyph_type_isValid = ::OpenAPI::fromJsonValue(m_glyph_type, json[QString("glyphType")]);
    m_glyph_type_isSet = !json[QString("glyphType")].isNull() && m_glyph_type_isValid;

    m_indent_first_line_isValid = ::OpenAPI::fromJsonValue(m_indent_first_line, json[QString("indentFirstLine")]);
    m_indent_first_line_isSet = !json[QString("indentFirstLine")].isNull() && m_indent_first_line_isValid;

    m_indent_start_isValid = ::OpenAPI::fromJsonValue(m_indent_start, json[QString("indentStart")]);
    m_indent_start_isSet = !json[QString("indentStart")].isNull() && m_indent_start_isValid;

    m_start_number_isValid = ::OpenAPI::fromJsonValue(m_start_number, json[QString("startNumber")]);
    m_start_number_isSet = !json[QString("startNumber")].isNull() && m_start_number_isValid;

    m_text_style_isValid = ::OpenAPI::fromJsonValue(m_text_style, json[QString("textStyle")]);
    m_text_style_isSet = !json[QString("textStyle")].isNull() && m_text_style_isValid;
}

QString OAINestingLevel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINestingLevel::asJsonObject() const {
    QJsonObject obj;
    if (m_bullet_alignment_isSet) {
        obj.insert(QString("bulletAlignment"), ::OpenAPI::toJsonValue(m_bullet_alignment));
    }
    if (m_glyph_format_isSet) {
        obj.insert(QString("glyphFormat"), ::OpenAPI::toJsonValue(m_glyph_format));
    }
    if (m_glyph_symbol_isSet) {
        obj.insert(QString("glyphSymbol"), ::OpenAPI::toJsonValue(m_glyph_symbol));
    }
    if (m_glyph_type_isSet) {
        obj.insert(QString("glyphType"), ::OpenAPI::toJsonValue(m_glyph_type));
    }
    if (m_indent_first_line.isSet()) {
        obj.insert(QString("indentFirstLine"), ::OpenAPI::toJsonValue(m_indent_first_line));
    }
    if (m_indent_start.isSet()) {
        obj.insert(QString("indentStart"), ::OpenAPI::toJsonValue(m_indent_start));
    }
    if (m_start_number_isSet) {
        obj.insert(QString("startNumber"), ::OpenAPI::toJsonValue(m_start_number));
    }
    if (m_text_style.isSet()) {
        obj.insert(QString("textStyle"), ::OpenAPI::toJsonValue(m_text_style));
    }
    return obj;
}

QString OAINestingLevel::getBulletAlignment() const {
    return m_bullet_alignment;
}
void OAINestingLevel::setBulletAlignment(const QString &bullet_alignment) {
    m_bullet_alignment = bullet_alignment;
    m_bullet_alignment_isSet = true;
}

bool OAINestingLevel::is_bullet_alignment_Set() const{
    return m_bullet_alignment_isSet;
}

bool OAINestingLevel::is_bullet_alignment_Valid() const{
    return m_bullet_alignment_isValid;
}

QString OAINestingLevel::getGlyphFormat() const {
    return m_glyph_format;
}
void OAINestingLevel::setGlyphFormat(const QString &glyph_format) {
    m_glyph_format = glyph_format;
    m_glyph_format_isSet = true;
}

bool OAINestingLevel::is_glyph_format_Set() const{
    return m_glyph_format_isSet;
}

bool OAINestingLevel::is_glyph_format_Valid() const{
    return m_glyph_format_isValid;
}

QString OAINestingLevel::getGlyphSymbol() const {
    return m_glyph_symbol;
}
void OAINestingLevel::setGlyphSymbol(const QString &glyph_symbol) {
    m_glyph_symbol = glyph_symbol;
    m_glyph_symbol_isSet = true;
}

bool OAINestingLevel::is_glyph_symbol_Set() const{
    return m_glyph_symbol_isSet;
}

bool OAINestingLevel::is_glyph_symbol_Valid() const{
    return m_glyph_symbol_isValid;
}

QString OAINestingLevel::getGlyphType() const {
    return m_glyph_type;
}
void OAINestingLevel::setGlyphType(const QString &glyph_type) {
    m_glyph_type = glyph_type;
    m_glyph_type_isSet = true;
}

bool OAINestingLevel::is_glyph_type_Set() const{
    return m_glyph_type_isSet;
}

bool OAINestingLevel::is_glyph_type_Valid() const{
    return m_glyph_type_isValid;
}

OAIDimension OAINestingLevel::getIndentFirstLine() const {
    return m_indent_first_line;
}
void OAINestingLevel::setIndentFirstLine(const OAIDimension &indent_first_line) {
    m_indent_first_line = indent_first_line;
    m_indent_first_line_isSet = true;
}

bool OAINestingLevel::is_indent_first_line_Set() const{
    return m_indent_first_line_isSet;
}

bool OAINestingLevel::is_indent_first_line_Valid() const{
    return m_indent_first_line_isValid;
}

OAIDimension OAINestingLevel::getIndentStart() const {
    return m_indent_start;
}
void OAINestingLevel::setIndentStart(const OAIDimension &indent_start) {
    m_indent_start = indent_start;
    m_indent_start_isSet = true;
}

bool OAINestingLevel::is_indent_start_Set() const{
    return m_indent_start_isSet;
}

bool OAINestingLevel::is_indent_start_Valid() const{
    return m_indent_start_isValid;
}

qint32 OAINestingLevel::getStartNumber() const {
    return m_start_number;
}
void OAINestingLevel::setStartNumber(const qint32 &start_number) {
    m_start_number = start_number;
    m_start_number_isSet = true;
}

bool OAINestingLevel::is_start_number_Set() const{
    return m_start_number_isSet;
}

bool OAINestingLevel::is_start_number_Valid() const{
    return m_start_number_isValid;
}

OAITextStyle OAINestingLevel::getTextStyle() const {
    return m_text_style;
}
void OAINestingLevel::setTextStyle(const OAITextStyle &text_style) {
    m_text_style = text_style;
    m_text_style_isSet = true;
}

bool OAINestingLevel::is_text_style_Set() const{
    return m_text_style_isSet;
}

bool OAINestingLevel::is_text_style_Valid() const{
    return m_text_style_isValid;
}

bool OAINestingLevel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bullet_alignment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_glyph_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_glyph_symbol_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_glyph_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_indent_first_line.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_indent_start.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_style.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINestingLevel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
