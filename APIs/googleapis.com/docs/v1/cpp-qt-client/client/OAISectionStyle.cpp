/**
 * Google Docs API
 * Reads and writes Google Docs documents.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISectionStyle.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISectionStyle::OAISectionStyle(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISectionStyle::OAISectionStyle() {
    this->initializeModel();
}

OAISectionStyle::~OAISectionStyle() {}

void OAISectionStyle::initializeModel() {

    m_column_properties_isSet = false;
    m_column_properties_isValid = false;

    m_column_separator_style_isSet = false;
    m_column_separator_style_isValid = false;

    m_content_direction_isSet = false;
    m_content_direction_isValid = false;

    m_default_footer_id_isSet = false;
    m_default_footer_id_isValid = false;

    m_default_header_id_isSet = false;
    m_default_header_id_isValid = false;

    m_even_page_footer_id_isSet = false;
    m_even_page_footer_id_isValid = false;

    m_even_page_header_id_isSet = false;
    m_even_page_header_id_isValid = false;

    m_first_page_footer_id_isSet = false;
    m_first_page_footer_id_isValid = false;

    m_first_page_header_id_isSet = false;
    m_first_page_header_id_isValid = false;

    m_flip_page_orientation_isSet = false;
    m_flip_page_orientation_isValid = false;

    m_margin_bottom_isSet = false;
    m_margin_bottom_isValid = false;

    m_margin_footer_isSet = false;
    m_margin_footer_isValid = false;

    m_margin_header_isSet = false;
    m_margin_header_isValid = false;

    m_margin_left_isSet = false;
    m_margin_left_isValid = false;

    m_margin_right_isSet = false;
    m_margin_right_isValid = false;

    m_margin_top_isSet = false;
    m_margin_top_isValid = false;

    m_page_number_start_isSet = false;
    m_page_number_start_isValid = false;

    m_section_type_isSet = false;
    m_section_type_isValid = false;

    m_use_first_page_header_footer_isSet = false;
    m_use_first_page_header_footer_isValid = false;
}

void OAISectionStyle::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISectionStyle::fromJsonObject(QJsonObject json) {

    m_column_properties_isValid = ::OpenAPI::fromJsonValue(m_column_properties, json[QString("columnProperties")]);
    m_column_properties_isSet = !json[QString("columnProperties")].isNull() && m_column_properties_isValid;

    m_column_separator_style_isValid = ::OpenAPI::fromJsonValue(m_column_separator_style, json[QString("columnSeparatorStyle")]);
    m_column_separator_style_isSet = !json[QString("columnSeparatorStyle")].isNull() && m_column_separator_style_isValid;

    m_content_direction_isValid = ::OpenAPI::fromJsonValue(m_content_direction, json[QString("contentDirection")]);
    m_content_direction_isSet = !json[QString("contentDirection")].isNull() && m_content_direction_isValid;

    m_default_footer_id_isValid = ::OpenAPI::fromJsonValue(m_default_footer_id, json[QString("defaultFooterId")]);
    m_default_footer_id_isSet = !json[QString("defaultFooterId")].isNull() && m_default_footer_id_isValid;

    m_default_header_id_isValid = ::OpenAPI::fromJsonValue(m_default_header_id, json[QString("defaultHeaderId")]);
    m_default_header_id_isSet = !json[QString("defaultHeaderId")].isNull() && m_default_header_id_isValid;

    m_even_page_footer_id_isValid = ::OpenAPI::fromJsonValue(m_even_page_footer_id, json[QString("evenPageFooterId")]);
    m_even_page_footer_id_isSet = !json[QString("evenPageFooterId")].isNull() && m_even_page_footer_id_isValid;

    m_even_page_header_id_isValid = ::OpenAPI::fromJsonValue(m_even_page_header_id, json[QString("evenPageHeaderId")]);
    m_even_page_header_id_isSet = !json[QString("evenPageHeaderId")].isNull() && m_even_page_header_id_isValid;

    m_first_page_footer_id_isValid = ::OpenAPI::fromJsonValue(m_first_page_footer_id, json[QString("firstPageFooterId")]);
    m_first_page_footer_id_isSet = !json[QString("firstPageFooterId")].isNull() && m_first_page_footer_id_isValid;

    m_first_page_header_id_isValid = ::OpenAPI::fromJsonValue(m_first_page_header_id, json[QString("firstPageHeaderId")]);
    m_first_page_header_id_isSet = !json[QString("firstPageHeaderId")].isNull() && m_first_page_header_id_isValid;

    m_flip_page_orientation_isValid = ::OpenAPI::fromJsonValue(m_flip_page_orientation, json[QString("flipPageOrientation")]);
    m_flip_page_orientation_isSet = !json[QString("flipPageOrientation")].isNull() && m_flip_page_orientation_isValid;

    m_margin_bottom_isValid = ::OpenAPI::fromJsonValue(m_margin_bottom, json[QString("marginBottom")]);
    m_margin_bottom_isSet = !json[QString("marginBottom")].isNull() && m_margin_bottom_isValid;

    m_margin_footer_isValid = ::OpenAPI::fromJsonValue(m_margin_footer, json[QString("marginFooter")]);
    m_margin_footer_isSet = !json[QString("marginFooter")].isNull() && m_margin_footer_isValid;

    m_margin_header_isValid = ::OpenAPI::fromJsonValue(m_margin_header, json[QString("marginHeader")]);
    m_margin_header_isSet = !json[QString("marginHeader")].isNull() && m_margin_header_isValid;

    m_margin_left_isValid = ::OpenAPI::fromJsonValue(m_margin_left, json[QString("marginLeft")]);
    m_margin_left_isSet = !json[QString("marginLeft")].isNull() && m_margin_left_isValid;

    m_margin_right_isValid = ::OpenAPI::fromJsonValue(m_margin_right, json[QString("marginRight")]);
    m_margin_right_isSet = !json[QString("marginRight")].isNull() && m_margin_right_isValid;

    m_margin_top_isValid = ::OpenAPI::fromJsonValue(m_margin_top, json[QString("marginTop")]);
    m_margin_top_isSet = !json[QString("marginTop")].isNull() && m_margin_top_isValid;

    m_page_number_start_isValid = ::OpenAPI::fromJsonValue(m_page_number_start, json[QString("pageNumberStart")]);
    m_page_number_start_isSet = !json[QString("pageNumberStart")].isNull() && m_page_number_start_isValid;

    m_section_type_isValid = ::OpenAPI::fromJsonValue(m_section_type, json[QString("sectionType")]);
    m_section_type_isSet = !json[QString("sectionType")].isNull() && m_section_type_isValid;

    m_use_first_page_header_footer_isValid = ::OpenAPI::fromJsonValue(m_use_first_page_header_footer, json[QString("useFirstPageHeaderFooter")]);
    m_use_first_page_header_footer_isSet = !json[QString("useFirstPageHeaderFooter")].isNull() && m_use_first_page_header_footer_isValid;
}

QString OAISectionStyle::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISectionStyle::asJsonObject() const {
    QJsonObject obj;
    if (m_column_properties.size() > 0) {
        obj.insert(QString("columnProperties"), ::OpenAPI::toJsonValue(m_column_properties));
    }
    if (m_column_separator_style_isSet) {
        obj.insert(QString("columnSeparatorStyle"), ::OpenAPI::toJsonValue(m_column_separator_style));
    }
    if (m_content_direction_isSet) {
        obj.insert(QString("contentDirection"), ::OpenAPI::toJsonValue(m_content_direction));
    }
    if (m_default_footer_id_isSet) {
        obj.insert(QString("defaultFooterId"), ::OpenAPI::toJsonValue(m_default_footer_id));
    }
    if (m_default_header_id_isSet) {
        obj.insert(QString("defaultHeaderId"), ::OpenAPI::toJsonValue(m_default_header_id));
    }
    if (m_even_page_footer_id_isSet) {
        obj.insert(QString("evenPageFooterId"), ::OpenAPI::toJsonValue(m_even_page_footer_id));
    }
    if (m_even_page_header_id_isSet) {
        obj.insert(QString("evenPageHeaderId"), ::OpenAPI::toJsonValue(m_even_page_header_id));
    }
    if (m_first_page_footer_id_isSet) {
        obj.insert(QString("firstPageFooterId"), ::OpenAPI::toJsonValue(m_first_page_footer_id));
    }
    if (m_first_page_header_id_isSet) {
        obj.insert(QString("firstPageHeaderId"), ::OpenAPI::toJsonValue(m_first_page_header_id));
    }
    if (m_flip_page_orientation_isSet) {
        obj.insert(QString("flipPageOrientation"), ::OpenAPI::toJsonValue(m_flip_page_orientation));
    }
    if (m_margin_bottom.isSet()) {
        obj.insert(QString("marginBottom"), ::OpenAPI::toJsonValue(m_margin_bottom));
    }
    if (m_margin_footer.isSet()) {
        obj.insert(QString("marginFooter"), ::OpenAPI::toJsonValue(m_margin_footer));
    }
    if (m_margin_header.isSet()) {
        obj.insert(QString("marginHeader"), ::OpenAPI::toJsonValue(m_margin_header));
    }
    if (m_margin_left.isSet()) {
        obj.insert(QString("marginLeft"), ::OpenAPI::toJsonValue(m_margin_left));
    }
    if (m_margin_right.isSet()) {
        obj.insert(QString("marginRight"), ::OpenAPI::toJsonValue(m_margin_right));
    }
    if (m_margin_top.isSet()) {
        obj.insert(QString("marginTop"), ::OpenAPI::toJsonValue(m_margin_top));
    }
    if (m_page_number_start_isSet) {
        obj.insert(QString("pageNumberStart"), ::OpenAPI::toJsonValue(m_page_number_start));
    }
    if (m_section_type_isSet) {
        obj.insert(QString("sectionType"), ::OpenAPI::toJsonValue(m_section_type));
    }
    if (m_use_first_page_header_footer_isSet) {
        obj.insert(QString("useFirstPageHeaderFooter"), ::OpenAPI::toJsonValue(m_use_first_page_header_footer));
    }
    return obj;
}

QList<OAISectionColumnProperties> OAISectionStyle::getColumnProperties() const {
    return m_column_properties;
}
void OAISectionStyle::setColumnProperties(const QList<OAISectionColumnProperties> &column_properties) {
    m_column_properties = column_properties;
    m_column_properties_isSet = true;
}

bool OAISectionStyle::is_column_properties_Set() const{
    return m_column_properties_isSet;
}

bool OAISectionStyle::is_column_properties_Valid() const{
    return m_column_properties_isValid;
}

QString OAISectionStyle::getColumnSeparatorStyle() const {
    return m_column_separator_style;
}
void OAISectionStyle::setColumnSeparatorStyle(const QString &column_separator_style) {
    m_column_separator_style = column_separator_style;
    m_column_separator_style_isSet = true;
}

bool OAISectionStyle::is_column_separator_style_Set() const{
    return m_column_separator_style_isSet;
}

bool OAISectionStyle::is_column_separator_style_Valid() const{
    return m_column_separator_style_isValid;
}

QString OAISectionStyle::getContentDirection() const {
    return m_content_direction;
}
void OAISectionStyle::setContentDirection(const QString &content_direction) {
    m_content_direction = content_direction;
    m_content_direction_isSet = true;
}

bool OAISectionStyle::is_content_direction_Set() const{
    return m_content_direction_isSet;
}

bool OAISectionStyle::is_content_direction_Valid() const{
    return m_content_direction_isValid;
}

QString OAISectionStyle::getDefaultFooterId() const {
    return m_default_footer_id;
}
void OAISectionStyle::setDefaultFooterId(const QString &default_footer_id) {
    m_default_footer_id = default_footer_id;
    m_default_footer_id_isSet = true;
}

bool OAISectionStyle::is_default_footer_id_Set() const{
    return m_default_footer_id_isSet;
}

bool OAISectionStyle::is_default_footer_id_Valid() const{
    return m_default_footer_id_isValid;
}

QString OAISectionStyle::getDefaultHeaderId() const {
    return m_default_header_id;
}
void OAISectionStyle::setDefaultHeaderId(const QString &default_header_id) {
    m_default_header_id = default_header_id;
    m_default_header_id_isSet = true;
}

bool OAISectionStyle::is_default_header_id_Set() const{
    return m_default_header_id_isSet;
}

bool OAISectionStyle::is_default_header_id_Valid() const{
    return m_default_header_id_isValid;
}

QString OAISectionStyle::getEvenPageFooterId() const {
    return m_even_page_footer_id;
}
void OAISectionStyle::setEvenPageFooterId(const QString &even_page_footer_id) {
    m_even_page_footer_id = even_page_footer_id;
    m_even_page_footer_id_isSet = true;
}

bool OAISectionStyle::is_even_page_footer_id_Set() const{
    return m_even_page_footer_id_isSet;
}

bool OAISectionStyle::is_even_page_footer_id_Valid() const{
    return m_even_page_footer_id_isValid;
}

QString OAISectionStyle::getEvenPageHeaderId() const {
    return m_even_page_header_id;
}
void OAISectionStyle::setEvenPageHeaderId(const QString &even_page_header_id) {
    m_even_page_header_id = even_page_header_id;
    m_even_page_header_id_isSet = true;
}

bool OAISectionStyle::is_even_page_header_id_Set() const{
    return m_even_page_header_id_isSet;
}

bool OAISectionStyle::is_even_page_header_id_Valid() const{
    return m_even_page_header_id_isValid;
}

QString OAISectionStyle::getFirstPageFooterId() const {
    return m_first_page_footer_id;
}
void OAISectionStyle::setFirstPageFooterId(const QString &first_page_footer_id) {
    m_first_page_footer_id = first_page_footer_id;
    m_first_page_footer_id_isSet = true;
}

bool OAISectionStyle::is_first_page_footer_id_Set() const{
    return m_first_page_footer_id_isSet;
}

bool OAISectionStyle::is_first_page_footer_id_Valid() const{
    return m_first_page_footer_id_isValid;
}

QString OAISectionStyle::getFirstPageHeaderId() const {
    return m_first_page_header_id;
}
void OAISectionStyle::setFirstPageHeaderId(const QString &first_page_header_id) {
    m_first_page_header_id = first_page_header_id;
    m_first_page_header_id_isSet = true;
}

bool OAISectionStyle::is_first_page_header_id_Set() const{
    return m_first_page_header_id_isSet;
}

bool OAISectionStyle::is_first_page_header_id_Valid() const{
    return m_first_page_header_id_isValid;
}

bool OAISectionStyle::isFlipPageOrientation() const {
    return m_flip_page_orientation;
}
void OAISectionStyle::setFlipPageOrientation(const bool &flip_page_orientation) {
    m_flip_page_orientation = flip_page_orientation;
    m_flip_page_orientation_isSet = true;
}

bool OAISectionStyle::is_flip_page_orientation_Set() const{
    return m_flip_page_orientation_isSet;
}

bool OAISectionStyle::is_flip_page_orientation_Valid() const{
    return m_flip_page_orientation_isValid;
}

OAIDimension OAISectionStyle::getMarginBottom() const {
    return m_margin_bottom;
}
void OAISectionStyle::setMarginBottom(const OAIDimension &margin_bottom) {
    m_margin_bottom = margin_bottom;
    m_margin_bottom_isSet = true;
}

bool OAISectionStyle::is_margin_bottom_Set() const{
    return m_margin_bottom_isSet;
}

bool OAISectionStyle::is_margin_bottom_Valid() const{
    return m_margin_bottom_isValid;
}

OAIDimension OAISectionStyle::getMarginFooter() const {
    return m_margin_footer;
}
void OAISectionStyle::setMarginFooter(const OAIDimension &margin_footer) {
    m_margin_footer = margin_footer;
    m_margin_footer_isSet = true;
}

bool OAISectionStyle::is_margin_footer_Set() const{
    return m_margin_footer_isSet;
}

bool OAISectionStyle::is_margin_footer_Valid() const{
    return m_margin_footer_isValid;
}

OAIDimension OAISectionStyle::getMarginHeader() const {
    return m_margin_header;
}
void OAISectionStyle::setMarginHeader(const OAIDimension &margin_header) {
    m_margin_header = margin_header;
    m_margin_header_isSet = true;
}

bool OAISectionStyle::is_margin_header_Set() const{
    return m_margin_header_isSet;
}

bool OAISectionStyle::is_margin_header_Valid() const{
    return m_margin_header_isValid;
}

OAIDimension OAISectionStyle::getMarginLeft() const {
    return m_margin_left;
}
void OAISectionStyle::setMarginLeft(const OAIDimension &margin_left) {
    m_margin_left = margin_left;
    m_margin_left_isSet = true;
}

bool OAISectionStyle::is_margin_left_Set() const{
    return m_margin_left_isSet;
}

bool OAISectionStyle::is_margin_left_Valid() const{
    return m_margin_left_isValid;
}

OAIDimension OAISectionStyle::getMarginRight() const {
    return m_margin_right;
}
void OAISectionStyle::setMarginRight(const OAIDimension &margin_right) {
    m_margin_right = margin_right;
    m_margin_right_isSet = true;
}

bool OAISectionStyle::is_margin_right_Set() const{
    return m_margin_right_isSet;
}

bool OAISectionStyle::is_margin_right_Valid() const{
    return m_margin_right_isValid;
}

OAIDimension OAISectionStyle::getMarginTop() const {
    return m_margin_top;
}
void OAISectionStyle::setMarginTop(const OAIDimension &margin_top) {
    m_margin_top = margin_top;
    m_margin_top_isSet = true;
}

bool OAISectionStyle::is_margin_top_Set() const{
    return m_margin_top_isSet;
}

bool OAISectionStyle::is_margin_top_Valid() const{
    return m_margin_top_isValid;
}

qint32 OAISectionStyle::getPageNumberStart() const {
    return m_page_number_start;
}
void OAISectionStyle::setPageNumberStart(const qint32 &page_number_start) {
    m_page_number_start = page_number_start;
    m_page_number_start_isSet = true;
}

bool OAISectionStyle::is_page_number_start_Set() const{
    return m_page_number_start_isSet;
}

bool OAISectionStyle::is_page_number_start_Valid() const{
    return m_page_number_start_isValid;
}

QString OAISectionStyle::getSectionType() const {
    return m_section_type;
}
void OAISectionStyle::setSectionType(const QString &section_type) {
    m_section_type = section_type;
    m_section_type_isSet = true;
}

bool OAISectionStyle::is_section_type_Set() const{
    return m_section_type_isSet;
}

bool OAISectionStyle::is_section_type_Valid() const{
    return m_section_type_isValid;
}

bool OAISectionStyle::isUseFirstPageHeaderFooter() const {
    return m_use_first_page_header_footer;
}
void OAISectionStyle::setUseFirstPageHeaderFooter(const bool &use_first_page_header_footer) {
    m_use_first_page_header_footer = use_first_page_header_footer;
    m_use_first_page_header_footer_isSet = true;
}

bool OAISectionStyle::is_use_first_page_header_footer_Set() const{
    return m_use_first_page_header_footer_isSet;
}

bool OAISectionStyle::is_use_first_page_header_footer_Valid() const{
    return m_use_first_page_header_footer_isValid;
}

bool OAISectionStyle::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_column_properties.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_column_separator_style_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_direction_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_footer_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_header_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_even_page_footer_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_even_page_header_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_page_footer_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_page_header_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_flip_page_orientation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_margin_bottom.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_margin_footer.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_margin_header.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_margin_left.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_margin_right.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_margin_top.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_number_start_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_section_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_first_page_header_footer_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISectionStyle::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
