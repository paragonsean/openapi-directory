/**
 * Google Docs API
 * Reads and writes Google Docs documents.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListProperties::OAIListProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListProperties::OAIListProperties() {
    this->initializeModel();
}

OAIListProperties::~OAIListProperties() {}

void OAIListProperties::initializeModel() {

    m_nesting_levels_isSet = false;
    m_nesting_levels_isValid = false;
}

void OAIListProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListProperties::fromJsonObject(QJsonObject json) {

    m_nesting_levels_isValid = ::OpenAPI::fromJsonValue(m_nesting_levels, json[QString("nestingLevels")]);
    m_nesting_levels_isSet = !json[QString("nestingLevels")].isNull() && m_nesting_levels_isValid;
}

QString OAIListProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_nesting_levels.size() > 0) {
        obj.insert(QString("nestingLevels"), ::OpenAPI::toJsonValue(m_nesting_levels));
    }
    return obj;
}

QList<OAINestingLevel> OAIListProperties::getNestingLevels() const {
    return m_nesting_levels;
}
void OAIListProperties::setNestingLevels(const QList<OAINestingLevel> &nesting_levels) {
    m_nesting_levels = nesting_levels;
    m_nesting_levels_isSet = true;
}

bool OAIListProperties::is_nesting_levels_Set() const{
    return m_nesting_levels_isSet;
}

bool OAIListProperties::is_nesting_levels_Valid() const{
    return m_nesting_levels_isValid;
}

bool OAIListProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_nesting_levels.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
