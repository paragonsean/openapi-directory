/**
 * Google Docs API
 * Reads and writes Google Docs documents.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIParagraph.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIParagraph::OAIParagraph(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIParagraph::OAIParagraph() {
    this->initializeModel();
}

OAIParagraph::~OAIParagraph() {}

void OAIParagraph::initializeModel() {

    m_bullet_isSet = false;
    m_bullet_isValid = false;

    m_elements_isSet = false;
    m_elements_isValid = false;

    m_paragraph_style_isSet = false;
    m_paragraph_style_isValid = false;

    m_positioned_object_ids_isSet = false;
    m_positioned_object_ids_isValid = false;

    m_suggested_bullet_changes_isSet = false;
    m_suggested_bullet_changes_isValid = false;

    m_suggested_paragraph_style_changes_isSet = false;
    m_suggested_paragraph_style_changes_isValid = false;

    m_suggested_positioned_object_ids_isSet = false;
    m_suggested_positioned_object_ids_isValid = false;
}

void OAIParagraph::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIParagraph::fromJsonObject(QJsonObject json) {

    m_bullet_isValid = ::OpenAPI::fromJsonValue(m_bullet, json[QString("bullet")]);
    m_bullet_isSet = !json[QString("bullet")].isNull() && m_bullet_isValid;

    m_elements_isValid = ::OpenAPI::fromJsonValue(m_elements, json[QString("elements")]);
    m_elements_isSet = !json[QString("elements")].isNull() && m_elements_isValid;

    m_paragraph_style_isValid = ::OpenAPI::fromJsonValue(m_paragraph_style, json[QString("paragraphStyle")]);
    m_paragraph_style_isSet = !json[QString("paragraphStyle")].isNull() && m_paragraph_style_isValid;

    m_positioned_object_ids_isValid = ::OpenAPI::fromJsonValue(m_positioned_object_ids, json[QString("positionedObjectIds")]);
    m_positioned_object_ids_isSet = !json[QString("positionedObjectIds")].isNull() && m_positioned_object_ids_isValid;

    m_suggested_bullet_changes_isValid = ::OpenAPI::fromJsonValue(m_suggested_bullet_changes, json[QString("suggestedBulletChanges")]);
    m_suggested_bullet_changes_isSet = !json[QString("suggestedBulletChanges")].isNull() && m_suggested_bullet_changes_isValid;

    m_suggested_paragraph_style_changes_isValid = ::OpenAPI::fromJsonValue(m_suggested_paragraph_style_changes, json[QString("suggestedParagraphStyleChanges")]);
    m_suggested_paragraph_style_changes_isSet = !json[QString("suggestedParagraphStyleChanges")].isNull() && m_suggested_paragraph_style_changes_isValid;

    m_suggested_positioned_object_ids_isValid = ::OpenAPI::fromJsonValue(m_suggested_positioned_object_ids, json[QString("suggestedPositionedObjectIds")]);
    m_suggested_positioned_object_ids_isSet = !json[QString("suggestedPositionedObjectIds")].isNull() && m_suggested_positioned_object_ids_isValid;
}

QString OAIParagraph::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIParagraph::asJsonObject() const {
    QJsonObject obj;
    if (m_bullet.isSet()) {
        obj.insert(QString("bullet"), ::OpenAPI::toJsonValue(m_bullet));
    }
    if (m_elements.size() > 0) {
        obj.insert(QString("elements"), ::OpenAPI::toJsonValue(m_elements));
    }
    if (m_paragraph_style.isSet()) {
        obj.insert(QString("paragraphStyle"), ::OpenAPI::toJsonValue(m_paragraph_style));
    }
    if (m_positioned_object_ids.size() > 0) {
        obj.insert(QString("positionedObjectIds"), ::OpenAPI::toJsonValue(m_positioned_object_ids));
    }
    if (m_suggested_bullet_changes.size() > 0) {
        obj.insert(QString("suggestedBulletChanges"), ::OpenAPI::toJsonValue(m_suggested_bullet_changes));
    }
    if (m_suggested_paragraph_style_changes.size() > 0) {
        obj.insert(QString("suggestedParagraphStyleChanges"), ::OpenAPI::toJsonValue(m_suggested_paragraph_style_changes));
    }
    if (m_suggested_positioned_object_ids.size() > 0) {
        obj.insert(QString("suggestedPositionedObjectIds"), ::OpenAPI::toJsonValue(m_suggested_positioned_object_ids));
    }
    return obj;
}

OAIBullet OAIParagraph::getBullet() const {
    return m_bullet;
}
void OAIParagraph::setBullet(const OAIBullet &bullet) {
    m_bullet = bullet;
    m_bullet_isSet = true;
}

bool OAIParagraph::is_bullet_Set() const{
    return m_bullet_isSet;
}

bool OAIParagraph::is_bullet_Valid() const{
    return m_bullet_isValid;
}

QList<OAIParagraphElement> OAIParagraph::getElements() const {
    return m_elements;
}
void OAIParagraph::setElements(const QList<OAIParagraphElement> &elements) {
    m_elements = elements;
    m_elements_isSet = true;
}

bool OAIParagraph::is_elements_Set() const{
    return m_elements_isSet;
}

bool OAIParagraph::is_elements_Valid() const{
    return m_elements_isValid;
}

OAIParagraphStyle OAIParagraph::getParagraphStyle() const {
    return m_paragraph_style;
}
void OAIParagraph::setParagraphStyle(const OAIParagraphStyle &paragraph_style) {
    m_paragraph_style = paragraph_style;
    m_paragraph_style_isSet = true;
}

bool OAIParagraph::is_paragraph_style_Set() const{
    return m_paragraph_style_isSet;
}

bool OAIParagraph::is_paragraph_style_Valid() const{
    return m_paragraph_style_isValid;
}

QList<QString> OAIParagraph::getPositionedObjectIds() const {
    return m_positioned_object_ids;
}
void OAIParagraph::setPositionedObjectIds(const QList<QString> &positioned_object_ids) {
    m_positioned_object_ids = positioned_object_ids;
    m_positioned_object_ids_isSet = true;
}

bool OAIParagraph::is_positioned_object_ids_Set() const{
    return m_positioned_object_ids_isSet;
}

bool OAIParagraph::is_positioned_object_ids_Valid() const{
    return m_positioned_object_ids_isValid;
}

QMap<QString, OAISuggestedBullet> OAIParagraph::getSuggestedBulletChanges() const {
    return m_suggested_bullet_changes;
}
void OAIParagraph::setSuggestedBulletChanges(const QMap<QString, OAISuggestedBullet> &suggested_bullet_changes) {
    m_suggested_bullet_changes = suggested_bullet_changes;
    m_suggested_bullet_changes_isSet = true;
}

bool OAIParagraph::is_suggested_bullet_changes_Set() const{
    return m_suggested_bullet_changes_isSet;
}

bool OAIParagraph::is_suggested_bullet_changes_Valid() const{
    return m_suggested_bullet_changes_isValid;
}

QMap<QString, OAISuggestedParagraphStyle> OAIParagraph::getSuggestedParagraphStyleChanges() const {
    return m_suggested_paragraph_style_changes;
}
void OAIParagraph::setSuggestedParagraphStyleChanges(const QMap<QString, OAISuggestedParagraphStyle> &suggested_paragraph_style_changes) {
    m_suggested_paragraph_style_changes = suggested_paragraph_style_changes;
    m_suggested_paragraph_style_changes_isSet = true;
}

bool OAIParagraph::is_suggested_paragraph_style_changes_Set() const{
    return m_suggested_paragraph_style_changes_isSet;
}

bool OAIParagraph::is_suggested_paragraph_style_changes_Valid() const{
    return m_suggested_paragraph_style_changes_isValid;
}

QMap<QString, OAIObjectReferences> OAIParagraph::getSuggestedPositionedObjectIds() const {
    return m_suggested_positioned_object_ids;
}
void OAIParagraph::setSuggestedPositionedObjectIds(const QMap<QString, OAIObjectReferences> &suggested_positioned_object_ids) {
    m_suggested_positioned_object_ids = suggested_positioned_object_ids;
    m_suggested_positioned_object_ids_isSet = true;
}

bool OAIParagraph::is_suggested_positioned_object_ids_Set() const{
    return m_suggested_positioned_object_ids_isSet;
}

bool OAIParagraph::is_suggested_positioned_object_ids_Valid() const{
    return m_suggested_positioned_object_ids_isValid;
}

bool OAIParagraph::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bullet.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_elements.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_paragraph_style.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_positioned_object_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_suggested_bullet_changes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_suggested_paragraph_style_changes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_suggested_positioned_object_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIParagraph::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
