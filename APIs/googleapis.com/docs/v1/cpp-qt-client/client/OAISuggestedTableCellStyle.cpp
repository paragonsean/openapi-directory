/**
 * Google Docs API
 * Reads and writes Google Docs documents.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISuggestedTableCellStyle.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISuggestedTableCellStyle::OAISuggestedTableCellStyle(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISuggestedTableCellStyle::OAISuggestedTableCellStyle() {
    this->initializeModel();
}

OAISuggestedTableCellStyle::~OAISuggestedTableCellStyle() {}

void OAISuggestedTableCellStyle::initializeModel() {

    m_table_cell_style_isSet = false;
    m_table_cell_style_isValid = false;

    m_table_cell_style_suggestion_state_isSet = false;
    m_table_cell_style_suggestion_state_isValid = false;
}

void OAISuggestedTableCellStyle::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISuggestedTableCellStyle::fromJsonObject(QJsonObject json) {

    m_table_cell_style_isValid = ::OpenAPI::fromJsonValue(m_table_cell_style, json[QString("tableCellStyle")]);
    m_table_cell_style_isSet = !json[QString("tableCellStyle")].isNull() && m_table_cell_style_isValid;

    m_table_cell_style_suggestion_state_isValid = ::OpenAPI::fromJsonValue(m_table_cell_style_suggestion_state, json[QString("tableCellStyleSuggestionState")]);
    m_table_cell_style_suggestion_state_isSet = !json[QString("tableCellStyleSuggestionState")].isNull() && m_table_cell_style_suggestion_state_isValid;
}

QString OAISuggestedTableCellStyle::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISuggestedTableCellStyle::asJsonObject() const {
    QJsonObject obj;
    if (m_table_cell_style.isSet()) {
        obj.insert(QString("tableCellStyle"), ::OpenAPI::toJsonValue(m_table_cell_style));
    }
    if (m_table_cell_style_suggestion_state.isSet()) {
        obj.insert(QString("tableCellStyleSuggestionState"), ::OpenAPI::toJsonValue(m_table_cell_style_suggestion_state));
    }
    return obj;
}

OAITableCellStyle OAISuggestedTableCellStyle::getTableCellStyle() const {
    return m_table_cell_style;
}
void OAISuggestedTableCellStyle::setTableCellStyle(const OAITableCellStyle &table_cell_style) {
    m_table_cell_style = table_cell_style;
    m_table_cell_style_isSet = true;
}

bool OAISuggestedTableCellStyle::is_table_cell_style_Set() const{
    return m_table_cell_style_isSet;
}

bool OAISuggestedTableCellStyle::is_table_cell_style_Valid() const{
    return m_table_cell_style_isValid;
}

OAITableCellStyleSuggestionState OAISuggestedTableCellStyle::getTableCellStyleSuggestionState() const {
    return m_table_cell_style_suggestion_state;
}
void OAISuggestedTableCellStyle::setTableCellStyleSuggestionState(const OAITableCellStyleSuggestionState &table_cell_style_suggestion_state) {
    m_table_cell_style_suggestion_state = table_cell_style_suggestion_state;
    m_table_cell_style_suggestion_state_isSet = true;
}

bool OAISuggestedTableCellStyle::is_table_cell_style_suggestion_state_Set() const{
    return m_table_cell_style_suggestion_state_isSet;
}

bool OAISuggestedTableCellStyle::is_table_cell_style_suggestion_state_Valid() const{
    return m_table_cell_style_suggestion_state_isValid;
}

bool OAISuggestedTableCellStyle::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_table_cell_style.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_table_cell_style_suggestion_state.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISuggestedTableCellStyle::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
