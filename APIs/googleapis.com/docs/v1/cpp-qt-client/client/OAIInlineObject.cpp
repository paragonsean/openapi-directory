/**
 * Google Docs API
 * Reads and writes Google Docs documents.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInlineObject.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInlineObject::OAIInlineObject(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInlineObject::OAIInlineObject() {
    this->initializeModel();
}

OAIInlineObject::~OAIInlineObject() {}

void OAIInlineObject::initializeModel() {

    m_inline_object_properties_isSet = false;
    m_inline_object_properties_isValid = false;

    m_object_id_isSet = false;
    m_object_id_isValid = false;

    m_suggested_deletion_ids_isSet = false;
    m_suggested_deletion_ids_isValid = false;

    m_suggested_inline_object_properties_changes_isSet = false;
    m_suggested_inline_object_properties_changes_isValid = false;

    m_suggested_insertion_id_isSet = false;
    m_suggested_insertion_id_isValid = false;
}

void OAIInlineObject::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInlineObject::fromJsonObject(QJsonObject json) {

    m_inline_object_properties_isValid = ::OpenAPI::fromJsonValue(m_inline_object_properties, json[QString("inlineObjectProperties")]);
    m_inline_object_properties_isSet = !json[QString("inlineObjectProperties")].isNull() && m_inline_object_properties_isValid;

    m_object_id_isValid = ::OpenAPI::fromJsonValue(m_object_id, json[QString("objectId")]);
    m_object_id_isSet = !json[QString("objectId")].isNull() && m_object_id_isValid;

    m_suggested_deletion_ids_isValid = ::OpenAPI::fromJsonValue(m_suggested_deletion_ids, json[QString("suggestedDeletionIds")]);
    m_suggested_deletion_ids_isSet = !json[QString("suggestedDeletionIds")].isNull() && m_suggested_deletion_ids_isValid;

    m_suggested_inline_object_properties_changes_isValid = ::OpenAPI::fromJsonValue(m_suggested_inline_object_properties_changes, json[QString("suggestedInlineObjectPropertiesChanges")]);
    m_suggested_inline_object_properties_changes_isSet = !json[QString("suggestedInlineObjectPropertiesChanges")].isNull() && m_suggested_inline_object_properties_changes_isValid;

    m_suggested_insertion_id_isValid = ::OpenAPI::fromJsonValue(m_suggested_insertion_id, json[QString("suggestedInsertionId")]);
    m_suggested_insertion_id_isSet = !json[QString("suggestedInsertionId")].isNull() && m_suggested_insertion_id_isValid;
}

QString OAIInlineObject::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInlineObject::asJsonObject() const {
    QJsonObject obj;
    if (m_inline_object_properties.isSet()) {
        obj.insert(QString("inlineObjectProperties"), ::OpenAPI::toJsonValue(m_inline_object_properties));
    }
    if (m_object_id_isSet) {
        obj.insert(QString("objectId"), ::OpenAPI::toJsonValue(m_object_id));
    }
    if (m_suggested_deletion_ids.size() > 0) {
        obj.insert(QString("suggestedDeletionIds"), ::OpenAPI::toJsonValue(m_suggested_deletion_ids));
    }
    if (m_suggested_inline_object_properties_changes.size() > 0) {
        obj.insert(QString("suggestedInlineObjectPropertiesChanges"), ::OpenAPI::toJsonValue(m_suggested_inline_object_properties_changes));
    }
    if (m_suggested_insertion_id_isSet) {
        obj.insert(QString("suggestedInsertionId"), ::OpenAPI::toJsonValue(m_suggested_insertion_id));
    }
    return obj;
}

OAIInlineObjectProperties OAIInlineObject::getInlineObjectProperties() const {
    return m_inline_object_properties;
}
void OAIInlineObject::setInlineObjectProperties(const OAIInlineObjectProperties &inline_object_properties) {
    m_inline_object_properties = inline_object_properties;
    m_inline_object_properties_isSet = true;
}

bool OAIInlineObject::is_inline_object_properties_Set() const{
    return m_inline_object_properties_isSet;
}

bool OAIInlineObject::is_inline_object_properties_Valid() const{
    return m_inline_object_properties_isValid;
}

QString OAIInlineObject::getObjectId() const {
    return m_object_id;
}
void OAIInlineObject::setObjectId(const QString &object_id) {
    m_object_id = object_id;
    m_object_id_isSet = true;
}

bool OAIInlineObject::is_object_id_Set() const{
    return m_object_id_isSet;
}

bool OAIInlineObject::is_object_id_Valid() const{
    return m_object_id_isValid;
}

QList<QString> OAIInlineObject::getSuggestedDeletionIds() const {
    return m_suggested_deletion_ids;
}
void OAIInlineObject::setSuggestedDeletionIds(const QList<QString> &suggested_deletion_ids) {
    m_suggested_deletion_ids = suggested_deletion_ids;
    m_suggested_deletion_ids_isSet = true;
}

bool OAIInlineObject::is_suggested_deletion_ids_Set() const{
    return m_suggested_deletion_ids_isSet;
}

bool OAIInlineObject::is_suggested_deletion_ids_Valid() const{
    return m_suggested_deletion_ids_isValid;
}

QMap<QString, OAISuggestedInlineObjectProperties> OAIInlineObject::getSuggestedInlineObjectPropertiesChanges() const {
    return m_suggested_inline_object_properties_changes;
}
void OAIInlineObject::setSuggestedInlineObjectPropertiesChanges(const QMap<QString, OAISuggestedInlineObjectProperties> &suggested_inline_object_properties_changes) {
    m_suggested_inline_object_properties_changes = suggested_inline_object_properties_changes;
    m_suggested_inline_object_properties_changes_isSet = true;
}

bool OAIInlineObject::is_suggested_inline_object_properties_changes_Set() const{
    return m_suggested_inline_object_properties_changes_isSet;
}

bool OAIInlineObject::is_suggested_inline_object_properties_changes_Valid() const{
    return m_suggested_inline_object_properties_changes_isValid;
}

QString OAIInlineObject::getSuggestedInsertionId() const {
    return m_suggested_insertion_id;
}
void OAIInlineObject::setSuggestedInsertionId(const QString &suggested_insertion_id) {
    m_suggested_insertion_id = suggested_insertion_id;
    m_suggested_insertion_id_isSet = true;
}

bool OAIInlineObject::is_suggested_insertion_id_Set() const{
    return m_suggested_insertion_id_isSet;
}

bool OAIInlineObject::is_suggested_insertion_id_Valid() const{
    return m_suggested_insertion_id_isValid;
}

bool OAIInlineObject::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_inline_object_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_suggested_deletion_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_suggested_inline_object_properties_changes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_suggested_insertion_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInlineObject::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
