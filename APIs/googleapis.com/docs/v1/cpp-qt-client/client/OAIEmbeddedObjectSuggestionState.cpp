/**
 * Google Docs API
 * Reads and writes Google Docs documents.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEmbeddedObjectSuggestionState.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEmbeddedObjectSuggestionState::OAIEmbeddedObjectSuggestionState(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEmbeddedObjectSuggestionState::OAIEmbeddedObjectSuggestionState() {
    this->initializeModel();
}

OAIEmbeddedObjectSuggestionState::~OAIEmbeddedObjectSuggestionState() {}

void OAIEmbeddedObjectSuggestionState::initializeModel() {

    m_description_suggested_isSet = false;
    m_description_suggested_isValid = false;

    m_embedded_drawing_properties_suggestion_state_isSet = false;
    m_embedded_drawing_properties_suggestion_state_isValid = false;

    m_embedded_object_border_suggestion_state_isSet = false;
    m_embedded_object_border_suggestion_state_isValid = false;

    m_image_properties_suggestion_state_isSet = false;
    m_image_properties_suggestion_state_isValid = false;

    m_linked_content_reference_suggestion_state_isSet = false;
    m_linked_content_reference_suggestion_state_isValid = false;

    m_margin_bottom_suggested_isSet = false;
    m_margin_bottom_suggested_isValid = false;

    m_margin_left_suggested_isSet = false;
    m_margin_left_suggested_isValid = false;

    m_margin_right_suggested_isSet = false;
    m_margin_right_suggested_isValid = false;

    m_margin_top_suggested_isSet = false;
    m_margin_top_suggested_isValid = false;

    m_size_suggestion_state_isSet = false;
    m_size_suggestion_state_isValid = false;

    m_title_suggested_isSet = false;
    m_title_suggested_isValid = false;
}

void OAIEmbeddedObjectSuggestionState::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEmbeddedObjectSuggestionState::fromJsonObject(QJsonObject json) {

    m_description_suggested_isValid = ::OpenAPI::fromJsonValue(m_description_suggested, json[QString("descriptionSuggested")]);
    m_description_suggested_isSet = !json[QString("descriptionSuggested")].isNull() && m_description_suggested_isValid;

    m_embedded_drawing_properties_suggestion_state_isValid = ::OpenAPI::fromJsonValue(m_embedded_drawing_properties_suggestion_state, json[QString("embeddedDrawingPropertiesSuggestionState")]);
    m_embedded_drawing_properties_suggestion_state_isSet = !json[QString("embeddedDrawingPropertiesSuggestionState")].isNull() && m_embedded_drawing_properties_suggestion_state_isValid;

    m_embedded_object_border_suggestion_state_isValid = ::OpenAPI::fromJsonValue(m_embedded_object_border_suggestion_state, json[QString("embeddedObjectBorderSuggestionState")]);
    m_embedded_object_border_suggestion_state_isSet = !json[QString("embeddedObjectBorderSuggestionState")].isNull() && m_embedded_object_border_suggestion_state_isValid;

    m_image_properties_suggestion_state_isValid = ::OpenAPI::fromJsonValue(m_image_properties_suggestion_state, json[QString("imagePropertiesSuggestionState")]);
    m_image_properties_suggestion_state_isSet = !json[QString("imagePropertiesSuggestionState")].isNull() && m_image_properties_suggestion_state_isValid;

    m_linked_content_reference_suggestion_state_isValid = ::OpenAPI::fromJsonValue(m_linked_content_reference_suggestion_state, json[QString("linkedContentReferenceSuggestionState")]);
    m_linked_content_reference_suggestion_state_isSet = !json[QString("linkedContentReferenceSuggestionState")].isNull() && m_linked_content_reference_suggestion_state_isValid;

    m_margin_bottom_suggested_isValid = ::OpenAPI::fromJsonValue(m_margin_bottom_suggested, json[QString("marginBottomSuggested")]);
    m_margin_bottom_suggested_isSet = !json[QString("marginBottomSuggested")].isNull() && m_margin_bottom_suggested_isValid;

    m_margin_left_suggested_isValid = ::OpenAPI::fromJsonValue(m_margin_left_suggested, json[QString("marginLeftSuggested")]);
    m_margin_left_suggested_isSet = !json[QString("marginLeftSuggested")].isNull() && m_margin_left_suggested_isValid;

    m_margin_right_suggested_isValid = ::OpenAPI::fromJsonValue(m_margin_right_suggested, json[QString("marginRightSuggested")]);
    m_margin_right_suggested_isSet = !json[QString("marginRightSuggested")].isNull() && m_margin_right_suggested_isValid;

    m_margin_top_suggested_isValid = ::OpenAPI::fromJsonValue(m_margin_top_suggested, json[QString("marginTopSuggested")]);
    m_margin_top_suggested_isSet = !json[QString("marginTopSuggested")].isNull() && m_margin_top_suggested_isValid;

    m_size_suggestion_state_isValid = ::OpenAPI::fromJsonValue(m_size_suggestion_state, json[QString("sizeSuggestionState")]);
    m_size_suggestion_state_isSet = !json[QString("sizeSuggestionState")].isNull() && m_size_suggestion_state_isValid;

    m_title_suggested_isValid = ::OpenAPI::fromJsonValue(m_title_suggested, json[QString("titleSuggested")]);
    m_title_suggested_isSet = !json[QString("titleSuggested")].isNull() && m_title_suggested_isValid;
}

QString OAIEmbeddedObjectSuggestionState::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEmbeddedObjectSuggestionState::asJsonObject() const {
    QJsonObject obj;
    if (m_description_suggested_isSet) {
        obj.insert(QString("descriptionSuggested"), ::OpenAPI::toJsonValue(m_description_suggested));
    }
    if (m_embedded_drawing_properties_suggestion_state_isSet) {
        obj.insert(QString("embeddedDrawingPropertiesSuggestionState"), ::OpenAPI::toJsonValue(m_embedded_drawing_properties_suggestion_state));
    }
    if (m_embedded_object_border_suggestion_state.isSet()) {
        obj.insert(QString("embeddedObjectBorderSuggestionState"), ::OpenAPI::toJsonValue(m_embedded_object_border_suggestion_state));
    }
    if (m_image_properties_suggestion_state.isSet()) {
        obj.insert(QString("imagePropertiesSuggestionState"), ::OpenAPI::toJsonValue(m_image_properties_suggestion_state));
    }
    if (m_linked_content_reference_suggestion_state.isSet()) {
        obj.insert(QString("linkedContentReferenceSuggestionState"), ::OpenAPI::toJsonValue(m_linked_content_reference_suggestion_state));
    }
    if (m_margin_bottom_suggested_isSet) {
        obj.insert(QString("marginBottomSuggested"), ::OpenAPI::toJsonValue(m_margin_bottom_suggested));
    }
    if (m_margin_left_suggested_isSet) {
        obj.insert(QString("marginLeftSuggested"), ::OpenAPI::toJsonValue(m_margin_left_suggested));
    }
    if (m_margin_right_suggested_isSet) {
        obj.insert(QString("marginRightSuggested"), ::OpenAPI::toJsonValue(m_margin_right_suggested));
    }
    if (m_margin_top_suggested_isSet) {
        obj.insert(QString("marginTopSuggested"), ::OpenAPI::toJsonValue(m_margin_top_suggested));
    }
    if (m_size_suggestion_state.isSet()) {
        obj.insert(QString("sizeSuggestionState"), ::OpenAPI::toJsonValue(m_size_suggestion_state));
    }
    if (m_title_suggested_isSet) {
        obj.insert(QString("titleSuggested"), ::OpenAPI::toJsonValue(m_title_suggested));
    }
    return obj;
}

bool OAIEmbeddedObjectSuggestionState::isDescriptionSuggested() const {
    return m_description_suggested;
}
void OAIEmbeddedObjectSuggestionState::setDescriptionSuggested(const bool &description_suggested) {
    m_description_suggested = description_suggested;
    m_description_suggested_isSet = true;
}

bool OAIEmbeddedObjectSuggestionState::is_description_suggested_Set() const{
    return m_description_suggested_isSet;
}

bool OAIEmbeddedObjectSuggestionState::is_description_suggested_Valid() const{
    return m_description_suggested_isValid;
}

OAIObject OAIEmbeddedObjectSuggestionState::getEmbeddedDrawingPropertiesSuggestionState() const {
    return m_embedded_drawing_properties_suggestion_state;
}
void OAIEmbeddedObjectSuggestionState::setEmbeddedDrawingPropertiesSuggestionState(const OAIObject &embedded_drawing_properties_suggestion_state) {
    m_embedded_drawing_properties_suggestion_state = embedded_drawing_properties_suggestion_state;
    m_embedded_drawing_properties_suggestion_state_isSet = true;
}

bool OAIEmbeddedObjectSuggestionState::is_embedded_drawing_properties_suggestion_state_Set() const{
    return m_embedded_drawing_properties_suggestion_state_isSet;
}

bool OAIEmbeddedObjectSuggestionState::is_embedded_drawing_properties_suggestion_state_Valid() const{
    return m_embedded_drawing_properties_suggestion_state_isValid;
}

OAIEmbeddedObjectBorderSuggestionState OAIEmbeddedObjectSuggestionState::getEmbeddedObjectBorderSuggestionState() const {
    return m_embedded_object_border_suggestion_state;
}
void OAIEmbeddedObjectSuggestionState::setEmbeddedObjectBorderSuggestionState(const OAIEmbeddedObjectBorderSuggestionState &embedded_object_border_suggestion_state) {
    m_embedded_object_border_suggestion_state = embedded_object_border_suggestion_state;
    m_embedded_object_border_suggestion_state_isSet = true;
}

bool OAIEmbeddedObjectSuggestionState::is_embedded_object_border_suggestion_state_Set() const{
    return m_embedded_object_border_suggestion_state_isSet;
}

bool OAIEmbeddedObjectSuggestionState::is_embedded_object_border_suggestion_state_Valid() const{
    return m_embedded_object_border_suggestion_state_isValid;
}

OAIImagePropertiesSuggestionState OAIEmbeddedObjectSuggestionState::getImagePropertiesSuggestionState() const {
    return m_image_properties_suggestion_state;
}
void OAIEmbeddedObjectSuggestionState::setImagePropertiesSuggestionState(const OAIImagePropertiesSuggestionState &image_properties_suggestion_state) {
    m_image_properties_suggestion_state = image_properties_suggestion_state;
    m_image_properties_suggestion_state_isSet = true;
}

bool OAIEmbeddedObjectSuggestionState::is_image_properties_suggestion_state_Set() const{
    return m_image_properties_suggestion_state_isSet;
}

bool OAIEmbeddedObjectSuggestionState::is_image_properties_suggestion_state_Valid() const{
    return m_image_properties_suggestion_state_isValid;
}

OAILinkedContentReferenceSuggestionState OAIEmbeddedObjectSuggestionState::getLinkedContentReferenceSuggestionState() const {
    return m_linked_content_reference_suggestion_state;
}
void OAIEmbeddedObjectSuggestionState::setLinkedContentReferenceSuggestionState(const OAILinkedContentReferenceSuggestionState &linked_content_reference_suggestion_state) {
    m_linked_content_reference_suggestion_state = linked_content_reference_suggestion_state;
    m_linked_content_reference_suggestion_state_isSet = true;
}

bool OAIEmbeddedObjectSuggestionState::is_linked_content_reference_suggestion_state_Set() const{
    return m_linked_content_reference_suggestion_state_isSet;
}

bool OAIEmbeddedObjectSuggestionState::is_linked_content_reference_suggestion_state_Valid() const{
    return m_linked_content_reference_suggestion_state_isValid;
}

bool OAIEmbeddedObjectSuggestionState::isMarginBottomSuggested() const {
    return m_margin_bottom_suggested;
}
void OAIEmbeddedObjectSuggestionState::setMarginBottomSuggested(const bool &margin_bottom_suggested) {
    m_margin_bottom_suggested = margin_bottom_suggested;
    m_margin_bottom_suggested_isSet = true;
}

bool OAIEmbeddedObjectSuggestionState::is_margin_bottom_suggested_Set() const{
    return m_margin_bottom_suggested_isSet;
}

bool OAIEmbeddedObjectSuggestionState::is_margin_bottom_suggested_Valid() const{
    return m_margin_bottom_suggested_isValid;
}

bool OAIEmbeddedObjectSuggestionState::isMarginLeftSuggested() const {
    return m_margin_left_suggested;
}
void OAIEmbeddedObjectSuggestionState::setMarginLeftSuggested(const bool &margin_left_suggested) {
    m_margin_left_suggested = margin_left_suggested;
    m_margin_left_suggested_isSet = true;
}

bool OAIEmbeddedObjectSuggestionState::is_margin_left_suggested_Set() const{
    return m_margin_left_suggested_isSet;
}

bool OAIEmbeddedObjectSuggestionState::is_margin_left_suggested_Valid() const{
    return m_margin_left_suggested_isValid;
}

bool OAIEmbeddedObjectSuggestionState::isMarginRightSuggested() const {
    return m_margin_right_suggested;
}
void OAIEmbeddedObjectSuggestionState::setMarginRightSuggested(const bool &margin_right_suggested) {
    m_margin_right_suggested = margin_right_suggested;
    m_margin_right_suggested_isSet = true;
}

bool OAIEmbeddedObjectSuggestionState::is_margin_right_suggested_Set() const{
    return m_margin_right_suggested_isSet;
}

bool OAIEmbeddedObjectSuggestionState::is_margin_right_suggested_Valid() const{
    return m_margin_right_suggested_isValid;
}

bool OAIEmbeddedObjectSuggestionState::isMarginTopSuggested() const {
    return m_margin_top_suggested;
}
void OAIEmbeddedObjectSuggestionState::setMarginTopSuggested(const bool &margin_top_suggested) {
    m_margin_top_suggested = margin_top_suggested;
    m_margin_top_suggested_isSet = true;
}

bool OAIEmbeddedObjectSuggestionState::is_margin_top_suggested_Set() const{
    return m_margin_top_suggested_isSet;
}

bool OAIEmbeddedObjectSuggestionState::is_margin_top_suggested_Valid() const{
    return m_margin_top_suggested_isValid;
}

OAISizeSuggestionState OAIEmbeddedObjectSuggestionState::getSizeSuggestionState() const {
    return m_size_suggestion_state;
}
void OAIEmbeddedObjectSuggestionState::setSizeSuggestionState(const OAISizeSuggestionState &size_suggestion_state) {
    m_size_suggestion_state = size_suggestion_state;
    m_size_suggestion_state_isSet = true;
}

bool OAIEmbeddedObjectSuggestionState::is_size_suggestion_state_Set() const{
    return m_size_suggestion_state_isSet;
}

bool OAIEmbeddedObjectSuggestionState::is_size_suggestion_state_Valid() const{
    return m_size_suggestion_state_isValid;
}

bool OAIEmbeddedObjectSuggestionState::isTitleSuggested() const {
    return m_title_suggested;
}
void OAIEmbeddedObjectSuggestionState::setTitleSuggested(const bool &title_suggested) {
    m_title_suggested = title_suggested;
    m_title_suggested_isSet = true;
}

bool OAIEmbeddedObjectSuggestionState::is_title_suggested_Set() const{
    return m_title_suggested_isSet;
}

bool OAIEmbeddedObjectSuggestionState::is_title_suggested_Valid() const{
    return m_title_suggested_isValid;
}

bool OAIEmbeddedObjectSuggestionState::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_suggested_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_embedded_drawing_properties_suggestion_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_embedded_object_border_suggestion_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_properties_suggestion_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_linked_content_reference_suggestion_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_margin_bottom_suggested_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_margin_left_suggested_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_margin_right_suggested_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_margin_top_suggested_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_suggestion_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_suggested_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEmbeddedObjectSuggestionState::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
