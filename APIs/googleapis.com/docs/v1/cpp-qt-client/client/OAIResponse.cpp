/**
 * Google Docs API
 * Reads and writes Google Docs documents.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResponse::OAIResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResponse::OAIResponse() {
    this->initializeModel();
}

OAIResponse::~OAIResponse() {}

void OAIResponse::initializeModel() {

    m_create_footer_isSet = false;
    m_create_footer_isValid = false;

    m_create_footnote_isSet = false;
    m_create_footnote_isValid = false;

    m_create_header_isSet = false;
    m_create_header_isValid = false;

    m_create_named_range_isSet = false;
    m_create_named_range_isValid = false;

    m_insert_inline_image_isSet = false;
    m_insert_inline_image_isValid = false;

    m_insert_inline_sheets_chart_isSet = false;
    m_insert_inline_sheets_chart_isValid = false;

    m_replace_all_text_isSet = false;
    m_replace_all_text_isValid = false;
}

void OAIResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIResponse::fromJsonObject(QJsonObject json) {

    m_create_footer_isValid = ::OpenAPI::fromJsonValue(m_create_footer, json[QString("createFooter")]);
    m_create_footer_isSet = !json[QString("createFooter")].isNull() && m_create_footer_isValid;

    m_create_footnote_isValid = ::OpenAPI::fromJsonValue(m_create_footnote, json[QString("createFootnote")]);
    m_create_footnote_isSet = !json[QString("createFootnote")].isNull() && m_create_footnote_isValid;

    m_create_header_isValid = ::OpenAPI::fromJsonValue(m_create_header, json[QString("createHeader")]);
    m_create_header_isSet = !json[QString("createHeader")].isNull() && m_create_header_isValid;

    m_create_named_range_isValid = ::OpenAPI::fromJsonValue(m_create_named_range, json[QString("createNamedRange")]);
    m_create_named_range_isSet = !json[QString("createNamedRange")].isNull() && m_create_named_range_isValid;

    m_insert_inline_image_isValid = ::OpenAPI::fromJsonValue(m_insert_inline_image, json[QString("insertInlineImage")]);
    m_insert_inline_image_isSet = !json[QString("insertInlineImage")].isNull() && m_insert_inline_image_isValid;

    m_insert_inline_sheets_chart_isValid = ::OpenAPI::fromJsonValue(m_insert_inline_sheets_chart, json[QString("insertInlineSheetsChart")]);
    m_insert_inline_sheets_chart_isSet = !json[QString("insertInlineSheetsChart")].isNull() && m_insert_inline_sheets_chart_isValid;

    m_replace_all_text_isValid = ::OpenAPI::fromJsonValue(m_replace_all_text, json[QString("replaceAllText")]);
    m_replace_all_text_isSet = !json[QString("replaceAllText")].isNull() && m_replace_all_text_isValid;
}

QString OAIResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_create_footer.isSet()) {
        obj.insert(QString("createFooter"), ::OpenAPI::toJsonValue(m_create_footer));
    }
    if (m_create_footnote.isSet()) {
        obj.insert(QString("createFootnote"), ::OpenAPI::toJsonValue(m_create_footnote));
    }
    if (m_create_header.isSet()) {
        obj.insert(QString("createHeader"), ::OpenAPI::toJsonValue(m_create_header));
    }
    if (m_create_named_range.isSet()) {
        obj.insert(QString("createNamedRange"), ::OpenAPI::toJsonValue(m_create_named_range));
    }
    if (m_insert_inline_image.isSet()) {
        obj.insert(QString("insertInlineImage"), ::OpenAPI::toJsonValue(m_insert_inline_image));
    }
    if (m_insert_inline_sheets_chart.isSet()) {
        obj.insert(QString("insertInlineSheetsChart"), ::OpenAPI::toJsonValue(m_insert_inline_sheets_chart));
    }
    if (m_replace_all_text.isSet()) {
        obj.insert(QString("replaceAllText"), ::OpenAPI::toJsonValue(m_replace_all_text));
    }
    return obj;
}

OAICreateFooterResponse OAIResponse::getCreateFooter() const {
    return m_create_footer;
}
void OAIResponse::setCreateFooter(const OAICreateFooterResponse &create_footer) {
    m_create_footer = create_footer;
    m_create_footer_isSet = true;
}

bool OAIResponse::is_create_footer_Set() const{
    return m_create_footer_isSet;
}

bool OAIResponse::is_create_footer_Valid() const{
    return m_create_footer_isValid;
}

OAICreateFootnoteResponse OAIResponse::getCreateFootnote() const {
    return m_create_footnote;
}
void OAIResponse::setCreateFootnote(const OAICreateFootnoteResponse &create_footnote) {
    m_create_footnote = create_footnote;
    m_create_footnote_isSet = true;
}

bool OAIResponse::is_create_footnote_Set() const{
    return m_create_footnote_isSet;
}

bool OAIResponse::is_create_footnote_Valid() const{
    return m_create_footnote_isValid;
}

OAICreateHeaderResponse OAIResponse::getCreateHeader() const {
    return m_create_header;
}
void OAIResponse::setCreateHeader(const OAICreateHeaderResponse &create_header) {
    m_create_header = create_header;
    m_create_header_isSet = true;
}

bool OAIResponse::is_create_header_Set() const{
    return m_create_header_isSet;
}

bool OAIResponse::is_create_header_Valid() const{
    return m_create_header_isValid;
}

OAICreateNamedRangeResponse OAIResponse::getCreateNamedRange() const {
    return m_create_named_range;
}
void OAIResponse::setCreateNamedRange(const OAICreateNamedRangeResponse &create_named_range) {
    m_create_named_range = create_named_range;
    m_create_named_range_isSet = true;
}

bool OAIResponse::is_create_named_range_Set() const{
    return m_create_named_range_isSet;
}

bool OAIResponse::is_create_named_range_Valid() const{
    return m_create_named_range_isValid;
}

OAIInsertInlineImageResponse OAIResponse::getInsertInlineImage() const {
    return m_insert_inline_image;
}
void OAIResponse::setInsertInlineImage(const OAIInsertInlineImageResponse &insert_inline_image) {
    m_insert_inline_image = insert_inline_image;
    m_insert_inline_image_isSet = true;
}

bool OAIResponse::is_insert_inline_image_Set() const{
    return m_insert_inline_image_isSet;
}

bool OAIResponse::is_insert_inline_image_Valid() const{
    return m_insert_inline_image_isValid;
}

OAIInsertInlineSheetsChartResponse OAIResponse::getInsertInlineSheetsChart() const {
    return m_insert_inline_sheets_chart;
}
void OAIResponse::setInsertInlineSheetsChart(const OAIInsertInlineSheetsChartResponse &insert_inline_sheets_chart) {
    m_insert_inline_sheets_chart = insert_inline_sheets_chart;
    m_insert_inline_sheets_chart_isSet = true;
}

bool OAIResponse::is_insert_inline_sheets_chart_Set() const{
    return m_insert_inline_sheets_chart_isSet;
}

bool OAIResponse::is_insert_inline_sheets_chart_Valid() const{
    return m_insert_inline_sheets_chart_isValid;
}

OAIReplaceAllTextResponse OAIResponse::getReplaceAllText() const {
    return m_replace_all_text;
}
void OAIResponse::setReplaceAllText(const OAIReplaceAllTextResponse &replace_all_text) {
    m_replace_all_text = replace_all_text;
    m_replace_all_text_isSet = true;
}

bool OAIResponse::is_replace_all_text_Set() const{
    return m_replace_all_text_isSet;
}

bool OAIResponse::is_replace_all_text_Valid() const{
    return m_replace_all_text_isValid;
}

bool OAIResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_create_footer.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_footnote.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_header.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_named_range.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_insert_inline_image.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_insert_inline_sheets_chart.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_replace_all_text.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
