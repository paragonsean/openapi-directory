/**
 * Google Docs API
 * Reads and writes Google Docs documents.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInsertTextRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInsertTextRequest::OAIInsertTextRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInsertTextRequest::OAIInsertTextRequest() {
    this->initializeModel();
}

OAIInsertTextRequest::~OAIInsertTextRequest() {}

void OAIInsertTextRequest::initializeModel() {

    m_end_of_segment_location_isSet = false;
    m_end_of_segment_location_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;
}

void OAIInsertTextRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInsertTextRequest::fromJsonObject(QJsonObject json) {

    m_end_of_segment_location_isValid = ::OpenAPI::fromJsonValue(m_end_of_segment_location, json[QString("endOfSegmentLocation")]);
    m_end_of_segment_location_isSet = !json[QString("endOfSegmentLocation")].isNull() && m_end_of_segment_location_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("text")]);
    m_text_isSet = !json[QString("text")].isNull() && m_text_isValid;
}

QString OAIInsertTextRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInsertTextRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_end_of_segment_location.isSet()) {
        obj.insert(QString("endOfSegmentLocation"), ::OpenAPI::toJsonValue(m_end_of_segment_location));
    }
    if (m_location.isSet()) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_text_isSet) {
        obj.insert(QString("text"), ::OpenAPI::toJsonValue(m_text));
    }
    return obj;
}

OAIEndOfSegmentLocation OAIInsertTextRequest::getEndOfSegmentLocation() const {
    return m_end_of_segment_location;
}
void OAIInsertTextRequest::setEndOfSegmentLocation(const OAIEndOfSegmentLocation &end_of_segment_location) {
    m_end_of_segment_location = end_of_segment_location;
    m_end_of_segment_location_isSet = true;
}

bool OAIInsertTextRequest::is_end_of_segment_location_Set() const{
    return m_end_of_segment_location_isSet;
}

bool OAIInsertTextRequest::is_end_of_segment_location_Valid() const{
    return m_end_of_segment_location_isValid;
}

OAILocation OAIInsertTextRequest::getLocation() const {
    return m_location;
}
void OAIInsertTextRequest::setLocation(const OAILocation &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIInsertTextRequest::is_location_Set() const{
    return m_location_isSet;
}

bool OAIInsertTextRequest::is_location_Valid() const{
    return m_location_isValid;
}

QString OAIInsertTextRequest::getText() const {
    return m_text;
}
void OAIInsertTextRequest::setText(const QString &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAIInsertTextRequest::is_text_Set() const{
    return m_text_isSet;
}

bool OAIInsertTextRequest::is_text_Valid() const{
    return m_text_isValid;
}

bool OAIInsertTextRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_end_of_segment_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInsertTextRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
