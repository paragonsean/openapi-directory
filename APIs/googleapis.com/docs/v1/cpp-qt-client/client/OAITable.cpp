/**
 * Google Docs API
 * Reads and writes Google Docs documents.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITable.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITable::OAITable(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITable::OAITable() {
    this->initializeModel();
}

OAITable::~OAITable() {}

void OAITable::initializeModel() {

    m_columns_isSet = false;
    m_columns_isValid = false;

    m_rows_isSet = false;
    m_rows_isValid = false;

    m_suggested_deletion_ids_isSet = false;
    m_suggested_deletion_ids_isValid = false;

    m_suggested_insertion_ids_isSet = false;
    m_suggested_insertion_ids_isValid = false;

    m_table_rows_isSet = false;
    m_table_rows_isValid = false;

    m_table_style_isSet = false;
    m_table_style_isValid = false;
}

void OAITable::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITable::fromJsonObject(QJsonObject json) {

    m_columns_isValid = ::OpenAPI::fromJsonValue(m_columns, json[QString("columns")]);
    m_columns_isSet = !json[QString("columns")].isNull() && m_columns_isValid;

    m_rows_isValid = ::OpenAPI::fromJsonValue(m_rows, json[QString("rows")]);
    m_rows_isSet = !json[QString("rows")].isNull() && m_rows_isValid;

    m_suggested_deletion_ids_isValid = ::OpenAPI::fromJsonValue(m_suggested_deletion_ids, json[QString("suggestedDeletionIds")]);
    m_suggested_deletion_ids_isSet = !json[QString("suggestedDeletionIds")].isNull() && m_suggested_deletion_ids_isValid;

    m_suggested_insertion_ids_isValid = ::OpenAPI::fromJsonValue(m_suggested_insertion_ids, json[QString("suggestedInsertionIds")]);
    m_suggested_insertion_ids_isSet = !json[QString("suggestedInsertionIds")].isNull() && m_suggested_insertion_ids_isValid;

    m_table_rows_isValid = ::OpenAPI::fromJsonValue(m_table_rows, json[QString("tableRows")]);
    m_table_rows_isSet = !json[QString("tableRows")].isNull() && m_table_rows_isValid;

    m_table_style_isValid = ::OpenAPI::fromJsonValue(m_table_style, json[QString("tableStyle")]);
    m_table_style_isSet = !json[QString("tableStyle")].isNull() && m_table_style_isValid;
}

QString OAITable::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITable::asJsonObject() const {
    QJsonObject obj;
    if (m_columns_isSet) {
        obj.insert(QString("columns"), ::OpenAPI::toJsonValue(m_columns));
    }
    if (m_rows_isSet) {
        obj.insert(QString("rows"), ::OpenAPI::toJsonValue(m_rows));
    }
    if (m_suggested_deletion_ids.size() > 0) {
        obj.insert(QString("suggestedDeletionIds"), ::OpenAPI::toJsonValue(m_suggested_deletion_ids));
    }
    if (m_suggested_insertion_ids.size() > 0) {
        obj.insert(QString("suggestedInsertionIds"), ::OpenAPI::toJsonValue(m_suggested_insertion_ids));
    }
    if (m_table_rows.size() > 0) {
        obj.insert(QString("tableRows"), ::OpenAPI::toJsonValue(m_table_rows));
    }
    if (m_table_style.isSet()) {
        obj.insert(QString("tableStyle"), ::OpenAPI::toJsonValue(m_table_style));
    }
    return obj;
}

qint32 OAITable::getColumns() const {
    return m_columns;
}
void OAITable::setColumns(const qint32 &columns) {
    m_columns = columns;
    m_columns_isSet = true;
}

bool OAITable::is_columns_Set() const{
    return m_columns_isSet;
}

bool OAITable::is_columns_Valid() const{
    return m_columns_isValid;
}

qint32 OAITable::getRows() const {
    return m_rows;
}
void OAITable::setRows(const qint32 &rows) {
    m_rows = rows;
    m_rows_isSet = true;
}

bool OAITable::is_rows_Set() const{
    return m_rows_isSet;
}

bool OAITable::is_rows_Valid() const{
    return m_rows_isValid;
}

QList<QString> OAITable::getSuggestedDeletionIds() const {
    return m_suggested_deletion_ids;
}
void OAITable::setSuggestedDeletionIds(const QList<QString> &suggested_deletion_ids) {
    m_suggested_deletion_ids = suggested_deletion_ids;
    m_suggested_deletion_ids_isSet = true;
}

bool OAITable::is_suggested_deletion_ids_Set() const{
    return m_suggested_deletion_ids_isSet;
}

bool OAITable::is_suggested_deletion_ids_Valid() const{
    return m_suggested_deletion_ids_isValid;
}

QList<QString> OAITable::getSuggestedInsertionIds() const {
    return m_suggested_insertion_ids;
}
void OAITable::setSuggestedInsertionIds(const QList<QString> &suggested_insertion_ids) {
    m_suggested_insertion_ids = suggested_insertion_ids;
    m_suggested_insertion_ids_isSet = true;
}

bool OAITable::is_suggested_insertion_ids_Set() const{
    return m_suggested_insertion_ids_isSet;
}

bool OAITable::is_suggested_insertion_ids_Valid() const{
    return m_suggested_insertion_ids_isValid;
}

QList<OAITableRow> OAITable::getTableRows() const {
    return m_table_rows;
}
void OAITable::setTableRows(const QList<OAITableRow> &table_rows) {
    m_table_rows = table_rows;
    m_table_rows_isSet = true;
}

bool OAITable::is_table_rows_Set() const{
    return m_table_rows_isSet;
}

bool OAITable::is_table_rows_Valid() const{
    return m_table_rows_isValid;
}

OAITableStyle OAITable::getTableStyle() const {
    return m_table_style;
}
void OAITable::setTableStyle(const OAITableStyle &table_style) {
    m_table_style = table_style;
    m_table_style_isSet = true;
}

bool OAITable::is_table_style_Set() const{
    return m_table_style_isSet;
}

bool OAITable::is_table_style_Valid() const{
    return m_table_style_isValid;
}

bool OAITable::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_columns_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rows_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_suggested_deletion_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_suggested_insertion_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_table_rows.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_table_style.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITable::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
