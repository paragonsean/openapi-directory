/**
 * Google Docs API
 * Reads and writes Google Docs documents.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRichLink.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRichLink::OAIRichLink(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRichLink::OAIRichLink() {
    this->initializeModel();
}

OAIRichLink::~OAIRichLink() {}

void OAIRichLink::initializeModel() {

    m_rich_link_id_isSet = false;
    m_rich_link_id_isValid = false;

    m_rich_link_properties_isSet = false;
    m_rich_link_properties_isValid = false;

    m_suggested_deletion_ids_isSet = false;
    m_suggested_deletion_ids_isValid = false;

    m_suggested_insertion_ids_isSet = false;
    m_suggested_insertion_ids_isValid = false;

    m_suggested_text_style_changes_isSet = false;
    m_suggested_text_style_changes_isValid = false;

    m_text_style_isSet = false;
    m_text_style_isValid = false;
}

void OAIRichLink::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRichLink::fromJsonObject(QJsonObject json) {

    m_rich_link_id_isValid = ::OpenAPI::fromJsonValue(m_rich_link_id, json[QString("richLinkId")]);
    m_rich_link_id_isSet = !json[QString("richLinkId")].isNull() && m_rich_link_id_isValid;

    m_rich_link_properties_isValid = ::OpenAPI::fromJsonValue(m_rich_link_properties, json[QString("richLinkProperties")]);
    m_rich_link_properties_isSet = !json[QString("richLinkProperties")].isNull() && m_rich_link_properties_isValid;

    m_suggested_deletion_ids_isValid = ::OpenAPI::fromJsonValue(m_suggested_deletion_ids, json[QString("suggestedDeletionIds")]);
    m_suggested_deletion_ids_isSet = !json[QString("suggestedDeletionIds")].isNull() && m_suggested_deletion_ids_isValid;

    m_suggested_insertion_ids_isValid = ::OpenAPI::fromJsonValue(m_suggested_insertion_ids, json[QString("suggestedInsertionIds")]);
    m_suggested_insertion_ids_isSet = !json[QString("suggestedInsertionIds")].isNull() && m_suggested_insertion_ids_isValid;

    m_suggested_text_style_changes_isValid = ::OpenAPI::fromJsonValue(m_suggested_text_style_changes, json[QString("suggestedTextStyleChanges")]);
    m_suggested_text_style_changes_isSet = !json[QString("suggestedTextStyleChanges")].isNull() && m_suggested_text_style_changes_isValid;

    m_text_style_isValid = ::OpenAPI::fromJsonValue(m_text_style, json[QString("textStyle")]);
    m_text_style_isSet = !json[QString("textStyle")].isNull() && m_text_style_isValid;
}

QString OAIRichLink::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRichLink::asJsonObject() const {
    QJsonObject obj;
    if (m_rich_link_id_isSet) {
        obj.insert(QString("richLinkId"), ::OpenAPI::toJsonValue(m_rich_link_id));
    }
    if (m_rich_link_properties.isSet()) {
        obj.insert(QString("richLinkProperties"), ::OpenAPI::toJsonValue(m_rich_link_properties));
    }
    if (m_suggested_deletion_ids.size() > 0) {
        obj.insert(QString("suggestedDeletionIds"), ::OpenAPI::toJsonValue(m_suggested_deletion_ids));
    }
    if (m_suggested_insertion_ids.size() > 0) {
        obj.insert(QString("suggestedInsertionIds"), ::OpenAPI::toJsonValue(m_suggested_insertion_ids));
    }
    if (m_suggested_text_style_changes.size() > 0) {
        obj.insert(QString("suggestedTextStyleChanges"), ::OpenAPI::toJsonValue(m_suggested_text_style_changes));
    }
    if (m_text_style.isSet()) {
        obj.insert(QString("textStyle"), ::OpenAPI::toJsonValue(m_text_style));
    }
    return obj;
}

QString OAIRichLink::getRichLinkId() const {
    return m_rich_link_id;
}
void OAIRichLink::setRichLinkId(const QString &rich_link_id) {
    m_rich_link_id = rich_link_id;
    m_rich_link_id_isSet = true;
}

bool OAIRichLink::is_rich_link_id_Set() const{
    return m_rich_link_id_isSet;
}

bool OAIRichLink::is_rich_link_id_Valid() const{
    return m_rich_link_id_isValid;
}

OAIRichLinkProperties OAIRichLink::getRichLinkProperties() const {
    return m_rich_link_properties;
}
void OAIRichLink::setRichLinkProperties(const OAIRichLinkProperties &rich_link_properties) {
    m_rich_link_properties = rich_link_properties;
    m_rich_link_properties_isSet = true;
}

bool OAIRichLink::is_rich_link_properties_Set() const{
    return m_rich_link_properties_isSet;
}

bool OAIRichLink::is_rich_link_properties_Valid() const{
    return m_rich_link_properties_isValid;
}

QList<QString> OAIRichLink::getSuggestedDeletionIds() const {
    return m_suggested_deletion_ids;
}
void OAIRichLink::setSuggestedDeletionIds(const QList<QString> &suggested_deletion_ids) {
    m_suggested_deletion_ids = suggested_deletion_ids;
    m_suggested_deletion_ids_isSet = true;
}

bool OAIRichLink::is_suggested_deletion_ids_Set() const{
    return m_suggested_deletion_ids_isSet;
}

bool OAIRichLink::is_suggested_deletion_ids_Valid() const{
    return m_suggested_deletion_ids_isValid;
}

QList<QString> OAIRichLink::getSuggestedInsertionIds() const {
    return m_suggested_insertion_ids;
}
void OAIRichLink::setSuggestedInsertionIds(const QList<QString> &suggested_insertion_ids) {
    m_suggested_insertion_ids = suggested_insertion_ids;
    m_suggested_insertion_ids_isSet = true;
}

bool OAIRichLink::is_suggested_insertion_ids_Set() const{
    return m_suggested_insertion_ids_isSet;
}

bool OAIRichLink::is_suggested_insertion_ids_Valid() const{
    return m_suggested_insertion_ids_isValid;
}

QMap<QString, OAISuggestedTextStyle> OAIRichLink::getSuggestedTextStyleChanges() const {
    return m_suggested_text_style_changes;
}
void OAIRichLink::setSuggestedTextStyleChanges(const QMap<QString, OAISuggestedTextStyle> &suggested_text_style_changes) {
    m_suggested_text_style_changes = suggested_text_style_changes;
    m_suggested_text_style_changes_isSet = true;
}

bool OAIRichLink::is_suggested_text_style_changes_Set() const{
    return m_suggested_text_style_changes_isSet;
}

bool OAIRichLink::is_suggested_text_style_changes_Valid() const{
    return m_suggested_text_style_changes_isValid;
}

OAITextStyle OAIRichLink::getTextStyle() const {
    return m_text_style;
}
void OAIRichLink::setTextStyle(const OAITextStyle &text_style) {
    m_text_style = text_style;
    m_text_style_isSet = true;
}

bool OAIRichLink::is_text_style_Set() const{
    return m_text_style_isSet;
}

bool OAIRichLink::is_text_style_Valid() const{
    return m_text_style_isValid;
}

bool OAIRichLink::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_rich_link_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rich_link_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_suggested_deletion_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_suggested_insertion_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_suggested_text_style_changes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_style.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRichLink::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
