/**
 * Google Docs API
 * Reads and writes Google Docs documents.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPositionedObjectProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPositionedObjectProperties::OAIPositionedObjectProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPositionedObjectProperties::OAIPositionedObjectProperties() {
    this->initializeModel();
}

OAIPositionedObjectProperties::~OAIPositionedObjectProperties() {}

void OAIPositionedObjectProperties::initializeModel() {

    m_embedded_object_isSet = false;
    m_embedded_object_isValid = false;

    m_positioning_isSet = false;
    m_positioning_isValid = false;
}

void OAIPositionedObjectProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPositionedObjectProperties::fromJsonObject(QJsonObject json) {

    m_embedded_object_isValid = ::OpenAPI::fromJsonValue(m_embedded_object, json[QString("embeddedObject")]);
    m_embedded_object_isSet = !json[QString("embeddedObject")].isNull() && m_embedded_object_isValid;

    m_positioning_isValid = ::OpenAPI::fromJsonValue(m_positioning, json[QString("positioning")]);
    m_positioning_isSet = !json[QString("positioning")].isNull() && m_positioning_isValid;
}

QString OAIPositionedObjectProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPositionedObjectProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_embedded_object.isSet()) {
        obj.insert(QString("embeddedObject"), ::OpenAPI::toJsonValue(m_embedded_object));
    }
    if (m_positioning.isSet()) {
        obj.insert(QString("positioning"), ::OpenAPI::toJsonValue(m_positioning));
    }
    return obj;
}

OAIEmbeddedObject OAIPositionedObjectProperties::getEmbeddedObject() const {
    return m_embedded_object;
}
void OAIPositionedObjectProperties::setEmbeddedObject(const OAIEmbeddedObject &embedded_object) {
    m_embedded_object = embedded_object;
    m_embedded_object_isSet = true;
}

bool OAIPositionedObjectProperties::is_embedded_object_Set() const{
    return m_embedded_object_isSet;
}

bool OAIPositionedObjectProperties::is_embedded_object_Valid() const{
    return m_embedded_object_isValid;
}

OAIPositionedObjectPositioning OAIPositionedObjectProperties::getPositioning() const {
    return m_positioning;
}
void OAIPositionedObjectProperties::setPositioning(const OAIPositionedObjectPositioning &positioning) {
    m_positioning = positioning;
    m_positioning_isSet = true;
}

bool OAIPositionedObjectProperties::is_positioning_Set() const{
    return m_positioning_isSet;
}

bool OAIPositionedObjectProperties::is_positioning_Valid() const{
    return m_positioning_isValid;
}

bool OAIPositionedObjectProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_embedded_object.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_positioning.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPositionedObjectProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
