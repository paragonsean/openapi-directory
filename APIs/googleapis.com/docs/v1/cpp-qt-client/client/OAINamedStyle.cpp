/**
 * Google Docs API
 * Reads and writes Google Docs documents.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINamedStyle.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINamedStyle::OAINamedStyle(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINamedStyle::OAINamedStyle() {
    this->initializeModel();
}

OAINamedStyle::~OAINamedStyle() {}

void OAINamedStyle::initializeModel() {

    m_named_style_type_isSet = false;
    m_named_style_type_isValid = false;

    m_paragraph_style_isSet = false;
    m_paragraph_style_isValid = false;

    m_text_style_isSet = false;
    m_text_style_isValid = false;
}

void OAINamedStyle::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINamedStyle::fromJsonObject(QJsonObject json) {

    m_named_style_type_isValid = ::OpenAPI::fromJsonValue(m_named_style_type, json[QString("namedStyleType")]);
    m_named_style_type_isSet = !json[QString("namedStyleType")].isNull() && m_named_style_type_isValid;

    m_paragraph_style_isValid = ::OpenAPI::fromJsonValue(m_paragraph_style, json[QString("paragraphStyle")]);
    m_paragraph_style_isSet = !json[QString("paragraphStyle")].isNull() && m_paragraph_style_isValid;

    m_text_style_isValid = ::OpenAPI::fromJsonValue(m_text_style, json[QString("textStyle")]);
    m_text_style_isSet = !json[QString("textStyle")].isNull() && m_text_style_isValid;
}

QString OAINamedStyle::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINamedStyle::asJsonObject() const {
    QJsonObject obj;
    if (m_named_style_type_isSet) {
        obj.insert(QString("namedStyleType"), ::OpenAPI::toJsonValue(m_named_style_type));
    }
    if (m_paragraph_style.isSet()) {
        obj.insert(QString("paragraphStyle"), ::OpenAPI::toJsonValue(m_paragraph_style));
    }
    if (m_text_style.isSet()) {
        obj.insert(QString("textStyle"), ::OpenAPI::toJsonValue(m_text_style));
    }
    return obj;
}

QString OAINamedStyle::getNamedStyleType() const {
    return m_named_style_type;
}
void OAINamedStyle::setNamedStyleType(const QString &named_style_type) {
    m_named_style_type = named_style_type;
    m_named_style_type_isSet = true;
}

bool OAINamedStyle::is_named_style_type_Set() const{
    return m_named_style_type_isSet;
}

bool OAINamedStyle::is_named_style_type_Valid() const{
    return m_named_style_type_isValid;
}

OAIParagraphStyle OAINamedStyle::getParagraphStyle() const {
    return m_paragraph_style;
}
void OAINamedStyle::setParagraphStyle(const OAIParagraphStyle &paragraph_style) {
    m_paragraph_style = paragraph_style;
    m_paragraph_style_isSet = true;
}

bool OAINamedStyle::is_paragraph_style_Set() const{
    return m_paragraph_style_isSet;
}

bool OAINamedStyle::is_paragraph_style_Valid() const{
    return m_paragraph_style_isValid;
}

OAITextStyle OAINamedStyle::getTextStyle() const {
    return m_text_style;
}
void OAINamedStyle::setTextStyle(const OAITextStyle &text_style) {
    m_text_style = text_style;
    m_text_style_isSet = true;
}

bool OAINamedStyle::is_text_style_Set() const{
    return m_text_style_isSet;
}

bool OAINamedStyle::is_text_style_Valid() const{
    return m_text_style_isValid;
}

bool OAINamedStyle::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_named_style_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_paragraph_style.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_style.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINamedStyle::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
