/**
 * Google Docs API
 * Reads and writes Google Docs documents.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInsertSectionBreakRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInsertSectionBreakRequest::OAIInsertSectionBreakRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInsertSectionBreakRequest::OAIInsertSectionBreakRequest() {
    this->initializeModel();
}

OAIInsertSectionBreakRequest::~OAIInsertSectionBreakRequest() {}

void OAIInsertSectionBreakRequest::initializeModel() {

    m_end_of_segment_location_isSet = false;
    m_end_of_segment_location_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_section_type_isSet = false;
    m_section_type_isValid = false;
}

void OAIInsertSectionBreakRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInsertSectionBreakRequest::fromJsonObject(QJsonObject json) {

    m_end_of_segment_location_isValid = ::OpenAPI::fromJsonValue(m_end_of_segment_location, json[QString("endOfSegmentLocation")]);
    m_end_of_segment_location_isSet = !json[QString("endOfSegmentLocation")].isNull() && m_end_of_segment_location_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_section_type_isValid = ::OpenAPI::fromJsonValue(m_section_type, json[QString("sectionType")]);
    m_section_type_isSet = !json[QString("sectionType")].isNull() && m_section_type_isValid;
}

QString OAIInsertSectionBreakRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInsertSectionBreakRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_end_of_segment_location.isSet()) {
        obj.insert(QString("endOfSegmentLocation"), ::OpenAPI::toJsonValue(m_end_of_segment_location));
    }
    if (m_location.isSet()) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_section_type_isSet) {
        obj.insert(QString("sectionType"), ::OpenAPI::toJsonValue(m_section_type));
    }
    return obj;
}

OAIEndOfSegmentLocation OAIInsertSectionBreakRequest::getEndOfSegmentLocation() const {
    return m_end_of_segment_location;
}
void OAIInsertSectionBreakRequest::setEndOfSegmentLocation(const OAIEndOfSegmentLocation &end_of_segment_location) {
    m_end_of_segment_location = end_of_segment_location;
    m_end_of_segment_location_isSet = true;
}

bool OAIInsertSectionBreakRequest::is_end_of_segment_location_Set() const{
    return m_end_of_segment_location_isSet;
}

bool OAIInsertSectionBreakRequest::is_end_of_segment_location_Valid() const{
    return m_end_of_segment_location_isValid;
}

OAILocation OAIInsertSectionBreakRequest::getLocation() const {
    return m_location;
}
void OAIInsertSectionBreakRequest::setLocation(const OAILocation &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIInsertSectionBreakRequest::is_location_Set() const{
    return m_location_isSet;
}

bool OAIInsertSectionBreakRequest::is_location_Valid() const{
    return m_location_isValid;
}

QString OAIInsertSectionBreakRequest::getSectionType() const {
    return m_section_type;
}
void OAIInsertSectionBreakRequest::setSectionType(const QString &section_type) {
    m_section_type = section_type;
    m_section_type_isSet = true;
}

bool OAIInsertSectionBreakRequest::is_section_type_Set() const{
    return m_section_type_isSet;
}

bool OAIInsertSectionBreakRequest::is_section_type_Valid() const{
    return m_section_type_isValid;
}

bool OAIInsertSectionBreakRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_end_of_segment_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_section_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInsertSectionBreakRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
