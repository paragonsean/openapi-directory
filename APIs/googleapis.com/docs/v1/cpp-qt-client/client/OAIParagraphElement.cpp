/**
 * Google Docs API
 * Reads and writes Google Docs documents.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIParagraphElement.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIParagraphElement::OAIParagraphElement(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIParagraphElement::OAIParagraphElement() {
    this->initializeModel();
}

OAIParagraphElement::~OAIParagraphElement() {}

void OAIParagraphElement::initializeModel() {

    m_auto_text_isSet = false;
    m_auto_text_isValid = false;

    m_column_break_isSet = false;
    m_column_break_isValid = false;

    m_end_index_isSet = false;
    m_end_index_isValid = false;

    m_equation_isSet = false;
    m_equation_isValid = false;

    m_footnote_reference_isSet = false;
    m_footnote_reference_isValid = false;

    m_horizontal_rule_isSet = false;
    m_horizontal_rule_isValid = false;

    m_inline_object_element_isSet = false;
    m_inline_object_element_isValid = false;

    m_page_break_isSet = false;
    m_page_break_isValid = false;

    m_person_isSet = false;
    m_person_isValid = false;

    m_rich_link_isSet = false;
    m_rich_link_isValid = false;

    m_start_index_isSet = false;
    m_start_index_isValid = false;

    m_text_run_isSet = false;
    m_text_run_isValid = false;
}

void OAIParagraphElement::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIParagraphElement::fromJsonObject(QJsonObject json) {

    m_auto_text_isValid = ::OpenAPI::fromJsonValue(m_auto_text, json[QString("autoText")]);
    m_auto_text_isSet = !json[QString("autoText")].isNull() && m_auto_text_isValid;

    m_column_break_isValid = ::OpenAPI::fromJsonValue(m_column_break, json[QString("columnBreak")]);
    m_column_break_isSet = !json[QString("columnBreak")].isNull() && m_column_break_isValid;

    m_end_index_isValid = ::OpenAPI::fromJsonValue(m_end_index, json[QString("endIndex")]);
    m_end_index_isSet = !json[QString("endIndex")].isNull() && m_end_index_isValid;

    m_equation_isValid = ::OpenAPI::fromJsonValue(m_equation, json[QString("equation")]);
    m_equation_isSet = !json[QString("equation")].isNull() && m_equation_isValid;

    m_footnote_reference_isValid = ::OpenAPI::fromJsonValue(m_footnote_reference, json[QString("footnoteReference")]);
    m_footnote_reference_isSet = !json[QString("footnoteReference")].isNull() && m_footnote_reference_isValid;

    m_horizontal_rule_isValid = ::OpenAPI::fromJsonValue(m_horizontal_rule, json[QString("horizontalRule")]);
    m_horizontal_rule_isSet = !json[QString("horizontalRule")].isNull() && m_horizontal_rule_isValid;

    m_inline_object_element_isValid = ::OpenAPI::fromJsonValue(m_inline_object_element, json[QString("inlineObjectElement")]);
    m_inline_object_element_isSet = !json[QString("inlineObjectElement")].isNull() && m_inline_object_element_isValid;

    m_page_break_isValid = ::OpenAPI::fromJsonValue(m_page_break, json[QString("pageBreak")]);
    m_page_break_isSet = !json[QString("pageBreak")].isNull() && m_page_break_isValid;

    m_person_isValid = ::OpenAPI::fromJsonValue(m_person, json[QString("person")]);
    m_person_isSet = !json[QString("person")].isNull() && m_person_isValid;

    m_rich_link_isValid = ::OpenAPI::fromJsonValue(m_rich_link, json[QString("richLink")]);
    m_rich_link_isSet = !json[QString("richLink")].isNull() && m_rich_link_isValid;

    m_start_index_isValid = ::OpenAPI::fromJsonValue(m_start_index, json[QString("startIndex")]);
    m_start_index_isSet = !json[QString("startIndex")].isNull() && m_start_index_isValid;

    m_text_run_isValid = ::OpenAPI::fromJsonValue(m_text_run, json[QString("textRun")]);
    m_text_run_isSet = !json[QString("textRun")].isNull() && m_text_run_isValid;
}

QString OAIParagraphElement::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIParagraphElement::asJsonObject() const {
    QJsonObject obj;
    if (m_auto_text.isSet()) {
        obj.insert(QString("autoText"), ::OpenAPI::toJsonValue(m_auto_text));
    }
    if (m_column_break.isSet()) {
        obj.insert(QString("columnBreak"), ::OpenAPI::toJsonValue(m_column_break));
    }
    if (m_end_index_isSet) {
        obj.insert(QString("endIndex"), ::OpenAPI::toJsonValue(m_end_index));
    }
    if (m_equation.isSet()) {
        obj.insert(QString("equation"), ::OpenAPI::toJsonValue(m_equation));
    }
    if (m_footnote_reference.isSet()) {
        obj.insert(QString("footnoteReference"), ::OpenAPI::toJsonValue(m_footnote_reference));
    }
    if (m_horizontal_rule.isSet()) {
        obj.insert(QString("horizontalRule"), ::OpenAPI::toJsonValue(m_horizontal_rule));
    }
    if (m_inline_object_element.isSet()) {
        obj.insert(QString("inlineObjectElement"), ::OpenAPI::toJsonValue(m_inline_object_element));
    }
    if (m_page_break.isSet()) {
        obj.insert(QString("pageBreak"), ::OpenAPI::toJsonValue(m_page_break));
    }
    if (m_person.isSet()) {
        obj.insert(QString("person"), ::OpenAPI::toJsonValue(m_person));
    }
    if (m_rich_link.isSet()) {
        obj.insert(QString("richLink"), ::OpenAPI::toJsonValue(m_rich_link));
    }
    if (m_start_index_isSet) {
        obj.insert(QString("startIndex"), ::OpenAPI::toJsonValue(m_start_index));
    }
    if (m_text_run.isSet()) {
        obj.insert(QString("textRun"), ::OpenAPI::toJsonValue(m_text_run));
    }
    return obj;
}

OAIAutoText OAIParagraphElement::getAutoText() const {
    return m_auto_text;
}
void OAIParagraphElement::setAutoText(const OAIAutoText &auto_text) {
    m_auto_text = auto_text;
    m_auto_text_isSet = true;
}

bool OAIParagraphElement::is_auto_text_Set() const{
    return m_auto_text_isSet;
}

bool OAIParagraphElement::is_auto_text_Valid() const{
    return m_auto_text_isValid;
}

OAIColumnBreak OAIParagraphElement::getColumnBreak() const {
    return m_column_break;
}
void OAIParagraphElement::setColumnBreak(const OAIColumnBreak &column_break) {
    m_column_break = column_break;
    m_column_break_isSet = true;
}

bool OAIParagraphElement::is_column_break_Set() const{
    return m_column_break_isSet;
}

bool OAIParagraphElement::is_column_break_Valid() const{
    return m_column_break_isValid;
}

qint32 OAIParagraphElement::getEndIndex() const {
    return m_end_index;
}
void OAIParagraphElement::setEndIndex(const qint32 &end_index) {
    m_end_index = end_index;
    m_end_index_isSet = true;
}

bool OAIParagraphElement::is_end_index_Set() const{
    return m_end_index_isSet;
}

bool OAIParagraphElement::is_end_index_Valid() const{
    return m_end_index_isValid;
}

OAIEquation OAIParagraphElement::getEquation() const {
    return m_equation;
}
void OAIParagraphElement::setEquation(const OAIEquation &equation) {
    m_equation = equation;
    m_equation_isSet = true;
}

bool OAIParagraphElement::is_equation_Set() const{
    return m_equation_isSet;
}

bool OAIParagraphElement::is_equation_Valid() const{
    return m_equation_isValid;
}

OAIFootnoteReference OAIParagraphElement::getFootnoteReference() const {
    return m_footnote_reference;
}
void OAIParagraphElement::setFootnoteReference(const OAIFootnoteReference &footnote_reference) {
    m_footnote_reference = footnote_reference;
    m_footnote_reference_isSet = true;
}

bool OAIParagraphElement::is_footnote_reference_Set() const{
    return m_footnote_reference_isSet;
}

bool OAIParagraphElement::is_footnote_reference_Valid() const{
    return m_footnote_reference_isValid;
}

OAIHorizontalRule OAIParagraphElement::getHorizontalRule() const {
    return m_horizontal_rule;
}
void OAIParagraphElement::setHorizontalRule(const OAIHorizontalRule &horizontal_rule) {
    m_horizontal_rule = horizontal_rule;
    m_horizontal_rule_isSet = true;
}

bool OAIParagraphElement::is_horizontal_rule_Set() const{
    return m_horizontal_rule_isSet;
}

bool OAIParagraphElement::is_horizontal_rule_Valid() const{
    return m_horizontal_rule_isValid;
}

OAIInlineObjectElement OAIParagraphElement::getInlineObjectElement() const {
    return m_inline_object_element;
}
void OAIParagraphElement::setInlineObjectElement(const OAIInlineObjectElement &inline_object_element) {
    m_inline_object_element = inline_object_element;
    m_inline_object_element_isSet = true;
}

bool OAIParagraphElement::is_inline_object_element_Set() const{
    return m_inline_object_element_isSet;
}

bool OAIParagraphElement::is_inline_object_element_Valid() const{
    return m_inline_object_element_isValid;
}

OAIPageBreak OAIParagraphElement::getPageBreak() const {
    return m_page_break;
}
void OAIParagraphElement::setPageBreak(const OAIPageBreak &page_break) {
    m_page_break = page_break;
    m_page_break_isSet = true;
}

bool OAIParagraphElement::is_page_break_Set() const{
    return m_page_break_isSet;
}

bool OAIParagraphElement::is_page_break_Valid() const{
    return m_page_break_isValid;
}

OAIPerson OAIParagraphElement::getPerson() const {
    return m_person;
}
void OAIParagraphElement::setPerson(const OAIPerson &person) {
    m_person = person;
    m_person_isSet = true;
}

bool OAIParagraphElement::is_person_Set() const{
    return m_person_isSet;
}

bool OAIParagraphElement::is_person_Valid() const{
    return m_person_isValid;
}

OAIRichLink OAIParagraphElement::getRichLink() const {
    return m_rich_link;
}
void OAIParagraphElement::setRichLink(const OAIRichLink &rich_link) {
    m_rich_link = rich_link;
    m_rich_link_isSet = true;
}

bool OAIParagraphElement::is_rich_link_Set() const{
    return m_rich_link_isSet;
}

bool OAIParagraphElement::is_rich_link_Valid() const{
    return m_rich_link_isValid;
}

qint32 OAIParagraphElement::getStartIndex() const {
    return m_start_index;
}
void OAIParagraphElement::setStartIndex(const qint32 &start_index) {
    m_start_index = start_index;
    m_start_index_isSet = true;
}

bool OAIParagraphElement::is_start_index_Set() const{
    return m_start_index_isSet;
}

bool OAIParagraphElement::is_start_index_Valid() const{
    return m_start_index_isValid;
}

OAITextRun OAIParagraphElement::getTextRun() const {
    return m_text_run;
}
void OAIParagraphElement::setTextRun(const OAITextRun &text_run) {
    m_text_run = text_run;
    m_text_run_isSet = true;
}

bool OAIParagraphElement::is_text_run_Set() const{
    return m_text_run_isSet;
}

bool OAIParagraphElement::is_text_run_Valid() const{
    return m_text_run_isValid;
}

bool OAIParagraphElement::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_auto_text.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_column_break.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_equation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_footnote_reference.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_horizontal_rule.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_inline_object_element.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_break.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_person.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_rich_link.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_run.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIParagraphElement::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
