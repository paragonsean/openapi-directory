/**
 * Google Docs API
 * Reads and writes Google Docs documents.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISheetsChartReferenceSuggestionState.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISheetsChartReferenceSuggestionState::OAISheetsChartReferenceSuggestionState(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISheetsChartReferenceSuggestionState::OAISheetsChartReferenceSuggestionState() {
    this->initializeModel();
}

OAISheetsChartReferenceSuggestionState::~OAISheetsChartReferenceSuggestionState() {}

void OAISheetsChartReferenceSuggestionState::initializeModel() {

    m_chart_id_suggested_isSet = false;
    m_chart_id_suggested_isValid = false;

    m_spreadsheet_id_suggested_isSet = false;
    m_spreadsheet_id_suggested_isValid = false;
}

void OAISheetsChartReferenceSuggestionState::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISheetsChartReferenceSuggestionState::fromJsonObject(QJsonObject json) {

    m_chart_id_suggested_isValid = ::OpenAPI::fromJsonValue(m_chart_id_suggested, json[QString("chartIdSuggested")]);
    m_chart_id_suggested_isSet = !json[QString("chartIdSuggested")].isNull() && m_chart_id_suggested_isValid;

    m_spreadsheet_id_suggested_isValid = ::OpenAPI::fromJsonValue(m_spreadsheet_id_suggested, json[QString("spreadsheetIdSuggested")]);
    m_spreadsheet_id_suggested_isSet = !json[QString("spreadsheetIdSuggested")].isNull() && m_spreadsheet_id_suggested_isValid;
}

QString OAISheetsChartReferenceSuggestionState::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISheetsChartReferenceSuggestionState::asJsonObject() const {
    QJsonObject obj;
    if (m_chart_id_suggested_isSet) {
        obj.insert(QString("chartIdSuggested"), ::OpenAPI::toJsonValue(m_chart_id_suggested));
    }
    if (m_spreadsheet_id_suggested_isSet) {
        obj.insert(QString("spreadsheetIdSuggested"), ::OpenAPI::toJsonValue(m_spreadsheet_id_suggested));
    }
    return obj;
}

bool OAISheetsChartReferenceSuggestionState::isChartIdSuggested() const {
    return m_chart_id_suggested;
}
void OAISheetsChartReferenceSuggestionState::setChartIdSuggested(const bool &chart_id_suggested) {
    m_chart_id_suggested = chart_id_suggested;
    m_chart_id_suggested_isSet = true;
}

bool OAISheetsChartReferenceSuggestionState::is_chart_id_suggested_Set() const{
    return m_chart_id_suggested_isSet;
}

bool OAISheetsChartReferenceSuggestionState::is_chart_id_suggested_Valid() const{
    return m_chart_id_suggested_isValid;
}

bool OAISheetsChartReferenceSuggestionState::isSpreadsheetIdSuggested() const {
    return m_spreadsheet_id_suggested;
}
void OAISheetsChartReferenceSuggestionState::setSpreadsheetIdSuggested(const bool &spreadsheet_id_suggested) {
    m_spreadsheet_id_suggested = spreadsheet_id_suggested;
    m_spreadsheet_id_suggested_isSet = true;
}

bool OAISheetsChartReferenceSuggestionState::is_spreadsheet_id_suggested_Set() const{
    return m_spreadsheet_id_suggested_isSet;
}

bool OAISheetsChartReferenceSuggestionState::is_spreadsheet_id_suggested_Valid() const{
    return m_spreadsheet_id_suggested_isValid;
}

bool OAISheetsChartReferenceSuggestionState::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_chart_id_suggested_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_spreadsheet_id_suggested_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISheetsChartReferenceSuggestionState::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
