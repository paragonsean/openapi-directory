/**
 * Google Docs API
 * Reads and writes Google Docs documents.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIParagraphStyleSuggestionState.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIParagraphStyleSuggestionState::OAIParagraphStyleSuggestionState(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIParagraphStyleSuggestionState::OAIParagraphStyleSuggestionState() {
    this->initializeModel();
}

OAIParagraphStyleSuggestionState::~OAIParagraphStyleSuggestionState() {}

void OAIParagraphStyleSuggestionState::initializeModel() {

    m_alignment_suggested_isSet = false;
    m_alignment_suggested_isValid = false;

    m_avoid_widow_and_orphan_suggested_isSet = false;
    m_avoid_widow_and_orphan_suggested_isValid = false;

    m_border_between_suggested_isSet = false;
    m_border_between_suggested_isValid = false;

    m_border_bottom_suggested_isSet = false;
    m_border_bottom_suggested_isValid = false;

    m_border_left_suggested_isSet = false;
    m_border_left_suggested_isValid = false;

    m_border_right_suggested_isSet = false;
    m_border_right_suggested_isValid = false;

    m_border_top_suggested_isSet = false;
    m_border_top_suggested_isValid = false;

    m_direction_suggested_isSet = false;
    m_direction_suggested_isValid = false;

    m_heading_id_suggested_isSet = false;
    m_heading_id_suggested_isValid = false;

    m_indent_end_suggested_isSet = false;
    m_indent_end_suggested_isValid = false;

    m_indent_first_line_suggested_isSet = false;
    m_indent_first_line_suggested_isValid = false;

    m_indent_start_suggested_isSet = false;
    m_indent_start_suggested_isValid = false;

    m_keep_lines_together_suggested_isSet = false;
    m_keep_lines_together_suggested_isValid = false;

    m_keep_with_next_suggested_isSet = false;
    m_keep_with_next_suggested_isValid = false;

    m_line_spacing_suggested_isSet = false;
    m_line_spacing_suggested_isValid = false;

    m_named_style_type_suggested_isSet = false;
    m_named_style_type_suggested_isValid = false;

    m_page_break_before_suggested_isSet = false;
    m_page_break_before_suggested_isValid = false;

    m_shading_suggestion_state_isSet = false;
    m_shading_suggestion_state_isValid = false;

    m_space_above_suggested_isSet = false;
    m_space_above_suggested_isValid = false;

    m_space_below_suggested_isSet = false;
    m_space_below_suggested_isValid = false;

    m_spacing_mode_suggested_isSet = false;
    m_spacing_mode_suggested_isValid = false;
}

void OAIParagraphStyleSuggestionState::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIParagraphStyleSuggestionState::fromJsonObject(QJsonObject json) {

    m_alignment_suggested_isValid = ::OpenAPI::fromJsonValue(m_alignment_suggested, json[QString("alignmentSuggested")]);
    m_alignment_suggested_isSet = !json[QString("alignmentSuggested")].isNull() && m_alignment_suggested_isValid;

    m_avoid_widow_and_orphan_suggested_isValid = ::OpenAPI::fromJsonValue(m_avoid_widow_and_orphan_suggested, json[QString("avoidWidowAndOrphanSuggested")]);
    m_avoid_widow_and_orphan_suggested_isSet = !json[QString("avoidWidowAndOrphanSuggested")].isNull() && m_avoid_widow_and_orphan_suggested_isValid;

    m_border_between_suggested_isValid = ::OpenAPI::fromJsonValue(m_border_between_suggested, json[QString("borderBetweenSuggested")]);
    m_border_between_suggested_isSet = !json[QString("borderBetweenSuggested")].isNull() && m_border_between_suggested_isValid;

    m_border_bottom_suggested_isValid = ::OpenAPI::fromJsonValue(m_border_bottom_suggested, json[QString("borderBottomSuggested")]);
    m_border_bottom_suggested_isSet = !json[QString("borderBottomSuggested")].isNull() && m_border_bottom_suggested_isValid;

    m_border_left_suggested_isValid = ::OpenAPI::fromJsonValue(m_border_left_suggested, json[QString("borderLeftSuggested")]);
    m_border_left_suggested_isSet = !json[QString("borderLeftSuggested")].isNull() && m_border_left_suggested_isValid;

    m_border_right_suggested_isValid = ::OpenAPI::fromJsonValue(m_border_right_suggested, json[QString("borderRightSuggested")]);
    m_border_right_suggested_isSet = !json[QString("borderRightSuggested")].isNull() && m_border_right_suggested_isValid;

    m_border_top_suggested_isValid = ::OpenAPI::fromJsonValue(m_border_top_suggested, json[QString("borderTopSuggested")]);
    m_border_top_suggested_isSet = !json[QString("borderTopSuggested")].isNull() && m_border_top_suggested_isValid;

    m_direction_suggested_isValid = ::OpenAPI::fromJsonValue(m_direction_suggested, json[QString("directionSuggested")]);
    m_direction_suggested_isSet = !json[QString("directionSuggested")].isNull() && m_direction_suggested_isValid;

    m_heading_id_suggested_isValid = ::OpenAPI::fromJsonValue(m_heading_id_suggested, json[QString("headingIdSuggested")]);
    m_heading_id_suggested_isSet = !json[QString("headingIdSuggested")].isNull() && m_heading_id_suggested_isValid;

    m_indent_end_suggested_isValid = ::OpenAPI::fromJsonValue(m_indent_end_suggested, json[QString("indentEndSuggested")]);
    m_indent_end_suggested_isSet = !json[QString("indentEndSuggested")].isNull() && m_indent_end_suggested_isValid;

    m_indent_first_line_suggested_isValid = ::OpenAPI::fromJsonValue(m_indent_first_line_suggested, json[QString("indentFirstLineSuggested")]);
    m_indent_first_line_suggested_isSet = !json[QString("indentFirstLineSuggested")].isNull() && m_indent_first_line_suggested_isValid;

    m_indent_start_suggested_isValid = ::OpenAPI::fromJsonValue(m_indent_start_suggested, json[QString("indentStartSuggested")]);
    m_indent_start_suggested_isSet = !json[QString("indentStartSuggested")].isNull() && m_indent_start_suggested_isValid;

    m_keep_lines_together_suggested_isValid = ::OpenAPI::fromJsonValue(m_keep_lines_together_suggested, json[QString("keepLinesTogetherSuggested")]);
    m_keep_lines_together_suggested_isSet = !json[QString("keepLinesTogetherSuggested")].isNull() && m_keep_lines_together_suggested_isValid;

    m_keep_with_next_suggested_isValid = ::OpenAPI::fromJsonValue(m_keep_with_next_suggested, json[QString("keepWithNextSuggested")]);
    m_keep_with_next_suggested_isSet = !json[QString("keepWithNextSuggested")].isNull() && m_keep_with_next_suggested_isValid;

    m_line_spacing_suggested_isValid = ::OpenAPI::fromJsonValue(m_line_spacing_suggested, json[QString("lineSpacingSuggested")]);
    m_line_spacing_suggested_isSet = !json[QString("lineSpacingSuggested")].isNull() && m_line_spacing_suggested_isValid;

    m_named_style_type_suggested_isValid = ::OpenAPI::fromJsonValue(m_named_style_type_suggested, json[QString("namedStyleTypeSuggested")]);
    m_named_style_type_suggested_isSet = !json[QString("namedStyleTypeSuggested")].isNull() && m_named_style_type_suggested_isValid;

    m_page_break_before_suggested_isValid = ::OpenAPI::fromJsonValue(m_page_break_before_suggested, json[QString("pageBreakBeforeSuggested")]);
    m_page_break_before_suggested_isSet = !json[QString("pageBreakBeforeSuggested")].isNull() && m_page_break_before_suggested_isValid;

    m_shading_suggestion_state_isValid = ::OpenAPI::fromJsonValue(m_shading_suggestion_state, json[QString("shadingSuggestionState")]);
    m_shading_suggestion_state_isSet = !json[QString("shadingSuggestionState")].isNull() && m_shading_suggestion_state_isValid;

    m_space_above_suggested_isValid = ::OpenAPI::fromJsonValue(m_space_above_suggested, json[QString("spaceAboveSuggested")]);
    m_space_above_suggested_isSet = !json[QString("spaceAboveSuggested")].isNull() && m_space_above_suggested_isValid;

    m_space_below_suggested_isValid = ::OpenAPI::fromJsonValue(m_space_below_suggested, json[QString("spaceBelowSuggested")]);
    m_space_below_suggested_isSet = !json[QString("spaceBelowSuggested")].isNull() && m_space_below_suggested_isValid;

    m_spacing_mode_suggested_isValid = ::OpenAPI::fromJsonValue(m_spacing_mode_suggested, json[QString("spacingModeSuggested")]);
    m_spacing_mode_suggested_isSet = !json[QString("spacingModeSuggested")].isNull() && m_spacing_mode_suggested_isValid;
}

QString OAIParagraphStyleSuggestionState::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIParagraphStyleSuggestionState::asJsonObject() const {
    QJsonObject obj;
    if (m_alignment_suggested_isSet) {
        obj.insert(QString("alignmentSuggested"), ::OpenAPI::toJsonValue(m_alignment_suggested));
    }
    if (m_avoid_widow_and_orphan_suggested_isSet) {
        obj.insert(QString("avoidWidowAndOrphanSuggested"), ::OpenAPI::toJsonValue(m_avoid_widow_and_orphan_suggested));
    }
    if (m_border_between_suggested_isSet) {
        obj.insert(QString("borderBetweenSuggested"), ::OpenAPI::toJsonValue(m_border_between_suggested));
    }
    if (m_border_bottom_suggested_isSet) {
        obj.insert(QString("borderBottomSuggested"), ::OpenAPI::toJsonValue(m_border_bottom_suggested));
    }
    if (m_border_left_suggested_isSet) {
        obj.insert(QString("borderLeftSuggested"), ::OpenAPI::toJsonValue(m_border_left_suggested));
    }
    if (m_border_right_suggested_isSet) {
        obj.insert(QString("borderRightSuggested"), ::OpenAPI::toJsonValue(m_border_right_suggested));
    }
    if (m_border_top_suggested_isSet) {
        obj.insert(QString("borderTopSuggested"), ::OpenAPI::toJsonValue(m_border_top_suggested));
    }
    if (m_direction_suggested_isSet) {
        obj.insert(QString("directionSuggested"), ::OpenAPI::toJsonValue(m_direction_suggested));
    }
    if (m_heading_id_suggested_isSet) {
        obj.insert(QString("headingIdSuggested"), ::OpenAPI::toJsonValue(m_heading_id_suggested));
    }
    if (m_indent_end_suggested_isSet) {
        obj.insert(QString("indentEndSuggested"), ::OpenAPI::toJsonValue(m_indent_end_suggested));
    }
    if (m_indent_first_line_suggested_isSet) {
        obj.insert(QString("indentFirstLineSuggested"), ::OpenAPI::toJsonValue(m_indent_first_line_suggested));
    }
    if (m_indent_start_suggested_isSet) {
        obj.insert(QString("indentStartSuggested"), ::OpenAPI::toJsonValue(m_indent_start_suggested));
    }
    if (m_keep_lines_together_suggested_isSet) {
        obj.insert(QString("keepLinesTogetherSuggested"), ::OpenAPI::toJsonValue(m_keep_lines_together_suggested));
    }
    if (m_keep_with_next_suggested_isSet) {
        obj.insert(QString("keepWithNextSuggested"), ::OpenAPI::toJsonValue(m_keep_with_next_suggested));
    }
    if (m_line_spacing_suggested_isSet) {
        obj.insert(QString("lineSpacingSuggested"), ::OpenAPI::toJsonValue(m_line_spacing_suggested));
    }
    if (m_named_style_type_suggested_isSet) {
        obj.insert(QString("namedStyleTypeSuggested"), ::OpenAPI::toJsonValue(m_named_style_type_suggested));
    }
    if (m_page_break_before_suggested_isSet) {
        obj.insert(QString("pageBreakBeforeSuggested"), ::OpenAPI::toJsonValue(m_page_break_before_suggested));
    }
    if (m_shading_suggestion_state.isSet()) {
        obj.insert(QString("shadingSuggestionState"), ::OpenAPI::toJsonValue(m_shading_suggestion_state));
    }
    if (m_space_above_suggested_isSet) {
        obj.insert(QString("spaceAboveSuggested"), ::OpenAPI::toJsonValue(m_space_above_suggested));
    }
    if (m_space_below_suggested_isSet) {
        obj.insert(QString("spaceBelowSuggested"), ::OpenAPI::toJsonValue(m_space_below_suggested));
    }
    if (m_spacing_mode_suggested_isSet) {
        obj.insert(QString("spacingModeSuggested"), ::OpenAPI::toJsonValue(m_spacing_mode_suggested));
    }
    return obj;
}

bool OAIParagraphStyleSuggestionState::isAlignmentSuggested() const {
    return m_alignment_suggested;
}
void OAIParagraphStyleSuggestionState::setAlignmentSuggested(const bool &alignment_suggested) {
    m_alignment_suggested = alignment_suggested;
    m_alignment_suggested_isSet = true;
}

bool OAIParagraphStyleSuggestionState::is_alignment_suggested_Set() const{
    return m_alignment_suggested_isSet;
}

bool OAIParagraphStyleSuggestionState::is_alignment_suggested_Valid() const{
    return m_alignment_suggested_isValid;
}

bool OAIParagraphStyleSuggestionState::isAvoidWidowAndOrphanSuggested() const {
    return m_avoid_widow_and_orphan_suggested;
}
void OAIParagraphStyleSuggestionState::setAvoidWidowAndOrphanSuggested(const bool &avoid_widow_and_orphan_suggested) {
    m_avoid_widow_and_orphan_suggested = avoid_widow_and_orphan_suggested;
    m_avoid_widow_and_orphan_suggested_isSet = true;
}

bool OAIParagraphStyleSuggestionState::is_avoid_widow_and_orphan_suggested_Set() const{
    return m_avoid_widow_and_orphan_suggested_isSet;
}

bool OAIParagraphStyleSuggestionState::is_avoid_widow_and_orphan_suggested_Valid() const{
    return m_avoid_widow_and_orphan_suggested_isValid;
}

bool OAIParagraphStyleSuggestionState::isBorderBetweenSuggested() const {
    return m_border_between_suggested;
}
void OAIParagraphStyleSuggestionState::setBorderBetweenSuggested(const bool &border_between_suggested) {
    m_border_between_suggested = border_between_suggested;
    m_border_between_suggested_isSet = true;
}

bool OAIParagraphStyleSuggestionState::is_border_between_suggested_Set() const{
    return m_border_between_suggested_isSet;
}

bool OAIParagraphStyleSuggestionState::is_border_between_suggested_Valid() const{
    return m_border_between_suggested_isValid;
}

bool OAIParagraphStyleSuggestionState::isBorderBottomSuggested() const {
    return m_border_bottom_suggested;
}
void OAIParagraphStyleSuggestionState::setBorderBottomSuggested(const bool &border_bottom_suggested) {
    m_border_bottom_suggested = border_bottom_suggested;
    m_border_bottom_suggested_isSet = true;
}

bool OAIParagraphStyleSuggestionState::is_border_bottom_suggested_Set() const{
    return m_border_bottom_suggested_isSet;
}

bool OAIParagraphStyleSuggestionState::is_border_bottom_suggested_Valid() const{
    return m_border_bottom_suggested_isValid;
}

bool OAIParagraphStyleSuggestionState::isBorderLeftSuggested() const {
    return m_border_left_suggested;
}
void OAIParagraphStyleSuggestionState::setBorderLeftSuggested(const bool &border_left_suggested) {
    m_border_left_suggested = border_left_suggested;
    m_border_left_suggested_isSet = true;
}

bool OAIParagraphStyleSuggestionState::is_border_left_suggested_Set() const{
    return m_border_left_suggested_isSet;
}

bool OAIParagraphStyleSuggestionState::is_border_left_suggested_Valid() const{
    return m_border_left_suggested_isValid;
}

bool OAIParagraphStyleSuggestionState::isBorderRightSuggested() const {
    return m_border_right_suggested;
}
void OAIParagraphStyleSuggestionState::setBorderRightSuggested(const bool &border_right_suggested) {
    m_border_right_suggested = border_right_suggested;
    m_border_right_suggested_isSet = true;
}

bool OAIParagraphStyleSuggestionState::is_border_right_suggested_Set() const{
    return m_border_right_suggested_isSet;
}

bool OAIParagraphStyleSuggestionState::is_border_right_suggested_Valid() const{
    return m_border_right_suggested_isValid;
}

bool OAIParagraphStyleSuggestionState::isBorderTopSuggested() const {
    return m_border_top_suggested;
}
void OAIParagraphStyleSuggestionState::setBorderTopSuggested(const bool &border_top_suggested) {
    m_border_top_suggested = border_top_suggested;
    m_border_top_suggested_isSet = true;
}

bool OAIParagraphStyleSuggestionState::is_border_top_suggested_Set() const{
    return m_border_top_suggested_isSet;
}

bool OAIParagraphStyleSuggestionState::is_border_top_suggested_Valid() const{
    return m_border_top_suggested_isValid;
}

bool OAIParagraphStyleSuggestionState::isDirectionSuggested() const {
    return m_direction_suggested;
}
void OAIParagraphStyleSuggestionState::setDirectionSuggested(const bool &direction_suggested) {
    m_direction_suggested = direction_suggested;
    m_direction_suggested_isSet = true;
}

bool OAIParagraphStyleSuggestionState::is_direction_suggested_Set() const{
    return m_direction_suggested_isSet;
}

bool OAIParagraphStyleSuggestionState::is_direction_suggested_Valid() const{
    return m_direction_suggested_isValid;
}

bool OAIParagraphStyleSuggestionState::isHeadingIdSuggested() const {
    return m_heading_id_suggested;
}
void OAIParagraphStyleSuggestionState::setHeadingIdSuggested(const bool &heading_id_suggested) {
    m_heading_id_suggested = heading_id_suggested;
    m_heading_id_suggested_isSet = true;
}

bool OAIParagraphStyleSuggestionState::is_heading_id_suggested_Set() const{
    return m_heading_id_suggested_isSet;
}

bool OAIParagraphStyleSuggestionState::is_heading_id_suggested_Valid() const{
    return m_heading_id_suggested_isValid;
}

bool OAIParagraphStyleSuggestionState::isIndentEndSuggested() const {
    return m_indent_end_suggested;
}
void OAIParagraphStyleSuggestionState::setIndentEndSuggested(const bool &indent_end_suggested) {
    m_indent_end_suggested = indent_end_suggested;
    m_indent_end_suggested_isSet = true;
}

bool OAIParagraphStyleSuggestionState::is_indent_end_suggested_Set() const{
    return m_indent_end_suggested_isSet;
}

bool OAIParagraphStyleSuggestionState::is_indent_end_suggested_Valid() const{
    return m_indent_end_suggested_isValid;
}

bool OAIParagraphStyleSuggestionState::isIndentFirstLineSuggested() const {
    return m_indent_first_line_suggested;
}
void OAIParagraphStyleSuggestionState::setIndentFirstLineSuggested(const bool &indent_first_line_suggested) {
    m_indent_first_line_suggested = indent_first_line_suggested;
    m_indent_first_line_suggested_isSet = true;
}

bool OAIParagraphStyleSuggestionState::is_indent_first_line_suggested_Set() const{
    return m_indent_first_line_suggested_isSet;
}

bool OAIParagraphStyleSuggestionState::is_indent_first_line_suggested_Valid() const{
    return m_indent_first_line_suggested_isValid;
}

bool OAIParagraphStyleSuggestionState::isIndentStartSuggested() const {
    return m_indent_start_suggested;
}
void OAIParagraphStyleSuggestionState::setIndentStartSuggested(const bool &indent_start_suggested) {
    m_indent_start_suggested = indent_start_suggested;
    m_indent_start_suggested_isSet = true;
}

bool OAIParagraphStyleSuggestionState::is_indent_start_suggested_Set() const{
    return m_indent_start_suggested_isSet;
}

bool OAIParagraphStyleSuggestionState::is_indent_start_suggested_Valid() const{
    return m_indent_start_suggested_isValid;
}

bool OAIParagraphStyleSuggestionState::isKeepLinesTogetherSuggested() const {
    return m_keep_lines_together_suggested;
}
void OAIParagraphStyleSuggestionState::setKeepLinesTogetherSuggested(const bool &keep_lines_together_suggested) {
    m_keep_lines_together_suggested = keep_lines_together_suggested;
    m_keep_lines_together_suggested_isSet = true;
}

bool OAIParagraphStyleSuggestionState::is_keep_lines_together_suggested_Set() const{
    return m_keep_lines_together_suggested_isSet;
}

bool OAIParagraphStyleSuggestionState::is_keep_lines_together_suggested_Valid() const{
    return m_keep_lines_together_suggested_isValid;
}

bool OAIParagraphStyleSuggestionState::isKeepWithNextSuggested() const {
    return m_keep_with_next_suggested;
}
void OAIParagraphStyleSuggestionState::setKeepWithNextSuggested(const bool &keep_with_next_suggested) {
    m_keep_with_next_suggested = keep_with_next_suggested;
    m_keep_with_next_suggested_isSet = true;
}

bool OAIParagraphStyleSuggestionState::is_keep_with_next_suggested_Set() const{
    return m_keep_with_next_suggested_isSet;
}

bool OAIParagraphStyleSuggestionState::is_keep_with_next_suggested_Valid() const{
    return m_keep_with_next_suggested_isValid;
}

bool OAIParagraphStyleSuggestionState::isLineSpacingSuggested() const {
    return m_line_spacing_suggested;
}
void OAIParagraphStyleSuggestionState::setLineSpacingSuggested(const bool &line_spacing_suggested) {
    m_line_spacing_suggested = line_spacing_suggested;
    m_line_spacing_suggested_isSet = true;
}

bool OAIParagraphStyleSuggestionState::is_line_spacing_suggested_Set() const{
    return m_line_spacing_suggested_isSet;
}

bool OAIParagraphStyleSuggestionState::is_line_spacing_suggested_Valid() const{
    return m_line_spacing_suggested_isValid;
}

bool OAIParagraphStyleSuggestionState::isNamedStyleTypeSuggested() const {
    return m_named_style_type_suggested;
}
void OAIParagraphStyleSuggestionState::setNamedStyleTypeSuggested(const bool &named_style_type_suggested) {
    m_named_style_type_suggested = named_style_type_suggested;
    m_named_style_type_suggested_isSet = true;
}

bool OAIParagraphStyleSuggestionState::is_named_style_type_suggested_Set() const{
    return m_named_style_type_suggested_isSet;
}

bool OAIParagraphStyleSuggestionState::is_named_style_type_suggested_Valid() const{
    return m_named_style_type_suggested_isValid;
}

bool OAIParagraphStyleSuggestionState::isPageBreakBeforeSuggested() const {
    return m_page_break_before_suggested;
}
void OAIParagraphStyleSuggestionState::setPageBreakBeforeSuggested(const bool &page_break_before_suggested) {
    m_page_break_before_suggested = page_break_before_suggested;
    m_page_break_before_suggested_isSet = true;
}

bool OAIParagraphStyleSuggestionState::is_page_break_before_suggested_Set() const{
    return m_page_break_before_suggested_isSet;
}

bool OAIParagraphStyleSuggestionState::is_page_break_before_suggested_Valid() const{
    return m_page_break_before_suggested_isValid;
}

OAIShadingSuggestionState OAIParagraphStyleSuggestionState::getShadingSuggestionState() const {
    return m_shading_suggestion_state;
}
void OAIParagraphStyleSuggestionState::setShadingSuggestionState(const OAIShadingSuggestionState &shading_suggestion_state) {
    m_shading_suggestion_state = shading_suggestion_state;
    m_shading_suggestion_state_isSet = true;
}

bool OAIParagraphStyleSuggestionState::is_shading_suggestion_state_Set() const{
    return m_shading_suggestion_state_isSet;
}

bool OAIParagraphStyleSuggestionState::is_shading_suggestion_state_Valid() const{
    return m_shading_suggestion_state_isValid;
}

bool OAIParagraphStyleSuggestionState::isSpaceAboveSuggested() const {
    return m_space_above_suggested;
}
void OAIParagraphStyleSuggestionState::setSpaceAboveSuggested(const bool &space_above_suggested) {
    m_space_above_suggested = space_above_suggested;
    m_space_above_suggested_isSet = true;
}

bool OAIParagraphStyleSuggestionState::is_space_above_suggested_Set() const{
    return m_space_above_suggested_isSet;
}

bool OAIParagraphStyleSuggestionState::is_space_above_suggested_Valid() const{
    return m_space_above_suggested_isValid;
}

bool OAIParagraphStyleSuggestionState::isSpaceBelowSuggested() const {
    return m_space_below_suggested;
}
void OAIParagraphStyleSuggestionState::setSpaceBelowSuggested(const bool &space_below_suggested) {
    m_space_below_suggested = space_below_suggested;
    m_space_below_suggested_isSet = true;
}

bool OAIParagraphStyleSuggestionState::is_space_below_suggested_Set() const{
    return m_space_below_suggested_isSet;
}

bool OAIParagraphStyleSuggestionState::is_space_below_suggested_Valid() const{
    return m_space_below_suggested_isValid;
}

bool OAIParagraphStyleSuggestionState::isSpacingModeSuggested() const {
    return m_spacing_mode_suggested;
}
void OAIParagraphStyleSuggestionState::setSpacingModeSuggested(const bool &spacing_mode_suggested) {
    m_spacing_mode_suggested = spacing_mode_suggested;
    m_spacing_mode_suggested_isSet = true;
}

bool OAIParagraphStyleSuggestionState::is_spacing_mode_suggested_Set() const{
    return m_spacing_mode_suggested_isSet;
}

bool OAIParagraphStyleSuggestionState::is_spacing_mode_suggested_Valid() const{
    return m_spacing_mode_suggested_isValid;
}

bool OAIParagraphStyleSuggestionState::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_alignment_suggested_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_avoid_widow_and_orphan_suggested_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_border_between_suggested_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_border_bottom_suggested_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_border_left_suggested_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_border_right_suggested_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_border_top_suggested_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_direction_suggested_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_heading_id_suggested_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_indent_end_suggested_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_indent_first_line_suggested_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_indent_start_suggested_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_keep_lines_together_suggested_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_keep_with_next_suggested_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_spacing_suggested_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_named_style_type_suggested_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_break_before_suggested_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shading_suggestion_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_space_above_suggested_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_space_below_suggested_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_spacing_mode_suggested_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIParagraphStyleSuggestionState::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
