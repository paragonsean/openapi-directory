/**
 * Google Docs API
 * Reads and writes Google Docs documents.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImagePropertiesSuggestionState.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImagePropertiesSuggestionState::OAIImagePropertiesSuggestionState(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImagePropertiesSuggestionState::OAIImagePropertiesSuggestionState() {
    this->initializeModel();
}

OAIImagePropertiesSuggestionState::~OAIImagePropertiesSuggestionState() {}

void OAIImagePropertiesSuggestionState::initializeModel() {

    m_angle_suggested_isSet = false;
    m_angle_suggested_isValid = false;

    m_brightness_suggested_isSet = false;
    m_brightness_suggested_isValid = false;

    m_content_uri_suggested_isSet = false;
    m_content_uri_suggested_isValid = false;

    m_contrast_suggested_isSet = false;
    m_contrast_suggested_isValid = false;

    m_crop_properties_suggestion_state_isSet = false;
    m_crop_properties_suggestion_state_isValid = false;

    m_source_uri_suggested_isSet = false;
    m_source_uri_suggested_isValid = false;

    m_transparency_suggested_isSet = false;
    m_transparency_suggested_isValid = false;
}

void OAIImagePropertiesSuggestionState::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImagePropertiesSuggestionState::fromJsonObject(QJsonObject json) {

    m_angle_suggested_isValid = ::OpenAPI::fromJsonValue(m_angle_suggested, json[QString("angleSuggested")]);
    m_angle_suggested_isSet = !json[QString("angleSuggested")].isNull() && m_angle_suggested_isValid;

    m_brightness_suggested_isValid = ::OpenAPI::fromJsonValue(m_brightness_suggested, json[QString("brightnessSuggested")]);
    m_brightness_suggested_isSet = !json[QString("brightnessSuggested")].isNull() && m_brightness_suggested_isValid;

    m_content_uri_suggested_isValid = ::OpenAPI::fromJsonValue(m_content_uri_suggested, json[QString("contentUriSuggested")]);
    m_content_uri_suggested_isSet = !json[QString("contentUriSuggested")].isNull() && m_content_uri_suggested_isValid;

    m_contrast_suggested_isValid = ::OpenAPI::fromJsonValue(m_contrast_suggested, json[QString("contrastSuggested")]);
    m_contrast_suggested_isSet = !json[QString("contrastSuggested")].isNull() && m_contrast_suggested_isValid;

    m_crop_properties_suggestion_state_isValid = ::OpenAPI::fromJsonValue(m_crop_properties_suggestion_state, json[QString("cropPropertiesSuggestionState")]);
    m_crop_properties_suggestion_state_isSet = !json[QString("cropPropertiesSuggestionState")].isNull() && m_crop_properties_suggestion_state_isValid;

    m_source_uri_suggested_isValid = ::OpenAPI::fromJsonValue(m_source_uri_suggested, json[QString("sourceUriSuggested")]);
    m_source_uri_suggested_isSet = !json[QString("sourceUriSuggested")].isNull() && m_source_uri_suggested_isValid;

    m_transparency_suggested_isValid = ::OpenAPI::fromJsonValue(m_transparency_suggested, json[QString("transparencySuggested")]);
    m_transparency_suggested_isSet = !json[QString("transparencySuggested")].isNull() && m_transparency_suggested_isValid;
}

QString OAIImagePropertiesSuggestionState::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImagePropertiesSuggestionState::asJsonObject() const {
    QJsonObject obj;
    if (m_angle_suggested_isSet) {
        obj.insert(QString("angleSuggested"), ::OpenAPI::toJsonValue(m_angle_suggested));
    }
    if (m_brightness_suggested_isSet) {
        obj.insert(QString("brightnessSuggested"), ::OpenAPI::toJsonValue(m_brightness_suggested));
    }
    if (m_content_uri_suggested_isSet) {
        obj.insert(QString("contentUriSuggested"), ::OpenAPI::toJsonValue(m_content_uri_suggested));
    }
    if (m_contrast_suggested_isSet) {
        obj.insert(QString("contrastSuggested"), ::OpenAPI::toJsonValue(m_contrast_suggested));
    }
    if (m_crop_properties_suggestion_state.isSet()) {
        obj.insert(QString("cropPropertiesSuggestionState"), ::OpenAPI::toJsonValue(m_crop_properties_suggestion_state));
    }
    if (m_source_uri_suggested_isSet) {
        obj.insert(QString("sourceUriSuggested"), ::OpenAPI::toJsonValue(m_source_uri_suggested));
    }
    if (m_transparency_suggested_isSet) {
        obj.insert(QString("transparencySuggested"), ::OpenAPI::toJsonValue(m_transparency_suggested));
    }
    return obj;
}

bool OAIImagePropertiesSuggestionState::isAngleSuggested() const {
    return m_angle_suggested;
}
void OAIImagePropertiesSuggestionState::setAngleSuggested(const bool &angle_suggested) {
    m_angle_suggested = angle_suggested;
    m_angle_suggested_isSet = true;
}

bool OAIImagePropertiesSuggestionState::is_angle_suggested_Set() const{
    return m_angle_suggested_isSet;
}

bool OAIImagePropertiesSuggestionState::is_angle_suggested_Valid() const{
    return m_angle_suggested_isValid;
}

bool OAIImagePropertiesSuggestionState::isBrightnessSuggested() const {
    return m_brightness_suggested;
}
void OAIImagePropertiesSuggestionState::setBrightnessSuggested(const bool &brightness_suggested) {
    m_brightness_suggested = brightness_suggested;
    m_brightness_suggested_isSet = true;
}

bool OAIImagePropertiesSuggestionState::is_brightness_suggested_Set() const{
    return m_brightness_suggested_isSet;
}

bool OAIImagePropertiesSuggestionState::is_brightness_suggested_Valid() const{
    return m_brightness_suggested_isValid;
}

bool OAIImagePropertiesSuggestionState::isContentUriSuggested() const {
    return m_content_uri_suggested;
}
void OAIImagePropertiesSuggestionState::setContentUriSuggested(const bool &content_uri_suggested) {
    m_content_uri_suggested = content_uri_suggested;
    m_content_uri_suggested_isSet = true;
}

bool OAIImagePropertiesSuggestionState::is_content_uri_suggested_Set() const{
    return m_content_uri_suggested_isSet;
}

bool OAIImagePropertiesSuggestionState::is_content_uri_suggested_Valid() const{
    return m_content_uri_suggested_isValid;
}

bool OAIImagePropertiesSuggestionState::isContrastSuggested() const {
    return m_contrast_suggested;
}
void OAIImagePropertiesSuggestionState::setContrastSuggested(const bool &contrast_suggested) {
    m_contrast_suggested = contrast_suggested;
    m_contrast_suggested_isSet = true;
}

bool OAIImagePropertiesSuggestionState::is_contrast_suggested_Set() const{
    return m_contrast_suggested_isSet;
}

bool OAIImagePropertiesSuggestionState::is_contrast_suggested_Valid() const{
    return m_contrast_suggested_isValid;
}

OAICropPropertiesSuggestionState OAIImagePropertiesSuggestionState::getCropPropertiesSuggestionState() const {
    return m_crop_properties_suggestion_state;
}
void OAIImagePropertiesSuggestionState::setCropPropertiesSuggestionState(const OAICropPropertiesSuggestionState &crop_properties_suggestion_state) {
    m_crop_properties_suggestion_state = crop_properties_suggestion_state;
    m_crop_properties_suggestion_state_isSet = true;
}

bool OAIImagePropertiesSuggestionState::is_crop_properties_suggestion_state_Set() const{
    return m_crop_properties_suggestion_state_isSet;
}

bool OAIImagePropertiesSuggestionState::is_crop_properties_suggestion_state_Valid() const{
    return m_crop_properties_suggestion_state_isValid;
}

bool OAIImagePropertiesSuggestionState::isSourceUriSuggested() const {
    return m_source_uri_suggested;
}
void OAIImagePropertiesSuggestionState::setSourceUriSuggested(const bool &source_uri_suggested) {
    m_source_uri_suggested = source_uri_suggested;
    m_source_uri_suggested_isSet = true;
}

bool OAIImagePropertiesSuggestionState::is_source_uri_suggested_Set() const{
    return m_source_uri_suggested_isSet;
}

bool OAIImagePropertiesSuggestionState::is_source_uri_suggested_Valid() const{
    return m_source_uri_suggested_isValid;
}

bool OAIImagePropertiesSuggestionState::isTransparencySuggested() const {
    return m_transparency_suggested;
}
void OAIImagePropertiesSuggestionState::setTransparencySuggested(const bool &transparency_suggested) {
    m_transparency_suggested = transparency_suggested;
    m_transparency_suggested_isSet = true;
}

bool OAIImagePropertiesSuggestionState::is_transparency_suggested_Set() const{
    return m_transparency_suggested_isSet;
}

bool OAIImagePropertiesSuggestionState::is_transparency_suggested_Valid() const{
    return m_transparency_suggested_isValid;
}

bool OAIImagePropertiesSuggestionState::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_angle_suggested_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_brightness_suggested_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_uri_suggested_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contrast_suggested_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_crop_properties_suggestion_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_uri_suggested_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transparency_suggested_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImagePropertiesSuggestionState::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
