/**
 * Google Docs API
 * Reads and writes Google Docs documents.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRequest::OAIRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRequest::OAIRequest() {
    this->initializeModel();
}

OAIRequest::~OAIRequest() {}

void OAIRequest::initializeModel() {

    m_create_footer_isSet = false;
    m_create_footer_isValid = false;

    m_create_footnote_isSet = false;
    m_create_footnote_isValid = false;

    m_create_header_isSet = false;
    m_create_header_isValid = false;

    m_create_named_range_isSet = false;
    m_create_named_range_isValid = false;

    m_create_paragraph_bullets_isSet = false;
    m_create_paragraph_bullets_isValid = false;

    m_delete_content_range_isSet = false;
    m_delete_content_range_isValid = false;

    m_delete_footer_isSet = false;
    m_delete_footer_isValid = false;

    m_delete_header_isSet = false;
    m_delete_header_isValid = false;

    m_delete_named_range_isSet = false;
    m_delete_named_range_isValid = false;

    m_delete_paragraph_bullets_isSet = false;
    m_delete_paragraph_bullets_isValid = false;

    m_delete_positioned_object_isSet = false;
    m_delete_positioned_object_isValid = false;

    m_delete_table_column_isSet = false;
    m_delete_table_column_isValid = false;

    m_delete_table_row_isSet = false;
    m_delete_table_row_isValid = false;

    m_insert_inline_image_isSet = false;
    m_insert_inline_image_isValid = false;

    m_insert_page_break_isSet = false;
    m_insert_page_break_isValid = false;

    m_insert_section_break_isSet = false;
    m_insert_section_break_isValid = false;

    m_insert_table_isSet = false;
    m_insert_table_isValid = false;

    m_insert_table_column_isSet = false;
    m_insert_table_column_isValid = false;

    m_insert_table_row_isSet = false;
    m_insert_table_row_isValid = false;

    m_insert_text_isSet = false;
    m_insert_text_isValid = false;

    m_merge_table_cells_isSet = false;
    m_merge_table_cells_isValid = false;

    m_pin_table_header_rows_isSet = false;
    m_pin_table_header_rows_isValid = false;

    m_replace_all_text_isSet = false;
    m_replace_all_text_isValid = false;

    m_replace_image_isSet = false;
    m_replace_image_isValid = false;

    m_replace_named_range_content_isSet = false;
    m_replace_named_range_content_isValid = false;

    m_unmerge_table_cells_isSet = false;
    m_unmerge_table_cells_isValid = false;

    m_update_document_style_isSet = false;
    m_update_document_style_isValid = false;

    m_update_paragraph_style_isSet = false;
    m_update_paragraph_style_isValid = false;

    m_update_section_style_isSet = false;
    m_update_section_style_isValid = false;

    m_update_table_cell_style_isSet = false;
    m_update_table_cell_style_isValid = false;

    m_update_table_column_properties_isSet = false;
    m_update_table_column_properties_isValid = false;

    m_update_table_row_style_isSet = false;
    m_update_table_row_style_isValid = false;

    m_update_text_style_isSet = false;
    m_update_text_style_isValid = false;
}

void OAIRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRequest::fromJsonObject(QJsonObject json) {

    m_create_footer_isValid = ::OpenAPI::fromJsonValue(m_create_footer, json[QString("createFooter")]);
    m_create_footer_isSet = !json[QString("createFooter")].isNull() && m_create_footer_isValid;

    m_create_footnote_isValid = ::OpenAPI::fromJsonValue(m_create_footnote, json[QString("createFootnote")]);
    m_create_footnote_isSet = !json[QString("createFootnote")].isNull() && m_create_footnote_isValid;

    m_create_header_isValid = ::OpenAPI::fromJsonValue(m_create_header, json[QString("createHeader")]);
    m_create_header_isSet = !json[QString("createHeader")].isNull() && m_create_header_isValid;

    m_create_named_range_isValid = ::OpenAPI::fromJsonValue(m_create_named_range, json[QString("createNamedRange")]);
    m_create_named_range_isSet = !json[QString("createNamedRange")].isNull() && m_create_named_range_isValid;

    m_create_paragraph_bullets_isValid = ::OpenAPI::fromJsonValue(m_create_paragraph_bullets, json[QString("createParagraphBullets")]);
    m_create_paragraph_bullets_isSet = !json[QString("createParagraphBullets")].isNull() && m_create_paragraph_bullets_isValid;

    m_delete_content_range_isValid = ::OpenAPI::fromJsonValue(m_delete_content_range, json[QString("deleteContentRange")]);
    m_delete_content_range_isSet = !json[QString("deleteContentRange")].isNull() && m_delete_content_range_isValid;

    m_delete_footer_isValid = ::OpenAPI::fromJsonValue(m_delete_footer, json[QString("deleteFooter")]);
    m_delete_footer_isSet = !json[QString("deleteFooter")].isNull() && m_delete_footer_isValid;

    m_delete_header_isValid = ::OpenAPI::fromJsonValue(m_delete_header, json[QString("deleteHeader")]);
    m_delete_header_isSet = !json[QString("deleteHeader")].isNull() && m_delete_header_isValid;

    m_delete_named_range_isValid = ::OpenAPI::fromJsonValue(m_delete_named_range, json[QString("deleteNamedRange")]);
    m_delete_named_range_isSet = !json[QString("deleteNamedRange")].isNull() && m_delete_named_range_isValid;

    m_delete_paragraph_bullets_isValid = ::OpenAPI::fromJsonValue(m_delete_paragraph_bullets, json[QString("deleteParagraphBullets")]);
    m_delete_paragraph_bullets_isSet = !json[QString("deleteParagraphBullets")].isNull() && m_delete_paragraph_bullets_isValid;

    m_delete_positioned_object_isValid = ::OpenAPI::fromJsonValue(m_delete_positioned_object, json[QString("deletePositionedObject")]);
    m_delete_positioned_object_isSet = !json[QString("deletePositionedObject")].isNull() && m_delete_positioned_object_isValid;

    m_delete_table_column_isValid = ::OpenAPI::fromJsonValue(m_delete_table_column, json[QString("deleteTableColumn")]);
    m_delete_table_column_isSet = !json[QString("deleteTableColumn")].isNull() && m_delete_table_column_isValid;

    m_delete_table_row_isValid = ::OpenAPI::fromJsonValue(m_delete_table_row, json[QString("deleteTableRow")]);
    m_delete_table_row_isSet = !json[QString("deleteTableRow")].isNull() && m_delete_table_row_isValid;

    m_insert_inline_image_isValid = ::OpenAPI::fromJsonValue(m_insert_inline_image, json[QString("insertInlineImage")]);
    m_insert_inline_image_isSet = !json[QString("insertInlineImage")].isNull() && m_insert_inline_image_isValid;

    m_insert_page_break_isValid = ::OpenAPI::fromJsonValue(m_insert_page_break, json[QString("insertPageBreak")]);
    m_insert_page_break_isSet = !json[QString("insertPageBreak")].isNull() && m_insert_page_break_isValid;

    m_insert_section_break_isValid = ::OpenAPI::fromJsonValue(m_insert_section_break, json[QString("insertSectionBreak")]);
    m_insert_section_break_isSet = !json[QString("insertSectionBreak")].isNull() && m_insert_section_break_isValid;

    m_insert_table_isValid = ::OpenAPI::fromJsonValue(m_insert_table, json[QString("insertTable")]);
    m_insert_table_isSet = !json[QString("insertTable")].isNull() && m_insert_table_isValid;

    m_insert_table_column_isValid = ::OpenAPI::fromJsonValue(m_insert_table_column, json[QString("insertTableColumn")]);
    m_insert_table_column_isSet = !json[QString("insertTableColumn")].isNull() && m_insert_table_column_isValid;

    m_insert_table_row_isValid = ::OpenAPI::fromJsonValue(m_insert_table_row, json[QString("insertTableRow")]);
    m_insert_table_row_isSet = !json[QString("insertTableRow")].isNull() && m_insert_table_row_isValid;

    m_insert_text_isValid = ::OpenAPI::fromJsonValue(m_insert_text, json[QString("insertText")]);
    m_insert_text_isSet = !json[QString("insertText")].isNull() && m_insert_text_isValid;

    m_merge_table_cells_isValid = ::OpenAPI::fromJsonValue(m_merge_table_cells, json[QString("mergeTableCells")]);
    m_merge_table_cells_isSet = !json[QString("mergeTableCells")].isNull() && m_merge_table_cells_isValid;

    m_pin_table_header_rows_isValid = ::OpenAPI::fromJsonValue(m_pin_table_header_rows, json[QString("pinTableHeaderRows")]);
    m_pin_table_header_rows_isSet = !json[QString("pinTableHeaderRows")].isNull() && m_pin_table_header_rows_isValid;

    m_replace_all_text_isValid = ::OpenAPI::fromJsonValue(m_replace_all_text, json[QString("replaceAllText")]);
    m_replace_all_text_isSet = !json[QString("replaceAllText")].isNull() && m_replace_all_text_isValid;

    m_replace_image_isValid = ::OpenAPI::fromJsonValue(m_replace_image, json[QString("replaceImage")]);
    m_replace_image_isSet = !json[QString("replaceImage")].isNull() && m_replace_image_isValid;

    m_replace_named_range_content_isValid = ::OpenAPI::fromJsonValue(m_replace_named_range_content, json[QString("replaceNamedRangeContent")]);
    m_replace_named_range_content_isSet = !json[QString("replaceNamedRangeContent")].isNull() && m_replace_named_range_content_isValid;

    m_unmerge_table_cells_isValid = ::OpenAPI::fromJsonValue(m_unmerge_table_cells, json[QString("unmergeTableCells")]);
    m_unmerge_table_cells_isSet = !json[QString("unmergeTableCells")].isNull() && m_unmerge_table_cells_isValid;

    m_update_document_style_isValid = ::OpenAPI::fromJsonValue(m_update_document_style, json[QString("updateDocumentStyle")]);
    m_update_document_style_isSet = !json[QString("updateDocumentStyle")].isNull() && m_update_document_style_isValid;

    m_update_paragraph_style_isValid = ::OpenAPI::fromJsonValue(m_update_paragraph_style, json[QString("updateParagraphStyle")]);
    m_update_paragraph_style_isSet = !json[QString("updateParagraphStyle")].isNull() && m_update_paragraph_style_isValid;

    m_update_section_style_isValid = ::OpenAPI::fromJsonValue(m_update_section_style, json[QString("updateSectionStyle")]);
    m_update_section_style_isSet = !json[QString("updateSectionStyle")].isNull() && m_update_section_style_isValid;

    m_update_table_cell_style_isValid = ::OpenAPI::fromJsonValue(m_update_table_cell_style, json[QString("updateTableCellStyle")]);
    m_update_table_cell_style_isSet = !json[QString("updateTableCellStyle")].isNull() && m_update_table_cell_style_isValid;

    m_update_table_column_properties_isValid = ::OpenAPI::fromJsonValue(m_update_table_column_properties, json[QString("updateTableColumnProperties")]);
    m_update_table_column_properties_isSet = !json[QString("updateTableColumnProperties")].isNull() && m_update_table_column_properties_isValid;

    m_update_table_row_style_isValid = ::OpenAPI::fromJsonValue(m_update_table_row_style, json[QString("updateTableRowStyle")]);
    m_update_table_row_style_isSet = !json[QString("updateTableRowStyle")].isNull() && m_update_table_row_style_isValid;

    m_update_text_style_isValid = ::OpenAPI::fromJsonValue(m_update_text_style, json[QString("updateTextStyle")]);
    m_update_text_style_isSet = !json[QString("updateTextStyle")].isNull() && m_update_text_style_isValid;
}

QString OAIRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_create_footer.isSet()) {
        obj.insert(QString("createFooter"), ::OpenAPI::toJsonValue(m_create_footer));
    }
    if (m_create_footnote.isSet()) {
        obj.insert(QString("createFootnote"), ::OpenAPI::toJsonValue(m_create_footnote));
    }
    if (m_create_header.isSet()) {
        obj.insert(QString("createHeader"), ::OpenAPI::toJsonValue(m_create_header));
    }
    if (m_create_named_range.isSet()) {
        obj.insert(QString("createNamedRange"), ::OpenAPI::toJsonValue(m_create_named_range));
    }
    if (m_create_paragraph_bullets.isSet()) {
        obj.insert(QString("createParagraphBullets"), ::OpenAPI::toJsonValue(m_create_paragraph_bullets));
    }
    if (m_delete_content_range.isSet()) {
        obj.insert(QString("deleteContentRange"), ::OpenAPI::toJsonValue(m_delete_content_range));
    }
    if (m_delete_footer.isSet()) {
        obj.insert(QString("deleteFooter"), ::OpenAPI::toJsonValue(m_delete_footer));
    }
    if (m_delete_header.isSet()) {
        obj.insert(QString("deleteHeader"), ::OpenAPI::toJsonValue(m_delete_header));
    }
    if (m_delete_named_range.isSet()) {
        obj.insert(QString("deleteNamedRange"), ::OpenAPI::toJsonValue(m_delete_named_range));
    }
    if (m_delete_paragraph_bullets.isSet()) {
        obj.insert(QString("deleteParagraphBullets"), ::OpenAPI::toJsonValue(m_delete_paragraph_bullets));
    }
    if (m_delete_positioned_object.isSet()) {
        obj.insert(QString("deletePositionedObject"), ::OpenAPI::toJsonValue(m_delete_positioned_object));
    }
    if (m_delete_table_column.isSet()) {
        obj.insert(QString("deleteTableColumn"), ::OpenAPI::toJsonValue(m_delete_table_column));
    }
    if (m_delete_table_row.isSet()) {
        obj.insert(QString("deleteTableRow"), ::OpenAPI::toJsonValue(m_delete_table_row));
    }
    if (m_insert_inline_image.isSet()) {
        obj.insert(QString("insertInlineImage"), ::OpenAPI::toJsonValue(m_insert_inline_image));
    }
    if (m_insert_page_break.isSet()) {
        obj.insert(QString("insertPageBreak"), ::OpenAPI::toJsonValue(m_insert_page_break));
    }
    if (m_insert_section_break.isSet()) {
        obj.insert(QString("insertSectionBreak"), ::OpenAPI::toJsonValue(m_insert_section_break));
    }
    if (m_insert_table.isSet()) {
        obj.insert(QString("insertTable"), ::OpenAPI::toJsonValue(m_insert_table));
    }
    if (m_insert_table_column.isSet()) {
        obj.insert(QString("insertTableColumn"), ::OpenAPI::toJsonValue(m_insert_table_column));
    }
    if (m_insert_table_row.isSet()) {
        obj.insert(QString("insertTableRow"), ::OpenAPI::toJsonValue(m_insert_table_row));
    }
    if (m_insert_text.isSet()) {
        obj.insert(QString("insertText"), ::OpenAPI::toJsonValue(m_insert_text));
    }
    if (m_merge_table_cells.isSet()) {
        obj.insert(QString("mergeTableCells"), ::OpenAPI::toJsonValue(m_merge_table_cells));
    }
    if (m_pin_table_header_rows.isSet()) {
        obj.insert(QString("pinTableHeaderRows"), ::OpenAPI::toJsonValue(m_pin_table_header_rows));
    }
    if (m_replace_all_text.isSet()) {
        obj.insert(QString("replaceAllText"), ::OpenAPI::toJsonValue(m_replace_all_text));
    }
    if (m_replace_image.isSet()) {
        obj.insert(QString("replaceImage"), ::OpenAPI::toJsonValue(m_replace_image));
    }
    if (m_replace_named_range_content.isSet()) {
        obj.insert(QString("replaceNamedRangeContent"), ::OpenAPI::toJsonValue(m_replace_named_range_content));
    }
    if (m_unmerge_table_cells.isSet()) {
        obj.insert(QString("unmergeTableCells"), ::OpenAPI::toJsonValue(m_unmerge_table_cells));
    }
    if (m_update_document_style.isSet()) {
        obj.insert(QString("updateDocumentStyle"), ::OpenAPI::toJsonValue(m_update_document_style));
    }
    if (m_update_paragraph_style.isSet()) {
        obj.insert(QString("updateParagraphStyle"), ::OpenAPI::toJsonValue(m_update_paragraph_style));
    }
    if (m_update_section_style.isSet()) {
        obj.insert(QString("updateSectionStyle"), ::OpenAPI::toJsonValue(m_update_section_style));
    }
    if (m_update_table_cell_style.isSet()) {
        obj.insert(QString("updateTableCellStyle"), ::OpenAPI::toJsonValue(m_update_table_cell_style));
    }
    if (m_update_table_column_properties.isSet()) {
        obj.insert(QString("updateTableColumnProperties"), ::OpenAPI::toJsonValue(m_update_table_column_properties));
    }
    if (m_update_table_row_style.isSet()) {
        obj.insert(QString("updateTableRowStyle"), ::OpenAPI::toJsonValue(m_update_table_row_style));
    }
    if (m_update_text_style.isSet()) {
        obj.insert(QString("updateTextStyle"), ::OpenAPI::toJsonValue(m_update_text_style));
    }
    return obj;
}

OAICreateFooterRequest OAIRequest::getCreateFooter() const {
    return m_create_footer;
}
void OAIRequest::setCreateFooter(const OAICreateFooterRequest &create_footer) {
    m_create_footer = create_footer;
    m_create_footer_isSet = true;
}

bool OAIRequest::is_create_footer_Set() const{
    return m_create_footer_isSet;
}

bool OAIRequest::is_create_footer_Valid() const{
    return m_create_footer_isValid;
}

OAICreateFootnoteRequest OAIRequest::getCreateFootnote() const {
    return m_create_footnote;
}
void OAIRequest::setCreateFootnote(const OAICreateFootnoteRequest &create_footnote) {
    m_create_footnote = create_footnote;
    m_create_footnote_isSet = true;
}

bool OAIRequest::is_create_footnote_Set() const{
    return m_create_footnote_isSet;
}

bool OAIRequest::is_create_footnote_Valid() const{
    return m_create_footnote_isValid;
}

OAICreateHeaderRequest OAIRequest::getCreateHeader() const {
    return m_create_header;
}
void OAIRequest::setCreateHeader(const OAICreateHeaderRequest &create_header) {
    m_create_header = create_header;
    m_create_header_isSet = true;
}

bool OAIRequest::is_create_header_Set() const{
    return m_create_header_isSet;
}

bool OAIRequest::is_create_header_Valid() const{
    return m_create_header_isValid;
}

OAICreateNamedRangeRequest OAIRequest::getCreateNamedRange() const {
    return m_create_named_range;
}
void OAIRequest::setCreateNamedRange(const OAICreateNamedRangeRequest &create_named_range) {
    m_create_named_range = create_named_range;
    m_create_named_range_isSet = true;
}

bool OAIRequest::is_create_named_range_Set() const{
    return m_create_named_range_isSet;
}

bool OAIRequest::is_create_named_range_Valid() const{
    return m_create_named_range_isValid;
}

OAICreateParagraphBulletsRequest OAIRequest::getCreateParagraphBullets() const {
    return m_create_paragraph_bullets;
}
void OAIRequest::setCreateParagraphBullets(const OAICreateParagraphBulletsRequest &create_paragraph_bullets) {
    m_create_paragraph_bullets = create_paragraph_bullets;
    m_create_paragraph_bullets_isSet = true;
}

bool OAIRequest::is_create_paragraph_bullets_Set() const{
    return m_create_paragraph_bullets_isSet;
}

bool OAIRequest::is_create_paragraph_bullets_Valid() const{
    return m_create_paragraph_bullets_isValid;
}

OAIDeleteContentRangeRequest OAIRequest::getDeleteContentRange() const {
    return m_delete_content_range;
}
void OAIRequest::setDeleteContentRange(const OAIDeleteContentRangeRequest &delete_content_range) {
    m_delete_content_range = delete_content_range;
    m_delete_content_range_isSet = true;
}

bool OAIRequest::is_delete_content_range_Set() const{
    return m_delete_content_range_isSet;
}

bool OAIRequest::is_delete_content_range_Valid() const{
    return m_delete_content_range_isValid;
}

OAIDeleteFooterRequest OAIRequest::getDeleteFooter() const {
    return m_delete_footer;
}
void OAIRequest::setDeleteFooter(const OAIDeleteFooterRequest &delete_footer) {
    m_delete_footer = delete_footer;
    m_delete_footer_isSet = true;
}

bool OAIRequest::is_delete_footer_Set() const{
    return m_delete_footer_isSet;
}

bool OAIRequest::is_delete_footer_Valid() const{
    return m_delete_footer_isValid;
}

OAIDeleteHeaderRequest OAIRequest::getDeleteHeader() const {
    return m_delete_header;
}
void OAIRequest::setDeleteHeader(const OAIDeleteHeaderRequest &delete_header) {
    m_delete_header = delete_header;
    m_delete_header_isSet = true;
}

bool OAIRequest::is_delete_header_Set() const{
    return m_delete_header_isSet;
}

bool OAIRequest::is_delete_header_Valid() const{
    return m_delete_header_isValid;
}

OAIDeleteNamedRangeRequest OAIRequest::getDeleteNamedRange() const {
    return m_delete_named_range;
}
void OAIRequest::setDeleteNamedRange(const OAIDeleteNamedRangeRequest &delete_named_range) {
    m_delete_named_range = delete_named_range;
    m_delete_named_range_isSet = true;
}

bool OAIRequest::is_delete_named_range_Set() const{
    return m_delete_named_range_isSet;
}

bool OAIRequest::is_delete_named_range_Valid() const{
    return m_delete_named_range_isValid;
}

OAIDeleteParagraphBulletsRequest OAIRequest::getDeleteParagraphBullets() const {
    return m_delete_paragraph_bullets;
}
void OAIRequest::setDeleteParagraphBullets(const OAIDeleteParagraphBulletsRequest &delete_paragraph_bullets) {
    m_delete_paragraph_bullets = delete_paragraph_bullets;
    m_delete_paragraph_bullets_isSet = true;
}

bool OAIRequest::is_delete_paragraph_bullets_Set() const{
    return m_delete_paragraph_bullets_isSet;
}

bool OAIRequest::is_delete_paragraph_bullets_Valid() const{
    return m_delete_paragraph_bullets_isValid;
}

OAIDeletePositionedObjectRequest OAIRequest::getDeletePositionedObject() const {
    return m_delete_positioned_object;
}
void OAIRequest::setDeletePositionedObject(const OAIDeletePositionedObjectRequest &delete_positioned_object) {
    m_delete_positioned_object = delete_positioned_object;
    m_delete_positioned_object_isSet = true;
}

bool OAIRequest::is_delete_positioned_object_Set() const{
    return m_delete_positioned_object_isSet;
}

bool OAIRequest::is_delete_positioned_object_Valid() const{
    return m_delete_positioned_object_isValid;
}

OAIDeleteTableColumnRequest OAIRequest::getDeleteTableColumn() const {
    return m_delete_table_column;
}
void OAIRequest::setDeleteTableColumn(const OAIDeleteTableColumnRequest &delete_table_column) {
    m_delete_table_column = delete_table_column;
    m_delete_table_column_isSet = true;
}

bool OAIRequest::is_delete_table_column_Set() const{
    return m_delete_table_column_isSet;
}

bool OAIRequest::is_delete_table_column_Valid() const{
    return m_delete_table_column_isValid;
}

OAIDeleteTableRowRequest OAIRequest::getDeleteTableRow() const {
    return m_delete_table_row;
}
void OAIRequest::setDeleteTableRow(const OAIDeleteTableRowRequest &delete_table_row) {
    m_delete_table_row = delete_table_row;
    m_delete_table_row_isSet = true;
}

bool OAIRequest::is_delete_table_row_Set() const{
    return m_delete_table_row_isSet;
}

bool OAIRequest::is_delete_table_row_Valid() const{
    return m_delete_table_row_isValid;
}

OAIInsertInlineImageRequest OAIRequest::getInsertInlineImage() const {
    return m_insert_inline_image;
}
void OAIRequest::setInsertInlineImage(const OAIInsertInlineImageRequest &insert_inline_image) {
    m_insert_inline_image = insert_inline_image;
    m_insert_inline_image_isSet = true;
}

bool OAIRequest::is_insert_inline_image_Set() const{
    return m_insert_inline_image_isSet;
}

bool OAIRequest::is_insert_inline_image_Valid() const{
    return m_insert_inline_image_isValid;
}

OAIInsertPageBreakRequest OAIRequest::getInsertPageBreak() const {
    return m_insert_page_break;
}
void OAIRequest::setInsertPageBreak(const OAIInsertPageBreakRequest &insert_page_break) {
    m_insert_page_break = insert_page_break;
    m_insert_page_break_isSet = true;
}

bool OAIRequest::is_insert_page_break_Set() const{
    return m_insert_page_break_isSet;
}

bool OAIRequest::is_insert_page_break_Valid() const{
    return m_insert_page_break_isValid;
}

OAIInsertSectionBreakRequest OAIRequest::getInsertSectionBreak() const {
    return m_insert_section_break;
}
void OAIRequest::setInsertSectionBreak(const OAIInsertSectionBreakRequest &insert_section_break) {
    m_insert_section_break = insert_section_break;
    m_insert_section_break_isSet = true;
}

bool OAIRequest::is_insert_section_break_Set() const{
    return m_insert_section_break_isSet;
}

bool OAIRequest::is_insert_section_break_Valid() const{
    return m_insert_section_break_isValid;
}

OAIInsertTableRequest OAIRequest::getInsertTable() const {
    return m_insert_table;
}
void OAIRequest::setInsertTable(const OAIInsertTableRequest &insert_table) {
    m_insert_table = insert_table;
    m_insert_table_isSet = true;
}

bool OAIRequest::is_insert_table_Set() const{
    return m_insert_table_isSet;
}

bool OAIRequest::is_insert_table_Valid() const{
    return m_insert_table_isValid;
}

OAIInsertTableColumnRequest OAIRequest::getInsertTableColumn() const {
    return m_insert_table_column;
}
void OAIRequest::setInsertTableColumn(const OAIInsertTableColumnRequest &insert_table_column) {
    m_insert_table_column = insert_table_column;
    m_insert_table_column_isSet = true;
}

bool OAIRequest::is_insert_table_column_Set() const{
    return m_insert_table_column_isSet;
}

bool OAIRequest::is_insert_table_column_Valid() const{
    return m_insert_table_column_isValid;
}

OAIInsertTableRowRequest OAIRequest::getInsertTableRow() const {
    return m_insert_table_row;
}
void OAIRequest::setInsertTableRow(const OAIInsertTableRowRequest &insert_table_row) {
    m_insert_table_row = insert_table_row;
    m_insert_table_row_isSet = true;
}

bool OAIRequest::is_insert_table_row_Set() const{
    return m_insert_table_row_isSet;
}

bool OAIRequest::is_insert_table_row_Valid() const{
    return m_insert_table_row_isValid;
}

OAIInsertTextRequest OAIRequest::getInsertText() const {
    return m_insert_text;
}
void OAIRequest::setInsertText(const OAIInsertTextRequest &insert_text) {
    m_insert_text = insert_text;
    m_insert_text_isSet = true;
}

bool OAIRequest::is_insert_text_Set() const{
    return m_insert_text_isSet;
}

bool OAIRequest::is_insert_text_Valid() const{
    return m_insert_text_isValid;
}

OAIMergeTableCellsRequest OAIRequest::getMergeTableCells() const {
    return m_merge_table_cells;
}
void OAIRequest::setMergeTableCells(const OAIMergeTableCellsRequest &merge_table_cells) {
    m_merge_table_cells = merge_table_cells;
    m_merge_table_cells_isSet = true;
}

bool OAIRequest::is_merge_table_cells_Set() const{
    return m_merge_table_cells_isSet;
}

bool OAIRequest::is_merge_table_cells_Valid() const{
    return m_merge_table_cells_isValid;
}

OAIPinTableHeaderRowsRequest OAIRequest::getPinTableHeaderRows() const {
    return m_pin_table_header_rows;
}
void OAIRequest::setPinTableHeaderRows(const OAIPinTableHeaderRowsRequest &pin_table_header_rows) {
    m_pin_table_header_rows = pin_table_header_rows;
    m_pin_table_header_rows_isSet = true;
}

bool OAIRequest::is_pin_table_header_rows_Set() const{
    return m_pin_table_header_rows_isSet;
}

bool OAIRequest::is_pin_table_header_rows_Valid() const{
    return m_pin_table_header_rows_isValid;
}

OAIReplaceAllTextRequest OAIRequest::getReplaceAllText() const {
    return m_replace_all_text;
}
void OAIRequest::setReplaceAllText(const OAIReplaceAllTextRequest &replace_all_text) {
    m_replace_all_text = replace_all_text;
    m_replace_all_text_isSet = true;
}

bool OAIRequest::is_replace_all_text_Set() const{
    return m_replace_all_text_isSet;
}

bool OAIRequest::is_replace_all_text_Valid() const{
    return m_replace_all_text_isValid;
}

OAIReplaceImageRequest OAIRequest::getReplaceImage() const {
    return m_replace_image;
}
void OAIRequest::setReplaceImage(const OAIReplaceImageRequest &replace_image) {
    m_replace_image = replace_image;
    m_replace_image_isSet = true;
}

bool OAIRequest::is_replace_image_Set() const{
    return m_replace_image_isSet;
}

bool OAIRequest::is_replace_image_Valid() const{
    return m_replace_image_isValid;
}

OAIReplaceNamedRangeContentRequest OAIRequest::getReplaceNamedRangeContent() const {
    return m_replace_named_range_content;
}
void OAIRequest::setReplaceNamedRangeContent(const OAIReplaceNamedRangeContentRequest &replace_named_range_content) {
    m_replace_named_range_content = replace_named_range_content;
    m_replace_named_range_content_isSet = true;
}

bool OAIRequest::is_replace_named_range_content_Set() const{
    return m_replace_named_range_content_isSet;
}

bool OAIRequest::is_replace_named_range_content_Valid() const{
    return m_replace_named_range_content_isValid;
}

OAIUnmergeTableCellsRequest OAIRequest::getUnmergeTableCells() const {
    return m_unmerge_table_cells;
}
void OAIRequest::setUnmergeTableCells(const OAIUnmergeTableCellsRequest &unmerge_table_cells) {
    m_unmerge_table_cells = unmerge_table_cells;
    m_unmerge_table_cells_isSet = true;
}

bool OAIRequest::is_unmerge_table_cells_Set() const{
    return m_unmerge_table_cells_isSet;
}

bool OAIRequest::is_unmerge_table_cells_Valid() const{
    return m_unmerge_table_cells_isValid;
}

OAIUpdateDocumentStyleRequest OAIRequest::getUpdateDocumentStyle() const {
    return m_update_document_style;
}
void OAIRequest::setUpdateDocumentStyle(const OAIUpdateDocumentStyleRequest &update_document_style) {
    m_update_document_style = update_document_style;
    m_update_document_style_isSet = true;
}

bool OAIRequest::is_update_document_style_Set() const{
    return m_update_document_style_isSet;
}

bool OAIRequest::is_update_document_style_Valid() const{
    return m_update_document_style_isValid;
}

OAIUpdateParagraphStyleRequest OAIRequest::getUpdateParagraphStyle() const {
    return m_update_paragraph_style;
}
void OAIRequest::setUpdateParagraphStyle(const OAIUpdateParagraphStyleRequest &update_paragraph_style) {
    m_update_paragraph_style = update_paragraph_style;
    m_update_paragraph_style_isSet = true;
}

bool OAIRequest::is_update_paragraph_style_Set() const{
    return m_update_paragraph_style_isSet;
}

bool OAIRequest::is_update_paragraph_style_Valid() const{
    return m_update_paragraph_style_isValid;
}

OAIUpdateSectionStyleRequest OAIRequest::getUpdateSectionStyle() const {
    return m_update_section_style;
}
void OAIRequest::setUpdateSectionStyle(const OAIUpdateSectionStyleRequest &update_section_style) {
    m_update_section_style = update_section_style;
    m_update_section_style_isSet = true;
}

bool OAIRequest::is_update_section_style_Set() const{
    return m_update_section_style_isSet;
}

bool OAIRequest::is_update_section_style_Valid() const{
    return m_update_section_style_isValid;
}

OAIUpdateTableCellStyleRequest OAIRequest::getUpdateTableCellStyle() const {
    return m_update_table_cell_style;
}
void OAIRequest::setUpdateTableCellStyle(const OAIUpdateTableCellStyleRequest &update_table_cell_style) {
    m_update_table_cell_style = update_table_cell_style;
    m_update_table_cell_style_isSet = true;
}

bool OAIRequest::is_update_table_cell_style_Set() const{
    return m_update_table_cell_style_isSet;
}

bool OAIRequest::is_update_table_cell_style_Valid() const{
    return m_update_table_cell_style_isValid;
}

OAIUpdateTableColumnPropertiesRequest OAIRequest::getUpdateTableColumnProperties() const {
    return m_update_table_column_properties;
}
void OAIRequest::setUpdateTableColumnProperties(const OAIUpdateTableColumnPropertiesRequest &update_table_column_properties) {
    m_update_table_column_properties = update_table_column_properties;
    m_update_table_column_properties_isSet = true;
}

bool OAIRequest::is_update_table_column_properties_Set() const{
    return m_update_table_column_properties_isSet;
}

bool OAIRequest::is_update_table_column_properties_Valid() const{
    return m_update_table_column_properties_isValid;
}

OAIUpdateTableRowStyleRequest OAIRequest::getUpdateTableRowStyle() const {
    return m_update_table_row_style;
}
void OAIRequest::setUpdateTableRowStyle(const OAIUpdateTableRowStyleRequest &update_table_row_style) {
    m_update_table_row_style = update_table_row_style;
    m_update_table_row_style_isSet = true;
}

bool OAIRequest::is_update_table_row_style_Set() const{
    return m_update_table_row_style_isSet;
}

bool OAIRequest::is_update_table_row_style_Valid() const{
    return m_update_table_row_style_isValid;
}

OAIUpdateTextStyleRequest OAIRequest::getUpdateTextStyle() const {
    return m_update_text_style;
}
void OAIRequest::setUpdateTextStyle(const OAIUpdateTextStyleRequest &update_text_style) {
    m_update_text_style = update_text_style;
    m_update_text_style_isSet = true;
}

bool OAIRequest::is_update_text_style_Set() const{
    return m_update_text_style_isSet;
}

bool OAIRequest::is_update_text_style_Valid() const{
    return m_update_text_style_isValid;
}

bool OAIRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_create_footer.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_footnote.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_header.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_named_range.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_paragraph_bullets.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_delete_content_range.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_delete_footer.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_delete_header.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_delete_named_range.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_delete_paragraph_bullets.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_delete_positioned_object.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_delete_table_column.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_delete_table_row.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_insert_inline_image.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_insert_page_break.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_insert_section_break.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_insert_table.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_insert_table_column.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_insert_table_row.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_insert_text.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_merge_table_cells.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pin_table_header_rows.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_replace_all_text.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_replace_image.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_replace_named_range_content.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_unmerge_table_cells.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_document_style.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_paragraph_style.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_section_style.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_table_cell_style.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_table_column_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_table_row_style.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_text_style.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
