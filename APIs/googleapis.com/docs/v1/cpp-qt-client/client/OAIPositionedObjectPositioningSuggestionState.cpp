/**
 * Google Docs API
 * Reads and writes Google Docs documents.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPositionedObjectPositioningSuggestionState.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPositionedObjectPositioningSuggestionState::OAIPositionedObjectPositioningSuggestionState(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPositionedObjectPositioningSuggestionState::OAIPositionedObjectPositioningSuggestionState() {
    this->initializeModel();
}

OAIPositionedObjectPositioningSuggestionState::~OAIPositionedObjectPositioningSuggestionState() {}

void OAIPositionedObjectPositioningSuggestionState::initializeModel() {

    m_layout_suggested_isSet = false;
    m_layout_suggested_isValid = false;

    m_left_offset_suggested_isSet = false;
    m_left_offset_suggested_isValid = false;

    m_top_offset_suggested_isSet = false;
    m_top_offset_suggested_isValid = false;
}

void OAIPositionedObjectPositioningSuggestionState::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPositionedObjectPositioningSuggestionState::fromJsonObject(QJsonObject json) {

    m_layout_suggested_isValid = ::OpenAPI::fromJsonValue(m_layout_suggested, json[QString("layoutSuggested")]);
    m_layout_suggested_isSet = !json[QString("layoutSuggested")].isNull() && m_layout_suggested_isValid;

    m_left_offset_suggested_isValid = ::OpenAPI::fromJsonValue(m_left_offset_suggested, json[QString("leftOffsetSuggested")]);
    m_left_offset_suggested_isSet = !json[QString("leftOffsetSuggested")].isNull() && m_left_offset_suggested_isValid;

    m_top_offset_suggested_isValid = ::OpenAPI::fromJsonValue(m_top_offset_suggested, json[QString("topOffsetSuggested")]);
    m_top_offset_suggested_isSet = !json[QString("topOffsetSuggested")].isNull() && m_top_offset_suggested_isValid;
}

QString OAIPositionedObjectPositioningSuggestionState::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPositionedObjectPositioningSuggestionState::asJsonObject() const {
    QJsonObject obj;
    if (m_layout_suggested_isSet) {
        obj.insert(QString("layoutSuggested"), ::OpenAPI::toJsonValue(m_layout_suggested));
    }
    if (m_left_offset_suggested_isSet) {
        obj.insert(QString("leftOffsetSuggested"), ::OpenAPI::toJsonValue(m_left_offset_suggested));
    }
    if (m_top_offset_suggested_isSet) {
        obj.insert(QString("topOffsetSuggested"), ::OpenAPI::toJsonValue(m_top_offset_suggested));
    }
    return obj;
}

bool OAIPositionedObjectPositioningSuggestionState::isLayoutSuggested() const {
    return m_layout_suggested;
}
void OAIPositionedObjectPositioningSuggestionState::setLayoutSuggested(const bool &layout_suggested) {
    m_layout_suggested = layout_suggested;
    m_layout_suggested_isSet = true;
}

bool OAIPositionedObjectPositioningSuggestionState::is_layout_suggested_Set() const{
    return m_layout_suggested_isSet;
}

bool OAIPositionedObjectPositioningSuggestionState::is_layout_suggested_Valid() const{
    return m_layout_suggested_isValid;
}

bool OAIPositionedObjectPositioningSuggestionState::isLeftOffsetSuggested() const {
    return m_left_offset_suggested;
}
void OAIPositionedObjectPositioningSuggestionState::setLeftOffsetSuggested(const bool &left_offset_suggested) {
    m_left_offset_suggested = left_offset_suggested;
    m_left_offset_suggested_isSet = true;
}

bool OAIPositionedObjectPositioningSuggestionState::is_left_offset_suggested_Set() const{
    return m_left_offset_suggested_isSet;
}

bool OAIPositionedObjectPositioningSuggestionState::is_left_offset_suggested_Valid() const{
    return m_left_offset_suggested_isValid;
}

bool OAIPositionedObjectPositioningSuggestionState::isTopOffsetSuggested() const {
    return m_top_offset_suggested;
}
void OAIPositionedObjectPositioningSuggestionState::setTopOffsetSuggested(const bool &top_offset_suggested) {
    m_top_offset_suggested = top_offset_suggested;
    m_top_offset_suggested_isSet = true;
}

bool OAIPositionedObjectPositioningSuggestionState::is_top_offset_suggested_Set() const{
    return m_top_offset_suggested_isSet;
}

bool OAIPositionedObjectPositioningSuggestionState::is_top_offset_suggested_Valid() const{
    return m_top_offset_suggested_isValid;
}

bool OAIPositionedObjectPositioningSuggestionState::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_layout_suggested_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_left_offset_suggested_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_top_offset_suggested_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPositionedObjectPositioningSuggestionState::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
