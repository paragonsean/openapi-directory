/**
 * Google Docs API
 * Reads and writes Google Docs documents.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDocumentStyle.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDocumentStyle::OAIDocumentStyle(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDocumentStyle::OAIDocumentStyle() {
    this->initializeModel();
}

OAIDocumentStyle::~OAIDocumentStyle() {}

void OAIDocumentStyle::initializeModel() {

    m_background_isSet = false;
    m_background_isValid = false;

    m_default_footer_id_isSet = false;
    m_default_footer_id_isValid = false;

    m_default_header_id_isSet = false;
    m_default_header_id_isValid = false;

    m_even_page_footer_id_isSet = false;
    m_even_page_footer_id_isValid = false;

    m_even_page_header_id_isSet = false;
    m_even_page_header_id_isValid = false;

    m_first_page_footer_id_isSet = false;
    m_first_page_footer_id_isValid = false;

    m_first_page_header_id_isSet = false;
    m_first_page_header_id_isValid = false;

    m_flip_page_orientation_isSet = false;
    m_flip_page_orientation_isValid = false;

    m_margin_bottom_isSet = false;
    m_margin_bottom_isValid = false;

    m_margin_footer_isSet = false;
    m_margin_footer_isValid = false;

    m_margin_header_isSet = false;
    m_margin_header_isValid = false;

    m_margin_left_isSet = false;
    m_margin_left_isValid = false;

    m_margin_right_isSet = false;
    m_margin_right_isValid = false;

    m_margin_top_isSet = false;
    m_margin_top_isValid = false;

    m_page_number_start_isSet = false;
    m_page_number_start_isValid = false;

    m_page_size_isSet = false;
    m_page_size_isValid = false;

    m_use_custom_header_footer_margins_isSet = false;
    m_use_custom_header_footer_margins_isValid = false;

    m_use_even_page_header_footer_isSet = false;
    m_use_even_page_header_footer_isValid = false;

    m_use_first_page_header_footer_isSet = false;
    m_use_first_page_header_footer_isValid = false;
}

void OAIDocumentStyle::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDocumentStyle::fromJsonObject(QJsonObject json) {

    m_background_isValid = ::OpenAPI::fromJsonValue(m_background, json[QString("background")]);
    m_background_isSet = !json[QString("background")].isNull() && m_background_isValid;

    m_default_footer_id_isValid = ::OpenAPI::fromJsonValue(m_default_footer_id, json[QString("defaultFooterId")]);
    m_default_footer_id_isSet = !json[QString("defaultFooterId")].isNull() && m_default_footer_id_isValid;

    m_default_header_id_isValid = ::OpenAPI::fromJsonValue(m_default_header_id, json[QString("defaultHeaderId")]);
    m_default_header_id_isSet = !json[QString("defaultHeaderId")].isNull() && m_default_header_id_isValid;

    m_even_page_footer_id_isValid = ::OpenAPI::fromJsonValue(m_even_page_footer_id, json[QString("evenPageFooterId")]);
    m_even_page_footer_id_isSet = !json[QString("evenPageFooterId")].isNull() && m_even_page_footer_id_isValid;

    m_even_page_header_id_isValid = ::OpenAPI::fromJsonValue(m_even_page_header_id, json[QString("evenPageHeaderId")]);
    m_even_page_header_id_isSet = !json[QString("evenPageHeaderId")].isNull() && m_even_page_header_id_isValid;

    m_first_page_footer_id_isValid = ::OpenAPI::fromJsonValue(m_first_page_footer_id, json[QString("firstPageFooterId")]);
    m_first_page_footer_id_isSet = !json[QString("firstPageFooterId")].isNull() && m_first_page_footer_id_isValid;

    m_first_page_header_id_isValid = ::OpenAPI::fromJsonValue(m_first_page_header_id, json[QString("firstPageHeaderId")]);
    m_first_page_header_id_isSet = !json[QString("firstPageHeaderId")].isNull() && m_first_page_header_id_isValid;

    m_flip_page_orientation_isValid = ::OpenAPI::fromJsonValue(m_flip_page_orientation, json[QString("flipPageOrientation")]);
    m_flip_page_orientation_isSet = !json[QString("flipPageOrientation")].isNull() && m_flip_page_orientation_isValid;

    m_margin_bottom_isValid = ::OpenAPI::fromJsonValue(m_margin_bottom, json[QString("marginBottom")]);
    m_margin_bottom_isSet = !json[QString("marginBottom")].isNull() && m_margin_bottom_isValid;

    m_margin_footer_isValid = ::OpenAPI::fromJsonValue(m_margin_footer, json[QString("marginFooter")]);
    m_margin_footer_isSet = !json[QString("marginFooter")].isNull() && m_margin_footer_isValid;

    m_margin_header_isValid = ::OpenAPI::fromJsonValue(m_margin_header, json[QString("marginHeader")]);
    m_margin_header_isSet = !json[QString("marginHeader")].isNull() && m_margin_header_isValid;

    m_margin_left_isValid = ::OpenAPI::fromJsonValue(m_margin_left, json[QString("marginLeft")]);
    m_margin_left_isSet = !json[QString("marginLeft")].isNull() && m_margin_left_isValid;

    m_margin_right_isValid = ::OpenAPI::fromJsonValue(m_margin_right, json[QString("marginRight")]);
    m_margin_right_isSet = !json[QString("marginRight")].isNull() && m_margin_right_isValid;

    m_margin_top_isValid = ::OpenAPI::fromJsonValue(m_margin_top, json[QString("marginTop")]);
    m_margin_top_isSet = !json[QString("marginTop")].isNull() && m_margin_top_isValid;

    m_page_number_start_isValid = ::OpenAPI::fromJsonValue(m_page_number_start, json[QString("pageNumberStart")]);
    m_page_number_start_isSet = !json[QString("pageNumberStart")].isNull() && m_page_number_start_isValid;

    m_page_size_isValid = ::OpenAPI::fromJsonValue(m_page_size, json[QString("pageSize")]);
    m_page_size_isSet = !json[QString("pageSize")].isNull() && m_page_size_isValid;

    m_use_custom_header_footer_margins_isValid = ::OpenAPI::fromJsonValue(m_use_custom_header_footer_margins, json[QString("useCustomHeaderFooterMargins")]);
    m_use_custom_header_footer_margins_isSet = !json[QString("useCustomHeaderFooterMargins")].isNull() && m_use_custom_header_footer_margins_isValid;

    m_use_even_page_header_footer_isValid = ::OpenAPI::fromJsonValue(m_use_even_page_header_footer, json[QString("useEvenPageHeaderFooter")]);
    m_use_even_page_header_footer_isSet = !json[QString("useEvenPageHeaderFooter")].isNull() && m_use_even_page_header_footer_isValid;

    m_use_first_page_header_footer_isValid = ::OpenAPI::fromJsonValue(m_use_first_page_header_footer, json[QString("useFirstPageHeaderFooter")]);
    m_use_first_page_header_footer_isSet = !json[QString("useFirstPageHeaderFooter")].isNull() && m_use_first_page_header_footer_isValid;
}

QString OAIDocumentStyle::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDocumentStyle::asJsonObject() const {
    QJsonObject obj;
    if (m_background.isSet()) {
        obj.insert(QString("background"), ::OpenAPI::toJsonValue(m_background));
    }
    if (m_default_footer_id_isSet) {
        obj.insert(QString("defaultFooterId"), ::OpenAPI::toJsonValue(m_default_footer_id));
    }
    if (m_default_header_id_isSet) {
        obj.insert(QString("defaultHeaderId"), ::OpenAPI::toJsonValue(m_default_header_id));
    }
    if (m_even_page_footer_id_isSet) {
        obj.insert(QString("evenPageFooterId"), ::OpenAPI::toJsonValue(m_even_page_footer_id));
    }
    if (m_even_page_header_id_isSet) {
        obj.insert(QString("evenPageHeaderId"), ::OpenAPI::toJsonValue(m_even_page_header_id));
    }
    if (m_first_page_footer_id_isSet) {
        obj.insert(QString("firstPageFooterId"), ::OpenAPI::toJsonValue(m_first_page_footer_id));
    }
    if (m_first_page_header_id_isSet) {
        obj.insert(QString("firstPageHeaderId"), ::OpenAPI::toJsonValue(m_first_page_header_id));
    }
    if (m_flip_page_orientation_isSet) {
        obj.insert(QString("flipPageOrientation"), ::OpenAPI::toJsonValue(m_flip_page_orientation));
    }
    if (m_margin_bottom.isSet()) {
        obj.insert(QString("marginBottom"), ::OpenAPI::toJsonValue(m_margin_bottom));
    }
    if (m_margin_footer.isSet()) {
        obj.insert(QString("marginFooter"), ::OpenAPI::toJsonValue(m_margin_footer));
    }
    if (m_margin_header.isSet()) {
        obj.insert(QString("marginHeader"), ::OpenAPI::toJsonValue(m_margin_header));
    }
    if (m_margin_left.isSet()) {
        obj.insert(QString("marginLeft"), ::OpenAPI::toJsonValue(m_margin_left));
    }
    if (m_margin_right.isSet()) {
        obj.insert(QString("marginRight"), ::OpenAPI::toJsonValue(m_margin_right));
    }
    if (m_margin_top.isSet()) {
        obj.insert(QString("marginTop"), ::OpenAPI::toJsonValue(m_margin_top));
    }
    if (m_page_number_start_isSet) {
        obj.insert(QString("pageNumberStart"), ::OpenAPI::toJsonValue(m_page_number_start));
    }
    if (m_page_size.isSet()) {
        obj.insert(QString("pageSize"), ::OpenAPI::toJsonValue(m_page_size));
    }
    if (m_use_custom_header_footer_margins_isSet) {
        obj.insert(QString("useCustomHeaderFooterMargins"), ::OpenAPI::toJsonValue(m_use_custom_header_footer_margins));
    }
    if (m_use_even_page_header_footer_isSet) {
        obj.insert(QString("useEvenPageHeaderFooter"), ::OpenAPI::toJsonValue(m_use_even_page_header_footer));
    }
    if (m_use_first_page_header_footer_isSet) {
        obj.insert(QString("useFirstPageHeaderFooter"), ::OpenAPI::toJsonValue(m_use_first_page_header_footer));
    }
    return obj;
}

OAIBackground OAIDocumentStyle::getBackground() const {
    return m_background;
}
void OAIDocumentStyle::setBackground(const OAIBackground &background) {
    m_background = background;
    m_background_isSet = true;
}

bool OAIDocumentStyle::is_background_Set() const{
    return m_background_isSet;
}

bool OAIDocumentStyle::is_background_Valid() const{
    return m_background_isValid;
}

QString OAIDocumentStyle::getDefaultFooterId() const {
    return m_default_footer_id;
}
void OAIDocumentStyle::setDefaultFooterId(const QString &default_footer_id) {
    m_default_footer_id = default_footer_id;
    m_default_footer_id_isSet = true;
}

bool OAIDocumentStyle::is_default_footer_id_Set() const{
    return m_default_footer_id_isSet;
}

bool OAIDocumentStyle::is_default_footer_id_Valid() const{
    return m_default_footer_id_isValid;
}

QString OAIDocumentStyle::getDefaultHeaderId() const {
    return m_default_header_id;
}
void OAIDocumentStyle::setDefaultHeaderId(const QString &default_header_id) {
    m_default_header_id = default_header_id;
    m_default_header_id_isSet = true;
}

bool OAIDocumentStyle::is_default_header_id_Set() const{
    return m_default_header_id_isSet;
}

bool OAIDocumentStyle::is_default_header_id_Valid() const{
    return m_default_header_id_isValid;
}

QString OAIDocumentStyle::getEvenPageFooterId() const {
    return m_even_page_footer_id;
}
void OAIDocumentStyle::setEvenPageFooterId(const QString &even_page_footer_id) {
    m_even_page_footer_id = even_page_footer_id;
    m_even_page_footer_id_isSet = true;
}

bool OAIDocumentStyle::is_even_page_footer_id_Set() const{
    return m_even_page_footer_id_isSet;
}

bool OAIDocumentStyle::is_even_page_footer_id_Valid() const{
    return m_even_page_footer_id_isValid;
}

QString OAIDocumentStyle::getEvenPageHeaderId() const {
    return m_even_page_header_id;
}
void OAIDocumentStyle::setEvenPageHeaderId(const QString &even_page_header_id) {
    m_even_page_header_id = even_page_header_id;
    m_even_page_header_id_isSet = true;
}

bool OAIDocumentStyle::is_even_page_header_id_Set() const{
    return m_even_page_header_id_isSet;
}

bool OAIDocumentStyle::is_even_page_header_id_Valid() const{
    return m_even_page_header_id_isValid;
}

QString OAIDocumentStyle::getFirstPageFooterId() const {
    return m_first_page_footer_id;
}
void OAIDocumentStyle::setFirstPageFooterId(const QString &first_page_footer_id) {
    m_first_page_footer_id = first_page_footer_id;
    m_first_page_footer_id_isSet = true;
}

bool OAIDocumentStyle::is_first_page_footer_id_Set() const{
    return m_first_page_footer_id_isSet;
}

bool OAIDocumentStyle::is_first_page_footer_id_Valid() const{
    return m_first_page_footer_id_isValid;
}

QString OAIDocumentStyle::getFirstPageHeaderId() const {
    return m_first_page_header_id;
}
void OAIDocumentStyle::setFirstPageHeaderId(const QString &first_page_header_id) {
    m_first_page_header_id = first_page_header_id;
    m_first_page_header_id_isSet = true;
}

bool OAIDocumentStyle::is_first_page_header_id_Set() const{
    return m_first_page_header_id_isSet;
}

bool OAIDocumentStyle::is_first_page_header_id_Valid() const{
    return m_first_page_header_id_isValid;
}

bool OAIDocumentStyle::isFlipPageOrientation() const {
    return m_flip_page_orientation;
}
void OAIDocumentStyle::setFlipPageOrientation(const bool &flip_page_orientation) {
    m_flip_page_orientation = flip_page_orientation;
    m_flip_page_orientation_isSet = true;
}

bool OAIDocumentStyle::is_flip_page_orientation_Set() const{
    return m_flip_page_orientation_isSet;
}

bool OAIDocumentStyle::is_flip_page_orientation_Valid() const{
    return m_flip_page_orientation_isValid;
}

OAIDimension OAIDocumentStyle::getMarginBottom() const {
    return m_margin_bottom;
}
void OAIDocumentStyle::setMarginBottom(const OAIDimension &margin_bottom) {
    m_margin_bottom = margin_bottom;
    m_margin_bottom_isSet = true;
}

bool OAIDocumentStyle::is_margin_bottom_Set() const{
    return m_margin_bottom_isSet;
}

bool OAIDocumentStyle::is_margin_bottom_Valid() const{
    return m_margin_bottom_isValid;
}

OAIDimension OAIDocumentStyle::getMarginFooter() const {
    return m_margin_footer;
}
void OAIDocumentStyle::setMarginFooter(const OAIDimension &margin_footer) {
    m_margin_footer = margin_footer;
    m_margin_footer_isSet = true;
}

bool OAIDocumentStyle::is_margin_footer_Set() const{
    return m_margin_footer_isSet;
}

bool OAIDocumentStyle::is_margin_footer_Valid() const{
    return m_margin_footer_isValid;
}

OAIDimension OAIDocumentStyle::getMarginHeader() const {
    return m_margin_header;
}
void OAIDocumentStyle::setMarginHeader(const OAIDimension &margin_header) {
    m_margin_header = margin_header;
    m_margin_header_isSet = true;
}

bool OAIDocumentStyle::is_margin_header_Set() const{
    return m_margin_header_isSet;
}

bool OAIDocumentStyle::is_margin_header_Valid() const{
    return m_margin_header_isValid;
}

OAIDimension OAIDocumentStyle::getMarginLeft() const {
    return m_margin_left;
}
void OAIDocumentStyle::setMarginLeft(const OAIDimension &margin_left) {
    m_margin_left = margin_left;
    m_margin_left_isSet = true;
}

bool OAIDocumentStyle::is_margin_left_Set() const{
    return m_margin_left_isSet;
}

bool OAIDocumentStyle::is_margin_left_Valid() const{
    return m_margin_left_isValid;
}

OAIDimension OAIDocumentStyle::getMarginRight() const {
    return m_margin_right;
}
void OAIDocumentStyle::setMarginRight(const OAIDimension &margin_right) {
    m_margin_right = margin_right;
    m_margin_right_isSet = true;
}

bool OAIDocumentStyle::is_margin_right_Set() const{
    return m_margin_right_isSet;
}

bool OAIDocumentStyle::is_margin_right_Valid() const{
    return m_margin_right_isValid;
}

OAIDimension OAIDocumentStyle::getMarginTop() const {
    return m_margin_top;
}
void OAIDocumentStyle::setMarginTop(const OAIDimension &margin_top) {
    m_margin_top = margin_top;
    m_margin_top_isSet = true;
}

bool OAIDocumentStyle::is_margin_top_Set() const{
    return m_margin_top_isSet;
}

bool OAIDocumentStyle::is_margin_top_Valid() const{
    return m_margin_top_isValid;
}

qint32 OAIDocumentStyle::getPageNumberStart() const {
    return m_page_number_start;
}
void OAIDocumentStyle::setPageNumberStart(const qint32 &page_number_start) {
    m_page_number_start = page_number_start;
    m_page_number_start_isSet = true;
}

bool OAIDocumentStyle::is_page_number_start_Set() const{
    return m_page_number_start_isSet;
}

bool OAIDocumentStyle::is_page_number_start_Valid() const{
    return m_page_number_start_isValid;
}

OAISize OAIDocumentStyle::getPageSize() const {
    return m_page_size;
}
void OAIDocumentStyle::setPageSize(const OAISize &page_size) {
    m_page_size = page_size;
    m_page_size_isSet = true;
}

bool OAIDocumentStyle::is_page_size_Set() const{
    return m_page_size_isSet;
}

bool OAIDocumentStyle::is_page_size_Valid() const{
    return m_page_size_isValid;
}

bool OAIDocumentStyle::isUseCustomHeaderFooterMargins() const {
    return m_use_custom_header_footer_margins;
}
void OAIDocumentStyle::setUseCustomHeaderFooterMargins(const bool &use_custom_header_footer_margins) {
    m_use_custom_header_footer_margins = use_custom_header_footer_margins;
    m_use_custom_header_footer_margins_isSet = true;
}

bool OAIDocumentStyle::is_use_custom_header_footer_margins_Set() const{
    return m_use_custom_header_footer_margins_isSet;
}

bool OAIDocumentStyle::is_use_custom_header_footer_margins_Valid() const{
    return m_use_custom_header_footer_margins_isValid;
}

bool OAIDocumentStyle::isUseEvenPageHeaderFooter() const {
    return m_use_even_page_header_footer;
}
void OAIDocumentStyle::setUseEvenPageHeaderFooter(const bool &use_even_page_header_footer) {
    m_use_even_page_header_footer = use_even_page_header_footer;
    m_use_even_page_header_footer_isSet = true;
}

bool OAIDocumentStyle::is_use_even_page_header_footer_Set() const{
    return m_use_even_page_header_footer_isSet;
}

bool OAIDocumentStyle::is_use_even_page_header_footer_Valid() const{
    return m_use_even_page_header_footer_isValid;
}

bool OAIDocumentStyle::isUseFirstPageHeaderFooter() const {
    return m_use_first_page_header_footer;
}
void OAIDocumentStyle::setUseFirstPageHeaderFooter(const bool &use_first_page_header_footer) {
    m_use_first_page_header_footer = use_first_page_header_footer;
    m_use_first_page_header_footer_isSet = true;
}

bool OAIDocumentStyle::is_use_first_page_header_footer_Set() const{
    return m_use_first_page_header_footer_isSet;
}

bool OAIDocumentStyle::is_use_first_page_header_footer_Valid() const{
    return m_use_first_page_header_footer_isValid;
}

bool OAIDocumentStyle::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_background.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_footer_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_header_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_even_page_footer_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_even_page_header_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_page_footer_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_page_header_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_flip_page_orientation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_margin_bottom.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_margin_footer.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_margin_header.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_margin_left.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_margin_right.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_margin_top.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_number_start_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_size.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_custom_header_footer_margins_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_even_page_header_footer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_first_page_header_footer_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDocumentStyle::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
