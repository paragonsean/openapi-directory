/**
 * Google Docs API
 * Reads and writes Google Docs documents.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDocument.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDocument::OAIDocument(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDocument::OAIDocument() {
    this->initializeModel();
}

OAIDocument::~OAIDocument() {}

void OAIDocument::initializeModel() {

    m_body_isSet = false;
    m_body_isValid = false;

    m_document_id_isSet = false;
    m_document_id_isValid = false;

    m_document_style_isSet = false;
    m_document_style_isValid = false;

    m_footers_isSet = false;
    m_footers_isValid = false;

    m_footnotes_isSet = false;
    m_footnotes_isValid = false;

    m_headers_isSet = false;
    m_headers_isValid = false;

    m_inline_objects_isSet = false;
    m_inline_objects_isValid = false;

    m_lists_isSet = false;
    m_lists_isValid = false;

    m_named_ranges_isSet = false;
    m_named_ranges_isValid = false;

    m_named_styles_isSet = false;
    m_named_styles_isValid = false;

    m_positioned_objects_isSet = false;
    m_positioned_objects_isValid = false;

    m_revision_id_isSet = false;
    m_revision_id_isValid = false;

    m_suggested_document_style_changes_isSet = false;
    m_suggested_document_style_changes_isValid = false;

    m_suggested_named_styles_changes_isSet = false;
    m_suggested_named_styles_changes_isValid = false;

    m_suggestions_view_mode_isSet = false;
    m_suggestions_view_mode_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;
}

void OAIDocument::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDocument::fromJsonObject(QJsonObject json) {

    m_body_isValid = ::OpenAPI::fromJsonValue(m_body, json[QString("body")]);
    m_body_isSet = !json[QString("body")].isNull() && m_body_isValid;

    m_document_id_isValid = ::OpenAPI::fromJsonValue(m_document_id, json[QString("documentId")]);
    m_document_id_isSet = !json[QString("documentId")].isNull() && m_document_id_isValid;

    m_document_style_isValid = ::OpenAPI::fromJsonValue(m_document_style, json[QString("documentStyle")]);
    m_document_style_isSet = !json[QString("documentStyle")].isNull() && m_document_style_isValid;

    m_footers_isValid = ::OpenAPI::fromJsonValue(m_footers, json[QString("footers")]);
    m_footers_isSet = !json[QString("footers")].isNull() && m_footers_isValid;

    m_footnotes_isValid = ::OpenAPI::fromJsonValue(m_footnotes, json[QString("footnotes")]);
    m_footnotes_isSet = !json[QString("footnotes")].isNull() && m_footnotes_isValid;

    m_headers_isValid = ::OpenAPI::fromJsonValue(m_headers, json[QString("headers")]);
    m_headers_isSet = !json[QString("headers")].isNull() && m_headers_isValid;

    m_inline_objects_isValid = ::OpenAPI::fromJsonValue(m_inline_objects, json[QString("inlineObjects")]);
    m_inline_objects_isSet = !json[QString("inlineObjects")].isNull() && m_inline_objects_isValid;

    m_lists_isValid = ::OpenAPI::fromJsonValue(m_lists, json[QString("lists")]);
    m_lists_isSet = !json[QString("lists")].isNull() && m_lists_isValid;

    m_named_ranges_isValid = ::OpenAPI::fromJsonValue(m_named_ranges, json[QString("namedRanges")]);
    m_named_ranges_isSet = !json[QString("namedRanges")].isNull() && m_named_ranges_isValid;

    m_named_styles_isValid = ::OpenAPI::fromJsonValue(m_named_styles, json[QString("namedStyles")]);
    m_named_styles_isSet = !json[QString("namedStyles")].isNull() && m_named_styles_isValid;

    m_positioned_objects_isValid = ::OpenAPI::fromJsonValue(m_positioned_objects, json[QString("positionedObjects")]);
    m_positioned_objects_isSet = !json[QString("positionedObjects")].isNull() && m_positioned_objects_isValid;

    m_revision_id_isValid = ::OpenAPI::fromJsonValue(m_revision_id, json[QString("revisionId")]);
    m_revision_id_isSet = !json[QString("revisionId")].isNull() && m_revision_id_isValid;

    m_suggested_document_style_changes_isValid = ::OpenAPI::fromJsonValue(m_suggested_document_style_changes, json[QString("suggestedDocumentStyleChanges")]);
    m_suggested_document_style_changes_isSet = !json[QString("suggestedDocumentStyleChanges")].isNull() && m_suggested_document_style_changes_isValid;

    m_suggested_named_styles_changes_isValid = ::OpenAPI::fromJsonValue(m_suggested_named_styles_changes, json[QString("suggestedNamedStylesChanges")]);
    m_suggested_named_styles_changes_isSet = !json[QString("suggestedNamedStylesChanges")].isNull() && m_suggested_named_styles_changes_isValid;

    m_suggestions_view_mode_isValid = ::OpenAPI::fromJsonValue(m_suggestions_view_mode, json[QString("suggestionsViewMode")]);
    m_suggestions_view_mode_isSet = !json[QString("suggestionsViewMode")].isNull() && m_suggestions_view_mode_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;
}

QString OAIDocument::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDocument::asJsonObject() const {
    QJsonObject obj;
    if (m_body.isSet()) {
        obj.insert(QString("body"), ::OpenAPI::toJsonValue(m_body));
    }
    if (m_document_id_isSet) {
        obj.insert(QString("documentId"), ::OpenAPI::toJsonValue(m_document_id));
    }
    if (m_document_style.isSet()) {
        obj.insert(QString("documentStyle"), ::OpenAPI::toJsonValue(m_document_style));
    }
    if (m_footers.size() > 0) {
        obj.insert(QString("footers"), ::OpenAPI::toJsonValue(m_footers));
    }
    if (m_footnotes.size() > 0) {
        obj.insert(QString("footnotes"), ::OpenAPI::toJsonValue(m_footnotes));
    }
    if (m_headers.size() > 0) {
        obj.insert(QString("headers"), ::OpenAPI::toJsonValue(m_headers));
    }
    if (m_inline_objects.size() > 0) {
        obj.insert(QString("inlineObjects"), ::OpenAPI::toJsonValue(m_inline_objects));
    }
    if (m_lists.size() > 0) {
        obj.insert(QString("lists"), ::OpenAPI::toJsonValue(m_lists));
    }
    if (m_named_ranges.size() > 0) {
        obj.insert(QString("namedRanges"), ::OpenAPI::toJsonValue(m_named_ranges));
    }
    if (m_named_styles.isSet()) {
        obj.insert(QString("namedStyles"), ::OpenAPI::toJsonValue(m_named_styles));
    }
    if (m_positioned_objects.size() > 0) {
        obj.insert(QString("positionedObjects"), ::OpenAPI::toJsonValue(m_positioned_objects));
    }
    if (m_revision_id_isSet) {
        obj.insert(QString("revisionId"), ::OpenAPI::toJsonValue(m_revision_id));
    }
    if (m_suggested_document_style_changes.size() > 0) {
        obj.insert(QString("suggestedDocumentStyleChanges"), ::OpenAPI::toJsonValue(m_suggested_document_style_changes));
    }
    if (m_suggested_named_styles_changes.size() > 0) {
        obj.insert(QString("suggestedNamedStylesChanges"), ::OpenAPI::toJsonValue(m_suggested_named_styles_changes));
    }
    if (m_suggestions_view_mode_isSet) {
        obj.insert(QString("suggestionsViewMode"), ::OpenAPI::toJsonValue(m_suggestions_view_mode));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    return obj;
}

OAIBody OAIDocument::getBody() const {
    return m_body;
}
void OAIDocument::setBody(const OAIBody &body) {
    m_body = body;
    m_body_isSet = true;
}

bool OAIDocument::is_body_Set() const{
    return m_body_isSet;
}

bool OAIDocument::is_body_Valid() const{
    return m_body_isValid;
}

QString OAIDocument::getDocumentId() const {
    return m_document_id;
}
void OAIDocument::setDocumentId(const QString &document_id) {
    m_document_id = document_id;
    m_document_id_isSet = true;
}

bool OAIDocument::is_document_id_Set() const{
    return m_document_id_isSet;
}

bool OAIDocument::is_document_id_Valid() const{
    return m_document_id_isValid;
}

OAIDocumentStyle OAIDocument::getDocumentStyle() const {
    return m_document_style;
}
void OAIDocument::setDocumentStyle(const OAIDocumentStyle &document_style) {
    m_document_style = document_style;
    m_document_style_isSet = true;
}

bool OAIDocument::is_document_style_Set() const{
    return m_document_style_isSet;
}

bool OAIDocument::is_document_style_Valid() const{
    return m_document_style_isValid;
}

QMap<QString, OAIFooter> OAIDocument::getFooters() const {
    return m_footers;
}
void OAIDocument::setFooters(const QMap<QString, OAIFooter> &footers) {
    m_footers = footers;
    m_footers_isSet = true;
}

bool OAIDocument::is_footers_Set() const{
    return m_footers_isSet;
}

bool OAIDocument::is_footers_Valid() const{
    return m_footers_isValid;
}

QMap<QString, OAIFootnote> OAIDocument::getFootnotes() const {
    return m_footnotes;
}
void OAIDocument::setFootnotes(const QMap<QString, OAIFootnote> &footnotes) {
    m_footnotes = footnotes;
    m_footnotes_isSet = true;
}

bool OAIDocument::is_footnotes_Set() const{
    return m_footnotes_isSet;
}

bool OAIDocument::is_footnotes_Valid() const{
    return m_footnotes_isValid;
}

QMap<QString, OAIHeader> OAIDocument::getHeaders() const {
    return m_headers;
}
void OAIDocument::setHeaders(const QMap<QString, OAIHeader> &headers) {
    m_headers = headers;
    m_headers_isSet = true;
}

bool OAIDocument::is_headers_Set() const{
    return m_headers_isSet;
}

bool OAIDocument::is_headers_Valid() const{
    return m_headers_isValid;
}

QMap<QString, OAIInlineObject> OAIDocument::getInlineObjects() const {
    return m_inline_objects;
}
void OAIDocument::setInlineObjects(const QMap<QString, OAIInlineObject> &inline_objects) {
    m_inline_objects = inline_objects;
    m_inline_objects_isSet = true;
}

bool OAIDocument::is_inline_objects_Set() const{
    return m_inline_objects_isSet;
}

bool OAIDocument::is_inline_objects_Valid() const{
    return m_inline_objects_isValid;
}

QMap<QString, OAIList> OAIDocument::getLists() const {
    return m_lists;
}
void OAIDocument::setLists(const QMap<QString, OAIList> &lists) {
    m_lists = lists;
    m_lists_isSet = true;
}

bool OAIDocument::is_lists_Set() const{
    return m_lists_isSet;
}

bool OAIDocument::is_lists_Valid() const{
    return m_lists_isValid;
}

QMap<QString, OAINamedRanges> OAIDocument::getNamedRanges() const {
    return m_named_ranges;
}
void OAIDocument::setNamedRanges(const QMap<QString, OAINamedRanges> &named_ranges) {
    m_named_ranges = named_ranges;
    m_named_ranges_isSet = true;
}

bool OAIDocument::is_named_ranges_Set() const{
    return m_named_ranges_isSet;
}

bool OAIDocument::is_named_ranges_Valid() const{
    return m_named_ranges_isValid;
}

OAINamedStyles OAIDocument::getNamedStyles() const {
    return m_named_styles;
}
void OAIDocument::setNamedStyles(const OAINamedStyles &named_styles) {
    m_named_styles = named_styles;
    m_named_styles_isSet = true;
}

bool OAIDocument::is_named_styles_Set() const{
    return m_named_styles_isSet;
}

bool OAIDocument::is_named_styles_Valid() const{
    return m_named_styles_isValid;
}

QMap<QString, OAIPositionedObject> OAIDocument::getPositionedObjects() const {
    return m_positioned_objects;
}
void OAIDocument::setPositionedObjects(const QMap<QString, OAIPositionedObject> &positioned_objects) {
    m_positioned_objects = positioned_objects;
    m_positioned_objects_isSet = true;
}

bool OAIDocument::is_positioned_objects_Set() const{
    return m_positioned_objects_isSet;
}

bool OAIDocument::is_positioned_objects_Valid() const{
    return m_positioned_objects_isValid;
}

QString OAIDocument::getRevisionId() const {
    return m_revision_id;
}
void OAIDocument::setRevisionId(const QString &revision_id) {
    m_revision_id = revision_id;
    m_revision_id_isSet = true;
}

bool OAIDocument::is_revision_id_Set() const{
    return m_revision_id_isSet;
}

bool OAIDocument::is_revision_id_Valid() const{
    return m_revision_id_isValid;
}

QMap<QString, OAISuggestedDocumentStyle> OAIDocument::getSuggestedDocumentStyleChanges() const {
    return m_suggested_document_style_changes;
}
void OAIDocument::setSuggestedDocumentStyleChanges(const QMap<QString, OAISuggestedDocumentStyle> &suggested_document_style_changes) {
    m_suggested_document_style_changes = suggested_document_style_changes;
    m_suggested_document_style_changes_isSet = true;
}

bool OAIDocument::is_suggested_document_style_changes_Set() const{
    return m_suggested_document_style_changes_isSet;
}

bool OAIDocument::is_suggested_document_style_changes_Valid() const{
    return m_suggested_document_style_changes_isValid;
}

QMap<QString, OAISuggestedNamedStyles> OAIDocument::getSuggestedNamedStylesChanges() const {
    return m_suggested_named_styles_changes;
}
void OAIDocument::setSuggestedNamedStylesChanges(const QMap<QString, OAISuggestedNamedStyles> &suggested_named_styles_changes) {
    m_suggested_named_styles_changes = suggested_named_styles_changes;
    m_suggested_named_styles_changes_isSet = true;
}

bool OAIDocument::is_suggested_named_styles_changes_Set() const{
    return m_suggested_named_styles_changes_isSet;
}

bool OAIDocument::is_suggested_named_styles_changes_Valid() const{
    return m_suggested_named_styles_changes_isValid;
}

QString OAIDocument::getSuggestionsViewMode() const {
    return m_suggestions_view_mode;
}
void OAIDocument::setSuggestionsViewMode(const QString &suggestions_view_mode) {
    m_suggestions_view_mode = suggestions_view_mode;
    m_suggestions_view_mode_isSet = true;
}

bool OAIDocument::is_suggestions_view_mode_Set() const{
    return m_suggestions_view_mode_isSet;
}

bool OAIDocument::is_suggestions_view_mode_Valid() const{
    return m_suggestions_view_mode_isValid;
}

QString OAIDocument::getTitle() const {
    return m_title;
}
void OAIDocument::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIDocument::is_title_Set() const{
    return m_title_isSet;
}

bool OAIDocument::is_title_Valid() const{
    return m_title_isValid;
}

bool OAIDocument::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_body.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_document_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_document_style.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_footers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_footnotes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_headers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_inline_objects.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_lists.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_named_ranges.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_named_styles.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_positioned_objects.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_revision_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_suggested_document_style_changes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_suggested_named_styles_changes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_suggestions_view_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDocument::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
