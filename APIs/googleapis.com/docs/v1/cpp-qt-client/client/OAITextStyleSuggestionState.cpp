/**
 * Google Docs API
 * Reads and writes Google Docs documents.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITextStyleSuggestionState.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITextStyleSuggestionState::OAITextStyleSuggestionState(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITextStyleSuggestionState::OAITextStyleSuggestionState() {
    this->initializeModel();
}

OAITextStyleSuggestionState::~OAITextStyleSuggestionState() {}

void OAITextStyleSuggestionState::initializeModel() {

    m_background_color_suggested_isSet = false;
    m_background_color_suggested_isValid = false;

    m_baseline_offset_suggested_isSet = false;
    m_baseline_offset_suggested_isValid = false;

    m_bold_suggested_isSet = false;
    m_bold_suggested_isValid = false;

    m_font_size_suggested_isSet = false;
    m_font_size_suggested_isValid = false;

    m_foreground_color_suggested_isSet = false;
    m_foreground_color_suggested_isValid = false;

    m_italic_suggested_isSet = false;
    m_italic_suggested_isValid = false;

    m_link_suggested_isSet = false;
    m_link_suggested_isValid = false;

    m_small_caps_suggested_isSet = false;
    m_small_caps_suggested_isValid = false;

    m_strikethrough_suggested_isSet = false;
    m_strikethrough_suggested_isValid = false;

    m_underline_suggested_isSet = false;
    m_underline_suggested_isValid = false;

    m_weighted_font_family_suggested_isSet = false;
    m_weighted_font_family_suggested_isValid = false;
}

void OAITextStyleSuggestionState::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITextStyleSuggestionState::fromJsonObject(QJsonObject json) {

    m_background_color_suggested_isValid = ::OpenAPI::fromJsonValue(m_background_color_suggested, json[QString("backgroundColorSuggested")]);
    m_background_color_suggested_isSet = !json[QString("backgroundColorSuggested")].isNull() && m_background_color_suggested_isValid;

    m_baseline_offset_suggested_isValid = ::OpenAPI::fromJsonValue(m_baseline_offset_suggested, json[QString("baselineOffsetSuggested")]);
    m_baseline_offset_suggested_isSet = !json[QString("baselineOffsetSuggested")].isNull() && m_baseline_offset_suggested_isValid;

    m_bold_suggested_isValid = ::OpenAPI::fromJsonValue(m_bold_suggested, json[QString("boldSuggested")]);
    m_bold_suggested_isSet = !json[QString("boldSuggested")].isNull() && m_bold_suggested_isValid;

    m_font_size_suggested_isValid = ::OpenAPI::fromJsonValue(m_font_size_suggested, json[QString("fontSizeSuggested")]);
    m_font_size_suggested_isSet = !json[QString("fontSizeSuggested")].isNull() && m_font_size_suggested_isValid;

    m_foreground_color_suggested_isValid = ::OpenAPI::fromJsonValue(m_foreground_color_suggested, json[QString("foregroundColorSuggested")]);
    m_foreground_color_suggested_isSet = !json[QString("foregroundColorSuggested")].isNull() && m_foreground_color_suggested_isValid;

    m_italic_suggested_isValid = ::OpenAPI::fromJsonValue(m_italic_suggested, json[QString("italicSuggested")]);
    m_italic_suggested_isSet = !json[QString("italicSuggested")].isNull() && m_italic_suggested_isValid;

    m_link_suggested_isValid = ::OpenAPI::fromJsonValue(m_link_suggested, json[QString("linkSuggested")]);
    m_link_suggested_isSet = !json[QString("linkSuggested")].isNull() && m_link_suggested_isValid;

    m_small_caps_suggested_isValid = ::OpenAPI::fromJsonValue(m_small_caps_suggested, json[QString("smallCapsSuggested")]);
    m_small_caps_suggested_isSet = !json[QString("smallCapsSuggested")].isNull() && m_small_caps_suggested_isValid;

    m_strikethrough_suggested_isValid = ::OpenAPI::fromJsonValue(m_strikethrough_suggested, json[QString("strikethroughSuggested")]);
    m_strikethrough_suggested_isSet = !json[QString("strikethroughSuggested")].isNull() && m_strikethrough_suggested_isValid;

    m_underline_suggested_isValid = ::OpenAPI::fromJsonValue(m_underline_suggested, json[QString("underlineSuggested")]);
    m_underline_suggested_isSet = !json[QString("underlineSuggested")].isNull() && m_underline_suggested_isValid;

    m_weighted_font_family_suggested_isValid = ::OpenAPI::fromJsonValue(m_weighted_font_family_suggested, json[QString("weightedFontFamilySuggested")]);
    m_weighted_font_family_suggested_isSet = !json[QString("weightedFontFamilySuggested")].isNull() && m_weighted_font_family_suggested_isValid;
}

QString OAITextStyleSuggestionState::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITextStyleSuggestionState::asJsonObject() const {
    QJsonObject obj;
    if (m_background_color_suggested_isSet) {
        obj.insert(QString("backgroundColorSuggested"), ::OpenAPI::toJsonValue(m_background_color_suggested));
    }
    if (m_baseline_offset_suggested_isSet) {
        obj.insert(QString("baselineOffsetSuggested"), ::OpenAPI::toJsonValue(m_baseline_offset_suggested));
    }
    if (m_bold_suggested_isSet) {
        obj.insert(QString("boldSuggested"), ::OpenAPI::toJsonValue(m_bold_suggested));
    }
    if (m_font_size_suggested_isSet) {
        obj.insert(QString("fontSizeSuggested"), ::OpenAPI::toJsonValue(m_font_size_suggested));
    }
    if (m_foreground_color_suggested_isSet) {
        obj.insert(QString("foregroundColorSuggested"), ::OpenAPI::toJsonValue(m_foreground_color_suggested));
    }
    if (m_italic_suggested_isSet) {
        obj.insert(QString("italicSuggested"), ::OpenAPI::toJsonValue(m_italic_suggested));
    }
    if (m_link_suggested_isSet) {
        obj.insert(QString("linkSuggested"), ::OpenAPI::toJsonValue(m_link_suggested));
    }
    if (m_small_caps_suggested_isSet) {
        obj.insert(QString("smallCapsSuggested"), ::OpenAPI::toJsonValue(m_small_caps_suggested));
    }
    if (m_strikethrough_suggested_isSet) {
        obj.insert(QString("strikethroughSuggested"), ::OpenAPI::toJsonValue(m_strikethrough_suggested));
    }
    if (m_underline_suggested_isSet) {
        obj.insert(QString("underlineSuggested"), ::OpenAPI::toJsonValue(m_underline_suggested));
    }
    if (m_weighted_font_family_suggested_isSet) {
        obj.insert(QString("weightedFontFamilySuggested"), ::OpenAPI::toJsonValue(m_weighted_font_family_suggested));
    }
    return obj;
}

bool OAITextStyleSuggestionState::isBackgroundColorSuggested() const {
    return m_background_color_suggested;
}
void OAITextStyleSuggestionState::setBackgroundColorSuggested(const bool &background_color_suggested) {
    m_background_color_suggested = background_color_suggested;
    m_background_color_suggested_isSet = true;
}

bool OAITextStyleSuggestionState::is_background_color_suggested_Set() const{
    return m_background_color_suggested_isSet;
}

bool OAITextStyleSuggestionState::is_background_color_suggested_Valid() const{
    return m_background_color_suggested_isValid;
}

bool OAITextStyleSuggestionState::isBaselineOffsetSuggested() const {
    return m_baseline_offset_suggested;
}
void OAITextStyleSuggestionState::setBaselineOffsetSuggested(const bool &baseline_offset_suggested) {
    m_baseline_offset_suggested = baseline_offset_suggested;
    m_baseline_offset_suggested_isSet = true;
}

bool OAITextStyleSuggestionState::is_baseline_offset_suggested_Set() const{
    return m_baseline_offset_suggested_isSet;
}

bool OAITextStyleSuggestionState::is_baseline_offset_suggested_Valid() const{
    return m_baseline_offset_suggested_isValid;
}

bool OAITextStyleSuggestionState::isBoldSuggested() const {
    return m_bold_suggested;
}
void OAITextStyleSuggestionState::setBoldSuggested(const bool &bold_suggested) {
    m_bold_suggested = bold_suggested;
    m_bold_suggested_isSet = true;
}

bool OAITextStyleSuggestionState::is_bold_suggested_Set() const{
    return m_bold_suggested_isSet;
}

bool OAITextStyleSuggestionState::is_bold_suggested_Valid() const{
    return m_bold_suggested_isValid;
}

bool OAITextStyleSuggestionState::isFontSizeSuggested() const {
    return m_font_size_suggested;
}
void OAITextStyleSuggestionState::setFontSizeSuggested(const bool &font_size_suggested) {
    m_font_size_suggested = font_size_suggested;
    m_font_size_suggested_isSet = true;
}

bool OAITextStyleSuggestionState::is_font_size_suggested_Set() const{
    return m_font_size_suggested_isSet;
}

bool OAITextStyleSuggestionState::is_font_size_suggested_Valid() const{
    return m_font_size_suggested_isValid;
}

bool OAITextStyleSuggestionState::isForegroundColorSuggested() const {
    return m_foreground_color_suggested;
}
void OAITextStyleSuggestionState::setForegroundColorSuggested(const bool &foreground_color_suggested) {
    m_foreground_color_suggested = foreground_color_suggested;
    m_foreground_color_suggested_isSet = true;
}

bool OAITextStyleSuggestionState::is_foreground_color_suggested_Set() const{
    return m_foreground_color_suggested_isSet;
}

bool OAITextStyleSuggestionState::is_foreground_color_suggested_Valid() const{
    return m_foreground_color_suggested_isValid;
}

bool OAITextStyleSuggestionState::isItalicSuggested() const {
    return m_italic_suggested;
}
void OAITextStyleSuggestionState::setItalicSuggested(const bool &italic_suggested) {
    m_italic_suggested = italic_suggested;
    m_italic_suggested_isSet = true;
}

bool OAITextStyleSuggestionState::is_italic_suggested_Set() const{
    return m_italic_suggested_isSet;
}

bool OAITextStyleSuggestionState::is_italic_suggested_Valid() const{
    return m_italic_suggested_isValid;
}

bool OAITextStyleSuggestionState::isLinkSuggested() const {
    return m_link_suggested;
}
void OAITextStyleSuggestionState::setLinkSuggested(const bool &link_suggested) {
    m_link_suggested = link_suggested;
    m_link_suggested_isSet = true;
}

bool OAITextStyleSuggestionState::is_link_suggested_Set() const{
    return m_link_suggested_isSet;
}

bool OAITextStyleSuggestionState::is_link_suggested_Valid() const{
    return m_link_suggested_isValid;
}

bool OAITextStyleSuggestionState::isSmallCapsSuggested() const {
    return m_small_caps_suggested;
}
void OAITextStyleSuggestionState::setSmallCapsSuggested(const bool &small_caps_suggested) {
    m_small_caps_suggested = small_caps_suggested;
    m_small_caps_suggested_isSet = true;
}

bool OAITextStyleSuggestionState::is_small_caps_suggested_Set() const{
    return m_small_caps_suggested_isSet;
}

bool OAITextStyleSuggestionState::is_small_caps_suggested_Valid() const{
    return m_small_caps_suggested_isValid;
}

bool OAITextStyleSuggestionState::isStrikethroughSuggested() const {
    return m_strikethrough_suggested;
}
void OAITextStyleSuggestionState::setStrikethroughSuggested(const bool &strikethrough_suggested) {
    m_strikethrough_suggested = strikethrough_suggested;
    m_strikethrough_suggested_isSet = true;
}

bool OAITextStyleSuggestionState::is_strikethrough_suggested_Set() const{
    return m_strikethrough_suggested_isSet;
}

bool OAITextStyleSuggestionState::is_strikethrough_suggested_Valid() const{
    return m_strikethrough_suggested_isValid;
}

bool OAITextStyleSuggestionState::isUnderlineSuggested() const {
    return m_underline_suggested;
}
void OAITextStyleSuggestionState::setUnderlineSuggested(const bool &underline_suggested) {
    m_underline_suggested = underline_suggested;
    m_underline_suggested_isSet = true;
}

bool OAITextStyleSuggestionState::is_underline_suggested_Set() const{
    return m_underline_suggested_isSet;
}

bool OAITextStyleSuggestionState::is_underline_suggested_Valid() const{
    return m_underline_suggested_isValid;
}

bool OAITextStyleSuggestionState::isWeightedFontFamilySuggested() const {
    return m_weighted_font_family_suggested;
}
void OAITextStyleSuggestionState::setWeightedFontFamilySuggested(const bool &weighted_font_family_suggested) {
    m_weighted_font_family_suggested = weighted_font_family_suggested;
    m_weighted_font_family_suggested_isSet = true;
}

bool OAITextStyleSuggestionState::is_weighted_font_family_suggested_Set() const{
    return m_weighted_font_family_suggested_isSet;
}

bool OAITextStyleSuggestionState::is_weighted_font_family_suggested_Valid() const{
    return m_weighted_font_family_suggested_isValid;
}

bool OAITextStyleSuggestionState::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_background_color_suggested_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_baseline_offset_suggested_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bold_suggested_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_font_size_suggested_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_foreground_color_suggested_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_italic_suggested_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_link_suggested_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_small_caps_suggested_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_strikethrough_suggested_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_underline_suggested_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_weighted_font_family_suggested_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITextStyleSuggestionState::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
