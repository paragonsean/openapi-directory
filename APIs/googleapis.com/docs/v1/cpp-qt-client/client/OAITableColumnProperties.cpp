/**
 * Google Docs API
 * Reads and writes Google Docs documents.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITableColumnProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITableColumnProperties::OAITableColumnProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITableColumnProperties::OAITableColumnProperties() {
    this->initializeModel();
}

OAITableColumnProperties::~OAITableColumnProperties() {}

void OAITableColumnProperties::initializeModel() {

    m_width_isSet = false;
    m_width_isValid = false;

    m_width_type_isSet = false;
    m_width_type_isValid = false;
}

void OAITableColumnProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITableColumnProperties::fromJsonObject(QJsonObject json) {

    m_width_isValid = ::OpenAPI::fromJsonValue(m_width, json[QString("width")]);
    m_width_isSet = !json[QString("width")].isNull() && m_width_isValid;

    m_width_type_isValid = ::OpenAPI::fromJsonValue(m_width_type, json[QString("widthType")]);
    m_width_type_isSet = !json[QString("widthType")].isNull() && m_width_type_isValid;
}

QString OAITableColumnProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITableColumnProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_width.isSet()) {
        obj.insert(QString("width"), ::OpenAPI::toJsonValue(m_width));
    }
    if (m_width_type_isSet) {
        obj.insert(QString("widthType"), ::OpenAPI::toJsonValue(m_width_type));
    }
    return obj;
}

OAIDimension OAITableColumnProperties::getWidth() const {
    return m_width;
}
void OAITableColumnProperties::setWidth(const OAIDimension &width) {
    m_width = width;
    m_width_isSet = true;
}

bool OAITableColumnProperties::is_width_Set() const{
    return m_width_isSet;
}

bool OAITableColumnProperties::is_width_Valid() const{
    return m_width_isValid;
}

QString OAITableColumnProperties::getWidthType() const {
    return m_width_type;
}
void OAITableColumnProperties::setWidthType(const QString &width_type) {
    m_width_type = width_type;
    m_width_type_isSet = true;
}

bool OAITableColumnProperties::is_width_type_Set() const{
    return m_width_type_isSet;
}

bool OAITableColumnProperties::is_width_type_Valid() const{
    return m_width_type_isValid;
}

bool OAITableColumnProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_width.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_width_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITableColumnProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
