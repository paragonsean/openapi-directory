/**
 * Google Docs API
 * Reads and writes Google Docs documents.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImageProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImageProperties::OAIImageProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImageProperties::OAIImageProperties() {
    this->initializeModel();
}

OAIImageProperties::~OAIImageProperties() {}

void OAIImageProperties::initializeModel() {

    m_angle_isSet = false;
    m_angle_isValid = false;

    m_brightness_isSet = false;
    m_brightness_isValid = false;

    m_content_uri_isSet = false;
    m_content_uri_isValid = false;

    m_contrast_isSet = false;
    m_contrast_isValid = false;

    m_crop_properties_isSet = false;
    m_crop_properties_isValid = false;

    m_source_uri_isSet = false;
    m_source_uri_isValid = false;

    m_transparency_isSet = false;
    m_transparency_isValid = false;
}

void OAIImageProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImageProperties::fromJsonObject(QJsonObject json) {

    m_angle_isValid = ::OpenAPI::fromJsonValue(m_angle, json[QString("angle")]);
    m_angle_isSet = !json[QString("angle")].isNull() && m_angle_isValid;

    m_brightness_isValid = ::OpenAPI::fromJsonValue(m_brightness, json[QString("brightness")]);
    m_brightness_isSet = !json[QString("brightness")].isNull() && m_brightness_isValid;

    m_content_uri_isValid = ::OpenAPI::fromJsonValue(m_content_uri, json[QString("contentUri")]);
    m_content_uri_isSet = !json[QString("contentUri")].isNull() && m_content_uri_isValid;

    m_contrast_isValid = ::OpenAPI::fromJsonValue(m_contrast, json[QString("contrast")]);
    m_contrast_isSet = !json[QString("contrast")].isNull() && m_contrast_isValid;

    m_crop_properties_isValid = ::OpenAPI::fromJsonValue(m_crop_properties, json[QString("cropProperties")]);
    m_crop_properties_isSet = !json[QString("cropProperties")].isNull() && m_crop_properties_isValid;

    m_source_uri_isValid = ::OpenAPI::fromJsonValue(m_source_uri, json[QString("sourceUri")]);
    m_source_uri_isSet = !json[QString("sourceUri")].isNull() && m_source_uri_isValid;

    m_transparency_isValid = ::OpenAPI::fromJsonValue(m_transparency, json[QString("transparency")]);
    m_transparency_isSet = !json[QString("transparency")].isNull() && m_transparency_isValid;
}

QString OAIImageProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImageProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_angle_isSet) {
        obj.insert(QString("angle"), ::OpenAPI::toJsonValue(m_angle));
    }
    if (m_brightness_isSet) {
        obj.insert(QString("brightness"), ::OpenAPI::toJsonValue(m_brightness));
    }
    if (m_content_uri_isSet) {
        obj.insert(QString("contentUri"), ::OpenAPI::toJsonValue(m_content_uri));
    }
    if (m_contrast_isSet) {
        obj.insert(QString("contrast"), ::OpenAPI::toJsonValue(m_contrast));
    }
    if (m_crop_properties.isSet()) {
        obj.insert(QString("cropProperties"), ::OpenAPI::toJsonValue(m_crop_properties));
    }
    if (m_source_uri_isSet) {
        obj.insert(QString("sourceUri"), ::OpenAPI::toJsonValue(m_source_uri));
    }
    if (m_transparency_isSet) {
        obj.insert(QString("transparency"), ::OpenAPI::toJsonValue(m_transparency));
    }
    return obj;
}

float OAIImageProperties::getAngle() const {
    return m_angle;
}
void OAIImageProperties::setAngle(const float &angle) {
    m_angle = angle;
    m_angle_isSet = true;
}

bool OAIImageProperties::is_angle_Set() const{
    return m_angle_isSet;
}

bool OAIImageProperties::is_angle_Valid() const{
    return m_angle_isValid;
}

float OAIImageProperties::getBrightness() const {
    return m_brightness;
}
void OAIImageProperties::setBrightness(const float &brightness) {
    m_brightness = brightness;
    m_brightness_isSet = true;
}

bool OAIImageProperties::is_brightness_Set() const{
    return m_brightness_isSet;
}

bool OAIImageProperties::is_brightness_Valid() const{
    return m_brightness_isValid;
}

QString OAIImageProperties::getContentUri() const {
    return m_content_uri;
}
void OAIImageProperties::setContentUri(const QString &content_uri) {
    m_content_uri = content_uri;
    m_content_uri_isSet = true;
}

bool OAIImageProperties::is_content_uri_Set() const{
    return m_content_uri_isSet;
}

bool OAIImageProperties::is_content_uri_Valid() const{
    return m_content_uri_isValid;
}

float OAIImageProperties::getContrast() const {
    return m_contrast;
}
void OAIImageProperties::setContrast(const float &contrast) {
    m_contrast = contrast;
    m_contrast_isSet = true;
}

bool OAIImageProperties::is_contrast_Set() const{
    return m_contrast_isSet;
}

bool OAIImageProperties::is_contrast_Valid() const{
    return m_contrast_isValid;
}

OAICropProperties OAIImageProperties::getCropProperties() const {
    return m_crop_properties;
}
void OAIImageProperties::setCropProperties(const OAICropProperties &crop_properties) {
    m_crop_properties = crop_properties;
    m_crop_properties_isSet = true;
}

bool OAIImageProperties::is_crop_properties_Set() const{
    return m_crop_properties_isSet;
}

bool OAIImageProperties::is_crop_properties_Valid() const{
    return m_crop_properties_isValid;
}

QString OAIImageProperties::getSourceUri() const {
    return m_source_uri;
}
void OAIImageProperties::setSourceUri(const QString &source_uri) {
    m_source_uri = source_uri;
    m_source_uri_isSet = true;
}

bool OAIImageProperties::is_source_uri_Set() const{
    return m_source_uri_isSet;
}

bool OAIImageProperties::is_source_uri_Valid() const{
    return m_source_uri_isValid;
}

float OAIImageProperties::getTransparency() const {
    return m_transparency;
}
void OAIImageProperties::setTransparency(const float &transparency) {
    m_transparency = transparency;
    m_transparency_isSet = true;
}

bool OAIImageProperties::is_transparency_Set() const{
    return m_transparency_isSet;
}

bool OAIImageProperties::is_transparency_Valid() const{
    return m_transparency_isValid;
}

bool OAIImageProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_angle_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_brightness_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contrast_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_crop_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transparency_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImageProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
