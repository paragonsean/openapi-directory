/**
 * Google Docs API
 * Reads and writes Google Docs documents.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStructuralElement.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStructuralElement::OAIStructuralElement(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStructuralElement::OAIStructuralElement() {
    this->initializeModel();
}

OAIStructuralElement::~OAIStructuralElement() {}

void OAIStructuralElement::initializeModel() {

    m_end_index_isSet = false;
    m_end_index_isValid = false;

    m_paragraph_isSet = false;
    m_paragraph_isValid = false;

    m_section_break_isSet = false;
    m_section_break_isValid = false;

    m_start_index_isSet = false;
    m_start_index_isValid = false;

    m_table_isSet = false;
    m_table_isValid = false;

    m_table_of_contents_isSet = false;
    m_table_of_contents_isValid = false;
}

void OAIStructuralElement::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStructuralElement::fromJsonObject(QJsonObject json) {

    m_end_index_isValid = ::OpenAPI::fromJsonValue(m_end_index, json[QString("endIndex")]);
    m_end_index_isSet = !json[QString("endIndex")].isNull() && m_end_index_isValid;

    m_paragraph_isValid = ::OpenAPI::fromJsonValue(m_paragraph, json[QString("paragraph")]);
    m_paragraph_isSet = !json[QString("paragraph")].isNull() && m_paragraph_isValid;

    m_section_break_isValid = ::OpenAPI::fromJsonValue(m_section_break, json[QString("sectionBreak")]);
    m_section_break_isSet = !json[QString("sectionBreak")].isNull() && m_section_break_isValid;

    m_start_index_isValid = ::OpenAPI::fromJsonValue(m_start_index, json[QString("startIndex")]);
    m_start_index_isSet = !json[QString("startIndex")].isNull() && m_start_index_isValid;

    m_table_isValid = ::OpenAPI::fromJsonValue(m_table, json[QString("table")]);
    m_table_isSet = !json[QString("table")].isNull() && m_table_isValid;

    m_table_of_contents_isValid = ::OpenAPI::fromJsonValue(m_table_of_contents, json[QString("tableOfContents")]);
    m_table_of_contents_isSet = !json[QString("tableOfContents")].isNull() && m_table_of_contents_isValid;
}

QString OAIStructuralElement::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStructuralElement::asJsonObject() const {
    QJsonObject obj;
    if (m_end_index_isSet) {
        obj.insert(QString("endIndex"), ::OpenAPI::toJsonValue(m_end_index));
    }
    if (m_paragraph.isSet()) {
        obj.insert(QString("paragraph"), ::OpenAPI::toJsonValue(m_paragraph));
    }
    if (m_section_break.isSet()) {
        obj.insert(QString("sectionBreak"), ::OpenAPI::toJsonValue(m_section_break));
    }
    if (m_start_index_isSet) {
        obj.insert(QString("startIndex"), ::OpenAPI::toJsonValue(m_start_index));
    }
    if (m_table.isSet()) {
        obj.insert(QString("table"), ::OpenAPI::toJsonValue(m_table));
    }
    if (m_table_of_contents.isSet()) {
        obj.insert(QString("tableOfContents"), ::OpenAPI::toJsonValue(m_table_of_contents));
    }
    return obj;
}

qint32 OAIStructuralElement::getEndIndex() const {
    return m_end_index;
}
void OAIStructuralElement::setEndIndex(const qint32 &end_index) {
    m_end_index = end_index;
    m_end_index_isSet = true;
}

bool OAIStructuralElement::is_end_index_Set() const{
    return m_end_index_isSet;
}

bool OAIStructuralElement::is_end_index_Valid() const{
    return m_end_index_isValid;
}

OAIParagraph OAIStructuralElement::getParagraph() const {
    return m_paragraph;
}
void OAIStructuralElement::setParagraph(const OAIParagraph &paragraph) {
    m_paragraph = paragraph;
    m_paragraph_isSet = true;
}

bool OAIStructuralElement::is_paragraph_Set() const{
    return m_paragraph_isSet;
}

bool OAIStructuralElement::is_paragraph_Valid() const{
    return m_paragraph_isValid;
}

OAISectionBreak OAIStructuralElement::getSectionBreak() const {
    return m_section_break;
}
void OAIStructuralElement::setSectionBreak(const OAISectionBreak &section_break) {
    m_section_break = section_break;
    m_section_break_isSet = true;
}

bool OAIStructuralElement::is_section_break_Set() const{
    return m_section_break_isSet;
}

bool OAIStructuralElement::is_section_break_Valid() const{
    return m_section_break_isValid;
}

qint32 OAIStructuralElement::getStartIndex() const {
    return m_start_index;
}
void OAIStructuralElement::setStartIndex(const qint32 &start_index) {
    m_start_index = start_index;
    m_start_index_isSet = true;
}

bool OAIStructuralElement::is_start_index_Set() const{
    return m_start_index_isSet;
}

bool OAIStructuralElement::is_start_index_Valid() const{
    return m_start_index_isValid;
}

OAITable OAIStructuralElement::getTable() const {
    return m_table;
}
void OAIStructuralElement::setTable(const OAITable &table) {
    m_table = table;
    m_table_isSet = true;
}

bool OAIStructuralElement::is_table_Set() const{
    return m_table_isSet;
}

bool OAIStructuralElement::is_table_Valid() const{
    return m_table_isValid;
}

OAITableOfContents OAIStructuralElement::getTableOfContents() const {
    return m_table_of_contents;
}
void OAIStructuralElement::setTableOfContents(const OAITableOfContents &table_of_contents) {
    m_table_of_contents = table_of_contents;
    m_table_of_contents_isSet = true;
}

bool OAIStructuralElement::is_table_of_contents_Set() const{
    return m_table_of_contents_isSet;
}

bool OAIStructuralElement::is_table_of_contents_Valid() const{
    return m_table_of_contents_isValid;
}

bool OAIStructuralElement::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_end_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_paragraph.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_section_break.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_table.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_table_of_contents.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStructuralElement::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
