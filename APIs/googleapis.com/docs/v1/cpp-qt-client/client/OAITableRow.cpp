/**
 * Google Docs API
 * Reads and writes Google Docs documents.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITableRow.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITableRow::OAITableRow(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITableRow::OAITableRow() {
    this->initializeModel();
}

OAITableRow::~OAITableRow() {}

void OAITableRow::initializeModel() {

    m_end_index_isSet = false;
    m_end_index_isValid = false;

    m_start_index_isSet = false;
    m_start_index_isValid = false;

    m_suggested_deletion_ids_isSet = false;
    m_suggested_deletion_ids_isValid = false;

    m_suggested_insertion_ids_isSet = false;
    m_suggested_insertion_ids_isValid = false;

    m_suggested_table_row_style_changes_isSet = false;
    m_suggested_table_row_style_changes_isValid = false;

    m_table_cells_isSet = false;
    m_table_cells_isValid = false;

    m_table_row_style_isSet = false;
    m_table_row_style_isValid = false;
}

void OAITableRow::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITableRow::fromJsonObject(QJsonObject json) {

    m_end_index_isValid = ::OpenAPI::fromJsonValue(m_end_index, json[QString("endIndex")]);
    m_end_index_isSet = !json[QString("endIndex")].isNull() && m_end_index_isValid;

    m_start_index_isValid = ::OpenAPI::fromJsonValue(m_start_index, json[QString("startIndex")]);
    m_start_index_isSet = !json[QString("startIndex")].isNull() && m_start_index_isValid;

    m_suggested_deletion_ids_isValid = ::OpenAPI::fromJsonValue(m_suggested_deletion_ids, json[QString("suggestedDeletionIds")]);
    m_suggested_deletion_ids_isSet = !json[QString("suggestedDeletionIds")].isNull() && m_suggested_deletion_ids_isValid;

    m_suggested_insertion_ids_isValid = ::OpenAPI::fromJsonValue(m_suggested_insertion_ids, json[QString("suggestedInsertionIds")]);
    m_suggested_insertion_ids_isSet = !json[QString("suggestedInsertionIds")].isNull() && m_suggested_insertion_ids_isValid;

    m_suggested_table_row_style_changes_isValid = ::OpenAPI::fromJsonValue(m_suggested_table_row_style_changes, json[QString("suggestedTableRowStyleChanges")]);
    m_suggested_table_row_style_changes_isSet = !json[QString("suggestedTableRowStyleChanges")].isNull() && m_suggested_table_row_style_changes_isValid;

    m_table_cells_isValid = ::OpenAPI::fromJsonValue(m_table_cells, json[QString("tableCells")]);
    m_table_cells_isSet = !json[QString("tableCells")].isNull() && m_table_cells_isValid;

    m_table_row_style_isValid = ::OpenAPI::fromJsonValue(m_table_row_style, json[QString("tableRowStyle")]);
    m_table_row_style_isSet = !json[QString("tableRowStyle")].isNull() && m_table_row_style_isValid;
}

QString OAITableRow::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITableRow::asJsonObject() const {
    QJsonObject obj;
    if (m_end_index_isSet) {
        obj.insert(QString("endIndex"), ::OpenAPI::toJsonValue(m_end_index));
    }
    if (m_start_index_isSet) {
        obj.insert(QString("startIndex"), ::OpenAPI::toJsonValue(m_start_index));
    }
    if (m_suggested_deletion_ids.size() > 0) {
        obj.insert(QString("suggestedDeletionIds"), ::OpenAPI::toJsonValue(m_suggested_deletion_ids));
    }
    if (m_suggested_insertion_ids.size() > 0) {
        obj.insert(QString("suggestedInsertionIds"), ::OpenAPI::toJsonValue(m_suggested_insertion_ids));
    }
    if (m_suggested_table_row_style_changes.size() > 0) {
        obj.insert(QString("suggestedTableRowStyleChanges"), ::OpenAPI::toJsonValue(m_suggested_table_row_style_changes));
    }
    if (m_table_cells.size() > 0) {
        obj.insert(QString("tableCells"), ::OpenAPI::toJsonValue(m_table_cells));
    }
    if (m_table_row_style.isSet()) {
        obj.insert(QString("tableRowStyle"), ::OpenAPI::toJsonValue(m_table_row_style));
    }
    return obj;
}

qint32 OAITableRow::getEndIndex() const {
    return m_end_index;
}
void OAITableRow::setEndIndex(const qint32 &end_index) {
    m_end_index = end_index;
    m_end_index_isSet = true;
}

bool OAITableRow::is_end_index_Set() const{
    return m_end_index_isSet;
}

bool OAITableRow::is_end_index_Valid() const{
    return m_end_index_isValid;
}

qint32 OAITableRow::getStartIndex() const {
    return m_start_index;
}
void OAITableRow::setStartIndex(const qint32 &start_index) {
    m_start_index = start_index;
    m_start_index_isSet = true;
}

bool OAITableRow::is_start_index_Set() const{
    return m_start_index_isSet;
}

bool OAITableRow::is_start_index_Valid() const{
    return m_start_index_isValid;
}

QList<QString> OAITableRow::getSuggestedDeletionIds() const {
    return m_suggested_deletion_ids;
}
void OAITableRow::setSuggestedDeletionIds(const QList<QString> &suggested_deletion_ids) {
    m_suggested_deletion_ids = suggested_deletion_ids;
    m_suggested_deletion_ids_isSet = true;
}

bool OAITableRow::is_suggested_deletion_ids_Set() const{
    return m_suggested_deletion_ids_isSet;
}

bool OAITableRow::is_suggested_deletion_ids_Valid() const{
    return m_suggested_deletion_ids_isValid;
}

QList<QString> OAITableRow::getSuggestedInsertionIds() const {
    return m_suggested_insertion_ids;
}
void OAITableRow::setSuggestedInsertionIds(const QList<QString> &suggested_insertion_ids) {
    m_suggested_insertion_ids = suggested_insertion_ids;
    m_suggested_insertion_ids_isSet = true;
}

bool OAITableRow::is_suggested_insertion_ids_Set() const{
    return m_suggested_insertion_ids_isSet;
}

bool OAITableRow::is_suggested_insertion_ids_Valid() const{
    return m_suggested_insertion_ids_isValid;
}

QMap<QString, OAISuggestedTableRowStyle> OAITableRow::getSuggestedTableRowStyleChanges() const {
    return m_suggested_table_row_style_changes;
}
void OAITableRow::setSuggestedTableRowStyleChanges(const QMap<QString, OAISuggestedTableRowStyle> &suggested_table_row_style_changes) {
    m_suggested_table_row_style_changes = suggested_table_row_style_changes;
    m_suggested_table_row_style_changes_isSet = true;
}

bool OAITableRow::is_suggested_table_row_style_changes_Set() const{
    return m_suggested_table_row_style_changes_isSet;
}

bool OAITableRow::is_suggested_table_row_style_changes_Valid() const{
    return m_suggested_table_row_style_changes_isValid;
}

QList<OAITableCell> OAITableRow::getTableCells() const {
    return m_table_cells;
}
void OAITableRow::setTableCells(const QList<OAITableCell> &table_cells) {
    m_table_cells = table_cells;
    m_table_cells_isSet = true;
}

bool OAITableRow::is_table_cells_Set() const{
    return m_table_cells_isSet;
}

bool OAITableRow::is_table_cells_Valid() const{
    return m_table_cells_isValid;
}

OAITableRowStyle OAITableRow::getTableRowStyle() const {
    return m_table_row_style;
}
void OAITableRow::setTableRowStyle(const OAITableRowStyle &table_row_style) {
    m_table_row_style = table_row_style;
    m_table_row_style_isSet = true;
}

bool OAITableRow::is_table_row_style_Set() const{
    return m_table_row_style_isSet;
}

bool OAITableRow::is_table_row_style_Valid() const{
    return m_table_row_style_isValid;
}

bool OAITableRow::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_end_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_suggested_deletion_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_suggested_insertion_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_suggested_table_row_style_changes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_table_cells.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_table_row_style.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITableRow::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
