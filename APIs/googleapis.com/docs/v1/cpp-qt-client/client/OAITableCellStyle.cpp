/**
 * Google Docs API
 * Reads and writes Google Docs documents.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITableCellStyle.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITableCellStyle::OAITableCellStyle(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITableCellStyle::OAITableCellStyle() {
    this->initializeModel();
}

OAITableCellStyle::~OAITableCellStyle() {}

void OAITableCellStyle::initializeModel() {

    m_background_color_isSet = false;
    m_background_color_isValid = false;

    m_border_bottom_isSet = false;
    m_border_bottom_isValid = false;

    m_border_left_isSet = false;
    m_border_left_isValid = false;

    m_border_right_isSet = false;
    m_border_right_isValid = false;

    m_border_top_isSet = false;
    m_border_top_isValid = false;

    m_column_span_isSet = false;
    m_column_span_isValid = false;

    m_content_alignment_isSet = false;
    m_content_alignment_isValid = false;

    m_padding_bottom_isSet = false;
    m_padding_bottom_isValid = false;

    m_padding_left_isSet = false;
    m_padding_left_isValid = false;

    m_padding_right_isSet = false;
    m_padding_right_isValid = false;

    m_padding_top_isSet = false;
    m_padding_top_isValid = false;

    m_row_span_isSet = false;
    m_row_span_isValid = false;
}

void OAITableCellStyle::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITableCellStyle::fromJsonObject(QJsonObject json) {

    m_background_color_isValid = ::OpenAPI::fromJsonValue(m_background_color, json[QString("backgroundColor")]);
    m_background_color_isSet = !json[QString("backgroundColor")].isNull() && m_background_color_isValid;

    m_border_bottom_isValid = ::OpenAPI::fromJsonValue(m_border_bottom, json[QString("borderBottom")]);
    m_border_bottom_isSet = !json[QString("borderBottom")].isNull() && m_border_bottom_isValid;

    m_border_left_isValid = ::OpenAPI::fromJsonValue(m_border_left, json[QString("borderLeft")]);
    m_border_left_isSet = !json[QString("borderLeft")].isNull() && m_border_left_isValid;

    m_border_right_isValid = ::OpenAPI::fromJsonValue(m_border_right, json[QString("borderRight")]);
    m_border_right_isSet = !json[QString("borderRight")].isNull() && m_border_right_isValid;

    m_border_top_isValid = ::OpenAPI::fromJsonValue(m_border_top, json[QString("borderTop")]);
    m_border_top_isSet = !json[QString("borderTop")].isNull() && m_border_top_isValid;

    m_column_span_isValid = ::OpenAPI::fromJsonValue(m_column_span, json[QString("columnSpan")]);
    m_column_span_isSet = !json[QString("columnSpan")].isNull() && m_column_span_isValid;

    m_content_alignment_isValid = ::OpenAPI::fromJsonValue(m_content_alignment, json[QString("contentAlignment")]);
    m_content_alignment_isSet = !json[QString("contentAlignment")].isNull() && m_content_alignment_isValid;

    m_padding_bottom_isValid = ::OpenAPI::fromJsonValue(m_padding_bottom, json[QString("paddingBottom")]);
    m_padding_bottom_isSet = !json[QString("paddingBottom")].isNull() && m_padding_bottom_isValid;

    m_padding_left_isValid = ::OpenAPI::fromJsonValue(m_padding_left, json[QString("paddingLeft")]);
    m_padding_left_isSet = !json[QString("paddingLeft")].isNull() && m_padding_left_isValid;

    m_padding_right_isValid = ::OpenAPI::fromJsonValue(m_padding_right, json[QString("paddingRight")]);
    m_padding_right_isSet = !json[QString("paddingRight")].isNull() && m_padding_right_isValid;

    m_padding_top_isValid = ::OpenAPI::fromJsonValue(m_padding_top, json[QString("paddingTop")]);
    m_padding_top_isSet = !json[QString("paddingTop")].isNull() && m_padding_top_isValid;

    m_row_span_isValid = ::OpenAPI::fromJsonValue(m_row_span, json[QString("rowSpan")]);
    m_row_span_isSet = !json[QString("rowSpan")].isNull() && m_row_span_isValid;
}

QString OAITableCellStyle::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITableCellStyle::asJsonObject() const {
    QJsonObject obj;
    if (m_background_color.isSet()) {
        obj.insert(QString("backgroundColor"), ::OpenAPI::toJsonValue(m_background_color));
    }
    if (m_border_bottom.isSet()) {
        obj.insert(QString("borderBottom"), ::OpenAPI::toJsonValue(m_border_bottom));
    }
    if (m_border_left.isSet()) {
        obj.insert(QString("borderLeft"), ::OpenAPI::toJsonValue(m_border_left));
    }
    if (m_border_right.isSet()) {
        obj.insert(QString("borderRight"), ::OpenAPI::toJsonValue(m_border_right));
    }
    if (m_border_top.isSet()) {
        obj.insert(QString("borderTop"), ::OpenAPI::toJsonValue(m_border_top));
    }
    if (m_column_span_isSet) {
        obj.insert(QString("columnSpan"), ::OpenAPI::toJsonValue(m_column_span));
    }
    if (m_content_alignment_isSet) {
        obj.insert(QString("contentAlignment"), ::OpenAPI::toJsonValue(m_content_alignment));
    }
    if (m_padding_bottom.isSet()) {
        obj.insert(QString("paddingBottom"), ::OpenAPI::toJsonValue(m_padding_bottom));
    }
    if (m_padding_left.isSet()) {
        obj.insert(QString("paddingLeft"), ::OpenAPI::toJsonValue(m_padding_left));
    }
    if (m_padding_right.isSet()) {
        obj.insert(QString("paddingRight"), ::OpenAPI::toJsonValue(m_padding_right));
    }
    if (m_padding_top.isSet()) {
        obj.insert(QString("paddingTop"), ::OpenAPI::toJsonValue(m_padding_top));
    }
    if (m_row_span_isSet) {
        obj.insert(QString("rowSpan"), ::OpenAPI::toJsonValue(m_row_span));
    }
    return obj;
}

OAIOptionalColor OAITableCellStyle::getBackgroundColor() const {
    return m_background_color;
}
void OAITableCellStyle::setBackgroundColor(const OAIOptionalColor &background_color) {
    m_background_color = background_color;
    m_background_color_isSet = true;
}

bool OAITableCellStyle::is_background_color_Set() const{
    return m_background_color_isSet;
}

bool OAITableCellStyle::is_background_color_Valid() const{
    return m_background_color_isValid;
}

OAITableCellBorder OAITableCellStyle::getBorderBottom() const {
    return m_border_bottom;
}
void OAITableCellStyle::setBorderBottom(const OAITableCellBorder &border_bottom) {
    m_border_bottom = border_bottom;
    m_border_bottom_isSet = true;
}

bool OAITableCellStyle::is_border_bottom_Set() const{
    return m_border_bottom_isSet;
}

bool OAITableCellStyle::is_border_bottom_Valid() const{
    return m_border_bottom_isValid;
}

OAITableCellBorder OAITableCellStyle::getBorderLeft() const {
    return m_border_left;
}
void OAITableCellStyle::setBorderLeft(const OAITableCellBorder &border_left) {
    m_border_left = border_left;
    m_border_left_isSet = true;
}

bool OAITableCellStyle::is_border_left_Set() const{
    return m_border_left_isSet;
}

bool OAITableCellStyle::is_border_left_Valid() const{
    return m_border_left_isValid;
}

OAITableCellBorder OAITableCellStyle::getBorderRight() const {
    return m_border_right;
}
void OAITableCellStyle::setBorderRight(const OAITableCellBorder &border_right) {
    m_border_right = border_right;
    m_border_right_isSet = true;
}

bool OAITableCellStyle::is_border_right_Set() const{
    return m_border_right_isSet;
}

bool OAITableCellStyle::is_border_right_Valid() const{
    return m_border_right_isValid;
}

OAITableCellBorder OAITableCellStyle::getBorderTop() const {
    return m_border_top;
}
void OAITableCellStyle::setBorderTop(const OAITableCellBorder &border_top) {
    m_border_top = border_top;
    m_border_top_isSet = true;
}

bool OAITableCellStyle::is_border_top_Set() const{
    return m_border_top_isSet;
}

bool OAITableCellStyle::is_border_top_Valid() const{
    return m_border_top_isValid;
}

qint32 OAITableCellStyle::getColumnSpan() const {
    return m_column_span;
}
void OAITableCellStyle::setColumnSpan(const qint32 &column_span) {
    m_column_span = column_span;
    m_column_span_isSet = true;
}

bool OAITableCellStyle::is_column_span_Set() const{
    return m_column_span_isSet;
}

bool OAITableCellStyle::is_column_span_Valid() const{
    return m_column_span_isValid;
}

QString OAITableCellStyle::getContentAlignment() const {
    return m_content_alignment;
}
void OAITableCellStyle::setContentAlignment(const QString &content_alignment) {
    m_content_alignment = content_alignment;
    m_content_alignment_isSet = true;
}

bool OAITableCellStyle::is_content_alignment_Set() const{
    return m_content_alignment_isSet;
}

bool OAITableCellStyle::is_content_alignment_Valid() const{
    return m_content_alignment_isValid;
}

OAIDimension OAITableCellStyle::getPaddingBottom() const {
    return m_padding_bottom;
}
void OAITableCellStyle::setPaddingBottom(const OAIDimension &padding_bottom) {
    m_padding_bottom = padding_bottom;
    m_padding_bottom_isSet = true;
}

bool OAITableCellStyle::is_padding_bottom_Set() const{
    return m_padding_bottom_isSet;
}

bool OAITableCellStyle::is_padding_bottom_Valid() const{
    return m_padding_bottom_isValid;
}

OAIDimension OAITableCellStyle::getPaddingLeft() const {
    return m_padding_left;
}
void OAITableCellStyle::setPaddingLeft(const OAIDimension &padding_left) {
    m_padding_left = padding_left;
    m_padding_left_isSet = true;
}

bool OAITableCellStyle::is_padding_left_Set() const{
    return m_padding_left_isSet;
}

bool OAITableCellStyle::is_padding_left_Valid() const{
    return m_padding_left_isValid;
}

OAIDimension OAITableCellStyle::getPaddingRight() const {
    return m_padding_right;
}
void OAITableCellStyle::setPaddingRight(const OAIDimension &padding_right) {
    m_padding_right = padding_right;
    m_padding_right_isSet = true;
}

bool OAITableCellStyle::is_padding_right_Set() const{
    return m_padding_right_isSet;
}

bool OAITableCellStyle::is_padding_right_Valid() const{
    return m_padding_right_isValid;
}

OAIDimension OAITableCellStyle::getPaddingTop() const {
    return m_padding_top;
}
void OAITableCellStyle::setPaddingTop(const OAIDimension &padding_top) {
    m_padding_top = padding_top;
    m_padding_top_isSet = true;
}

bool OAITableCellStyle::is_padding_top_Set() const{
    return m_padding_top_isSet;
}

bool OAITableCellStyle::is_padding_top_Valid() const{
    return m_padding_top_isValid;
}

qint32 OAITableCellStyle::getRowSpan() const {
    return m_row_span;
}
void OAITableCellStyle::setRowSpan(const qint32 &row_span) {
    m_row_span = row_span;
    m_row_span_isSet = true;
}

bool OAITableCellStyle::is_row_span_Set() const{
    return m_row_span_isSet;
}

bool OAITableCellStyle::is_row_span_Valid() const{
    return m_row_span_isValid;
}

bool OAITableCellStyle::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_background_color.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_border_bottom.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_border_left.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_border_right.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_border_top.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_column_span_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_alignment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_padding_bottom.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_padding_left.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_padding_right.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_padding_top.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_row_span_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITableCellStyle::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
