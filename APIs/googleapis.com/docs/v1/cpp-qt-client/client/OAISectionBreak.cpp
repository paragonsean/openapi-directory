/**
 * Google Docs API
 * Reads and writes Google Docs documents.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISectionBreak.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISectionBreak::OAISectionBreak(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISectionBreak::OAISectionBreak() {
    this->initializeModel();
}

OAISectionBreak::~OAISectionBreak() {}

void OAISectionBreak::initializeModel() {

    m_section_style_isSet = false;
    m_section_style_isValid = false;

    m_suggested_deletion_ids_isSet = false;
    m_suggested_deletion_ids_isValid = false;

    m_suggested_insertion_ids_isSet = false;
    m_suggested_insertion_ids_isValid = false;
}

void OAISectionBreak::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISectionBreak::fromJsonObject(QJsonObject json) {

    m_section_style_isValid = ::OpenAPI::fromJsonValue(m_section_style, json[QString("sectionStyle")]);
    m_section_style_isSet = !json[QString("sectionStyle")].isNull() && m_section_style_isValid;

    m_suggested_deletion_ids_isValid = ::OpenAPI::fromJsonValue(m_suggested_deletion_ids, json[QString("suggestedDeletionIds")]);
    m_suggested_deletion_ids_isSet = !json[QString("suggestedDeletionIds")].isNull() && m_suggested_deletion_ids_isValid;

    m_suggested_insertion_ids_isValid = ::OpenAPI::fromJsonValue(m_suggested_insertion_ids, json[QString("suggestedInsertionIds")]);
    m_suggested_insertion_ids_isSet = !json[QString("suggestedInsertionIds")].isNull() && m_suggested_insertion_ids_isValid;
}

QString OAISectionBreak::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISectionBreak::asJsonObject() const {
    QJsonObject obj;
    if (m_section_style.isSet()) {
        obj.insert(QString("sectionStyle"), ::OpenAPI::toJsonValue(m_section_style));
    }
    if (m_suggested_deletion_ids.size() > 0) {
        obj.insert(QString("suggestedDeletionIds"), ::OpenAPI::toJsonValue(m_suggested_deletion_ids));
    }
    if (m_suggested_insertion_ids.size() > 0) {
        obj.insert(QString("suggestedInsertionIds"), ::OpenAPI::toJsonValue(m_suggested_insertion_ids));
    }
    return obj;
}

OAISectionStyle OAISectionBreak::getSectionStyle() const {
    return m_section_style;
}
void OAISectionBreak::setSectionStyle(const OAISectionStyle &section_style) {
    m_section_style = section_style;
    m_section_style_isSet = true;
}

bool OAISectionBreak::is_section_style_Set() const{
    return m_section_style_isSet;
}

bool OAISectionBreak::is_section_style_Valid() const{
    return m_section_style_isValid;
}

QList<QString> OAISectionBreak::getSuggestedDeletionIds() const {
    return m_suggested_deletion_ids;
}
void OAISectionBreak::setSuggestedDeletionIds(const QList<QString> &suggested_deletion_ids) {
    m_suggested_deletion_ids = suggested_deletion_ids;
    m_suggested_deletion_ids_isSet = true;
}

bool OAISectionBreak::is_suggested_deletion_ids_Set() const{
    return m_suggested_deletion_ids_isSet;
}

bool OAISectionBreak::is_suggested_deletion_ids_Valid() const{
    return m_suggested_deletion_ids_isValid;
}

QList<QString> OAISectionBreak::getSuggestedInsertionIds() const {
    return m_suggested_insertion_ids;
}
void OAISectionBreak::setSuggestedInsertionIds(const QList<QString> &suggested_insertion_ids) {
    m_suggested_insertion_ids = suggested_insertion_ids;
    m_suggested_insertion_ids_isSet = true;
}

bool OAISectionBreak::is_suggested_insertion_ids_Set() const{
    return m_suggested_insertion_ids_isSet;
}

bool OAISectionBreak::is_suggested_insertion_ids_Valid() const{
    return m_suggested_insertion_ids_isValid;
}

bool OAISectionBreak::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_section_style.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_suggested_deletion_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_suggested_insertion_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISectionBreak::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
