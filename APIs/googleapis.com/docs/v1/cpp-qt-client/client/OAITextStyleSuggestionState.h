/**
 * Google Docs API
 * Reads and writes Google Docs documents.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAITextStyleSuggestionState.h
 *
 * A mask that indicates which of the fields on the base TextStyle have been changed in this suggestion. For any field set to true, there&#39;s a new suggested value.
 */

#ifndef OAITextStyleSuggestionState_H
#define OAITextStyleSuggestionState_H

#include <QJsonObject>


#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAITextStyleSuggestionState : public OAIObject {
public:
    OAITextStyleSuggestionState();
    OAITextStyleSuggestionState(QString json);
    ~OAITextStyleSuggestionState() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isBackgroundColorSuggested() const;
    void setBackgroundColorSuggested(const bool &background_color_suggested);
    bool is_background_color_suggested_Set() const;
    bool is_background_color_suggested_Valid() const;

    bool isBaselineOffsetSuggested() const;
    void setBaselineOffsetSuggested(const bool &baseline_offset_suggested);
    bool is_baseline_offset_suggested_Set() const;
    bool is_baseline_offset_suggested_Valid() const;

    bool isBoldSuggested() const;
    void setBoldSuggested(const bool &bold_suggested);
    bool is_bold_suggested_Set() const;
    bool is_bold_suggested_Valid() const;

    bool isFontSizeSuggested() const;
    void setFontSizeSuggested(const bool &font_size_suggested);
    bool is_font_size_suggested_Set() const;
    bool is_font_size_suggested_Valid() const;

    bool isForegroundColorSuggested() const;
    void setForegroundColorSuggested(const bool &foreground_color_suggested);
    bool is_foreground_color_suggested_Set() const;
    bool is_foreground_color_suggested_Valid() const;

    bool isItalicSuggested() const;
    void setItalicSuggested(const bool &italic_suggested);
    bool is_italic_suggested_Set() const;
    bool is_italic_suggested_Valid() const;

    bool isLinkSuggested() const;
    void setLinkSuggested(const bool &link_suggested);
    bool is_link_suggested_Set() const;
    bool is_link_suggested_Valid() const;

    bool isSmallCapsSuggested() const;
    void setSmallCapsSuggested(const bool &small_caps_suggested);
    bool is_small_caps_suggested_Set() const;
    bool is_small_caps_suggested_Valid() const;

    bool isStrikethroughSuggested() const;
    void setStrikethroughSuggested(const bool &strikethrough_suggested);
    bool is_strikethrough_suggested_Set() const;
    bool is_strikethrough_suggested_Valid() const;

    bool isUnderlineSuggested() const;
    void setUnderlineSuggested(const bool &underline_suggested);
    bool is_underline_suggested_Set() const;
    bool is_underline_suggested_Valid() const;

    bool isWeightedFontFamilySuggested() const;
    void setWeightedFontFamilySuggested(const bool &weighted_font_family_suggested);
    bool is_weighted_font_family_suggested_Set() const;
    bool is_weighted_font_family_suggested_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_background_color_suggested;
    bool m_background_color_suggested_isSet;
    bool m_background_color_suggested_isValid;

    bool m_baseline_offset_suggested;
    bool m_baseline_offset_suggested_isSet;
    bool m_baseline_offset_suggested_isValid;

    bool m_bold_suggested;
    bool m_bold_suggested_isSet;
    bool m_bold_suggested_isValid;

    bool m_font_size_suggested;
    bool m_font_size_suggested_isSet;
    bool m_font_size_suggested_isValid;

    bool m_foreground_color_suggested;
    bool m_foreground_color_suggested_isSet;
    bool m_foreground_color_suggested_isValid;

    bool m_italic_suggested;
    bool m_italic_suggested_isSet;
    bool m_italic_suggested_isValid;

    bool m_link_suggested;
    bool m_link_suggested_isSet;
    bool m_link_suggested_isValid;

    bool m_small_caps_suggested;
    bool m_small_caps_suggested_isSet;
    bool m_small_caps_suggested_isValid;

    bool m_strikethrough_suggested;
    bool m_strikethrough_suggested_isSet;
    bool m_strikethrough_suggested_isValid;

    bool m_underline_suggested;
    bool m_underline_suggested_isSet;
    bool m_underline_suggested_isValid;

    bool m_weighted_font_family_suggested;
    bool m_weighted_font_family_suggested_isSet;
    bool m_weighted_font_family_suggested_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAITextStyleSuggestionState)

#endif // OAITextStyleSuggestionState_H
