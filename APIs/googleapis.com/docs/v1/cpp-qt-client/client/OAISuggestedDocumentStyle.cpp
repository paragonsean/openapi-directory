/**
 * Google Docs API
 * Reads and writes Google Docs documents.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISuggestedDocumentStyle.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISuggestedDocumentStyle::OAISuggestedDocumentStyle(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISuggestedDocumentStyle::OAISuggestedDocumentStyle() {
    this->initializeModel();
}

OAISuggestedDocumentStyle::~OAISuggestedDocumentStyle() {}

void OAISuggestedDocumentStyle::initializeModel() {

    m_document_style_isSet = false;
    m_document_style_isValid = false;

    m_document_style_suggestion_state_isSet = false;
    m_document_style_suggestion_state_isValid = false;
}

void OAISuggestedDocumentStyle::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISuggestedDocumentStyle::fromJsonObject(QJsonObject json) {

    m_document_style_isValid = ::OpenAPI::fromJsonValue(m_document_style, json[QString("documentStyle")]);
    m_document_style_isSet = !json[QString("documentStyle")].isNull() && m_document_style_isValid;

    m_document_style_suggestion_state_isValid = ::OpenAPI::fromJsonValue(m_document_style_suggestion_state, json[QString("documentStyleSuggestionState")]);
    m_document_style_suggestion_state_isSet = !json[QString("documentStyleSuggestionState")].isNull() && m_document_style_suggestion_state_isValid;
}

QString OAISuggestedDocumentStyle::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISuggestedDocumentStyle::asJsonObject() const {
    QJsonObject obj;
    if (m_document_style.isSet()) {
        obj.insert(QString("documentStyle"), ::OpenAPI::toJsonValue(m_document_style));
    }
    if (m_document_style_suggestion_state.isSet()) {
        obj.insert(QString("documentStyleSuggestionState"), ::OpenAPI::toJsonValue(m_document_style_suggestion_state));
    }
    return obj;
}

OAIDocumentStyle OAISuggestedDocumentStyle::getDocumentStyle() const {
    return m_document_style;
}
void OAISuggestedDocumentStyle::setDocumentStyle(const OAIDocumentStyle &document_style) {
    m_document_style = document_style;
    m_document_style_isSet = true;
}

bool OAISuggestedDocumentStyle::is_document_style_Set() const{
    return m_document_style_isSet;
}

bool OAISuggestedDocumentStyle::is_document_style_Valid() const{
    return m_document_style_isValid;
}

OAIDocumentStyleSuggestionState OAISuggestedDocumentStyle::getDocumentStyleSuggestionState() const {
    return m_document_style_suggestion_state;
}
void OAISuggestedDocumentStyle::setDocumentStyleSuggestionState(const OAIDocumentStyleSuggestionState &document_style_suggestion_state) {
    m_document_style_suggestion_state = document_style_suggestion_state;
    m_document_style_suggestion_state_isSet = true;
}

bool OAISuggestedDocumentStyle::is_document_style_suggestion_state_Set() const{
    return m_document_style_suggestion_state_isSet;
}

bool OAISuggestedDocumentStyle::is_document_style_suggestion_state_Valid() const{
    return m_document_style_suggestion_state_isValid;
}

bool OAISuggestedDocumentStyle::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_document_style.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_document_style_suggestion_state.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISuggestedDocumentStyle::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
