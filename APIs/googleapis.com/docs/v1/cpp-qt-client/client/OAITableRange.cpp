/**
 * Google Docs API
 * Reads and writes Google Docs documents.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITableRange.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITableRange::OAITableRange(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITableRange::OAITableRange() {
    this->initializeModel();
}

OAITableRange::~OAITableRange() {}

void OAITableRange::initializeModel() {

    m_column_span_isSet = false;
    m_column_span_isValid = false;

    m_row_span_isSet = false;
    m_row_span_isValid = false;

    m_table_cell_location_isSet = false;
    m_table_cell_location_isValid = false;
}

void OAITableRange::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITableRange::fromJsonObject(QJsonObject json) {

    m_column_span_isValid = ::OpenAPI::fromJsonValue(m_column_span, json[QString("columnSpan")]);
    m_column_span_isSet = !json[QString("columnSpan")].isNull() && m_column_span_isValid;

    m_row_span_isValid = ::OpenAPI::fromJsonValue(m_row_span, json[QString("rowSpan")]);
    m_row_span_isSet = !json[QString("rowSpan")].isNull() && m_row_span_isValid;

    m_table_cell_location_isValid = ::OpenAPI::fromJsonValue(m_table_cell_location, json[QString("tableCellLocation")]);
    m_table_cell_location_isSet = !json[QString("tableCellLocation")].isNull() && m_table_cell_location_isValid;
}

QString OAITableRange::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITableRange::asJsonObject() const {
    QJsonObject obj;
    if (m_column_span_isSet) {
        obj.insert(QString("columnSpan"), ::OpenAPI::toJsonValue(m_column_span));
    }
    if (m_row_span_isSet) {
        obj.insert(QString("rowSpan"), ::OpenAPI::toJsonValue(m_row_span));
    }
    if (m_table_cell_location.isSet()) {
        obj.insert(QString("tableCellLocation"), ::OpenAPI::toJsonValue(m_table_cell_location));
    }
    return obj;
}

qint32 OAITableRange::getColumnSpan() const {
    return m_column_span;
}
void OAITableRange::setColumnSpan(const qint32 &column_span) {
    m_column_span = column_span;
    m_column_span_isSet = true;
}

bool OAITableRange::is_column_span_Set() const{
    return m_column_span_isSet;
}

bool OAITableRange::is_column_span_Valid() const{
    return m_column_span_isValid;
}

qint32 OAITableRange::getRowSpan() const {
    return m_row_span;
}
void OAITableRange::setRowSpan(const qint32 &row_span) {
    m_row_span = row_span;
    m_row_span_isSet = true;
}

bool OAITableRange::is_row_span_Set() const{
    return m_row_span_isSet;
}

bool OAITableRange::is_row_span_Valid() const{
    return m_row_span_isValid;
}

OAITableCellLocation OAITableRange::getTableCellLocation() const {
    return m_table_cell_location;
}
void OAITableRange::setTableCellLocation(const OAITableCellLocation &table_cell_location) {
    m_table_cell_location = table_cell_location;
    m_table_cell_location_isSet = true;
}

bool OAITableRange::is_table_cell_location_Set() const{
    return m_table_cell_location_isSet;
}

bool OAITableRange::is_table_cell_location_Valid() const{
    return m_table_cell_location_isValid;
}

bool OAITableRange::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_column_span_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_row_span_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_table_cell_location.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITableRange::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
