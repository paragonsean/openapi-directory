/**
 * Google Docs API
 * Reads and writes Google Docs documents.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPositionedObjectPositioning.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPositionedObjectPositioning::OAIPositionedObjectPositioning(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPositionedObjectPositioning::OAIPositionedObjectPositioning() {
    this->initializeModel();
}

OAIPositionedObjectPositioning::~OAIPositionedObjectPositioning() {}

void OAIPositionedObjectPositioning::initializeModel() {

    m_layout_isSet = false;
    m_layout_isValid = false;

    m_left_offset_isSet = false;
    m_left_offset_isValid = false;

    m_top_offset_isSet = false;
    m_top_offset_isValid = false;
}

void OAIPositionedObjectPositioning::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPositionedObjectPositioning::fromJsonObject(QJsonObject json) {

    m_layout_isValid = ::OpenAPI::fromJsonValue(m_layout, json[QString("layout")]);
    m_layout_isSet = !json[QString("layout")].isNull() && m_layout_isValid;

    m_left_offset_isValid = ::OpenAPI::fromJsonValue(m_left_offset, json[QString("leftOffset")]);
    m_left_offset_isSet = !json[QString("leftOffset")].isNull() && m_left_offset_isValid;

    m_top_offset_isValid = ::OpenAPI::fromJsonValue(m_top_offset, json[QString("topOffset")]);
    m_top_offset_isSet = !json[QString("topOffset")].isNull() && m_top_offset_isValid;
}

QString OAIPositionedObjectPositioning::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPositionedObjectPositioning::asJsonObject() const {
    QJsonObject obj;
    if (m_layout_isSet) {
        obj.insert(QString("layout"), ::OpenAPI::toJsonValue(m_layout));
    }
    if (m_left_offset.isSet()) {
        obj.insert(QString("leftOffset"), ::OpenAPI::toJsonValue(m_left_offset));
    }
    if (m_top_offset.isSet()) {
        obj.insert(QString("topOffset"), ::OpenAPI::toJsonValue(m_top_offset));
    }
    return obj;
}

QString OAIPositionedObjectPositioning::getLayout() const {
    return m_layout;
}
void OAIPositionedObjectPositioning::setLayout(const QString &layout) {
    m_layout = layout;
    m_layout_isSet = true;
}

bool OAIPositionedObjectPositioning::is_layout_Set() const{
    return m_layout_isSet;
}

bool OAIPositionedObjectPositioning::is_layout_Valid() const{
    return m_layout_isValid;
}

OAIDimension OAIPositionedObjectPositioning::getLeftOffset() const {
    return m_left_offset;
}
void OAIPositionedObjectPositioning::setLeftOffset(const OAIDimension &left_offset) {
    m_left_offset = left_offset;
    m_left_offset_isSet = true;
}

bool OAIPositionedObjectPositioning::is_left_offset_Set() const{
    return m_left_offset_isSet;
}

bool OAIPositionedObjectPositioning::is_left_offset_Valid() const{
    return m_left_offset_isValid;
}

OAIDimension OAIPositionedObjectPositioning::getTopOffset() const {
    return m_top_offset;
}
void OAIPositionedObjectPositioning::setTopOffset(const OAIDimension &top_offset) {
    m_top_offset = top_offset;
    m_top_offset_isSet = true;
}

bool OAIPositionedObjectPositioning::is_top_offset_Set() const{
    return m_top_offset_isSet;
}

bool OAIPositionedObjectPositioning::is_top_offset_Valid() const{
    return m_top_offset_isValid;
}

bool OAIPositionedObjectPositioning::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_layout_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_left_offset.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_top_offset.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPositionedObjectPositioning::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
