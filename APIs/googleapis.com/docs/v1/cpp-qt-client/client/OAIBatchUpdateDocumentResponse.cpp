/**
 * Google Docs API
 * Reads and writes Google Docs documents.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBatchUpdateDocumentResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBatchUpdateDocumentResponse::OAIBatchUpdateDocumentResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBatchUpdateDocumentResponse::OAIBatchUpdateDocumentResponse() {
    this->initializeModel();
}

OAIBatchUpdateDocumentResponse::~OAIBatchUpdateDocumentResponse() {}

void OAIBatchUpdateDocumentResponse::initializeModel() {

    m_document_id_isSet = false;
    m_document_id_isValid = false;

    m_replies_isSet = false;
    m_replies_isValid = false;

    m_write_control_isSet = false;
    m_write_control_isValid = false;
}

void OAIBatchUpdateDocumentResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBatchUpdateDocumentResponse::fromJsonObject(QJsonObject json) {

    m_document_id_isValid = ::OpenAPI::fromJsonValue(m_document_id, json[QString("documentId")]);
    m_document_id_isSet = !json[QString("documentId")].isNull() && m_document_id_isValid;

    m_replies_isValid = ::OpenAPI::fromJsonValue(m_replies, json[QString("replies")]);
    m_replies_isSet = !json[QString("replies")].isNull() && m_replies_isValid;

    m_write_control_isValid = ::OpenAPI::fromJsonValue(m_write_control, json[QString("writeControl")]);
    m_write_control_isSet = !json[QString("writeControl")].isNull() && m_write_control_isValid;
}

QString OAIBatchUpdateDocumentResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBatchUpdateDocumentResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_document_id_isSet) {
        obj.insert(QString("documentId"), ::OpenAPI::toJsonValue(m_document_id));
    }
    if (m_replies.size() > 0) {
        obj.insert(QString("replies"), ::OpenAPI::toJsonValue(m_replies));
    }
    if (m_write_control.isSet()) {
        obj.insert(QString("writeControl"), ::OpenAPI::toJsonValue(m_write_control));
    }
    return obj;
}

QString OAIBatchUpdateDocumentResponse::getDocumentId() const {
    return m_document_id;
}
void OAIBatchUpdateDocumentResponse::setDocumentId(const QString &document_id) {
    m_document_id = document_id;
    m_document_id_isSet = true;
}

bool OAIBatchUpdateDocumentResponse::is_document_id_Set() const{
    return m_document_id_isSet;
}

bool OAIBatchUpdateDocumentResponse::is_document_id_Valid() const{
    return m_document_id_isValid;
}

QList<OAIResponse> OAIBatchUpdateDocumentResponse::getReplies() const {
    return m_replies;
}
void OAIBatchUpdateDocumentResponse::setReplies(const QList<OAIResponse> &replies) {
    m_replies = replies;
    m_replies_isSet = true;
}

bool OAIBatchUpdateDocumentResponse::is_replies_Set() const{
    return m_replies_isSet;
}

bool OAIBatchUpdateDocumentResponse::is_replies_Valid() const{
    return m_replies_isValid;
}

OAIWriteControl OAIBatchUpdateDocumentResponse::getWriteControl() const {
    return m_write_control;
}
void OAIBatchUpdateDocumentResponse::setWriteControl(const OAIWriteControl &write_control) {
    m_write_control = write_control;
    m_write_control_isSet = true;
}

bool OAIBatchUpdateDocumentResponse::is_write_control_Set() const{
    return m_write_control_isSet;
}

bool OAIBatchUpdateDocumentResponse::is_write_control_Valid() const{
    return m_write_control_isValid;
}

bool OAIBatchUpdateDocumentResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_document_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_replies.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_write_control.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBatchUpdateDocumentResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
