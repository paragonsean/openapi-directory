/**
 * Google Docs API
 * Reads and writes Google Docs documents.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITabStop.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITabStop::OAITabStop(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITabStop::OAITabStop() {
    this->initializeModel();
}

OAITabStop::~OAITabStop() {}

void OAITabStop::initializeModel() {

    m_alignment_isSet = false;
    m_alignment_isValid = false;

    m_offset_isSet = false;
    m_offset_isValid = false;
}

void OAITabStop::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITabStop::fromJsonObject(QJsonObject json) {

    m_alignment_isValid = ::OpenAPI::fromJsonValue(m_alignment, json[QString("alignment")]);
    m_alignment_isSet = !json[QString("alignment")].isNull() && m_alignment_isValid;

    m_offset_isValid = ::OpenAPI::fromJsonValue(m_offset, json[QString("offset")]);
    m_offset_isSet = !json[QString("offset")].isNull() && m_offset_isValid;
}

QString OAITabStop::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITabStop::asJsonObject() const {
    QJsonObject obj;
    if (m_alignment_isSet) {
        obj.insert(QString("alignment"), ::OpenAPI::toJsonValue(m_alignment));
    }
    if (m_offset.isSet()) {
        obj.insert(QString("offset"), ::OpenAPI::toJsonValue(m_offset));
    }
    return obj;
}

QString OAITabStop::getAlignment() const {
    return m_alignment;
}
void OAITabStop::setAlignment(const QString &alignment) {
    m_alignment = alignment;
    m_alignment_isSet = true;
}

bool OAITabStop::is_alignment_Set() const{
    return m_alignment_isSet;
}

bool OAITabStop::is_alignment_Valid() const{
    return m_alignment_isValid;
}

OAIDimension OAITabStop::getOffset() const {
    return m_offset;
}
void OAITabStop::setOffset(const OAIDimension &offset) {
    m_offset = offset;
    m_offset_isSet = true;
}

bool OAITabStop::is_offset_Set() const{
    return m_offset_isSet;
}

bool OAITabStop::is_offset_Valid() const{
    return m_offset_isValid;
}

bool OAITabStop::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_alignment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offset.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITabStop::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
