/**
 * Google Docs API
 * Reads and writes Google Docs documents.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBulletSuggestionState.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBulletSuggestionState::OAIBulletSuggestionState(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBulletSuggestionState::OAIBulletSuggestionState() {
    this->initializeModel();
}

OAIBulletSuggestionState::~OAIBulletSuggestionState() {}

void OAIBulletSuggestionState::initializeModel() {

    m_list_id_suggested_isSet = false;
    m_list_id_suggested_isValid = false;

    m_nesting_level_suggested_isSet = false;
    m_nesting_level_suggested_isValid = false;

    m_text_style_suggestion_state_isSet = false;
    m_text_style_suggestion_state_isValid = false;
}

void OAIBulletSuggestionState::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBulletSuggestionState::fromJsonObject(QJsonObject json) {

    m_list_id_suggested_isValid = ::OpenAPI::fromJsonValue(m_list_id_suggested, json[QString("listIdSuggested")]);
    m_list_id_suggested_isSet = !json[QString("listIdSuggested")].isNull() && m_list_id_suggested_isValid;

    m_nesting_level_suggested_isValid = ::OpenAPI::fromJsonValue(m_nesting_level_suggested, json[QString("nestingLevelSuggested")]);
    m_nesting_level_suggested_isSet = !json[QString("nestingLevelSuggested")].isNull() && m_nesting_level_suggested_isValid;

    m_text_style_suggestion_state_isValid = ::OpenAPI::fromJsonValue(m_text_style_suggestion_state, json[QString("textStyleSuggestionState")]);
    m_text_style_suggestion_state_isSet = !json[QString("textStyleSuggestionState")].isNull() && m_text_style_suggestion_state_isValid;
}

QString OAIBulletSuggestionState::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBulletSuggestionState::asJsonObject() const {
    QJsonObject obj;
    if (m_list_id_suggested_isSet) {
        obj.insert(QString("listIdSuggested"), ::OpenAPI::toJsonValue(m_list_id_suggested));
    }
    if (m_nesting_level_suggested_isSet) {
        obj.insert(QString("nestingLevelSuggested"), ::OpenAPI::toJsonValue(m_nesting_level_suggested));
    }
    if (m_text_style_suggestion_state.isSet()) {
        obj.insert(QString("textStyleSuggestionState"), ::OpenAPI::toJsonValue(m_text_style_suggestion_state));
    }
    return obj;
}

bool OAIBulletSuggestionState::isListIdSuggested() const {
    return m_list_id_suggested;
}
void OAIBulletSuggestionState::setListIdSuggested(const bool &list_id_suggested) {
    m_list_id_suggested = list_id_suggested;
    m_list_id_suggested_isSet = true;
}

bool OAIBulletSuggestionState::is_list_id_suggested_Set() const{
    return m_list_id_suggested_isSet;
}

bool OAIBulletSuggestionState::is_list_id_suggested_Valid() const{
    return m_list_id_suggested_isValid;
}

bool OAIBulletSuggestionState::isNestingLevelSuggested() const {
    return m_nesting_level_suggested;
}
void OAIBulletSuggestionState::setNestingLevelSuggested(const bool &nesting_level_suggested) {
    m_nesting_level_suggested = nesting_level_suggested;
    m_nesting_level_suggested_isSet = true;
}

bool OAIBulletSuggestionState::is_nesting_level_suggested_Set() const{
    return m_nesting_level_suggested_isSet;
}

bool OAIBulletSuggestionState::is_nesting_level_suggested_Valid() const{
    return m_nesting_level_suggested_isValid;
}

OAITextStyleSuggestionState OAIBulletSuggestionState::getTextStyleSuggestionState() const {
    return m_text_style_suggestion_state;
}
void OAIBulletSuggestionState::setTextStyleSuggestionState(const OAITextStyleSuggestionState &text_style_suggestion_state) {
    m_text_style_suggestion_state = text_style_suggestion_state;
    m_text_style_suggestion_state_isSet = true;
}

bool OAIBulletSuggestionState::is_text_style_suggestion_state_Set() const{
    return m_text_style_suggestion_state_isSet;
}

bool OAIBulletSuggestionState::is_text_style_suggestion_state_Valid() const{
    return m_text_style_suggestion_state_isValid;
}

bool OAIBulletSuggestionState::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_list_id_suggested_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nesting_level_suggested_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_style_suggestion_state.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBulletSuggestionState::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
