/**
 * Google Docs API
 * Reads and writes Google Docs documents.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIParagraphStyle.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIParagraphStyle::OAIParagraphStyle(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIParagraphStyle::OAIParagraphStyle() {
    this->initializeModel();
}

OAIParagraphStyle::~OAIParagraphStyle() {}

void OAIParagraphStyle::initializeModel() {

    m_alignment_isSet = false;
    m_alignment_isValid = false;

    m_avoid_widow_and_orphan_isSet = false;
    m_avoid_widow_and_orphan_isValid = false;

    m_border_between_isSet = false;
    m_border_between_isValid = false;

    m_border_bottom_isSet = false;
    m_border_bottom_isValid = false;

    m_border_left_isSet = false;
    m_border_left_isValid = false;

    m_border_right_isSet = false;
    m_border_right_isValid = false;

    m_border_top_isSet = false;
    m_border_top_isValid = false;

    m_direction_isSet = false;
    m_direction_isValid = false;

    m_heading_id_isSet = false;
    m_heading_id_isValid = false;

    m_indent_end_isSet = false;
    m_indent_end_isValid = false;

    m_indent_first_line_isSet = false;
    m_indent_first_line_isValid = false;

    m_indent_start_isSet = false;
    m_indent_start_isValid = false;

    m_keep_lines_together_isSet = false;
    m_keep_lines_together_isValid = false;

    m_keep_with_next_isSet = false;
    m_keep_with_next_isValid = false;

    m_line_spacing_isSet = false;
    m_line_spacing_isValid = false;

    m_named_style_type_isSet = false;
    m_named_style_type_isValid = false;

    m_page_break_before_isSet = false;
    m_page_break_before_isValid = false;

    m_shading_isSet = false;
    m_shading_isValid = false;

    m_space_above_isSet = false;
    m_space_above_isValid = false;

    m_space_below_isSet = false;
    m_space_below_isValid = false;

    m_spacing_mode_isSet = false;
    m_spacing_mode_isValid = false;

    m_tab_stops_isSet = false;
    m_tab_stops_isValid = false;
}

void OAIParagraphStyle::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIParagraphStyle::fromJsonObject(QJsonObject json) {

    m_alignment_isValid = ::OpenAPI::fromJsonValue(m_alignment, json[QString("alignment")]);
    m_alignment_isSet = !json[QString("alignment")].isNull() && m_alignment_isValid;

    m_avoid_widow_and_orphan_isValid = ::OpenAPI::fromJsonValue(m_avoid_widow_and_orphan, json[QString("avoidWidowAndOrphan")]);
    m_avoid_widow_and_orphan_isSet = !json[QString("avoidWidowAndOrphan")].isNull() && m_avoid_widow_and_orphan_isValid;

    m_border_between_isValid = ::OpenAPI::fromJsonValue(m_border_between, json[QString("borderBetween")]);
    m_border_between_isSet = !json[QString("borderBetween")].isNull() && m_border_between_isValid;

    m_border_bottom_isValid = ::OpenAPI::fromJsonValue(m_border_bottom, json[QString("borderBottom")]);
    m_border_bottom_isSet = !json[QString("borderBottom")].isNull() && m_border_bottom_isValid;

    m_border_left_isValid = ::OpenAPI::fromJsonValue(m_border_left, json[QString("borderLeft")]);
    m_border_left_isSet = !json[QString("borderLeft")].isNull() && m_border_left_isValid;

    m_border_right_isValid = ::OpenAPI::fromJsonValue(m_border_right, json[QString("borderRight")]);
    m_border_right_isSet = !json[QString("borderRight")].isNull() && m_border_right_isValid;

    m_border_top_isValid = ::OpenAPI::fromJsonValue(m_border_top, json[QString("borderTop")]);
    m_border_top_isSet = !json[QString("borderTop")].isNull() && m_border_top_isValid;

    m_direction_isValid = ::OpenAPI::fromJsonValue(m_direction, json[QString("direction")]);
    m_direction_isSet = !json[QString("direction")].isNull() && m_direction_isValid;

    m_heading_id_isValid = ::OpenAPI::fromJsonValue(m_heading_id, json[QString("headingId")]);
    m_heading_id_isSet = !json[QString("headingId")].isNull() && m_heading_id_isValid;

    m_indent_end_isValid = ::OpenAPI::fromJsonValue(m_indent_end, json[QString("indentEnd")]);
    m_indent_end_isSet = !json[QString("indentEnd")].isNull() && m_indent_end_isValid;

    m_indent_first_line_isValid = ::OpenAPI::fromJsonValue(m_indent_first_line, json[QString("indentFirstLine")]);
    m_indent_first_line_isSet = !json[QString("indentFirstLine")].isNull() && m_indent_first_line_isValid;

    m_indent_start_isValid = ::OpenAPI::fromJsonValue(m_indent_start, json[QString("indentStart")]);
    m_indent_start_isSet = !json[QString("indentStart")].isNull() && m_indent_start_isValid;

    m_keep_lines_together_isValid = ::OpenAPI::fromJsonValue(m_keep_lines_together, json[QString("keepLinesTogether")]);
    m_keep_lines_together_isSet = !json[QString("keepLinesTogether")].isNull() && m_keep_lines_together_isValid;

    m_keep_with_next_isValid = ::OpenAPI::fromJsonValue(m_keep_with_next, json[QString("keepWithNext")]);
    m_keep_with_next_isSet = !json[QString("keepWithNext")].isNull() && m_keep_with_next_isValid;

    m_line_spacing_isValid = ::OpenAPI::fromJsonValue(m_line_spacing, json[QString("lineSpacing")]);
    m_line_spacing_isSet = !json[QString("lineSpacing")].isNull() && m_line_spacing_isValid;

    m_named_style_type_isValid = ::OpenAPI::fromJsonValue(m_named_style_type, json[QString("namedStyleType")]);
    m_named_style_type_isSet = !json[QString("namedStyleType")].isNull() && m_named_style_type_isValid;

    m_page_break_before_isValid = ::OpenAPI::fromJsonValue(m_page_break_before, json[QString("pageBreakBefore")]);
    m_page_break_before_isSet = !json[QString("pageBreakBefore")].isNull() && m_page_break_before_isValid;

    m_shading_isValid = ::OpenAPI::fromJsonValue(m_shading, json[QString("shading")]);
    m_shading_isSet = !json[QString("shading")].isNull() && m_shading_isValid;

    m_space_above_isValid = ::OpenAPI::fromJsonValue(m_space_above, json[QString("spaceAbove")]);
    m_space_above_isSet = !json[QString("spaceAbove")].isNull() && m_space_above_isValid;

    m_space_below_isValid = ::OpenAPI::fromJsonValue(m_space_below, json[QString("spaceBelow")]);
    m_space_below_isSet = !json[QString("spaceBelow")].isNull() && m_space_below_isValid;

    m_spacing_mode_isValid = ::OpenAPI::fromJsonValue(m_spacing_mode, json[QString("spacingMode")]);
    m_spacing_mode_isSet = !json[QString("spacingMode")].isNull() && m_spacing_mode_isValid;

    m_tab_stops_isValid = ::OpenAPI::fromJsonValue(m_tab_stops, json[QString("tabStops")]);
    m_tab_stops_isSet = !json[QString("tabStops")].isNull() && m_tab_stops_isValid;
}

QString OAIParagraphStyle::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIParagraphStyle::asJsonObject() const {
    QJsonObject obj;
    if (m_alignment_isSet) {
        obj.insert(QString("alignment"), ::OpenAPI::toJsonValue(m_alignment));
    }
    if (m_avoid_widow_and_orphan_isSet) {
        obj.insert(QString("avoidWidowAndOrphan"), ::OpenAPI::toJsonValue(m_avoid_widow_and_orphan));
    }
    if (m_border_between.isSet()) {
        obj.insert(QString("borderBetween"), ::OpenAPI::toJsonValue(m_border_between));
    }
    if (m_border_bottom.isSet()) {
        obj.insert(QString("borderBottom"), ::OpenAPI::toJsonValue(m_border_bottom));
    }
    if (m_border_left.isSet()) {
        obj.insert(QString("borderLeft"), ::OpenAPI::toJsonValue(m_border_left));
    }
    if (m_border_right.isSet()) {
        obj.insert(QString("borderRight"), ::OpenAPI::toJsonValue(m_border_right));
    }
    if (m_border_top.isSet()) {
        obj.insert(QString("borderTop"), ::OpenAPI::toJsonValue(m_border_top));
    }
    if (m_direction_isSet) {
        obj.insert(QString("direction"), ::OpenAPI::toJsonValue(m_direction));
    }
    if (m_heading_id_isSet) {
        obj.insert(QString("headingId"), ::OpenAPI::toJsonValue(m_heading_id));
    }
    if (m_indent_end.isSet()) {
        obj.insert(QString("indentEnd"), ::OpenAPI::toJsonValue(m_indent_end));
    }
    if (m_indent_first_line.isSet()) {
        obj.insert(QString("indentFirstLine"), ::OpenAPI::toJsonValue(m_indent_first_line));
    }
    if (m_indent_start.isSet()) {
        obj.insert(QString("indentStart"), ::OpenAPI::toJsonValue(m_indent_start));
    }
    if (m_keep_lines_together_isSet) {
        obj.insert(QString("keepLinesTogether"), ::OpenAPI::toJsonValue(m_keep_lines_together));
    }
    if (m_keep_with_next_isSet) {
        obj.insert(QString("keepWithNext"), ::OpenAPI::toJsonValue(m_keep_with_next));
    }
    if (m_line_spacing_isSet) {
        obj.insert(QString("lineSpacing"), ::OpenAPI::toJsonValue(m_line_spacing));
    }
    if (m_named_style_type_isSet) {
        obj.insert(QString("namedStyleType"), ::OpenAPI::toJsonValue(m_named_style_type));
    }
    if (m_page_break_before_isSet) {
        obj.insert(QString("pageBreakBefore"), ::OpenAPI::toJsonValue(m_page_break_before));
    }
    if (m_shading.isSet()) {
        obj.insert(QString("shading"), ::OpenAPI::toJsonValue(m_shading));
    }
    if (m_space_above.isSet()) {
        obj.insert(QString("spaceAbove"), ::OpenAPI::toJsonValue(m_space_above));
    }
    if (m_space_below.isSet()) {
        obj.insert(QString("spaceBelow"), ::OpenAPI::toJsonValue(m_space_below));
    }
    if (m_spacing_mode_isSet) {
        obj.insert(QString("spacingMode"), ::OpenAPI::toJsonValue(m_spacing_mode));
    }
    if (m_tab_stops.size() > 0) {
        obj.insert(QString("tabStops"), ::OpenAPI::toJsonValue(m_tab_stops));
    }
    return obj;
}

QString OAIParagraphStyle::getAlignment() const {
    return m_alignment;
}
void OAIParagraphStyle::setAlignment(const QString &alignment) {
    m_alignment = alignment;
    m_alignment_isSet = true;
}

bool OAIParagraphStyle::is_alignment_Set() const{
    return m_alignment_isSet;
}

bool OAIParagraphStyle::is_alignment_Valid() const{
    return m_alignment_isValid;
}

bool OAIParagraphStyle::isAvoidWidowAndOrphan() const {
    return m_avoid_widow_and_orphan;
}
void OAIParagraphStyle::setAvoidWidowAndOrphan(const bool &avoid_widow_and_orphan) {
    m_avoid_widow_and_orphan = avoid_widow_and_orphan;
    m_avoid_widow_and_orphan_isSet = true;
}

bool OAIParagraphStyle::is_avoid_widow_and_orphan_Set() const{
    return m_avoid_widow_and_orphan_isSet;
}

bool OAIParagraphStyle::is_avoid_widow_and_orphan_Valid() const{
    return m_avoid_widow_and_orphan_isValid;
}

OAIParagraphBorder OAIParagraphStyle::getBorderBetween() const {
    return m_border_between;
}
void OAIParagraphStyle::setBorderBetween(const OAIParagraphBorder &border_between) {
    m_border_between = border_between;
    m_border_between_isSet = true;
}

bool OAIParagraphStyle::is_border_between_Set() const{
    return m_border_between_isSet;
}

bool OAIParagraphStyle::is_border_between_Valid() const{
    return m_border_between_isValid;
}

OAIParagraphBorder OAIParagraphStyle::getBorderBottom() const {
    return m_border_bottom;
}
void OAIParagraphStyle::setBorderBottom(const OAIParagraphBorder &border_bottom) {
    m_border_bottom = border_bottom;
    m_border_bottom_isSet = true;
}

bool OAIParagraphStyle::is_border_bottom_Set() const{
    return m_border_bottom_isSet;
}

bool OAIParagraphStyle::is_border_bottom_Valid() const{
    return m_border_bottom_isValid;
}

OAIParagraphBorder OAIParagraphStyle::getBorderLeft() const {
    return m_border_left;
}
void OAIParagraphStyle::setBorderLeft(const OAIParagraphBorder &border_left) {
    m_border_left = border_left;
    m_border_left_isSet = true;
}

bool OAIParagraphStyle::is_border_left_Set() const{
    return m_border_left_isSet;
}

bool OAIParagraphStyle::is_border_left_Valid() const{
    return m_border_left_isValid;
}

OAIParagraphBorder OAIParagraphStyle::getBorderRight() const {
    return m_border_right;
}
void OAIParagraphStyle::setBorderRight(const OAIParagraphBorder &border_right) {
    m_border_right = border_right;
    m_border_right_isSet = true;
}

bool OAIParagraphStyle::is_border_right_Set() const{
    return m_border_right_isSet;
}

bool OAIParagraphStyle::is_border_right_Valid() const{
    return m_border_right_isValid;
}

OAIParagraphBorder OAIParagraphStyle::getBorderTop() const {
    return m_border_top;
}
void OAIParagraphStyle::setBorderTop(const OAIParagraphBorder &border_top) {
    m_border_top = border_top;
    m_border_top_isSet = true;
}

bool OAIParagraphStyle::is_border_top_Set() const{
    return m_border_top_isSet;
}

bool OAIParagraphStyle::is_border_top_Valid() const{
    return m_border_top_isValid;
}

QString OAIParagraphStyle::getDirection() const {
    return m_direction;
}
void OAIParagraphStyle::setDirection(const QString &direction) {
    m_direction = direction;
    m_direction_isSet = true;
}

bool OAIParagraphStyle::is_direction_Set() const{
    return m_direction_isSet;
}

bool OAIParagraphStyle::is_direction_Valid() const{
    return m_direction_isValid;
}

QString OAIParagraphStyle::getHeadingId() const {
    return m_heading_id;
}
void OAIParagraphStyle::setHeadingId(const QString &heading_id) {
    m_heading_id = heading_id;
    m_heading_id_isSet = true;
}

bool OAIParagraphStyle::is_heading_id_Set() const{
    return m_heading_id_isSet;
}

bool OAIParagraphStyle::is_heading_id_Valid() const{
    return m_heading_id_isValid;
}

OAIDimension OAIParagraphStyle::getIndentEnd() const {
    return m_indent_end;
}
void OAIParagraphStyle::setIndentEnd(const OAIDimension &indent_end) {
    m_indent_end = indent_end;
    m_indent_end_isSet = true;
}

bool OAIParagraphStyle::is_indent_end_Set() const{
    return m_indent_end_isSet;
}

bool OAIParagraphStyle::is_indent_end_Valid() const{
    return m_indent_end_isValid;
}

OAIDimension OAIParagraphStyle::getIndentFirstLine() const {
    return m_indent_first_line;
}
void OAIParagraphStyle::setIndentFirstLine(const OAIDimension &indent_first_line) {
    m_indent_first_line = indent_first_line;
    m_indent_first_line_isSet = true;
}

bool OAIParagraphStyle::is_indent_first_line_Set() const{
    return m_indent_first_line_isSet;
}

bool OAIParagraphStyle::is_indent_first_line_Valid() const{
    return m_indent_first_line_isValid;
}

OAIDimension OAIParagraphStyle::getIndentStart() const {
    return m_indent_start;
}
void OAIParagraphStyle::setIndentStart(const OAIDimension &indent_start) {
    m_indent_start = indent_start;
    m_indent_start_isSet = true;
}

bool OAIParagraphStyle::is_indent_start_Set() const{
    return m_indent_start_isSet;
}

bool OAIParagraphStyle::is_indent_start_Valid() const{
    return m_indent_start_isValid;
}

bool OAIParagraphStyle::isKeepLinesTogether() const {
    return m_keep_lines_together;
}
void OAIParagraphStyle::setKeepLinesTogether(const bool &keep_lines_together) {
    m_keep_lines_together = keep_lines_together;
    m_keep_lines_together_isSet = true;
}

bool OAIParagraphStyle::is_keep_lines_together_Set() const{
    return m_keep_lines_together_isSet;
}

bool OAIParagraphStyle::is_keep_lines_together_Valid() const{
    return m_keep_lines_together_isValid;
}

bool OAIParagraphStyle::isKeepWithNext() const {
    return m_keep_with_next;
}
void OAIParagraphStyle::setKeepWithNext(const bool &keep_with_next) {
    m_keep_with_next = keep_with_next;
    m_keep_with_next_isSet = true;
}

bool OAIParagraphStyle::is_keep_with_next_Set() const{
    return m_keep_with_next_isSet;
}

bool OAIParagraphStyle::is_keep_with_next_Valid() const{
    return m_keep_with_next_isValid;
}

float OAIParagraphStyle::getLineSpacing() const {
    return m_line_spacing;
}
void OAIParagraphStyle::setLineSpacing(const float &line_spacing) {
    m_line_spacing = line_spacing;
    m_line_spacing_isSet = true;
}

bool OAIParagraphStyle::is_line_spacing_Set() const{
    return m_line_spacing_isSet;
}

bool OAIParagraphStyle::is_line_spacing_Valid() const{
    return m_line_spacing_isValid;
}

QString OAIParagraphStyle::getNamedStyleType() const {
    return m_named_style_type;
}
void OAIParagraphStyle::setNamedStyleType(const QString &named_style_type) {
    m_named_style_type = named_style_type;
    m_named_style_type_isSet = true;
}

bool OAIParagraphStyle::is_named_style_type_Set() const{
    return m_named_style_type_isSet;
}

bool OAIParagraphStyle::is_named_style_type_Valid() const{
    return m_named_style_type_isValid;
}

bool OAIParagraphStyle::isPageBreakBefore() const {
    return m_page_break_before;
}
void OAIParagraphStyle::setPageBreakBefore(const bool &page_break_before) {
    m_page_break_before = page_break_before;
    m_page_break_before_isSet = true;
}

bool OAIParagraphStyle::is_page_break_before_Set() const{
    return m_page_break_before_isSet;
}

bool OAIParagraphStyle::is_page_break_before_Valid() const{
    return m_page_break_before_isValid;
}

OAIShading OAIParagraphStyle::getShading() const {
    return m_shading;
}
void OAIParagraphStyle::setShading(const OAIShading &shading) {
    m_shading = shading;
    m_shading_isSet = true;
}

bool OAIParagraphStyle::is_shading_Set() const{
    return m_shading_isSet;
}

bool OAIParagraphStyle::is_shading_Valid() const{
    return m_shading_isValid;
}

OAIDimension OAIParagraphStyle::getSpaceAbove() const {
    return m_space_above;
}
void OAIParagraphStyle::setSpaceAbove(const OAIDimension &space_above) {
    m_space_above = space_above;
    m_space_above_isSet = true;
}

bool OAIParagraphStyle::is_space_above_Set() const{
    return m_space_above_isSet;
}

bool OAIParagraphStyle::is_space_above_Valid() const{
    return m_space_above_isValid;
}

OAIDimension OAIParagraphStyle::getSpaceBelow() const {
    return m_space_below;
}
void OAIParagraphStyle::setSpaceBelow(const OAIDimension &space_below) {
    m_space_below = space_below;
    m_space_below_isSet = true;
}

bool OAIParagraphStyle::is_space_below_Set() const{
    return m_space_below_isSet;
}

bool OAIParagraphStyle::is_space_below_Valid() const{
    return m_space_below_isValid;
}

QString OAIParagraphStyle::getSpacingMode() const {
    return m_spacing_mode;
}
void OAIParagraphStyle::setSpacingMode(const QString &spacing_mode) {
    m_spacing_mode = spacing_mode;
    m_spacing_mode_isSet = true;
}

bool OAIParagraphStyle::is_spacing_mode_Set() const{
    return m_spacing_mode_isSet;
}

bool OAIParagraphStyle::is_spacing_mode_Valid() const{
    return m_spacing_mode_isValid;
}

QList<OAITabStop> OAIParagraphStyle::getTabStops() const {
    return m_tab_stops;
}
void OAIParagraphStyle::setTabStops(const QList<OAITabStop> &tab_stops) {
    m_tab_stops = tab_stops;
    m_tab_stops_isSet = true;
}

bool OAIParagraphStyle::is_tab_stops_Set() const{
    return m_tab_stops_isSet;
}

bool OAIParagraphStyle::is_tab_stops_Valid() const{
    return m_tab_stops_isValid;
}

bool OAIParagraphStyle::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_alignment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_avoid_widow_and_orphan_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_border_between.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_border_bottom.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_border_left.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_border_right.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_border_top.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_direction_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_heading_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_indent_end.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_indent_first_line.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_indent_start.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_keep_lines_together_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_keep_with_next_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_spacing_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_named_style_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_break_before_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shading.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_space_above.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_space_below.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_spacing_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tab_stops.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIParagraphStyle::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
