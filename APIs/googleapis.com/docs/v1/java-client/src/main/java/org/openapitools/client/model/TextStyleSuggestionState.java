/*
 * Google Docs API
 * Reads and writes Google Docs documents.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A mask that indicates which of the fields on the base TextStyle have been changed in this suggestion. For any field set to true, there&#39;s a new suggested value.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:47:07.584674-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TextStyleSuggestionState {
  public static final String SERIALIZED_NAME_BACKGROUND_COLOR_SUGGESTED = "backgroundColorSuggested";
  @SerializedName(SERIALIZED_NAME_BACKGROUND_COLOR_SUGGESTED)
  private Boolean backgroundColorSuggested;

  public static final String SERIALIZED_NAME_BASELINE_OFFSET_SUGGESTED = "baselineOffsetSuggested";
  @SerializedName(SERIALIZED_NAME_BASELINE_OFFSET_SUGGESTED)
  private Boolean baselineOffsetSuggested;

  public static final String SERIALIZED_NAME_BOLD_SUGGESTED = "boldSuggested";
  @SerializedName(SERIALIZED_NAME_BOLD_SUGGESTED)
  private Boolean boldSuggested;

  public static final String SERIALIZED_NAME_FONT_SIZE_SUGGESTED = "fontSizeSuggested";
  @SerializedName(SERIALIZED_NAME_FONT_SIZE_SUGGESTED)
  private Boolean fontSizeSuggested;

  public static final String SERIALIZED_NAME_FOREGROUND_COLOR_SUGGESTED = "foregroundColorSuggested";
  @SerializedName(SERIALIZED_NAME_FOREGROUND_COLOR_SUGGESTED)
  private Boolean foregroundColorSuggested;

  public static final String SERIALIZED_NAME_ITALIC_SUGGESTED = "italicSuggested";
  @SerializedName(SERIALIZED_NAME_ITALIC_SUGGESTED)
  private Boolean italicSuggested;

  public static final String SERIALIZED_NAME_LINK_SUGGESTED = "linkSuggested";
  @SerializedName(SERIALIZED_NAME_LINK_SUGGESTED)
  private Boolean linkSuggested;

  public static final String SERIALIZED_NAME_SMALL_CAPS_SUGGESTED = "smallCapsSuggested";
  @SerializedName(SERIALIZED_NAME_SMALL_CAPS_SUGGESTED)
  private Boolean smallCapsSuggested;

  public static final String SERIALIZED_NAME_STRIKETHROUGH_SUGGESTED = "strikethroughSuggested";
  @SerializedName(SERIALIZED_NAME_STRIKETHROUGH_SUGGESTED)
  private Boolean strikethroughSuggested;

  public static final String SERIALIZED_NAME_UNDERLINE_SUGGESTED = "underlineSuggested";
  @SerializedName(SERIALIZED_NAME_UNDERLINE_SUGGESTED)
  private Boolean underlineSuggested;

  public static final String SERIALIZED_NAME_WEIGHTED_FONT_FAMILY_SUGGESTED = "weightedFontFamilySuggested";
  @SerializedName(SERIALIZED_NAME_WEIGHTED_FONT_FAMILY_SUGGESTED)
  private Boolean weightedFontFamilySuggested;

  public TextStyleSuggestionState() {
  }

  public TextStyleSuggestionState backgroundColorSuggested(Boolean backgroundColorSuggested) {
    this.backgroundColorSuggested = backgroundColorSuggested;
    return this;
  }

  /**
   * Indicates if there was a suggested change to background_color.
   * @return backgroundColorSuggested
   */
  @javax.annotation.Nullable
  public Boolean getBackgroundColorSuggested() {
    return backgroundColorSuggested;
  }

  public void setBackgroundColorSuggested(Boolean backgroundColorSuggested) {
    this.backgroundColorSuggested = backgroundColorSuggested;
  }


  public TextStyleSuggestionState baselineOffsetSuggested(Boolean baselineOffsetSuggested) {
    this.baselineOffsetSuggested = baselineOffsetSuggested;
    return this;
  }

  /**
   * Indicates if there was a suggested change to baseline_offset.
   * @return baselineOffsetSuggested
   */
  @javax.annotation.Nullable
  public Boolean getBaselineOffsetSuggested() {
    return baselineOffsetSuggested;
  }

  public void setBaselineOffsetSuggested(Boolean baselineOffsetSuggested) {
    this.baselineOffsetSuggested = baselineOffsetSuggested;
  }


  public TextStyleSuggestionState boldSuggested(Boolean boldSuggested) {
    this.boldSuggested = boldSuggested;
    return this;
  }

  /**
   * Indicates if there was a suggested change to bold.
   * @return boldSuggested
   */
  @javax.annotation.Nullable
  public Boolean getBoldSuggested() {
    return boldSuggested;
  }

  public void setBoldSuggested(Boolean boldSuggested) {
    this.boldSuggested = boldSuggested;
  }


  public TextStyleSuggestionState fontSizeSuggested(Boolean fontSizeSuggested) {
    this.fontSizeSuggested = fontSizeSuggested;
    return this;
  }

  /**
   * Indicates if there was a suggested change to font_size.
   * @return fontSizeSuggested
   */
  @javax.annotation.Nullable
  public Boolean getFontSizeSuggested() {
    return fontSizeSuggested;
  }

  public void setFontSizeSuggested(Boolean fontSizeSuggested) {
    this.fontSizeSuggested = fontSizeSuggested;
  }


  public TextStyleSuggestionState foregroundColorSuggested(Boolean foregroundColorSuggested) {
    this.foregroundColorSuggested = foregroundColorSuggested;
    return this;
  }

  /**
   * Indicates if there was a suggested change to foreground_color.
   * @return foregroundColorSuggested
   */
  @javax.annotation.Nullable
  public Boolean getForegroundColorSuggested() {
    return foregroundColorSuggested;
  }

  public void setForegroundColorSuggested(Boolean foregroundColorSuggested) {
    this.foregroundColorSuggested = foregroundColorSuggested;
  }


  public TextStyleSuggestionState italicSuggested(Boolean italicSuggested) {
    this.italicSuggested = italicSuggested;
    return this;
  }

  /**
   * Indicates if there was a suggested change to italic.
   * @return italicSuggested
   */
  @javax.annotation.Nullable
  public Boolean getItalicSuggested() {
    return italicSuggested;
  }

  public void setItalicSuggested(Boolean italicSuggested) {
    this.italicSuggested = italicSuggested;
  }


  public TextStyleSuggestionState linkSuggested(Boolean linkSuggested) {
    this.linkSuggested = linkSuggested;
    return this;
  }

  /**
   * Indicates if there was a suggested change to link.
   * @return linkSuggested
   */
  @javax.annotation.Nullable
  public Boolean getLinkSuggested() {
    return linkSuggested;
  }

  public void setLinkSuggested(Boolean linkSuggested) {
    this.linkSuggested = linkSuggested;
  }


  public TextStyleSuggestionState smallCapsSuggested(Boolean smallCapsSuggested) {
    this.smallCapsSuggested = smallCapsSuggested;
    return this;
  }

  /**
   * Indicates if there was a suggested change to small_caps.
   * @return smallCapsSuggested
   */
  @javax.annotation.Nullable
  public Boolean getSmallCapsSuggested() {
    return smallCapsSuggested;
  }

  public void setSmallCapsSuggested(Boolean smallCapsSuggested) {
    this.smallCapsSuggested = smallCapsSuggested;
  }


  public TextStyleSuggestionState strikethroughSuggested(Boolean strikethroughSuggested) {
    this.strikethroughSuggested = strikethroughSuggested;
    return this;
  }

  /**
   * Indicates if there was a suggested change to strikethrough.
   * @return strikethroughSuggested
   */
  @javax.annotation.Nullable
  public Boolean getStrikethroughSuggested() {
    return strikethroughSuggested;
  }

  public void setStrikethroughSuggested(Boolean strikethroughSuggested) {
    this.strikethroughSuggested = strikethroughSuggested;
  }


  public TextStyleSuggestionState underlineSuggested(Boolean underlineSuggested) {
    this.underlineSuggested = underlineSuggested;
    return this;
  }

  /**
   * Indicates if there was a suggested change to underline.
   * @return underlineSuggested
   */
  @javax.annotation.Nullable
  public Boolean getUnderlineSuggested() {
    return underlineSuggested;
  }

  public void setUnderlineSuggested(Boolean underlineSuggested) {
    this.underlineSuggested = underlineSuggested;
  }


  public TextStyleSuggestionState weightedFontFamilySuggested(Boolean weightedFontFamilySuggested) {
    this.weightedFontFamilySuggested = weightedFontFamilySuggested;
    return this;
  }

  /**
   * Indicates if there was a suggested change to weighted_font_family.
   * @return weightedFontFamilySuggested
   */
  @javax.annotation.Nullable
  public Boolean getWeightedFontFamilySuggested() {
    return weightedFontFamilySuggested;
  }

  public void setWeightedFontFamilySuggested(Boolean weightedFontFamilySuggested) {
    this.weightedFontFamilySuggested = weightedFontFamilySuggested;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TextStyleSuggestionState textStyleSuggestionState = (TextStyleSuggestionState) o;
    return Objects.equals(this.backgroundColorSuggested, textStyleSuggestionState.backgroundColorSuggested) &&
        Objects.equals(this.baselineOffsetSuggested, textStyleSuggestionState.baselineOffsetSuggested) &&
        Objects.equals(this.boldSuggested, textStyleSuggestionState.boldSuggested) &&
        Objects.equals(this.fontSizeSuggested, textStyleSuggestionState.fontSizeSuggested) &&
        Objects.equals(this.foregroundColorSuggested, textStyleSuggestionState.foregroundColorSuggested) &&
        Objects.equals(this.italicSuggested, textStyleSuggestionState.italicSuggested) &&
        Objects.equals(this.linkSuggested, textStyleSuggestionState.linkSuggested) &&
        Objects.equals(this.smallCapsSuggested, textStyleSuggestionState.smallCapsSuggested) &&
        Objects.equals(this.strikethroughSuggested, textStyleSuggestionState.strikethroughSuggested) &&
        Objects.equals(this.underlineSuggested, textStyleSuggestionState.underlineSuggested) &&
        Objects.equals(this.weightedFontFamilySuggested, textStyleSuggestionState.weightedFontFamilySuggested);
  }

  @Override
  public int hashCode() {
    return Objects.hash(backgroundColorSuggested, baselineOffsetSuggested, boldSuggested, fontSizeSuggested, foregroundColorSuggested, italicSuggested, linkSuggested, smallCapsSuggested, strikethroughSuggested, underlineSuggested, weightedFontFamilySuggested);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TextStyleSuggestionState {\n");
    sb.append("    backgroundColorSuggested: ").append(toIndentedString(backgroundColorSuggested)).append("\n");
    sb.append("    baselineOffsetSuggested: ").append(toIndentedString(baselineOffsetSuggested)).append("\n");
    sb.append("    boldSuggested: ").append(toIndentedString(boldSuggested)).append("\n");
    sb.append("    fontSizeSuggested: ").append(toIndentedString(fontSizeSuggested)).append("\n");
    sb.append("    foregroundColorSuggested: ").append(toIndentedString(foregroundColorSuggested)).append("\n");
    sb.append("    italicSuggested: ").append(toIndentedString(italicSuggested)).append("\n");
    sb.append("    linkSuggested: ").append(toIndentedString(linkSuggested)).append("\n");
    sb.append("    smallCapsSuggested: ").append(toIndentedString(smallCapsSuggested)).append("\n");
    sb.append("    strikethroughSuggested: ").append(toIndentedString(strikethroughSuggested)).append("\n");
    sb.append("    underlineSuggested: ").append(toIndentedString(underlineSuggested)).append("\n");
    sb.append("    weightedFontFamilySuggested: ").append(toIndentedString(weightedFontFamilySuggested)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("backgroundColorSuggested");
    openapiFields.add("baselineOffsetSuggested");
    openapiFields.add("boldSuggested");
    openapiFields.add("fontSizeSuggested");
    openapiFields.add("foregroundColorSuggested");
    openapiFields.add("italicSuggested");
    openapiFields.add("linkSuggested");
    openapiFields.add("smallCapsSuggested");
    openapiFields.add("strikethroughSuggested");
    openapiFields.add("underlineSuggested");
    openapiFields.add("weightedFontFamilySuggested");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TextStyleSuggestionState
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TextStyleSuggestionState.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TextStyleSuggestionState is not found in the empty JSON string", TextStyleSuggestionState.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TextStyleSuggestionState.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TextStyleSuggestionState` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TextStyleSuggestionState.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TextStyleSuggestionState' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TextStyleSuggestionState> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TextStyleSuggestionState.class));

       return (TypeAdapter<T>) new TypeAdapter<TextStyleSuggestionState>() {
           @Override
           public void write(JsonWriter out, TextStyleSuggestionState value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TextStyleSuggestionState read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TextStyleSuggestionState given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TextStyleSuggestionState
   * @throws IOException if the JSON string is invalid with respect to TextStyleSuggestionState
   */
  public static TextStyleSuggestionState fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TextStyleSuggestionState.class);
  }

  /**
   * Convert an instance of TextStyleSuggestionState to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

