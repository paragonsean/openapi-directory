/*
 * Google Docs API
 * Reads and writes Google Docs documents.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Paragraph;
import org.openapitools.client.model.SectionBreak;
import org.openapitools.client.model.Table;
import org.openapitools.client.model.TableOfContents;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A StructuralElement describes content that provides structure to the document.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:47:07.584674-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class StructuralElement {
  public static final String SERIALIZED_NAME_END_INDEX = "endIndex";
  @SerializedName(SERIALIZED_NAME_END_INDEX)
  private Integer endIndex;

  public static final String SERIALIZED_NAME_PARAGRAPH = "paragraph";
  @SerializedName(SERIALIZED_NAME_PARAGRAPH)
  private Paragraph paragraph;

  public static final String SERIALIZED_NAME_SECTION_BREAK = "sectionBreak";
  @SerializedName(SERIALIZED_NAME_SECTION_BREAK)
  private SectionBreak sectionBreak;

  public static final String SERIALIZED_NAME_START_INDEX = "startIndex";
  @SerializedName(SERIALIZED_NAME_START_INDEX)
  private Integer startIndex;

  public static final String SERIALIZED_NAME_TABLE = "table";
  @SerializedName(SERIALIZED_NAME_TABLE)
  private Table table;

  public static final String SERIALIZED_NAME_TABLE_OF_CONTENTS = "tableOfContents";
  @SerializedName(SERIALIZED_NAME_TABLE_OF_CONTENTS)
  private TableOfContents tableOfContents;

  public StructuralElement() {
  }

  public StructuralElement endIndex(Integer endIndex) {
    this.endIndex = endIndex;
    return this;
  }

  /**
   * The zero-based end index of this structural element, exclusive, in UTF-16 code units.
   * @return endIndex
   */
  @javax.annotation.Nullable
  public Integer getEndIndex() {
    return endIndex;
  }

  public void setEndIndex(Integer endIndex) {
    this.endIndex = endIndex;
  }


  public StructuralElement paragraph(Paragraph paragraph) {
    this.paragraph = paragraph;
    return this;
  }

  /**
   * Get paragraph
   * @return paragraph
   */
  @javax.annotation.Nullable
  public Paragraph getParagraph() {
    return paragraph;
  }

  public void setParagraph(Paragraph paragraph) {
    this.paragraph = paragraph;
  }


  public StructuralElement sectionBreak(SectionBreak sectionBreak) {
    this.sectionBreak = sectionBreak;
    return this;
  }

  /**
   * Get sectionBreak
   * @return sectionBreak
   */
  @javax.annotation.Nullable
  public SectionBreak getSectionBreak() {
    return sectionBreak;
  }

  public void setSectionBreak(SectionBreak sectionBreak) {
    this.sectionBreak = sectionBreak;
  }


  public StructuralElement startIndex(Integer startIndex) {
    this.startIndex = startIndex;
    return this;
  }

  /**
   * The zero-based start index of this structural element, in UTF-16 code units.
   * @return startIndex
   */
  @javax.annotation.Nullable
  public Integer getStartIndex() {
    return startIndex;
  }

  public void setStartIndex(Integer startIndex) {
    this.startIndex = startIndex;
  }


  public StructuralElement table(Table table) {
    this.table = table;
    return this;
  }

  /**
   * Get table
   * @return table
   */
  @javax.annotation.Nullable
  public Table getTable() {
    return table;
  }

  public void setTable(Table table) {
    this.table = table;
  }


  public StructuralElement tableOfContents(TableOfContents tableOfContents) {
    this.tableOfContents = tableOfContents;
    return this;
  }

  /**
   * Get tableOfContents
   * @return tableOfContents
   */
  @javax.annotation.Nullable
  public TableOfContents getTableOfContents() {
    return tableOfContents;
  }

  public void setTableOfContents(TableOfContents tableOfContents) {
    this.tableOfContents = tableOfContents;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StructuralElement structuralElement = (StructuralElement) o;
    return Objects.equals(this.endIndex, structuralElement.endIndex) &&
        Objects.equals(this.paragraph, structuralElement.paragraph) &&
        Objects.equals(this.sectionBreak, structuralElement.sectionBreak) &&
        Objects.equals(this.startIndex, structuralElement.startIndex) &&
        Objects.equals(this.table, structuralElement.table) &&
        Objects.equals(this.tableOfContents, structuralElement.tableOfContents);
  }

  @Override
  public int hashCode() {
    return Objects.hash(endIndex, paragraph, sectionBreak, startIndex, table, tableOfContents);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StructuralElement {\n");
    sb.append("    endIndex: ").append(toIndentedString(endIndex)).append("\n");
    sb.append("    paragraph: ").append(toIndentedString(paragraph)).append("\n");
    sb.append("    sectionBreak: ").append(toIndentedString(sectionBreak)).append("\n");
    sb.append("    startIndex: ").append(toIndentedString(startIndex)).append("\n");
    sb.append("    table: ").append(toIndentedString(table)).append("\n");
    sb.append("    tableOfContents: ").append(toIndentedString(tableOfContents)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("endIndex");
    openapiFields.add("paragraph");
    openapiFields.add("sectionBreak");
    openapiFields.add("startIndex");
    openapiFields.add("table");
    openapiFields.add("tableOfContents");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StructuralElement
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StructuralElement.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StructuralElement is not found in the empty JSON string", StructuralElement.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StructuralElement.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StructuralElement` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `paragraph`
      if (jsonObj.get("paragraph") != null && !jsonObj.get("paragraph").isJsonNull()) {
        Paragraph.validateJsonElement(jsonObj.get("paragraph"));
      }
      // validate the optional field `sectionBreak`
      if (jsonObj.get("sectionBreak") != null && !jsonObj.get("sectionBreak").isJsonNull()) {
        SectionBreak.validateJsonElement(jsonObj.get("sectionBreak"));
      }
      // validate the optional field `table`
      if (jsonObj.get("table") != null && !jsonObj.get("table").isJsonNull()) {
        Table.validateJsonElement(jsonObj.get("table"));
      }
      // validate the optional field `tableOfContents`
      if (jsonObj.get("tableOfContents") != null && !jsonObj.get("tableOfContents").isJsonNull()) {
        TableOfContents.validateJsonElement(jsonObj.get("tableOfContents"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StructuralElement.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StructuralElement' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StructuralElement> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StructuralElement.class));

       return (TypeAdapter<T>) new TypeAdapter<StructuralElement>() {
           @Override
           public void write(JsonWriter out, StructuralElement value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StructuralElement read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StructuralElement given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StructuralElement
   * @throws IOException if the JSON string is invalid with respect to StructuralElement
   */
  public static StructuralElement fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StructuralElement.class);
  }

  /**
   * Convert an instance of StructuralElement to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

