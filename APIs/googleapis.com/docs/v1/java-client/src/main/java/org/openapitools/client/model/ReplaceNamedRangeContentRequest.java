/*
 * Google Docs API
 * Reads and writes Google Docs documents.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Replaces the contents of the specified NamedRange or NamedRanges with the given replacement content. Note that an individual NamedRange may consist of multiple discontinuous ranges. In this case, only the content in the first range will be replaced. The other ranges and their content will be deleted. In cases where replacing or deleting any ranges would result in an invalid document structure, a 400 bad request error is returned.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:47:07.584674-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ReplaceNamedRangeContentRequest {
  public static final String SERIALIZED_NAME_NAMED_RANGE_ID = "namedRangeId";
  @SerializedName(SERIALIZED_NAME_NAMED_RANGE_ID)
  private String namedRangeId;

  public static final String SERIALIZED_NAME_NAMED_RANGE_NAME = "namedRangeName";
  @SerializedName(SERIALIZED_NAME_NAMED_RANGE_NAME)
  private String namedRangeName;

  public static final String SERIALIZED_NAME_TEXT = "text";
  @SerializedName(SERIALIZED_NAME_TEXT)
  private String text;

  public ReplaceNamedRangeContentRequest() {
  }

  public ReplaceNamedRangeContentRequest namedRangeId(String namedRangeId) {
    this.namedRangeId = namedRangeId;
    return this;
  }

  /**
   * The ID of the named range whose content will be replaced. If there is no named range with the given ID a 400 bad request error is returned.
   * @return namedRangeId
   */
  @javax.annotation.Nullable
  public String getNamedRangeId() {
    return namedRangeId;
  }

  public void setNamedRangeId(String namedRangeId) {
    this.namedRangeId = namedRangeId;
  }


  public ReplaceNamedRangeContentRequest namedRangeName(String namedRangeName) {
    this.namedRangeName = namedRangeName;
    return this;
  }

  /**
   * The name of the NamedRanges whose content will be replaced. If there are multiple named ranges with the given name, then the content of each one will be replaced. If there are no named ranges with the given name, then the request will be a no-op.
   * @return namedRangeName
   */
  @javax.annotation.Nullable
  public String getNamedRangeName() {
    return namedRangeName;
  }

  public void setNamedRangeName(String namedRangeName) {
    this.namedRangeName = namedRangeName;
  }


  public ReplaceNamedRangeContentRequest text(String text) {
    this.text = text;
    return this;
  }

  /**
   * Replaces the content of the specified named range(s) with the given text.
   * @return text
   */
  @javax.annotation.Nullable
  public String getText() {
    return text;
  }

  public void setText(String text) {
    this.text = text;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReplaceNamedRangeContentRequest replaceNamedRangeContentRequest = (ReplaceNamedRangeContentRequest) o;
    return Objects.equals(this.namedRangeId, replaceNamedRangeContentRequest.namedRangeId) &&
        Objects.equals(this.namedRangeName, replaceNamedRangeContentRequest.namedRangeName) &&
        Objects.equals(this.text, replaceNamedRangeContentRequest.text);
  }

  @Override
  public int hashCode() {
    return Objects.hash(namedRangeId, namedRangeName, text);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReplaceNamedRangeContentRequest {\n");
    sb.append("    namedRangeId: ").append(toIndentedString(namedRangeId)).append("\n");
    sb.append("    namedRangeName: ").append(toIndentedString(namedRangeName)).append("\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("namedRangeId");
    openapiFields.add("namedRangeName");
    openapiFields.add("text");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ReplaceNamedRangeContentRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ReplaceNamedRangeContentRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReplaceNamedRangeContentRequest is not found in the empty JSON string", ReplaceNamedRangeContentRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ReplaceNamedRangeContentRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReplaceNamedRangeContentRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("namedRangeId") != null && !jsonObj.get("namedRangeId").isJsonNull()) && !jsonObj.get("namedRangeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `namedRangeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("namedRangeId").toString()));
      }
      if ((jsonObj.get("namedRangeName") != null && !jsonObj.get("namedRangeName").isJsonNull()) && !jsonObj.get("namedRangeName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `namedRangeName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("namedRangeName").toString()));
      }
      if ((jsonObj.get("text") != null && !jsonObj.get("text").isJsonNull()) && !jsonObj.get("text").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `text` to be a primitive type in the JSON string but got `%s`", jsonObj.get("text").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReplaceNamedRangeContentRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReplaceNamedRangeContentRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReplaceNamedRangeContentRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReplaceNamedRangeContentRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<ReplaceNamedRangeContentRequest>() {
           @Override
           public void write(JsonWriter out, ReplaceNamedRangeContentRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReplaceNamedRangeContentRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ReplaceNamedRangeContentRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ReplaceNamedRangeContentRequest
   * @throws IOException if the JSON string is invalid with respect to ReplaceNamedRangeContentRequest
   */
  public static ReplaceNamedRangeContentRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReplaceNamedRangeContentRequest.class);
  }

  /**
   * Convert an instance of ReplaceNamedRangeContentRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

