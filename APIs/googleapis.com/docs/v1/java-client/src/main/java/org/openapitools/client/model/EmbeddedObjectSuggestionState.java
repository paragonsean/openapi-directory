/*
 * Google Docs API
 * Reads and writes Google Docs documents.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.EmbeddedObjectBorderSuggestionState;
import org.openapitools.client.model.ImagePropertiesSuggestionState;
import org.openapitools.client.model.LinkedContentReferenceSuggestionState;
import org.openapitools.client.model.SizeSuggestionState;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A mask that indicates which of the fields on the base EmbeddedObject have been changed in this suggestion. For any field set to true, there&#39;s a new suggested value.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:47:07.584674-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EmbeddedObjectSuggestionState {
  public static final String SERIALIZED_NAME_DESCRIPTION_SUGGESTED = "descriptionSuggested";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION_SUGGESTED)
  private Boolean descriptionSuggested;

  public static final String SERIALIZED_NAME_EMBEDDED_DRAWING_PROPERTIES_SUGGESTION_STATE = "embeddedDrawingPropertiesSuggestionState";
  @SerializedName(SERIALIZED_NAME_EMBEDDED_DRAWING_PROPERTIES_SUGGESTION_STATE)
  private Object embeddedDrawingPropertiesSuggestionState;

  public static final String SERIALIZED_NAME_EMBEDDED_OBJECT_BORDER_SUGGESTION_STATE = "embeddedObjectBorderSuggestionState";
  @SerializedName(SERIALIZED_NAME_EMBEDDED_OBJECT_BORDER_SUGGESTION_STATE)
  private EmbeddedObjectBorderSuggestionState embeddedObjectBorderSuggestionState;

  public static final String SERIALIZED_NAME_IMAGE_PROPERTIES_SUGGESTION_STATE = "imagePropertiesSuggestionState";
  @SerializedName(SERIALIZED_NAME_IMAGE_PROPERTIES_SUGGESTION_STATE)
  private ImagePropertiesSuggestionState imagePropertiesSuggestionState;

  public static final String SERIALIZED_NAME_LINKED_CONTENT_REFERENCE_SUGGESTION_STATE = "linkedContentReferenceSuggestionState";
  @SerializedName(SERIALIZED_NAME_LINKED_CONTENT_REFERENCE_SUGGESTION_STATE)
  private LinkedContentReferenceSuggestionState linkedContentReferenceSuggestionState;

  public static final String SERIALIZED_NAME_MARGIN_BOTTOM_SUGGESTED = "marginBottomSuggested";
  @SerializedName(SERIALIZED_NAME_MARGIN_BOTTOM_SUGGESTED)
  private Boolean marginBottomSuggested;

  public static final String SERIALIZED_NAME_MARGIN_LEFT_SUGGESTED = "marginLeftSuggested";
  @SerializedName(SERIALIZED_NAME_MARGIN_LEFT_SUGGESTED)
  private Boolean marginLeftSuggested;

  public static final String SERIALIZED_NAME_MARGIN_RIGHT_SUGGESTED = "marginRightSuggested";
  @SerializedName(SERIALIZED_NAME_MARGIN_RIGHT_SUGGESTED)
  private Boolean marginRightSuggested;

  public static final String SERIALIZED_NAME_MARGIN_TOP_SUGGESTED = "marginTopSuggested";
  @SerializedName(SERIALIZED_NAME_MARGIN_TOP_SUGGESTED)
  private Boolean marginTopSuggested;

  public static final String SERIALIZED_NAME_SIZE_SUGGESTION_STATE = "sizeSuggestionState";
  @SerializedName(SERIALIZED_NAME_SIZE_SUGGESTION_STATE)
  private SizeSuggestionState sizeSuggestionState;

  public static final String SERIALIZED_NAME_TITLE_SUGGESTED = "titleSuggested";
  @SerializedName(SERIALIZED_NAME_TITLE_SUGGESTED)
  private Boolean titleSuggested;

  public EmbeddedObjectSuggestionState() {
  }

  public EmbeddedObjectSuggestionState descriptionSuggested(Boolean descriptionSuggested) {
    this.descriptionSuggested = descriptionSuggested;
    return this;
  }

  /**
   * Indicates if there was a suggested change to description.
   * @return descriptionSuggested
   */
  @javax.annotation.Nullable
  public Boolean getDescriptionSuggested() {
    return descriptionSuggested;
  }

  public void setDescriptionSuggested(Boolean descriptionSuggested) {
    this.descriptionSuggested = descriptionSuggested;
  }


  public EmbeddedObjectSuggestionState embeddedDrawingPropertiesSuggestionState(Object embeddedDrawingPropertiesSuggestionState) {
    this.embeddedDrawingPropertiesSuggestionState = embeddedDrawingPropertiesSuggestionState;
    return this;
  }

  /**
   * A mask that indicates which of the fields on the base EmbeddedDrawingProperties have been changed in this suggestion. For any field set to true, there&#39;s a new suggested value.
   * @return embeddedDrawingPropertiesSuggestionState
   */
  @javax.annotation.Nullable
  public Object getEmbeddedDrawingPropertiesSuggestionState() {
    return embeddedDrawingPropertiesSuggestionState;
  }

  public void setEmbeddedDrawingPropertiesSuggestionState(Object embeddedDrawingPropertiesSuggestionState) {
    this.embeddedDrawingPropertiesSuggestionState = embeddedDrawingPropertiesSuggestionState;
  }


  public EmbeddedObjectSuggestionState embeddedObjectBorderSuggestionState(EmbeddedObjectBorderSuggestionState embeddedObjectBorderSuggestionState) {
    this.embeddedObjectBorderSuggestionState = embeddedObjectBorderSuggestionState;
    return this;
  }

  /**
   * Get embeddedObjectBorderSuggestionState
   * @return embeddedObjectBorderSuggestionState
   */
  @javax.annotation.Nullable
  public EmbeddedObjectBorderSuggestionState getEmbeddedObjectBorderSuggestionState() {
    return embeddedObjectBorderSuggestionState;
  }

  public void setEmbeddedObjectBorderSuggestionState(EmbeddedObjectBorderSuggestionState embeddedObjectBorderSuggestionState) {
    this.embeddedObjectBorderSuggestionState = embeddedObjectBorderSuggestionState;
  }


  public EmbeddedObjectSuggestionState imagePropertiesSuggestionState(ImagePropertiesSuggestionState imagePropertiesSuggestionState) {
    this.imagePropertiesSuggestionState = imagePropertiesSuggestionState;
    return this;
  }

  /**
   * Get imagePropertiesSuggestionState
   * @return imagePropertiesSuggestionState
   */
  @javax.annotation.Nullable
  public ImagePropertiesSuggestionState getImagePropertiesSuggestionState() {
    return imagePropertiesSuggestionState;
  }

  public void setImagePropertiesSuggestionState(ImagePropertiesSuggestionState imagePropertiesSuggestionState) {
    this.imagePropertiesSuggestionState = imagePropertiesSuggestionState;
  }


  public EmbeddedObjectSuggestionState linkedContentReferenceSuggestionState(LinkedContentReferenceSuggestionState linkedContentReferenceSuggestionState) {
    this.linkedContentReferenceSuggestionState = linkedContentReferenceSuggestionState;
    return this;
  }

  /**
   * Get linkedContentReferenceSuggestionState
   * @return linkedContentReferenceSuggestionState
   */
  @javax.annotation.Nullable
  public LinkedContentReferenceSuggestionState getLinkedContentReferenceSuggestionState() {
    return linkedContentReferenceSuggestionState;
  }

  public void setLinkedContentReferenceSuggestionState(LinkedContentReferenceSuggestionState linkedContentReferenceSuggestionState) {
    this.linkedContentReferenceSuggestionState = linkedContentReferenceSuggestionState;
  }


  public EmbeddedObjectSuggestionState marginBottomSuggested(Boolean marginBottomSuggested) {
    this.marginBottomSuggested = marginBottomSuggested;
    return this;
  }

  /**
   * Indicates if there was a suggested change to margin_bottom.
   * @return marginBottomSuggested
   */
  @javax.annotation.Nullable
  public Boolean getMarginBottomSuggested() {
    return marginBottomSuggested;
  }

  public void setMarginBottomSuggested(Boolean marginBottomSuggested) {
    this.marginBottomSuggested = marginBottomSuggested;
  }


  public EmbeddedObjectSuggestionState marginLeftSuggested(Boolean marginLeftSuggested) {
    this.marginLeftSuggested = marginLeftSuggested;
    return this;
  }

  /**
   * Indicates if there was a suggested change to margin_left.
   * @return marginLeftSuggested
   */
  @javax.annotation.Nullable
  public Boolean getMarginLeftSuggested() {
    return marginLeftSuggested;
  }

  public void setMarginLeftSuggested(Boolean marginLeftSuggested) {
    this.marginLeftSuggested = marginLeftSuggested;
  }


  public EmbeddedObjectSuggestionState marginRightSuggested(Boolean marginRightSuggested) {
    this.marginRightSuggested = marginRightSuggested;
    return this;
  }

  /**
   * Indicates if there was a suggested change to margin_right.
   * @return marginRightSuggested
   */
  @javax.annotation.Nullable
  public Boolean getMarginRightSuggested() {
    return marginRightSuggested;
  }

  public void setMarginRightSuggested(Boolean marginRightSuggested) {
    this.marginRightSuggested = marginRightSuggested;
  }


  public EmbeddedObjectSuggestionState marginTopSuggested(Boolean marginTopSuggested) {
    this.marginTopSuggested = marginTopSuggested;
    return this;
  }

  /**
   * Indicates if there was a suggested change to margin_top.
   * @return marginTopSuggested
   */
  @javax.annotation.Nullable
  public Boolean getMarginTopSuggested() {
    return marginTopSuggested;
  }

  public void setMarginTopSuggested(Boolean marginTopSuggested) {
    this.marginTopSuggested = marginTopSuggested;
  }


  public EmbeddedObjectSuggestionState sizeSuggestionState(SizeSuggestionState sizeSuggestionState) {
    this.sizeSuggestionState = sizeSuggestionState;
    return this;
  }

  /**
   * Get sizeSuggestionState
   * @return sizeSuggestionState
   */
  @javax.annotation.Nullable
  public SizeSuggestionState getSizeSuggestionState() {
    return sizeSuggestionState;
  }

  public void setSizeSuggestionState(SizeSuggestionState sizeSuggestionState) {
    this.sizeSuggestionState = sizeSuggestionState;
  }


  public EmbeddedObjectSuggestionState titleSuggested(Boolean titleSuggested) {
    this.titleSuggested = titleSuggested;
    return this;
  }

  /**
   * Indicates if there was a suggested change to title.
   * @return titleSuggested
   */
  @javax.annotation.Nullable
  public Boolean getTitleSuggested() {
    return titleSuggested;
  }

  public void setTitleSuggested(Boolean titleSuggested) {
    this.titleSuggested = titleSuggested;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EmbeddedObjectSuggestionState embeddedObjectSuggestionState = (EmbeddedObjectSuggestionState) o;
    return Objects.equals(this.descriptionSuggested, embeddedObjectSuggestionState.descriptionSuggested) &&
        Objects.equals(this.embeddedDrawingPropertiesSuggestionState, embeddedObjectSuggestionState.embeddedDrawingPropertiesSuggestionState) &&
        Objects.equals(this.embeddedObjectBorderSuggestionState, embeddedObjectSuggestionState.embeddedObjectBorderSuggestionState) &&
        Objects.equals(this.imagePropertiesSuggestionState, embeddedObjectSuggestionState.imagePropertiesSuggestionState) &&
        Objects.equals(this.linkedContentReferenceSuggestionState, embeddedObjectSuggestionState.linkedContentReferenceSuggestionState) &&
        Objects.equals(this.marginBottomSuggested, embeddedObjectSuggestionState.marginBottomSuggested) &&
        Objects.equals(this.marginLeftSuggested, embeddedObjectSuggestionState.marginLeftSuggested) &&
        Objects.equals(this.marginRightSuggested, embeddedObjectSuggestionState.marginRightSuggested) &&
        Objects.equals(this.marginTopSuggested, embeddedObjectSuggestionState.marginTopSuggested) &&
        Objects.equals(this.sizeSuggestionState, embeddedObjectSuggestionState.sizeSuggestionState) &&
        Objects.equals(this.titleSuggested, embeddedObjectSuggestionState.titleSuggested);
  }

  @Override
  public int hashCode() {
    return Objects.hash(descriptionSuggested, embeddedDrawingPropertiesSuggestionState, embeddedObjectBorderSuggestionState, imagePropertiesSuggestionState, linkedContentReferenceSuggestionState, marginBottomSuggested, marginLeftSuggested, marginRightSuggested, marginTopSuggested, sizeSuggestionState, titleSuggested);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EmbeddedObjectSuggestionState {\n");
    sb.append("    descriptionSuggested: ").append(toIndentedString(descriptionSuggested)).append("\n");
    sb.append("    embeddedDrawingPropertiesSuggestionState: ").append(toIndentedString(embeddedDrawingPropertiesSuggestionState)).append("\n");
    sb.append("    embeddedObjectBorderSuggestionState: ").append(toIndentedString(embeddedObjectBorderSuggestionState)).append("\n");
    sb.append("    imagePropertiesSuggestionState: ").append(toIndentedString(imagePropertiesSuggestionState)).append("\n");
    sb.append("    linkedContentReferenceSuggestionState: ").append(toIndentedString(linkedContentReferenceSuggestionState)).append("\n");
    sb.append("    marginBottomSuggested: ").append(toIndentedString(marginBottomSuggested)).append("\n");
    sb.append("    marginLeftSuggested: ").append(toIndentedString(marginLeftSuggested)).append("\n");
    sb.append("    marginRightSuggested: ").append(toIndentedString(marginRightSuggested)).append("\n");
    sb.append("    marginTopSuggested: ").append(toIndentedString(marginTopSuggested)).append("\n");
    sb.append("    sizeSuggestionState: ").append(toIndentedString(sizeSuggestionState)).append("\n");
    sb.append("    titleSuggested: ").append(toIndentedString(titleSuggested)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("descriptionSuggested");
    openapiFields.add("embeddedDrawingPropertiesSuggestionState");
    openapiFields.add("embeddedObjectBorderSuggestionState");
    openapiFields.add("imagePropertiesSuggestionState");
    openapiFields.add("linkedContentReferenceSuggestionState");
    openapiFields.add("marginBottomSuggested");
    openapiFields.add("marginLeftSuggested");
    openapiFields.add("marginRightSuggested");
    openapiFields.add("marginTopSuggested");
    openapiFields.add("sizeSuggestionState");
    openapiFields.add("titleSuggested");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EmbeddedObjectSuggestionState
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EmbeddedObjectSuggestionState.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EmbeddedObjectSuggestionState is not found in the empty JSON string", EmbeddedObjectSuggestionState.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EmbeddedObjectSuggestionState.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EmbeddedObjectSuggestionState` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `embeddedObjectBorderSuggestionState`
      if (jsonObj.get("embeddedObjectBorderSuggestionState") != null && !jsonObj.get("embeddedObjectBorderSuggestionState").isJsonNull()) {
        EmbeddedObjectBorderSuggestionState.validateJsonElement(jsonObj.get("embeddedObjectBorderSuggestionState"));
      }
      // validate the optional field `imagePropertiesSuggestionState`
      if (jsonObj.get("imagePropertiesSuggestionState") != null && !jsonObj.get("imagePropertiesSuggestionState").isJsonNull()) {
        ImagePropertiesSuggestionState.validateJsonElement(jsonObj.get("imagePropertiesSuggestionState"));
      }
      // validate the optional field `linkedContentReferenceSuggestionState`
      if (jsonObj.get("linkedContentReferenceSuggestionState") != null && !jsonObj.get("linkedContentReferenceSuggestionState").isJsonNull()) {
        LinkedContentReferenceSuggestionState.validateJsonElement(jsonObj.get("linkedContentReferenceSuggestionState"));
      }
      // validate the optional field `sizeSuggestionState`
      if (jsonObj.get("sizeSuggestionState") != null && !jsonObj.get("sizeSuggestionState").isJsonNull()) {
        SizeSuggestionState.validateJsonElement(jsonObj.get("sizeSuggestionState"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EmbeddedObjectSuggestionState.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EmbeddedObjectSuggestionState' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EmbeddedObjectSuggestionState> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EmbeddedObjectSuggestionState.class));

       return (TypeAdapter<T>) new TypeAdapter<EmbeddedObjectSuggestionState>() {
           @Override
           public void write(JsonWriter out, EmbeddedObjectSuggestionState value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EmbeddedObjectSuggestionState read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EmbeddedObjectSuggestionState given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EmbeddedObjectSuggestionState
   * @throws IOException if the JSON string is invalid with respect to EmbeddedObjectSuggestionState
   */
  public static EmbeddedObjectSuggestionState fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EmbeddedObjectSuggestionState.class);
  }

  /**
   * Convert an instance of EmbeddedObjectSuggestionState to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

