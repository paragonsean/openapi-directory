/*
 * Google Docs API
 * Reads and writes Google Docs documents.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CreateFooterRequest;
import org.openapitools.client.model.CreateFootnoteRequest;
import org.openapitools.client.model.CreateHeaderRequest;
import org.openapitools.client.model.CreateNamedRangeRequest;
import org.openapitools.client.model.CreateParagraphBulletsRequest;
import org.openapitools.client.model.DeleteContentRangeRequest;
import org.openapitools.client.model.DeleteFooterRequest;
import org.openapitools.client.model.DeleteHeaderRequest;
import org.openapitools.client.model.DeleteNamedRangeRequest;
import org.openapitools.client.model.DeleteParagraphBulletsRequest;
import org.openapitools.client.model.DeletePositionedObjectRequest;
import org.openapitools.client.model.DeleteTableColumnRequest;
import org.openapitools.client.model.DeleteTableRowRequest;
import org.openapitools.client.model.InsertInlineImageRequest;
import org.openapitools.client.model.InsertPageBreakRequest;
import org.openapitools.client.model.InsertSectionBreakRequest;
import org.openapitools.client.model.InsertTableColumnRequest;
import org.openapitools.client.model.InsertTableRequest;
import org.openapitools.client.model.InsertTableRowRequest;
import org.openapitools.client.model.InsertTextRequest;
import org.openapitools.client.model.MergeTableCellsRequest;
import org.openapitools.client.model.PinTableHeaderRowsRequest;
import org.openapitools.client.model.ReplaceAllTextRequest;
import org.openapitools.client.model.ReplaceImageRequest;
import org.openapitools.client.model.ReplaceNamedRangeContentRequest;
import org.openapitools.client.model.UnmergeTableCellsRequest;
import org.openapitools.client.model.UpdateDocumentStyleRequest;
import org.openapitools.client.model.UpdateParagraphStyleRequest;
import org.openapitools.client.model.UpdateSectionStyleRequest;
import org.openapitools.client.model.UpdateTableCellStyleRequest;
import org.openapitools.client.model.UpdateTableColumnPropertiesRequest;
import org.openapitools.client.model.UpdateTableRowStyleRequest;
import org.openapitools.client.model.UpdateTextStyleRequest;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A single update to apply to a document.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:47:07.584674-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Request {
  public static final String SERIALIZED_NAME_CREATE_FOOTER = "createFooter";
  @SerializedName(SERIALIZED_NAME_CREATE_FOOTER)
  private CreateFooterRequest createFooter;

  public static final String SERIALIZED_NAME_CREATE_FOOTNOTE = "createFootnote";
  @SerializedName(SERIALIZED_NAME_CREATE_FOOTNOTE)
  private CreateFootnoteRequest createFootnote;

  public static final String SERIALIZED_NAME_CREATE_HEADER = "createHeader";
  @SerializedName(SERIALIZED_NAME_CREATE_HEADER)
  private CreateHeaderRequest createHeader;

  public static final String SERIALIZED_NAME_CREATE_NAMED_RANGE = "createNamedRange";
  @SerializedName(SERIALIZED_NAME_CREATE_NAMED_RANGE)
  private CreateNamedRangeRequest createNamedRange;

  public static final String SERIALIZED_NAME_CREATE_PARAGRAPH_BULLETS = "createParagraphBullets";
  @SerializedName(SERIALIZED_NAME_CREATE_PARAGRAPH_BULLETS)
  private CreateParagraphBulletsRequest createParagraphBullets;

  public static final String SERIALIZED_NAME_DELETE_CONTENT_RANGE = "deleteContentRange";
  @SerializedName(SERIALIZED_NAME_DELETE_CONTENT_RANGE)
  private DeleteContentRangeRequest deleteContentRange;

  public static final String SERIALIZED_NAME_DELETE_FOOTER = "deleteFooter";
  @SerializedName(SERIALIZED_NAME_DELETE_FOOTER)
  private DeleteFooterRequest deleteFooter;

  public static final String SERIALIZED_NAME_DELETE_HEADER = "deleteHeader";
  @SerializedName(SERIALIZED_NAME_DELETE_HEADER)
  private DeleteHeaderRequest deleteHeader;

  public static final String SERIALIZED_NAME_DELETE_NAMED_RANGE = "deleteNamedRange";
  @SerializedName(SERIALIZED_NAME_DELETE_NAMED_RANGE)
  private DeleteNamedRangeRequest deleteNamedRange;

  public static final String SERIALIZED_NAME_DELETE_PARAGRAPH_BULLETS = "deleteParagraphBullets";
  @SerializedName(SERIALIZED_NAME_DELETE_PARAGRAPH_BULLETS)
  private DeleteParagraphBulletsRequest deleteParagraphBullets;

  public static final String SERIALIZED_NAME_DELETE_POSITIONED_OBJECT = "deletePositionedObject";
  @SerializedName(SERIALIZED_NAME_DELETE_POSITIONED_OBJECT)
  private DeletePositionedObjectRequest deletePositionedObject;

  public static final String SERIALIZED_NAME_DELETE_TABLE_COLUMN = "deleteTableColumn";
  @SerializedName(SERIALIZED_NAME_DELETE_TABLE_COLUMN)
  private DeleteTableColumnRequest deleteTableColumn;

  public static final String SERIALIZED_NAME_DELETE_TABLE_ROW = "deleteTableRow";
  @SerializedName(SERIALIZED_NAME_DELETE_TABLE_ROW)
  private DeleteTableRowRequest deleteTableRow;

  public static final String SERIALIZED_NAME_INSERT_INLINE_IMAGE = "insertInlineImage";
  @SerializedName(SERIALIZED_NAME_INSERT_INLINE_IMAGE)
  private InsertInlineImageRequest insertInlineImage;

  public static final String SERIALIZED_NAME_INSERT_PAGE_BREAK = "insertPageBreak";
  @SerializedName(SERIALIZED_NAME_INSERT_PAGE_BREAK)
  private InsertPageBreakRequest insertPageBreak;

  public static final String SERIALIZED_NAME_INSERT_SECTION_BREAK = "insertSectionBreak";
  @SerializedName(SERIALIZED_NAME_INSERT_SECTION_BREAK)
  private InsertSectionBreakRequest insertSectionBreak;

  public static final String SERIALIZED_NAME_INSERT_TABLE = "insertTable";
  @SerializedName(SERIALIZED_NAME_INSERT_TABLE)
  private InsertTableRequest insertTable;

  public static final String SERIALIZED_NAME_INSERT_TABLE_COLUMN = "insertTableColumn";
  @SerializedName(SERIALIZED_NAME_INSERT_TABLE_COLUMN)
  private InsertTableColumnRequest insertTableColumn;

  public static final String SERIALIZED_NAME_INSERT_TABLE_ROW = "insertTableRow";
  @SerializedName(SERIALIZED_NAME_INSERT_TABLE_ROW)
  private InsertTableRowRequest insertTableRow;

  public static final String SERIALIZED_NAME_INSERT_TEXT = "insertText";
  @SerializedName(SERIALIZED_NAME_INSERT_TEXT)
  private InsertTextRequest insertText;

  public static final String SERIALIZED_NAME_MERGE_TABLE_CELLS = "mergeTableCells";
  @SerializedName(SERIALIZED_NAME_MERGE_TABLE_CELLS)
  private MergeTableCellsRequest mergeTableCells;

  public static final String SERIALIZED_NAME_PIN_TABLE_HEADER_ROWS = "pinTableHeaderRows";
  @SerializedName(SERIALIZED_NAME_PIN_TABLE_HEADER_ROWS)
  private PinTableHeaderRowsRequest pinTableHeaderRows;

  public static final String SERIALIZED_NAME_REPLACE_ALL_TEXT = "replaceAllText";
  @SerializedName(SERIALIZED_NAME_REPLACE_ALL_TEXT)
  private ReplaceAllTextRequest replaceAllText;

  public static final String SERIALIZED_NAME_REPLACE_IMAGE = "replaceImage";
  @SerializedName(SERIALIZED_NAME_REPLACE_IMAGE)
  private ReplaceImageRequest replaceImage;

  public static final String SERIALIZED_NAME_REPLACE_NAMED_RANGE_CONTENT = "replaceNamedRangeContent";
  @SerializedName(SERIALIZED_NAME_REPLACE_NAMED_RANGE_CONTENT)
  private ReplaceNamedRangeContentRequest replaceNamedRangeContent;

  public static final String SERIALIZED_NAME_UNMERGE_TABLE_CELLS = "unmergeTableCells";
  @SerializedName(SERIALIZED_NAME_UNMERGE_TABLE_CELLS)
  private UnmergeTableCellsRequest unmergeTableCells;

  public static final String SERIALIZED_NAME_UPDATE_DOCUMENT_STYLE = "updateDocumentStyle";
  @SerializedName(SERIALIZED_NAME_UPDATE_DOCUMENT_STYLE)
  private UpdateDocumentStyleRequest updateDocumentStyle;

  public static final String SERIALIZED_NAME_UPDATE_PARAGRAPH_STYLE = "updateParagraphStyle";
  @SerializedName(SERIALIZED_NAME_UPDATE_PARAGRAPH_STYLE)
  private UpdateParagraphStyleRequest updateParagraphStyle;

  public static final String SERIALIZED_NAME_UPDATE_SECTION_STYLE = "updateSectionStyle";
  @SerializedName(SERIALIZED_NAME_UPDATE_SECTION_STYLE)
  private UpdateSectionStyleRequest updateSectionStyle;

  public static final String SERIALIZED_NAME_UPDATE_TABLE_CELL_STYLE = "updateTableCellStyle";
  @SerializedName(SERIALIZED_NAME_UPDATE_TABLE_CELL_STYLE)
  private UpdateTableCellStyleRequest updateTableCellStyle;

  public static final String SERIALIZED_NAME_UPDATE_TABLE_COLUMN_PROPERTIES = "updateTableColumnProperties";
  @SerializedName(SERIALIZED_NAME_UPDATE_TABLE_COLUMN_PROPERTIES)
  private UpdateTableColumnPropertiesRequest updateTableColumnProperties;

  public static final String SERIALIZED_NAME_UPDATE_TABLE_ROW_STYLE = "updateTableRowStyle";
  @SerializedName(SERIALIZED_NAME_UPDATE_TABLE_ROW_STYLE)
  private UpdateTableRowStyleRequest updateTableRowStyle;

  public static final String SERIALIZED_NAME_UPDATE_TEXT_STYLE = "updateTextStyle";
  @SerializedName(SERIALIZED_NAME_UPDATE_TEXT_STYLE)
  private UpdateTextStyleRequest updateTextStyle;

  public Request() {
  }

  public Request createFooter(CreateFooterRequest createFooter) {
    this.createFooter = createFooter;
    return this;
  }

  /**
   * Get createFooter
   * @return createFooter
   */
  @javax.annotation.Nullable
  public CreateFooterRequest getCreateFooter() {
    return createFooter;
  }

  public void setCreateFooter(CreateFooterRequest createFooter) {
    this.createFooter = createFooter;
  }


  public Request createFootnote(CreateFootnoteRequest createFootnote) {
    this.createFootnote = createFootnote;
    return this;
  }

  /**
   * Get createFootnote
   * @return createFootnote
   */
  @javax.annotation.Nullable
  public CreateFootnoteRequest getCreateFootnote() {
    return createFootnote;
  }

  public void setCreateFootnote(CreateFootnoteRequest createFootnote) {
    this.createFootnote = createFootnote;
  }


  public Request createHeader(CreateHeaderRequest createHeader) {
    this.createHeader = createHeader;
    return this;
  }

  /**
   * Get createHeader
   * @return createHeader
   */
  @javax.annotation.Nullable
  public CreateHeaderRequest getCreateHeader() {
    return createHeader;
  }

  public void setCreateHeader(CreateHeaderRequest createHeader) {
    this.createHeader = createHeader;
  }


  public Request createNamedRange(CreateNamedRangeRequest createNamedRange) {
    this.createNamedRange = createNamedRange;
    return this;
  }

  /**
   * Get createNamedRange
   * @return createNamedRange
   */
  @javax.annotation.Nullable
  public CreateNamedRangeRequest getCreateNamedRange() {
    return createNamedRange;
  }

  public void setCreateNamedRange(CreateNamedRangeRequest createNamedRange) {
    this.createNamedRange = createNamedRange;
  }


  public Request createParagraphBullets(CreateParagraphBulletsRequest createParagraphBullets) {
    this.createParagraphBullets = createParagraphBullets;
    return this;
  }

  /**
   * Get createParagraphBullets
   * @return createParagraphBullets
   */
  @javax.annotation.Nullable
  public CreateParagraphBulletsRequest getCreateParagraphBullets() {
    return createParagraphBullets;
  }

  public void setCreateParagraphBullets(CreateParagraphBulletsRequest createParagraphBullets) {
    this.createParagraphBullets = createParagraphBullets;
  }


  public Request deleteContentRange(DeleteContentRangeRequest deleteContentRange) {
    this.deleteContentRange = deleteContentRange;
    return this;
  }

  /**
   * Get deleteContentRange
   * @return deleteContentRange
   */
  @javax.annotation.Nullable
  public DeleteContentRangeRequest getDeleteContentRange() {
    return deleteContentRange;
  }

  public void setDeleteContentRange(DeleteContentRangeRequest deleteContentRange) {
    this.deleteContentRange = deleteContentRange;
  }


  public Request deleteFooter(DeleteFooterRequest deleteFooter) {
    this.deleteFooter = deleteFooter;
    return this;
  }

  /**
   * Get deleteFooter
   * @return deleteFooter
   */
  @javax.annotation.Nullable
  public DeleteFooterRequest getDeleteFooter() {
    return deleteFooter;
  }

  public void setDeleteFooter(DeleteFooterRequest deleteFooter) {
    this.deleteFooter = deleteFooter;
  }


  public Request deleteHeader(DeleteHeaderRequest deleteHeader) {
    this.deleteHeader = deleteHeader;
    return this;
  }

  /**
   * Get deleteHeader
   * @return deleteHeader
   */
  @javax.annotation.Nullable
  public DeleteHeaderRequest getDeleteHeader() {
    return deleteHeader;
  }

  public void setDeleteHeader(DeleteHeaderRequest deleteHeader) {
    this.deleteHeader = deleteHeader;
  }


  public Request deleteNamedRange(DeleteNamedRangeRequest deleteNamedRange) {
    this.deleteNamedRange = deleteNamedRange;
    return this;
  }

  /**
   * Get deleteNamedRange
   * @return deleteNamedRange
   */
  @javax.annotation.Nullable
  public DeleteNamedRangeRequest getDeleteNamedRange() {
    return deleteNamedRange;
  }

  public void setDeleteNamedRange(DeleteNamedRangeRequest deleteNamedRange) {
    this.deleteNamedRange = deleteNamedRange;
  }


  public Request deleteParagraphBullets(DeleteParagraphBulletsRequest deleteParagraphBullets) {
    this.deleteParagraphBullets = deleteParagraphBullets;
    return this;
  }

  /**
   * Get deleteParagraphBullets
   * @return deleteParagraphBullets
   */
  @javax.annotation.Nullable
  public DeleteParagraphBulletsRequest getDeleteParagraphBullets() {
    return deleteParagraphBullets;
  }

  public void setDeleteParagraphBullets(DeleteParagraphBulletsRequest deleteParagraphBullets) {
    this.deleteParagraphBullets = deleteParagraphBullets;
  }


  public Request deletePositionedObject(DeletePositionedObjectRequest deletePositionedObject) {
    this.deletePositionedObject = deletePositionedObject;
    return this;
  }

  /**
   * Get deletePositionedObject
   * @return deletePositionedObject
   */
  @javax.annotation.Nullable
  public DeletePositionedObjectRequest getDeletePositionedObject() {
    return deletePositionedObject;
  }

  public void setDeletePositionedObject(DeletePositionedObjectRequest deletePositionedObject) {
    this.deletePositionedObject = deletePositionedObject;
  }


  public Request deleteTableColumn(DeleteTableColumnRequest deleteTableColumn) {
    this.deleteTableColumn = deleteTableColumn;
    return this;
  }

  /**
   * Get deleteTableColumn
   * @return deleteTableColumn
   */
  @javax.annotation.Nullable
  public DeleteTableColumnRequest getDeleteTableColumn() {
    return deleteTableColumn;
  }

  public void setDeleteTableColumn(DeleteTableColumnRequest deleteTableColumn) {
    this.deleteTableColumn = deleteTableColumn;
  }


  public Request deleteTableRow(DeleteTableRowRequest deleteTableRow) {
    this.deleteTableRow = deleteTableRow;
    return this;
  }

  /**
   * Get deleteTableRow
   * @return deleteTableRow
   */
  @javax.annotation.Nullable
  public DeleteTableRowRequest getDeleteTableRow() {
    return deleteTableRow;
  }

  public void setDeleteTableRow(DeleteTableRowRequest deleteTableRow) {
    this.deleteTableRow = deleteTableRow;
  }


  public Request insertInlineImage(InsertInlineImageRequest insertInlineImage) {
    this.insertInlineImage = insertInlineImage;
    return this;
  }

  /**
   * Get insertInlineImage
   * @return insertInlineImage
   */
  @javax.annotation.Nullable
  public InsertInlineImageRequest getInsertInlineImage() {
    return insertInlineImage;
  }

  public void setInsertInlineImage(InsertInlineImageRequest insertInlineImage) {
    this.insertInlineImage = insertInlineImage;
  }


  public Request insertPageBreak(InsertPageBreakRequest insertPageBreak) {
    this.insertPageBreak = insertPageBreak;
    return this;
  }

  /**
   * Get insertPageBreak
   * @return insertPageBreak
   */
  @javax.annotation.Nullable
  public InsertPageBreakRequest getInsertPageBreak() {
    return insertPageBreak;
  }

  public void setInsertPageBreak(InsertPageBreakRequest insertPageBreak) {
    this.insertPageBreak = insertPageBreak;
  }


  public Request insertSectionBreak(InsertSectionBreakRequest insertSectionBreak) {
    this.insertSectionBreak = insertSectionBreak;
    return this;
  }

  /**
   * Get insertSectionBreak
   * @return insertSectionBreak
   */
  @javax.annotation.Nullable
  public InsertSectionBreakRequest getInsertSectionBreak() {
    return insertSectionBreak;
  }

  public void setInsertSectionBreak(InsertSectionBreakRequest insertSectionBreak) {
    this.insertSectionBreak = insertSectionBreak;
  }


  public Request insertTable(InsertTableRequest insertTable) {
    this.insertTable = insertTable;
    return this;
  }

  /**
   * Get insertTable
   * @return insertTable
   */
  @javax.annotation.Nullable
  public InsertTableRequest getInsertTable() {
    return insertTable;
  }

  public void setInsertTable(InsertTableRequest insertTable) {
    this.insertTable = insertTable;
  }


  public Request insertTableColumn(InsertTableColumnRequest insertTableColumn) {
    this.insertTableColumn = insertTableColumn;
    return this;
  }

  /**
   * Get insertTableColumn
   * @return insertTableColumn
   */
  @javax.annotation.Nullable
  public InsertTableColumnRequest getInsertTableColumn() {
    return insertTableColumn;
  }

  public void setInsertTableColumn(InsertTableColumnRequest insertTableColumn) {
    this.insertTableColumn = insertTableColumn;
  }


  public Request insertTableRow(InsertTableRowRequest insertTableRow) {
    this.insertTableRow = insertTableRow;
    return this;
  }

  /**
   * Get insertTableRow
   * @return insertTableRow
   */
  @javax.annotation.Nullable
  public InsertTableRowRequest getInsertTableRow() {
    return insertTableRow;
  }

  public void setInsertTableRow(InsertTableRowRequest insertTableRow) {
    this.insertTableRow = insertTableRow;
  }


  public Request insertText(InsertTextRequest insertText) {
    this.insertText = insertText;
    return this;
  }

  /**
   * Get insertText
   * @return insertText
   */
  @javax.annotation.Nullable
  public InsertTextRequest getInsertText() {
    return insertText;
  }

  public void setInsertText(InsertTextRequest insertText) {
    this.insertText = insertText;
  }


  public Request mergeTableCells(MergeTableCellsRequest mergeTableCells) {
    this.mergeTableCells = mergeTableCells;
    return this;
  }

  /**
   * Get mergeTableCells
   * @return mergeTableCells
   */
  @javax.annotation.Nullable
  public MergeTableCellsRequest getMergeTableCells() {
    return mergeTableCells;
  }

  public void setMergeTableCells(MergeTableCellsRequest mergeTableCells) {
    this.mergeTableCells = mergeTableCells;
  }


  public Request pinTableHeaderRows(PinTableHeaderRowsRequest pinTableHeaderRows) {
    this.pinTableHeaderRows = pinTableHeaderRows;
    return this;
  }

  /**
   * Get pinTableHeaderRows
   * @return pinTableHeaderRows
   */
  @javax.annotation.Nullable
  public PinTableHeaderRowsRequest getPinTableHeaderRows() {
    return pinTableHeaderRows;
  }

  public void setPinTableHeaderRows(PinTableHeaderRowsRequest pinTableHeaderRows) {
    this.pinTableHeaderRows = pinTableHeaderRows;
  }


  public Request replaceAllText(ReplaceAllTextRequest replaceAllText) {
    this.replaceAllText = replaceAllText;
    return this;
  }

  /**
   * Get replaceAllText
   * @return replaceAllText
   */
  @javax.annotation.Nullable
  public ReplaceAllTextRequest getReplaceAllText() {
    return replaceAllText;
  }

  public void setReplaceAllText(ReplaceAllTextRequest replaceAllText) {
    this.replaceAllText = replaceAllText;
  }


  public Request replaceImage(ReplaceImageRequest replaceImage) {
    this.replaceImage = replaceImage;
    return this;
  }

  /**
   * Get replaceImage
   * @return replaceImage
   */
  @javax.annotation.Nullable
  public ReplaceImageRequest getReplaceImage() {
    return replaceImage;
  }

  public void setReplaceImage(ReplaceImageRequest replaceImage) {
    this.replaceImage = replaceImage;
  }


  public Request replaceNamedRangeContent(ReplaceNamedRangeContentRequest replaceNamedRangeContent) {
    this.replaceNamedRangeContent = replaceNamedRangeContent;
    return this;
  }

  /**
   * Get replaceNamedRangeContent
   * @return replaceNamedRangeContent
   */
  @javax.annotation.Nullable
  public ReplaceNamedRangeContentRequest getReplaceNamedRangeContent() {
    return replaceNamedRangeContent;
  }

  public void setReplaceNamedRangeContent(ReplaceNamedRangeContentRequest replaceNamedRangeContent) {
    this.replaceNamedRangeContent = replaceNamedRangeContent;
  }


  public Request unmergeTableCells(UnmergeTableCellsRequest unmergeTableCells) {
    this.unmergeTableCells = unmergeTableCells;
    return this;
  }

  /**
   * Get unmergeTableCells
   * @return unmergeTableCells
   */
  @javax.annotation.Nullable
  public UnmergeTableCellsRequest getUnmergeTableCells() {
    return unmergeTableCells;
  }

  public void setUnmergeTableCells(UnmergeTableCellsRequest unmergeTableCells) {
    this.unmergeTableCells = unmergeTableCells;
  }


  public Request updateDocumentStyle(UpdateDocumentStyleRequest updateDocumentStyle) {
    this.updateDocumentStyle = updateDocumentStyle;
    return this;
  }

  /**
   * Get updateDocumentStyle
   * @return updateDocumentStyle
   */
  @javax.annotation.Nullable
  public UpdateDocumentStyleRequest getUpdateDocumentStyle() {
    return updateDocumentStyle;
  }

  public void setUpdateDocumentStyle(UpdateDocumentStyleRequest updateDocumentStyle) {
    this.updateDocumentStyle = updateDocumentStyle;
  }


  public Request updateParagraphStyle(UpdateParagraphStyleRequest updateParagraphStyle) {
    this.updateParagraphStyle = updateParagraphStyle;
    return this;
  }

  /**
   * Get updateParagraphStyle
   * @return updateParagraphStyle
   */
  @javax.annotation.Nullable
  public UpdateParagraphStyleRequest getUpdateParagraphStyle() {
    return updateParagraphStyle;
  }

  public void setUpdateParagraphStyle(UpdateParagraphStyleRequest updateParagraphStyle) {
    this.updateParagraphStyle = updateParagraphStyle;
  }


  public Request updateSectionStyle(UpdateSectionStyleRequest updateSectionStyle) {
    this.updateSectionStyle = updateSectionStyle;
    return this;
  }

  /**
   * Get updateSectionStyle
   * @return updateSectionStyle
   */
  @javax.annotation.Nullable
  public UpdateSectionStyleRequest getUpdateSectionStyle() {
    return updateSectionStyle;
  }

  public void setUpdateSectionStyle(UpdateSectionStyleRequest updateSectionStyle) {
    this.updateSectionStyle = updateSectionStyle;
  }


  public Request updateTableCellStyle(UpdateTableCellStyleRequest updateTableCellStyle) {
    this.updateTableCellStyle = updateTableCellStyle;
    return this;
  }

  /**
   * Get updateTableCellStyle
   * @return updateTableCellStyle
   */
  @javax.annotation.Nullable
  public UpdateTableCellStyleRequest getUpdateTableCellStyle() {
    return updateTableCellStyle;
  }

  public void setUpdateTableCellStyle(UpdateTableCellStyleRequest updateTableCellStyle) {
    this.updateTableCellStyle = updateTableCellStyle;
  }


  public Request updateTableColumnProperties(UpdateTableColumnPropertiesRequest updateTableColumnProperties) {
    this.updateTableColumnProperties = updateTableColumnProperties;
    return this;
  }

  /**
   * Get updateTableColumnProperties
   * @return updateTableColumnProperties
   */
  @javax.annotation.Nullable
  public UpdateTableColumnPropertiesRequest getUpdateTableColumnProperties() {
    return updateTableColumnProperties;
  }

  public void setUpdateTableColumnProperties(UpdateTableColumnPropertiesRequest updateTableColumnProperties) {
    this.updateTableColumnProperties = updateTableColumnProperties;
  }


  public Request updateTableRowStyle(UpdateTableRowStyleRequest updateTableRowStyle) {
    this.updateTableRowStyle = updateTableRowStyle;
    return this;
  }

  /**
   * Get updateTableRowStyle
   * @return updateTableRowStyle
   */
  @javax.annotation.Nullable
  public UpdateTableRowStyleRequest getUpdateTableRowStyle() {
    return updateTableRowStyle;
  }

  public void setUpdateTableRowStyle(UpdateTableRowStyleRequest updateTableRowStyle) {
    this.updateTableRowStyle = updateTableRowStyle;
  }


  public Request updateTextStyle(UpdateTextStyleRequest updateTextStyle) {
    this.updateTextStyle = updateTextStyle;
    return this;
  }

  /**
   * Get updateTextStyle
   * @return updateTextStyle
   */
  @javax.annotation.Nullable
  public UpdateTextStyleRequest getUpdateTextStyle() {
    return updateTextStyle;
  }

  public void setUpdateTextStyle(UpdateTextStyleRequest updateTextStyle) {
    this.updateTextStyle = updateTextStyle;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Request request = (Request) o;
    return Objects.equals(this.createFooter, request.createFooter) &&
        Objects.equals(this.createFootnote, request.createFootnote) &&
        Objects.equals(this.createHeader, request.createHeader) &&
        Objects.equals(this.createNamedRange, request.createNamedRange) &&
        Objects.equals(this.createParagraphBullets, request.createParagraphBullets) &&
        Objects.equals(this.deleteContentRange, request.deleteContentRange) &&
        Objects.equals(this.deleteFooter, request.deleteFooter) &&
        Objects.equals(this.deleteHeader, request.deleteHeader) &&
        Objects.equals(this.deleteNamedRange, request.deleteNamedRange) &&
        Objects.equals(this.deleteParagraphBullets, request.deleteParagraphBullets) &&
        Objects.equals(this.deletePositionedObject, request.deletePositionedObject) &&
        Objects.equals(this.deleteTableColumn, request.deleteTableColumn) &&
        Objects.equals(this.deleteTableRow, request.deleteTableRow) &&
        Objects.equals(this.insertInlineImage, request.insertInlineImage) &&
        Objects.equals(this.insertPageBreak, request.insertPageBreak) &&
        Objects.equals(this.insertSectionBreak, request.insertSectionBreak) &&
        Objects.equals(this.insertTable, request.insertTable) &&
        Objects.equals(this.insertTableColumn, request.insertTableColumn) &&
        Objects.equals(this.insertTableRow, request.insertTableRow) &&
        Objects.equals(this.insertText, request.insertText) &&
        Objects.equals(this.mergeTableCells, request.mergeTableCells) &&
        Objects.equals(this.pinTableHeaderRows, request.pinTableHeaderRows) &&
        Objects.equals(this.replaceAllText, request.replaceAllText) &&
        Objects.equals(this.replaceImage, request.replaceImage) &&
        Objects.equals(this.replaceNamedRangeContent, request.replaceNamedRangeContent) &&
        Objects.equals(this.unmergeTableCells, request.unmergeTableCells) &&
        Objects.equals(this.updateDocumentStyle, request.updateDocumentStyle) &&
        Objects.equals(this.updateParagraphStyle, request.updateParagraphStyle) &&
        Objects.equals(this.updateSectionStyle, request.updateSectionStyle) &&
        Objects.equals(this.updateTableCellStyle, request.updateTableCellStyle) &&
        Objects.equals(this.updateTableColumnProperties, request.updateTableColumnProperties) &&
        Objects.equals(this.updateTableRowStyle, request.updateTableRowStyle) &&
        Objects.equals(this.updateTextStyle, request.updateTextStyle);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createFooter, createFootnote, createHeader, createNamedRange, createParagraphBullets, deleteContentRange, deleteFooter, deleteHeader, deleteNamedRange, deleteParagraphBullets, deletePositionedObject, deleteTableColumn, deleteTableRow, insertInlineImage, insertPageBreak, insertSectionBreak, insertTable, insertTableColumn, insertTableRow, insertText, mergeTableCells, pinTableHeaderRows, replaceAllText, replaceImage, replaceNamedRangeContent, unmergeTableCells, updateDocumentStyle, updateParagraphStyle, updateSectionStyle, updateTableCellStyle, updateTableColumnProperties, updateTableRowStyle, updateTextStyle);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Request {\n");
    sb.append("    createFooter: ").append(toIndentedString(createFooter)).append("\n");
    sb.append("    createFootnote: ").append(toIndentedString(createFootnote)).append("\n");
    sb.append("    createHeader: ").append(toIndentedString(createHeader)).append("\n");
    sb.append("    createNamedRange: ").append(toIndentedString(createNamedRange)).append("\n");
    sb.append("    createParagraphBullets: ").append(toIndentedString(createParagraphBullets)).append("\n");
    sb.append("    deleteContentRange: ").append(toIndentedString(deleteContentRange)).append("\n");
    sb.append("    deleteFooter: ").append(toIndentedString(deleteFooter)).append("\n");
    sb.append("    deleteHeader: ").append(toIndentedString(deleteHeader)).append("\n");
    sb.append("    deleteNamedRange: ").append(toIndentedString(deleteNamedRange)).append("\n");
    sb.append("    deleteParagraphBullets: ").append(toIndentedString(deleteParagraphBullets)).append("\n");
    sb.append("    deletePositionedObject: ").append(toIndentedString(deletePositionedObject)).append("\n");
    sb.append("    deleteTableColumn: ").append(toIndentedString(deleteTableColumn)).append("\n");
    sb.append("    deleteTableRow: ").append(toIndentedString(deleteTableRow)).append("\n");
    sb.append("    insertInlineImage: ").append(toIndentedString(insertInlineImage)).append("\n");
    sb.append("    insertPageBreak: ").append(toIndentedString(insertPageBreak)).append("\n");
    sb.append("    insertSectionBreak: ").append(toIndentedString(insertSectionBreak)).append("\n");
    sb.append("    insertTable: ").append(toIndentedString(insertTable)).append("\n");
    sb.append("    insertTableColumn: ").append(toIndentedString(insertTableColumn)).append("\n");
    sb.append("    insertTableRow: ").append(toIndentedString(insertTableRow)).append("\n");
    sb.append("    insertText: ").append(toIndentedString(insertText)).append("\n");
    sb.append("    mergeTableCells: ").append(toIndentedString(mergeTableCells)).append("\n");
    sb.append("    pinTableHeaderRows: ").append(toIndentedString(pinTableHeaderRows)).append("\n");
    sb.append("    replaceAllText: ").append(toIndentedString(replaceAllText)).append("\n");
    sb.append("    replaceImage: ").append(toIndentedString(replaceImage)).append("\n");
    sb.append("    replaceNamedRangeContent: ").append(toIndentedString(replaceNamedRangeContent)).append("\n");
    sb.append("    unmergeTableCells: ").append(toIndentedString(unmergeTableCells)).append("\n");
    sb.append("    updateDocumentStyle: ").append(toIndentedString(updateDocumentStyle)).append("\n");
    sb.append("    updateParagraphStyle: ").append(toIndentedString(updateParagraphStyle)).append("\n");
    sb.append("    updateSectionStyle: ").append(toIndentedString(updateSectionStyle)).append("\n");
    sb.append("    updateTableCellStyle: ").append(toIndentedString(updateTableCellStyle)).append("\n");
    sb.append("    updateTableColumnProperties: ").append(toIndentedString(updateTableColumnProperties)).append("\n");
    sb.append("    updateTableRowStyle: ").append(toIndentedString(updateTableRowStyle)).append("\n");
    sb.append("    updateTextStyle: ").append(toIndentedString(updateTextStyle)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("createFooter");
    openapiFields.add("createFootnote");
    openapiFields.add("createHeader");
    openapiFields.add("createNamedRange");
    openapiFields.add("createParagraphBullets");
    openapiFields.add("deleteContentRange");
    openapiFields.add("deleteFooter");
    openapiFields.add("deleteHeader");
    openapiFields.add("deleteNamedRange");
    openapiFields.add("deleteParagraphBullets");
    openapiFields.add("deletePositionedObject");
    openapiFields.add("deleteTableColumn");
    openapiFields.add("deleteTableRow");
    openapiFields.add("insertInlineImage");
    openapiFields.add("insertPageBreak");
    openapiFields.add("insertSectionBreak");
    openapiFields.add("insertTable");
    openapiFields.add("insertTableColumn");
    openapiFields.add("insertTableRow");
    openapiFields.add("insertText");
    openapiFields.add("mergeTableCells");
    openapiFields.add("pinTableHeaderRows");
    openapiFields.add("replaceAllText");
    openapiFields.add("replaceImage");
    openapiFields.add("replaceNamedRangeContent");
    openapiFields.add("unmergeTableCells");
    openapiFields.add("updateDocumentStyle");
    openapiFields.add("updateParagraphStyle");
    openapiFields.add("updateSectionStyle");
    openapiFields.add("updateTableCellStyle");
    openapiFields.add("updateTableColumnProperties");
    openapiFields.add("updateTableRowStyle");
    openapiFields.add("updateTextStyle");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Request
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Request.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Request is not found in the empty JSON string", Request.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Request.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Request` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `createFooter`
      if (jsonObj.get("createFooter") != null && !jsonObj.get("createFooter").isJsonNull()) {
        CreateFooterRequest.validateJsonElement(jsonObj.get("createFooter"));
      }
      // validate the optional field `createFootnote`
      if (jsonObj.get("createFootnote") != null && !jsonObj.get("createFootnote").isJsonNull()) {
        CreateFootnoteRequest.validateJsonElement(jsonObj.get("createFootnote"));
      }
      // validate the optional field `createHeader`
      if (jsonObj.get("createHeader") != null && !jsonObj.get("createHeader").isJsonNull()) {
        CreateHeaderRequest.validateJsonElement(jsonObj.get("createHeader"));
      }
      // validate the optional field `createNamedRange`
      if (jsonObj.get("createNamedRange") != null && !jsonObj.get("createNamedRange").isJsonNull()) {
        CreateNamedRangeRequest.validateJsonElement(jsonObj.get("createNamedRange"));
      }
      // validate the optional field `createParagraphBullets`
      if (jsonObj.get("createParagraphBullets") != null && !jsonObj.get("createParagraphBullets").isJsonNull()) {
        CreateParagraphBulletsRequest.validateJsonElement(jsonObj.get("createParagraphBullets"));
      }
      // validate the optional field `deleteContentRange`
      if (jsonObj.get("deleteContentRange") != null && !jsonObj.get("deleteContentRange").isJsonNull()) {
        DeleteContentRangeRequest.validateJsonElement(jsonObj.get("deleteContentRange"));
      }
      // validate the optional field `deleteFooter`
      if (jsonObj.get("deleteFooter") != null && !jsonObj.get("deleteFooter").isJsonNull()) {
        DeleteFooterRequest.validateJsonElement(jsonObj.get("deleteFooter"));
      }
      // validate the optional field `deleteHeader`
      if (jsonObj.get("deleteHeader") != null && !jsonObj.get("deleteHeader").isJsonNull()) {
        DeleteHeaderRequest.validateJsonElement(jsonObj.get("deleteHeader"));
      }
      // validate the optional field `deleteNamedRange`
      if (jsonObj.get("deleteNamedRange") != null && !jsonObj.get("deleteNamedRange").isJsonNull()) {
        DeleteNamedRangeRequest.validateJsonElement(jsonObj.get("deleteNamedRange"));
      }
      // validate the optional field `deleteParagraphBullets`
      if (jsonObj.get("deleteParagraphBullets") != null && !jsonObj.get("deleteParagraphBullets").isJsonNull()) {
        DeleteParagraphBulletsRequest.validateJsonElement(jsonObj.get("deleteParagraphBullets"));
      }
      // validate the optional field `deletePositionedObject`
      if (jsonObj.get("deletePositionedObject") != null && !jsonObj.get("deletePositionedObject").isJsonNull()) {
        DeletePositionedObjectRequest.validateJsonElement(jsonObj.get("deletePositionedObject"));
      }
      // validate the optional field `deleteTableColumn`
      if (jsonObj.get("deleteTableColumn") != null && !jsonObj.get("deleteTableColumn").isJsonNull()) {
        DeleteTableColumnRequest.validateJsonElement(jsonObj.get("deleteTableColumn"));
      }
      // validate the optional field `deleteTableRow`
      if (jsonObj.get("deleteTableRow") != null && !jsonObj.get("deleteTableRow").isJsonNull()) {
        DeleteTableRowRequest.validateJsonElement(jsonObj.get("deleteTableRow"));
      }
      // validate the optional field `insertInlineImage`
      if (jsonObj.get("insertInlineImage") != null && !jsonObj.get("insertInlineImage").isJsonNull()) {
        InsertInlineImageRequest.validateJsonElement(jsonObj.get("insertInlineImage"));
      }
      // validate the optional field `insertPageBreak`
      if (jsonObj.get("insertPageBreak") != null && !jsonObj.get("insertPageBreak").isJsonNull()) {
        InsertPageBreakRequest.validateJsonElement(jsonObj.get("insertPageBreak"));
      }
      // validate the optional field `insertSectionBreak`
      if (jsonObj.get("insertSectionBreak") != null && !jsonObj.get("insertSectionBreak").isJsonNull()) {
        InsertSectionBreakRequest.validateJsonElement(jsonObj.get("insertSectionBreak"));
      }
      // validate the optional field `insertTable`
      if (jsonObj.get("insertTable") != null && !jsonObj.get("insertTable").isJsonNull()) {
        InsertTableRequest.validateJsonElement(jsonObj.get("insertTable"));
      }
      // validate the optional field `insertTableColumn`
      if (jsonObj.get("insertTableColumn") != null && !jsonObj.get("insertTableColumn").isJsonNull()) {
        InsertTableColumnRequest.validateJsonElement(jsonObj.get("insertTableColumn"));
      }
      // validate the optional field `insertTableRow`
      if (jsonObj.get("insertTableRow") != null && !jsonObj.get("insertTableRow").isJsonNull()) {
        InsertTableRowRequest.validateJsonElement(jsonObj.get("insertTableRow"));
      }
      // validate the optional field `insertText`
      if (jsonObj.get("insertText") != null && !jsonObj.get("insertText").isJsonNull()) {
        InsertTextRequest.validateJsonElement(jsonObj.get("insertText"));
      }
      // validate the optional field `mergeTableCells`
      if (jsonObj.get("mergeTableCells") != null && !jsonObj.get("mergeTableCells").isJsonNull()) {
        MergeTableCellsRequest.validateJsonElement(jsonObj.get("mergeTableCells"));
      }
      // validate the optional field `pinTableHeaderRows`
      if (jsonObj.get("pinTableHeaderRows") != null && !jsonObj.get("pinTableHeaderRows").isJsonNull()) {
        PinTableHeaderRowsRequest.validateJsonElement(jsonObj.get("pinTableHeaderRows"));
      }
      // validate the optional field `replaceAllText`
      if (jsonObj.get("replaceAllText") != null && !jsonObj.get("replaceAllText").isJsonNull()) {
        ReplaceAllTextRequest.validateJsonElement(jsonObj.get("replaceAllText"));
      }
      // validate the optional field `replaceImage`
      if (jsonObj.get("replaceImage") != null && !jsonObj.get("replaceImage").isJsonNull()) {
        ReplaceImageRequest.validateJsonElement(jsonObj.get("replaceImage"));
      }
      // validate the optional field `replaceNamedRangeContent`
      if (jsonObj.get("replaceNamedRangeContent") != null && !jsonObj.get("replaceNamedRangeContent").isJsonNull()) {
        ReplaceNamedRangeContentRequest.validateJsonElement(jsonObj.get("replaceNamedRangeContent"));
      }
      // validate the optional field `unmergeTableCells`
      if (jsonObj.get("unmergeTableCells") != null && !jsonObj.get("unmergeTableCells").isJsonNull()) {
        UnmergeTableCellsRequest.validateJsonElement(jsonObj.get("unmergeTableCells"));
      }
      // validate the optional field `updateDocumentStyle`
      if (jsonObj.get("updateDocumentStyle") != null && !jsonObj.get("updateDocumentStyle").isJsonNull()) {
        UpdateDocumentStyleRequest.validateJsonElement(jsonObj.get("updateDocumentStyle"));
      }
      // validate the optional field `updateParagraphStyle`
      if (jsonObj.get("updateParagraphStyle") != null && !jsonObj.get("updateParagraphStyle").isJsonNull()) {
        UpdateParagraphStyleRequest.validateJsonElement(jsonObj.get("updateParagraphStyle"));
      }
      // validate the optional field `updateSectionStyle`
      if (jsonObj.get("updateSectionStyle") != null && !jsonObj.get("updateSectionStyle").isJsonNull()) {
        UpdateSectionStyleRequest.validateJsonElement(jsonObj.get("updateSectionStyle"));
      }
      // validate the optional field `updateTableCellStyle`
      if (jsonObj.get("updateTableCellStyle") != null && !jsonObj.get("updateTableCellStyle").isJsonNull()) {
        UpdateTableCellStyleRequest.validateJsonElement(jsonObj.get("updateTableCellStyle"));
      }
      // validate the optional field `updateTableColumnProperties`
      if (jsonObj.get("updateTableColumnProperties") != null && !jsonObj.get("updateTableColumnProperties").isJsonNull()) {
        UpdateTableColumnPropertiesRequest.validateJsonElement(jsonObj.get("updateTableColumnProperties"));
      }
      // validate the optional field `updateTableRowStyle`
      if (jsonObj.get("updateTableRowStyle") != null && !jsonObj.get("updateTableRowStyle").isJsonNull()) {
        UpdateTableRowStyleRequest.validateJsonElement(jsonObj.get("updateTableRowStyle"));
      }
      // validate the optional field `updateTextStyle`
      if (jsonObj.get("updateTextStyle") != null && !jsonObj.get("updateTextStyle").isJsonNull()) {
        UpdateTextStyleRequest.validateJsonElement(jsonObj.get("updateTextStyle"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Request.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Request' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Request> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Request.class));

       return (TypeAdapter<T>) new TypeAdapter<Request>() {
           @Override
           public void write(JsonWriter out, Request value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Request read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Request given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Request
   * @throws IOException if the JSON string is invalid with respect to Request
   */
  public static Request fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Request.class);
  }

  /**
   * Convert an instance of Request to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

