/*
 * Google Docs API
 * Reads and writes Google Docs documents.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.NamedStyleSuggestionState;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The suggestion state of a NamedStyles message.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:47:07.584674-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class NamedStylesSuggestionState {
  public static final String SERIALIZED_NAME_STYLES_SUGGESTION_STATES = "stylesSuggestionStates";
  @SerializedName(SERIALIZED_NAME_STYLES_SUGGESTION_STATES)
  private List<NamedStyleSuggestionState> stylesSuggestionStates = new ArrayList<>();

  public NamedStylesSuggestionState() {
  }

  public NamedStylesSuggestionState stylesSuggestionStates(List<NamedStyleSuggestionState> stylesSuggestionStates) {
    this.stylesSuggestionStates = stylesSuggestionStates;
    return this;
  }

  public NamedStylesSuggestionState addStylesSuggestionStatesItem(NamedStyleSuggestionState stylesSuggestionStatesItem) {
    if (this.stylesSuggestionStates == null) {
      this.stylesSuggestionStates = new ArrayList<>();
    }
    this.stylesSuggestionStates.add(stylesSuggestionStatesItem);
    return this;
  }

  /**
   * A mask that indicates which of the fields on the corresponding NamedStyle in styles have been changed in this suggestion. The order of these named style suggestion states matches the order of the corresponding named style within the named styles suggestion.
   * @return stylesSuggestionStates
   */
  @javax.annotation.Nullable
  public List<NamedStyleSuggestionState> getStylesSuggestionStates() {
    return stylesSuggestionStates;
  }

  public void setStylesSuggestionStates(List<NamedStyleSuggestionState> stylesSuggestionStates) {
    this.stylesSuggestionStates = stylesSuggestionStates;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NamedStylesSuggestionState namedStylesSuggestionState = (NamedStylesSuggestionState) o;
    return Objects.equals(this.stylesSuggestionStates, namedStylesSuggestionState.stylesSuggestionStates);
  }

  @Override
  public int hashCode() {
    return Objects.hash(stylesSuggestionStates);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NamedStylesSuggestionState {\n");
    sb.append("    stylesSuggestionStates: ").append(toIndentedString(stylesSuggestionStates)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("stylesSuggestionStates");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NamedStylesSuggestionState
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NamedStylesSuggestionState.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NamedStylesSuggestionState is not found in the empty JSON string", NamedStylesSuggestionState.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NamedStylesSuggestionState.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NamedStylesSuggestionState` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("stylesSuggestionStates") != null && !jsonObj.get("stylesSuggestionStates").isJsonNull()) {
        JsonArray jsonArraystylesSuggestionStates = jsonObj.getAsJsonArray("stylesSuggestionStates");
        if (jsonArraystylesSuggestionStates != null) {
          // ensure the json data is an array
          if (!jsonObj.get("stylesSuggestionStates").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `stylesSuggestionStates` to be an array in the JSON string but got `%s`", jsonObj.get("stylesSuggestionStates").toString()));
          }

          // validate the optional field `stylesSuggestionStates` (array)
          for (int i = 0; i < jsonArraystylesSuggestionStates.size(); i++) {
            NamedStyleSuggestionState.validateJsonElement(jsonArraystylesSuggestionStates.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NamedStylesSuggestionState.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NamedStylesSuggestionState' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NamedStylesSuggestionState> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NamedStylesSuggestionState.class));

       return (TypeAdapter<T>) new TypeAdapter<NamedStylesSuggestionState>() {
           @Override
           public void write(JsonWriter out, NamedStylesSuggestionState value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NamedStylesSuggestionState read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NamedStylesSuggestionState given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NamedStylesSuggestionState
   * @throws IOException if the JSON string is invalid with respect to NamedStylesSuggestionState
   */
  public static NamedStylesSuggestionState fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NamedStylesSuggestionState.class);
  }

  /**
   * Convert an instance of NamedStylesSuggestionState to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

