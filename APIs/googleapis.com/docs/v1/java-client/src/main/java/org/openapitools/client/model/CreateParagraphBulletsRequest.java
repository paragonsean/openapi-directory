/*
 * Google Docs API
 * Reads and writes Google Docs documents.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Range;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Creates bullets for all of the paragraphs that overlap with the given range. The nesting level of each paragraph will be determined by counting leading tabs in front of each paragraph. To avoid excess space between the bullet and the corresponding paragraph, these leading tabs are removed by this request. This may change the indices of parts of the text. If the paragraph immediately before paragraphs being updated is in a list with a matching preset, the paragraphs being updated are added to that preceding list.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:47:07.584674-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateParagraphBulletsRequest {
  /**
   * The kinds of bullet glyphs to be used.
   */
  @JsonAdapter(BulletPresetEnum.Adapter.class)
  public enum BulletPresetEnum {
    BULLET_GLYPH_PRESET_UNSPECIFIED("BULLET_GLYPH_PRESET_UNSPECIFIED"),
    
    BULLET_DISC_CIRCLE_SQUARE("BULLET_DISC_CIRCLE_SQUARE"),
    
    BULLET_DIAMONDX_ARROW3_D_SQUARE("BULLET_DIAMONDX_ARROW3D_SQUARE"),
    
    BULLET_CHECKBOX("BULLET_CHECKBOX"),
    
    BULLET_ARROW_DIAMOND_DISC("BULLET_ARROW_DIAMOND_DISC"),
    
    BULLET_STAR_CIRCLE_SQUARE("BULLET_STAR_CIRCLE_SQUARE"),
    
    BULLET_ARROW3_D_CIRCLE_SQUARE("BULLET_ARROW3D_CIRCLE_SQUARE"),
    
    BULLET_LEFTTRIANGLE_DIAMOND_DISC("BULLET_LEFTTRIANGLE_DIAMOND_DISC"),
    
    BULLET_DIAMONDX_HOLLOWDIAMOND_SQUARE("BULLET_DIAMONDX_HOLLOWDIAMOND_SQUARE"),
    
    BULLET_DIAMOND_CIRCLE_SQUARE("BULLET_DIAMOND_CIRCLE_SQUARE"),
    
    NUMBERED_DECIMAL_ALPHA_ROMAN("NUMBERED_DECIMAL_ALPHA_ROMAN"),
    
    NUMBERED_DECIMAL_ALPHA_ROMAN_PARENS("NUMBERED_DECIMAL_ALPHA_ROMAN_PARENS"),
    
    NUMBERED_DECIMAL_NESTED("NUMBERED_DECIMAL_NESTED"),
    
    NUMBERED_UPPERALPHA_ALPHA_ROMAN("NUMBERED_UPPERALPHA_ALPHA_ROMAN"),
    
    NUMBERED_UPPERROMAN_UPPERALPHA_DECIMAL("NUMBERED_UPPERROMAN_UPPERALPHA_DECIMAL"),
    
    NUMBERED_ZERODECIMAL_ALPHA_ROMAN("NUMBERED_ZERODECIMAL_ALPHA_ROMAN");

    private String value;

    BulletPresetEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BulletPresetEnum fromValue(String value) {
      for (BulletPresetEnum b : BulletPresetEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<BulletPresetEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BulletPresetEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BulletPresetEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return BulletPresetEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      BulletPresetEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_BULLET_PRESET = "bulletPreset";
  @SerializedName(SERIALIZED_NAME_BULLET_PRESET)
  private BulletPresetEnum bulletPreset;

  public static final String SERIALIZED_NAME_RANGE = "range";
  @SerializedName(SERIALIZED_NAME_RANGE)
  private Range range;

  public CreateParagraphBulletsRequest() {
  }

  public CreateParagraphBulletsRequest bulletPreset(BulletPresetEnum bulletPreset) {
    this.bulletPreset = bulletPreset;
    return this;
  }

  /**
   * The kinds of bullet glyphs to be used.
   * @return bulletPreset
   */
  @javax.annotation.Nullable
  public BulletPresetEnum getBulletPreset() {
    return bulletPreset;
  }

  public void setBulletPreset(BulletPresetEnum bulletPreset) {
    this.bulletPreset = bulletPreset;
  }


  public CreateParagraphBulletsRequest range(Range range) {
    this.range = range;
    return this;
  }

  /**
   * Get range
   * @return range
   */
  @javax.annotation.Nullable
  public Range getRange() {
    return range;
  }

  public void setRange(Range range) {
    this.range = range;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateParagraphBulletsRequest createParagraphBulletsRequest = (CreateParagraphBulletsRequest) o;
    return Objects.equals(this.bulletPreset, createParagraphBulletsRequest.bulletPreset) &&
        Objects.equals(this.range, createParagraphBulletsRequest.range);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bulletPreset, range);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateParagraphBulletsRequest {\n");
    sb.append("    bulletPreset: ").append(toIndentedString(bulletPreset)).append("\n");
    sb.append("    range: ").append(toIndentedString(range)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bulletPreset");
    openapiFields.add("range");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateParagraphBulletsRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateParagraphBulletsRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateParagraphBulletsRequest is not found in the empty JSON string", CreateParagraphBulletsRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateParagraphBulletsRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateParagraphBulletsRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("bulletPreset") != null && !jsonObj.get("bulletPreset").isJsonNull()) && !jsonObj.get("bulletPreset").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bulletPreset` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bulletPreset").toString()));
      }
      // validate the optional field `bulletPreset`
      if (jsonObj.get("bulletPreset") != null && !jsonObj.get("bulletPreset").isJsonNull()) {
        BulletPresetEnum.validateJsonElement(jsonObj.get("bulletPreset"));
      }
      // validate the optional field `range`
      if (jsonObj.get("range") != null && !jsonObj.get("range").isJsonNull()) {
        Range.validateJsonElement(jsonObj.get("range"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateParagraphBulletsRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateParagraphBulletsRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateParagraphBulletsRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateParagraphBulletsRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateParagraphBulletsRequest>() {
           @Override
           public void write(JsonWriter out, CreateParagraphBulletsRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateParagraphBulletsRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateParagraphBulletsRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateParagraphBulletsRequest
   * @throws IOException if the JSON string is invalid with respect to CreateParagraphBulletsRequest
   */
  public static CreateParagraphBulletsRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateParagraphBulletsRequest.class);
  }

  /**
   * Convert an instance of CreateParagraphBulletsRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

