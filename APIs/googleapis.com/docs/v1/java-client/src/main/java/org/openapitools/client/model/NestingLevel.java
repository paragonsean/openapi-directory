/*
 * Google Docs API
 * Reads and writes Google Docs documents.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Dimension;
import org.openapitools.client.model.TextStyle;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contains properties describing the look and feel of a list bullet at a given level of nesting.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:47:07.584674-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class NestingLevel {
  /**
   * The alignment of the bullet within the space allotted for rendering the bullet.
   */
  @JsonAdapter(BulletAlignmentEnum.Adapter.class)
  public enum BulletAlignmentEnum {
    BULLET_ALIGNMENT_UNSPECIFIED("BULLET_ALIGNMENT_UNSPECIFIED"),
    
    START("START"),
    
    CENTER("CENTER"),
    
    END("END");

    private String value;

    BulletAlignmentEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BulletAlignmentEnum fromValue(String value) {
      for (BulletAlignmentEnum b : BulletAlignmentEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<BulletAlignmentEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BulletAlignmentEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BulletAlignmentEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return BulletAlignmentEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      BulletAlignmentEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_BULLET_ALIGNMENT = "bulletAlignment";
  @SerializedName(SERIALIZED_NAME_BULLET_ALIGNMENT)
  private BulletAlignmentEnum bulletAlignment;

  public static final String SERIALIZED_NAME_GLYPH_FORMAT = "glyphFormat";
  @SerializedName(SERIALIZED_NAME_GLYPH_FORMAT)
  private String glyphFormat;

  public static final String SERIALIZED_NAME_GLYPH_SYMBOL = "glyphSymbol";
  @SerializedName(SERIALIZED_NAME_GLYPH_SYMBOL)
  private String glyphSymbol;

  /**
   * The type of glyph used by bullets when paragraphs at this level of nesting are ordered. The glyph type determines the type of glyph used to replace placeholders within the glyph_format when paragraphs at this level of nesting are ordered. For example, if the nesting level is 0, the glyph_format is &#x60;%0.&#x60; and the glyph type is DECIMAL, then the rendered glyph would replace the placeholder &#x60;%0&#x60; in the glyph format with a number corresponding to list item&#39;s order within the list.
   */
  @JsonAdapter(GlyphTypeEnum.Adapter.class)
  public enum GlyphTypeEnum {
    GLYPH_TYPE_UNSPECIFIED("GLYPH_TYPE_UNSPECIFIED"),
    
    NONE("NONE"),
    
    DECIMAL("DECIMAL"),
    
    ZERO_DECIMAL("ZERO_DECIMAL"),
    
    UPPER_ALPHA("UPPER_ALPHA"),
    
    ALPHA("ALPHA"),
    
    UPPER_ROMAN("UPPER_ROMAN"),
    
    ROMAN("ROMAN");

    private String value;

    GlyphTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static GlyphTypeEnum fromValue(String value) {
      for (GlyphTypeEnum b : GlyphTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<GlyphTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final GlyphTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public GlyphTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return GlyphTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      GlyphTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_GLYPH_TYPE = "glyphType";
  @SerializedName(SERIALIZED_NAME_GLYPH_TYPE)
  private GlyphTypeEnum glyphType;

  public static final String SERIALIZED_NAME_INDENT_FIRST_LINE = "indentFirstLine";
  @SerializedName(SERIALIZED_NAME_INDENT_FIRST_LINE)
  private Dimension indentFirstLine;

  public static final String SERIALIZED_NAME_INDENT_START = "indentStart";
  @SerializedName(SERIALIZED_NAME_INDENT_START)
  private Dimension indentStart;

  public static final String SERIALIZED_NAME_START_NUMBER = "startNumber";
  @SerializedName(SERIALIZED_NAME_START_NUMBER)
  private Integer startNumber;

  public static final String SERIALIZED_NAME_TEXT_STYLE = "textStyle";
  @SerializedName(SERIALIZED_NAME_TEXT_STYLE)
  private TextStyle textStyle;

  public NestingLevel() {
  }

  public NestingLevel bulletAlignment(BulletAlignmentEnum bulletAlignment) {
    this.bulletAlignment = bulletAlignment;
    return this;
  }

  /**
   * The alignment of the bullet within the space allotted for rendering the bullet.
   * @return bulletAlignment
   */
  @javax.annotation.Nullable
  public BulletAlignmentEnum getBulletAlignment() {
    return bulletAlignment;
  }

  public void setBulletAlignment(BulletAlignmentEnum bulletAlignment) {
    this.bulletAlignment = bulletAlignment;
  }


  public NestingLevel glyphFormat(String glyphFormat) {
    this.glyphFormat = glyphFormat;
    return this;
  }

  /**
   * The format string used by bullets at this level of nesting. The glyph format contains one or more placeholders, and these placeholders are replaced with the appropriate values depending on the glyph_type or glyph_symbol. The placeholders follow the pattern &#x60;%[nesting_level]&#x60;. Furthermore, placeholders can have prefixes and suffixes. Thus, the glyph format follows the pattern &#x60;%[nesting_level]&#x60;. Note that the prefix and suffix are optional and can be arbitrary strings. For example, the glyph format &#x60;%0.&#x60; indicates that the rendered glyph will replace the placeholder with the corresponding glyph for nesting level 0 followed by a period as the suffix. So a list with a glyph type of UPPER_ALPHA and glyph format &#x60;%0.&#x60; at nesting level 0 will result in a list with rendered glyphs &#x60;A.&#x60; &#x60;B.&#x60; &#x60;C.&#x60; The glyph format can contain placeholders for the current nesting level as well as placeholders for parent nesting levels. For example, a list can have a glyph format of &#x60;%0.&#x60; at nesting level 0 and a glyph format of &#x60;%0.%1.&#x60; at nesting level 1. Assuming both nesting levels have DECIMAL glyph types, this would result in a list with rendered glyphs &#x60;1.&#x60; &#x60;2.&#x60; &#x60; 2.1.&#x60; &#x60; 2.2.&#x60; &#x60;3.&#x60; For nesting levels that are ordered, the string that replaces a placeholder in the glyph format for a particular paragraph depends on the paragraph&#39;s order within the list.
   * @return glyphFormat
   */
  @javax.annotation.Nullable
  public String getGlyphFormat() {
    return glyphFormat;
  }

  public void setGlyphFormat(String glyphFormat) {
    this.glyphFormat = glyphFormat;
  }


  public NestingLevel glyphSymbol(String glyphSymbol) {
    this.glyphSymbol = glyphSymbol;
    return this;
  }

  /**
   * A custom glyph symbol used by bullets when paragraphs at this level of nesting are unordered. The glyph symbol replaces placeholders within the glyph_format. For example, if the glyph_symbol is the solid circle corresponding to Unicode U+25cf code point and the glyph_format is &#x60;%0&#x60;, the rendered glyph would be the solid circle.
   * @return glyphSymbol
   */
  @javax.annotation.Nullable
  public String getGlyphSymbol() {
    return glyphSymbol;
  }

  public void setGlyphSymbol(String glyphSymbol) {
    this.glyphSymbol = glyphSymbol;
  }


  public NestingLevel glyphType(GlyphTypeEnum glyphType) {
    this.glyphType = glyphType;
    return this;
  }

  /**
   * The type of glyph used by bullets when paragraphs at this level of nesting are ordered. The glyph type determines the type of glyph used to replace placeholders within the glyph_format when paragraphs at this level of nesting are ordered. For example, if the nesting level is 0, the glyph_format is &#x60;%0.&#x60; and the glyph type is DECIMAL, then the rendered glyph would replace the placeholder &#x60;%0&#x60; in the glyph format with a number corresponding to list item&#39;s order within the list.
   * @return glyphType
   */
  @javax.annotation.Nullable
  public GlyphTypeEnum getGlyphType() {
    return glyphType;
  }

  public void setGlyphType(GlyphTypeEnum glyphType) {
    this.glyphType = glyphType;
  }


  public NestingLevel indentFirstLine(Dimension indentFirstLine) {
    this.indentFirstLine = indentFirstLine;
    return this;
  }

  /**
   * Get indentFirstLine
   * @return indentFirstLine
   */
  @javax.annotation.Nullable
  public Dimension getIndentFirstLine() {
    return indentFirstLine;
  }

  public void setIndentFirstLine(Dimension indentFirstLine) {
    this.indentFirstLine = indentFirstLine;
  }


  public NestingLevel indentStart(Dimension indentStart) {
    this.indentStart = indentStart;
    return this;
  }

  /**
   * Get indentStart
   * @return indentStart
   */
  @javax.annotation.Nullable
  public Dimension getIndentStart() {
    return indentStart;
  }

  public void setIndentStart(Dimension indentStart) {
    this.indentStart = indentStart;
  }


  public NestingLevel startNumber(Integer startNumber) {
    this.startNumber = startNumber;
    return this;
  }

  /**
   * The number of the first list item at this nesting level. A value of 0 is treated as a value of 1 for lettered lists and Roman numeral lists. For values of both 0 and 1, lettered and Roman numeral lists will begin at &#x60;a&#x60; and &#x60;i&#x60; respectively. This value is ignored for nesting levels with unordered glyphs.
   * @return startNumber
   */
  @javax.annotation.Nullable
  public Integer getStartNumber() {
    return startNumber;
  }

  public void setStartNumber(Integer startNumber) {
    this.startNumber = startNumber;
  }


  public NestingLevel textStyle(TextStyle textStyle) {
    this.textStyle = textStyle;
    return this;
  }

  /**
   * Get textStyle
   * @return textStyle
   */
  @javax.annotation.Nullable
  public TextStyle getTextStyle() {
    return textStyle;
  }

  public void setTextStyle(TextStyle textStyle) {
    this.textStyle = textStyle;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NestingLevel nestingLevel = (NestingLevel) o;
    return Objects.equals(this.bulletAlignment, nestingLevel.bulletAlignment) &&
        Objects.equals(this.glyphFormat, nestingLevel.glyphFormat) &&
        Objects.equals(this.glyphSymbol, nestingLevel.glyphSymbol) &&
        Objects.equals(this.glyphType, nestingLevel.glyphType) &&
        Objects.equals(this.indentFirstLine, nestingLevel.indentFirstLine) &&
        Objects.equals(this.indentStart, nestingLevel.indentStart) &&
        Objects.equals(this.startNumber, nestingLevel.startNumber) &&
        Objects.equals(this.textStyle, nestingLevel.textStyle);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bulletAlignment, glyphFormat, glyphSymbol, glyphType, indentFirstLine, indentStart, startNumber, textStyle);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NestingLevel {\n");
    sb.append("    bulletAlignment: ").append(toIndentedString(bulletAlignment)).append("\n");
    sb.append("    glyphFormat: ").append(toIndentedString(glyphFormat)).append("\n");
    sb.append("    glyphSymbol: ").append(toIndentedString(glyphSymbol)).append("\n");
    sb.append("    glyphType: ").append(toIndentedString(glyphType)).append("\n");
    sb.append("    indentFirstLine: ").append(toIndentedString(indentFirstLine)).append("\n");
    sb.append("    indentStart: ").append(toIndentedString(indentStart)).append("\n");
    sb.append("    startNumber: ").append(toIndentedString(startNumber)).append("\n");
    sb.append("    textStyle: ").append(toIndentedString(textStyle)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bulletAlignment");
    openapiFields.add("glyphFormat");
    openapiFields.add("glyphSymbol");
    openapiFields.add("glyphType");
    openapiFields.add("indentFirstLine");
    openapiFields.add("indentStart");
    openapiFields.add("startNumber");
    openapiFields.add("textStyle");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NestingLevel
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NestingLevel.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NestingLevel is not found in the empty JSON string", NestingLevel.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NestingLevel.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NestingLevel` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("bulletAlignment") != null && !jsonObj.get("bulletAlignment").isJsonNull()) && !jsonObj.get("bulletAlignment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bulletAlignment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bulletAlignment").toString()));
      }
      // validate the optional field `bulletAlignment`
      if (jsonObj.get("bulletAlignment") != null && !jsonObj.get("bulletAlignment").isJsonNull()) {
        BulletAlignmentEnum.validateJsonElement(jsonObj.get("bulletAlignment"));
      }
      if ((jsonObj.get("glyphFormat") != null && !jsonObj.get("glyphFormat").isJsonNull()) && !jsonObj.get("glyphFormat").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `glyphFormat` to be a primitive type in the JSON string but got `%s`", jsonObj.get("glyphFormat").toString()));
      }
      if ((jsonObj.get("glyphSymbol") != null && !jsonObj.get("glyphSymbol").isJsonNull()) && !jsonObj.get("glyphSymbol").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `glyphSymbol` to be a primitive type in the JSON string but got `%s`", jsonObj.get("glyphSymbol").toString()));
      }
      if ((jsonObj.get("glyphType") != null && !jsonObj.get("glyphType").isJsonNull()) && !jsonObj.get("glyphType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `glyphType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("glyphType").toString()));
      }
      // validate the optional field `glyphType`
      if (jsonObj.get("glyphType") != null && !jsonObj.get("glyphType").isJsonNull()) {
        GlyphTypeEnum.validateJsonElement(jsonObj.get("glyphType"));
      }
      // validate the optional field `indentFirstLine`
      if (jsonObj.get("indentFirstLine") != null && !jsonObj.get("indentFirstLine").isJsonNull()) {
        Dimension.validateJsonElement(jsonObj.get("indentFirstLine"));
      }
      // validate the optional field `indentStart`
      if (jsonObj.get("indentStart") != null && !jsonObj.get("indentStart").isJsonNull()) {
        Dimension.validateJsonElement(jsonObj.get("indentStart"));
      }
      // validate the optional field `textStyle`
      if (jsonObj.get("textStyle") != null && !jsonObj.get("textStyle").isJsonNull()) {
        TextStyle.validateJsonElement(jsonObj.get("textStyle"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NestingLevel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NestingLevel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NestingLevel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NestingLevel.class));

       return (TypeAdapter<T>) new TypeAdapter<NestingLevel>() {
           @Override
           public void write(JsonWriter out, NestingLevel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NestingLevel read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NestingLevel given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NestingLevel
   * @throws IOException if the JSON string is invalid with respect to NestingLevel
   */
  public static NestingLevel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NestingLevel.class);
  }

  /**
   * Convert an instance of NestingLevel to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

