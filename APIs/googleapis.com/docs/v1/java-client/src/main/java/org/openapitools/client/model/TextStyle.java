/*
 * Google Docs API
 * Reads and writes Google Docs documents.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Dimension;
import org.openapitools.client.model.Link;
import org.openapitools.client.model.OptionalColor;
import org.openapitools.client.model.WeightedFontFamily;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents the styling that can be applied to text. Inherited text styles are represented as unset fields in this message. A text style&#39;s parent depends on where the text style is defined: * The TextStyle of text in a Paragraph inherits from the paragraph&#39;s corresponding named style type. * The TextStyle on a named style inherits from the normal text named style. * The TextStyle of the normal text named style inherits from the default text style in the Docs editor. * The TextStyle on a Paragraph element that&#39;s contained in a table may inherit its text style from the table style. If the text style does not inherit from a parent, unsetting fields will revert the style to a value matching the defaults in the Docs editor.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:47:07.584674-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TextStyle {
  public static final String SERIALIZED_NAME_BACKGROUND_COLOR = "backgroundColor";
  @SerializedName(SERIALIZED_NAME_BACKGROUND_COLOR)
  private OptionalColor backgroundColor;

  /**
   * The text&#39;s vertical offset from its normal position. Text with &#x60;SUPERSCRIPT&#x60; or &#x60;SUBSCRIPT&#x60; baseline offsets is automatically rendered in a smaller font size, computed based on the &#x60;font_size&#x60; field. Changes in this field don&#39;t affect the &#x60;font_size&#x60;.
   */
  @JsonAdapter(BaselineOffsetEnum.Adapter.class)
  public enum BaselineOffsetEnum {
    BASELINE_OFFSET_UNSPECIFIED("BASELINE_OFFSET_UNSPECIFIED"),
    
    NONE("NONE"),
    
    SUPERSCRIPT("SUPERSCRIPT"),
    
    SUBSCRIPT("SUBSCRIPT");

    private String value;

    BaselineOffsetEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BaselineOffsetEnum fromValue(String value) {
      for (BaselineOffsetEnum b : BaselineOffsetEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<BaselineOffsetEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BaselineOffsetEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BaselineOffsetEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return BaselineOffsetEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      BaselineOffsetEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_BASELINE_OFFSET = "baselineOffset";
  @SerializedName(SERIALIZED_NAME_BASELINE_OFFSET)
  private BaselineOffsetEnum baselineOffset;

  public static final String SERIALIZED_NAME_BOLD = "bold";
  @SerializedName(SERIALIZED_NAME_BOLD)
  private Boolean bold;

  public static final String SERIALIZED_NAME_FONT_SIZE = "fontSize";
  @SerializedName(SERIALIZED_NAME_FONT_SIZE)
  private Dimension fontSize;

  public static final String SERIALIZED_NAME_FOREGROUND_COLOR = "foregroundColor";
  @SerializedName(SERIALIZED_NAME_FOREGROUND_COLOR)
  private OptionalColor foregroundColor;

  public static final String SERIALIZED_NAME_ITALIC = "italic";
  @SerializedName(SERIALIZED_NAME_ITALIC)
  private Boolean italic;

  public static final String SERIALIZED_NAME_LINK = "link";
  @SerializedName(SERIALIZED_NAME_LINK)
  private Link link;

  public static final String SERIALIZED_NAME_SMALL_CAPS = "smallCaps";
  @SerializedName(SERIALIZED_NAME_SMALL_CAPS)
  private Boolean smallCaps;

  public static final String SERIALIZED_NAME_STRIKETHROUGH = "strikethrough";
  @SerializedName(SERIALIZED_NAME_STRIKETHROUGH)
  private Boolean strikethrough;

  public static final String SERIALIZED_NAME_UNDERLINE = "underline";
  @SerializedName(SERIALIZED_NAME_UNDERLINE)
  private Boolean underline;

  public static final String SERIALIZED_NAME_WEIGHTED_FONT_FAMILY = "weightedFontFamily";
  @SerializedName(SERIALIZED_NAME_WEIGHTED_FONT_FAMILY)
  private WeightedFontFamily weightedFontFamily;

  public TextStyle() {
  }

  public TextStyle backgroundColor(OptionalColor backgroundColor) {
    this.backgroundColor = backgroundColor;
    return this;
  }

  /**
   * Get backgroundColor
   * @return backgroundColor
   */
  @javax.annotation.Nullable
  public OptionalColor getBackgroundColor() {
    return backgroundColor;
  }

  public void setBackgroundColor(OptionalColor backgroundColor) {
    this.backgroundColor = backgroundColor;
  }


  public TextStyle baselineOffset(BaselineOffsetEnum baselineOffset) {
    this.baselineOffset = baselineOffset;
    return this;
  }

  /**
   * The text&#39;s vertical offset from its normal position. Text with &#x60;SUPERSCRIPT&#x60; or &#x60;SUBSCRIPT&#x60; baseline offsets is automatically rendered in a smaller font size, computed based on the &#x60;font_size&#x60; field. Changes in this field don&#39;t affect the &#x60;font_size&#x60;.
   * @return baselineOffset
   */
  @javax.annotation.Nullable
  public BaselineOffsetEnum getBaselineOffset() {
    return baselineOffset;
  }

  public void setBaselineOffset(BaselineOffsetEnum baselineOffset) {
    this.baselineOffset = baselineOffset;
  }


  public TextStyle bold(Boolean bold) {
    this.bold = bold;
    return this;
  }

  /**
   * Whether or not the text is rendered as bold.
   * @return bold
   */
  @javax.annotation.Nullable
  public Boolean getBold() {
    return bold;
  }

  public void setBold(Boolean bold) {
    this.bold = bold;
  }


  public TextStyle fontSize(Dimension fontSize) {
    this.fontSize = fontSize;
    return this;
  }

  /**
   * Get fontSize
   * @return fontSize
   */
  @javax.annotation.Nullable
  public Dimension getFontSize() {
    return fontSize;
  }

  public void setFontSize(Dimension fontSize) {
    this.fontSize = fontSize;
  }


  public TextStyle foregroundColor(OptionalColor foregroundColor) {
    this.foregroundColor = foregroundColor;
    return this;
  }

  /**
   * Get foregroundColor
   * @return foregroundColor
   */
  @javax.annotation.Nullable
  public OptionalColor getForegroundColor() {
    return foregroundColor;
  }

  public void setForegroundColor(OptionalColor foregroundColor) {
    this.foregroundColor = foregroundColor;
  }


  public TextStyle italic(Boolean italic) {
    this.italic = italic;
    return this;
  }

  /**
   * Whether or not the text is italicized.
   * @return italic
   */
  @javax.annotation.Nullable
  public Boolean getItalic() {
    return italic;
  }

  public void setItalic(Boolean italic) {
    this.italic = italic;
  }


  public TextStyle link(Link link) {
    this.link = link;
    return this;
  }

  /**
   * Get link
   * @return link
   */
  @javax.annotation.Nullable
  public Link getLink() {
    return link;
  }

  public void setLink(Link link) {
    this.link = link;
  }


  public TextStyle smallCaps(Boolean smallCaps) {
    this.smallCaps = smallCaps;
    return this;
  }

  /**
   * Whether or not the text is in small capital letters.
   * @return smallCaps
   */
  @javax.annotation.Nullable
  public Boolean getSmallCaps() {
    return smallCaps;
  }

  public void setSmallCaps(Boolean smallCaps) {
    this.smallCaps = smallCaps;
  }


  public TextStyle strikethrough(Boolean strikethrough) {
    this.strikethrough = strikethrough;
    return this;
  }

  /**
   * Whether or not the text is struck through.
   * @return strikethrough
   */
  @javax.annotation.Nullable
  public Boolean getStrikethrough() {
    return strikethrough;
  }

  public void setStrikethrough(Boolean strikethrough) {
    this.strikethrough = strikethrough;
  }


  public TextStyle underline(Boolean underline) {
    this.underline = underline;
    return this;
  }

  /**
   * Whether or not the text is underlined.
   * @return underline
   */
  @javax.annotation.Nullable
  public Boolean getUnderline() {
    return underline;
  }

  public void setUnderline(Boolean underline) {
    this.underline = underline;
  }


  public TextStyle weightedFontFamily(WeightedFontFamily weightedFontFamily) {
    this.weightedFontFamily = weightedFontFamily;
    return this;
  }

  /**
   * Get weightedFontFamily
   * @return weightedFontFamily
   */
  @javax.annotation.Nullable
  public WeightedFontFamily getWeightedFontFamily() {
    return weightedFontFamily;
  }

  public void setWeightedFontFamily(WeightedFontFamily weightedFontFamily) {
    this.weightedFontFamily = weightedFontFamily;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TextStyle textStyle = (TextStyle) o;
    return Objects.equals(this.backgroundColor, textStyle.backgroundColor) &&
        Objects.equals(this.baselineOffset, textStyle.baselineOffset) &&
        Objects.equals(this.bold, textStyle.bold) &&
        Objects.equals(this.fontSize, textStyle.fontSize) &&
        Objects.equals(this.foregroundColor, textStyle.foregroundColor) &&
        Objects.equals(this.italic, textStyle.italic) &&
        Objects.equals(this.link, textStyle.link) &&
        Objects.equals(this.smallCaps, textStyle.smallCaps) &&
        Objects.equals(this.strikethrough, textStyle.strikethrough) &&
        Objects.equals(this.underline, textStyle.underline) &&
        Objects.equals(this.weightedFontFamily, textStyle.weightedFontFamily);
  }

  @Override
  public int hashCode() {
    return Objects.hash(backgroundColor, baselineOffset, bold, fontSize, foregroundColor, italic, link, smallCaps, strikethrough, underline, weightedFontFamily);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TextStyle {\n");
    sb.append("    backgroundColor: ").append(toIndentedString(backgroundColor)).append("\n");
    sb.append("    baselineOffset: ").append(toIndentedString(baselineOffset)).append("\n");
    sb.append("    bold: ").append(toIndentedString(bold)).append("\n");
    sb.append("    fontSize: ").append(toIndentedString(fontSize)).append("\n");
    sb.append("    foregroundColor: ").append(toIndentedString(foregroundColor)).append("\n");
    sb.append("    italic: ").append(toIndentedString(italic)).append("\n");
    sb.append("    link: ").append(toIndentedString(link)).append("\n");
    sb.append("    smallCaps: ").append(toIndentedString(smallCaps)).append("\n");
    sb.append("    strikethrough: ").append(toIndentedString(strikethrough)).append("\n");
    sb.append("    underline: ").append(toIndentedString(underline)).append("\n");
    sb.append("    weightedFontFamily: ").append(toIndentedString(weightedFontFamily)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("backgroundColor");
    openapiFields.add("baselineOffset");
    openapiFields.add("bold");
    openapiFields.add("fontSize");
    openapiFields.add("foregroundColor");
    openapiFields.add("italic");
    openapiFields.add("link");
    openapiFields.add("smallCaps");
    openapiFields.add("strikethrough");
    openapiFields.add("underline");
    openapiFields.add("weightedFontFamily");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TextStyle
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TextStyle.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TextStyle is not found in the empty JSON string", TextStyle.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TextStyle.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TextStyle` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `backgroundColor`
      if (jsonObj.get("backgroundColor") != null && !jsonObj.get("backgroundColor").isJsonNull()) {
        OptionalColor.validateJsonElement(jsonObj.get("backgroundColor"));
      }
      if ((jsonObj.get("baselineOffset") != null && !jsonObj.get("baselineOffset").isJsonNull()) && !jsonObj.get("baselineOffset").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `baselineOffset` to be a primitive type in the JSON string but got `%s`", jsonObj.get("baselineOffset").toString()));
      }
      // validate the optional field `baselineOffset`
      if (jsonObj.get("baselineOffset") != null && !jsonObj.get("baselineOffset").isJsonNull()) {
        BaselineOffsetEnum.validateJsonElement(jsonObj.get("baselineOffset"));
      }
      // validate the optional field `fontSize`
      if (jsonObj.get("fontSize") != null && !jsonObj.get("fontSize").isJsonNull()) {
        Dimension.validateJsonElement(jsonObj.get("fontSize"));
      }
      // validate the optional field `foregroundColor`
      if (jsonObj.get("foregroundColor") != null && !jsonObj.get("foregroundColor").isJsonNull()) {
        OptionalColor.validateJsonElement(jsonObj.get("foregroundColor"));
      }
      // validate the optional field `link`
      if (jsonObj.get("link") != null && !jsonObj.get("link").isJsonNull()) {
        Link.validateJsonElement(jsonObj.get("link"));
      }
      // validate the optional field `weightedFontFamily`
      if (jsonObj.get("weightedFontFamily") != null && !jsonObj.get("weightedFontFamily").isJsonNull()) {
        WeightedFontFamily.validateJsonElement(jsonObj.get("weightedFontFamily"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TextStyle.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TextStyle' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TextStyle> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TextStyle.class));

       return (TypeAdapter<T>) new TypeAdapter<TextStyle>() {
           @Override
           public void write(JsonWriter out, TextStyle value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TextStyle read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TextStyle given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TextStyle
   * @throws IOException if the JSON string is invalid with respect to TextStyle
   */
  public static TextStyle fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TextStyle.class);
  }

  /**
   * Convert an instance of TextStyle to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

