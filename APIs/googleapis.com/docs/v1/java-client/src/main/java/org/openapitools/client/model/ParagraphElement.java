/*
 * Google Docs API
 * Reads and writes Google Docs documents.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AutoText;
import org.openapitools.client.model.ColumnBreak;
import org.openapitools.client.model.Equation;
import org.openapitools.client.model.FootnoteReference;
import org.openapitools.client.model.HorizontalRule;
import org.openapitools.client.model.InlineObjectElement;
import org.openapitools.client.model.PageBreak;
import org.openapitools.client.model.Person;
import org.openapitools.client.model.RichLink;
import org.openapitools.client.model.TextRun;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A ParagraphElement describes content within a Paragraph.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:47:07.584674-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ParagraphElement {
  public static final String SERIALIZED_NAME_AUTO_TEXT = "autoText";
  @SerializedName(SERIALIZED_NAME_AUTO_TEXT)
  private AutoText autoText;

  public static final String SERIALIZED_NAME_COLUMN_BREAK = "columnBreak";
  @SerializedName(SERIALIZED_NAME_COLUMN_BREAK)
  private ColumnBreak columnBreak;

  public static final String SERIALIZED_NAME_END_INDEX = "endIndex";
  @SerializedName(SERIALIZED_NAME_END_INDEX)
  private Integer endIndex;

  public static final String SERIALIZED_NAME_EQUATION = "equation";
  @SerializedName(SERIALIZED_NAME_EQUATION)
  private Equation equation;

  public static final String SERIALIZED_NAME_FOOTNOTE_REFERENCE = "footnoteReference";
  @SerializedName(SERIALIZED_NAME_FOOTNOTE_REFERENCE)
  private FootnoteReference footnoteReference;

  public static final String SERIALIZED_NAME_HORIZONTAL_RULE = "horizontalRule";
  @SerializedName(SERIALIZED_NAME_HORIZONTAL_RULE)
  private HorizontalRule horizontalRule;

  public static final String SERIALIZED_NAME_INLINE_OBJECT_ELEMENT = "inlineObjectElement";
  @SerializedName(SERIALIZED_NAME_INLINE_OBJECT_ELEMENT)
  private InlineObjectElement inlineObjectElement;

  public static final String SERIALIZED_NAME_PAGE_BREAK = "pageBreak";
  @SerializedName(SERIALIZED_NAME_PAGE_BREAK)
  private PageBreak pageBreak;

  public static final String SERIALIZED_NAME_PERSON = "person";
  @SerializedName(SERIALIZED_NAME_PERSON)
  private Person person;

  public static final String SERIALIZED_NAME_RICH_LINK = "richLink";
  @SerializedName(SERIALIZED_NAME_RICH_LINK)
  private RichLink richLink;

  public static final String SERIALIZED_NAME_START_INDEX = "startIndex";
  @SerializedName(SERIALIZED_NAME_START_INDEX)
  private Integer startIndex;

  public static final String SERIALIZED_NAME_TEXT_RUN = "textRun";
  @SerializedName(SERIALIZED_NAME_TEXT_RUN)
  private TextRun textRun;

  public ParagraphElement() {
  }

  public ParagraphElement autoText(AutoText autoText) {
    this.autoText = autoText;
    return this;
  }

  /**
   * Get autoText
   * @return autoText
   */
  @javax.annotation.Nullable
  public AutoText getAutoText() {
    return autoText;
  }

  public void setAutoText(AutoText autoText) {
    this.autoText = autoText;
  }


  public ParagraphElement columnBreak(ColumnBreak columnBreak) {
    this.columnBreak = columnBreak;
    return this;
  }

  /**
   * Get columnBreak
   * @return columnBreak
   */
  @javax.annotation.Nullable
  public ColumnBreak getColumnBreak() {
    return columnBreak;
  }

  public void setColumnBreak(ColumnBreak columnBreak) {
    this.columnBreak = columnBreak;
  }


  public ParagraphElement endIndex(Integer endIndex) {
    this.endIndex = endIndex;
    return this;
  }

  /**
   * The zero-base end index of this paragraph element, exclusive, in UTF-16 code units.
   * @return endIndex
   */
  @javax.annotation.Nullable
  public Integer getEndIndex() {
    return endIndex;
  }

  public void setEndIndex(Integer endIndex) {
    this.endIndex = endIndex;
  }


  public ParagraphElement equation(Equation equation) {
    this.equation = equation;
    return this;
  }

  /**
   * Get equation
   * @return equation
   */
  @javax.annotation.Nullable
  public Equation getEquation() {
    return equation;
  }

  public void setEquation(Equation equation) {
    this.equation = equation;
  }


  public ParagraphElement footnoteReference(FootnoteReference footnoteReference) {
    this.footnoteReference = footnoteReference;
    return this;
  }

  /**
   * Get footnoteReference
   * @return footnoteReference
   */
  @javax.annotation.Nullable
  public FootnoteReference getFootnoteReference() {
    return footnoteReference;
  }

  public void setFootnoteReference(FootnoteReference footnoteReference) {
    this.footnoteReference = footnoteReference;
  }


  public ParagraphElement horizontalRule(HorizontalRule horizontalRule) {
    this.horizontalRule = horizontalRule;
    return this;
  }

  /**
   * Get horizontalRule
   * @return horizontalRule
   */
  @javax.annotation.Nullable
  public HorizontalRule getHorizontalRule() {
    return horizontalRule;
  }

  public void setHorizontalRule(HorizontalRule horizontalRule) {
    this.horizontalRule = horizontalRule;
  }


  public ParagraphElement inlineObjectElement(InlineObjectElement inlineObjectElement) {
    this.inlineObjectElement = inlineObjectElement;
    return this;
  }

  /**
   * Get inlineObjectElement
   * @return inlineObjectElement
   */
  @javax.annotation.Nullable
  public InlineObjectElement getInlineObjectElement() {
    return inlineObjectElement;
  }

  public void setInlineObjectElement(InlineObjectElement inlineObjectElement) {
    this.inlineObjectElement = inlineObjectElement;
  }


  public ParagraphElement pageBreak(PageBreak pageBreak) {
    this.pageBreak = pageBreak;
    return this;
  }

  /**
   * Get pageBreak
   * @return pageBreak
   */
  @javax.annotation.Nullable
  public PageBreak getPageBreak() {
    return pageBreak;
  }

  public void setPageBreak(PageBreak pageBreak) {
    this.pageBreak = pageBreak;
  }


  public ParagraphElement person(Person person) {
    this.person = person;
    return this;
  }

  /**
   * Get person
   * @return person
   */
  @javax.annotation.Nullable
  public Person getPerson() {
    return person;
  }

  public void setPerson(Person person) {
    this.person = person;
  }


  public ParagraphElement richLink(RichLink richLink) {
    this.richLink = richLink;
    return this;
  }

  /**
   * Get richLink
   * @return richLink
   */
  @javax.annotation.Nullable
  public RichLink getRichLink() {
    return richLink;
  }

  public void setRichLink(RichLink richLink) {
    this.richLink = richLink;
  }


  public ParagraphElement startIndex(Integer startIndex) {
    this.startIndex = startIndex;
    return this;
  }

  /**
   * The zero-based start index of this paragraph element, in UTF-16 code units.
   * @return startIndex
   */
  @javax.annotation.Nullable
  public Integer getStartIndex() {
    return startIndex;
  }

  public void setStartIndex(Integer startIndex) {
    this.startIndex = startIndex;
  }


  public ParagraphElement textRun(TextRun textRun) {
    this.textRun = textRun;
    return this;
  }

  /**
   * Get textRun
   * @return textRun
   */
  @javax.annotation.Nullable
  public TextRun getTextRun() {
    return textRun;
  }

  public void setTextRun(TextRun textRun) {
    this.textRun = textRun;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ParagraphElement paragraphElement = (ParagraphElement) o;
    return Objects.equals(this.autoText, paragraphElement.autoText) &&
        Objects.equals(this.columnBreak, paragraphElement.columnBreak) &&
        Objects.equals(this.endIndex, paragraphElement.endIndex) &&
        Objects.equals(this.equation, paragraphElement.equation) &&
        Objects.equals(this.footnoteReference, paragraphElement.footnoteReference) &&
        Objects.equals(this.horizontalRule, paragraphElement.horizontalRule) &&
        Objects.equals(this.inlineObjectElement, paragraphElement.inlineObjectElement) &&
        Objects.equals(this.pageBreak, paragraphElement.pageBreak) &&
        Objects.equals(this.person, paragraphElement.person) &&
        Objects.equals(this.richLink, paragraphElement.richLink) &&
        Objects.equals(this.startIndex, paragraphElement.startIndex) &&
        Objects.equals(this.textRun, paragraphElement.textRun);
  }

  @Override
  public int hashCode() {
    return Objects.hash(autoText, columnBreak, endIndex, equation, footnoteReference, horizontalRule, inlineObjectElement, pageBreak, person, richLink, startIndex, textRun);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ParagraphElement {\n");
    sb.append("    autoText: ").append(toIndentedString(autoText)).append("\n");
    sb.append("    columnBreak: ").append(toIndentedString(columnBreak)).append("\n");
    sb.append("    endIndex: ").append(toIndentedString(endIndex)).append("\n");
    sb.append("    equation: ").append(toIndentedString(equation)).append("\n");
    sb.append("    footnoteReference: ").append(toIndentedString(footnoteReference)).append("\n");
    sb.append("    horizontalRule: ").append(toIndentedString(horizontalRule)).append("\n");
    sb.append("    inlineObjectElement: ").append(toIndentedString(inlineObjectElement)).append("\n");
    sb.append("    pageBreak: ").append(toIndentedString(pageBreak)).append("\n");
    sb.append("    person: ").append(toIndentedString(person)).append("\n");
    sb.append("    richLink: ").append(toIndentedString(richLink)).append("\n");
    sb.append("    startIndex: ").append(toIndentedString(startIndex)).append("\n");
    sb.append("    textRun: ").append(toIndentedString(textRun)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("autoText");
    openapiFields.add("columnBreak");
    openapiFields.add("endIndex");
    openapiFields.add("equation");
    openapiFields.add("footnoteReference");
    openapiFields.add("horizontalRule");
    openapiFields.add("inlineObjectElement");
    openapiFields.add("pageBreak");
    openapiFields.add("person");
    openapiFields.add("richLink");
    openapiFields.add("startIndex");
    openapiFields.add("textRun");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ParagraphElement
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ParagraphElement.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ParagraphElement is not found in the empty JSON string", ParagraphElement.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ParagraphElement.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ParagraphElement` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `autoText`
      if (jsonObj.get("autoText") != null && !jsonObj.get("autoText").isJsonNull()) {
        AutoText.validateJsonElement(jsonObj.get("autoText"));
      }
      // validate the optional field `columnBreak`
      if (jsonObj.get("columnBreak") != null && !jsonObj.get("columnBreak").isJsonNull()) {
        ColumnBreak.validateJsonElement(jsonObj.get("columnBreak"));
      }
      // validate the optional field `equation`
      if (jsonObj.get("equation") != null && !jsonObj.get("equation").isJsonNull()) {
        Equation.validateJsonElement(jsonObj.get("equation"));
      }
      // validate the optional field `footnoteReference`
      if (jsonObj.get("footnoteReference") != null && !jsonObj.get("footnoteReference").isJsonNull()) {
        FootnoteReference.validateJsonElement(jsonObj.get("footnoteReference"));
      }
      // validate the optional field `horizontalRule`
      if (jsonObj.get("horizontalRule") != null && !jsonObj.get("horizontalRule").isJsonNull()) {
        HorizontalRule.validateJsonElement(jsonObj.get("horizontalRule"));
      }
      // validate the optional field `inlineObjectElement`
      if (jsonObj.get("inlineObjectElement") != null && !jsonObj.get("inlineObjectElement").isJsonNull()) {
        InlineObjectElement.validateJsonElement(jsonObj.get("inlineObjectElement"));
      }
      // validate the optional field `pageBreak`
      if (jsonObj.get("pageBreak") != null && !jsonObj.get("pageBreak").isJsonNull()) {
        PageBreak.validateJsonElement(jsonObj.get("pageBreak"));
      }
      // validate the optional field `person`
      if (jsonObj.get("person") != null && !jsonObj.get("person").isJsonNull()) {
        Person.validateJsonElement(jsonObj.get("person"));
      }
      // validate the optional field `richLink`
      if (jsonObj.get("richLink") != null && !jsonObj.get("richLink").isJsonNull()) {
        RichLink.validateJsonElement(jsonObj.get("richLink"));
      }
      // validate the optional field `textRun`
      if (jsonObj.get("textRun") != null && !jsonObj.get("textRun").isJsonNull()) {
        TextRun.validateJsonElement(jsonObj.get("textRun"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ParagraphElement.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ParagraphElement' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ParagraphElement> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ParagraphElement.class));

       return (TypeAdapter<T>) new TypeAdapter<ParagraphElement>() {
           @Override
           public void write(JsonWriter out, ParagraphElement value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ParagraphElement read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ParagraphElement given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ParagraphElement
   * @throws IOException if the JSON string is invalid with respect to ParagraphElement
   */
  public static ParagraphElement fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ParagraphElement.class);
  }

  /**
   * Convert an instance of ParagraphElement to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

