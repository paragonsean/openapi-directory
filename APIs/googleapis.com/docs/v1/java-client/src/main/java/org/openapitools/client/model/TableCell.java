/*
 * Google Docs API
 * Reads and writes Google Docs documents.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.StructuralElement;
import org.openapitools.client.model.SuggestedTableCellStyle;
import org.openapitools.client.model.TableCellStyle;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The contents and style of a cell in a Table.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:47:07.584674-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TableCell {
  public static final String SERIALIZED_NAME_CONTENT = "content";
  @SerializedName(SERIALIZED_NAME_CONTENT)
  private List<StructuralElement> content = new ArrayList<>();

  public static final String SERIALIZED_NAME_END_INDEX = "endIndex";
  @SerializedName(SERIALIZED_NAME_END_INDEX)
  private Integer endIndex;

  public static final String SERIALIZED_NAME_START_INDEX = "startIndex";
  @SerializedName(SERIALIZED_NAME_START_INDEX)
  private Integer startIndex;

  public static final String SERIALIZED_NAME_SUGGESTED_DELETION_IDS = "suggestedDeletionIds";
  @SerializedName(SERIALIZED_NAME_SUGGESTED_DELETION_IDS)
  private List<String> suggestedDeletionIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_SUGGESTED_INSERTION_IDS = "suggestedInsertionIds";
  @SerializedName(SERIALIZED_NAME_SUGGESTED_INSERTION_IDS)
  private List<String> suggestedInsertionIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_SUGGESTED_TABLE_CELL_STYLE_CHANGES = "suggestedTableCellStyleChanges";
  @SerializedName(SERIALIZED_NAME_SUGGESTED_TABLE_CELL_STYLE_CHANGES)
  private Map<String, SuggestedTableCellStyle> suggestedTableCellStyleChanges = new HashMap<>();

  public static final String SERIALIZED_NAME_TABLE_CELL_STYLE = "tableCellStyle";
  @SerializedName(SERIALIZED_NAME_TABLE_CELL_STYLE)
  private TableCellStyle tableCellStyle;

  public TableCell() {
  }

  public TableCell content(List<StructuralElement> content) {
    this.content = content;
    return this;
  }

  public TableCell addContentItem(StructuralElement contentItem) {
    if (this.content == null) {
      this.content = new ArrayList<>();
    }
    this.content.add(contentItem);
    return this;
  }

  /**
   * The content of the cell.
   * @return content
   */
  @javax.annotation.Nullable
  public List<StructuralElement> getContent() {
    return content;
  }

  public void setContent(List<StructuralElement> content) {
    this.content = content;
  }


  public TableCell endIndex(Integer endIndex) {
    this.endIndex = endIndex;
    return this;
  }

  /**
   * The zero-based end index of this cell, exclusive, in UTF-16 code units.
   * @return endIndex
   */
  @javax.annotation.Nullable
  public Integer getEndIndex() {
    return endIndex;
  }

  public void setEndIndex(Integer endIndex) {
    this.endIndex = endIndex;
  }


  public TableCell startIndex(Integer startIndex) {
    this.startIndex = startIndex;
    return this;
  }

  /**
   * The zero-based start index of this cell, in UTF-16 code units.
   * @return startIndex
   */
  @javax.annotation.Nullable
  public Integer getStartIndex() {
    return startIndex;
  }

  public void setStartIndex(Integer startIndex) {
    this.startIndex = startIndex;
  }


  public TableCell suggestedDeletionIds(List<String> suggestedDeletionIds) {
    this.suggestedDeletionIds = suggestedDeletionIds;
    return this;
  }

  public TableCell addSuggestedDeletionIdsItem(String suggestedDeletionIdsItem) {
    if (this.suggestedDeletionIds == null) {
      this.suggestedDeletionIds = new ArrayList<>();
    }
    this.suggestedDeletionIds.add(suggestedDeletionIdsItem);
    return this;
  }

  /**
   * The suggested deletion IDs. If empty, then there are no suggested deletions of this content.
   * @return suggestedDeletionIds
   */
  @javax.annotation.Nullable
  public List<String> getSuggestedDeletionIds() {
    return suggestedDeletionIds;
  }

  public void setSuggestedDeletionIds(List<String> suggestedDeletionIds) {
    this.suggestedDeletionIds = suggestedDeletionIds;
  }


  public TableCell suggestedInsertionIds(List<String> suggestedInsertionIds) {
    this.suggestedInsertionIds = suggestedInsertionIds;
    return this;
  }

  public TableCell addSuggestedInsertionIdsItem(String suggestedInsertionIdsItem) {
    if (this.suggestedInsertionIds == null) {
      this.suggestedInsertionIds = new ArrayList<>();
    }
    this.suggestedInsertionIds.add(suggestedInsertionIdsItem);
    return this;
  }

  /**
   * The suggested insertion IDs. A TableCell may have multiple insertion IDs if it&#39;s a nested suggested change. If empty, then this is not a suggested insertion.
   * @return suggestedInsertionIds
   */
  @javax.annotation.Nullable
  public List<String> getSuggestedInsertionIds() {
    return suggestedInsertionIds;
  }

  public void setSuggestedInsertionIds(List<String> suggestedInsertionIds) {
    this.suggestedInsertionIds = suggestedInsertionIds;
  }


  public TableCell suggestedTableCellStyleChanges(Map<String, SuggestedTableCellStyle> suggestedTableCellStyleChanges) {
    this.suggestedTableCellStyleChanges = suggestedTableCellStyleChanges;
    return this;
  }

  public TableCell putSuggestedTableCellStyleChangesItem(String key, SuggestedTableCellStyle suggestedTableCellStyleChangesItem) {
    if (this.suggestedTableCellStyleChanges == null) {
      this.suggestedTableCellStyleChanges = new HashMap<>();
    }
    this.suggestedTableCellStyleChanges.put(key, suggestedTableCellStyleChangesItem);
    return this;
  }

  /**
   * The suggested changes to the table cell style, keyed by suggestion ID.
   * @return suggestedTableCellStyleChanges
   */
  @javax.annotation.Nullable
  public Map<String, SuggestedTableCellStyle> getSuggestedTableCellStyleChanges() {
    return suggestedTableCellStyleChanges;
  }

  public void setSuggestedTableCellStyleChanges(Map<String, SuggestedTableCellStyle> suggestedTableCellStyleChanges) {
    this.suggestedTableCellStyleChanges = suggestedTableCellStyleChanges;
  }


  public TableCell tableCellStyle(TableCellStyle tableCellStyle) {
    this.tableCellStyle = tableCellStyle;
    return this;
  }

  /**
   * Get tableCellStyle
   * @return tableCellStyle
   */
  @javax.annotation.Nullable
  public TableCellStyle getTableCellStyle() {
    return tableCellStyle;
  }

  public void setTableCellStyle(TableCellStyle tableCellStyle) {
    this.tableCellStyle = tableCellStyle;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TableCell tableCell = (TableCell) o;
    return Objects.equals(this.content, tableCell.content) &&
        Objects.equals(this.endIndex, tableCell.endIndex) &&
        Objects.equals(this.startIndex, tableCell.startIndex) &&
        Objects.equals(this.suggestedDeletionIds, tableCell.suggestedDeletionIds) &&
        Objects.equals(this.suggestedInsertionIds, tableCell.suggestedInsertionIds) &&
        Objects.equals(this.suggestedTableCellStyleChanges, tableCell.suggestedTableCellStyleChanges) &&
        Objects.equals(this.tableCellStyle, tableCell.tableCellStyle);
  }

  @Override
  public int hashCode() {
    return Objects.hash(content, endIndex, startIndex, suggestedDeletionIds, suggestedInsertionIds, suggestedTableCellStyleChanges, tableCellStyle);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TableCell {\n");
    sb.append("    content: ").append(toIndentedString(content)).append("\n");
    sb.append("    endIndex: ").append(toIndentedString(endIndex)).append("\n");
    sb.append("    startIndex: ").append(toIndentedString(startIndex)).append("\n");
    sb.append("    suggestedDeletionIds: ").append(toIndentedString(suggestedDeletionIds)).append("\n");
    sb.append("    suggestedInsertionIds: ").append(toIndentedString(suggestedInsertionIds)).append("\n");
    sb.append("    suggestedTableCellStyleChanges: ").append(toIndentedString(suggestedTableCellStyleChanges)).append("\n");
    sb.append("    tableCellStyle: ").append(toIndentedString(tableCellStyle)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("content");
    openapiFields.add("endIndex");
    openapiFields.add("startIndex");
    openapiFields.add("suggestedDeletionIds");
    openapiFields.add("suggestedInsertionIds");
    openapiFields.add("suggestedTableCellStyleChanges");
    openapiFields.add("tableCellStyle");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TableCell
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TableCell.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TableCell is not found in the empty JSON string", TableCell.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TableCell.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TableCell` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("content") != null && !jsonObj.get("content").isJsonNull()) {
        JsonArray jsonArraycontent = jsonObj.getAsJsonArray("content");
        if (jsonArraycontent != null) {
          // ensure the json data is an array
          if (!jsonObj.get("content").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `content` to be an array in the JSON string but got `%s`", jsonObj.get("content").toString()));
          }

          // validate the optional field `content` (array)
          for (int i = 0; i < jsonArraycontent.size(); i++) {
            StructuralElement.validateJsonElement(jsonArraycontent.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("suggestedDeletionIds") != null && !jsonObj.get("suggestedDeletionIds").isJsonNull() && !jsonObj.get("suggestedDeletionIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `suggestedDeletionIds` to be an array in the JSON string but got `%s`", jsonObj.get("suggestedDeletionIds").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("suggestedInsertionIds") != null && !jsonObj.get("suggestedInsertionIds").isJsonNull() && !jsonObj.get("suggestedInsertionIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `suggestedInsertionIds` to be an array in the JSON string but got `%s`", jsonObj.get("suggestedInsertionIds").toString()));
      }
      // validate the optional field `tableCellStyle`
      if (jsonObj.get("tableCellStyle") != null && !jsonObj.get("tableCellStyle").isJsonNull()) {
        TableCellStyle.validateJsonElement(jsonObj.get("tableCellStyle"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TableCell.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TableCell' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TableCell> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TableCell.class));

       return (TypeAdapter<T>) new TypeAdapter<TableCell>() {
           @Override
           public void write(JsonWriter out, TableCell value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TableCell read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TableCell given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TableCell
   * @throws IOException if the JSON string is invalid with respect to TableCell
   */
  public static TableCell fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TableCell.class);
  }

  /**
   * Convert an instance of TableCell to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

