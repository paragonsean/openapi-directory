/*
 * Google Docs API
 * Reads and writes Google Docs documents.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CreateFooterResponse;
import org.openapitools.client.model.CreateFootnoteResponse;
import org.openapitools.client.model.CreateHeaderResponse;
import org.openapitools.client.model.CreateNamedRangeResponse;
import org.openapitools.client.model.InsertInlineImageResponse;
import org.openapitools.client.model.InsertInlineSheetsChartResponse;
import org.openapitools.client.model.ReplaceAllTextResponse;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A single response from an update.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:47:07.584674-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Response {
  public static final String SERIALIZED_NAME_CREATE_FOOTER = "createFooter";
  @SerializedName(SERIALIZED_NAME_CREATE_FOOTER)
  private CreateFooterResponse createFooter;

  public static final String SERIALIZED_NAME_CREATE_FOOTNOTE = "createFootnote";
  @SerializedName(SERIALIZED_NAME_CREATE_FOOTNOTE)
  private CreateFootnoteResponse createFootnote;

  public static final String SERIALIZED_NAME_CREATE_HEADER = "createHeader";
  @SerializedName(SERIALIZED_NAME_CREATE_HEADER)
  private CreateHeaderResponse createHeader;

  public static final String SERIALIZED_NAME_CREATE_NAMED_RANGE = "createNamedRange";
  @SerializedName(SERIALIZED_NAME_CREATE_NAMED_RANGE)
  private CreateNamedRangeResponse createNamedRange;

  public static final String SERIALIZED_NAME_INSERT_INLINE_IMAGE = "insertInlineImage";
  @SerializedName(SERIALIZED_NAME_INSERT_INLINE_IMAGE)
  private InsertInlineImageResponse insertInlineImage;

  public static final String SERIALIZED_NAME_INSERT_INLINE_SHEETS_CHART = "insertInlineSheetsChart";
  @SerializedName(SERIALIZED_NAME_INSERT_INLINE_SHEETS_CHART)
  private InsertInlineSheetsChartResponse insertInlineSheetsChart;

  public static final String SERIALIZED_NAME_REPLACE_ALL_TEXT = "replaceAllText";
  @SerializedName(SERIALIZED_NAME_REPLACE_ALL_TEXT)
  private ReplaceAllTextResponse replaceAllText;

  public Response() {
  }

  public Response createFooter(CreateFooterResponse createFooter) {
    this.createFooter = createFooter;
    return this;
  }

  /**
   * Get createFooter
   * @return createFooter
   */
  @javax.annotation.Nullable
  public CreateFooterResponse getCreateFooter() {
    return createFooter;
  }

  public void setCreateFooter(CreateFooterResponse createFooter) {
    this.createFooter = createFooter;
  }


  public Response createFootnote(CreateFootnoteResponse createFootnote) {
    this.createFootnote = createFootnote;
    return this;
  }

  /**
   * Get createFootnote
   * @return createFootnote
   */
  @javax.annotation.Nullable
  public CreateFootnoteResponse getCreateFootnote() {
    return createFootnote;
  }

  public void setCreateFootnote(CreateFootnoteResponse createFootnote) {
    this.createFootnote = createFootnote;
  }


  public Response createHeader(CreateHeaderResponse createHeader) {
    this.createHeader = createHeader;
    return this;
  }

  /**
   * Get createHeader
   * @return createHeader
   */
  @javax.annotation.Nullable
  public CreateHeaderResponse getCreateHeader() {
    return createHeader;
  }

  public void setCreateHeader(CreateHeaderResponse createHeader) {
    this.createHeader = createHeader;
  }


  public Response createNamedRange(CreateNamedRangeResponse createNamedRange) {
    this.createNamedRange = createNamedRange;
    return this;
  }

  /**
   * Get createNamedRange
   * @return createNamedRange
   */
  @javax.annotation.Nullable
  public CreateNamedRangeResponse getCreateNamedRange() {
    return createNamedRange;
  }

  public void setCreateNamedRange(CreateNamedRangeResponse createNamedRange) {
    this.createNamedRange = createNamedRange;
  }


  public Response insertInlineImage(InsertInlineImageResponse insertInlineImage) {
    this.insertInlineImage = insertInlineImage;
    return this;
  }

  /**
   * Get insertInlineImage
   * @return insertInlineImage
   */
  @javax.annotation.Nullable
  public InsertInlineImageResponse getInsertInlineImage() {
    return insertInlineImage;
  }

  public void setInsertInlineImage(InsertInlineImageResponse insertInlineImage) {
    this.insertInlineImage = insertInlineImage;
  }


  public Response insertInlineSheetsChart(InsertInlineSheetsChartResponse insertInlineSheetsChart) {
    this.insertInlineSheetsChart = insertInlineSheetsChart;
    return this;
  }

  /**
   * Get insertInlineSheetsChart
   * @return insertInlineSheetsChart
   */
  @javax.annotation.Nullable
  public InsertInlineSheetsChartResponse getInsertInlineSheetsChart() {
    return insertInlineSheetsChart;
  }

  public void setInsertInlineSheetsChart(InsertInlineSheetsChartResponse insertInlineSheetsChart) {
    this.insertInlineSheetsChart = insertInlineSheetsChart;
  }


  public Response replaceAllText(ReplaceAllTextResponse replaceAllText) {
    this.replaceAllText = replaceAllText;
    return this;
  }

  /**
   * Get replaceAllText
   * @return replaceAllText
   */
  @javax.annotation.Nullable
  public ReplaceAllTextResponse getReplaceAllText() {
    return replaceAllText;
  }

  public void setReplaceAllText(ReplaceAllTextResponse replaceAllText) {
    this.replaceAllText = replaceAllText;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Response response = (Response) o;
    return Objects.equals(this.createFooter, response.createFooter) &&
        Objects.equals(this.createFootnote, response.createFootnote) &&
        Objects.equals(this.createHeader, response.createHeader) &&
        Objects.equals(this.createNamedRange, response.createNamedRange) &&
        Objects.equals(this.insertInlineImage, response.insertInlineImage) &&
        Objects.equals(this.insertInlineSheetsChart, response.insertInlineSheetsChart) &&
        Objects.equals(this.replaceAllText, response.replaceAllText);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createFooter, createFootnote, createHeader, createNamedRange, insertInlineImage, insertInlineSheetsChart, replaceAllText);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Response {\n");
    sb.append("    createFooter: ").append(toIndentedString(createFooter)).append("\n");
    sb.append("    createFootnote: ").append(toIndentedString(createFootnote)).append("\n");
    sb.append("    createHeader: ").append(toIndentedString(createHeader)).append("\n");
    sb.append("    createNamedRange: ").append(toIndentedString(createNamedRange)).append("\n");
    sb.append("    insertInlineImage: ").append(toIndentedString(insertInlineImage)).append("\n");
    sb.append("    insertInlineSheetsChart: ").append(toIndentedString(insertInlineSheetsChart)).append("\n");
    sb.append("    replaceAllText: ").append(toIndentedString(replaceAllText)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("createFooter");
    openapiFields.add("createFootnote");
    openapiFields.add("createHeader");
    openapiFields.add("createNamedRange");
    openapiFields.add("insertInlineImage");
    openapiFields.add("insertInlineSheetsChart");
    openapiFields.add("replaceAllText");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Response
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Response.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Response is not found in the empty JSON string", Response.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Response.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Response` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `createFooter`
      if (jsonObj.get("createFooter") != null && !jsonObj.get("createFooter").isJsonNull()) {
        CreateFooterResponse.validateJsonElement(jsonObj.get("createFooter"));
      }
      // validate the optional field `createFootnote`
      if (jsonObj.get("createFootnote") != null && !jsonObj.get("createFootnote").isJsonNull()) {
        CreateFootnoteResponse.validateJsonElement(jsonObj.get("createFootnote"));
      }
      // validate the optional field `createHeader`
      if (jsonObj.get("createHeader") != null && !jsonObj.get("createHeader").isJsonNull()) {
        CreateHeaderResponse.validateJsonElement(jsonObj.get("createHeader"));
      }
      // validate the optional field `createNamedRange`
      if (jsonObj.get("createNamedRange") != null && !jsonObj.get("createNamedRange").isJsonNull()) {
        CreateNamedRangeResponse.validateJsonElement(jsonObj.get("createNamedRange"));
      }
      // validate the optional field `insertInlineImage`
      if (jsonObj.get("insertInlineImage") != null && !jsonObj.get("insertInlineImage").isJsonNull()) {
        InsertInlineImageResponse.validateJsonElement(jsonObj.get("insertInlineImage"));
      }
      // validate the optional field `insertInlineSheetsChart`
      if (jsonObj.get("insertInlineSheetsChart") != null && !jsonObj.get("insertInlineSheetsChart").isJsonNull()) {
        InsertInlineSheetsChartResponse.validateJsonElement(jsonObj.get("insertInlineSheetsChart"));
      }
      // validate the optional field `replaceAllText`
      if (jsonObj.get("replaceAllText") != null && !jsonObj.get("replaceAllText").isJsonNull()) {
        ReplaceAllTextResponse.validateJsonElement(jsonObj.get("replaceAllText"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Response.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Response' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Response> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Response.class));

       return (TypeAdapter<T>) new TypeAdapter<Response>() {
           @Override
           public void write(JsonWriter out, Response value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Response read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Response given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Response
   * @throws IOException if the JSON string is invalid with respect to Response
   */
  public static Response fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Response.class);
  }

  /**
   * Convert an instance of Response to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

