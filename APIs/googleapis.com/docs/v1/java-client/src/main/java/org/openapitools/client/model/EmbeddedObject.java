/*
 * Google Docs API
 * Reads and writes Google Docs documents.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Dimension;
import org.openapitools.client.model.EmbeddedObjectBorder;
import org.openapitools.client.model.ImageProperties;
import org.openapitools.client.model.LinkedContentReference;
import org.openapitools.client.model.Size;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An embedded object in the document.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:47:07.584674-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EmbeddedObject {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_EMBEDDED_DRAWING_PROPERTIES = "embeddedDrawingProperties";
  @SerializedName(SERIALIZED_NAME_EMBEDDED_DRAWING_PROPERTIES)
  private Object embeddedDrawingProperties;

  public static final String SERIALIZED_NAME_EMBEDDED_OBJECT_BORDER = "embeddedObjectBorder";
  @SerializedName(SERIALIZED_NAME_EMBEDDED_OBJECT_BORDER)
  private EmbeddedObjectBorder embeddedObjectBorder;

  public static final String SERIALIZED_NAME_IMAGE_PROPERTIES = "imageProperties";
  @SerializedName(SERIALIZED_NAME_IMAGE_PROPERTIES)
  private ImageProperties imageProperties;

  public static final String SERIALIZED_NAME_LINKED_CONTENT_REFERENCE = "linkedContentReference";
  @SerializedName(SERIALIZED_NAME_LINKED_CONTENT_REFERENCE)
  private LinkedContentReference linkedContentReference;

  public static final String SERIALIZED_NAME_MARGIN_BOTTOM = "marginBottom";
  @SerializedName(SERIALIZED_NAME_MARGIN_BOTTOM)
  private Dimension marginBottom;

  public static final String SERIALIZED_NAME_MARGIN_LEFT = "marginLeft";
  @SerializedName(SERIALIZED_NAME_MARGIN_LEFT)
  private Dimension marginLeft;

  public static final String SERIALIZED_NAME_MARGIN_RIGHT = "marginRight";
  @SerializedName(SERIALIZED_NAME_MARGIN_RIGHT)
  private Dimension marginRight;

  public static final String SERIALIZED_NAME_MARGIN_TOP = "marginTop";
  @SerializedName(SERIALIZED_NAME_MARGIN_TOP)
  private Dimension marginTop;

  public static final String SERIALIZED_NAME_SIZE = "size";
  @SerializedName(SERIALIZED_NAME_SIZE)
  private Size size;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public EmbeddedObject() {
  }

  public EmbeddedObject description(String description) {
    this.description = description;
    return this;
  }

  /**
   * The description of the embedded object. The &#x60;title&#x60; and &#x60;description&#x60; are both combined to display alt text.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public EmbeddedObject embeddedDrawingProperties(Object embeddedDrawingProperties) {
    this.embeddedDrawingProperties = embeddedDrawingProperties;
    return this;
  }

  /**
   * The properties of an embedded drawing and used to differentiate the object type. An embedded drawing is one that&#39;s created and edited within a document. Note that extensive details are not supported.
   * @return embeddedDrawingProperties
   */
  @javax.annotation.Nullable
  public Object getEmbeddedDrawingProperties() {
    return embeddedDrawingProperties;
  }

  public void setEmbeddedDrawingProperties(Object embeddedDrawingProperties) {
    this.embeddedDrawingProperties = embeddedDrawingProperties;
  }


  public EmbeddedObject embeddedObjectBorder(EmbeddedObjectBorder embeddedObjectBorder) {
    this.embeddedObjectBorder = embeddedObjectBorder;
    return this;
  }

  /**
   * Get embeddedObjectBorder
   * @return embeddedObjectBorder
   */
  @javax.annotation.Nullable
  public EmbeddedObjectBorder getEmbeddedObjectBorder() {
    return embeddedObjectBorder;
  }

  public void setEmbeddedObjectBorder(EmbeddedObjectBorder embeddedObjectBorder) {
    this.embeddedObjectBorder = embeddedObjectBorder;
  }


  public EmbeddedObject imageProperties(ImageProperties imageProperties) {
    this.imageProperties = imageProperties;
    return this;
  }

  /**
   * Get imageProperties
   * @return imageProperties
   */
  @javax.annotation.Nullable
  public ImageProperties getImageProperties() {
    return imageProperties;
  }

  public void setImageProperties(ImageProperties imageProperties) {
    this.imageProperties = imageProperties;
  }


  public EmbeddedObject linkedContentReference(LinkedContentReference linkedContentReference) {
    this.linkedContentReference = linkedContentReference;
    return this;
  }

  /**
   * Get linkedContentReference
   * @return linkedContentReference
   */
  @javax.annotation.Nullable
  public LinkedContentReference getLinkedContentReference() {
    return linkedContentReference;
  }

  public void setLinkedContentReference(LinkedContentReference linkedContentReference) {
    this.linkedContentReference = linkedContentReference;
  }


  public EmbeddedObject marginBottom(Dimension marginBottom) {
    this.marginBottom = marginBottom;
    return this;
  }

  /**
   * Get marginBottom
   * @return marginBottom
   */
  @javax.annotation.Nullable
  public Dimension getMarginBottom() {
    return marginBottom;
  }

  public void setMarginBottom(Dimension marginBottom) {
    this.marginBottom = marginBottom;
  }


  public EmbeddedObject marginLeft(Dimension marginLeft) {
    this.marginLeft = marginLeft;
    return this;
  }

  /**
   * Get marginLeft
   * @return marginLeft
   */
  @javax.annotation.Nullable
  public Dimension getMarginLeft() {
    return marginLeft;
  }

  public void setMarginLeft(Dimension marginLeft) {
    this.marginLeft = marginLeft;
  }


  public EmbeddedObject marginRight(Dimension marginRight) {
    this.marginRight = marginRight;
    return this;
  }

  /**
   * Get marginRight
   * @return marginRight
   */
  @javax.annotation.Nullable
  public Dimension getMarginRight() {
    return marginRight;
  }

  public void setMarginRight(Dimension marginRight) {
    this.marginRight = marginRight;
  }


  public EmbeddedObject marginTop(Dimension marginTop) {
    this.marginTop = marginTop;
    return this;
  }

  /**
   * Get marginTop
   * @return marginTop
   */
  @javax.annotation.Nullable
  public Dimension getMarginTop() {
    return marginTop;
  }

  public void setMarginTop(Dimension marginTop) {
    this.marginTop = marginTop;
  }


  public EmbeddedObject size(Size size) {
    this.size = size;
    return this;
  }

  /**
   * Get size
   * @return size
   */
  @javax.annotation.Nullable
  public Size getSize() {
    return size;
  }

  public void setSize(Size size) {
    this.size = size;
  }


  public EmbeddedObject title(String title) {
    this.title = title;
    return this;
  }

  /**
   * The title of the embedded object. The &#x60;title&#x60; and &#x60;description&#x60; are both combined to display alt text.
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EmbeddedObject embeddedObject = (EmbeddedObject) o;
    return Objects.equals(this.description, embeddedObject.description) &&
        Objects.equals(this.embeddedDrawingProperties, embeddedObject.embeddedDrawingProperties) &&
        Objects.equals(this.embeddedObjectBorder, embeddedObject.embeddedObjectBorder) &&
        Objects.equals(this.imageProperties, embeddedObject.imageProperties) &&
        Objects.equals(this.linkedContentReference, embeddedObject.linkedContentReference) &&
        Objects.equals(this.marginBottom, embeddedObject.marginBottom) &&
        Objects.equals(this.marginLeft, embeddedObject.marginLeft) &&
        Objects.equals(this.marginRight, embeddedObject.marginRight) &&
        Objects.equals(this.marginTop, embeddedObject.marginTop) &&
        Objects.equals(this.size, embeddedObject.size) &&
        Objects.equals(this.title, embeddedObject.title);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, embeddedDrawingProperties, embeddedObjectBorder, imageProperties, linkedContentReference, marginBottom, marginLeft, marginRight, marginTop, size, title);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EmbeddedObject {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    embeddedDrawingProperties: ").append(toIndentedString(embeddedDrawingProperties)).append("\n");
    sb.append("    embeddedObjectBorder: ").append(toIndentedString(embeddedObjectBorder)).append("\n");
    sb.append("    imageProperties: ").append(toIndentedString(imageProperties)).append("\n");
    sb.append("    linkedContentReference: ").append(toIndentedString(linkedContentReference)).append("\n");
    sb.append("    marginBottom: ").append(toIndentedString(marginBottom)).append("\n");
    sb.append("    marginLeft: ").append(toIndentedString(marginLeft)).append("\n");
    sb.append("    marginRight: ").append(toIndentedString(marginRight)).append("\n");
    sb.append("    marginTop: ").append(toIndentedString(marginTop)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("embeddedDrawingProperties");
    openapiFields.add("embeddedObjectBorder");
    openapiFields.add("imageProperties");
    openapiFields.add("linkedContentReference");
    openapiFields.add("marginBottom");
    openapiFields.add("marginLeft");
    openapiFields.add("marginRight");
    openapiFields.add("marginTop");
    openapiFields.add("size");
    openapiFields.add("title");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EmbeddedObject
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EmbeddedObject.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EmbeddedObject is not found in the empty JSON string", EmbeddedObject.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EmbeddedObject.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EmbeddedObject` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // validate the optional field `embeddedObjectBorder`
      if (jsonObj.get("embeddedObjectBorder") != null && !jsonObj.get("embeddedObjectBorder").isJsonNull()) {
        EmbeddedObjectBorder.validateJsonElement(jsonObj.get("embeddedObjectBorder"));
      }
      // validate the optional field `imageProperties`
      if (jsonObj.get("imageProperties") != null && !jsonObj.get("imageProperties").isJsonNull()) {
        ImageProperties.validateJsonElement(jsonObj.get("imageProperties"));
      }
      // validate the optional field `linkedContentReference`
      if (jsonObj.get("linkedContentReference") != null && !jsonObj.get("linkedContentReference").isJsonNull()) {
        LinkedContentReference.validateJsonElement(jsonObj.get("linkedContentReference"));
      }
      // validate the optional field `marginBottom`
      if (jsonObj.get("marginBottom") != null && !jsonObj.get("marginBottom").isJsonNull()) {
        Dimension.validateJsonElement(jsonObj.get("marginBottom"));
      }
      // validate the optional field `marginLeft`
      if (jsonObj.get("marginLeft") != null && !jsonObj.get("marginLeft").isJsonNull()) {
        Dimension.validateJsonElement(jsonObj.get("marginLeft"));
      }
      // validate the optional field `marginRight`
      if (jsonObj.get("marginRight") != null && !jsonObj.get("marginRight").isJsonNull()) {
        Dimension.validateJsonElement(jsonObj.get("marginRight"));
      }
      // validate the optional field `marginTop`
      if (jsonObj.get("marginTop") != null && !jsonObj.get("marginTop").isJsonNull()) {
        Dimension.validateJsonElement(jsonObj.get("marginTop"));
      }
      // validate the optional field `size`
      if (jsonObj.get("size") != null && !jsonObj.get("size").isJsonNull()) {
        Size.validateJsonElement(jsonObj.get("size"));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EmbeddedObject.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EmbeddedObject' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EmbeddedObject> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EmbeddedObject.class));

       return (TypeAdapter<T>) new TypeAdapter<EmbeddedObject>() {
           @Override
           public void write(JsonWriter out, EmbeddedObject value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EmbeddedObject read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EmbeddedObject given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EmbeddedObject
   * @throws IOException if the JSON string is invalid with respect to EmbeddedObject
   */
  public static EmbeddedObject fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EmbeddedObject.class);
  }

  /**
   * Convert an instance of EmbeddedObject to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

