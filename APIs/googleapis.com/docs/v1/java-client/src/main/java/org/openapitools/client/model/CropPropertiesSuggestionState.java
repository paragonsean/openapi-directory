/*
 * Google Docs API
 * Reads and writes Google Docs documents.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A mask that indicates which of the fields on the base CropProperties have been changed in this suggestion. For any field set to true, there&#39;s a new suggested value.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:47:07.584674-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CropPropertiesSuggestionState {
  public static final String SERIALIZED_NAME_ANGLE_SUGGESTED = "angleSuggested";
  @SerializedName(SERIALIZED_NAME_ANGLE_SUGGESTED)
  private Boolean angleSuggested;

  public static final String SERIALIZED_NAME_OFFSET_BOTTOM_SUGGESTED = "offsetBottomSuggested";
  @SerializedName(SERIALIZED_NAME_OFFSET_BOTTOM_SUGGESTED)
  private Boolean offsetBottomSuggested;

  public static final String SERIALIZED_NAME_OFFSET_LEFT_SUGGESTED = "offsetLeftSuggested";
  @SerializedName(SERIALIZED_NAME_OFFSET_LEFT_SUGGESTED)
  private Boolean offsetLeftSuggested;

  public static final String SERIALIZED_NAME_OFFSET_RIGHT_SUGGESTED = "offsetRightSuggested";
  @SerializedName(SERIALIZED_NAME_OFFSET_RIGHT_SUGGESTED)
  private Boolean offsetRightSuggested;

  public static final String SERIALIZED_NAME_OFFSET_TOP_SUGGESTED = "offsetTopSuggested";
  @SerializedName(SERIALIZED_NAME_OFFSET_TOP_SUGGESTED)
  private Boolean offsetTopSuggested;

  public CropPropertiesSuggestionState() {
  }

  public CropPropertiesSuggestionState angleSuggested(Boolean angleSuggested) {
    this.angleSuggested = angleSuggested;
    return this;
  }

  /**
   * Indicates if there was a suggested change to angle.
   * @return angleSuggested
   */
  @javax.annotation.Nullable
  public Boolean getAngleSuggested() {
    return angleSuggested;
  }

  public void setAngleSuggested(Boolean angleSuggested) {
    this.angleSuggested = angleSuggested;
  }


  public CropPropertiesSuggestionState offsetBottomSuggested(Boolean offsetBottomSuggested) {
    this.offsetBottomSuggested = offsetBottomSuggested;
    return this;
  }

  /**
   * Indicates if there was a suggested change to offset_bottom.
   * @return offsetBottomSuggested
   */
  @javax.annotation.Nullable
  public Boolean getOffsetBottomSuggested() {
    return offsetBottomSuggested;
  }

  public void setOffsetBottomSuggested(Boolean offsetBottomSuggested) {
    this.offsetBottomSuggested = offsetBottomSuggested;
  }


  public CropPropertiesSuggestionState offsetLeftSuggested(Boolean offsetLeftSuggested) {
    this.offsetLeftSuggested = offsetLeftSuggested;
    return this;
  }

  /**
   * Indicates if there was a suggested change to offset_left.
   * @return offsetLeftSuggested
   */
  @javax.annotation.Nullable
  public Boolean getOffsetLeftSuggested() {
    return offsetLeftSuggested;
  }

  public void setOffsetLeftSuggested(Boolean offsetLeftSuggested) {
    this.offsetLeftSuggested = offsetLeftSuggested;
  }


  public CropPropertiesSuggestionState offsetRightSuggested(Boolean offsetRightSuggested) {
    this.offsetRightSuggested = offsetRightSuggested;
    return this;
  }

  /**
   * Indicates if there was a suggested change to offset_right.
   * @return offsetRightSuggested
   */
  @javax.annotation.Nullable
  public Boolean getOffsetRightSuggested() {
    return offsetRightSuggested;
  }

  public void setOffsetRightSuggested(Boolean offsetRightSuggested) {
    this.offsetRightSuggested = offsetRightSuggested;
  }


  public CropPropertiesSuggestionState offsetTopSuggested(Boolean offsetTopSuggested) {
    this.offsetTopSuggested = offsetTopSuggested;
    return this;
  }

  /**
   * Indicates if there was a suggested change to offset_top.
   * @return offsetTopSuggested
   */
  @javax.annotation.Nullable
  public Boolean getOffsetTopSuggested() {
    return offsetTopSuggested;
  }

  public void setOffsetTopSuggested(Boolean offsetTopSuggested) {
    this.offsetTopSuggested = offsetTopSuggested;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CropPropertiesSuggestionState cropPropertiesSuggestionState = (CropPropertiesSuggestionState) o;
    return Objects.equals(this.angleSuggested, cropPropertiesSuggestionState.angleSuggested) &&
        Objects.equals(this.offsetBottomSuggested, cropPropertiesSuggestionState.offsetBottomSuggested) &&
        Objects.equals(this.offsetLeftSuggested, cropPropertiesSuggestionState.offsetLeftSuggested) &&
        Objects.equals(this.offsetRightSuggested, cropPropertiesSuggestionState.offsetRightSuggested) &&
        Objects.equals(this.offsetTopSuggested, cropPropertiesSuggestionState.offsetTopSuggested);
  }

  @Override
  public int hashCode() {
    return Objects.hash(angleSuggested, offsetBottomSuggested, offsetLeftSuggested, offsetRightSuggested, offsetTopSuggested);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CropPropertiesSuggestionState {\n");
    sb.append("    angleSuggested: ").append(toIndentedString(angleSuggested)).append("\n");
    sb.append("    offsetBottomSuggested: ").append(toIndentedString(offsetBottomSuggested)).append("\n");
    sb.append("    offsetLeftSuggested: ").append(toIndentedString(offsetLeftSuggested)).append("\n");
    sb.append("    offsetRightSuggested: ").append(toIndentedString(offsetRightSuggested)).append("\n");
    sb.append("    offsetTopSuggested: ").append(toIndentedString(offsetTopSuggested)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("angleSuggested");
    openapiFields.add("offsetBottomSuggested");
    openapiFields.add("offsetLeftSuggested");
    openapiFields.add("offsetRightSuggested");
    openapiFields.add("offsetTopSuggested");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CropPropertiesSuggestionState
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CropPropertiesSuggestionState.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CropPropertiesSuggestionState is not found in the empty JSON string", CropPropertiesSuggestionState.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CropPropertiesSuggestionState.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CropPropertiesSuggestionState` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CropPropertiesSuggestionState.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CropPropertiesSuggestionState' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CropPropertiesSuggestionState> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CropPropertiesSuggestionState.class));

       return (TypeAdapter<T>) new TypeAdapter<CropPropertiesSuggestionState>() {
           @Override
           public void write(JsonWriter out, CropPropertiesSuggestionState value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CropPropertiesSuggestionState read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CropPropertiesSuggestionState given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CropPropertiesSuggestionState
   * @throws IOException if the JSON string is invalid with respect to CropPropertiesSuggestionState
   */
  public static CropPropertiesSuggestionState fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CropPropertiesSuggestionState.class);
  }

  /**
   * Convert an instance of CropPropertiesSuggestionState to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

