/*
 * Google Docs API
 * Reads and writes Google Docs documents.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Replaces an existing image with a new image. Replacing an image removes some image effects from the existing image in order to mirror the behavior of the Docs editor.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:47:07.584674-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ReplaceImageRequest {
  public static final String SERIALIZED_NAME_IMAGE_OBJECT_ID = "imageObjectId";
  @SerializedName(SERIALIZED_NAME_IMAGE_OBJECT_ID)
  private String imageObjectId;

  /**
   * The replacement method.
   */
  @JsonAdapter(ImageReplaceMethodEnum.Adapter.class)
  public enum ImageReplaceMethodEnum {
    IMAGE_REPLACE_METHOD_UNSPECIFIED("IMAGE_REPLACE_METHOD_UNSPECIFIED"),
    
    CENTER_CROP("CENTER_CROP");

    private String value;

    ImageReplaceMethodEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ImageReplaceMethodEnum fromValue(String value) {
      for (ImageReplaceMethodEnum b : ImageReplaceMethodEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ImageReplaceMethodEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ImageReplaceMethodEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ImageReplaceMethodEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ImageReplaceMethodEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ImageReplaceMethodEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_IMAGE_REPLACE_METHOD = "imageReplaceMethod";
  @SerializedName(SERIALIZED_NAME_IMAGE_REPLACE_METHOD)
  private ImageReplaceMethodEnum imageReplaceMethod;

  public static final String SERIALIZED_NAME_URI = "uri";
  @SerializedName(SERIALIZED_NAME_URI)
  private String uri;

  public ReplaceImageRequest() {
  }

  public ReplaceImageRequest imageObjectId(String imageObjectId) {
    this.imageObjectId = imageObjectId;
    return this;
  }

  /**
   * The ID of the existing image that will be replaced. The ID can be retrieved from the response of a get request.
   * @return imageObjectId
   */
  @javax.annotation.Nullable
  public String getImageObjectId() {
    return imageObjectId;
  }

  public void setImageObjectId(String imageObjectId) {
    this.imageObjectId = imageObjectId;
  }


  public ReplaceImageRequest imageReplaceMethod(ImageReplaceMethodEnum imageReplaceMethod) {
    this.imageReplaceMethod = imageReplaceMethod;
    return this;
  }

  /**
   * The replacement method.
   * @return imageReplaceMethod
   */
  @javax.annotation.Nullable
  public ImageReplaceMethodEnum getImageReplaceMethod() {
    return imageReplaceMethod;
  }

  public void setImageReplaceMethod(ImageReplaceMethodEnum imageReplaceMethod) {
    this.imageReplaceMethod = imageReplaceMethod;
  }


  public ReplaceImageRequest uri(String uri) {
    this.uri = uri;
    return this;
  }

  /**
   * The URI of the new image. The image is fetched once at insertion time and a copy is stored for display inside the document. Images must be less than 50MB, cannot exceed 25 megapixels, and must be in PNG, JPEG, or GIF format. The provided URI can&#39;t surpass 2 KB in length. The URI is saved with the image, and exposed through the ImageProperties.source_uri field.
   * @return uri
   */
  @javax.annotation.Nullable
  public String getUri() {
    return uri;
  }

  public void setUri(String uri) {
    this.uri = uri;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReplaceImageRequest replaceImageRequest = (ReplaceImageRequest) o;
    return Objects.equals(this.imageObjectId, replaceImageRequest.imageObjectId) &&
        Objects.equals(this.imageReplaceMethod, replaceImageRequest.imageReplaceMethod) &&
        Objects.equals(this.uri, replaceImageRequest.uri);
  }

  @Override
  public int hashCode() {
    return Objects.hash(imageObjectId, imageReplaceMethod, uri);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReplaceImageRequest {\n");
    sb.append("    imageObjectId: ").append(toIndentedString(imageObjectId)).append("\n");
    sb.append("    imageReplaceMethod: ").append(toIndentedString(imageReplaceMethod)).append("\n");
    sb.append("    uri: ").append(toIndentedString(uri)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("imageObjectId");
    openapiFields.add("imageReplaceMethod");
    openapiFields.add("uri");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ReplaceImageRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ReplaceImageRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReplaceImageRequest is not found in the empty JSON string", ReplaceImageRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ReplaceImageRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReplaceImageRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("imageObjectId") != null && !jsonObj.get("imageObjectId").isJsonNull()) && !jsonObj.get("imageObjectId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `imageObjectId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("imageObjectId").toString()));
      }
      if ((jsonObj.get("imageReplaceMethod") != null && !jsonObj.get("imageReplaceMethod").isJsonNull()) && !jsonObj.get("imageReplaceMethod").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `imageReplaceMethod` to be a primitive type in the JSON string but got `%s`", jsonObj.get("imageReplaceMethod").toString()));
      }
      // validate the optional field `imageReplaceMethod`
      if (jsonObj.get("imageReplaceMethod") != null && !jsonObj.get("imageReplaceMethod").isJsonNull()) {
        ImageReplaceMethodEnum.validateJsonElement(jsonObj.get("imageReplaceMethod"));
      }
      if ((jsonObj.get("uri") != null && !jsonObj.get("uri").isJsonNull()) && !jsonObj.get("uri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uri").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReplaceImageRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReplaceImageRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReplaceImageRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReplaceImageRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<ReplaceImageRequest>() {
           @Override
           public void write(JsonWriter out, ReplaceImageRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReplaceImageRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ReplaceImageRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ReplaceImageRequest
   * @throws IOException if the JSON string is invalid with respect to ReplaceImageRequest
   */
  public static ReplaceImageRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReplaceImageRequest.class);
  }

  /**
   * Convert an instance of ReplaceImageRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

