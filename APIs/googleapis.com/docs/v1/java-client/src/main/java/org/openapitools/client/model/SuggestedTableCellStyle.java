/*
 * Google Docs API
 * Reads and writes Google Docs documents.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.TableCellStyle;
import org.openapitools.client.model.TableCellStyleSuggestionState;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A suggested change to a TableCellStyle.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:47:07.584674-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SuggestedTableCellStyle {
  public static final String SERIALIZED_NAME_TABLE_CELL_STYLE = "tableCellStyle";
  @SerializedName(SERIALIZED_NAME_TABLE_CELL_STYLE)
  private TableCellStyle tableCellStyle;

  public static final String SERIALIZED_NAME_TABLE_CELL_STYLE_SUGGESTION_STATE = "tableCellStyleSuggestionState";
  @SerializedName(SERIALIZED_NAME_TABLE_CELL_STYLE_SUGGESTION_STATE)
  private TableCellStyleSuggestionState tableCellStyleSuggestionState;

  public SuggestedTableCellStyle() {
  }

  public SuggestedTableCellStyle tableCellStyle(TableCellStyle tableCellStyle) {
    this.tableCellStyle = tableCellStyle;
    return this;
  }

  /**
   * Get tableCellStyle
   * @return tableCellStyle
   */
  @javax.annotation.Nullable
  public TableCellStyle getTableCellStyle() {
    return tableCellStyle;
  }

  public void setTableCellStyle(TableCellStyle tableCellStyle) {
    this.tableCellStyle = tableCellStyle;
  }


  public SuggestedTableCellStyle tableCellStyleSuggestionState(TableCellStyleSuggestionState tableCellStyleSuggestionState) {
    this.tableCellStyleSuggestionState = tableCellStyleSuggestionState;
    return this;
  }

  /**
   * Get tableCellStyleSuggestionState
   * @return tableCellStyleSuggestionState
   */
  @javax.annotation.Nullable
  public TableCellStyleSuggestionState getTableCellStyleSuggestionState() {
    return tableCellStyleSuggestionState;
  }

  public void setTableCellStyleSuggestionState(TableCellStyleSuggestionState tableCellStyleSuggestionState) {
    this.tableCellStyleSuggestionState = tableCellStyleSuggestionState;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SuggestedTableCellStyle suggestedTableCellStyle = (SuggestedTableCellStyle) o;
    return Objects.equals(this.tableCellStyle, suggestedTableCellStyle.tableCellStyle) &&
        Objects.equals(this.tableCellStyleSuggestionState, suggestedTableCellStyle.tableCellStyleSuggestionState);
  }

  @Override
  public int hashCode() {
    return Objects.hash(tableCellStyle, tableCellStyleSuggestionState);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SuggestedTableCellStyle {\n");
    sb.append("    tableCellStyle: ").append(toIndentedString(tableCellStyle)).append("\n");
    sb.append("    tableCellStyleSuggestionState: ").append(toIndentedString(tableCellStyleSuggestionState)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("tableCellStyle");
    openapiFields.add("tableCellStyleSuggestionState");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SuggestedTableCellStyle
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SuggestedTableCellStyle.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SuggestedTableCellStyle is not found in the empty JSON string", SuggestedTableCellStyle.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SuggestedTableCellStyle.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SuggestedTableCellStyle` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `tableCellStyle`
      if (jsonObj.get("tableCellStyle") != null && !jsonObj.get("tableCellStyle").isJsonNull()) {
        TableCellStyle.validateJsonElement(jsonObj.get("tableCellStyle"));
      }
      // validate the optional field `tableCellStyleSuggestionState`
      if (jsonObj.get("tableCellStyleSuggestionState") != null && !jsonObj.get("tableCellStyleSuggestionState").isJsonNull()) {
        TableCellStyleSuggestionState.validateJsonElement(jsonObj.get("tableCellStyleSuggestionState"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SuggestedTableCellStyle.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SuggestedTableCellStyle' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SuggestedTableCellStyle> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SuggestedTableCellStyle.class));

       return (TypeAdapter<T>) new TypeAdapter<SuggestedTableCellStyle>() {
           @Override
           public void write(JsonWriter out, SuggestedTableCellStyle value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SuggestedTableCellStyle read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SuggestedTableCellStyle given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SuggestedTableCellStyle
   * @throws IOException if the JSON string is invalid with respect to SuggestedTableCellStyle
   */
  public static SuggestedTableCellStyle fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SuggestedTableCellStyle.class);
  }

  /**
   * Convert an instance of SuggestedTableCellStyle to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

