/*
 * Google Docs API
 * Reads and writes Google Docs documents.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.SuggestedTableRowStyle;
import org.openapitools.client.model.TableCell;
import org.openapitools.client.model.TableRowStyle;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The contents and style of a row in a Table.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:47:07.584674-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TableRow {
  public static final String SERIALIZED_NAME_END_INDEX = "endIndex";
  @SerializedName(SERIALIZED_NAME_END_INDEX)
  private Integer endIndex;

  public static final String SERIALIZED_NAME_START_INDEX = "startIndex";
  @SerializedName(SERIALIZED_NAME_START_INDEX)
  private Integer startIndex;

  public static final String SERIALIZED_NAME_SUGGESTED_DELETION_IDS = "suggestedDeletionIds";
  @SerializedName(SERIALIZED_NAME_SUGGESTED_DELETION_IDS)
  private List<String> suggestedDeletionIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_SUGGESTED_INSERTION_IDS = "suggestedInsertionIds";
  @SerializedName(SERIALIZED_NAME_SUGGESTED_INSERTION_IDS)
  private List<String> suggestedInsertionIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_SUGGESTED_TABLE_ROW_STYLE_CHANGES = "suggestedTableRowStyleChanges";
  @SerializedName(SERIALIZED_NAME_SUGGESTED_TABLE_ROW_STYLE_CHANGES)
  private Map<String, SuggestedTableRowStyle> suggestedTableRowStyleChanges = new HashMap<>();

  public static final String SERIALIZED_NAME_TABLE_CELLS = "tableCells";
  @SerializedName(SERIALIZED_NAME_TABLE_CELLS)
  private List<TableCell> tableCells = new ArrayList<>();

  public static final String SERIALIZED_NAME_TABLE_ROW_STYLE = "tableRowStyle";
  @SerializedName(SERIALIZED_NAME_TABLE_ROW_STYLE)
  private TableRowStyle tableRowStyle;

  public TableRow() {
  }

  public TableRow endIndex(Integer endIndex) {
    this.endIndex = endIndex;
    return this;
  }

  /**
   * The zero-based end index of this row, exclusive, in UTF-16 code units.
   * @return endIndex
   */
  @javax.annotation.Nullable
  public Integer getEndIndex() {
    return endIndex;
  }

  public void setEndIndex(Integer endIndex) {
    this.endIndex = endIndex;
  }


  public TableRow startIndex(Integer startIndex) {
    this.startIndex = startIndex;
    return this;
  }

  /**
   * The zero-based start index of this row, in UTF-16 code units.
   * @return startIndex
   */
  @javax.annotation.Nullable
  public Integer getStartIndex() {
    return startIndex;
  }

  public void setStartIndex(Integer startIndex) {
    this.startIndex = startIndex;
  }


  public TableRow suggestedDeletionIds(List<String> suggestedDeletionIds) {
    this.suggestedDeletionIds = suggestedDeletionIds;
    return this;
  }

  public TableRow addSuggestedDeletionIdsItem(String suggestedDeletionIdsItem) {
    if (this.suggestedDeletionIds == null) {
      this.suggestedDeletionIds = new ArrayList<>();
    }
    this.suggestedDeletionIds.add(suggestedDeletionIdsItem);
    return this;
  }

  /**
   * The suggested deletion IDs. If empty, then there are no suggested deletions of this content.
   * @return suggestedDeletionIds
   */
  @javax.annotation.Nullable
  public List<String> getSuggestedDeletionIds() {
    return suggestedDeletionIds;
  }

  public void setSuggestedDeletionIds(List<String> suggestedDeletionIds) {
    this.suggestedDeletionIds = suggestedDeletionIds;
  }


  public TableRow suggestedInsertionIds(List<String> suggestedInsertionIds) {
    this.suggestedInsertionIds = suggestedInsertionIds;
    return this;
  }

  public TableRow addSuggestedInsertionIdsItem(String suggestedInsertionIdsItem) {
    if (this.suggestedInsertionIds == null) {
      this.suggestedInsertionIds = new ArrayList<>();
    }
    this.suggestedInsertionIds.add(suggestedInsertionIdsItem);
    return this;
  }

  /**
   * The suggested insertion IDs. A TableRow may have multiple insertion IDs if it&#39;s a nested suggested change. If empty, then this is not a suggested insertion.
   * @return suggestedInsertionIds
   */
  @javax.annotation.Nullable
  public List<String> getSuggestedInsertionIds() {
    return suggestedInsertionIds;
  }

  public void setSuggestedInsertionIds(List<String> suggestedInsertionIds) {
    this.suggestedInsertionIds = suggestedInsertionIds;
  }


  public TableRow suggestedTableRowStyleChanges(Map<String, SuggestedTableRowStyle> suggestedTableRowStyleChanges) {
    this.suggestedTableRowStyleChanges = suggestedTableRowStyleChanges;
    return this;
  }

  public TableRow putSuggestedTableRowStyleChangesItem(String key, SuggestedTableRowStyle suggestedTableRowStyleChangesItem) {
    if (this.suggestedTableRowStyleChanges == null) {
      this.suggestedTableRowStyleChanges = new HashMap<>();
    }
    this.suggestedTableRowStyleChanges.put(key, suggestedTableRowStyleChangesItem);
    return this;
  }

  /**
   * The suggested style changes to this row, keyed by suggestion ID.
   * @return suggestedTableRowStyleChanges
   */
  @javax.annotation.Nullable
  public Map<String, SuggestedTableRowStyle> getSuggestedTableRowStyleChanges() {
    return suggestedTableRowStyleChanges;
  }

  public void setSuggestedTableRowStyleChanges(Map<String, SuggestedTableRowStyle> suggestedTableRowStyleChanges) {
    this.suggestedTableRowStyleChanges = suggestedTableRowStyleChanges;
  }


  public TableRow tableCells(List<TableCell> tableCells) {
    this.tableCells = tableCells;
    return this;
  }

  public TableRow addTableCellsItem(TableCell tableCellsItem) {
    if (this.tableCells == null) {
      this.tableCells = new ArrayList<>();
    }
    this.tableCells.add(tableCellsItem);
    return this;
  }

  /**
   * The contents and style of each cell in this row. It&#39;s possible for a table to be non-rectangular, so some rows may have a different number of cells than other rows in the same table.
   * @return tableCells
   */
  @javax.annotation.Nullable
  public List<TableCell> getTableCells() {
    return tableCells;
  }

  public void setTableCells(List<TableCell> tableCells) {
    this.tableCells = tableCells;
  }


  public TableRow tableRowStyle(TableRowStyle tableRowStyle) {
    this.tableRowStyle = tableRowStyle;
    return this;
  }

  /**
   * Get tableRowStyle
   * @return tableRowStyle
   */
  @javax.annotation.Nullable
  public TableRowStyle getTableRowStyle() {
    return tableRowStyle;
  }

  public void setTableRowStyle(TableRowStyle tableRowStyle) {
    this.tableRowStyle = tableRowStyle;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TableRow tableRow = (TableRow) o;
    return Objects.equals(this.endIndex, tableRow.endIndex) &&
        Objects.equals(this.startIndex, tableRow.startIndex) &&
        Objects.equals(this.suggestedDeletionIds, tableRow.suggestedDeletionIds) &&
        Objects.equals(this.suggestedInsertionIds, tableRow.suggestedInsertionIds) &&
        Objects.equals(this.suggestedTableRowStyleChanges, tableRow.suggestedTableRowStyleChanges) &&
        Objects.equals(this.tableCells, tableRow.tableCells) &&
        Objects.equals(this.tableRowStyle, tableRow.tableRowStyle);
  }

  @Override
  public int hashCode() {
    return Objects.hash(endIndex, startIndex, suggestedDeletionIds, suggestedInsertionIds, suggestedTableRowStyleChanges, tableCells, tableRowStyle);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TableRow {\n");
    sb.append("    endIndex: ").append(toIndentedString(endIndex)).append("\n");
    sb.append("    startIndex: ").append(toIndentedString(startIndex)).append("\n");
    sb.append("    suggestedDeletionIds: ").append(toIndentedString(suggestedDeletionIds)).append("\n");
    sb.append("    suggestedInsertionIds: ").append(toIndentedString(suggestedInsertionIds)).append("\n");
    sb.append("    suggestedTableRowStyleChanges: ").append(toIndentedString(suggestedTableRowStyleChanges)).append("\n");
    sb.append("    tableCells: ").append(toIndentedString(tableCells)).append("\n");
    sb.append("    tableRowStyle: ").append(toIndentedString(tableRowStyle)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("endIndex");
    openapiFields.add("startIndex");
    openapiFields.add("suggestedDeletionIds");
    openapiFields.add("suggestedInsertionIds");
    openapiFields.add("suggestedTableRowStyleChanges");
    openapiFields.add("tableCells");
    openapiFields.add("tableRowStyle");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TableRow
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TableRow.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TableRow is not found in the empty JSON string", TableRow.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TableRow.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TableRow` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("suggestedDeletionIds") != null && !jsonObj.get("suggestedDeletionIds").isJsonNull() && !jsonObj.get("suggestedDeletionIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `suggestedDeletionIds` to be an array in the JSON string but got `%s`", jsonObj.get("suggestedDeletionIds").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("suggestedInsertionIds") != null && !jsonObj.get("suggestedInsertionIds").isJsonNull() && !jsonObj.get("suggestedInsertionIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `suggestedInsertionIds` to be an array in the JSON string but got `%s`", jsonObj.get("suggestedInsertionIds").toString()));
      }
      if (jsonObj.get("tableCells") != null && !jsonObj.get("tableCells").isJsonNull()) {
        JsonArray jsonArraytableCells = jsonObj.getAsJsonArray("tableCells");
        if (jsonArraytableCells != null) {
          // ensure the json data is an array
          if (!jsonObj.get("tableCells").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `tableCells` to be an array in the JSON string but got `%s`", jsonObj.get("tableCells").toString()));
          }

          // validate the optional field `tableCells` (array)
          for (int i = 0; i < jsonArraytableCells.size(); i++) {
            TableCell.validateJsonElement(jsonArraytableCells.get(i));
          };
        }
      }
      // validate the optional field `tableRowStyle`
      if (jsonObj.get("tableRowStyle") != null && !jsonObj.get("tableRowStyle").isJsonNull()) {
        TableRowStyle.validateJsonElement(jsonObj.get("tableRowStyle"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TableRow.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TableRow' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TableRow> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TableRow.class));

       return (TypeAdapter<T>) new TypeAdapter<TableRow>() {
           @Override
           public void write(JsonWriter out, TableRow value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TableRow read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TableRow given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TableRow
   * @throws IOException if the JSON string is invalid with respect to TableRow
   */
  public static TableRow fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TableRow.class);
  }

  /**
   * Convert an instance of TableRow to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

