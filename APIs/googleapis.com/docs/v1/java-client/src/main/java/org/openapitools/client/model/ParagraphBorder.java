/*
 * Google Docs API
 * Reads and writes Google Docs documents.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Dimension;
import org.openapitools.client.model.OptionalColor;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A border around a paragraph.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:47:07.584674-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ParagraphBorder {
  public static final String SERIALIZED_NAME_COLOR = "color";
  @SerializedName(SERIALIZED_NAME_COLOR)
  private OptionalColor color;

  /**
   * The dash style of the border.
   */
  @JsonAdapter(DashStyleEnum.Adapter.class)
  public enum DashStyleEnum {
    DASH_STYLE_UNSPECIFIED("DASH_STYLE_UNSPECIFIED"),
    
    SOLID("SOLID"),
    
    DOT("DOT"),
    
    DASH("DASH");

    private String value;

    DashStyleEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DashStyleEnum fromValue(String value) {
      for (DashStyleEnum b : DashStyleEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DashStyleEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DashStyleEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DashStyleEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DashStyleEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DashStyleEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DASH_STYLE = "dashStyle";
  @SerializedName(SERIALIZED_NAME_DASH_STYLE)
  private DashStyleEnum dashStyle;

  public static final String SERIALIZED_NAME_PADDING = "padding";
  @SerializedName(SERIALIZED_NAME_PADDING)
  private Dimension padding;

  public static final String SERIALIZED_NAME_WIDTH = "width";
  @SerializedName(SERIALIZED_NAME_WIDTH)
  private Dimension width;

  public ParagraphBorder() {
  }

  public ParagraphBorder color(OptionalColor color) {
    this.color = color;
    return this;
  }

  /**
   * Get color
   * @return color
   */
  @javax.annotation.Nullable
  public OptionalColor getColor() {
    return color;
  }

  public void setColor(OptionalColor color) {
    this.color = color;
  }


  public ParagraphBorder dashStyle(DashStyleEnum dashStyle) {
    this.dashStyle = dashStyle;
    return this;
  }

  /**
   * The dash style of the border.
   * @return dashStyle
   */
  @javax.annotation.Nullable
  public DashStyleEnum getDashStyle() {
    return dashStyle;
  }

  public void setDashStyle(DashStyleEnum dashStyle) {
    this.dashStyle = dashStyle;
  }


  public ParagraphBorder padding(Dimension padding) {
    this.padding = padding;
    return this;
  }

  /**
   * Get padding
   * @return padding
   */
  @javax.annotation.Nullable
  public Dimension getPadding() {
    return padding;
  }

  public void setPadding(Dimension padding) {
    this.padding = padding;
  }


  public ParagraphBorder width(Dimension width) {
    this.width = width;
    return this;
  }

  /**
   * Get width
   * @return width
   */
  @javax.annotation.Nullable
  public Dimension getWidth() {
    return width;
  }

  public void setWidth(Dimension width) {
    this.width = width;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ParagraphBorder paragraphBorder = (ParagraphBorder) o;
    return Objects.equals(this.color, paragraphBorder.color) &&
        Objects.equals(this.dashStyle, paragraphBorder.dashStyle) &&
        Objects.equals(this.padding, paragraphBorder.padding) &&
        Objects.equals(this.width, paragraphBorder.width);
  }

  @Override
  public int hashCode() {
    return Objects.hash(color, dashStyle, padding, width);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ParagraphBorder {\n");
    sb.append("    color: ").append(toIndentedString(color)).append("\n");
    sb.append("    dashStyle: ").append(toIndentedString(dashStyle)).append("\n");
    sb.append("    padding: ").append(toIndentedString(padding)).append("\n");
    sb.append("    width: ").append(toIndentedString(width)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("color");
    openapiFields.add("dashStyle");
    openapiFields.add("padding");
    openapiFields.add("width");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ParagraphBorder
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ParagraphBorder.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ParagraphBorder is not found in the empty JSON string", ParagraphBorder.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ParagraphBorder.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ParagraphBorder` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `color`
      if (jsonObj.get("color") != null && !jsonObj.get("color").isJsonNull()) {
        OptionalColor.validateJsonElement(jsonObj.get("color"));
      }
      if ((jsonObj.get("dashStyle") != null && !jsonObj.get("dashStyle").isJsonNull()) && !jsonObj.get("dashStyle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dashStyle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dashStyle").toString()));
      }
      // validate the optional field `dashStyle`
      if (jsonObj.get("dashStyle") != null && !jsonObj.get("dashStyle").isJsonNull()) {
        DashStyleEnum.validateJsonElement(jsonObj.get("dashStyle"));
      }
      // validate the optional field `padding`
      if (jsonObj.get("padding") != null && !jsonObj.get("padding").isJsonNull()) {
        Dimension.validateJsonElement(jsonObj.get("padding"));
      }
      // validate the optional field `width`
      if (jsonObj.get("width") != null && !jsonObj.get("width").isJsonNull()) {
        Dimension.validateJsonElement(jsonObj.get("width"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ParagraphBorder.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ParagraphBorder' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ParagraphBorder> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ParagraphBorder.class));

       return (TypeAdapter<T>) new TypeAdapter<ParagraphBorder>() {
           @Override
           public void write(JsonWriter out, ParagraphBorder value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ParagraphBorder read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ParagraphBorder given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ParagraphBorder
   * @throws IOException if the JSON string is invalid with respect to ParagraphBorder
   */
  public static ParagraphBorder fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ParagraphBorder.class);
  }

  /**
   * Convert an instance of ParagraphBorder to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

