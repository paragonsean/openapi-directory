/*
 * Google Docs API
 * Reads and writes Google Docs documents.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CropPropertiesSuggestionState;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A mask that indicates which of the fields on the base ImageProperties have been changed in this suggestion. For any field set to true, there&#39;s a new suggested value.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:47:07.584674-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ImagePropertiesSuggestionState {
  public static final String SERIALIZED_NAME_ANGLE_SUGGESTED = "angleSuggested";
  @SerializedName(SERIALIZED_NAME_ANGLE_SUGGESTED)
  private Boolean angleSuggested;

  public static final String SERIALIZED_NAME_BRIGHTNESS_SUGGESTED = "brightnessSuggested";
  @SerializedName(SERIALIZED_NAME_BRIGHTNESS_SUGGESTED)
  private Boolean brightnessSuggested;

  public static final String SERIALIZED_NAME_CONTENT_URI_SUGGESTED = "contentUriSuggested";
  @SerializedName(SERIALIZED_NAME_CONTENT_URI_SUGGESTED)
  private Boolean contentUriSuggested;

  public static final String SERIALIZED_NAME_CONTRAST_SUGGESTED = "contrastSuggested";
  @SerializedName(SERIALIZED_NAME_CONTRAST_SUGGESTED)
  private Boolean contrastSuggested;

  public static final String SERIALIZED_NAME_CROP_PROPERTIES_SUGGESTION_STATE = "cropPropertiesSuggestionState";
  @SerializedName(SERIALIZED_NAME_CROP_PROPERTIES_SUGGESTION_STATE)
  private CropPropertiesSuggestionState cropPropertiesSuggestionState;

  public static final String SERIALIZED_NAME_SOURCE_URI_SUGGESTED = "sourceUriSuggested";
  @SerializedName(SERIALIZED_NAME_SOURCE_URI_SUGGESTED)
  private Boolean sourceUriSuggested;

  public static final String SERIALIZED_NAME_TRANSPARENCY_SUGGESTED = "transparencySuggested";
  @SerializedName(SERIALIZED_NAME_TRANSPARENCY_SUGGESTED)
  private Boolean transparencySuggested;

  public ImagePropertiesSuggestionState() {
  }

  public ImagePropertiesSuggestionState angleSuggested(Boolean angleSuggested) {
    this.angleSuggested = angleSuggested;
    return this;
  }

  /**
   * Indicates if there was a suggested change to angle.
   * @return angleSuggested
   */
  @javax.annotation.Nullable
  public Boolean getAngleSuggested() {
    return angleSuggested;
  }

  public void setAngleSuggested(Boolean angleSuggested) {
    this.angleSuggested = angleSuggested;
  }


  public ImagePropertiesSuggestionState brightnessSuggested(Boolean brightnessSuggested) {
    this.brightnessSuggested = brightnessSuggested;
    return this;
  }

  /**
   * Indicates if there was a suggested change to brightness.
   * @return brightnessSuggested
   */
  @javax.annotation.Nullable
  public Boolean getBrightnessSuggested() {
    return brightnessSuggested;
  }

  public void setBrightnessSuggested(Boolean brightnessSuggested) {
    this.brightnessSuggested = brightnessSuggested;
  }


  public ImagePropertiesSuggestionState contentUriSuggested(Boolean contentUriSuggested) {
    this.contentUriSuggested = contentUriSuggested;
    return this;
  }

  /**
   * Indicates if there was a suggested change to content_uri.
   * @return contentUriSuggested
   */
  @javax.annotation.Nullable
  public Boolean getContentUriSuggested() {
    return contentUriSuggested;
  }

  public void setContentUriSuggested(Boolean contentUriSuggested) {
    this.contentUriSuggested = contentUriSuggested;
  }


  public ImagePropertiesSuggestionState contrastSuggested(Boolean contrastSuggested) {
    this.contrastSuggested = contrastSuggested;
    return this;
  }

  /**
   * Indicates if there was a suggested change to contrast.
   * @return contrastSuggested
   */
  @javax.annotation.Nullable
  public Boolean getContrastSuggested() {
    return contrastSuggested;
  }

  public void setContrastSuggested(Boolean contrastSuggested) {
    this.contrastSuggested = contrastSuggested;
  }


  public ImagePropertiesSuggestionState cropPropertiesSuggestionState(CropPropertiesSuggestionState cropPropertiesSuggestionState) {
    this.cropPropertiesSuggestionState = cropPropertiesSuggestionState;
    return this;
  }

  /**
   * Get cropPropertiesSuggestionState
   * @return cropPropertiesSuggestionState
   */
  @javax.annotation.Nullable
  public CropPropertiesSuggestionState getCropPropertiesSuggestionState() {
    return cropPropertiesSuggestionState;
  }

  public void setCropPropertiesSuggestionState(CropPropertiesSuggestionState cropPropertiesSuggestionState) {
    this.cropPropertiesSuggestionState = cropPropertiesSuggestionState;
  }


  public ImagePropertiesSuggestionState sourceUriSuggested(Boolean sourceUriSuggested) {
    this.sourceUriSuggested = sourceUriSuggested;
    return this;
  }

  /**
   * Indicates if there was a suggested change to source_uri.
   * @return sourceUriSuggested
   */
  @javax.annotation.Nullable
  public Boolean getSourceUriSuggested() {
    return sourceUriSuggested;
  }

  public void setSourceUriSuggested(Boolean sourceUriSuggested) {
    this.sourceUriSuggested = sourceUriSuggested;
  }


  public ImagePropertiesSuggestionState transparencySuggested(Boolean transparencySuggested) {
    this.transparencySuggested = transparencySuggested;
    return this;
  }

  /**
   * Indicates if there was a suggested change to transparency.
   * @return transparencySuggested
   */
  @javax.annotation.Nullable
  public Boolean getTransparencySuggested() {
    return transparencySuggested;
  }

  public void setTransparencySuggested(Boolean transparencySuggested) {
    this.transparencySuggested = transparencySuggested;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ImagePropertiesSuggestionState imagePropertiesSuggestionState = (ImagePropertiesSuggestionState) o;
    return Objects.equals(this.angleSuggested, imagePropertiesSuggestionState.angleSuggested) &&
        Objects.equals(this.brightnessSuggested, imagePropertiesSuggestionState.brightnessSuggested) &&
        Objects.equals(this.contentUriSuggested, imagePropertiesSuggestionState.contentUriSuggested) &&
        Objects.equals(this.contrastSuggested, imagePropertiesSuggestionState.contrastSuggested) &&
        Objects.equals(this.cropPropertiesSuggestionState, imagePropertiesSuggestionState.cropPropertiesSuggestionState) &&
        Objects.equals(this.sourceUriSuggested, imagePropertiesSuggestionState.sourceUriSuggested) &&
        Objects.equals(this.transparencySuggested, imagePropertiesSuggestionState.transparencySuggested);
  }

  @Override
  public int hashCode() {
    return Objects.hash(angleSuggested, brightnessSuggested, contentUriSuggested, contrastSuggested, cropPropertiesSuggestionState, sourceUriSuggested, transparencySuggested);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ImagePropertiesSuggestionState {\n");
    sb.append("    angleSuggested: ").append(toIndentedString(angleSuggested)).append("\n");
    sb.append("    brightnessSuggested: ").append(toIndentedString(brightnessSuggested)).append("\n");
    sb.append("    contentUriSuggested: ").append(toIndentedString(contentUriSuggested)).append("\n");
    sb.append("    contrastSuggested: ").append(toIndentedString(contrastSuggested)).append("\n");
    sb.append("    cropPropertiesSuggestionState: ").append(toIndentedString(cropPropertiesSuggestionState)).append("\n");
    sb.append("    sourceUriSuggested: ").append(toIndentedString(sourceUriSuggested)).append("\n");
    sb.append("    transparencySuggested: ").append(toIndentedString(transparencySuggested)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("angleSuggested");
    openapiFields.add("brightnessSuggested");
    openapiFields.add("contentUriSuggested");
    openapiFields.add("contrastSuggested");
    openapiFields.add("cropPropertiesSuggestionState");
    openapiFields.add("sourceUriSuggested");
    openapiFields.add("transparencySuggested");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ImagePropertiesSuggestionState
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ImagePropertiesSuggestionState.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ImagePropertiesSuggestionState is not found in the empty JSON string", ImagePropertiesSuggestionState.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ImagePropertiesSuggestionState.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ImagePropertiesSuggestionState` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `cropPropertiesSuggestionState`
      if (jsonObj.get("cropPropertiesSuggestionState") != null && !jsonObj.get("cropPropertiesSuggestionState").isJsonNull()) {
        CropPropertiesSuggestionState.validateJsonElement(jsonObj.get("cropPropertiesSuggestionState"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ImagePropertiesSuggestionState.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ImagePropertiesSuggestionState' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ImagePropertiesSuggestionState> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ImagePropertiesSuggestionState.class));

       return (TypeAdapter<T>) new TypeAdapter<ImagePropertiesSuggestionState>() {
           @Override
           public void write(JsonWriter out, ImagePropertiesSuggestionState value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ImagePropertiesSuggestionState read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ImagePropertiesSuggestionState given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ImagePropertiesSuggestionState
   * @throws IOException if the JSON string is invalid with respect to ImagePropertiesSuggestionState
   */
  public static ImagePropertiesSuggestionState fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ImagePropertiesSuggestionState.class);
  }

  /**
   * Convert an instance of ImagePropertiesSuggestionState to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

