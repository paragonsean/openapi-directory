/*
 * Google Docs API
 * Reads and writes Google Docs documents.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A mask that indicates which of the fields on the base TableCellStyle have been changed in this suggestion. For any field set to true, there&#39;s a new suggested value.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:47:07.584674-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TableCellStyleSuggestionState {
  public static final String SERIALIZED_NAME_BACKGROUND_COLOR_SUGGESTED = "backgroundColorSuggested";
  @SerializedName(SERIALIZED_NAME_BACKGROUND_COLOR_SUGGESTED)
  private Boolean backgroundColorSuggested;

  public static final String SERIALIZED_NAME_BORDER_BOTTOM_SUGGESTED = "borderBottomSuggested";
  @SerializedName(SERIALIZED_NAME_BORDER_BOTTOM_SUGGESTED)
  private Boolean borderBottomSuggested;

  public static final String SERIALIZED_NAME_BORDER_LEFT_SUGGESTED = "borderLeftSuggested";
  @SerializedName(SERIALIZED_NAME_BORDER_LEFT_SUGGESTED)
  private Boolean borderLeftSuggested;

  public static final String SERIALIZED_NAME_BORDER_RIGHT_SUGGESTED = "borderRightSuggested";
  @SerializedName(SERIALIZED_NAME_BORDER_RIGHT_SUGGESTED)
  private Boolean borderRightSuggested;

  public static final String SERIALIZED_NAME_BORDER_TOP_SUGGESTED = "borderTopSuggested";
  @SerializedName(SERIALIZED_NAME_BORDER_TOP_SUGGESTED)
  private Boolean borderTopSuggested;

  public static final String SERIALIZED_NAME_COLUMN_SPAN_SUGGESTED = "columnSpanSuggested";
  @SerializedName(SERIALIZED_NAME_COLUMN_SPAN_SUGGESTED)
  private Boolean columnSpanSuggested;

  public static final String SERIALIZED_NAME_CONTENT_ALIGNMENT_SUGGESTED = "contentAlignmentSuggested";
  @SerializedName(SERIALIZED_NAME_CONTENT_ALIGNMENT_SUGGESTED)
  private Boolean contentAlignmentSuggested;

  public static final String SERIALIZED_NAME_PADDING_BOTTOM_SUGGESTED = "paddingBottomSuggested";
  @SerializedName(SERIALIZED_NAME_PADDING_BOTTOM_SUGGESTED)
  private Boolean paddingBottomSuggested;

  public static final String SERIALIZED_NAME_PADDING_LEFT_SUGGESTED = "paddingLeftSuggested";
  @SerializedName(SERIALIZED_NAME_PADDING_LEFT_SUGGESTED)
  private Boolean paddingLeftSuggested;

  public static final String SERIALIZED_NAME_PADDING_RIGHT_SUGGESTED = "paddingRightSuggested";
  @SerializedName(SERIALIZED_NAME_PADDING_RIGHT_SUGGESTED)
  private Boolean paddingRightSuggested;

  public static final String SERIALIZED_NAME_PADDING_TOP_SUGGESTED = "paddingTopSuggested";
  @SerializedName(SERIALIZED_NAME_PADDING_TOP_SUGGESTED)
  private Boolean paddingTopSuggested;

  public static final String SERIALIZED_NAME_ROW_SPAN_SUGGESTED = "rowSpanSuggested";
  @SerializedName(SERIALIZED_NAME_ROW_SPAN_SUGGESTED)
  private Boolean rowSpanSuggested;

  public TableCellStyleSuggestionState() {
  }

  public TableCellStyleSuggestionState backgroundColorSuggested(Boolean backgroundColorSuggested) {
    this.backgroundColorSuggested = backgroundColorSuggested;
    return this;
  }

  /**
   * Indicates if there was a suggested change to background_color.
   * @return backgroundColorSuggested
   */
  @javax.annotation.Nullable
  public Boolean getBackgroundColorSuggested() {
    return backgroundColorSuggested;
  }

  public void setBackgroundColorSuggested(Boolean backgroundColorSuggested) {
    this.backgroundColorSuggested = backgroundColorSuggested;
  }


  public TableCellStyleSuggestionState borderBottomSuggested(Boolean borderBottomSuggested) {
    this.borderBottomSuggested = borderBottomSuggested;
    return this;
  }

  /**
   * Indicates if there was a suggested change to border_bottom.
   * @return borderBottomSuggested
   */
  @javax.annotation.Nullable
  public Boolean getBorderBottomSuggested() {
    return borderBottomSuggested;
  }

  public void setBorderBottomSuggested(Boolean borderBottomSuggested) {
    this.borderBottomSuggested = borderBottomSuggested;
  }


  public TableCellStyleSuggestionState borderLeftSuggested(Boolean borderLeftSuggested) {
    this.borderLeftSuggested = borderLeftSuggested;
    return this;
  }

  /**
   * Indicates if there was a suggested change to border_left.
   * @return borderLeftSuggested
   */
  @javax.annotation.Nullable
  public Boolean getBorderLeftSuggested() {
    return borderLeftSuggested;
  }

  public void setBorderLeftSuggested(Boolean borderLeftSuggested) {
    this.borderLeftSuggested = borderLeftSuggested;
  }


  public TableCellStyleSuggestionState borderRightSuggested(Boolean borderRightSuggested) {
    this.borderRightSuggested = borderRightSuggested;
    return this;
  }

  /**
   * Indicates if there was a suggested change to border_right.
   * @return borderRightSuggested
   */
  @javax.annotation.Nullable
  public Boolean getBorderRightSuggested() {
    return borderRightSuggested;
  }

  public void setBorderRightSuggested(Boolean borderRightSuggested) {
    this.borderRightSuggested = borderRightSuggested;
  }


  public TableCellStyleSuggestionState borderTopSuggested(Boolean borderTopSuggested) {
    this.borderTopSuggested = borderTopSuggested;
    return this;
  }

  /**
   * Indicates if there was a suggested change to border_top.
   * @return borderTopSuggested
   */
  @javax.annotation.Nullable
  public Boolean getBorderTopSuggested() {
    return borderTopSuggested;
  }

  public void setBorderTopSuggested(Boolean borderTopSuggested) {
    this.borderTopSuggested = borderTopSuggested;
  }


  public TableCellStyleSuggestionState columnSpanSuggested(Boolean columnSpanSuggested) {
    this.columnSpanSuggested = columnSpanSuggested;
    return this;
  }

  /**
   * Indicates if there was a suggested change to column_span.
   * @return columnSpanSuggested
   */
  @javax.annotation.Nullable
  public Boolean getColumnSpanSuggested() {
    return columnSpanSuggested;
  }

  public void setColumnSpanSuggested(Boolean columnSpanSuggested) {
    this.columnSpanSuggested = columnSpanSuggested;
  }


  public TableCellStyleSuggestionState contentAlignmentSuggested(Boolean contentAlignmentSuggested) {
    this.contentAlignmentSuggested = contentAlignmentSuggested;
    return this;
  }

  /**
   * Indicates if there was a suggested change to content_alignment.
   * @return contentAlignmentSuggested
   */
  @javax.annotation.Nullable
  public Boolean getContentAlignmentSuggested() {
    return contentAlignmentSuggested;
  }

  public void setContentAlignmentSuggested(Boolean contentAlignmentSuggested) {
    this.contentAlignmentSuggested = contentAlignmentSuggested;
  }


  public TableCellStyleSuggestionState paddingBottomSuggested(Boolean paddingBottomSuggested) {
    this.paddingBottomSuggested = paddingBottomSuggested;
    return this;
  }

  /**
   * Indicates if there was a suggested change to padding_bottom.
   * @return paddingBottomSuggested
   */
  @javax.annotation.Nullable
  public Boolean getPaddingBottomSuggested() {
    return paddingBottomSuggested;
  }

  public void setPaddingBottomSuggested(Boolean paddingBottomSuggested) {
    this.paddingBottomSuggested = paddingBottomSuggested;
  }


  public TableCellStyleSuggestionState paddingLeftSuggested(Boolean paddingLeftSuggested) {
    this.paddingLeftSuggested = paddingLeftSuggested;
    return this;
  }

  /**
   * Indicates if there was a suggested change to padding_left.
   * @return paddingLeftSuggested
   */
  @javax.annotation.Nullable
  public Boolean getPaddingLeftSuggested() {
    return paddingLeftSuggested;
  }

  public void setPaddingLeftSuggested(Boolean paddingLeftSuggested) {
    this.paddingLeftSuggested = paddingLeftSuggested;
  }


  public TableCellStyleSuggestionState paddingRightSuggested(Boolean paddingRightSuggested) {
    this.paddingRightSuggested = paddingRightSuggested;
    return this;
  }

  /**
   * Indicates if there was a suggested change to padding_right.
   * @return paddingRightSuggested
   */
  @javax.annotation.Nullable
  public Boolean getPaddingRightSuggested() {
    return paddingRightSuggested;
  }

  public void setPaddingRightSuggested(Boolean paddingRightSuggested) {
    this.paddingRightSuggested = paddingRightSuggested;
  }


  public TableCellStyleSuggestionState paddingTopSuggested(Boolean paddingTopSuggested) {
    this.paddingTopSuggested = paddingTopSuggested;
    return this;
  }

  /**
   * Indicates if there was a suggested change to padding_top.
   * @return paddingTopSuggested
   */
  @javax.annotation.Nullable
  public Boolean getPaddingTopSuggested() {
    return paddingTopSuggested;
  }

  public void setPaddingTopSuggested(Boolean paddingTopSuggested) {
    this.paddingTopSuggested = paddingTopSuggested;
  }


  public TableCellStyleSuggestionState rowSpanSuggested(Boolean rowSpanSuggested) {
    this.rowSpanSuggested = rowSpanSuggested;
    return this;
  }

  /**
   * Indicates if there was a suggested change to row_span.
   * @return rowSpanSuggested
   */
  @javax.annotation.Nullable
  public Boolean getRowSpanSuggested() {
    return rowSpanSuggested;
  }

  public void setRowSpanSuggested(Boolean rowSpanSuggested) {
    this.rowSpanSuggested = rowSpanSuggested;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TableCellStyleSuggestionState tableCellStyleSuggestionState = (TableCellStyleSuggestionState) o;
    return Objects.equals(this.backgroundColorSuggested, tableCellStyleSuggestionState.backgroundColorSuggested) &&
        Objects.equals(this.borderBottomSuggested, tableCellStyleSuggestionState.borderBottomSuggested) &&
        Objects.equals(this.borderLeftSuggested, tableCellStyleSuggestionState.borderLeftSuggested) &&
        Objects.equals(this.borderRightSuggested, tableCellStyleSuggestionState.borderRightSuggested) &&
        Objects.equals(this.borderTopSuggested, tableCellStyleSuggestionState.borderTopSuggested) &&
        Objects.equals(this.columnSpanSuggested, tableCellStyleSuggestionState.columnSpanSuggested) &&
        Objects.equals(this.contentAlignmentSuggested, tableCellStyleSuggestionState.contentAlignmentSuggested) &&
        Objects.equals(this.paddingBottomSuggested, tableCellStyleSuggestionState.paddingBottomSuggested) &&
        Objects.equals(this.paddingLeftSuggested, tableCellStyleSuggestionState.paddingLeftSuggested) &&
        Objects.equals(this.paddingRightSuggested, tableCellStyleSuggestionState.paddingRightSuggested) &&
        Objects.equals(this.paddingTopSuggested, tableCellStyleSuggestionState.paddingTopSuggested) &&
        Objects.equals(this.rowSpanSuggested, tableCellStyleSuggestionState.rowSpanSuggested);
  }

  @Override
  public int hashCode() {
    return Objects.hash(backgroundColorSuggested, borderBottomSuggested, borderLeftSuggested, borderRightSuggested, borderTopSuggested, columnSpanSuggested, contentAlignmentSuggested, paddingBottomSuggested, paddingLeftSuggested, paddingRightSuggested, paddingTopSuggested, rowSpanSuggested);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TableCellStyleSuggestionState {\n");
    sb.append("    backgroundColorSuggested: ").append(toIndentedString(backgroundColorSuggested)).append("\n");
    sb.append("    borderBottomSuggested: ").append(toIndentedString(borderBottomSuggested)).append("\n");
    sb.append("    borderLeftSuggested: ").append(toIndentedString(borderLeftSuggested)).append("\n");
    sb.append("    borderRightSuggested: ").append(toIndentedString(borderRightSuggested)).append("\n");
    sb.append("    borderTopSuggested: ").append(toIndentedString(borderTopSuggested)).append("\n");
    sb.append("    columnSpanSuggested: ").append(toIndentedString(columnSpanSuggested)).append("\n");
    sb.append("    contentAlignmentSuggested: ").append(toIndentedString(contentAlignmentSuggested)).append("\n");
    sb.append("    paddingBottomSuggested: ").append(toIndentedString(paddingBottomSuggested)).append("\n");
    sb.append("    paddingLeftSuggested: ").append(toIndentedString(paddingLeftSuggested)).append("\n");
    sb.append("    paddingRightSuggested: ").append(toIndentedString(paddingRightSuggested)).append("\n");
    sb.append("    paddingTopSuggested: ").append(toIndentedString(paddingTopSuggested)).append("\n");
    sb.append("    rowSpanSuggested: ").append(toIndentedString(rowSpanSuggested)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("backgroundColorSuggested");
    openapiFields.add("borderBottomSuggested");
    openapiFields.add("borderLeftSuggested");
    openapiFields.add("borderRightSuggested");
    openapiFields.add("borderTopSuggested");
    openapiFields.add("columnSpanSuggested");
    openapiFields.add("contentAlignmentSuggested");
    openapiFields.add("paddingBottomSuggested");
    openapiFields.add("paddingLeftSuggested");
    openapiFields.add("paddingRightSuggested");
    openapiFields.add("paddingTopSuggested");
    openapiFields.add("rowSpanSuggested");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TableCellStyleSuggestionState
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TableCellStyleSuggestionState.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TableCellStyleSuggestionState is not found in the empty JSON string", TableCellStyleSuggestionState.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TableCellStyleSuggestionState.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TableCellStyleSuggestionState` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TableCellStyleSuggestionState.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TableCellStyleSuggestionState' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TableCellStyleSuggestionState> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TableCellStyleSuggestionState.class));

       return (TypeAdapter<T>) new TypeAdapter<TableCellStyleSuggestionState>() {
           @Override
           public void write(JsonWriter out, TableCellStyleSuggestionState value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TableCellStyleSuggestionState read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TableCellStyleSuggestionState given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TableCellStyleSuggestionState
   * @throws IOException if the JSON string is invalid with respect to TableCellStyleSuggestionState
   */
  public static TableCellStyleSuggestionState fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TableCellStyleSuggestionState.class);
  }

  /**
   * Convert an instance of TableCellStyleSuggestionState to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

