/*
 * Google Docs API
 * Reads and writes Google Docs documents.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Dimension;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The positioning of a PositionedObject. The positioned object is positioned relative to the beginning of the Paragraph it&#39;s tethered to.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:47:07.584674-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PositionedObjectPositioning {
  /**
   * The layout of this positioned object.
   */
  @JsonAdapter(LayoutEnum.Adapter.class)
  public enum LayoutEnum {
    POSITIONED_OBJECT_LAYOUT_UNSPECIFIED("POSITIONED_OBJECT_LAYOUT_UNSPECIFIED"),
    
    WRAP_TEXT("WRAP_TEXT"),
    
    BREAK_LEFT("BREAK_LEFT"),
    
    BREAK_RIGHT("BREAK_RIGHT"),
    
    BREAK_LEFT_RIGHT("BREAK_LEFT_RIGHT"),
    
    IN_FRONT_OF_TEXT("IN_FRONT_OF_TEXT"),
    
    BEHIND_TEXT("BEHIND_TEXT");

    private String value;

    LayoutEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LayoutEnum fromValue(String value) {
      for (LayoutEnum b : LayoutEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LayoutEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LayoutEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LayoutEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LayoutEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LayoutEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LAYOUT = "layout";
  @SerializedName(SERIALIZED_NAME_LAYOUT)
  private LayoutEnum layout;

  public static final String SERIALIZED_NAME_LEFT_OFFSET = "leftOffset";
  @SerializedName(SERIALIZED_NAME_LEFT_OFFSET)
  private Dimension leftOffset;

  public static final String SERIALIZED_NAME_TOP_OFFSET = "topOffset";
  @SerializedName(SERIALIZED_NAME_TOP_OFFSET)
  private Dimension topOffset;

  public PositionedObjectPositioning() {
  }

  public PositionedObjectPositioning layout(LayoutEnum layout) {
    this.layout = layout;
    return this;
  }

  /**
   * The layout of this positioned object.
   * @return layout
   */
  @javax.annotation.Nullable
  public LayoutEnum getLayout() {
    return layout;
  }

  public void setLayout(LayoutEnum layout) {
    this.layout = layout;
  }


  public PositionedObjectPositioning leftOffset(Dimension leftOffset) {
    this.leftOffset = leftOffset;
    return this;
  }

  /**
   * Get leftOffset
   * @return leftOffset
   */
  @javax.annotation.Nullable
  public Dimension getLeftOffset() {
    return leftOffset;
  }

  public void setLeftOffset(Dimension leftOffset) {
    this.leftOffset = leftOffset;
  }


  public PositionedObjectPositioning topOffset(Dimension topOffset) {
    this.topOffset = topOffset;
    return this;
  }

  /**
   * Get topOffset
   * @return topOffset
   */
  @javax.annotation.Nullable
  public Dimension getTopOffset() {
    return topOffset;
  }

  public void setTopOffset(Dimension topOffset) {
    this.topOffset = topOffset;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PositionedObjectPositioning positionedObjectPositioning = (PositionedObjectPositioning) o;
    return Objects.equals(this.layout, positionedObjectPositioning.layout) &&
        Objects.equals(this.leftOffset, positionedObjectPositioning.leftOffset) &&
        Objects.equals(this.topOffset, positionedObjectPositioning.topOffset);
  }

  @Override
  public int hashCode() {
    return Objects.hash(layout, leftOffset, topOffset);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PositionedObjectPositioning {\n");
    sb.append("    layout: ").append(toIndentedString(layout)).append("\n");
    sb.append("    leftOffset: ").append(toIndentedString(leftOffset)).append("\n");
    sb.append("    topOffset: ").append(toIndentedString(topOffset)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("layout");
    openapiFields.add("leftOffset");
    openapiFields.add("topOffset");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PositionedObjectPositioning
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PositionedObjectPositioning.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PositionedObjectPositioning is not found in the empty JSON string", PositionedObjectPositioning.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PositionedObjectPositioning.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PositionedObjectPositioning` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("layout") != null && !jsonObj.get("layout").isJsonNull()) && !jsonObj.get("layout").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `layout` to be a primitive type in the JSON string but got `%s`", jsonObj.get("layout").toString()));
      }
      // validate the optional field `layout`
      if (jsonObj.get("layout") != null && !jsonObj.get("layout").isJsonNull()) {
        LayoutEnum.validateJsonElement(jsonObj.get("layout"));
      }
      // validate the optional field `leftOffset`
      if (jsonObj.get("leftOffset") != null && !jsonObj.get("leftOffset").isJsonNull()) {
        Dimension.validateJsonElement(jsonObj.get("leftOffset"));
      }
      // validate the optional field `topOffset`
      if (jsonObj.get("topOffset") != null && !jsonObj.get("topOffset").isJsonNull()) {
        Dimension.validateJsonElement(jsonObj.get("topOffset"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PositionedObjectPositioning.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PositionedObjectPositioning' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PositionedObjectPositioning> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PositionedObjectPositioning.class));

       return (TypeAdapter<T>) new TypeAdapter<PositionedObjectPositioning>() {
           @Override
           public void write(JsonWriter out, PositionedObjectPositioning value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PositionedObjectPositioning read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PositionedObjectPositioning given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PositionedObjectPositioning
   * @throws IOException if the JSON string is invalid with respect to PositionedObjectPositioning
   */
  public static PositionedObjectPositioning fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PositionedObjectPositioning.class);
  }

  /**
   * Convert an instance of PositionedObjectPositioning to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

