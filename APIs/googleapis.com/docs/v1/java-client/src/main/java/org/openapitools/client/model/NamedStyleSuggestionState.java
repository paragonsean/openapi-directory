/*
 * Google Docs API
 * Reads and writes Google Docs documents.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ParagraphStyleSuggestionState;
import org.openapitools.client.model.TextStyleSuggestionState;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A suggestion state of a NamedStyle message.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:47:07.584674-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class NamedStyleSuggestionState {
  /**
   * The named style type that this suggestion state corresponds to. This field is provided as a convenience for matching the NamedStyleSuggestionState with its corresponding NamedStyle.
   */
  @JsonAdapter(NamedStyleTypeEnum.Adapter.class)
  public enum NamedStyleTypeEnum {
    NAMED_STYLE_TYPE_UNSPECIFIED("NAMED_STYLE_TYPE_UNSPECIFIED"),
    
    NORMAL_TEXT("NORMAL_TEXT"),
    
    TITLE("TITLE"),
    
    SUBTITLE("SUBTITLE"),
    
    HEADING_1("HEADING_1"),
    
    HEADING_2("HEADING_2"),
    
    HEADING_3("HEADING_3"),
    
    HEADING_4("HEADING_4"),
    
    HEADING_5("HEADING_5"),
    
    HEADING_6("HEADING_6");

    private String value;

    NamedStyleTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static NamedStyleTypeEnum fromValue(String value) {
      for (NamedStyleTypeEnum b : NamedStyleTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<NamedStyleTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final NamedStyleTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public NamedStyleTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return NamedStyleTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      NamedStyleTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_NAMED_STYLE_TYPE = "namedStyleType";
  @SerializedName(SERIALIZED_NAME_NAMED_STYLE_TYPE)
  private NamedStyleTypeEnum namedStyleType;

  public static final String SERIALIZED_NAME_PARAGRAPH_STYLE_SUGGESTION_STATE = "paragraphStyleSuggestionState";
  @SerializedName(SERIALIZED_NAME_PARAGRAPH_STYLE_SUGGESTION_STATE)
  private ParagraphStyleSuggestionState paragraphStyleSuggestionState;

  public static final String SERIALIZED_NAME_TEXT_STYLE_SUGGESTION_STATE = "textStyleSuggestionState";
  @SerializedName(SERIALIZED_NAME_TEXT_STYLE_SUGGESTION_STATE)
  private TextStyleSuggestionState textStyleSuggestionState;

  public NamedStyleSuggestionState() {
  }

  public NamedStyleSuggestionState namedStyleType(NamedStyleTypeEnum namedStyleType) {
    this.namedStyleType = namedStyleType;
    return this;
  }

  /**
   * The named style type that this suggestion state corresponds to. This field is provided as a convenience for matching the NamedStyleSuggestionState with its corresponding NamedStyle.
   * @return namedStyleType
   */
  @javax.annotation.Nullable
  public NamedStyleTypeEnum getNamedStyleType() {
    return namedStyleType;
  }

  public void setNamedStyleType(NamedStyleTypeEnum namedStyleType) {
    this.namedStyleType = namedStyleType;
  }


  public NamedStyleSuggestionState paragraphStyleSuggestionState(ParagraphStyleSuggestionState paragraphStyleSuggestionState) {
    this.paragraphStyleSuggestionState = paragraphStyleSuggestionState;
    return this;
  }

  /**
   * Get paragraphStyleSuggestionState
   * @return paragraphStyleSuggestionState
   */
  @javax.annotation.Nullable
  public ParagraphStyleSuggestionState getParagraphStyleSuggestionState() {
    return paragraphStyleSuggestionState;
  }

  public void setParagraphStyleSuggestionState(ParagraphStyleSuggestionState paragraphStyleSuggestionState) {
    this.paragraphStyleSuggestionState = paragraphStyleSuggestionState;
  }


  public NamedStyleSuggestionState textStyleSuggestionState(TextStyleSuggestionState textStyleSuggestionState) {
    this.textStyleSuggestionState = textStyleSuggestionState;
    return this;
  }

  /**
   * Get textStyleSuggestionState
   * @return textStyleSuggestionState
   */
  @javax.annotation.Nullable
  public TextStyleSuggestionState getTextStyleSuggestionState() {
    return textStyleSuggestionState;
  }

  public void setTextStyleSuggestionState(TextStyleSuggestionState textStyleSuggestionState) {
    this.textStyleSuggestionState = textStyleSuggestionState;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NamedStyleSuggestionState namedStyleSuggestionState = (NamedStyleSuggestionState) o;
    return Objects.equals(this.namedStyleType, namedStyleSuggestionState.namedStyleType) &&
        Objects.equals(this.paragraphStyleSuggestionState, namedStyleSuggestionState.paragraphStyleSuggestionState) &&
        Objects.equals(this.textStyleSuggestionState, namedStyleSuggestionState.textStyleSuggestionState);
  }

  @Override
  public int hashCode() {
    return Objects.hash(namedStyleType, paragraphStyleSuggestionState, textStyleSuggestionState);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NamedStyleSuggestionState {\n");
    sb.append("    namedStyleType: ").append(toIndentedString(namedStyleType)).append("\n");
    sb.append("    paragraphStyleSuggestionState: ").append(toIndentedString(paragraphStyleSuggestionState)).append("\n");
    sb.append("    textStyleSuggestionState: ").append(toIndentedString(textStyleSuggestionState)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("namedStyleType");
    openapiFields.add("paragraphStyleSuggestionState");
    openapiFields.add("textStyleSuggestionState");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NamedStyleSuggestionState
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NamedStyleSuggestionState.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NamedStyleSuggestionState is not found in the empty JSON string", NamedStyleSuggestionState.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NamedStyleSuggestionState.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NamedStyleSuggestionState` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("namedStyleType") != null && !jsonObj.get("namedStyleType").isJsonNull()) && !jsonObj.get("namedStyleType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `namedStyleType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("namedStyleType").toString()));
      }
      // validate the optional field `namedStyleType`
      if (jsonObj.get("namedStyleType") != null && !jsonObj.get("namedStyleType").isJsonNull()) {
        NamedStyleTypeEnum.validateJsonElement(jsonObj.get("namedStyleType"));
      }
      // validate the optional field `paragraphStyleSuggestionState`
      if (jsonObj.get("paragraphStyleSuggestionState") != null && !jsonObj.get("paragraphStyleSuggestionState").isJsonNull()) {
        ParagraphStyleSuggestionState.validateJsonElement(jsonObj.get("paragraphStyleSuggestionState"));
      }
      // validate the optional field `textStyleSuggestionState`
      if (jsonObj.get("textStyleSuggestionState") != null && !jsonObj.get("textStyleSuggestionState").isJsonNull()) {
        TextStyleSuggestionState.validateJsonElement(jsonObj.get("textStyleSuggestionState"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NamedStyleSuggestionState.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NamedStyleSuggestionState' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NamedStyleSuggestionState> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NamedStyleSuggestionState.class));

       return (TypeAdapter<T>) new TypeAdapter<NamedStyleSuggestionState>() {
           @Override
           public void write(JsonWriter out, NamedStyleSuggestionState value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NamedStyleSuggestionState read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NamedStyleSuggestionState given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NamedStyleSuggestionState
   * @throws IOException if the JSON string is invalid with respect to NamedStyleSuggestionState
   */
  public static NamedStyleSuggestionState fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NamedStyleSuggestionState.class);
  }

  /**
   * Convert an instance of NamedStyleSuggestionState to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

