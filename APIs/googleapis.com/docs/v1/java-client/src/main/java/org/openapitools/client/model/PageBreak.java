/*
 * Google Docs API
 * Reads and writes Google Docs documents.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.SuggestedTextStyle;
import org.openapitools.client.model.TextStyle;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A ParagraphElement representing a page break. A page break makes the subsequent text start at the top of the next page.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:47:07.584674-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PageBreak {
  public static final String SERIALIZED_NAME_SUGGESTED_DELETION_IDS = "suggestedDeletionIds";
  @SerializedName(SERIALIZED_NAME_SUGGESTED_DELETION_IDS)
  private List<String> suggestedDeletionIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_SUGGESTED_INSERTION_IDS = "suggestedInsertionIds";
  @SerializedName(SERIALIZED_NAME_SUGGESTED_INSERTION_IDS)
  private List<String> suggestedInsertionIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_SUGGESTED_TEXT_STYLE_CHANGES = "suggestedTextStyleChanges";
  @SerializedName(SERIALIZED_NAME_SUGGESTED_TEXT_STYLE_CHANGES)
  private Map<String, SuggestedTextStyle> suggestedTextStyleChanges = new HashMap<>();

  public static final String SERIALIZED_NAME_TEXT_STYLE = "textStyle";
  @SerializedName(SERIALIZED_NAME_TEXT_STYLE)
  private TextStyle textStyle;

  public PageBreak() {
  }

  public PageBreak suggestedDeletionIds(List<String> suggestedDeletionIds) {
    this.suggestedDeletionIds = suggestedDeletionIds;
    return this;
  }

  public PageBreak addSuggestedDeletionIdsItem(String suggestedDeletionIdsItem) {
    if (this.suggestedDeletionIds == null) {
      this.suggestedDeletionIds = new ArrayList<>();
    }
    this.suggestedDeletionIds.add(suggestedDeletionIdsItem);
    return this;
  }

  /**
   * The suggested deletion IDs. If empty, then there are no suggested deletions of this content.
   * @return suggestedDeletionIds
   */
  @javax.annotation.Nullable
  public List<String> getSuggestedDeletionIds() {
    return suggestedDeletionIds;
  }

  public void setSuggestedDeletionIds(List<String> suggestedDeletionIds) {
    this.suggestedDeletionIds = suggestedDeletionIds;
  }


  public PageBreak suggestedInsertionIds(List<String> suggestedInsertionIds) {
    this.suggestedInsertionIds = suggestedInsertionIds;
    return this;
  }

  public PageBreak addSuggestedInsertionIdsItem(String suggestedInsertionIdsItem) {
    if (this.suggestedInsertionIds == null) {
      this.suggestedInsertionIds = new ArrayList<>();
    }
    this.suggestedInsertionIds.add(suggestedInsertionIdsItem);
    return this;
  }

  /**
   * The suggested insertion IDs. A PageBreak may have multiple insertion IDs if it&#39;s a nested suggested change. If empty, then this is not a suggested insertion.
   * @return suggestedInsertionIds
   */
  @javax.annotation.Nullable
  public List<String> getSuggestedInsertionIds() {
    return suggestedInsertionIds;
  }

  public void setSuggestedInsertionIds(List<String> suggestedInsertionIds) {
    this.suggestedInsertionIds = suggestedInsertionIds;
  }


  public PageBreak suggestedTextStyleChanges(Map<String, SuggestedTextStyle> suggestedTextStyleChanges) {
    this.suggestedTextStyleChanges = suggestedTextStyleChanges;
    return this;
  }

  public PageBreak putSuggestedTextStyleChangesItem(String key, SuggestedTextStyle suggestedTextStyleChangesItem) {
    if (this.suggestedTextStyleChanges == null) {
      this.suggestedTextStyleChanges = new HashMap<>();
    }
    this.suggestedTextStyleChanges.put(key, suggestedTextStyleChangesItem);
    return this;
  }

  /**
   * The suggested text style changes to this PageBreak, keyed by suggestion ID.
   * @return suggestedTextStyleChanges
   */
  @javax.annotation.Nullable
  public Map<String, SuggestedTextStyle> getSuggestedTextStyleChanges() {
    return suggestedTextStyleChanges;
  }

  public void setSuggestedTextStyleChanges(Map<String, SuggestedTextStyle> suggestedTextStyleChanges) {
    this.suggestedTextStyleChanges = suggestedTextStyleChanges;
  }


  public PageBreak textStyle(TextStyle textStyle) {
    this.textStyle = textStyle;
    return this;
  }

  /**
   * Get textStyle
   * @return textStyle
   */
  @javax.annotation.Nullable
  public TextStyle getTextStyle() {
    return textStyle;
  }

  public void setTextStyle(TextStyle textStyle) {
    this.textStyle = textStyle;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PageBreak pageBreak = (PageBreak) o;
    return Objects.equals(this.suggestedDeletionIds, pageBreak.suggestedDeletionIds) &&
        Objects.equals(this.suggestedInsertionIds, pageBreak.suggestedInsertionIds) &&
        Objects.equals(this.suggestedTextStyleChanges, pageBreak.suggestedTextStyleChanges) &&
        Objects.equals(this.textStyle, pageBreak.textStyle);
  }

  @Override
  public int hashCode() {
    return Objects.hash(suggestedDeletionIds, suggestedInsertionIds, suggestedTextStyleChanges, textStyle);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PageBreak {\n");
    sb.append("    suggestedDeletionIds: ").append(toIndentedString(suggestedDeletionIds)).append("\n");
    sb.append("    suggestedInsertionIds: ").append(toIndentedString(suggestedInsertionIds)).append("\n");
    sb.append("    suggestedTextStyleChanges: ").append(toIndentedString(suggestedTextStyleChanges)).append("\n");
    sb.append("    textStyle: ").append(toIndentedString(textStyle)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("suggestedDeletionIds");
    openapiFields.add("suggestedInsertionIds");
    openapiFields.add("suggestedTextStyleChanges");
    openapiFields.add("textStyle");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PageBreak
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PageBreak.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PageBreak is not found in the empty JSON string", PageBreak.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PageBreak.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PageBreak` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("suggestedDeletionIds") != null && !jsonObj.get("suggestedDeletionIds").isJsonNull() && !jsonObj.get("suggestedDeletionIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `suggestedDeletionIds` to be an array in the JSON string but got `%s`", jsonObj.get("suggestedDeletionIds").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("suggestedInsertionIds") != null && !jsonObj.get("suggestedInsertionIds").isJsonNull() && !jsonObj.get("suggestedInsertionIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `suggestedInsertionIds` to be an array in the JSON string but got `%s`", jsonObj.get("suggestedInsertionIds").toString()));
      }
      // validate the optional field `textStyle`
      if (jsonObj.get("textStyle") != null && !jsonObj.get("textStyle").isJsonNull()) {
        TextStyle.validateJsonElement(jsonObj.get("textStyle"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PageBreak.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PageBreak' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PageBreak> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PageBreak.class));

       return (TypeAdapter<T>) new TypeAdapter<PageBreak>() {
           @Override
           public void write(JsonWriter out, PageBreak value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PageBreak read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PageBreak given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PageBreak
   * @throws IOException if the JSON string is invalid with respect to PageBreak
   */
  public static PageBreak fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PageBreak.class);
  }

  /**
   * Convert an instance of PageBreak to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

