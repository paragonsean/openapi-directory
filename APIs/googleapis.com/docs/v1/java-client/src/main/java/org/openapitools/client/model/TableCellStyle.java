/*
 * Google Docs API
 * Reads and writes Google Docs documents.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Dimension;
import org.openapitools.client.model.OptionalColor;
import org.openapitools.client.model.TableCellBorder;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The style of a TableCell. Inherited table cell styles are represented as unset fields in this message. A table cell style can inherit from the table&#39;s style.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:47:07.584674-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TableCellStyle {
  public static final String SERIALIZED_NAME_BACKGROUND_COLOR = "backgroundColor";
  @SerializedName(SERIALIZED_NAME_BACKGROUND_COLOR)
  private OptionalColor backgroundColor;

  public static final String SERIALIZED_NAME_BORDER_BOTTOM = "borderBottom";
  @SerializedName(SERIALIZED_NAME_BORDER_BOTTOM)
  private TableCellBorder borderBottom;

  public static final String SERIALIZED_NAME_BORDER_LEFT = "borderLeft";
  @SerializedName(SERIALIZED_NAME_BORDER_LEFT)
  private TableCellBorder borderLeft;

  public static final String SERIALIZED_NAME_BORDER_RIGHT = "borderRight";
  @SerializedName(SERIALIZED_NAME_BORDER_RIGHT)
  private TableCellBorder borderRight;

  public static final String SERIALIZED_NAME_BORDER_TOP = "borderTop";
  @SerializedName(SERIALIZED_NAME_BORDER_TOP)
  private TableCellBorder borderTop;

  public static final String SERIALIZED_NAME_COLUMN_SPAN = "columnSpan";
  @SerializedName(SERIALIZED_NAME_COLUMN_SPAN)
  private Integer columnSpan;

  /**
   * The alignment of the content in the table cell. The default alignment matches the alignment for newly created table cells in the Docs editor.
   */
  @JsonAdapter(ContentAlignmentEnum.Adapter.class)
  public enum ContentAlignmentEnum {
    CONTENT_ALIGNMENT_UNSPECIFIED("CONTENT_ALIGNMENT_UNSPECIFIED"),
    
    CONTENT_ALIGNMENT_UNSUPPORTED("CONTENT_ALIGNMENT_UNSUPPORTED"),
    
    TOP("TOP"),
    
    MIDDLE("MIDDLE"),
    
    BOTTOM("BOTTOM");

    private String value;

    ContentAlignmentEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ContentAlignmentEnum fromValue(String value) {
      for (ContentAlignmentEnum b : ContentAlignmentEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ContentAlignmentEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ContentAlignmentEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ContentAlignmentEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ContentAlignmentEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ContentAlignmentEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CONTENT_ALIGNMENT = "contentAlignment";
  @SerializedName(SERIALIZED_NAME_CONTENT_ALIGNMENT)
  private ContentAlignmentEnum contentAlignment;

  public static final String SERIALIZED_NAME_PADDING_BOTTOM = "paddingBottom";
  @SerializedName(SERIALIZED_NAME_PADDING_BOTTOM)
  private Dimension paddingBottom;

  public static final String SERIALIZED_NAME_PADDING_LEFT = "paddingLeft";
  @SerializedName(SERIALIZED_NAME_PADDING_LEFT)
  private Dimension paddingLeft;

  public static final String SERIALIZED_NAME_PADDING_RIGHT = "paddingRight";
  @SerializedName(SERIALIZED_NAME_PADDING_RIGHT)
  private Dimension paddingRight;

  public static final String SERIALIZED_NAME_PADDING_TOP = "paddingTop";
  @SerializedName(SERIALIZED_NAME_PADDING_TOP)
  private Dimension paddingTop;

  public static final String SERIALIZED_NAME_ROW_SPAN = "rowSpan";
  @SerializedName(SERIALIZED_NAME_ROW_SPAN)
  private Integer rowSpan;

  public TableCellStyle() {
  }

  public TableCellStyle backgroundColor(OptionalColor backgroundColor) {
    this.backgroundColor = backgroundColor;
    return this;
  }

  /**
   * Get backgroundColor
   * @return backgroundColor
   */
  @javax.annotation.Nullable
  public OptionalColor getBackgroundColor() {
    return backgroundColor;
  }

  public void setBackgroundColor(OptionalColor backgroundColor) {
    this.backgroundColor = backgroundColor;
  }


  public TableCellStyle borderBottom(TableCellBorder borderBottom) {
    this.borderBottom = borderBottom;
    return this;
  }

  /**
   * Get borderBottom
   * @return borderBottom
   */
  @javax.annotation.Nullable
  public TableCellBorder getBorderBottom() {
    return borderBottom;
  }

  public void setBorderBottom(TableCellBorder borderBottom) {
    this.borderBottom = borderBottom;
  }


  public TableCellStyle borderLeft(TableCellBorder borderLeft) {
    this.borderLeft = borderLeft;
    return this;
  }

  /**
   * Get borderLeft
   * @return borderLeft
   */
  @javax.annotation.Nullable
  public TableCellBorder getBorderLeft() {
    return borderLeft;
  }

  public void setBorderLeft(TableCellBorder borderLeft) {
    this.borderLeft = borderLeft;
  }


  public TableCellStyle borderRight(TableCellBorder borderRight) {
    this.borderRight = borderRight;
    return this;
  }

  /**
   * Get borderRight
   * @return borderRight
   */
  @javax.annotation.Nullable
  public TableCellBorder getBorderRight() {
    return borderRight;
  }

  public void setBorderRight(TableCellBorder borderRight) {
    this.borderRight = borderRight;
  }


  public TableCellStyle borderTop(TableCellBorder borderTop) {
    this.borderTop = borderTop;
    return this;
  }

  /**
   * Get borderTop
   * @return borderTop
   */
  @javax.annotation.Nullable
  public TableCellBorder getBorderTop() {
    return borderTop;
  }

  public void setBorderTop(TableCellBorder borderTop) {
    this.borderTop = borderTop;
  }


  public TableCellStyle columnSpan(Integer columnSpan) {
    this.columnSpan = columnSpan;
    return this;
  }

  /**
   * The column span of the cell. This property is read-only.
   * @return columnSpan
   */
  @javax.annotation.Nullable
  public Integer getColumnSpan() {
    return columnSpan;
  }

  public void setColumnSpan(Integer columnSpan) {
    this.columnSpan = columnSpan;
  }


  public TableCellStyle contentAlignment(ContentAlignmentEnum contentAlignment) {
    this.contentAlignment = contentAlignment;
    return this;
  }

  /**
   * The alignment of the content in the table cell. The default alignment matches the alignment for newly created table cells in the Docs editor.
   * @return contentAlignment
   */
  @javax.annotation.Nullable
  public ContentAlignmentEnum getContentAlignment() {
    return contentAlignment;
  }

  public void setContentAlignment(ContentAlignmentEnum contentAlignment) {
    this.contentAlignment = contentAlignment;
  }


  public TableCellStyle paddingBottom(Dimension paddingBottom) {
    this.paddingBottom = paddingBottom;
    return this;
  }

  /**
   * Get paddingBottom
   * @return paddingBottom
   */
  @javax.annotation.Nullable
  public Dimension getPaddingBottom() {
    return paddingBottom;
  }

  public void setPaddingBottom(Dimension paddingBottom) {
    this.paddingBottom = paddingBottom;
  }


  public TableCellStyle paddingLeft(Dimension paddingLeft) {
    this.paddingLeft = paddingLeft;
    return this;
  }

  /**
   * Get paddingLeft
   * @return paddingLeft
   */
  @javax.annotation.Nullable
  public Dimension getPaddingLeft() {
    return paddingLeft;
  }

  public void setPaddingLeft(Dimension paddingLeft) {
    this.paddingLeft = paddingLeft;
  }


  public TableCellStyle paddingRight(Dimension paddingRight) {
    this.paddingRight = paddingRight;
    return this;
  }

  /**
   * Get paddingRight
   * @return paddingRight
   */
  @javax.annotation.Nullable
  public Dimension getPaddingRight() {
    return paddingRight;
  }

  public void setPaddingRight(Dimension paddingRight) {
    this.paddingRight = paddingRight;
  }


  public TableCellStyle paddingTop(Dimension paddingTop) {
    this.paddingTop = paddingTop;
    return this;
  }

  /**
   * Get paddingTop
   * @return paddingTop
   */
  @javax.annotation.Nullable
  public Dimension getPaddingTop() {
    return paddingTop;
  }

  public void setPaddingTop(Dimension paddingTop) {
    this.paddingTop = paddingTop;
  }


  public TableCellStyle rowSpan(Integer rowSpan) {
    this.rowSpan = rowSpan;
    return this;
  }

  /**
   * The row span of the cell. This property is read-only.
   * @return rowSpan
   */
  @javax.annotation.Nullable
  public Integer getRowSpan() {
    return rowSpan;
  }

  public void setRowSpan(Integer rowSpan) {
    this.rowSpan = rowSpan;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TableCellStyle tableCellStyle = (TableCellStyle) o;
    return Objects.equals(this.backgroundColor, tableCellStyle.backgroundColor) &&
        Objects.equals(this.borderBottom, tableCellStyle.borderBottom) &&
        Objects.equals(this.borderLeft, tableCellStyle.borderLeft) &&
        Objects.equals(this.borderRight, tableCellStyle.borderRight) &&
        Objects.equals(this.borderTop, tableCellStyle.borderTop) &&
        Objects.equals(this.columnSpan, tableCellStyle.columnSpan) &&
        Objects.equals(this.contentAlignment, tableCellStyle.contentAlignment) &&
        Objects.equals(this.paddingBottom, tableCellStyle.paddingBottom) &&
        Objects.equals(this.paddingLeft, tableCellStyle.paddingLeft) &&
        Objects.equals(this.paddingRight, tableCellStyle.paddingRight) &&
        Objects.equals(this.paddingTop, tableCellStyle.paddingTop) &&
        Objects.equals(this.rowSpan, tableCellStyle.rowSpan);
  }

  @Override
  public int hashCode() {
    return Objects.hash(backgroundColor, borderBottom, borderLeft, borderRight, borderTop, columnSpan, contentAlignment, paddingBottom, paddingLeft, paddingRight, paddingTop, rowSpan);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TableCellStyle {\n");
    sb.append("    backgroundColor: ").append(toIndentedString(backgroundColor)).append("\n");
    sb.append("    borderBottom: ").append(toIndentedString(borderBottom)).append("\n");
    sb.append("    borderLeft: ").append(toIndentedString(borderLeft)).append("\n");
    sb.append("    borderRight: ").append(toIndentedString(borderRight)).append("\n");
    sb.append("    borderTop: ").append(toIndentedString(borderTop)).append("\n");
    sb.append("    columnSpan: ").append(toIndentedString(columnSpan)).append("\n");
    sb.append("    contentAlignment: ").append(toIndentedString(contentAlignment)).append("\n");
    sb.append("    paddingBottom: ").append(toIndentedString(paddingBottom)).append("\n");
    sb.append("    paddingLeft: ").append(toIndentedString(paddingLeft)).append("\n");
    sb.append("    paddingRight: ").append(toIndentedString(paddingRight)).append("\n");
    sb.append("    paddingTop: ").append(toIndentedString(paddingTop)).append("\n");
    sb.append("    rowSpan: ").append(toIndentedString(rowSpan)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("backgroundColor");
    openapiFields.add("borderBottom");
    openapiFields.add("borderLeft");
    openapiFields.add("borderRight");
    openapiFields.add("borderTop");
    openapiFields.add("columnSpan");
    openapiFields.add("contentAlignment");
    openapiFields.add("paddingBottom");
    openapiFields.add("paddingLeft");
    openapiFields.add("paddingRight");
    openapiFields.add("paddingTop");
    openapiFields.add("rowSpan");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TableCellStyle
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TableCellStyle.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TableCellStyle is not found in the empty JSON string", TableCellStyle.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TableCellStyle.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TableCellStyle` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `backgroundColor`
      if (jsonObj.get("backgroundColor") != null && !jsonObj.get("backgroundColor").isJsonNull()) {
        OptionalColor.validateJsonElement(jsonObj.get("backgroundColor"));
      }
      // validate the optional field `borderBottom`
      if (jsonObj.get("borderBottom") != null && !jsonObj.get("borderBottom").isJsonNull()) {
        TableCellBorder.validateJsonElement(jsonObj.get("borderBottom"));
      }
      // validate the optional field `borderLeft`
      if (jsonObj.get("borderLeft") != null && !jsonObj.get("borderLeft").isJsonNull()) {
        TableCellBorder.validateJsonElement(jsonObj.get("borderLeft"));
      }
      // validate the optional field `borderRight`
      if (jsonObj.get("borderRight") != null && !jsonObj.get("borderRight").isJsonNull()) {
        TableCellBorder.validateJsonElement(jsonObj.get("borderRight"));
      }
      // validate the optional field `borderTop`
      if (jsonObj.get("borderTop") != null && !jsonObj.get("borderTop").isJsonNull()) {
        TableCellBorder.validateJsonElement(jsonObj.get("borderTop"));
      }
      if ((jsonObj.get("contentAlignment") != null && !jsonObj.get("contentAlignment").isJsonNull()) && !jsonObj.get("contentAlignment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contentAlignment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contentAlignment").toString()));
      }
      // validate the optional field `contentAlignment`
      if (jsonObj.get("contentAlignment") != null && !jsonObj.get("contentAlignment").isJsonNull()) {
        ContentAlignmentEnum.validateJsonElement(jsonObj.get("contentAlignment"));
      }
      // validate the optional field `paddingBottom`
      if (jsonObj.get("paddingBottom") != null && !jsonObj.get("paddingBottom").isJsonNull()) {
        Dimension.validateJsonElement(jsonObj.get("paddingBottom"));
      }
      // validate the optional field `paddingLeft`
      if (jsonObj.get("paddingLeft") != null && !jsonObj.get("paddingLeft").isJsonNull()) {
        Dimension.validateJsonElement(jsonObj.get("paddingLeft"));
      }
      // validate the optional field `paddingRight`
      if (jsonObj.get("paddingRight") != null && !jsonObj.get("paddingRight").isJsonNull()) {
        Dimension.validateJsonElement(jsonObj.get("paddingRight"));
      }
      // validate the optional field `paddingTop`
      if (jsonObj.get("paddingTop") != null && !jsonObj.get("paddingTop").isJsonNull()) {
        Dimension.validateJsonElement(jsonObj.get("paddingTop"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TableCellStyle.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TableCellStyle' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TableCellStyle> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TableCellStyle.class));

       return (TypeAdapter<T>) new TypeAdapter<TableCellStyle>() {
           @Override
           public void write(JsonWriter out, TableCellStyle value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TableCellStyle read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TableCellStyle given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TableCellStyle
   * @throws IOException if the JSON string is invalid with respect to TableCellStyle
   */
  public static TableCellStyle fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TableCellStyle.class);
  }

  /**
   * Convert an instance of TableCellStyle to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

