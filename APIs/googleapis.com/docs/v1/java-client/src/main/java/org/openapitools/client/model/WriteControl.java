/*
 * Google Docs API
 * Reads and writes Google Docs documents.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Provides control over how write requests are executed.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:47:07.584674-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class WriteControl {
  public static final String SERIALIZED_NAME_REQUIRED_REVISION_ID = "requiredRevisionId";
  @SerializedName(SERIALIZED_NAME_REQUIRED_REVISION_ID)
  private String requiredRevisionId;

  public static final String SERIALIZED_NAME_TARGET_REVISION_ID = "targetRevisionId";
  @SerializedName(SERIALIZED_NAME_TARGET_REVISION_ID)
  private String targetRevisionId;

  public WriteControl() {
  }

  public WriteControl requiredRevisionId(String requiredRevisionId) {
    this.requiredRevisionId = requiredRevisionId;
    return this;
  }

  /**
   * The optional revision ID of the document the write request is applied to. If this is not the latest revision of the document, the request is not processed and returns a 400 bad request error. When a required revision ID is returned in a response, it indicates the revision ID of the document after the request was applied.
   * @return requiredRevisionId
   */
  @javax.annotation.Nullable
  public String getRequiredRevisionId() {
    return requiredRevisionId;
  }

  public void setRequiredRevisionId(String requiredRevisionId) {
    this.requiredRevisionId = requiredRevisionId;
  }


  public WriteControl targetRevisionId(String targetRevisionId) {
    this.targetRevisionId = targetRevisionId;
    return this;
  }

  /**
   * The optional target revision ID of the document the write request is applied to. If collaborator changes have occurred after the document was read using the API, the changes produced by this write request are applied against the collaborator changes. This results in a new revision of the document that incorporates both the collaborator changes and the changes in the request, with the Docs server resolving conflicting changes. When using target revision ID, the API client can be thought of as another collaborator of the document. The target revision ID can only be used to write to recent versions of a document. If the target revision is too far behind the latest revision, the request is not processed and returns a 400 bad request error. The request should be tried again after retrieving the latest version of the document. Usually a revision ID remains valid for use as a target revision for several minutes after it&#39;s read, but for frequently edited documents this window might be shorter.
   * @return targetRevisionId
   */
  @javax.annotation.Nullable
  public String getTargetRevisionId() {
    return targetRevisionId;
  }

  public void setTargetRevisionId(String targetRevisionId) {
    this.targetRevisionId = targetRevisionId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WriteControl writeControl = (WriteControl) o;
    return Objects.equals(this.requiredRevisionId, writeControl.requiredRevisionId) &&
        Objects.equals(this.targetRevisionId, writeControl.targetRevisionId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(requiredRevisionId, targetRevisionId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WriteControl {\n");
    sb.append("    requiredRevisionId: ").append(toIndentedString(requiredRevisionId)).append("\n");
    sb.append("    targetRevisionId: ").append(toIndentedString(targetRevisionId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("requiredRevisionId");
    openapiFields.add("targetRevisionId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to WriteControl
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WriteControl.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WriteControl is not found in the empty JSON string", WriteControl.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WriteControl.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WriteControl` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("requiredRevisionId") != null && !jsonObj.get("requiredRevisionId").isJsonNull()) && !jsonObj.get("requiredRevisionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `requiredRevisionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("requiredRevisionId").toString()));
      }
      if ((jsonObj.get("targetRevisionId") != null && !jsonObj.get("targetRevisionId").isJsonNull()) && !jsonObj.get("targetRevisionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `targetRevisionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("targetRevisionId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WriteControl.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WriteControl' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WriteControl> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WriteControl.class));

       return (TypeAdapter<T>) new TypeAdapter<WriteControl>() {
           @Override
           public void write(JsonWriter out, WriteControl value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WriteControl read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of WriteControl given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of WriteControl
   * @throws IOException if the JSON string is invalid with respect to WriteControl
   */
  public static WriteControl fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WriteControl.class);
  }

  /**
   * Convert an instance of WriteControl to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

