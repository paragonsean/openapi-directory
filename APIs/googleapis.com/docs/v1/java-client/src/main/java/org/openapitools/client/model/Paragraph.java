/*
 * Google Docs API
 * Reads and writes Google Docs documents.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.Bullet;
import org.openapitools.client.model.ObjectReferences;
import org.openapitools.client.model.ParagraphElement;
import org.openapitools.client.model.ParagraphStyle;
import org.openapitools.client.model.SuggestedBullet;
import org.openapitools.client.model.SuggestedParagraphStyle;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A StructuralElement representing a paragraph. A paragraph is a range of content that&#39;s terminated with a newline character.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:47:07.584674-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Paragraph {
  public static final String SERIALIZED_NAME_BULLET = "bullet";
  @SerializedName(SERIALIZED_NAME_BULLET)
  private Bullet bullet;

  public static final String SERIALIZED_NAME_ELEMENTS = "elements";
  @SerializedName(SERIALIZED_NAME_ELEMENTS)
  private List<ParagraphElement> elements = new ArrayList<>();

  public static final String SERIALIZED_NAME_PARAGRAPH_STYLE = "paragraphStyle";
  @SerializedName(SERIALIZED_NAME_PARAGRAPH_STYLE)
  private ParagraphStyle paragraphStyle;

  public static final String SERIALIZED_NAME_POSITIONED_OBJECT_IDS = "positionedObjectIds";
  @SerializedName(SERIALIZED_NAME_POSITIONED_OBJECT_IDS)
  private List<String> positionedObjectIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_SUGGESTED_BULLET_CHANGES = "suggestedBulletChanges";
  @SerializedName(SERIALIZED_NAME_SUGGESTED_BULLET_CHANGES)
  private Map<String, SuggestedBullet> suggestedBulletChanges = new HashMap<>();

  public static final String SERIALIZED_NAME_SUGGESTED_PARAGRAPH_STYLE_CHANGES = "suggestedParagraphStyleChanges";
  @SerializedName(SERIALIZED_NAME_SUGGESTED_PARAGRAPH_STYLE_CHANGES)
  private Map<String, SuggestedParagraphStyle> suggestedParagraphStyleChanges = new HashMap<>();

  public static final String SERIALIZED_NAME_SUGGESTED_POSITIONED_OBJECT_IDS = "suggestedPositionedObjectIds";
  @SerializedName(SERIALIZED_NAME_SUGGESTED_POSITIONED_OBJECT_IDS)
  private Map<String, ObjectReferences> suggestedPositionedObjectIds = new HashMap<>();

  public Paragraph() {
  }

  public Paragraph bullet(Bullet bullet) {
    this.bullet = bullet;
    return this;
  }

  /**
   * Get bullet
   * @return bullet
   */
  @javax.annotation.Nullable
  public Bullet getBullet() {
    return bullet;
  }

  public void setBullet(Bullet bullet) {
    this.bullet = bullet;
  }


  public Paragraph elements(List<ParagraphElement> elements) {
    this.elements = elements;
    return this;
  }

  public Paragraph addElementsItem(ParagraphElement elementsItem) {
    if (this.elements == null) {
      this.elements = new ArrayList<>();
    }
    this.elements.add(elementsItem);
    return this;
  }

  /**
   * The content of the paragraph, broken down into its component parts.
   * @return elements
   */
  @javax.annotation.Nullable
  public List<ParagraphElement> getElements() {
    return elements;
  }

  public void setElements(List<ParagraphElement> elements) {
    this.elements = elements;
  }


  public Paragraph paragraphStyle(ParagraphStyle paragraphStyle) {
    this.paragraphStyle = paragraphStyle;
    return this;
  }

  /**
   * Get paragraphStyle
   * @return paragraphStyle
   */
  @javax.annotation.Nullable
  public ParagraphStyle getParagraphStyle() {
    return paragraphStyle;
  }

  public void setParagraphStyle(ParagraphStyle paragraphStyle) {
    this.paragraphStyle = paragraphStyle;
  }


  public Paragraph positionedObjectIds(List<String> positionedObjectIds) {
    this.positionedObjectIds = positionedObjectIds;
    return this;
  }

  public Paragraph addPositionedObjectIdsItem(String positionedObjectIdsItem) {
    if (this.positionedObjectIds == null) {
      this.positionedObjectIds = new ArrayList<>();
    }
    this.positionedObjectIds.add(positionedObjectIdsItem);
    return this;
  }

  /**
   * The IDs of the positioned objects tethered to this paragraph.
   * @return positionedObjectIds
   */
  @javax.annotation.Nullable
  public List<String> getPositionedObjectIds() {
    return positionedObjectIds;
  }

  public void setPositionedObjectIds(List<String> positionedObjectIds) {
    this.positionedObjectIds = positionedObjectIds;
  }


  public Paragraph suggestedBulletChanges(Map<String, SuggestedBullet> suggestedBulletChanges) {
    this.suggestedBulletChanges = suggestedBulletChanges;
    return this;
  }

  public Paragraph putSuggestedBulletChangesItem(String key, SuggestedBullet suggestedBulletChangesItem) {
    if (this.suggestedBulletChanges == null) {
      this.suggestedBulletChanges = new HashMap<>();
    }
    this.suggestedBulletChanges.put(key, suggestedBulletChangesItem);
    return this;
  }

  /**
   * The suggested changes to this paragraph&#39;s bullet.
   * @return suggestedBulletChanges
   */
  @javax.annotation.Nullable
  public Map<String, SuggestedBullet> getSuggestedBulletChanges() {
    return suggestedBulletChanges;
  }

  public void setSuggestedBulletChanges(Map<String, SuggestedBullet> suggestedBulletChanges) {
    this.suggestedBulletChanges = suggestedBulletChanges;
  }


  public Paragraph suggestedParagraphStyleChanges(Map<String, SuggestedParagraphStyle> suggestedParagraphStyleChanges) {
    this.suggestedParagraphStyleChanges = suggestedParagraphStyleChanges;
    return this;
  }

  public Paragraph putSuggestedParagraphStyleChangesItem(String key, SuggestedParagraphStyle suggestedParagraphStyleChangesItem) {
    if (this.suggestedParagraphStyleChanges == null) {
      this.suggestedParagraphStyleChanges = new HashMap<>();
    }
    this.suggestedParagraphStyleChanges.put(key, suggestedParagraphStyleChangesItem);
    return this;
  }

  /**
   * The suggested paragraph style changes to this paragraph, keyed by suggestion ID.
   * @return suggestedParagraphStyleChanges
   */
  @javax.annotation.Nullable
  public Map<String, SuggestedParagraphStyle> getSuggestedParagraphStyleChanges() {
    return suggestedParagraphStyleChanges;
  }

  public void setSuggestedParagraphStyleChanges(Map<String, SuggestedParagraphStyle> suggestedParagraphStyleChanges) {
    this.suggestedParagraphStyleChanges = suggestedParagraphStyleChanges;
  }


  public Paragraph suggestedPositionedObjectIds(Map<String, ObjectReferences> suggestedPositionedObjectIds) {
    this.suggestedPositionedObjectIds = suggestedPositionedObjectIds;
    return this;
  }

  public Paragraph putSuggestedPositionedObjectIdsItem(String key, ObjectReferences suggestedPositionedObjectIdsItem) {
    if (this.suggestedPositionedObjectIds == null) {
      this.suggestedPositionedObjectIds = new HashMap<>();
    }
    this.suggestedPositionedObjectIds.put(key, suggestedPositionedObjectIdsItem);
    return this;
  }

  /**
   * The IDs of the positioned objects suggested to be attached to this paragraph, keyed by suggestion ID.
   * @return suggestedPositionedObjectIds
   */
  @javax.annotation.Nullable
  public Map<String, ObjectReferences> getSuggestedPositionedObjectIds() {
    return suggestedPositionedObjectIds;
  }

  public void setSuggestedPositionedObjectIds(Map<String, ObjectReferences> suggestedPositionedObjectIds) {
    this.suggestedPositionedObjectIds = suggestedPositionedObjectIds;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Paragraph paragraph = (Paragraph) o;
    return Objects.equals(this.bullet, paragraph.bullet) &&
        Objects.equals(this.elements, paragraph.elements) &&
        Objects.equals(this.paragraphStyle, paragraph.paragraphStyle) &&
        Objects.equals(this.positionedObjectIds, paragraph.positionedObjectIds) &&
        Objects.equals(this.suggestedBulletChanges, paragraph.suggestedBulletChanges) &&
        Objects.equals(this.suggestedParagraphStyleChanges, paragraph.suggestedParagraphStyleChanges) &&
        Objects.equals(this.suggestedPositionedObjectIds, paragraph.suggestedPositionedObjectIds);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bullet, elements, paragraphStyle, positionedObjectIds, suggestedBulletChanges, suggestedParagraphStyleChanges, suggestedPositionedObjectIds);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Paragraph {\n");
    sb.append("    bullet: ").append(toIndentedString(bullet)).append("\n");
    sb.append("    elements: ").append(toIndentedString(elements)).append("\n");
    sb.append("    paragraphStyle: ").append(toIndentedString(paragraphStyle)).append("\n");
    sb.append("    positionedObjectIds: ").append(toIndentedString(positionedObjectIds)).append("\n");
    sb.append("    suggestedBulletChanges: ").append(toIndentedString(suggestedBulletChanges)).append("\n");
    sb.append("    suggestedParagraphStyleChanges: ").append(toIndentedString(suggestedParagraphStyleChanges)).append("\n");
    sb.append("    suggestedPositionedObjectIds: ").append(toIndentedString(suggestedPositionedObjectIds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bullet");
    openapiFields.add("elements");
    openapiFields.add("paragraphStyle");
    openapiFields.add("positionedObjectIds");
    openapiFields.add("suggestedBulletChanges");
    openapiFields.add("suggestedParagraphStyleChanges");
    openapiFields.add("suggestedPositionedObjectIds");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Paragraph
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Paragraph.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Paragraph is not found in the empty JSON string", Paragraph.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Paragraph.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Paragraph` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `bullet`
      if (jsonObj.get("bullet") != null && !jsonObj.get("bullet").isJsonNull()) {
        Bullet.validateJsonElement(jsonObj.get("bullet"));
      }
      if (jsonObj.get("elements") != null && !jsonObj.get("elements").isJsonNull()) {
        JsonArray jsonArrayelements = jsonObj.getAsJsonArray("elements");
        if (jsonArrayelements != null) {
          // ensure the json data is an array
          if (!jsonObj.get("elements").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `elements` to be an array in the JSON string but got `%s`", jsonObj.get("elements").toString()));
          }

          // validate the optional field `elements` (array)
          for (int i = 0; i < jsonArrayelements.size(); i++) {
            ParagraphElement.validateJsonElement(jsonArrayelements.get(i));
          };
        }
      }
      // validate the optional field `paragraphStyle`
      if (jsonObj.get("paragraphStyle") != null && !jsonObj.get("paragraphStyle").isJsonNull()) {
        ParagraphStyle.validateJsonElement(jsonObj.get("paragraphStyle"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("positionedObjectIds") != null && !jsonObj.get("positionedObjectIds").isJsonNull() && !jsonObj.get("positionedObjectIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `positionedObjectIds` to be an array in the JSON string but got `%s`", jsonObj.get("positionedObjectIds").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Paragraph.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Paragraph' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Paragraph> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Paragraph.class));

       return (TypeAdapter<T>) new TypeAdapter<Paragraph>() {
           @Override
           public void write(JsonWriter out, Paragraph value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Paragraph read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Paragraph given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Paragraph
   * @throws IOException if the JSON string is invalid with respect to Paragraph
   */
  public static Paragraph fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Paragraph.class);
  }

  /**
   * Convert an instance of Paragraph to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

