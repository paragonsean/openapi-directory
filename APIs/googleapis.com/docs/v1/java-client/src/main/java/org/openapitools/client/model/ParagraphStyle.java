/*
 * Google Docs API
 * Reads and writes Google Docs documents.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Dimension;
import org.openapitools.client.model.ParagraphBorder;
import org.openapitools.client.model.Shading;
import org.openapitools.client.model.TabStop;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Styles that apply to a whole paragraph. Inherited paragraph styles are represented as unset fields in this message. A paragraph style&#39;s parent depends on where the paragraph style is defined: * The ParagraphStyle on a Paragraph inherits from the paragraph&#39;s corresponding named style type. * The ParagraphStyle on a named style inherits from the normal text named style. * The ParagraphStyle of the normal text named style inherits from the default paragraph style in the Docs editor. * The ParagraphStyle on a Paragraph element that&#39;s contained in a table may inherit its paragraph style from the table style. If the paragraph style does not inherit from a parent, unsetting fields will revert the style to a value matching the defaults in the Docs editor.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:47:07.584674-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ParagraphStyle {
  /**
   * The text alignment for this paragraph.
   */
  @JsonAdapter(AlignmentEnum.Adapter.class)
  public enum AlignmentEnum {
    ALIGNMENT_UNSPECIFIED("ALIGNMENT_UNSPECIFIED"),
    
    START("START"),
    
    CENTER("CENTER"),
    
    END("END"),
    
    JUSTIFIED("JUSTIFIED");

    private String value;

    AlignmentEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AlignmentEnum fromValue(String value) {
      for (AlignmentEnum b : AlignmentEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AlignmentEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AlignmentEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AlignmentEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AlignmentEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AlignmentEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ALIGNMENT = "alignment";
  @SerializedName(SERIALIZED_NAME_ALIGNMENT)
  private AlignmentEnum alignment;

  public static final String SERIALIZED_NAME_AVOID_WIDOW_AND_ORPHAN = "avoidWidowAndOrphan";
  @SerializedName(SERIALIZED_NAME_AVOID_WIDOW_AND_ORPHAN)
  private Boolean avoidWidowAndOrphan;

  public static final String SERIALIZED_NAME_BORDER_BETWEEN = "borderBetween";
  @SerializedName(SERIALIZED_NAME_BORDER_BETWEEN)
  private ParagraphBorder borderBetween;

  public static final String SERIALIZED_NAME_BORDER_BOTTOM = "borderBottom";
  @SerializedName(SERIALIZED_NAME_BORDER_BOTTOM)
  private ParagraphBorder borderBottom;

  public static final String SERIALIZED_NAME_BORDER_LEFT = "borderLeft";
  @SerializedName(SERIALIZED_NAME_BORDER_LEFT)
  private ParagraphBorder borderLeft;

  public static final String SERIALIZED_NAME_BORDER_RIGHT = "borderRight";
  @SerializedName(SERIALIZED_NAME_BORDER_RIGHT)
  private ParagraphBorder borderRight;

  public static final String SERIALIZED_NAME_BORDER_TOP = "borderTop";
  @SerializedName(SERIALIZED_NAME_BORDER_TOP)
  private ParagraphBorder borderTop;

  /**
   * The text direction of this paragraph. If unset, the value defaults to LEFT_TO_RIGHT since paragraph direction is not inherited.
   */
  @JsonAdapter(DirectionEnum.Adapter.class)
  public enum DirectionEnum {
    CONTENT_DIRECTION_UNSPECIFIED("CONTENT_DIRECTION_UNSPECIFIED"),
    
    LEFT_TO_RIGHT("LEFT_TO_RIGHT"),
    
    RIGHT_TO_LEFT("RIGHT_TO_LEFT");

    private String value;

    DirectionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DirectionEnum fromValue(String value) {
      for (DirectionEnum b : DirectionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DirectionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DirectionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DirectionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DirectionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DirectionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DIRECTION = "direction";
  @SerializedName(SERIALIZED_NAME_DIRECTION)
  private DirectionEnum direction;

  public static final String SERIALIZED_NAME_HEADING_ID = "headingId";
  @SerializedName(SERIALIZED_NAME_HEADING_ID)
  private String headingId;

  public static final String SERIALIZED_NAME_INDENT_END = "indentEnd";
  @SerializedName(SERIALIZED_NAME_INDENT_END)
  private Dimension indentEnd;

  public static final String SERIALIZED_NAME_INDENT_FIRST_LINE = "indentFirstLine";
  @SerializedName(SERIALIZED_NAME_INDENT_FIRST_LINE)
  private Dimension indentFirstLine;

  public static final String SERIALIZED_NAME_INDENT_START = "indentStart";
  @SerializedName(SERIALIZED_NAME_INDENT_START)
  private Dimension indentStart;

  public static final String SERIALIZED_NAME_KEEP_LINES_TOGETHER = "keepLinesTogether";
  @SerializedName(SERIALIZED_NAME_KEEP_LINES_TOGETHER)
  private Boolean keepLinesTogether;

  public static final String SERIALIZED_NAME_KEEP_WITH_NEXT = "keepWithNext";
  @SerializedName(SERIALIZED_NAME_KEEP_WITH_NEXT)
  private Boolean keepWithNext;

  public static final String SERIALIZED_NAME_LINE_SPACING = "lineSpacing";
  @SerializedName(SERIALIZED_NAME_LINE_SPACING)
  private Float lineSpacing;

  /**
   * The named style type of the paragraph. Since updating the named style type affects other properties within ParagraphStyle, the named style type is applied before the other properties are updated.
   */
  @JsonAdapter(NamedStyleTypeEnum.Adapter.class)
  public enum NamedStyleTypeEnum {
    NAMED_STYLE_TYPE_UNSPECIFIED("NAMED_STYLE_TYPE_UNSPECIFIED"),
    
    NORMAL_TEXT("NORMAL_TEXT"),
    
    TITLE("TITLE"),
    
    SUBTITLE("SUBTITLE"),
    
    HEADING_1("HEADING_1"),
    
    HEADING_2("HEADING_2"),
    
    HEADING_3("HEADING_3"),
    
    HEADING_4("HEADING_4"),
    
    HEADING_5("HEADING_5"),
    
    HEADING_6("HEADING_6");

    private String value;

    NamedStyleTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static NamedStyleTypeEnum fromValue(String value) {
      for (NamedStyleTypeEnum b : NamedStyleTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<NamedStyleTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final NamedStyleTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public NamedStyleTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return NamedStyleTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      NamedStyleTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_NAMED_STYLE_TYPE = "namedStyleType";
  @SerializedName(SERIALIZED_NAME_NAMED_STYLE_TYPE)
  private NamedStyleTypeEnum namedStyleType;

  public static final String SERIALIZED_NAME_PAGE_BREAK_BEFORE = "pageBreakBefore";
  @SerializedName(SERIALIZED_NAME_PAGE_BREAK_BEFORE)
  private Boolean pageBreakBefore;

  public static final String SERIALIZED_NAME_SHADING = "shading";
  @SerializedName(SERIALIZED_NAME_SHADING)
  private Shading shading;

  public static final String SERIALIZED_NAME_SPACE_ABOVE = "spaceAbove";
  @SerializedName(SERIALIZED_NAME_SPACE_ABOVE)
  private Dimension spaceAbove;

  public static final String SERIALIZED_NAME_SPACE_BELOW = "spaceBelow";
  @SerializedName(SERIALIZED_NAME_SPACE_BELOW)
  private Dimension spaceBelow;

  /**
   * The spacing mode for the paragraph.
   */
  @JsonAdapter(SpacingModeEnum.Adapter.class)
  public enum SpacingModeEnum {
    SPACING_MODE_UNSPECIFIED("SPACING_MODE_UNSPECIFIED"),
    
    NEVER_COLLAPSE("NEVER_COLLAPSE"),
    
    COLLAPSE_LISTS("COLLAPSE_LISTS");

    private String value;

    SpacingModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SpacingModeEnum fromValue(String value) {
      for (SpacingModeEnum b : SpacingModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SpacingModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SpacingModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SpacingModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SpacingModeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SpacingModeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SPACING_MODE = "spacingMode";
  @SerializedName(SERIALIZED_NAME_SPACING_MODE)
  private SpacingModeEnum spacingMode;

  public static final String SERIALIZED_NAME_TAB_STOPS = "tabStops";
  @SerializedName(SERIALIZED_NAME_TAB_STOPS)
  private List<TabStop> tabStops = new ArrayList<>();

  public ParagraphStyle() {
  }

  public ParagraphStyle alignment(AlignmentEnum alignment) {
    this.alignment = alignment;
    return this;
  }

  /**
   * The text alignment for this paragraph.
   * @return alignment
   */
  @javax.annotation.Nullable
  public AlignmentEnum getAlignment() {
    return alignment;
  }

  public void setAlignment(AlignmentEnum alignment) {
    this.alignment = alignment;
  }


  public ParagraphStyle avoidWidowAndOrphan(Boolean avoidWidowAndOrphan) {
    this.avoidWidowAndOrphan = avoidWidowAndOrphan;
    return this;
  }

  /**
   * Whether to avoid widows and orphans for the paragraph. If unset, the value is inherited from the parent.
   * @return avoidWidowAndOrphan
   */
  @javax.annotation.Nullable
  public Boolean getAvoidWidowAndOrphan() {
    return avoidWidowAndOrphan;
  }

  public void setAvoidWidowAndOrphan(Boolean avoidWidowAndOrphan) {
    this.avoidWidowAndOrphan = avoidWidowAndOrphan;
  }


  public ParagraphStyle borderBetween(ParagraphBorder borderBetween) {
    this.borderBetween = borderBetween;
    return this;
  }

  /**
   * Get borderBetween
   * @return borderBetween
   */
  @javax.annotation.Nullable
  public ParagraphBorder getBorderBetween() {
    return borderBetween;
  }

  public void setBorderBetween(ParagraphBorder borderBetween) {
    this.borderBetween = borderBetween;
  }


  public ParagraphStyle borderBottom(ParagraphBorder borderBottom) {
    this.borderBottom = borderBottom;
    return this;
  }

  /**
   * Get borderBottom
   * @return borderBottom
   */
  @javax.annotation.Nullable
  public ParagraphBorder getBorderBottom() {
    return borderBottom;
  }

  public void setBorderBottom(ParagraphBorder borderBottom) {
    this.borderBottom = borderBottom;
  }


  public ParagraphStyle borderLeft(ParagraphBorder borderLeft) {
    this.borderLeft = borderLeft;
    return this;
  }

  /**
   * Get borderLeft
   * @return borderLeft
   */
  @javax.annotation.Nullable
  public ParagraphBorder getBorderLeft() {
    return borderLeft;
  }

  public void setBorderLeft(ParagraphBorder borderLeft) {
    this.borderLeft = borderLeft;
  }


  public ParagraphStyle borderRight(ParagraphBorder borderRight) {
    this.borderRight = borderRight;
    return this;
  }

  /**
   * Get borderRight
   * @return borderRight
   */
  @javax.annotation.Nullable
  public ParagraphBorder getBorderRight() {
    return borderRight;
  }

  public void setBorderRight(ParagraphBorder borderRight) {
    this.borderRight = borderRight;
  }


  public ParagraphStyle borderTop(ParagraphBorder borderTop) {
    this.borderTop = borderTop;
    return this;
  }

  /**
   * Get borderTop
   * @return borderTop
   */
  @javax.annotation.Nullable
  public ParagraphBorder getBorderTop() {
    return borderTop;
  }

  public void setBorderTop(ParagraphBorder borderTop) {
    this.borderTop = borderTop;
  }


  public ParagraphStyle direction(DirectionEnum direction) {
    this.direction = direction;
    return this;
  }

  /**
   * The text direction of this paragraph. If unset, the value defaults to LEFT_TO_RIGHT since paragraph direction is not inherited.
   * @return direction
   */
  @javax.annotation.Nullable
  public DirectionEnum getDirection() {
    return direction;
  }

  public void setDirection(DirectionEnum direction) {
    this.direction = direction;
  }


  public ParagraphStyle headingId(String headingId) {
    this.headingId = headingId;
    return this;
  }

  /**
   * The heading ID of the paragraph. If empty, then this paragraph is not a heading. This property is read-only.
   * @return headingId
   */
  @javax.annotation.Nullable
  public String getHeadingId() {
    return headingId;
  }

  public void setHeadingId(String headingId) {
    this.headingId = headingId;
  }


  public ParagraphStyle indentEnd(Dimension indentEnd) {
    this.indentEnd = indentEnd;
    return this;
  }

  /**
   * Get indentEnd
   * @return indentEnd
   */
  @javax.annotation.Nullable
  public Dimension getIndentEnd() {
    return indentEnd;
  }

  public void setIndentEnd(Dimension indentEnd) {
    this.indentEnd = indentEnd;
  }


  public ParagraphStyle indentFirstLine(Dimension indentFirstLine) {
    this.indentFirstLine = indentFirstLine;
    return this;
  }

  /**
   * Get indentFirstLine
   * @return indentFirstLine
   */
  @javax.annotation.Nullable
  public Dimension getIndentFirstLine() {
    return indentFirstLine;
  }

  public void setIndentFirstLine(Dimension indentFirstLine) {
    this.indentFirstLine = indentFirstLine;
  }


  public ParagraphStyle indentStart(Dimension indentStart) {
    this.indentStart = indentStart;
    return this;
  }

  /**
   * Get indentStart
   * @return indentStart
   */
  @javax.annotation.Nullable
  public Dimension getIndentStart() {
    return indentStart;
  }

  public void setIndentStart(Dimension indentStart) {
    this.indentStart = indentStart;
  }


  public ParagraphStyle keepLinesTogether(Boolean keepLinesTogether) {
    this.keepLinesTogether = keepLinesTogether;
    return this;
  }

  /**
   * Whether all lines of the paragraph should be laid out on the same page or column if possible. If unset, the value is inherited from the parent.
   * @return keepLinesTogether
   */
  @javax.annotation.Nullable
  public Boolean getKeepLinesTogether() {
    return keepLinesTogether;
  }

  public void setKeepLinesTogether(Boolean keepLinesTogether) {
    this.keepLinesTogether = keepLinesTogether;
  }


  public ParagraphStyle keepWithNext(Boolean keepWithNext) {
    this.keepWithNext = keepWithNext;
    return this;
  }

  /**
   * Whether at least a part of this paragraph should be laid out on the same page or column as the next paragraph if possible. If unset, the value is inherited from the parent.
   * @return keepWithNext
   */
  @javax.annotation.Nullable
  public Boolean getKeepWithNext() {
    return keepWithNext;
  }

  public void setKeepWithNext(Boolean keepWithNext) {
    this.keepWithNext = keepWithNext;
  }


  public ParagraphStyle lineSpacing(Float lineSpacing) {
    this.lineSpacing = lineSpacing;
    return this;
  }

  /**
   * The amount of space between lines, as a percentage of normal, where normal is represented as 100.0. If unset, the value is inherited from the parent.
   * @return lineSpacing
   */
  @javax.annotation.Nullable
  public Float getLineSpacing() {
    return lineSpacing;
  }

  public void setLineSpacing(Float lineSpacing) {
    this.lineSpacing = lineSpacing;
  }


  public ParagraphStyle namedStyleType(NamedStyleTypeEnum namedStyleType) {
    this.namedStyleType = namedStyleType;
    return this;
  }

  /**
   * The named style type of the paragraph. Since updating the named style type affects other properties within ParagraphStyle, the named style type is applied before the other properties are updated.
   * @return namedStyleType
   */
  @javax.annotation.Nullable
  public NamedStyleTypeEnum getNamedStyleType() {
    return namedStyleType;
  }

  public void setNamedStyleType(NamedStyleTypeEnum namedStyleType) {
    this.namedStyleType = namedStyleType;
  }


  public ParagraphStyle pageBreakBefore(Boolean pageBreakBefore) {
    this.pageBreakBefore = pageBreakBefore;
    return this;
  }

  /**
   * Whether the current paragraph should always start at the beginning of a page. If unset, the value is inherited from the parent. Attempting to update page_break_before for paragraphs in unsupported regions, including Table, Header, Footer and Footnote, can result in an invalid document state that returns a 400 bad request error.
   * @return pageBreakBefore
   */
  @javax.annotation.Nullable
  public Boolean getPageBreakBefore() {
    return pageBreakBefore;
  }

  public void setPageBreakBefore(Boolean pageBreakBefore) {
    this.pageBreakBefore = pageBreakBefore;
  }


  public ParagraphStyle shading(Shading shading) {
    this.shading = shading;
    return this;
  }

  /**
   * Get shading
   * @return shading
   */
  @javax.annotation.Nullable
  public Shading getShading() {
    return shading;
  }

  public void setShading(Shading shading) {
    this.shading = shading;
  }


  public ParagraphStyle spaceAbove(Dimension spaceAbove) {
    this.spaceAbove = spaceAbove;
    return this;
  }

  /**
   * Get spaceAbove
   * @return spaceAbove
   */
  @javax.annotation.Nullable
  public Dimension getSpaceAbove() {
    return spaceAbove;
  }

  public void setSpaceAbove(Dimension spaceAbove) {
    this.spaceAbove = spaceAbove;
  }


  public ParagraphStyle spaceBelow(Dimension spaceBelow) {
    this.spaceBelow = spaceBelow;
    return this;
  }

  /**
   * Get spaceBelow
   * @return spaceBelow
   */
  @javax.annotation.Nullable
  public Dimension getSpaceBelow() {
    return spaceBelow;
  }

  public void setSpaceBelow(Dimension spaceBelow) {
    this.spaceBelow = spaceBelow;
  }


  public ParagraphStyle spacingMode(SpacingModeEnum spacingMode) {
    this.spacingMode = spacingMode;
    return this;
  }

  /**
   * The spacing mode for the paragraph.
   * @return spacingMode
   */
  @javax.annotation.Nullable
  public SpacingModeEnum getSpacingMode() {
    return spacingMode;
  }

  public void setSpacingMode(SpacingModeEnum spacingMode) {
    this.spacingMode = spacingMode;
  }


  public ParagraphStyle tabStops(List<TabStop> tabStops) {
    this.tabStops = tabStops;
    return this;
  }

  public ParagraphStyle addTabStopsItem(TabStop tabStopsItem) {
    if (this.tabStops == null) {
      this.tabStops = new ArrayList<>();
    }
    this.tabStops.add(tabStopsItem);
    return this;
  }

  /**
   * A list of the tab stops for this paragraph. The list of tab stops is not inherited. This property is read-only.
   * @return tabStops
   */
  @javax.annotation.Nullable
  public List<TabStop> getTabStops() {
    return tabStops;
  }

  public void setTabStops(List<TabStop> tabStops) {
    this.tabStops = tabStops;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ParagraphStyle paragraphStyle = (ParagraphStyle) o;
    return Objects.equals(this.alignment, paragraphStyle.alignment) &&
        Objects.equals(this.avoidWidowAndOrphan, paragraphStyle.avoidWidowAndOrphan) &&
        Objects.equals(this.borderBetween, paragraphStyle.borderBetween) &&
        Objects.equals(this.borderBottom, paragraphStyle.borderBottom) &&
        Objects.equals(this.borderLeft, paragraphStyle.borderLeft) &&
        Objects.equals(this.borderRight, paragraphStyle.borderRight) &&
        Objects.equals(this.borderTop, paragraphStyle.borderTop) &&
        Objects.equals(this.direction, paragraphStyle.direction) &&
        Objects.equals(this.headingId, paragraphStyle.headingId) &&
        Objects.equals(this.indentEnd, paragraphStyle.indentEnd) &&
        Objects.equals(this.indentFirstLine, paragraphStyle.indentFirstLine) &&
        Objects.equals(this.indentStart, paragraphStyle.indentStart) &&
        Objects.equals(this.keepLinesTogether, paragraphStyle.keepLinesTogether) &&
        Objects.equals(this.keepWithNext, paragraphStyle.keepWithNext) &&
        Objects.equals(this.lineSpacing, paragraphStyle.lineSpacing) &&
        Objects.equals(this.namedStyleType, paragraphStyle.namedStyleType) &&
        Objects.equals(this.pageBreakBefore, paragraphStyle.pageBreakBefore) &&
        Objects.equals(this.shading, paragraphStyle.shading) &&
        Objects.equals(this.spaceAbove, paragraphStyle.spaceAbove) &&
        Objects.equals(this.spaceBelow, paragraphStyle.spaceBelow) &&
        Objects.equals(this.spacingMode, paragraphStyle.spacingMode) &&
        Objects.equals(this.tabStops, paragraphStyle.tabStops);
  }

  @Override
  public int hashCode() {
    return Objects.hash(alignment, avoidWidowAndOrphan, borderBetween, borderBottom, borderLeft, borderRight, borderTop, direction, headingId, indentEnd, indentFirstLine, indentStart, keepLinesTogether, keepWithNext, lineSpacing, namedStyleType, pageBreakBefore, shading, spaceAbove, spaceBelow, spacingMode, tabStops);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ParagraphStyle {\n");
    sb.append("    alignment: ").append(toIndentedString(alignment)).append("\n");
    sb.append("    avoidWidowAndOrphan: ").append(toIndentedString(avoidWidowAndOrphan)).append("\n");
    sb.append("    borderBetween: ").append(toIndentedString(borderBetween)).append("\n");
    sb.append("    borderBottom: ").append(toIndentedString(borderBottom)).append("\n");
    sb.append("    borderLeft: ").append(toIndentedString(borderLeft)).append("\n");
    sb.append("    borderRight: ").append(toIndentedString(borderRight)).append("\n");
    sb.append("    borderTop: ").append(toIndentedString(borderTop)).append("\n");
    sb.append("    direction: ").append(toIndentedString(direction)).append("\n");
    sb.append("    headingId: ").append(toIndentedString(headingId)).append("\n");
    sb.append("    indentEnd: ").append(toIndentedString(indentEnd)).append("\n");
    sb.append("    indentFirstLine: ").append(toIndentedString(indentFirstLine)).append("\n");
    sb.append("    indentStart: ").append(toIndentedString(indentStart)).append("\n");
    sb.append("    keepLinesTogether: ").append(toIndentedString(keepLinesTogether)).append("\n");
    sb.append("    keepWithNext: ").append(toIndentedString(keepWithNext)).append("\n");
    sb.append("    lineSpacing: ").append(toIndentedString(lineSpacing)).append("\n");
    sb.append("    namedStyleType: ").append(toIndentedString(namedStyleType)).append("\n");
    sb.append("    pageBreakBefore: ").append(toIndentedString(pageBreakBefore)).append("\n");
    sb.append("    shading: ").append(toIndentedString(shading)).append("\n");
    sb.append("    spaceAbove: ").append(toIndentedString(spaceAbove)).append("\n");
    sb.append("    spaceBelow: ").append(toIndentedString(spaceBelow)).append("\n");
    sb.append("    spacingMode: ").append(toIndentedString(spacingMode)).append("\n");
    sb.append("    tabStops: ").append(toIndentedString(tabStops)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("alignment");
    openapiFields.add("avoidWidowAndOrphan");
    openapiFields.add("borderBetween");
    openapiFields.add("borderBottom");
    openapiFields.add("borderLeft");
    openapiFields.add("borderRight");
    openapiFields.add("borderTop");
    openapiFields.add("direction");
    openapiFields.add("headingId");
    openapiFields.add("indentEnd");
    openapiFields.add("indentFirstLine");
    openapiFields.add("indentStart");
    openapiFields.add("keepLinesTogether");
    openapiFields.add("keepWithNext");
    openapiFields.add("lineSpacing");
    openapiFields.add("namedStyleType");
    openapiFields.add("pageBreakBefore");
    openapiFields.add("shading");
    openapiFields.add("spaceAbove");
    openapiFields.add("spaceBelow");
    openapiFields.add("spacingMode");
    openapiFields.add("tabStops");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ParagraphStyle
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ParagraphStyle.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ParagraphStyle is not found in the empty JSON string", ParagraphStyle.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ParagraphStyle.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ParagraphStyle` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("alignment") != null && !jsonObj.get("alignment").isJsonNull()) && !jsonObj.get("alignment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `alignment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("alignment").toString()));
      }
      // validate the optional field `alignment`
      if (jsonObj.get("alignment") != null && !jsonObj.get("alignment").isJsonNull()) {
        AlignmentEnum.validateJsonElement(jsonObj.get("alignment"));
      }
      // validate the optional field `borderBetween`
      if (jsonObj.get("borderBetween") != null && !jsonObj.get("borderBetween").isJsonNull()) {
        ParagraphBorder.validateJsonElement(jsonObj.get("borderBetween"));
      }
      // validate the optional field `borderBottom`
      if (jsonObj.get("borderBottom") != null && !jsonObj.get("borderBottom").isJsonNull()) {
        ParagraphBorder.validateJsonElement(jsonObj.get("borderBottom"));
      }
      // validate the optional field `borderLeft`
      if (jsonObj.get("borderLeft") != null && !jsonObj.get("borderLeft").isJsonNull()) {
        ParagraphBorder.validateJsonElement(jsonObj.get("borderLeft"));
      }
      // validate the optional field `borderRight`
      if (jsonObj.get("borderRight") != null && !jsonObj.get("borderRight").isJsonNull()) {
        ParagraphBorder.validateJsonElement(jsonObj.get("borderRight"));
      }
      // validate the optional field `borderTop`
      if (jsonObj.get("borderTop") != null && !jsonObj.get("borderTop").isJsonNull()) {
        ParagraphBorder.validateJsonElement(jsonObj.get("borderTop"));
      }
      if ((jsonObj.get("direction") != null && !jsonObj.get("direction").isJsonNull()) && !jsonObj.get("direction").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `direction` to be a primitive type in the JSON string but got `%s`", jsonObj.get("direction").toString()));
      }
      // validate the optional field `direction`
      if (jsonObj.get("direction") != null && !jsonObj.get("direction").isJsonNull()) {
        DirectionEnum.validateJsonElement(jsonObj.get("direction"));
      }
      if ((jsonObj.get("headingId") != null && !jsonObj.get("headingId").isJsonNull()) && !jsonObj.get("headingId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `headingId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("headingId").toString()));
      }
      // validate the optional field `indentEnd`
      if (jsonObj.get("indentEnd") != null && !jsonObj.get("indentEnd").isJsonNull()) {
        Dimension.validateJsonElement(jsonObj.get("indentEnd"));
      }
      // validate the optional field `indentFirstLine`
      if (jsonObj.get("indentFirstLine") != null && !jsonObj.get("indentFirstLine").isJsonNull()) {
        Dimension.validateJsonElement(jsonObj.get("indentFirstLine"));
      }
      // validate the optional field `indentStart`
      if (jsonObj.get("indentStart") != null && !jsonObj.get("indentStart").isJsonNull()) {
        Dimension.validateJsonElement(jsonObj.get("indentStart"));
      }
      if ((jsonObj.get("namedStyleType") != null && !jsonObj.get("namedStyleType").isJsonNull()) && !jsonObj.get("namedStyleType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `namedStyleType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("namedStyleType").toString()));
      }
      // validate the optional field `namedStyleType`
      if (jsonObj.get("namedStyleType") != null && !jsonObj.get("namedStyleType").isJsonNull()) {
        NamedStyleTypeEnum.validateJsonElement(jsonObj.get("namedStyleType"));
      }
      // validate the optional field `shading`
      if (jsonObj.get("shading") != null && !jsonObj.get("shading").isJsonNull()) {
        Shading.validateJsonElement(jsonObj.get("shading"));
      }
      // validate the optional field `spaceAbove`
      if (jsonObj.get("spaceAbove") != null && !jsonObj.get("spaceAbove").isJsonNull()) {
        Dimension.validateJsonElement(jsonObj.get("spaceAbove"));
      }
      // validate the optional field `spaceBelow`
      if (jsonObj.get("spaceBelow") != null && !jsonObj.get("spaceBelow").isJsonNull()) {
        Dimension.validateJsonElement(jsonObj.get("spaceBelow"));
      }
      if ((jsonObj.get("spacingMode") != null && !jsonObj.get("spacingMode").isJsonNull()) && !jsonObj.get("spacingMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `spacingMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("spacingMode").toString()));
      }
      // validate the optional field `spacingMode`
      if (jsonObj.get("spacingMode") != null && !jsonObj.get("spacingMode").isJsonNull()) {
        SpacingModeEnum.validateJsonElement(jsonObj.get("spacingMode"));
      }
      if (jsonObj.get("tabStops") != null && !jsonObj.get("tabStops").isJsonNull()) {
        JsonArray jsonArraytabStops = jsonObj.getAsJsonArray("tabStops");
        if (jsonArraytabStops != null) {
          // ensure the json data is an array
          if (!jsonObj.get("tabStops").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `tabStops` to be an array in the JSON string but got `%s`", jsonObj.get("tabStops").toString()));
          }

          // validate the optional field `tabStops` (array)
          for (int i = 0; i < jsonArraytabStops.size(); i++) {
            TabStop.validateJsonElement(jsonArraytabStops.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ParagraphStyle.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ParagraphStyle' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ParagraphStyle> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ParagraphStyle.class));

       return (TypeAdapter<T>) new TypeAdapter<ParagraphStyle>() {
           @Override
           public void write(JsonWriter out, ParagraphStyle value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ParagraphStyle read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ParagraphStyle given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ParagraphStyle
   * @throws IOException if the JSON string is invalid with respect to ParagraphStyle
   */
  public static ParagraphStyle fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ParagraphStyle.class);
  }

  /**
   * Convert an instance of ParagraphStyle to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

