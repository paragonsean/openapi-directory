/*
 * Google Docs API
 * Reads and writes Google Docs documents.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Dimension;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Styles that apply to a table row.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:47:07.584674-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TableRowStyle {
  public static final String SERIALIZED_NAME_MIN_ROW_HEIGHT = "minRowHeight";
  @SerializedName(SERIALIZED_NAME_MIN_ROW_HEIGHT)
  private Dimension minRowHeight;

  public static final String SERIALIZED_NAME_PREVENT_OVERFLOW = "preventOverflow";
  @SerializedName(SERIALIZED_NAME_PREVENT_OVERFLOW)
  private Boolean preventOverflow;

  public static final String SERIALIZED_NAME_TABLE_HEADER = "tableHeader";
  @SerializedName(SERIALIZED_NAME_TABLE_HEADER)
  private Boolean tableHeader;

  public TableRowStyle() {
  }

  public TableRowStyle minRowHeight(Dimension minRowHeight) {
    this.minRowHeight = minRowHeight;
    return this;
  }

  /**
   * Get minRowHeight
   * @return minRowHeight
   */
  @javax.annotation.Nullable
  public Dimension getMinRowHeight() {
    return minRowHeight;
  }

  public void setMinRowHeight(Dimension minRowHeight) {
    this.minRowHeight = minRowHeight;
  }


  public TableRowStyle preventOverflow(Boolean preventOverflow) {
    this.preventOverflow = preventOverflow;
    return this;
  }

  /**
   * Whether the row cannot overflow across page or column boundaries.
   * @return preventOverflow
   */
  @javax.annotation.Nullable
  public Boolean getPreventOverflow() {
    return preventOverflow;
  }

  public void setPreventOverflow(Boolean preventOverflow) {
    this.preventOverflow = preventOverflow;
  }


  public TableRowStyle tableHeader(Boolean tableHeader) {
    this.tableHeader = tableHeader;
    return this;
  }

  /**
   * Whether the row is a table header.
   * @return tableHeader
   */
  @javax.annotation.Nullable
  public Boolean getTableHeader() {
    return tableHeader;
  }

  public void setTableHeader(Boolean tableHeader) {
    this.tableHeader = tableHeader;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TableRowStyle tableRowStyle = (TableRowStyle) o;
    return Objects.equals(this.minRowHeight, tableRowStyle.minRowHeight) &&
        Objects.equals(this.preventOverflow, tableRowStyle.preventOverflow) &&
        Objects.equals(this.tableHeader, tableRowStyle.tableHeader);
  }

  @Override
  public int hashCode() {
    return Objects.hash(minRowHeight, preventOverflow, tableHeader);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TableRowStyle {\n");
    sb.append("    minRowHeight: ").append(toIndentedString(minRowHeight)).append("\n");
    sb.append("    preventOverflow: ").append(toIndentedString(preventOverflow)).append("\n");
    sb.append("    tableHeader: ").append(toIndentedString(tableHeader)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("minRowHeight");
    openapiFields.add("preventOverflow");
    openapiFields.add("tableHeader");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TableRowStyle
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TableRowStyle.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TableRowStyle is not found in the empty JSON string", TableRowStyle.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TableRowStyle.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TableRowStyle` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `minRowHeight`
      if (jsonObj.get("minRowHeight") != null && !jsonObj.get("minRowHeight").isJsonNull()) {
        Dimension.validateJsonElement(jsonObj.get("minRowHeight"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TableRowStyle.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TableRowStyle' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TableRowStyle> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TableRowStyle.class));

       return (TypeAdapter<T>) new TypeAdapter<TableRowStyle>() {
           @Override
           public void write(JsonWriter out, TableRowStyle value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TableRowStyle read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TableRowStyle given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TableRowStyle
   * @throws IOException if the JSON string is invalid with respect to TableRowStyle
   */
  public static TableRowStyle fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TableRowStyle.class);
  }

  /**
   * Convert an instance of TableRowStyle to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

