/*
 * Google Docs API
 * Reads and writes Google Docs documents.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Background;
import org.openapitools.client.model.Dimension;
import org.openapitools.client.model.Size;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The style of the document.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:47:07.584674-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DocumentStyle {
  public static final String SERIALIZED_NAME_BACKGROUND = "background";
  @SerializedName(SERIALIZED_NAME_BACKGROUND)
  private Background background;

  public static final String SERIALIZED_NAME_DEFAULT_FOOTER_ID = "defaultFooterId";
  @SerializedName(SERIALIZED_NAME_DEFAULT_FOOTER_ID)
  private String defaultFooterId;

  public static final String SERIALIZED_NAME_DEFAULT_HEADER_ID = "defaultHeaderId";
  @SerializedName(SERIALIZED_NAME_DEFAULT_HEADER_ID)
  private String defaultHeaderId;

  public static final String SERIALIZED_NAME_EVEN_PAGE_FOOTER_ID = "evenPageFooterId";
  @SerializedName(SERIALIZED_NAME_EVEN_PAGE_FOOTER_ID)
  private String evenPageFooterId;

  public static final String SERIALIZED_NAME_EVEN_PAGE_HEADER_ID = "evenPageHeaderId";
  @SerializedName(SERIALIZED_NAME_EVEN_PAGE_HEADER_ID)
  private String evenPageHeaderId;

  public static final String SERIALIZED_NAME_FIRST_PAGE_FOOTER_ID = "firstPageFooterId";
  @SerializedName(SERIALIZED_NAME_FIRST_PAGE_FOOTER_ID)
  private String firstPageFooterId;

  public static final String SERIALIZED_NAME_FIRST_PAGE_HEADER_ID = "firstPageHeaderId";
  @SerializedName(SERIALIZED_NAME_FIRST_PAGE_HEADER_ID)
  private String firstPageHeaderId;

  public static final String SERIALIZED_NAME_FLIP_PAGE_ORIENTATION = "flipPageOrientation";
  @SerializedName(SERIALIZED_NAME_FLIP_PAGE_ORIENTATION)
  private Boolean flipPageOrientation;

  public static final String SERIALIZED_NAME_MARGIN_BOTTOM = "marginBottom";
  @SerializedName(SERIALIZED_NAME_MARGIN_BOTTOM)
  private Dimension marginBottom;

  public static final String SERIALIZED_NAME_MARGIN_FOOTER = "marginFooter";
  @SerializedName(SERIALIZED_NAME_MARGIN_FOOTER)
  private Dimension marginFooter;

  public static final String SERIALIZED_NAME_MARGIN_HEADER = "marginHeader";
  @SerializedName(SERIALIZED_NAME_MARGIN_HEADER)
  private Dimension marginHeader;

  public static final String SERIALIZED_NAME_MARGIN_LEFT = "marginLeft";
  @SerializedName(SERIALIZED_NAME_MARGIN_LEFT)
  private Dimension marginLeft;

  public static final String SERIALIZED_NAME_MARGIN_RIGHT = "marginRight";
  @SerializedName(SERIALIZED_NAME_MARGIN_RIGHT)
  private Dimension marginRight;

  public static final String SERIALIZED_NAME_MARGIN_TOP = "marginTop";
  @SerializedName(SERIALIZED_NAME_MARGIN_TOP)
  private Dimension marginTop;

  public static final String SERIALIZED_NAME_PAGE_NUMBER_START = "pageNumberStart";
  @SerializedName(SERIALIZED_NAME_PAGE_NUMBER_START)
  private Integer pageNumberStart;

  public static final String SERIALIZED_NAME_PAGE_SIZE = "pageSize";
  @SerializedName(SERIALIZED_NAME_PAGE_SIZE)
  private Size pageSize;

  public static final String SERIALIZED_NAME_USE_CUSTOM_HEADER_FOOTER_MARGINS = "useCustomHeaderFooterMargins";
  @SerializedName(SERIALIZED_NAME_USE_CUSTOM_HEADER_FOOTER_MARGINS)
  private Boolean useCustomHeaderFooterMargins;

  public static final String SERIALIZED_NAME_USE_EVEN_PAGE_HEADER_FOOTER = "useEvenPageHeaderFooter";
  @SerializedName(SERIALIZED_NAME_USE_EVEN_PAGE_HEADER_FOOTER)
  private Boolean useEvenPageHeaderFooter;

  public static final String SERIALIZED_NAME_USE_FIRST_PAGE_HEADER_FOOTER = "useFirstPageHeaderFooter";
  @SerializedName(SERIALIZED_NAME_USE_FIRST_PAGE_HEADER_FOOTER)
  private Boolean useFirstPageHeaderFooter;

  public DocumentStyle() {
  }

  public DocumentStyle background(Background background) {
    this.background = background;
    return this;
  }

  /**
   * Get background
   * @return background
   */
  @javax.annotation.Nullable
  public Background getBackground() {
    return background;
  }

  public void setBackground(Background background) {
    this.background = background;
  }


  public DocumentStyle defaultFooterId(String defaultFooterId) {
    this.defaultFooterId = defaultFooterId;
    return this;
  }

  /**
   * The ID of the default footer. If not set, there&#39;s no default footer. This property is read-only.
   * @return defaultFooterId
   */
  @javax.annotation.Nullable
  public String getDefaultFooterId() {
    return defaultFooterId;
  }

  public void setDefaultFooterId(String defaultFooterId) {
    this.defaultFooterId = defaultFooterId;
  }


  public DocumentStyle defaultHeaderId(String defaultHeaderId) {
    this.defaultHeaderId = defaultHeaderId;
    return this;
  }

  /**
   * The ID of the default header. If not set, there&#39;s no default header. This property is read-only.
   * @return defaultHeaderId
   */
  @javax.annotation.Nullable
  public String getDefaultHeaderId() {
    return defaultHeaderId;
  }

  public void setDefaultHeaderId(String defaultHeaderId) {
    this.defaultHeaderId = defaultHeaderId;
  }


  public DocumentStyle evenPageFooterId(String evenPageFooterId) {
    this.evenPageFooterId = evenPageFooterId;
    return this;
  }

  /**
   * The ID of the footer used only for even pages. The value of use_even_page_header_footer determines whether to use the default_footer_id or this value for the footer on even pages. If not set, there&#39;s no even page footer. This property is read-only.
   * @return evenPageFooterId
   */
  @javax.annotation.Nullable
  public String getEvenPageFooterId() {
    return evenPageFooterId;
  }

  public void setEvenPageFooterId(String evenPageFooterId) {
    this.evenPageFooterId = evenPageFooterId;
  }


  public DocumentStyle evenPageHeaderId(String evenPageHeaderId) {
    this.evenPageHeaderId = evenPageHeaderId;
    return this;
  }

  /**
   * The ID of the header used only for even pages. The value of use_even_page_header_footer determines whether to use the default_header_id or this value for the header on even pages. If not set, there&#39;s no even page header. This property is read-only.
   * @return evenPageHeaderId
   */
  @javax.annotation.Nullable
  public String getEvenPageHeaderId() {
    return evenPageHeaderId;
  }

  public void setEvenPageHeaderId(String evenPageHeaderId) {
    this.evenPageHeaderId = evenPageHeaderId;
  }


  public DocumentStyle firstPageFooterId(String firstPageFooterId) {
    this.firstPageFooterId = firstPageFooterId;
    return this;
  }

  /**
   * The ID of the footer used only for the first page. If not set then a unique footer for the first page does not exist. The value of use_first_page_header_footer determines whether to use the default_footer_id or this value for the footer on the first page. If not set, there&#39;s no first page footer. This property is read-only.
   * @return firstPageFooterId
   */
  @javax.annotation.Nullable
  public String getFirstPageFooterId() {
    return firstPageFooterId;
  }

  public void setFirstPageFooterId(String firstPageFooterId) {
    this.firstPageFooterId = firstPageFooterId;
  }


  public DocumentStyle firstPageHeaderId(String firstPageHeaderId) {
    this.firstPageHeaderId = firstPageHeaderId;
    return this;
  }

  /**
   * The ID of the header used only for the first page. If not set then a unique header for the first page does not exist. The value of use_first_page_header_footer determines whether to use the default_header_id or this value for the header on the first page. If not set, there&#39;s no first page header. This property is read-only.
   * @return firstPageHeaderId
   */
  @javax.annotation.Nullable
  public String getFirstPageHeaderId() {
    return firstPageHeaderId;
  }

  public void setFirstPageHeaderId(String firstPageHeaderId) {
    this.firstPageHeaderId = firstPageHeaderId;
  }


  public DocumentStyle flipPageOrientation(Boolean flipPageOrientation) {
    this.flipPageOrientation = flipPageOrientation;
    return this;
  }

  /**
   * Optional. Indicates whether to flip the dimensions of the page_size, which allows changing the page orientation between portrait and landscape.
   * @return flipPageOrientation
   */
  @javax.annotation.Nullable
  public Boolean getFlipPageOrientation() {
    return flipPageOrientation;
  }

  public void setFlipPageOrientation(Boolean flipPageOrientation) {
    this.flipPageOrientation = flipPageOrientation;
  }


  public DocumentStyle marginBottom(Dimension marginBottom) {
    this.marginBottom = marginBottom;
    return this;
  }

  /**
   * Get marginBottom
   * @return marginBottom
   */
  @javax.annotation.Nullable
  public Dimension getMarginBottom() {
    return marginBottom;
  }

  public void setMarginBottom(Dimension marginBottom) {
    this.marginBottom = marginBottom;
  }


  public DocumentStyle marginFooter(Dimension marginFooter) {
    this.marginFooter = marginFooter;
    return this;
  }

  /**
   * Get marginFooter
   * @return marginFooter
   */
  @javax.annotation.Nullable
  public Dimension getMarginFooter() {
    return marginFooter;
  }

  public void setMarginFooter(Dimension marginFooter) {
    this.marginFooter = marginFooter;
  }


  public DocumentStyle marginHeader(Dimension marginHeader) {
    this.marginHeader = marginHeader;
    return this;
  }

  /**
   * Get marginHeader
   * @return marginHeader
   */
  @javax.annotation.Nullable
  public Dimension getMarginHeader() {
    return marginHeader;
  }

  public void setMarginHeader(Dimension marginHeader) {
    this.marginHeader = marginHeader;
  }


  public DocumentStyle marginLeft(Dimension marginLeft) {
    this.marginLeft = marginLeft;
    return this;
  }

  /**
   * Get marginLeft
   * @return marginLeft
   */
  @javax.annotation.Nullable
  public Dimension getMarginLeft() {
    return marginLeft;
  }

  public void setMarginLeft(Dimension marginLeft) {
    this.marginLeft = marginLeft;
  }


  public DocumentStyle marginRight(Dimension marginRight) {
    this.marginRight = marginRight;
    return this;
  }

  /**
   * Get marginRight
   * @return marginRight
   */
  @javax.annotation.Nullable
  public Dimension getMarginRight() {
    return marginRight;
  }

  public void setMarginRight(Dimension marginRight) {
    this.marginRight = marginRight;
  }


  public DocumentStyle marginTop(Dimension marginTop) {
    this.marginTop = marginTop;
    return this;
  }

  /**
   * Get marginTop
   * @return marginTop
   */
  @javax.annotation.Nullable
  public Dimension getMarginTop() {
    return marginTop;
  }

  public void setMarginTop(Dimension marginTop) {
    this.marginTop = marginTop;
  }


  public DocumentStyle pageNumberStart(Integer pageNumberStart) {
    this.pageNumberStart = pageNumberStart;
    return this;
  }

  /**
   * The page number from which to start counting the number of pages.
   * @return pageNumberStart
   */
  @javax.annotation.Nullable
  public Integer getPageNumberStart() {
    return pageNumberStart;
  }

  public void setPageNumberStart(Integer pageNumberStart) {
    this.pageNumberStart = pageNumberStart;
  }


  public DocumentStyle pageSize(Size pageSize) {
    this.pageSize = pageSize;
    return this;
  }

  /**
   * Get pageSize
   * @return pageSize
   */
  @javax.annotation.Nullable
  public Size getPageSize() {
    return pageSize;
  }

  public void setPageSize(Size pageSize) {
    this.pageSize = pageSize;
  }


  public DocumentStyle useCustomHeaderFooterMargins(Boolean useCustomHeaderFooterMargins) {
    this.useCustomHeaderFooterMargins = useCustomHeaderFooterMargins;
    return this;
  }

  /**
   * Indicates whether DocumentStyle margin_header, SectionStyle margin_header and DocumentStyle margin_footer, SectionStyle margin_footer are respected. When false, the default values in the Docs editor for header and footer margin are used. This property is read-only.
   * @return useCustomHeaderFooterMargins
   */
  @javax.annotation.Nullable
  public Boolean getUseCustomHeaderFooterMargins() {
    return useCustomHeaderFooterMargins;
  }

  public void setUseCustomHeaderFooterMargins(Boolean useCustomHeaderFooterMargins) {
    this.useCustomHeaderFooterMargins = useCustomHeaderFooterMargins;
  }


  public DocumentStyle useEvenPageHeaderFooter(Boolean useEvenPageHeaderFooter) {
    this.useEvenPageHeaderFooter = useEvenPageHeaderFooter;
    return this;
  }

  /**
   * Indicates whether to use the even page header / footer IDs for the even pages.
   * @return useEvenPageHeaderFooter
   */
  @javax.annotation.Nullable
  public Boolean getUseEvenPageHeaderFooter() {
    return useEvenPageHeaderFooter;
  }

  public void setUseEvenPageHeaderFooter(Boolean useEvenPageHeaderFooter) {
    this.useEvenPageHeaderFooter = useEvenPageHeaderFooter;
  }


  public DocumentStyle useFirstPageHeaderFooter(Boolean useFirstPageHeaderFooter) {
    this.useFirstPageHeaderFooter = useFirstPageHeaderFooter;
    return this;
  }

  /**
   * Indicates whether to use the first page header / footer IDs for the first page.
   * @return useFirstPageHeaderFooter
   */
  @javax.annotation.Nullable
  public Boolean getUseFirstPageHeaderFooter() {
    return useFirstPageHeaderFooter;
  }

  public void setUseFirstPageHeaderFooter(Boolean useFirstPageHeaderFooter) {
    this.useFirstPageHeaderFooter = useFirstPageHeaderFooter;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DocumentStyle documentStyle = (DocumentStyle) o;
    return Objects.equals(this.background, documentStyle.background) &&
        Objects.equals(this.defaultFooterId, documentStyle.defaultFooterId) &&
        Objects.equals(this.defaultHeaderId, documentStyle.defaultHeaderId) &&
        Objects.equals(this.evenPageFooterId, documentStyle.evenPageFooterId) &&
        Objects.equals(this.evenPageHeaderId, documentStyle.evenPageHeaderId) &&
        Objects.equals(this.firstPageFooterId, documentStyle.firstPageFooterId) &&
        Objects.equals(this.firstPageHeaderId, documentStyle.firstPageHeaderId) &&
        Objects.equals(this.flipPageOrientation, documentStyle.flipPageOrientation) &&
        Objects.equals(this.marginBottom, documentStyle.marginBottom) &&
        Objects.equals(this.marginFooter, documentStyle.marginFooter) &&
        Objects.equals(this.marginHeader, documentStyle.marginHeader) &&
        Objects.equals(this.marginLeft, documentStyle.marginLeft) &&
        Objects.equals(this.marginRight, documentStyle.marginRight) &&
        Objects.equals(this.marginTop, documentStyle.marginTop) &&
        Objects.equals(this.pageNumberStart, documentStyle.pageNumberStart) &&
        Objects.equals(this.pageSize, documentStyle.pageSize) &&
        Objects.equals(this.useCustomHeaderFooterMargins, documentStyle.useCustomHeaderFooterMargins) &&
        Objects.equals(this.useEvenPageHeaderFooter, documentStyle.useEvenPageHeaderFooter) &&
        Objects.equals(this.useFirstPageHeaderFooter, documentStyle.useFirstPageHeaderFooter);
  }

  @Override
  public int hashCode() {
    return Objects.hash(background, defaultFooterId, defaultHeaderId, evenPageFooterId, evenPageHeaderId, firstPageFooterId, firstPageHeaderId, flipPageOrientation, marginBottom, marginFooter, marginHeader, marginLeft, marginRight, marginTop, pageNumberStart, pageSize, useCustomHeaderFooterMargins, useEvenPageHeaderFooter, useFirstPageHeaderFooter);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DocumentStyle {\n");
    sb.append("    background: ").append(toIndentedString(background)).append("\n");
    sb.append("    defaultFooterId: ").append(toIndentedString(defaultFooterId)).append("\n");
    sb.append("    defaultHeaderId: ").append(toIndentedString(defaultHeaderId)).append("\n");
    sb.append("    evenPageFooterId: ").append(toIndentedString(evenPageFooterId)).append("\n");
    sb.append("    evenPageHeaderId: ").append(toIndentedString(evenPageHeaderId)).append("\n");
    sb.append("    firstPageFooterId: ").append(toIndentedString(firstPageFooterId)).append("\n");
    sb.append("    firstPageHeaderId: ").append(toIndentedString(firstPageHeaderId)).append("\n");
    sb.append("    flipPageOrientation: ").append(toIndentedString(flipPageOrientation)).append("\n");
    sb.append("    marginBottom: ").append(toIndentedString(marginBottom)).append("\n");
    sb.append("    marginFooter: ").append(toIndentedString(marginFooter)).append("\n");
    sb.append("    marginHeader: ").append(toIndentedString(marginHeader)).append("\n");
    sb.append("    marginLeft: ").append(toIndentedString(marginLeft)).append("\n");
    sb.append("    marginRight: ").append(toIndentedString(marginRight)).append("\n");
    sb.append("    marginTop: ").append(toIndentedString(marginTop)).append("\n");
    sb.append("    pageNumberStart: ").append(toIndentedString(pageNumberStart)).append("\n");
    sb.append("    pageSize: ").append(toIndentedString(pageSize)).append("\n");
    sb.append("    useCustomHeaderFooterMargins: ").append(toIndentedString(useCustomHeaderFooterMargins)).append("\n");
    sb.append("    useEvenPageHeaderFooter: ").append(toIndentedString(useEvenPageHeaderFooter)).append("\n");
    sb.append("    useFirstPageHeaderFooter: ").append(toIndentedString(useFirstPageHeaderFooter)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("background");
    openapiFields.add("defaultFooterId");
    openapiFields.add("defaultHeaderId");
    openapiFields.add("evenPageFooterId");
    openapiFields.add("evenPageHeaderId");
    openapiFields.add("firstPageFooterId");
    openapiFields.add("firstPageHeaderId");
    openapiFields.add("flipPageOrientation");
    openapiFields.add("marginBottom");
    openapiFields.add("marginFooter");
    openapiFields.add("marginHeader");
    openapiFields.add("marginLeft");
    openapiFields.add("marginRight");
    openapiFields.add("marginTop");
    openapiFields.add("pageNumberStart");
    openapiFields.add("pageSize");
    openapiFields.add("useCustomHeaderFooterMargins");
    openapiFields.add("useEvenPageHeaderFooter");
    openapiFields.add("useFirstPageHeaderFooter");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DocumentStyle
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DocumentStyle.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DocumentStyle is not found in the empty JSON string", DocumentStyle.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DocumentStyle.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DocumentStyle` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `background`
      if (jsonObj.get("background") != null && !jsonObj.get("background").isJsonNull()) {
        Background.validateJsonElement(jsonObj.get("background"));
      }
      if ((jsonObj.get("defaultFooterId") != null && !jsonObj.get("defaultFooterId").isJsonNull()) && !jsonObj.get("defaultFooterId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `defaultFooterId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("defaultFooterId").toString()));
      }
      if ((jsonObj.get("defaultHeaderId") != null && !jsonObj.get("defaultHeaderId").isJsonNull()) && !jsonObj.get("defaultHeaderId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `defaultHeaderId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("defaultHeaderId").toString()));
      }
      if ((jsonObj.get("evenPageFooterId") != null && !jsonObj.get("evenPageFooterId").isJsonNull()) && !jsonObj.get("evenPageFooterId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `evenPageFooterId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("evenPageFooterId").toString()));
      }
      if ((jsonObj.get("evenPageHeaderId") != null && !jsonObj.get("evenPageHeaderId").isJsonNull()) && !jsonObj.get("evenPageHeaderId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `evenPageHeaderId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("evenPageHeaderId").toString()));
      }
      if ((jsonObj.get("firstPageFooterId") != null && !jsonObj.get("firstPageFooterId").isJsonNull()) && !jsonObj.get("firstPageFooterId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `firstPageFooterId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("firstPageFooterId").toString()));
      }
      if ((jsonObj.get("firstPageHeaderId") != null && !jsonObj.get("firstPageHeaderId").isJsonNull()) && !jsonObj.get("firstPageHeaderId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `firstPageHeaderId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("firstPageHeaderId").toString()));
      }
      // validate the optional field `marginBottom`
      if (jsonObj.get("marginBottom") != null && !jsonObj.get("marginBottom").isJsonNull()) {
        Dimension.validateJsonElement(jsonObj.get("marginBottom"));
      }
      // validate the optional field `marginFooter`
      if (jsonObj.get("marginFooter") != null && !jsonObj.get("marginFooter").isJsonNull()) {
        Dimension.validateJsonElement(jsonObj.get("marginFooter"));
      }
      // validate the optional field `marginHeader`
      if (jsonObj.get("marginHeader") != null && !jsonObj.get("marginHeader").isJsonNull()) {
        Dimension.validateJsonElement(jsonObj.get("marginHeader"));
      }
      // validate the optional field `marginLeft`
      if (jsonObj.get("marginLeft") != null && !jsonObj.get("marginLeft").isJsonNull()) {
        Dimension.validateJsonElement(jsonObj.get("marginLeft"));
      }
      // validate the optional field `marginRight`
      if (jsonObj.get("marginRight") != null && !jsonObj.get("marginRight").isJsonNull()) {
        Dimension.validateJsonElement(jsonObj.get("marginRight"));
      }
      // validate the optional field `marginTop`
      if (jsonObj.get("marginTop") != null && !jsonObj.get("marginTop").isJsonNull()) {
        Dimension.validateJsonElement(jsonObj.get("marginTop"));
      }
      // validate the optional field `pageSize`
      if (jsonObj.get("pageSize") != null && !jsonObj.get("pageSize").isJsonNull()) {
        Size.validateJsonElement(jsonObj.get("pageSize"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DocumentStyle.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DocumentStyle' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DocumentStyle> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DocumentStyle.class));

       return (TypeAdapter<T>) new TypeAdapter<DocumentStyle>() {
           @Override
           public void write(JsonWriter out, DocumentStyle value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DocumentStyle read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DocumentStyle given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DocumentStyle
   * @throws IOException if the JSON string is invalid with respect to DocumentStyle
   */
  public static DocumentStyle fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DocumentStyle.class);
  }

  /**
   * Convert an instance of DocumentStyle to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

