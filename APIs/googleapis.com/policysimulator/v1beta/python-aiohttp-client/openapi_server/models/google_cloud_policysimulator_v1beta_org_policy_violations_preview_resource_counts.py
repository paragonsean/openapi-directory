# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreviewResourceCounts(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, compliant: int=None, errors: int=None, noncompliant: int=None, scanned: int=None, unenforced: int=None):
        """GoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreviewResourceCounts - a model defined in OpenAPI

        :param compliant: The compliant of this GoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreviewResourceCounts.
        :param errors: The errors of this GoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreviewResourceCounts.
        :param noncompliant: The noncompliant of this GoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreviewResourceCounts.
        :param scanned: The scanned of this GoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreviewResourceCounts.
        :param unenforced: The unenforced of this GoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreviewResourceCounts.
        """
        self.openapi_types = {
            'compliant': int,
            'errors': int,
            'noncompliant': int,
            'scanned': int,
            'unenforced': int
        }

        self.attribute_map = {
            'compliant': 'compliant',
            'errors': 'errors',
            'noncompliant': 'noncompliant',
            'scanned': 'scanned',
            'unenforced': 'unenforced'
        }

        self._compliant = compliant
        self._errors = errors
        self._noncompliant = noncompliant
        self._scanned = scanned
        self._unenforced = unenforced

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreviewResourceCounts':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreviewResourceCounts of this GoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreviewResourceCounts.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def compliant(self):
        """Gets the compliant of this GoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreviewResourceCounts.

        Output only. Number of scanned resources with zero violations.

        :return: The compliant of this GoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreviewResourceCounts.
        :rtype: int
        """
        return self._compliant

    @compliant.setter
    def compliant(self, compliant):
        """Sets the compliant of this GoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreviewResourceCounts.

        Output only. Number of scanned resources with zero violations.

        :param compliant: The compliant of this GoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreviewResourceCounts.
        :type compliant: int
        """

        self._compliant = compliant

    @property
    def errors(self):
        """Gets the errors of this GoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreviewResourceCounts.

        Output only. Number of resources that returned an error when scanned.

        :return: The errors of this GoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreviewResourceCounts.
        :rtype: int
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this GoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreviewResourceCounts.

        Output only. Number of resources that returned an error when scanned.

        :param errors: The errors of this GoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreviewResourceCounts.
        :type errors: int
        """

        self._errors = errors

    @property
    def noncompliant(self):
        """Gets the noncompliant of this GoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreviewResourceCounts.

        Output only. Number of scanned resources with at least one violation.

        :return: The noncompliant of this GoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreviewResourceCounts.
        :rtype: int
        """
        return self._noncompliant

    @noncompliant.setter
    def noncompliant(self, noncompliant):
        """Sets the noncompliant of this GoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreviewResourceCounts.

        Output only. Number of scanned resources with at least one violation.

        :param noncompliant: The noncompliant of this GoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreviewResourceCounts.
        :type noncompliant: int
        """

        self._noncompliant = noncompliant

    @property
    def scanned(self):
        """Gets the scanned of this GoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreviewResourceCounts.

        Output only. Number of resources checked for compliance. Must equal: unenforced + noncompliant + compliant + error

        :return: The scanned of this GoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreviewResourceCounts.
        :rtype: int
        """
        return self._scanned

    @scanned.setter
    def scanned(self, scanned):
        """Sets the scanned of this GoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreviewResourceCounts.

        Output only. Number of resources checked for compliance. Must equal: unenforced + noncompliant + compliant + error

        :param scanned: The scanned of this GoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreviewResourceCounts.
        :type scanned: int
        """

        self._scanned = scanned

    @property
    def unenforced(self):
        """Gets the unenforced of this GoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreviewResourceCounts.

        Output only. Number of resources where the constraint was not enforced, i.e. the Policy set `enforced: false` for that resource.

        :return: The unenforced of this GoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreviewResourceCounts.
        :rtype: int
        """
        return self._unenforced

    @unenforced.setter
    def unenforced(self, unenforced):
        """Sets the unenforced of this GoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreviewResourceCounts.

        Output only. Number of resources where the constraint was not enforced, i.e. the Policy set `enforced: false` for that resource.

        :param unenforced: The unenforced of this GoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreviewResourceCounts.
        :type unenforced: int
        """

        self._unenforced = unenforced
