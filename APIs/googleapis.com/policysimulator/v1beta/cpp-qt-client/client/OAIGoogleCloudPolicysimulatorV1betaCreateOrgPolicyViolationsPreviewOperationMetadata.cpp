/**
 * Policy Simulator API
 *  Policy Simulator is a collection of endpoints for creating, running, and viewing a Replay. A `Replay` is a type of simulation that lets you see how your members' access to resources might change if you changed your IAM policy. During a `Replay`, Policy Simulator re-evaluates, or replays, past access attempts under both the current policy and your proposed policy, and compares those results to determine how your members' access might change under the proposed policy.
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudPolicysimulatorV1betaCreateOrgPolicyViolationsPreviewOperationMetadata.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudPolicysimulatorV1betaCreateOrgPolicyViolationsPreviewOperationMetadata::OAIGoogleCloudPolicysimulatorV1betaCreateOrgPolicyViolationsPreviewOperationMetadata(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudPolicysimulatorV1betaCreateOrgPolicyViolationsPreviewOperationMetadata::OAIGoogleCloudPolicysimulatorV1betaCreateOrgPolicyViolationsPreviewOperationMetadata() {
    this->initializeModel();
}

OAIGoogleCloudPolicysimulatorV1betaCreateOrgPolicyViolationsPreviewOperationMetadata::~OAIGoogleCloudPolicysimulatorV1betaCreateOrgPolicyViolationsPreviewOperationMetadata() {}

void OAIGoogleCloudPolicysimulatorV1betaCreateOrgPolicyViolationsPreviewOperationMetadata::initializeModel() {

    m_request_time_isSet = false;
    m_request_time_isValid = false;

    m_resources_found_isSet = false;
    m_resources_found_isValid = false;

    m_resources_pending_isSet = false;
    m_resources_pending_isValid = false;

    m_resources_scanned_isSet = false;
    m_resources_scanned_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;
}

void OAIGoogleCloudPolicysimulatorV1betaCreateOrgPolicyViolationsPreviewOperationMetadata::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudPolicysimulatorV1betaCreateOrgPolicyViolationsPreviewOperationMetadata::fromJsonObject(QJsonObject json) {

    m_request_time_isValid = ::OpenAPI::fromJsonValue(m_request_time, json[QString("requestTime")]);
    m_request_time_isSet = !json[QString("requestTime")].isNull() && m_request_time_isValid;

    m_resources_found_isValid = ::OpenAPI::fromJsonValue(m_resources_found, json[QString("resourcesFound")]);
    m_resources_found_isSet = !json[QString("resourcesFound")].isNull() && m_resources_found_isValid;

    m_resources_pending_isValid = ::OpenAPI::fromJsonValue(m_resources_pending, json[QString("resourcesPending")]);
    m_resources_pending_isSet = !json[QString("resourcesPending")].isNull() && m_resources_pending_isValid;

    m_resources_scanned_isValid = ::OpenAPI::fromJsonValue(m_resources_scanned, json[QString("resourcesScanned")]);
    m_resources_scanned_isSet = !json[QString("resourcesScanned")].isNull() && m_resources_scanned_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;
}

QString OAIGoogleCloudPolicysimulatorV1betaCreateOrgPolicyViolationsPreviewOperationMetadata::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudPolicysimulatorV1betaCreateOrgPolicyViolationsPreviewOperationMetadata::asJsonObject() const {
    QJsonObject obj;
    if (m_request_time_isSet) {
        obj.insert(QString("requestTime"), ::OpenAPI::toJsonValue(m_request_time));
    }
    if (m_resources_found_isSet) {
        obj.insert(QString("resourcesFound"), ::OpenAPI::toJsonValue(m_resources_found));
    }
    if (m_resources_pending_isSet) {
        obj.insert(QString("resourcesPending"), ::OpenAPI::toJsonValue(m_resources_pending));
    }
    if (m_resources_scanned_isSet) {
        obj.insert(QString("resourcesScanned"), ::OpenAPI::toJsonValue(m_resources_scanned));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    return obj;
}

QString OAIGoogleCloudPolicysimulatorV1betaCreateOrgPolicyViolationsPreviewOperationMetadata::getRequestTime() const {
    return m_request_time;
}
void OAIGoogleCloudPolicysimulatorV1betaCreateOrgPolicyViolationsPreviewOperationMetadata::setRequestTime(const QString &request_time) {
    m_request_time = request_time;
    m_request_time_isSet = true;
}

bool OAIGoogleCloudPolicysimulatorV1betaCreateOrgPolicyViolationsPreviewOperationMetadata::is_request_time_Set() const{
    return m_request_time_isSet;
}

bool OAIGoogleCloudPolicysimulatorV1betaCreateOrgPolicyViolationsPreviewOperationMetadata::is_request_time_Valid() const{
    return m_request_time_isValid;
}

qint32 OAIGoogleCloudPolicysimulatorV1betaCreateOrgPolicyViolationsPreviewOperationMetadata::getResourcesFound() const {
    return m_resources_found;
}
void OAIGoogleCloudPolicysimulatorV1betaCreateOrgPolicyViolationsPreviewOperationMetadata::setResourcesFound(const qint32 &resources_found) {
    m_resources_found = resources_found;
    m_resources_found_isSet = true;
}

bool OAIGoogleCloudPolicysimulatorV1betaCreateOrgPolicyViolationsPreviewOperationMetadata::is_resources_found_Set() const{
    return m_resources_found_isSet;
}

bool OAIGoogleCloudPolicysimulatorV1betaCreateOrgPolicyViolationsPreviewOperationMetadata::is_resources_found_Valid() const{
    return m_resources_found_isValid;
}

qint32 OAIGoogleCloudPolicysimulatorV1betaCreateOrgPolicyViolationsPreviewOperationMetadata::getResourcesPending() const {
    return m_resources_pending;
}
void OAIGoogleCloudPolicysimulatorV1betaCreateOrgPolicyViolationsPreviewOperationMetadata::setResourcesPending(const qint32 &resources_pending) {
    m_resources_pending = resources_pending;
    m_resources_pending_isSet = true;
}

bool OAIGoogleCloudPolicysimulatorV1betaCreateOrgPolicyViolationsPreviewOperationMetadata::is_resources_pending_Set() const{
    return m_resources_pending_isSet;
}

bool OAIGoogleCloudPolicysimulatorV1betaCreateOrgPolicyViolationsPreviewOperationMetadata::is_resources_pending_Valid() const{
    return m_resources_pending_isValid;
}

qint32 OAIGoogleCloudPolicysimulatorV1betaCreateOrgPolicyViolationsPreviewOperationMetadata::getResourcesScanned() const {
    return m_resources_scanned;
}
void OAIGoogleCloudPolicysimulatorV1betaCreateOrgPolicyViolationsPreviewOperationMetadata::setResourcesScanned(const qint32 &resources_scanned) {
    m_resources_scanned = resources_scanned;
    m_resources_scanned_isSet = true;
}

bool OAIGoogleCloudPolicysimulatorV1betaCreateOrgPolicyViolationsPreviewOperationMetadata::is_resources_scanned_Set() const{
    return m_resources_scanned_isSet;
}

bool OAIGoogleCloudPolicysimulatorV1betaCreateOrgPolicyViolationsPreviewOperationMetadata::is_resources_scanned_Valid() const{
    return m_resources_scanned_isValid;
}

QString OAIGoogleCloudPolicysimulatorV1betaCreateOrgPolicyViolationsPreviewOperationMetadata::getStartTime() const {
    return m_start_time;
}
void OAIGoogleCloudPolicysimulatorV1betaCreateOrgPolicyViolationsPreviewOperationMetadata::setStartTime(const QString &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIGoogleCloudPolicysimulatorV1betaCreateOrgPolicyViolationsPreviewOperationMetadata::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIGoogleCloudPolicysimulatorV1betaCreateOrgPolicyViolationsPreviewOperationMetadata::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QString OAIGoogleCloudPolicysimulatorV1betaCreateOrgPolicyViolationsPreviewOperationMetadata::getState() const {
    return m_state;
}
void OAIGoogleCloudPolicysimulatorV1betaCreateOrgPolicyViolationsPreviewOperationMetadata::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIGoogleCloudPolicysimulatorV1betaCreateOrgPolicyViolationsPreviewOperationMetadata::is_state_Set() const{
    return m_state_isSet;
}

bool OAIGoogleCloudPolicysimulatorV1betaCreateOrgPolicyViolationsPreviewOperationMetadata::is_state_Valid() const{
    return m_state_isValid;
}

bool OAIGoogleCloudPolicysimulatorV1betaCreateOrgPolicyViolationsPreviewOperationMetadata::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_request_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resources_found_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resources_pending_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resources_scanned_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudPolicysimulatorV1betaCreateOrgPolicyViolationsPreviewOperationMetadata::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
