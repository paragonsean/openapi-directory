/**
 * Policy Simulator API
 *  Policy Simulator is a collection of endpoints for creating, running, and viewing a Replay. A `Replay` is a type of simulation that lets you see how your members' access to resources might change if you changed your IAM policy. During a `Replay`, Policy Simulator re-evaluates, or replays, past access attempts under both the current policy and your proposed policy, and compares those results to determine how your members' access might change under the proposed policy.
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGoogleCloudPolicysimulatorV1betaGenerateOrgPolicyViolationsPreviewOperationMetadata.h
 *
 * GenerateOrgPolicyViolationsPreviewOperationMetadata is metadata about an OrgPolicyViolationsPreview generations operation.
 */

#ifndef OAIGoogleCloudPolicysimulatorV1betaGenerateOrgPolicyViolationsPreviewOperationMetadata_H
#define OAIGoogleCloudPolicysimulatorV1betaGenerateOrgPolicyViolationsPreviewOperationMetadata_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIGoogleCloudPolicysimulatorV1betaGenerateOrgPolicyViolationsPreviewOperationMetadata : public OAIObject {
public:
    OAIGoogleCloudPolicysimulatorV1betaGenerateOrgPolicyViolationsPreviewOperationMetadata();
    OAIGoogleCloudPolicysimulatorV1betaGenerateOrgPolicyViolationsPreviewOperationMetadata(QString json);
    ~OAIGoogleCloudPolicysimulatorV1betaGenerateOrgPolicyViolationsPreviewOperationMetadata() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getRequestTime() const;
    void setRequestTime(const QString &request_time);
    bool is_request_time_Set() const;
    bool is_request_time_Valid() const;

    qint32 getResourcesFound() const;
    void setResourcesFound(const qint32 &resources_found);
    bool is_resources_found_Set() const;
    bool is_resources_found_Valid() const;

    qint32 getResourcesPending() const;
    void setResourcesPending(const qint32 &resources_pending);
    bool is_resources_pending_Set() const;
    bool is_resources_pending_Valid() const;

    qint32 getResourcesScanned() const;
    void setResourcesScanned(const qint32 &resources_scanned);
    bool is_resources_scanned_Set() const;
    bool is_resources_scanned_Valid() const;

    QString getStartTime() const;
    void setStartTime(const QString &start_time);
    bool is_start_time_Set() const;
    bool is_start_time_Valid() const;

    QString getState() const;
    void setState(const QString &state);
    bool is_state_Set() const;
    bool is_state_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_request_time;
    bool m_request_time_isSet;
    bool m_request_time_isValid;

    qint32 m_resources_found;
    bool m_resources_found_isSet;
    bool m_resources_found_isValid;

    qint32 m_resources_pending;
    bool m_resources_pending_isSet;
    bool m_resources_pending_isValid;

    qint32 m_resources_scanned;
    bool m_resources_scanned_isSet;
    bool m_resources_scanned_isValid;

    QString m_start_time;
    bool m_start_time_isSet;
    bool m_start_time_isValid;

    QString m_state;
    bool m_state_isSet;
    bool m_state_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGoogleCloudPolicysimulatorV1betaGenerateOrgPolicyViolationsPreviewOperationMetadata)

#endif // OAIGoogleCloudPolicysimulatorV1betaGenerateOrgPolicyViolationsPreviewOperationMetadata_H
