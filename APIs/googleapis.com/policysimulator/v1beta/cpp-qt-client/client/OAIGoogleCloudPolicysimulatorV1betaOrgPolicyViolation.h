/**
 * Policy Simulator API
 *  Policy Simulator is a collection of endpoints for creating, running, and viewing a Replay. A `Replay` is a type of simulation that lets you see how your members' access to resources might change if you changed your IAM policy. During a `Replay`, Policy Simulator re-evaluates, or replays, past access attempts under both the current policy and your proposed policy, and compares those results to determine how your members' access might change under the proposed policy.
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGoogleCloudPolicysimulatorV1betaOrgPolicyViolation.h
 *
 * OrgPolicyViolation is a resource representing a single resource violating a single OrgPolicy constraint.
 */

#ifndef OAIGoogleCloudPolicysimulatorV1betaOrgPolicyViolation_H
#define OAIGoogleCloudPolicysimulatorV1betaOrgPolicyViolation_H

#include <QJsonObject>

#include "OAIGoogleCloudOrgpolicyV2CustomConstraint.h"
#include "OAIGoogleCloudPolicysimulatorV1betaResourceContext.h"
#include "OAIGoogleRpcStatus.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIGoogleCloudOrgpolicyV2CustomConstraint;
class OAIGoogleRpcStatus;
class OAIGoogleCloudPolicysimulatorV1betaResourceContext;

class OAIGoogleCloudPolicysimulatorV1betaOrgPolicyViolation : public OAIObject {
public:
    OAIGoogleCloudPolicysimulatorV1betaOrgPolicyViolation();
    OAIGoogleCloudPolicysimulatorV1betaOrgPolicyViolation(QString json);
    ~OAIGoogleCloudPolicysimulatorV1betaOrgPolicyViolation() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIGoogleCloudOrgpolicyV2CustomConstraint getCustomConstraint() const;
    void setCustomConstraint(const OAIGoogleCloudOrgpolicyV2CustomConstraint &custom_constraint);
    bool is_custom_constraint_Set() const;
    bool is_custom_constraint_Valid() const;

    OAIGoogleRpcStatus getError() const;
    void setError(const OAIGoogleRpcStatus &error);
    bool is_error_Set() const;
    bool is_error_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    OAIGoogleCloudPolicysimulatorV1betaResourceContext getResource() const;
    void setResource(const OAIGoogleCloudPolicysimulatorV1betaResourceContext &resource);
    bool is_resource_Set() const;
    bool is_resource_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIGoogleCloudOrgpolicyV2CustomConstraint m_custom_constraint;
    bool m_custom_constraint_isSet;
    bool m_custom_constraint_isValid;

    OAIGoogleRpcStatus m_error;
    bool m_error_isSet;
    bool m_error_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    OAIGoogleCloudPolicysimulatorV1betaResourceContext m_resource;
    bool m_resource_isSet;
    bool m_resource_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGoogleCloudPolicysimulatorV1betaOrgPolicyViolation)

#endif // OAIGoogleCloudPolicysimulatorV1betaOrgPolicyViolation_H
