/**
 * Policy Simulator API
 *  Policy Simulator is a collection of endpoints for creating, running, and viewing a Replay. A `Replay` is a type of simulation that lets you see how your members' access to resources might change if you changed your IAM policy. During a `Replay`, Policy Simulator re-evaluates, or replays, past access attempts under both the current policy and your proposed policy, and compares those results to determine how your members' access might change under the proposed policy.
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudOrgpolicyV2PolicySpec.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudOrgpolicyV2PolicySpec::OAIGoogleCloudOrgpolicyV2PolicySpec(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudOrgpolicyV2PolicySpec::OAIGoogleCloudOrgpolicyV2PolicySpec() {
    this->initializeModel();
}

OAIGoogleCloudOrgpolicyV2PolicySpec::~OAIGoogleCloudOrgpolicyV2PolicySpec() {}

void OAIGoogleCloudOrgpolicyV2PolicySpec::initializeModel() {

    m_etag_isSet = false;
    m_etag_isValid = false;

    m_inherit_from_parent_isSet = false;
    m_inherit_from_parent_isValid = false;

    m_reset_isSet = false;
    m_reset_isValid = false;

    m_rules_isSet = false;
    m_rules_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;
}

void OAIGoogleCloudOrgpolicyV2PolicySpec::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudOrgpolicyV2PolicySpec::fromJsonObject(QJsonObject json) {

    m_etag_isValid = ::OpenAPI::fromJsonValue(m_etag, json[QString("etag")]);
    m_etag_isSet = !json[QString("etag")].isNull() && m_etag_isValid;

    m_inherit_from_parent_isValid = ::OpenAPI::fromJsonValue(m_inherit_from_parent, json[QString("inheritFromParent")]);
    m_inherit_from_parent_isSet = !json[QString("inheritFromParent")].isNull() && m_inherit_from_parent_isValid;

    m_reset_isValid = ::OpenAPI::fromJsonValue(m_reset, json[QString("reset")]);
    m_reset_isSet = !json[QString("reset")].isNull() && m_reset_isValid;

    m_rules_isValid = ::OpenAPI::fromJsonValue(m_rules, json[QString("rules")]);
    m_rules_isSet = !json[QString("rules")].isNull() && m_rules_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;
}

QString OAIGoogleCloudOrgpolicyV2PolicySpec::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudOrgpolicyV2PolicySpec::asJsonObject() const {
    QJsonObject obj;
    if (m_etag_isSet) {
        obj.insert(QString("etag"), ::OpenAPI::toJsonValue(m_etag));
    }
    if (m_inherit_from_parent_isSet) {
        obj.insert(QString("inheritFromParent"), ::OpenAPI::toJsonValue(m_inherit_from_parent));
    }
    if (m_reset_isSet) {
        obj.insert(QString("reset"), ::OpenAPI::toJsonValue(m_reset));
    }
    if (m_rules.size() > 0) {
        obj.insert(QString("rules"), ::OpenAPI::toJsonValue(m_rules));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    return obj;
}

QString OAIGoogleCloudOrgpolicyV2PolicySpec::getEtag() const {
    return m_etag;
}
void OAIGoogleCloudOrgpolicyV2PolicySpec::setEtag(const QString &etag) {
    m_etag = etag;
    m_etag_isSet = true;
}

bool OAIGoogleCloudOrgpolicyV2PolicySpec::is_etag_Set() const{
    return m_etag_isSet;
}

bool OAIGoogleCloudOrgpolicyV2PolicySpec::is_etag_Valid() const{
    return m_etag_isValid;
}

bool OAIGoogleCloudOrgpolicyV2PolicySpec::isInheritFromParent() const {
    return m_inherit_from_parent;
}
void OAIGoogleCloudOrgpolicyV2PolicySpec::setInheritFromParent(const bool &inherit_from_parent) {
    m_inherit_from_parent = inherit_from_parent;
    m_inherit_from_parent_isSet = true;
}

bool OAIGoogleCloudOrgpolicyV2PolicySpec::is_inherit_from_parent_Set() const{
    return m_inherit_from_parent_isSet;
}

bool OAIGoogleCloudOrgpolicyV2PolicySpec::is_inherit_from_parent_Valid() const{
    return m_inherit_from_parent_isValid;
}

bool OAIGoogleCloudOrgpolicyV2PolicySpec::isReset() const {
    return m_reset;
}
void OAIGoogleCloudOrgpolicyV2PolicySpec::setReset(const bool &reset) {
    m_reset = reset;
    m_reset_isSet = true;
}

bool OAIGoogleCloudOrgpolicyV2PolicySpec::is_reset_Set() const{
    return m_reset_isSet;
}

bool OAIGoogleCloudOrgpolicyV2PolicySpec::is_reset_Valid() const{
    return m_reset_isValid;
}

QList<OAIGoogleCloudOrgpolicyV2PolicySpecPolicyRule> OAIGoogleCloudOrgpolicyV2PolicySpec::getRules() const {
    return m_rules;
}
void OAIGoogleCloudOrgpolicyV2PolicySpec::setRules(const QList<OAIGoogleCloudOrgpolicyV2PolicySpecPolicyRule> &rules) {
    m_rules = rules;
    m_rules_isSet = true;
}

bool OAIGoogleCloudOrgpolicyV2PolicySpec::is_rules_Set() const{
    return m_rules_isSet;
}

bool OAIGoogleCloudOrgpolicyV2PolicySpec::is_rules_Valid() const{
    return m_rules_isValid;
}

QString OAIGoogleCloudOrgpolicyV2PolicySpec::getUpdateTime() const {
    return m_update_time;
}
void OAIGoogleCloudOrgpolicyV2PolicySpec::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAIGoogleCloudOrgpolicyV2PolicySpec::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAIGoogleCloudOrgpolicyV2PolicySpec::is_update_time_Valid() const{
    return m_update_time_isValid;
}

bool OAIGoogleCloudOrgpolicyV2PolicySpec::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_etag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inherit_from_parent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rules.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudOrgpolicyV2PolicySpec::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
