/**
 * Policy Simulator API
 *  Policy Simulator is a collection of endpoints for creating, running, and viewing a Replay. A `Replay` is a type of simulation that lets you see how your members' access to resources might change if you changed your IAM policy. During a `Replay`, Policy Simulator re-evaluates, or replays, past access attempts under both the current policy and your proposed policy, and compares those results to determine how your members' access might change under the proposed policy.
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudPolicysimulatorV1betaOrgPolicyViolation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudPolicysimulatorV1betaOrgPolicyViolation::OAIGoogleCloudPolicysimulatorV1betaOrgPolicyViolation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudPolicysimulatorV1betaOrgPolicyViolation::OAIGoogleCloudPolicysimulatorV1betaOrgPolicyViolation() {
    this->initializeModel();
}

OAIGoogleCloudPolicysimulatorV1betaOrgPolicyViolation::~OAIGoogleCloudPolicysimulatorV1betaOrgPolicyViolation() {}

void OAIGoogleCloudPolicysimulatorV1betaOrgPolicyViolation::initializeModel() {

    m_custom_constraint_isSet = false;
    m_custom_constraint_isValid = false;

    m_error_isSet = false;
    m_error_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_resource_isSet = false;
    m_resource_isValid = false;
}

void OAIGoogleCloudPolicysimulatorV1betaOrgPolicyViolation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudPolicysimulatorV1betaOrgPolicyViolation::fromJsonObject(QJsonObject json) {

    m_custom_constraint_isValid = ::OpenAPI::fromJsonValue(m_custom_constraint, json[QString("customConstraint")]);
    m_custom_constraint_isSet = !json[QString("customConstraint")].isNull() && m_custom_constraint_isValid;

    m_error_isValid = ::OpenAPI::fromJsonValue(m_error, json[QString("error")]);
    m_error_isSet = !json[QString("error")].isNull() && m_error_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_resource_isValid = ::OpenAPI::fromJsonValue(m_resource, json[QString("resource")]);
    m_resource_isSet = !json[QString("resource")].isNull() && m_resource_isValid;
}

QString OAIGoogleCloudPolicysimulatorV1betaOrgPolicyViolation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudPolicysimulatorV1betaOrgPolicyViolation::asJsonObject() const {
    QJsonObject obj;
    if (m_custom_constraint.isSet()) {
        obj.insert(QString("customConstraint"), ::OpenAPI::toJsonValue(m_custom_constraint));
    }
    if (m_error.isSet()) {
        obj.insert(QString("error"), ::OpenAPI::toJsonValue(m_error));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_resource.isSet()) {
        obj.insert(QString("resource"), ::OpenAPI::toJsonValue(m_resource));
    }
    return obj;
}

OAIGoogleCloudOrgpolicyV2CustomConstraint OAIGoogleCloudPolicysimulatorV1betaOrgPolicyViolation::getCustomConstraint() const {
    return m_custom_constraint;
}
void OAIGoogleCloudPolicysimulatorV1betaOrgPolicyViolation::setCustomConstraint(const OAIGoogleCloudOrgpolicyV2CustomConstraint &custom_constraint) {
    m_custom_constraint = custom_constraint;
    m_custom_constraint_isSet = true;
}

bool OAIGoogleCloudPolicysimulatorV1betaOrgPolicyViolation::is_custom_constraint_Set() const{
    return m_custom_constraint_isSet;
}

bool OAIGoogleCloudPolicysimulatorV1betaOrgPolicyViolation::is_custom_constraint_Valid() const{
    return m_custom_constraint_isValid;
}

OAIGoogleRpcStatus OAIGoogleCloudPolicysimulatorV1betaOrgPolicyViolation::getError() const {
    return m_error;
}
void OAIGoogleCloudPolicysimulatorV1betaOrgPolicyViolation::setError(const OAIGoogleRpcStatus &error) {
    m_error = error;
    m_error_isSet = true;
}

bool OAIGoogleCloudPolicysimulatorV1betaOrgPolicyViolation::is_error_Set() const{
    return m_error_isSet;
}

bool OAIGoogleCloudPolicysimulatorV1betaOrgPolicyViolation::is_error_Valid() const{
    return m_error_isValid;
}

QString OAIGoogleCloudPolicysimulatorV1betaOrgPolicyViolation::getName() const {
    return m_name;
}
void OAIGoogleCloudPolicysimulatorV1betaOrgPolicyViolation::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGoogleCloudPolicysimulatorV1betaOrgPolicyViolation::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGoogleCloudPolicysimulatorV1betaOrgPolicyViolation::is_name_Valid() const{
    return m_name_isValid;
}

OAIGoogleCloudPolicysimulatorV1betaResourceContext OAIGoogleCloudPolicysimulatorV1betaOrgPolicyViolation::getResource() const {
    return m_resource;
}
void OAIGoogleCloudPolicysimulatorV1betaOrgPolicyViolation::setResource(const OAIGoogleCloudPolicysimulatorV1betaResourceContext &resource) {
    m_resource = resource;
    m_resource_isSet = true;
}

bool OAIGoogleCloudPolicysimulatorV1betaOrgPolicyViolation::is_resource_Set() const{
    return m_resource_isSet;
}

bool OAIGoogleCloudPolicysimulatorV1betaOrgPolicyViolation::is_resource_Valid() const{
    return m_resource_isValid;
}

bool OAIGoogleCloudPolicysimulatorV1betaOrgPolicyViolation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_custom_constraint.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_error.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudPolicysimulatorV1betaOrgPolicyViolation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
