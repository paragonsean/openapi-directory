/**
 * Policy Simulator API
 *  Policy Simulator is a collection of endpoints for creating, running, and viewing a Replay. A `Replay` is a type of simulation that lets you see how your members' access to resources might change if you changed your IAM policy. During a `Replay`, Policy Simulator re-evaluates, or replays, past access attempts under both the current policy and your proposed policy, and compares those results to determine how your members' access might change under the proposed policy.
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudPolicysimulatorV1betaBindingExplanation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudPolicysimulatorV1betaBindingExplanation::OAIGoogleCloudPolicysimulatorV1betaBindingExplanation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudPolicysimulatorV1betaBindingExplanation::OAIGoogleCloudPolicysimulatorV1betaBindingExplanation() {
    this->initializeModel();
}

OAIGoogleCloudPolicysimulatorV1betaBindingExplanation::~OAIGoogleCloudPolicysimulatorV1betaBindingExplanation() {}

void OAIGoogleCloudPolicysimulatorV1betaBindingExplanation::initializeModel() {

    m_access_isSet = false;
    m_access_isValid = false;

    m_condition_isSet = false;
    m_condition_isValid = false;

    m_memberships_isSet = false;
    m_memberships_isValid = false;

    m_relevance_isSet = false;
    m_relevance_isValid = false;

    m_role_isSet = false;
    m_role_isValid = false;

    m_role_permission_isSet = false;
    m_role_permission_isValid = false;

    m_role_permission_relevance_isSet = false;
    m_role_permission_relevance_isValid = false;
}

void OAIGoogleCloudPolicysimulatorV1betaBindingExplanation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudPolicysimulatorV1betaBindingExplanation::fromJsonObject(QJsonObject json) {

    m_access_isValid = ::OpenAPI::fromJsonValue(m_access, json[QString("access")]);
    m_access_isSet = !json[QString("access")].isNull() && m_access_isValid;

    m_condition_isValid = ::OpenAPI::fromJsonValue(m_condition, json[QString("condition")]);
    m_condition_isSet = !json[QString("condition")].isNull() && m_condition_isValid;

    m_memberships_isValid = ::OpenAPI::fromJsonValue(m_memberships, json[QString("memberships")]);
    m_memberships_isSet = !json[QString("memberships")].isNull() && m_memberships_isValid;

    m_relevance_isValid = ::OpenAPI::fromJsonValue(m_relevance, json[QString("relevance")]);
    m_relevance_isSet = !json[QString("relevance")].isNull() && m_relevance_isValid;

    m_role_isValid = ::OpenAPI::fromJsonValue(m_role, json[QString("role")]);
    m_role_isSet = !json[QString("role")].isNull() && m_role_isValid;

    m_role_permission_isValid = ::OpenAPI::fromJsonValue(m_role_permission, json[QString("rolePermission")]);
    m_role_permission_isSet = !json[QString("rolePermission")].isNull() && m_role_permission_isValid;

    m_role_permission_relevance_isValid = ::OpenAPI::fromJsonValue(m_role_permission_relevance, json[QString("rolePermissionRelevance")]);
    m_role_permission_relevance_isSet = !json[QString("rolePermissionRelevance")].isNull() && m_role_permission_relevance_isValid;
}

QString OAIGoogleCloudPolicysimulatorV1betaBindingExplanation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudPolicysimulatorV1betaBindingExplanation::asJsonObject() const {
    QJsonObject obj;
    if (m_access_isSet) {
        obj.insert(QString("access"), ::OpenAPI::toJsonValue(m_access));
    }
    if (m_condition.isSet()) {
        obj.insert(QString("condition"), ::OpenAPI::toJsonValue(m_condition));
    }
    if (m_memberships.size() > 0) {
        obj.insert(QString("memberships"), ::OpenAPI::toJsonValue(m_memberships));
    }
    if (m_relevance_isSet) {
        obj.insert(QString("relevance"), ::OpenAPI::toJsonValue(m_relevance));
    }
    if (m_role_isSet) {
        obj.insert(QString("role"), ::OpenAPI::toJsonValue(m_role));
    }
    if (m_role_permission_isSet) {
        obj.insert(QString("rolePermission"), ::OpenAPI::toJsonValue(m_role_permission));
    }
    if (m_role_permission_relevance_isSet) {
        obj.insert(QString("rolePermissionRelevance"), ::OpenAPI::toJsonValue(m_role_permission_relevance));
    }
    return obj;
}

QString OAIGoogleCloudPolicysimulatorV1betaBindingExplanation::getAccess() const {
    return m_access;
}
void OAIGoogleCloudPolicysimulatorV1betaBindingExplanation::setAccess(const QString &access) {
    m_access = access;
    m_access_isSet = true;
}

bool OAIGoogleCloudPolicysimulatorV1betaBindingExplanation::is_access_Set() const{
    return m_access_isSet;
}

bool OAIGoogleCloudPolicysimulatorV1betaBindingExplanation::is_access_Valid() const{
    return m_access_isValid;
}

OAIGoogleTypeExpr OAIGoogleCloudPolicysimulatorV1betaBindingExplanation::getCondition() const {
    return m_condition;
}
void OAIGoogleCloudPolicysimulatorV1betaBindingExplanation::setCondition(const OAIGoogleTypeExpr &condition) {
    m_condition = condition;
    m_condition_isSet = true;
}

bool OAIGoogleCloudPolicysimulatorV1betaBindingExplanation::is_condition_Set() const{
    return m_condition_isSet;
}

bool OAIGoogleCloudPolicysimulatorV1betaBindingExplanation::is_condition_Valid() const{
    return m_condition_isValid;
}

QMap<QString, OAIGoogleCloudPolicysimulatorV1betaBindingExplanationAnnotatedMembership> OAIGoogleCloudPolicysimulatorV1betaBindingExplanation::getMemberships() const {
    return m_memberships;
}
void OAIGoogleCloudPolicysimulatorV1betaBindingExplanation::setMemberships(const QMap<QString, OAIGoogleCloudPolicysimulatorV1betaBindingExplanationAnnotatedMembership> &memberships) {
    m_memberships = memberships;
    m_memberships_isSet = true;
}

bool OAIGoogleCloudPolicysimulatorV1betaBindingExplanation::is_memberships_Set() const{
    return m_memberships_isSet;
}

bool OAIGoogleCloudPolicysimulatorV1betaBindingExplanation::is_memberships_Valid() const{
    return m_memberships_isValid;
}

QString OAIGoogleCloudPolicysimulatorV1betaBindingExplanation::getRelevance() const {
    return m_relevance;
}
void OAIGoogleCloudPolicysimulatorV1betaBindingExplanation::setRelevance(const QString &relevance) {
    m_relevance = relevance;
    m_relevance_isSet = true;
}

bool OAIGoogleCloudPolicysimulatorV1betaBindingExplanation::is_relevance_Set() const{
    return m_relevance_isSet;
}

bool OAIGoogleCloudPolicysimulatorV1betaBindingExplanation::is_relevance_Valid() const{
    return m_relevance_isValid;
}

QString OAIGoogleCloudPolicysimulatorV1betaBindingExplanation::getRole() const {
    return m_role;
}
void OAIGoogleCloudPolicysimulatorV1betaBindingExplanation::setRole(const QString &role) {
    m_role = role;
    m_role_isSet = true;
}

bool OAIGoogleCloudPolicysimulatorV1betaBindingExplanation::is_role_Set() const{
    return m_role_isSet;
}

bool OAIGoogleCloudPolicysimulatorV1betaBindingExplanation::is_role_Valid() const{
    return m_role_isValid;
}

QString OAIGoogleCloudPolicysimulatorV1betaBindingExplanation::getRolePermission() const {
    return m_role_permission;
}
void OAIGoogleCloudPolicysimulatorV1betaBindingExplanation::setRolePermission(const QString &role_permission) {
    m_role_permission = role_permission;
    m_role_permission_isSet = true;
}

bool OAIGoogleCloudPolicysimulatorV1betaBindingExplanation::is_role_permission_Set() const{
    return m_role_permission_isSet;
}

bool OAIGoogleCloudPolicysimulatorV1betaBindingExplanation::is_role_permission_Valid() const{
    return m_role_permission_isValid;
}

QString OAIGoogleCloudPolicysimulatorV1betaBindingExplanation::getRolePermissionRelevance() const {
    return m_role_permission_relevance;
}
void OAIGoogleCloudPolicysimulatorV1betaBindingExplanation::setRolePermissionRelevance(const QString &role_permission_relevance) {
    m_role_permission_relevance = role_permission_relevance;
    m_role_permission_relevance_isSet = true;
}

bool OAIGoogleCloudPolicysimulatorV1betaBindingExplanation::is_role_permission_relevance_Set() const{
    return m_role_permission_relevance_isSet;
}

bool OAIGoogleCloudPolicysimulatorV1betaBindingExplanation::is_role_permission_relevance_Valid() const{
    return m_role_permission_relevance_isValid;
}

bool OAIGoogleCloudPolicysimulatorV1betaBindingExplanation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_access_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_condition.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_memberships.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_relevance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_permission_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_permission_relevance_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudPolicysimulatorV1betaBindingExplanation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
