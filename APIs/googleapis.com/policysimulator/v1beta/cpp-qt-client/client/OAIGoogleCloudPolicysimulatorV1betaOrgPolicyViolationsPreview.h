/**
 * Policy Simulator API
 *  Policy Simulator is a collection of endpoints for creating, running, and viewing a Replay. A `Replay` is a type of simulation that lets you see how your members' access to resources might change if you changed your IAM policy. During a `Replay`, Policy Simulator re-evaluates, or replays, past access attempts under both the current policy and your proposed policy, and compares those results to determine how your members' access might change under the proposed policy.
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreview.h
 *
 * OrgPolicyViolationsPreview is a resource providing a preview of the violations that will exist if an OrgPolicy change is made. The list of violations are modeled as child resources and retrieved via a ListOrgPolicyViolations API call. There are potentially more OrgPolicyViolations than could fit in an embedded field. Thus, the use of a child resource instead of a field.
 */

#ifndef OAIGoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreview_H
#define OAIGoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreview_H

#include <QJsonObject>

#include "OAIGoogleCloudPolicysimulatorV1betaOrgPolicyOverlay.h"
#include "OAIGoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreviewResourceCounts.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIGoogleCloudPolicysimulatorV1betaOrgPolicyOverlay;
class OAIGoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreviewResourceCounts;

class OAIGoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreview : public OAIObject {
public:
    OAIGoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreview();
    OAIGoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreview(QString json);
    ~OAIGoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreview() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getCreateTime() const;
    void setCreateTime(const QString &create_time);
    bool is_create_time_Set() const;
    bool is_create_time_Valid() const;

    QList<QString> getCustomConstraints() const;
    void setCustomConstraints(const QList<QString> &custom_constraints);
    bool is_custom_constraints_Set() const;
    bool is_custom_constraints_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    OAIGoogleCloudPolicysimulatorV1betaOrgPolicyOverlay getOverlay() const;
    void setOverlay(const OAIGoogleCloudPolicysimulatorV1betaOrgPolicyOverlay &overlay);
    bool is_overlay_Set() const;
    bool is_overlay_Valid() const;

    OAIGoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreviewResourceCounts getResourceCounts() const;
    void setResourceCounts(const OAIGoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreviewResourceCounts &resource_counts);
    bool is_resource_counts_Set() const;
    bool is_resource_counts_Valid() const;

    QString getState() const;
    void setState(const QString &state);
    bool is_state_Set() const;
    bool is_state_Valid() const;

    qint32 getViolationsCount() const;
    void setViolationsCount(const qint32 &violations_count);
    bool is_violations_count_Set() const;
    bool is_violations_count_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_create_time;
    bool m_create_time_isSet;
    bool m_create_time_isValid;

    QList<QString> m_custom_constraints;
    bool m_custom_constraints_isSet;
    bool m_custom_constraints_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    OAIGoogleCloudPolicysimulatorV1betaOrgPolicyOverlay m_overlay;
    bool m_overlay_isSet;
    bool m_overlay_isValid;

    OAIGoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreviewResourceCounts m_resource_counts;
    bool m_resource_counts_isSet;
    bool m_resource_counts_isValid;

    QString m_state;
    bool m_state_isSet;
    bool m_state_isValid;

    qint32 m_violations_count;
    bool m_violations_count_isSet;
    bool m_violations_count_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreview)

#endif // OAIGoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreview_H
