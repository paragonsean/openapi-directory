/**
 * Policy Simulator API
 *  Policy Simulator is a collection of endpoints for creating, running, and viewing a Replay. A `Replay` is a type of simulation that lets you see how your members' access to resources might change if you changed your IAM policy. During a `Replay`, Policy Simulator re-evaluates, or replays, past access attempts under both the current policy and your proposed policy, and compares those results to determine how your members' access might change under the proposed policy.
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGoogleCloudOrgpolicyV2PolicySpecPolicyRule.h
 *
 * A rule used to express this policy.
 */

#ifndef OAIGoogleCloudOrgpolicyV2PolicySpecPolicyRule_H
#define OAIGoogleCloudOrgpolicyV2PolicySpecPolicyRule_H

#include <QJsonObject>

#include "OAIGoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValues.h"
#include "OAIGoogleTypeExpr.h"

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIGoogleTypeExpr;
class OAIGoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValues;

class OAIGoogleCloudOrgpolicyV2PolicySpecPolicyRule : public OAIObject {
public:
    OAIGoogleCloudOrgpolicyV2PolicySpecPolicyRule();
    OAIGoogleCloudOrgpolicyV2PolicySpecPolicyRule(QString json);
    ~OAIGoogleCloudOrgpolicyV2PolicySpecPolicyRule() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isAllowAll() const;
    void setAllowAll(const bool &allow_all);
    bool is_allow_all_Set() const;
    bool is_allow_all_Valid() const;

    OAIGoogleTypeExpr getCondition() const;
    void setCondition(const OAIGoogleTypeExpr &condition);
    bool is_condition_Set() const;
    bool is_condition_Valid() const;

    bool isDenyAll() const;
    void setDenyAll(const bool &deny_all);
    bool is_deny_all_Set() const;
    bool is_deny_all_Valid() const;

    bool isEnforce() const;
    void setEnforce(const bool &enforce);
    bool is_enforce_Set() const;
    bool is_enforce_Valid() const;

    OAIGoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValues getValues() const;
    void setValues(const OAIGoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValues &values);
    bool is_values_Set() const;
    bool is_values_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_allow_all;
    bool m_allow_all_isSet;
    bool m_allow_all_isValid;

    OAIGoogleTypeExpr m_condition;
    bool m_condition_isSet;
    bool m_condition_isValid;

    bool m_deny_all;
    bool m_deny_all_isSet;
    bool m_deny_all_isValid;

    bool m_enforce;
    bool m_enforce_isSet;
    bool m_enforce_isValid;

    OAIGoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValues m_values;
    bool m_values_isSet;
    bool m_values_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGoogleCloudOrgpolicyV2PolicySpecPolicyRule)

#endif // OAIGoogleCloudOrgpolicyV2PolicySpecPolicyRule_H
