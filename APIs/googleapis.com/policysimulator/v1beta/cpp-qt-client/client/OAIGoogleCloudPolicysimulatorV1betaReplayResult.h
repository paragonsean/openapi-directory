/**
 * Policy Simulator API
 *  Policy Simulator is a collection of endpoints for creating, running, and viewing a Replay. A `Replay` is a type of simulation that lets you see how your members' access to resources might change if you changed your IAM policy. During a `Replay`, Policy Simulator re-evaluates, or replays, past access attempts under both the current policy and your proposed policy, and compares those results to determine how your members' access might change under the proposed policy.
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGoogleCloudPolicysimulatorV1betaReplayResult.h
 *
 * The result of replaying a single access tuple against a simulated state.
 */

#ifndef OAIGoogleCloudPolicysimulatorV1betaReplayResult_H
#define OAIGoogleCloudPolicysimulatorV1betaReplayResult_H

#include <QJsonObject>

#include "OAIGoogleCloudPolicysimulatorV1betaAccessTuple.h"
#include "OAIGoogleCloudPolicysimulatorV1betaReplayDiff.h"
#include "OAIGoogleRpcStatus.h"
#include "OAIGoogleTypeDate.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIGoogleCloudPolicysimulatorV1betaAccessTuple;
class OAIGoogleCloudPolicysimulatorV1betaReplayDiff;
class OAIGoogleRpcStatus;
class OAIGoogleTypeDate;

class OAIGoogleCloudPolicysimulatorV1betaReplayResult : public OAIObject {
public:
    OAIGoogleCloudPolicysimulatorV1betaReplayResult();
    OAIGoogleCloudPolicysimulatorV1betaReplayResult(QString json);
    ~OAIGoogleCloudPolicysimulatorV1betaReplayResult() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIGoogleCloudPolicysimulatorV1betaAccessTuple getAccessTuple() const;
    void setAccessTuple(const OAIGoogleCloudPolicysimulatorV1betaAccessTuple &access_tuple);
    bool is_access_tuple_Set() const;
    bool is_access_tuple_Valid() const;

    OAIGoogleCloudPolicysimulatorV1betaReplayDiff getDiff() const;
    void setDiff(const OAIGoogleCloudPolicysimulatorV1betaReplayDiff &diff);
    bool is_diff_Set() const;
    bool is_diff_Valid() const;

    OAIGoogleRpcStatus getError() const;
    void setError(const OAIGoogleRpcStatus &error);
    bool is_error_Set() const;
    bool is_error_Valid() const;

    OAIGoogleTypeDate getLastSeenDate() const;
    void setLastSeenDate(const OAIGoogleTypeDate &last_seen_date);
    bool is_last_seen_date_Set() const;
    bool is_last_seen_date_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getParent() const;
    void setParent(const QString &parent);
    bool is_parent_Set() const;
    bool is_parent_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIGoogleCloudPolicysimulatorV1betaAccessTuple m_access_tuple;
    bool m_access_tuple_isSet;
    bool m_access_tuple_isValid;

    OAIGoogleCloudPolicysimulatorV1betaReplayDiff m_diff;
    bool m_diff_isSet;
    bool m_diff_isValid;

    OAIGoogleRpcStatus m_error;
    bool m_error_isSet;
    bool m_error_isValid;

    OAIGoogleTypeDate m_last_seen_date;
    bool m_last_seen_date_isSet;
    bool m_last_seen_date_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_parent;
    bool m_parent_isSet;
    bool m_parent_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGoogleCloudPolicysimulatorV1betaReplayResult)

#endif // OAIGoogleCloudPolicysimulatorV1betaReplayResult_H
