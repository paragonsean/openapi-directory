/**
 * Policy Simulator API
 *  Policy Simulator is a collection of endpoints for creating, running, and viewing a Replay. A `Replay` is a type of simulation that lets you see how your members' access to resources might change if you changed your IAM policy. During a `Replay`, Policy Simulator re-evaluates, or replays, past access attempts under both the current policy and your proposed policy, and compares those results to determine how your members' access might change under the proposed policy.
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudPolicysimulatorV1betaReplayResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudPolicysimulatorV1betaReplayResult::OAIGoogleCloudPolicysimulatorV1betaReplayResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudPolicysimulatorV1betaReplayResult::OAIGoogleCloudPolicysimulatorV1betaReplayResult() {
    this->initializeModel();
}

OAIGoogleCloudPolicysimulatorV1betaReplayResult::~OAIGoogleCloudPolicysimulatorV1betaReplayResult() {}

void OAIGoogleCloudPolicysimulatorV1betaReplayResult::initializeModel() {

    m_access_tuple_isSet = false;
    m_access_tuple_isValid = false;

    m_diff_isSet = false;
    m_diff_isValid = false;

    m_error_isSet = false;
    m_error_isValid = false;

    m_last_seen_date_isSet = false;
    m_last_seen_date_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_parent_isSet = false;
    m_parent_isValid = false;
}

void OAIGoogleCloudPolicysimulatorV1betaReplayResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudPolicysimulatorV1betaReplayResult::fromJsonObject(QJsonObject json) {

    m_access_tuple_isValid = ::OpenAPI::fromJsonValue(m_access_tuple, json[QString("accessTuple")]);
    m_access_tuple_isSet = !json[QString("accessTuple")].isNull() && m_access_tuple_isValid;

    m_diff_isValid = ::OpenAPI::fromJsonValue(m_diff, json[QString("diff")]);
    m_diff_isSet = !json[QString("diff")].isNull() && m_diff_isValid;

    m_error_isValid = ::OpenAPI::fromJsonValue(m_error, json[QString("error")]);
    m_error_isSet = !json[QString("error")].isNull() && m_error_isValid;

    m_last_seen_date_isValid = ::OpenAPI::fromJsonValue(m_last_seen_date, json[QString("lastSeenDate")]);
    m_last_seen_date_isSet = !json[QString("lastSeenDate")].isNull() && m_last_seen_date_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_parent_isValid = ::OpenAPI::fromJsonValue(m_parent, json[QString("parent")]);
    m_parent_isSet = !json[QString("parent")].isNull() && m_parent_isValid;
}

QString OAIGoogleCloudPolicysimulatorV1betaReplayResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudPolicysimulatorV1betaReplayResult::asJsonObject() const {
    QJsonObject obj;
    if (m_access_tuple.isSet()) {
        obj.insert(QString("accessTuple"), ::OpenAPI::toJsonValue(m_access_tuple));
    }
    if (m_diff.isSet()) {
        obj.insert(QString("diff"), ::OpenAPI::toJsonValue(m_diff));
    }
    if (m_error.isSet()) {
        obj.insert(QString("error"), ::OpenAPI::toJsonValue(m_error));
    }
    if (m_last_seen_date.isSet()) {
        obj.insert(QString("lastSeenDate"), ::OpenAPI::toJsonValue(m_last_seen_date));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_parent_isSet) {
        obj.insert(QString("parent"), ::OpenAPI::toJsonValue(m_parent));
    }
    return obj;
}

OAIGoogleCloudPolicysimulatorV1betaAccessTuple OAIGoogleCloudPolicysimulatorV1betaReplayResult::getAccessTuple() const {
    return m_access_tuple;
}
void OAIGoogleCloudPolicysimulatorV1betaReplayResult::setAccessTuple(const OAIGoogleCloudPolicysimulatorV1betaAccessTuple &access_tuple) {
    m_access_tuple = access_tuple;
    m_access_tuple_isSet = true;
}

bool OAIGoogleCloudPolicysimulatorV1betaReplayResult::is_access_tuple_Set() const{
    return m_access_tuple_isSet;
}

bool OAIGoogleCloudPolicysimulatorV1betaReplayResult::is_access_tuple_Valid() const{
    return m_access_tuple_isValid;
}

OAIGoogleCloudPolicysimulatorV1betaReplayDiff OAIGoogleCloudPolicysimulatorV1betaReplayResult::getDiff() const {
    return m_diff;
}
void OAIGoogleCloudPolicysimulatorV1betaReplayResult::setDiff(const OAIGoogleCloudPolicysimulatorV1betaReplayDiff &diff) {
    m_diff = diff;
    m_diff_isSet = true;
}

bool OAIGoogleCloudPolicysimulatorV1betaReplayResult::is_diff_Set() const{
    return m_diff_isSet;
}

bool OAIGoogleCloudPolicysimulatorV1betaReplayResult::is_diff_Valid() const{
    return m_diff_isValid;
}

OAIGoogleRpcStatus OAIGoogleCloudPolicysimulatorV1betaReplayResult::getError() const {
    return m_error;
}
void OAIGoogleCloudPolicysimulatorV1betaReplayResult::setError(const OAIGoogleRpcStatus &error) {
    m_error = error;
    m_error_isSet = true;
}

bool OAIGoogleCloudPolicysimulatorV1betaReplayResult::is_error_Set() const{
    return m_error_isSet;
}

bool OAIGoogleCloudPolicysimulatorV1betaReplayResult::is_error_Valid() const{
    return m_error_isValid;
}

OAIGoogleTypeDate OAIGoogleCloudPolicysimulatorV1betaReplayResult::getLastSeenDate() const {
    return m_last_seen_date;
}
void OAIGoogleCloudPolicysimulatorV1betaReplayResult::setLastSeenDate(const OAIGoogleTypeDate &last_seen_date) {
    m_last_seen_date = last_seen_date;
    m_last_seen_date_isSet = true;
}

bool OAIGoogleCloudPolicysimulatorV1betaReplayResult::is_last_seen_date_Set() const{
    return m_last_seen_date_isSet;
}

bool OAIGoogleCloudPolicysimulatorV1betaReplayResult::is_last_seen_date_Valid() const{
    return m_last_seen_date_isValid;
}

QString OAIGoogleCloudPolicysimulatorV1betaReplayResult::getName() const {
    return m_name;
}
void OAIGoogleCloudPolicysimulatorV1betaReplayResult::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGoogleCloudPolicysimulatorV1betaReplayResult::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGoogleCloudPolicysimulatorV1betaReplayResult::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIGoogleCloudPolicysimulatorV1betaReplayResult::getParent() const {
    return m_parent;
}
void OAIGoogleCloudPolicysimulatorV1betaReplayResult::setParent(const QString &parent) {
    m_parent = parent;
    m_parent_isSet = true;
}

bool OAIGoogleCloudPolicysimulatorV1betaReplayResult::is_parent_Set() const{
    return m_parent_isSet;
}

bool OAIGoogleCloudPolicysimulatorV1betaReplayResult::is_parent_Valid() const{
    return m_parent_isValid;
}

bool OAIGoogleCloudPolicysimulatorV1betaReplayResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_access_tuple.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_diff.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_error.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_seen_date.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudPolicysimulatorV1betaReplayResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
