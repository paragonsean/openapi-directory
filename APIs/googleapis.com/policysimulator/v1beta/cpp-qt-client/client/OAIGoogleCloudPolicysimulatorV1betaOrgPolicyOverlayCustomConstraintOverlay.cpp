/**
 * Policy Simulator API
 *  Policy Simulator is a collection of endpoints for creating, running, and viewing a Replay. A `Replay` is a type of simulation that lets you see how your members' access to resources might change if you changed your IAM policy. During a `Replay`, Policy Simulator re-evaluates, or replays, past access attempts under both the current policy and your proposed policy, and compares those results to determine how your members' access might change under the proposed policy.
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudPolicysimulatorV1betaOrgPolicyOverlayCustomConstraintOverlay.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudPolicysimulatorV1betaOrgPolicyOverlayCustomConstraintOverlay::OAIGoogleCloudPolicysimulatorV1betaOrgPolicyOverlayCustomConstraintOverlay(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudPolicysimulatorV1betaOrgPolicyOverlayCustomConstraintOverlay::OAIGoogleCloudPolicysimulatorV1betaOrgPolicyOverlayCustomConstraintOverlay() {
    this->initializeModel();
}

OAIGoogleCloudPolicysimulatorV1betaOrgPolicyOverlayCustomConstraintOverlay::~OAIGoogleCloudPolicysimulatorV1betaOrgPolicyOverlayCustomConstraintOverlay() {}

void OAIGoogleCloudPolicysimulatorV1betaOrgPolicyOverlayCustomConstraintOverlay::initializeModel() {

    m_custom_constraint_isSet = false;
    m_custom_constraint_isValid = false;

    m_custom_constraint_parent_isSet = false;
    m_custom_constraint_parent_isValid = false;
}

void OAIGoogleCloudPolicysimulatorV1betaOrgPolicyOverlayCustomConstraintOverlay::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudPolicysimulatorV1betaOrgPolicyOverlayCustomConstraintOverlay::fromJsonObject(QJsonObject json) {

    m_custom_constraint_isValid = ::OpenAPI::fromJsonValue(m_custom_constraint, json[QString("customConstraint")]);
    m_custom_constraint_isSet = !json[QString("customConstraint")].isNull() && m_custom_constraint_isValid;

    m_custom_constraint_parent_isValid = ::OpenAPI::fromJsonValue(m_custom_constraint_parent, json[QString("customConstraintParent")]);
    m_custom_constraint_parent_isSet = !json[QString("customConstraintParent")].isNull() && m_custom_constraint_parent_isValid;
}

QString OAIGoogleCloudPolicysimulatorV1betaOrgPolicyOverlayCustomConstraintOverlay::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudPolicysimulatorV1betaOrgPolicyOverlayCustomConstraintOverlay::asJsonObject() const {
    QJsonObject obj;
    if (m_custom_constraint.isSet()) {
        obj.insert(QString("customConstraint"), ::OpenAPI::toJsonValue(m_custom_constraint));
    }
    if (m_custom_constraint_parent_isSet) {
        obj.insert(QString("customConstraintParent"), ::OpenAPI::toJsonValue(m_custom_constraint_parent));
    }
    return obj;
}

OAIGoogleCloudOrgpolicyV2CustomConstraint OAIGoogleCloudPolicysimulatorV1betaOrgPolicyOverlayCustomConstraintOverlay::getCustomConstraint() const {
    return m_custom_constraint;
}
void OAIGoogleCloudPolicysimulatorV1betaOrgPolicyOverlayCustomConstraintOverlay::setCustomConstraint(const OAIGoogleCloudOrgpolicyV2CustomConstraint &custom_constraint) {
    m_custom_constraint = custom_constraint;
    m_custom_constraint_isSet = true;
}

bool OAIGoogleCloudPolicysimulatorV1betaOrgPolicyOverlayCustomConstraintOverlay::is_custom_constraint_Set() const{
    return m_custom_constraint_isSet;
}

bool OAIGoogleCloudPolicysimulatorV1betaOrgPolicyOverlayCustomConstraintOverlay::is_custom_constraint_Valid() const{
    return m_custom_constraint_isValid;
}

QString OAIGoogleCloudPolicysimulatorV1betaOrgPolicyOverlayCustomConstraintOverlay::getCustomConstraintParent() const {
    return m_custom_constraint_parent;
}
void OAIGoogleCloudPolicysimulatorV1betaOrgPolicyOverlayCustomConstraintOverlay::setCustomConstraintParent(const QString &custom_constraint_parent) {
    m_custom_constraint_parent = custom_constraint_parent;
    m_custom_constraint_parent_isSet = true;
}

bool OAIGoogleCloudPolicysimulatorV1betaOrgPolicyOverlayCustomConstraintOverlay::is_custom_constraint_parent_Set() const{
    return m_custom_constraint_parent_isSet;
}

bool OAIGoogleCloudPolicysimulatorV1betaOrgPolicyOverlayCustomConstraintOverlay::is_custom_constraint_parent_Valid() const{
    return m_custom_constraint_parent_isValid;
}

bool OAIGoogleCloudPolicysimulatorV1betaOrgPolicyOverlayCustomConstraintOverlay::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_custom_constraint.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_constraint_parent_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudPolicysimulatorV1betaOrgPolicyOverlayCustomConstraintOverlay::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
