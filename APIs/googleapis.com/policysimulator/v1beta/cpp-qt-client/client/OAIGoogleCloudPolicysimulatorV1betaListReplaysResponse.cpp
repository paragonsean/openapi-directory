/**
 * Policy Simulator API
 *  Policy Simulator is a collection of endpoints for creating, running, and viewing a Replay. A `Replay` is a type of simulation that lets you see how your members' access to resources might change if you changed your IAM policy. During a `Replay`, Policy Simulator re-evaluates, or replays, past access attempts under both the current policy and your proposed policy, and compares those results to determine how your members' access might change under the proposed policy.
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudPolicysimulatorV1betaListReplaysResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudPolicysimulatorV1betaListReplaysResponse::OAIGoogleCloudPolicysimulatorV1betaListReplaysResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudPolicysimulatorV1betaListReplaysResponse::OAIGoogleCloudPolicysimulatorV1betaListReplaysResponse() {
    this->initializeModel();
}

OAIGoogleCloudPolicysimulatorV1betaListReplaysResponse::~OAIGoogleCloudPolicysimulatorV1betaListReplaysResponse() {}

void OAIGoogleCloudPolicysimulatorV1betaListReplaysResponse::initializeModel() {

    m_next_page_token_isSet = false;
    m_next_page_token_isValid = false;

    m_replays_isSet = false;
    m_replays_isValid = false;
}

void OAIGoogleCloudPolicysimulatorV1betaListReplaysResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudPolicysimulatorV1betaListReplaysResponse::fromJsonObject(QJsonObject json) {

    m_next_page_token_isValid = ::OpenAPI::fromJsonValue(m_next_page_token, json[QString("nextPageToken")]);
    m_next_page_token_isSet = !json[QString("nextPageToken")].isNull() && m_next_page_token_isValid;

    m_replays_isValid = ::OpenAPI::fromJsonValue(m_replays, json[QString("replays")]);
    m_replays_isSet = !json[QString("replays")].isNull() && m_replays_isValid;
}

QString OAIGoogleCloudPolicysimulatorV1betaListReplaysResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudPolicysimulatorV1betaListReplaysResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_next_page_token_isSet) {
        obj.insert(QString("nextPageToken"), ::OpenAPI::toJsonValue(m_next_page_token));
    }
    if (m_replays.size() > 0) {
        obj.insert(QString("replays"), ::OpenAPI::toJsonValue(m_replays));
    }
    return obj;
}

QString OAIGoogleCloudPolicysimulatorV1betaListReplaysResponse::getNextPageToken() const {
    return m_next_page_token;
}
void OAIGoogleCloudPolicysimulatorV1betaListReplaysResponse::setNextPageToken(const QString &next_page_token) {
    m_next_page_token = next_page_token;
    m_next_page_token_isSet = true;
}

bool OAIGoogleCloudPolicysimulatorV1betaListReplaysResponse::is_next_page_token_Set() const{
    return m_next_page_token_isSet;
}

bool OAIGoogleCloudPolicysimulatorV1betaListReplaysResponse::is_next_page_token_Valid() const{
    return m_next_page_token_isValid;
}

QList<OAIGoogleCloudPolicysimulatorV1betaReplay> OAIGoogleCloudPolicysimulatorV1betaListReplaysResponse::getReplays() const {
    return m_replays;
}
void OAIGoogleCloudPolicysimulatorV1betaListReplaysResponse::setReplays(const QList<OAIGoogleCloudPolicysimulatorV1betaReplay> &replays) {
    m_replays = replays;
    m_replays_isSet = true;
}

bool OAIGoogleCloudPolicysimulatorV1betaListReplaysResponse::is_replays_Set() const{
    return m_replays_isSet;
}

bool OAIGoogleCloudPolicysimulatorV1betaListReplaysResponse::is_replays_Valid() const{
    return m_replays_isValid;
}

bool OAIGoogleCloudPolicysimulatorV1betaListReplaysResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_next_page_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_replays.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudPolicysimulatorV1betaListReplaysResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
