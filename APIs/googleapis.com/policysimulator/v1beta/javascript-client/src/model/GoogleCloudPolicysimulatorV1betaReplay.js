/**
 * Policy Simulator API
 *  Policy Simulator is a collection of endpoints for creating, running, and viewing a Replay. A `Replay` is a type of simulation that lets you see how your members' access to resources might change if you changed your IAM policy. During a `Replay`, Policy Simulator re-evaluates, or replays, past access attempts under both the current policy and your proposed policy, and compares those results to determine how your members' access might change under the proposed policy.
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GoogleCloudPolicysimulatorV1betaReplayConfig from './GoogleCloudPolicysimulatorV1betaReplayConfig';
import GoogleCloudPolicysimulatorV1betaReplayResultsSummary from './GoogleCloudPolicysimulatorV1betaReplayResultsSummary';

/**
 * The GoogleCloudPolicysimulatorV1betaReplay model module.
 * @module model/GoogleCloudPolicysimulatorV1betaReplay
 * @version v1beta
 */
class GoogleCloudPolicysimulatorV1betaReplay {
    /**
     * Constructs a new <code>GoogleCloudPolicysimulatorV1betaReplay</code>.
     * A resource describing a &#x60;Replay&#x60;, or simulation.
     * @alias module:model/GoogleCloudPolicysimulatorV1betaReplay
     */
    constructor() { 
        
        GoogleCloudPolicysimulatorV1betaReplay.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleCloudPolicysimulatorV1betaReplay</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleCloudPolicysimulatorV1betaReplay} obj Optional instance to populate.
     * @return {module:model/GoogleCloudPolicysimulatorV1betaReplay} The populated <code>GoogleCloudPolicysimulatorV1betaReplay</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleCloudPolicysimulatorV1betaReplay();

            if (data.hasOwnProperty('config')) {
                obj['config'] = GoogleCloudPolicysimulatorV1betaReplayConfig.constructFromObject(data['config']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('resultsSummary')) {
                obj['resultsSummary'] = GoogleCloudPolicysimulatorV1betaReplayResultsSummary.constructFromObject(data['resultsSummary']);
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleCloudPolicysimulatorV1betaReplay</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleCloudPolicysimulatorV1betaReplay</code>.
     */
    static validateJSON(data) {
        // validate the optional field `config`
        if (data['config']) { // data not null
          GoogleCloudPolicysimulatorV1betaReplayConfig.validateJSON(data['config']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `resultsSummary`
        if (data['resultsSummary']) { // data not null
          GoogleCloudPolicysimulatorV1betaReplayResultsSummary.validateJSON(data['resultsSummary']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }

        return true;
    }


}



/**
 * @member {module:model/GoogleCloudPolicysimulatorV1betaReplayConfig} config
 */
GoogleCloudPolicysimulatorV1betaReplay.prototype['config'] = undefined;

/**
 * Output only. The resource name of the `Replay`, which has the following format: `{projects|folders|organizations}/{resource-id}/locations/global/replays/{replay-id}`, where `{resource-id}` is the ID of the project, folder, or organization that owns the Replay. Example: `projects/my-example-project/locations/global/replays/506a5f7f-38ce-4d7d-8e03-479ce1833c36`
 * @member {String} name
 */
GoogleCloudPolicysimulatorV1betaReplay.prototype['name'] = undefined;

/**
 * @member {module:model/GoogleCloudPolicysimulatorV1betaReplayResultsSummary} resultsSummary
 */
GoogleCloudPolicysimulatorV1betaReplay.prototype['resultsSummary'] = undefined;

/**
 * Output only. The current state of the `Replay`.
 * @member {module:model/GoogleCloudPolicysimulatorV1betaReplay.StateEnum} state
 */
GoogleCloudPolicysimulatorV1betaReplay.prototype['state'] = undefined;





/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
GoogleCloudPolicysimulatorV1betaReplay['StateEnum'] = {

    /**
     * value: "STATE_UNSPECIFIED"
     * @const
     */
    "STATE_UNSPECIFIED": "STATE_UNSPECIFIED",

    /**
     * value: "PENDING"
     * @const
     */
    "PENDING": "PENDING",

    /**
     * value: "RUNNING"
     * @const
     */
    "RUNNING": "RUNNING",

    /**
     * value: "SUCCEEDED"
     * @const
     */
    "SUCCEEDED": "SUCCEEDED",

    /**
     * value: "FAILED"
     * @const
     */
    "FAILED": "FAILED"
};



export default GoogleCloudPolicysimulatorV1betaReplay;

