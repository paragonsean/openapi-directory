/**
 * Policy Simulator API
 *  Policy Simulator is a collection of endpoints for creating, running, and viewing a Replay. A `Replay` is a type of simulation that lets you see how your members' access to resources might change if you changed your IAM policy. During a `Replay`, Policy Simulator re-evaluates, or replays, past access attempts under both the current policy and your proposed policy, and compares those results to determine how your members' access might change under the proposed policy.
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GoogleTypeDate from './GoogleTypeDate';

/**
 * The GoogleCloudPolicysimulatorV1betaReplayResultsSummary model module.
 * @module model/GoogleCloudPolicysimulatorV1betaReplayResultsSummary
 * @version v1beta
 */
class GoogleCloudPolicysimulatorV1betaReplayResultsSummary {
    /**
     * Constructs a new <code>GoogleCloudPolicysimulatorV1betaReplayResultsSummary</code>.
     * Summary statistics about the replayed log entries.
     * @alias module:model/GoogleCloudPolicysimulatorV1betaReplayResultsSummary
     */
    constructor() { 
        
        GoogleCloudPolicysimulatorV1betaReplayResultsSummary.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleCloudPolicysimulatorV1betaReplayResultsSummary</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleCloudPolicysimulatorV1betaReplayResultsSummary} obj Optional instance to populate.
     * @return {module:model/GoogleCloudPolicysimulatorV1betaReplayResultsSummary} The populated <code>GoogleCloudPolicysimulatorV1betaReplayResultsSummary</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleCloudPolicysimulatorV1betaReplayResultsSummary();

            if (data.hasOwnProperty('differenceCount')) {
                obj['differenceCount'] = ApiClient.convertToType(data['differenceCount'], 'Number');
            }
            if (data.hasOwnProperty('errorCount')) {
                obj['errorCount'] = ApiClient.convertToType(data['errorCount'], 'Number');
            }
            if (data.hasOwnProperty('logCount')) {
                obj['logCount'] = ApiClient.convertToType(data['logCount'], 'Number');
            }
            if (data.hasOwnProperty('newestDate')) {
                obj['newestDate'] = GoogleTypeDate.constructFromObject(data['newestDate']);
            }
            if (data.hasOwnProperty('oldestDate')) {
                obj['oldestDate'] = GoogleTypeDate.constructFromObject(data['oldestDate']);
            }
            if (data.hasOwnProperty('unchangedCount')) {
                obj['unchangedCount'] = ApiClient.convertToType(data['unchangedCount'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleCloudPolicysimulatorV1betaReplayResultsSummary</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleCloudPolicysimulatorV1betaReplayResultsSummary</code>.
     */
    static validateJSON(data) {
        // validate the optional field `newestDate`
        if (data['newestDate']) { // data not null
          GoogleTypeDate.validateJSON(data['newestDate']);
        }
        // validate the optional field `oldestDate`
        if (data['oldestDate']) { // data not null
          GoogleTypeDate.validateJSON(data['oldestDate']);
        }

        return true;
    }


}



/**
 * The number of replayed log entries with a difference between baseline and simulated policies.
 * @member {Number} differenceCount
 */
GoogleCloudPolicysimulatorV1betaReplayResultsSummary.prototype['differenceCount'] = undefined;

/**
 * The number of log entries that could not be replayed.
 * @member {Number} errorCount
 */
GoogleCloudPolicysimulatorV1betaReplayResultsSummary.prototype['errorCount'] = undefined;

/**
 * The total number of log entries replayed.
 * @member {Number} logCount
 */
GoogleCloudPolicysimulatorV1betaReplayResultsSummary.prototype['logCount'] = undefined;

/**
 * @member {module:model/GoogleTypeDate} newestDate
 */
GoogleCloudPolicysimulatorV1betaReplayResultsSummary.prototype['newestDate'] = undefined;

/**
 * @member {module:model/GoogleTypeDate} oldestDate
 */
GoogleCloudPolicysimulatorV1betaReplayResultsSummary.prototype['oldestDate'] = undefined;

/**
 * The number of replayed log entries with no difference between baseline and simulated policies.
 * @member {Number} unchangedCount
 */
GoogleCloudPolicysimulatorV1betaReplayResultsSummary.prototype['unchangedCount'] = undefined;






export default GoogleCloudPolicysimulatorV1betaReplayResultsSummary;

