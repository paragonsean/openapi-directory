/*
 * Policy Simulator API
 *  Policy Simulator is a collection of endpoints for creating, running, and viewing a Replay. A `Replay` is a type of simulation that lets you see how your members' access to resources might change if you changed your IAM policy. During a `Replay`, Policy Simulator re-evaluates, or replays, past access attempts under both the current policy and your proposed policy, and compares those results to determine how your members' access might change under the proposed policy.
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GoogleCloudPolicysimulatorV1betaOrgPolicyOverlay;
import org.openapitools.client.model.GoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreviewResourceCounts;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * OrgPolicyViolationsPreview is a resource providing a preview of the violations that will exist if an OrgPolicy change is made. The list of violations are modeled as child resources and retrieved via a ListOrgPolicyViolations API call. There are potentially more OrgPolicyViolations than could fit in an embedded field. Thus, the use of a child resource instead of a field.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:12.210857-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreview {
  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private String createTime;

  public static final String SERIALIZED_NAME_CUSTOM_CONSTRAINTS = "customConstraints";
  @SerializedName(SERIALIZED_NAME_CUSTOM_CONSTRAINTS)
  private List<String> customConstraints = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_OVERLAY = "overlay";
  @SerializedName(SERIALIZED_NAME_OVERLAY)
  private GoogleCloudPolicysimulatorV1betaOrgPolicyOverlay overlay;

  public static final String SERIALIZED_NAME_RESOURCE_COUNTS = "resourceCounts";
  @SerializedName(SERIALIZED_NAME_RESOURCE_COUNTS)
  private GoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreviewResourceCounts resourceCounts;

  /**
   * Output only. The state of the &#x60;OrgPolicyViolationsPreview&#x60;.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    STATE_UNSPECIFIED("PREVIEW_STATE_UNSPECIFIED"),
    
    PENDING("PREVIEW_PENDING"),
    
    RUNNING("PREVIEW_RUNNING"),
    
    SUCCEEDED("PREVIEW_SUCCEEDED"),
    
    FAILED("PREVIEW_FAILED");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public static final String SERIALIZED_NAME_VIOLATIONS_COUNT = "violationsCount";
  @SerializedName(SERIALIZED_NAME_VIOLATIONS_COUNT)
  private Integer violationsCount;

  public GoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreview() {
  }

  public GoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreview(
     String createTime, 
     List<String> customConstraints, 
     String name, 
     StateEnum state, 
     Integer violationsCount
  ) {
    this();
    this.createTime = createTime;
    this.customConstraints = customConstraints;
    this.name = name;
    this.state = state;
    this.violationsCount = violationsCount;
  }

  /**
   * Output only. Time when this &#x60;OrgPolicyViolationsPreview&#x60; was created.
   * @return createTime
   */
  @javax.annotation.Nullable
  public String getCreateTime() {
    return createTime;
  }



  /**
   * Output only. The names of the constraints against which all &#x60;OrgPolicyViolations&#x60; were evaluated. If &#x60;OrgPolicyOverlay&#x60; only contains &#x60;PolicyOverlay&#x60; then it contains the name of the configured custom constraint, applicable to the specified policies. Otherwise it contains the name of the constraint specified in &#x60;CustomConstraintOverlay&#x60;. Format: &#x60;organizations/{organization_id}/customConstraints/{custom_constraint_id}&#x60; Example: &#x60;organizations/123/customConstraints/custom.createOnlyE2TypeVms&#x60;
   * @return customConstraints
   */
  @javax.annotation.Nullable
  public List<String> getCustomConstraints() {
    return customConstraints;
  }



  /**
   * Output only. The resource name of the &#x60;OrgPolicyViolationsPreview&#x60;. It has the following format: &#x60;organizations/{organization}/locations/{location}/orgPolicyViolationsPreviews/{orgPolicyViolationsPreview}&#x60; Example: &#x60;organizations/my-example-org/locations/global/orgPolicyViolationsPreviews/506a5f7f&#x60;
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }



  public GoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreview overlay(GoogleCloudPolicysimulatorV1betaOrgPolicyOverlay overlay) {
    this.overlay = overlay;
    return this;
  }

  /**
   * Get overlay
   * @return overlay
   */
  @javax.annotation.Nullable
  public GoogleCloudPolicysimulatorV1betaOrgPolicyOverlay getOverlay() {
    return overlay;
  }

  public void setOverlay(GoogleCloudPolicysimulatorV1betaOrgPolicyOverlay overlay) {
    this.overlay = overlay;
  }


  public GoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreview resourceCounts(GoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreviewResourceCounts resourceCounts) {
    this.resourceCounts = resourceCounts;
    return this;
  }

  /**
   * Get resourceCounts
   * @return resourceCounts
   */
  @javax.annotation.Nullable
  public GoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreviewResourceCounts getResourceCounts() {
    return resourceCounts;
  }

  public void setResourceCounts(GoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreviewResourceCounts resourceCounts) {
    this.resourceCounts = resourceCounts;
  }


  /**
   * Output only. The state of the &#x60;OrgPolicyViolationsPreview&#x60;.
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }



  /**
   * Output only. The number of OrgPolicyViolations in this &#x60;OrgPolicyViolationsPreview&#x60;. This count may differ from &#x60;resource_summary.noncompliant_count&#x60; because each OrgPolicyViolation is specific to a resource **and** constraint. If there are multiple constraints being evaluated (i.e. multiple policies in the overlay), a single resource may violate multiple constraints.
   * @return violationsCount
   */
  @javax.annotation.Nullable
  public Integer getViolationsCount() {
    return violationsCount;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreview googleCloudPolicysimulatorV1betaOrgPolicyViolationsPreview = (GoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreview) o;
    return Objects.equals(this.createTime, googleCloudPolicysimulatorV1betaOrgPolicyViolationsPreview.createTime) &&
        Objects.equals(this.customConstraints, googleCloudPolicysimulatorV1betaOrgPolicyViolationsPreview.customConstraints) &&
        Objects.equals(this.name, googleCloudPolicysimulatorV1betaOrgPolicyViolationsPreview.name) &&
        Objects.equals(this.overlay, googleCloudPolicysimulatorV1betaOrgPolicyViolationsPreview.overlay) &&
        Objects.equals(this.resourceCounts, googleCloudPolicysimulatorV1betaOrgPolicyViolationsPreview.resourceCounts) &&
        Objects.equals(this.state, googleCloudPolicysimulatorV1betaOrgPolicyViolationsPreview.state) &&
        Objects.equals(this.violationsCount, googleCloudPolicysimulatorV1betaOrgPolicyViolationsPreview.violationsCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createTime, customConstraints, name, overlay, resourceCounts, state, violationsCount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreview {\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    customConstraints: ").append(toIndentedString(customConstraints)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    overlay: ").append(toIndentedString(overlay)).append("\n");
    sb.append("    resourceCounts: ").append(toIndentedString(resourceCounts)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    violationsCount: ").append(toIndentedString(violationsCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("createTime");
    openapiFields.add("customConstraints");
    openapiFields.add("name");
    openapiFields.add("overlay");
    openapiFields.add("resourceCounts");
    openapiFields.add("state");
    openapiFields.add("violationsCount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreview
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreview.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreview is not found in the empty JSON string", GoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreview.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreview.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreview` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("createTime") != null && !jsonObj.get("createTime").isJsonNull()) && !jsonObj.get("createTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createTime").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("customConstraints") != null && !jsonObj.get("customConstraints").isJsonNull() && !jsonObj.get("customConstraints").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `customConstraints` to be an array in the JSON string but got `%s`", jsonObj.get("customConstraints").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `overlay`
      if (jsonObj.get("overlay") != null && !jsonObj.get("overlay").isJsonNull()) {
        GoogleCloudPolicysimulatorV1betaOrgPolicyOverlay.validateJsonElement(jsonObj.get("overlay"));
      }
      // validate the optional field `resourceCounts`
      if (jsonObj.get("resourceCounts") != null && !jsonObj.get("resourceCounts").isJsonNull()) {
        GoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreviewResourceCounts.validateJsonElement(jsonObj.get("resourceCounts"));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreview.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreview' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreview> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreview.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreview>() {
           @Override
           public void write(JsonWriter out, GoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreview value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreview read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreview given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreview
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreview
   */
  public static GoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreview fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreview.class);
  }

  /**
   * Convert an instance of GoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreview to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

