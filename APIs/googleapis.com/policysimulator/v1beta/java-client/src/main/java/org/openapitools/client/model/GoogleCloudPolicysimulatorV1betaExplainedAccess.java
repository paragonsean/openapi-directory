/*
 * Policy Simulator API
 *  Policy Simulator is a collection of endpoints for creating, running, and viewing a Replay. A `Replay` is a type of simulation that lets you see how your members' access to resources might change if you changed your IAM policy. During a `Replay`, Policy Simulator re-evaluates, or replays, past access attempts under both the current policy and your proposed policy, and compares those results to determine how your members' access might change under the proposed policy.
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GoogleCloudPolicysimulatorV1betaExplainedPolicy;
import org.openapitools.client.model.GoogleRpcStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Details about how a set of policies, listed in ExplainedPolicy, resulted in a certain AccessState when replaying an access tuple.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:12.210857-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudPolicysimulatorV1betaExplainedAccess {
  /**
   * Whether the principal in the access tuple has permission to access the resource in the access tuple under the given policies.
   */
  @JsonAdapter(AccessStateEnum.Adapter.class)
  public enum AccessStateEnum {
    ACCESS_STATE_UNSPECIFIED("ACCESS_STATE_UNSPECIFIED"),
    
    GRANTED("GRANTED"),
    
    NOT_GRANTED("NOT_GRANTED"),
    
    UNKNOWN_CONDITIONAL("UNKNOWN_CONDITIONAL"),
    
    UNKNOWN_INFO_DENIED("UNKNOWN_INFO_DENIED");

    private String value;

    AccessStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AccessStateEnum fromValue(String value) {
      for (AccessStateEnum b : AccessStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AccessStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AccessStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AccessStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AccessStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AccessStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ACCESS_STATE = "accessState";
  @SerializedName(SERIALIZED_NAME_ACCESS_STATE)
  private AccessStateEnum accessState;

  public static final String SERIALIZED_NAME_ERRORS = "errors";
  @SerializedName(SERIALIZED_NAME_ERRORS)
  private List<GoogleRpcStatus> errors = new ArrayList<>();

  public static final String SERIALIZED_NAME_POLICIES = "policies";
  @SerializedName(SERIALIZED_NAME_POLICIES)
  private List<GoogleCloudPolicysimulatorV1betaExplainedPolicy> policies = new ArrayList<>();

  public GoogleCloudPolicysimulatorV1betaExplainedAccess() {
  }

  public GoogleCloudPolicysimulatorV1betaExplainedAccess accessState(AccessStateEnum accessState) {
    this.accessState = accessState;
    return this;
  }

  /**
   * Whether the principal in the access tuple has permission to access the resource in the access tuple under the given policies.
   * @return accessState
   */
  @javax.annotation.Nullable
  public AccessStateEnum getAccessState() {
    return accessState;
  }

  public void setAccessState(AccessStateEnum accessState) {
    this.accessState = accessState;
  }


  public GoogleCloudPolicysimulatorV1betaExplainedAccess errors(List<GoogleRpcStatus> errors) {
    this.errors = errors;
    return this;
  }

  public GoogleCloudPolicysimulatorV1betaExplainedAccess addErrorsItem(GoogleRpcStatus errorsItem) {
    if (this.errors == null) {
      this.errors = new ArrayList<>();
    }
    this.errors.add(errorsItem);
    return this;
  }

  /**
   * If the AccessState is &#x60;UNKNOWN&#x60;, this field contains a list of errors explaining why the result is &#x60;UNKNOWN&#x60;. If the &#x60;AccessState&#x60; is &#x60;GRANTED&#x60; or &#x60;NOT_GRANTED&#x60;, this field is omitted.
   * @return errors
   */
  @javax.annotation.Nullable
  public List<GoogleRpcStatus> getErrors() {
    return errors;
  }

  public void setErrors(List<GoogleRpcStatus> errors) {
    this.errors = errors;
  }


  public GoogleCloudPolicysimulatorV1betaExplainedAccess policies(List<GoogleCloudPolicysimulatorV1betaExplainedPolicy> policies) {
    this.policies = policies;
    return this;
  }

  public GoogleCloudPolicysimulatorV1betaExplainedAccess addPoliciesItem(GoogleCloudPolicysimulatorV1betaExplainedPolicy policiesItem) {
    if (this.policies == null) {
      this.policies = new ArrayList<>();
    }
    this.policies.add(policiesItem);
    return this;
  }

  /**
   * If the AccessState is &#x60;UNKNOWN&#x60;, this field contains the policies that led to that result. If the &#x60;AccessState&#x60; is &#x60;GRANTED&#x60; or &#x60;NOT_GRANTED&#x60;, this field is omitted.
   * @return policies
   */
  @javax.annotation.Nullable
  public List<GoogleCloudPolicysimulatorV1betaExplainedPolicy> getPolicies() {
    return policies;
  }

  public void setPolicies(List<GoogleCloudPolicysimulatorV1betaExplainedPolicy> policies) {
    this.policies = policies;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudPolicysimulatorV1betaExplainedAccess googleCloudPolicysimulatorV1betaExplainedAccess = (GoogleCloudPolicysimulatorV1betaExplainedAccess) o;
    return Objects.equals(this.accessState, googleCloudPolicysimulatorV1betaExplainedAccess.accessState) &&
        Objects.equals(this.errors, googleCloudPolicysimulatorV1betaExplainedAccess.errors) &&
        Objects.equals(this.policies, googleCloudPolicysimulatorV1betaExplainedAccess.policies);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accessState, errors, policies);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudPolicysimulatorV1betaExplainedAccess {\n");
    sb.append("    accessState: ").append(toIndentedString(accessState)).append("\n");
    sb.append("    errors: ").append(toIndentedString(errors)).append("\n");
    sb.append("    policies: ").append(toIndentedString(policies)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accessState");
    openapiFields.add("errors");
    openapiFields.add("policies");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudPolicysimulatorV1betaExplainedAccess
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudPolicysimulatorV1betaExplainedAccess.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudPolicysimulatorV1betaExplainedAccess is not found in the empty JSON string", GoogleCloudPolicysimulatorV1betaExplainedAccess.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudPolicysimulatorV1betaExplainedAccess.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudPolicysimulatorV1betaExplainedAccess` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("accessState") != null && !jsonObj.get("accessState").isJsonNull()) && !jsonObj.get("accessState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accessState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accessState").toString()));
      }
      // validate the optional field `accessState`
      if (jsonObj.get("accessState") != null && !jsonObj.get("accessState").isJsonNull()) {
        AccessStateEnum.validateJsonElement(jsonObj.get("accessState"));
      }
      if (jsonObj.get("errors") != null && !jsonObj.get("errors").isJsonNull()) {
        JsonArray jsonArrayerrors = jsonObj.getAsJsonArray("errors");
        if (jsonArrayerrors != null) {
          // ensure the json data is an array
          if (!jsonObj.get("errors").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `errors` to be an array in the JSON string but got `%s`", jsonObj.get("errors").toString()));
          }

          // validate the optional field `errors` (array)
          for (int i = 0; i < jsonArrayerrors.size(); i++) {
            GoogleRpcStatus.validateJsonElement(jsonArrayerrors.get(i));
          };
        }
      }
      if (jsonObj.get("policies") != null && !jsonObj.get("policies").isJsonNull()) {
        JsonArray jsonArraypolicies = jsonObj.getAsJsonArray("policies");
        if (jsonArraypolicies != null) {
          // ensure the json data is an array
          if (!jsonObj.get("policies").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `policies` to be an array in the JSON string but got `%s`", jsonObj.get("policies").toString()));
          }

          // validate the optional field `policies` (array)
          for (int i = 0; i < jsonArraypolicies.size(); i++) {
            GoogleCloudPolicysimulatorV1betaExplainedPolicy.validateJsonElement(jsonArraypolicies.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudPolicysimulatorV1betaExplainedAccess.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudPolicysimulatorV1betaExplainedAccess' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudPolicysimulatorV1betaExplainedAccess> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudPolicysimulatorV1betaExplainedAccess.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudPolicysimulatorV1betaExplainedAccess>() {
           @Override
           public void write(JsonWriter out, GoogleCloudPolicysimulatorV1betaExplainedAccess value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudPolicysimulatorV1betaExplainedAccess read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudPolicysimulatorV1betaExplainedAccess given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudPolicysimulatorV1betaExplainedAccess
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudPolicysimulatorV1betaExplainedAccess
   */
  public static GoogleCloudPolicysimulatorV1betaExplainedAccess fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudPolicysimulatorV1betaExplainedAccess.class);
  }

  /**
   * Convert an instance of GoogleCloudPolicysimulatorV1betaExplainedAccess to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

