/**
 * Policy Simulator API
 *  Policy Simulator is a collection of endpoints for creating, running, and viewing a Replay. A `Replay` is a type of simulation that lets you see how your members' access to resources might change if you changed your IAM policy. During a `Replay`, Policy Simulator re-evaluates, or replays, past access attempts under both the current policy and your proposed policy, and compares those results to determine how your members' access might change under the proposed policy.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudPolicysimulatorV1ReplayConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudPolicysimulatorV1ReplayConfig::OAIGoogleCloudPolicysimulatorV1ReplayConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudPolicysimulatorV1ReplayConfig::OAIGoogleCloudPolicysimulatorV1ReplayConfig() {
    this->initializeModel();
}

OAIGoogleCloudPolicysimulatorV1ReplayConfig::~OAIGoogleCloudPolicysimulatorV1ReplayConfig() {}

void OAIGoogleCloudPolicysimulatorV1ReplayConfig::initializeModel() {

    m_log_source_isSet = false;
    m_log_source_isValid = false;

    m_policy_overlay_isSet = false;
    m_policy_overlay_isValid = false;
}

void OAIGoogleCloudPolicysimulatorV1ReplayConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudPolicysimulatorV1ReplayConfig::fromJsonObject(QJsonObject json) {

    m_log_source_isValid = ::OpenAPI::fromJsonValue(m_log_source, json[QString("logSource")]);
    m_log_source_isSet = !json[QString("logSource")].isNull() && m_log_source_isValid;

    m_policy_overlay_isValid = ::OpenAPI::fromJsonValue(m_policy_overlay, json[QString("policyOverlay")]);
    m_policy_overlay_isSet = !json[QString("policyOverlay")].isNull() && m_policy_overlay_isValid;
}

QString OAIGoogleCloudPolicysimulatorV1ReplayConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudPolicysimulatorV1ReplayConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_log_source_isSet) {
        obj.insert(QString("logSource"), ::OpenAPI::toJsonValue(m_log_source));
    }
    if (m_policy_overlay.size() > 0) {
        obj.insert(QString("policyOverlay"), ::OpenAPI::toJsonValue(m_policy_overlay));
    }
    return obj;
}

QString OAIGoogleCloudPolicysimulatorV1ReplayConfig::getLogSource() const {
    return m_log_source;
}
void OAIGoogleCloudPolicysimulatorV1ReplayConfig::setLogSource(const QString &log_source) {
    m_log_source = log_source;
    m_log_source_isSet = true;
}

bool OAIGoogleCloudPolicysimulatorV1ReplayConfig::is_log_source_Set() const{
    return m_log_source_isSet;
}

bool OAIGoogleCloudPolicysimulatorV1ReplayConfig::is_log_source_Valid() const{
    return m_log_source_isValid;
}

QMap<QString, OAIGoogleIamV1Policy> OAIGoogleCloudPolicysimulatorV1ReplayConfig::getPolicyOverlay() const {
    return m_policy_overlay;
}
void OAIGoogleCloudPolicysimulatorV1ReplayConfig::setPolicyOverlay(const QMap<QString, OAIGoogleIamV1Policy> &policy_overlay) {
    m_policy_overlay = policy_overlay;
    m_policy_overlay_isSet = true;
}

bool OAIGoogleCloudPolicysimulatorV1ReplayConfig::is_policy_overlay_Set() const{
    return m_policy_overlay_isSet;
}

bool OAIGoogleCloudPolicysimulatorV1ReplayConfig::is_policy_overlay_Valid() const{
    return m_policy_overlay_isValid;
}

bool OAIGoogleCloudPolicysimulatorV1ReplayConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_log_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_policy_overlay.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudPolicysimulatorV1ReplayConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
