/**
 * Policy Simulator API
 *  Policy Simulator is a collection of endpoints for creating, running, and viewing a Replay. A `Replay` is a type of simulation that lets you see how your members' access to resources might change if you changed your IAM policy. During a `Replay`, Policy Simulator re-evaluates, or replays, past access attempts under both the current policy and your proposed policy, and compares those results to determine how your members' access might change under the proposed policy.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGoogleCloudPolicysimulatorV1ReplayResultsSummary.h
 *
 * Summary statistics about the replayed log entries.
 */

#ifndef OAIGoogleCloudPolicysimulatorV1ReplayResultsSummary_H
#define OAIGoogleCloudPolicysimulatorV1ReplayResultsSummary_H

#include <QJsonObject>

#include "OAIGoogleTypeDate.h"

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIGoogleTypeDate;

class OAIGoogleCloudPolicysimulatorV1ReplayResultsSummary : public OAIObject {
public:
    OAIGoogleCloudPolicysimulatorV1ReplayResultsSummary();
    OAIGoogleCloudPolicysimulatorV1ReplayResultsSummary(QString json);
    ~OAIGoogleCloudPolicysimulatorV1ReplayResultsSummary() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getDifferenceCount() const;
    void setDifferenceCount(const qint32 &difference_count);
    bool is_difference_count_Set() const;
    bool is_difference_count_Valid() const;

    qint32 getErrorCount() const;
    void setErrorCount(const qint32 &error_count);
    bool is_error_count_Set() const;
    bool is_error_count_Valid() const;

    qint32 getLogCount() const;
    void setLogCount(const qint32 &log_count);
    bool is_log_count_Set() const;
    bool is_log_count_Valid() const;

    OAIGoogleTypeDate getNewestDate() const;
    void setNewestDate(const OAIGoogleTypeDate &newest_date);
    bool is_newest_date_Set() const;
    bool is_newest_date_Valid() const;

    OAIGoogleTypeDate getOldestDate() const;
    void setOldestDate(const OAIGoogleTypeDate &oldest_date);
    bool is_oldest_date_Set() const;
    bool is_oldest_date_Valid() const;

    qint32 getUnchangedCount() const;
    void setUnchangedCount(const qint32 &unchanged_count);
    bool is_unchanged_count_Set() const;
    bool is_unchanged_count_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_difference_count;
    bool m_difference_count_isSet;
    bool m_difference_count_isValid;

    qint32 m_error_count;
    bool m_error_count_isSet;
    bool m_error_count_isValid;

    qint32 m_log_count;
    bool m_log_count_isSet;
    bool m_log_count_isValid;

    OAIGoogleTypeDate m_newest_date;
    bool m_newest_date_isSet;
    bool m_newest_date_isValid;

    OAIGoogleTypeDate m_oldest_date;
    bool m_oldest_date_isSet;
    bool m_oldest_date_isValid;

    qint32 m_unchanged_count;
    bool m_unchanged_count_isSet;
    bool m_unchanged_count_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGoogleCloudPolicysimulatorV1ReplayResultsSummary)

#endif // OAIGoogleCloudPolicysimulatorV1ReplayResultsSummary_H
