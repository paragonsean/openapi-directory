/**
 * Policy Simulator API
 *  Policy Simulator is a collection of endpoints for creating, running, and viewing a Replay. A `Replay` is a type of simulation that lets you see how your members' access to resources might change if you changed your IAM policy. During a `Replay`, Policy Simulator re-evaluates, or replays, past access attempts under both the current policy and your proposed policy, and compares those results to determine how your members' access might change under the proposed policy.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudPolicysimulatorV1ReplayResultsSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudPolicysimulatorV1ReplayResultsSummary::OAIGoogleCloudPolicysimulatorV1ReplayResultsSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudPolicysimulatorV1ReplayResultsSummary::OAIGoogleCloudPolicysimulatorV1ReplayResultsSummary() {
    this->initializeModel();
}

OAIGoogleCloudPolicysimulatorV1ReplayResultsSummary::~OAIGoogleCloudPolicysimulatorV1ReplayResultsSummary() {}

void OAIGoogleCloudPolicysimulatorV1ReplayResultsSummary::initializeModel() {

    m_difference_count_isSet = false;
    m_difference_count_isValid = false;

    m_error_count_isSet = false;
    m_error_count_isValid = false;

    m_log_count_isSet = false;
    m_log_count_isValid = false;

    m_newest_date_isSet = false;
    m_newest_date_isValid = false;

    m_oldest_date_isSet = false;
    m_oldest_date_isValid = false;

    m_unchanged_count_isSet = false;
    m_unchanged_count_isValid = false;
}

void OAIGoogleCloudPolicysimulatorV1ReplayResultsSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudPolicysimulatorV1ReplayResultsSummary::fromJsonObject(QJsonObject json) {

    m_difference_count_isValid = ::OpenAPI::fromJsonValue(m_difference_count, json[QString("differenceCount")]);
    m_difference_count_isSet = !json[QString("differenceCount")].isNull() && m_difference_count_isValid;

    m_error_count_isValid = ::OpenAPI::fromJsonValue(m_error_count, json[QString("errorCount")]);
    m_error_count_isSet = !json[QString("errorCount")].isNull() && m_error_count_isValid;

    m_log_count_isValid = ::OpenAPI::fromJsonValue(m_log_count, json[QString("logCount")]);
    m_log_count_isSet = !json[QString("logCount")].isNull() && m_log_count_isValid;

    m_newest_date_isValid = ::OpenAPI::fromJsonValue(m_newest_date, json[QString("newestDate")]);
    m_newest_date_isSet = !json[QString("newestDate")].isNull() && m_newest_date_isValid;

    m_oldest_date_isValid = ::OpenAPI::fromJsonValue(m_oldest_date, json[QString("oldestDate")]);
    m_oldest_date_isSet = !json[QString("oldestDate")].isNull() && m_oldest_date_isValid;

    m_unchanged_count_isValid = ::OpenAPI::fromJsonValue(m_unchanged_count, json[QString("unchangedCount")]);
    m_unchanged_count_isSet = !json[QString("unchangedCount")].isNull() && m_unchanged_count_isValid;
}

QString OAIGoogleCloudPolicysimulatorV1ReplayResultsSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudPolicysimulatorV1ReplayResultsSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_difference_count_isSet) {
        obj.insert(QString("differenceCount"), ::OpenAPI::toJsonValue(m_difference_count));
    }
    if (m_error_count_isSet) {
        obj.insert(QString("errorCount"), ::OpenAPI::toJsonValue(m_error_count));
    }
    if (m_log_count_isSet) {
        obj.insert(QString("logCount"), ::OpenAPI::toJsonValue(m_log_count));
    }
    if (m_newest_date.isSet()) {
        obj.insert(QString("newestDate"), ::OpenAPI::toJsonValue(m_newest_date));
    }
    if (m_oldest_date.isSet()) {
        obj.insert(QString("oldestDate"), ::OpenAPI::toJsonValue(m_oldest_date));
    }
    if (m_unchanged_count_isSet) {
        obj.insert(QString("unchangedCount"), ::OpenAPI::toJsonValue(m_unchanged_count));
    }
    return obj;
}

qint32 OAIGoogleCloudPolicysimulatorV1ReplayResultsSummary::getDifferenceCount() const {
    return m_difference_count;
}
void OAIGoogleCloudPolicysimulatorV1ReplayResultsSummary::setDifferenceCount(const qint32 &difference_count) {
    m_difference_count = difference_count;
    m_difference_count_isSet = true;
}

bool OAIGoogleCloudPolicysimulatorV1ReplayResultsSummary::is_difference_count_Set() const{
    return m_difference_count_isSet;
}

bool OAIGoogleCloudPolicysimulatorV1ReplayResultsSummary::is_difference_count_Valid() const{
    return m_difference_count_isValid;
}

qint32 OAIGoogleCloudPolicysimulatorV1ReplayResultsSummary::getErrorCount() const {
    return m_error_count;
}
void OAIGoogleCloudPolicysimulatorV1ReplayResultsSummary::setErrorCount(const qint32 &error_count) {
    m_error_count = error_count;
    m_error_count_isSet = true;
}

bool OAIGoogleCloudPolicysimulatorV1ReplayResultsSummary::is_error_count_Set() const{
    return m_error_count_isSet;
}

bool OAIGoogleCloudPolicysimulatorV1ReplayResultsSummary::is_error_count_Valid() const{
    return m_error_count_isValid;
}

qint32 OAIGoogleCloudPolicysimulatorV1ReplayResultsSummary::getLogCount() const {
    return m_log_count;
}
void OAIGoogleCloudPolicysimulatorV1ReplayResultsSummary::setLogCount(const qint32 &log_count) {
    m_log_count = log_count;
    m_log_count_isSet = true;
}

bool OAIGoogleCloudPolicysimulatorV1ReplayResultsSummary::is_log_count_Set() const{
    return m_log_count_isSet;
}

bool OAIGoogleCloudPolicysimulatorV1ReplayResultsSummary::is_log_count_Valid() const{
    return m_log_count_isValid;
}

OAIGoogleTypeDate OAIGoogleCloudPolicysimulatorV1ReplayResultsSummary::getNewestDate() const {
    return m_newest_date;
}
void OAIGoogleCloudPolicysimulatorV1ReplayResultsSummary::setNewestDate(const OAIGoogleTypeDate &newest_date) {
    m_newest_date = newest_date;
    m_newest_date_isSet = true;
}

bool OAIGoogleCloudPolicysimulatorV1ReplayResultsSummary::is_newest_date_Set() const{
    return m_newest_date_isSet;
}

bool OAIGoogleCloudPolicysimulatorV1ReplayResultsSummary::is_newest_date_Valid() const{
    return m_newest_date_isValid;
}

OAIGoogleTypeDate OAIGoogleCloudPolicysimulatorV1ReplayResultsSummary::getOldestDate() const {
    return m_oldest_date;
}
void OAIGoogleCloudPolicysimulatorV1ReplayResultsSummary::setOldestDate(const OAIGoogleTypeDate &oldest_date) {
    m_oldest_date = oldest_date;
    m_oldest_date_isSet = true;
}

bool OAIGoogleCloudPolicysimulatorV1ReplayResultsSummary::is_oldest_date_Set() const{
    return m_oldest_date_isSet;
}

bool OAIGoogleCloudPolicysimulatorV1ReplayResultsSummary::is_oldest_date_Valid() const{
    return m_oldest_date_isValid;
}

qint32 OAIGoogleCloudPolicysimulatorV1ReplayResultsSummary::getUnchangedCount() const {
    return m_unchanged_count;
}
void OAIGoogleCloudPolicysimulatorV1ReplayResultsSummary::setUnchangedCount(const qint32 &unchanged_count) {
    m_unchanged_count = unchanged_count;
    m_unchanged_count_isSet = true;
}

bool OAIGoogleCloudPolicysimulatorV1ReplayResultsSummary::is_unchanged_count_Set() const{
    return m_unchanged_count_isSet;
}

bool OAIGoogleCloudPolicysimulatorV1ReplayResultsSummary::is_unchanged_count_Valid() const{
    return m_unchanged_count_isValid;
}

bool OAIGoogleCloudPolicysimulatorV1ReplayResultsSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_difference_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_log_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_newest_date.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_oldest_date.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_unchanged_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudPolicysimulatorV1ReplayResultsSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
