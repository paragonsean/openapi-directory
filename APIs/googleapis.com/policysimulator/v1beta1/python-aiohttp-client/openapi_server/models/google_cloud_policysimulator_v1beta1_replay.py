# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_policysimulator_v1beta1_replay_config import GoogleCloudPolicysimulatorV1beta1ReplayConfig
from openapi_server.models.google_cloud_policysimulator_v1beta1_replay_results_summary import GoogleCloudPolicysimulatorV1beta1ReplayResultsSummary
from openapi_server import util


class GoogleCloudPolicysimulatorV1beta1Replay(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, config: GoogleCloudPolicysimulatorV1beta1ReplayConfig=None, name: str=None, results_summary: GoogleCloudPolicysimulatorV1beta1ReplayResultsSummary=None, state: str=None):
        """GoogleCloudPolicysimulatorV1beta1Replay - a model defined in OpenAPI

        :param config: The config of this GoogleCloudPolicysimulatorV1beta1Replay.
        :param name: The name of this GoogleCloudPolicysimulatorV1beta1Replay.
        :param results_summary: The results_summary of this GoogleCloudPolicysimulatorV1beta1Replay.
        :param state: The state of this GoogleCloudPolicysimulatorV1beta1Replay.
        """
        self.openapi_types = {
            'config': GoogleCloudPolicysimulatorV1beta1ReplayConfig,
            'name': str,
            'results_summary': GoogleCloudPolicysimulatorV1beta1ReplayResultsSummary,
            'state': str
        }

        self.attribute_map = {
            'config': 'config',
            'name': 'name',
            'results_summary': 'resultsSummary',
            'state': 'state'
        }

        self._config = config
        self._name = name
        self._results_summary = results_summary
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudPolicysimulatorV1beta1Replay':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudPolicysimulatorV1beta1Replay of this GoogleCloudPolicysimulatorV1beta1Replay.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def config(self):
        """Gets the config of this GoogleCloudPolicysimulatorV1beta1Replay.


        :return: The config of this GoogleCloudPolicysimulatorV1beta1Replay.
        :rtype: GoogleCloudPolicysimulatorV1beta1ReplayConfig
        """
        return self._config

    @config.setter
    def config(self, config):
        """Sets the config of this GoogleCloudPolicysimulatorV1beta1Replay.


        :param config: The config of this GoogleCloudPolicysimulatorV1beta1Replay.
        :type config: GoogleCloudPolicysimulatorV1beta1ReplayConfig
        """

        self._config = config

    @property
    def name(self):
        """Gets the name of this GoogleCloudPolicysimulatorV1beta1Replay.

        Output only. The resource name of the `Replay`, which has the following format: `{projects|folders|organizations}/{resource-id}/locations/global/replays/{replay-id}`, where `{resource-id}` is the ID of the project, folder, or organization that owns the Replay. Example: `projects/my-example-project/locations/global/replays/506a5f7f-38ce-4d7d-8e03-479ce1833c36`

        :return: The name of this GoogleCloudPolicysimulatorV1beta1Replay.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GoogleCloudPolicysimulatorV1beta1Replay.

        Output only. The resource name of the `Replay`, which has the following format: `{projects|folders|organizations}/{resource-id}/locations/global/replays/{replay-id}`, where `{resource-id}` is the ID of the project, folder, or organization that owns the Replay. Example: `projects/my-example-project/locations/global/replays/506a5f7f-38ce-4d7d-8e03-479ce1833c36`

        :param name: The name of this GoogleCloudPolicysimulatorV1beta1Replay.
        :type name: str
        """

        self._name = name

    @property
    def results_summary(self):
        """Gets the results_summary of this GoogleCloudPolicysimulatorV1beta1Replay.


        :return: The results_summary of this GoogleCloudPolicysimulatorV1beta1Replay.
        :rtype: GoogleCloudPolicysimulatorV1beta1ReplayResultsSummary
        """
        return self._results_summary

    @results_summary.setter
    def results_summary(self, results_summary):
        """Sets the results_summary of this GoogleCloudPolicysimulatorV1beta1Replay.


        :param results_summary: The results_summary of this GoogleCloudPolicysimulatorV1beta1Replay.
        :type results_summary: GoogleCloudPolicysimulatorV1beta1ReplayResultsSummary
        """

        self._results_summary = results_summary

    @property
    def state(self):
        """Gets the state of this GoogleCloudPolicysimulatorV1beta1Replay.

        Output only. The current state of the `Replay`.

        :return: The state of this GoogleCloudPolicysimulatorV1beta1Replay.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this GoogleCloudPolicysimulatorV1beta1Replay.

        Output only. The current state of the `Replay`.

        :param state: The state of this GoogleCloudPolicysimulatorV1beta1Replay.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "PENDING", "RUNNING", "SUCCEEDED", "FAILED"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state
