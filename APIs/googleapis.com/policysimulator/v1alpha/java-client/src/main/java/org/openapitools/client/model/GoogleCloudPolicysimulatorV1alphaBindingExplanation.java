/*
 * Policy Simulator API
 *  Policy Simulator is a collection of endpoints for creating, running, and viewing a Replay. A `Replay` is a type of simulation that lets you see how your members' access to resources might change if you changed your IAM policy. During a `Replay`, Policy Simulator re-evaluates, or replays, past access attempts under both the current policy and your proposed policy, and compares those results to determine how your members' access might change under the proposed policy.
 *
 * The version of the OpenAPI document: v1alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.GoogleCloudPolicysimulatorV1alphaBindingExplanationAnnotatedMembership;
import org.openapitools.client.model.GoogleTypeExpr;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Details about how a binding in a policy affects a principal&#39;s ability to use a permission.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:16.080114-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudPolicysimulatorV1alphaBindingExplanation {
  /**
   * Required. Indicates whether _this binding_ provides the specified permission to the specified principal for the specified resource. This field does _not_ indicate whether the principal actually has the permission for the resource. There might be another binding that overrides this binding. To determine whether the principal actually has the permission, use the &#x60;access&#x60; field in the TroubleshootIamPolicyResponse.
   */
  @JsonAdapter(AccessEnum.Adapter.class)
  public enum AccessEnum {
    ACCESS_STATE_UNSPECIFIED("ACCESS_STATE_UNSPECIFIED"),
    
    GRANTED("GRANTED"),
    
    NOT_GRANTED("NOT_GRANTED"),
    
    UNKNOWN_CONDITIONAL("UNKNOWN_CONDITIONAL"),
    
    UNKNOWN_INFO_DENIED("UNKNOWN_INFO_DENIED");

    private String value;

    AccessEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AccessEnum fromValue(String value) {
      for (AccessEnum b : AccessEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AccessEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AccessEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AccessEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AccessEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AccessEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ACCESS = "access";
  @SerializedName(SERIALIZED_NAME_ACCESS)
  private AccessEnum access;

  public static final String SERIALIZED_NAME_CONDITION = "condition";
  @SerializedName(SERIALIZED_NAME_CONDITION)
  private GoogleTypeExpr condition;

  public static final String SERIALIZED_NAME_MEMBERSHIPS = "memberships";
  @SerializedName(SERIALIZED_NAME_MEMBERSHIPS)
  private Map<String, GoogleCloudPolicysimulatorV1alphaBindingExplanationAnnotatedMembership> memberships = new HashMap<>();

  /**
   * The relevance of this binding to the overall determination for the entire policy.
   */
  @JsonAdapter(RelevanceEnum.Adapter.class)
  public enum RelevanceEnum {
    HEURISTIC_RELEVANCE_UNSPECIFIED("HEURISTIC_RELEVANCE_UNSPECIFIED"),
    
    NORMAL("NORMAL"),
    
    HIGH("HIGH");

    private String value;

    RelevanceEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RelevanceEnum fromValue(String value) {
      for (RelevanceEnum b : RelevanceEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RelevanceEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RelevanceEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RelevanceEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RelevanceEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RelevanceEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RELEVANCE = "relevance";
  @SerializedName(SERIALIZED_NAME_RELEVANCE)
  private RelevanceEnum relevance;

  public static final String SERIALIZED_NAME_ROLE = "role";
  @SerializedName(SERIALIZED_NAME_ROLE)
  private String role;

  /**
   * Indicates whether the role granted by this binding contains the specified permission.
   */
  @JsonAdapter(RolePermissionEnum.Adapter.class)
  public enum RolePermissionEnum {
    UNSPECIFIED("ROLE_PERMISSION_UNSPECIFIED"),
    
    INCLUDED("ROLE_PERMISSION_INCLUDED"),
    
    NOT_INCLUDED("ROLE_PERMISSION_NOT_INCLUDED"),
    
    UNKNOWN_INFO_DENIED("ROLE_PERMISSION_UNKNOWN_INFO_DENIED");

    private String value;

    RolePermissionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RolePermissionEnum fromValue(String value) {
      for (RolePermissionEnum b : RolePermissionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RolePermissionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RolePermissionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RolePermissionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RolePermissionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RolePermissionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ROLE_PERMISSION = "rolePermission";
  @SerializedName(SERIALIZED_NAME_ROLE_PERMISSION)
  private RolePermissionEnum rolePermission;

  /**
   * The relevance of the permission&#39;s existence, or nonexistence, in the role to the overall determination for the entire policy.
   */
  @JsonAdapter(RolePermissionRelevanceEnum.Adapter.class)
  public enum RolePermissionRelevanceEnum {
    HEURISTIC_RELEVANCE_UNSPECIFIED("HEURISTIC_RELEVANCE_UNSPECIFIED"),
    
    NORMAL("NORMAL"),
    
    HIGH("HIGH");

    private String value;

    RolePermissionRelevanceEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RolePermissionRelevanceEnum fromValue(String value) {
      for (RolePermissionRelevanceEnum b : RolePermissionRelevanceEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RolePermissionRelevanceEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RolePermissionRelevanceEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RolePermissionRelevanceEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RolePermissionRelevanceEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RolePermissionRelevanceEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ROLE_PERMISSION_RELEVANCE = "rolePermissionRelevance";
  @SerializedName(SERIALIZED_NAME_ROLE_PERMISSION_RELEVANCE)
  private RolePermissionRelevanceEnum rolePermissionRelevance;

  public GoogleCloudPolicysimulatorV1alphaBindingExplanation() {
  }

  public GoogleCloudPolicysimulatorV1alphaBindingExplanation access(AccessEnum access) {
    this.access = access;
    return this;
  }

  /**
   * Required. Indicates whether _this binding_ provides the specified permission to the specified principal for the specified resource. This field does _not_ indicate whether the principal actually has the permission for the resource. There might be another binding that overrides this binding. To determine whether the principal actually has the permission, use the &#x60;access&#x60; field in the TroubleshootIamPolicyResponse.
   * @return access
   */
  @javax.annotation.Nullable
  public AccessEnum getAccess() {
    return access;
  }

  public void setAccess(AccessEnum access) {
    this.access = access;
  }


  public GoogleCloudPolicysimulatorV1alphaBindingExplanation condition(GoogleTypeExpr condition) {
    this.condition = condition;
    return this;
  }

  /**
   * Get condition
   * @return condition
   */
  @javax.annotation.Nullable
  public GoogleTypeExpr getCondition() {
    return condition;
  }

  public void setCondition(GoogleTypeExpr condition) {
    this.condition = condition;
  }


  public GoogleCloudPolicysimulatorV1alphaBindingExplanation memberships(Map<String, GoogleCloudPolicysimulatorV1alphaBindingExplanationAnnotatedMembership> memberships) {
    this.memberships = memberships;
    return this;
  }

  public GoogleCloudPolicysimulatorV1alphaBindingExplanation putMembershipsItem(String key, GoogleCloudPolicysimulatorV1alphaBindingExplanationAnnotatedMembership membershipsItem) {
    if (this.memberships == null) {
      this.memberships = new HashMap<>();
    }
    this.memberships.put(key, membershipsItem);
    return this;
  }

  /**
   * Indicates whether each principal in the binding includes the principal specified in the request, either directly or indirectly. Each key identifies a principal in the binding, and each value indicates whether the principal in the binding includes the principal in the request. For example, suppose that a binding includes the following principals: * &#x60;user:alice@example.com&#x60; * &#x60;group:product-eng@example.com&#x60; The principal in the replayed access tuple is &#x60;user:bob@example.com&#x60;. This user is a principal of the group &#x60;group:product-eng@example.com&#x60;. For the first principal in the binding, the key is &#x60;user:alice@example.com&#x60;, and the &#x60;membership&#x60; field in the value is set to &#x60;MEMBERSHIP_NOT_INCLUDED&#x60;. For the second principal in the binding, the key is &#x60;group:product-eng@example.com&#x60;, and the &#x60;membership&#x60; field in the value is set to &#x60;MEMBERSHIP_INCLUDED&#x60;.
   * @return memberships
   */
  @javax.annotation.Nullable
  public Map<String, GoogleCloudPolicysimulatorV1alphaBindingExplanationAnnotatedMembership> getMemberships() {
    return memberships;
  }

  public void setMemberships(Map<String, GoogleCloudPolicysimulatorV1alphaBindingExplanationAnnotatedMembership> memberships) {
    this.memberships = memberships;
  }


  public GoogleCloudPolicysimulatorV1alphaBindingExplanation relevance(RelevanceEnum relevance) {
    this.relevance = relevance;
    return this;
  }

  /**
   * The relevance of this binding to the overall determination for the entire policy.
   * @return relevance
   */
  @javax.annotation.Nullable
  public RelevanceEnum getRelevance() {
    return relevance;
  }

  public void setRelevance(RelevanceEnum relevance) {
    this.relevance = relevance;
  }


  public GoogleCloudPolicysimulatorV1alphaBindingExplanation role(String role) {
    this.role = role;
    return this;
  }

  /**
   * The role that this binding grants. For example, &#x60;roles/compute.serviceAgent&#x60;. For a complete list of predefined IAM roles, as well as the permissions in each role, see https://cloud.google.com/iam/help/roles/reference.
   * @return role
   */
  @javax.annotation.Nullable
  public String getRole() {
    return role;
  }

  public void setRole(String role) {
    this.role = role;
  }


  public GoogleCloudPolicysimulatorV1alphaBindingExplanation rolePermission(RolePermissionEnum rolePermission) {
    this.rolePermission = rolePermission;
    return this;
  }

  /**
   * Indicates whether the role granted by this binding contains the specified permission.
   * @return rolePermission
   */
  @javax.annotation.Nullable
  public RolePermissionEnum getRolePermission() {
    return rolePermission;
  }

  public void setRolePermission(RolePermissionEnum rolePermission) {
    this.rolePermission = rolePermission;
  }


  public GoogleCloudPolicysimulatorV1alphaBindingExplanation rolePermissionRelevance(RolePermissionRelevanceEnum rolePermissionRelevance) {
    this.rolePermissionRelevance = rolePermissionRelevance;
    return this;
  }

  /**
   * The relevance of the permission&#39;s existence, or nonexistence, in the role to the overall determination for the entire policy.
   * @return rolePermissionRelevance
   */
  @javax.annotation.Nullable
  public RolePermissionRelevanceEnum getRolePermissionRelevance() {
    return rolePermissionRelevance;
  }

  public void setRolePermissionRelevance(RolePermissionRelevanceEnum rolePermissionRelevance) {
    this.rolePermissionRelevance = rolePermissionRelevance;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudPolicysimulatorV1alphaBindingExplanation googleCloudPolicysimulatorV1alphaBindingExplanation = (GoogleCloudPolicysimulatorV1alphaBindingExplanation) o;
    return Objects.equals(this.access, googleCloudPolicysimulatorV1alphaBindingExplanation.access) &&
        Objects.equals(this.condition, googleCloudPolicysimulatorV1alphaBindingExplanation.condition) &&
        Objects.equals(this.memberships, googleCloudPolicysimulatorV1alphaBindingExplanation.memberships) &&
        Objects.equals(this.relevance, googleCloudPolicysimulatorV1alphaBindingExplanation.relevance) &&
        Objects.equals(this.role, googleCloudPolicysimulatorV1alphaBindingExplanation.role) &&
        Objects.equals(this.rolePermission, googleCloudPolicysimulatorV1alphaBindingExplanation.rolePermission) &&
        Objects.equals(this.rolePermissionRelevance, googleCloudPolicysimulatorV1alphaBindingExplanation.rolePermissionRelevance);
  }

  @Override
  public int hashCode() {
    return Objects.hash(access, condition, memberships, relevance, role, rolePermission, rolePermissionRelevance);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudPolicysimulatorV1alphaBindingExplanation {\n");
    sb.append("    access: ").append(toIndentedString(access)).append("\n");
    sb.append("    condition: ").append(toIndentedString(condition)).append("\n");
    sb.append("    memberships: ").append(toIndentedString(memberships)).append("\n");
    sb.append("    relevance: ").append(toIndentedString(relevance)).append("\n");
    sb.append("    role: ").append(toIndentedString(role)).append("\n");
    sb.append("    rolePermission: ").append(toIndentedString(rolePermission)).append("\n");
    sb.append("    rolePermissionRelevance: ").append(toIndentedString(rolePermissionRelevance)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("access");
    openapiFields.add("condition");
    openapiFields.add("memberships");
    openapiFields.add("relevance");
    openapiFields.add("role");
    openapiFields.add("rolePermission");
    openapiFields.add("rolePermissionRelevance");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudPolicysimulatorV1alphaBindingExplanation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudPolicysimulatorV1alphaBindingExplanation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudPolicysimulatorV1alphaBindingExplanation is not found in the empty JSON string", GoogleCloudPolicysimulatorV1alphaBindingExplanation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudPolicysimulatorV1alphaBindingExplanation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudPolicysimulatorV1alphaBindingExplanation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("access") != null && !jsonObj.get("access").isJsonNull()) && !jsonObj.get("access").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `access` to be a primitive type in the JSON string but got `%s`", jsonObj.get("access").toString()));
      }
      // validate the optional field `access`
      if (jsonObj.get("access") != null && !jsonObj.get("access").isJsonNull()) {
        AccessEnum.validateJsonElement(jsonObj.get("access"));
      }
      // validate the optional field `condition`
      if (jsonObj.get("condition") != null && !jsonObj.get("condition").isJsonNull()) {
        GoogleTypeExpr.validateJsonElement(jsonObj.get("condition"));
      }
      if ((jsonObj.get("relevance") != null && !jsonObj.get("relevance").isJsonNull()) && !jsonObj.get("relevance").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `relevance` to be a primitive type in the JSON string but got `%s`", jsonObj.get("relevance").toString()));
      }
      // validate the optional field `relevance`
      if (jsonObj.get("relevance") != null && !jsonObj.get("relevance").isJsonNull()) {
        RelevanceEnum.validateJsonElement(jsonObj.get("relevance"));
      }
      if ((jsonObj.get("role") != null && !jsonObj.get("role").isJsonNull()) && !jsonObj.get("role").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `role` to be a primitive type in the JSON string but got `%s`", jsonObj.get("role").toString()));
      }
      if ((jsonObj.get("rolePermission") != null && !jsonObj.get("rolePermission").isJsonNull()) && !jsonObj.get("rolePermission").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rolePermission` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rolePermission").toString()));
      }
      // validate the optional field `rolePermission`
      if (jsonObj.get("rolePermission") != null && !jsonObj.get("rolePermission").isJsonNull()) {
        RolePermissionEnum.validateJsonElement(jsonObj.get("rolePermission"));
      }
      if ((jsonObj.get("rolePermissionRelevance") != null && !jsonObj.get("rolePermissionRelevance").isJsonNull()) && !jsonObj.get("rolePermissionRelevance").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rolePermissionRelevance` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rolePermissionRelevance").toString()));
      }
      // validate the optional field `rolePermissionRelevance`
      if (jsonObj.get("rolePermissionRelevance") != null && !jsonObj.get("rolePermissionRelevance").isJsonNull()) {
        RolePermissionRelevanceEnum.validateJsonElement(jsonObj.get("rolePermissionRelevance"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudPolicysimulatorV1alphaBindingExplanation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudPolicysimulatorV1alphaBindingExplanation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudPolicysimulatorV1alphaBindingExplanation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudPolicysimulatorV1alphaBindingExplanation.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudPolicysimulatorV1alphaBindingExplanation>() {
           @Override
           public void write(JsonWriter out, GoogleCloudPolicysimulatorV1alphaBindingExplanation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudPolicysimulatorV1alphaBindingExplanation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudPolicysimulatorV1alphaBindingExplanation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudPolicysimulatorV1alphaBindingExplanation
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudPolicysimulatorV1alphaBindingExplanation
   */
  public static GoogleCloudPolicysimulatorV1alphaBindingExplanation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudPolicysimulatorV1alphaBindingExplanation.class);
  }

  /**
   * Convert an instance of GoogleCloudPolicysimulatorV1alphaBindingExplanation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

