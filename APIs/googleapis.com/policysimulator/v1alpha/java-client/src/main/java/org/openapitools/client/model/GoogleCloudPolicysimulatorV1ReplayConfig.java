/*
 * Policy Simulator API
 *  Policy Simulator is a collection of endpoints for creating, running, and viewing a Replay. A `Replay` is a type of simulation that lets you see how your members' access to resources might change if you changed your IAM policy. During a `Replay`, Policy Simulator re-evaluates, or replays, past access attempts under both the current policy and your proposed policy, and compares those results to determine how your members' access might change under the proposed policy.
 *
 * The version of the OpenAPI document: v1alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.GoogleIamV1Policy;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The configuration used for a Replay.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:16.080114-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudPolicysimulatorV1ReplayConfig {
  /**
   * The logs to use as input for the Replay.
   */
  @JsonAdapter(LogSourceEnum.Adapter.class)
  public enum LogSourceEnum {
    LOG_SOURCE_UNSPECIFIED("LOG_SOURCE_UNSPECIFIED"),
    
    RECENT_ACCESSES("RECENT_ACCESSES");

    private String value;

    LogSourceEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LogSourceEnum fromValue(String value) {
      for (LogSourceEnum b : LogSourceEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LogSourceEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LogSourceEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LogSourceEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LogSourceEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LogSourceEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LOG_SOURCE = "logSource";
  @SerializedName(SERIALIZED_NAME_LOG_SOURCE)
  private LogSourceEnum logSource;

  public static final String SERIALIZED_NAME_POLICY_OVERLAY = "policyOverlay";
  @SerializedName(SERIALIZED_NAME_POLICY_OVERLAY)
  private Map<String, GoogleIamV1Policy> policyOverlay = new HashMap<>();

  public GoogleCloudPolicysimulatorV1ReplayConfig() {
  }

  public GoogleCloudPolicysimulatorV1ReplayConfig logSource(LogSourceEnum logSource) {
    this.logSource = logSource;
    return this;
  }

  /**
   * The logs to use as input for the Replay.
   * @return logSource
   */
  @javax.annotation.Nullable
  public LogSourceEnum getLogSource() {
    return logSource;
  }

  public void setLogSource(LogSourceEnum logSource) {
    this.logSource = logSource;
  }


  public GoogleCloudPolicysimulatorV1ReplayConfig policyOverlay(Map<String, GoogleIamV1Policy> policyOverlay) {
    this.policyOverlay = policyOverlay;
    return this;
  }

  public GoogleCloudPolicysimulatorV1ReplayConfig putPolicyOverlayItem(String key, GoogleIamV1Policy policyOverlayItem) {
    if (this.policyOverlay == null) {
      this.policyOverlay = new HashMap<>();
    }
    this.policyOverlay.put(key, policyOverlayItem);
    return this;
  }

  /**
   * A mapping of the resources that you want to simulate policies for and the policies that you want to simulate. Keys are the full resource names for the resources. For example, &#x60;//cloudresourcemanager.googleapis.com/projects/my-project&#x60;. For examples of full resource names for Google Cloud services, see https://cloud.google.com/iam/help/troubleshooter/full-resource-names. Values are Policy objects representing the policies that you want to simulate. Replays automatically take into account any IAM policies inherited through the resource hierarchy, and any policies set on descendant resources. You do not need to include these policies in the policy overlay.
   * @return policyOverlay
   */
  @javax.annotation.Nullable
  public Map<String, GoogleIamV1Policy> getPolicyOverlay() {
    return policyOverlay;
  }

  public void setPolicyOverlay(Map<String, GoogleIamV1Policy> policyOverlay) {
    this.policyOverlay = policyOverlay;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudPolicysimulatorV1ReplayConfig googleCloudPolicysimulatorV1ReplayConfig = (GoogleCloudPolicysimulatorV1ReplayConfig) o;
    return Objects.equals(this.logSource, googleCloudPolicysimulatorV1ReplayConfig.logSource) &&
        Objects.equals(this.policyOverlay, googleCloudPolicysimulatorV1ReplayConfig.policyOverlay);
  }

  @Override
  public int hashCode() {
    return Objects.hash(logSource, policyOverlay);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudPolicysimulatorV1ReplayConfig {\n");
    sb.append("    logSource: ").append(toIndentedString(logSource)).append("\n");
    sb.append("    policyOverlay: ").append(toIndentedString(policyOverlay)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("logSource");
    openapiFields.add("policyOverlay");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudPolicysimulatorV1ReplayConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudPolicysimulatorV1ReplayConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudPolicysimulatorV1ReplayConfig is not found in the empty JSON string", GoogleCloudPolicysimulatorV1ReplayConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudPolicysimulatorV1ReplayConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudPolicysimulatorV1ReplayConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("logSource") != null && !jsonObj.get("logSource").isJsonNull()) && !jsonObj.get("logSource").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `logSource` to be a primitive type in the JSON string but got `%s`", jsonObj.get("logSource").toString()));
      }
      // validate the optional field `logSource`
      if (jsonObj.get("logSource") != null && !jsonObj.get("logSource").isJsonNull()) {
        LogSourceEnum.validateJsonElement(jsonObj.get("logSource"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudPolicysimulatorV1ReplayConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudPolicysimulatorV1ReplayConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudPolicysimulatorV1ReplayConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudPolicysimulatorV1ReplayConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudPolicysimulatorV1ReplayConfig>() {
           @Override
           public void write(JsonWriter out, GoogleCloudPolicysimulatorV1ReplayConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudPolicysimulatorV1ReplayConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudPolicysimulatorV1ReplayConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudPolicysimulatorV1ReplayConfig
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudPolicysimulatorV1ReplayConfig
   */
  public static GoogleCloudPolicysimulatorV1ReplayConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudPolicysimulatorV1ReplayConfig.class);
  }

  /**
   * Convert an instance of GoogleCloudPolicysimulatorV1ReplayConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

