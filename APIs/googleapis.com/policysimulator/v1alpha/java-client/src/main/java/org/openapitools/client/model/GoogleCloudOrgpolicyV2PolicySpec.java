/*
 * Policy Simulator API
 *  Policy Simulator is a collection of endpoints for creating, running, and viewing a Replay. A `Replay` is a type of simulation that lets you see how your members' access to resources might change if you changed your IAM policy. During a `Replay`, Policy Simulator re-evaluates, or replays, past access attempts under both the current policy and your proposed policy, and compares those results to determine how your members' access might change under the proposed policy.
 *
 * The version of the OpenAPI document: v1alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GoogleCloudOrgpolicyV2PolicySpecPolicyRule;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Defines a Google Cloud policy specification which is used to specify constraints for configurations of Google Cloud resources.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:16.080114-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudOrgpolicyV2PolicySpec {
  public static final String SERIALIZED_NAME_ETAG = "etag";
  @SerializedName(SERIALIZED_NAME_ETAG)
  private String etag;

  public static final String SERIALIZED_NAME_INHERIT_FROM_PARENT = "inheritFromParent";
  @SerializedName(SERIALIZED_NAME_INHERIT_FROM_PARENT)
  private Boolean inheritFromParent;

  public static final String SERIALIZED_NAME_RESET = "reset";
  @SerializedName(SERIALIZED_NAME_RESET)
  private Boolean reset;

  public static final String SERIALIZED_NAME_RULES = "rules";
  @SerializedName(SERIALIZED_NAME_RULES)
  private List<GoogleCloudOrgpolicyV2PolicySpecPolicyRule> rules = new ArrayList<>();

  public static final String SERIALIZED_NAME_UPDATE_TIME = "updateTime";
  @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
  private String updateTime;

  public GoogleCloudOrgpolicyV2PolicySpec() {
  }

  public GoogleCloudOrgpolicyV2PolicySpec(
     String updateTime
  ) {
    this();
    this.updateTime = updateTime;
  }

  public GoogleCloudOrgpolicyV2PolicySpec etag(String etag) {
    this.etag = etag;
    return this;
  }

  /**
   * An opaque tag indicating the current version of the policySpec, used for concurrency control. This field is ignored if used in a &#x60;CreatePolicy&#x60; request. When the policy is returned from either a &#x60;GetPolicy&#x60; or a &#x60;ListPolicies&#x60; request, this &#x60;etag&#x60; indicates the version of the current policySpec to use when executing a read-modify-write loop. When the policy is returned from a &#x60;GetEffectivePolicy&#x60; request, the &#x60;etag&#x60; will be unset.
   * @return etag
   */
  @javax.annotation.Nullable
  public String getEtag() {
    return etag;
  }

  public void setEtag(String etag) {
    this.etag = etag;
  }


  public GoogleCloudOrgpolicyV2PolicySpec inheritFromParent(Boolean inheritFromParent) {
    this.inheritFromParent = inheritFromParent;
    return this;
  }

  /**
   * Determines the inheritance behavior for this policy. If &#x60;inherit_from_parent&#x60; is true, policy rules set higher up in the hierarchy (up to the closest root) are inherited and present in the effective policy. If it is false, then no rules are inherited, and this policy becomes the new root for evaluation. This field can be set only for policies which configure list constraints.
   * @return inheritFromParent
   */
  @javax.annotation.Nullable
  public Boolean getInheritFromParent() {
    return inheritFromParent;
  }

  public void setInheritFromParent(Boolean inheritFromParent) {
    this.inheritFromParent = inheritFromParent;
  }


  public GoogleCloudOrgpolicyV2PolicySpec reset(Boolean reset) {
    this.reset = reset;
    return this;
  }

  /**
   * Ignores policies set above this resource and restores the &#x60;constraint_default&#x60; enforcement behavior of the specific constraint at this resource. This field can be set in policies for either list or boolean constraints. If set, &#x60;rules&#x60; must be empty and &#x60;inherit_from_parent&#x60; must be set to false.
   * @return reset
   */
  @javax.annotation.Nullable
  public Boolean getReset() {
    return reset;
  }

  public void setReset(Boolean reset) {
    this.reset = reset;
  }


  public GoogleCloudOrgpolicyV2PolicySpec rules(List<GoogleCloudOrgpolicyV2PolicySpecPolicyRule> rules) {
    this.rules = rules;
    return this;
  }

  public GoogleCloudOrgpolicyV2PolicySpec addRulesItem(GoogleCloudOrgpolicyV2PolicySpecPolicyRule rulesItem) {
    if (this.rules == null) {
      this.rules = new ArrayList<>();
    }
    this.rules.add(rulesItem);
    return this;
  }

  /**
   * In policies for boolean constraints, the following requirements apply: - There must be one and only one policy rule where condition is unset. - Boolean policy rules with conditions must set &#x60;enforced&#x60; to the opposite of the policy rule without a condition. - During policy evaluation, policy rules with conditions that are true for a target resource take precedence.
   * @return rules
   */
  @javax.annotation.Nullable
  public List<GoogleCloudOrgpolicyV2PolicySpecPolicyRule> getRules() {
    return rules;
  }

  public void setRules(List<GoogleCloudOrgpolicyV2PolicySpecPolicyRule> rules) {
    this.rules = rules;
  }


  /**
   * Output only. The time stamp this was previously updated. This represents the last time a call to &#x60;CreatePolicy&#x60; or &#x60;UpdatePolicy&#x60; was made for that policy.
   * @return updateTime
   */
  @javax.annotation.Nullable
  public String getUpdateTime() {
    return updateTime;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudOrgpolicyV2PolicySpec googleCloudOrgpolicyV2PolicySpec = (GoogleCloudOrgpolicyV2PolicySpec) o;
    return Objects.equals(this.etag, googleCloudOrgpolicyV2PolicySpec.etag) &&
        Objects.equals(this.inheritFromParent, googleCloudOrgpolicyV2PolicySpec.inheritFromParent) &&
        Objects.equals(this.reset, googleCloudOrgpolicyV2PolicySpec.reset) &&
        Objects.equals(this.rules, googleCloudOrgpolicyV2PolicySpec.rules) &&
        Objects.equals(this.updateTime, googleCloudOrgpolicyV2PolicySpec.updateTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(etag, inheritFromParent, reset, rules, updateTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudOrgpolicyV2PolicySpec {\n");
    sb.append("    etag: ").append(toIndentedString(etag)).append("\n");
    sb.append("    inheritFromParent: ").append(toIndentedString(inheritFromParent)).append("\n");
    sb.append("    reset: ").append(toIndentedString(reset)).append("\n");
    sb.append("    rules: ").append(toIndentedString(rules)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("etag");
    openapiFields.add("inheritFromParent");
    openapiFields.add("reset");
    openapiFields.add("rules");
    openapiFields.add("updateTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudOrgpolicyV2PolicySpec
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudOrgpolicyV2PolicySpec.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudOrgpolicyV2PolicySpec is not found in the empty JSON string", GoogleCloudOrgpolicyV2PolicySpec.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudOrgpolicyV2PolicySpec.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudOrgpolicyV2PolicySpec` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("etag") != null && !jsonObj.get("etag").isJsonNull()) && !jsonObj.get("etag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `etag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("etag").toString()));
      }
      if (jsonObj.get("rules") != null && !jsonObj.get("rules").isJsonNull()) {
        JsonArray jsonArrayrules = jsonObj.getAsJsonArray("rules");
        if (jsonArrayrules != null) {
          // ensure the json data is an array
          if (!jsonObj.get("rules").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `rules` to be an array in the JSON string but got `%s`", jsonObj.get("rules").toString()));
          }

          // validate the optional field `rules` (array)
          for (int i = 0; i < jsonArrayrules.size(); i++) {
            GoogleCloudOrgpolicyV2PolicySpecPolicyRule.validateJsonElement(jsonArrayrules.get(i));
          };
        }
      }
      if ((jsonObj.get("updateTime") != null && !jsonObj.get("updateTime").isJsonNull()) && !jsonObj.get("updateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updateTime").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudOrgpolicyV2PolicySpec.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudOrgpolicyV2PolicySpec' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudOrgpolicyV2PolicySpec> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudOrgpolicyV2PolicySpec.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudOrgpolicyV2PolicySpec>() {
           @Override
           public void write(JsonWriter out, GoogleCloudOrgpolicyV2PolicySpec value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudOrgpolicyV2PolicySpec read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudOrgpolicyV2PolicySpec given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudOrgpolicyV2PolicySpec
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudOrgpolicyV2PolicySpec
   */
  public static GoogleCloudOrgpolicyV2PolicySpec fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudOrgpolicyV2PolicySpec.class);
  }

  /**
   * Convert an instance of GoogleCloudOrgpolicyV2PolicySpec to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

