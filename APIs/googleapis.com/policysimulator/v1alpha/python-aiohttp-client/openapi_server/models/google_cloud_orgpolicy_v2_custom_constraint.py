# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleCloudOrgpolicyV2CustomConstraint(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action_type: str=None, condition: str=None, description: str=None, display_name: str=None, method_types: List[str]=None, name: str=None, resource_types: List[str]=None, update_time: str=None):
        """GoogleCloudOrgpolicyV2CustomConstraint - a model defined in OpenAPI

        :param action_type: The action_type of this GoogleCloudOrgpolicyV2CustomConstraint.
        :param condition: The condition of this GoogleCloudOrgpolicyV2CustomConstraint.
        :param description: The description of this GoogleCloudOrgpolicyV2CustomConstraint.
        :param display_name: The display_name of this GoogleCloudOrgpolicyV2CustomConstraint.
        :param method_types: The method_types of this GoogleCloudOrgpolicyV2CustomConstraint.
        :param name: The name of this GoogleCloudOrgpolicyV2CustomConstraint.
        :param resource_types: The resource_types of this GoogleCloudOrgpolicyV2CustomConstraint.
        :param update_time: The update_time of this GoogleCloudOrgpolicyV2CustomConstraint.
        """
        self.openapi_types = {
            'action_type': str,
            'condition': str,
            'description': str,
            'display_name': str,
            'method_types': List[str],
            'name': str,
            'resource_types': List[str],
            'update_time': str
        }

        self.attribute_map = {
            'action_type': 'actionType',
            'condition': 'condition',
            'description': 'description',
            'display_name': 'displayName',
            'method_types': 'methodTypes',
            'name': 'name',
            'resource_types': 'resourceTypes',
            'update_time': 'updateTime'
        }

        self._action_type = action_type
        self._condition = condition
        self._description = description
        self._display_name = display_name
        self._method_types = method_types
        self._name = name
        self._resource_types = resource_types
        self._update_time = update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudOrgpolicyV2CustomConstraint':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudOrgpolicyV2CustomConstraint of this GoogleCloudOrgpolicyV2CustomConstraint.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action_type(self):
        """Gets the action_type of this GoogleCloudOrgpolicyV2CustomConstraint.

        Allow or deny type.

        :return: The action_type of this GoogleCloudOrgpolicyV2CustomConstraint.
        :rtype: str
        """
        return self._action_type

    @action_type.setter
    def action_type(self, action_type):
        """Sets the action_type of this GoogleCloudOrgpolicyV2CustomConstraint.

        Allow or deny type.

        :param action_type: The action_type of this GoogleCloudOrgpolicyV2CustomConstraint.
        :type action_type: str
        """
        allowed_values = ["ACTION_TYPE_UNSPECIFIED", "ALLOW", "DENY"]  # noqa: E501
        if action_type not in allowed_values:
            raise ValueError(
                "Invalid value for `action_type` ({0}), must be one of {1}"
                .format(action_type, allowed_values)
            )

        self._action_type = action_type

    @property
    def condition(self):
        """Gets the condition of this GoogleCloudOrgpolicyV2CustomConstraint.

        Org policy condition/expression. For example: `resource.instanceName.matches(\"[production|test]_.*_(\\d)+\")` or, `resource.management.auto_upgrade == true` The max length of the condition is 1000 characters.

        :return: The condition of this GoogleCloudOrgpolicyV2CustomConstraint.
        :rtype: str
        """
        return self._condition

    @condition.setter
    def condition(self, condition):
        """Sets the condition of this GoogleCloudOrgpolicyV2CustomConstraint.

        Org policy condition/expression. For example: `resource.instanceName.matches(\"[production|test]_.*_(\\d)+\")` or, `resource.management.auto_upgrade == true` The max length of the condition is 1000 characters.

        :param condition: The condition of this GoogleCloudOrgpolicyV2CustomConstraint.
        :type condition: str
        """

        self._condition = condition

    @property
    def description(self):
        """Gets the description of this GoogleCloudOrgpolicyV2CustomConstraint.

        Detailed information about this custom policy constraint. The max length of the description is 2000 characters.

        :return: The description of this GoogleCloudOrgpolicyV2CustomConstraint.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this GoogleCloudOrgpolicyV2CustomConstraint.

        Detailed information about this custom policy constraint. The max length of the description is 2000 characters.

        :param description: The description of this GoogleCloudOrgpolicyV2CustomConstraint.
        :type description: str
        """

        self._description = description

    @property
    def display_name(self):
        """Gets the display_name of this GoogleCloudOrgpolicyV2CustomConstraint.

        One line display name for the UI. The max length of the display_name is 200 characters.

        :return: The display_name of this GoogleCloudOrgpolicyV2CustomConstraint.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this GoogleCloudOrgpolicyV2CustomConstraint.

        One line display name for the UI. The max length of the display_name is 200 characters.

        :param display_name: The display_name of this GoogleCloudOrgpolicyV2CustomConstraint.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def method_types(self):
        """Gets the method_types of this GoogleCloudOrgpolicyV2CustomConstraint.

        All the operations being applied for this constraint.

        :return: The method_types of this GoogleCloudOrgpolicyV2CustomConstraint.
        :rtype: List[str]
        """
        return self._method_types

    @method_types.setter
    def method_types(self, method_types):
        """Sets the method_types of this GoogleCloudOrgpolicyV2CustomConstraint.

        All the operations being applied for this constraint.

        :param method_types: The method_types of this GoogleCloudOrgpolicyV2CustomConstraint.
        :type method_types: List[str]
        """
        allowed_values = ["METHOD_TYPE_UNSPECIFIED", "CREATE", "UPDATE", "DELETE"]  # noqa: E501
        if not set(method_types).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `method_types` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(method_types) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._method_types = method_types

    @property
    def name(self):
        """Gets the name of this GoogleCloudOrgpolicyV2CustomConstraint.

        Immutable. Name of the constraint. This is unique within the organization. Format of the name should be * `organizations/{organization_id}/customConstraints/{custom_constraint_id}` Example: `organizations/123/customConstraints/custom.createOnlyE2TypeVms` The max length is 70 characters and the minimum length is 1. Note that the prefix `organizations/{organization_id}/customConstraints/` is not counted.

        :return: The name of this GoogleCloudOrgpolicyV2CustomConstraint.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GoogleCloudOrgpolicyV2CustomConstraint.

        Immutable. Name of the constraint. This is unique within the organization. Format of the name should be * `organizations/{organization_id}/customConstraints/{custom_constraint_id}` Example: `organizations/123/customConstraints/custom.createOnlyE2TypeVms` The max length is 70 characters and the minimum length is 1. Note that the prefix `organizations/{organization_id}/customConstraints/` is not counted.

        :param name: The name of this GoogleCloudOrgpolicyV2CustomConstraint.
        :type name: str
        """

        self._name = name

    @property
    def resource_types(self):
        """Gets the resource_types of this GoogleCloudOrgpolicyV2CustomConstraint.

        Immutable. The resource instance type on which this policy applies. Format will be of the form : `/` Example: * `compute.googleapis.com/Instance`.

        :return: The resource_types of this GoogleCloudOrgpolicyV2CustomConstraint.
        :rtype: List[str]
        """
        return self._resource_types

    @resource_types.setter
    def resource_types(self, resource_types):
        """Sets the resource_types of this GoogleCloudOrgpolicyV2CustomConstraint.

        Immutable. The resource instance type on which this policy applies. Format will be of the form : `/` Example: * `compute.googleapis.com/Instance`.

        :param resource_types: The resource_types of this GoogleCloudOrgpolicyV2CustomConstraint.
        :type resource_types: List[str]
        """

        self._resource_types = resource_types

    @property
    def update_time(self):
        """Gets the update_time of this GoogleCloudOrgpolicyV2CustomConstraint.

        Output only. The last time this custom constraint was updated. This represents the last time that the `CreateCustomConstraint` or `UpdateCustomConstraint` RPC was called

        :return: The update_time of this GoogleCloudOrgpolicyV2CustomConstraint.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this GoogleCloudOrgpolicyV2CustomConstraint.

        Output only. The last time this custom constraint was updated. This represents the last time that the `CreateCustomConstraint` or `UpdateCustomConstraint` RPC was called

        :param update_time: The update_time of this GoogleCloudOrgpolicyV2CustomConstraint.
        :type update_time: str
        """

        self._update_time = update_time
