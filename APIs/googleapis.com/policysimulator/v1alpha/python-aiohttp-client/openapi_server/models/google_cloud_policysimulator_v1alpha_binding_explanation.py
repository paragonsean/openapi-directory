# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_policysimulator_v1alpha_binding_explanation_annotated_membership import GoogleCloudPolicysimulatorV1alphaBindingExplanationAnnotatedMembership
from openapi_server.models.google_type_expr import GoogleTypeExpr
from openapi_server import util


class GoogleCloudPolicysimulatorV1alphaBindingExplanation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, access: str=None, condition: GoogleTypeExpr=None, memberships: Dict[str, GoogleCloudPolicysimulatorV1alphaBindingExplanationAnnotatedMembership]=None, relevance: str=None, role: str=None, role_permission: str=None, role_permission_relevance: str=None):
        """GoogleCloudPolicysimulatorV1alphaBindingExplanation - a model defined in OpenAPI

        :param access: The access of this GoogleCloudPolicysimulatorV1alphaBindingExplanation.
        :param condition: The condition of this GoogleCloudPolicysimulatorV1alphaBindingExplanation.
        :param memberships: The memberships of this GoogleCloudPolicysimulatorV1alphaBindingExplanation.
        :param relevance: The relevance of this GoogleCloudPolicysimulatorV1alphaBindingExplanation.
        :param role: The role of this GoogleCloudPolicysimulatorV1alphaBindingExplanation.
        :param role_permission: The role_permission of this GoogleCloudPolicysimulatorV1alphaBindingExplanation.
        :param role_permission_relevance: The role_permission_relevance of this GoogleCloudPolicysimulatorV1alphaBindingExplanation.
        """
        self.openapi_types = {
            'access': str,
            'condition': GoogleTypeExpr,
            'memberships': Dict[str, GoogleCloudPolicysimulatorV1alphaBindingExplanationAnnotatedMembership],
            'relevance': str,
            'role': str,
            'role_permission': str,
            'role_permission_relevance': str
        }

        self.attribute_map = {
            'access': 'access',
            'condition': 'condition',
            'memberships': 'memberships',
            'relevance': 'relevance',
            'role': 'role',
            'role_permission': 'rolePermission',
            'role_permission_relevance': 'rolePermissionRelevance'
        }

        self._access = access
        self._condition = condition
        self._memberships = memberships
        self._relevance = relevance
        self._role = role
        self._role_permission = role_permission
        self._role_permission_relevance = role_permission_relevance

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudPolicysimulatorV1alphaBindingExplanation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudPolicysimulatorV1alphaBindingExplanation of this GoogleCloudPolicysimulatorV1alphaBindingExplanation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def access(self):
        """Gets the access of this GoogleCloudPolicysimulatorV1alphaBindingExplanation.

        Required. Indicates whether _this binding_ provides the specified permission to the specified principal for the specified resource. This field does _not_ indicate whether the principal actually has the permission for the resource. There might be another binding that overrides this binding. To determine whether the principal actually has the permission, use the `access` field in the TroubleshootIamPolicyResponse.

        :return: The access of this GoogleCloudPolicysimulatorV1alphaBindingExplanation.
        :rtype: str
        """
        return self._access

    @access.setter
    def access(self, access):
        """Sets the access of this GoogleCloudPolicysimulatorV1alphaBindingExplanation.

        Required. Indicates whether _this binding_ provides the specified permission to the specified principal for the specified resource. This field does _not_ indicate whether the principal actually has the permission for the resource. There might be another binding that overrides this binding. To determine whether the principal actually has the permission, use the `access` field in the TroubleshootIamPolicyResponse.

        :param access: The access of this GoogleCloudPolicysimulatorV1alphaBindingExplanation.
        :type access: str
        """
        allowed_values = ["ACCESS_STATE_UNSPECIFIED", "GRANTED", "NOT_GRANTED", "UNKNOWN_CONDITIONAL", "UNKNOWN_INFO_DENIED"]  # noqa: E501
        if access not in allowed_values:
            raise ValueError(
                "Invalid value for `access` ({0}), must be one of {1}"
                .format(access, allowed_values)
            )

        self._access = access

    @property
    def condition(self):
        """Gets the condition of this GoogleCloudPolicysimulatorV1alphaBindingExplanation.


        :return: The condition of this GoogleCloudPolicysimulatorV1alphaBindingExplanation.
        :rtype: GoogleTypeExpr
        """
        return self._condition

    @condition.setter
    def condition(self, condition):
        """Sets the condition of this GoogleCloudPolicysimulatorV1alphaBindingExplanation.


        :param condition: The condition of this GoogleCloudPolicysimulatorV1alphaBindingExplanation.
        :type condition: GoogleTypeExpr
        """

        self._condition = condition

    @property
    def memberships(self):
        """Gets the memberships of this GoogleCloudPolicysimulatorV1alphaBindingExplanation.

        Indicates whether each principal in the binding includes the principal specified in the request, either directly or indirectly. Each key identifies a principal in the binding, and each value indicates whether the principal in the binding includes the principal in the request. For example, suppose that a binding includes the following principals: * `user:alice@example.com` * `group:product-eng@example.com` The principal in the replayed access tuple is `user:bob@example.com`. This user is a principal of the group `group:product-eng@example.com`. For the first principal in the binding, the key is `user:alice@example.com`, and the `membership` field in the value is set to `MEMBERSHIP_NOT_INCLUDED`. For the second principal in the binding, the key is `group:product-eng@example.com`, and the `membership` field in the value is set to `MEMBERSHIP_INCLUDED`.

        :return: The memberships of this GoogleCloudPolicysimulatorV1alphaBindingExplanation.
        :rtype: Dict[str, GoogleCloudPolicysimulatorV1alphaBindingExplanationAnnotatedMembership]
        """
        return self._memberships

    @memberships.setter
    def memberships(self, memberships):
        """Sets the memberships of this GoogleCloudPolicysimulatorV1alphaBindingExplanation.

        Indicates whether each principal in the binding includes the principal specified in the request, either directly or indirectly. Each key identifies a principal in the binding, and each value indicates whether the principal in the binding includes the principal in the request. For example, suppose that a binding includes the following principals: * `user:alice@example.com` * `group:product-eng@example.com` The principal in the replayed access tuple is `user:bob@example.com`. This user is a principal of the group `group:product-eng@example.com`. For the first principal in the binding, the key is `user:alice@example.com`, and the `membership` field in the value is set to `MEMBERSHIP_NOT_INCLUDED`. For the second principal in the binding, the key is `group:product-eng@example.com`, and the `membership` field in the value is set to `MEMBERSHIP_INCLUDED`.

        :param memberships: The memberships of this GoogleCloudPolicysimulatorV1alphaBindingExplanation.
        :type memberships: Dict[str, GoogleCloudPolicysimulatorV1alphaBindingExplanationAnnotatedMembership]
        """

        self._memberships = memberships

    @property
    def relevance(self):
        """Gets the relevance of this GoogleCloudPolicysimulatorV1alphaBindingExplanation.

        The relevance of this binding to the overall determination for the entire policy.

        :return: The relevance of this GoogleCloudPolicysimulatorV1alphaBindingExplanation.
        :rtype: str
        """
        return self._relevance

    @relevance.setter
    def relevance(self, relevance):
        """Sets the relevance of this GoogleCloudPolicysimulatorV1alphaBindingExplanation.

        The relevance of this binding to the overall determination for the entire policy.

        :param relevance: The relevance of this GoogleCloudPolicysimulatorV1alphaBindingExplanation.
        :type relevance: str
        """
        allowed_values = ["HEURISTIC_RELEVANCE_UNSPECIFIED", "NORMAL", "HIGH"]  # noqa: E501
        if relevance not in allowed_values:
            raise ValueError(
                "Invalid value for `relevance` ({0}), must be one of {1}"
                .format(relevance, allowed_values)
            )

        self._relevance = relevance

    @property
    def role(self):
        """Gets the role of this GoogleCloudPolicysimulatorV1alphaBindingExplanation.

        The role that this binding grants. For example, `roles/compute.serviceAgent`. For a complete list of predefined IAM roles, as well as the permissions in each role, see https://cloud.google.com/iam/help/roles/reference.

        :return: The role of this GoogleCloudPolicysimulatorV1alphaBindingExplanation.
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this GoogleCloudPolicysimulatorV1alphaBindingExplanation.

        The role that this binding grants. For example, `roles/compute.serviceAgent`. For a complete list of predefined IAM roles, as well as the permissions in each role, see https://cloud.google.com/iam/help/roles/reference.

        :param role: The role of this GoogleCloudPolicysimulatorV1alphaBindingExplanation.
        :type role: str
        """

        self._role = role

    @property
    def role_permission(self):
        """Gets the role_permission of this GoogleCloudPolicysimulatorV1alphaBindingExplanation.

        Indicates whether the role granted by this binding contains the specified permission.

        :return: The role_permission of this GoogleCloudPolicysimulatorV1alphaBindingExplanation.
        :rtype: str
        """
        return self._role_permission

    @role_permission.setter
    def role_permission(self, role_permission):
        """Sets the role_permission of this GoogleCloudPolicysimulatorV1alphaBindingExplanation.

        Indicates whether the role granted by this binding contains the specified permission.

        :param role_permission: The role_permission of this GoogleCloudPolicysimulatorV1alphaBindingExplanation.
        :type role_permission: str
        """
        allowed_values = ["ROLE_PERMISSION_UNSPECIFIED", "ROLE_PERMISSION_INCLUDED", "ROLE_PERMISSION_NOT_INCLUDED", "ROLE_PERMISSION_UNKNOWN_INFO_DENIED"]  # noqa: E501
        if role_permission not in allowed_values:
            raise ValueError(
                "Invalid value for `role_permission` ({0}), must be one of {1}"
                .format(role_permission, allowed_values)
            )

        self._role_permission = role_permission

    @property
    def role_permission_relevance(self):
        """Gets the role_permission_relevance of this GoogleCloudPolicysimulatorV1alphaBindingExplanation.

        The relevance of the permission's existence, or nonexistence, in the role to the overall determination for the entire policy.

        :return: The role_permission_relevance of this GoogleCloudPolicysimulatorV1alphaBindingExplanation.
        :rtype: str
        """
        return self._role_permission_relevance

    @role_permission_relevance.setter
    def role_permission_relevance(self, role_permission_relevance):
        """Sets the role_permission_relevance of this GoogleCloudPolicysimulatorV1alphaBindingExplanation.

        The relevance of the permission's existence, or nonexistence, in the role to the overall determination for the entire policy.

        :param role_permission_relevance: The role_permission_relevance of this GoogleCloudPolicysimulatorV1alphaBindingExplanation.
        :type role_permission_relevance: str
        """
        allowed_values = ["HEURISTIC_RELEVANCE_UNSPECIFIED", "NORMAL", "HIGH"]  # noqa: E501
        if role_permission_relevance not in allowed_values:
            raise ValueError(
                "Invalid value for `role_permission_relevance` ({0}), must be one of {1}"
                .format(role_permission_relevance, allowed_values)
            )

        self._role_permission_relevance = role_permission_relevance
