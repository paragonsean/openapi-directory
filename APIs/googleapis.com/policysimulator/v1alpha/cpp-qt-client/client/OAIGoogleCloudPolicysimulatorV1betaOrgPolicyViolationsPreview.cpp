/**
 * Policy Simulator API
 *  Policy Simulator is a collection of endpoints for creating, running, and viewing a Replay. A `Replay` is a type of simulation that lets you see how your members' access to resources might change if you changed your IAM policy. During a `Replay`, Policy Simulator re-evaluates, or replays, past access attempts under both the current policy and your proposed policy, and compares those results to determine how your members' access might change under the proposed policy.
 *
 * The version of the OpenAPI document: v1alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreview.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreview::OAIGoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreview(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreview::OAIGoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreview() {
    this->initializeModel();
}

OAIGoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreview::~OAIGoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreview() {}

void OAIGoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreview::initializeModel() {

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_custom_constraints_isSet = false;
    m_custom_constraints_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_overlay_isSet = false;
    m_overlay_isValid = false;

    m_resource_counts_isSet = false;
    m_resource_counts_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_violations_count_isSet = false;
    m_violations_count_isValid = false;
}

void OAIGoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreview::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreview::fromJsonObject(QJsonObject json) {

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_custom_constraints_isValid = ::OpenAPI::fromJsonValue(m_custom_constraints, json[QString("customConstraints")]);
    m_custom_constraints_isSet = !json[QString("customConstraints")].isNull() && m_custom_constraints_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_overlay_isValid = ::OpenAPI::fromJsonValue(m_overlay, json[QString("overlay")]);
    m_overlay_isSet = !json[QString("overlay")].isNull() && m_overlay_isValid;

    m_resource_counts_isValid = ::OpenAPI::fromJsonValue(m_resource_counts, json[QString("resourceCounts")]);
    m_resource_counts_isSet = !json[QString("resourceCounts")].isNull() && m_resource_counts_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_violations_count_isValid = ::OpenAPI::fromJsonValue(m_violations_count, json[QString("violationsCount")]);
    m_violations_count_isSet = !json[QString("violationsCount")].isNull() && m_violations_count_isValid;
}

QString OAIGoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreview::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreview::asJsonObject() const {
    QJsonObject obj;
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_custom_constraints.size() > 0) {
        obj.insert(QString("customConstraints"), ::OpenAPI::toJsonValue(m_custom_constraints));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_overlay.isSet()) {
        obj.insert(QString("overlay"), ::OpenAPI::toJsonValue(m_overlay));
    }
    if (m_resource_counts.isSet()) {
        obj.insert(QString("resourceCounts"), ::OpenAPI::toJsonValue(m_resource_counts));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_violations_count_isSet) {
        obj.insert(QString("violationsCount"), ::OpenAPI::toJsonValue(m_violations_count));
    }
    return obj;
}

QString OAIGoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreview::getCreateTime() const {
    return m_create_time;
}
void OAIGoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreview::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIGoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreview::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIGoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreview::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QList<QString> OAIGoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreview::getCustomConstraints() const {
    return m_custom_constraints;
}
void OAIGoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreview::setCustomConstraints(const QList<QString> &custom_constraints) {
    m_custom_constraints = custom_constraints;
    m_custom_constraints_isSet = true;
}

bool OAIGoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreview::is_custom_constraints_Set() const{
    return m_custom_constraints_isSet;
}

bool OAIGoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreview::is_custom_constraints_Valid() const{
    return m_custom_constraints_isValid;
}

QString OAIGoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreview::getName() const {
    return m_name;
}
void OAIGoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreview::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreview::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreview::is_name_Valid() const{
    return m_name_isValid;
}

OAIGoogleCloudPolicysimulatorV1betaOrgPolicyOverlay OAIGoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreview::getOverlay() const {
    return m_overlay;
}
void OAIGoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreview::setOverlay(const OAIGoogleCloudPolicysimulatorV1betaOrgPolicyOverlay &overlay) {
    m_overlay = overlay;
    m_overlay_isSet = true;
}

bool OAIGoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreview::is_overlay_Set() const{
    return m_overlay_isSet;
}

bool OAIGoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreview::is_overlay_Valid() const{
    return m_overlay_isValid;
}

OAIGoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreviewResourceCounts OAIGoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreview::getResourceCounts() const {
    return m_resource_counts;
}
void OAIGoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreview::setResourceCounts(const OAIGoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreviewResourceCounts &resource_counts) {
    m_resource_counts = resource_counts;
    m_resource_counts_isSet = true;
}

bool OAIGoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreview::is_resource_counts_Set() const{
    return m_resource_counts_isSet;
}

bool OAIGoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreview::is_resource_counts_Valid() const{
    return m_resource_counts_isValid;
}

QString OAIGoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreview::getState() const {
    return m_state;
}
void OAIGoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreview::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIGoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreview::is_state_Set() const{
    return m_state_isSet;
}

bool OAIGoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreview::is_state_Valid() const{
    return m_state_isValid;
}

qint32 OAIGoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreview::getViolationsCount() const {
    return m_violations_count;
}
void OAIGoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreview::setViolationsCount(const qint32 &violations_count) {
    m_violations_count = violations_count;
    m_violations_count_isSet = true;
}

bool OAIGoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreview::is_violations_count_Set() const{
    return m_violations_count_isSet;
}

bool OAIGoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreview::is_violations_count_Valid() const{
    return m_violations_count_isValid;
}

bool OAIGoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreview::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_constraints.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_overlay.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_counts.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_violations_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreview::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
