/**
 * Policy Simulator API
 *  Policy Simulator is a collection of endpoints for creating, running, and viewing a Replay. A `Replay` is a type of simulation that lets you see how your members' access to resources might change if you changed your IAM policy. During a `Replay`, Policy Simulator re-evaluates, or replays, past access attempts under both the current policy and your proposed policy, and compares those results to determine how your members' access might change under the proposed policy.
 *
 * The version of the OpenAPI document: v1alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIOrganizationsApi_H
#define OAI_OAIOrganizationsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIGoogleCloudPolicysimulatorV1alphaListOrgPolicyViolationsPreviewsResponse.h"
#include "OAIGoogleCloudPolicysimulatorV1alphaListOrgPolicyViolationsResponse.h"
#include "OAIGoogleCloudPolicysimulatorV1alphaOrgPolicyViolationsPreview.h"
#include "OAIGoogleLongrunningOperation.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIOrganizationsApi : public QObject {
    Q_OBJECT

public:
    OAIOrganizationsApi(const int timeOut = 0);
    ~OAIOrganizationsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  org_policy_violations_preview_id QString [optional]
    * @param[in]  oai_google_cloud_policysimulator_v1alpha_org_policy_violations_preview OAIGoogleCloudPolicysimulatorV1alphaOrgPolicyViolationsPreview [optional]
    */
    virtual void policysimulator_organizations_locations_orgPolicyViolationsPreviews_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &org_policy_violations_preview_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudPolicysimulatorV1alphaOrgPolicyViolationsPreview> &oai_google_cloud_policysimulator_v1alpha_org_policy_violations_preview = ::OpenAPI::OptionalParam<OAIGoogleCloudPolicysimulatorV1alphaOrgPolicyViolationsPreview>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_policysimulator_v1alpha_org_policy_violations_preview OAIGoogleCloudPolicysimulatorV1alphaOrgPolicyViolationsPreview [optional]
    */
    virtual void policysimulator_organizations_locations_orgPolicyViolationsPreviews_generate(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudPolicysimulatorV1alphaOrgPolicyViolationsPreview> &oai_google_cloud_policysimulator_v1alpha_org_policy_violations_preview = ::OpenAPI::OptionalParam<OAIGoogleCloudPolicysimulatorV1alphaOrgPolicyViolationsPreview>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void policysimulator_organizations_locations_orgPolicyViolationsPreviews_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void policysimulator_organizations_locations_orgPolicyViolationsPreviews_orgPolicyViolations_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void policysimulator_organizations_locations_orgPolicyViolationsPreviews_createCallback(OAIHttpRequestWorker *worker);
    void policysimulator_organizations_locations_orgPolicyViolationsPreviews_generateCallback(OAIHttpRequestWorker *worker);
    void policysimulator_organizations_locations_orgPolicyViolationsPreviews_listCallback(OAIHttpRequestWorker *worker);
    void policysimulator_organizations_locations_orgPolicyViolationsPreviews_orgPolicyViolations_listCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void policysimulator_organizations_locations_orgPolicyViolationsPreviews_createSignal(OAIGoogleLongrunningOperation summary);
    void policysimulator_organizations_locations_orgPolicyViolationsPreviews_generateSignal(OAIGoogleLongrunningOperation summary);
    void policysimulator_organizations_locations_orgPolicyViolationsPreviews_listSignal(OAIGoogleCloudPolicysimulatorV1alphaListOrgPolicyViolationsPreviewsResponse summary);
    void policysimulator_organizations_locations_orgPolicyViolationsPreviews_orgPolicyViolations_listSignal(OAIGoogleCloudPolicysimulatorV1alphaListOrgPolicyViolationsResponse summary);


    void policysimulator_organizations_locations_orgPolicyViolationsPreviews_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void policysimulator_organizations_locations_orgPolicyViolationsPreviews_generateSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void policysimulator_organizations_locations_orgPolicyViolationsPreviews_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudPolicysimulatorV1alphaListOrgPolicyViolationsPreviewsResponse summary);
    void policysimulator_organizations_locations_orgPolicyViolationsPreviews_orgPolicyViolations_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudPolicysimulatorV1alphaListOrgPolicyViolationsResponse summary);

    Q_DECL_DEPRECATED_X("Use policysimulator_organizations_locations_orgPolicyViolationsPreviews_createSignalError() instead")
    void policysimulator_organizations_locations_orgPolicyViolationsPreviews_createSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void policysimulator_organizations_locations_orgPolicyViolationsPreviews_createSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use policysimulator_organizations_locations_orgPolicyViolationsPreviews_generateSignalError() instead")
    void policysimulator_organizations_locations_orgPolicyViolationsPreviews_generateSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void policysimulator_organizations_locations_orgPolicyViolationsPreviews_generateSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use policysimulator_organizations_locations_orgPolicyViolationsPreviews_listSignalError() instead")
    void policysimulator_organizations_locations_orgPolicyViolationsPreviews_listSignalE(OAIGoogleCloudPolicysimulatorV1alphaListOrgPolicyViolationsPreviewsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void policysimulator_organizations_locations_orgPolicyViolationsPreviews_listSignalError(OAIGoogleCloudPolicysimulatorV1alphaListOrgPolicyViolationsPreviewsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use policysimulator_organizations_locations_orgPolicyViolationsPreviews_orgPolicyViolations_listSignalError() instead")
    void policysimulator_organizations_locations_orgPolicyViolationsPreviews_orgPolicyViolations_listSignalE(OAIGoogleCloudPolicysimulatorV1alphaListOrgPolicyViolationsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void policysimulator_organizations_locations_orgPolicyViolationsPreviews_orgPolicyViolations_listSignalError(OAIGoogleCloudPolicysimulatorV1alphaListOrgPolicyViolationsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use policysimulator_organizations_locations_orgPolicyViolationsPreviews_createSignalErrorFull() instead")
    void policysimulator_organizations_locations_orgPolicyViolationsPreviews_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void policysimulator_organizations_locations_orgPolicyViolationsPreviews_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use policysimulator_organizations_locations_orgPolicyViolationsPreviews_generateSignalErrorFull() instead")
    void policysimulator_organizations_locations_orgPolicyViolationsPreviews_generateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void policysimulator_organizations_locations_orgPolicyViolationsPreviews_generateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use policysimulator_organizations_locations_orgPolicyViolationsPreviews_listSignalErrorFull() instead")
    void policysimulator_organizations_locations_orgPolicyViolationsPreviews_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void policysimulator_organizations_locations_orgPolicyViolationsPreviews_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use policysimulator_organizations_locations_orgPolicyViolationsPreviews_orgPolicyViolations_listSignalErrorFull() instead")
    void policysimulator_organizations_locations_orgPolicyViolationsPreviews_orgPolicyViolations_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void policysimulator_organizations_locations_orgPolicyViolationsPreviews_orgPolicyViolations_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
