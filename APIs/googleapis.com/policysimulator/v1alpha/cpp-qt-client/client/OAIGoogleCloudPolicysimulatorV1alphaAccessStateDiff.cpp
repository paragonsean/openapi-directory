/**
 * Policy Simulator API
 *  Policy Simulator is a collection of endpoints for creating, running, and viewing a Replay. A `Replay` is a type of simulation that lets you see how your members' access to resources might change if you changed your IAM policy. During a `Replay`, Policy Simulator re-evaluates, or replays, past access attempts under both the current policy and your proposed policy, and compares those results to determine how your members' access might change under the proposed policy.
 *
 * The version of the OpenAPI document: v1alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudPolicysimulatorV1alphaAccessStateDiff.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudPolicysimulatorV1alphaAccessStateDiff::OAIGoogleCloudPolicysimulatorV1alphaAccessStateDiff(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudPolicysimulatorV1alphaAccessStateDiff::OAIGoogleCloudPolicysimulatorV1alphaAccessStateDiff() {
    this->initializeModel();
}

OAIGoogleCloudPolicysimulatorV1alphaAccessStateDiff::~OAIGoogleCloudPolicysimulatorV1alphaAccessStateDiff() {}

void OAIGoogleCloudPolicysimulatorV1alphaAccessStateDiff::initializeModel() {

    m_access_change_isSet = false;
    m_access_change_isValid = false;

    m_baseline_isSet = false;
    m_baseline_isValid = false;

    m_simulated_isSet = false;
    m_simulated_isValid = false;
}

void OAIGoogleCloudPolicysimulatorV1alphaAccessStateDiff::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudPolicysimulatorV1alphaAccessStateDiff::fromJsonObject(QJsonObject json) {

    m_access_change_isValid = ::OpenAPI::fromJsonValue(m_access_change, json[QString("accessChange")]);
    m_access_change_isSet = !json[QString("accessChange")].isNull() && m_access_change_isValid;

    m_baseline_isValid = ::OpenAPI::fromJsonValue(m_baseline, json[QString("baseline")]);
    m_baseline_isSet = !json[QString("baseline")].isNull() && m_baseline_isValid;

    m_simulated_isValid = ::OpenAPI::fromJsonValue(m_simulated, json[QString("simulated")]);
    m_simulated_isSet = !json[QString("simulated")].isNull() && m_simulated_isValid;
}

QString OAIGoogleCloudPolicysimulatorV1alphaAccessStateDiff::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudPolicysimulatorV1alphaAccessStateDiff::asJsonObject() const {
    QJsonObject obj;
    if (m_access_change_isSet) {
        obj.insert(QString("accessChange"), ::OpenAPI::toJsonValue(m_access_change));
    }
    if (m_baseline.isSet()) {
        obj.insert(QString("baseline"), ::OpenAPI::toJsonValue(m_baseline));
    }
    if (m_simulated.isSet()) {
        obj.insert(QString("simulated"), ::OpenAPI::toJsonValue(m_simulated));
    }
    return obj;
}

QString OAIGoogleCloudPolicysimulatorV1alphaAccessStateDiff::getAccessChange() const {
    return m_access_change;
}
void OAIGoogleCloudPolicysimulatorV1alphaAccessStateDiff::setAccessChange(const QString &access_change) {
    m_access_change = access_change;
    m_access_change_isSet = true;
}

bool OAIGoogleCloudPolicysimulatorV1alphaAccessStateDiff::is_access_change_Set() const{
    return m_access_change_isSet;
}

bool OAIGoogleCloudPolicysimulatorV1alphaAccessStateDiff::is_access_change_Valid() const{
    return m_access_change_isValid;
}

OAIGoogleCloudPolicysimulatorV1alphaExplainedAccess OAIGoogleCloudPolicysimulatorV1alphaAccessStateDiff::getBaseline() const {
    return m_baseline;
}
void OAIGoogleCloudPolicysimulatorV1alphaAccessStateDiff::setBaseline(const OAIGoogleCloudPolicysimulatorV1alphaExplainedAccess &baseline) {
    m_baseline = baseline;
    m_baseline_isSet = true;
}

bool OAIGoogleCloudPolicysimulatorV1alphaAccessStateDiff::is_baseline_Set() const{
    return m_baseline_isSet;
}

bool OAIGoogleCloudPolicysimulatorV1alphaAccessStateDiff::is_baseline_Valid() const{
    return m_baseline_isValid;
}

OAIGoogleCloudPolicysimulatorV1alphaExplainedAccess OAIGoogleCloudPolicysimulatorV1alphaAccessStateDiff::getSimulated() const {
    return m_simulated;
}
void OAIGoogleCloudPolicysimulatorV1alphaAccessStateDiff::setSimulated(const OAIGoogleCloudPolicysimulatorV1alphaExplainedAccess &simulated) {
    m_simulated = simulated;
    m_simulated_isSet = true;
}

bool OAIGoogleCloudPolicysimulatorV1alphaAccessStateDiff::is_simulated_Set() const{
    return m_simulated_isSet;
}

bool OAIGoogleCloudPolicysimulatorV1alphaAccessStateDiff::is_simulated_Valid() const{
    return m_simulated_isValid;
}

bool OAIGoogleCloudPolicysimulatorV1alphaAccessStateDiff::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_access_change_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_baseline.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_simulated.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudPolicysimulatorV1alphaAccessStateDiff::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
