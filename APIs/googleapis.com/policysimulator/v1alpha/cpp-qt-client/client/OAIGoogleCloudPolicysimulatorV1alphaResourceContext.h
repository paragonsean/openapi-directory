/**
 * Policy Simulator API
 *  Policy Simulator is a collection of endpoints for creating, running, and viewing a Replay. A `Replay` is a type of simulation that lets you see how your members' access to resources might change if you changed your IAM policy. During a `Replay`, Policy Simulator re-evaluates, or replays, past access attempts under both the current policy and your proposed policy, and compares those results to determine how your members' access might change under the proposed policy.
 *
 * The version of the OpenAPI document: v1alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGoogleCloudPolicysimulatorV1alphaResourceContext.h
 *
 * ResourceContext provides the context we know about a resource. It is similar in concept to google.cloud.asset.v1.Resource, but focuses on the information specifically used by Simulator.
 */

#ifndef OAIGoogleCloudPolicysimulatorV1alphaResourceContext_H
#define OAIGoogleCloudPolicysimulatorV1alphaResourceContext_H

#include <QJsonObject>

#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIGoogleCloudPolicysimulatorV1alphaResourceContext : public OAIObject {
public:
    OAIGoogleCloudPolicysimulatorV1alphaResourceContext();
    OAIGoogleCloudPolicysimulatorV1alphaResourceContext(QString json);
    ~OAIGoogleCloudPolicysimulatorV1alphaResourceContext() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<QString> getAncestors() const;
    void setAncestors(const QList<QString> &ancestors);
    bool is_ancestors_Set() const;
    bool is_ancestors_Valid() const;

    QString getAssetType() const;
    void setAssetType(const QString &asset_type);
    bool is_asset_type_Set() const;
    bool is_asset_type_Valid() const;

    QString getResource() const;
    void setResource(const QString &resource);
    bool is_resource_Set() const;
    bool is_resource_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<QString> m_ancestors;
    bool m_ancestors_isSet;
    bool m_ancestors_isValid;

    QString m_asset_type;
    bool m_asset_type_isSet;
    bool m_asset_type_isValid;

    QString m_resource;
    bool m_resource_isSet;
    bool m_resource_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGoogleCloudPolicysimulatorV1alphaResourceContext)

#endif // OAIGoogleCloudPolicysimulatorV1alphaResourceContext_H
