/**
 * Policy Simulator API
 *  Policy Simulator is a collection of endpoints for creating, running, and viewing a Replay. A `Replay` is a type of simulation that lets you see how your members' access to resources might change if you changed your IAM policy. During a `Replay`, Policy Simulator re-evaluates, or replays, past access attempts under both the current policy and your proposed policy, and compares those results to determine how your members' access might change under the proposed policy.
 *
 * The version of the OpenAPI document: v1alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudOrgpolicyV2Policy.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudOrgpolicyV2Policy::OAIGoogleCloudOrgpolicyV2Policy(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudOrgpolicyV2Policy::OAIGoogleCloudOrgpolicyV2Policy() {
    this->initializeModel();
}

OAIGoogleCloudOrgpolicyV2Policy::~OAIGoogleCloudOrgpolicyV2Policy() {}

void OAIGoogleCloudOrgpolicyV2Policy::initializeModel() {

    m_alternate_isSet = false;
    m_alternate_isValid = false;

    m_dry_run_spec_isSet = false;
    m_dry_run_spec_isValid = false;

    m_etag_isSet = false;
    m_etag_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_spec_isSet = false;
    m_spec_isValid = false;
}

void OAIGoogleCloudOrgpolicyV2Policy::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudOrgpolicyV2Policy::fromJsonObject(QJsonObject json) {

    m_alternate_isValid = ::OpenAPI::fromJsonValue(m_alternate, json[QString("alternate")]);
    m_alternate_isSet = !json[QString("alternate")].isNull() && m_alternate_isValid;

    m_dry_run_spec_isValid = ::OpenAPI::fromJsonValue(m_dry_run_spec, json[QString("dryRunSpec")]);
    m_dry_run_spec_isSet = !json[QString("dryRunSpec")].isNull() && m_dry_run_spec_isValid;

    m_etag_isValid = ::OpenAPI::fromJsonValue(m_etag, json[QString("etag")]);
    m_etag_isSet = !json[QString("etag")].isNull() && m_etag_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_spec_isValid = ::OpenAPI::fromJsonValue(m_spec, json[QString("spec")]);
    m_spec_isSet = !json[QString("spec")].isNull() && m_spec_isValid;
}

QString OAIGoogleCloudOrgpolicyV2Policy::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudOrgpolicyV2Policy::asJsonObject() const {
    QJsonObject obj;
    if (m_alternate.isSet()) {
        obj.insert(QString("alternate"), ::OpenAPI::toJsonValue(m_alternate));
    }
    if (m_dry_run_spec.isSet()) {
        obj.insert(QString("dryRunSpec"), ::OpenAPI::toJsonValue(m_dry_run_spec));
    }
    if (m_etag_isSet) {
        obj.insert(QString("etag"), ::OpenAPI::toJsonValue(m_etag));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_spec.isSet()) {
        obj.insert(QString("spec"), ::OpenAPI::toJsonValue(m_spec));
    }
    return obj;
}

OAIGoogleCloudOrgpolicyV2AlternatePolicySpec OAIGoogleCloudOrgpolicyV2Policy::getAlternate() const {
    return m_alternate;
}
void OAIGoogleCloudOrgpolicyV2Policy::setAlternate(const OAIGoogleCloudOrgpolicyV2AlternatePolicySpec &alternate) {
    m_alternate = alternate;
    m_alternate_isSet = true;
}

bool OAIGoogleCloudOrgpolicyV2Policy::is_alternate_Set() const{
    return m_alternate_isSet;
}

bool OAIGoogleCloudOrgpolicyV2Policy::is_alternate_Valid() const{
    return m_alternate_isValid;
}

OAIGoogleCloudOrgpolicyV2PolicySpec OAIGoogleCloudOrgpolicyV2Policy::getDryRunSpec() const {
    return m_dry_run_spec;
}
void OAIGoogleCloudOrgpolicyV2Policy::setDryRunSpec(const OAIGoogleCloudOrgpolicyV2PolicySpec &dry_run_spec) {
    m_dry_run_spec = dry_run_spec;
    m_dry_run_spec_isSet = true;
}

bool OAIGoogleCloudOrgpolicyV2Policy::is_dry_run_spec_Set() const{
    return m_dry_run_spec_isSet;
}

bool OAIGoogleCloudOrgpolicyV2Policy::is_dry_run_spec_Valid() const{
    return m_dry_run_spec_isValid;
}

QString OAIGoogleCloudOrgpolicyV2Policy::getEtag() const {
    return m_etag;
}
void OAIGoogleCloudOrgpolicyV2Policy::setEtag(const QString &etag) {
    m_etag = etag;
    m_etag_isSet = true;
}

bool OAIGoogleCloudOrgpolicyV2Policy::is_etag_Set() const{
    return m_etag_isSet;
}

bool OAIGoogleCloudOrgpolicyV2Policy::is_etag_Valid() const{
    return m_etag_isValid;
}

QString OAIGoogleCloudOrgpolicyV2Policy::getName() const {
    return m_name;
}
void OAIGoogleCloudOrgpolicyV2Policy::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGoogleCloudOrgpolicyV2Policy::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGoogleCloudOrgpolicyV2Policy::is_name_Valid() const{
    return m_name_isValid;
}

OAIGoogleCloudOrgpolicyV2PolicySpec OAIGoogleCloudOrgpolicyV2Policy::getSpec() const {
    return m_spec;
}
void OAIGoogleCloudOrgpolicyV2Policy::setSpec(const OAIGoogleCloudOrgpolicyV2PolicySpec &spec) {
    m_spec = spec;
    m_spec_isSet = true;
}

bool OAIGoogleCloudOrgpolicyV2Policy::is_spec_Set() const{
    return m_spec_isSet;
}

bool OAIGoogleCloudOrgpolicyV2Policy::is_spec_Valid() const{
    return m_spec_isValid;
}

bool OAIGoogleCloudOrgpolicyV2Policy::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_alternate.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dry_run_spec.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_etag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_spec.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudOrgpolicyV2Policy::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
