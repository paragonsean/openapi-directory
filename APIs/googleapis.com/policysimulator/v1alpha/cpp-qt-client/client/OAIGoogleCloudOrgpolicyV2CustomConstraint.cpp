/**
 * Policy Simulator API
 *  Policy Simulator is a collection of endpoints for creating, running, and viewing a Replay. A `Replay` is a type of simulation that lets you see how your members' access to resources might change if you changed your IAM policy. During a `Replay`, Policy Simulator re-evaluates, or replays, past access attempts under both the current policy and your proposed policy, and compares those results to determine how your members' access might change under the proposed policy.
 *
 * The version of the OpenAPI document: v1alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudOrgpolicyV2CustomConstraint.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudOrgpolicyV2CustomConstraint::OAIGoogleCloudOrgpolicyV2CustomConstraint(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudOrgpolicyV2CustomConstraint::OAIGoogleCloudOrgpolicyV2CustomConstraint() {
    this->initializeModel();
}

OAIGoogleCloudOrgpolicyV2CustomConstraint::~OAIGoogleCloudOrgpolicyV2CustomConstraint() {}

void OAIGoogleCloudOrgpolicyV2CustomConstraint::initializeModel() {

    m_action_type_isSet = false;
    m_action_type_isValid = false;

    m_condition_isSet = false;
    m_condition_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_method_types_isSet = false;
    m_method_types_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_resource_types_isSet = false;
    m_resource_types_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;
}

void OAIGoogleCloudOrgpolicyV2CustomConstraint::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudOrgpolicyV2CustomConstraint::fromJsonObject(QJsonObject json) {

    m_action_type_isValid = ::OpenAPI::fromJsonValue(m_action_type, json[QString("actionType")]);
    m_action_type_isSet = !json[QString("actionType")].isNull() && m_action_type_isValid;

    m_condition_isValid = ::OpenAPI::fromJsonValue(m_condition, json[QString("condition")]);
    m_condition_isSet = !json[QString("condition")].isNull() && m_condition_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_method_types_isValid = ::OpenAPI::fromJsonValue(m_method_types, json[QString("methodTypes")]);
    m_method_types_isSet = !json[QString("methodTypes")].isNull() && m_method_types_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_resource_types_isValid = ::OpenAPI::fromJsonValue(m_resource_types, json[QString("resourceTypes")]);
    m_resource_types_isSet = !json[QString("resourceTypes")].isNull() && m_resource_types_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;
}

QString OAIGoogleCloudOrgpolicyV2CustomConstraint::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudOrgpolicyV2CustomConstraint::asJsonObject() const {
    QJsonObject obj;
    if (m_action_type_isSet) {
        obj.insert(QString("actionType"), ::OpenAPI::toJsonValue(m_action_type));
    }
    if (m_condition_isSet) {
        obj.insert(QString("condition"), ::OpenAPI::toJsonValue(m_condition));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_method_types.size() > 0) {
        obj.insert(QString("methodTypes"), ::OpenAPI::toJsonValue(m_method_types));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_resource_types.size() > 0) {
        obj.insert(QString("resourceTypes"), ::OpenAPI::toJsonValue(m_resource_types));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    return obj;
}

QString OAIGoogleCloudOrgpolicyV2CustomConstraint::getActionType() const {
    return m_action_type;
}
void OAIGoogleCloudOrgpolicyV2CustomConstraint::setActionType(const QString &action_type) {
    m_action_type = action_type;
    m_action_type_isSet = true;
}

bool OAIGoogleCloudOrgpolicyV2CustomConstraint::is_action_type_Set() const{
    return m_action_type_isSet;
}

bool OAIGoogleCloudOrgpolicyV2CustomConstraint::is_action_type_Valid() const{
    return m_action_type_isValid;
}

QString OAIGoogleCloudOrgpolicyV2CustomConstraint::getCondition() const {
    return m_condition;
}
void OAIGoogleCloudOrgpolicyV2CustomConstraint::setCondition(const QString &condition) {
    m_condition = condition;
    m_condition_isSet = true;
}

bool OAIGoogleCloudOrgpolicyV2CustomConstraint::is_condition_Set() const{
    return m_condition_isSet;
}

bool OAIGoogleCloudOrgpolicyV2CustomConstraint::is_condition_Valid() const{
    return m_condition_isValid;
}

QString OAIGoogleCloudOrgpolicyV2CustomConstraint::getDescription() const {
    return m_description;
}
void OAIGoogleCloudOrgpolicyV2CustomConstraint::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIGoogleCloudOrgpolicyV2CustomConstraint::is_description_Set() const{
    return m_description_isSet;
}

bool OAIGoogleCloudOrgpolicyV2CustomConstraint::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIGoogleCloudOrgpolicyV2CustomConstraint::getDisplayName() const {
    return m_display_name;
}
void OAIGoogleCloudOrgpolicyV2CustomConstraint::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIGoogleCloudOrgpolicyV2CustomConstraint::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIGoogleCloudOrgpolicyV2CustomConstraint::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QList<QString> OAIGoogleCloudOrgpolicyV2CustomConstraint::getMethodTypes() const {
    return m_method_types;
}
void OAIGoogleCloudOrgpolicyV2CustomConstraint::setMethodTypes(const QList<QString> &method_types) {
    m_method_types = method_types;
    m_method_types_isSet = true;
}

bool OAIGoogleCloudOrgpolicyV2CustomConstraint::is_method_types_Set() const{
    return m_method_types_isSet;
}

bool OAIGoogleCloudOrgpolicyV2CustomConstraint::is_method_types_Valid() const{
    return m_method_types_isValid;
}

QString OAIGoogleCloudOrgpolicyV2CustomConstraint::getName() const {
    return m_name;
}
void OAIGoogleCloudOrgpolicyV2CustomConstraint::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGoogleCloudOrgpolicyV2CustomConstraint::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGoogleCloudOrgpolicyV2CustomConstraint::is_name_Valid() const{
    return m_name_isValid;
}

QList<QString> OAIGoogleCloudOrgpolicyV2CustomConstraint::getResourceTypes() const {
    return m_resource_types;
}
void OAIGoogleCloudOrgpolicyV2CustomConstraint::setResourceTypes(const QList<QString> &resource_types) {
    m_resource_types = resource_types;
    m_resource_types_isSet = true;
}

bool OAIGoogleCloudOrgpolicyV2CustomConstraint::is_resource_types_Set() const{
    return m_resource_types_isSet;
}

bool OAIGoogleCloudOrgpolicyV2CustomConstraint::is_resource_types_Valid() const{
    return m_resource_types_isValid;
}

QString OAIGoogleCloudOrgpolicyV2CustomConstraint::getUpdateTime() const {
    return m_update_time;
}
void OAIGoogleCloudOrgpolicyV2CustomConstraint::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAIGoogleCloudOrgpolicyV2CustomConstraint::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAIGoogleCloudOrgpolicyV2CustomConstraint::is_update_time_Valid() const{
    return m_update_time_isValid;
}

bool OAIGoogleCloudOrgpolicyV2CustomConstraint::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_action_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_condition_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_method_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudOrgpolicyV2CustomConstraint::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
