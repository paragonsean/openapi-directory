/**
 * Policy Simulator API
 *  Policy Simulator is a collection of endpoints for creating, running, and viewing a Replay. A `Replay` is a type of simulation that lets you see how your members' access to resources might change if you changed your IAM policy. During a `Replay`, Policy Simulator re-evaluates, or replays, past access attempts under both the current policy and your proposed policy, and compares those results to determine how your members' access might change under the proposed policy.
 *
 * The version of the OpenAPI document: v1alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudPolicysimulatorV1alphaResourceContext.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudPolicysimulatorV1alphaResourceContext::OAIGoogleCloudPolicysimulatorV1alphaResourceContext(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudPolicysimulatorV1alphaResourceContext::OAIGoogleCloudPolicysimulatorV1alphaResourceContext() {
    this->initializeModel();
}

OAIGoogleCloudPolicysimulatorV1alphaResourceContext::~OAIGoogleCloudPolicysimulatorV1alphaResourceContext() {}

void OAIGoogleCloudPolicysimulatorV1alphaResourceContext::initializeModel() {

    m_ancestors_isSet = false;
    m_ancestors_isValid = false;

    m_asset_type_isSet = false;
    m_asset_type_isValid = false;

    m_resource_isSet = false;
    m_resource_isValid = false;
}

void OAIGoogleCloudPolicysimulatorV1alphaResourceContext::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudPolicysimulatorV1alphaResourceContext::fromJsonObject(QJsonObject json) {

    m_ancestors_isValid = ::OpenAPI::fromJsonValue(m_ancestors, json[QString("ancestors")]);
    m_ancestors_isSet = !json[QString("ancestors")].isNull() && m_ancestors_isValid;

    m_asset_type_isValid = ::OpenAPI::fromJsonValue(m_asset_type, json[QString("assetType")]);
    m_asset_type_isSet = !json[QString("assetType")].isNull() && m_asset_type_isValid;

    m_resource_isValid = ::OpenAPI::fromJsonValue(m_resource, json[QString("resource")]);
    m_resource_isSet = !json[QString("resource")].isNull() && m_resource_isValid;
}

QString OAIGoogleCloudPolicysimulatorV1alphaResourceContext::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudPolicysimulatorV1alphaResourceContext::asJsonObject() const {
    QJsonObject obj;
    if (m_ancestors.size() > 0) {
        obj.insert(QString("ancestors"), ::OpenAPI::toJsonValue(m_ancestors));
    }
    if (m_asset_type_isSet) {
        obj.insert(QString("assetType"), ::OpenAPI::toJsonValue(m_asset_type));
    }
    if (m_resource_isSet) {
        obj.insert(QString("resource"), ::OpenAPI::toJsonValue(m_resource));
    }
    return obj;
}

QList<QString> OAIGoogleCloudPolicysimulatorV1alphaResourceContext::getAncestors() const {
    return m_ancestors;
}
void OAIGoogleCloudPolicysimulatorV1alphaResourceContext::setAncestors(const QList<QString> &ancestors) {
    m_ancestors = ancestors;
    m_ancestors_isSet = true;
}

bool OAIGoogleCloudPolicysimulatorV1alphaResourceContext::is_ancestors_Set() const{
    return m_ancestors_isSet;
}

bool OAIGoogleCloudPolicysimulatorV1alphaResourceContext::is_ancestors_Valid() const{
    return m_ancestors_isValid;
}

QString OAIGoogleCloudPolicysimulatorV1alphaResourceContext::getAssetType() const {
    return m_asset_type;
}
void OAIGoogleCloudPolicysimulatorV1alphaResourceContext::setAssetType(const QString &asset_type) {
    m_asset_type = asset_type;
    m_asset_type_isSet = true;
}

bool OAIGoogleCloudPolicysimulatorV1alphaResourceContext::is_asset_type_Set() const{
    return m_asset_type_isSet;
}

bool OAIGoogleCloudPolicysimulatorV1alphaResourceContext::is_asset_type_Valid() const{
    return m_asset_type_isValid;
}

QString OAIGoogleCloudPolicysimulatorV1alphaResourceContext::getResource() const {
    return m_resource;
}
void OAIGoogleCloudPolicysimulatorV1alphaResourceContext::setResource(const QString &resource) {
    m_resource = resource;
    m_resource_isSet = true;
}

bool OAIGoogleCloudPolicysimulatorV1alphaResourceContext::is_resource_Set() const{
    return m_resource_isSet;
}

bool OAIGoogleCloudPolicysimulatorV1alphaResourceContext::is_resource_Valid() const{
    return m_resource_isValid;
}

bool OAIGoogleCloudPolicysimulatorV1alphaResourceContext::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ancestors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_asset_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudPolicysimulatorV1alphaResourceContext::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
