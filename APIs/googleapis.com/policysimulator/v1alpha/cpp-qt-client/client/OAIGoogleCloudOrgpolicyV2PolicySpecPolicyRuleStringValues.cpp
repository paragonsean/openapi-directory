/**
 * Policy Simulator API
 *  Policy Simulator is a collection of endpoints for creating, running, and viewing a Replay. A `Replay` is a type of simulation that lets you see how your members' access to resources might change if you changed your IAM policy. During a `Replay`, Policy Simulator re-evaluates, or replays, past access attempts under both the current policy and your proposed policy, and compares those results to determine how your members' access might change under the proposed policy.
 *
 * The version of the OpenAPI document: v1alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValues.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValues::OAIGoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValues(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValues::OAIGoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValues() {
    this->initializeModel();
}

OAIGoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValues::~OAIGoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValues() {}

void OAIGoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValues::initializeModel() {

    m_allowed_values_isSet = false;
    m_allowed_values_isValid = false;

    m_denied_values_isSet = false;
    m_denied_values_isValid = false;
}

void OAIGoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValues::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValues::fromJsonObject(QJsonObject json) {

    m_allowed_values_isValid = ::OpenAPI::fromJsonValue(m_allowed_values, json[QString("allowedValues")]);
    m_allowed_values_isSet = !json[QString("allowedValues")].isNull() && m_allowed_values_isValid;

    m_denied_values_isValid = ::OpenAPI::fromJsonValue(m_denied_values, json[QString("deniedValues")]);
    m_denied_values_isSet = !json[QString("deniedValues")].isNull() && m_denied_values_isValid;
}

QString OAIGoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValues::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValues::asJsonObject() const {
    QJsonObject obj;
    if (m_allowed_values.size() > 0) {
        obj.insert(QString("allowedValues"), ::OpenAPI::toJsonValue(m_allowed_values));
    }
    if (m_denied_values.size() > 0) {
        obj.insert(QString("deniedValues"), ::OpenAPI::toJsonValue(m_denied_values));
    }
    return obj;
}

QList<QString> OAIGoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValues::getAllowedValues() const {
    return m_allowed_values;
}
void OAIGoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValues::setAllowedValues(const QList<QString> &allowed_values) {
    m_allowed_values = allowed_values;
    m_allowed_values_isSet = true;
}

bool OAIGoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValues::is_allowed_values_Set() const{
    return m_allowed_values_isSet;
}

bool OAIGoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValues::is_allowed_values_Valid() const{
    return m_allowed_values_isValid;
}

QList<QString> OAIGoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValues::getDeniedValues() const {
    return m_denied_values;
}
void OAIGoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValues::setDeniedValues(const QList<QString> &denied_values) {
    m_denied_values = denied_values;
    m_denied_values_isSet = true;
}

bool OAIGoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValues::is_denied_values_Set() const{
    return m_denied_values_isSet;
}

bool OAIGoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValues::is_denied_values_Valid() const{
    return m_denied_values_isValid;
}

bool OAIGoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValues::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allowed_values.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_denied_values.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValues::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
