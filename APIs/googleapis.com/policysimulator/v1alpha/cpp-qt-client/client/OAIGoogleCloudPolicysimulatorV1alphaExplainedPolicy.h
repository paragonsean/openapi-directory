/**
 * Policy Simulator API
 *  Policy Simulator is a collection of endpoints for creating, running, and viewing a Replay. A `Replay` is a type of simulation that lets you see how your members' access to resources might change if you changed your IAM policy. During a `Replay`, Policy Simulator re-evaluates, or replays, past access attempts under both the current policy and your proposed policy, and compares those results to determine how your members' access might change under the proposed policy.
 *
 * The version of the OpenAPI document: v1alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGoogleCloudPolicysimulatorV1alphaExplainedPolicy.h
 *
 * Details about how a specific IAM Policy contributed to the access check.
 */

#ifndef OAIGoogleCloudPolicysimulatorV1alphaExplainedPolicy_H
#define OAIGoogleCloudPolicysimulatorV1alphaExplainedPolicy_H

#include <QJsonObject>

#include "OAIGoogleCloudPolicysimulatorV1alphaBindingExplanation.h"
#include "OAIGoogleIamV1Policy.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIGoogleCloudPolicysimulatorV1alphaBindingExplanation;
class OAIGoogleIamV1Policy;

class OAIGoogleCloudPolicysimulatorV1alphaExplainedPolicy : public OAIObject {
public:
    OAIGoogleCloudPolicysimulatorV1alphaExplainedPolicy();
    OAIGoogleCloudPolicysimulatorV1alphaExplainedPolicy(QString json);
    ~OAIGoogleCloudPolicysimulatorV1alphaExplainedPolicy() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAccess() const;
    void setAccess(const QString &access);
    bool is_access_Set() const;
    bool is_access_Valid() const;

    QList<OAIGoogleCloudPolicysimulatorV1alphaBindingExplanation> getBindingExplanations() const;
    void setBindingExplanations(const QList<OAIGoogleCloudPolicysimulatorV1alphaBindingExplanation> &binding_explanations);
    bool is_binding_explanations_Set() const;
    bool is_binding_explanations_Valid() const;

    QString getFullResourceName() const;
    void setFullResourceName(const QString &full_resource_name);
    bool is_full_resource_name_Set() const;
    bool is_full_resource_name_Valid() const;

    OAIGoogleIamV1Policy getPolicy() const;
    void setPolicy(const OAIGoogleIamV1Policy &policy);
    bool is_policy_Set() const;
    bool is_policy_Valid() const;

    QString getRelevance() const;
    void setRelevance(const QString &relevance);
    bool is_relevance_Set() const;
    bool is_relevance_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_access;
    bool m_access_isSet;
    bool m_access_isValid;

    QList<OAIGoogleCloudPolicysimulatorV1alphaBindingExplanation> m_binding_explanations;
    bool m_binding_explanations_isSet;
    bool m_binding_explanations_isValid;

    QString m_full_resource_name;
    bool m_full_resource_name_isSet;
    bool m_full_resource_name_isValid;

    OAIGoogleIamV1Policy m_policy;
    bool m_policy_isSet;
    bool m_policy_isValid;

    QString m_relevance;
    bool m_relevance_isSet;
    bool m_relevance_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGoogleCloudPolicysimulatorV1alphaExplainedPolicy)

#endif // OAIGoogleCloudPolicysimulatorV1alphaExplainedPolicy_H
