/**
 * Policy Simulator API
 *  Policy Simulator is a collection of endpoints for creating, running, and viewing a Replay. A `Replay` is a type of simulation that lets you see how your members' access to resources might change if you changed your IAM policy. During a `Replay`, Policy Simulator re-evaluates, or replays, past access attempts under both the current policy and your proposed policy, and compares those results to determine how your members' access might change under the proposed policy.
 *
 * The version of the OpenAPI document: v1alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GoogleCloudPolicysimulatorV1alphaOrgPolicyOverlayCustomConstraintOverlay from './GoogleCloudPolicysimulatorV1alphaOrgPolicyOverlayCustomConstraintOverlay';
import GoogleCloudPolicysimulatorV1alphaOrgPolicyOverlayPolicyOverlay from './GoogleCloudPolicysimulatorV1alphaOrgPolicyOverlayPolicyOverlay';

/**
 * The GoogleCloudPolicysimulatorV1alphaOrgPolicyOverlay model module.
 * @module model/GoogleCloudPolicysimulatorV1alphaOrgPolicyOverlay
 * @version v1alpha
 */
class GoogleCloudPolicysimulatorV1alphaOrgPolicyOverlay {
    /**
     * Constructs a new <code>GoogleCloudPolicysimulatorV1alphaOrgPolicyOverlay</code>.
     * The proposed changes to OrgPolicy.
     * @alias module:model/GoogleCloudPolicysimulatorV1alphaOrgPolicyOverlay
     */
    constructor() { 
        
        GoogleCloudPolicysimulatorV1alphaOrgPolicyOverlay.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleCloudPolicysimulatorV1alphaOrgPolicyOverlay</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleCloudPolicysimulatorV1alphaOrgPolicyOverlay} obj Optional instance to populate.
     * @return {module:model/GoogleCloudPolicysimulatorV1alphaOrgPolicyOverlay} The populated <code>GoogleCloudPolicysimulatorV1alphaOrgPolicyOverlay</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleCloudPolicysimulatorV1alphaOrgPolicyOverlay();

            if (data.hasOwnProperty('customConstraints')) {
                obj['customConstraints'] = ApiClient.convertToType(data['customConstraints'], [GoogleCloudPolicysimulatorV1alphaOrgPolicyOverlayCustomConstraintOverlay]);
            }
            if (data.hasOwnProperty('policies')) {
                obj['policies'] = ApiClient.convertToType(data['policies'], [GoogleCloudPolicysimulatorV1alphaOrgPolicyOverlayPolicyOverlay]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleCloudPolicysimulatorV1alphaOrgPolicyOverlay</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleCloudPolicysimulatorV1alphaOrgPolicyOverlay</code>.
     */
    static validateJSON(data) {
        if (data['customConstraints']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['customConstraints'])) {
                throw new Error("Expected the field `customConstraints` to be an array in the JSON data but got " + data['customConstraints']);
            }
            // validate the optional field `customConstraints` (array)
            for (const item of data['customConstraints']) {
                GoogleCloudPolicysimulatorV1alphaOrgPolicyOverlayCustomConstraintOverlay.validateJSON(item);
            };
        }
        if (data['policies']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['policies'])) {
                throw new Error("Expected the field `policies` to be an array in the JSON data but got " + data['policies']);
            }
            // validate the optional field `policies` (array)
            for (const item of data['policies']) {
                GoogleCloudPolicysimulatorV1alphaOrgPolicyOverlayPolicyOverlay.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Optional. The OrgPolicy CustomConstraint changes to preview violations for. Any existing CustomConstraints with the same name will be overridden in the simulation. That is, violations will be determined as if all custom constraints in the overlay were instantiated. Only a single custom_constraint is supported in the overlay at a time. For evaluating multiple constraints, multiple `GenerateOrgPolicyViolationsPreview` requests are made, where each request evaluates a single constraint.
 * @member {Array.<module:model/GoogleCloudPolicysimulatorV1alphaOrgPolicyOverlayCustomConstraintOverlay>} customConstraints
 */
GoogleCloudPolicysimulatorV1alphaOrgPolicyOverlay.prototype['customConstraints'] = undefined;

/**
 * Optional. The OrgPolicy changes to preview violations for. Any existing OrgPolicies with the same name will be overridden in the simulation. That is, violations will be determined as if all policies in the overlay were created or updated.
 * @member {Array.<module:model/GoogleCloudPolicysimulatorV1alphaOrgPolicyOverlayPolicyOverlay>} policies
 */
GoogleCloudPolicysimulatorV1alphaOrgPolicyOverlay.prototype['policies'] = undefined;






export default GoogleCloudPolicysimulatorV1alphaOrgPolicyOverlay;

