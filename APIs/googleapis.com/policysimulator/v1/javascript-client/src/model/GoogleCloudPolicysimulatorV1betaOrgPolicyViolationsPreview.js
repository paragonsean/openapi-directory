/**
 * Policy Simulator API
 *  Policy Simulator is a collection of endpoints for creating, running, and viewing a Replay. A `Replay` is a type of simulation that lets you see how your members' access to resources might change if you changed your IAM policy. During a `Replay`, Policy Simulator re-evaluates, or replays, past access attempts under both the current policy and your proposed policy, and compares those results to determine how your members' access might change under the proposed policy.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GoogleCloudPolicysimulatorV1betaOrgPolicyOverlay from './GoogleCloudPolicysimulatorV1betaOrgPolicyOverlay';
import GoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreviewResourceCounts from './GoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreviewResourceCounts';

/**
 * The GoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreview model module.
 * @module model/GoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreview
 * @version v1
 */
class GoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreview {
    /**
     * Constructs a new <code>GoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreview</code>.
     * OrgPolicyViolationsPreview is a resource providing a preview of the violations that will exist if an OrgPolicy change is made. The list of violations are modeled as child resources and retrieved via a ListOrgPolicyViolations API call. There are potentially more OrgPolicyViolations than could fit in an embedded field. Thus, the use of a child resource instead of a field.
     * @alias module:model/GoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreview
     */
    constructor() { 
        
        GoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreview.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreview</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreview} obj Optional instance to populate.
     * @return {module:model/GoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreview} The populated <code>GoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreview</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreview();

            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'String');
            }
            if (data.hasOwnProperty('customConstraints')) {
                obj['customConstraints'] = ApiClient.convertToType(data['customConstraints'], ['String']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('overlay')) {
                obj['overlay'] = GoogleCloudPolicysimulatorV1betaOrgPolicyOverlay.constructFromObject(data['overlay']);
            }
            if (data.hasOwnProperty('resourceCounts')) {
                obj['resourceCounts'] = GoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreviewResourceCounts.constructFromObject(data['resourceCounts']);
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('violationsCount')) {
                obj['violationsCount'] = ApiClient.convertToType(data['violationsCount'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreview</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreview</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['createTime'] && !(typeof data['createTime'] === 'string' || data['createTime'] instanceof String)) {
            throw new Error("Expected the field `createTime` to be a primitive type in the JSON string but got " + data['createTime']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['customConstraints'])) {
            throw new Error("Expected the field `customConstraints` to be an array in the JSON data but got " + data['customConstraints']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `overlay`
        if (data['overlay']) { // data not null
          GoogleCloudPolicysimulatorV1betaOrgPolicyOverlay.validateJSON(data['overlay']);
        }
        // validate the optional field `resourceCounts`
        if (data['resourceCounts']) { // data not null
          GoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreviewResourceCounts.validateJSON(data['resourceCounts']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }

        return true;
    }


}



/**
 * Output only. Time when this `OrgPolicyViolationsPreview` was created.
 * @member {String} createTime
 */
GoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreview.prototype['createTime'] = undefined;

/**
 * Output only. The names of the constraints against which all `OrgPolicyViolations` were evaluated. If `OrgPolicyOverlay` only contains `PolicyOverlay` then it contains the name of the configured custom constraint, applicable to the specified policies. Otherwise it contains the name of the constraint specified in `CustomConstraintOverlay`. Format: `organizations/{organization_id}/customConstraints/{custom_constraint_id}` Example: `organizations/123/customConstraints/custom.createOnlyE2TypeVms`
 * @member {Array.<String>} customConstraints
 */
GoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreview.prototype['customConstraints'] = undefined;

/**
 * Output only. The resource name of the `OrgPolicyViolationsPreview`. It has the following format: `organizations/{organization}/locations/{location}/orgPolicyViolationsPreviews/{orgPolicyViolationsPreview}` Example: `organizations/my-example-org/locations/global/orgPolicyViolationsPreviews/506a5f7f`
 * @member {String} name
 */
GoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreview.prototype['name'] = undefined;

/**
 * @member {module:model/GoogleCloudPolicysimulatorV1betaOrgPolicyOverlay} overlay
 */
GoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreview.prototype['overlay'] = undefined;

/**
 * @member {module:model/GoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreviewResourceCounts} resourceCounts
 */
GoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreview.prototype['resourceCounts'] = undefined;

/**
 * Output only. The state of the `OrgPolicyViolationsPreview`.
 * @member {module:model/GoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreview.StateEnum} state
 */
GoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreview.prototype['state'] = undefined;

/**
 * Output only. The number of OrgPolicyViolations in this `OrgPolicyViolationsPreview`. This count may differ from `resource_summary.noncompliant_count` because each OrgPolicyViolation is specific to a resource **and** constraint. If there are multiple constraints being evaluated (i.e. multiple policies in the overlay), a single resource may violate multiple constraints.
 * @member {Number} violationsCount
 */
GoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreview.prototype['violationsCount'] = undefined;





/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
GoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreview['StateEnum'] = {

    /**
     * value: "PREVIEW_STATE_UNSPECIFIED"
     * @const
     */
    "STATE_UNSPECIFIED": "PREVIEW_STATE_UNSPECIFIED",

    /**
     * value: "PREVIEW_PENDING"
     * @const
     */
    "PENDING": "PREVIEW_PENDING",

    /**
     * value: "PREVIEW_RUNNING"
     * @const
     */
    "RUNNING": "PREVIEW_RUNNING",

    /**
     * value: "PREVIEW_SUCCEEDED"
     * @const
     */
    "SUCCEEDED": "PREVIEW_SUCCEEDED",

    /**
     * value: "PREVIEW_FAILED"
     * @const
     */
    "FAILED": "PREVIEW_FAILED"
};



export default GoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreview;

