# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_policysimulator_v1alpha_org_policy_overlay import GoogleCloudPolicysimulatorV1alphaOrgPolicyOverlay
from openapi_server.models.google_cloud_policysimulator_v1alpha_org_policy_violations_preview_resource_counts import GoogleCloudPolicysimulatorV1alphaOrgPolicyViolationsPreviewResourceCounts
from openapi_server import util


class GoogleCloudPolicysimulatorV1alphaOrgPolicyViolationsPreview(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, create_time: str=None, custom_constraints: List[str]=None, name: str=None, overlay: GoogleCloudPolicysimulatorV1alphaOrgPolicyOverlay=None, resource_counts: GoogleCloudPolicysimulatorV1alphaOrgPolicyViolationsPreviewResourceCounts=None, state: str=None, violations_count: int=None):
        """GoogleCloudPolicysimulatorV1alphaOrgPolicyViolationsPreview - a model defined in OpenAPI

        :param create_time: The create_time of this GoogleCloudPolicysimulatorV1alphaOrgPolicyViolationsPreview.
        :param custom_constraints: The custom_constraints of this GoogleCloudPolicysimulatorV1alphaOrgPolicyViolationsPreview.
        :param name: The name of this GoogleCloudPolicysimulatorV1alphaOrgPolicyViolationsPreview.
        :param overlay: The overlay of this GoogleCloudPolicysimulatorV1alphaOrgPolicyViolationsPreview.
        :param resource_counts: The resource_counts of this GoogleCloudPolicysimulatorV1alphaOrgPolicyViolationsPreview.
        :param state: The state of this GoogleCloudPolicysimulatorV1alphaOrgPolicyViolationsPreview.
        :param violations_count: The violations_count of this GoogleCloudPolicysimulatorV1alphaOrgPolicyViolationsPreview.
        """
        self.openapi_types = {
            'create_time': str,
            'custom_constraints': List[str],
            'name': str,
            'overlay': GoogleCloudPolicysimulatorV1alphaOrgPolicyOverlay,
            'resource_counts': GoogleCloudPolicysimulatorV1alphaOrgPolicyViolationsPreviewResourceCounts,
            'state': str,
            'violations_count': int
        }

        self.attribute_map = {
            'create_time': 'createTime',
            'custom_constraints': 'customConstraints',
            'name': 'name',
            'overlay': 'overlay',
            'resource_counts': 'resourceCounts',
            'state': 'state',
            'violations_count': 'violationsCount'
        }

        self._create_time = create_time
        self._custom_constraints = custom_constraints
        self._name = name
        self._overlay = overlay
        self._resource_counts = resource_counts
        self._state = state
        self._violations_count = violations_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudPolicysimulatorV1alphaOrgPolicyViolationsPreview':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudPolicysimulatorV1alphaOrgPolicyViolationsPreview of this GoogleCloudPolicysimulatorV1alphaOrgPolicyViolationsPreview.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def create_time(self):
        """Gets the create_time of this GoogleCloudPolicysimulatorV1alphaOrgPolicyViolationsPreview.

        Output only. Time when this `OrgPolicyViolationsPreview` was created.

        :return: The create_time of this GoogleCloudPolicysimulatorV1alphaOrgPolicyViolationsPreview.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this GoogleCloudPolicysimulatorV1alphaOrgPolicyViolationsPreview.

        Output only. Time when this `OrgPolicyViolationsPreview` was created.

        :param create_time: The create_time of this GoogleCloudPolicysimulatorV1alphaOrgPolicyViolationsPreview.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def custom_constraints(self):
        """Gets the custom_constraints of this GoogleCloudPolicysimulatorV1alphaOrgPolicyViolationsPreview.

        Output only. The names of the constraints against which all `OrgPolicyViolations` were evaluated. If `OrgPolicyOverlay` only contains `PolicyOverlay` then it contains the name of the configured custom constraint, applicable to the specified policies. Otherwise it contains the name of the constraint specified in `CustomConstraintOverlay`. Format: `organizations/{organization_id}/customConstraints/{custom_constraint_id}` Example: `organizations/123/customConstraints/custom.createOnlyE2TypeVms`

        :return: The custom_constraints of this GoogleCloudPolicysimulatorV1alphaOrgPolicyViolationsPreview.
        :rtype: List[str]
        """
        return self._custom_constraints

    @custom_constraints.setter
    def custom_constraints(self, custom_constraints):
        """Sets the custom_constraints of this GoogleCloudPolicysimulatorV1alphaOrgPolicyViolationsPreview.

        Output only. The names of the constraints against which all `OrgPolicyViolations` were evaluated. If `OrgPolicyOverlay` only contains `PolicyOverlay` then it contains the name of the configured custom constraint, applicable to the specified policies. Otherwise it contains the name of the constraint specified in `CustomConstraintOverlay`. Format: `organizations/{organization_id}/customConstraints/{custom_constraint_id}` Example: `organizations/123/customConstraints/custom.createOnlyE2TypeVms`

        :param custom_constraints: The custom_constraints of this GoogleCloudPolicysimulatorV1alphaOrgPolicyViolationsPreview.
        :type custom_constraints: List[str]
        """

        self._custom_constraints = custom_constraints

    @property
    def name(self):
        """Gets the name of this GoogleCloudPolicysimulatorV1alphaOrgPolicyViolationsPreview.

        Output only. The resource name of the `OrgPolicyViolationsPreview`. It has the following format: `organizations/{organization}/locations/{location}/orgPolicyViolationsPreviews/{orgPolicyViolationsPreview}` Example: `organizations/my-example-org/locations/global/orgPolicyViolationsPreviews/506a5f7f`

        :return: The name of this GoogleCloudPolicysimulatorV1alphaOrgPolicyViolationsPreview.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GoogleCloudPolicysimulatorV1alphaOrgPolicyViolationsPreview.

        Output only. The resource name of the `OrgPolicyViolationsPreview`. It has the following format: `organizations/{organization}/locations/{location}/orgPolicyViolationsPreviews/{orgPolicyViolationsPreview}` Example: `organizations/my-example-org/locations/global/orgPolicyViolationsPreviews/506a5f7f`

        :param name: The name of this GoogleCloudPolicysimulatorV1alphaOrgPolicyViolationsPreview.
        :type name: str
        """

        self._name = name

    @property
    def overlay(self):
        """Gets the overlay of this GoogleCloudPolicysimulatorV1alphaOrgPolicyViolationsPreview.


        :return: The overlay of this GoogleCloudPolicysimulatorV1alphaOrgPolicyViolationsPreview.
        :rtype: GoogleCloudPolicysimulatorV1alphaOrgPolicyOverlay
        """
        return self._overlay

    @overlay.setter
    def overlay(self, overlay):
        """Sets the overlay of this GoogleCloudPolicysimulatorV1alphaOrgPolicyViolationsPreview.


        :param overlay: The overlay of this GoogleCloudPolicysimulatorV1alphaOrgPolicyViolationsPreview.
        :type overlay: GoogleCloudPolicysimulatorV1alphaOrgPolicyOverlay
        """

        self._overlay = overlay

    @property
    def resource_counts(self):
        """Gets the resource_counts of this GoogleCloudPolicysimulatorV1alphaOrgPolicyViolationsPreview.


        :return: The resource_counts of this GoogleCloudPolicysimulatorV1alphaOrgPolicyViolationsPreview.
        :rtype: GoogleCloudPolicysimulatorV1alphaOrgPolicyViolationsPreviewResourceCounts
        """
        return self._resource_counts

    @resource_counts.setter
    def resource_counts(self, resource_counts):
        """Sets the resource_counts of this GoogleCloudPolicysimulatorV1alphaOrgPolicyViolationsPreview.


        :param resource_counts: The resource_counts of this GoogleCloudPolicysimulatorV1alphaOrgPolicyViolationsPreview.
        :type resource_counts: GoogleCloudPolicysimulatorV1alphaOrgPolicyViolationsPreviewResourceCounts
        """

        self._resource_counts = resource_counts

    @property
    def state(self):
        """Gets the state of this GoogleCloudPolicysimulatorV1alphaOrgPolicyViolationsPreview.

        Output only. The state of the `OrgPolicyViolationsPreview`.

        :return: The state of this GoogleCloudPolicysimulatorV1alphaOrgPolicyViolationsPreview.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this GoogleCloudPolicysimulatorV1alphaOrgPolicyViolationsPreview.

        Output only. The state of the `OrgPolicyViolationsPreview`.

        :param state: The state of this GoogleCloudPolicysimulatorV1alphaOrgPolicyViolationsPreview.
        :type state: str
        """
        allowed_values = ["PREVIEW_STATE_UNSPECIFIED", "PREVIEW_PENDING", "PREVIEW_RUNNING", "PREVIEW_SUCCEEDED", "PREVIEW_FAILED"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def violations_count(self):
        """Gets the violations_count of this GoogleCloudPolicysimulatorV1alphaOrgPolicyViolationsPreview.

        Output only. The number of OrgPolicyViolations in this `OrgPolicyViolationsPreview`. This count may differ from `resource_summary.noncompliant_count` because each OrgPolicyViolation is specific to a resource **and** constraint. If there are multiple constraints being evaluated (i.e. multiple policies in the overlay), a single resource may violate multiple constraints.

        :return: The violations_count of this GoogleCloudPolicysimulatorV1alphaOrgPolicyViolationsPreview.
        :rtype: int
        """
        return self._violations_count

    @violations_count.setter
    def violations_count(self, violations_count):
        """Sets the violations_count of this GoogleCloudPolicysimulatorV1alphaOrgPolicyViolationsPreview.

        Output only. The number of OrgPolicyViolations in this `OrgPolicyViolationsPreview`. This count may differ from `resource_summary.noncompliant_count` because each OrgPolicyViolation is specific to a resource **and** constraint. If there are multiple constraints being evaluated (i.e. multiple policies in the overlay), a single resource may violate multiple constraints.

        :param violations_count: The violations_count of this GoogleCloudPolicysimulatorV1alphaOrgPolicyViolationsPreview.
        :type violations_count: int
        """

        self._violations_count = violations_count
