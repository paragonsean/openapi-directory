# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleCloudPolicysimulatorV1alphaGenerateOrgPolicyViolationsPreviewOperationMetadata(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, request_time: str=None, resources_found: int=None, resources_pending: int=None, resources_scanned: int=None, start_time: str=None, state: str=None):
        """GoogleCloudPolicysimulatorV1alphaGenerateOrgPolicyViolationsPreviewOperationMetadata - a model defined in OpenAPI

        :param request_time: The request_time of this GoogleCloudPolicysimulatorV1alphaGenerateOrgPolicyViolationsPreviewOperationMetadata.
        :param resources_found: The resources_found of this GoogleCloudPolicysimulatorV1alphaGenerateOrgPolicyViolationsPreviewOperationMetadata.
        :param resources_pending: The resources_pending of this GoogleCloudPolicysimulatorV1alphaGenerateOrgPolicyViolationsPreviewOperationMetadata.
        :param resources_scanned: The resources_scanned of this GoogleCloudPolicysimulatorV1alphaGenerateOrgPolicyViolationsPreviewOperationMetadata.
        :param start_time: The start_time of this GoogleCloudPolicysimulatorV1alphaGenerateOrgPolicyViolationsPreviewOperationMetadata.
        :param state: The state of this GoogleCloudPolicysimulatorV1alphaGenerateOrgPolicyViolationsPreviewOperationMetadata.
        """
        self.openapi_types = {
            'request_time': str,
            'resources_found': int,
            'resources_pending': int,
            'resources_scanned': int,
            'start_time': str,
            'state': str
        }

        self.attribute_map = {
            'request_time': 'requestTime',
            'resources_found': 'resourcesFound',
            'resources_pending': 'resourcesPending',
            'resources_scanned': 'resourcesScanned',
            'start_time': 'startTime',
            'state': 'state'
        }

        self._request_time = request_time
        self._resources_found = resources_found
        self._resources_pending = resources_pending
        self._resources_scanned = resources_scanned
        self._start_time = start_time
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudPolicysimulatorV1alphaGenerateOrgPolicyViolationsPreviewOperationMetadata':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudPolicysimulatorV1alphaGenerateOrgPolicyViolationsPreviewOperationMetadata of this GoogleCloudPolicysimulatorV1alphaGenerateOrgPolicyViolationsPreviewOperationMetadata.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def request_time(self):
        """Gets the request_time of this GoogleCloudPolicysimulatorV1alphaGenerateOrgPolicyViolationsPreviewOperationMetadata.

        Time when the request was received.

        :return: The request_time of this GoogleCloudPolicysimulatorV1alphaGenerateOrgPolicyViolationsPreviewOperationMetadata.
        :rtype: str
        """
        return self._request_time

    @request_time.setter
    def request_time(self, request_time):
        """Sets the request_time of this GoogleCloudPolicysimulatorV1alphaGenerateOrgPolicyViolationsPreviewOperationMetadata.

        Time when the request was received.

        :param request_time: The request_time of this GoogleCloudPolicysimulatorV1alphaGenerateOrgPolicyViolationsPreviewOperationMetadata.
        :type request_time: str
        """

        self._request_time = request_time

    @property
    def resources_found(self):
        """Gets the resources_found of this GoogleCloudPolicysimulatorV1alphaGenerateOrgPolicyViolationsPreviewOperationMetadata.

        Total number of resources that need scanning. Should equal resource_scanned + resources_pending

        :return: The resources_found of this GoogleCloudPolicysimulatorV1alphaGenerateOrgPolicyViolationsPreviewOperationMetadata.
        :rtype: int
        """
        return self._resources_found

    @resources_found.setter
    def resources_found(self, resources_found):
        """Sets the resources_found of this GoogleCloudPolicysimulatorV1alphaGenerateOrgPolicyViolationsPreviewOperationMetadata.

        Total number of resources that need scanning. Should equal resource_scanned + resources_pending

        :param resources_found: The resources_found of this GoogleCloudPolicysimulatorV1alphaGenerateOrgPolicyViolationsPreviewOperationMetadata.
        :type resources_found: int
        """

        self._resources_found = resources_found

    @property
    def resources_pending(self):
        """Gets the resources_pending of this GoogleCloudPolicysimulatorV1alphaGenerateOrgPolicyViolationsPreviewOperationMetadata.

        Number of resources still to scan.

        :return: The resources_pending of this GoogleCloudPolicysimulatorV1alphaGenerateOrgPolicyViolationsPreviewOperationMetadata.
        :rtype: int
        """
        return self._resources_pending

    @resources_pending.setter
    def resources_pending(self, resources_pending):
        """Sets the resources_pending of this GoogleCloudPolicysimulatorV1alphaGenerateOrgPolicyViolationsPreviewOperationMetadata.

        Number of resources still to scan.

        :param resources_pending: The resources_pending of this GoogleCloudPolicysimulatorV1alphaGenerateOrgPolicyViolationsPreviewOperationMetadata.
        :type resources_pending: int
        """

        self._resources_pending = resources_pending

    @property
    def resources_scanned(self):
        """Gets the resources_scanned of this GoogleCloudPolicysimulatorV1alphaGenerateOrgPolicyViolationsPreviewOperationMetadata.

        Number of resources already scanned.

        :return: The resources_scanned of this GoogleCloudPolicysimulatorV1alphaGenerateOrgPolicyViolationsPreviewOperationMetadata.
        :rtype: int
        """
        return self._resources_scanned

    @resources_scanned.setter
    def resources_scanned(self, resources_scanned):
        """Sets the resources_scanned of this GoogleCloudPolicysimulatorV1alphaGenerateOrgPolicyViolationsPreviewOperationMetadata.

        Number of resources already scanned.

        :param resources_scanned: The resources_scanned of this GoogleCloudPolicysimulatorV1alphaGenerateOrgPolicyViolationsPreviewOperationMetadata.
        :type resources_scanned: int
        """

        self._resources_scanned = resources_scanned

    @property
    def start_time(self):
        """Gets the start_time of this GoogleCloudPolicysimulatorV1alphaGenerateOrgPolicyViolationsPreviewOperationMetadata.

        Time when the request started processing, i.e. when the state was set to RUNNING.

        :return: The start_time of this GoogleCloudPolicysimulatorV1alphaGenerateOrgPolicyViolationsPreviewOperationMetadata.
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this GoogleCloudPolicysimulatorV1alphaGenerateOrgPolicyViolationsPreviewOperationMetadata.

        Time when the request started processing, i.e. when the state was set to RUNNING.

        :param start_time: The start_time of this GoogleCloudPolicysimulatorV1alphaGenerateOrgPolicyViolationsPreviewOperationMetadata.
        :type start_time: str
        """

        self._start_time = start_time

    @property
    def state(self):
        """Gets the state of this GoogleCloudPolicysimulatorV1alphaGenerateOrgPolicyViolationsPreviewOperationMetadata.

        The current state of the operation.

        :return: The state of this GoogleCloudPolicysimulatorV1alphaGenerateOrgPolicyViolationsPreviewOperationMetadata.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this GoogleCloudPolicysimulatorV1alphaGenerateOrgPolicyViolationsPreviewOperationMetadata.

        The current state of the operation.

        :param state: The state of this GoogleCloudPolicysimulatorV1alphaGenerateOrgPolicyViolationsPreviewOperationMetadata.
        :type state: str
        """
        allowed_values = ["PREVIEW_STATE_UNSPECIFIED", "PREVIEW_PENDING", "PREVIEW_RUNNING", "PREVIEW_SUCCEEDED", "PREVIEW_FAILED"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state
