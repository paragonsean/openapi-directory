# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_orgpolicy_v2_policy_spec_policy_rule import GoogleCloudOrgpolicyV2PolicySpecPolicyRule
from openapi_server import util


class GoogleCloudOrgpolicyV2PolicySpec(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, etag: str=None, inherit_from_parent: bool=None, reset: bool=None, rules: List[GoogleCloudOrgpolicyV2PolicySpecPolicyRule]=None, update_time: str=None):
        """GoogleCloudOrgpolicyV2PolicySpec - a model defined in OpenAPI

        :param etag: The etag of this GoogleCloudOrgpolicyV2PolicySpec.
        :param inherit_from_parent: The inherit_from_parent of this GoogleCloudOrgpolicyV2PolicySpec.
        :param reset: The reset of this GoogleCloudOrgpolicyV2PolicySpec.
        :param rules: The rules of this GoogleCloudOrgpolicyV2PolicySpec.
        :param update_time: The update_time of this GoogleCloudOrgpolicyV2PolicySpec.
        """
        self.openapi_types = {
            'etag': str,
            'inherit_from_parent': bool,
            'reset': bool,
            'rules': List[GoogleCloudOrgpolicyV2PolicySpecPolicyRule],
            'update_time': str
        }

        self.attribute_map = {
            'etag': 'etag',
            'inherit_from_parent': 'inheritFromParent',
            'reset': 'reset',
            'rules': 'rules',
            'update_time': 'updateTime'
        }

        self._etag = etag
        self._inherit_from_parent = inherit_from_parent
        self._reset = reset
        self._rules = rules
        self._update_time = update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudOrgpolicyV2PolicySpec':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudOrgpolicyV2PolicySpec of this GoogleCloudOrgpolicyV2PolicySpec.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def etag(self):
        """Gets the etag of this GoogleCloudOrgpolicyV2PolicySpec.

        An opaque tag indicating the current version of the policySpec, used for concurrency control. This field is ignored if used in a `CreatePolicy` request. When the policy is returned from either a `GetPolicy` or a `ListPolicies` request, this `etag` indicates the version of the current policySpec to use when executing a read-modify-write loop. When the policy is returned from a `GetEffectivePolicy` request, the `etag` will be unset.

        :return: The etag of this GoogleCloudOrgpolicyV2PolicySpec.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this GoogleCloudOrgpolicyV2PolicySpec.

        An opaque tag indicating the current version of the policySpec, used for concurrency control. This field is ignored if used in a `CreatePolicy` request. When the policy is returned from either a `GetPolicy` or a `ListPolicies` request, this `etag` indicates the version of the current policySpec to use when executing a read-modify-write loop. When the policy is returned from a `GetEffectivePolicy` request, the `etag` will be unset.

        :param etag: The etag of this GoogleCloudOrgpolicyV2PolicySpec.
        :type etag: str
        """

        self._etag = etag

    @property
    def inherit_from_parent(self):
        """Gets the inherit_from_parent of this GoogleCloudOrgpolicyV2PolicySpec.

        Determines the inheritance behavior for this policy. If `inherit_from_parent` is true, policy rules set higher up in the hierarchy (up to the closest root) are inherited and present in the effective policy. If it is false, then no rules are inherited, and this policy becomes the new root for evaluation. This field can be set only for policies which configure list constraints.

        :return: The inherit_from_parent of this GoogleCloudOrgpolicyV2PolicySpec.
        :rtype: bool
        """
        return self._inherit_from_parent

    @inherit_from_parent.setter
    def inherit_from_parent(self, inherit_from_parent):
        """Sets the inherit_from_parent of this GoogleCloudOrgpolicyV2PolicySpec.

        Determines the inheritance behavior for this policy. If `inherit_from_parent` is true, policy rules set higher up in the hierarchy (up to the closest root) are inherited and present in the effective policy. If it is false, then no rules are inherited, and this policy becomes the new root for evaluation. This field can be set only for policies which configure list constraints.

        :param inherit_from_parent: The inherit_from_parent of this GoogleCloudOrgpolicyV2PolicySpec.
        :type inherit_from_parent: bool
        """

        self._inherit_from_parent = inherit_from_parent

    @property
    def reset(self):
        """Gets the reset of this GoogleCloudOrgpolicyV2PolicySpec.

        Ignores policies set above this resource and restores the `constraint_default` enforcement behavior of the specific constraint at this resource. This field can be set in policies for either list or boolean constraints. If set, `rules` must be empty and `inherit_from_parent` must be set to false.

        :return: The reset of this GoogleCloudOrgpolicyV2PolicySpec.
        :rtype: bool
        """
        return self._reset

    @reset.setter
    def reset(self, reset):
        """Sets the reset of this GoogleCloudOrgpolicyV2PolicySpec.

        Ignores policies set above this resource and restores the `constraint_default` enforcement behavior of the specific constraint at this resource. This field can be set in policies for either list or boolean constraints. If set, `rules` must be empty and `inherit_from_parent` must be set to false.

        :param reset: The reset of this GoogleCloudOrgpolicyV2PolicySpec.
        :type reset: bool
        """

        self._reset = reset

    @property
    def rules(self):
        """Gets the rules of this GoogleCloudOrgpolicyV2PolicySpec.

        In policies for boolean constraints, the following requirements apply: - There must be one and only one policy rule where condition is unset. - Boolean policy rules with conditions must set `enforced` to the opposite of the policy rule without a condition. - During policy evaluation, policy rules with conditions that are true for a target resource take precedence.

        :return: The rules of this GoogleCloudOrgpolicyV2PolicySpec.
        :rtype: List[GoogleCloudOrgpolicyV2PolicySpecPolicyRule]
        """
        return self._rules

    @rules.setter
    def rules(self, rules):
        """Sets the rules of this GoogleCloudOrgpolicyV2PolicySpec.

        In policies for boolean constraints, the following requirements apply: - There must be one and only one policy rule where condition is unset. - Boolean policy rules with conditions must set `enforced` to the opposite of the policy rule without a condition. - During policy evaluation, policy rules with conditions that are true for a target resource take precedence.

        :param rules: The rules of this GoogleCloudOrgpolicyV2PolicySpec.
        :type rules: List[GoogleCloudOrgpolicyV2PolicySpecPolicyRule]
        """

        self._rules = rules

    @property
    def update_time(self):
        """Gets the update_time of this GoogleCloudOrgpolicyV2PolicySpec.

        Output only. The time stamp this was previously updated. This represents the last time a call to `CreatePolicy` or `UpdatePolicy` was made for that policy.

        :return: The update_time of this GoogleCloudOrgpolicyV2PolicySpec.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this GoogleCloudOrgpolicyV2PolicySpec.

        Output only. The time stamp this was previously updated. This represents the last time a call to `CreatePolicy` or `UpdatePolicy` was made for that policy.

        :param update_time: The update_time of this GoogleCloudOrgpolicyV2PolicySpec.
        :type update_time: str
        """

        self._update_time = update_time
