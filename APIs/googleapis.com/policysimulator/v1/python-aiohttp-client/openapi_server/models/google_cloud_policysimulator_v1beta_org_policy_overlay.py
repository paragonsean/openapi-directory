# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_policysimulator_v1beta_org_policy_overlay_custom_constraint_overlay import GoogleCloudPolicysimulatorV1betaOrgPolicyOverlayCustomConstraintOverlay
from openapi_server.models.google_cloud_policysimulator_v1beta_org_policy_overlay_policy_overlay import GoogleCloudPolicysimulatorV1betaOrgPolicyOverlayPolicyOverlay
from openapi_server import util


class GoogleCloudPolicysimulatorV1betaOrgPolicyOverlay(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, custom_constraints: List[GoogleCloudPolicysimulatorV1betaOrgPolicyOverlayCustomConstraintOverlay]=None, policies: List[GoogleCloudPolicysimulatorV1betaOrgPolicyOverlayPolicyOverlay]=None):
        """GoogleCloudPolicysimulatorV1betaOrgPolicyOverlay - a model defined in OpenAPI

        :param custom_constraints: The custom_constraints of this GoogleCloudPolicysimulatorV1betaOrgPolicyOverlay.
        :param policies: The policies of this GoogleCloudPolicysimulatorV1betaOrgPolicyOverlay.
        """
        self.openapi_types = {
            'custom_constraints': List[GoogleCloudPolicysimulatorV1betaOrgPolicyOverlayCustomConstraintOverlay],
            'policies': List[GoogleCloudPolicysimulatorV1betaOrgPolicyOverlayPolicyOverlay]
        }

        self.attribute_map = {
            'custom_constraints': 'customConstraints',
            'policies': 'policies'
        }

        self._custom_constraints = custom_constraints
        self._policies = policies

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudPolicysimulatorV1betaOrgPolicyOverlay':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudPolicysimulatorV1betaOrgPolicyOverlay of this GoogleCloudPolicysimulatorV1betaOrgPolicyOverlay.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def custom_constraints(self):
        """Gets the custom_constraints of this GoogleCloudPolicysimulatorV1betaOrgPolicyOverlay.

        Optional. The OrgPolicy CustomConstraint changes to preview violations for. Any existing CustomConstraints with the same name will be overridden in the simulation. That is, violations will be determined as if all custom constraints in the overlay were instantiated. Only a single custom_constraint is supported in the overlay at a time. For evaluating multiple constraints, multiple `GenerateOrgPolicyViolationsPreview` requests are made, where each request evaluates a single constraint.

        :return: The custom_constraints of this GoogleCloudPolicysimulatorV1betaOrgPolicyOverlay.
        :rtype: List[GoogleCloudPolicysimulatorV1betaOrgPolicyOverlayCustomConstraintOverlay]
        """
        return self._custom_constraints

    @custom_constraints.setter
    def custom_constraints(self, custom_constraints):
        """Sets the custom_constraints of this GoogleCloudPolicysimulatorV1betaOrgPolicyOverlay.

        Optional. The OrgPolicy CustomConstraint changes to preview violations for. Any existing CustomConstraints with the same name will be overridden in the simulation. That is, violations will be determined as if all custom constraints in the overlay were instantiated. Only a single custom_constraint is supported in the overlay at a time. For evaluating multiple constraints, multiple `GenerateOrgPolicyViolationsPreview` requests are made, where each request evaluates a single constraint.

        :param custom_constraints: The custom_constraints of this GoogleCloudPolicysimulatorV1betaOrgPolicyOverlay.
        :type custom_constraints: List[GoogleCloudPolicysimulatorV1betaOrgPolicyOverlayCustomConstraintOverlay]
        """

        self._custom_constraints = custom_constraints

    @property
    def policies(self):
        """Gets the policies of this GoogleCloudPolicysimulatorV1betaOrgPolicyOverlay.

        Optional. The OrgPolicy changes to preview violations for. Any existing OrgPolicies with the same name will be overridden in the simulation. That is, violations will be determined as if all policies in the overlay were created or updated.

        :return: The policies of this GoogleCloudPolicysimulatorV1betaOrgPolicyOverlay.
        :rtype: List[GoogleCloudPolicysimulatorV1betaOrgPolicyOverlayPolicyOverlay]
        """
        return self._policies

    @policies.setter
    def policies(self, policies):
        """Sets the policies of this GoogleCloudPolicysimulatorV1betaOrgPolicyOverlay.

        Optional. The OrgPolicy changes to preview violations for. Any existing OrgPolicies with the same name will be overridden in the simulation. That is, violations will be determined as if all policies in the overlay were created or updated.

        :param policies: The policies of this GoogleCloudPolicysimulatorV1betaOrgPolicyOverlay.
        :type policies: List[GoogleCloudPolicysimulatorV1betaOrgPolicyOverlayPolicyOverlay]
        """

        self._policies = policies
