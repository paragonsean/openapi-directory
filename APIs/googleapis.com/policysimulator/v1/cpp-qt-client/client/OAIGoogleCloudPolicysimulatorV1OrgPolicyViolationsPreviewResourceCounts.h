/**
 * Policy Simulator API
 *  Policy Simulator is a collection of endpoints for creating, running, and viewing a Replay. A `Replay` is a type of simulation that lets you see how your members' access to resources might change if you changed your IAM policy. During a `Replay`, Policy Simulator re-evaluates, or replays, past access attempts under both the current policy and your proposed policy, and compares those results to determine how your members' access might change under the proposed policy.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGoogleCloudPolicysimulatorV1OrgPolicyViolationsPreviewResourceCounts.h
 *
 * A summary of the state of all resources scanned for compliance with the changed OrgPolicy.
 */

#ifndef OAIGoogleCloudPolicysimulatorV1OrgPolicyViolationsPreviewResourceCounts_H
#define OAIGoogleCloudPolicysimulatorV1OrgPolicyViolationsPreviewResourceCounts_H

#include <QJsonObject>


#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIGoogleCloudPolicysimulatorV1OrgPolicyViolationsPreviewResourceCounts : public OAIObject {
public:
    OAIGoogleCloudPolicysimulatorV1OrgPolicyViolationsPreviewResourceCounts();
    OAIGoogleCloudPolicysimulatorV1OrgPolicyViolationsPreviewResourceCounts(QString json);
    ~OAIGoogleCloudPolicysimulatorV1OrgPolicyViolationsPreviewResourceCounts() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getCompliant() const;
    void setCompliant(const qint32 &compliant);
    bool is_compliant_Set() const;
    bool is_compliant_Valid() const;

    qint32 getErrors() const;
    void setErrors(const qint32 &errors);
    bool is_errors_Set() const;
    bool is_errors_Valid() const;

    qint32 getNoncompliant() const;
    void setNoncompliant(const qint32 &noncompliant);
    bool is_noncompliant_Set() const;
    bool is_noncompliant_Valid() const;

    qint32 getScanned() const;
    void setScanned(const qint32 &scanned);
    bool is_scanned_Set() const;
    bool is_scanned_Valid() const;

    qint32 getUnenforced() const;
    void setUnenforced(const qint32 &unenforced);
    bool is_unenforced_Set() const;
    bool is_unenforced_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_compliant;
    bool m_compliant_isSet;
    bool m_compliant_isValid;

    qint32 m_errors;
    bool m_errors_isSet;
    bool m_errors_isValid;

    qint32 m_noncompliant;
    bool m_noncompliant_isSet;
    bool m_noncompliant_isValid;

    qint32 m_scanned;
    bool m_scanned_isSet;
    bool m_scanned_isValid;

    qint32 m_unenforced;
    bool m_unenforced_isSet;
    bool m_unenforced_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGoogleCloudPolicysimulatorV1OrgPolicyViolationsPreviewResourceCounts)

#endif // OAIGoogleCloudPolicysimulatorV1OrgPolicyViolationsPreviewResourceCounts_H
