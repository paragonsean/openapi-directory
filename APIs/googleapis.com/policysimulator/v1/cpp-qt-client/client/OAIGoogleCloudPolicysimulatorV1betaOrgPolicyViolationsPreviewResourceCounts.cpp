/**
 * Policy Simulator API
 *  Policy Simulator is a collection of endpoints for creating, running, and viewing a Replay. A `Replay` is a type of simulation that lets you see how your members' access to resources might change if you changed your IAM policy. During a `Replay`, Policy Simulator re-evaluates, or replays, past access attempts under both the current policy and your proposed policy, and compares those results to determine how your members' access might change under the proposed policy.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreviewResourceCounts.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreviewResourceCounts::OAIGoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreviewResourceCounts(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreviewResourceCounts::OAIGoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreviewResourceCounts() {
    this->initializeModel();
}

OAIGoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreviewResourceCounts::~OAIGoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreviewResourceCounts() {}

void OAIGoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreviewResourceCounts::initializeModel() {

    m_compliant_isSet = false;
    m_compliant_isValid = false;

    m_errors_isSet = false;
    m_errors_isValid = false;

    m_noncompliant_isSet = false;
    m_noncompliant_isValid = false;

    m_scanned_isSet = false;
    m_scanned_isValid = false;

    m_unenforced_isSet = false;
    m_unenforced_isValid = false;
}

void OAIGoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreviewResourceCounts::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreviewResourceCounts::fromJsonObject(QJsonObject json) {

    m_compliant_isValid = ::OpenAPI::fromJsonValue(m_compliant, json[QString("compliant")]);
    m_compliant_isSet = !json[QString("compliant")].isNull() && m_compliant_isValid;

    m_errors_isValid = ::OpenAPI::fromJsonValue(m_errors, json[QString("errors")]);
    m_errors_isSet = !json[QString("errors")].isNull() && m_errors_isValid;

    m_noncompliant_isValid = ::OpenAPI::fromJsonValue(m_noncompliant, json[QString("noncompliant")]);
    m_noncompliant_isSet = !json[QString("noncompliant")].isNull() && m_noncompliant_isValid;

    m_scanned_isValid = ::OpenAPI::fromJsonValue(m_scanned, json[QString("scanned")]);
    m_scanned_isSet = !json[QString("scanned")].isNull() && m_scanned_isValid;

    m_unenforced_isValid = ::OpenAPI::fromJsonValue(m_unenforced, json[QString("unenforced")]);
    m_unenforced_isSet = !json[QString("unenforced")].isNull() && m_unenforced_isValid;
}

QString OAIGoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreviewResourceCounts::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreviewResourceCounts::asJsonObject() const {
    QJsonObject obj;
    if (m_compliant_isSet) {
        obj.insert(QString("compliant"), ::OpenAPI::toJsonValue(m_compliant));
    }
    if (m_errors_isSet) {
        obj.insert(QString("errors"), ::OpenAPI::toJsonValue(m_errors));
    }
    if (m_noncompliant_isSet) {
        obj.insert(QString("noncompliant"), ::OpenAPI::toJsonValue(m_noncompliant));
    }
    if (m_scanned_isSet) {
        obj.insert(QString("scanned"), ::OpenAPI::toJsonValue(m_scanned));
    }
    if (m_unenforced_isSet) {
        obj.insert(QString("unenforced"), ::OpenAPI::toJsonValue(m_unenforced));
    }
    return obj;
}

qint32 OAIGoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreviewResourceCounts::getCompliant() const {
    return m_compliant;
}
void OAIGoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreviewResourceCounts::setCompliant(const qint32 &compliant) {
    m_compliant = compliant;
    m_compliant_isSet = true;
}

bool OAIGoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreviewResourceCounts::is_compliant_Set() const{
    return m_compliant_isSet;
}

bool OAIGoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreviewResourceCounts::is_compliant_Valid() const{
    return m_compliant_isValid;
}

qint32 OAIGoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreviewResourceCounts::getErrors() const {
    return m_errors;
}
void OAIGoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreviewResourceCounts::setErrors(const qint32 &errors) {
    m_errors = errors;
    m_errors_isSet = true;
}

bool OAIGoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreviewResourceCounts::is_errors_Set() const{
    return m_errors_isSet;
}

bool OAIGoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreviewResourceCounts::is_errors_Valid() const{
    return m_errors_isValid;
}

qint32 OAIGoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreviewResourceCounts::getNoncompliant() const {
    return m_noncompliant;
}
void OAIGoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreviewResourceCounts::setNoncompliant(const qint32 &noncompliant) {
    m_noncompliant = noncompliant;
    m_noncompliant_isSet = true;
}

bool OAIGoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreviewResourceCounts::is_noncompliant_Set() const{
    return m_noncompliant_isSet;
}

bool OAIGoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreviewResourceCounts::is_noncompliant_Valid() const{
    return m_noncompliant_isValid;
}

qint32 OAIGoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreviewResourceCounts::getScanned() const {
    return m_scanned;
}
void OAIGoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreviewResourceCounts::setScanned(const qint32 &scanned) {
    m_scanned = scanned;
    m_scanned_isSet = true;
}

bool OAIGoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreviewResourceCounts::is_scanned_Set() const{
    return m_scanned_isSet;
}

bool OAIGoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreviewResourceCounts::is_scanned_Valid() const{
    return m_scanned_isValid;
}

qint32 OAIGoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreviewResourceCounts::getUnenforced() const {
    return m_unenforced;
}
void OAIGoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreviewResourceCounts::setUnenforced(const qint32 &unenforced) {
    m_unenforced = unenforced;
    m_unenforced_isSet = true;
}

bool OAIGoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreviewResourceCounts::is_unenforced_Set() const{
    return m_unenforced_isSet;
}

bool OAIGoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreviewResourceCounts::is_unenforced_Valid() const{
    return m_unenforced_isValid;
}

bool OAIGoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreviewResourceCounts::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_compliant_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_errors_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_noncompliant_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scanned_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unenforced_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreviewResourceCounts::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
