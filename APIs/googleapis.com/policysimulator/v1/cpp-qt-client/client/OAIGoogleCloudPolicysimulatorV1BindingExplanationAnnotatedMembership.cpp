/**
 * Policy Simulator API
 *  Policy Simulator is a collection of endpoints for creating, running, and viewing a Replay. A `Replay` is a type of simulation that lets you see how your members' access to resources might change if you changed your IAM policy. During a `Replay`, Policy Simulator re-evaluates, or replays, past access attempts under both the current policy and your proposed policy, and compares those results to determine how your members' access might change under the proposed policy.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudPolicysimulatorV1BindingExplanationAnnotatedMembership.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudPolicysimulatorV1BindingExplanationAnnotatedMembership::OAIGoogleCloudPolicysimulatorV1BindingExplanationAnnotatedMembership(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudPolicysimulatorV1BindingExplanationAnnotatedMembership::OAIGoogleCloudPolicysimulatorV1BindingExplanationAnnotatedMembership() {
    this->initializeModel();
}

OAIGoogleCloudPolicysimulatorV1BindingExplanationAnnotatedMembership::~OAIGoogleCloudPolicysimulatorV1BindingExplanationAnnotatedMembership() {}

void OAIGoogleCloudPolicysimulatorV1BindingExplanationAnnotatedMembership::initializeModel() {

    m_membership_isSet = false;
    m_membership_isValid = false;

    m_relevance_isSet = false;
    m_relevance_isValid = false;
}

void OAIGoogleCloudPolicysimulatorV1BindingExplanationAnnotatedMembership::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudPolicysimulatorV1BindingExplanationAnnotatedMembership::fromJsonObject(QJsonObject json) {

    m_membership_isValid = ::OpenAPI::fromJsonValue(m_membership, json[QString("membership")]);
    m_membership_isSet = !json[QString("membership")].isNull() && m_membership_isValid;

    m_relevance_isValid = ::OpenAPI::fromJsonValue(m_relevance, json[QString("relevance")]);
    m_relevance_isSet = !json[QString("relevance")].isNull() && m_relevance_isValid;
}

QString OAIGoogleCloudPolicysimulatorV1BindingExplanationAnnotatedMembership::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudPolicysimulatorV1BindingExplanationAnnotatedMembership::asJsonObject() const {
    QJsonObject obj;
    if (m_membership_isSet) {
        obj.insert(QString("membership"), ::OpenAPI::toJsonValue(m_membership));
    }
    if (m_relevance_isSet) {
        obj.insert(QString("relevance"), ::OpenAPI::toJsonValue(m_relevance));
    }
    return obj;
}

QString OAIGoogleCloudPolicysimulatorV1BindingExplanationAnnotatedMembership::getMembership() const {
    return m_membership;
}
void OAIGoogleCloudPolicysimulatorV1BindingExplanationAnnotatedMembership::setMembership(const QString &membership) {
    m_membership = membership;
    m_membership_isSet = true;
}

bool OAIGoogleCloudPolicysimulatorV1BindingExplanationAnnotatedMembership::is_membership_Set() const{
    return m_membership_isSet;
}

bool OAIGoogleCloudPolicysimulatorV1BindingExplanationAnnotatedMembership::is_membership_Valid() const{
    return m_membership_isValid;
}

QString OAIGoogleCloudPolicysimulatorV1BindingExplanationAnnotatedMembership::getRelevance() const {
    return m_relevance;
}
void OAIGoogleCloudPolicysimulatorV1BindingExplanationAnnotatedMembership::setRelevance(const QString &relevance) {
    m_relevance = relevance;
    m_relevance_isSet = true;
}

bool OAIGoogleCloudPolicysimulatorV1BindingExplanationAnnotatedMembership::is_relevance_Set() const{
    return m_relevance_isSet;
}

bool OAIGoogleCloudPolicysimulatorV1BindingExplanationAnnotatedMembership::is_relevance_Valid() const{
    return m_relevance_isValid;
}

bool OAIGoogleCloudPolicysimulatorV1BindingExplanationAnnotatedMembership::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_membership_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_relevance_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudPolicysimulatorV1BindingExplanationAnnotatedMembership::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
