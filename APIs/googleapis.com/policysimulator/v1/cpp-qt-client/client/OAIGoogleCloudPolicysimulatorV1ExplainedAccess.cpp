/**
 * Policy Simulator API
 *  Policy Simulator is a collection of endpoints for creating, running, and viewing a Replay. A `Replay` is a type of simulation that lets you see how your members' access to resources might change if you changed your IAM policy. During a `Replay`, Policy Simulator re-evaluates, or replays, past access attempts under both the current policy and your proposed policy, and compares those results to determine how your members' access might change under the proposed policy.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudPolicysimulatorV1ExplainedAccess.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudPolicysimulatorV1ExplainedAccess::OAIGoogleCloudPolicysimulatorV1ExplainedAccess(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudPolicysimulatorV1ExplainedAccess::OAIGoogleCloudPolicysimulatorV1ExplainedAccess() {
    this->initializeModel();
}

OAIGoogleCloudPolicysimulatorV1ExplainedAccess::~OAIGoogleCloudPolicysimulatorV1ExplainedAccess() {}

void OAIGoogleCloudPolicysimulatorV1ExplainedAccess::initializeModel() {

    m_access_state_isSet = false;
    m_access_state_isValid = false;

    m_errors_isSet = false;
    m_errors_isValid = false;

    m_policies_isSet = false;
    m_policies_isValid = false;
}

void OAIGoogleCloudPolicysimulatorV1ExplainedAccess::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudPolicysimulatorV1ExplainedAccess::fromJsonObject(QJsonObject json) {

    m_access_state_isValid = ::OpenAPI::fromJsonValue(m_access_state, json[QString("accessState")]);
    m_access_state_isSet = !json[QString("accessState")].isNull() && m_access_state_isValid;

    m_errors_isValid = ::OpenAPI::fromJsonValue(m_errors, json[QString("errors")]);
    m_errors_isSet = !json[QString("errors")].isNull() && m_errors_isValid;

    m_policies_isValid = ::OpenAPI::fromJsonValue(m_policies, json[QString("policies")]);
    m_policies_isSet = !json[QString("policies")].isNull() && m_policies_isValid;
}

QString OAIGoogleCloudPolicysimulatorV1ExplainedAccess::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudPolicysimulatorV1ExplainedAccess::asJsonObject() const {
    QJsonObject obj;
    if (m_access_state_isSet) {
        obj.insert(QString("accessState"), ::OpenAPI::toJsonValue(m_access_state));
    }
    if (m_errors.size() > 0) {
        obj.insert(QString("errors"), ::OpenAPI::toJsonValue(m_errors));
    }
    if (m_policies.size() > 0) {
        obj.insert(QString("policies"), ::OpenAPI::toJsonValue(m_policies));
    }
    return obj;
}

QString OAIGoogleCloudPolicysimulatorV1ExplainedAccess::getAccessState() const {
    return m_access_state;
}
void OAIGoogleCloudPolicysimulatorV1ExplainedAccess::setAccessState(const QString &access_state) {
    m_access_state = access_state;
    m_access_state_isSet = true;
}

bool OAIGoogleCloudPolicysimulatorV1ExplainedAccess::is_access_state_Set() const{
    return m_access_state_isSet;
}

bool OAIGoogleCloudPolicysimulatorV1ExplainedAccess::is_access_state_Valid() const{
    return m_access_state_isValid;
}

QList<OAIGoogleRpcStatus> OAIGoogleCloudPolicysimulatorV1ExplainedAccess::getErrors() const {
    return m_errors;
}
void OAIGoogleCloudPolicysimulatorV1ExplainedAccess::setErrors(const QList<OAIGoogleRpcStatus> &errors) {
    m_errors = errors;
    m_errors_isSet = true;
}

bool OAIGoogleCloudPolicysimulatorV1ExplainedAccess::is_errors_Set() const{
    return m_errors_isSet;
}

bool OAIGoogleCloudPolicysimulatorV1ExplainedAccess::is_errors_Valid() const{
    return m_errors_isValid;
}

QList<OAIGoogleCloudPolicysimulatorV1ExplainedPolicy> OAIGoogleCloudPolicysimulatorV1ExplainedAccess::getPolicies() const {
    return m_policies;
}
void OAIGoogleCloudPolicysimulatorV1ExplainedAccess::setPolicies(const QList<OAIGoogleCloudPolicysimulatorV1ExplainedPolicy> &policies) {
    m_policies = policies;
    m_policies_isSet = true;
}

bool OAIGoogleCloudPolicysimulatorV1ExplainedAccess::is_policies_Set() const{
    return m_policies_isSet;
}

bool OAIGoogleCloudPolicysimulatorV1ExplainedAccess::is_policies_Valid() const{
    return m_policies_isValid;
}

bool OAIGoogleCloudPolicysimulatorV1ExplainedAccess::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_access_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_errors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_policies.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudPolicysimulatorV1ExplainedAccess::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
