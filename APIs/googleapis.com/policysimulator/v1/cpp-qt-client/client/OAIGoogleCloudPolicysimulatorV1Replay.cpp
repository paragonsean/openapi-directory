/**
 * Policy Simulator API
 *  Policy Simulator is a collection of endpoints for creating, running, and viewing a Replay. A `Replay` is a type of simulation that lets you see how your members' access to resources might change if you changed your IAM policy. During a `Replay`, Policy Simulator re-evaluates, or replays, past access attempts under both the current policy and your proposed policy, and compares those results to determine how your members' access might change under the proposed policy.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudPolicysimulatorV1Replay.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudPolicysimulatorV1Replay::OAIGoogleCloudPolicysimulatorV1Replay(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudPolicysimulatorV1Replay::OAIGoogleCloudPolicysimulatorV1Replay() {
    this->initializeModel();
}

OAIGoogleCloudPolicysimulatorV1Replay::~OAIGoogleCloudPolicysimulatorV1Replay() {}

void OAIGoogleCloudPolicysimulatorV1Replay::initializeModel() {

    m_config_isSet = false;
    m_config_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_results_summary_isSet = false;
    m_results_summary_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;
}

void OAIGoogleCloudPolicysimulatorV1Replay::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudPolicysimulatorV1Replay::fromJsonObject(QJsonObject json) {

    m_config_isValid = ::OpenAPI::fromJsonValue(m_config, json[QString("config")]);
    m_config_isSet = !json[QString("config")].isNull() && m_config_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_results_summary_isValid = ::OpenAPI::fromJsonValue(m_results_summary, json[QString("resultsSummary")]);
    m_results_summary_isSet = !json[QString("resultsSummary")].isNull() && m_results_summary_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;
}

QString OAIGoogleCloudPolicysimulatorV1Replay::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudPolicysimulatorV1Replay::asJsonObject() const {
    QJsonObject obj;
    if (m_config.isSet()) {
        obj.insert(QString("config"), ::OpenAPI::toJsonValue(m_config));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_results_summary.isSet()) {
        obj.insert(QString("resultsSummary"), ::OpenAPI::toJsonValue(m_results_summary));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    return obj;
}

OAIGoogleCloudPolicysimulatorV1ReplayConfig OAIGoogleCloudPolicysimulatorV1Replay::getConfig() const {
    return m_config;
}
void OAIGoogleCloudPolicysimulatorV1Replay::setConfig(const OAIGoogleCloudPolicysimulatorV1ReplayConfig &config) {
    m_config = config;
    m_config_isSet = true;
}

bool OAIGoogleCloudPolicysimulatorV1Replay::is_config_Set() const{
    return m_config_isSet;
}

bool OAIGoogleCloudPolicysimulatorV1Replay::is_config_Valid() const{
    return m_config_isValid;
}

QString OAIGoogleCloudPolicysimulatorV1Replay::getName() const {
    return m_name;
}
void OAIGoogleCloudPolicysimulatorV1Replay::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGoogleCloudPolicysimulatorV1Replay::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGoogleCloudPolicysimulatorV1Replay::is_name_Valid() const{
    return m_name_isValid;
}

OAIGoogleCloudPolicysimulatorV1ReplayResultsSummary OAIGoogleCloudPolicysimulatorV1Replay::getResultsSummary() const {
    return m_results_summary;
}
void OAIGoogleCloudPolicysimulatorV1Replay::setResultsSummary(const OAIGoogleCloudPolicysimulatorV1ReplayResultsSummary &results_summary) {
    m_results_summary = results_summary;
    m_results_summary_isSet = true;
}

bool OAIGoogleCloudPolicysimulatorV1Replay::is_results_summary_Set() const{
    return m_results_summary_isSet;
}

bool OAIGoogleCloudPolicysimulatorV1Replay::is_results_summary_Valid() const{
    return m_results_summary_isValid;
}

QString OAIGoogleCloudPolicysimulatorV1Replay::getState() const {
    return m_state;
}
void OAIGoogleCloudPolicysimulatorV1Replay::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIGoogleCloudPolicysimulatorV1Replay::is_state_Set() const{
    return m_state_isSet;
}

bool OAIGoogleCloudPolicysimulatorV1Replay::is_state_Valid() const{
    return m_state_isValid;
}

bool OAIGoogleCloudPolicysimulatorV1Replay::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_results_summary.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudPolicysimulatorV1Replay::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
