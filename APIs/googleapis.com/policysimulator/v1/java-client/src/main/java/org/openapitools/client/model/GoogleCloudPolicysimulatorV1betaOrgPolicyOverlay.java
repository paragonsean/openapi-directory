/*
 * Policy Simulator API
 *  Policy Simulator is a collection of endpoints for creating, running, and viewing a Replay. A `Replay` is a type of simulation that lets you see how your members' access to resources might change if you changed your IAM policy. During a `Replay`, Policy Simulator re-evaluates, or replays, past access attempts under both the current policy and your proposed policy, and compares those results to determine how your members' access might change under the proposed policy.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GoogleCloudPolicysimulatorV1betaOrgPolicyOverlayCustomConstraintOverlay;
import org.openapitools.client.model.GoogleCloudPolicysimulatorV1betaOrgPolicyOverlayPolicyOverlay;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The proposed changes to OrgPolicy.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:14.313021-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudPolicysimulatorV1betaOrgPolicyOverlay {
  public static final String SERIALIZED_NAME_CUSTOM_CONSTRAINTS = "customConstraints";
  @SerializedName(SERIALIZED_NAME_CUSTOM_CONSTRAINTS)
  private List<GoogleCloudPolicysimulatorV1betaOrgPolicyOverlayCustomConstraintOverlay> customConstraints = new ArrayList<>();

  public static final String SERIALIZED_NAME_POLICIES = "policies";
  @SerializedName(SERIALIZED_NAME_POLICIES)
  private List<GoogleCloudPolicysimulatorV1betaOrgPolicyOverlayPolicyOverlay> policies = new ArrayList<>();

  public GoogleCloudPolicysimulatorV1betaOrgPolicyOverlay() {
  }

  public GoogleCloudPolicysimulatorV1betaOrgPolicyOverlay customConstraints(List<GoogleCloudPolicysimulatorV1betaOrgPolicyOverlayCustomConstraintOverlay> customConstraints) {
    this.customConstraints = customConstraints;
    return this;
  }

  public GoogleCloudPolicysimulatorV1betaOrgPolicyOverlay addCustomConstraintsItem(GoogleCloudPolicysimulatorV1betaOrgPolicyOverlayCustomConstraintOverlay customConstraintsItem) {
    if (this.customConstraints == null) {
      this.customConstraints = new ArrayList<>();
    }
    this.customConstraints.add(customConstraintsItem);
    return this;
  }

  /**
   * Optional. The OrgPolicy CustomConstraint changes to preview violations for. Any existing CustomConstraints with the same name will be overridden in the simulation. That is, violations will be determined as if all custom constraints in the overlay were instantiated. Only a single custom_constraint is supported in the overlay at a time. For evaluating multiple constraints, multiple &#x60;GenerateOrgPolicyViolationsPreview&#x60; requests are made, where each request evaluates a single constraint.
   * @return customConstraints
   */
  @javax.annotation.Nullable
  public List<GoogleCloudPolicysimulatorV1betaOrgPolicyOverlayCustomConstraintOverlay> getCustomConstraints() {
    return customConstraints;
  }

  public void setCustomConstraints(List<GoogleCloudPolicysimulatorV1betaOrgPolicyOverlayCustomConstraintOverlay> customConstraints) {
    this.customConstraints = customConstraints;
  }


  public GoogleCloudPolicysimulatorV1betaOrgPolicyOverlay policies(List<GoogleCloudPolicysimulatorV1betaOrgPolicyOverlayPolicyOverlay> policies) {
    this.policies = policies;
    return this;
  }

  public GoogleCloudPolicysimulatorV1betaOrgPolicyOverlay addPoliciesItem(GoogleCloudPolicysimulatorV1betaOrgPolicyOverlayPolicyOverlay policiesItem) {
    if (this.policies == null) {
      this.policies = new ArrayList<>();
    }
    this.policies.add(policiesItem);
    return this;
  }

  /**
   * Optional. The OrgPolicy changes to preview violations for. Any existing OrgPolicies with the same name will be overridden in the simulation. That is, violations will be determined as if all policies in the overlay were created or updated.
   * @return policies
   */
  @javax.annotation.Nullable
  public List<GoogleCloudPolicysimulatorV1betaOrgPolicyOverlayPolicyOverlay> getPolicies() {
    return policies;
  }

  public void setPolicies(List<GoogleCloudPolicysimulatorV1betaOrgPolicyOverlayPolicyOverlay> policies) {
    this.policies = policies;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudPolicysimulatorV1betaOrgPolicyOverlay googleCloudPolicysimulatorV1betaOrgPolicyOverlay = (GoogleCloudPolicysimulatorV1betaOrgPolicyOverlay) o;
    return Objects.equals(this.customConstraints, googleCloudPolicysimulatorV1betaOrgPolicyOverlay.customConstraints) &&
        Objects.equals(this.policies, googleCloudPolicysimulatorV1betaOrgPolicyOverlay.policies);
  }

  @Override
  public int hashCode() {
    return Objects.hash(customConstraints, policies);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudPolicysimulatorV1betaOrgPolicyOverlay {\n");
    sb.append("    customConstraints: ").append(toIndentedString(customConstraints)).append("\n");
    sb.append("    policies: ").append(toIndentedString(policies)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("customConstraints");
    openapiFields.add("policies");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudPolicysimulatorV1betaOrgPolicyOverlay
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudPolicysimulatorV1betaOrgPolicyOverlay.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudPolicysimulatorV1betaOrgPolicyOverlay is not found in the empty JSON string", GoogleCloudPolicysimulatorV1betaOrgPolicyOverlay.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudPolicysimulatorV1betaOrgPolicyOverlay.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudPolicysimulatorV1betaOrgPolicyOverlay` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("customConstraints") != null && !jsonObj.get("customConstraints").isJsonNull()) {
        JsonArray jsonArraycustomConstraints = jsonObj.getAsJsonArray("customConstraints");
        if (jsonArraycustomConstraints != null) {
          // ensure the json data is an array
          if (!jsonObj.get("customConstraints").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `customConstraints` to be an array in the JSON string but got `%s`", jsonObj.get("customConstraints").toString()));
          }

          // validate the optional field `customConstraints` (array)
          for (int i = 0; i < jsonArraycustomConstraints.size(); i++) {
            GoogleCloudPolicysimulatorV1betaOrgPolicyOverlayCustomConstraintOverlay.validateJsonElement(jsonArraycustomConstraints.get(i));
          };
        }
      }
      if (jsonObj.get("policies") != null && !jsonObj.get("policies").isJsonNull()) {
        JsonArray jsonArraypolicies = jsonObj.getAsJsonArray("policies");
        if (jsonArraypolicies != null) {
          // ensure the json data is an array
          if (!jsonObj.get("policies").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `policies` to be an array in the JSON string but got `%s`", jsonObj.get("policies").toString()));
          }

          // validate the optional field `policies` (array)
          for (int i = 0; i < jsonArraypolicies.size(); i++) {
            GoogleCloudPolicysimulatorV1betaOrgPolicyOverlayPolicyOverlay.validateJsonElement(jsonArraypolicies.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudPolicysimulatorV1betaOrgPolicyOverlay.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudPolicysimulatorV1betaOrgPolicyOverlay' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudPolicysimulatorV1betaOrgPolicyOverlay> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudPolicysimulatorV1betaOrgPolicyOverlay.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudPolicysimulatorV1betaOrgPolicyOverlay>() {
           @Override
           public void write(JsonWriter out, GoogleCloudPolicysimulatorV1betaOrgPolicyOverlay value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudPolicysimulatorV1betaOrgPolicyOverlay read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudPolicysimulatorV1betaOrgPolicyOverlay given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudPolicysimulatorV1betaOrgPolicyOverlay
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudPolicysimulatorV1betaOrgPolicyOverlay
   */
  public static GoogleCloudPolicysimulatorV1betaOrgPolicyOverlay fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudPolicysimulatorV1betaOrgPolicyOverlay.class);
  }

  /**
   * Convert an instance of GoogleCloudPolicysimulatorV1betaOrgPolicyOverlay to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

