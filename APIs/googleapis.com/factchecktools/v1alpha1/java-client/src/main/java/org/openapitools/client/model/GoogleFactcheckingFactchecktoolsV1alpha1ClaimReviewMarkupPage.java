/*
 * Fact Check Tools API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1alpha1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewAuthor;
import org.openapitools.client.model.GoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkup;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Holds one or more instances of &#x60;ClaimReview&#x60; markup for a webpage.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:35:30.472839-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkupPage {
  public static final String SERIALIZED_NAME_CLAIM_REVIEW_AUTHOR = "claimReviewAuthor";
  @SerializedName(SERIALIZED_NAME_CLAIM_REVIEW_AUTHOR)
  private GoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewAuthor claimReviewAuthor;

  public static final String SERIALIZED_NAME_CLAIM_REVIEW_MARKUPS = "claimReviewMarkups";
  @SerializedName(SERIALIZED_NAME_CLAIM_REVIEW_MARKUPS)
  private List<GoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkup> claimReviewMarkups = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PAGE_URL = "pageUrl";
  @SerializedName(SERIALIZED_NAME_PAGE_URL)
  private String pageUrl;

  public static final String SERIALIZED_NAME_PUBLISH_DATE = "publishDate";
  @SerializedName(SERIALIZED_NAME_PUBLISH_DATE)
  private String publishDate;

  public static final String SERIALIZED_NAME_VERSION_ID = "versionId";
  @SerializedName(SERIALIZED_NAME_VERSION_ID)
  private String versionId;

  public GoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkupPage() {
  }

  public GoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkupPage claimReviewAuthor(GoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewAuthor claimReviewAuthor) {
    this.claimReviewAuthor = claimReviewAuthor;
    return this;
  }

  /**
   * Get claimReviewAuthor
   * @return claimReviewAuthor
   */
  @javax.annotation.Nullable
  public GoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewAuthor getClaimReviewAuthor() {
    return claimReviewAuthor;
  }

  public void setClaimReviewAuthor(GoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewAuthor claimReviewAuthor) {
    this.claimReviewAuthor = claimReviewAuthor;
  }


  public GoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkupPage claimReviewMarkups(List<GoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkup> claimReviewMarkups) {
    this.claimReviewMarkups = claimReviewMarkups;
    return this;
  }

  public GoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkupPage addClaimReviewMarkupsItem(GoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkup claimReviewMarkupsItem) {
    if (this.claimReviewMarkups == null) {
      this.claimReviewMarkups = new ArrayList<>();
    }
    this.claimReviewMarkups.add(claimReviewMarkupsItem);
    return this;
  }

  /**
   * A list of individual claim reviews for this page. Each item in the list corresponds to one &#x60;ClaimReview&#x60; element.
   * @return claimReviewMarkups
   */
  @javax.annotation.Nullable
  public List<GoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkup> getClaimReviewMarkups() {
    return claimReviewMarkups;
  }

  public void setClaimReviewMarkups(List<GoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkup> claimReviewMarkups) {
    this.claimReviewMarkups = claimReviewMarkups;
  }


  public GoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkupPage name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of this &#x60;ClaimReview&#x60; markup page resource, in the form of &#x60;pages/{page_id}&#x60;. Except for update requests, this field is output-only and should not be set by the user.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public GoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkupPage pageUrl(String pageUrl) {
    this.pageUrl = pageUrl;
    return this;
  }

  /**
   * The URL of the page associated with this &#x60;ClaimReview&#x60; markup. While every individual &#x60;ClaimReview&#x60; has its own URL field, semantically this is a page-level field, and each &#x60;ClaimReview&#x60; on this page will use this value unless individually overridden. Corresponds to &#x60;ClaimReview.url&#x60;
   * @return pageUrl
   */
  @javax.annotation.Nullable
  public String getPageUrl() {
    return pageUrl;
  }

  public void setPageUrl(String pageUrl) {
    this.pageUrl = pageUrl;
  }


  public GoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkupPage publishDate(String publishDate) {
    this.publishDate = publishDate;
    return this;
  }

  /**
   * The date when the fact check was published. Similar to the URL, semantically this is a page-level field, and each &#x60;ClaimReview&#x60; on this page will contain the same value. Corresponds to &#x60;ClaimReview.datePublished&#x60;
   * @return publishDate
   */
  @javax.annotation.Nullable
  public String getPublishDate() {
    return publishDate;
  }

  public void setPublishDate(String publishDate) {
    this.publishDate = publishDate;
  }


  public GoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkupPage versionId(String versionId) {
    this.versionId = versionId;
    return this;
  }

  /**
   * The version ID for this markup. Except for update requests, this field is output-only and should not be set by the user.
   * @return versionId
   */
  @javax.annotation.Nullable
  public String getVersionId() {
    return versionId;
  }

  public void setVersionId(String versionId) {
    this.versionId = versionId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkupPage googleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkupPage = (GoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkupPage) o;
    return Objects.equals(this.claimReviewAuthor, googleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkupPage.claimReviewAuthor) &&
        Objects.equals(this.claimReviewMarkups, googleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkupPage.claimReviewMarkups) &&
        Objects.equals(this.name, googleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkupPage.name) &&
        Objects.equals(this.pageUrl, googleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkupPage.pageUrl) &&
        Objects.equals(this.publishDate, googleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkupPage.publishDate) &&
        Objects.equals(this.versionId, googleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkupPage.versionId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(claimReviewAuthor, claimReviewMarkups, name, pageUrl, publishDate, versionId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkupPage {\n");
    sb.append("    claimReviewAuthor: ").append(toIndentedString(claimReviewAuthor)).append("\n");
    sb.append("    claimReviewMarkups: ").append(toIndentedString(claimReviewMarkups)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    pageUrl: ").append(toIndentedString(pageUrl)).append("\n");
    sb.append("    publishDate: ").append(toIndentedString(publishDate)).append("\n");
    sb.append("    versionId: ").append(toIndentedString(versionId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("claimReviewAuthor");
    openapiFields.add("claimReviewMarkups");
    openapiFields.add("name");
    openapiFields.add("pageUrl");
    openapiFields.add("publishDate");
    openapiFields.add("versionId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkupPage
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkupPage.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkupPage is not found in the empty JSON string", GoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkupPage.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkupPage.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkupPage` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `claimReviewAuthor`
      if (jsonObj.get("claimReviewAuthor") != null && !jsonObj.get("claimReviewAuthor").isJsonNull()) {
        GoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewAuthor.validateJsonElement(jsonObj.get("claimReviewAuthor"));
      }
      if (jsonObj.get("claimReviewMarkups") != null && !jsonObj.get("claimReviewMarkups").isJsonNull()) {
        JsonArray jsonArrayclaimReviewMarkups = jsonObj.getAsJsonArray("claimReviewMarkups");
        if (jsonArrayclaimReviewMarkups != null) {
          // ensure the json data is an array
          if (!jsonObj.get("claimReviewMarkups").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `claimReviewMarkups` to be an array in the JSON string but got `%s`", jsonObj.get("claimReviewMarkups").toString()));
          }

          // validate the optional field `claimReviewMarkups` (array)
          for (int i = 0; i < jsonArrayclaimReviewMarkups.size(); i++) {
            GoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkup.validateJsonElement(jsonArrayclaimReviewMarkups.get(i));
          };
        }
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("pageUrl") != null && !jsonObj.get("pageUrl").isJsonNull()) && !jsonObj.get("pageUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pageUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pageUrl").toString()));
      }
      if ((jsonObj.get("publishDate") != null && !jsonObj.get("publishDate").isJsonNull()) && !jsonObj.get("publishDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `publishDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("publishDate").toString()));
      }
      if ((jsonObj.get("versionId") != null && !jsonObj.get("versionId").isJsonNull()) && !jsonObj.get("versionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `versionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("versionId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkupPage.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkupPage' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkupPage> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkupPage.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkupPage>() {
           @Override
           public void write(JsonWriter out, GoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkupPage value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkupPage read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkupPage given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkupPage
   * @throws IOException if the JSON string is invalid with respect to GoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkupPage
   */
  public static GoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkupPage fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkupPage.class);
  }

  /**
   * Convert an instance of GoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkupPage to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

