/*
 * Fact Check Tools API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1alpha1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Information about the claim rating.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:35:30.472839-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleFactcheckingFactchecktoolsV1alpha1ClaimRating {
  public static final String SERIALIZED_NAME_BEST_RATING = "bestRating";
  @SerializedName(SERIALIZED_NAME_BEST_RATING)
  private Integer bestRating;

  public static final String SERIALIZED_NAME_IMAGE_URL = "imageUrl";
  @SerializedName(SERIALIZED_NAME_IMAGE_URL)
  private String imageUrl;

  public static final String SERIALIZED_NAME_RATING_EXPLANATION = "ratingExplanation";
  @SerializedName(SERIALIZED_NAME_RATING_EXPLANATION)
  private String ratingExplanation;

  public static final String SERIALIZED_NAME_RATING_VALUE = "ratingValue";
  @SerializedName(SERIALIZED_NAME_RATING_VALUE)
  private Integer ratingValue;

  public static final String SERIALIZED_NAME_TEXTUAL_RATING = "textualRating";
  @SerializedName(SERIALIZED_NAME_TEXTUAL_RATING)
  private String textualRating;

  public static final String SERIALIZED_NAME_WORST_RATING = "worstRating";
  @SerializedName(SERIALIZED_NAME_WORST_RATING)
  private Integer worstRating;

  public GoogleFactcheckingFactchecktoolsV1alpha1ClaimRating() {
  }

  public GoogleFactcheckingFactchecktoolsV1alpha1ClaimRating bestRating(Integer bestRating) {
    this.bestRating = bestRating;
    return this;
  }

  /**
   * For numeric ratings, the best value possible in the scale from worst to best. Corresponds to &#x60;ClaimReview.reviewRating.bestRating&#x60;.
   * @return bestRating
   */
  @javax.annotation.Nullable
  public Integer getBestRating() {
    return bestRating;
  }

  public void setBestRating(Integer bestRating) {
    this.bestRating = bestRating;
  }


  public GoogleFactcheckingFactchecktoolsV1alpha1ClaimRating imageUrl(String imageUrl) {
    this.imageUrl = imageUrl;
    return this;
  }

  /**
   * Corresponds to &#x60;ClaimReview.reviewRating.image&#x60;.
   * @return imageUrl
   */
  @javax.annotation.Nullable
  public String getImageUrl() {
    return imageUrl;
  }

  public void setImageUrl(String imageUrl) {
    this.imageUrl = imageUrl;
  }


  public GoogleFactcheckingFactchecktoolsV1alpha1ClaimRating ratingExplanation(String ratingExplanation) {
    this.ratingExplanation = ratingExplanation;
    return this;
  }

  /**
   * Corresponds to &#x60;ClaimReview.reviewRating.ratingExplanation&#x60;.
   * @return ratingExplanation
   */
  @javax.annotation.Nullable
  public String getRatingExplanation() {
    return ratingExplanation;
  }

  public void setRatingExplanation(String ratingExplanation) {
    this.ratingExplanation = ratingExplanation;
  }


  public GoogleFactcheckingFactchecktoolsV1alpha1ClaimRating ratingValue(Integer ratingValue) {
    this.ratingValue = ratingValue;
    return this;
  }

  /**
   * A numeric rating of this claim, in the range worstRating â€” bestRating inclusive. Corresponds to &#x60;ClaimReview.reviewRating.ratingValue&#x60;.
   * @return ratingValue
   */
  @javax.annotation.Nullable
  public Integer getRatingValue() {
    return ratingValue;
  }

  public void setRatingValue(Integer ratingValue) {
    this.ratingValue = ratingValue;
  }


  public GoogleFactcheckingFactchecktoolsV1alpha1ClaimRating textualRating(String textualRating) {
    this.textualRating = textualRating;
    return this;
  }

  /**
   * The truthfulness rating as a human-readible short word or phrase. Corresponds to &#x60;ClaimReview.reviewRating.alternateName&#x60;.
   * @return textualRating
   */
  @javax.annotation.Nullable
  public String getTextualRating() {
    return textualRating;
  }

  public void setTextualRating(String textualRating) {
    this.textualRating = textualRating;
  }


  public GoogleFactcheckingFactchecktoolsV1alpha1ClaimRating worstRating(Integer worstRating) {
    this.worstRating = worstRating;
    return this;
  }

  /**
   * For numeric ratings, the worst value possible in the scale from worst to best. Corresponds to &#x60;ClaimReview.reviewRating.worstRating&#x60;.
   * @return worstRating
   */
  @javax.annotation.Nullable
  public Integer getWorstRating() {
    return worstRating;
  }

  public void setWorstRating(Integer worstRating) {
    this.worstRating = worstRating;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleFactcheckingFactchecktoolsV1alpha1ClaimRating googleFactcheckingFactchecktoolsV1alpha1ClaimRating = (GoogleFactcheckingFactchecktoolsV1alpha1ClaimRating) o;
    return Objects.equals(this.bestRating, googleFactcheckingFactchecktoolsV1alpha1ClaimRating.bestRating) &&
        Objects.equals(this.imageUrl, googleFactcheckingFactchecktoolsV1alpha1ClaimRating.imageUrl) &&
        Objects.equals(this.ratingExplanation, googleFactcheckingFactchecktoolsV1alpha1ClaimRating.ratingExplanation) &&
        Objects.equals(this.ratingValue, googleFactcheckingFactchecktoolsV1alpha1ClaimRating.ratingValue) &&
        Objects.equals(this.textualRating, googleFactcheckingFactchecktoolsV1alpha1ClaimRating.textualRating) &&
        Objects.equals(this.worstRating, googleFactcheckingFactchecktoolsV1alpha1ClaimRating.worstRating);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bestRating, imageUrl, ratingExplanation, ratingValue, textualRating, worstRating);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleFactcheckingFactchecktoolsV1alpha1ClaimRating {\n");
    sb.append("    bestRating: ").append(toIndentedString(bestRating)).append("\n");
    sb.append("    imageUrl: ").append(toIndentedString(imageUrl)).append("\n");
    sb.append("    ratingExplanation: ").append(toIndentedString(ratingExplanation)).append("\n");
    sb.append("    ratingValue: ").append(toIndentedString(ratingValue)).append("\n");
    sb.append("    textualRating: ").append(toIndentedString(textualRating)).append("\n");
    sb.append("    worstRating: ").append(toIndentedString(worstRating)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bestRating");
    openapiFields.add("imageUrl");
    openapiFields.add("ratingExplanation");
    openapiFields.add("ratingValue");
    openapiFields.add("textualRating");
    openapiFields.add("worstRating");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleFactcheckingFactchecktoolsV1alpha1ClaimRating
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleFactcheckingFactchecktoolsV1alpha1ClaimRating.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleFactcheckingFactchecktoolsV1alpha1ClaimRating is not found in the empty JSON string", GoogleFactcheckingFactchecktoolsV1alpha1ClaimRating.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleFactcheckingFactchecktoolsV1alpha1ClaimRating.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleFactcheckingFactchecktoolsV1alpha1ClaimRating` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("imageUrl") != null && !jsonObj.get("imageUrl").isJsonNull()) && !jsonObj.get("imageUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `imageUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("imageUrl").toString()));
      }
      if ((jsonObj.get("ratingExplanation") != null && !jsonObj.get("ratingExplanation").isJsonNull()) && !jsonObj.get("ratingExplanation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ratingExplanation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ratingExplanation").toString()));
      }
      if ((jsonObj.get("textualRating") != null && !jsonObj.get("textualRating").isJsonNull()) && !jsonObj.get("textualRating").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `textualRating` to be a primitive type in the JSON string but got `%s`", jsonObj.get("textualRating").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleFactcheckingFactchecktoolsV1alpha1ClaimRating.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleFactcheckingFactchecktoolsV1alpha1ClaimRating' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleFactcheckingFactchecktoolsV1alpha1ClaimRating> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleFactcheckingFactchecktoolsV1alpha1ClaimRating.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleFactcheckingFactchecktoolsV1alpha1ClaimRating>() {
           @Override
           public void write(JsonWriter out, GoogleFactcheckingFactchecktoolsV1alpha1ClaimRating value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleFactcheckingFactchecktoolsV1alpha1ClaimRating read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleFactcheckingFactchecktoolsV1alpha1ClaimRating given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleFactcheckingFactchecktoolsV1alpha1ClaimRating
   * @throws IOException if the JSON string is invalid with respect to GoogleFactcheckingFactchecktoolsV1alpha1ClaimRating
   */
  public static GoogleFactcheckingFactchecktoolsV1alpha1ClaimRating fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleFactcheckingFactchecktoolsV1alpha1ClaimRating.class);
  }

  /**
   * Convert an instance of GoogleFactcheckingFactchecktoolsV1alpha1ClaimRating to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

