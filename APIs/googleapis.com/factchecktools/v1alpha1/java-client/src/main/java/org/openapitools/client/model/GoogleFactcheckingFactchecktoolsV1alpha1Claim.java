/*
 * Fact Check Tools API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1alpha1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GoogleFactcheckingFactchecktoolsV1alpha1ClaimReview;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Information about the claim.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:35:30.472839-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleFactcheckingFactchecktoolsV1alpha1Claim {
  public static final String SERIALIZED_NAME_CLAIM_DATE = "claimDate";
  @SerializedName(SERIALIZED_NAME_CLAIM_DATE)
  private String claimDate;

  public static final String SERIALIZED_NAME_CLAIM_REVIEW = "claimReview";
  @SerializedName(SERIALIZED_NAME_CLAIM_REVIEW)
  private List<GoogleFactcheckingFactchecktoolsV1alpha1ClaimReview> claimReview = new ArrayList<>();

  public static final String SERIALIZED_NAME_CLAIMANT = "claimant";
  @SerializedName(SERIALIZED_NAME_CLAIMANT)
  private String claimant;

  public static final String SERIALIZED_NAME_TEXT = "text";
  @SerializedName(SERIALIZED_NAME_TEXT)
  private String text;

  public GoogleFactcheckingFactchecktoolsV1alpha1Claim() {
  }

  public GoogleFactcheckingFactchecktoolsV1alpha1Claim claimDate(String claimDate) {
    this.claimDate = claimDate;
    return this;
  }

  /**
   * The date that the claim was made.
   * @return claimDate
   */
  @javax.annotation.Nullable
  public String getClaimDate() {
    return claimDate;
  }

  public void setClaimDate(String claimDate) {
    this.claimDate = claimDate;
  }


  public GoogleFactcheckingFactchecktoolsV1alpha1Claim claimReview(List<GoogleFactcheckingFactchecktoolsV1alpha1ClaimReview> claimReview) {
    this.claimReview = claimReview;
    return this;
  }

  public GoogleFactcheckingFactchecktoolsV1alpha1Claim addClaimReviewItem(GoogleFactcheckingFactchecktoolsV1alpha1ClaimReview claimReviewItem) {
    if (this.claimReview == null) {
      this.claimReview = new ArrayList<>();
    }
    this.claimReview.add(claimReviewItem);
    return this;
  }

  /**
   * One or more reviews of this claim (namely, a fact-checking article).
   * @return claimReview
   */
  @javax.annotation.Nullable
  public List<GoogleFactcheckingFactchecktoolsV1alpha1ClaimReview> getClaimReview() {
    return claimReview;
  }

  public void setClaimReview(List<GoogleFactcheckingFactchecktoolsV1alpha1ClaimReview> claimReview) {
    this.claimReview = claimReview;
  }


  public GoogleFactcheckingFactchecktoolsV1alpha1Claim claimant(String claimant) {
    this.claimant = claimant;
    return this;
  }

  /**
   * A person or organization stating the claim. For instance, \&quot;John Doe\&quot;.
   * @return claimant
   */
  @javax.annotation.Nullable
  public String getClaimant() {
    return claimant;
  }

  public void setClaimant(String claimant) {
    this.claimant = claimant;
  }


  public GoogleFactcheckingFactchecktoolsV1alpha1Claim text(String text) {
    this.text = text;
    return this;
  }

  /**
   * The claim text. For instance, \&quot;Crime has doubled in the last 2 years.\&quot;
   * @return text
   */
  @javax.annotation.Nullable
  public String getText() {
    return text;
  }

  public void setText(String text) {
    this.text = text;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleFactcheckingFactchecktoolsV1alpha1Claim googleFactcheckingFactchecktoolsV1alpha1Claim = (GoogleFactcheckingFactchecktoolsV1alpha1Claim) o;
    return Objects.equals(this.claimDate, googleFactcheckingFactchecktoolsV1alpha1Claim.claimDate) &&
        Objects.equals(this.claimReview, googleFactcheckingFactchecktoolsV1alpha1Claim.claimReview) &&
        Objects.equals(this.claimant, googleFactcheckingFactchecktoolsV1alpha1Claim.claimant) &&
        Objects.equals(this.text, googleFactcheckingFactchecktoolsV1alpha1Claim.text);
  }

  @Override
  public int hashCode() {
    return Objects.hash(claimDate, claimReview, claimant, text);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleFactcheckingFactchecktoolsV1alpha1Claim {\n");
    sb.append("    claimDate: ").append(toIndentedString(claimDate)).append("\n");
    sb.append("    claimReview: ").append(toIndentedString(claimReview)).append("\n");
    sb.append("    claimant: ").append(toIndentedString(claimant)).append("\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("claimDate");
    openapiFields.add("claimReview");
    openapiFields.add("claimant");
    openapiFields.add("text");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleFactcheckingFactchecktoolsV1alpha1Claim
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleFactcheckingFactchecktoolsV1alpha1Claim.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleFactcheckingFactchecktoolsV1alpha1Claim is not found in the empty JSON string", GoogleFactcheckingFactchecktoolsV1alpha1Claim.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleFactcheckingFactchecktoolsV1alpha1Claim.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleFactcheckingFactchecktoolsV1alpha1Claim` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("claimDate") != null && !jsonObj.get("claimDate").isJsonNull()) && !jsonObj.get("claimDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `claimDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("claimDate").toString()));
      }
      if (jsonObj.get("claimReview") != null && !jsonObj.get("claimReview").isJsonNull()) {
        JsonArray jsonArrayclaimReview = jsonObj.getAsJsonArray("claimReview");
        if (jsonArrayclaimReview != null) {
          // ensure the json data is an array
          if (!jsonObj.get("claimReview").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `claimReview` to be an array in the JSON string but got `%s`", jsonObj.get("claimReview").toString()));
          }

          // validate the optional field `claimReview` (array)
          for (int i = 0; i < jsonArrayclaimReview.size(); i++) {
            GoogleFactcheckingFactchecktoolsV1alpha1ClaimReview.validateJsonElement(jsonArrayclaimReview.get(i));
          };
        }
      }
      if ((jsonObj.get("claimant") != null && !jsonObj.get("claimant").isJsonNull()) && !jsonObj.get("claimant").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `claimant` to be a primitive type in the JSON string but got `%s`", jsonObj.get("claimant").toString()));
      }
      if ((jsonObj.get("text") != null && !jsonObj.get("text").isJsonNull()) && !jsonObj.get("text").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `text` to be a primitive type in the JSON string but got `%s`", jsonObj.get("text").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleFactcheckingFactchecktoolsV1alpha1Claim.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleFactcheckingFactchecktoolsV1alpha1Claim' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleFactcheckingFactchecktoolsV1alpha1Claim> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleFactcheckingFactchecktoolsV1alpha1Claim.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleFactcheckingFactchecktoolsV1alpha1Claim>() {
           @Override
           public void write(JsonWriter out, GoogleFactcheckingFactchecktoolsV1alpha1Claim value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleFactcheckingFactchecktoolsV1alpha1Claim read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleFactcheckingFactchecktoolsV1alpha1Claim given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleFactcheckingFactchecktoolsV1alpha1Claim
   * @throws IOException if the JSON string is invalid with respect to GoogleFactcheckingFactchecktoolsV1alpha1Claim
   */
  public static GoogleFactcheckingFactchecktoolsV1alpha1Claim fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleFactcheckingFactchecktoolsV1alpha1Claim.class);
  }

  /**
   * Convert an instance of GoogleFactcheckingFactchecktoolsV1alpha1Claim to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

