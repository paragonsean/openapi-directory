/*
 * Fact Check Tools API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1alpha1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GoogleFactcheckingFactchecktoolsV1alpha1ClaimAuthor;
import org.openapitools.client.model.GoogleFactcheckingFactchecktoolsV1alpha1ClaimRating;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Fields for an individual &#x60;ClaimReview&#x60; element. Except for sub-messages that group fields together, each of these fields correspond those in https://schema.org/ClaimReview. We list the precise mapping for each field.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:35:30.472839-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkup {
  public static final String SERIALIZED_NAME_CLAIM_APPEARANCES = "claimAppearances";
  @SerializedName(SERIALIZED_NAME_CLAIM_APPEARANCES)
  private List<String> claimAppearances = new ArrayList<>();

  public static final String SERIALIZED_NAME_CLAIM_AUTHOR = "claimAuthor";
  @SerializedName(SERIALIZED_NAME_CLAIM_AUTHOR)
  private GoogleFactcheckingFactchecktoolsV1alpha1ClaimAuthor claimAuthor;

  public static final String SERIALIZED_NAME_CLAIM_DATE = "claimDate";
  @SerializedName(SERIALIZED_NAME_CLAIM_DATE)
  private String claimDate;

  public static final String SERIALIZED_NAME_CLAIM_FIRST_APPEARANCE = "claimFirstAppearance";
  @SerializedName(SERIALIZED_NAME_CLAIM_FIRST_APPEARANCE)
  private String claimFirstAppearance;

  public static final String SERIALIZED_NAME_CLAIM_LOCATION = "claimLocation";
  @SerializedName(SERIALIZED_NAME_CLAIM_LOCATION)
  private String claimLocation;

  public static final String SERIALIZED_NAME_CLAIM_REVIEWED = "claimReviewed";
  @SerializedName(SERIALIZED_NAME_CLAIM_REVIEWED)
  private String claimReviewed;

  public static final String SERIALIZED_NAME_RATING = "rating";
  @SerializedName(SERIALIZED_NAME_RATING)
  private GoogleFactcheckingFactchecktoolsV1alpha1ClaimRating rating;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public GoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkup() {
  }

  public GoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkup claimAppearances(List<String> claimAppearances) {
    this.claimAppearances = claimAppearances;
    return this;
  }

  public GoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkup addClaimAppearancesItem(String claimAppearancesItem) {
    if (this.claimAppearances == null) {
      this.claimAppearances = new ArrayList<>();
    }
    this.claimAppearances.add(claimAppearancesItem);
    return this;
  }

  /**
   * A list of links to works in which this claim appears, aside from the one specified in &#x60;claim_first_appearance&#x60;. Corresponds to &#x60;ClaimReview.itemReviewed[@type&#x3D;Claim].appearance.url&#x60;.
   * @return claimAppearances
   */
  @javax.annotation.Nullable
  public List<String> getClaimAppearances() {
    return claimAppearances;
  }

  public void setClaimAppearances(List<String> claimAppearances) {
    this.claimAppearances = claimAppearances;
  }


  public GoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkup claimAuthor(GoogleFactcheckingFactchecktoolsV1alpha1ClaimAuthor claimAuthor) {
    this.claimAuthor = claimAuthor;
    return this;
  }

  /**
   * Get claimAuthor
   * @return claimAuthor
   */
  @javax.annotation.Nullable
  public GoogleFactcheckingFactchecktoolsV1alpha1ClaimAuthor getClaimAuthor() {
    return claimAuthor;
  }

  public void setClaimAuthor(GoogleFactcheckingFactchecktoolsV1alpha1ClaimAuthor claimAuthor) {
    this.claimAuthor = claimAuthor;
  }


  public GoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkup claimDate(String claimDate) {
    this.claimDate = claimDate;
    return this;
  }

  /**
   * The date when the claim was made or entered public discourse. Corresponds to &#x60;ClaimReview.itemReviewed.datePublished&#x60;.
   * @return claimDate
   */
  @javax.annotation.Nullable
  public String getClaimDate() {
    return claimDate;
  }

  public void setClaimDate(String claimDate) {
    this.claimDate = claimDate;
  }


  public GoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkup claimFirstAppearance(String claimFirstAppearance) {
    this.claimFirstAppearance = claimFirstAppearance;
    return this;
  }

  /**
   * A link to a work in which this claim first appears. Corresponds to &#x60;ClaimReview.itemReviewed[@type&#x3D;Claim].firstAppearance.url&#x60;.
   * @return claimFirstAppearance
   */
  @javax.annotation.Nullable
  public String getClaimFirstAppearance() {
    return claimFirstAppearance;
  }

  public void setClaimFirstAppearance(String claimFirstAppearance) {
    this.claimFirstAppearance = claimFirstAppearance;
  }


  public GoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkup claimLocation(String claimLocation) {
    this.claimLocation = claimLocation;
    return this;
  }

  /**
   * The location where this claim was made. Corresponds to &#x60;ClaimReview.itemReviewed.name&#x60;.
   * @return claimLocation
   */
  @javax.annotation.Nullable
  public String getClaimLocation() {
    return claimLocation;
  }

  public void setClaimLocation(String claimLocation) {
    this.claimLocation = claimLocation;
  }


  public GoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkup claimReviewed(String claimReviewed) {
    this.claimReviewed = claimReviewed;
    return this;
  }

  /**
   * A short summary of the claim being evaluated. Corresponds to &#x60;ClaimReview.claimReviewed&#x60;.
   * @return claimReviewed
   */
  @javax.annotation.Nullable
  public String getClaimReviewed() {
    return claimReviewed;
  }

  public void setClaimReviewed(String claimReviewed) {
    this.claimReviewed = claimReviewed;
  }


  public GoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkup rating(GoogleFactcheckingFactchecktoolsV1alpha1ClaimRating rating) {
    this.rating = rating;
    return this;
  }

  /**
   * Get rating
   * @return rating
   */
  @javax.annotation.Nullable
  public GoogleFactcheckingFactchecktoolsV1alpha1ClaimRating getRating() {
    return rating;
  }

  public void setRating(GoogleFactcheckingFactchecktoolsV1alpha1ClaimRating rating) {
    this.rating = rating;
  }


  public GoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkup url(String url) {
    this.url = url;
    return this;
  }

  /**
   * This field is optional, and will default to the page URL. We provide this field to allow you the override the default value, but the only permitted override is the page URL plus an optional anchor link (\&quot;page jump\&quot;). Corresponds to &#x60;ClaimReview.url&#x60;
   * @return url
   */
  @javax.annotation.Nullable
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkup googleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkup = (GoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkup) o;
    return Objects.equals(this.claimAppearances, googleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkup.claimAppearances) &&
        Objects.equals(this.claimAuthor, googleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkup.claimAuthor) &&
        Objects.equals(this.claimDate, googleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkup.claimDate) &&
        Objects.equals(this.claimFirstAppearance, googleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkup.claimFirstAppearance) &&
        Objects.equals(this.claimLocation, googleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkup.claimLocation) &&
        Objects.equals(this.claimReviewed, googleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkup.claimReviewed) &&
        Objects.equals(this.rating, googleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkup.rating) &&
        Objects.equals(this.url, googleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkup.url);
  }

  @Override
  public int hashCode() {
    return Objects.hash(claimAppearances, claimAuthor, claimDate, claimFirstAppearance, claimLocation, claimReviewed, rating, url);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkup {\n");
    sb.append("    claimAppearances: ").append(toIndentedString(claimAppearances)).append("\n");
    sb.append("    claimAuthor: ").append(toIndentedString(claimAuthor)).append("\n");
    sb.append("    claimDate: ").append(toIndentedString(claimDate)).append("\n");
    sb.append("    claimFirstAppearance: ").append(toIndentedString(claimFirstAppearance)).append("\n");
    sb.append("    claimLocation: ").append(toIndentedString(claimLocation)).append("\n");
    sb.append("    claimReviewed: ").append(toIndentedString(claimReviewed)).append("\n");
    sb.append("    rating: ").append(toIndentedString(rating)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("claimAppearances");
    openapiFields.add("claimAuthor");
    openapiFields.add("claimDate");
    openapiFields.add("claimFirstAppearance");
    openapiFields.add("claimLocation");
    openapiFields.add("claimReviewed");
    openapiFields.add("rating");
    openapiFields.add("url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkup
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkup.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkup is not found in the empty JSON string", GoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkup.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkup.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkup` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("claimAppearances") != null && !jsonObj.get("claimAppearances").isJsonNull() && !jsonObj.get("claimAppearances").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `claimAppearances` to be an array in the JSON string but got `%s`", jsonObj.get("claimAppearances").toString()));
      }
      // validate the optional field `claimAuthor`
      if (jsonObj.get("claimAuthor") != null && !jsonObj.get("claimAuthor").isJsonNull()) {
        GoogleFactcheckingFactchecktoolsV1alpha1ClaimAuthor.validateJsonElement(jsonObj.get("claimAuthor"));
      }
      if ((jsonObj.get("claimDate") != null && !jsonObj.get("claimDate").isJsonNull()) && !jsonObj.get("claimDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `claimDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("claimDate").toString()));
      }
      if ((jsonObj.get("claimFirstAppearance") != null && !jsonObj.get("claimFirstAppearance").isJsonNull()) && !jsonObj.get("claimFirstAppearance").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `claimFirstAppearance` to be a primitive type in the JSON string but got `%s`", jsonObj.get("claimFirstAppearance").toString()));
      }
      if ((jsonObj.get("claimLocation") != null && !jsonObj.get("claimLocation").isJsonNull()) && !jsonObj.get("claimLocation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `claimLocation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("claimLocation").toString()));
      }
      if ((jsonObj.get("claimReviewed") != null && !jsonObj.get("claimReviewed").isJsonNull()) && !jsonObj.get("claimReviewed").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `claimReviewed` to be a primitive type in the JSON string but got `%s`", jsonObj.get("claimReviewed").toString()));
      }
      // validate the optional field `rating`
      if (jsonObj.get("rating") != null && !jsonObj.get("rating").isJsonNull()) {
        GoogleFactcheckingFactchecktoolsV1alpha1ClaimRating.validateJsonElement(jsonObj.get("rating"));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkup.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkup' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkup> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkup.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkup>() {
           @Override
           public void write(JsonWriter out, GoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkup value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkup read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkup given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkup
   * @throws IOException if the JSON string is invalid with respect to GoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkup
   */
  public static GoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkup fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkup.class);
  }

  /**
   * Convert an instance of GoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkup to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

