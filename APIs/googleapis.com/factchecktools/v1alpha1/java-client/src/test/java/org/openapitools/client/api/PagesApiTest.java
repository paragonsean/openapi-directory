/*
 * Fact Check Tools API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1alpha1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.GoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkupPage;
import org.openapitools.client.model.GoogleFactcheckingFactchecktoolsV1alpha1ListClaimReviewMarkupPagesResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PagesApi
 */
@Disabled
public class PagesApiTest {

    private final PagesApi api = new PagesApi();

    /**
     * Create &#x60;ClaimReview&#x60; markup on a page.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void factchecktoolsPagesCreateTest() throws ApiException {
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkupPage googleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkupPage = null;
        GoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkupPage response = api.factchecktoolsPagesCreate($xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkupPage);
        // TODO: test validations
    }

    /**
     * Delete all &#x60;ClaimReview&#x60; markup on a page.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void factchecktoolsPagesDeleteTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object response = api.factchecktoolsPagesDelete(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Get all &#x60;ClaimReview&#x60; markup on a page.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void factchecktoolsPagesGetTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkupPage response = api.factchecktoolsPagesGet(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * List the &#x60;ClaimReview&#x60; markup pages for a specific URL or for an organization.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void factchecktoolsPagesListTest() throws ApiException {
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer offset = null;
        String organization = null;
        Integer pageSize = null;
        String pageToken = null;
        String url = null;
        GoogleFactcheckingFactchecktoolsV1alpha1ListClaimReviewMarkupPagesResponse response = api.factchecktoolsPagesList($xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, offset, organization, pageSize, pageToken, url);
        // TODO: test validations
    }

    /**
     * Update for all &#x60;ClaimReview&#x60; markup on a page Note that this is a full update. To retain the existing &#x60;ClaimReview&#x60; markup on a page, first perform a Get operation, then modify the returned markup, and finally call Update with the entire &#x60;ClaimReview&#x60; markup as the body.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void factchecktoolsPagesUpdateTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkupPage googleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkupPage = null;
        GoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkupPage response = api.factchecktoolsPagesUpdate(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkupPage);
        // TODO: test validations
    }

}
