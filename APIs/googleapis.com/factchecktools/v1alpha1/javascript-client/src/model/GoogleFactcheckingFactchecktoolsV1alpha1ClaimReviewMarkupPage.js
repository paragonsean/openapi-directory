/**
 * Fact Check Tools API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1alpha1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewAuthor from './GoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewAuthor';
import GoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkup from './GoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkup';

/**
 * The GoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkupPage model module.
 * @module model/GoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkupPage
 * @version v1alpha1
 */
class GoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkupPage {
    /**
     * Constructs a new <code>GoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkupPage</code>.
     * Holds one or more instances of &#x60;ClaimReview&#x60; markup for a webpage.
     * @alias module:model/GoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkupPage
     */
    constructor() { 
        
        GoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkupPage.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkupPage</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkupPage} obj Optional instance to populate.
     * @return {module:model/GoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkupPage} The populated <code>GoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkupPage</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkupPage();

            if (data.hasOwnProperty('claimReviewAuthor')) {
                obj['claimReviewAuthor'] = GoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewAuthor.constructFromObject(data['claimReviewAuthor']);
            }
            if (data.hasOwnProperty('claimReviewMarkups')) {
                obj['claimReviewMarkups'] = ApiClient.convertToType(data['claimReviewMarkups'], [GoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkup]);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('pageUrl')) {
                obj['pageUrl'] = ApiClient.convertToType(data['pageUrl'], 'String');
            }
            if (data.hasOwnProperty('publishDate')) {
                obj['publishDate'] = ApiClient.convertToType(data['publishDate'], 'String');
            }
            if (data.hasOwnProperty('versionId')) {
                obj['versionId'] = ApiClient.convertToType(data['versionId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkupPage</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkupPage</code>.
     */
    static validateJSON(data) {
        // validate the optional field `claimReviewAuthor`
        if (data['claimReviewAuthor']) { // data not null
          GoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewAuthor.validateJSON(data['claimReviewAuthor']);
        }
        if (data['claimReviewMarkups']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['claimReviewMarkups'])) {
                throw new Error("Expected the field `claimReviewMarkups` to be an array in the JSON data but got " + data['claimReviewMarkups']);
            }
            // validate the optional field `claimReviewMarkups` (array)
            for (const item of data['claimReviewMarkups']) {
                GoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkup.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['pageUrl'] && !(typeof data['pageUrl'] === 'string' || data['pageUrl'] instanceof String)) {
            throw new Error("Expected the field `pageUrl` to be a primitive type in the JSON string but got " + data['pageUrl']);
        }
        // ensure the json data is a string
        if (data['publishDate'] && !(typeof data['publishDate'] === 'string' || data['publishDate'] instanceof String)) {
            throw new Error("Expected the field `publishDate` to be a primitive type in the JSON string but got " + data['publishDate']);
        }
        // ensure the json data is a string
        if (data['versionId'] && !(typeof data['versionId'] === 'string' || data['versionId'] instanceof String)) {
            throw new Error("Expected the field `versionId` to be a primitive type in the JSON string but got " + data['versionId']);
        }

        return true;
    }


}



/**
 * @member {module:model/GoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewAuthor} claimReviewAuthor
 */
GoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkupPage.prototype['claimReviewAuthor'] = undefined;

/**
 * A list of individual claim reviews for this page. Each item in the list corresponds to one `ClaimReview` element.
 * @member {Array.<module:model/GoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkup>} claimReviewMarkups
 */
GoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkupPage.prototype['claimReviewMarkups'] = undefined;

/**
 * The name of this `ClaimReview` markup page resource, in the form of `pages/{page_id}`. Except for update requests, this field is output-only and should not be set by the user.
 * @member {String} name
 */
GoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkupPage.prototype['name'] = undefined;

/**
 * The URL of the page associated with this `ClaimReview` markup. While every individual `ClaimReview` has its own URL field, semantically this is a page-level field, and each `ClaimReview` on this page will use this value unless individually overridden. Corresponds to `ClaimReview.url`
 * @member {String} pageUrl
 */
GoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkupPage.prototype['pageUrl'] = undefined;

/**
 * The date when the fact check was published. Similar to the URL, semantically this is a page-level field, and each `ClaimReview` on this page will contain the same value. Corresponds to `ClaimReview.datePublished`
 * @member {String} publishDate
 */
GoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkupPage.prototype['publishDate'] = undefined;

/**
 * The version ID for this markup. Except for update requests, this field is output-only and should not be set by the user.
 * @member {String} versionId
 */
GoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkupPage.prototype['versionId'] = undefined;






export default GoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkupPage;

