/**
 * Fact Check Tools API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1alpha1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GoogleFactcheckingFactchecktoolsV1alpha1ClaimAuthor from './GoogleFactcheckingFactchecktoolsV1alpha1ClaimAuthor';
import GoogleFactcheckingFactchecktoolsV1alpha1ClaimRating from './GoogleFactcheckingFactchecktoolsV1alpha1ClaimRating';

/**
 * The GoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkup model module.
 * @module model/GoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkup
 * @version v1alpha1
 */
class GoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkup {
    /**
     * Constructs a new <code>GoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkup</code>.
     * Fields for an individual &#x60;ClaimReview&#x60; element. Except for sub-messages that group fields together, each of these fields correspond those in https://schema.org/ClaimReview. We list the precise mapping for each field.
     * @alias module:model/GoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkup
     */
    constructor() { 
        
        GoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkup.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkup</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkup} obj Optional instance to populate.
     * @return {module:model/GoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkup} The populated <code>GoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkup</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkup();

            if (data.hasOwnProperty('claimAppearances')) {
                obj['claimAppearances'] = ApiClient.convertToType(data['claimAppearances'], ['String']);
            }
            if (data.hasOwnProperty('claimAuthor')) {
                obj['claimAuthor'] = GoogleFactcheckingFactchecktoolsV1alpha1ClaimAuthor.constructFromObject(data['claimAuthor']);
            }
            if (data.hasOwnProperty('claimDate')) {
                obj['claimDate'] = ApiClient.convertToType(data['claimDate'], 'String');
            }
            if (data.hasOwnProperty('claimFirstAppearance')) {
                obj['claimFirstAppearance'] = ApiClient.convertToType(data['claimFirstAppearance'], 'String');
            }
            if (data.hasOwnProperty('claimLocation')) {
                obj['claimLocation'] = ApiClient.convertToType(data['claimLocation'], 'String');
            }
            if (data.hasOwnProperty('claimReviewed')) {
                obj['claimReviewed'] = ApiClient.convertToType(data['claimReviewed'], 'String');
            }
            if (data.hasOwnProperty('rating')) {
                obj['rating'] = GoogleFactcheckingFactchecktoolsV1alpha1ClaimRating.constructFromObject(data['rating']);
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkup</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkup</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['claimAppearances'])) {
            throw new Error("Expected the field `claimAppearances` to be an array in the JSON data but got " + data['claimAppearances']);
        }
        // validate the optional field `claimAuthor`
        if (data['claimAuthor']) { // data not null
          GoogleFactcheckingFactchecktoolsV1alpha1ClaimAuthor.validateJSON(data['claimAuthor']);
        }
        // ensure the json data is a string
        if (data['claimDate'] && !(typeof data['claimDate'] === 'string' || data['claimDate'] instanceof String)) {
            throw new Error("Expected the field `claimDate` to be a primitive type in the JSON string but got " + data['claimDate']);
        }
        // ensure the json data is a string
        if (data['claimFirstAppearance'] && !(typeof data['claimFirstAppearance'] === 'string' || data['claimFirstAppearance'] instanceof String)) {
            throw new Error("Expected the field `claimFirstAppearance` to be a primitive type in the JSON string but got " + data['claimFirstAppearance']);
        }
        // ensure the json data is a string
        if (data['claimLocation'] && !(typeof data['claimLocation'] === 'string' || data['claimLocation'] instanceof String)) {
            throw new Error("Expected the field `claimLocation` to be a primitive type in the JSON string but got " + data['claimLocation']);
        }
        // ensure the json data is a string
        if (data['claimReviewed'] && !(typeof data['claimReviewed'] === 'string' || data['claimReviewed'] instanceof String)) {
            throw new Error("Expected the field `claimReviewed` to be a primitive type in the JSON string but got " + data['claimReviewed']);
        }
        // validate the optional field `rating`
        if (data['rating']) { // data not null
          GoogleFactcheckingFactchecktoolsV1alpha1ClaimRating.validateJSON(data['rating']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }

        return true;
    }


}



/**
 * A list of links to works in which this claim appears, aside from the one specified in `claim_first_appearance`. Corresponds to `ClaimReview.itemReviewed[@type=Claim].appearance.url`.
 * @member {Array.<String>} claimAppearances
 */
GoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkup.prototype['claimAppearances'] = undefined;

/**
 * @member {module:model/GoogleFactcheckingFactchecktoolsV1alpha1ClaimAuthor} claimAuthor
 */
GoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkup.prototype['claimAuthor'] = undefined;

/**
 * The date when the claim was made or entered public discourse. Corresponds to `ClaimReview.itemReviewed.datePublished`.
 * @member {String} claimDate
 */
GoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkup.prototype['claimDate'] = undefined;

/**
 * A link to a work in which this claim first appears. Corresponds to `ClaimReview.itemReviewed[@type=Claim].firstAppearance.url`.
 * @member {String} claimFirstAppearance
 */
GoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkup.prototype['claimFirstAppearance'] = undefined;

/**
 * The location where this claim was made. Corresponds to `ClaimReview.itemReviewed.name`.
 * @member {String} claimLocation
 */
GoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkup.prototype['claimLocation'] = undefined;

/**
 * A short summary of the claim being evaluated. Corresponds to `ClaimReview.claimReviewed`.
 * @member {String} claimReviewed
 */
GoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkup.prototype['claimReviewed'] = undefined;

/**
 * @member {module:model/GoogleFactcheckingFactchecktoolsV1alpha1ClaimRating} rating
 */
GoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkup.prototype['rating'] = undefined;

/**
 * This field is optional, and will default to the page URL. We provide this field to allow you the override the default value, but the only permitted override is the page URL plus an optional anchor link (\"page jump\"). Corresponds to `ClaimReview.url`
 * @member {String} url
 */
GoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkup.prototype['url'] = undefined;






export default GoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkup;

