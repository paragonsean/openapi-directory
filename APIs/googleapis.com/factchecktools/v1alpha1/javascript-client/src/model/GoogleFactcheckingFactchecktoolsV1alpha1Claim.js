/**
 * Fact Check Tools API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1alpha1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GoogleFactcheckingFactchecktoolsV1alpha1ClaimReview from './GoogleFactcheckingFactchecktoolsV1alpha1ClaimReview';

/**
 * The GoogleFactcheckingFactchecktoolsV1alpha1Claim model module.
 * @module model/GoogleFactcheckingFactchecktoolsV1alpha1Claim
 * @version v1alpha1
 */
class GoogleFactcheckingFactchecktoolsV1alpha1Claim {
    /**
     * Constructs a new <code>GoogleFactcheckingFactchecktoolsV1alpha1Claim</code>.
     * Information about the claim.
     * @alias module:model/GoogleFactcheckingFactchecktoolsV1alpha1Claim
     */
    constructor() { 
        
        GoogleFactcheckingFactchecktoolsV1alpha1Claim.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleFactcheckingFactchecktoolsV1alpha1Claim</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleFactcheckingFactchecktoolsV1alpha1Claim} obj Optional instance to populate.
     * @return {module:model/GoogleFactcheckingFactchecktoolsV1alpha1Claim} The populated <code>GoogleFactcheckingFactchecktoolsV1alpha1Claim</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleFactcheckingFactchecktoolsV1alpha1Claim();

            if (data.hasOwnProperty('claimDate')) {
                obj['claimDate'] = ApiClient.convertToType(data['claimDate'], 'String');
            }
            if (data.hasOwnProperty('claimReview')) {
                obj['claimReview'] = ApiClient.convertToType(data['claimReview'], [GoogleFactcheckingFactchecktoolsV1alpha1ClaimReview]);
            }
            if (data.hasOwnProperty('claimant')) {
                obj['claimant'] = ApiClient.convertToType(data['claimant'], 'String');
            }
            if (data.hasOwnProperty('text')) {
                obj['text'] = ApiClient.convertToType(data['text'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleFactcheckingFactchecktoolsV1alpha1Claim</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleFactcheckingFactchecktoolsV1alpha1Claim</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['claimDate'] && !(typeof data['claimDate'] === 'string' || data['claimDate'] instanceof String)) {
            throw new Error("Expected the field `claimDate` to be a primitive type in the JSON string but got " + data['claimDate']);
        }
        if (data['claimReview']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['claimReview'])) {
                throw new Error("Expected the field `claimReview` to be an array in the JSON data but got " + data['claimReview']);
            }
            // validate the optional field `claimReview` (array)
            for (const item of data['claimReview']) {
                GoogleFactcheckingFactchecktoolsV1alpha1ClaimReview.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['claimant'] && !(typeof data['claimant'] === 'string' || data['claimant'] instanceof String)) {
            throw new Error("Expected the field `claimant` to be a primitive type in the JSON string but got " + data['claimant']);
        }
        // ensure the json data is a string
        if (data['text'] && !(typeof data['text'] === 'string' || data['text'] instanceof String)) {
            throw new Error("Expected the field `text` to be a primitive type in the JSON string but got " + data['text']);
        }

        return true;
    }


}



/**
 * The date that the claim was made.
 * @member {String} claimDate
 */
GoogleFactcheckingFactchecktoolsV1alpha1Claim.prototype['claimDate'] = undefined;

/**
 * One or more reviews of this claim (namely, a fact-checking article).
 * @member {Array.<module:model/GoogleFactcheckingFactchecktoolsV1alpha1ClaimReview>} claimReview
 */
GoogleFactcheckingFactchecktoolsV1alpha1Claim.prototype['claimReview'] = undefined;

/**
 * A person or organization stating the claim. For instance, \"John Doe\".
 * @member {String} claimant
 */
GoogleFactcheckingFactchecktoolsV1alpha1Claim.prototype['claimant'] = undefined;

/**
 * The claim text. For instance, \"Crime has doubled in the last 2 years.\"
 * @member {String} text
 */
GoogleFactcheckingFactchecktoolsV1alpha1Claim.prototype['text'] = undefined;






export default GoogleFactcheckingFactchecktoolsV1alpha1Claim;

