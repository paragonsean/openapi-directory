/**
 * Fact Check Tools API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1alpha1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GoogleFactcheckingFactchecktoolsV1alpha1Publisher from './GoogleFactcheckingFactchecktoolsV1alpha1Publisher';

/**
 * The GoogleFactcheckingFactchecktoolsV1alpha1ClaimReview model module.
 * @module model/GoogleFactcheckingFactchecktoolsV1alpha1ClaimReview
 * @version v1alpha1
 */
class GoogleFactcheckingFactchecktoolsV1alpha1ClaimReview {
    /**
     * Constructs a new <code>GoogleFactcheckingFactchecktoolsV1alpha1ClaimReview</code>.
     * Information about a claim review.
     * @alias module:model/GoogleFactcheckingFactchecktoolsV1alpha1ClaimReview
     */
    constructor() { 
        
        GoogleFactcheckingFactchecktoolsV1alpha1ClaimReview.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleFactcheckingFactchecktoolsV1alpha1ClaimReview</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleFactcheckingFactchecktoolsV1alpha1ClaimReview} obj Optional instance to populate.
     * @return {module:model/GoogleFactcheckingFactchecktoolsV1alpha1ClaimReview} The populated <code>GoogleFactcheckingFactchecktoolsV1alpha1ClaimReview</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleFactcheckingFactchecktoolsV1alpha1ClaimReview();

            if (data.hasOwnProperty('languageCode')) {
                obj['languageCode'] = ApiClient.convertToType(data['languageCode'], 'String');
            }
            if (data.hasOwnProperty('publisher')) {
                obj['publisher'] = GoogleFactcheckingFactchecktoolsV1alpha1Publisher.constructFromObject(data['publisher']);
            }
            if (data.hasOwnProperty('reviewDate')) {
                obj['reviewDate'] = ApiClient.convertToType(data['reviewDate'], 'String');
            }
            if (data.hasOwnProperty('textualRating')) {
                obj['textualRating'] = ApiClient.convertToType(data['textualRating'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleFactcheckingFactchecktoolsV1alpha1ClaimReview</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleFactcheckingFactchecktoolsV1alpha1ClaimReview</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['languageCode'] && !(typeof data['languageCode'] === 'string' || data['languageCode'] instanceof String)) {
            throw new Error("Expected the field `languageCode` to be a primitive type in the JSON string but got " + data['languageCode']);
        }
        // validate the optional field `publisher`
        if (data['publisher']) { // data not null
          GoogleFactcheckingFactchecktoolsV1alpha1Publisher.validateJSON(data['publisher']);
        }
        // ensure the json data is a string
        if (data['reviewDate'] && !(typeof data['reviewDate'] === 'string' || data['reviewDate'] instanceof String)) {
            throw new Error("Expected the field `reviewDate` to be a primitive type in the JSON string but got " + data['reviewDate']);
        }
        // ensure the json data is a string
        if (data['textualRating'] && !(typeof data['textualRating'] === 'string' || data['textualRating'] instanceof String)) {
            throw new Error("Expected the field `textualRating` to be a primitive type in the JSON string but got " + data['textualRating']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }

        return true;
    }


}



/**
 * The language this review was written in. For instance, \"en\" or \"de\".
 * @member {String} languageCode
 */
GoogleFactcheckingFactchecktoolsV1alpha1ClaimReview.prototype['languageCode'] = undefined;

/**
 * @member {module:model/GoogleFactcheckingFactchecktoolsV1alpha1Publisher} publisher
 */
GoogleFactcheckingFactchecktoolsV1alpha1ClaimReview.prototype['publisher'] = undefined;

/**
 * The date the claim was reviewed.
 * @member {String} reviewDate
 */
GoogleFactcheckingFactchecktoolsV1alpha1ClaimReview.prototype['reviewDate'] = undefined;

/**
 * Textual rating. For instance, \"Mostly false\".
 * @member {String} textualRating
 */
GoogleFactcheckingFactchecktoolsV1alpha1ClaimReview.prototype['textualRating'] = undefined;

/**
 * The title of this claim review, if it can be determined.
 * @member {String} title
 */
GoogleFactcheckingFactchecktoolsV1alpha1ClaimReview.prototype['title'] = undefined;

/**
 * The URL of this claim review.
 * @member {String} url
 */
GoogleFactcheckingFactchecktoolsV1alpha1ClaimReview.prototype['url'] = undefined;






export default GoogleFactcheckingFactchecktoolsV1alpha1ClaimReview;

