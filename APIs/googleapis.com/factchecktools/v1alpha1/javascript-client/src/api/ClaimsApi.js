/**
 * Fact Check Tools API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1alpha1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import GoogleFactcheckingFactchecktoolsV1alpha1FactCheckedClaimSearchResponse from '../model/GoogleFactcheckingFactchecktoolsV1alpha1FactCheckedClaimSearchResponse';

/**
* Claims service.
* @module api/ClaimsApi
* @version v1alpha1
*/
export default class ClaimsApi {

    /**
    * Constructs a new ClaimsApi. 
    * @alias module:api/ClaimsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the factchecktoolsClaimsSearch operation.
     * @callback module:api/ClaimsApi~factchecktoolsClaimsSearchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GoogleFactcheckingFactchecktoolsV1alpha1FactCheckedClaimSearchResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search through fact-checked claims.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {String} [languageCode] The BCP-47 language code, such as \"en-US\" or \"sr-Latn\". Can be used to restrict results by language, though we do not currently consider the region.
     * @param {Number} [maxAgeDays] The maximum age of the returned search results, in days. Age is determined by either claim date or review date, whichever is newer.
     * @param {Number} [offset] An integer that specifies the current offset (that is, starting result location) in search results. This field is only considered if `page_token` is unset. For example, 0 means to return results starting from the first matching result, and 10 means to return from the 11th result.
     * @param {Number} [pageSize] The pagination size. We will return up to that many results. Defaults to 10 if not set.
     * @param {String} [pageToken] The pagination token. You may provide the `next_page_token` returned from a previous List request, if any, in order to get the next page. All other fields must have the same values as in the previous request.
     * @param {String} [query] Textual query string. Required unless `review_publisher_site_filter` is specified.
     * @param {String} [reviewPublisherSiteFilter] The review publisher site to filter results by, e.g. nytimes.com.
     * @param {module:api/ClaimsApi~factchecktoolsClaimsSearchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GoogleFactcheckingFactchecktoolsV1alpha1FactCheckedClaimSearchResponse}
     */
    factchecktoolsClaimsSearch(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'languageCode': opts['languageCode'],
        'maxAgeDays': opts['maxAgeDays'],
        'offset': opts['offset'],
        'pageSize': opts['pageSize'],
        'pageToken': opts['pageToken'],
        'query': opts['query'],
        'reviewPublisherSiteFilter': opts['reviewPublisherSiteFilter']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GoogleFactcheckingFactchecktoolsV1alpha1FactCheckedClaimSearchResponse;
      return this.apiClient.callApi(
        '/v1alpha1/claims:search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
