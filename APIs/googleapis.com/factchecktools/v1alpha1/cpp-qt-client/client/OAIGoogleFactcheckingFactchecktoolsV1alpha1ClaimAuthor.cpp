/**
 * Fact Check Tools API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1alpha1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleFactcheckingFactchecktoolsV1alpha1ClaimAuthor.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleFactcheckingFactchecktoolsV1alpha1ClaimAuthor::OAIGoogleFactcheckingFactchecktoolsV1alpha1ClaimAuthor(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleFactcheckingFactchecktoolsV1alpha1ClaimAuthor::OAIGoogleFactcheckingFactchecktoolsV1alpha1ClaimAuthor() {
    this->initializeModel();
}

OAIGoogleFactcheckingFactchecktoolsV1alpha1ClaimAuthor::~OAIGoogleFactcheckingFactchecktoolsV1alpha1ClaimAuthor() {}

void OAIGoogleFactcheckingFactchecktoolsV1alpha1ClaimAuthor::initializeModel() {

    m_image_url_isSet = false;
    m_image_url_isValid = false;

    m_job_title_isSet = false;
    m_job_title_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_same_as_isSet = false;
    m_same_as_isValid = false;
}

void OAIGoogleFactcheckingFactchecktoolsV1alpha1ClaimAuthor::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleFactcheckingFactchecktoolsV1alpha1ClaimAuthor::fromJsonObject(QJsonObject json) {

    m_image_url_isValid = ::OpenAPI::fromJsonValue(m_image_url, json[QString("imageUrl")]);
    m_image_url_isSet = !json[QString("imageUrl")].isNull() && m_image_url_isValid;

    m_job_title_isValid = ::OpenAPI::fromJsonValue(m_job_title, json[QString("jobTitle")]);
    m_job_title_isSet = !json[QString("jobTitle")].isNull() && m_job_title_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_same_as_isValid = ::OpenAPI::fromJsonValue(m_same_as, json[QString("sameAs")]);
    m_same_as_isSet = !json[QString("sameAs")].isNull() && m_same_as_isValid;
}

QString OAIGoogleFactcheckingFactchecktoolsV1alpha1ClaimAuthor::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleFactcheckingFactchecktoolsV1alpha1ClaimAuthor::asJsonObject() const {
    QJsonObject obj;
    if (m_image_url_isSet) {
        obj.insert(QString("imageUrl"), ::OpenAPI::toJsonValue(m_image_url));
    }
    if (m_job_title_isSet) {
        obj.insert(QString("jobTitle"), ::OpenAPI::toJsonValue(m_job_title));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_same_as_isSet) {
        obj.insert(QString("sameAs"), ::OpenAPI::toJsonValue(m_same_as));
    }
    return obj;
}

QString OAIGoogleFactcheckingFactchecktoolsV1alpha1ClaimAuthor::getImageUrl() const {
    return m_image_url;
}
void OAIGoogleFactcheckingFactchecktoolsV1alpha1ClaimAuthor::setImageUrl(const QString &image_url) {
    m_image_url = image_url;
    m_image_url_isSet = true;
}

bool OAIGoogleFactcheckingFactchecktoolsV1alpha1ClaimAuthor::is_image_url_Set() const{
    return m_image_url_isSet;
}

bool OAIGoogleFactcheckingFactchecktoolsV1alpha1ClaimAuthor::is_image_url_Valid() const{
    return m_image_url_isValid;
}

QString OAIGoogleFactcheckingFactchecktoolsV1alpha1ClaimAuthor::getJobTitle() const {
    return m_job_title;
}
void OAIGoogleFactcheckingFactchecktoolsV1alpha1ClaimAuthor::setJobTitle(const QString &job_title) {
    m_job_title = job_title;
    m_job_title_isSet = true;
}

bool OAIGoogleFactcheckingFactchecktoolsV1alpha1ClaimAuthor::is_job_title_Set() const{
    return m_job_title_isSet;
}

bool OAIGoogleFactcheckingFactchecktoolsV1alpha1ClaimAuthor::is_job_title_Valid() const{
    return m_job_title_isValid;
}

QString OAIGoogleFactcheckingFactchecktoolsV1alpha1ClaimAuthor::getName() const {
    return m_name;
}
void OAIGoogleFactcheckingFactchecktoolsV1alpha1ClaimAuthor::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGoogleFactcheckingFactchecktoolsV1alpha1ClaimAuthor::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGoogleFactcheckingFactchecktoolsV1alpha1ClaimAuthor::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIGoogleFactcheckingFactchecktoolsV1alpha1ClaimAuthor::getSameAs() const {
    return m_same_as;
}
void OAIGoogleFactcheckingFactchecktoolsV1alpha1ClaimAuthor::setSameAs(const QString &same_as) {
    m_same_as = same_as;
    m_same_as_isSet = true;
}

bool OAIGoogleFactcheckingFactchecktoolsV1alpha1ClaimAuthor::is_same_as_Set() const{
    return m_same_as_isSet;
}

bool OAIGoogleFactcheckingFactchecktoolsV1alpha1ClaimAuthor::is_same_as_Valid() const{
    return m_same_as_isValid;
}

bool OAIGoogleFactcheckingFactchecktoolsV1alpha1ClaimAuthor::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_image_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_same_as_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleFactcheckingFactchecktoolsV1alpha1ClaimAuthor::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
