/**
 * Fact Check Tools API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1alpha1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleFactcheckingFactchecktoolsV1alpha1ClaimRating.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleFactcheckingFactchecktoolsV1alpha1ClaimRating::OAIGoogleFactcheckingFactchecktoolsV1alpha1ClaimRating(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleFactcheckingFactchecktoolsV1alpha1ClaimRating::OAIGoogleFactcheckingFactchecktoolsV1alpha1ClaimRating() {
    this->initializeModel();
}

OAIGoogleFactcheckingFactchecktoolsV1alpha1ClaimRating::~OAIGoogleFactcheckingFactchecktoolsV1alpha1ClaimRating() {}

void OAIGoogleFactcheckingFactchecktoolsV1alpha1ClaimRating::initializeModel() {

    m_best_rating_isSet = false;
    m_best_rating_isValid = false;

    m_image_url_isSet = false;
    m_image_url_isValid = false;

    m_rating_explanation_isSet = false;
    m_rating_explanation_isValid = false;

    m_rating_value_isSet = false;
    m_rating_value_isValid = false;

    m_textual_rating_isSet = false;
    m_textual_rating_isValid = false;

    m_worst_rating_isSet = false;
    m_worst_rating_isValid = false;
}

void OAIGoogleFactcheckingFactchecktoolsV1alpha1ClaimRating::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleFactcheckingFactchecktoolsV1alpha1ClaimRating::fromJsonObject(QJsonObject json) {

    m_best_rating_isValid = ::OpenAPI::fromJsonValue(m_best_rating, json[QString("bestRating")]);
    m_best_rating_isSet = !json[QString("bestRating")].isNull() && m_best_rating_isValid;

    m_image_url_isValid = ::OpenAPI::fromJsonValue(m_image_url, json[QString("imageUrl")]);
    m_image_url_isSet = !json[QString("imageUrl")].isNull() && m_image_url_isValid;

    m_rating_explanation_isValid = ::OpenAPI::fromJsonValue(m_rating_explanation, json[QString("ratingExplanation")]);
    m_rating_explanation_isSet = !json[QString("ratingExplanation")].isNull() && m_rating_explanation_isValid;

    m_rating_value_isValid = ::OpenAPI::fromJsonValue(m_rating_value, json[QString("ratingValue")]);
    m_rating_value_isSet = !json[QString("ratingValue")].isNull() && m_rating_value_isValid;

    m_textual_rating_isValid = ::OpenAPI::fromJsonValue(m_textual_rating, json[QString("textualRating")]);
    m_textual_rating_isSet = !json[QString("textualRating")].isNull() && m_textual_rating_isValid;

    m_worst_rating_isValid = ::OpenAPI::fromJsonValue(m_worst_rating, json[QString("worstRating")]);
    m_worst_rating_isSet = !json[QString("worstRating")].isNull() && m_worst_rating_isValid;
}

QString OAIGoogleFactcheckingFactchecktoolsV1alpha1ClaimRating::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleFactcheckingFactchecktoolsV1alpha1ClaimRating::asJsonObject() const {
    QJsonObject obj;
    if (m_best_rating_isSet) {
        obj.insert(QString("bestRating"), ::OpenAPI::toJsonValue(m_best_rating));
    }
    if (m_image_url_isSet) {
        obj.insert(QString("imageUrl"), ::OpenAPI::toJsonValue(m_image_url));
    }
    if (m_rating_explanation_isSet) {
        obj.insert(QString("ratingExplanation"), ::OpenAPI::toJsonValue(m_rating_explanation));
    }
    if (m_rating_value_isSet) {
        obj.insert(QString("ratingValue"), ::OpenAPI::toJsonValue(m_rating_value));
    }
    if (m_textual_rating_isSet) {
        obj.insert(QString("textualRating"), ::OpenAPI::toJsonValue(m_textual_rating));
    }
    if (m_worst_rating_isSet) {
        obj.insert(QString("worstRating"), ::OpenAPI::toJsonValue(m_worst_rating));
    }
    return obj;
}

qint32 OAIGoogleFactcheckingFactchecktoolsV1alpha1ClaimRating::getBestRating() const {
    return m_best_rating;
}
void OAIGoogleFactcheckingFactchecktoolsV1alpha1ClaimRating::setBestRating(const qint32 &best_rating) {
    m_best_rating = best_rating;
    m_best_rating_isSet = true;
}

bool OAIGoogleFactcheckingFactchecktoolsV1alpha1ClaimRating::is_best_rating_Set() const{
    return m_best_rating_isSet;
}

bool OAIGoogleFactcheckingFactchecktoolsV1alpha1ClaimRating::is_best_rating_Valid() const{
    return m_best_rating_isValid;
}

QString OAIGoogleFactcheckingFactchecktoolsV1alpha1ClaimRating::getImageUrl() const {
    return m_image_url;
}
void OAIGoogleFactcheckingFactchecktoolsV1alpha1ClaimRating::setImageUrl(const QString &image_url) {
    m_image_url = image_url;
    m_image_url_isSet = true;
}

bool OAIGoogleFactcheckingFactchecktoolsV1alpha1ClaimRating::is_image_url_Set() const{
    return m_image_url_isSet;
}

bool OAIGoogleFactcheckingFactchecktoolsV1alpha1ClaimRating::is_image_url_Valid() const{
    return m_image_url_isValid;
}

QString OAIGoogleFactcheckingFactchecktoolsV1alpha1ClaimRating::getRatingExplanation() const {
    return m_rating_explanation;
}
void OAIGoogleFactcheckingFactchecktoolsV1alpha1ClaimRating::setRatingExplanation(const QString &rating_explanation) {
    m_rating_explanation = rating_explanation;
    m_rating_explanation_isSet = true;
}

bool OAIGoogleFactcheckingFactchecktoolsV1alpha1ClaimRating::is_rating_explanation_Set() const{
    return m_rating_explanation_isSet;
}

bool OAIGoogleFactcheckingFactchecktoolsV1alpha1ClaimRating::is_rating_explanation_Valid() const{
    return m_rating_explanation_isValid;
}

qint32 OAIGoogleFactcheckingFactchecktoolsV1alpha1ClaimRating::getRatingValue() const {
    return m_rating_value;
}
void OAIGoogleFactcheckingFactchecktoolsV1alpha1ClaimRating::setRatingValue(const qint32 &rating_value) {
    m_rating_value = rating_value;
    m_rating_value_isSet = true;
}

bool OAIGoogleFactcheckingFactchecktoolsV1alpha1ClaimRating::is_rating_value_Set() const{
    return m_rating_value_isSet;
}

bool OAIGoogleFactcheckingFactchecktoolsV1alpha1ClaimRating::is_rating_value_Valid() const{
    return m_rating_value_isValid;
}

QString OAIGoogleFactcheckingFactchecktoolsV1alpha1ClaimRating::getTextualRating() const {
    return m_textual_rating;
}
void OAIGoogleFactcheckingFactchecktoolsV1alpha1ClaimRating::setTextualRating(const QString &textual_rating) {
    m_textual_rating = textual_rating;
    m_textual_rating_isSet = true;
}

bool OAIGoogleFactcheckingFactchecktoolsV1alpha1ClaimRating::is_textual_rating_Set() const{
    return m_textual_rating_isSet;
}

bool OAIGoogleFactcheckingFactchecktoolsV1alpha1ClaimRating::is_textual_rating_Valid() const{
    return m_textual_rating_isValid;
}

qint32 OAIGoogleFactcheckingFactchecktoolsV1alpha1ClaimRating::getWorstRating() const {
    return m_worst_rating;
}
void OAIGoogleFactcheckingFactchecktoolsV1alpha1ClaimRating::setWorstRating(const qint32 &worst_rating) {
    m_worst_rating = worst_rating;
    m_worst_rating_isSet = true;
}

bool OAIGoogleFactcheckingFactchecktoolsV1alpha1ClaimRating::is_worst_rating_Set() const{
    return m_worst_rating_isSet;
}

bool OAIGoogleFactcheckingFactchecktoolsV1alpha1ClaimRating::is_worst_rating_Valid() const{
    return m_worst_rating_isValid;
}

bool OAIGoogleFactcheckingFactchecktoolsV1alpha1ClaimRating::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_best_rating_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rating_explanation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rating_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_textual_rating_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_worst_rating_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleFactcheckingFactchecktoolsV1alpha1ClaimRating::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
