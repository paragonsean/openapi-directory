/**
 * Fact Check Tools API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1alpha1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleFactcheckingFactchecktoolsV1alpha1Claim.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleFactcheckingFactchecktoolsV1alpha1Claim::OAIGoogleFactcheckingFactchecktoolsV1alpha1Claim(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleFactcheckingFactchecktoolsV1alpha1Claim::OAIGoogleFactcheckingFactchecktoolsV1alpha1Claim() {
    this->initializeModel();
}

OAIGoogleFactcheckingFactchecktoolsV1alpha1Claim::~OAIGoogleFactcheckingFactchecktoolsV1alpha1Claim() {}

void OAIGoogleFactcheckingFactchecktoolsV1alpha1Claim::initializeModel() {

    m_claim_date_isSet = false;
    m_claim_date_isValid = false;

    m_claim_review_isSet = false;
    m_claim_review_isValid = false;

    m_claimant_isSet = false;
    m_claimant_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;
}

void OAIGoogleFactcheckingFactchecktoolsV1alpha1Claim::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleFactcheckingFactchecktoolsV1alpha1Claim::fromJsonObject(QJsonObject json) {

    m_claim_date_isValid = ::OpenAPI::fromJsonValue(m_claim_date, json[QString("claimDate")]);
    m_claim_date_isSet = !json[QString("claimDate")].isNull() && m_claim_date_isValid;

    m_claim_review_isValid = ::OpenAPI::fromJsonValue(m_claim_review, json[QString("claimReview")]);
    m_claim_review_isSet = !json[QString("claimReview")].isNull() && m_claim_review_isValid;

    m_claimant_isValid = ::OpenAPI::fromJsonValue(m_claimant, json[QString("claimant")]);
    m_claimant_isSet = !json[QString("claimant")].isNull() && m_claimant_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("text")]);
    m_text_isSet = !json[QString("text")].isNull() && m_text_isValid;
}

QString OAIGoogleFactcheckingFactchecktoolsV1alpha1Claim::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleFactcheckingFactchecktoolsV1alpha1Claim::asJsonObject() const {
    QJsonObject obj;
    if (m_claim_date_isSet) {
        obj.insert(QString("claimDate"), ::OpenAPI::toJsonValue(m_claim_date));
    }
    if (m_claim_review.size() > 0) {
        obj.insert(QString("claimReview"), ::OpenAPI::toJsonValue(m_claim_review));
    }
    if (m_claimant_isSet) {
        obj.insert(QString("claimant"), ::OpenAPI::toJsonValue(m_claimant));
    }
    if (m_text_isSet) {
        obj.insert(QString("text"), ::OpenAPI::toJsonValue(m_text));
    }
    return obj;
}

QString OAIGoogleFactcheckingFactchecktoolsV1alpha1Claim::getClaimDate() const {
    return m_claim_date;
}
void OAIGoogleFactcheckingFactchecktoolsV1alpha1Claim::setClaimDate(const QString &claim_date) {
    m_claim_date = claim_date;
    m_claim_date_isSet = true;
}

bool OAIGoogleFactcheckingFactchecktoolsV1alpha1Claim::is_claim_date_Set() const{
    return m_claim_date_isSet;
}

bool OAIGoogleFactcheckingFactchecktoolsV1alpha1Claim::is_claim_date_Valid() const{
    return m_claim_date_isValid;
}

QList<OAIGoogleFactcheckingFactchecktoolsV1alpha1ClaimReview> OAIGoogleFactcheckingFactchecktoolsV1alpha1Claim::getClaimReview() const {
    return m_claim_review;
}
void OAIGoogleFactcheckingFactchecktoolsV1alpha1Claim::setClaimReview(const QList<OAIGoogleFactcheckingFactchecktoolsV1alpha1ClaimReview> &claim_review) {
    m_claim_review = claim_review;
    m_claim_review_isSet = true;
}

bool OAIGoogleFactcheckingFactchecktoolsV1alpha1Claim::is_claim_review_Set() const{
    return m_claim_review_isSet;
}

bool OAIGoogleFactcheckingFactchecktoolsV1alpha1Claim::is_claim_review_Valid() const{
    return m_claim_review_isValid;
}

QString OAIGoogleFactcheckingFactchecktoolsV1alpha1Claim::getClaimant() const {
    return m_claimant;
}
void OAIGoogleFactcheckingFactchecktoolsV1alpha1Claim::setClaimant(const QString &claimant) {
    m_claimant = claimant;
    m_claimant_isSet = true;
}

bool OAIGoogleFactcheckingFactchecktoolsV1alpha1Claim::is_claimant_Set() const{
    return m_claimant_isSet;
}

bool OAIGoogleFactcheckingFactchecktoolsV1alpha1Claim::is_claimant_Valid() const{
    return m_claimant_isValid;
}

QString OAIGoogleFactcheckingFactchecktoolsV1alpha1Claim::getText() const {
    return m_text;
}
void OAIGoogleFactcheckingFactchecktoolsV1alpha1Claim::setText(const QString &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAIGoogleFactcheckingFactchecktoolsV1alpha1Claim::is_text_Set() const{
    return m_text_isSet;
}

bool OAIGoogleFactcheckingFactchecktoolsV1alpha1Claim::is_text_Valid() const{
    return m_text_isValid;
}

bool OAIGoogleFactcheckingFactchecktoolsV1alpha1Claim::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_claim_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_claim_review.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_claimant_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleFactcheckingFactchecktoolsV1alpha1Claim::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
