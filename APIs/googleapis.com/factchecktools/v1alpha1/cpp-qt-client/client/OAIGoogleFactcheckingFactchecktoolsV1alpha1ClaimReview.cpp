/**
 * Fact Check Tools API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1alpha1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleFactcheckingFactchecktoolsV1alpha1ClaimReview.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleFactcheckingFactchecktoolsV1alpha1ClaimReview::OAIGoogleFactcheckingFactchecktoolsV1alpha1ClaimReview(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleFactcheckingFactchecktoolsV1alpha1ClaimReview::OAIGoogleFactcheckingFactchecktoolsV1alpha1ClaimReview() {
    this->initializeModel();
}

OAIGoogleFactcheckingFactchecktoolsV1alpha1ClaimReview::~OAIGoogleFactcheckingFactchecktoolsV1alpha1ClaimReview() {}

void OAIGoogleFactcheckingFactchecktoolsV1alpha1ClaimReview::initializeModel() {

    m_language_code_isSet = false;
    m_language_code_isValid = false;

    m_publisher_isSet = false;
    m_publisher_isValid = false;

    m_review_date_isSet = false;
    m_review_date_isValid = false;

    m_textual_rating_isSet = false;
    m_textual_rating_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIGoogleFactcheckingFactchecktoolsV1alpha1ClaimReview::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleFactcheckingFactchecktoolsV1alpha1ClaimReview::fromJsonObject(QJsonObject json) {

    m_language_code_isValid = ::OpenAPI::fromJsonValue(m_language_code, json[QString("languageCode")]);
    m_language_code_isSet = !json[QString("languageCode")].isNull() && m_language_code_isValid;

    m_publisher_isValid = ::OpenAPI::fromJsonValue(m_publisher, json[QString("publisher")]);
    m_publisher_isSet = !json[QString("publisher")].isNull() && m_publisher_isValid;

    m_review_date_isValid = ::OpenAPI::fromJsonValue(m_review_date, json[QString("reviewDate")]);
    m_review_date_isSet = !json[QString("reviewDate")].isNull() && m_review_date_isValid;

    m_textual_rating_isValid = ::OpenAPI::fromJsonValue(m_textual_rating, json[QString("textualRating")]);
    m_textual_rating_isSet = !json[QString("textualRating")].isNull() && m_textual_rating_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIGoogleFactcheckingFactchecktoolsV1alpha1ClaimReview::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleFactcheckingFactchecktoolsV1alpha1ClaimReview::asJsonObject() const {
    QJsonObject obj;
    if (m_language_code_isSet) {
        obj.insert(QString("languageCode"), ::OpenAPI::toJsonValue(m_language_code));
    }
    if (m_publisher.isSet()) {
        obj.insert(QString("publisher"), ::OpenAPI::toJsonValue(m_publisher));
    }
    if (m_review_date_isSet) {
        obj.insert(QString("reviewDate"), ::OpenAPI::toJsonValue(m_review_date));
    }
    if (m_textual_rating_isSet) {
        obj.insert(QString("textualRating"), ::OpenAPI::toJsonValue(m_textual_rating));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAIGoogleFactcheckingFactchecktoolsV1alpha1ClaimReview::getLanguageCode() const {
    return m_language_code;
}
void OAIGoogleFactcheckingFactchecktoolsV1alpha1ClaimReview::setLanguageCode(const QString &language_code) {
    m_language_code = language_code;
    m_language_code_isSet = true;
}

bool OAIGoogleFactcheckingFactchecktoolsV1alpha1ClaimReview::is_language_code_Set() const{
    return m_language_code_isSet;
}

bool OAIGoogleFactcheckingFactchecktoolsV1alpha1ClaimReview::is_language_code_Valid() const{
    return m_language_code_isValid;
}

OAIGoogleFactcheckingFactchecktoolsV1alpha1Publisher OAIGoogleFactcheckingFactchecktoolsV1alpha1ClaimReview::getPublisher() const {
    return m_publisher;
}
void OAIGoogleFactcheckingFactchecktoolsV1alpha1ClaimReview::setPublisher(const OAIGoogleFactcheckingFactchecktoolsV1alpha1Publisher &publisher) {
    m_publisher = publisher;
    m_publisher_isSet = true;
}

bool OAIGoogleFactcheckingFactchecktoolsV1alpha1ClaimReview::is_publisher_Set() const{
    return m_publisher_isSet;
}

bool OAIGoogleFactcheckingFactchecktoolsV1alpha1ClaimReview::is_publisher_Valid() const{
    return m_publisher_isValid;
}

QString OAIGoogleFactcheckingFactchecktoolsV1alpha1ClaimReview::getReviewDate() const {
    return m_review_date;
}
void OAIGoogleFactcheckingFactchecktoolsV1alpha1ClaimReview::setReviewDate(const QString &review_date) {
    m_review_date = review_date;
    m_review_date_isSet = true;
}

bool OAIGoogleFactcheckingFactchecktoolsV1alpha1ClaimReview::is_review_date_Set() const{
    return m_review_date_isSet;
}

bool OAIGoogleFactcheckingFactchecktoolsV1alpha1ClaimReview::is_review_date_Valid() const{
    return m_review_date_isValid;
}

QString OAIGoogleFactcheckingFactchecktoolsV1alpha1ClaimReview::getTextualRating() const {
    return m_textual_rating;
}
void OAIGoogleFactcheckingFactchecktoolsV1alpha1ClaimReview::setTextualRating(const QString &textual_rating) {
    m_textual_rating = textual_rating;
    m_textual_rating_isSet = true;
}

bool OAIGoogleFactcheckingFactchecktoolsV1alpha1ClaimReview::is_textual_rating_Set() const{
    return m_textual_rating_isSet;
}

bool OAIGoogleFactcheckingFactchecktoolsV1alpha1ClaimReview::is_textual_rating_Valid() const{
    return m_textual_rating_isValid;
}

QString OAIGoogleFactcheckingFactchecktoolsV1alpha1ClaimReview::getTitle() const {
    return m_title;
}
void OAIGoogleFactcheckingFactchecktoolsV1alpha1ClaimReview::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIGoogleFactcheckingFactchecktoolsV1alpha1ClaimReview::is_title_Set() const{
    return m_title_isSet;
}

bool OAIGoogleFactcheckingFactchecktoolsV1alpha1ClaimReview::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIGoogleFactcheckingFactchecktoolsV1alpha1ClaimReview::getUrl() const {
    return m_url;
}
void OAIGoogleFactcheckingFactchecktoolsV1alpha1ClaimReview::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIGoogleFactcheckingFactchecktoolsV1alpha1ClaimReview::is_url_Set() const{
    return m_url_isSet;
}

bool OAIGoogleFactcheckingFactchecktoolsV1alpha1ClaimReview::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIGoogleFactcheckingFactchecktoolsV1alpha1ClaimReview::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_language_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_publisher.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_review_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_textual_rating_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleFactcheckingFactchecktoolsV1alpha1ClaimReview::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
