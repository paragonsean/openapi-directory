/**
 * Fact Check Tools API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1alpha1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkup.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkup::OAIGoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkup(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkup::OAIGoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkup() {
    this->initializeModel();
}

OAIGoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkup::~OAIGoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkup() {}

void OAIGoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkup::initializeModel() {

    m_claim_appearances_isSet = false;
    m_claim_appearances_isValid = false;

    m_claim_author_isSet = false;
    m_claim_author_isValid = false;

    m_claim_date_isSet = false;
    m_claim_date_isValid = false;

    m_claim_first_appearance_isSet = false;
    m_claim_first_appearance_isValid = false;

    m_claim_location_isSet = false;
    m_claim_location_isValid = false;

    m_claim_reviewed_isSet = false;
    m_claim_reviewed_isValid = false;

    m_rating_isSet = false;
    m_rating_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIGoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkup::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkup::fromJsonObject(QJsonObject json) {

    m_claim_appearances_isValid = ::OpenAPI::fromJsonValue(m_claim_appearances, json[QString("claimAppearances")]);
    m_claim_appearances_isSet = !json[QString("claimAppearances")].isNull() && m_claim_appearances_isValid;

    m_claim_author_isValid = ::OpenAPI::fromJsonValue(m_claim_author, json[QString("claimAuthor")]);
    m_claim_author_isSet = !json[QString("claimAuthor")].isNull() && m_claim_author_isValid;

    m_claim_date_isValid = ::OpenAPI::fromJsonValue(m_claim_date, json[QString("claimDate")]);
    m_claim_date_isSet = !json[QString("claimDate")].isNull() && m_claim_date_isValid;

    m_claim_first_appearance_isValid = ::OpenAPI::fromJsonValue(m_claim_first_appearance, json[QString("claimFirstAppearance")]);
    m_claim_first_appearance_isSet = !json[QString("claimFirstAppearance")].isNull() && m_claim_first_appearance_isValid;

    m_claim_location_isValid = ::OpenAPI::fromJsonValue(m_claim_location, json[QString("claimLocation")]);
    m_claim_location_isSet = !json[QString("claimLocation")].isNull() && m_claim_location_isValid;

    m_claim_reviewed_isValid = ::OpenAPI::fromJsonValue(m_claim_reviewed, json[QString("claimReviewed")]);
    m_claim_reviewed_isSet = !json[QString("claimReviewed")].isNull() && m_claim_reviewed_isValid;

    m_rating_isValid = ::OpenAPI::fromJsonValue(m_rating, json[QString("rating")]);
    m_rating_isSet = !json[QString("rating")].isNull() && m_rating_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIGoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkup::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkup::asJsonObject() const {
    QJsonObject obj;
    if (m_claim_appearances.size() > 0) {
        obj.insert(QString("claimAppearances"), ::OpenAPI::toJsonValue(m_claim_appearances));
    }
    if (m_claim_author.isSet()) {
        obj.insert(QString("claimAuthor"), ::OpenAPI::toJsonValue(m_claim_author));
    }
    if (m_claim_date_isSet) {
        obj.insert(QString("claimDate"), ::OpenAPI::toJsonValue(m_claim_date));
    }
    if (m_claim_first_appearance_isSet) {
        obj.insert(QString("claimFirstAppearance"), ::OpenAPI::toJsonValue(m_claim_first_appearance));
    }
    if (m_claim_location_isSet) {
        obj.insert(QString("claimLocation"), ::OpenAPI::toJsonValue(m_claim_location));
    }
    if (m_claim_reviewed_isSet) {
        obj.insert(QString("claimReviewed"), ::OpenAPI::toJsonValue(m_claim_reviewed));
    }
    if (m_rating.isSet()) {
        obj.insert(QString("rating"), ::OpenAPI::toJsonValue(m_rating));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QList<QString> OAIGoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkup::getClaimAppearances() const {
    return m_claim_appearances;
}
void OAIGoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkup::setClaimAppearances(const QList<QString> &claim_appearances) {
    m_claim_appearances = claim_appearances;
    m_claim_appearances_isSet = true;
}

bool OAIGoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkup::is_claim_appearances_Set() const{
    return m_claim_appearances_isSet;
}

bool OAIGoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkup::is_claim_appearances_Valid() const{
    return m_claim_appearances_isValid;
}

OAIGoogleFactcheckingFactchecktoolsV1alpha1ClaimAuthor OAIGoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkup::getClaimAuthor() const {
    return m_claim_author;
}
void OAIGoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkup::setClaimAuthor(const OAIGoogleFactcheckingFactchecktoolsV1alpha1ClaimAuthor &claim_author) {
    m_claim_author = claim_author;
    m_claim_author_isSet = true;
}

bool OAIGoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkup::is_claim_author_Set() const{
    return m_claim_author_isSet;
}

bool OAIGoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkup::is_claim_author_Valid() const{
    return m_claim_author_isValid;
}

QString OAIGoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkup::getClaimDate() const {
    return m_claim_date;
}
void OAIGoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkup::setClaimDate(const QString &claim_date) {
    m_claim_date = claim_date;
    m_claim_date_isSet = true;
}

bool OAIGoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkup::is_claim_date_Set() const{
    return m_claim_date_isSet;
}

bool OAIGoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkup::is_claim_date_Valid() const{
    return m_claim_date_isValid;
}

QString OAIGoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkup::getClaimFirstAppearance() const {
    return m_claim_first_appearance;
}
void OAIGoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkup::setClaimFirstAppearance(const QString &claim_first_appearance) {
    m_claim_first_appearance = claim_first_appearance;
    m_claim_first_appearance_isSet = true;
}

bool OAIGoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkup::is_claim_first_appearance_Set() const{
    return m_claim_first_appearance_isSet;
}

bool OAIGoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkup::is_claim_first_appearance_Valid() const{
    return m_claim_first_appearance_isValid;
}

QString OAIGoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkup::getClaimLocation() const {
    return m_claim_location;
}
void OAIGoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkup::setClaimLocation(const QString &claim_location) {
    m_claim_location = claim_location;
    m_claim_location_isSet = true;
}

bool OAIGoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkup::is_claim_location_Set() const{
    return m_claim_location_isSet;
}

bool OAIGoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkup::is_claim_location_Valid() const{
    return m_claim_location_isValid;
}

QString OAIGoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkup::getClaimReviewed() const {
    return m_claim_reviewed;
}
void OAIGoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkup::setClaimReviewed(const QString &claim_reviewed) {
    m_claim_reviewed = claim_reviewed;
    m_claim_reviewed_isSet = true;
}

bool OAIGoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkup::is_claim_reviewed_Set() const{
    return m_claim_reviewed_isSet;
}

bool OAIGoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkup::is_claim_reviewed_Valid() const{
    return m_claim_reviewed_isValid;
}

OAIGoogleFactcheckingFactchecktoolsV1alpha1ClaimRating OAIGoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkup::getRating() const {
    return m_rating;
}
void OAIGoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkup::setRating(const OAIGoogleFactcheckingFactchecktoolsV1alpha1ClaimRating &rating) {
    m_rating = rating;
    m_rating_isSet = true;
}

bool OAIGoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkup::is_rating_Set() const{
    return m_rating_isSet;
}

bool OAIGoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkup::is_rating_Valid() const{
    return m_rating_isValid;
}

QString OAIGoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkup::getUrl() const {
    return m_url;
}
void OAIGoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkup::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIGoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkup::is_url_Set() const{
    return m_url_isSet;
}

bool OAIGoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkup::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIGoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkup::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_claim_appearances.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_claim_author.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_claim_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_claim_first_appearance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_claim_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_claim_reviewed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rating.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleFactcheckingFactchecktoolsV1alpha1ClaimReviewMarkup::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
