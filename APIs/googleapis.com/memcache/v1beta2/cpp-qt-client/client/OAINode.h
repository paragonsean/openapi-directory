/**
 * Cloud Memorystore for Memcached API
 * Google Cloud Memorystore for Memcached API is used for creating and managing Memcached instances in GCP.
 *
 * The version of the OpenAPI document: v1beta2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAINode.h
 *
 * 
 */

#ifndef OAINode_H
#define OAINode_H

#include <QJsonObject>

#include "OAIMemcacheParameters.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIMemcacheParameters;

class OAINode : public OAIObject {
public:
    OAINode();
    OAINode(QString json);
    ~OAINode() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getHost() const;
    void setHost(const QString &host);
    bool is_host_Set() const;
    bool is_host_Valid() const;

    QString getMemcacheFullVersion() const;
    void setMemcacheFullVersion(const QString &memcache_full_version);
    bool is_memcache_full_version_Set() const;
    bool is_memcache_full_version_Valid() const;

    QString getMemcacheVersion() const;
    void setMemcacheVersion(const QString &memcache_version);
    bool is_memcache_version_Set() const;
    bool is_memcache_version_Valid() const;

    QString getNodeId() const;
    void setNodeId(const QString &node_id);
    bool is_node_id_Set() const;
    bool is_node_id_Valid() const;

    OAIMemcacheParameters getParameters() const;
    void setParameters(const OAIMemcacheParameters &parameters);
    bool is_parameters_Set() const;
    bool is_parameters_Valid() const;

    qint32 getPort() const;
    void setPort(const qint32 &port);
    bool is_port_Set() const;
    bool is_port_Valid() const;

    QString getState() const;
    void setState(const QString &state);
    bool is_state_Set() const;
    bool is_state_Valid() const;

    bool isUpdateAvailable() const;
    void setUpdateAvailable(const bool &update_available);
    bool is_update_available_Set() const;
    bool is_update_available_Valid() const;

    QString getZone() const;
    void setZone(const QString &zone);
    bool is_zone_Set() const;
    bool is_zone_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_host;
    bool m_host_isSet;
    bool m_host_isValid;

    QString m_memcache_full_version;
    bool m_memcache_full_version_isSet;
    bool m_memcache_full_version_isValid;

    QString m_memcache_version;
    bool m_memcache_version_isSet;
    bool m_memcache_version_isValid;

    QString m_node_id;
    bool m_node_id_isSet;
    bool m_node_id_isValid;

    OAIMemcacheParameters m_parameters;
    bool m_parameters_isSet;
    bool m_parameters_isValid;

    qint32 m_port;
    bool m_port_isSet;
    bool m_port_isValid;

    QString m_state;
    bool m_state_isSet;
    bool m_state_isValid;

    bool m_update_available;
    bool m_update_available_isSet;
    bool m_update_available_isValid;

    QString m_zone;
    bool m_zone_isSet;
    bool m_zone_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAINode)

#endif // OAINode_H
