/**
 * Cloud Memorystore for Memcached API
 * Google Cloud Memorystore for Memcached API is used for creating and managing Memcached instances in GCP.
 *
 * The version of the OpenAPI document: v1beta2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApplySoftwareUpdateRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApplySoftwareUpdateRequest::OAIApplySoftwareUpdateRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApplySoftwareUpdateRequest::OAIApplySoftwareUpdateRequest() {
    this->initializeModel();
}

OAIApplySoftwareUpdateRequest::~OAIApplySoftwareUpdateRequest() {}

void OAIApplySoftwareUpdateRequest::initializeModel() {

    m_apply_all_isSet = false;
    m_apply_all_isValid = false;

    m_node_ids_isSet = false;
    m_node_ids_isValid = false;
}

void OAIApplySoftwareUpdateRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApplySoftwareUpdateRequest::fromJsonObject(QJsonObject json) {

    m_apply_all_isValid = ::OpenAPI::fromJsonValue(m_apply_all, json[QString("applyAll")]);
    m_apply_all_isSet = !json[QString("applyAll")].isNull() && m_apply_all_isValid;

    m_node_ids_isValid = ::OpenAPI::fromJsonValue(m_node_ids, json[QString("nodeIds")]);
    m_node_ids_isSet = !json[QString("nodeIds")].isNull() && m_node_ids_isValid;
}

QString OAIApplySoftwareUpdateRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApplySoftwareUpdateRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_apply_all_isSet) {
        obj.insert(QString("applyAll"), ::OpenAPI::toJsonValue(m_apply_all));
    }
    if (m_node_ids.size() > 0) {
        obj.insert(QString("nodeIds"), ::OpenAPI::toJsonValue(m_node_ids));
    }
    return obj;
}

bool OAIApplySoftwareUpdateRequest::isApplyAll() const {
    return m_apply_all;
}
void OAIApplySoftwareUpdateRequest::setApplyAll(const bool &apply_all) {
    m_apply_all = apply_all;
    m_apply_all_isSet = true;
}

bool OAIApplySoftwareUpdateRequest::is_apply_all_Set() const{
    return m_apply_all_isSet;
}

bool OAIApplySoftwareUpdateRequest::is_apply_all_Valid() const{
    return m_apply_all_isValid;
}

QList<QString> OAIApplySoftwareUpdateRequest::getNodeIds() const {
    return m_node_ids;
}
void OAIApplySoftwareUpdateRequest::setNodeIds(const QList<QString> &node_ids) {
    m_node_ids = node_ids;
    m_node_ids_isSet = true;
}

bool OAIApplySoftwareUpdateRequest::is_node_ids_Set() const{
    return m_node_ids_isSet;
}

bool OAIApplySoftwareUpdateRequest::is_node_ids_Valid() const{
    return m_node_ids_isValid;
}

bool OAIApplySoftwareUpdateRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_apply_all_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApplySoftwareUpdateRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
