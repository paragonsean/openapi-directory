/**
 * Cloud Memorystore for Memcached API
 * Google Cloud Memorystore for Memcached API is used for creating and managing Memcached instances in GCP.
 *
 * The version of the OpenAPI document: v1beta2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMemcacheParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMemcacheParameters::OAIMemcacheParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMemcacheParameters::OAIMemcacheParameters() {
    this->initializeModel();
}

OAIMemcacheParameters::~OAIMemcacheParameters() {}

void OAIMemcacheParameters::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_params_isSet = false;
    m_params_isValid = false;
}

void OAIMemcacheParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMemcacheParameters::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_params_isValid = ::OpenAPI::fromJsonValue(m_params, json[QString("params")]);
    m_params_isSet = !json[QString("params")].isNull() && m_params_isValid;
}

QString OAIMemcacheParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMemcacheParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_params.size() > 0) {
        obj.insert(QString("params"), ::OpenAPI::toJsonValue(m_params));
    }
    return obj;
}

QString OAIMemcacheParameters::getId() const {
    return m_id;
}
void OAIMemcacheParameters::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIMemcacheParameters::is_id_Set() const{
    return m_id_isSet;
}

bool OAIMemcacheParameters::is_id_Valid() const{
    return m_id_isValid;
}

QMap<QString, QString> OAIMemcacheParameters::getParams() const {
    return m_params;
}
void OAIMemcacheParameters::setParams(const QMap<QString, QString> &params) {
    m_params = params;
    m_params_isSet = true;
}

bool OAIMemcacheParameters::is_params_Set() const{
    return m_params_isSet;
}

bool OAIMemcacheParameters::is_params_Valid() const{
    return m_params_isValid;
}

bool OAIMemcacheParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_params.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMemcacheParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
