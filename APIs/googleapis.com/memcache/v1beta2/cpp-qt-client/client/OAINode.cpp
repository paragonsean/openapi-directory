/**
 * Cloud Memorystore for Memcached API
 * Google Cloud Memorystore for Memcached API is used for creating and managing Memcached instances in GCP.
 *
 * The version of the OpenAPI document: v1beta2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINode.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINode::OAINode(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINode::OAINode() {
    this->initializeModel();
}

OAINode::~OAINode() {}

void OAINode::initializeModel() {

    m_host_isSet = false;
    m_host_isValid = false;

    m_memcache_full_version_isSet = false;
    m_memcache_full_version_isValid = false;

    m_memcache_version_isSet = false;
    m_memcache_version_isValid = false;

    m_node_id_isSet = false;
    m_node_id_isValid = false;

    m_parameters_isSet = false;
    m_parameters_isValid = false;

    m_port_isSet = false;
    m_port_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_update_available_isSet = false;
    m_update_available_isValid = false;

    m_zone_isSet = false;
    m_zone_isValid = false;
}

void OAINode::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINode::fromJsonObject(QJsonObject json) {

    m_host_isValid = ::OpenAPI::fromJsonValue(m_host, json[QString("host")]);
    m_host_isSet = !json[QString("host")].isNull() && m_host_isValid;

    m_memcache_full_version_isValid = ::OpenAPI::fromJsonValue(m_memcache_full_version, json[QString("memcacheFullVersion")]);
    m_memcache_full_version_isSet = !json[QString("memcacheFullVersion")].isNull() && m_memcache_full_version_isValid;

    m_memcache_version_isValid = ::OpenAPI::fromJsonValue(m_memcache_version, json[QString("memcacheVersion")]);
    m_memcache_version_isSet = !json[QString("memcacheVersion")].isNull() && m_memcache_version_isValid;

    m_node_id_isValid = ::OpenAPI::fromJsonValue(m_node_id, json[QString("nodeId")]);
    m_node_id_isSet = !json[QString("nodeId")].isNull() && m_node_id_isValid;

    m_parameters_isValid = ::OpenAPI::fromJsonValue(m_parameters, json[QString("parameters")]);
    m_parameters_isSet = !json[QString("parameters")].isNull() && m_parameters_isValid;

    m_port_isValid = ::OpenAPI::fromJsonValue(m_port, json[QString("port")]);
    m_port_isSet = !json[QString("port")].isNull() && m_port_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_update_available_isValid = ::OpenAPI::fromJsonValue(m_update_available, json[QString("updateAvailable")]);
    m_update_available_isSet = !json[QString("updateAvailable")].isNull() && m_update_available_isValid;

    m_zone_isValid = ::OpenAPI::fromJsonValue(m_zone, json[QString("zone")]);
    m_zone_isSet = !json[QString("zone")].isNull() && m_zone_isValid;
}

QString OAINode::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINode::asJsonObject() const {
    QJsonObject obj;
    if (m_host_isSet) {
        obj.insert(QString("host"), ::OpenAPI::toJsonValue(m_host));
    }
    if (m_memcache_full_version_isSet) {
        obj.insert(QString("memcacheFullVersion"), ::OpenAPI::toJsonValue(m_memcache_full_version));
    }
    if (m_memcache_version_isSet) {
        obj.insert(QString("memcacheVersion"), ::OpenAPI::toJsonValue(m_memcache_version));
    }
    if (m_node_id_isSet) {
        obj.insert(QString("nodeId"), ::OpenAPI::toJsonValue(m_node_id));
    }
    if (m_parameters.isSet()) {
        obj.insert(QString("parameters"), ::OpenAPI::toJsonValue(m_parameters));
    }
    if (m_port_isSet) {
        obj.insert(QString("port"), ::OpenAPI::toJsonValue(m_port));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_update_available_isSet) {
        obj.insert(QString("updateAvailable"), ::OpenAPI::toJsonValue(m_update_available));
    }
    if (m_zone_isSet) {
        obj.insert(QString("zone"), ::OpenAPI::toJsonValue(m_zone));
    }
    return obj;
}

QString OAINode::getHost() const {
    return m_host;
}
void OAINode::setHost(const QString &host) {
    m_host = host;
    m_host_isSet = true;
}

bool OAINode::is_host_Set() const{
    return m_host_isSet;
}

bool OAINode::is_host_Valid() const{
    return m_host_isValid;
}

QString OAINode::getMemcacheFullVersion() const {
    return m_memcache_full_version;
}
void OAINode::setMemcacheFullVersion(const QString &memcache_full_version) {
    m_memcache_full_version = memcache_full_version;
    m_memcache_full_version_isSet = true;
}

bool OAINode::is_memcache_full_version_Set() const{
    return m_memcache_full_version_isSet;
}

bool OAINode::is_memcache_full_version_Valid() const{
    return m_memcache_full_version_isValid;
}

QString OAINode::getMemcacheVersion() const {
    return m_memcache_version;
}
void OAINode::setMemcacheVersion(const QString &memcache_version) {
    m_memcache_version = memcache_version;
    m_memcache_version_isSet = true;
}

bool OAINode::is_memcache_version_Set() const{
    return m_memcache_version_isSet;
}

bool OAINode::is_memcache_version_Valid() const{
    return m_memcache_version_isValid;
}

QString OAINode::getNodeId() const {
    return m_node_id;
}
void OAINode::setNodeId(const QString &node_id) {
    m_node_id = node_id;
    m_node_id_isSet = true;
}

bool OAINode::is_node_id_Set() const{
    return m_node_id_isSet;
}

bool OAINode::is_node_id_Valid() const{
    return m_node_id_isValid;
}

OAIMemcacheParameters OAINode::getParameters() const {
    return m_parameters;
}
void OAINode::setParameters(const OAIMemcacheParameters &parameters) {
    m_parameters = parameters;
    m_parameters_isSet = true;
}

bool OAINode::is_parameters_Set() const{
    return m_parameters_isSet;
}

bool OAINode::is_parameters_Valid() const{
    return m_parameters_isValid;
}

qint32 OAINode::getPort() const {
    return m_port;
}
void OAINode::setPort(const qint32 &port) {
    m_port = port;
    m_port_isSet = true;
}

bool OAINode::is_port_Set() const{
    return m_port_isSet;
}

bool OAINode::is_port_Valid() const{
    return m_port_isValid;
}

QString OAINode::getState() const {
    return m_state;
}
void OAINode::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAINode::is_state_Set() const{
    return m_state_isSet;
}

bool OAINode::is_state_Valid() const{
    return m_state_isValid;
}

bool OAINode::isUpdateAvailable() const {
    return m_update_available;
}
void OAINode::setUpdateAvailable(const bool &update_available) {
    m_update_available = update_available;
    m_update_available_isSet = true;
}

bool OAINode::is_update_available_Set() const{
    return m_update_available_isSet;
}

bool OAINode::is_update_available_Valid() const{
    return m_update_available_isValid;
}

QString OAINode::getZone() const {
    return m_zone;
}
void OAINode::setZone(const QString &zone) {
    m_zone = zone;
    m_zone_isSet = true;
}

bool OAINode::is_zone_Set() const{
    return m_zone_isSet;
}

bool OAINode::is_zone_Valid() const{
    return m_zone_isValid;
}

bool OAINode::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_host_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_memcache_full_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_memcache_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_available_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_zone_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINode::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
