/**
 * Cloud Memorystore for Memcached API
 * Google Cloud Memorystore for Memcached API is used for creating and managing Memcached instances in GCP.
 *
 * The version of the OpenAPI document: v1beta2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMaintenanceWindow.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMaintenanceWindow::OAIMaintenanceWindow(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMaintenanceWindow::OAIMaintenanceWindow() {
    this->initializeModel();
}

OAIMaintenanceWindow::~OAIMaintenanceWindow() {}

void OAIMaintenanceWindow::initializeModel() {

    m_daily_cycle_isSet = false;
    m_daily_cycle_isValid = false;

    m_weekly_cycle_isSet = false;
    m_weekly_cycle_isValid = false;
}

void OAIMaintenanceWindow::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMaintenanceWindow::fromJsonObject(QJsonObject json) {

    m_daily_cycle_isValid = ::OpenAPI::fromJsonValue(m_daily_cycle, json[QString("dailyCycle")]);
    m_daily_cycle_isSet = !json[QString("dailyCycle")].isNull() && m_daily_cycle_isValid;

    m_weekly_cycle_isValid = ::OpenAPI::fromJsonValue(m_weekly_cycle, json[QString("weeklyCycle")]);
    m_weekly_cycle_isSet = !json[QString("weeklyCycle")].isNull() && m_weekly_cycle_isValid;
}

QString OAIMaintenanceWindow::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMaintenanceWindow::asJsonObject() const {
    QJsonObject obj;
    if (m_daily_cycle.isSet()) {
        obj.insert(QString("dailyCycle"), ::OpenAPI::toJsonValue(m_daily_cycle));
    }
    if (m_weekly_cycle.isSet()) {
        obj.insert(QString("weeklyCycle"), ::OpenAPI::toJsonValue(m_weekly_cycle));
    }
    return obj;
}

OAIDailyCycle OAIMaintenanceWindow::getDailyCycle() const {
    return m_daily_cycle;
}
void OAIMaintenanceWindow::setDailyCycle(const OAIDailyCycle &daily_cycle) {
    m_daily_cycle = daily_cycle;
    m_daily_cycle_isSet = true;
}

bool OAIMaintenanceWindow::is_daily_cycle_Set() const{
    return m_daily_cycle_isSet;
}

bool OAIMaintenanceWindow::is_daily_cycle_Valid() const{
    return m_daily_cycle_isValid;
}

OAIWeeklyCycle OAIMaintenanceWindow::getWeeklyCycle() const {
    return m_weekly_cycle;
}
void OAIMaintenanceWindow::setWeeklyCycle(const OAIWeeklyCycle &weekly_cycle) {
    m_weekly_cycle = weekly_cycle;
    m_weekly_cycle_isSet = true;
}

bool OAIMaintenanceWindow::is_weekly_cycle_Set() const{
    return m_weekly_cycle_isSet;
}

bool OAIMaintenanceWindow::is_weekly_cycle_Valid() const{
    return m_weekly_cycle_isValid;
}

bool OAIMaintenanceWindow::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_daily_cycle.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_weekly_cycle.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMaintenanceWindow::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
