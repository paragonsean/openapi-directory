/**
 * Cloud Memorystore for Memcached API
 * Google Cloud Memorystore for Memcached API is used for creating and managing Memcached instances in GCP.
 *
 * The version of the OpenAPI document: v1beta2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIInstance.h
 *
 * A Memorystore for Memcached instance
 */

#ifndef OAIInstance_H
#define OAIInstance_H

#include <QJsonObject>

#include "OAIGoogleCloudMemcacheV1beta2MaintenancePolicy.h"
#include "OAIInstanceMessage.h"
#include "OAIMaintenanceSchedule.h"
#include "OAIMemcacheParameters.h"
#include "OAINode.h"
#include "OAINodeConfig.h"
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIInstanceMessage;
class OAIGoogleCloudMemcacheV1beta2MaintenancePolicy;
class OAIMaintenanceSchedule;
class OAINode;
class OAINodeConfig;
class OAIMemcacheParameters;

class OAIInstance : public OAIObject {
public:
    OAIInstance();
    OAIInstance(QString json);
    ~OAIInstance() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAuthorizedNetwork() const;
    void setAuthorizedNetwork(const QString &authorized_network);
    bool is_authorized_network_Set() const;
    bool is_authorized_network_Valid() const;

    QString getCreateTime() const;
    void setCreateTime(const QString &create_time);
    bool is_create_time_Set() const;
    bool is_create_time_Valid() const;

    QString getDiscoveryEndpoint() const;
    void setDiscoveryEndpoint(const QString &discovery_endpoint);
    bool is_discovery_endpoint_Set() const;
    bool is_discovery_endpoint_Valid() const;

    QString getDisplayName() const;
    void setDisplayName(const QString &display_name);
    bool is_display_name_Set() const;
    bool is_display_name_Valid() const;

    QList<OAIInstanceMessage> getInstanceMessages() const;
    void setInstanceMessages(const QList<OAIInstanceMessage> &instance_messages);
    bool is_instance_messages_Set() const;
    bool is_instance_messages_Valid() const;

    QMap<QString, QString> getLabels() const;
    void setLabels(const QMap<QString, QString> &labels);
    bool is_labels_Set() const;
    bool is_labels_Valid() const;

    OAIGoogleCloudMemcacheV1beta2MaintenancePolicy getMaintenancePolicy() const;
    void setMaintenancePolicy(const OAIGoogleCloudMemcacheV1beta2MaintenancePolicy &maintenance_policy);
    bool is_maintenance_policy_Set() const;
    bool is_maintenance_policy_Valid() const;

    OAIMaintenanceSchedule getMaintenanceSchedule() const;
    void setMaintenanceSchedule(const OAIMaintenanceSchedule &maintenance_schedule);
    bool is_maintenance_schedule_Set() const;
    bool is_maintenance_schedule_Valid() const;

    QString getMemcacheFullVersion() const;
    void setMemcacheFullVersion(const QString &memcache_full_version);
    bool is_memcache_full_version_Set() const;
    bool is_memcache_full_version_Valid() const;

    QList<OAINode> getMemcacheNodes() const;
    void setMemcacheNodes(const QList<OAINode> &memcache_nodes);
    bool is_memcache_nodes_Set() const;
    bool is_memcache_nodes_Valid() const;

    QString getMemcacheVersion() const;
    void setMemcacheVersion(const QString &memcache_version);
    bool is_memcache_version_Set() const;
    bool is_memcache_version_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    OAINodeConfig getNodeConfig() const;
    void setNodeConfig(const OAINodeConfig &node_config);
    bool is_node_config_Set() const;
    bool is_node_config_Valid() const;

    qint32 getNodeCount() const;
    void setNodeCount(const qint32 &node_count);
    bool is_node_count_Set() const;
    bool is_node_count_Valid() const;

    OAIMemcacheParameters getParameters() const;
    void setParameters(const OAIMemcacheParameters &parameters);
    bool is_parameters_Set() const;
    bool is_parameters_Valid() const;

    QList<QString> getReservedIpRangeId() const;
    void setReservedIpRangeId(const QList<QString> &reserved_ip_range_id);
    bool is_reserved_ip_range_id_Set() const;
    bool is_reserved_ip_range_id_Valid() const;

    QString getState() const;
    void setState(const QString &state);
    bool is_state_Set() const;
    bool is_state_Valid() const;

    bool isUpdateAvailable() const;
    void setUpdateAvailable(const bool &update_available);
    bool is_update_available_Set() const;
    bool is_update_available_Valid() const;

    QString getUpdateTime() const;
    void setUpdateTime(const QString &update_time);
    bool is_update_time_Set() const;
    bool is_update_time_Valid() const;

    QList<QString> getZones() const;
    void setZones(const QList<QString> &zones);
    bool is_zones_Set() const;
    bool is_zones_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_authorized_network;
    bool m_authorized_network_isSet;
    bool m_authorized_network_isValid;

    QString m_create_time;
    bool m_create_time_isSet;
    bool m_create_time_isValid;

    QString m_discovery_endpoint;
    bool m_discovery_endpoint_isSet;
    bool m_discovery_endpoint_isValid;

    QString m_display_name;
    bool m_display_name_isSet;
    bool m_display_name_isValid;

    QList<OAIInstanceMessage> m_instance_messages;
    bool m_instance_messages_isSet;
    bool m_instance_messages_isValid;

    QMap<QString, QString> m_labels;
    bool m_labels_isSet;
    bool m_labels_isValid;

    OAIGoogleCloudMemcacheV1beta2MaintenancePolicy m_maintenance_policy;
    bool m_maintenance_policy_isSet;
    bool m_maintenance_policy_isValid;

    OAIMaintenanceSchedule m_maintenance_schedule;
    bool m_maintenance_schedule_isSet;
    bool m_maintenance_schedule_isValid;

    QString m_memcache_full_version;
    bool m_memcache_full_version_isSet;
    bool m_memcache_full_version_isValid;

    QList<OAINode> m_memcache_nodes;
    bool m_memcache_nodes_isSet;
    bool m_memcache_nodes_isValid;

    QString m_memcache_version;
    bool m_memcache_version_isSet;
    bool m_memcache_version_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    OAINodeConfig m_node_config;
    bool m_node_config_isSet;
    bool m_node_config_isValid;

    qint32 m_node_count;
    bool m_node_count_isSet;
    bool m_node_count_isValid;

    OAIMemcacheParameters m_parameters;
    bool m_parameters_isSet;
    bool m_parameters_isValid;

    QList<QString> m_reserved_ip_range_id;
    bool m_reserved_ip_range_id_isSet;
    bool m_reserved_ip_range_id_isValid;

    QString m_state;
    bool m_state_isSet;
    bool m_state_isValid;

    bool m_update_available;
    bool m_update_available_isSet;
    bool m_update_available_isValid;

    QString m_update_time;
    bool m_update_time_isSet;
    bool m_update_time_isValid;

    QList<QString> m_zones;
    bool m_zones_isSet;
    bool m_zones_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIInstance)

#endif // OAIInstance_H
