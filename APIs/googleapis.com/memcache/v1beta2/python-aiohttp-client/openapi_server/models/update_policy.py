# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.deny_maintenance_period import DenyMaintenancePeriod
from openapi_server.models.maintenance_window import MaintenanceWindow
from openapi_server import util


class UpdatePolicy(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, channel: str=None, deny_maintenance_periods: List[DenyMaintenancePeriod]=None, window: MaintenanceWindow=None):
        """UpdatePolicy - a model defined in OpenAPI

        :param channel: The channel of this UpdatePolicy.
        :param deny_maintenance_periods: The deny_maintenance_periods of this UpdatePolicy.
        :param window: The window of this UpdatePolicy.
        """
        self.openapi_types = {
            'channel': str,
            'deny_maintenance_periods': List[DenyMaintenancePeriod],
            'window': MaintenanceWindow
        }

        self.attribute_map = {
            'channel': 'channel',
            'deny_maintenance_periods': 'denyMaintenancePeriods',
            'window': 'window'
        }

        self._channel = channel
        self._deny_maintenance_periods = deny_maintenance_periods
        self._window = window

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdatePolicy':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdatePolicy of this UpdatePolicy.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def channel(self):
        """Gets the channel of this UpdatePolicy.

        Optional. Relative scheduling channel applied to resource.

        :return: The channel of this UpdatePolicy.
        :rtype: str
        """
        return self._channel

    @channel.setter
    def channel(self, channel):
        """Sets the channel of this UpdatePolicy.

        Optional. Relative scheduling channel applied to resource.

        :param channel: The channel of this UpdatePolicy.
        :type channel: str
        """
        allowed_values = ["UPDATE_CHANNEL_UNSPECIFIED", "EARLIER", "LATER", "WEEK1", "WEEK2", "WEEK5"]  # noqa: E501
        if channel not in allowed_values:
            raise ValueError(
                "Invalid value for `channel` ({0}), must be one of {1}"
                .format(channel, allowed_values)
            )

        self._channel = channel

    @property
    def deny_maintenance_periods(self):
        """Gets the deny_maintenance_periods of this UpdatePolicy.

        Deny Maintenance Period that is applied to resource to indicate when maintenance is forbidden. The protocol supports zero-to-many such periods, but the current SLM Rollout implementation only supports zero-to-one.

        :return: The deny_maintenance_periods of this UpdatePolicy.
        :rtype: List[DenyMaintenancePeriod]
        """
        return self._deny_maintenance_periods

    @deny_maintenance_periods.setter
    def deny_maintenance_periods(self, deny_maintenance_periods):
        """Sets the deny_maintenance_periods of this UpdatePolicy.

        Deny Maintenance Period that is applied to resource to indicate when maintenance is forbidden. The protocol supports zero-to-many such periods, but the current SLM Rollout implementation only supports zero-to-one.

        :param deny_maintenance_periods: The deny_maintenance_periods of this UpdatePolicy.
        :type deny_maintenance_periods: List[DenyMaintenancePeriod]
        """

        self._deny_maintenance_periods = deny_maintenance_periods

    @property
    def window(self):
        """Gets the window of this UpdatePolicy.


        :return: The window of this UpdatePolicy.
        :rtype: MaintenanceWindow
        """
        return self._window

    @window.setter
    def window(self, window):
        """Sets the window of this UpdatePolicy.


        :param window: The window of this UpdatePolicy.
        :type window: MaintenanceWindow
        """

        self._window = window
