# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LocationMetadata(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, available_zones: Dict[str, object]=None):
        """LocationMetadata - a model defined in OpenAPI

        :param available_zones: The available_zones of this LocationMetadata.
        """
        self.openapi_types = {
            'available_zones': Dict[str, object]
        }

        self.attribute_map = {
            'available_zones': 'availableZones'
        }

        self._available_zones = available_zones

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LocationMetadata':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LocationMetadata of this LocationMetadata.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def available_zones(self):
        """Gets the available_zones of this LocationMetadata.

        Output only. The set of available zones in the location. The map is keyed by the lowercase ID of each zone, as defined by GCE. These keys can be specified in the `zones` field when creating a Memcached instance.

        :return: The available_zones of this LocationMetadata.
        :rtype: Dict[str, object]
        """
        return self._available_zones

    @available_zones.setter
    def available_zones(self, available_zones):
        """Sets the available_zones of this LocationMetadata.

        Output only. The set of available zones in the location. The map is keyed by the lowercase ID of each zone, as defined by GCE. These keys can be specified in the `zones` field when creating a Memcached instance.

        :param available_zones: The available_zones of this LocationMetadata.
        :type available_zones: Dict[str, object]
        """

        self._available_zones = available_zones
