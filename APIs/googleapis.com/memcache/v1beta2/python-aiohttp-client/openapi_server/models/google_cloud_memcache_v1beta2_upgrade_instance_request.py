# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleCloudMemcacheV1beta2UpgradeInstanceRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, memcache_version: str=None):
        """GoogleCloudMemcacheV1beta2UpgradeInstanceRequest - a model defined in OpenAPI

        :param memcache_version: The memcache_version of this GoogleCloudMemcacheV1beta2UpgradeInstanceRequest.
        """
        self.openapi_types = {
            'memcache_version': str
        }

        self.attribute_map = {
            'memcache_version': 'memcacheVersion'
        }

        self._memcache_version = memcache_version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudMemcacheV1beta2UpgradeInstanceRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudMemcacheV1beta2UpgradeInstanceRequest of this GoogleCloudMemcacheV1beta2UpgradeInstanceRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def memcache_version(self):
        """Gets the memcache_version of this GoogleCloudMemcacheV1beta2UpgradeInstanceRequest.

        Required. Specifies the target version of memcached engine to upgrade to.

        :return: The memcache_version of this GoogleCloudMemcacheV1beta2UpgradeInstanceRequest.
        :rtype: str
        """
        return self._memcache_version

    @memcache_version.setter
    def memcache_version(self, memcache_version):
        """Sets the memcache_version of this GoogleCloudMemcacheV1beta2UpgradeInstanceRequest.

        Required. Specifies the target version of memcached engine to upgrade to.

        :param memcache_version: The memcache_version of this GoogleCloudMemcacheV1beta2UpgradeInstanceRequest.
        :type memcache_version: str
        """
        allowed_values = ["MEMCACHE_VERSION_UNSPECIFIED", "MEMCACHE_1_5", "MEMCACHE_1_6_15"]  # noqa: E501
        if memcache_version not in allowed_values:
            raise ValueError(
                "Invalid value for `memcache_version` ({0}), must be one of {1}"
                .format(memcache_version, allowed_values)
            )

        self._memcache_version = memcache_version
