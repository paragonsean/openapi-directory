# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NodeConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cpu_count: int=None, memory_size_mb: int=None):
        """NodeConfig - a model defined in OpenAPI

        :param cpu_count: The cpu_count of this NodeConfig.
        :param memory_size_mb: The memory_size_mb of this NodeConfig.
        """
        self.openapi_types = {
            'cpu_count': int,
            'memory_size_mb': int
        }

        self.attribute_map = {
            'cpu_count': 'cpuCount',
            'memory_size_mb': 'memorySizeMb'
        }

        self._cpu_count = cpu_count
        self._memory_size_mb = memory_size_mb

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NodeConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NodeConfig of this NodeConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cpu_count(self):
        """Gets the cpu_count of this NodeConfig.

        Required. Number of cpus per Memcached node.

        :return: The cpu_count of this NodeConfig.
        :rtype: int
        """
        return self._cpu_count

    @cpu_count.setter
    def cpu_count(self, cpu_count):
        """Sets the cpu_count of this NodeConfig.

        Required. Number of cpus per Memcached node.

        :param cpu_count: The cpu_count of this NodeConfig.
        :type cpu_count: int
        """

        self._cpu_count = cpu_count

    @property
    def memory_size_mb(self):
        """Gets the memory_size_mb of this NodeConfig.

        Required. Memory size in MiB for each Memcached node.

        :return: The memory_size_mb of this NodeConfig.
        :rtype: int
        """
        return self._memory_size_mb

    @memory_size_mb.setter
    def memory_size_mb(self, memory_size_mb):
        """Sets the memory_size_mb of this NodeConfig.

        Required. Memory size in MiB for each Memcached node.

        :param memory_size_mb: The memory_size_mb of this NodeConfig.
        :type memory_size_mb: int
        """

        self._memory_size_mb = memory_size_mb
