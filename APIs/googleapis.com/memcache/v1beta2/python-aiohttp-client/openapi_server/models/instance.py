# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_memcache_v1beta2_maintenance_policy import GoogleCloudMemcacheV1beta2MaintenancePolicy
from openapi_server.models.instance_message import InstanceMessage
from openapi_server.models.maintenance_schedule import MaintenanceSchedule
from openapi_server.models.memcache_parameters import MemcacheParameters
from openapi_server.models.node import Node
from openapi_server.models.node_config import NodeConfig
from openapi_server import util


class Instance(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, authorized_network: str=None, create_time: str=None, discovery_endpoint: str=None, display_name: str=None, instance_messages: List[InstanceMessage]=None, labels: Dict[str, str]=None, maintenance_policy: GoogleCloudMemcacheV1beta2MaintenancePolicy=None, maintenance_schedule: MaintenanceSchedule=None, memcache_full_version: str=None, memcache_nodes: List[Node]=None, memcache_version: str=None, name: str=None, node_config: NodeConfig=None, node_count: int=None, parameters: MemcacheParameters=None, reserved_ip_range_id: List[str]=None, state: str=None, update_available: bool=None, update_time: str=None, zones: List[str]=None):
        """Instance - a model defined in OpenAPI

        :param authorized_network: The authorized_network of this Instance.
        :param create_time: The create_time of this Instance.
        :param discovery_endpoint: The discovery_endpoint of this Instance.
        :param display_name: The display_name of this Instance.
        :param instance_messages: The instance_messages of this Instance.
        :param labels: The labels of this Instance.
        :param maintenance_policy: The maintenance_policy of this Instance.
        :param maintenance_schedule: The maintenance_schedule of this Instance.
        :param memcache_full_version: The memcache_full_version of this Instance.
        :param memcache_nodes: The memcache_nodes of this Instance.
        :param memcache_version: The memcache_version of this Instance.
        :param name: The name of this Instance.
        :param node_config: The node_config of this Instance.
        :param node_count: The node_count of this Instance.
        :param parameters: The parameters of this Instance.
        :param reserved_ip_range_id: The reserved_ip_range_id of this Instance.
        :param state: The state of this Instance.
        :param update_available: The update_available of this Instance.
        :param update_time: The update_time of this Instance.
        :param zones: The zones of this Instance.
        """
        self.openapi_types = {
            'authorized_network': str,
            'create_time': str,
            'discovery_endpoint': str,
            'display_name': str,
            'instance_messages': List[InstanceMessage],
            'labels': Dict[str, str],
            'maintenance_policy': GoogleCloudMemcacheV1beta2MaintenancePolicy,
            'maintenance_schedule': MaintenanceSchedule,
            'memcache_full_version': str,
            'memcache_nodes': List[Node],
            'memcache_version': str,
            'name': str,
            'node_config': NodeConfig,
            'node_count': int,
            'parameters': MemcacheParameters,
            'reserved_ip_range_id': List[str],
            'state': str,
            'update_available': bool,
            'update_time': str,
            'zones': List[str]
        }

        self.attribute_map = {
            'authorized_network': 'authorizedNetwork',
            'create_time': 'createTime',
            'discovery_endpoint': 'discoveryEndpoint',
            'display_name': 'displayName',
            'instance_messages': 'instanceMessages',
            'labels': 'labels',
            'maintenance_policy': 'maintenancePolicy',
            'maintenance_schedule': 'maintenanceSchedule',
            'memcache_full_version': 'memcacheFullVersion',
            'memcache_nodes': 'memcacheNodes',
            'memcache_version': 'memcacheVersion',
            'name': 'name',
            'node_config': 'nodeConfig',
            'node_count': 'nodeCount',
            'parameters': 'parameters',
            'reserved_ip_range_id': 'reservedIpRangeId',
            'state': 'state',
            'update_available': 'updateAvailable',
            'update_time': 'updateTime',
            'zones': 'zones'
        }

        self._authorized_network = authorized_network
        self._create_time = create_time
        self._discovery_endpoint = discovery_endpoint
        self._display_name = display_name
        self._instance_messages = instance_messages
        self._labels = labels
        self._maintenance_policy = maintenance_policy
        self._maintenance_schedule = maintenance_schedule
        self._memcache_full_version = memcache_full_version
        self._memcache_nodes = memcache_nodes
        self._memcache_version = memcache_version
        self._name = name
        self._node_config = node_config
        self._node_count = node_count
        self._parameters = parameters
        self._reserved_ip_range_id = reserved_ip_range_id
        self._state = state
        self._update_available = update_available
        self._update_time = update_time
        self._zones = zones

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Instance':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Instance of this Instance.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def authorized_network(self):
        """Gets the authorized_network of this Instance.

        The full name of the Google Compute Engine [network](https://cloud.google.com/vpc/docs/vpc) to which the instance is connected. If left unspecified, the `default` network will be used.

        :return: The authorized_network of this Instance.
        :rtype: str
        """
        return self._authorized_network

    @authorized_network.setter
    def authorized_network(self, authorized_network):
        """Sets the authorized_network of this Instance.

        The full name of the Google Compute Engine [network](https://cloud.google.com/vpc/docs/vpc) to which the instance is connected. If left unspecified, the `default` network will be used.

        :param authorized_network: The authorized_network of this Instance.
        :type authorized_network: str
        """

        self._authorized_network = authorized_network

    @property
    def create_time(self):
        """Gets the create_time of this Instance.

        Output only. The time the instance was created.

        :return: The create_time of this Instance.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this Instance.

        Output only. The time the instance was created.

        :param create_time: The create_time of this Instance.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def discovery_endpoint(self):
        """Gets the discovery_endpoint of this Instance.

        Output only. Endpoint for the Discovery API.

        :return: The discovery_endpoint of this Instance.
        :rtype: str
        """
        return self._discovery_endpoint

    @discovery_endpoint.setter
    def discovery_endpoint(self, discovery_endpoint):
        """Sets the discovery_endpoint of this Instance.

        Output only. Endpoint for the Discovery API.

        :param discovery_endpoint: The discovery_endpoint of this Instance.
        :type discovery_endpoint: str
        """

        self._discovery_endpoint = discovery_endpoint

    @property
    def display_name(self):
        """Gets the display_name of this Instance.

        User provided name for the instance, which is only used for display purposes. Cannot be more than 80 characters.

        :return: The display_name of this Instance.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this Instance.

        User provided name for the instance, which is only used for display purposes. Cannot be more than 80 characters.

        :param display_name: The display_name of this Instance.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def instance_messages(self):
        """Gets the instance_messages of this Instance.

        List of messages that describe the current state of the Memcached instance.

        :return: The instance_messages of this Instance.
        :rtype: List[InstanceMessage]
        """
        return self._instance_messages

    @instance_messages.setter
    def instance_messages(self, instance_messages):
        """Sets the instance_messages of this Instance.

        List of messages that describe the current state of the Memcached instance.

        :param instance_messages: The instance_messages of this Instance.
        :type instance_messages: List[InstanceMessage]
        """

        self._instance_messages = instance_messages

    @property
    def labels(self):
        """Gets the labels of this Instance.

        Resource labels to represent user-provided metadata. Refer to cloud documentation on labels for more details. https://cloud.google.com/compute/docs/labeling-resources

        :return: The labels of this Instance.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this Instance.

        Resource labels to represent user-provided metadata. Refer to cloud documentation on labels for more details. https://cloud.google.com/compute/docs/labeling-resources

        :param labels: The labels of this Instance.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def maintenance_policy(self):
        """Gets the maintenance_policy of this Instance.


        :return: The maintenance_policy of this Instance.
        :rtype: GoogleCloudMemcacheV1beta2MaintenancePolicy
        """
        return self._maintenance_policy

    @maintenance_policy.setter
    def maintenance_policy(self, maintenance_policy):
        """Sets the maintenance_policy of this Instance.


        :param maintenance_policy: The maintenance_policy of this Instance.
        :type maintenance_policy: GoogleCloudMemcacheV1beta2MaintenancePolicy
        """

        self._maintenance_policy = maintenance_policy

    @property
    def maintenance_schedule(self):
        """Gets the maintenance_schedule of this Instance.


        :return: The maintenance_schedule of this Instance.
        :rtype: MaintenanceSchedule
        """
        return self._maintenance_schedule

    @maintenance_schedule.setter
    def maintenance_schedule(self, maintenance_schedule):
        """Sets the maintenance_schedule of this Instance.


        :param maintenance_schedule: The maintenance_schedule of this Instance.
        :type maintenance_schedule: MaintenanceSchedule
        """

        self._maintenance_schedule = maintenance_schedule

    @property
    def memcache_full_version(self):
        """Gets the memcache_full_version of this Instance.

        Output only. The full version of memcached server running on this instance. System automatically determines the full memcached version for an instance based on the input MemcacheVersion. The full version format will be \"memcached-1.5.16\".

        :return: The memcache_full_version of this Instance.
        :rtype: str
        """
        return self._memcache_full_version

    @memcache_full_version.setter
    def memcache_full_version(self, memcache_full_version):
        """Sets the memcache_full_version of this Instance.

        Output only. The full version of memcached server running on this instance. System automatically determines the full memcached version for an instance based on the input MemcacheVersion. The full version format will be \"memcached-1.5.16\".

        :param memcache_full_version: The memcache_full_version of this Instance.
        :type memcache_full_version: str
        """

        self._memcache_full_version = memcache_full_version

    @property
    def memcache_nodes(self):
        """Gets the memcache_nodes of this Instance.

        Output only. List of Memcached nodes. Refer to Node message for more details.

        :return: The memcache_nodes of this Instance.
        :rtype: List[Node]
        """
        return self._memcache_nodes

    @memcache_nodes.setter
    def memcache_nodes(self, memcache_nodes):
        """Sets the memcache_nodes of this Instance.

        Output only. List of Memcached nodes. Refer to Node message for more details.

        :param memcache_nodes: The memcache_nodes of this Instance.
        :type memcache_nodes: List[Node]
        """

        self._memcache_nodes = memcache_nodes

    @property
    def memcache_version(self):
        """Gets the memcache_version of this Instance.

        The major version of Memcached software. If not provided, latest supported version will be used. Currently the latest supported major version is `MEMCACHE_1_5`. The minor version will be automatically determined by our system based on the latest supported minor version.

        :return: The memcache_version of this Instance.
        :rtype: str
        """
        return self._memcache_version

    @memcache_version.setter
    def memcache_version(self, memcache_version):
        """Sets the memcache_version of this Instance.

        The major version of Memcached software. If not provided, latest supported version will be used. Currently the latest supported major version is `MEMCACHE_1_5`. The minor version will be automatically determined by our system based on the latest supported minor version.

        :param memcache_version: The memcache_version of this Instance.
        :type memcache_version: str
        """
        allowed_values = ["MEMCACHE_VERSION_UNSPECIFIED", "MEMCACHE_1_5", "MEMCACHE_1_6_15"]  # noqa: E501
        if memcache_version not in allowed_values:
            raise ValueError(
                "Invalid value for `memcache_version` ({0}), must be one of {1}"
                .format(memcache_version, allowed_values)
            )

        self._memcache_version = memcache_version

    @property
    def name(self):
        """Gets the name of this Instance.

        Required. Unique name of the resource in this scope including project and location using the form: `projects/{project_id}/locations/{location_id}/instances/{instance_id}` Note: Memcached instances are managed and addressed at the regional level so `location_id` here refers to a Google Cloud region; however, users may choose which zones Memcached nodes should be provisioned in within an instance. Refer to zones field for more details.

        :return: The name of this Instance.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Instance.

        Required. Unique name of the resource in this scope including project and location using the form: `projects/{project_id}/locations/{location_id}/instances/{instance_id}` Note: Memcached instances are managed and addressed at the regional level so `location_id` here refers to a Google Cloud region; however, users may choose which zones Memcached nodes should be provisioned in within an instance. Refer to zones field for more details.

        :param name: The name of this Instance.
        :type name: str
        """

        self._name = name

    @property
    def node_config(self):
        """Gets the node_config of this Instance.


        :return: The node_config of this Instance.
        :rtype: NodeConfig
        """
        return self._node_config

    @node_config.setter
    def node_config(self, node_config):
        """Sets the node_config of this Instance.


        :param node_config: The node_config of this Instance.
        :type node_config: NodeConfig
        """

        self._node_config = node_config

    @property
    def node_count(self):
        """Gets the node_count of this Instance.

        Required. Number of nodes in the Memcached instance.

        :return: The node_count of this Instance.
        :rtype: int
        """
        return self._node_count

    @node_count.setter
    def node_count(self, node_count):
        """Sets the node_count of this Instance.

        Required. Number of nodes in the Memcached instance.

        :param node_count: The node_count of this Instance.
        :type node_count: int
        """

        self._node_count = node_count

    @property
    def parameters(self):
        """Gets the parameters of this Instance.


        :return: The parameters of this Instance.
        :rtype: MemcacheParameters
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this Instance.


        :param parameters: The parameters of this Instance.
        :type parameters: MemcacheParameters
        """

        self._parameters = parameters

    @property
    def reserved_ip_range_id(self):
        """Gets the reserved_ip_range_id of this Instance.

        Optional. Contains the id of allocated IP address ranges associated with the private service access connection for example, \"test-default\" associated with IP range 10.0.0.0/29.

        :return: The reserved_ip_range_id of this Instance.
        :rtype: List[str]
        """
        return self._reserved_ip_range_id

    @reserved_ip_range_id.setter
    def reserved_ip_range_id(self, reserved_ip_range_id):
        """Sets the reserved_ip_range_id of this Instance.

        Optional. Contains the id of allocated IP address ranges associated with the private service access connection for example, \"test-default\" associated with IP range 10.0.0.0/29.

        :param reserved_ip_range_id: The reserved_ip_range_id of this Instance.
        :type reserved_ip_range_id: List[str]
        """

        self._reserved_ip_range_id = reserved_ip_range_id

    @property
    def state(self):
        """Gets the state of this Instance.

        Output only. The state of this Memcached instance.

        :return: The state of this Instance.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Instance.

        Output only. The state of this Memcached instance.

        :param state: The state of this Instance.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "CREATING", "READY", "UPDATING", "DELETING", "PERFORMING_MAINTENANCE", "MEMCACHE_VERSION_UPGRADING"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def update_available(self):
        """Gets the update_available of this Instance.

        Output only. Returns true if there is an update waiting to be applied

        :return: The update_available of this Instance.
        :rtype: bool
        """
        return self._update_available

    @update_available.setter
    def update_available(self, update_available):
        """Sets the update_available of this Instance.

        Output only. Returns true if there is an update waiting to be applied

        :param update_available: The update_available of this Instance.
        :type update_available: bool
        """

        self._update_available = update_available

    @property
    def update_time(self):
        """Gets the update_time of this Instance.

        Output only. The time the instance was updated.

        :return: The update_time of this Instance.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this Instance.

        Output only. The time the instance was updated.

        :param update_time: The update_time of this Instance.
        :type update_time: str
        """

        self._update_time = update_time

    @property
    def zones(self):
        """Gets the zones of this Instance.

        Zones in which Memcached nodes should be provisioned. Memcached nodes will be equally distributed across these zones. If not provided, the service will by default create nodes in all zones in the region for the instance.

        :return: The zones of this Instance.
        :rtype: List[str]
        """
        return self._zones

    @zones.setter
    def zones(self, zones):
        """Sets the zones of this Instance.

        Zones in which Memcached nodes should be provisioned. Memcached nodes will be equally distributed across these zones. If not provided, the service will by default create nodes in all zones in the region for the instance.

        :param zones: The zones of this Instance.
        :type zones: List[str]
        """

        self._zones = zones
