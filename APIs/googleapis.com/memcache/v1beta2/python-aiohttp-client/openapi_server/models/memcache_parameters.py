# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MemcacheParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, params: Dict[str, str]=None):
        """MemcacheParameters - a model defined in OpenAPI

        :param id: The id of this MemcacheParameters.
        :param params: The params of this MemcacheParameters.
        """
        self.openapi_types = {
            'id': str,
            'params': Dict[str, str]
        }

        self.attribute_map = {
            'id': 'id',
            'params': 'params'
        }

        self._id = id
        self._params = params

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MemcacheParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MemcacheParameters of this MemcacheParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this MemcacheParameters.

        Output only. The unique ID associated with this set of parameters. Users can use this id to determine if the parameters associated with the instance differ from the parameters associated with the nodes. A discrepancy between parameter ids can inform users that they may need to take action to apply parameters on nodes.

        :return: The id of this MemcacheParameters.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MemcacheParameters.

        Output only. The unique ID associated with this set of parameters. Users can use this id to determine if the parameters associated with the instance differ from the parameters associated with the nodes. A discrepancy between parameter ids can inform users that they may need to take action to apply parameters on nodes.

        :param id: The id of this MemcacheParameters.
        :type id: str
        """

        self._id = id

    @property
    def params(self):
        """Gets the params of this MemcacheParameters.

        User defined set of parameters to use in the memcached process.

        :return: The params of this MemcacheParameters.
        :rtype: Dict[str, str]
        """
        return self._params

    @params.setter
    def params(self, params):
        """Sets the params of this MemcacheParameters.

        User defined set of parameters to use in the memcached process.

        :param params: The params of this MemcacheParameters.
        :type params: Dict[str, str]
        """

        self._params = params
