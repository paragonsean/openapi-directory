/**
 * Cloud Memorystore for Memcached API
 * Google Cloud Memorystore for Memcached API is used for creating and managing Memcached instances in GCP.
 *
 * The version of the OpenAPI document: v1beta2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MemcacheParameters from './MemcacheParameters';

/**
 * The Node model module.
 * @module model/Node
 * @version v1beta2
 */
class Node {
    /**
     * Constructs a new <code>Node</code>.
     * @alias module:model/Node
     */
    constructor() { 
        
        Node.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Node</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Node} obj Optional instance to populate.
     * @return {module:model/Node} The populated <code>Node</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Node();

            if (data.hasOwnProperty('host')) {
                obj['host'] = ApiClient.convertToType(data['host'], 'String');
            }
            if (data.hasOwnProperty('memcacheFullVersion')) {
                obj['memcacheFullVersion'] = ApiClient.convertToType(data['memcacheFullVersion'], 'String');
            }
            if (data.hasOwnProperty('memcacheVersion')) {
                obj['memcacheVersion'] = ApiClient.convertToType(data['memcacheVersion'], 'String');
            }
            if (data.hasOwnProperty('nodeId')) {
                obj['nodeId'] = ApiClient.convertToType(data['nodeId'], 'String');
            }
            if (data.hasOwnProperty('parameters')) {
                obj['parameters'] = MemcacheParameters.constructFromObject(data['parameters']);
            }
            if (data.hasOwnProperty('port')) {
                obj['port'] = ApiClient.convertToType(data['port'], 'Number');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('updateAvailable')) {
                obj['updateAvailable'] = ApiClient.convertToType(data['updateAvailable'], 'Boolean');
            }
            if (data.hasOwnProperty('zone')) {
                obj['zone'] = ApiClient.convertToType(data['zone'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Node</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Node</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['host'] && !(typeof data['host'] === 'string' || data['host'] instanceof String)) {
            throw new Error("Expected the field `host` to be a primitive type in the JSON string but got " + data['host']);
        }
        // ensure the json data is a string
        if (data['memcacheFullVersion'] && !(typeof data['memcacheFullVersion'] === 'string' || data['memcacheFullVersion'] instanceof String)) {
            throw new Error("Expected the field `memcacheFullVersion` to be a primitive type in the JSON string but got " + data['memcacheFullVersion']);
        }
        // ensure the json data is a string
        if (data['memcacheVersion'] && !(typeof data['memcacheVersion'] === 'string' || data['memcacheVersion'] instanceof String)) {
            throw new Error("Expected the field `memcacheVersion` to be a primitive type in the JSON string but got " + data['memcacheVersion']);
        }
        // ensure the json data is a string
        if (data['nodeId'] && !(typeof data['nodeId'] === 'string' || data['nodeId'] instanceof String)) {
            throw new Error("Expected the field `nodeId` to be a primitive type in the JSON string but got " + data['nodeId']);
        }
        // validate the optional field `parameters`
        if (data['parameters']) { // data not null
          MemcacheParameters.validateJSON(data['parameters']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['zone'] && !(typeof data['zone'] === 'string' || data['zone'] instanceof String)) {
            throw new Error("Expected the field `zone` to be a primitive type in the JSON string but got " + data['zone']);
        }

        return true;
    }


}



/**
 * Output only. Hostname or IP address of the Memcached node used by the clients to connect to the Memcached server on this node.
 * @member {String} host
 */
Node.prototype['host'] = undefined;

/**
 * Output only. The full version of memcached server running on this node. e.g. - memcached-1.5.16
 * @member {String} memcacheFullVersion
 */
Node.prototype['memcacheFullVersion'] = undefined;

/**
 * Output only. Major version of memcached server running on this node, e.g. MEMCACHE_1_5
 * @member {module:model/Node.MemcacheVersionEnum} memcacheVersion
 */
Node.prototype['memcacheVersion'] = undefined;

/**
 * Output only. Identifier of the Memcached node. The node id does not include project or location like the Memcached instance name.
 * @member {String} nodeId
 */
Node.prototype['nodeId'] = undefined;

/**
 * @member {module:model/MemcacheParameters} parameters
 */
Node.prototype['parameters'] = undefined;

/**
 * Output only. The port number of the Memcached server on this node.
 * @member {Number} port
 */
Node.prototype['port'] = undefined;

/**
 * Output only. Current state of the Memcached node.
 * @member {module:model/Node.StateEnum} state
 */
Node.prototype['state'] = undefined;

/**
 * Output only. Returns true if there is an update waiting to be applied
 * @member {Boolean} updateAvailable
 */
Node.prototype['updateAvailable'] = undefined;

/**
 * Output only. Location (GCP Zone) for the Memcached node.
 * @member {String} zone
 */
Node.prototype['zone'] = undefined;





/**
 * Allowed values for the <code>memcacheVersion</code> property.
 * @enum {String}
 * @readonly
 */
Node['MemcacheVersionEnum'] = {

    /**
     * value: "MEMCACHE_VERSION_UNSPECIFIED"
     * @const
     */
    "VERSION_UNSPECIFIED": "MEMCACHE_VERSION_UNSPECIFIED",

    /**
     * value: "MEMCACHE_1_5"
     * @const
     */
    "1_5": "MEMCACHE_1_5",

    /**
     * value: "MEMCACHE_1_6_15"
     * @const
     */
    "1_6_15": "MEMCACHE_1_6_15"
};


/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
Node['StateEnum'] = {

    /**
     * value: "STATE_UNSPECIFIED"
     * @const
     */
    "STATE_UNSPECIFIED": "STATE_UNSPECIFIED",

    /**
     * value: "CREATING"
     * @const
     */
    "CREATING": "CREATING",

    /**
     * value: "READY"
     * @const
     */
    "READY": "READY",

    /**
     * value: "DELETING"
     * @const
     */
    "DELETING": "DELETING",

    /**
     * value: "UPDATING"
     * @const
     */
    "UPDATING": "UPDATING"
};



export default Node;

