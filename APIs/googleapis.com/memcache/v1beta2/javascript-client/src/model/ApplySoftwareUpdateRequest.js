/**
 * Cloud Memorystore for Memcached API
 * Google Cloud Memorystore for Memcached API is used for creating and managing Memcached instances in GCP.
 *
 * The version of the OpenAPI document: v1beta2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ApplySoftwareUpdateRequest model module.
 * @module model/ApplySoftwareUpdateRequest
 * @version v1beta2
 */
class ApplySoftwareUpdateRequest {
    /**
     * Constructs a new <code>ApplySoftwareUpdateRequest</code>.
     * Request for ApplySoftwareUpdate.
     * @alias module:model/ApplySoftwareUpdateRequest
     */
    constructor() { 
        
        ApplySoftwareUpdateRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ApplySoftwareUpdateRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ApplySoftwareUpdateRequest} obj Optional instance to populate.
     * @return {module:model/ApplySoftwareUpdateRequest} The populated <code>ApplySoftwareUpdateRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ApplySoftwareUpdateRequest();

            if (data.hasOwnProperty('applyAll')) {
                obj['applyAll'] = ApiClient.convertToType(data['applyAll'], 'Boolean');
            }
            if (data.hasOwnProperty('nodeIds')) {
                obj['nodeIds'] = ApiClient.convertToType(data['nodeIds'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ApplySoftwareUpdateRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ApplySoftwareUpdateRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['nodeIds'])) {
            throw new Error("Expected the field `nodeIds` to be an array in the JSON data but got " + data['nodeIds']);
        }

        return true;
    }


}



/**
 * Whether to apply the update to all nodes. If set to true, will explicitly restrict users from specifying any nodes, and apply software update to all nodes (where applicable) within the instance.
 * @member {Boolean} applyAll
 */
ApplySoftwareUpdateRequest.prototype['applyAll'] = undefined;

/**
 * Nodes to which we should apply the update to. Note all the selected nodes are updated in parallel.
 * @member {Array.<String>} nodeIds
 */
ApplySoftwareUpdateRequest.prototype['nodeIds'] = undefined;






export default ApplySoftwareUpdateRequest;

