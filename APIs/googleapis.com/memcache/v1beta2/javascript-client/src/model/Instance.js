/**
 * Cloud Memorystore for Memcached API
 * Google Cloud Memorystore for Memcached API is used for creating and managing Memcached instances in GCP.
 *
 * The version of the OpenAPI document: v1beta2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GoogleCloudMemcacheV1beta2MaintenancePolicy from './GoogleCloudMemcacheV1beta2MaintenancePolicy';
import InstanceMessage from './InstanceMessage';
import MaintenanceSchedule from './MaintenanceSchedule';
import MemcacheParameters from './MemcacheParameters';
import Node from './Node';
import NodeConfig from './NodeConfig';

/**
 * The Instance model module.
 * @module model/Instance
 * @version v1beta2
 */
class Instance {
    /**
     * Constructs a new <code>Instance</code>.
     * A Memorystore for Memcached instance
     * @alias module:model/Instance
     */
    constructor() { 
        
        Instance.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Instance</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Instance} obj Optional instance to populate.
     * @return {module:model/Instance} The populated <code>Instance</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Instance();

            if (data.hasOwnProperty('authorizedNetwork')) {
                obj['authorizedNetwork'] = ApiClient.convertToType(data['authorizedNetwork'], 'String');
            }
            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'String');
            }
            if (data.hasOwnProperty('discoveryEndpoint')) {
                obj['discoveryEndpoint'] = ApiClient.convertToType(data['discoveryEndpoint'], 'String');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('instanceMessages')) {
                obj['instanceMessages'] = ApiClient.convertToType(data['instanceMessages'], [InstanceMessage]);
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], {'String': 'String'});
            }
            if (data.hasOwnProperty('maintenancePolicy')) {
                obj['maintenancePolicy'] = GoogleCloudMemcacheV1beta2MaintenancePolicy.constructFromObject(data['maintenancePolicy']);
            }
            if (data.hasOwnProperty('maintenanceSchedule')) {
                obj['maintenanceSchedule'] = MaintenanceSchedule.constructFromObject(data['maintenanceSchedule']);
            }
            if (data.hasOwnProperty('memcacheFullVersion')) {
                obj['memcacheFullVersion'] = ApiClient.convertToType(data['memcacheFullVersion'], 'String');
            }
            if (data.hasOwnProperty('memcacheNodes')) {
                obj['memcacheNodes'] = ApiClient.convertToType(data['memcacheNodes'], [Node]);
            }
            if (data.hasOwnProperty('memcacheVersion')) {
                obj['memcacheVersion'] = ApiClient.convertToType(data['memcacheVersion'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('nodeConfig')) {
                obj['nodeConfig'] = NodeConfig.constructFromObject(data['nodeConfig']);
            }
            if (data.hasOwnProperty('nodeCount')) {
                obj['nodeCount'] = ApiClient.convertToType(data['nodeCount'], 'Number');
            }
            if (data.hasOwnProperty('parameters')) {
                obj['parameters'] = MemcacheParameters.constructFromObject(data['parameters']);
            }
            if (data.hasOwnProperty('reservedIpRangeId')) {
                obj['reservedIpRangeId'] = ApiClient.convertToType(data['reservedIpRangeId'], ['String']);
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('updateAvailable')) {
                obj['updateAvailable'] = ApiClient.convertToType(data['updateAvailable'], 'Boolean');
            }
            if (data.hasOwnProperty('updateTime')) {
                obj['updateTime'] = ApiClient.convertToType(data['updateTime'], 'String');
            }
            if (data.hasOwnProperty('zones')) {
                obj['zones'] = ApiClient.convertToType(data['zones'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Instance</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Instance</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['authorizedNetwork'] && !(typeof data['authorizedNetwork'] === 'string' || data['authorizedNetwork'] instanceof String)) {
            throw new Error("Expected the field `authorizedNetwork` to be a primitive type in the JSON string but got " + data['authorizedNetwork']);
        }
        // ensure the json data is a string
        if (data['createTime'] && !(typeof data['createTime'] === 'string' || data['createTime'] instanceof String)) {
            throw new Error("Expected the field `createTime` to be a primitive type in the JSON string but got " + data['createTime']);
        }
        // ensure the json data is a string
        if (data['discoveryEndpoint'] && !(typeof data['discoveryEndpoint'] === 'string' || data['discoveryEndpoint'] instanceof String)) {
            throw new Error("Expected the field `discoveryEndpoint` to be a primitive type in the JSON string but got " + data['discoveryEndpoint']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        if (data['instanceMessages']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['instanceMessages'])) {
                throw new Error("Expected the field `instanceMessages` to be an array in the JSON data but got " + data['instanceMessages']);
            }
            // validate the optional field `instanceMessages` (array)
            for (const item of data['instanceMessages']) {
                InstanceMessage.validateJSON(item);
            };
        }
        // validate the optional field `maintenancePolicy`
        if (data['maintenancePolicy']) { // data not null
          GoogleCloudMemcacheV1beta2MaintenancePolicy.validateJSON(data['maintenancePolicy']);
        }
        // validate the optional field `maintenanceSchedule`
        if (data['maintenanceSchedule']) { // data not null
          MaintenanceSchedule.validateJSON(data['maintenanceSchedule']);
        }
        // ensure the json data is a string
        if (data['memcacheFullVersion'] && !(typeof data['memcacheFullVersion'] === 'string' || data['memcacheFullVersion'] instanceof String)) {
            throw new Error("Expected the field `memcacheFullVersion` to be a primitive type in the JSON string but got " + data['memcacheFullVersion']);
        }
        if (data['memcacheNodes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['memcacheNodes'])) {
                throw new Error("Expected the field `memcacheNodes` to be an array in the JSON data but got " + data['memcacheNodes']);
            }
            // validate the optional field `memcacheNodes` (array)
            for (const item of data['memcacheNodes']) {
                Node.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['memcacheVersion'] && !(typeof data['memcacheVersion'] === 'string' || data['memcacheVersion'] instanceof String)) {
            throw new Error("Expected the field `memcacheVersion` to be a primitive type in the JSON string but got " + data['memcacheVersion']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `nodeConfig`
        if (data['nodeConfig']) { // data not null
          NodeConfig.validateJSON(data['nodeConfig']);
        }
        // validate the optional field `parameters`
        if (data['parameters']) { // data not null
          MemcacheParameters.validateJSON(data['parameters']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['reservedIpRangeId'])) {
            throw new Error("Expected the field `reservedIpRangeId` to be an array in the JSON data but got " + data['reservedIpRangeId']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['updateTime'] && !(typeof data['updateTime'] === 'string' || data['updateTime'] instanceof String)) {
            throw new Error("Expected the field `updateTime` to be a primitive type in the JSON string but got " + data['updateTime']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['zones'])) {
            throw new Error("Expected the field `zones` to be an array in the JSON data but got " + data['zones']);
        }

        return true;
    }


}



/**
 * The full name of the Google Compute Engine [network](https://cloud.google.com/vpc/docs/vpc) to which the instance is connected. If left unspecified, the `default` network will be used.
 * @member {String} authorizedNetwork
 */
Instance.prototype['authorizedNetwork'] = undefined;

/**
 * Output only. The time the instance was created.
 * @member {String} createTime
 */
Instance.prototype['createTime'] = undefined;

/**
 * Output only. Endpoint for the Discovery API.
 * @member {String} discoveryEndpoint
 */
Instance.prototype['discoveryEndpoint'] = undefined;

/**
 * User provided name for the instance, which is only used for display purposes. Cannot be more than 80 characters.
 * @member {String} displayName
 */
Instance.prototype['displayName'] = undefined;

/**
 * List of messages that describe the current state of the Memcached instance.
 * @member {Array.<module:model/InstanceMessage>} instanceMessages
 */
Instance.prototype['instanceMessages'] = undefined;

/**
 * Resource labels to represent user-provided metadata. Refer to cloud documentation on labels for more details. https://cloud.google.com/compute/docs/labeling-resources
 * @member {Object.<String, String>} labels
 */
Instance.prototype['labels'] = undefined;

/**
 * @member {module:model/GoogleCloudMemcacheV1beta2MaintenancePolicy} maintenancePolicy
 */
Instance.prototype['maintenancePolicy'] = undefined;

/**
 * @member {module:model/MaintenanceSchedule} maintenanceSchedule
 */
Instance.prototype['maintenanceSchedule'] = undefined;

/**
 * Output only. The full version of memcached server running on this instance. System automatically determines the full memcached version for an instance based on the input MemcacheVersion. The full version format will be \"memcached-1.5.16\".
 * @member {String} memcacheFullVersion
 */
Instance.prototype['memcacheFullVersion'] = undefined;

/**
 * Output only. List of Memcached nodes. Refer to Node message for more details.
 * @member {Array.<module:model/Node>} memcacheNodes
 */
Instance.prototype['memcacheNodes'] = undefined;

/**
 * The major version of Memcached software. If not provided, latest supported version will be used. Currently the latest supported major version is `MEMCACHE_1_5`. The minor version will be automatically determined by our system based on the latest supported minor version.
 * @member {module:model/Instance.MemcacheVersionEnum} memcacheVersion
 */
Instance.prototype['memcacheVersion'] = undefined;

/**
 * Required. Unique name of the resource in this scope including project and location using the form: `projects/{project_id}/locations/{location_id}/instances/{instance_id}` Note: Memcached instances are managed and addressed at the regional level so `location_id` here refers to a Google Cloud region; however, users may choose which zones Memcached nodes should be provisioned in within an instance. Refer to zones field for more details.
 * @member {String} name
 */
Instance.prototype['name'] = undefined;

/**
 * @member {module:model/NodeConfig} nodeConfig
 */
Instance.prototype['nodeConfig'] = undefined;

/**
 * Required. Number of nodes in the Memcached instance.
 * @member {Number} nodeCount
 */
Instance.prototype['nodeCount'] = undefined;

/**
 * @member {module:model/MemcacheParameters} parameters
 */
Instance.prototype['parameters'] = undefined;

/**
 * Optional. Contains the id of allocated IP address ranges associated with the private service access connection for example, \"test-default\" associated with IP range 10.0.0.0/29.
 * @member {Array.<String>} reservedIpRangeId
 */
Instance.prototype['reservedIpRangeId'] = undefined;

/**
 * Output only. The state of this Memcached instance.
 * @member {module:model/Instance.StateEnum} state
 */
Instance.prototype['state'] = undefined;

/**
 * Output only. Returns true if there is an update waiting to be applied
 * @member {Boolean} updateAvailable
 */
Instance.prototype['updateAvailable'] = undefined;

/**
 * Output only. The time the instance was updated.
 * @member {String} updateTime
 */
Instance.prototype['updateTime'] = undefined;

/**
 * Zones in which Memcached nodes should be provisioned. Memcached nodes will be equally distributed across these zones. If not provided, the service will by default create nodes in all zones in the region for the instance.
 * @member {Array.<String>} zones
 */
Instance.prototype['zones'] = undefined;





/**
 * Allowed values for the <code>memcacheVersion</code> property.
 * @enum {String}
 * @readonly
 */
Instance['MemcacheVersionEnum'] = {

    /**
     * value: "MEMCACHE_VERSION_UNSPECIFIED"
     * @const
     */
    "VERSION_UNSPECIFIED": "MEMCACHE_VERSION_UNSPECIFIED",

    /**
     * value: "MEMCACHE_1_5"
     * @const
     */
    "1_5": "MEMCACHE_1_5",

    /**
     * value: "MEMCACHE_1_6_15"
     * @const
     */
    "1_6_15": "MEMCACHE_1_6_15"
};


/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
Instance['StateEnum'] = {

    /**
     * value: "STATE_UNSPECIFIED"
     * @const
     */
    "STATE_UNSPECIFIED": "STATE_UNSPECIFIED",

    /**
     * value: "CREATING"
     * @const
     */
    "CREATING": "CREATING",

    /**
     * value: "READY"
     * @const
     */
    "READY": "READY",

    /**
     * value: "UPDATING"
     * @const
     */
    "UPDATING": "UPDATING",

    /**
     * value: "DELETING"
     * @const
     */
    "DELETING": "DELETING",

    /**
     * value: "PERFORMING_MAINTENANCE"
     * @const
     */
    "PERFORMING_MAINTENANCE": "PERFORMING_MAINTENANCE",

    /**
     * value: "MEMCACHE_VERSION_UPGRADING"
     * @const
     */
    "MEMCACHE_VERSION_UPGRADING": "MEMCACHE_VERSION_UPGRADING"
};



export default Instance;

