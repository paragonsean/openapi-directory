/**
 * Cloud Memorystore for Memcached API
 * Google Cloud Memorystore for Memcached API is used for creating and managing Memcached instances in GCP.
 *
 * The version of the OpenAPI document: v1beta2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CloudMemorystoreForMemcachedApi);
  }
}(this, function(expect, CloudMemorystoreForMemcachedApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new CloudMemorystoreForMemcachedApi.ProjectsApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ProjectsApi', function() {
    describe('memcacheProjectsLocationsInstancesApplyParameters', function() {
      it('should call memcacheProjectsLocationsInstancesApplyParameters successfully', function(done) {
        //uncomment below and update the code to test memcacheProjectsLocationsInstancesApplyParameters
        //instance.memcacheProjectsLocationsInstancesApplyParameters(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('memcacheProjectsLocationsInstancesApplySoftwareUpdate', function() {
      it('should call memcacheProjectsLocationsInstancesApplySoftwareUpdate successfully', function(done) {
        //uncomment below and update the code to test memcacheProjectsLocationsInstancesApplySoftwareUpdate
        //instance.memcacheProjectsLocationsInstancesApplySoftwareUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('memcacheProjectsLocationsInstancesCreate', function() {
      it('should call memcacheProjectsLocationsInstancesCreate successfully', function(done) {
        //uncomment below and update the code to test memcacheProjectsLocationsInstancesCreate
        //instance.memcacheProjectsLocationsInstancesCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('memcacheProjectsLocationsInstancesList', function() {
      it('should call memcacheProjectsLocationsInstancesList successfully', function(done) {
        //uncomment below and update the code to test memcacheProjectsLocationsInstancesList
        //instance.memcacheProjectsLocationsInstancesList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('memcacheProjectsLocationsInstancesPatch', function() {
      it('should call memcacheProjectsLocationsInstancesPatch successfully', function(done) {
        //uncomment below and update the code to test memcacheProjectsLocationsInstancesPatch
        //instance.memcacheProjectsLocationsInstancesPatch(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('memcacheProjectsLocationsInstancesRescheduleMaintenance', function() {
      it('should call memcacheProjectsLocationsInstancesRescheduleMaintenance successfully', function(done) {
        //uncomment below and update the code to test memcacheProjectsLocationsInstancesRescheduleMaintenance
        //instance.memcacheProjectsLocationsInstancesRescheduleMaintenance(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('memcacheProjectsLocationsInstancesUpdateParameters', function() {
      it('should call memcacheProjectsLocationsInstancesUpdateParameters successfully', function(done) {
        //uncomment below and update the code to test memcacheProjectsLocationsInstancesUpdateParameters
        //instance.memcacheProjectsLocationsInstancesUpdateParameters(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('memcacheProjectsLocationsInstancesUpgrade', function() {
      it('should call memcacheProjectsLocationsInstancesUpgrade successfully', function(done) {
        //uncomment below and update the code to test memcacheProjectsLocationsInstancesUpgrade
        //instance.memcacheProjectsLocationsInstancesUpgrade(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('memcacheProjectsLocationsList', function() {
      it('should call memcacheProjectsLocationsList successfully', function(done) {
        //uncomment below and update the code to test memcacheProjectsLocationsList
        //instance.memcacheProjectsLocationsList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('memcacheProjectsLocationsOperationsCancel', function() {
      it('should call memcacheProjectsLocationsOperationsCancel successfully', function(done) {
        //uncomment below and update the code to test memcacheProjectsLocationsOperationsCancel
        //instance.memcacheProjectsLocationsOperationsCancel(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('memcacheProjectsLocationsOperationsDelete', function() {
      it('should call memcacheProjectsLocationsOperationsDelete successfully', function(done) {
        //uncomment below and update the code to test memcacheProjectsLocationsOperationsDelete
        //instance.memcacheProjectsLocationsOperationsDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('memcacheProjectsLocationsOperationsGet', function() {
      it('should call memcacheProjectsLocationsOperationsGet successfully', function(done) {
        //uncomment below and update the code to test memcacheProjectsLocationsOperationsGet
        //instance.memcacheProjectsLocationsOperationsGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('memcacheProjectsLocationsOperationsList', function() {
      it('should call memcacheProjectsLocationsOperationsList successfully', function(done) {
        //uncomment below and update the code to test memcacheProjectsLocationsOperationsList
        //instance.memcacheProjectsLocationsOperationsList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
