/**
 * Cloud Memorystore for Memcached API
 * Google Cloud Memorystore for Memcached API is used for creating and managing Memcached instances in GCP.
 *
 * The version of the OpenAPI document: v1beta2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CloudMemorystoreForMemcachedApi);
  }
}(this, function(expect, CloudMemorystoreForMemcachedApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new CloudMemorystoreForMemcachedApi.Instance();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Instance', function() {
    it('should create an instance of Instance', function() {
      // uncomment below and update the code to test Instance
      //var instance = new CloudMemorystoreForMemcachedApi.Instance();
      //expect(instance).to.be.a(CloudMemorystoreForMemcachedApi.Instance);
    });

    it('should have the property authorizedNetwork (base name: "authorizedNetwork")', function() {
      // uncomment below and update the code to test the property authorizedNetwork
      //var instance = new CloudMemorystoreForMemcachedApi.Instance();
      //expect(instance).to.be();
    });

    it('should have the property createTime (base name: "createTime")', function() {
      // uncomment below and update the code to test the property createTime
      //var instance = new CloudMemorystoreForMemcachedApi.Instance();
      //expect(instance).to.be();
    });

    it('should have the property discoveryEndpoint (base name: "discoveryEndpoint")', function() {
      // uncomment below and update the code to test the property discoveryEndpoint
      //var instance = new CloudMemorystoreForMemcachedApi.Instance();
      //expect(instance).to.be();
    });

    it('should have the property displayName (base name: "displayName")', function() {
      // uncomment below and update the code to test the property displayName
      //var instance = new CloudMemorystoreForMemcachedApi.Instance();
      //expect(instance).to.be();
    });

    it('should have the property instanceMessages (base name: "instanceMessages")', function() {
      // uncomment below and update the code to test the property instanceMessages
      //var instance = new CloudMemorystoreForMemcachedApi.Instance();
      //expect(instance).to.be();
    });

    it('should have the property labels (base name: "labels")', function() {
      // uncomment below and update the code to test the property labels
      //var instance = new CloudMemorystoreForMemcachedApi.Instance();
      //expect(instance).to.be();
    });

    it('should have the property maintenancePolicy (base name: "maintenancePolicy")', function() {
      // uncomment below and update the code to test the property maintenancePolicy
      //var instance = new CloudMemorystoreForMemcachedApi.Instance();
      //expect(instance).to.be();
    });

    it('should have the property maintenanceSchedule (base name: "maintenanceSchedule")', function() {
      // uncomment below and update the code to test the property maintenanceSchedule
      //var instance = new CloudMemorystoreForMemcachedApi.Instance();
      //expect(instance).to.be();
    });

    it('should have the property memcacheFullVersion (base name: "memcacheFullVersion")', function() {
      // uncomment below and update the code to test the property memcacheFullVersion
      //var instance = new CloudMemorystoreForMemcachedApi.Instance();
      //expect(instance).to.be();
    });

    it('should have the property memcacheNodes (base name: "memcacheNodes")', function() {
      // uncomment below and update the code to test the property memcacheNodes
      //var instance = new CloudMemorystoreForMemcachedApi.Instance();
      //expect(instance).to.be();
    });

    it('should have the property memcacheVersion (base name: "memcacheVersion")', function() {
      // uncomment below and update the code to test the property memcacheVersion
      //var instance = new CloudMemorystoreForMemcachedApi.Instance();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new CloudMemorystoreForMemcachedApi.Instance();
      //expect(instance).to.be();
    });

    it('should have the property nodeConfig (base name: "nodeConfig")', function() {
      // uncomment below and update the code to test the property nodeConfig
      //var instance = new CloudMemorystoreForMemcachedApi.Instance();
      //expect(instance).to.be();
    });

    it('should have the property nodeCount (base name: "nodeCount")', function() {
      // uncomment below and update the code to test the property nodeCount
      //var instance = new CloudMemorystoreForMemcachedApi.Instance();
      //expect(instance).to.be();
    });

    it('should have the property parameters (base name: "parameters")', function() {
      // uncomment below and update the code to test the property parameters
      //var instance = new CloudMemorystoreForMemcachedApi.Instance();
      //expect(instance).to.be();
    });

    it('should have the property reservedIpRangeId (base name: "reservedIpRangeId")', function() {
      // uncomment below and update the code to test the property reservedIpRangeId
      //var instance = new CloudMemorystoreForMemcachedApi.Instance();
      //expect(instance).to.be();
    });

    it('should have the property state (base name: "state")', function() {
      // uncomment below and update the code to test the property state
      //var instance = new CloudMemorystoreForMemcachedApi.Instance();
      //expect(instance).to.be();
    });

    it('should have the property updateAvailable (base name: "updateAvailable")', function() {
      // uncomment below and update the code to test the property updateAvailable
      //var instance = new CloudMemorystoreForMemcachedApi.Instance();
      //expect(instance).to.be();
    });

    it('should have the property updateTime (base name: "updateTime")', function() {
      // uncomment below and update the code to test the property updateTime
      //var instance = new CloudMemorystoreForMemcachedApi.Instance();
      //expect(instance).to.be();
    });

    it('should have the property zones (base name: "zones")', function() {
      // uncomment below and update the code to test the property zones
      //var instance = new CloudMemorystoreForMemcachedApi.Instance();
      //expect(instance).to.be();
    });

  });

}));
