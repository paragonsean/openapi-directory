# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.memcache_parameters import MemcacheParameters
from openapi_server import util


class Node(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, host: str=None, memcache_full_version: str=None, memcache_version: str=None, node_id: str=None, parameters: MemcacheParameters=None, port: int=None, state: str=None, zone: str=None):
        """Node - a model defined in OpenAPI

        :param host: The host of this Node.
        :param memcache_full_version: The memcache_full_version of this Node.
        :param memcache_version: The memcache_version of this Node.
        :param node_id: The node_id of this Node.
        :param parameters: The parameters of this Node.
        :param port: The port of this Node.
        :param state: The state of this Node.
        :param zone: The zone of this Node.
        """
        self.openapi_types = {
            'host': str,
            'memcache_full_version': str,
            'memcache_version': str,
            'node_id': str,
            'parameters': MemcacheParameters,
            'port': int,
            'state': str,
            'zone': str
        }

        self.attribute_map = {
            'host': 'host',
            'memcache_full_version': 'memcacheFullVersion',
            'memcache_version': 'memcacheVersion',
            'node_id': 'nodeId',
            'parameters': 'parameters',
            'port': 'port',
            'state': 'state',
            'zone': 'zone'
        }

        self._host = host
        self._memcache_full_version = memcache_full_version
        self._memcache_version = memcache_version
        self._node_id = node_id
        self._parameters = parameters
        self._port = port
        self._state = state
        self._zone = zone

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Node':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Node of this Node.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def host(self):
        """Gets the host of this Node.

        Output only. Hostname or IP address of the Memcached node used by the clients to connect to the Memcached server on this node.

        :return: The host of this Node.
        :rtype: str
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this Node.

        Output only. Hostname or IP address of the Memcached node used by the clients to connect to the Memcached server on this node.

        :param host: The host of this Node.
        :type host: str
        """

        self._host = host

    @property
    def memcache_full_version(self):
        """Gets the memcache_full_version of this Node.

        Output only. The full version of memcached server running on this node. e.g. - memcached-1.5.16

        :return: The memcache_full_version of this Node.
        :rtype: str
        """
        return self._memcache_full_version

    @memcache_full_version.setter
    def memcache_full_version(self, memcache_full_version):
        """Sets the memcache_full_version of this Node.

        Output only. The full version of memcached server running on this node. e.g. - memcached-1.5.16

        :param memcache_full_version: The memcache_full_version of this Node.
        :type memcache_full_version: str
        """

        self._memcache_full_version = memcache_full_version

    @property
    def memcache_version(self):
        """Gets the memcache_version of this Node.

        Output only. Major version of memcached server running on this node, e.g. MEMCACHE_1_5

        :return: The memcache_version of this Node.
        :rtype: str
        """
        return self._memcache_version

    @memcache_version.setter
    def memcache_version(self, memcache_version):
        """Sets the memcache_version of this Node.

        Output only. Major version of memcached server running on this node, e.g. MEMCACHE_1_5

        :param memcache_version: The memcache_version of this Node.
        :type memcache_version: str
        """
        allowed_values = ["MEMCACHE_VERSION_UNSPECIFIED", "MEMCACHE_1_5", "MEMCACHE_1_6_15"]  # noqa: E501
        if memcache_version not in allowed_values:
            raise ValueError(
                "Invalid value for `memcache_version` ({0}), must be one of {1}"
                .format(memcache_version, allowed_values)
            )

        self._memcache_version = memcache_version

    @property
    def node_id(self):
        """Gets the node_id of this Node.

        Output only. Identifier of the Memcached node. The node id does not include project or location like the Memcached instance name.

        :return: The node_id of this Node.
        :rtype: str
        """
        return self._node_id

    @node_id.setter
    def node_id(self, node_id):
        """Sets the node_id of this Node.

        Output only. Identifier of the Memcached node. The node id does not include project or location like the Memcached instance name.

        :param node_id: The node_id of this Node.
        :type node_id: str
        """

        self._node_id = node_id

    @property
    def parameters(self):
        """Gets the parameters of this Node.


        :return: The parameters of this Node.
        :rtype: MemcacheParameters
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this Node.


        :param parameters: The parameters of this Node.
        :type parameters: MemcacheParameters
        """

        self._parameters = parameters

    @property
    def port(self):
        """Gets the port of this Node.

        Output only. The port number of the Memcached server on this node.

        :return: The port of this Node.
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this Node.

        Output only. The port number of the Memcached server on this node.

        :param port: The port of this Node.
        :type port: int
        """

        self._port = port

    @property
    def state(self):
        """Gets the state of this Node.

        Output only. Current state of the Memcached node.

        :return: The state of this Node.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Node.

        Output only. Current state of the Memcached node.

        :param state: The state of this Node.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "CREATING", "READY", "DELETING", "UPDATING"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def zone(self):
        """Gets the zone of this Node.

        Output only. Location (GCP Zone) for the Memcached node.

        :return: The zone of this Node.
        :rtype: str
        """
        return self._zone

    @zone.setter
    def zone(self, zone):
        """Sets the zone of this Node.

        Output only. Location (GCP Zone) for the Memcached node.

        :param zone: The zone of this Node.
        :type zone: str
        """

        self._zone = zone
