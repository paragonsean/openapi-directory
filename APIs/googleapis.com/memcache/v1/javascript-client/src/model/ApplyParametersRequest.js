/**
 * Cloud Memorystore for Memcached API
 * Google Cloud Memorystore for Memcached API is used for creating and managing Memcached instances in GCP.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ApplyParametersRequest model module.
 * @module model/ApplyParametersRequest
 * @version v1
 */
class ApplyParametersRequest {
    /**
     * Constructs a new <code>ApplyParametersRequest</code>.
     * Request for ApplyParameters.
     * @alias module:model/ApplyParametersRequest
     */
    constructor() { 
        
        ApplyParametersRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ApplyParametersRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ApplyParametersRequest} obj Optional instance to populate.
     * @return {module:model/ApplyParametersRequest} The populated <code>ApplyParametersRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ApplyParametersRequest();

            if (data.hasOwnProperty('applyAll')) {
                obj['applyAll'] = ApiClient.convertToType(data['applyAll'], 'Boolean');
            }
            if (data.hasOwnProperty('nodeIds')) {
                obj['nodeIds'] = ApiClient.convertToType(data['nodeIds'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ApplyParametersRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ApplyParametersRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['nodeIds'])) {
            throw new Error("Expected the field `nodeIds` to be an array in the JSON data but got " + data['nodeIds']);
        }

        return true;
    }


}



/**
 * Whether to apply instance-level parameter group to all nodes. If set to true, users are restricted from specifying individual nodes, and `ApplyParameters` updates all nodes within the instance.
 * @member {Boolean} applyAll
 */
ApplyParametersRequest.prototype['applyAll'] = undefined;

/**
 * Nodes to which the instance-level parameter group is applied.
 * @member {Array.<String>} nodeIds
 */
ApplyParametersRequest.prototype['nodeIds'] = undefined;






export default ApplyParametersRequest;

