/**
 * Cloud Memorystore for Memcached API
 * Google Cloud Memorystore for Memcached API is used for creating and managing Memcached instances in GCP.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudSaasacceleratorManagementProvidersV1MaintenanceSchedule.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudSaasacceleratorManagementProvidersV1MaintenanceSchedule::OAIGoogleCloudSaasacceleratorManagementProvidersV1MaintenanceSchedule(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudSaasacceleratorManagementProvidersV1MaintenanceSchedule::OAIGoogleCloudSaasacceleratorManagementProvidersV1MaintenanceSchedule() {
    this->initializeModel();
}

OAIGoogleCloudSaasacceleratorManagementProvidersV1MaintenanceSchedule::~OAIGoogleCloudSaasacceleratorManagementProvidersV1MaintenanceSchedule() {}

void OAIGoogleCloudSaasacceleratorManagementProvidersV1MaintenanceSchedule::initializeModel() {

    m_can_reschedule_isSet = false;
    m_can_reschedule_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_rollout_management_policy_isSet = false;
    m_rollout_management_policy_isValid = false;

    m_schedule_deadline_time_isSet = false;
    m_schedule_deadline_time_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;
}

void OAIGoogleCloudSaasacceleratorManagementProvidersV1MaintenanceSchedule::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudSaasacceleratorManagementProvidersV1MaintenanceSchedule::fromJsonObject(QJsonObject json) {

    m_can_reschedule_isValid = ::OpenAPI::fromJsonValue(m_can_reschedule, json[QString("canReschedule")]);
    m_can_reschedule_isSet = !json[QString("canReschedule")].isNull() && m_can_reschedule_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("endTime")]);
    m_end_time_isSet = !json[QString("endTime")].isNull() && m_end_time_isValid;

    m_rollout_management_policy_isValid = ::OpenAPI::fromJsonValue(m_rollout_management_policy, json[QString("rolloutManagementPolicy")]);
    m_rollout_management_policy_isSet = !json[QString("rolloutManagementPolicy")].isNull() && m_rollout_management_policy_isValid;

    m_schedule_deadline_time_isValid = ::OpenAPI::fromJsonValue(m_schedule_deadline_time, json[QString("scheduleDeadlineTime")]);
    m_schedule_deadline_time_isSet = !json[QString("scheduleDeadlineTime")].isNull() && m_schedule_deadline_time_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;
}

QString OAIGoogleCloudSaasacceleratorManagementProvidersV1MaintenanceSchedule::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudSaasacceleratorManagementProvidersV1MaintenanceSchedule::asJsonObject() const {
    QJsonObject obj;
    if (m_can_reschedule_isSet) {
        obj.insert(QString("canReschedule"), ::OpenAPI::toJsonValue(m_can_reschedule));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("endTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_rollout_management_policy_isSet) {
        obj.insert(QString("rolloutManagementPolicy"), ::OpenAPI::toJsonValue(m_rollout_management_policy));
    }
    if (m_schedule_deadline_time_isSet) {
        obj.insert(QString("scheduleDeadlineTime"), ::OpenAPI::toJsonValue(m_schedule_deadline_time));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    return obj;
}

bool OAIGoogleCloudSaasacceleratorManagementProvidersV1MaintenanceSchedule::isCanReschedule() const {
    return m_can_reschedule;
}
void OAIGoogleCloudSaasacceleratorManagementProvidersV1MaintenanceSchedule::setCanReschedule(const bool &can_reschedule) {
    m_can_reschedule = can_reschedule;
    m_can_reschedule_isSet = true;
}

bool OAIGoogleCloudSaasacceleratorManagementProvidersV1MaintenanceSchedule::is_can_reschedule_Set() const{
    return m_can_reschedule_isSet;
}

bool OAIGoogleCloudSaasacceleratorManagementProvidersV1MaintenanceSchedule::is_can_reschedule_Valid() const{
    return m_can_reschedule_isValid;
}

QString OAIGoogleCloudSaasacceleratorManagementProvidersV1MaintenanceSchedule::getEndTime() const {
    return m_end_time;
}
void OAIGoogleCloudSaasacceleratorManagementProvidersV1MaintenanceSchedule::setEndTime(const QString &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIGoogleCloudSaasacceleratorManagementProvidersV1MaintenanceSchedule::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIGoogleCloudSaasacceleratorManagementProvidersV1MaintenanceSchedule::is_end_time_Valid() const{
    return m_end_time_isValid;
}

QString OAIGoogleCloudSaasacceleratorManagementProvidersV1MaintenanceSchedule::getRolloutManagementPolicy() const {
    return m_rollout_management_policy;
}
void OAIGoogleCloudSaasacceleratorManagementProvidersV1MaintenanceSchedule::setRolloutManagementPolicy(const QString &rollout_management_policy) {
    m_rollout_management_policy = rollout_management_policy;
    m_rollout_management_policy_isSet = true;
}

bool OAIGoogleCloudSaasacceleratorManagementProvidersV1MaintenanceSchedule::is_rollout_management_policy_Set() const{
    return m_rollout_management_policy_isSet;
}

bool OAIGoogleCloudSaasacceleratorManagementProvidersV1MaintenanceSchedule::is_rollout_management_policy_Valid() const{
    return m_rollout_management_policy_isValid;
}

QString OAIGoogleCloudSaasacceleratorManagementProvidersV1MaintenanceSchedule::getScheduleDeadlineTime() const {
    return m_schedule_deadline_time;
}
void OAIGoogleCloudSaasacceleratorManagementProvidersV1MaintenanceSchedule::setScheduleDeadlineTime(const QString &schedule_deadline_time) {
    m_schedule_deadline_time = schedule_deadline_time;
    m_schedule_deadline_time_isSet = true;
}

bool OAIGoogleCloudSaasacceleratorManagementProvidersV1MaintenanceSchedule::is_schedule_deadline_time_Set() const{
    return m_schedule_deadline_time_isSet;
}

bool OAIGoogleCloudSaasacceleratorManagementProvidersV1MaintenanceSchedule::is_schedule_deadline_time_Valid() const{
    return m_schedule_deadline_time_isValid;
}

QString OAIGoogleCloudSaasacceleratorManagementProvidersV1MaintenanceSchedule::getStartTime() const {
    return m_start_time;
}
void OAIGoogleCloudSaasacceleratorManagementProvidersV1MaintenanceSchedule::setStartTime(const QString &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIGoogleCloudSaasacceleratorManagementProvidersV1MaintenanceSchedule::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIGoogleCloudSaasacceleratorManagementProvidersV1MaintenanceSchedule::is_start_time_Valid() const{
    return m_start_time_isValid;
}

bool OAIGoogleCloudSaasacceleratorManagementProvidersV1MaintenanceSchedule::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_can_reschedule_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rollout_management_policy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schedule_deadline_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudSaasacceleratorManagementProvidersV1MaintenanceSchedule::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
