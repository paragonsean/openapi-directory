/**
 * Cloud Memorystore for Memcached API
 * Google Cloud Memorystore for Memcached API is used for creating and managing Memcached instances in GCP.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudSaasacceleratorManagementProvidersV1PerSliSloEligibility.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudSaasacceleratorManagementProvidersV1PerSliSloEligibility::OAIGoogleCloudSaasacceleratorManagementProvidersV1PerSliSloEligibility(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudSaasacceleratorManagementProvidersV1PerSliSloEligibility::OAIGoogleCloudSaasacceleratorManagementProvidersV1PerSliSloEligibility() {
    this->initializeModel();
}

OAIGoogleCloudSaasacceleratorManagementProvidersV1PerSliSloEligibility::~OAIGoogleCloudSaasacceleratorManagementProvidersV1PerSliSloEligibility() {}

void OAIGoogleCloudSaasacceleratorManagementProvidersV1PerSliSloEligibility::initializeModel() {

    m_eligibilities_isSet = false;
    m_eligibilities_isValid = false;
}

void OAIGoogleCloudSaasacceleratorManagementProvidersV1PerSliSloEligibility::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudSaasacceleratorManagementProvidersV1PerSliSloEligibility::fromJsonObject(QJsonObject json) {

    m_eligibilities_isValid = ::OpenAPI::fromJsonValue(m_eligibilities, json[QString("eligibilities")]);
    m_eligibilities_isSet = !json[QString("eligibilities")].isNull() && m_eligibilities_isValid;
}

QString OAIGoogleCloudSaasacceleratorManagementProvidersV1PerSliSloEligibility::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudSaasacceleratorManagementProvidersV1PerSliSloEligibility::asJsonObject() const {
    QJsonObject obj;
    if (m_eligibilities.size() > 0) {
        obj.insert(QString("eligibilities"), ::OpenAPI::toJsonValue(m_eligibilities));
    }
    return obj;
}

QMap<QString, OAIGoogleCloudSaasacceleratorManagementProvidersV1SloEligibility> OAIGoogleCloudSaasacceleratorManagementProvidersV1PerSliSloEligibility::getEligibilities() const {
    return m_eligibilities;
}
void OAIGoogleCloudSaasacceleratorManagementProvidersV1PerSliSloEligibility::setEligibilities(const QMap<QString, OAIGoogleCloudSaasacceleratorManagementProvidersV1SloEligibility> &eligibilities) {
    m_eligibilities = eligibilities;
    m_eligibilities_isSet = true;
}

bool OAIGoogleCloudSaasacceleratorManagementProvidersV1PerSliSloEligibility::is_eligibilities_Set() const{
    return m_eligibilities_isSet;
}

bool OAIGoogleCloudSaasacceleratorManagementProvidersV1PerSliSloEligibility::is_eligibilities_Valid() const{
    return m_eligibilities_isValid;
}

bool OAIGoogleCloudSaasacceleratorManagementProvidersV1PerSliSloEligibility::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_eligibilities.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudSaasacceleratorManagementProvidersV1PerSliSloEligibility::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
