/**
 * Cloud Memorystore for Memcached API
 * Google Cloud Memorystore for Memcached API is used for creating and managing Memcached instances in GCP.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudMemcacheV1MaintenancePolicy.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudMemcacheV1MaintenancePolicy::OAIGoogleCloudMemcacheV1MaintenancePolicy(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudMemcacheV1MaintenancePolicy::OAIGoogleCloudMemcacheV1MaintenancePolicy() {
    this->initializeModel();
}

OAIGoogleCloudMemcacheV1MaintenancePolicy::~OAIGoogleCloudMemcacheV1MaintenancePolicy() {}

void OAIGoogleCloudMemcacheV1MaintenancePolicy::initializeModel() {

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;

    m_weekly_maintenance_window_isSet = false;
    m_weekly_maintenance_window_isValid = false;
}

void OAIGoogleCloudMemcacheV1MaintenancePolicy::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudMemcacheV1MaintenancePolicy::fromJsonObject(QJsonObject json) {

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;

    m_weekly_maintenance_window_isValid = ::OpenAPI::fromJsonValue(m_weekly_maintenance_window, json[QString("weeklyMaintenanceWindow")]);
    m_weekly_maintenance_window_isSet = !json[QString("weeklyMaintenanceWindow")].isNull() && m_weekly_maintenance_window_isValid;
}

QString OAIGoogleCloudMemcacheV1MaintenancePolicy::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudMemcacheV1MaintenancePolicy::asJsonObject() const {
    QJsonObject obj;
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    if (m_weekly_maintenance_window.size() > 0) {
        obj.insert(QString("weeklyMaintenanceWindow"), ::OpenAPI::toJsonValue(m_weekly_maintenance_window));
    }
    return obj;
}

QString OAIGoogleCloudMemcacheV1MaintenancePolicy::getCreateTime() const {
    return m_create_time;
}
void OAIGoogleCloudMemcacheV1MaintenancePolicy::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIGoogleCloudMemcacheV1MaintenancePolicy::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIGoogleCloudMemcacheV1MaintenancePolicy::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAIGoogleCloudMemcacheV1MaintenancePolicy::getDescription() const {
    return m_description;
}
void OAIGoogleCloudMemcacheV1MaintenancePolicy::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIGoogleCloudMemcacheV1MaintenancePolicy::is_description_Set() const{
    return m_description_isSet;
}

bool OAIGoogleCloudMemcacheV1MaintenancePolicy::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIGoogleCloudMemcacheV1MaintenancePolicy::getUpdateTime() const {
    return m_update_time;
}
void OAIGoogleCloudMemcacheV1MaintenancePolicy::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAIGoogleCloudMemcacheV1MaintenancePolicy::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAIGoogleCloudMemcacheV1MaintenancePolicy::is_update_time_Valid() const{
    return m_update_time_isValid;
}

QList<OAIWeeklyMaintenanceWindow> OAIGoogleCloudMemcacheV1MaintenancePolicy::getWeeklyMaintenanceWindow() const {
    return m_weekly_maintenance_window;
}
void OAIGoogleCloudMemcacheV1MaintenancePolicy::setWeeklyMaintenanceWindow(const QList<OAIWeeklyMaintenanceWindow> &weekly_maintenance_window) {
    m_weekly_maintenance_window = weekly_maintenance_window;
    m_weekly_maintenance_window_isSet = true;
}

bool OAIGoogleCloudMemcacheV1MaintenancePolicy::is_weekly_maintenance_window_Set() const{
    return m_weekly_maintenance_window_isSet;
}

bool OAIGoogleCloudMemcacheV1MaintenancePolicy::is_weekly_maintenance_window_Valid() const{
    return m_weekly_maintenance_window_isValid;
}

bool OAIGoogleCloudMemcacheV1MaintenancePolicy::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_weekly_maintenance_window.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudMemcacheV1MaintenancePolicy::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
