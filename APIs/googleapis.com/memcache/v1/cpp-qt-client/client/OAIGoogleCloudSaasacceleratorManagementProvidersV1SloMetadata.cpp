/**
 * Cloud Memorystore for Memcached API
 * Google Cloud Memorystore for Memcached API is used for creating and managing Memcached instances in GCP.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudSaasacceleratorManagementProvidersV1SloMetadata.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudSaasacceleratorManagementProvidersV1SloMetadata::OAIGoogleCloudSaasacceleratorManagementProvidersV1SloMetadata(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudSaasacceleratorManagementProvidersV1SloMetadata::OAIGoogleCloudSaasacceleratorManagementProvidersV1SloMetadata() {
    this->initializeModel();
}

OAIGoogleCloudSaasacceleratorManagementProvidersV1SloMetadata::~OAIGoogleCloudSaasacceleratorManagementProvidersV1SloMetadata() {}

void OAIGoogleCloudSaasacceleratorManagementProvidersV1SloMetadata::initializeModel() {

    m_nodes_isSet = false;
    m_nodes_isValid = false;

    m_per_sli_eligibility_isSet = false;
    m_per_sli_eligibility_isValid = false;

    m_tier_isSet = false;
    m_tier_isValid = false;
}

void OAIGoogleCloudSaasacceleratorManagementProvidersV1SloMetadata::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudSaasacceleratorManagementProvidersV1SloMetadata::fromJsonObject(QJsonObject json) {

    m_nodes_isValid = ::OpenAPI::fromJsonValue(m_nodes, json[QString("nodes")]);
    m_nodes_isSet = !json[QString("nodes")].isNull() && m_nodes_isValid;

    m_per_sli_eligibility_isValid = ::OpenAPI::fromJsonValue(m_per_sli_eligibility, json[QString("perSliEligibility")]);
    m_per_sli_eligibility_isSet = !json[QString("perSliEligibility")].isNull() && m_per_sli_eligibility_isValid;

    m_tier_isValid = ::OpenAPI::fromJsonValue(m_tier, json[QString("tier")]);
    m_tier_isSet = !json[QString("tier")].isNull() && m_tier_isValid;
}

QString OAIGoogleCloudSaasacceleratorManagementProvidersV1SloMetadata::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudSaasacceleratorManagementProvidersV1SloMetadata::asJsonObject() const {
    QJsonObject obj;
    if (m_nodes.size() > 0) {
        obj.insert(QString("nodes"), ::OpenAPI::toJsonValue(m_nodes));
    }
    if (m_per_sli_eligibility.isSet()) {
        obj.insert(QString("perSliEligibility"), ::OpenAPI::toJsonValue(m_per_sli_eligibility));
    }
    if (m_tier_isSet) {
        obj.insert(QString("tier"), ::OpenAPI::toJsonValue(m_tier));
    }
    return obj;
}

QList<OAIGoogleCloudSaasacceleratorManagementProvidersV1NodeSloMetadata> OAIGoogleCloudSaasacceleratorManagementProvidersV1SloMetadata::getNodes() const {
    return m_nodes;
}
void OAIGoogleCloudSaasacceleratorManagementProvidersV1SloMetadata::setNodes(const QList<OAIGoogleCloudSaasacceleratorManagementProvidersV1NodeSloMetadata> &nodes) {
    m_nodes = nodes;
    m_nodes_isSet = true;
}

bool OAIGoogleCloudSaasacceleratorManagementProvidersV1SloMetadata::is_nodes_Set() const{
    return m_nodes_isSet;
}

bool OAIGoogleCloudSaasacceleratorManagementProvidersV1SloMetadata::is_nodes_Valid() const{
    return m_nodes_isValid;
}

OAIGoogleCloudSaasacceleratorManagementProvidersV1PerSliSloEligibility OAIGoogleCloudSaasacceleratorManagementProvidersV1SloMetadata::getPerSliEligibility() const {
    return m_per_sli_eligibility;
}
void OAIGoogleCloudSaasacceleratorManagementProvidersV1SloMetadata::setPerSliEligibility(const OAIGoogleCloudSaasacceleratorManagementProvidersV1PerSliSloEligibility &per_sli_eligibility) {
    m_per_sli_eligibility = per_sli_eligibility;
    m_per_sli_eligibility_isSet = true;
}

bool OAIGoogleCloudSaasacceleratorManagementProvidersV1SloMetadata::is_per_sli_eligibility_Set() const{
    return m_per_sli_eligibility_isSet;
}

bool OAIGoogleCloudSaasacceleratorManagementProvidersV1SloMetadata::is_per_sli_eligibility_Valid() const{
    return m_per_sli_eligibility_isValid;
}

QString OAIGoogleCloudSaasacceleratorManagementProvidersV1SloMetadata::getTier() const {
    return m_tier;
}
void OAIGoogleCloudSaasacceleratorManagementProvidersV1SloMetadata::setTier(const QString &tier) {
    m_tier = tier;
    m_tier_isSet = true;
}

bool OAIGoogleCloudSaasacceleratorManagementProvidersV1SloMetadata::is_tier_Set() const{
    return m_tier_isSet;
}

bool OAIGoogleCloudSaasacceleratorManagementProvidersV1SloMetadata::is_tier_Valid() const{
    return m_tier_isValid;
}

bool OAIGoogleCloudSaasacceleratorManagementProvidersV1SloMetadata::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_nodes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_per_sli_eligibility.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tier_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudSaasacceleratorManagementProvidersV1SloMetadata::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
