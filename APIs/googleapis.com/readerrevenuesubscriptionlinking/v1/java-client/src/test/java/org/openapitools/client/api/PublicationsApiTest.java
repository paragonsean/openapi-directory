/*
 * Reader Revenue Subscription Linking API
 * readerrevenuesubscriptionlinking.googleapis.com API.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ReaderEntitlements;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PublicationsApi
 */
@Disabled
public class PublicationsApiTest {

    private final PublicationsApi api = new PublicationsApi();

    /**
     * Removes a publication reader, effectively severing the association with a Google user. If &#x60;force&#x60; is set to true, any entitlements for this reader will also be deleted. (Otherwise, the request will only work if the reader has no entitlements.) - If the reader does not exist, return NOT_FOUND. - Return FAILED_PRECONDITION if the force field is false (or unset) and entitlements are present.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void readerrevenuesubscriptionlinkingPublicationsReadersDeleteTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Boolean force = null;
        Object response = api.readerrevenuesubscriptionlinkingPublicationsReadersDelete(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, force);
        // TODO: test validations
    }

    /**
     * Gets the reader entitlements for a publication reader. - Returns PERMISSION_DENIED if the caller does not have access. - Returns NOT_FOUND if the reader does not exist.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void readerrevenuesubscriptionlinkingPublicationsReadersGetEntitlementsTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        ReaderEntitlements response = api.readerrevenuesubscriptionlinkingPublicationsReadersGetEntitlements(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Updates the reader entitlements for a publication reader. The entire reader entitlements will be overwritten by the new reader entitlements in the payload, like a PUT. - Returns PERMISSION_DENIED if the caller does not have access. - Returns NOT_FOUND if the reader does not exist.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void readerrevenuesubscriptionlinkingPublicationsReadersUpdateEntitlementsTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String updateMask = null;
        ReaderEntitlements readerEntitlements = null;
        ReaderEntitlements response = api.readerrevenuesubscriptionlinkingPublicationsReadersUpdateEntitlements(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, updateMask, readerEntitlements);
        // TODO: test validations
    }

}
