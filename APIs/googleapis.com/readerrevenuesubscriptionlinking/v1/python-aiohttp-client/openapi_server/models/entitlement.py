# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Entitlement(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, detail: str=None, expire_time: str=None, product_id: str=None, subscription_token: str=None):
        """Entitlement - a model defined in OpenAPI

        :param detail: The detail of this Entitlement.
        :param expire_time: The expire_time of this Entitlement.
        :param product_id: The product_id of this Entitlement.
        :param subscription_token: The subscription_token of this Entitlement.
        """
        self.openapi_types = {
            'detail': str,
            'expire_time': str,
            'product_id': str,
            'subscription_token': str
        }

        self.attribute_map = {
            'detail': 'detail',
            'expire_time': 'expireTime',
            'product_id': 'productId',
            'subscription_token': 'subscriptionToken'
        }

        self._detail = detail
        self._expire_time = expire_time
        self._product_id = product_id
        self._subscription_token = subscription_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Entitlement':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Entitlement of this Entitlement.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def detail(self):
        """Gets the detail of this Entitlement.

        The detail field can carry a description of the SKU that corresponds to what the user has been granted access to. This description, which is opaque to Google, can be displayed in the Google user subscription console for users who linked the subscription to a Google Account. Max 80 character limit.

        :return: The detail of this Entitlement.
        :rtype: str
        """
        return self._detail

    @detail.setter
    def detail(self, detail):
        """Sets the detail of this Entitlement.

        The detail field can carry a description of the SKU that corresponds to what the user has been granted access to. This description, which is opaque to Google, can be displayed in the Google user subscription console for users who linked the subscription to a Google Account. Max 80 character limit.

        :param detail: The detail of this Entitlement.
        :type detail: str
        """

        self._detail = detail

    @property
    def expire_time(self):
        """Gets the expire_time of this Entitlement.

        Required. Expiration time of the entitlement. Entitlements that have expired over 30 days will be purged. Required. LINT.IfChange(expire_time) The max expire_time is 398 days from now(). LINT.ThenChange(//depot/google3/java/com/google/subscribewithgoogle/accountlinking/subscriptionlink/service/config/protoconf.pi:max_expiry_age)

        :return: The expire_time of this Entitlement.
        :rtype: str
        """
        return self._expire_time

    @expire_time.setter
    def expire_time(self, expire_time):
        """Sets the expire_time of this Entitlement.

        Required. Expiration time of the entitlement. Entitlements that have expired over 30 days will be purged. Required. LINT.IfChange(expire_time) The max expire_time is 398 days from now(). LINT.ThenChange(//depot/google3/java/com/google/subscribewithgoogle/accountlinking/subscriptionlink/service/config/protoconf.pi:max_expiry_age)

        :param expire_time: The expire_time of this Entitlement.
        :type expire_time: str
        """

        self._expire_time = expire_time

    @property
    def product_id(self):
        """Gets the product_id of this Entitlement.

        Required. The publication's product ID that the user has access to. This is the same product ID as can be found in Schema.org markup (http://schema.org/productID). E.g. \"dailybugle.com:basic\"

        :return: The product_id of this Entitlement.
        :rtype: str
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """Sets the product_id of this Entitlement.

        Required. The publication's product ID that the user has access to. This is the same product ID as can be found in Schema.org markup (http://schema.org/productID). E.g. \"dailybugle.com:basic\"

        :param product_id: The product_id of this Entitlement.
        :type product_id: str
        """

        self._product_id = product_id

    @property
    def subscription_token(self):
        """Gets the subscription_token of this Entitlement.

        A source-specific subscription token. This is an opaque string that the publisher provides to Google. This token is opaque and has no meaning to Google.

        :return: The subscription_token of this Entitlement.
        :rtype: str
        """
        return self._subscription_token

    @subscription_token.setter
    def subscription_token(self, subscription_token):
        """Sets the subscription_token of this Entitlement.

        A source-specific subscription token. This is an opaque string that the publisher provides to Google. This token is opaque and has no meaning to Google.

        :param subscription_token: The subscription_token of this Entitlement.
        :type subscription_token: str
        """

        self._subscription_token = subscription_token
