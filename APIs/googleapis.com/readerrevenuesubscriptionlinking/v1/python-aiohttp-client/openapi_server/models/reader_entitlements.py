# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.entitlement import Entitlement
from openapi_server import util


class ReaderEntitlements(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, entitlements: List[Entitlement]=None, name: str=None):
        """ReaderEntitlements - a model defined in OpenAPI

        :param entitlements: The entitlements of this ReaderEntitlements.
        :param name: The name of this ReaderEntitlements.
        """
        self.openapi_types = {
            'entitlements': List[Entitlement],
            'name': str
        }

        self.attribute_map = {
            'entitlements': 'entitlements',
            'name': 'name'
        }

        self._entitlements = entitlements
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReaderEntitlements':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ReaderEntitlements of this ReaderEntitlements.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def entitlements(self):
        """Gets the entitlements of this ReaderEntitlements.

        All of the entitlements for a publication reader.

        :return: The entitlements of this ReaderEntitlements.
        :rtype: List[Entitlement]
        """
        return self._entitlements

    @entitlements.setter
    def entitlements(self, entitlements):
        """Sets the entitlements of this ReaderEntitlements.

        All of the entitlements for a publication reader.

        :param entitlements: The entitlements of this ReaderEntitlements.
        :type entitlements: List[Entitlement]
        """

        self._entitlements = entitlements

    @property
    def name(self):
        """Gets the name of this ReaderEntitlements.

        Output only. The resource name of the singleton.

        :return: The name of this ReaderEntitlements.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ReaderEntitlements.

        Output only. The resource name of the singleton.

        :param name: The name of this ReaderEntitlements.
        :type name: str
        """

        self._name = name
