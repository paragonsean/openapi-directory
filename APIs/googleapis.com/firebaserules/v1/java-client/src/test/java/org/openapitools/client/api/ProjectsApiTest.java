/*
 * Firebase Rules API
 * Creates and manages rules that determine when a Firebase Rules-enabled service should permit a request. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.GetReleaseExecutableResponse;
import org.openapitools.client.model.ListReleasesResponse;
import org.openapitools.client.model.ListRulesetsResponse;
import org.openapitools.client.model.Release;
import org.openapitools.client.model.Ruleset;
import org.openapitools.client.model.TestRulesetRequest;
import org.openapitools.client.model.TestRulesetResponse;
import org.openapitools.client.model.UpdateReleaseRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProjectsApi
 */
@Disabled
public class ProjectsApiTest {

    private final ProjectsApi api = new ProjectsApi();

    /**
     * Create a &#x60;Release&#x60;. Release names should reflect the developer&#39;s deployment practices. For example, the release name may include the environment name, application name, application version, or any other name meaningful to the developer. Once a &#x60;Release&#x60; refers to a &#x60;Ruleset&#x60;, the rules can be enforced by Firebase Rules-enabled services. More than one &#x60;Release&#x60; may be &#39;live&#39; concurrently. Consider the following three &#x60;Release&#x60; names for &#x60;projects/foo&#x60; and the &#x60;Ruleset&#x60; to which they refer. Release Name -&gt; Ruleset Name * projects/foo/releases/prod -&gt; projects/foo/rulesets/uuid123 * projects/foo/releases/prod/beta -&gt; projects/foo/rulesets/uuid123 * projects/foo/releases/prod/v23 -&gt; projects/foo/rulesets/uuid456 The relationships reflect a &#x60;Ruleset&#x60; rollout in progress. The &#x60;prod&#x60; and &#x60;prod/beta&#x60; releases refer to the same &#x60;Ruleset&#x60;. However, &#x60;prod/v23&#x60; refers to a new &#x60;Ruleset&#x60;. The &#x60;Ruleset&#x60; reference for a &#x60;Release&#x60; may be updated using the UpdateRelease method.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void firebaserulesProjectsReleasesCreateTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Release release = null;
        Release response = api.firebaserulesProjectsReleasesCreate(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, release);
        // TODO: test validations
    }

    /**
     * Get the &#x60;Release&#x60; executable to use when enforcing rules.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void firebaserulesProjectsReleasesGetExecutableTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String executableVersion = null;
        GetReleaseExecutableResponse response = api.firebaserulesProjectsReleasesGetExecutable(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, executableVersion);
        // TODO: test validations
    }

    /**
     * List the &#x60;Release&#x60; values for a project. This list may optionally be filtered by &#x60;Release&#x60; name, &#x60;Ruleset&#x60; name, &#x60;TestSuite&#x60; name, or any combination thereof.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void firebaserulesProjectsReleasesListTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        Integer pageSize = null;
        String pageToken = null;
        ListReleasesResponse response = api.firebaserulesProjectsReleasesList(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Update a &#x60;Release&#x60; via PATCH. Only updates to &#x60;ruleset_name&#x60; will be honored. &#x60;Release&#x60; rename is not supported. To create a &#x60;Release&#x60; use the CreateRelease method.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void firebaserulesProjectsReleasesPatchTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        UpdateReleaseRequest updateReleaseRequest = null;
        Release response = api.firebaserulesProjectsReleasesPatch(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, updateReleaseRequest);
        // TODO: test validations
    }

    /**
     * Create a &#x60;Ruleset&#x60; from &#x60;Source&#x60;. The &#x60;Ruleset&#x60; is given a unique generated name which is returned to the caller. &#x60;Source&#x60; containing syntactic or semantics errors will result in an error response indicating the first error encountered. For a detailed view of &#x60;Source&#x60; issues, use TestRuleset.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void firebaserulesProjectsRulesetsCreateTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Ruleset ruleset = null;
        Ruleset response = api.firebaserulesProjectsRulesetsCreate(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, ruleset);
        // TODO: test validations
    }

    /**
     * Delete a &#x60;Ruleset&#x60; by resource name. If the &#x60;Ruleset&#x60; is referenced by a &#x60;Release&#x60; the operation will fail.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void firebaserulesProjectsRulesetsDeleteTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object response = api.firebaserulesProjectsRulesetsDelete(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Get a &#x60;Ruleset&#x60; by name including the full &#x60;Source&#x60; contents.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void firebaserulesProjectsRulesetsGetTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Ruleset response = api.firebaserulesProjectsRulesetsGet(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * List &#x60;Ruleset&#x60; metadata only and optionally filter the results by &#x60;Ruleset&#x60; name. The full &#x60;Source&#x60; contents of a &#x60;Ruleset&#x60; may be retrieved with GetRuleset.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void firebaserulesProjectsRulesetsListTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        Integer pageSize = null;
        String pageToken = null;
        ListRulesetsResponse response = api.firebaserulesProjectsRulesetsList(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Test &#x60;Source&#x60; for syntactic and semantic correctness. Issues present, if any, will be returned to the caller with a description, severity, and source location. The test method may be executed with &#x60;Source&#x60; or a &#x60;Ruleset&#x60; name. Passing &#x60;Source&#x60; is useful for unit testing new rules. Passing a &#x60;Ruleset&#x60; name is useful for regression testing an existing rule. The following is an example of &#x60;Source&#x60; that permits users to upload images to a bucket bearing their user id and matching the correct metadata: _*Example*_ // Users are allowed to subscribe and unsubscribe to the blog. service firebase.storage { match /users/{userId}/images/{imageName} { allow write: if userId &#x3D;&#x3D; request.auth.uid &amp;&amp; (imageName.matches(&#39;*.png$&#39;) || imageName.matches(&#39;*.jpg$&#39;)) &amp;&amp; resource.mimeType.matches(&#39;^image/&#39;) } }
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void firebaserulesProjectsTestTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        TestRulesetRequest testRulesetRequest = null;
        TestRulesetResponse response = api.firebaserulesProjectsTest(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, testRulesetRequest);
        // TODO: test validations
    }

}
