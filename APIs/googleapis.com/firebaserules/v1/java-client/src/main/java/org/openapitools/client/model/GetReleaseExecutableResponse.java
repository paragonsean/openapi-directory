/*
 * Firebase Rules API
 * Creates and manages rules that determine when a Firebase Rules-enabled service should permit a request. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The response for FirebaseRulesService.GetReleaseExecutable
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:30:50.690532-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetReleaseExecutableResponse {
  public static final String SERIALIZED_NAME_EXECUTABLE = "executable";
  @SerializedName(SERIALIZED_NAME_EXECUTABLE)
  private byte[] executable;

  /**
   * The Rules runtime version of the executable.
   */
  @JsonAdapter(ExecutableVersionEnum.Adapter.class)
  public enum ExecutableVersionEnum {
    RELEASE_EXECUTABLE_VERSION_UNSPECIFIED("RELEASE_EXECUTABLE_VERSION_UNSPECIFIED"),
    
    FIREBASE_RULES_EXECUTABLE_V1("FIREBASE_RULES_EXECUTABLE_V1"),
    
    FIREBASE_RULES_EXECUTABLE_V2("FIREBASE_RULES_EXECUTABLE_V2");

    private String value;

    ExecutableVersionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ExecutableVersionEnum fromValue(String value) {
      for (ExecutableVersionEnum b : ExecutableVersionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ExecutableVersionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ExecutableVersionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ExecutableVersionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ExecutableVersionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ExecutableVersionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_EXECUTABLE_VERSION = "executableVersion";
  @SerializedName(SERIALIZED_NAME_EXECUTABLE_VERSION)
  private ExecutableVersionEnum executableVersion;

  /**
   * &#x60;Language&#x60; used to generate the executable bytes.
   */
  @JsonAdapter(LanguageEnum.Adapter.class)
  public enum LanguageEnum {
    LANGUAGE_UNSPECIFIED("LANGUAGE_UNSPECIFIED"),
    
    FIREBASE_RULES("FIREBASE_RULES"),
    
    EVENT_FLOW_TRIGGERS("EVENT_FLOW_TRIGGERS");

    private String value;

    LanguageEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LanguageEnum fromValue(String value) {
      for (LanguageEnum b : LanguageEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LanguageEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LanguageEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LanguageEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LanguageEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LanguageEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LANGUAGE = "language";
  @SerializedName(SERIALIZED_NAME_LANGUAGE)
  private LanguageEnum language;

  public static final String SERIALIZED_NAME_RULESET_NAME = "rulesetName";
  @SerializedName(SERIALIZED_NAME_RULESET_NAME)
  private String rulesetName;

  public static final String SERIALIZED_NAME_SYNC_TIME = "syncTime";
  @SerializedName(SERIALIZED_NAME_SYNC_TIME)
  private String syncTime;

  public static final String SERIALIZED_NAME_UPDATE_TIME = "updateTime";
  @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
  private String updateTime;

  public GetReleaseExecutableResponse() {
  }

  public GetReleaseExecutableResponse executable(byte[] executable) {
    this.executable = executable;
    return this;
  }

  /**
   * Executable view of the &#x60;Ruleset&#x60; referenced by the &#x60;Release&#x60;.
   * @return executable
   */
  @javax.annotation.Nullable
  public byte[] getExecutable() {
    return executable;
  }

  public void setExecutable(byte[] executable) {
    this.executable = executable;
  }


  public GetReleaseExecutableResponse executableVersion(ExecutableVersionEnum executableVersion) {
    this.executableVersion = executableVersion;
    return this;
  }

  /**
   * The Rules runtime version of the executable.
   * @return executableVersion
   */
  @javax.annotation.Nullable
  public ExecutableVersionEnum getExecutableVersion() {
    return executableVersion;
  }

  public void setExecutableVersion(ExecutableVersionEnum executableVersion) {
    this.executableVersion = executableVersion;
  }


  public GetReleaseExecutableResponse language(LanguageEnum language) {
    this.language = language;
    return this;
  }

  /**
   * &#x60;Language&#x60; used to generate the executable bytes.
   * @return language
   */
  @javax.annotation.Nullable
  public LanguageEnum getLanguage() {
    return language;
  }

  public void setLanguage(LanguageEnum language) {
    this.language = language;
  }


  public GetReleaseExecutableResponse rulesetName(String rulesetName) {
    this.rulesetName = rulesetName;
    return this;
  }

  /**
   * &#x60;Ruleset&#x60; name associated with the &#x60;Release&#x60; executable.
   * @return rulesetName
   */
  @javax.annotation.Nullable
  public String getRulesetName() {
    return rulesetName;
  }

  public void setRulesetName(String rulesetName) {
    this.rulesetName = rulesetName;
  }


  public GetReleaseExecutableResponse syncTime(String syncTime) {
    this.syncTime = syncTime;
    return this;
  }

  /**
   * Optional, indicates the freshness of the result. The response is guaranteed to be the latest within an interval up to the sync_time (inclusive).
   * @return syncTime
   */
  @javax.annotation.Nullable
  public String getSyncTime() {
    return syncTime;
  }

  public void setSyncTime(String syncTime) {
    this.syncTime = syncTime;
  }


  public GetReleaseExecutableResponse updateTime(String updateTime) {
    this.updateTime = updateTime;
    return this;
  }

  /**
   * Timestamp for the most recent &#x60;Release.update_time&#x60;.
   * @return updateTime
   */
  @javax.annotation.Nullable
  public String getUpdateTime() {
    return updateTime;
  }

  public void setUpdateTime(String updateTime) {
    this.updateTime = updateTime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetReleaseExecutableResponse getReleaseExecutableResponse = (GetReleaseExecutableResponse) o;
    return Arrays.equals(this.executable, getReleaseExecutableResponse.executable) &&
        Objects.equals(this.executableVersion, getReleaseExecutableResponse.executableVersion) &&
        Objects.equals(this.language, getReleaseExecutableResponse.language) &&
        Objects.equals(this.rulesetName, getReleaseExecutableResponse.rulesetName) &&
        Objects.equals(this.syncTime, getReleaseExecutableResponse.syncTime) &&
        Objects.equals(this.updateTime, getReleaseExecutableResponse.updateTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(Arrays.hashCode(executable), executableVersion, language, rulesetName, syncTime, updateTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetReleaseExecutableResponse {\n");
    sb.append("    executable: ").append(toIndentedString(executable)).append("\n");
    sb.append("    executableVersion: ").append(toIndentedString(executableVersion)).append("\n");
    sb.append("    language: ").append(toIndentedString(language)).append("\n");
    sb.append("    rulesetName: ").append(toIndentedString(rulesetName)).append("\n");
    sb.append("    syncTime: ").append(toIndentedString(syncTime)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("executable");
    openapiFields.add("executableVersion");
    openapiFields.add("language");
    openapiFields.add("rulesetName");
    openapiFields.add("syncTime");
    openapiFields.add("updateTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetReleaseExecutableResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetReleaseExecutableResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetReleaseExecutableResponse is not found in the empty JSON string", GetReleaseExecutableResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetReleaseExecutableResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetReleaseExecutableResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("executableVersion") != null && !jsonObj.get("executableVersion").isJsonNull()) && !jsonObj.get("executableVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `executableVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("executableVersion").toString()));
      }
      // validate the optional field `executableVersion`
      if (jsonObj.get("executableVersion") != null && !jsonObj.get("executableVersion").isJsonNull()) {
        ExecutableVersionEnum.validateJsonElement(jsonObj.get("executableVersion"));
      }
      if ((jsonObj.get("language") != null && !jsonObj.get("language").isJsonNull()) && !jsonObj.get("language").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `language` to be a primitive type in the JSON string but got `%s`", jsonObj.get("language").toString()));
      }
      // validate the optional field `language`
      if (jsonObj.get("language") != null && !jsonObj.get("language").isJsonNull()) {
        LanguageEnum.validateJsonElement(jsonObj.get("language"));
      }
      if ((jsonObj.get("rulesetName") != null && !jsonObj.get("rulesetName").isJsonNull()) && !jsonObj.get("rulesetName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rulesetName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rulesetName").toString()));
      }
      if ((jsonObj.get("syncTime") != null && !jsonObj.get("syncTime").isJsonNull()) && !jsonObj.get("syncTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `syncTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("syncTime").toString()));
      }
      if ((jsonObj.get("updateTime") != null && !jsonObj.get("updateTime").isJsonNull()) && !jsonObj.get("updateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updateTime").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetReleaseExecutableResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetReleaseExecutableResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetReleaseExecutableResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetReleaseExecutableResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<GetReleaseExecutableResponse>() {
           @Override
           public void write(JsonWriter out, GetReleaseExecutableResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetReleaseExecutableResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetReleaseExecutableResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetReleaseExecutableResponse
   * @throws IOException if the JSON string is invalid with respect to GetReleaseExecutableResponse
   */
  public static GetReleaseExecutableResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetReleaseExecutableResponse.class);
  }

  /**
   * Convert an instance of GetReleaseExecutableResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

