/*
 * Firebase Rules API
 * Creates and manages rules that determine when a Firebase Rules-enabled service should permit a request. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.FunctionMock;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * &#x60;TestCase&#x60; messages provide the request context and an expectation as to whether the given context will be allowed or denied. Test cases may specify the &#x60;request&#x60;, &#x60;resource&#x60;, and &#x60;function_mocks&#x60; to mock a function call to a service-provided function. The &#x60;request&#x60; object represents context present at request-time. The &#x60;resource&#x60; is the value of the target resource as it appears in persistent storage before the request is executed.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:30:50.690532-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TestCase {
  /**
   * Test expectation.
   */
  @JsonAdapter(ExpectationEnum.Adapter.class)
  public enum ExpectationEnum {
    EXPECTATION_UNSPECIFIED("EXPECTATION_UNSPECIFIED"),
    
    ALLOW("ALLOW"),
    
    DENY("DENY");

    private String value;

    ExpectationEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ExpectationEnum fromValue(String value) {
      for (ExpectationEnum b : ExpectationEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ExpectationEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ExpectationEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ExpectationEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ExpectationEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ExpectationEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_EXPECTATION = "expectation";
  @SerializedName(SERIALIZED_NAME_EXPECTATION)
  private ExpectationEnum expectation;

  /**
   * Specifies what should be included in the response.
   */
  @JsonAdapter(ExpressionReportLevelEnum.Adapter.class)
  public enum ExpressionReportLevelEnum {
    LEVEL_UNSPECIFIED("LEVEL_UNSPECIFIED"),
    
    NONE("NONE"),
    
    FULL("FULL"),
    
    VISITED("VISITED");

    private String value;

    ExpressionReportLevelEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ExpressionReportLevelEnum fromValue(String value) {
      for (ExpressionReportLevelEnum b : ExpressionReportLevelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ExpressionReportLevelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ExpressionReportLevelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ExpressionReportLevelEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ExpressionReportLevelEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ExpressionReportLevelEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_EXPRESSION_REPORT_LEVEL = "expressionReportLevel";
  @SerializedName(SERIALIZED_NAME_EXPRESSION_REPORT_LEVEL)
  private ExpressionReportLevelEnum expressionReportLevel;

  public static final String SERIALIZED_NAME_FUNCTION_MOCKS = "functionMocks";
  @SerializedName(SERIALIZED_NAME_FUNCTION_MOCKS)
  private List<FunctionMock> functionMocks = new ArrayList<>();

  /**
   * Specifies whether paths (such as request.path) are encoded and how.
   */
  @JsonAdapter(PathEncodingEnum.Adapter.class)
  public enum PathEncodingEnum {
    ENCODING_UNSPECIFIED("ENCODING_UNSPECIFIED"),
    
    URL_ENCODED("URL_ENCODED"),
    
    PLAIN("PLAIN");

    private String value;

    PathEncodingEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PathEncodingEnum fromValue(String value) {
      for (PathEncodingEnum b : PathEncodingEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PathEncodingEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PathEncodingEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PathEncodingEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PathEncodingEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PathEncodingEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PATH_ENCODING = "pathEncoding";
  @SerializedName(SERIALIZED_NAME_PATH_ENCODING)
  private PathEncodingEnum pathEncoding;

  public static final String SERIALIZED_NAME_REQUEST = "request";
  @SerializedName(SERIALIZED_NAME_REQUEST)
  private Object request = null;

  public static final String SERIALIZED_NAME_RESOURCE = "resource";
  @SerializedName(SERIALIZED_NAME_RESOURCE)
  private Object resource = null;

  public TestCase() {
  }

  public TestCase expectation(ExpectationEnum expectation) {
    this.expectation = expectation;
    return this;
  }

  /**
   * Test expectation.
   * @return expectation
   */
  @javax.annotation.Nullable
  public ExpectationEnum getExpectation() {
    return expectation;
  }

  public void setExpectation(ExpectationEnum expectation) {
    this.expectation = expectation;
  }


  public TestCase expressionReportLevel(ExpressionReportLevelEnum expressionReportLevel) {
    this.expressionReportLevel = expressionReportLevel;
    return this;
  }

  /**
   * Specifies what should be included in the response.
   * @return expressionReportLevel
   */
  @javax.annotation.Nullable
  public ExpressionReportLevelEnum getExpressionReportLevel() {
    return expressionReportLevel;
  }

  public void setExpressionReportLevel(ExpressionReportLevelEnum expressionReportLevel) {
    this.expressionReportLevel = expressionReportLevel;
  }


  public TestCase functionMocks(List<FunctionMock> functionMocks) {
    this.functionMocks = functionMocks;
    return this;
  }

  public TestCase addFunctionMocksItem(FunctionMock functionMocksItem) {
    if (this.functionMocks == null) {
      this.functionMocks = new ArrayList<>();
    }
    this.functionMocks.add(functionMocksItem);
    return this;
  }

  /**
   * Optional function mocks for service-defined functions. If not set, any service defined function is expected to return an error, which may or may not influence the test outcome.
   * @return functionMocks
   */
  @javax.annotation.Nullable
  public List<FunctionMock> getFunctionMocks() {
    return functionMocks;
  }

  public void setFunctionMocks(List<FunctionMock> functionMocks) {
    this.functionMocks = functionMocks;
  }


  public TestCase pathEncoding(PathEncodingEnum pathEncoding) {
    this.pathEncoding = pathEncoding;
    return this;
  }

  /**
   * Specifies whether paths (such as request.path) are encoded and how.
   * @return pathEncoding
   */
  @javax.annotation.Nullable
  public PathEncodingEnum getPathEncoding() {
    return pathEncoding;
  }

  public void setPathEncoding(PathEncodingEnum pathEncoding) {
    this.pathEncoding = pathEncoding;
  }


  public TestCase request(Object request) {
    this.request = request;
    return this;
  }

  /**
   * Request context. The exact format of the request context is service-dependent. See the appropriate service documentation for information about the supported fields and types on the request. Minimally, all services support the following fields and types: Request field | Type ---------------|----------------- auth.uid | &#x60;string&#x60; auth.token | &#x60;map&#x60; headers | &#x60;map&#x60; method | &#x60;string&#x60; params | &#x60;map&#x60; path | &#x60;string&#x60; time | &#x60;google.protobuf.Timestamp&#x60; If the request value is not well-formed for the service, the request will be rejected as an invalid argument.
   * @return request
   */
  @javax.annotation.Nullable
  public Object getRequest() {
    return request;
  }

  public void setRequest(Object request) {
    this.request = request;
  }


  public TestCase resource(Object resource) {
    this.resource = resource;
    return this;
  }

  /**
   * Optional resource value as it appears in persistent storage before the request is fulfilled. The resource type depends on the &#x60;request.path&#x60; value.
   * @return resource
   */
  @javax.annotation.Nullable
  public Object getResource() {
    return resource;
  }

  public void setResource(Object resource) {
    this.resource = resource;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TestCase testCase = (TestCase) o;
    return Objects.equals(this.expectation, testCase.expectation) &&
        Objects.equals(this.expressionReportLevel, testCase.expressionReportLevel) &&
        Objects.equals(this.functionMocks, testCase.functionMocks) &&
        Objects.equals(this.pathEncoding, testCase.pathEncoding) &&
        Objects.equals(this.request, testCase.request) &&
        Objects.equals(this.resource, testCase.resource);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(expectation, expressionReportLevel, functionMocks, pathEncoding, request, resource);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TestCase {\n");
    sb.append("    expectation: ").append(toIndentedString(expectation)).append("\n");
    sb.append("    expressionReportLevel: ").append(toIndentedString(expressionReportLevel)).append("\n");
    sb.append("    functionMocks: ").append(toIndentedString(functionMocks)).append("\n");
    sb.append("    pathEncoding: ").append(toIndentedString(pathEncoding)).append("\n");
    sb.append("    request: ").append(toIndentedString(request)).append("\n");
    sb.append("    resource: ").append(toIndentedString(resource)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("expectation");
    openapiFields.add("expressionReportLevel");
    openapiFields.add("functionMocks");
    openapiFields.add("pathEncoding");
    openapiFields.add("request");
    openapiFields.add("resource");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TestCase
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TestCase.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TestCase is not found in the empty JSON string", TestCase.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TestCase.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TestCase` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("expectation") != null && !jsonObj.get("expectation").isJsonNull()) && !jsonObj.get("expectation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expectation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expectation").toString()));
      }
      // validate the optional field `expectation`
      if (jsonObj.get("expectation") != null && !jsonObj.get("expectation").isJsonNull()) {
        ExpectationEnum.validateJsonElement(jsonObj.get("expectation"));
      }
      if ((jsonObj.get("expressionReportLevel") != null && !jsonObj.get("expressionReportLevel").isJsonNull()) && !jsonObj.get("expressionReportLevel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expressionReportLevel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expressionReportLevel").toString()));
      }
      // validate the optional field `expressionReportLevel`
      if (jsonObj.get("expressionReportLevel") != null && !jsonObj.get("expressionReportLevel").isJsonNull()) {
        ExpressionReportLevelEnum.validateJsonElement(jsonObj.get("expressionReportLevel"));
      }
      if (jsonObj.get("functionMocks") != null && !jsonObj.get("functionMocks").isJsonNull()) {
        JsonArray jsonArrayfunctionMocks = jsonObj.getAsJsonArray("functionMocks");
        if (jsonArrayfunctionMocks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("functionMocks").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `functionMocks` to be an array in the JSON string but got `%s`", jsonObj.get("functionMocks").toString()));
          }

          // validate the optional field `functionMocks` (array)
          for (int i = 0; i < jsonArrayfunctionMocks.size(); i++) {
            FunctionMock.validateJsonElement(jsonArrayfunctionMocks.get(i));
          };
        }
      }
      if ((jsonObj.get("pathEncoding") != null && !jsonObj.get("pathEncoding").isJsonNull()) && !jsonObj.get("pathEncoding").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pathEncoding` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pathEncoding").toString()));
      }
      // validate the optional field `pathEncoding`
      if (jsonObj.get("pathEncoding") != null && !jsonObj.get("pathEncoding").isJsonNull()) {
        PathEncodingEnum.validateJsonElement(jsonObj.get("pathEncoding"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TestCase.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TestCase' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TestCase> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TestCase.class));

       return (TypeAdapter<T>) new TypeAdapter<TestCase>() {
           @Override
           public void write(JsonWriter out, TestCase value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TestCase read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TestCase given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TestCase
   * @throws IOException if the JSON string is invalid with respect to TestCase
   */
  public static TestCase fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TestCase.class);
  }

  /**
   * Convert an instance of TestCase to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

