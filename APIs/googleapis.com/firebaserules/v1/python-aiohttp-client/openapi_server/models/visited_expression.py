# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.source_position import SourcePosition
from openapi_server import util


class VisitedExpression(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, source_position: SourcePosition=None, value: object=None):
        """VisitedExpression - a model defined in OpenAPI

        :param source_position: The source_position of this VisitedExpression.
        :param value: The value of this VisitedExpression.
        """
        self.openapi_types = {
            'source_position': SourcePosition,
            'value': object
        }

        self.attribute_map = {
            'source_position': 'sourcePosition',
            'value': 'value'
        }

        self._source_position = source_position
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VisitedExpression':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VisitedExpression of this VisitedExpression.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def source_position(self):
        """Gets the source_position of this VisitedExpression.


        :return: The source_position of this VisitedExpression.
        :rtype: SourcePosition
        """
        return self._source_position

    @source_position.setter
    def source_position(self, source_position):
        """Sets the source_position of this VisitedExpression.


        :param source_position: The source_position of this VisitedExpression.
        :type source_position: SourcePosition
        """

        self._source_position = source_position

    @property
    def value(self):
        """Gets the value of this VisitedExpression.

        The evaluated value for the visited expression, e.g. true/false

        :return: The value of this VisitedExpression.
        :rtype: object
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this VisitedExpression.

        The evaluated value for the visited expression, e.g. true/false

        :param value: The value of this VisitedExpression.
        :type value: object
        """

        self._value = value
