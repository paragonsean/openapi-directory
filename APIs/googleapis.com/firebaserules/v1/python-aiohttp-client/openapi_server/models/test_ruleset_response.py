# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.issue import Issue
from openapi_server.models.test_result import TestResult
from openapi_server import util


class TestRulesetResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, issues: List[Issue]=None, test_results: List[TestResult]=None):
        """TestRulesetResponse - a model defined in OpenAPI

        :param issues: The issues of this TestRulesetResponse.
        :param test_results: The test_results of this TestRulesetResponse.
        """
        self.openapi_types = {
            'issues': List[Issue],
            'test_results': List[TestResult]
        }

        self.attribute_map = {
            'issues': 'issues',
            'test_results': 'testResults'
        }

        self._issues = issues
        self._test_results = test_results

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TestRulesetResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TestRulesetResponse of this TestRulesetResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def issues(self):
        """Gets the issues of this TestRulesetResponse.

        Syntactic and semantic `Source` issues of varying severity. Issues of `ERROR` severity will prevent tests from executing.

        :return: The issues of this TestRulesetResponse.
        :rtype: List[Issue]
        """
        return self._issues

    @issues.setter
    def issues(self, issues):
        """Sets the issues of this TestRulesetResponse.

        Syntactic and semantic `Source` issues of varying severity. Issues of `ERROR` severity will prevent tests from executing.

        :param issues: The issues of this TestRulesetResponse.
        :type issues: List[Issue]
        """

        self._issues = issues

    @property
    def test_results(self):
        """Gets the test_results of this TestRulesetResponse.

        The set of test results given the test cases in the `TestSuite`. The results will appear in the same order as the test cases appear in the `TestSuite`.

        :return: The test_results of this TestRulesetResponse.
        :rtype: List[TestResult]
        """
        return self._test_results

    @test_results.setter
    def test_results(self, test_results):
        """Sets the test_results of this TestRulesetResponse.

        The set of test results given the test cases in the `TestSuite`. The results will appear in the same order as the test cases appear in the `TestSuite`.

        :param test_results: The test_results of this TestRulesetResponse.
        :type test_results: List[TestResult]
        """

        self._test_results = test_results
