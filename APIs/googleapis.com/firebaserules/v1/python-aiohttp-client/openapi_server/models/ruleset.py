# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.metadata import Metadata
from openapi_server.models.source import Source
from openapi_server import util


class Ruleset(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attachment_point: str=None, create_time: str=None, metadata: Metadata=None, name: str=None, source: Source=None):
        """Ruleset - a model defined in OpenAPI

        :param attachment_point: The attachment_point of this Ruleset.
        :param create_time: The create_time of this Ruleset.
        :param metadata: The metadata of this Ruleset.
        :param name: The name of this Ruleset.
        :param source: The source of this Ruleset.
        """
        self.openapi_types = {
            'attachment_point': str,
            'create_time': str,
            'metadata': Metadata,
            'name': str,
            'source': Source
        }

        self.attribute_map = {
            'attachment_point': 'attachmentPoint',
            'create_time': 'createTime',
            'metadata': 'metadata',
            'name': 'name',
            'source': 'source'
        }

        self._attachment_point = attachment_point
        self._create_time = create_time
        self._metadata = metadata
        self._name = name
        self._source = source

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Ruleset':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Ruleset of this Ruleset.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attachment_point(self):
        """Gets the attachment_point of this Ruleset.

        Immutable. Intended resource to which this Ruleset should be released. May be left blank to signify the resource associated with the default release. Expected format: firestore.googleapis.com/projects//databases/

        :return: The attachment_point of this Ruleset.
        :rtype: str
        """
        return self._attachment_point

    @attachment_point.setter
    def attachment_point(self, attachment_point):
        """Sets the attachment_point of this Ruleset.

        Immutable. Intended resource to which this Ruleset should be released. May be left blank to signify the resource associated with the default release. Expected format: firestore.googleapis.com/projects//databases/

        :param attachment_point: The attachment_point of this Ruleset.
        :type attachment_point: str
        """

        self._attachment_point = attachment_point

    @property
    def create_time(self):
        """Gets the create_time of this Ruleset.

        Output only. Time the `Ruleset` was created.

        :return: The create_time of this Ruleset.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this Ruleset.

        Output only. Time the `Ruleset` was created.

        :param create_time: The create_time of this Ruleset.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def metadata(self):
        """Gets the metadata of this Ruleset.


        :return: The metadata of this Ruleset.
        :rtype: Metadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this Ruleset.


        :param metadata: The metadata of this Ruleset.
        :type metadata: Metadata
        """

        self._metadata = metadata

    @property
    def name(self):
        """Gets the name of this Ruleset.

        Output only. Name of the `Ruleset`. The ruleset_id is auto generated by the service. Format: `projects/{project_id}/rulesets/{ruleset_id}`

        :return: The name of this Ruleset.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Ruleset.

        Output only. Name of the `Ruleset`. The ruleset_id is auto generated by the service. Format: `projects/{project_id}/rulesets/{ruleset_id}`

        :param name: The name of this Ruleset.
        :type name: str
        """

        self._name = name

    @property
    def source(self):
        """Gets the source of this Ruleset.


        :return: The source of this Ruleset.
        :rtype: Source
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this Ruleset.


        :param source: The source of this Ruleset.
        :type source: Source
        """

        self._source = source
