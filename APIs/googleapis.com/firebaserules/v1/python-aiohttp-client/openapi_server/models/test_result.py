# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.expression_report import ExpressionReport
from openapi_server.models.function_call import FunctionCall
from openapi_server.models.source_position import SourcePosition
from openapi_server.models.visited_expression import VisitedExpression
from openapi_server import util


class TestResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, debug_messages: List[str]=None, error_position: SourcePosition=None, expression_reports: List[ExpressionReport]=None, function_calls: List[FunctionCall]=None, state: str=None, visited_expressions: List[VisitedExpression]=None):
        """TestResult - a model defined in OpenAPI

        :param debug_messages: The debug_messages of this TestResult.
        :param error_position: The error_position of this TestResult.
        :param expression_reports: The expression_reports of this TestResult.
        :param function_calls: The function_calls of this TestResult.
        :param state: The state of this TestResult.
        :param visited_expressions: The visited_expressions of this TestResult.
        """
        self.openapi_types = {
            'debug_messages': List[str],
            'error_position': SourcePosition,
            'expression_reports': List[ExpressionReport],
            'function_calls': List[FunctionCall],
            'state': str,
            'visited_expressions': List[VisitedExpression]
        }

        self.attribute_map = {
            'debug_messages': 'debugMessages',
            'error_position': 'errorPosition',
            'expression_reports': 'expressionReports',
            'function_calls': 'functionCalls',
            'state': 'state',
            'visited_expressions': 'visitedExpressions'
        }

        self._debug_messages = debug_messages
        self._error_position = error_position
        self._expression_reports = expression_reports
        self._function_calls = function_calls
        self._state = state
        self._visited_expressions = visited_expressions

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TestResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TestResult of this TestResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def debug_messages(self):
        """Gets the debug_messages of this TestResult.

        Debug messages related to test execution issues encountered during evaluation. Debug messages may be related to too many or too few invocations of function mocks or to runtime errors that occur during evaluation. For example: ```Unable to read variable [name: \"resource\"]```

        :return: The debug_messages of this TestResult.
        :rtype: List[str]
        """
        return self._debug_messages

    @debug_messages.setter
    def debug_messages(self, debug_messages):
        """Sets the debug_messages of this TestResult.

        Debug messages related to test execution issues encountered during evaluation. Debug messages may be related to too many or too few invocations of function mocks or to runtime errors that occur during evaluation. For example: ```Unable to read variable [name: \"resource\"]```

        :param debug_messages: The debug_messages of this TestResult.
        :type debug_messages: List[str]
        """

        self._debug_messages = debug_messages

    @property
    def error_position(self):
        """Gets the error_position of this TestResult.


        :return: The error_position of this TestResult.
        :rtype: SourcePosition
        """
        return self._error_position

    @error_position.setter
    def error_position(self, error_position):
        """Sets the error_position of this TestResult.


        :param error_position: The error_position of this TestResult.
        :type error_position: SourcePosition
        """

        self._error_position = error_position

    @property
    def expression_reports(self):
        """Gets the expression_reports of this TestResult.

        The mapping from expression in the ruleset AST to the values they were evaluated to. Partially-nested to mirror AST structure. Note that this field is actually tracking expressions and not permission statements in contrast to the \"visited_expressions\" field above. Literal expressions are omitted.

        :return: The expression_reports of this TestResult.
        :rtype: List[ExpressionReport]
        """
        return self._expression_reports

    @expression_reports.setter
    def expression_reports(self, expression_reports):
        """Sets the expression_reports of this TestResult.

        The mapping from expression in the ruleset AST to the values they were evaluated to. Partially-nested to mirror AST structure. Note that this field is actually tracking expressions and not permission statements in contrast to the \"visited_expressions\" field above. Literal expressions are omitted.

        :param expression_reports: The expression_reports of this TestResult.
        :type expression_reports: List[ExpressionReport]
        """

        self._expression_reports = expression_reports

    @property
    def function_calls(self):
        """Gets the function_calls of this TestResult.

        The set of function calls made to service-defined methods. Function calls are included in the order in which they are encountered during evaluation, are provided for both mocked and unmocked functions, and included on the response regardless of the test `state`.

        :return: The function_calls of this TestResult.
        :rtype: List[FunctionCall]
        """
        return self._function_calls

    @function_calls.setter
    def function_calls(self, function_calls):
        """Sets the function_calls of this TestResult.

        The set of function calls made to service-defined methods. Function calls are included in the order in which they are encountered during evaluation, are provided for both mocked and unmocked functions, and included on the response regardless of the test `state`.

        :param function_calls: The function_calls of this TestResult.
        :type function_calls: List[FunctionCall]
        """

        self._function_calls = function_calls

    @property
    def state(self):
        """Gets the state of this TestResult.

        State of the test.

        :return: The state of this TestResult.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this TestResult.

        State of the test.

        :param state: The state of this TestResult.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "SUCCESS", "FAILURE"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def visited_expressions(self):
        """Gets the visited_expressions of this TestResult.

        The set of visited permission expressions for a given test. This returns the positions and evaluation results of all visited permission expressions which were relevant to the test case, e.g. ``` match /path { allow read if: } ``` For a detailed report of the intermediate evaluation states, see the `expression_reports` field

        :return: The visited_expressions of this TestResult.
        :rtype: List[VisitedExpression]
        """
        return self._visited_expressions

    @visited_expressions.setter
    def visited_expressions(self, visited_expressions):
        """Sets the visited_expressions of this TestResult.

        The set of visited permission expressions for a given test. This returns the positions and evaluation results of all visited permission expressions which were relevant to the test case, e.g. ``` match /path { allow read if: } ``` For a detailed report of the intermediate evaluation states, see the `expression_reports` field

        :param visited_expressions: The visited_expressions of this TestResult.
        :type visited_expressions: List[VisitedExpression]
        """

        self._visited_expressions = visited_expressions
