# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetReleaseExecutableResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, executable: str=None, executable_version: str=None, language: str=None, ruleset_name: str=None, sync_time: str=None, update_time: str=None):
        """GetReleaseExecutableResponse - a model defined in OpenAPI

        :param executable: The executable of this GetReleaseExecutableResponse.
        :param executable_version: The executable_version of this GetReleaseExecutableResponse.
        :param language: The language of this GetReleaseExecutableResponse.
        :param ruleset_name: The ruleset_name of this GetReleaseExecutableResponse.
        :param sync_time: The sync_time of this GetReleaseExecutableResponse.
        :param update_time: The update_time of this GetReleaseExecutableResponse.
        """
        self.openapi_types = {
            'executable': str,
            'executable_version': str,
            'language': str,
            'ruleset_name': str,
            'sync_time': str,
            'update_time': str
        }

        self.attribute_map = {
            'executable': 'executable',
            'executable_version': 'executableVersion',
            'language': 'language',
            'ruleset_name': 'rulesetName',
            'sync_time': 'syncTime',
            'update_time': 'updateTime'
        }

        self._executable = executable
        self._executable_version = executable_version
        self._language = language
        self._ruleset_name = ruleset_name
        self._sync_time = sync_time
        self._update_time = update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetReleaseExecutableResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetReleaseExecutableResponse of this GetReleaseExecutableResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def executable(self):
        """Gets the executable of this GetReleaseExecutableResponse.

        Executable view of the `Ruleset` referenced by the `Release`.

        :return: The executable of this GetReleaseExecutableResponse.
        :rtype: str
        """
        return self._executable

    @executable.setter
    def executable(self, executable):
        """Sets the executable of this GetReleaseExecutableResponse.

        Executable view of the `Ruleset` referenced by the `Release`.

        :param executable: The executable of this GetReleaseExecutableResponse.
        :type executable: str
        """

        self._executable = executable

    @property
    def executable_version(self):
        """Gets the executable_version of this GetReleaseExecutableResponse.

        The Rules runtime version of the executable.

        :return: The executable_version of this GetReleaseExecutableResponse.
        :rtype: str
        """
        return self._executable_version

    @executable_version.setter
    def executable_version(self, executable_version):
        """Sets the executable_version of this GetReleaseExecutableResponse.

        The Rules runtime version of the executable.

        :param executable_version: The executable_version of this GetReleaseExecutableResponse.
        :type executable_version: str
        """
        allowed_values = ["RELEASE_EXECUTABLE_VERSION_UNSPECIFIED", "FIREBASE_RULES_EXECUTABLE_V1", "FIREBASE_RULES_EXECUTABLE_V2"]  # noqa: E501
        if executable_version not in allowed_values:
            raise ValueError(
                "Invalid value for `executable_version` ({0}), must be one of {1}"
                .format(executable_version, allowed_values)
            )

        self._executable_version = executable_version

    @property
    def language(self):
        """Gets the language of this GetReleaseExecutableResponse.

        `Language` used to generate the executable bytes.

        :return: The language of this GetReleaseExecutableResponse.
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this GetReleaseExecutableResponse.

        `Language` used to generate the executable bytes.

        :param language: The language of this GetReleaseExecutableResponse.
        :type language: str
        """
        allowed_values = ["LANGUAGE_UNSPECIFIED", "FIREBASE_RULES", "EVENT_FLOW_TRIGGERS"]  # noqa: E501
        if language not in allowed_values:
            raise ValueError(
                "Invalid value for `language` ({0}), must be one of {1}"
                .format(language, allowed_values)
            )

        self._language = language

    @property
    def ruleset_name(self):
        """Gets the ruleset_name of this GetReleaseExecutableResponse.

        `Ruleset` name associated with the `Release` executable.

        :return: The ruleset_name of this GetReleaseExecutableResponse.
        :rtype: str
        """
        return self._ruleset_name

    @ruleset_name.setter
    def ruleset_name(self, ruleset_name):
        """Sets the ruleset_name of this GetReleaseExecutableResponse.

        `Ruleset` name associated with the `Release` executable.

        :param ruleset_name: The ruleset_name of this GetReleaseExecutableResponse.
        :type ruleset_name: str
        """

        self._ruleset_name = ruleset_name

    @property
    def sync_time(self):
        """Gets the sync_time of this GetReleaseExecutableResponse.

        Optional, indicates the freshness of the result. The response is guaranteed to be the latest within an interval up to the sync_time (inclusive).

        :return: The sync_time of this GetReleaseExecutableResponse.
        :rtype: str
        """
        return self._sync_time

    @sync_time.setter
    def sync_time(self, sync_time):
        """Sets the sync_time of this GetReleaseExecutableResponse.

        Optional, indicates the freshness of the result. The response is guaranteed to be the latest within an interval up to the sync_time (inclusive).

        :param sync_time: The sync_time of this GetReleaseExecutableResponse.
        :type sync_time: str
        """

        self._sync_time = sync_time

    @property
    def update_time(self):
        """Gets the update_time of this GetReleaseExecutableResponse.

        Timestamp for the most recent `Release.update_time`.

        :return: The update_time of this GetReleaseExecutableResponse.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this GetReleaseExecutableResponse.

        Timestamp for the most recent `Release.update_time`.

        :param update_time: The update_time of this GetReleaseExecutableResponse.
        :type update_time: str
        """

        self._update_time = update_time
