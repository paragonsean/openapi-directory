# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Result(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, undefined: object=None, value: object=None):
        """Result - a model defined in OpenAPI

        :param undefined: The undefined of this Result.
        :param value: The value of this Result.
        """
        self.openapi_types = {
            'undefined': object,
            'value': object
        }

        self.attribute_map = {
            'undefined': 'undefined',
            'value': 'value'
        }

        self._undefined = undefined
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Result':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Result of this Result.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def undefined(self):
        """Gets the undefined of this Result.

        A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }

        :return: The undefined of this Result.
        :rtype: object
        """
        return self._undefined

    @undefined.setter
    def undefined(self, undefined):
        """Sets the undefined of this Result.

        A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }

        :param undefined: The undefined of this Result.
        :type undefined: object
        """

        self._undefined = undefined

    @property
    def value(self):
        """Gets the value of this Result.

        The result is an actual value. The type of the value must match that of the type declared by the service.

        :return: The value of this Result.
        :rtype: object
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this Result.

        The result is an actual value. The type of the value must match that of the type declared by the service.

        :param value: The value of this Result.
        :type value: object
        """

        self._value = value
