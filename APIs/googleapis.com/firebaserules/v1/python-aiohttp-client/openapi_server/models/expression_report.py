# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.source_position import SourcePosition
from openapi_server.models.value_count import ValueCount
from openapi_server import util


class ExpressionReport(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, children: List[ExpressionReport]=None, source_position: SourcePosition=None, values: List[ValueCount]=None):
        """ExpressionReport - a model defined in OpenAPI

        :param children: The children of this ExpressionReport.
        :param source_position: The source_position of this ExpressionReport.
        :param values: The values of this ExpressionReport.
        """
        self.openapi_types = {
            'children': List[ExpressionReport],
            'source_position': SourcePosition,
            'values': List[ValueCount]
        }

        self.attribute_map = {
            'children': 'children',
            'source_position': 'sourcePosition',
            'values': 'values'
        }

        self._children = children
        self._source_position = source_position
        self._values = values

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ExpressionReport':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ExpressionReport of this ExpressionReport.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def children(self):
        """Gets the children of this ExpressionReport.

        Subexpressions

        :return: The children of this ExpressionReport.
        :rtype: List[ExpressionReport]
        """
        return self._children

    @children.setter
    def children(self, children):
        """Sets the children of this ExpressionReport.

        Subexpressions

        :param children: The children of this ExpressionReport.
        :type children: List[ExpressionReport]
        """

        self._children = children

    @property
    def source_position(self):
        """Gets the source_position of this ExpressionReport.


        :return: The source_position of this ExpressionReport.
        :rtype: SourcePosition
        """
        return self._source_position

    @source_position.setter
    def source_position(self, source_position):
        """Sets the source_position of this ExpressionReport.


        :param source_position: The source_position of this ExpressionReport.
        :type source_position: SourcePosition
        """

        self._source_position = source_position

    @property
    def values(self):
        """Gets the values of this ExpressionReport.

        Values that this expression evaluated to when encountered.

        :return: The values of this ExpressionReport.
        :rtype: List[ValueCount]
        """
        return self._values

    @values.setter
    def values(self, values):
        """Sets the values of this ExpressionReport.

        Values that this expression evaluated to when encountered.

        :param values: The values of this ExpressionReport.
        :type values: List[ValueCount]
        """

        self._values = values
