# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.source_position import SourcePosition
from openapi_server import util


class Issue(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, severity: str=None, source_position: SourcePosition=None):
        """Issue - a model defined in OpenAPI

        :param description: The description of this Issue.
        :param severity: The severity of this Issue.
        :param source_position: The source_position of this Issue.
        """
        self.openapi_types = {
            'description': str,
            'severity': str,
            'source_position': SourcePosition
        }

        self.attribute_map = {
            'description': 'description',
            'severity': 'severity',
            'source_position': 'sourcePosition'
        }

        self._description = description
        self._severity = severity
        self._source_position = source_position

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Issue':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Issue of this Issue.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this Issue.

        Short error description.

        :return: The description of this Issue.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Issue.

        Short error description.

        :param description: The description of this Issue.
        :type description: str
        """

        self._description = description

    @property
    def severity(self):
        """Gets the severity of this Issue.

        The severity of the issue.

        :return: The severity of this Issue.
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this Issue.

        The severity of the issue.

        :param severity: The severity of this Issue.
        :type severity: str
        """
        allowed_values = ["SEVERITY_UNSPECIFIED", "DEPRECATION", "WARNING", "ERROR"]  # noqa: E501
        if severity not in allowed_values:
            raise ValueError(
                "Invalid value for `severity` ({0}), must be one of {1}"
                .format(severity, allowed_values)
            )

        self._severity = severity

    @property
    def source_position(self):
        """Gets the source_position of this Issue.


        :return: The source_position of this Issue.
        :rtype: SourcePosition
        """
        return self._source_position

    @source_position.setter
    def source_position(self, source_position):
        """Sets the source_position of this Issue.


        :param source_position: The source_position of this Issue.
        :type source_position: SourcePosition
        """

        self._source_position = source_position
