# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Release(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, create_time: str=None, name: str=None, ruleset_name: str=None, update_time: str=None):
        """Release - a model defined in OpenAPI

        :param create_time: The create_time of this Release.
        :param name: The name of this Release.
        :param ruleset_name: The ruleset_name of this Release.
        :param update_time: The update_time of this Release.
        """
        self.openapi_types = {
            'create_time': str,
            'name': str,
            'ruleset_name': str,
            'update_time': str
        }

        self.attribute_map = {
            'create_time': 'createTime',
            'name': 'name',
            'ruleset_name': 'rulesetName',
            'update_time': 'updateTime'
        }

        self._create_time = create_time
        self._name = name
        self._ruleset_name = ruleset_name
        self._update_time = update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Release':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Release of this Release.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def create_time(self):
        """Gets the create_time of this Release.

        Output only. Time the release was created.

        :return: The create_time of this Release.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this Release.

        Output only. Time the release was created.

        :param create_time: The create_time of this Release.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def name(self):
        """Gets the name of this Release.

        Required. Format: `projects/{project_id}/releases/{release_id}`

        :return: The name of this Release.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Release.

        Required. Format: `projects/{project_id}/releases/{release_id}`

        :param name: The name of this Release.
        :type name: str
        """

        self._name = name

    @property
    def ruleset_name(self):
        """Gets the ruleset_name of this Release.

        Required. Name of the `Ruleset` referred to by this `Release`. The `Ruleset` must exist for the `Release` to be created.

        :return: The ruleset_name of this Release.
        :rtype: str
        """
        return self._ruleset_name

    @ruleset_name.setter
    def ruleset_name(self, ruleset_name):
        """Sets the ruleset_name of this Release.

        Required. Name of the `Ruleset` referred to by this `Release`. The `Ruleset` must exist for the `Release` to be created.

        :param ruleset_name: The ruleset_name of this Release.
        :type ruleset_name: str
        """

        self._ruleset_name = ruleset_name

    @property
    def update_time(self):
        """Gets the update_time of this Release.

        Output only. Time the release was updated.

        :return: The update_time of this Release.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this Release.

        Output only. Time the release was updated.

        :param update_time: The update_time of this Release.
        :type update_time: str
        """

        self._update_time = update_time
