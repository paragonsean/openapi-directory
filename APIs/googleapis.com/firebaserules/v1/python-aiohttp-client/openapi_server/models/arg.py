# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Arg(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, any_value: object=None, exact_value: object=None):
        """Arg - a model defined in OpenAPI

        :param any_value: The any_value of this Arg.
        :param exact_value: The exact_value of this Arg.
        """
        self.openapi_types = {
            'any_value': object,
            'exact_value': object
        }

        self.attribute_map = {
            'any_value': 'anyValue',
            'exact_value': 'exactValue'
        }

        self._any_value = any_value
        self._exact_value = exact_value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Arg':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Arg of this Arg.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def any_value(self):
        """Gets the any_value of this Arg.

        A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }

        :return: The any_value of this Arg.
        :rtype: object
        """
        return self._any_value

    @any_value.setter
    def any_value(self, any_value):
        """Sets the any_value of this Arg.

        A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }

        :param any_value: The any_value of this Arg.
        :type any_value: object
        """

        self._any_value = any_value

    @property
    def exact_value(self):
        """Gets the exact_value of this Arg.

        Argument exactly matches value provided.

        :return: The exact_value of this Arg.
        :rtype: object
        """
        return self._exact_value

    @exact_value.setter
    def exact_value(self, exact_value):
        """Sets the exact_value of this Arg.

        Argument exactly matches value provided.

        :param exact_value: The exact_value of this Arg.
        :type exact_value: object
        """

        self._exact_value = exact_value
