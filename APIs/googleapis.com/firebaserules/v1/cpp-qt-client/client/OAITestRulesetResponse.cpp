/**
 * Firebase Rules API
 * Creates and manages rules that determine when a Firebase Rules-enabled service should permit a request. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITestRulesetResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITestRulesetResponse::OAITestRulesetResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITestRulesetResponse::OAITestRulesetResponse() {
    this->initializeModel();
}

OAITestRulesetResponse::~OAITestRulesetResponse() {}

void OAITestRulesetResponse::initializeModel() {

    m_issues_isSet = false;
    m_issues_isValid = false;

    m_test_results_isSet = false;
    m_test_results_isValid = false;
}

void OAITestRulesetResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITestRulesetResponse::fromJsonObject(QJsonObject json) {

    m_issues_isValid = ::OpenAPI::fromJsonValue(m_issues, json[QString("issues")]);
    m_issues_isSet = !json[QString("issues")].isNull() && m_issues_isValid;

    m_test_results_isValid = ::OpenAPI::fromJsonValue(m_test_results, json[QString("testResults")]);
    m_test_results_isSet = !json[QString("testResults")].isNull() && m_test_results_isValid;
}

QString OAITestRulesetResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITestRulesetResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_issues.size() > 0) {
        obj.insert(QString("issues"), ::OpenAPI::toJsonValue(m_issues));
    }
    if (m_test_results.size() > 0) {
        obj.insert(QString("testResults"), ::OpenAPI::toJsonValue(m_test_results));
    }
    return obj;
}

QList<OAIIssue> OAITestRulesetResponse::getIssues() const {
    return m_issues;
}
void OAITestRulesetResponse::setIssues(const QList<OAIIssue> &issues) {
    m_issues = issues;
    m_issues_isSet = true;
}

bool OAITestRulesetResponse::is_issues_Set() const{
    return m_issues_isSet;
}

bool OAITestRulesetResponse::is_issues_Valid() const{
    return m_issues_isValid;
}

QList<OAITestResult> OAITestRulesetResponse::getTestResults() const {
    return m_test_results;
}
void OAITestRulesetResponse::setTestResults(const QList<OAITestResult> &test_results) {
    m_test_results = test_results;
    m_test_results_isSet = true;
}

bool OAITestRulesetResponse::is_test_results_Set() const{
    return m_test_results_isSet;
}

bool OAITestRulesetResponse::is_test_results_Valid() const{
    return m_test_results_isValid;
}

bool OAITestRulesetResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_issues.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_test_results.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITestRulesetResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
