/**
 * Firebase Rules API
 * Creates and manages rules that determine when a Firebase Rules-enabled service should permit a request. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFunctionCall.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFunctionCall::OAIFunctionCall(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFunctionCall::OAIFunctionCall() {
    this->initializeModel();
}

OAIFunctionCall::~OAIFunctionCall() {}

void OAIFunctionCall::initializeModel() {

    m_args_isSet = false;
    m_args_isValid = false;

    m_function_isSet = false;
    m_function_isValid = false;
}

void OAIFunctionCall::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFunctionCall::fromJsonObject(QJsonObject json) {

    m_args_isValid = ::OpenAPI::fromJsonValue(m_args, json[QString("args")]);
    m_args_isSet = !json[QString("args")].isNull() && m_args_isValid;

    m_function_isValid = ::OpenAPI::fromJsonValue(m_function, json[QString("function")]);
    m_function_isSet = !json[QString("function")].isNull() && m_function_isValid;
}

QString OAIFunctionCall::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFunctionCall::asJsonObject() const {
    QJsonObject obj;
    if (m_args.size() > 0) {
        obj.insert(QString("args"), ::OpenAPI::toJsonValue(m_args));
    }
    if (m_function_isSet) {
        obj.insert(QString("function"), ::OpenAPI::toJsonValue(m_function));
    }
    return obj;
}

QList<QJsonValue> OAIFunctionCall::getArgs() const {
    return m_args;
}
void OAIFunctionCall::setArgs(const QList<QJsonValue> &args) {
    m_args = args;
    m_args_isSet = true;
}

bool OAIFunctionCall::is_args_Set() const{
    return m_args_isSet;
}

bool OAIFunctionCall::is_args_Valid() const{
    return m_args_isValid;
}

QString OAIFunctionCall::getFunction() const {
    return m_function;
}
void OAIFunctionCall::setFunction(const QString &function) {
    m_function = function;
    m_function_isSet = true;
}

bool OAIFunctionCall::is_function_Set() const{
    return m_function_isSet;
}

bool OAIFunctionCall::is_function_Valid() const{
    return m_function_isValid;
}

bool OAIFunctionCall::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_args.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_function_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFunctionCall::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
