/**
 * Firebase Rules API
 * Creates and manages rules that determine when a Firebase Rules-enabled service should permit a request. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateReleaseRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateReleaseRequest::OAIUpdateReleaseRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateReleaseRequest::OAIUpdateReleaseRequest() {
    this->initializeModel();
}

OAIUpdateReleaseRequest::~OAIUpdateReleaseRequest() {}

void OAIUpdateReleaseRequest::initializeModel() {

    m_release_isSet = false;
    m_release_isValid = false;

    m_update_mask_isSet = false;
    m_update_mask_isValid = false;
}

void OAIUpdateReleaseRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateReleaseRequest::fromJsonObject(QJsonObject json) {

    m_release_isValid = ::OpenAPI::fromJsonValue(m_release, json[QString("release")]);
    m_release_isSet = !json[QString("release")].isNull() && m_release_isValid;

    m_update_mask_isValid = ::OpenAPI::fromJsonValue(m_update_mask, json[QString("updateMask")]);
    m_update_mask_isSet = !json[QString("updateMask")].isNull() && m_update_mask_isValid;
}

QString OAIUpdateReleaseRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateReleaseRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_release.isSet()) {
        obj.insert(QString("release"), ::OpenAPI::toJsonValue(m_release));
    }
    if (m_update_mask_isSet) {
        obj.insert(QString("updateMask"), ::OpenAPI::toJsonValue(m_update_mask));
    }
    return obj;
}

OAIRelease OAIUpdateReleaseRequest::getRelease() const {
    return m_release;
}
void OAIUpdateReleaseRequest::setRelease(const OAIRelease &release) {
    m_release = release;
    m_release_isSet = true;
}

bool OAIUpdateReleaseRequest::is_release_Set() const{
    return m_release_isSet;
}

bool OAIUpdateReleaseRequest::is_release_Valid() const{
    return m_release_isValid;
}

QString OAIUpdateReleaseRequest::getUpdateMask() const {
    return m_update_mask;
}
void OAIUpdateReleaseRequest::setUpdateMask(const QString &update_mask) {
    m_update_mask = update_mask;
    m_update_mask_isSet = true;
}

bool OAIUpdateReleaseRequest::is_update_mask_Set() const{
    return m_update_mask_isSet;
}

bool OAIUpdateReleaseRequest::is_update_mask_Valid() const{
    return m_update_mask_isValid;
}

bool OAIUpdateReleaseRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_release.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_mask_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateReleaseRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
