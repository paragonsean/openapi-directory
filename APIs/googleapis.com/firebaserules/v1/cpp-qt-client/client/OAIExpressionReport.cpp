/**
 * Firebase Rules API
 * Creates and manages rules that determine when a Firebase Rules-enabled service should permit a request. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExpressionReport.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExpressionReport::OAIExpressionReport(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExpressionReport::OAIExpressionReport() {
    this->initializeModel();
}

OAIExpressionReport::~OAIExpressionReport() {}

void OAIExpressionReport::initializeModel() {

    m_children_isSet = false;
    m_children_isValid = false;

    m_source_position_isSet = false;
    m_source_position_isValid = false;

    m_values_isSet = false;
    m_values_isValid = false;
}

void OAIExpressionReport::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExpressionReport::fromJsonObject(QJsonObject json) {

    m_children_isValid = ::OpenAPI::fromJsonValue(m_children, json[QString("children")]);
    m_children_isSet = !json[QString("children")].isNull() && m_children_isValid;

    m_source_position_isValid = ::OpenAPI::fromJsonValue(m_source_position, json[QString("sourcePosition")]);
    m_source_position_isSet = !json[QString("sourcePosition")].isNull() && m_source_position_isValid;

    m_values_isValid = ::OpenAPI::fromJsonValue(m_values, json[QString("values")]);
    m_values_isSet = !json[QString("values")].isNull() && m_values_isValid;
}

QString OAIExpressionReport::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExpressionReport::asJsonObject() const {
    QJsonObject obj;
    if (m_children.size() > 0) {
        obj.insert(QString("children"), ::OpenAPI::toJsonValue(m_children));
    }
    if (m_source_position.isSet()) {
        obj.insert(QString("sourcePosition"), ::OpenAPI::toJsonValue(m_source_position));
    }
    if (m_values.size() > 0) {
        obj.insert(QString("values"), ::OpenAPI::toJsonValue(m_values));
    }
    return obj;
}

QList<OAIExpressionReport> OAIExpressionReport::getChildren() const {
    return m_children;
}
void OAIExpressionReport::setChildren(const QList<OAIExpressionReport> &children) {
    m_children = children;
    m_children_isSet = true;
}

bool OAIExpressionReport::is_children_Set() const{
    return m_children_isSet;
}

bool OAIExpressionReport::is_children_Valid() const{
    return m_children_isValid;
}

OAISourcePosition OAIExpressionReport::getSourcePosition() const {
    return m_source_position;
}
void OAIExpressionReport::setSourcePosition(const OAISourcePosition &source_position) {
    m_source_position = source_position;
    m_source_position_isSet = true;
}

bool OAIExpressionReport::is_source_position_Set() const{
    return m_source_position_isSet;
}

bool OAIExpressionReport::is_source_position_Valid() const{
    return m_source_position_isValid;
}

QList<OAIValueCount> OAIExpressionReport::getValues() const {
    return m_values;
}
void OAIExpressionReport::setValues(const QList<OAIValueCount> &values) {
    m_values = values;
    m_values_isSet = true;
}

bool OAIExpressionReport::is_values_Set() const{
    return m_values_isSet;
}

bool OAIExpressionReport::is_values_Valid() const{
    return m_values_isValid;
}

bool OAIExpressionReport::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_children.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_position.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_values.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExpressionReport::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
