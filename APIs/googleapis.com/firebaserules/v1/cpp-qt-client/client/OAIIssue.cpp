/**
 * Firebase Rules API
 * Creates and manages rules that determine when a Firebase Rules-enabled service should permit a request. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIssue.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIssue::OAIIssue(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIssue::OAIIssue() {
    this->initializeModel();
}

OAIIssue::~OAIIssue() {}

void OAIIssue::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_severity_isSet = false;
    m_severity_isValid = false;

    m_source_position_isSet = false;
    m_source_position_isValid = false;
}

void OAIIssue::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIssue::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_severity_isValid = ::OpenAPI::fromJsonValue(m_severity, json[QString("severity")]);
    m_severity_isSet = !json[QString("severity")].isNull() && m_severity_isValid;

    m_source_position_isValid = ::OpenAPI::fromJsonValue(m_source_position, json[QString("sourcePosition")]);
    m_source_position_isSet = !json[QString("sourcePosition")].isNull() && m_source_position_isValid;
}

QString OAIIssue::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIssue::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_severity_isSet) {
        obj.insert(QString("severity"), ::OpenAPI::toJsonValue(m_severity));
    }
    if (m_source_position.isSet()) {
        obj.insert(QString("sourcePosition"), ::OpenAPI::toJsonValue(m_source_position));
    }
    return obj;
}

QString OAIIssue::getDescription() const {
    return m_description;
}
void OAIIssue::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIIssue::is_description_Set() const{
    return m_description_isSet;
}

bool OAIIssue::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIIssue::getSeverity() const {
    return m_severity;
}
void OAIIssue::setSeverity(const QString &severity) {
    m_severity = severity;
    m_severity_isSet = true;
}

bool OAIIssue::is_severity_Set() const{
    return m_severity_isSet;
}

bool OAIIssue::is_severity_Valid() const{
    return m_severity_isValid;
}

OAISourcePosition OAIIssue::getSourcePosition() const {
    return m_source_position;
}
void OAIIssue::setSourcePosition(const OAISourcePosition &source_position) {
    m_source_position = source_position;
    m_source_position_isSet = true;
}

bool OAIIssue::is_source_position_Set() const{
    return m_source_position_isSet;
}

bool OAIIssue::is_source_position_Valid() const{
    return m_source_position_isValid;
}

bool OAIIssue::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_severity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_position.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIssue::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
