/**
 * Firebase Rules API
 * Creates and manages rules that determine when a Firebase Rules-enabled service should permit a request. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetReleaseExecutableResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetReleaseExecutableResponse::OAIGetReleaseExecutableResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetReleaseExecutableResponse::OAIGetReleaseExecutableResponse() {
    this->initializeModel();
}

OAIGetReleaseExecutableResponse::~OAIGetReleaseExecutableResponse() {}

void OAIGetReleaseExecutableResponse::initializeModel() {

    m_executable_isSet = false;
    m_executable_isValid = false;

    m_executable_version_isSet = false;
    m_executable_version_isValid = false;

    m_language_isSet = false;
    m_language_isValid = false;

    m_ruleset_name_isSet = false;
    m_ruleset_name_isValid = false;

    m_sync_time_isSet = false;
    m_sync_time_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;
}

void OAIGetReleaseExecutableResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetReleaseExecutableResponse::fromJsonObject(QJsonObject json) {

    m_executable_isValid = ::OpenAPI::fromJsonValue(m_executable, json[QString("executable")]);
    m_executable_isSet = !json[QString("executable")].isNull() && m_executable_isValid;

    m_executable_version_isValid = ::OpenAPI::fromJsonValue(m_executable_version, json[QString("executableVersion")]);
    m_executable_version_isSet = !json[QString("executableVersion")].isNull() && m_executable_version_isValid;

    m_language_isValid = ::OpenAPI::fromJsonValue(m_language, json[QString("language")]);
    m_language_isSet = !json[QString("language")].isNull() && m_language_isValid;

    m_ruleset_name_isValid = ::OpenAPI::fromJsonValue(m_ruleset_name, json[QString("rulesetName")]);
    m_ruleset_name_isSet = !json[QString("rulesetName")].isNull() && m_ruleset_name_isValid;

    m_sync_time_isValid = ::OpenAPI::fromJsonValue(m_sync_time, json[QString("syncTime")]);
    m_sync_time_isSet = !json[QString("syncTime")].isNull() && m_sync_time_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;
}

QString OAIGetReleaseExecutableResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetReleaseExecutableResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_executable_isSet) {
        obj.insert(QString("executable"), ::OpenAPI::toJsonValue(m_executable));
    }
    if (m_executable_version_isSet) {
        obj.insert(QString("executableVersion"), ::OpenAPI::toJsonValue(m_executable_version));
    }
    if (m_language_isSet) {
        obj.insert(QString("language"), ::OpenAPI::toJsonValue(m_language));
    }
    if (m_ruleset_name_isSet) {
        obj.insert(QString("rulesetName"), ::OpenAPI::toJsonValue(m_ruleset_name));
    }
    if (m_sync_time_isSet) {
        obj.insert(QString("syncTime"), ::OpenAPI::toJsonValue(m_sync_time));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    return obj;
}

QByteArray OAIGetReleaseExecutableResponse::getExecutable() const {
    return m_executable;
}
void OAIGetReleaseExecutableResponse::setExecutable(const QByteArray &executable) {
    m_executable = executable;
    m_executable_isSet = true;
}

bool OAIGetReleaseExecutableResponse::is_executable_Set() const{
    return m_executable_isSet;
}

bool OAIGetReleaseExecutableResponse::is_executable_Valid() const{
    return m_executable_isValid;
}

QString OAIGetReleaseExecutableResponse::getExecutableVersion() const {
    return m_executable_version;
}
void OAIGetReleaseExecutableResponse::setExecutableVersion(const QString &executable_version) {
    m_executable_version = executable_version;
    m_executable_version_isSet = true;
}

bool OAIGetReleaseExecutableResponse::is_executable_version_Set() const{
    return m_executable_version_isSet;
}

bool OAIGetReleaseExecutableResponse::is_executable_version_Valid() const{
    return m_executable_version_isValid;
}

QString OAIGetReleaseExecutableResponse::getLanguage() const {
    return m_language;
}
void OAIGetReleaseExecutableResponse::setLanguage(const QString &language) {
    m_language = language;
    m_language_isSet = true;
}

bool OAIGetReleaseExecutableResponse::is_language_Set() const{
    return m_language_isSet;
}

bool OAIGetReleaseExecutableResponse::is_language_Valid() const{
    return m_language_isValid;
}

QString OAIGetReleaseExecutableResponse::getRulesetName() const {
    return m_ruleset_name;
}
void OAIGetReleaseExecutableResponse::setRulesetName(const QString &ruleset_name) {
    m_ruleset_name = ruleset_name;
    m_ruleset_name_isSet = true;
}

bool OAIGetReleaseExecutableResponse::is_ruleset_name_Set() const{
    return m_ruleset_name_isSet;
}

bool OAIGetReleaseExecutableResponse::is_ruleset_name_Valid() const{
    return m_ruleset_name_isValid;
}

QString OAIGetReleaseExecutableResponse::getSyncTime() const {
    return m_sync_time;
}
void OAIGetReleaseExecutableResponse::setSyncTime(const QString &sync_time) {
    m_sync_time = sync_time;
    m_sync_time_isSet = true;
}

bool OAIGetReleaseExecutableResponse::is_sync_time_Set() const{
    return m_sync_time_isSet;
}

bool OAIGetReleaseExecutableResponse::is_sync_time_Valid() const{
    return m_sync_time_isValid;
}

QString OAIGetReleaseExecutableResponse::getUpdateTime() const {
    return m_update_time;
}
void OAIGetReleaseExecutableResponse::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAIGetReleaseExecutableResponse::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAIGetReleaseExecutableResponse::is_update_time_Valid() const{
    return m_update_time_isValid;
}

bool OAIGetReleaseExecutableResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_executable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_executable_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ruleset_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sync_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetReleaseExecutableResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
