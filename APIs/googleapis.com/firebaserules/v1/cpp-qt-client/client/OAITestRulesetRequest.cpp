/**
 * Firebase Rules API
 * Creates and manages rules that determine when a Firebase Rules-enabled service should permit a request. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITestRulesetRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITestRulesetRequest::OAITestRulesetRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITestRulesetRequest::OAITestRulesetRequest() {
    this->initializeModel();
}

OAITestRulesetRequest::~OAITestRulesetRequest() {}

void OAITestRulesetRequest::initializeModel() {

    m_source_isSet = false;
    m_source_isValid = false;

    m_test_suite_isSet = false;
    m_test_suite_isValid = false;
}

void OAITestRulesetRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITestRulesetRequest::fromJsonObject(QJsonObject json) {

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;

    m_test_suite_isValid = ::OpenAPI::fromJsonValue(m_test_suite, json[QString("testSuite")]);
    m_test_suite_isSet = !json[QString("testSuite")].isNull() && m_test_suite_isValid;
}

QString OAITestRulesetRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITestRulesetRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_source.isSet()) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_test_suite.isSet()) {
        obj.insert(QString("testSuite"), ::OpenAPI::toJsonValue(m_test_suite));
    }
    return obj;
}

OAISource OAITestRulesetRequest::getSource() const {
    return m_source;
}
void OAITestRulesetRequest::setSource(const OAISource &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAITestRulesetRequest::is_source_Set() const{
    return m_source_isSet;
}

bool OAITestRulesetRequest::is_source_Valid() const{
    return m_source_isValid;
}

OAITestSuite OAITestRulesetRequest::getTestSuite() const {
    return m_test_suite;
}
void OAITestRulesetRequest::setTestSuite(const OAITestSuite &test_suite) {
    m_test_suite = test_suite;
    m_test_suite_isSet = true;
}

bool OAITestRulesetRequest::is_test_suite_Set() const{
    return m_test_suite_isSet;
}

bool OAITestRulesetRequest::is_test_suite_Valid() const{
    return m_test_suite_isValid;
}

bool OAITestRulesetRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_test_suite.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITestRulesetRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
