/**
 * Firebase Rules API
 * Creates and manages rules that determine when a Firebase Rules-enabled service should permit a request. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRuleset.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRuleset::OAIRuleset(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRuleset::OAIRuleset() {
    this->initializeModel();
}

OAIRuleset::~OAIRuleset() {}

void OAIRuleset::initializeModel() {

    m_attachment_point_isSet = false;
    m_attachment_point_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;
}

void OAIRuleset::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRuleset::fromJsonObject(QJsonObject json) {

    m_attachment_point_isValid = ::OpenAPI::fromJsonValue(m_attachment_point, json[QString("attachmentPoint")]);
    m_attachment_point_isSet = !json[QString("attachmentPoint")].isNull() && m_attachment_point_isValid;

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;
}

QString OAIRuleset::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRuleset::asJsonObject() const {
    QJsonObject obj;
    if (m_attachment_point_isSet) {
        obj.insert(QString("attachmentPoint"), ::OpenAPI::toJsonValue(m_attachment_point));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_metadata.isSet()) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_source.isSet()) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    return obj;
}

QString OAIRuleset::getAttachmentPoint() const {
    return m_attachment_point;
}
void OAIRuleset::setAttachmentPoint(const QString &attachment_point) {
    m_attachment_point = attachment_point;
    m_attachment_point_isSet = true;
}

bool OAIRuleset::is_attachment_point_Set() const{
    return m_attachment_point_isSet;
}

bool OAIRuleset::is_attachment_point_Valid() const{
    return m_attachment_point_isValid;
}

QString OAIRuleset::getCreateTime() const {
    return m_create_time;
}
void OAIRuleset::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIRuleset::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIRuleset::is_create_time_Valid() const{
    return m_create_time_isValid;
}

OAIMetadata OAIRuleset::getMetadata() const {
    return m_metadata;
}
void OAIRuleset::setMetadata(const OAIMetadata &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIRuleset::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIRuleset::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QString OAIRuleset::getName() const {
    return m_name;
}
void OAIRuleset::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIRuleset::is_name_Set() const{
    return m_name_isSet;
}

bool OAIRuleset::is_name_Valid() const{
    return m_name_isValid;
}

OAISource OAIRuleset::getSource() const {
    return m_source;
}
void OAIRuleset::setSource(const OAISource &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIRuleset::is_source_Set() const{
    return m_source_isSet;
}

bool OAIRuleset::is_source_Valid() const{
    return m_source_isValid;
}

bool OAIRuleset::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attachment_point_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRuleset::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
