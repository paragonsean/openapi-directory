/**
 * Firebase Rules API
 * Creates and manages rules that determine when a Firebase Rules-enabled service should permit a request. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAITestCase.h
 *
 * &#x60;TestCase&#x60; messages provide the request context and an expectation as to whether the given context will be allowed or denied. Test cases may specify the &#x60;request&#x60;, &#x60;resource&#x60;, and &#x60;function_mocks&#x60; to mock a function call to a service-provided function. The &#x60;request&#x60; object represents context present at request-time. The &#x60;resource&#x60; is the value of the target resource as it appears in persistent storage before the request is executed.
 */

#ifndef OAITestCase_H
#define OAITestCase_H

#include <QJsonObject>

#include "OAIFunctionMock.h"
#include <QJsonValue>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIFunctionMock;

class OAITestCase : public OAIObject {
public:
    OAITestCase();
    OAITestCase(QString json);
    ~OAITestCase() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getExpectation() const;
    void setExpectation(const QString &expectation);
    bool is_expectation_Set() const;
    bool is_expectation_Valid() const;

    QString getExpressionReportLevel() const;
    void setExpressionReportLevel(const QString &expression_report_level);
    bool is_expression_report_level_Set() const;
    bool is_expression_report_level_Valid() const;

    QList<OAIFunctionMock> getFunctionMocks() const;
    void setFunctionMocks(const QList<OAIFunctionMock> &function_mocks);
    bool is_function_mocks_Set() const;
    bool is_function_mocks_Valid() const;

    QString getPathEncoding() const;
    void setPathEncoding(const QString &path_encoding);
    bool is_path_encoding_Set() const;
    bool is_path_encoding_Valid() const;

    QJsonValue getRequest() const;
    void setRequest(const QJsonValue &request);
    bool is_request_Set() const;
    bool is_request_Valid() const;

    QJsonValue getResource() const;
    void setResource(const QJsonValue &resource);
    bool is_resource_Set() const;
    bool is_resource_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_expectation;
    bool m_expectation_isSet;
    bool m_expectation_isValid;

    QString m_expression_report_level;
    bool m_expression_report_level_isSet;
    bool m_expression_report_level_isValid;

    QList<OAIFunctionMock> m_function_mocks;
    bool m_function_mocks_isSet;
    bool m_function_mocks_isValid;

    QString m_path_encoding;
    bool m_path_encoding_isSet;
    bool m_path_encoding_isValid;

    QJsonValue m_request;
    bool m_request_isSet;
    bool m_request_isValid;

    QJsonValue m_resource;
    bool m_resource_isSet;
    bool m_resource_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAITestCase)

#endif // OAITestCase_H
