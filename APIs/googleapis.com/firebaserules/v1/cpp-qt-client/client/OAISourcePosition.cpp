/**
 * Firebase Rules API
 * Creates and manages rules that determine when a Firebase Rules-enabled service should permit a request. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISourcePosition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISourcePosition::OAISourcePosition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISourcePosition::OAISourcePosition() {
    this->initializeModel();
}

OAISourcePosition::~OAISourcePosition() {}

void OAISourcePosition::initializeModel() {

    m_column_isSet = false;
    m_column_isValid = false;

    m_current_offset_isSet = false;
    m_current_offset_isValid = false;

    m_end_offset_isSet = false;
    m_end_offset_isValid = false;

    m_file_name_isSet = false;
    m_file_name_isValid = false;

    m_line_isSet = false;
    m_line_isValid = false;
}

void OAISourcePosition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISourcePosition::fromJsonObject(QJsonObject json) {

    m_column_isValid = ::OpenAPI::fromJsonValue(m_column, json[QString("column")]);
    m_column_isSet = !json[QString("column")].isNull() && m_column_isValid;

    m_current_offset_isValid = ::OpenAPI::fromJsonValue(m_current_offset, json[QString("currentOffset")]);
    m_current_offset_isSet = !json[QString("currentOffset")].isNull() && m_current_offset_isValid;

    m_end_offset_isValid = ::OpenAPI::fromJsonValue(m_end_offset, json[QString("endOffset")]);
    m_end_offset_isSet = !json[QString("endOffset")].isNull() && m_end_offset_isValid;

    m_file_name_isValid = ::OpenAPI::fromJsonValue(m_file_name, json[QString("fileName")]);
    m_file_name_isSet = !json[QString("fileName")].isNull() && m_file_name_isValid;

    m_line_isValid = ::OpenAPI::fromJsonValue(m_line, json[QString("line")]);
    m_line_isSet = !json[QString("line")].isNull() && m_line_isValid;
}

QString OAISourcePosition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISourcePosition::asJsonObject() const {
    QJsonObject obj;
    if (m_column_isSet) {
        obj.insert(QString("column"), ::OpenAPI::toJsonValue(m_column));
    }
    if (m_current_offset_isSet) {
        obj.insert(QString("currentOffset"), ::OpenAPI::toJsonValue(m_current_offset));
    }
    if (m_end_offset_isSet) {
        obj.insert(QString("endOffset"), ::OpenAPI::toJsonValue(m_end_offset));
    }
    if (m_file_name_isSet) {
        obj.insert(QString("fileName"), ::OpenAPI::toJsonValue(m_file_name));
    }
    if (m_line_isSet) {
        obj.insert(QString("line"), ::OpenAPI::toJsonValue(m_line));
    }
    return obj;
}

qint32 OAISourcePosition::getColumn() const {
    return m_column;
}
void OAISourcePosition::setColumn(const qint32 &column) {
    m_column = column;
    m_column_isSet = true;
}

bool OAISourcePosition::is_column_Set() const{
    return m_column_isSet;
}

bool OAISourcePosition::is_column_Valid() const{
    return m_column_isValid;
}

qint32 OAISourcePosition::getCurrentOffset() const {
    return m_current_offset;
}
void OAISourcePosition::setCurrentOffset(const qint32 &current_offset) {
    m_current_offset = current_offset;
    m_current_offset_isSet = true;
}

bool OAISourcePosition::is_current_offset_Set() const{
    return m_current_offset_isSet;
}

bool OAISourcePosition::is_current_offset_Valid() const{
    return m_current_offset_isValid;
}

qint32 OAISourcePosition::getEndOffset() const {
    return m_end_offset;
}
void OAISourcePosition::setEndOffset(const qint32 &end_offset) {
    m_end_offset = end_offset;
    m_end_offset_isSet = true;
}

bool OAISourcePosition::is_end_offset_Set() const{
    return m_end_offset_isSet;
}

bool OAISourcePosition::is_end_offset_Valid() const{
    return m_end_offset_isValid;
}

QString OAISourcePosition::getFileName() const {
    return m_file_name;
}
void OAISourcePosition::setFileName(const QString &file_name) {
    m_file_name = file_name;
    m_file_name_isSet = true;
}

bool OAISourcePosition::is_file_name_Set() const{
    return m_file_name_isSet;
}

bool OAISourcePosition::is_file_name_Valid() const{
    return m_file_name_isValid;
}

qint32 OAISourcePosition::getLine() const {
    return m_line;
}
void OAISourcePosition::setLine(const qint32 &line) {
    m_line = line;
    m_line_isSet = true;
}

bool OAISourcePosition::is_line_Set() const{
    return m_line_isSet;
}

bool OAISourcePosition::is_line_Valid() const{
    return m_line_isValid;
}

bool OAISourcePosition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_column_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_offset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_offset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISourcePosition::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
