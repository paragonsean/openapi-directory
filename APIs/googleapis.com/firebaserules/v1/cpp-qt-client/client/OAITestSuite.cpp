/**
 * Firebase Rules API
 * Creates and manages rules that determine when a Firebase Rules-enabled service should permit a request. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITestSuite.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITestSuite::OAITestSuite(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITestSuite::OAITestSuite() {
    this->initializeModel();
}

OAITestSuite::~OAITestSuite() {}

void OAITestSuite::initializeModel() {

    m_test_cases_isSet = false;
    m_test_cases_isValid = false;
}

void OAITestSuite::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITestSuite::fromJsonObject(QJsonObject json) {

    m_test_cases_isValid = ::OpenAPI::fromJsonValue(m_test_cases, json[QString("testCases")]);
    m_test_cases_isSet = !json[QString("testCases")].isNull() && m_test_cases_isValid;
}

QString OAITestSuite::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITestSuite::asJsonObject() const {
    QJsonObject obj;
    if (m_test_cases.size() > 0) {
        obj.insert(QString("testCases"), ::OpenAPI::toJsonValue(m_test_cases));
    }
    return obj;
}

QList<OAITestCase> OAITestSuite::getTestCases() const {
    return m_test_cases;
}
void OAITestSuite::setTestCases(const QList<OAITestCase> &test_cases) {
    m_test_cases = test_cases;
    m_test_cases_isSet = true;
}

bool OAITestSuite::is_test_cases_Set() const{
    return m_test_cases_isSet;
}

bool OAITestSuite::is_test_cases_Valid() const{
    return m_test_cases_isValid;
}

bool OAITestSuite::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_test_cases.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITestSuite::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
