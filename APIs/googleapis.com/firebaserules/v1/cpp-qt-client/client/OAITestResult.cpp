/**
 * Firebase Rules API
 * Creates and manages rules that determine when a Firebase Rules-enabled service should permit a request. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITestResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITestResult::OAITestResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITestResult::OAITestResult() {
    this->initializeModel();
}

OAITestResult::~OAITestResult() {}

void OAITestResult::initializeModel() {

    m_debug_messages_isSet = false;
    m_debug_messages_isValid = false;

    m_error_position_isSet = false;
    m_error_position_isValid = false;

    m_expression_reports_isSet = false;
    m_expression_reports_isValid = false;

    m_function_calls_isSet = false;
    m_function_calls_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_visited_expressions_isSet = false;
    m_visited_expressions_isValid = false;
}

void OAITestResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITestResult::fromJsonObject(QJsonObject json) {

    m_debug_messages_isValid = ::OpenAPI::fromJsonValue(m_debug_messages, json[QString("debugMessages")]);
    m_debug_messages_isSet = !json[QString("debugMessages")].isNull() && m_debug_messages_isValid;

    m_error_position_isValid = ::OpenAPI::fromJsonValue(m_error_position, json[QString("errorPosition")]);
    m_error_position_isSet = !json[QString("errorPosition")].isNull() && m_error_position_isValid;

    m_expression_reports_isValid = ::OpenAPI::fromJsonValue(m_expression_reports, json[QString("expressionReports")]);
    m_expression_reports_isSet = !json[QString("expressionReports")].isNull() && m_expression_reports_isValid;

    m_function_calls_isValid = ::OpenAPI::fromJsonValue(m_function_calls, json[QString("functionCalls")]);
    m_function_calls_isSet = !json[QString("functionCalls")].isNull() && m_function_calls_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_visited_expressions_isValid = ::OpenAPI::fromJsonValue(m_visited_expressions, json[QString("visitedExpressions")]);
    m_visited_expressions_isSet = !json[QString("visitedExpressions")].isNull() && m_visited_expressions_isValid;
}

QString OAITestResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITestResult::asJsonObject() const {
    QJsonObject obj;
    if (m_debug_messages.size() > 0) {
        obj.insert(QString("debugMessages"), ::OpenAPI::toJsonValue(m_debug_messages));
    }
    if (m_error_position.isSet()) {
        obj.insert(QString("errorPosition"), ::OpenAPI::toJsonValue(m_error_position));
    }
    if (m_expression_reports.size() > 0) {
        obj.insert(QString("expressionReports"), ::OpenAPI::toJsonValue(m_expression_reports));
    }
    if (m_function_calls.size() > 0) {
        obj.insert(QString("functionCalls"), ::OpenAPI::toJsonValue(m_function_calls));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_visited_expressions.size() > 0) {
        obj.insert(QString("visitedExpressions"), ::OpenAPI::toJsonValue(m_visited_expressions));
    }
    return obj;
}

QList<QString> OAITestResult::getDebugMessages() const {
    return m_debug_messages;
}
void OAITestResult::setDebugMessages(const QList<QString> &debug_messages) {
    m_debug_messages = debug_messages;
    m_debug_messages_isSet = true;
}

bool OAITestResult::is_debug_messages_Set() const{
    return m_debug_messages_isSet;
}

bool OAITestResult::is_debug_messages_Valid() const{
    return m_debug_messages_isValid;
}

OAISourcePosition OAITestResult::getErrorPosition() const {
    return m_error_position;
}
void OAITestResult::setErrorPosition(const OAISourcePosition &error_position) {
    m_error_position = error_position;
    m_error_position_isSet = true;
}

bool OAITestResult::is_error_position_Set() const{
    return m_error_position_isSet;
}

bool OAITestResult::is_error_position_Valid() const{
    return m_error_position_isValid;
}

QList<OAIExpressionReport> OAITestResult::getExpressionReports() const {
    return m_expression_reports;
}
void OAITestResult::setExpressionReports(const QList<OAIExpressionReport> &expression_reports) {
    m_expression_reports = expression_reports;
    m_expression_reports_isSet = true;
}

bool OAITestResult::is_expression_reports_Set() const{
    return m_expression_reports_isSet;
}

bool OAITestResult::is_expression_reports_Valid() const{
    return m_expression_reports_isValid;
}

QList<OAIFunctionCall> OAITestResult::getFunctionCalls() const {
    return m_function_calls;
}
void OAITestResult::setFunctionCalls(const QList<OAIFunctionCall> &function_calls) {
    m_function_calls = function_calls;
    m_function_calls_isSet = true;
}

bool OAITestResult::is_function_calls_Set() const{
    return m_function_calls_isSet;
}

bool OAITestResult::is_function_calls_Valid() const{
    return m_function_calls_isValid;
}

QString OAITestResult::getState() const {
    return m_state;
}
void OAITestResult::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAITestResult::is_state_Set() const{
    return m_state_isSet;
}

bool OAITestResult::is_state_Valid() const{
    return m_state_isValid;
}

QList<OAIVisitedExpression> OAITestResult::getVisitedExpressions() const {
    return m_visited_expressions;
}
void OAITestResult::setVisitedExpressions(const QList<OAIVisitedExpression> &visited_expressions) {
    m_visited_expressions = visited_expressions;
    m_visited_expressions_isSet = true;
}

bool OAITestResult::is_visited_expressions_Set() const{
    return m_visited_expressions_isSet;
}

bool OAITestResult::is_visited_expressions_Valid() const{
    return m_visited_expressions_isValid;
}

bool OAITestResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_debug_messages.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_position.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_expression_reports.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_function_calls.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_visited_expressions.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITestResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
