/**
 * Firebase Rules API
 * Creates and manages rules that determine when a Firebase Rules-enabled service should permit a request. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFunctionMock.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFunctionMock::OAIFunctionMock(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFunctionMock::OAIFunctionMock() {
    this->initializeModel();
}

OAIFunctionMock::~OAIFunctionMock() {}

void OAIFunctionMock::initializeModel() {

    m_args_isSet = false;
    m_args_isValid = false;

    m_function_isSet = false;
    m_function_isValid = false;

    m_result_isSet = false;
    m_result_isValid = false;
}

void OAIFunctionMock::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFunctionMock::fromJsonObject(QJsonObject json) {

    m_args_isValid = ::OpenAPI::fromJsonValue(m_args, json[QString("args")]);
    m_args_isSet = !json[QString("args")].isNull() && m_args_isValid;

    m_function_isValid = ::OpenAPI::fromJsonValue(m_function, json[QString("function")]);
    m_function_isSet = !json[QString("function")].isNull() && m_function_isValid;

    m_result_isValid = ::OpenAPI::fromJsonValue(m_result, json[QString("result")]);
    m_result_isSet = !json[QString("result")].isNull() && m_result_isValid;
}

QString OAIFunctionMock::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFunctionMock::asJsonObject() const {
    QJsonObject obj;
    if (m_args.size() > 0) {
        obj.insert(QString("args"), ::OpenAPI::toJsonValue(m_args));
    }
    if (m_function_isSet) {
        obj.insert(QString("function"), ::OpenAPI::toJsonValue(m_function));
    }
    if (m_result.isSet()) {
        obj.insert(QString("result"), ::OpenAPI::toJsonValue(m_result));
    }
    return obj;
}

QList<OAIArg> OAIFunctionMock::getArgs() const {
    return m_args;
}
void OAIFunctionMock::setArgs(const QList<OAIArg> &args) {
    m_args = args;
    m_args_isSet = true;
}

bool OAIFunctionMock::is_args_Set() const{
    return m_args_isSet;
}

bool OAIFunctionMock::is_args_Valid() const{
    return m_args_isValid;
}

QString OAIFunctionMock::getFunction() const {
    return m_function;
}
void OAIFunctionMock::setFunction(const QString &function) {
    m_function = function;
    m_function_isSet = true;
}

bool OAIFunctionMock::is_function_Set() const{
    return m_function_isSet;
}

bool OAIFunctionMock::is_function_Valid() const{
    return m_function_isValid;
}

OAIResult OAIFunctionMock::getResult() const {
    return m_result;
}
void OAIFunctionMock::setResult(const OAIResult &result) {
    m_result = result;
    m_result_isSet = true;
}

bool OAIFunctionMock::is_result_Set() const{
    return m_result_isSet;
}

bool OAIFunctionMock::is_result_Valid() const{
    return m_result_isValid;
}

bool OAIFunctionMock::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_args.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_function_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_result.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFunctionMock::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
