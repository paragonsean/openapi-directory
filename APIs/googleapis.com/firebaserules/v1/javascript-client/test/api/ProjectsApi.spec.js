/**
 * Firebase Rules API
 * Creates and manages rules that determine when a Firebase Rules-enabled service should permit a request. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.FirebaseRulesApi);
  }
}(this, function(expect, FirebaseRulesApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new FirebaseRulesApi.ProjectsApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ProjectsApi', function() {
    describe('firebaserulesProjectsReleasesCreate', function() {
      it('should call firebaserulesProjectsReleasesCreate successfully', function(done) {
        //uncomment below and update the code to test firebaserulesProjectsReleasesCreate
        //instance.firebaserulesProjectsReleasesCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('firebaserulesProjectsReleasesGetExecutable', function() {
      it('should call firebaserulesProjectsReleasesGetExecutable successfully', function(done) {
        //uncomment below and update the code to test firebaserulesProjectsReleasesGetExecutable
        //instance.firebaserulesProjectsReleasesGetExecutable(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('firebaserulesProjectsReleasesList', function() {
      it('should call firebaserulesProjectsReleasesList successfully', function(done) {
        //uncomment below and update the code to test firebaserulesProjectsReleasesList
        //instance.firebaserulesProjectsReleasesList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('firebaserulesProjectsReleasesPatch', function() {
      it('should call firebaserulesProjectsReleasesPatch successfully', function(done) {
        //uncomment below and update the code to test firebaserulesProjectsReleasesPatch
        //instance.firebaserulesProjectsReleasesPatch(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('firebaserulesProjectsRulesetsCreate', function() {
      it('should call firebaserulesProjectsRulesetsCreate successfully', function(done) {
        //uncomment below and update the code to test firebaserulesProjectsRulesetsCreate
        //instance.firebaserulesProjectsRulesetsCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('firebaserulesProjectsRulesetsDelete', function() {
      it('should call firebaserulesProjectsRulesetsDelete successfully', function(done) {
        //uncomment below and update the code to test firebaserulesProjectsRulesetsDelete
        //instance.firebaserulesProjectsRulesetsDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('firebaserulesProjectsRulesetsGet', function() {
      it('should call firebaserulesProjectsRulesetsGet successfully', function(done) {
        //uncomment below and update the code to test firebaserulesProjectsRulesetsGet
        //instance.firebaserulesProjectsRulesetsGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('firebaserulesProjectsRulesetsList', function() {
      it('should call firebaserulesProjectsRulesetsList successfully', function(done) {
        //uncomment below and update the code to test firebaserulesProjectsRulesetsList
        //instance.firebaserulesProjectsRulesetsList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('firebaserulesProjectsTest', function() {
      it('should call firebaserulesProjectsTest successfully', function(done) {
        //uncomment below and update the code to test firebaserulesProjectsTest
        //instance.firebaserulesProjectsTest(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
