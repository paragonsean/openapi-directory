/**
 * Firebase Rules API
 * Creates and manages rules that determine when a Firebase Rules-enabled service should permit a request. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Arg from './Arg';
import Result from './Result';

/**
 * The FunctionMock model module.
 * @module model/FunctionMock
 * @version v1
 */
class FunctionMock {
    /**
     * Constructs a new <code>FunctionMock</code>.
     * Mock function definition. Mocks must refer to a function declared by the target service. The type of the function args and result will be inferred at test time. If either the arg or result values are not compatible with function type declaration, the request will be considered invalid. More than one &#x60;FunctionMock&#x60; may be provided for a given function name so long as the &#x60;Arg&#x60; matchers are distinct. There may be only one function for a given overload where all &#x60;Arg&#x60; values are &#x60;Arg.any_value&#x60;.
     * @alias module:model/FunctionMock
     */
    constructor() { 
        
        FunctionMock.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>FunctionMock</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FunctionMock} obj Optional instance to populate.
     * @return {module:model/FunctionMock} The populated <code>FunctionMock</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FunctionMock();

            if (data.hasOwnProperty('args')) {
                obj['args'] = ApiClient.convertToType(data['args'], [Arg]);
            }
            if (data.hasOwnProperty('function')) {
                obj['function'] = ApiClient.convertToType(data['function'], 'String');
            }
            if (data.hasOwnProperty('result')) {
                obj['result'] = Result.constructFromObject(data['result']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FunctionMock</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FunctionMock</code>.
     */
    static validateJSON(data) {
        if (data['args']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['args'])) {
                throw new Error("Expected the field `args` to be an array in the JSON data but got " + data['args']);
            }
            // validate the optional field `args` (array)
            for (const item of data['args']) {
                Arg.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['function'] && !(typeof data['function'] === 'string' || data['function'] instanceof String)) {
            throw new Error("Expected the field `function` to be a primitive type in the JSON string but got " + data['function']);
        }
        // validate the optional field `result`
        if (data['result']) { // data not null
          Result.validateJSON(data['result']);
        }

        return true;
    }


}



/**
 * The list of `Arg` values to match. The order in which the arguments are provided is the order in which they must appear in the function invocation.
 * @member {Array.<module:model/Arg>} args
 */
FunctionMock.prototype['args'] = undefined;

/**
 * The name of the function. The function name must match one provided by a service declaration.
 * @member {String} function
 */
FunctionMock.prototype['function'] = undefined;

/**
 * @member {module:model/Result} result
 */
FunctionMock.prototype['result'] = undefined;






export default FunctionMock;

