/**
 * Firebase Rules API
 * Creates and manages rules that determine when a Firebase Rules-enabled service should permit a request. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Release from './Release';

/**
 * The UpdateReleaseRequest model module.
 * @module model/UpdateReleaseRequest
 * @version v1
 */
class UpdateReleaseRequest {
    /**
     * Constructs a new <code>UpdateReleaseRequest</code>.
     * The request for FirebaseRulesService.UpdateRelease.
     * @alias module:model/UpdateReleaseRequest
     */
    constructor() { 
        
        UpdateReleaseRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>UpdateReleaseRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UpdateReleaseRequest} obj Optional instance to populate.
     * @return {module:model/UpdateReleaseRequest} The populated <code>UpdateReleaseRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UpdateReleaseRequest();

            if (data.hasOwnProperty('release')) {
                obj['release'] = Release.constructFromObject(data['release']);
            }
            if (data.hasOwnProperty('updateMask')) {
                obj['updateMask'] = ApiClient.convertToType(data['updateMask'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UpdateReleaseRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UpdateReleaseRequest</code>.
     */
    static validateJSON(data) {
        // validate the optional field `release`
        if (data['release']) { // data not null
          Release.validateJSON(data['release']);
        }
        // ensure the json data is a string
        if (data['updateMask'] && !(typeof data['updateMask'] === 'string' || data['updateMask'] instanceof String)) {
            throw new Error("Expected the field `updateMask` to be a primitive type in the JSON string but got " + data['updateMask']);
        }

        return true;
    }


}



/**
 * @member {module:model/Release} release
 */
UpdateReleaseRequest.prototype['release'] = undefined;

/**
 * Specifies which fields to update.
 * @member {String} updateMask
 */
UpdateReleaseRequest.prototype['updateMask'] = undefined;






export default UpdateReleaseRequest;

