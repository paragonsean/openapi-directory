/**
 * Firebase Rules API
 * Creates and manages rules that determine when a Firebase Rules-enabled service should permit a request. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Issue from './Issue';
import TestResult from './TestResult';

/**
 * The TestRulesetResponse model module.
 * @module model/TestRulesetResponse
 * @version v1
 */
class TestRulesetResponse {
    /**
     * Constructs a new <code>TestRulesetResponse</code>.
     * The response for FirebaseRulesService.TestRuleset.
     * @alias module:model/TestRulesetResponse
     */
    constructor() { 
        
        TestRulesetResponse.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TestRulesetResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TestRulesetResponse} obj Optional instance to populate.
     * @return {module:model/TestRulesetResponse} The populated <code>TestRulesetResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TestRulesetResponse();

            if (data.hasOwnProperty('issues')) {
                obj['issues'] = ApiClient.convertToType(data['issues'], [Issue]);
            }
            if (data.hasOwnProperty('testResults')) {
                obj['testResults'] = ApiClient.convertToType(data['testResults'], [TestResult]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TestRulesetResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TestRulesetResponse</code>.
     */
    static validateJSON(data) {
        if (data['issues']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['issues'])) {
                throw new Error("Expected the field `issues` to be an array in the JSON data but got " + data['issues']);
            }
            // validate the optional field `issues` (array)
            for (const item of data['issues']) {
                Issue.validateJSON(item);
            };
        }
        if (data['testResults']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['testResults'])) {
                throw new Error("Expected the field `testResults` to be an array in the JSON data but got " + data['testResults']);
            }
            // validate the optional field `testResults` (array)
            for (const item of data['testResults']) {
                TestResult.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Syntactic and semantic `Source` issues of varying severity. Issues of `ERROR` severity will prevent tests from executing.
 * @member {Array.<module:model/Issue>} issues
 */
TestRulesetResponse.prototype['issues'] = undefined;

/**
 * The set of test results given the test cases in the `TestSuite`. The results will appear in the same order as the test cases appear in the `TestSuite`.
 * @member {Array.<module:model/TestResult>} testResults
 */
TestRulesetResponse.prototype['testResults'] = undefined;






export default TestRulesetResponse;

