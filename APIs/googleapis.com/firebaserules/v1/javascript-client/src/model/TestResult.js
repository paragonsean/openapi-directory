/**
 * Firebase Rules API
 * Creates and manages rules that determine when a Firebase Rules-enabled service should permit a request. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ExpressionReport from './ExpressionReport';
import FunctionCall from './FunctionCall';
import SourcePosition from './SourcePosition';
import VisitedExpression from './VisitedExpression';

/**
 * The TestResult model module.
 * @module model/TestResult
 * @version v1
 */
class TestResult {
    /**
     * Constructs a new <code>TestResult</code>.
     * Test result message containing the state of the test as well as a description and source position for test failures.
     * @alias module:model/TestResult
     */
    constructor() { 
        
        TestResult.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TestResult</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TestResult} obj Optional instance to populate.
     * @return {module:model/TestResult} The populated <code>TestResult</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TestResult();

            if (data.hasOwnProperty('debugMessages')) {
                obj['debugMessages'] = ApiClient.convertToType(data['debugMessages'], ['String']);
            }
            if (data.hasOwnProperty('errorPosition')) {
                obj['errorPosition'] = SourcePosition.constructFromObject(data['errorPosition']);
            }
            if (data.hasOwnProperty('expressionReports')) {
                obj['expressionReports'] = ApiClient.convertToType(data['expressionReports'], [ExpressionReport]);
            }
            if (data.hasOwnProperty('functionCalls')) {
                obj['functionCalls'] = ApiClient.convertToType(data['functionCalls'], [FunctionCall]);
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('visitedExpressions')) {
                obj['visitedExpressions'] = ApiClient.convertToType(data['visitedExpressions'], [VisitedExpression]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TestResult</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TestResult</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['debugMessages'])) {
            throw new Error("Expected the field `debugMessages` to be an array in the JSON data but got " + data['debugMessages']);
        }
        // validate the optional field `errorPosition`
        if (data['errorPosition']) { // data not null
          SourcePosition.validateJSON(data['errorPosition']);
        }
        if (data['expressionReports']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['expressionReports'])) {
                throw new Error("Expected the field `expressionReports` to be an array in the JSON data but got " + data['expressionReports']);
            }
            // validate the optional field `expressionReports` (array)
            for (const item of data['expressionReports']) {
                ExpressionReport.validateJSON(item);
            };
        }
        if (data['functionCalls']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['functionCalls'])) {
                throw new Error("Expected the field `functionCalls` to be an array in the JSON data but got " + data['functionCalls']);
            }
            // validate the optional field `functionCalls` (array)
            for (const item of data['functionCalls']) {
                FunctionCall.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        if (data['visitedExpressions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['visitedExpressions'])) {
                throw new Error("Expected the field `visitedExpressions` to be an array in the JSON data but got " + data['visitedExpressions']);
            }
            // validate the optional field `visitedExpressions` (array)
            for (const item of data['visitedExpressions']) {
                VisitedExpression.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Debug messages related to test execution issues encountered during evaluation. Debug messages may be related to too many or too few invocations of function mocks or to runtime errors that occur during evaluation. For example: ```Unable to read variable [name: \"resource\"]```
 * @member {Array.<String>} debugMessages
 */
TestResult.prototype['debugMessages'] = undefined;

/**
 * @member {module:model/SourcePosition} errorPosition
 */
TestResult.prototype['errorPosition'] = undefined;

/**
 * The mapping from expression in the ruleset AST to the values they were evaluated to. Partially-nested to mirror AST structure. Note that this field is actually tracking expressions and not permission statements in contrast to the \"visited_expressions\" field above. Literal expressions are omitted.
 * @member {Array.<module:model/ExpressionReport>} expressionReports
 */
TestResult.prototype['expressionReports'] = undefined;

/**
 * The set of function calls made to service-defined methods. Function calls are included in the order in which they are encountered during evaluation, are provided for both mocked and unmocked functions, and included on the response regardless of the test `state`.
 * @member {Array.<module:model/FunctionCall>} functionCalls
 */
TestResult.prototype['functionCalls'] = undefined;

/**
 * State of the test.
 * @member {module:model/TestResult.StateEnum} state
 */
TestResult.prototype['state'] = undefined;

/**
 * The set of visited permission expressions for a given test. This returns the positions and evaluation results of all visited permission expressions which were relevant to the test case, e.g. ``` match /path { allow read if: } ``` For a detailed report of the intermediate evaluation states, see the `expression_reports` field
 * @member {Array.<module:model/VisitedExpression>} visitedExpressions
 */
TestResult.prototype['visitedExpressions'] = undefined;





/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
TestResult['StateEnum'] = {

    /**
     * value: "STATE_UNSPECIFIED"
     * @const
     */
    "STATE_UNSPECIFIED": "STATE_UNSPECIFIED",

    /**
     * value: "SUCCESS"
     * @const
     */
    "SUCCESS": "SUCCESS",

    /**
     * value: "FAILURE"
     * @const
     */
    "FAILURE": "FAILURE"
};



export default TestResult;

