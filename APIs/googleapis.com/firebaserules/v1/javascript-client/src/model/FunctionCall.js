/**
 * Firebase Rules API
 * Creates and manages rules that determine when a Firebase Rules-enabled service should permit a request. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The FunctionCall model module.
 * @module model/FunctionCall
 * @version v1
 */
class FunctionCall {
    /**
     * Constructs a new <code>FunctionCall</code>.
     * Represents a service-defined function call that was invoked during test execution.
     * @alias module:model/FunctionCall
     */
    constructor() { 
        
        FunctionCall.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>FunctionCall</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FunctionCall} obj Optional instance to populate.
     * @return {module:model/FunctionCall} The populated <code>FunctionCall</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FunctionCall();

            if (data.hasOwnProperty('args')) {
                obj['args'] = ApiClient.convertToType(data['args'], [Object]);
            }
            if (data.hasOwnProperty('function')) {
                obj['function'] = ApiClient.convertToType(data['function'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FunctionCall</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FunctionCall</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['args'])) {
            throw new Error("Expected the field `args` to be an array in the JSON data but got " + data['args']);
        }
        // ensure the json data is a string
        if (data['function'] && !(typeof data['function'] === 'string' || data['function'] instanceof String)) {
            throw new Error("Expected the field `function` to be a primitive type in the JSON string but got " + data['function']);
        }

        return true;
    }


}



/**
 * The arguments that were provided to the function.
 * @member {Array.<Object>} args
 */
FunctionCall.prototype['args'] = undefined;

/**
 * Name of the function invoked.
 * @member {String} function
 */
FunctionCall.prototype['function'] = undefined;






export default FunctionCall;

