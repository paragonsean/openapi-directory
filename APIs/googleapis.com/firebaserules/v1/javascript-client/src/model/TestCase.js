/**
 * Firebase Rules API
 * Creates and manages rules that determine when a Firebase Rules-enabled service should permit a request. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FunctionMock from './FunctionMock';

/**
 * The TestCase model module.
 * @module model/TestCase
 * @version v1
 */
class TestCase {
    /**
     * Constructs a new <code>TestCase</code>.
     * &#x60;TestCase&#x60; messages provide the request context and an expectation as to whether the given context will be allowed or denied. Test cases may specify the &#x60;request&#x60;, &#x60;resource&#x60;, and &#x60;function_mocks&#x60; to mock a function call to a service-provided function. The &#x60;request&#x60; object represents context present at request-time. The &#x60;resource&#x60; is the value of the target resource as it appears in persistent storage before the request is executed.
     * @alias module:model/TestCase
     */
    constructor() { 
        
        TestCase.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TestCase</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TestCase} obj Optional instance to populate.
     * @return {module:model/TestCase} The populated <code>TestCase</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TestCase();

            if (data.hasOwnProperty('expectation')) {
                obj['expectation'] = ApiClient.convertToType(data['expectation'], 'String');
            }
            if (data.hasOwnProperty('expressionReportLevel')) {
                obj['expressionReportLevel'] = ApiClient.convertToType(data['expressionReportLevel'], 'String');
            }
            if (data.hasOwnProperty('functionMocks')) {
                obj['functionMocks'] = ApiClient.convertToType(data['functionMocks'], [FunctionMock]);
            }
            if (data.hasOwnProperty('pathEncoding')) {
                obj['pathEncoding'] = ApiClient.convertToType(data['pathEncoding'], 'String');
            }
            if (data.hasOwnProperty('request')) {
                obj['request'] = ApiClient.convertToType(data['request'], Object);
            }
            if (data.hasOwnProperty('resource')) {
                obj['resource'] = ApiClient.convertToType(data['resource'], Object);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TestCase</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TestCase</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['expectation'] && !(typeof data['expectation'] === 'string' || data['expectation'] instanceof String)) {
            throw new Error("Expected the field `expectation` to be a primitive type in the JSON string but got " + data['expectation']);
        }
        // ensure the json data is a string
        if (data['expressionReportLevel'] && !(typeof data['expressionReportLevel'] === 'string' || data['expressionReportLevel'] instanceof String)) {
            throw new Error("Expected the field `expressionReportLevel` to be a primitive type in the JSON string but got " + data['expressionReportLevel']);
        }
        if (data['functionMocks']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['functionMocks'])) {
                throw new Error("Expected the field `functionMocks` to be an array in the JSON data but got " + data['functionMocks']);
            }
            // validate the optional field `functionMocks` (array)
            for (const item of data['functionMocks']) {
                FunctionMock.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['pathEncoding'] && !(typeof data['pathEncoding'] === 'string' || data['pathEncoding'] instanceof String)) {
            throw new Error("Expected the field `pathEncoding` to be a primitive type in the JSON string but got " + data['pathEncoding']);
        }

        return true;
    }


}



/**
 * Test expectation.
 * @member {module:model/TestCase.ExpectationEnum} expectation
 */
TestCase.prototype['expectation'] = undefined;

/**
 * Specifies what should be included in the response.
 * @member {module:model/TestCase.ExpressionReportLevelEnum} expressionReportLevel
 */
TestCase.prototype['expressionReportLevel'] = undefined;

/**
 * Optional function mocks for service-defined functions. If not set, any service defined function is expected to return an error, which may or may not influence the test outcome.
 * @member {Array.<module:model/FunctionMock>} functionMocks
 */
TestCase.prototype['functionMocks'] = undefined;

/**
 * Specifies whether paths (such as request.path) are encoded and how.
 * @member {module:model/TestCase.PathEncodingEnum} pathEncoding
 */
TestCase.prototype['pathEncoding'] = undefined;

/**
 * Request context. The exact format of the request context is service-dependent. See the appropriate service documentation for information about the supported fields and types on the request. Minimally, all services support the following fields and types: Request field | Type ---------------|----------------- auth.uid | `string` auth.token | `map` headers | `map` method | `string` params | `map` path | `string` time | `google.protobuf.Timestamp` If the request value is not well-formed for the service, the request will be rejected as an invalid argument.
 * @member {Object} request
 */
TestCase.prototype['request'] = undefined;

/**
 * Optional resource value as it appears in persistent storage before the request is fulfilled. The resource type depends on the `request.path` value.
 * @member {Object} resource
 */
TestCase.prototype['resource'] = undefined;





/**
 * Allowed values for the <code>expectation</code> property.
 * @enum {String}
 * @readonly
 */
TestCase['ExpectationEnum'] = {

    /**
     * value: "EXPECTATION_UNSPECIFIED"
     * @const
     */
    "EXPECTATION_UNSPECIFIED": "EXPECTATION_UNSPECIFIED",

    /**
     * value: "ALLOW"
     * @const
     */
    "ALLOW": "ALLOW",

    /**
     * value: "DENY"
     * @const
     */
    "DENY": "DENY"
};


/**
 * Allowed values for the <code>expressionReportLevel</code> property.
 * @enum {String}
 * @readonly
 */
TestCase['ExpressionReportLevelEnum'] = {

    /**
     * value: "LEVEL_UNSPECIFIED"
     * @const
     */
    "LEVEL_UNSPECIFIED": "LEVEL_UNSPECIFIED",

    /**
     * value: "NONE"
     * @const
     */
    "NONE": "NONE",

    /**
     * value: "FULL"
     * @const
     */
    "FULL": "FULL",

    /**
     * value: "VISITED"
     * @const
     */
    "VISITED": "VISITED"
};


/**
 * Allowed values for the <code>pathEncoding</code> property.
 * @enum {String}
 * @readonly
 */
TestCase['PathEncodingEnum'] = {

    /**
     * value: "ENCODING_UNSPECIFIED"
     * @const
     */
    "ENCODING_UNSPECIFIED": "ENCODING_UNSPECIFIED",

    /**
     * value: "URL_ENCODED"
     * @const
     */
    "URL_ENCODED": "URL_ENCODED",

    /**
     * value: "PLAIN"
     * @const
     */
    "PLAIN": "PLAIN"
};



export default TestCase;

