/**
 * Firebase Rules API
 * Creates and manages rules that determine when a Firebase Rules-enabled service should permit a request. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SourcePosition model module.
 * @module model/SourcePosition
 * @version v1
 */
class SourcePosition {
    /**
     * Constructs a new <code>SourcePosition</code>.
     * Position in the &#x60;Source&#x60; content including its line, column number, and an index of the &#x60;File&#x60; in the &#x60;Source&#x60; message. Used for debug purposes.
     * @alias module:model/SourcePosition
     */
    constructor() { 
        
        SourcePosition.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SourcePosition</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SourcePosition} obj Optional instance to populate.
     * @return {module:model/SourcePosition} The populated <code>SourcePosition</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SourcePosition();

            if (data.hasOwnProperty('column')) {
                obj['column'] = ApiClient.convertToType(data['column'], 'Number');
            }
            if (data.hasOwnProperty('currentOffset')) {
                obj['currentOffset'] = ApiClient.convertToType(data['currentOffset'], 'Number');
            }
            if (data.hasOwnProperty('endOffset')) {
                obj['endOffset'] = ApiClient.convertToType(data['endOffset'], 'Number');
            }
            if (data.hasOwnProperty('fileName')) {
                obj['fileName'] = ApiClient.convertToType(data['fileName'], 'String');
            }
            if (data.hasOwnProperty('line')) {
                obj['line'] = ApiClient.convertToType(data['line'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SourcePosition</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SourcePosition</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['fileName'] && !(typeof data['fileName'] === 'string' || data['fileName'] instanceof String)) {
            throw new Error("Expected the field `fileName` to be a primitive type in the JSON string but got " + data['fileName']);
        }

        return true;
    }


}



/**
 * First column on the source line associated with the source fragment.
 * @member {Number} column
 */
SourcePosition.prototype['column'] = undefined;

/**
 * Start position relative to the beginning of the file.
 * @member {Number} currentOffset
 */
SourcePosition.prototype['currentOffset'] = undefined;

/**
 * End position relative to the beginning of the file.
 * @member {Number} endOffset
 */
SourcePosition.prototype['endOffset'] = undefined;

/**
 * Name of the `File`.
 * @member {String} fileName
 */
SourcePosition.prototype['fileName'] = undefined;

/**
 * Line number of the source fragment. 1-based.
 * @member {Number} line
 */
SourcePosition.prototype['line'] = undefined;






export default SourcePosition;

