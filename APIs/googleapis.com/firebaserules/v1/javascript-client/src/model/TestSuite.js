/**
 * Firebase Rules API
 * Creates and manages rules that determine when a Firebase Rules-enabled service should permit a request. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TestCase from './TestCase';

/**
 * The TestSuite model module.
 * @module model/TestSuite
 * @version v1
 */
class TestSuite {
    /**
     * Constructs a new <code>TestSuite</code>.
     * &#x60;TestSuite&#x60; is a collection of &#x60;TestCase&#x60; instances that validate the logical correctness of a &#x60;Ruleset&#x60;. The &#x60;TestSuite&#x60; may be referenced in-line within a &#x60;TestRuleset&#x60; invocation or as part of a &#x60;Release&#x60; object as a pre-release check.
     * @alias module:model/TestSuite
     */
    constructor() { 
        
        TestSuite.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TestSuite</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TestSuite} obj Optional instance to populate.
     * @return {module:model/TestSuite} The populated <code>TestSuite</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TestSuite();

            if (data.hasOwnProperty('testCases')) {
                obj['testCases'] = ApiClient.convertToType(data['testCases'], [TestCase]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TestSuite</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TestSuite</code>.
     */
    static validateJSON(data) {
        if (data['testCases']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['testCases'])) {
                throw new Error("Expected the field `testCases` to be an array in the JSON data but got " + data['testCases']);
            }
            // validate the optional field `testCases` (array)
            for (const item of data['testCases']) {
                TestCase.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Collection of test cases associated with the `TestSuite`.
 * @member {Array.<module:model/TestCase>} testCases
 */
TestSuite.prototype['testCases'] = undefined;






export default TestSuite;

