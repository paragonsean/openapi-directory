# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PlatformSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, better_ads_status: str=None, enforcement_time: str=None, filter_status: str=None, last_change_time: str=None, region: List[str]=None, report_url: str=None, under_review: bool=None):
        """PlatformSummary - a model defined in OpenAPI

        :param better_ads_status: The better_ads_status of this PlatformSummary.
        :param enforcement_time: The enforcement_time of this PlatformSummary.
        :param filter_status: The filter_status of this PlatformSummary.
        :param last_change_time: The last_change_time of this PlatformSummary.
        :param region: The region of this PlatformSummary.
        :param report_url: The report_url of this PlatformSummary.
        :param under_review: The under_review of this PlatformSummary.
        """
        self.openapi_types = {
            'better_ads_status': str,
            'enforcement_time': str,
            'filter_status': str,
            'last_change_time': str,
            'region': List[str],
            'report_url': str,
            'under_review': bool
        }

        self.attribute_map = {
            'better_ads_status': 'betterAdsStatus',
            'enforcement_time': 'enforcementTime',
            'filter_status': 'filterStatus',
            'last_change_time': 'lastChangeTime',
            'region': 'region',
            'report_url': 'reportUrl',
            'under_review': 'underReview'
        }

        self._better_ads_status = better_ads_status
        self._enforcement_time = enforcement_time
        self._filter_status = filter_status
        self._last_change_time = last_change_time
        self._region = region
        self._report_url = report_url
        self._under_review = under_review

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PlatformSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PlatformSummary of this PlatformSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def better_ads_status(self):
        """Gets the better_ads_status of this PlatformSummary.

        The site's Ad Experience Report status on this platform.

        :return: The better_ads_status of this PlatformSummary.
        :rtype: str
        """
        return self._better_ads_status

    @better_ads_status.setter
    def better_ads_status(self, better_ads_status):
        """Sets the better_ads_status of this PlatformSummary.

        The site's Ad Experience Report status on this platform.

        :param better_ads_status: The better_ads_status of this PlatformSummary.
        :type better_ads_status: str
        """
        allowed_values = ["UNKNOWN", "PASSING", "WARNING", "FAILING"]  # noqa: E501
        if better_ads_status not in allowed_values:
            raise ValueError(
                "Invalid value for `better_ads_status` ({0}), must be one of {1}"
                .format(better_ads_status, allowed_values)
            )

        self._better_ads_status = better_ads_status

    @property
    def enforcement_time(self):
        """Gets the enforcement_time of this PlatformSummary.

        The time at which [enforcement](https://support.google.com/webtools/answer/7308033) against the site began or will begin on this platform. Not set when the filter_status is OFF.

        :return: The enforcement_time of this PlatformSummary.
        :rtype: str
        """
        return self._enforcement_time

    @enforcement_time.setter
    def enforcement_time(self, enforcement_time):
        """Sets the enforcement_time of this PlatformSummary.

        The time at which [enforcement](https://support.google.com/webtools/answer/7308033) against the site began or will begin on this platform. Not set when the filter_status is OFF.

        :param enforcement_time: The enforcement_time of this PlatformSummary.
        :type enforcement_time: str
        """

        self._enforcement_time = enforcement_time

    @property
    def filter_status(self):
        """Gets the filter_status of this PlatformSummary.

        The site's [enforcement status](https://support.google.com/webtools/answer/7308033) on this platform.

        :return: The filter_status of this PlatformSummary.
        :rtype: str
        """
        return self._filter_status

    @filter_status.setter
    def filter_status(self, filter_status):
        """Sets the filter_status of this PlatformSummary.

        The site's [enforcement status](https://support.google.com/webtools/answer/7308033) on this platform.

        :param filter_status: The filter_status of this PlatformSummary.
        :type filter_status: str
        """
        allowed_values = ["UNKNOWN", "true", "false", "PAUSED", "PENDING"]  # noqa: E501
        if filter_status not in allowed_values:
            raise ValueError(
                "Invalid value for `filter_status` ({0}), must be one of {1}"
                .format(filter_status, allowed_values)
            )

        self._filter_status = filter_status

    @property
    def last_change_time(self):
        """Gets the last_change_time of this PlatformSummary.

        The time at which the site's status last changed on this platform.

        :return: The last_change_time of this PlatformSummary.
        :rtype: str
        """
        return self._last_change_time

    @last_change_time.setter
    def last_change_time(self, last_change_time):
        """Sets the last_change_time of this PlatformSummary.

        The time at which the site's status last changed on this platform.

        :param last_change_time: The last_change_time of this PlatformSummary.
        :type last_change_time: str
        """

        self._last_change_time = last_change_time

    @property
    def region(self):
        """Gets the region of this PlatformSummary.

        The site's regions on this platform. No longer populated, because there is no longer any semantic difference between sites in different regions.

        :return: The region of this PlatformSummary.
        :rtype: List[str]
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this PlatformSummary.

        The site's regions on this platform. No longer populated, because there is no longer any semantic difference between sites in different regions.

        :param region: The region of this PlatformSummary.
        :type region: List[str]
        """
        allowed_values = ["REGION_UNKNOWN", "REGION_A", "REGION_B", "REGION_C"]  # noqa: E501
        if not set(region).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `region` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(region) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._region = region

    @property
    def report_url(self):
        """Gets the report_url of this PlatformSummary.

        A link to the full Ad Experience Report for the site on this platform.. Not set in ViolatingSitesResponse. Note that you must complete the [Search Console verification process](https://support.google.com/webmasters/answer/9008080) for the site before you can access the full report.

        :return: The report_url of this PlatformSummary.
        :rtype: str
        """
        return self._report_url

    @report_url.setter
    def report_url(self, report_url):
        """Sets the report_url of this PlatformSummary.

        A link to the full Ad Experience Report for the site on this platform.. Not set in ViolatingSitesResponse. Note that you must complete the [Search Console verification process](https://support.google.com/webmasters/answer/9008080) for the site before you can access the full report.

        :param report_url: The report_url of this PlatformSummary.
        :type report_url: str
        """

        self._report_url = report_url

    @property
    def under_review(self):
        """Gets the under_review of this PlatformSummary.

        Whether the site is currently under review on this platform.

        :return: The under_review of this PlatformSummary.
        :rtype: bool
        """
        return self._under_review

    @under_review.setter
    def under_review(self, under_review):
        """Sets the under_review of this PlatformSummary.

        Whether the site is currently under review on this platform.

        :param under_review: The under_review of this PlatformSummary.
        :type under_review: bool
        """

        self._under_review = under_review
