/**
 * Ad Experience Report API
 * Views Ad Experience Report data, and gets a list of sites that have a significant number of annoying ads.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIViolatingSitesResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIViolatingSitesResponse::OAIViolatingSitesResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIViolatingSitesResponse::OAIViolatingSitesResponse() {
    this->initializeModel();
}

OAIViolatingSitesResponse::~OAIViolatingSitesResponse() {}

void OAIViolatingSitesResponse::initializeModel() {

    m_violating_sites_isSet = false;
    m_violating_sites_isValid = false;
}

void OAIViolatingSitesResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIViolatingSitesResponse::fromJsonObject(QJsonObject json) {

    m_violating_sites_isValid = ::OpenAPI::fromJsonValue(m_violating_sites, json[QString("violatingSites")]);
    m_violating_sites_isSet = !json[QString("violatingSites")].isNull() && m_violating_sites_isValid;
}

QString OAIViolatingSitesResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIViolatingSitesResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_violating_sites.size() > 0) {
        obj.insert(QString("violatingSites"), ::OpenAPI::toJsonValue(m_violating_sites));
    }
    return obj;
}

QList<OAISiteSummaryResponse> OAIViolatingSitesResponse::getViolatingSites() const {
    return m_violating_sites;
}
void OAIViolatingSitesResponse::setViolatingSites(const QList<OAISiteSummaryResponse> &violating_sites) {
    m_violating_sites = violating_sites;
    m_violating_sites_isSet = true;
}

bool OAIViolatingSitesResponse::is_violating_sites_Set() const{
    return m_violating_sites_isSet;
}

bool OAIViolatingSitesResponse::is_violating_sites_Valid() const{
    return m_violating_sites_isValid;
}

bool OAIViolatingSitesResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_violating_sites.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIViolatingSitesResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
