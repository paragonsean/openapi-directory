/**
 * Ad Experience Report API
 * Views Ad Experience Report data, and gets a list of sites that have a significant number of annoying ads.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISiteSummaryResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISiteSummaryResponse::OAISiteSummaryResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISiteSummaryResponse::OAISiteSummaryResponse() {
    this->initializeModel();
}

OAISiteSummaryResponse::~OAISiteSummaryResponse() {}

void OAISiteSummaryResponse::initializeModel() {

    m_desktop_summary_isSet = false;
    m_desktop_summary_isValid = false;

    m_mobile_summary_isSet = false;
    m_mobile_summary_isValid = false;

    m_reviewed_site_isSet = false;
    m_reviewed_site_isValid = false;
}

void OAISiteSummaryResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISiteSummaryResponse::fromJsonObject(QJsonObject json) {

    m_desktop_summary_isValid = ::OpenAPI::fromJsonValue(m_desktop_summary, json[QString("desktopSummary")]);
    m_desktop_summary_isSet = !json[QString("desktopSummary")].isNull() && m_desktop_summary_isValid;

    m_mobile_summary_isValid = ::OpenAPI::fromJsonValue(m_mobile_summary, json[QString("mobileSummary")]);
    m_mobile_summary_isSet = !json[QString("mobileSummary")].isNull() && m_mobile_summary_isValid;

    m_reviewed_site_isValid = ::OpenAPI::fromJsonValue(m_reviewed_site, json[QString("reviewedSite")]);
    m_reviewed_site_isSet = !json[QString("reviewedSite")].isNull() && m_reviewed_site_isValid;
}

QString OAISiteSummaryResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISiteSummaryResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_desktop_summary.isSet()) {
        obj.insert(QString("desktopSummary"), ::OpenAPI::toJsonValue(m_desktop_summary));
    }
    if (m_mobile_summary.isSet()) {
        obj.insert(QString("mobileSummary"), ::OpenAPI::toJsonValue(m_mobile_summary));
    }
    if (m_reviewed_site_isSet) {
        obj.insert(QString("reviewedSite"), ::OpenAPI::toJsonValue(m_reviewed_site));
    }
    return obj;
}

OAIPlatformSummary OAISiteSummaryResponse::getDesktopSummary() const {
    return m_desktop_summary;
}
void OAISiteSummaryResponse::setDesktopSummary(const OAIPlatformSummary &desktop_summary) {
    m_desktop_summary = desktop_summary;
    m_desktop_summary_isSet = true;
}

bool OAISiteSummaryResponse::is_desktop_summary_Set() const{
    return m_desktop_summary_isSet;
}

bool OAISiteSummaryResponse::is_desktop_summary_Valid() const{
    return m_desktop_summary_isValid;
}

OAIPlatformSummary OAISiteSummaryResponse::getMobileSummary() const {
    return m_mobile_summary;
}
void OAISiteSummaryResponse::setMobileSummary(const OAIPlatformSummary &mobile_summary) {
    m_mobile_summary = mobile_summary;
    m_mobile_summary_isSet = true;
}

bool OAISiteSummaryResponse::is_mobile_summary_Set() const{
    return m_mobile_summary_isSet;
}

bool OAISiteSummaryResponse::is_mobile_summary_Valid() const{
    return m_mobile_summary_isValid;
}

QString OAISiteSummaryResponse::getReviewedSite() const {
    return m_reviewed_site;
}
void OAISiteSummaryResponse::setReviewedSite(const QString &reviewed_site) {
    m_reviewed_site = reviewed_site;
    m_reviewed_site_isSet = true;
}

bool OAISiteSummaryResponse::is_reviewed_site_Set() const{
    return m_reviewed_site_isSet;
}

bool OAISiteSummaryResponse::is_reviewed_site_Valid() const{
    return m_reviewed_site_isValid;
}

bool OAISiteSummaryResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_desktop_summary.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_mobile_summary.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_reviewed_site_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISiteSummaryResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
