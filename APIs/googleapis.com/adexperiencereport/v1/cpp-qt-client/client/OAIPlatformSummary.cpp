/**
 * Ad Experience Report API
 * Views Ad Experience Report data, and gets a list of sites that have a significant number of annoying ads.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPlatformSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPlatformSummary::OAIPlatformSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPlatformSummary::OAIPlatformSummary() {
    this->initializeModel();
}

OAIPlatformSummary::~OAIPlatformSummary() {}

void OAIPlatformSummary::initializeModel() {

    m_better_ads_status_isSet = false;
    m_better_ads_status_isValid = false;

    m_enforcement_time_isSet = false;
    m_enforcement_time_isValid = false;

    m_filter_status_isSet = false;
    m_filter_status_isValid = false;

    m_last_change_time_isSet = false;
    m_last_change_time_isValid = false;

    m_region_isSet = false;
    m_region_isValid = false;

    m_report_url_isSet = false;
    m_report_url_isValid = false;

    m_under_review_isSet = false;
    m_under_review_isValid = false;
}

void OAIPlatformSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPlatformSummary::fromJsonObject(QJsonObject json) {

    m_better_ads_status_isValid = ::OpenAPI::fromJsonValue(m_better_ads_status, json[QString("betterAdsStatus")]);
    m_better_ads_status_isSet = !json[QString("betterAdsStatus")].isNull() && m_better_ads_status_isValid;

    m_enforcement_time_isValid = ::OpenAPI::fromJsonValue(m_enforcement_time, json[QString("enforcementTime")]);
    m_enforcement_time_isSet = !json[QString("enforcementTime")].isNull() && m_enforcement_time_isValid;

    m_filter_status_isValid = ::OpenAPI::fromJsonValue(m_filter_status, json[QString("filterStatus")]);
    m_filter_status_isSet = !json[QString("filterStatus")].isNull() && m_filter_status_isValid;

    m_last_change_time_isValid = ::OpenAPI::fromJsonValue(m_last_change_time, json[QString("lastChangeTime")]);
    m_last_change_time_isSet = !json[QString("lastChangeTime")].isNull() && m_last_change_time_isValid;

    m_region_isValid = ::OpenAPI::fromJsonValue(m_region, json[QString("region")]);
    m_region_isSet = !json[QString("region")].isNull() && m_region_isValid;

    m_report_url_isValid = ::OpenAPI::fromJsonValue(m_report_url, json[QString("reportUrl")]);
    m_report_url_isSet = !json[QString("reportUrl")].isNull() && m_report_url_isValid;

    m_under_review_isValid = ::OpenAPI::fromJsonValue(m_under_review, json[QString("underReview")]);
    m_under_review_isSet = !json[QString("underReview")].isNull() && m_under_review_isValid;
}

QString OAIPlatformSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPlatformSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_better_ads_status_isSet) {
        obj.insert(QString("betterAdsStatus"), ::OpenAPI::toJsonValue(m_better_ads_status));
    }
    if (m_enforcement_time_isSet) {
        obj.insert(QString("enforcementTime"), ::OpenAPI::toJsonValue(m_enforcement_time));
    }
    if (m_filter_status_isSet) {
        obj.insert(QString("filterStatus"), ::OpenAPI::toJsonValue(m_filter_status));
    }
    if (m_last_change_time_isSet) {
        obj.insert(QString("lastChangeTime"), ::OpenAPI::toJsonValue(m_last_change_time));
    }
    if (m_region.size() > 0) {
        obj.insert(QString("region"), ::OpenAPI::toJsonValue(m_region));
    }
    if (m_report_url_isSet) {
        obj.insert(QString("reportUrl"), ::OpenAPI::toJsonValue(m_report_url));
    }
    if (m_under_review_isSet) {
        obj.insert(QString("underReview"), ::OpenAPI::toJsonValue(m_under_review));
    }
    return obj;
}

QString OAIPlatformSummary::getBetterAdsStatus() const {
    return m_better_ads_status;
}
void OAIPlatformSummary::setBetterAdsStatus(const QString &better_ads_status) {
    m_better_ads_status = better_ads_status;
    m_better_ads_status_isSet = true;
}

bool OAIPlatformSummary::is_better_ads_status_Set() const{
    return m_better_ads_status_isSet;
}

bool OAIPlatformSummary::is_better_ads_status_Valid() const{
    return m_better_ads_status_isValid;
}

QString OAIPlatformSummary::getEnforcementTime() const {
    return m_enforcement_time;
}
void OAIPlatformSummary::setEnforcementTime(const QString &enforcement_time) {
    m_enforcement_time = enforcement_time;
    m_enforcement_time_isSet = true;
}

bool OAIPlatformSummary::is_enforcement_time_Set() const{
    return m_enforcement_time_isSet;
}

bool OAIPlatformSummary::is_enforcement_time_Valid() const{
    return m_enforcement_time_isValid;
}

QString OAIPlatformSummary::getFilterStatus() const {
    return m_filter_status;
}
void OAIPlatformSummary::setFilterStatus(const QString &filter_status) {
    m_filter_status = filter_status;
    m_filter_status_isSet = true;
}

bool OAIPlatformSummary::is_filter_status_Set() const{
    return m_filter_status_isSet;
}

bool OAIPlatformSummary::is_filter_status_Valid() const{
    return m_filter_status_isValid;
}

QString OAIPlatformSummary::getLastChangeTime() const {
    return m_last_change_time;
}
void OAIPlatformSummary::setLastChangeTime(const QString &last_change_time) {
    m_last_change_time = last_change_time;
    m_last_change_time_isSet = true;
}

bool OAIPlatformSummary::is_last_change_time_Set() const{
    return m_last_change_time_isSet;
}

bool OAIPlatformSummary::is_last_change_time_Valid() const{
    return m_last_change_time_isValid;
}

QList<QString> OAIPlatformSummary::getRegion() const {
    return m_region;
}
void OAIPlatformSummary::setRegion(const QList<QString> &region) {
    m_region = region;
    m_region_isSet = true;
}

bool OAIPlatformSummary::is_region_Set() const{
    return m_region_isSet;
}

bool OAIPlatformSummary::is_region_Valid() const{
    return m_region_isValid;
}

QString OAIPlatformSummary::getReportUrl() const {
    return m_report_url;
}
void OAIPlatformSummary::setReportUrl(const QString &report_url) {
    m_report_url = report_url;
    m_report_url_isSet = true;
}

bool OAIPlatformSummary::is_report_url_Set() const{
    return m_report_url_isSet;
}

bool OAIPlatformSummary::is_report_url_Valid() const{
    return m_report_url_isValid;
}

bool OAIPlatformSummary::isUnderReview() const {
    return m_under_review;
}
void OAIPlatformSummary::setUnderReview(const bool &under_review) {
    m_under_review = under_review;
    m_under_review_isSet = true;
}

bool OAIPlatformSummary::is_under_review_Set() const{
    return m_under_review_isSet;
}

bool OAIPlatformSummary::is_under_review_Valid() const{
    return m_under_review_isValid;
}

bool OAIPlatformSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_better_ads_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enforcement_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filter_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_change_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_region.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_report_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_under_review_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPlatformSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
