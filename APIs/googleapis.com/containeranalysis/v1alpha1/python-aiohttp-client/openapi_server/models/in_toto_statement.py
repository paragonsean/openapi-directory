# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.in_toto_provenance import InTotoProvenance
from openapi_server.models.slsa_provenance import SlsaProvenance
from openapi_server.models.slsa_provenance_zero_two import SlsaProvenanceZeroTwo
from openapi_server.models.subject import Subject
from openapi_server import util


class InTotoStatement(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, type: str=None, predicate_type: str=None, provenance: InTotoProvenance=None, slsa_provenance: SlsaProvenance=None, slsa_provenance_zero_two: SlsaProvenanceZeroTwo=None, subject: List[Subject]=None):
        """InTotoStatement - a model defined in OpenAPI

        :param type: The type of this InTotoStatement.
        :param predicate_type: The predicate_type of this InTotoStatement.
        :param provenance: The provenance of this InTotoStatement.
        :param slsa_provenance: The slsa_provenance of this InTotoStatement.
        :param slsa_provenance_zero_two: The slsa_provenance_zero_two of this InTotoStatement.
        :param subject: The subject of this InTotoStatement.
        """
        self.openapi_types = {
            'type': str,
            'predicate_type': str,
            'provenance': InTotoProvenance,
            'slsa_provenance': SlsaProvenance,
            'slsa_provenance_zero_two': SlsaProvenanceZeroTwo,
            'subject': List[Subject]
        }

        self.attribute_map = {
            'type': '_type',
            'predicate_type': 'predicateType',
            'provenance': 'provenance',
            'slsa_provenance': 'slsaProvenance',
            'slsa_provenance_zero_two': 'slsaProvenanceZeroTwo',
            'subject': 'subject'
        }

        self._type = type
        self._predicate_type = predicate_type
        self._provenance = provenance
        self._slsa_provenance = slsa_provenance
        self._slsa_provenance_zero_two = slsa_provenance_zero_two
        self._subject = subject

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InTotoStatement':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InTotoStatement of this InTotoStatement.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self):
        """Gets the type of this InTotoStatement.

        Always \"https://in-toto.io/Statement/v0.1\".

        :return: The type of this InTotoStatement.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this InTotoStatement.

        Always \"https://in-toto.io/Statement/v0.1\".

        :param type: The type of this InTotoStatement.
        :type type: str
        """

        self._type = type

    @property
    def predicate_type(self):
        """Gets the predicate_type of this InTotoStatement.

        \"https://slsa.dev/provenance/v0.1\" for SlsaProvenance.

        :return: The predicate_type of this InTotoStatement.
        :rtype: str
        """
        return self._predicate_type

    @predicate_type.setter
    def predicate_type(self, predicate_type):
        """Sets the predicate_type of this InTotoStatement.

        \"https://slsa.dev/provenance/v0.1\" for SlsaProvenance.

        :param predicate_type: The predicate_type of this InTotoStatement.
        :type predicate_type: str
        """

        self._predicate_type = predicate_type

    @property
    def provenance(self):
        """Gets the provenance of this InTotoStatement.


        :return: The provenance of this InTotoStatement.
        :rtype: InTotoProvenance
        """
        return self._provenance

    @provenance.setter
    def provenance(self, provenance):
        """Sets the provenance of this InTotoStatement.


        :param provenance: The provenance of this InTotoStatement.
        :type provenance: InTotoProvenance
        """

        self._provenance = provenance

    @property
    def slsa_provenance(self):
        """Gets the slsa_provenance of this InTotoStatement.


        :return: The slsa_provenance of this InTotoStatement.
        :rtype: SlsaProvenance
        """
        return self._slsa_provenance

    @slsa_provenance.setter
    def slsa_provenance(self, slsa_provenance):
        """Sets the slsa_provenance of this InTotoStatement.


        :param slsa_provenance: The slsa_provenance of this InTotoStatement.
        :type slsa_provenance: SlsaProvenance
        """

        self._slsa_provenance = slsa_provenance

    @property
    def slsa_provenance_zero_two(self):
        """Gets the slsa_provenance_zero_two of this InTotoStatement.


        :return: The slsa_provenance_zero_two of this InTotoStatement.
        :rtype: SlsaProvenanceZeroTwo
        """
        return self._slsa_provenance_zero_two

    @slsa_provenance_zero_two.setter
    def slsa_provenance_zero_two(self, slsa_provenance_zero_two):
        """Sets the slsa_provenance_zero_two of this InTotoStatement.


        :param slsa_provenance_zero_two: The slsa_provenance_zero_two of this InTotoStatement.
        :type slsa_provenance_zero_two: SlsaProvenanceZeroTwo
        """

        self._slsa_provenance_zero_two = slsa_provenance_zero_two

    @property
    def subject(self):
        """Gets the subject of this InTotoStatement.

        subject is the subjects of the intoto statement

        :return: The subject of this InTotoStatement.
        :rtype: List[Subject]
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this InTotoStatement.

        subject is the subjects of the intoto statement

        :param subject: The subject of this InTotoStatement.
        :type subject: List[Subject]
        """

        self._subject = subject
