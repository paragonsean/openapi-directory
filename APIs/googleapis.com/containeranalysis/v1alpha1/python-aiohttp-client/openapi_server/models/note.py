# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.attestation_authority import AttestationAuthority
from openapi_server.models.basis import Basis
from openapi_server.models.build_type import BuildType
from openapi_server.models.compliance_note import ComplianceNote
from openapi_server.models.dsse_attestation_note import DSSEAttestationNote
from openapi_server.models.deployable import Deployable
from openapi_server.models.discovery import Discovery
from openapi_server.models.document_note import DocumentNote
from openapi_server.models.file_note import FileNote
from openapi_server.models.package import Package
from openapi_server.models.package_info_note import PackageInfoNote
from openapi_server.models.related_url import RelatedUrl
from openapi_server.models.relationship_note import RelationshipNote
from openapi_server.models.sbom_reference_note import SBOMReferenceNote
from openapi_server.models.upgrade_note import UpgradeNote
from openapi_server.models.vulnerability_assessment_note import VulnerabilityAssessmentNote
from openapi_server.models.vulnerability_type import VulnerabilityType
from openapi_server import util


class Note(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attestation_authority: AttestationAuthority=None, base_image: Basis=None, build_type: BuildType=None, compliance: ComplianceNote=None, create_time: str=None, deployable: Deployable=None, discovery: Discovery=None, dsse_attestation: DSSEAttestationNote=None, expiration_time: str=None, kind: str=None, long_description: str=None, name: str=None, package: Package=None, related_url: List[RelatedUrl]=None, sbom: DocumentNote=None, sbom_reference: SBOMReferenceNote=None, short_description: str=None, spdx_file: FileNote=None, spdx_package: PackageInfoNote=None, spdx_relationship: RelationshipNote=None, update_time: str=None, upgrade: UpgradeNote=None, vulnerability_assessment: VulnerabilityAssessmentNote=None, vulnerability_type: VulnerabilityType=None):
        """Note - a model defined in OpenAPI

        :param attestation_authority: The attestation_authority of this Note.
        :param base_image: The base_image of this Note.
        :param build_type: The build_type of this Note.
        :param compliance: The compliance of this Note.
        :param create_time: The create_time of this Note.
        :param deployable: The deployable of this Note.
        :param discovery: The discovery of this Note.
        :param dsse_attestation: The dsse_attestation of this Note.
        :param expiration_time: The expiration_time of this Note.
        :param kind: The kind of this Note.
        :param long_description: The long_description of this Note.
        :param name: The name of this Note.
        :param package: The package of this Note.
        :param related_url: The related_url of this Note.
        :param sbom: The sbom of this Note.
        :param sbom_reference: The sbom_reference of this Note.
        :param short_description: The short_description of this Note.
        :param spdx_file: The spdx_file of this Note.
        :param spdx_package: The spdx_package of this Note.
        :param spdx_relationship: The spdx_relationship of this Note.
        :param update_time: The update_time of this Note.
        :param upgrade: The upgrade of this Note.
        :param vulnerability_assessment: The vulnerability_assessment of this Note.
        :param vulnerability_type: The vulnerability_type of this Note.
        """
        self.openapi_types = {
            'attestation_authority': AttestationAuthority,
            'base_image': Basis,
            'build_type': BuildType,
            'compliance': ComplianceNote,
            'create_time': str,
            'deployable': Deployable,
            'discovery': Discovery,
            'dsse_attestation': DSSEAttestationNote,
            'expiration_time': str,
            'kind': str,
            'long_description': str,
            'name': str,
            'package': Package,
            'related_url': List[RelatedUrl],
            'sbom': DocumentNote,
            'sbom_reference': SBOMReferenceNote,
            'short_description': str,
            'spdx_file': FileNote,
            'spdx_package': PackageInfoNote,
            'spdx_relationship': RelationshipNote,
            'update_time': str,
            'upgrade': UpgradeNote,
            'vulnerability_assessment': VulnerabilityAssessmentNote,
            'vulnerability_type': VulnerabilityType
        }

        self.attribute_map = {
            'attestation_authority': 'attestationAuthority',
            'base_image': 'baseImage',
            'build_type': 'buildType',
            'compliance': 'compliance',
            'create_time': 'createTime',
            'deployable': 'deployable',
            'discovery': 'discovery',
            'dsse_attestation': 'dsseAttestation',
            'expiration_time': 'expirationTime',
            'kind': 'kind',
            'long_description': 'longDescription',
            'name': 'name',
            'package': 'package',
            'related_url': 'relatedUrl',
            'sbom': 'sbom',
            'sbom_reference': 'sbomReference',
            'short_description': 'shortDescription',
            'spdx_file': 'spdxFile',
            'spdx_package': 'spdxPackage',
            'spdx_relationship': 'spdxRelationship',
            'update_time': 'updateTime',
            'upgrade': 'upgrade',
            'vulnerability_assessment': 'vulnerabilityAssessment',
            'vulnerability_type': 'vulnerabilityType'
        }

        self._attestation_authority = attestation_authority
        self._base_image = base_image
        self._build_type = build_type
        self._compliance = compliance
        self._create_time = create_time
        self._deployable = deployable
        self._discovery = discovery
        self._dsse_attestation = dsse_attestation
        self._expiration_time = expiration_time
        self._kind = kind
        self._long_description = long_description
        self._name = name
        self._package = package
        self._related_url = related_url
        self._sbom = sbom
        self._sbom_reference = sbom_reference
        self._short_description = short_description
        self._spdx_file = spdx_file
        self._spdx_package = spdx_package
        self._spdx_relationship = spdx_relationship
        self._update_time = update_time
        self._upgrade = upgrade
        self._vulnerability_assessment = vulnerability_assessment
        self._vulnerability_type = vulnerability_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Note':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Note of this Note.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attestation_authority(self):
        """Gets the attestation_authority of this Note.


        :return: The attestation_authority of this Note.
        :rtype: AttestationAuthority
        """
        return self._attestation_authority

    @attestation_authority.setter
    def attestation_authority(self, attestation_authority):
        """Sets the attestation_authority of this Note.


        :param attestation_authority: The attestation_authority of this Note.
        :type attestation_authority: AttestationAuthority
        """

        self._attestation_authority = attestation_authority

    @property
    def base_image(self):
        """Gets the base_image of this Note.


        :return: The base_image of this Note.
        :rtype: Basis
        """
        return self._base_image

    @base_image.setter
    def base_image(self, base_image):
        """Sets the base_image of this Note.


        :param base_image: The base_image of this Note.
        :type base_image: Basis
        """

        self._base_image = base_image

    @property
    def build_type(self):
        """Gets the build_type of this Note.


        :return: The build_type of this Note.
        :rtype: BuildType
        """
        return self._build_type

    @build_type.setter
    def build_type(self, build_type):
        """Sets the build_type of this Note.


        :param build_type: The build_type of this Note.
        :type build_type: BuildType
        """

        self._build_type = build_type

    @property
    def compliance(self):
        """Gets the compliance of this Note.


        :return: The compliance of this Note.
        :rtype: ComplianceNote
        """
        return self._compliance

    @compliance.setter
    def compliance(self, compliance):
        """Sets the compliance of this Note.


        :param compliance: The compliance of this Note.
        :type compliance: ComplianceNote
        """

        self._compliance = compliance

    @property
    def create_time(self):
        """Gets the create_time of this Note.

        Output only. The time this note was created. This field can be used as a filter in list requests.

        :return: The create_time of this Note.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this Note.

        Output only. The time this note was created. This field can be used as a filter in list requests.

        :param create_time: The create_time of this Note.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def deployable(self):
        """Gets the deployable of this Note.


        :return: The deployable of this Note.
        :rtype: Deployable
        """
        return self._deployable

    @deployable.setter
    def deployable(self, deployable):
        """Sets the deployable of this Note.


        :param deployable: The deployable of this Note.
        :type deployable: Deployable
        """

        self._deployable = deployable

    @property
    def discovery(self):
        """Gets the discovery of this Note.


        :return: The discovery of this Note.
        :rtype: Discovery
        """
        return self._discovery

    @discovery.setter
    def discovery(self, discovery):
        """Sets the discovery of this Note.


        :param discovery: The discovery of this Note.
        :type discovery: Discovery
        """

        self._discovery = discovery

    @property
    def dsse_attestation(self):
        """Gets the dsse_attestation of this Note.


        :return: The dsse_attestation of this Note.
        :rtype: DSSEAttestationNote
        """
        return self._dsse_attestation

    @dsse_attestation.setter
    def dsse_attestation(self, dsse_attestation):
        """Sets the dsse_attestation of this Note.


        :param dsse_attestation: The dsse_attestation of this Note.
        :type dsse_attestation: DSSEAttestationNote
        """

        self._dsse_attestation = dsse_attestation

    @property
    def expiration_time(self):
        """Gets the expiration_time of this Note.

        Time of expiration for this note, null if note does not expire.

        :return: The expiration_time of this Note.
        :rtype: str
        """
        return self._expiration_time

    @expiration_time.setter
    def expiration_time(self, expiration_time):
        """Sets the expiration_time of this Note.

        Time of expiration for this note, null if note does not expire.

        :param expiration_time: The expiration_time of this Note.
        :type expiration_time: str
        """

        self._expiration_time = expiration_time

    @property
    def kind(self):
        """Gets the kind of this Note.

        Output only. This explicitly denotes which kind of note is specified. This field can be used as a filter in list requests.

        :return: The kind of this Note.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this Note.

        Output only. This explicitly denotes which kind of note is specified. This field can be used as a filter in list requests.

        :param kind: The kind of this Note.
        :type kind: str
        """
        allowed_values = ["KIND_UNSPECIFIED", "PACKAGE_VULNERABILITY", "BUILD_DETAILS", "IMAGE_BASIS", "PACKAGE_MANAGER", "DEPLOYABLE", "DISCOVERY", "ATTESTATION_AUTHORITY", "UPGRADE", "COMPLIANCE", "SBOM", "SPDX_PACKAGE", "SPDX_FILE", "SPDX_RELATIONSHIP", "DSSE_ATTESTATION", "VULNERABILITY_ASSESSMENT", "SBOM_REFERENCE"]  # noqa: E501
        if kind not in allowed_values:
            raise ValueError(
                "Invalid value for `kind` ({0}), must be one of {1}"
                .format(kind, allowed_values)
            )

        self._kind = kind

    @property
    def long_description(self):
        """Gets the long_description of this Note.

        A detailed description of this `Note`.

        :return: The long_description of this Note.
        :rtype: str
        """
        return self._long_description

    @long_description.setter
    def long_description(self, long_description):
        """Sets the long_description of this Note.

        A detailed description of this `Note`.

        :param long_description: The long_description of this Note.
        :type long_description: str
        """

        self._long_description = long_description

    @property
    def name(self):
        """Gets the name of this Note.

        The name of the note in the form \"projects/{provider_project_id}/notes/{NOTE_ID}\"

        :return: The name of this Note.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Note.

        The name of the note in the form \"projects/{provider_project_id}/notes/{NOTE_ID}\"

        :param name: The name of this Note.
        :type name: str
        """

        self._name = name

    @property
    def package(self):
        """Gets the package of this Note.


        :return: The package of this Note.
        :rtype: Package
        """
        return self._package

    @package.setter
    def package(self, package):
        """Sets the package of this Note.


        :param package: The package of this Note.
        :type package: Package
        """

        self._package = package

    @property
    def related_url(self):
        """Gets the related_url of this Note.

        URLs associated with this note

        :return: The related_url of this Note.
        :rtype: List[RelatedUrl]
        """
        return self._related_url

    @related_url.setter
    def related_url(self, related_url):
        """Sets the related_url of this Note.

        URLs associated with this note

        :param related_url: The related_url of this Note.
        :type related_url: List[RelatedUrl]
        """

        self._related_url = related_url

    @property
    def sbom(self):
        """Gets the sbom of this Note.


        :return: The sbom of this Note.
        :rtype: DocumentNote
        """
        return self._sbom

    @sbom.setter
    def sbom(self, sbom):
        """Sets the sbom of this Note.


        :param sbom: The sbom of this Note.
        :type sbom: DocumentNote
        """

        self._sbom = sbom

    @property
    def sbom_reference(self):
        """Gets the sbom_reference of this Note.


        :return: The sbom_reference of this Note.
        :rtype: SBOMReferenceNote
        """
        return self._sbom_reference

    @sbom_reference.setter
    def sbom_reference(self, sbom_reference):
        """Sets the sbom_reference of this Note.


        :param sbom_reference: The sbom_reference of this Note.
        :type sbom_reference: SBOMReferenceNote
        """

        self._sbom_reference = sbom_reference

    @property
    def short_description(self):
        """Gets the short_description of this Note.

        A one sentence description of this `Note`.

        :return: The short_description of this Note.
        :rtype: str
        """
        return self._short_description

    @short_description.setter
    def short_description(self, short_description):
        """Sets the short_description of this Note.

        A one sentence description of this `Note`.

        :param short_description: The short_description of this Note.
        :type short_description: str
        """

        self._short_description = short_description

    @property
    def spdx_file(self):
        """Gets the spdx_file of this Note.


        :return: The spdx_file of this Note.
        :rtype: FileNote
        """
        return self._spdx_file

    @spdx_file.setter
    def spdx_file(self, spdx_file):
        """Sets the spdx_file of this Note.


        :param spdx_file: The spdx_file of this Note.
        :type spdx_file: FileNote
        """

        self._spdx_file = spdx_file

    @property
    def spdx_package(self):
        """Gets the spdx_package of this Note.


        :return: The spdx_package of this Note.
        :rtype: PackageInfoNote
        """
        return self._spdx_package

    @spdx_package.setter
    def spdx_package(self, spdx_package):
        """Sets the spdx_package of this Note.


        :param spdx_package: The spdx_package of this Note.
        :type spdx_package: PackageInfoNote
        """

        self._spdx_package = spdx_package

    @property
    def spdx_relationship(self):
        """Gets the spdx_relationship of this Note.


        :return: The spdx_relationship of this Note.
        :rtype: RelationshipNote
        """
        return self._spdx_relationship

    @spdx_relationship.setter
    def spdx_relationship(self, spdx_relationship):
        """Sets the spdx_relationship of this Note.


        :param spdx_relationship: The spdx_relationship of this Note.
        :type spdx_relationship: RelationshipNote
        """

        self._spdx_relationship = spdx_relationship

    @property
    def update_time(self):
        """Gets the update_time of this Note.

        Output only. The time this note was last updated. This field can be used as a filter in list requests.

        :return: The update_time of this Note.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this Note.

        Output only. The time this note was last updated. This field can be used as a filter in list requests.

        :param update_time: The update_time of this Note.
        :type update_time: str
        """

        self._update_time = update_time

    @property
    def upgrade(self):
        """Gets the upgrade of this Note.


        :return: The upgrade of this Note.
        :rtype: UpgradeNote
        """
        return self._upgrade

    @upgrade.setter
    def upgrade(self, upgrade):
        """Sets the upgrade of this Note.


        :param upgrade: The upgrade of this Note.
        :type upgrade: UpgradeNote
        """

        self._upgrade = upgrade

    @property
    def vulnerability_assessment(self):
        """Gets the vulnerability_assessment of this Note.


        :return: The vulnerability_assessment of this Note.
        :rtype: VulnerabilityAssessmentNote
        """
        return self._vulnerability_assessment

    @vulnerability_assessment.setter
    def vulnerability_assessment(self, vulnerability_assessment):
        """Sets the vulnerability_assessment of this Note.


        :param vulnerability_assessment: The vulnerability_assessment of this Note.
        :type vulnerability_assessment: VulnerabilityAssessmentNote
        """

        self._vulnerability_assessment = vulnerability_assessment

    @property
    def vulnerability_type(self):
        """Gets the vulnerability_type of this Note.


        :return: The vulnerability_type of this Note.
        :rtype: VulnerabilityType
        """
        return self._vulnerability_type

    @vulnerability_type.setter
    def vulnerability_type(self, vulnerability_type):
        """Sets the vulnerability_type of this Note.


        :param vulnerability_type: The vulnerability_type of this Note.
        :type vulnerability_type: VulnerabilityType
        """

        self._vulnerability_type = vulnerability_type
