# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Justification(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, details: str=None, justification_type: str=None):
        """Justification - a model defined in OpenAPI

        :param details: The details of this Justification.
        :param justification_type: The justification_type of this Justification.
        """
        self.openapi_types = {
            'details': str,
            'justification_type': str
        }

        self.attribute_map = {
            'details': 'details',
            'justification_type': 'justificationType'
        }

        self._details = details
        self._justification_type = justification_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Justification':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Justification of this Justification.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def details(self):
        """Gets the details of this Justification.

        Additional details on why this justification was chosen.

        :return: The details of this Justification.
        :rtype: str
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this Justification.

        Additional details on why this justification was chosen.

        :param details: The details of this Justification.
        :type details: str
        """

        self._details = details

    @property
    def justification_type(self):
        """Gets the justification_type of this Justification.

        The justification type for this vulnerability.

        :return: The justification_type of this Justification.
        :rtype: str
        """
        return self._justification_type

    @justification_type.setter
    def justification_type(self, justification_type):
        """Sets the justification_type of this Justification.

        The justification type for this vulnerability.

        :param justification_type: The justification_type of this Justification.
        :type justification_type: str
        """
        allowed_values = ["JUSTIFICATION_TYPE_UNSPECIFIED", "COMPONENT_NOT_PRESENT", "VULNERABLE_CODE_NOT_PRESENT", "VULNERABLE_CODE_NOT_IN_EXECUTE_PATH", "VULNERABLE_CODE_CANNOT_BE_CONTROLLED_BY_ADVERSARY", "INLINE_MITIGATIONS_ALREADY_EXIST"]  # noqa: E501
        if justification_type not in allowed_values:
            raise ValueError(
                "Invalid value for `justification_type` ({0}), must be one of {1}"
                .format(justification_type, allowed_values)
            )

        self._justification_type = justification_type
