# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CisBenchmark(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, profile_level: int=None, severity: str=None):
        """CisBenchmark - a model defined in OpenAPI

        :param profile_level: The profile_level of this CisBenchmark.
        :param severity: The severity of this CisBenchmark.
        """
        self.openapi_types = {
            'profile_level': int,
            'severity': str
        }

        self.attribute_map = {
            'profile_level': 'profileLevel',
            'severity': 'severity'
        }

        self._profile_level = profile_level
        self._severity = severity

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CisBenchmark':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CisBenchmark of this CisBenchmark.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def profile_level(self):
        """Gets the profile_level of this CisBenchmark.

        The profile level of this CIS benchmark check.

        :return: The profile_level of this CisBenchmark.
        :rtype: int
        """
        return self._profile_level

    @profile_level.setter
    def profile_level(self, profile_level):
        """Sets the profile_level of this CisBenchmark.

        The profile level of this CIS benchmark check.

        :param profile_level: The profile_level of this CisBenchmark.
        :type profile_level: int
        """

        self._profile_level = profile_level

    @property
    def severity(self):
        """Gets the severity of this CisBenchmark.

        The severity level of this CIS benchmark check.

        :return: The severity of this CisBenchmark.
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this CisBenchmark.

        The severity level of this CIS benchmark check.

        :param severity: The severity of this CisBenchmark.
        :type severity: str
        """
        allowed_values = ["SEVERITY_UNSPECIFIED", "MINIMAL", "LOW", "MEDIUM", "HIGH", "CRITICAL"]  # noqa: E501
        if severity not in allowed_values:
            raise ValueError(
                "Invalid value for `severity` ({0}), must be one of {1}"
                .format(severity, allowed_values)
            )

        self._severity = severity
