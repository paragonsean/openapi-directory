# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, branch_name: str=None, commit_sha: str=None, dir: str=None, invert_regex: bool=None, project_id: str=None, repo_name: str=None, substitutions: Dict[str, str]=None, tag_name: str=None):
        """ContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource - a model defined in OpenAPI

        :param branch_name: The branch_name of this ContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource.
        :param commit_sha: The commit_sha of this ContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource.
        :param dir: The dir of this ContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource.
        :param invert_regex: The invert_regex of this ContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource.
        :param project_id: The project_id of this ContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource.
        :param repo_name: The repo_name of this ContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource.
        :param substitutions: The substitutions of this ContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource.
        :param tag_name: The tag_name of this ContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource.
        """
        self.openapi_types = {
            'branch_name': str,
            'commit_sha': str,
            'dir': str,
            'invert_regex': bool,
            'project_id': str,
            'repo_name': str,
            'substitutions': Dict[str, str],
            'tag_name': str
        }

        self.attribute_map = {
            'branch_name': 'branchName',
            'commit_sha': 'commitSha',
            'dir': 'dir',
            'invert_regex': 'invertRegex',
            'project_id': 'projectId',
            'repo_name': 'repoName',
            'substitutions': 'substitutions',
            'tag_name': 'tagName'
        }

        self._branch_name = branch_name
        self._commit_sha = commit_sha
        self._dir = dir
        self._invert_regex = invert_regex
        self._project_id = project_id
        self._repo_name = repo_name
        self._substitutions = substitutions
        self._tag_name = tag_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource of this ContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def branch_name(self):
        """Gets the branch_name of this ContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource.

        Regex matching branches to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax

        :return: The branch_name of this ContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource.
        :rtype: str
        """
        return self._branch_name

    @branch_name.setter
    def branch_name(self, branch_name):
        """Sets the branch_name of this ContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource.

        Regex matching branches to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax

        :param branch_name: The branch_name of this ContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource.
        :type branch_name: str
        """

        self._branch_name = branch_name

    @property
    def commit_sha(self):
        """Gets the commit_sha of this ContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource.

        Explicit commit SHA to build.

        :return: The commit_sha of this ContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource.
        :rtype: str
        """
        return self._commit_sha

    @commit_sha.setter
    def commit_sha(self, commit_sha):
        """Sets the commit_sha of this ContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource.

        Explicit commit SHA to build.

        :param commit_sha: The commit_sha of this ContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource.
        :type commit_sha: str
        """

        self._commit_sha = commit_sha

    @property
    def dir(self):
        """Gets the dir of this ContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource.

        Directory, relative to the source root, in which to run the build. This must be a relative path. If a step's `dir` is specified and is an absolute path, this value is ignored for that step's execution.

        :return: The dir of this ContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource.
        :rtype: str
        """
        return self._dir

    @dir.setter
    def dir(self, dir):
        """Sets the dir of this ContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource.

        Directory, relative to the source root, in which to run the build. This must be a relative path. If a step's `dir` is specified and is an absolute path, this value is ignored for that step's execution.

        :param dir: The dir of this ContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource.
        :type dir: str
        """

        self._dir = dir

    @property
    def invert_regex(self):
        """Gets the invert_regex of this ContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource.

        Only trigger a build if the revision regex does NOT match the revision regex.

        :return: The invert_regex of this ContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource.
        :rtype: bool
        """
        return self._invert_regex

    @invert_regex.setter
    def invert_regex(self, invert_regex):
        """Sets the invert_regex of this ContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource.

        Only trigger a build if the revision regex does NOT match the revision regex.

        :param invert_regex: The invert_regex of this ContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource.
        :type invert_regex: bool
        """

        self._invert_regex = invert_regex

    @property
    def project_id(self):
        """Gets the project_id of this ContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource.

        ID of the project that owns the Cloud Source Repository. If omitted, the project ID requesting the build is assumed.

        :return: The project_id of this ContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource.
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this ContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource.

        ID of the project that owns the Cloud Source Repository. If omitted, the project ID requesting the build is assumed.

        :param project_id: The project_id of this ContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource.
        :type project_id: str
        """

        self._project_id = project_id

    @property
    def repo_name(self):
        """Gets the repo_name of this ContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource.

        Name of the Cloud Source Repository.

        :return: The repo_name of this ContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource.
        :rtype: str
        """
        return self._repo_name

    @repo_name.setter
    def repo_name(self, repo_name):
        """Sets the repo_name of this ContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource.

        Name of the Cloud Source Repository.

        :param repo_name: The repo_name of this ContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource.
        :type repo_name: str
        """

        self._repo_name = repo_name

    @property
    def substitutions(self):
        """Gets the substitutions of this ContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource.

        Substitutions to use in a triggered build. Should only be used with RunBuildTrigger

        :return: The substitutions of this ContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource.
        :rtype: Dict[str, str]
        """
        return self._substitutions

    @substitutions.setter
    def substitutions(self, substitutions):
        """Sets the substitutions of this ContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource.

        Substitutions to use in a triggered build. Should only be used with RunBuildTrigger

        :param substitutions: The substitutions of this ContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource.
        :type substitutions: Dict[str, str]
        """

        self._substitutions = substitutions

    @property
    def tag_name(self):
        """Gets the tag_name of this ContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource.

        Regex matching tags to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax

        :return: The tag_name of this ContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource.
        :rtype: str
        """
        return self._tag_name

    @tag_name.setter
    def tag_name(self, tag_name):
        """Sets the tag_name of this ContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource.

        Regex matching tags to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax

        :param tag_name: The tag_name of this ContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource.
        :type tag_name: str
        """

        self._tag_name = tag_name
