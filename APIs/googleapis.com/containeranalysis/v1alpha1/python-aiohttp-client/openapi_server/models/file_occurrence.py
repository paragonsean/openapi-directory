# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.license import License
from openapi_server import util


class FileOccurrence(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attributions: List[str]=None, comment: str=None, contributors: List[str]=None, copyright: str=None, files_license_info: List[str]=None, id: str=None, license_concluded: License=None, notice: str=None):
        """FileOccurrence - a model defined in OpenAPI

        :param attributions: The attributions of this FileOccurrence.
        :param comment: The comment of this FileOccurrence.
        :param contributors: The contributors of this FileOccurrence.
        :param copyright: The copyright of this FileOccurrence.
        :param files_license_info: The files_license_info of this FileOccurrence.
        :param id: The id of this FileOccurrence.
        :param license_concluded: The license_concluded of this FileOccurrence.
        :param notice: The notice of this FileOccurrence.
        """
        self.openapi_types = {
            'attributions': List[str],
            'comment': str,
            'contributors': List[str],
            'copyright': str,
            'files_license_info': List[str],
            'id': str,
            'license_concluded': License,
            'notice': str
        }

        self.attribute_map = {
            'attributions': 'attributions',
            'comment': 'comment',
            'contributors': 'contributors',
            'copyright': 'copyright',
            'files_license_info': 'filesLicenseInfo',
            'id': 'id',
            'license_concluded': 'licenseConcluded',
            'notice': 'notice'
        }

        self._attributions = attributions
        self._comment = comment
        self._contributors = contributors
        self._copyright = copyright
        self._files_license_info = files_license_info
        self._id = id
        self._license_concluded = license_concluded
        self._notice = notice

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FileOccurrence':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FileOccurrence of this FileOccurrence.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attributions(self):
        """Gets the attributions of this FileOccurrence.

        This field provides a place for the SPDX data creator to record, at the file level, acknowledgements that may be needed to be communicated in some contexts

        :return: The attributions of this FileOccurrence.
        :rtype: List[str]
        """
        return self._attributions

    @attributions.setter
    def attributions(self, attributions):
        """Sets the attributions of this FileOccurrence.

        This field provides a place for the SPDX data creator to record, at the file level, acknowledgements that may be needed to be communicated in some contexts

        :param attributions: The attributions of this FileOccurrence.
        :type attributions: List[str]
        """

        self._attributions = attributions

    @property
    def comment(self):
        """Gets the comment of this FileOccurrence.

        This field provides a place for the SPDX file creator to record any general comments about the file

        :return: The comment of this FileOccurrence.
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this FileOccurrence.

        This field provides a place for the SPDX file creator to record any general comments about the file

        :param comment: The comment of this FileOccurrence.
        :type comment: str
        """

        self._comment = comment

    @property
    def contributors(self):
        """Gets the contributors of this FileOccurrence.

        This field provides a place for the SPDX file creator to record file contributors

        :return: The contributors of this FileOccurrence.
        :rtype: List[str]
        """
        return self._contributors

    @contributors.setter
    def contributors(self, contributors):
        """Sets the contributors of this FileOccurrence.

        This field provides a place for the SPDX file creator to record file contributors

        :param contributors: The contributors of this FileOccurrence.
        :type contributors: List[str]
        """

        self._contributors = contributors

    @property
    def copyright(self):
        """Gets the copyright of this FileOccurrence.

        Identify the copyright holder of the file, as well as any dates present

        :return: The copyright of this FileOccurrence.
        :rtype: str
        """
        return self._copyright

    @copyright.setter
    def copyright(self, copyright):
        """Sets the copyright of this FileOccurrence.

        Identify the copyright holder of the file, as well as any dates present

        :param copyright: The copyright of this FileOccurrence.
        :type copyright: str
        """

        self._copyright = copyright

    @property
    def files_license_info(self):
        """Gets the files_license_info of this FileOccurrence.

        This field contains the license information actually found in the file, if any

        :return: The files_license_info of this FileOccurrence.
        :rtype: List[str]
        """
        return self._files_license_info

    @files_license_info.setter
    def files_license_info(self, files_license_info):
        """Sets the files_license_info of this FileOccurrence.

        This field contains the license information actually found in the file, if any

        :param files_license_info: The files_license_info of this FileOccurrence.
        :type files_license_info: List[str]
        """

        self._files_license_info = files_license_info

    @property
    def id(self):
        """Gets the id of this FileOccurrence.

        Uniquely identify any element in an SPDX document which may be referenced by other elements

        :return: The id of this FileOccurrence.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this FileOccurrence.

        Uniquely identify any element in an SPDX document which may be referenced by other elements

        :param id: The id of this FileOccurrence.
        :type id: str
        """

        self._id = id

    @property
    def license_concluded(self):
        """Gets the license_concluded of this FileOccurrence.


        :return: The license_concluded of this FileOccurrence.
        :rtype: License
        """
        return self._license_concluded

    @license_concluded.setter
    def license_concluded(self, license_concluded):
        """Sets the license_concluded of this FileOccurrence.


        :param license_concluded: The license_concluded of this FileOccurrence.
        :type license_concluded: License
        """

        self._license_concluded = license_concluded

    @property
    def notice(self):
        """Gets the notice of this FileOccurrence.

        This field provides a place for the SPDX file creator to record license notices or other such related notices found in the file

        :return: The notice of this FileOccurrence.
        :rtype: str
        """
        return self._notice

    @notice.setter
    def notice(self, notice):
        """Sets the notice of this FileOccurrence.

        This field provides a place for the SPDX file creator to record license notices or other such related notices found in the file

        :param notice: The notice of this FileOccurrence.
        :type notice: str
        """

        self._notice = notice
