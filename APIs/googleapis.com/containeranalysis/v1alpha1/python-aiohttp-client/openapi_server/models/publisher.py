# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Publisher(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, issuing_authority: str=None, name: str=None, publisher_namespace: str=None):
        """Publisher - a model defined in OpenAPI

        :param issuing_authority: The issuing_authority of this Publisher.
        :param name: The name of this Publisher.
        :param publisher_namespace: The publisher_namespace of this Publisher.
        """
        self.openapi_types = {
            'issuing_authority': str,
            'name': str,
            'publisher_namespace': str
        }

        self.attribute_map = {
            'issuing_authority': 'issuingAuthority',
            'name': 'name',
            'publisher_namespace': 'publisherNamespace'
        }

        self._issuing_authority = issuing_authority
        self._name = name
        self._publisher_namespace = publisher_namespace

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Publisher':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Publisher of this Publisher.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def issuing_authority(self):
        """Gets the issuing_authority of this Publisher.

        Provides information about the authority of the issuing party to release the document, in particular, the party's constituency and responsibilities or other obligations.

        :return: The issuing_authority of this Publisher.
        :rtype: str
        """
        return self._issuing_authority

    @issuing_authority.setter
    def issuing_authority(self, issuing_authority):
        """Sets the issuing_authority of this Publisher.

        Provides information about the authority of the issuing party to release the document, in particular, the party's constituency and responsibilities or other obligations.

        :param issuing_authority: The issuing_authority of this Publisher.
        :type issuing_authority: str
        """

        self._issuing_authority = issuing_authority

    @property
    def name(self):
        """Gets the name of this Publisher.

        Name of the publisher. Examples: 'Google', 'Google Cloud Platform'.

        :return: The name of this Publisher.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Publisher.

        Name of the publisher. Examples: 'Google', 'Google Cloud Platform'.

        :param name: The name of this Publisher.
        :type name: str
        """

        self._name = name

    @property
    def publisher_namespace(self):
        """Gets the publisher_namespace of this Publisher.

        The context or namespace. Contains a URL which is under control of the issuing party and can be used as a globally unique identifier for that issuing party. Example: https://csaf.io

        :return: The publisher_namespace of this Publisher.
        :rtype: str
        """
        return self._publisher_namespace

    @publisher_namespace.setter
    def publisher_namespace(self, publisher_namespace):
        """Sets the publisher_namespace of this Publisher.

        The context or namespace. Contains a URL which is under control of the issuing party and can be used as a globally unique identifier for that issuing party. Example: https://csaf.io

        :param publisher_namespace: The publisher_namespace of this Publisher.
        :type publisher_namespace: str
        """

        self._publisher_namespace = publisher_namespace
