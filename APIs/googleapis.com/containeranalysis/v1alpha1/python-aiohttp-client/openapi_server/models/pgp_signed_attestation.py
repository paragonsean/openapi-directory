# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PgpSignedAttestation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, content_type: str=None, pgp_key_id: str=None, signature: str=None):
        """PgpSignedAttestation - a model defined in OpenAPI

        :param content_type: The content_type of this PgpSignedAttestation.
        :param pgp_key_id: The pgp_key_id of this PgpSignedAttestation.
        :param signature: The signature of this PgpSignedAttestation.
        """
        self.openapi_types = {
            'content_type': str,
            'pgp_key_id': str,
            'signature': str
        }

        self.attribute_map = {
            'content_type': 'contentType',
            'pgp_key_id': 'pgpKeyId',
            'signature': 'signature'
        }

        self._content_type = content_type
        self._pgp_key_id = pgp_key_id
        self._signature = signature

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PgpSignedAttestation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PgpSignedAttestation of this PgpSignedAttestation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def content_type(self):
        """Gets the content_type of this PgpSignedAttestation.

        Type (for example schema) of the attestation payload that was signed. The verifier must ensure that the provided type is one that the verifier supports, and that the attestation payload is a valid instantiation of that type (for example by validating a JSON schema).

        :return: The content_type of this PgpSignedAttestation.
        :rtype: str
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """Sets the content_type of this PgpSignedAttestation.

        Type (for example schema) of the attestation payload that was signed. The verifier must ensure that the provided type is one that the verifier supports, and that the attestation payload is a valid instantiation of that type (for example by validating a JSON schema).

        :param content_type: The content_type of this PgpSignedAttestation.
        :type content_type: str
        """
        allowed_values = ["CONTENT_TYPE_UNSPECIFIED", "SIMPLE_SIGNING_JSON"]  # noqa: E501
        if content_type not in allowed_values:
            raise ValueError(
                "Invalid value for `content_type` ({0}), must be one of {1}"
                .format(content_type, allowed_values)
            )

        self._content_type = content_type

    @property
    def pgp_key_id(self):
        """Gets the pgp_key_id of this PgpSignedAttestation.

        The cryptographic fingerprint of the key used to generate the signature, as output by, e.g. `gpg --list-keys`. This should be the version 4, full 160-bit fingerprint, expressed as a 40 character hexadecimal string. See https://tools.ietf.org/html/rfc4880#section-12.2 for details. Implementations may choose to acknowledge \"LONG\", \"SHORT\", or other abbreviated key IDs, but only the full fingerprint is guaranteed to work. In gpg, the full fingerprint can be retrieved from the `fpr` field returned when calling --list-keys with --with-colons. For example: ``` gpg --with-colons --with-fingerprint --force-v4-certs \\ --list-keys attester@example.com tru::1:1513631572:0:3:1:5 pub:...... fpr:::::::::24FF6481B76AC91E66A00AC657A93A81EF3AE6FB: ``` Above, the fingerprint is `24FF6481B76AC91E66A00AC657A93A81EF3AE6FB`.

        :return: The pgp_key_id of this PgpSignedAttestation.
        :rtype: str
        """
        return self._pgp_key_id

    @pgp_key_id.setter
    def pgp_key_id(self, pgp_key_id):
        """Sets the pgp_key_id of this PgpSignedAttestation.

        The cryptographic fingerprint of the key used to generate the signature, as output by, e.g. `gpg --list-keys`. This should be the version 4, full 160-bit fingerprint, expressed as a 40 character hexadecimal string. See https://tools.ietf.org/html/rfc4880#section-12.2 for details. Implementations may choose to acknowledge \"LONG\", \"SHORT\", or other abbreviated key IDs, but only the full fingerprint is guaranteed to work. In gpg, the full fingerprint can be retrieved from the `fpr` field returned when calling --list-keys with --with-colons. For example: ``` gpg --with-colons --with-fingerprint --force-v4-certs \\ --list-keys attester@example.com tru::1:1513631572:0:3:1:5 pub:...... fpr:::::::::24FF6481B76AC91E66A00AC657A93A81EF3AE6FB: ``` Above, the fingerprint is `24FF6481B76AC91E66A00AC657A93A81EF3AE6FB`.

        :param pgp_key_id: The pgp_key_id of this PgpSignedAttestation.
        :type pgp_key_id: str
        """

        self._pgp_key_id = pgp_key_id

    @property
    def signature(self):
        """Gets the signature of this PgpSignedAttestation.

        The raw content of the signature, as output by GNU Privacy Guard (GPG) or equivalent. Since this message only supports attached signatures, the payload that was signed must be attached. While the signature format supported is dependent on the verification implementation, currently only ASCII-armored (`--armor` to gpg), non-clearsigned (`--sign` rather than `--clearsign` to gpg) are supported. Concretely, `gpg --sign --armor --output=signature.gpg payload.json` will create the signature content expected in this field in `signature.gpg` for the `payload.json` attestation payload.

        :return: The signature of this PgpSignedAttestation.
        :rtype: str
        """
        return self._signature

    @signature.setter
    def signature(self, signature):
        """Sets the signature of this PgpSignedAttestation.

        The raw content of the signature, as output by GNU Privacy Guard (GPG) or equivalent. Since this message only supports attached signatures, the payload that was signed must be attached. While the signature format supported is dependent on the verification implementation, currently only ASCII-armored (`--armor` to gpg), non-clearsigned (`--sign` rather than `--clearsign` to gpg) are supported. Concretely, `gpg --sign --armor --output=signature.gpg payload.json` will create the signature content expected in this field in `signature.gpg` for the `payload.json` attestation payload.

        :param signature: The signature of this PgpSignedAttestation.
        :type signature: str
        """

        self._signature = signature
