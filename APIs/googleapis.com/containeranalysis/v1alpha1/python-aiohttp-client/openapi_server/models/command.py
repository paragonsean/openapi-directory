# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Command(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, args: List[str]=None, dir: str=None, env: List[str]=None, id: str=None, name: str=None, wait_for: List[str]=None):
        """Command - a model defined in OpenAPI

        :param args: The args of this Command.
        :param dir: The dir of this Command.
        :param env: The env of this Command.
        :param id: The id of this Command.
        :param name: The name of this Command.
        :param wait_for: The wait_for of this Command.
        """
        self.openapi_types = {
            'args': List[str],
            'dir': str,
            'env': List[str],
            'id': str,
            'name': str,
            'wait_for': List[str]
        }

        self.attribute_map = {
            'args': 'args',
            'dir': 'dir',
            'env': 'env',
            'id': 'id',
            'name': 'name',
            'wait_for': 'waitFor'
        }

        self._args = args
        self._dir = dir
        self._env = env
        self._id = id
        self._name = name
        self._wait_for = wait_for

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Command':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Command of this Command.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def args(self):
        """Gets the args of this Command.

        Command-line arguments used when executing this Command.

        :return: The args of this Command.
        :rtype: List[str]
        """
        return self._args

    @args.setter
    def args(self, args):
        """Sets the args of this Command.

        Command-line arguments used when executing this Command.

        :param args: The args of this Command.
        :type args: List[str]
        """

        self._args = args

    @property
    def dir(self):
        """Gets the dir of this Command.

        Working directory (relative to project source root) used when running this Command.

        :return: The dir of this Command.
        :rtype: str
        """
        return self._dir

    @dir.setter
    def dir(self, dir):
        """Sets the dir of this Command.

        Working directory (relative to project source root) used when running this Command.

        :param dir: The dir of this Command.
        :type dir: str
        """

        self._dir = dir

    @property
    def env(self):
        """Gets the env of this Command.

        Environment variables set before running this Command.

        :return: The env of this Command.
        :rtype: List[str]
        """
        return self._env

    @env.setter
    def env(self, env):
        """Sets the env of this Command.

        Environment variables set before running this Command.

        :param env: The env of this Command.
        :type env: List[str]
        """

        self._env = env

    @property
    def id(self):
        """Gets the id of this Command.

        Optional unique identifier for this Command, used in wait_for to reference this Command as a dependency.

        :return: The id of this Command.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Command.

        Optional unique identifier for this Command, used in wait_for to reference this Command as a dependency.

        :param id: The id of this Command.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Command.

        Name of the command, as presented on the command line, or if the command is packaged as a Docker container, as presented to `docker pull`.

        :return: The name of this Command.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Command.

        Name of the command, as presented on the command line, or if the command is packaged as a Docker container, as presented to `docker pull`.

        :param name: The name of this Command.
        :type name: str
        """

        self._name = name

    @property
    def wait_for(self):
        """Gets the wait_for of this Command.

        The ID(s) of the Command(s) that this Command depends on.

        :return: The wait_for of this Command.
        :rtype: List[str]
        """
        return self._wait_for

    @wait_for.setter
    def wait_for(self, wait_for):
        """Sets the wait_for of this Command.

        The ID(s) of the Command(s) that this Command depends on.

        :param wait_for: The wait_for of this Command.
        :type wait_for: List[str]
        """

        self._wait_for = wait_for
