# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NonCompliantFile(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, display_command: str=None, path: str=None, reason: str=None):
        """NonCompliantFile - a model defined in OpenAPI

        :param display_command: The display_command of this NonCompliantFile.
        :param path: The path of this NonCompliantFile.
        :param reason: The reason of this NonCompliantFile.
        """
        self.openapi_types = {
            'display_command': str,
            'path': str,
            'reason': str
        }

        self.attribute_map = {
            'display_command': 'displayCommand',
            'path': 'path',
            'reason': 'reason'
        }

        self._display_command = display_command
        self._path = path
        self._reason = reason

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NonCompliantFile':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NonCompliantFile of this NonCompliantFile.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def display_command(self):
        """Gets the display_command of this NonCompliantFile.

        Command to display the non-compliant files.

        :return: The display_command of this NonCompliantFile.
        :rtype: str
        """
        return self._display_command

    @display_command.setter
    def display_command(self, display_command):
        """Sets the display_command of this NonCompliantFile.

        Command to display the non-compliant files.

        :param display_command: The display_command of this NonCompliantFile.
        :type display_command: str
        """

        self._display_command = display_command

    @property
    def path(self):
        """Gets the path of this NonCompliantFile.

        display_command is a single command that can be used to display a list of non compliant files. When there is no such command, we can also iterate a list of non compliant file using 'path'. Empty if `display_command` is set.

        :return: The path of this NonCompliantFile.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this NonCompliantFile.

        display_command is a single command that can be used to display a list of non compliant files. When there is no such command, we can also iterate a list of non compliant file using 'path'. Empty if `display_command` is set.

        :param path: The path of this NonCompliantFile.
        :type path: str
        """

        self._path = path

    @property
    def reason(self):
        """Gets the reason of this NonCompliantFile.

        Explains why a file is non compliant for a CIS check.

        :return: The reason of this NonCompliantFile.
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this NonCompliantFile.

        Explains why a file is non compliant for a CIS check.

        :param reason: The reason of this NonCompliantFile.
        :type reason: str
        """

        self._reason = reason
