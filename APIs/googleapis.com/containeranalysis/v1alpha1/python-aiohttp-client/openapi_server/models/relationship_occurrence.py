# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RelationshipOccurrence(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, comment: str=None, source: str=None, target: str=None, type: str=None):
        """RelationshipOccurrence - a model defined in OpenAPI

        :param comment: The comment of this RelationshipOccurrence.
        :param source: The source of this RelationshipOccurrence.
        :param target: The target of this RelationshipOccurrence.
        :param type: The type of this RelationshipOccurrence.
        """
        self.openapi_types = {
            'comment': str,
            'source': str,
            'target': str,
            'type': str
        }

        self.attribute_map = {
            'comment': 'comment',
            'source': 'source',
            'target': 'target',
            'type': 'type'
        }

        self._comment = comment
        self._source = source
        self._target = target
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RelationshipOccurrence':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RelationshipOccurrence of this RelationshipOccurrence.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def comment(self):
        """Gets the comment of this RelationshipOccurrence.

        A place for the SPDX file creator to record any general comments about the relationship

        :return: The comment of this RelationshipOccurrence.
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this RelationshipOccurrence.

        A place for the SPDX file creator to record any general comments about the relationship

        :param comment: The comment of this RelationshipOccurrence.
        :type comment: str
        """

        self._comment = comment

    @property
    def source(self):
        """Gets the source of this RelationshipOccurrence.

        Also referred to as SPDXRef-A The source SPDX element (file, package, etc)

        :return: The source of this RelationshipOccurrence.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this RelationshipOccurrence.

        Also referred to as SPDXRef-A The source SPDX element (file, package, etc)

        :param source: The source of this RelationshipOccurrence.
        :type source: str
        """

        self._source = source

    @property
    def target(self):
        """Gets the target of this RelationshipOccurrence.

        Also referred to as SPDXRef-B The target SPDC element (file, package, etc) In cases where there are \"known unknowns\", the use of the keyword NOASSERTION can be used The keywords NONE can be used to indicate that an SPDX element (package/file/snippet) has no other elements connected by some relationship to it

        :return: The target of this RelationshipOccurrence.
        :rtype: str
        """
        return self._target

    @target.setter
    def target(self, target):
        """Sets the target of this RelationshipOccurrence.

        Also referred to as SPDXRef-B The target SPDC element (file, package, etc) In cases where there are \"known unknowns\", the use of the keyword NOASSERTION can be used The keywords NONE can be used to indicate that an SPDX element (package/file/snippet) has no other elements connected by some relationship to it

        :param target: The target of this RelationshipOccurrence.
        :type target: str
        """

        self._target = target

    @property
    def type(self):
        """Gets the type of this RelationshipOccurrence.

        Output only. The type of relationship between the source and target SPDX elements

        :return: The type of this RelationshipOccurrence.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this RelationshipOccurrence.

        Output only. The type of relationship between the source and target SPDX elements

        :param type: The type of this RelationshipOccurrence.
        :type type: str
        """
        allowed_values = ["RELATIONSHIP_TYPE_UNSPECIFIED", "DESCRIBES", "DESCRIBED_BY", "CONTAINS", "CONTAINED_BY", "DEPENDS_ON", "DEPENDENCY_OF", "DEPENDENCY_MANIFEST_OF", "BUILD_DEPENDENCY_OF", "DEV_DEPENDENCY_OF", "OPTIONAL_DEPENDENCY_OF", "PROVIDED_DEPENDENCY_OF", "TEST_DEPENDENCY_OF", "RUNTIME_DEPENDENCY_OF", "EXAMPLE_OF", "GENERATES", "GENERATED_FROM", "ANCESTOR_OF", "DESCENDANT_OF", "VARIANT_OF", "DISTRIBUTION_ARTIFACT", "PATCH_FOR", "PATCH_APPLIED", "COPY_OF", "FILE_ADDED", "FILE_DELETED", "FILE_MODIFIED", "EXPANDED_FROM_ARCHIVE", "DYNAMIC_LINK", "STATIC_LINK", "DATA_FILE_OF", "TEST_CASE_OF", "BUILD_TOOL_OF", "DEV_TOOL_OF", "TEST_OF", "TEST_TOOL_OF", "DOCUMENTATION_OF", "OPTIONAL_COMPONENT_OF", "METAFILE_OF", "PACKAGE_OF", "AMENDS", "PREREQUISITE_FOR", "HAS_PREREQUISITE", "OTHER"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
