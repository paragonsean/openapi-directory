# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SlsaRecipe(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, arguments: Dict[str, object]=None, defined_in_material: str=None, entry_point: str=None, environment: Dict[str, object]=None, type: str=None):
        """SlsaRecipe - a model defined in OpenAPI

        :param arguments: The arguments of this SlsaRecipe.
        :param defined_in_material: The defined_in_material of this SlsaRecipe.
        :param entry_point: The entry_point of this SlsaRecipe.
        :param environment: The environment of this SlsaRecipe.
        :param type: The type of this SlsaRecipe.
        """
        self.openapi_types = {
            'arguments': Dict[str, object],
            'defined_in_material': str,
            'entry_point': str,
            'environment': Dict[str, object],
            'type': str
        }

        self.attribute_map = {
            'arguments': 'arguments',
            'defined_in_material': 'definedInMaterial',
            'entry_point': 'entryPoint',
            'environment': 'environment',
            'type': 'type'
        }

        self._arguments = arguments
        self._defined_in_material = defined_in_material
        self._entry_point = entry_point
        self._environment = environment
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SlsaRecipe':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SlsaRecipe of this SlsaRecipe.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def arguments(self):
        """Gets the arguments of this SlsaRecipe.

        Collection of all external inputs that influenced the build on top of recipe.definedInMaterial and recipe.entryPoint. For example, if the recipe type were \"make\", then this might be the flags passed to make aside from the target, which is captured in recipe.entryPoint. Depending on the recipe Type, the structure may be different.

        :return: The arguments of this SlsaRecipe.
        :rtype: Dict[str, object]
        """
        return self._arguments

    @arguments.setter
    def arguments(self, arguments):
        """Sets the arguments of this SlsaRecipe.

        Collection of all external inputs that influenced the build on top of recipe.definedInMaterial and recipe.entryPoint. For example, if the recipe type were \"make\", then this might be the flags passed to make aside from the target, which is captured in recipe.entryPoint. Depending on the recipe Type, the structure may be different.

        :param arguments: The arguments of this SlsaRecipe.
        :type arguments: Dict[str, object]
        """

        self._arguments = arguments

    @property
    def defined_in_material(self):
        """Gets the defined_in_material of this SlsaRecipe.

        Index in materials containing the recipe steps that are not implied by recipe.type. For example, if the recipe type were \"make\", then this would point to the source containing the Makefile, not the make program itself. Set to -1 if the recipe doesn't come from a material, as zero is default unset value for int64.

        :return: The defined_in_material of this SlsaRecipe.
        :rtype: str
        """
        return self._defined_in_material

    @defined_in_material.setter
    def defined_in_material(self, defined_in_material):
        """Sets the defined_in_material of this SlsaRecipe.

        Index in materials containing the recipe steps that are not implied by recipe.type. For example, if the recipe type were \"make\", then this would point to the source containing the Makefile, not the make program itself. Set to -1 if the recipe doesn't come from a material, as zero is default unset value for int64.

        :param defined_in_material: The defined_in_material of this SlsaRecipe.
        :type defined_in_material: str
        """

        self._defined_in_material = defined_in_material

    @property
    def entry_point(self):
        """Gets the entry_point of this SlsaRecipe.

        String identifying the entry point into the build. This is often a path to a configuration file and/or a target label within that file. The syntax and meaning are defined by recipe.type. For example, if the recipe type were \"make\", then this would reference the directory in which to run make as well as which target to use.

        :return: The entry_point of this SlsaRecipe.
        :rtype: str
        """
        return self._entry_point

    @entry_point.setter
    def entry_point(self, entry_point):
        """Sets the entry_point of this SlsaRecipe.

        String identifying the entry point into the build. This is often a path to a configuration file and/or a target label within that file. The syntax and meaning are defined by recipe.type. For example, if the recipe type were \"make\", then this would reference the directory in which to run make as well as which target to use.

        :param entry_point: The entry_point of this SlsaRecipe.
        :type entry_point: str
        """

        self._entry_point = entry_point

    @property
    def environment(self):
        """Gets the environment of this SlsaRecipe.

        Any other builder-controlled inputs necessary for correctly evaluating the recipe. Usually only needed for reproducing the build but not evaluated as part of policy. Depending on the recipe Type, the structure may be different.

        :return: The environment of this SlsaRecipe.
        :rtype: Dict[str, object]
        """
        return self._environment

    @environment.setter
    def environment(self, environment):
        """Sets the environment of this SlsaRecipe.

        Any other builder-controlled inputs necessary for correctly evaluating the recipe. Usually only needed for reproducing the build but not evaluated as part of policy. Depending on the recipe Type, the structure may be different.

        :param environment: The environment of this SlsaRecipe.
        :type environment: Dict[str, object]
        """

        self._environment = environment

    @property
    def type(self):
        """Gets the type of this SlsaRecipe.

        URI indicating what type of recipe was performed. It determines the meaning of recipe.entryPoint, recipe.arguments, recipe.environment, and materials.

        :return: The type of this SlsaRecipe.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SlsaRecipe.

        URI indicating what type of recipe was performed. It determines the meaning of recipe.entryPoint, recipe.arguments, recipe.environment, and materials.

        :param type: The type of this SlsaRecipe.
        :type type: str
        """

        self._type = type
