# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ExternalRef(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, category: str=None, comment: str=None, locator: str=None, type: str=None):
        """ExternalRef - a model defined in OpenAPI

        :param category: The category of this ExternalRef.
        :param comment: The comment of this ExternalRef.
        :param locator: The locator of this ExternalRef.
        :param type: The type of this ExternalRef.
        """
        self.openapi_types = {
            'category': str,
            'comment': str,
            'locator': str,
            'type': str
        }

        self.attribute_map = {
            'category': 'category',
            'comment': 'comment',
            'locator': 'locator',
            'type': 'type'
        }

        self._category = category
        self._comment = comment
        self._locator = locator
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ExternalRef':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ExternalRef of this ExternalRef.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def category(self):
        """Gets the category of this ExternalRef.

        An External Reference allows a Package to reference an external source of additional information, metadata, enumerations, asset identifiers, or downloadable content believed to be relevant to the Package

        :return: The category of this ExternalRef.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this ExternalRef.

        An External Reference allows a Package to reference an external source of additional information, metadata, enumerations, asset identifiers, or downloadable content believed to be relevant to the Package

        :param category: The category of this ExternalRef.
        :type category: str
        """
        allowed_values = ["CATEGORY_UNSPECIFIED", "SECURITY", "PACKAGE_MANAGER", "PERSISTENT_ID", "OTHER"]  # noqa: E501
        if category not in allowed_values:
            raise ValueError(
                "Invalid value for `category` ({0}), must be one of {1}"
                .format(category, allowed_values)
            )

        self._category = category

    @property
    def comment(self):
        """Gets the comment of this ExternalRef.

        Human-readable information about the purpose and target of the reference

        :return: The comment of this ExternalRef.
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this ExternalRef.

        Human-readable information about the purpose and target of the reference

        :param comment: The comment of this ExternalRef.
        :type comment: str
        """

        self._comment = comment

    @property
    def locator(self):
        """Gets the locator of this ExternalRef.

        The unique string with no spaces necessary to access the package-specific information, metadata, or content within the target location

        :return: The locator of this ExternalRef.
        :rtype: str
        """
        return self._locator

    @locator.setter
    def locator(self, locator):
        """Sets the locator of this ExternalRef.

        The unique string with no spaces necessary to access the package-specific information, metadata, or content within the target location

        :param locator: The locator of this ExternalRef.
        :type locator: str
        """

        self._locator = locator

    @property
    def type(self):
        """Gets the type of this ExternalRef.

        Type of category (e.g. 'npm' for the PACKAGE_MANAGER category)

        :return: The type of this ExternalRef.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ExternalRef.

        Type of category (e.g. 'npm' for the PACKAGE_MANAGER category)

        :param type: The type of this ExternalRef.
        :type type: str
        """

        self._type = type
