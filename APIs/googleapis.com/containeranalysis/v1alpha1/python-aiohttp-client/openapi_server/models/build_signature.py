# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BuildSignature(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, key_id: str=None, key_type: str=None, public_key: str=None, signature: str=None):
        """BuildSignature - a model defined in OpenAPI

        :param key_id: The key_id of this BuildSignature.
        :param key_type: The key_type of this BuildSignature.
        :param public_key: The public_key of this BuildSignature.
        :param signature: The signature of this BuildSignature.
        """
        self.openapi_types = {
            'key_id': str,
            'key_type': str,
            'public_key': str,
            'signature': str
        }

        self.attribute_map = {
            'key_id': 'keyId',
            'key_type': 'keyType',
            'public_key': 'publicKey',
            'signature': 'signature'
        }

        self._key_id = key_id
        self._key_type = key_type
        self._public_key = public_key
        self._signature = signature

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BuildSignature':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BuildSignature of this BuildSignature.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def key_id(self):
        """Gets the key_id of this BuildSignature.

        An Id for the key used to sign. This could be either an Id for the key stored in `public_key` (such as the Id or fingerprint for a PGP key, or the CN for a cert), or a reference to an external key (such as a reference to a key in Cloud Key Management Service).

        :return: The key_id of this BuildSignature.
        :rtype: str
        """
        return self._key_id

    @key_id.setter
    def key_id(self, key_id):
        """Sets the key_id of this BuildSignature.

        An Id for the key used to sign. This could be either an Id for the key stored in `public_key` (such as the Id or fingerprint for a PGP key, or the CN for a cert), or a reference to an external key (such as a reference to a key in Cloud Key Management Service).

        :param key_id: The key_id of this BuildSignature.
        :type key_id: str
        """

        self._key_id = key_id

    @property
    def key_type(self):
        """Gets the key_type of this BuildSignature.

        The type of the key, either stored in `public_key` or referenced in `key_id`

        :return: The key_type of this BuildSignature.
        :rtype: str
        """
        return self._key_type

    @key_type.setter
    def key_type(self, key_type):
        """Sets the key_type of this BuildSignature.

        The type of the key, either stored in `public_key` or referenced in `key_id`

        :param key_type: The key_type of this BuildSignature.
        :type key_type: str
        """
        allowed_values = ["KEY_TYPE_UNSPECIFIED", "PGP_ASCII_ARMORED", "PKIX_PEM"]  # noqa: E501
        if key_type not in allowed_values:
            raise ValueError(
                "Invalid value for `key_type` ({0}), must be one of {1}"
                .format(key_type, allowed_values)
            )

        self._key_type = key_type

    @property
    def public_key(self):
        """Gets the public_key of this BuildSignature.

        Public key of the builder which can be used to verify that the related findings are valid and unchanged. If `key_type` is empty, this defaults to PEM encoded public keys. This field may be empty if `key_id` references an external key. For Cloud Build based signatures, this is a PEM encoded public key. To verify the Cloud Build signature, place the contents of this field into a file (public.pem). The signature field is base64-decoded into its binary representation in signature.bin, and the provenance bytes from `BuildDetails` are base64-decoded into a binary representation in signed.bin. OpenSSL can then verify the signature: `openssl sha256 -verify public.pem -signature signature.bin signed.bin`

        :return: The public_key of this BuildSignature.
        :rtype: str
        """
        return self._public_key

    @public_key.setter
    def public_key(self, public_key):
        """Sets the public_key of this BuildSignature.

        Public key of the builder which can be used to verify that the related findings are valid and unchanged. If `key_type` is empty, this defaults to PEM encoded public keys. This field may be empty if `key_id` references an external key. For Cloud Build based signatures, this is a PEM encoded public key. To verify the Cloud Build signature, place the contents of this field into a file (public.pem). The signature field is base64-decoded into its binary representation in signature.bin, and the provenance bytes from `BuildDetails` are base64-decoded into a binary representation in signed.bin. OpenSSL can then verify the signature: `openssl sha256 -verify public.pem -signature signature.bin signed.bin`

        :param public_key: The public_key of this BuildSignature.
        :type public_key: str
        """

        self._public_key = public_key

    @property
    def signature(self):
        """Gets the signature of this BuildSignature.

        Signature of the related `BuildProvenance`, encoded in a base64 string.

        :return: The signature of this BuildSignature.
        :rtype: str
        """
        return self._signature

    @signature.setter
    def signature(self, signature):
        """Sets the signature of this BuildSignature.

        Signature of the related `BuildProvenance`, encoded in a base64 string.

        :param signature: The signature of this BuildSignature.
        :type signature: str
        """

        self._signature = signature
