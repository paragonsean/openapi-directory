# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.cvss import CVSS
from openapi_server.models.package_issue import PackageIssue
from openapi_server.models.vex_assessment import VexAssessment
from openapi_server import util


class VulnerabilityDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cvss_score: float=None, cvss_v2: CVSS=None, cvss_v3: CVSS=None, cvss_version: str=None, effective_severity: str=None, extra_details: str=None, package_issue: List[PackageIssue]=None, severity: str=None, type: str=None, vex_assessment: VexAssessment=None):
        """VulnerabilityDetails - a model defined in OpenAPI

        :param cvss_score: The cvss_score of this VulnerabilityDetails.
        :param cvss_v2: The cvss_v2 of this VulnerabilityDetails.
        :param cvss_v3: The cvss_v3 of this VulnerabilityDetails.
        :param cvss_version: The cvss_version of this VulnerabilityDetails.
        :param effective_severity: The effective_severity of this VulnerabilityDetails.
        :param extra_details: The extra_details of this VulnerabilityDetails.
        :param package_issue: The package_issue of this VulnerabilityDetails.
        :param severity: The severity of this VulnerabilityDetails.
        :param type: The type of this VulnerabilityDetails.
        :param vex_assessment: The vex_assessment of this VulnerabilityDetails.
        """
        self.openapi_types = {
            'cvss_score': float,
            'cvss_v2': CVSS,
            'cvss_v3': CVSS,
            'cvss_version': str,
            'effective_severity': str,
            'extra_details': str,
            'package_issue': List[PackageIssue],
            'severity': str,
            'type': str,
            'vex_assessment': VexAssessment
        }

        self.attribute_map = {
            'cvss_score': 'cvssScore',
            'cvss_v2': 'cvssV2',
            'cvss_v3': 'cvssV3',
            'cvss_version': 'cvssVersion',
            'effective_severity': 'effectiveSeverity',
            'extra_details': 'extraDetails',
            'package_issue': 'packageIssue',
            'severity': 'severity',
            'type': 'type',
            'vex_assessment': 'vexAssessment'
        }

        self._cvss_score = cvss_score
        self._cvss_v2 = cvss_v2
        self._cvss_v3 = cvss_v3
        self._cvss_version = cvss_version
        self._effective_severity = effective_severity
        self._extra_details = extra_details
        self._package_issue = package_issue
        self._severity = severity
        self._type = type
        self._vex_assessment = vex_assessment

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VulnerabilityDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VulnerabilityDetails of this VulnerabilityDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cvss_score(self):
        """Gets the cvss_score of this VulnerabilityDetails.

        Output only. The CVSS score of this vulnerability. CVSS score is on a scale of 0-10 where 0 indicates low severity and 10 indicates high severity.

        :return: The cvss_score of this VulnerabilityDetails.
        :rtype: float
        """
        return self._cvss_score

    @cvss_score.setter
    def cvss_score(self, cvss_score):
        """Sets the cvss_score of this VulnerabilityDetails.

        Output only. The CVSS score of this vulnerability. CVSS score is on a scale of 0-10 where 0 indicates low severity and 10 indicates high severity.

        :param cvss_score: The cvss_score of this VulnerabilityDetails.
        :type cvss_score: float
        """

        self._cvss_score = cvss_score

    @property
    def cvss_v2(self):
        """Gets the cvss_v2 of this VulnerabilityDetails.


        :return: The cvss_v2 of this VulnerabilityDetails.
        :rtype: CVSS
        """
        return self._cvss_v2

    @cvss_v2.setter
    def cvss_v2(self, cvss_v2):
        """Sets the cvss_v2 of this VulnerabilityDetails.


        :param cvss_v2: The cvss_v2 of this VulnerabilityDetails.
        :type cvss_v2: CVSS
        """

        self._cvss_v2 = cvss_v2

    @property
    def cvss_v3(self):
        """Gets the cvss_v3 of this VulnerabilityDetails.


        :return: The cvss_v3 of this VulnerabilityDetails.
        :rtype: CVSS
        """
        return self._cvss_v3

    @cvss_v3.setter
    def cvss_v3(self, cvss_v3):
        """Sets the cvss_v3 of this VulnerabilityDetails.


        :param cvss_v3: The cvss_v3 of this VulnerabilityDetails.
        :type cvss_v3: CVSS
        """

        self._cvss_v3 = cvss_v3

    @property
    def cvss_version(self):
        """Gets the cvss_version of this VulnerabilityDetails.

        Output only. CVSS version used to populate cvss_score and severity.

        :return: The cvss_version of this VulnerabilityDetails.
        :rtype: str
        """
        return self._cvss_version

    @cvss_version.setter
    def cvss_version(self, cvss_version):
        """Sets the cvss_version of this VulnerabilityDetails.

        Output only. CVSS version used to populate cvss_score and severity.

        :param cvss_version: The cvss_version of this VulnerabilityDetails.
        :type cvss_version: str
        """
        allowed_values = ["CVSS_VERSION_UNSPECIFIED", "CVSS_VERSION_2", "CVSS_VERSION_3"]  # noqa: E501
        if cvss_version not in allowed_values:
            raise ValueError(
                "Invalid value for `cvss_version` ({0}), must be one of {1}"
                .format(cvss_version, allowed_values)
            )

        self._cvss_version = cvss_version

    @property
    def effective_severity(self):
        """Gets the effective_severity of this VulnerabilityDetails.

        The distro assigned severity for this vulnerability when that is available and note provider assigned severity when distro has not yet assigned a severity for this vulnerability. When there are multiple package issues for this vulnerability, they can have different effective severities because some might come from the distro and some might come from installed language packs (e.g. Maven JARs or Go binaries). For this reason, it is advised to use the effective severity on the PackageIssue level, as this field may eventually be deprecated. In the case where multiple PackageIssues have different effective severities, the one set here will be the highest severity of any of the PackageIssues.

        :return: The effective_severity of this VulnerabilityDetails.
        :rtype: str
        """
        return self._effective_severity

    @effective_severity.setter
    def effective_severity(self, effective_severity):
        """Sets the effective_severity of this VulnerabilityDetails.

        The distro assigned severity for this vulnerability when that is available and note provider assigned severity when distro has not yet assigned a severity for this vulnerability. When there are multiple package issues for this vulnerability, they can have different effective severities because some might come from the distro and some might come from installed language packs (e.g. Maven JARs or Go binaries). For this reason, it is advised to use the effective severity on the PackageIssue level, as this field may eventually be deprecated. In the case where multiple PackageIssues have different effective severities, the one set here will be the highest severity of any of the PackageIssues.

        :param effective_severity: The effective_severity of this VulnerabilityDetails.
        :type effective_severity: str
        """
        allowed_values = ["SEVERITY_UNSPECIFIED", "MINIMAL", "LOW", "MEDIUM", "HIGH", "CRITICAL"]  # noqa: E501
        if effective_severity not in allowed_values:
            raise ValueError(
                "Invalid value for `effective_severity` ({0}), must be one of {1}"
                .format(effective_severity, allowed_values)
            )

        self._effective_severity = effective_severity

    @property
    def extra_details(self):
        """Gets the extra_details of this VulnerabilityDetails.

        Occurrence-specific extra details about the vulnerability.

        :return: The extra_details of this VulnerabilityDetails.
        :rtype: str
        """
        return self._extra_details

    @extra_details.setter
    def extra_details(self, extra_details):
        """Sets the extra_details of this VulnerabilityDetails.

        Occurrence-specific extra details about the vulnerability.

        :param extra_details: The extra_details of this VulnerabilityDetails.
        :type extra_details: str
        """

        self._extra_details = extra_details

    @property
    def package_issue(self):
        """Gets the package_issue of this VulnerabilityDetails.

        The set of affected locations and their fixes (if available) within the associated resource.

        :return: The package_issue of this VulnerabilityDetails.
        :rtype: List[PackageIssue]
        """
        return self._package_issue

    @package_issue.setter
    def package_issue(self, package_issue):
        """Sets the package_issue of this VulnerabilityDetails.

        The set of affected locations and their fixes (if available) within the associated resource.

        :param package_issue: The package_issue of this VulnerabilityDetails.
        :type package_issue: List[PackageIssue]
        """

        self._package_issue = package_issue

    @property
    def severity(self):
        """Gets the severity of this VulnerabilityDetails.

        Output only. The note provider assigned Severity of the vulnerability.

        :return: The severity of this VulnerabilityDetails.
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this VulnerabilityDetails.

        Output only. The note provider assigned Severity of the vulnerability.

        :param severity: The severity of this VulnerabilityDetails.
        :type severity: str
        """
        allowed_values = ["SEVERITY_UNSPECIFIED", "MINIMAL", "LOW", "MEDIUM", "HIGH", "CRITICAL"]  # noqa: E501
        if severity not in allowed_values:
            raise ValueError(
                "Invalid value for `severity` ({0}), must be one of {1}"
                .format(severity, allowed_values)
            )

        self._severity = severity

    @property
    def type(self):
        """Gets the type of this VulnerabilityDetails.

        The type of package; whether native or non native(ruby gems, node.js packages etc). This may be deprecated in the future because we can have multiple PackageIssues with different package types.

        :return: The type of this VulnerabilityDetails.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this VulnerabilityDetails.

        The type of package; whether native or non native(ruby gems, node.js packages etc). This may be deprecated in the future because we can have multiple PackageIssues with different package types.

        :param type: The type of this VulnerabilityDetails.
        :type type: str
        """

        self._type = type

    @property
    def vex_assessment(self):
        """Gets the vex_assessment of this VulnerabilityDetails.


        :return: The vex_assessment of this VulnerabilityDetails.
        :rtype: VexAssessment
        """
        return self._vex_assessment

    @vex_assessment.setter
    def vex_assessment(self, vex_assessment):
        """Sets the vex_assessment of this VulnerabilityDetails.


        :param vex_assessment: The vex_assessment of this VulnerabilityDetails.
        :type vex_assessment: VexAssessment
        """

        self._vex_assessment = vex_assessment
