# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ScanConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, create_time: str=None, description: str=None, enabled: bool=None, name: str=None, update_time: str=None):
        """ScanConfig - a model defined in OpenAPI

        :param create_time: The create_time of this ScanConfig.
        :param description: The description of this ScanConfig.
        :param enabled: The enabled of this ScanConfig.
        :param name: The name of this ScanConfig.
        :param update_time: The update_time of this ScanConfig.
        """
        self.openapi_types = {
            'create_time': str,
            'description': str,
            'enabled': bool,
            'name': str,
            'update_time': str
        }

        self.attribute_map = {
            'create_time': 'createTime',
            'description': 'description',
            'enabled': 'enabled',
            'name': 'name',
            'update_time': 'updateTime'
        }

        self._create_time = create_time
        self._description = description
        self._enabled = enabled
        self._name = name
        self._update_time = update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ScanConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ScanConfig of this ScanConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def create_time(self):
        """Gets the create_time of this ScanConfig.

        Output only. The time this scan config was created.

        :return: The create_time of this ScanConfig.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this ScanConfig.

        Output only. The time this scan config was created.

        :param create_time: The create_time of this ScanConfig.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def description(self):
        """Gets the description of this ScanConfig.

        Output only. A human-readable description of what the `ScanConfig` does.

        :return: The description of this ScanConfig.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ScanConfig.

        Output only. A human-readable description of what the `ScanConfig` does.

        :param description: The description of this ScanConfig.
        :type description: str
        """

        self._description = description

    @property
    def enabled(self):
        """Gets the enabled of this ScanConfig.

        Indicates whether the Scan is enabled.

        :return: The enabled of this ScanConfig.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this ScanConfig.

        Indicates whether the Scan is enabled.

        :param enabled: The enabled of this ScanConfig.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def name(self):
        """Gets the name of this ScanConfig.

        Output only. The name of the ScanConfig in the form “projects/{project_id}/scanConfigs/{scan_config_id}\".

        :return: The name of this ScanConfig.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ScanConfig.

        Output only. The name of the ScanConfig in the form “projects/{project_id}/scanConfigs/{scan_config_id}\".

        :param name: The name of this ScanConfig.
        :type name: str
        """

        self._name = name

    @property
    def update_time(self):
        """Gets the update_time of this ScanConfig.

        Output only. The time this scan config was last updated.

        :return: The update_time of this ScanConfig.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this ScanConfig.

        Output only. The time this scan config was last updated.

        :param update_time: The update_time of this ScanConfig.
        :type update_time: str
        """

        self._update_time = update_time
