# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.build_provenance import BuildProvenance
from openapi_server.models.in_toto_provenance import InTotoProvenance
from openapi_server.models.in_toto_slsa_provenance_v1 import InTotoSlsaProvenanceV1
from openapi_server.models.in_toto_statement import InTotoStatement
from openapi_server import util


class BuildDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, in_toto_slsa_provenance_v1: InTotoSlsaProvenanceV1=None, intoto_provenance: InTotoProvenance=None, intoto_statement: InTotoStatement=None, provenance: BuildProvenance=None, provenance_bytes: str=None):
        """BuildDetails - a model defined in OpenAPI

        :param in_toto_slsa_provenance_v1: The in_toto_slsa_provenance_v1 of this BuildDetails.
        :param intoto_provenance: The intoto_provenance of this BuildDetails.
        :param intoto_statement: The intoto_statement of this BuildDetails.
        :param provenance: The provenance of this BuildDetails.
        :param provenance_bytes: The provenance_bytes of this BuildDetails.
        """
        self.openapi_types = {
            'in_toto_slsa_provenance_v1': InTotoSlsaProvenanceV1,
            'intoto_provenance': InTotoProvenance,
            'intoto_statement': InTotoStatement,
            'provenance': BuildProvenance,
            'provenance_bytes': str
        }

        self.attribute_map = {
            'in_toto_slsa_provenance_v1': 'inTotoSlsaProvenanceV1',
            'intoto_provenance': 'intotoProvenance',
            'intoto_statement': 'intotoStatement',
            'provenance': 'provenance',
            'provenance_bytes': 'provenanceBytes'
        }

        self._in_toto_slsa_provenance_v1 = in_toto_slsa_provenance_v1
        self._intoto_provenance = intoto_provenance
        self._intoto_statement = intoto_statement
        self._provenance = provenance
        self._provenance_bytes = provenance_bytes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BuildDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BuildDetails of this BuildDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def in_toto_slsa_provenance_v1(self):
        """Gets the in_toto_slsa_provenance_v1 of this BuildDetails.


        :return: The in_toto_slsa_provenance_v1 of this BuildDetails.
        :rtype: InTotoSlsaProvenanceV1
        """
        return self._in_toto_slsa_provenance_v1

    @in_toto_slsa_provenance_v1.setter
    def in_toto_slsa_provenance_v1(self, in_toto_slsa_provenance_v1):
        """Sets the in_toto_slsa_provenance_v1 of this BuildDetails.


        :param in_toto_slsa_provenance_v1: The in_toto_slsa_provenance_v1 of this BuildDetails.
        :type in_toto_slsa_provenance_v1: InTotoSlsaProvenanceV1
        """

        self._in_toto_slsa_provenance_v1 = in_toto_slsa_provenance_v1

    @property
    def intoto_provenance(self):
        """Gets the intoto_provenance of this BuildDetails.


        :return: The intoto_provenance of this BuildDetails.
        :rtype: InTotoProvenance
        """
        return self._intoto_provenance

    @intoto_provenance.setter
    def intoto_provenance(self, intoto_provenance):
        """Sets the intoto_provenance of this BuildDetails.


        :param intoto_provenance: The intoto_provenance of this BuildDetails.
        :type intoto_provenance: InTotoProvenance
        """

        self._intoto_provenance = intoto_provenance

    @property
    def intoto_statement(self):
        """Gets the intoto_statement of this BuildDetails.


        :return: The intoto_statement of this BuildDetails.
        :rtype: InTotoStatement
        """
        return self._intoto_statement

    @intoto_statement.setter
    def intoto_statement(self, intoto_statement):
        """Sets the intoto_statement of this BuildDetails.


        :param intoto_statement: The intoto_statement of this BuildDetails.
        :type intoto_statement: InTotoStatement
        """

        self._intoto_statement = intoto_statement

    @property
    def provenance(self):
        """Gets the provenance of this BuildDetails.


        :return: The provenance of this BuildDetails.
        :rtype: BuildProvenance
        """
        return self._provenance

    @provenance.setter
    def provenance(self, provenance):
        """Sets the provenance of this BuildDetails.


        :param provenance: The provenance of this BuildDetails.
        :type provenance: BuildProvenance
        """

        self._provenance = provenance

    @property
    def provenance_bytes(self):
        """Gets the provenance_bytes of this BuildDetails.

        Serialized JSON representation of the provenance, used in generating the `BuildSignature` in the corresponding Result. After verifying the signature, `provenance_bytes` can be unmarshalled and compared to the provenance to confirm that it is unchanged. A base64-encoded string representation of the provenance bytes is used for the signature in order to interoperate with openssl which expects this format for signature verification. The serialized form is captured both to avoid ambiguity in how the provenance is marshalled to json as well to prevent incompatibilities with future changes.

        :return: The provenance_bytes of this BuildDetails.
        :rtype: str
        """
        return self._provenance_bytes

    @provenance_bytes.setter
    def provenance_bytes(self, provenance_bytes):
        """Sets the provenance_bytes of this BuildDetails.

        Serialized JSON representation of the provenance, used in generating the `BuildSignature` in the corresponding Result. After verifying the signature, `provenance_bytes` can be unmarshalled and compared to the provenance to confirm that it is unchanged. A base64-encoded string representation of the provenance bytes is used for the signature in order to interoperate with openssl which expects this format for signature verification. The serialized form is captured both to avoid ambiguity in how the provenance is marshalled to json as well to prevent incompatibilities with future changes.

        :param provenance_bytes: The provenance_bytes of this BuildDetails.
        :type provenance_bytes: str
        """

        self._provenance_bytes = provenance_bytes
