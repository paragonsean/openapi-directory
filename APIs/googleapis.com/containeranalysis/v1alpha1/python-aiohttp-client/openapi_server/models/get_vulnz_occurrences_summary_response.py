# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.severity_count import SeverityCount
from openapi_server import util


class GetVulnzOccurrencesSummaryResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, counts: List[SeverityCount]=None):
        """GetVulnzOccurrencesSummaryResponse - a model defined in OpenAPI

        :param counts: The counts of this GetVulnzOccurrencesSummaryResponse.
        """
        self.openapi_types = {
            'counts': List[SeverityCount]
        }

        self.attribute_map = {
            'counts': 'counts'
        }

        self._counts = counts

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetVulnzOccurrencesSummaryResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetVulnzOccurrencesSummaryResponse of this GetVulnzOccurrencesSummaryResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def counts(self):
        """Gets the counts of this GetVulnzOccurrencesSummaryResponse.

        A map of how many occurrences were found for each severity.

        :return: The counts of this GetVulnzOccurrencesSummaryResponse.
        :rtype: List[SeverityCount]
        """
        return self._counts

    @counts.setter
    def counts(self, counts):
        """Sets the counts of this GetVulnzOccurrencesSummaryResponse.

        A map of how many occurrences were found for each severity.

        :param counts: The counts of this GetVulnzOccurrencesSummaryResponse.
        :type counts: List[SeverityCount]
        """

        self._counts = counts
