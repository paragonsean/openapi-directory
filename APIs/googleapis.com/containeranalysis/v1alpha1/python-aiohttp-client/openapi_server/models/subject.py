# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Subject(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, digest: Dict[str, str]=None, name: str=None):
        """Subject - a model defined in OpenAPI

        :param digest: The digest of this Subject.
        :param name: The name of this Subject.
        """
        self.openapi_types = {
            'digest': Dict[str, str],
            'name': str
        }

        self.attribute_map = {
            'digest': 'digest',
            'name': 'name'
        }

        self._digest = digest
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Subject':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Subject of this Subject.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def digest(self):
        """Gets the digest of this Subject.

        \"\": \"\" Algorithms can be e.g. sha256, sha512 See https://github.com/in-toto/attestation/blob/main/spec/field_types.md#DigestSet

        :return: The digest of this Subject.
        :rtype: Dict[str, str]
        """
        return self._digest

    @digest.setter
    def digest(self, digest):
        """Sets the digest of this Subject.

        \"\": \"\" Algorithms can be e.g. sha256, sha512 See https://github.com/in-toto/attestation/blob/main/spec/field_types.md#DigestSet

        :param digest: The digest of this Subject.
        :type digest: Dict[str, str]
        """

        self._digest = digest

    @property
    def name(self):
        """Gets the name of this Subject.

        name is the name of the Subject used here

        :return: The name of this Subject.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Subject.

        name is the name of the Subject used here

        :param name: The name of this Subject.
        :type name: str
        """

        self._name = name
