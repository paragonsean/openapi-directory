/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1alpha1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ContainerAnalysisApi);
  }
}(this, function(expect, ContainerAnalysisApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new ContainerAnalysisApi.ProvidersApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ProvidersApi', function() {
    describe('containeranalysisProvidersNotesCreate', function() {
      it('should call containeranalysisProvidersNotesCreate successfully', function(done) {
        //uncomment below and update the code to test containeranalysisProvidersNotesCreate
        //instance.containeranalysisProvidersNotesCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('containeranalysisProvidersNotesDelete', function() {
      it('should call containeranalysisProvidersNotesDelete successfully', function(done) {
        //uncomment below and update the code to test containeranalysisProvidersNotesDelete
        //instance.containeranalysisProvidersNotesDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('containeranalysisProvidersNotesGet', function() {
      it('should call containeranalysisProvidersNotesGet successfully', function(done) {
        //uncomment below and update the code to test containeranalysisProvidersNotesGet
        //instance.containeranalysisProvidersNotesGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('containeranalysisProvidersNotesGetIamPolicy', function() {
      it('should call containeranalysisProvidersNotesGetIamPolicy successfully', function(done) {
        //uncomment below and update the code to test containeranalysisProvidersNotesGetIamPolicy
        //instance.containeranalysisProvidersNotesGetIamPolicy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('containeranalysisProvidersNotesList', function() {
      it('should call containeranalysisProvidersNotesList successfully', function(done) {
        //uncomment below and update the code to test containeranalysisProvidersNotesList
        //instance.containeranalysisProvidersNotesList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('containeranalysisProvidersNotesOccurrencesList', function() {
      it('should call containeranalysisProvidersNotesOccurrencesList successfully', function(done) {
        //uncomment below and update the code to test containeranalysisProvidersNotesOccurrencesList
        //instance.containeranalysisProvidersNotesOccurrencesList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('containeranalysisProvidersNotesPatch', function() {
      it('should call containeranalysisProvidersNotesPatch successfully', function(done) {
        //uncomment below and update the code to test containeranalysisProvidersNotesPatch
        //instance.containeranalysisProvidersNotesPatch(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('containeranalysisProvidersNotesSetIamPolicy', function() {
      it('should call containeranalysisProvidersNotesSetIamPolicy successfully', function(done) {
        //uncomment below and update the code to test containeranalysisProvidersNotesSetIamPolicy
        //instance.containeranalysisProvidersNotesSetIamPolicy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('containeranalysisProvidersNotesTestIamPermissions', function() {
      it('should call containeranalysisProvidersNotesTestIamPermissions successfully', function(done) {
        //uncomment below and update the code to test containeranalysisProvidersNotesTestIamPermissions
        //instance.containeranalysisProvidersNotesTestIamPermissions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
