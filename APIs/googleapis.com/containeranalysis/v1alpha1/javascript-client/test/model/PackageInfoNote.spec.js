/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1alpha1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ContainerAnalysisApi);
  }
}(this, function(expect, ContainerAnalysisApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new ContainerAnalysisApi.PackageInfoNote();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('PackageInfoNote', function() {
    it('should create an instance of PackageInfoNote', function() {
      // uncomment below and update the code to test PackageInfoNote
      //var instance = new ContainerAnalysisApi.PackageInfoNote();
      //expect(instance).to.be.a(ContainerAnalysisApi.PackageInfoNote);
    });

    it('should have the property analyzed (base name: "analyzed")', function() {
      // uncomment below and update the code to test the property analyzed
      //var instance = new ContainerAnalysisApi.PackageInfoNote();
      //expect(instance).to.be();
    });

    it('should have the property attribution (base name: "attribution")', function() {
      // uncomment below and update the code to test the property attribution
      //var instance = new ContainerAnalysisApi.PackageInfoNote();
      //expect(instance).to.be();
    });

    it('should have the property checksum (base name: "checksum")', function() {
      // uncomment below and update the code to test the property checksum
      //var instance = new ContainerAnalysisApi.PackageInfoNote();
      //expect(instance).to.be();
    });

    it('should have the property copyright (base name: "copyright")', function() {
      // uncomment below and update the code to test the property copyright
      //var instance = new ContainerAnalysisApi.PackageInfoNote();
      //expect(instance).to.be();
    });

    it('should have the property detailedDescription (base name: "detailedDescription")', function() {
      // uncomment below and update the code to test the property detailedDescription
      //var instance = new ContainerAnalysisApi.PackageInfoNote();
      //expect(instance).to.be();
    });

    it('should have the property downloadLocation (base name: "downloadLocation")', function() {
      // uncomment below and update the code to test the property downloadLocation
      //var instance = new ContainerAnalysisApi.PackageInfoNote();
      //expect(instance).to.be();
    });

    it('should have the property externalRefs (base name: "externalRefs")', function() {
      // uncomment below and update the code to test the property externalRefs
      //var instance = new ContainerAnalysisApi.PackageInfoNote();
      //expect(instance).to.be();
    });

    it('should have the property filesLicenseInfo (base name: "filesLicenseInfo")', function() {
      // uncomment below and update the code to test the property filesLicenseInfo
      //var instance = new ContainerAnalysisApi.PackageInfoNote();
      //expect(instance).to.be();
    });

    it('should have the property homePage (base name: "homePage")', function() {
      // uncomment below and update the code to test the property homePage
      //var instance = new ContainerAnalysisApi.PackageInfoNote();
      //expect(instance).to.be();
    });

    it('should have the property licenseDeclared (base name: "licenseDeclared")', function() {
      // uncomment below and update the code to test the property licenseDeclared
      //var instance = new ContainerAnalysisApi.PackageInfoNote();
      //expect(instance).to.be();
    });

    it('should have the property originator (base name: "originator")', function() {
      // uncomment below and update the code to test the property originator
      //var instance = new ContainerAnalysisApi.PackageInfoNote();
      //expect(instance).to.be();
    });

    it('should have the property packageType (base name: "packageType")', function() {
      // uncomment below and update the code to test the property packageType
      //var instance = new ContainerAnalysisApi.PackageInfoNote();
      //expect(instance).to.be();
    });

    it('should have the property summaryDescription (base name: "summaryDescription")', function() {
      // uncomment below and update the code to test the property summaryDescription
      //var instance = new ContainerAnalysisApi.PackageInfoNote();
      //expect(instance).to.be();
    });

    it('should have the property supplier (base name: "supplier")', function() {
      // uncomment below and update the code to test the property supplier
      //var instance = new ContainerAnalysisApi.PackageInfoNote();
      //expect(instance).to.be();
    });

    it('should have the property title (base name: "title")', function() {
      // uncomment below and update the code to test the property title
      //var instance = new ContainerAnalysisApi.PackageInfoNote();
      //expect(instance).to.be();
    });

    it('should have the property verificationCode (base name: "verificationCode")', function() {
      // uncomment below and update the code to test the property verificationCode
      //var instance = new ContainerAnalysisApi.PackageInfoNote();
      //expect(instance).to.be();
    });

    it('should have the property version (base name: "version")', function() {
      // uncomment below and update the code to test the property version
      //var instance = new ContainerAnalysisApi.PackageInfoNote();
      //expect(instance).to.be();
    });

  });

}));
