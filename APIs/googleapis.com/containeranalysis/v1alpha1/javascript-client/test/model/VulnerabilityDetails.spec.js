/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1alpha1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ContainerAnalysisApi);
  }
}(this, function(expect, ContainerAnalysisApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new ContainerAnalysisApi.VulnerabilityDetails();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('VulnerabilityDetails', function() {
    it('should create an instance of VulnerabilityDetails', function() {
      // uncomment below and update the code to test VulnerabilityDetails
      //var instance = new ContainerAnalysisApi.VulnerabilityDetails();
      //expect(instance).to.be.a(ContainerAnalysisApi.VulnerabilityDetails);
    });

    it('should have the property cvssScore (base name: "cvssScore")', function() {
      // uncomment below and update the code to test the property cvssScore
      //var instance = new ContainerAnalysisApi.VulnerabilityDetails();
      //expect(instance).to.be();
    });

    it('should have the property cvssV2 (base name: "cvssV2")', function() {
      // uncomment below and update the code to test the property cvssV2
      //var instance = new ContainerAnalysisApi.VulnerabilityDetails();
      //expect(instance).to.be();
    });

    it('should have the property cvssV3 (base name: "cvssV3")', function() {
      // uncomment below and update the code to test the property cvssV3
      //var instance = new ContainerAnalysisApi.VulnerabilityDetails();
      //expect(instance).to.be();
    });

    it('should have the property cvssVersion (base name: "cvssVersion")', function() {
      // uncomment below and update the code to test the property cvssVersion
      //var instance = new ContainerAnalysisApi.VulnerabilityDetails();
      //expect(instance).to.be();
    });

    it('should have the property effectiveSeverity (base name: "effectiveSeverity")', function() {
      // uncomment below and update the code to test the property effectiveSeverity
      //var instance = new ContainerAnalysisApi.VulnerabilityDetails();
      //expect(instance).to.be();
    });

    it('should have the property extraDetails (base name: "extraDetails")', function() {
      // uncomment below and update the code to test the property extraDetails
      //var instance = new ContainerAnalysisApi.VulnerabilityDetails();
      //expect(instance).to.be();
    });

    it('should have the property packageIssue (base name: "packageIssue")', function() {
      // uncomment below and update the code to test the property packageIssue
      //var instance = new ContainerAnalysisApi.VulnerabilityDetails();
      //expect(instance).to.be();
    });

    it('should have the property severity (base name: "severity")', function() {
      // uncomment below and update the code to test the property severity
      //var instance = new ContainerAnalysisApi.VulnerabilityDetails();
      //expect(instance).to.be();
    });

    it('should have the property type (base name: "type")', function() {
      // uncomment below and update the code to test the property type
      //var instance = new ContainerAnalysisApi.VulnerabilityDetails();
      //expect(instance).to.be();
    });

    it('should have the property vexAssessment (base name: "vexAssessment")', function() {
      // uncomment below and update the code to test the property vexAssessment
      //var instance = new ContainerAnalysisApi.VulnerabilityDetails();
      //expect(instance).to.be();
    });

  });

}));
