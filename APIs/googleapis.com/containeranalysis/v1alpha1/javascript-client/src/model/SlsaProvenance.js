/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1alpha1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Material from './Material';
import SlsaBuilder from './SlsaBuilder';
import SlsaMetadata from './SlsaMetadata';
import SlsaRecipe from './SlsaRecipe';

/**
 * The SlsaProvenance model module.
 * @module model/SlsaProvenance
 * @version v1alpha1
 */
class SlsaProvenance {
    /**
     * Constructs a new <code>SlsaProvenance</code>.
     * SlsaProvenance is the slsa provenance as defined by the slsa spec.
     * @alias module:model/SlsaProvenance
     */
    constructor() { 
        
        SlsaProvenance.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SlsaProvenance</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SlsaProvenance} obj Optional instance to populate.
     * @return {module:model/SlsaProvenance} The populated <code>SlsaProvenance</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SlsaProvenance();

            if (data.hasOwnProperty('builder')) {
                obj['builder'] = SlsaBuilder.constructFromObject(data['builder']);
            }
            if (data.hasOwnProperty('materials')) {
                obj['materials'] = ApiClient.convertToType(data['materials'], [Material]);
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = SlsaMetadata.constructFromObject(data['metadata']);
            }
            if (data.hasOwnProperty('recipe')) {
                obj['recipe'] = SlsaRecipe.constructFromObject(data['recipe']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SlsaProvenance</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SlsaProvenance</code>.
     */
    static validateJSON(data) {
        // validate the optional field `builder`
        if (data['builder']) { // data not null
          SlsaBuilder.validateJSON(data['builder']);
        }
        if (data['materials']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['materials'])) {
                throw new Error("Expected the field `materials` to be an array in the JSON data but got " + data['materials']);
            }
            // validate the optional field `materials` (array)
            for (const item of data['materials']) {
                Material.validateJSON(item);
            };
        }
        // validate the optional field `metadata`
        if (data['metadata']) { // data not null
          SlsaMetadata.validateJSON(data['metadata']);
        }
        // validate the optional field `recipe`
        if (data['recipe']) { // data not null
          SlsaRecipe.validateJSON(data['recipe']);
        }

        return true;
    }


}



/**
 * @member {module:model/SlsaBuilder} builder
 */
SlsaProvenance.prototype['builder'] = undefined;

/**
 * The collection of artifacts that influenced the build including sources, dependencies, build tools, base images, and so on. This is considered to be incomplete unless metadata.completeness.materials is true. Unset or null is equivalent to empty.
 * @member {Array.<module:model/Material>} materials
 */
SlsaProvenance.prototype['materials'] = undefined;

/**
 * @member {module:model/SlsaMetadata} metadata
 */
SlsaProvenance.prototype['metadata'] = undefined;

/**
 * @member {module:model/SlsaRecipe} recipe
 */
SlsaProvenance.prototype['recipe'] = undefined;






export default SlsaProvenance;

