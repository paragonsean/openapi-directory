/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1alpha1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ExternalRef from './ExternalRef';
import License from './License';

/**
 * The PackageInfoNote model module.
 * @module model/PackageInfoNote
 * @version v1alpha1
 */
class PackageInfoNote {
    /**
     * Constructs a new <code>PackageInfoNote</code>.
     * PackageInfoNote represents an SPDX Package Information section: https://spdx.github.io/spdx-spec/3-package-information/
     * @alias module:model/PackageInfoNote
     */
    constructor() { 
        
        PackageInfoNote.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PackageInfoNote</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PackageInfoNote} obj Optional instance to populate.
     * @return {module:model/PackageInfoNote} The populated <code>PackageInfoNote</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PackageInfoNote();

            if (data.hasOwnProperty('analyzed')) {
                obj['analyzed'] = ApiClient.convertToType(data['analyzed'], 'Boolean');
            }
            if (data.hasOwnProperty('attribution')) {
                obj['attribution'] = ApiClient.convertToType(data['attribution'], 'String');
            }
            if (data.hasOwnProperty('checksum')) {
                obj['checksum'] = ApiClient.convertToType(data['checksum'], 'String');
            }
            if (data.hasOwnProperty('copyright')) {
                obj['copyright'] = ApiClient.convertToType(data['copyright'], 'String');
            }
            if (data.hasOwnProperty('detailedDescription')) {
                obj['detailedDescription'] = ApiClient.convertToType(data['detailedDescription'], 'String');
            }
            if (data.hasOwnProperty('downloadLocation')) {
                obj['downloadLocation'] = ApiClient.convertToType(data['downloadLocation'], 'String');
            }
            if (data.hasOwnProperty('externalRefs')) {
                obj['externalRefs'] = ApiClient.convertToType(data['externalRefs'], [ExternalRef]);
            }
            if (data.hasOwnProperty('filesLicenseInfo')) {
                obj['filesLicenseInfo'] = ApiClient.convertToType(data['filesLicenseInfo'], ['String']);
            }
            if (data.hasOwnProperty('homePage')) {
                obj['homePage'] = ApiClient.convertToType(data['homePage'], 'String');
            }
            if (data.hasOwnProperty('licenseDeclared')) {
                obj['licenseDeclared'] = License.constructFromObject(data['licenseDeclared']);
            }
            if (data.hasOwnProperty('originator')) {
                obj['originator'] = ApiClient.convertToType(data['originator'], 'String');
            }
            if (data.hasOwnProperty('packageType')) {
                obj['packageType'] = ApiClient.convertToType(data['packageType'], 'String');
            }
            if (data.hasOwnProperty('summaryDescription')) {
                obj['summaryDescription'] = ApiClient.convertToType(data['summaryDescription'], 'String');
            }
            if (data.hasOwnProperty('supplier')) {
                obj['supplier'] = ApiClient.convertToType(data['supplier'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('verificationCode')) {
                obj['verificationCode'] = ApiClient.convertToType(data['verificationCode'], 'String');
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PackageInfoNote</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PackageInfoNote</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['attribution'] && !(typeof data['attribution'] === 'string' || data['attribution'] instanceof String)) {
            throw new Error("Expected the field `attribution` to be a primitive type in the JSON string but got " + data['attribution']);
        }
        // ensure the json data is a string
        if (data['checksum'] && !(typeof data['checksum'] === 'string' || data['checksum'] instanceof String)) {
            throw new Error("Expected the field `checksum` to be a primitive type in the JSON string but got " + data['checksum']);
        }
        // ensure the json data is a string
        if (data['copyright'] && !(typeof data['copyright'] === 'string' || data['copyright'] instanceof String)) {
            throw new Error("Expected the field `copyright` to be a primitive type in the JSON string but got " + data['copyright']);
        }
        // ensure the json data is a string
        if (data['detailedDescription'] && !(typeof data['detailedDescription'] === 'string' || data['detailedDescription'] instanceof String)) {
            throw new Error("Expected the field `detailedDescription` to be a primitive type in the JSON string but got " + data['detailedDescription']);
        }
        // ensure the json data is a string
        if (data['downloadLocation'] && !(typeof data['downloadLocation'] === 'string' || data['downloadLocation'] instanceof String)) {
            throw new Error("Expected the field `downloadLocation` to be a primitive type in the JSON string but got " + data['downloadLocation']);
        }
        if (data['externalRefs']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['externalRefs'])) {
                throw new Error("Expected the field `externalRefs` to be an array in the JSON data but got " + data['externalRefs']);
            }
            // validate the optional field `externalRefs` (array)
            for (const item of data['externalRefs']) {
                ExternalRef.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['filesLicenseInfo'])) {
            throw new Error("Expected the field `filesLicenseInfo` to be an array in the JSON data but got " + data['filesLicenseInfo']);
        }
        // ensure the json data is a string
        if (data['homePage'] && !(typeof data['homePage'] === 'string' || data['homePage'] instanceof String)) {
            throw new Error("Expected the field `homePage` to be a primitive type in the JSON string but got " + data['homePage']);
        }
        // validate the optional field `licenseDeclared`
        if (data['licenseDeclared']) { // data not null
          License.validateJSON(data['licenseDeclared']);
        }
        // ensure the json data is a string
        if (data['originator'] && !(typeof data['originator'] === 'string' || data['originator'] instanceof String)) {
            throw new Error("Expected the field `originator` to be a primitive type in the JSON string but got " + data['originator']);
        }
        // ensure the json data is a string
        if (data['packageType'] && !(typeof data['packageType'] === 'string' || data['packageType'] instanceof String)) {
            throw new Error("Expected the field `packageType` to be a primitive type in the JSON string but got " + data['packageType']);
        }
        // ensure the json data is a string
        if (data['summaryDescription'] && !(typeof data['summaryDescription'] === 'string' || data['summaryDescription'] instanceof String)) {
            throw new Error("Expected the field `summaryDescription` to be a primitive type in the JSON string but got " + data['summaryDescription']);
        }
        // ensure the json data is a string
        if (data['supplier'] && !(typeof data['supplier'] === 'string' || data['supplier'] instanceof String)) {
            throw new Error("Expected the field `supplier` to be a primitive type in the JSON string but got " + data['supplier']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['verificationCode'] && !(typeof data['verificationCode'] === 'string' || data['verificationCode'] instanceof String)) {
            throw new Error("Expected the field `verificationCode` to be a primitive type in the JSON string but got " + data['verificationCode']);
        }
        // ensure the json data is a string
        if (data['version'] && !(typeof data['version'] === 'string' || data['version'] instanceof String)) {
            throw new Error("Expected the field `version` to be a primitive type in the JSON string but got " + data['version']);
        }

        return true;
    }


}



/**
 * Indicates whether the file content of this package has been available for or subjected to analysis when creating the SPDX document
 * @member {Boolean} analyzed
 */
PackageInfoNote.prototype['analyzed'] = undefined;

/**
 * A place for the SPDX data creator to record, at the package level, acknowledgements that may be needed to be communicated in some contexts
 * @member {String} attribution
 */
PackageInfoNote.prototype['attribution'] = undefined;

/**
 * Provide an independently reproducible mechanism that permits unique identification of a specific package that correlates to the data in this SPDX file
 * @member {String} checksum
 */
PackageInfoNote.prototype['checksum'] = undefined;

/**
 * Identify the copyright holders of the package, as well as any dates present
 * @member {String} copyright
 */
PackageInfoNote.prototype['copyright'] = undefined;

/**
 * A more detailed description of the package
 * @member {String} detailedDescription
 */
PackageInfoNote.prototype['detailedDescription'] = undefined;

/**
 * This section identifies the download Universal Resource Locator (URL), or a specific location within a version control system (VCS) for the package at the time that the SPDX file was created
 * @member {String} downloadLocation
 */
PackageInfoNote.prototype['downloadLocation'] = undefined;

/**
 * ExternalRef
 * @member {Array.<module:model/ExternalRef>} externalRefs
 */
PackageInfoNote.prototype['externalRefs'] = undefined;

/**
 * Contain the license the SPDX file creator has concluded as governing the This field is to contain a list of all licenses found in the package. The relationship between licenses (i.e., conjunctive, disjunctive) is not specified in this field – it is simply a listing of all licenses found
 * @member {Array.<String>} filesLicenseInfo
 */
PackageInfoNote.prototype['filesLicenseInfo'] = undefined;

/**
 * Provide a place for the SPDX file creator to record a web site that serves as the package's home page
 * @member {String} homePage
 */
PackageInfoNote.prototype['homePage'] = undefined;

/**
 * @member {module:model/License} licenseDeclared
 */
PackageInfoNote.prototype['licenseDeclared'] = undefined;

/**
 * If the package identified in the SPDX file originated from a different person or organization than identified as Package Supplier, this field identifies from where or whom the package originally came
 * @member {String} originator
 */
PackageInfoNote.prototype['originator'] = undefined;

/**
 * The type of package: OS, MAVEN, GO, GO_STDLIB, etc.
 * @member {String} packageType
 */
PackageInfoNote.prototype['packageType'] = undefined;

/**
 * A short description of the package
 * @member {String} summaryDescription
 */
PackageInfoNote.prototype['summaryDescription'] = undefined;

/**
 * Identify the actual distribution source for the package/directory identified in the SPDX file
 * @member {String} supplier
 */
PackageInfoNote.prototype['supplier'] = undefined;

/**
 * Identify the full name of the package as given by the Package Originator
 * @member {String} title
 */
PackageInfoNote.prototype['title'] = undefined;

/**
 * This field provides an independently reproducible mechanism identifying specific contents of a package based on the actual files (except the SPDX file itself, if it is included in the package) that make up each package and that correlates to the data in this SPDX file
 * @member {String} verificationCode
 */
PackageInfoNote.prototype['verificationCode'] = undefined;

/**
 * Identify the version of the package
 * @member {String} version
 */
PackageInfoNote.prototype['version'] = undefined;






export default PackageInfoNote;

