/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1alpha1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The BuildSignature model module.
 * @module model/BuildSignature
 * @version v1alpha1
 */
class BuildSignature {
    /**
     * Constructs a new <code>BuildSignature</code>.
     * Message encapsulating the signature of the verified build.
     * @alias module:model/BuildSignature
     */
    constructor() { 
        
        BuildSignature.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>BuildSignature</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BuildSignature} obj Optional instance to populate.
     * @return {module:model/BuildSignature} The populated <code>BuildSignature</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BuildSignature();

            if (data.hasOwnProperty('keyId')) {
                obj['keyId'] = ApiClient.convertToType(data['keyId'], 'String');
            }
            if (data.hasOwnProperty('keyType')) {
                obj['keyType'] = ApiClient.convertToType(data['keyType'], 'String');
            }
            if (data.hasOwnProperty('publicKey')) {
                obj['publicKey'] = ApiClient.convertToType(data['publicKey'], 'String');
            }
            if (data.hasOwnProperty('signature')) {
                obj['signature'] = ApiClient.convertToType(data['signature'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BuildSignature</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BuildSignature</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['keyId'] && !(typeof data['keyId'] === 'string' || data['keyId'] instanceof String)) {
            throw new Error("Expected the field `keyId` to be a primitive type in the JSON string but got " + data['keyId']);
        }
        // ensure the json data is a string
        if (data['keyType'] && !(typeof data['keyType'] === 'string' || data['keyType'] instanceof String)) {
            throw new Error("Expected the field `keyType` to be a primitive type in the JSON string but got " + data['keyType']);
        }
        // ensure the json data is a string
        if (data['publicKey'] && !(typeof data['publicKey'] === 'string' || data['publicKey'] instanceof String)) {
            throw new Error("Expected the field `publicKey` to be a primitive type in the JSON string but got " + data['publicKey']);
        }
        // ensure the json data is a string
        if (data['signature'] && !(typeof data['signature'] === 'string' || data['signature'] instanceof String)) {
            throw new Error("Expected the field `signature` to be a primitive type in the JSON string but got " + data['signature']);
        }

        return true;
    }


}



/**
 * An Id for the key used to sign. This could be either an Id for the key stored in `public_key` (such as the Id or fingerprint for a PGP key, or the CN for a cert), or a reference to an external key (such as a reference to a key in Cloud Key Management Service).
 * @member {String} keyId
 */
BuildSignature.prototype['keyId'] = undefined;

/**
 * The type of the key, either stored in `public_key` or referenced in `key_id`
 * @member {module:model/BuildSignature.KeyTypeEnum} keyType
 */
BuildSignature.prototype['keyType'] = undefined;

/**
 * Public key of the builder which can be used to verify that the related findings are valid and unchanged. If `key_type` is empty, this defaults to PEM encoded public keys. This field may be empty if `key_id` references an external key. For Cloud Build based signatures, this is a PEM encoded public key. To verify the Cloud Build signature, place the contents of this field into a file (public.pem). The signature field is base64-decoded into its binary representation in signature.bin, and the provenance bytes from `BuildDetails` are base64-decoded into a binary representation in signed.bin. OpenSSL can then verify the signature: `openssl sha256 -verify public.pem -signature signature.bin signed.bin`
 * @member {String} publicKey
 */
BuildSignature.prototype['publicKey'] = undefined;

/**
 * Signature of the related `BuildProvenance`, encoded in a base64 string.
 * @member {String} signature
 */
BuildSignature.prototype['signature'] = undefined;





/**
 * Allowed values for the <code>keyType</code> property.
 * @enum {String}
 * @readonly
 */
BuildSignature['KeyTypeEnum'] = {

    /**
     * value: "KEY_TYPE_UNSPECIFIED"
     * @const
     */
    "KEY_TYPE_UNSPECIFIED": "KEY_TYPE_UNSPECIFIED",

    /**
     * value: "PGP_ASCII_ARMORED"
     * @const
     */
    "PGP_ASCII_ARMORED": "PGP_ASCII_ARMORED",

    /**
     * value: "PKIX_PEM"
     * @const
     */
    "PKIX_PEM": "PKIX_PEM"
};



export default BuildSignature;

