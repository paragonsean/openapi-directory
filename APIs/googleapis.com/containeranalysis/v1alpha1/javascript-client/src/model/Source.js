/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1alpha1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FileHashes from './FileHashes';
import GoogleDevtoolsContaineranalysisV1alpha1SourceContext from './GoogleDevtoolsContaineranalysisV1alpha1SourceContext';
import RepoSource from './RepoSource';
import StorageSource from './StorageSource';

/**
 * The Source model module.
 * @module model/Source
 * @version v1alpha1
 */
class Source {
    /**
     * Constructs a new <code>Source</code>.
     * Source describes the location of the source used for the build.
     * @alias module:model/Source
     */
    constructor() { 
        
        Source.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Source</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Source} obj Optional instance to populate.
     * @return {module:model/Source} The populated <code>Source</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Source();

            if (data.hasOwnProperty('additionalContexts')) {
                obj['additionalContexts'] = ApiClient.convertToType(data['additionalContexts'], [GoogleDevtoolsContaineranalysisV1alpha1SourceContext]);
            }
            if (data.hasOwnProperty('artifactStorageSource')) {
                obj['artifactStorageSource'] = StorageSource.constructFromObject(data['artifactStorageSource']);
            }
            if (data.hasOwnProperty('context')) {
                obj['context'] = GoogleDevtoolsContaineranalysisV1alpha1SourceContext.constructFromObject(data['context']);
            }
            if (data.hasOwnProperty('fileHashes')) {
                obj['fileHashes'] = ApiClient.convertToType(data['fileHashes'], {'String': FileHashes});
            }
            if (data.hasOwnProperty('repoSource')) {
                obj['repoSource'] = RepoSource.constructFromObject(data['repoSource']);
            }
            if (data.hasOwnProperty('storageSource')) {
                obj['storageSource'] = StorageSource.constructFromObject(data['storageSource']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Source</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Source</code>.
     */
    static validateJSON(data) {
        if (data['additionalContexts']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['additionalContexts'])) {
                throw new Error("Expected the field `additionalContexts` to be an array in the JSON data but got " + data['additionalContexts']);
            }
            // validate the optional field `additionalContexts` (array)
            for (const item of data['additionalContexts']) {
                GoogleDevtoolsContaineranalysisV1alpha1SourceContext.validateJSON(item);
            };
        }
        // validate the optional field `artifactStorageSource`
        if (data['artifactStorageSource']) { // data not null
          StorageSource.validateJSON(data['artifactStorageSource']);
        }
        // validate the optional field `context`
        if (data['context']) { // data not null
          GoogleDevtoolsContaineranalysisV1alpha1SourceContext.validateJSON(data['context']);
        }
        // validate the optional field `repoSource`
        if (data['repoSource']) { // data not null
          RepoSource.validateJSON(data['repoSource']);
        }
        // validate the optional field `storageSource`
        if (data['storageSource']) { // data not null
          StorageSource.validateJSON(data['storageSource']);
        }

        return true;
    }


}



/**
 * If provided, some of the source code used for the build may be found in these locations, in the case where the source repository had multiple remotes or submodules. This list will not include the context specified in the context field.
 * @member {Array.<module:model/GoogleDevtoolsContaineranalysisV1alpha1SourceContext>} additionalContexts
 */
Source.prototype['additionalContexts'] = undefined;

/**
 * @member {module:model/StorageSource} artifactStorageSource
 */
Source.prototype['artifactStorageSource'] = undefined;

/**
 * @member {module:model/GoogleDevtoolsContaineranalysisV1alpha1SourceContext} context
 */
Source.prototype['context'] = undefined;

/**
 * Hash(es) of the build source, which can be used to verify that the original source integrity was maintained in the build. The keys to this map are file paths used as build source and the values contain the hash values for those files. If the build source came in a single package such as a gzipped tarfile (.tar.gz), the FileHash will be for the single path to that file.
 * @member {Object.<String, module:model/FileHashes>} fileHashes
 */
Source.prototype['fileHashes'] = undefined;

/**
 * @member {module:model/RepoSource} repoSource
 */
Source.prototype['repoSource'] = undefined;

/**
 * @member {module:model/StorageSource} storageSource
 */
Source.prototype['storageSource'] = undefined;






export default Source;

