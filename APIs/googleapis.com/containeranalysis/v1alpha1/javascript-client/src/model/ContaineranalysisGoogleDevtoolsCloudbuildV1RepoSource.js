/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1alpha1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource model module.
 * @module model/ContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource
 * @version v1alpha1
 */
class ContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource {
    /**
     * Constructs a new <code>ContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource</code>.
     * Location of the source in a Google Cloud Source Repository.
     * @alias module:model/ContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource
     */
    constructor() { 
        
        ContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource} obj Optional instance to populate.
     * @return {module:model/ContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource} The populated <code>ContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource();

            if (data.hasOwnProperty('branchName')) {
                obj['branchName'] = ApiClient.convertToType(data['branchName'], 'String');
            }
            if (data.hasOwnProperty('commitSha')) {
                obj['commitSha'] = ApiClient.convertToType(data['commitSha'], 'String');
            }
            if (data.hasOwnProperty('dir')) {
                obj['dir'] = ApiClient.convertToType(data['dir'], 'String');
            }
            if (data.hasOwnProperty('invertRegex')) {
                obj['invertRegex'] = ApiClient.convertToType(data['invertRegex'], 'Boolean');
            }
            if (data.hasOwnProperty('projectId')) {
                obj['projectId'] = ApiClient.convertToType(data['projectId'], 'String');
            }
            if (data.hasOwnProperty('repoName')) {
                obj['repoName'] = ApiClient.convertToType(data['repoName'], 'String');
            }
            if (data.hasOwnProperty('substitutions')) {
                obj['substitutions'] = ApiClient.convertToType(data['substitutions'], {'String': 'String'});
            }
            if (data.hasOwnProperty('tagName')) {
                obj['tagName'] = ApiClient.convertToType(data['tagName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['branchName'] && !(typeof data['branchName'] === 'string' || data['branchName'] instanceof String)) {
            throw new Error("Expected the field `branchName` to be a primitive type in the JSON string but got " + data['branchName']);
        }
        // ensure the json data is a string
        if (data['commitSha'] && !(typeof data['commitSha'] === 'string' || data['commitSha'] instanceof String)) {
            throw new Error("Expected the field `commitSha` to be a primitive type in the JSON string but got " + data['commitSha']);
        }
        // ensure the json data is a string
        if (data['dir'] && !(typeof data['dir'] === 'string' || data['dir'] instanceof String)) {
            throw new Error("Expected the field `dir` to be a primitive type in the JSON string but got " + data['dir']);
        }
        // ensure the json data is a string
        if (data['projectId'] && !(typeof data['projectId'] === 'string' || data['projectId'] instanceof String)) {
            throw new Error("Expected the field `projectId` to be a primitive type in the JSON string but got " + data['projectId']);
        }
        // ensure the json data is a string
        if (data['repoName'] && !(typeof data['repoName'] === 'string' || data['repoName'] instanceof String)) {
            throw new Error("Expected the field `repoName` to be a primitive type in the JSON string but got " + data['repoName']);
        }
        // ensure the json data is a string
        if (data['tagName'] && !(typeof data['tagName'] === 'string' || data['tagName'] instanceof String)) {
            throw new Error("Expected the field `tagName` to be a primitive type in the JSON string but got " + data['tagName']);
        }

        return true;
    }


}



/**
 * Regex matching branches to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax
 * @member {String} branchName
 */
ContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource.prototype['branchName'] = undefined;

/**
 * Explicit commit SHA to build.
 * @member {String} commitSha
 */
ContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource.prototype['commitSha'] = undefined;

/**
 * Directory, relative to the source root, in which to run the build. This must be a relative path. If a step's `dir` is specified and is an absolute path, this value is ignored for that step's execution.
 * @member {String} dir
 */
ContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource.prototype['dir'] = undefined;

/**
 * Only trigger a build if the revision regex does NOT match the revision regex.
 * @member {Boolean} invertRegex
 */
ContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource.prototype['invertRegex'] = undefined;

/**
 * ID of the project that owns the Cloud Source Repository. If omitted, the project ID requesting the build is assumed.
 * @member {String} projectId
 */
ContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource.prototype['projectId'] = undefined;

/**
 * Name of the Cloud Source Repository.
 * @member {String} repoName
 */
ContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource.prototype['repoName'] = undefined;

/**
 * Substitutions to use in a triggered build. Should only be used with RunBuildTrigger
 * @member {Object.<String, String>} substitutions
 */
ContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource.prototype['substitutions'] = undefined;

/**
 * Regex matching tags to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax
 * @member {String} tagName
 */
ContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource.prototype['tagName'] = undefined;






export default ContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource;

