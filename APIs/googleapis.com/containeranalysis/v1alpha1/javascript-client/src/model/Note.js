/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1alpha1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AttestationAuthority from './AttestationAuthority';
import Basis from './Basis';
import BuildType from './BuildType';
import ComplianceNote from './ComplianceNote';
import DSSEAttestationNote from './DSSEAttestationNote';
import Deployable from './Deployable';
import Discovery from './Discovery';
import DocumentNote from './DocumentNote';
import FileNote from './FileNote';
import Package from './Package';
import PackageInfoNote from './PackageInfoNote';
import RelatedUrl from './RelatedUrl';
import RelationshipNote from './RelationshipNote';
import SBOMReferenceNote from './SBOMReferenceNote';
import UpgradeNote from './UpgradeNote';
import VulnerabilityAssessmentNote from './VulnerabilityAssessmentNote';
import VulnerabilityType from './VulnerabilityType';

/**
 * The Note model module.
 * @module model/Note
 * @version v1alpha1
 */
class Note {
    /**
     * Constructs a new <code>Note</code>.
     * Provides a detailed description of a &#x60;Note&#x60;.
     * @alias module:model/Note
     */
    constructor() { 
        
        Note.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Note</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Note} obj Optional instance to populate.
     * @return {module:model/Note} The populated <code>Note</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Note();

            if (data.hasOwnProperty('attestationAuthority')) {
                obj['attestationAuthority'] = AttestationAuthority.constructFromObject(data['attestationAuthority']);
            }
            if (data.hasOwnProperty('baseImage')) {
                obj['baseImage'] = Basis.constructFromObject(data['baseImage']);
            }
            if (data.hasOwnProperty('buildType')) {
                obj['buildType'] = BuildType.constructFromObject(data['buildType']);
            }
            if (data.hasOwnProperty('compliance')) {
                obj['compliance'] = ComplianceNote.constructFromObject(data['compliance']);
            }
            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'String');
            }
            if (data.hasOwnProperty('deployable')) {
                obj['deployable'] = Deployable.constructFromObject(data['deployable']);
            }
            if (data.hasOwnProperty('discovery')) {
                obj['discovery'] = Discovery.constructFromObject(data['discovery']);
            }
            if (data.hasOwnProperty('dsseAttestation')) {
                obj['dsseAttestation'] = DSSEAttestationNote.constructFromObject(data['dsseAttestation']);
            }
            if (data.hasOwnProperty('expirationTime')) {
                obj['expirationTime'] = ApiClient.convertToType(data['expirationTime'], 'String');
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('longDescription')) {
                obj['longDescription'] = ApiClient.convertToType(data['longDescription'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('package')) {
                obj['package'] = Package.constructFromObject(data['package']);
            }
            if (data.hasOwnProperty('relatedUrl')) {
                obj['relatedUrl'] = ApiClient.convertToType(data['relatedUrl'], [RelatedUrl]);
            }
            if (data.hasOwnProperty('sbom')) {
                obj['sbom'] = DocumentNote.constructFromObject(data['sbom']);
            }
            if (data.hasOwnProperty('sbomReference')) {
                obj['sbomReference'] = SBOMReferenceNote.constructFromObject(data['sbomReference']);
            }
            if (data.hasOwnProperty('shortDescription')) {
                obj['shortDescription'] = ApiClient.convertToType(data['shortDescription'], 'String');
            }
            if (data.hasOwnProperty('spdxFile')) {
                obj['spdxFile'] = FileNote.constructFromObject(data['spdxFile']);
            }
            if (data.hasOwnProperty('spdxPackage')) {
                obj['spdxPackage'] = PackageInfoNote.constructFromObject(data['spdxPackage']);
            }
            if (data.hasOwnProperty('spdxRelationship')) {
                obj['spdxRelationship'] = RelationshipNote.constructFromObject(data['spdxRelationship']);
            }
            if (data.hasOwnProperty('updateTime')) {
                obj['updateTime'] = ApiClient.convertToType(data['updateTime'], 'String');
            }
            if (data.hasOwnProperty('upgrade')) {
                obj['upgrade'] = UpgradeNote.constructFromObject(data['upgrade']);
            }
            if (data.hasOwnProperty('vulnerabilityAssessment')) {
                obj['vulnerabilityAssessment'] = VulnerabilityAssessmentNote.constructFromObject(data['vulnerabilityAssessment']);
            }
            if (data.hasOwnProperty('vulnerabilityType')) {
                obj['vulnerabilityType'] = VulnerabilityType.constructFromObject(data['vulnerabilityType']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Note</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Note</code>.
     */
    static validateJSON(data) {
        // validate the optional field `attestationAuthority`
        if (data['attestationAuthority']) { // data not null
          AttestationAuthority.validateJSON(data['attestationAuthority']);
        }
        // validate the optional field `baseImage`
        if (data['baseImage']) { // data not null
          Basis.validateJSON(data['baseImage']);
        }
        // validate the optional field `buildType`
        if (data['buildType']) { // data not null
          BuildType.validateJSON(data['buildType']);
        }
        // validate the optional field `compliance`
        if (data['compliance']) { // data not null
          ComplianceNote.validateJSON(data['compliance']);
        }
        // ensure the json data is a string
        if (data['createTime'] && !(typeof data['createTime'] === 'string' || data['createTime'] instanceof String)) {
            throw new Error("Expected the field `createTime` to be a primitive type in the JSON string but got " + data['createTime']);
        }
        // validate the optional field `deployable`
        if (data['deployable']) { // data not null
          Deployable.validateJSON(data['deployable']);
        }
        // validate the optional field `discovery`
        if (data['discovery']) { // data not null
          Discovery.validateJSON(data['discovery']);
        }
        // validate the optional field `dsseAttestation`
        if (data['dsseAttestation']) { // data not null
          DSSEAttestationNote.validateJSON(data['dsseAttestation']);
        }
        // ensure the json data is a string
        if (data['expirationTime'] && !(typeof data['expirationTime'] === 'string' || data['expirationTime'] instanceof String)) {
            throw new Error("Expected the field `expirationTime` to be a primitive type in the JSON string but got " + data['expirationTime']);
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // ensure the json data is a string
        if (data['longDescription'] && !(typeof data['longDescription'] === 'string' || data['longDescription'] instanceof String)) {
            throw new Error("Expected the field `longDescription` to be a primitive type in the JSON string but got " + data['longDescription']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `package`
        if (data['package']) { // data not null
          Package.validateJSON(data['package']);
        }
        if (data['relatedUrl']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['relatedUrl'])) {
                throw new Error("Expected the field `relatedUrl` to be an array in the JSON data but got " + data['relatedUrl']);
            }
            // validate the optional field `relatedUrl` (array)
            for (const item of data['relatedUrl']) {
                RelatedUrl.validateJSON(item);
            };
        }
        // validate the optional field `sbom`
        if (data['sbom']) { // data not null
          DocumentNote.validateJSON(data['sbom']);
        }
        // validate the optional field `sbomReference`
        if (data['sbomReference']) { // data not null
          SBOMReferenceNote.validateJSON(data['sbomReference']);
        }
        // ensure the json data is a string
        if (data['shortDescription'] && !(typeof data['shortDescription'] === 'string' || data['shortDescription'] instanceof String)) {
            throw new Error("Expected the field `shortDescription` to be a primitive type in the JSON string but got " + data['shortDescription']);
        }
        // validate the optional field `spdxFile`
        if (data['spdxFile']) { // data not null
          FileNote.validateJSON(data['spdxFile']);
        }
        // validate the optional field `spdxPackage`
        if (data['spdxPackage']) { // data not null
          PackageInfoNote.validateJSON(data['spdxPackage']);
        }
        // validate the optional field `spdxRelationship`
        if (data['spdxRelationship']) { // data not null
          RelationshipNote.validateJSON(data['spdxRelationship']);
        }
        // ensure the json data is a string
        if (data['updateTime'] && !(typeof data['updateTime'] === 'string' || data['updateTime'] instanceof String)) {
            throw new Error("Expected the field `updateTime` to be a primitive type in the JSON string but got " + data['updateTime']);
        }
        // validate the optional field `upgrade`
        if (data['upgrade']) { // data not null
          UpgradeNote.validateJSON(data['upgrade']);
        }
        // validate the optional field `vulnerabilityAssessment`
        if (data['vulnerabilityAssessment']) { // data not null
          VulnerabilityAssessmentNote.validateJSON(data['vulnerabilityAssessment']);
        }
        // validate the optional field `vulnerabilityType`
        if (data['vulnerabilityType']) { // data not null
          VulnerabilityType.validateJSON(data['vulnerabilityType']);
        }

        return true;
    }


}



/**
 * @member {module:model/AttestationAuthority} attestationAuthority
 */
Note.prototype['attestationAuthority'] = undefined;

/**
 * @member {module:model/Basis} baseImage
 */
Note.prototype['baseImage'] = undefined;

/**
 * @member {module:model/BuildType} buildType
 */
Note.prototype['buildType'] = undefined;

/**
 * @member {module:model/ComplianceNote} compliance
 */
Note.prototype['compliance'] = undefined;

/**
 * Output only. The time this note was created. This field can be used as a filter in list requests.
 * @member {String} createTime
 */
Note.prototype['createTime'] = undefined;

/**
 * @member {module:model/Deployable} deployable
 */
Note.prototype['deployable'] = undefined;

/**
 * @member {module:model/Discovery} discovery
 */
Note.prototype['discovery'] = undefined;

/**
 * @member {module:model/DSSEAttestationNote} dsseAttestation
 */
Note.prototype['dsseAttestation'] = undefined;

/**
 * Time of expiration for this note, null if note does not expire.
 * @member {String} expirationTime
 */
Note.prototype['expirationTime'] = undefined;

/**
 * Output only. This explicitly denotes which kind of note is specified. This field can be used as a filter in list requests.
 * @member {module:model/Note.KindEnum} kind
 */
Note.prototype['kind'] = undefined;

/**
 * A detailed description of this `Note`.
 * @member {String} longDescription
 */
Note.prototype['longDescription'] = undefined;

/**
 * The name of the note in the form \"projects/{provider_project_id}/notes/{NOTE_ID}\"
 * @member {String} name
 */
Note.prototype['name'] = undefined;

/**
 * @member {module:model/Package} package
 */
Note.prototype['package'] = undefined;

/**
 * URLs associated with this note
 * @member {Array.<module:model/RelatedUrl>} relatedUrl
 */
Note.prototype['relatedUrl'] = undefined;

/**
 * @member {module:model/DocumentNote} sbom
 */
Note.prototype['sbom'] = undefined;

/**
 * @member {module:model/SBOMReferenceNote} sbomReference
 */
Note.prototype['sbomReference'] = undefined;

/**
 * A one sentence description of this `Note`.
 * @member {String} shortDescription
 */
Note.prototype['shortDescription'] = undefined;

/**
 * @member {module:model/FileNote} spdxFile
 */
Note.prototype['spdxFile'] = undefined;

/**
 * @member {module:model/PackageInfoNote} spdxPackage
 */
Note.prototype['spdxPackage'] = undefined;

/**
 * @member {module:model/RelationshipNote} spdxRelationship
 */
Note.prototype['spdxRelationship'] = undefined;

/**
 * Output only. The time this note was last updated. This field can be used as a filter in list requests.
 * @member {String} updateTime
 */
Note.prototype['updateTime'] = undefined;

/**
 * @member {module:model/UpgradeNote} upgrade
 */
Note.prototype['upgrade'] = undefined;

/**
 * @member {module:model/VulnerabilityAssessmentNote} vulnerabilityAssessment
 */
Note.prototype['vulnerabilityAssessment'] = undefined;

/**
 * @member {module:model/VulnerabilityType} vulnerabilityType
 */
Note.prototype['vulnerabilityType'] = undefined;





/**
 * Allowed values for the <code>kind</code> property.
 * @enum {String}
 * @readonly
 */
Note['KindEnum'] = {

    /**
     * value: "KIND_UNSPECIFIED"
     * @const
     */
    "KIND_UNSPECIFIED": "KIND_UNSPECIFIED",

    /**
     * value: "PACKAGE_VULNERABILITY"
     * @const
     */
    "PACKAGE_VULNERABILITY": "PACKAGE_VULNERABILITY",

    /**
     * value: "BUILD_DETAILS"
     * @const
     */
    "BUILD_DETAILS": "BUILD_DETAILS",

    /**
     * value: "IMAGE_BASIS"
     * @const
     */
    "IMAGE_BASIS": "IMAGE_BASIS",

    /**
     * value: "PACKAGE_MANAGER"
     * @const
     */
    "PACKAGE_MANAGER": "PACKAGE_MANAGER",

    /**
     * value: "DEPLOYABLE"
     * @const
     */
    "DEPLOYABLE": "DEPLOYABLE",

    /**
     * value: "DISCOVERY"
     * @const
     */
    "DISCOVERY": "DISCOVERY",

    /**
     * value: "ATTESTATION_AUTHORITY"
     * @const
     */
    "ATTESTATION_AUTHORITY": "ATTESTATION_AUTHORITY",

    /**
     * value: "UPGRADE"
     * @const
     */
    "UPGRADE": "UPGRADE",

    /**
     * value: "COMPLIANCE"
     * @const
     */
    "COMPLIANCE": "COMPLIANCE",

    /**
     * value: "SBOM"
     * @const
     */
    "SBOM": "SBOM",

    /**
     * value: "SPDX_PACKAGE"
     * @const
     */
    "SPDX_PACKAGE": "SPDX_PACKAGE",

    /**
     * value: "SPDX_FILE"
     * @const
     */
    "SPDX_FILE": "SPDX_FILE",

    /**
     * value: "SPDX_RELATIONSHIP"
     * @const
     */
    "SPDX_RELATIONSHIP": "SPDX_RELATIONSHIP",

    /**
     * value: "DSSE_ATTESTATION"
     * @const
     */
    "DSSE_ATTESTATION": "DSSE_ATTESTATION",

    /**
     * value: "VULNERABILITY_ASSESSMENT"
     * @const
     */
    "VULNERABILITY_ASSESSMENT": "VULNERABILITY_ASSESSMENT",

    /**
     * value: "SBOM_REFERENCE"
     * @const
     */
    "SBOM_REFERENCE": "SBOM_REFERENCE"
};



export default Note;

