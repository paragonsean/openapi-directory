/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1alpha1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Attestation from './Attestation';
import BuildDetails from './BuildDetails';
import ComplianceOccurrence from './ComplianceOccurrence';
import DSSEAttestationOccurrence from './DSSEAttestationOccurrence';
import Deployment from './Deployment';
import Derived from './Derived';
import Discovered from './Discovered';
import DocumentOccurrence from './DocumentOccurrence';
import Envelope from './Envelope';
import FileOccurrence from './FileOccurrence';
import Installation from './Installation';
import PackageInfoOccurrence from './PackageInfoOccurrence';
import RelationshipOccurrence from './RelationshipOccurrence';
import Resource from './Resource';
import SBOMReferenceOccurrence from './SBOMReferenceOccurrence';
import UpgradeOccurrence from './UpgradeOccurrence';
import VulnerabilityDetails from './VulnerabilityDetails';

/**
 * The Occurrence model module.
 * @module model/Occurrence
 * @version v1alpha1
 */
class Occurrence {
    /**
     * Constructs a new <code>Occurrence</code>.
     * &#x60;Occurrence&#x60; includes information about analysis occurrences for an image.
     * @alias module:model/Occurrence
     */
    constructor() { 
        
        Occurrence.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Occurrence</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Occurrence} obj Optional instance to populate.
     * @return {module:model/Occurrence} The populated <code>Occurrence</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Occurrence();

            if (data.hasOwnProperty('attestation')) {
                obj['attestation'] = Attestation.constructFromObject(data['attestation']);
            }
            if (data.hasOwnProperty('buildDetails')) {
                obj['buildDetails'] = BuildDetails.constructFromObject(data['buildDetails']);
            }
            if (data.hasOwnProperty('compliance')) {
                obj['compliance'] = ComplianceOccurrence.constructFromObject(data['compliance']);
            }
            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'String');
            }
            if (data.hasOwnProperty('deployment')) {
                obj['deployment'] = Deployment.constructFromObject(data['deployment']);
            }
            if (data.hasOwnProperty('derivedImage')) {
                obj['derivedImage'] = Derived.constructFromObject(data['derivedImage']);
            }
            if (data.hasOwnProperty('discovered')) {
                obj['discovered'] = Discovered.constructFromObject(data['discovered']);
            }
            if (data.hasOwnProperty('dsseAttestation')) {
                obj['dsseAttestation'] = DSSEAttestationOccurrence.constructFromObject(data['dsseAttestation']);
            }
            if (data.hasOwnProperty('envelope')) {
                obj['envelope'] = Envelope.constructFromObject(data['envelope']);
            }
            if (data.hasOwnProperty('installation')) {
                obj['installation'] = Installation.constructFromObject(data['installation']);
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('noteName')) {
                obj['noteName'] = ApiClient.convertToType(data['noteName'], 'String');
            }
            if (data.hasOwnProperty('remediation')) {
                obj['remediation'] = ApiClient.convertToType(data['remediation'], 'String');
            }
            if (data.hasOwnProperty('resource')) {
                obj['resource'] = Resource.constructFromObject(data['resource']);
            }
            if (data.hasOwnProperty('resourceUrl')) {
                obj['resourceUrl'] = ApiClient.convertToType(data['resourceUrl'], 'String');
            }
            if (data.hasOwnProperty('sbom')) {
                obj['sbom'] = DocumentOccurrence.constructFromObject(data['sbom']);
            }
            if (data.hasOwnProperty('sbomReference')) {
                obj['sbomReference'] = SBOMReferenceOccurrence.constructFromObject(data['sbomReference']);
            }
            if (data.hasOwnProperty('spdxFile')) {
                obj['spdxFile'] = FileOccurrence.constructFromObject(data['spdxFile']);
            }
            if (data.hasOwnProperty('spdxPackage')) {
                obj['spdxPackage'] = PackageInfoOccurrence.constructFromObject(data['spdxPackage']);
            }
            if (data.hasOwnProperty('spdxRelationship')) {
                obj['spdxRelationship'] = RelationshipOccurrence.constructFromObject(data['spdxRelationship']);
            }
            if (data.hasOwnProperty('updateTime')) {
                obj['updateTime'] = ApiClient.convertToType(data['updateTime'], 'String');
            }
            if (data.hasOwnProperty('upgrade')) {
                obj['upgrade'] = UpgradeOccurrence.constructFromObject(data['upgrade']);
            }
            if (data.hasOwnProperty('vulnerabilityDetails')) {
                obj['vulnerabilityDetails'] = VulnerabilityDetails.constructFromObject(data['vulnerabilityDetails']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Occurrence</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Occurrence</code>.
     */
    static validateJSON(data) {
        // validate the optional field `attestation`
        if (data['attestation']) { // data not null
          Attestation.validateJSON(data['attestation']);
        }
        // validate the optional field `buildDetails`
        if (data['buildDetails']) { // data not null
          BuildDetails.validateJSON(data['buildDetails']);
        }
        // validate the optional field `compliance`
        if (data['compliance']) { // data not null
          ComplianceOccurrence.validateJSON(data['compliance']);
        }
        // ensure the json data is a string
        if (data['createTime'] && !(typeof data['createTime'] === 'string' || data['createTime'] instanceof String)) {
            throw new Error("Expected the field `createTime` to be a primitive type in the JSON string but got " + data['createTime']);
        }
        // validate the optional field `deployment`
        if (data['deployment']) { // data not null
          Deployment.validateJSON(data['deployment']);
        }
        // validate the optional field `derivedImage`
        if (data['derivedImage']) { // data not null
          Derived.validateJSON(data['derivedImage']);
        }
        // validate the optional field `discovered`
        if (data['discovered']) { // data not null
          Discovered.validateJSON(data['discovered']);
        }
        // validate the optional field `dsseAttestation`
        if (data['dsseAttestation']) { // data not null
          DSSEAttestationOccurrence.validateJSON(data['dsseAttestation']);
        }
        // validate the optional field `envelope`
        if (data['envelope']) { // data not null
          Envelope.validateJSON(data['envelope']);
        }
        // validate the optional field `installation`
        if (data['installation']) { // data not null
          Installation.validateJSON(data['installation']);
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['noteName'] && !(typeof data['noteName'] === 'string' || data['noteName'] instanceof String)) {
            throw new Error("Expected the field `noteName` to be a primitive type in the JSON string but got " + data['noteName']);
        }
        // ensure the json data is a string
        if (data['remediation'] && !(typeof data['remediation'] === 'string' || data['remediation'] instanceof String)) {
            throw new Error("Expected the field `remediation` to be a primitive type in the JSON string but got " + data['remediation']);
        }
        // validate the optional field `resource`
        if (data['resource']) { // data not null
          Resource.validateJSON(data['resource']);
        }
        // ensure the json data is a string
        if (data['resourceUrl'] && !(typeof data['resourceUrl'] === 'string' || data['resourceUrl'] instanceof String)) {
            throw new Error("Expected the field `resourceUrl` to be a primitive type in the JSON string but got " + data['resourceUrl']);
        }
        // validate the optional field `sbom`
        if (data['sbom']) { // data not null
          DocumentOccurrence.validateJSON(data['sbom']);
        }
        // validate the optional field `sbomReference`
        if (data['sbomReference']) { // data not null
          SBOMReferenceOccurrence.validateJSON(data['sbomReference']);
        }
        // validate the optional field `spdxFile`
        if (data['spdxFile']) { // data not null
          FileOccurrence.validateJSON(data['spdxFile']);
        }
        // validate the optional field `spdxPackage`
        if (data['spdxPackage']) { // data not null
          PackageInfoOccurrence.validateJSON(data['spdxPackage']);
        }
        // validate the optional field `spdxRelationship`
        if (data['spdxRelationship']) { // data not null
          RelationshipOccurrence.validateJSON(data['spdxRelationship']);
        }
        // ensure the json data is a string
        if (data['updateTime'] && !(typeof data['updateTime'] === 'string' || data['updateTime'] instanceof String)) {
            throw new Error("Expected the field `updateTime` to be a primitive type in the JSON string but got " + data['updateTime']);
        }
        // validate the optional field `upgrade`
        if (data['upgrade']) { // data not null
          UpgradeOccurrence.validateJSON(data['upgrade']);
        }
        // validate the optional field `vulnerabilityDetails`
        if (data['vulnerabilityDetails']) { // data not null
          VulnerabilityDetails.validateJSON(data['vulnerabilityDetails']);
        }

        return true;
    }


}



/**
 * @member {module:model/Attestation} attestation
 */
Occurrence.prototype['attestation'] = undefined;

/**
 * @member {module:model/BuildDetails} buildDetails
 */
Occurrence.prototype['buildDetails'] = undefined;

/**
 * @member {module:model/ComplianceOccurrence} compliance
 */
Occurrence.prototype['compliance'] = undefined;

/**
 * Output only. The time this `Occurrence` was created.
 * @member {String} createTime
 */
Occurrence.prototype['createTime'] = undefined;

/**
 * @member {module:model/Deployment} deployment
 */
Occurrence.prototype['deployment'] = undefined;

/**
 * @member {module:model/Derived} derivedImage
 */
Occurrence.prototype['derivedImage'] = undefined;

/**
 * @member {module:model/Discovered} discovered
 */
Occurrence.prototype['discovered'] = undefined;

/**
 * @member {module:model/DSSEAttestationOccurrence} dsseAttestation
 */
Occurrence.prototype['dsseAttestation'] = undefined;

/**
 * @member {module:model/Envelope} envelope
 */
Occurrence.prototype['envelope'] = undefined;

/**
 * @member {module:model/Installation} installation
 */
Occurrence.prototype['installation'] = undefined;

/**
 * Output only. This explicitly denotes which of the `Occurrence` details are specified. This field can be used as a filter in list requests.
 * @member {module:model/Occurrence.KindEnum} kind
 */
Occurrence.prototype['kind'] = undefined;

/**
 * Output only. The name of the `Occurrence` in the form \"projects/{project_id}/occurrences/{OCCURRENCE_ID}\"
 * @member {String} name
 */
Occurrence.prototype['name'] = undefined;

/**
 * An analysis note associated with this image, in the form \"providers/{provider_id}/notes/{NOTE_ID}\" This field can be used as a filter in list requests.
 * @member {String} noteName
 */
Occurrence.prototype['noteName'] = undefined;

/**
 * A description of actions that can be taken to remedy the `Note`
 * @member {String} remediation
 */
Occurrence.prototype['remediation'] = undefined;

/**
 * @member {module:model/Resource} resource
 */
Occurrence.prototype['resource'] = undefined;

/**
 * The unique URL of the image or the container for which the `Occurrence` applies. For example, https://gcr.io/project/image@sha256:foo This field can be used as a filter in list requests.
 * @member {String} resourceUrl
 */
Occurrence.prototype['resourceUrl'] = undefined;

/**
 * @member {module:model/DocumentOccurrence} sbom
 */
Occurrence.prototype['sbom'] = undefined;

/**
 * @member {module:model/SBOMReferenceOccurrence} sbomReference
 */
Occurrence.prototype['sbomReference'] = undefined;

/**
 * @member {module:model/FileOccurrence} spdxFile
 */
Occurrence.prototype['spdxFile'] = undefined;

/**
 * @member {module:model/PackageInfoOccurrence} spdxPackage
 */
Occurrence.prototype['spdxPackage'] = undefined;

/**
 * @member {module:model/RelationshipOccurrence} spdxRelationship
 */
Occurrence.prototype['spdxRelationship'] = undefined;

/**
 * Output only. The time this `Occurrence` was last updated.
 * @member {String} updateTime
 */
Occurrence.prototype['updateTime'] = undefined;

/**
 * @member {module:model/UpgradeOccurrence} upgrade
 */
Occurrence.prototype['upgrade'] = undefined;

/**
 * @member {module:model/VulnerabilityDetails} vulnerabilityDetails
 */
Occurrence.prototype['vulnerabilityDetails'] = undefined;





/**
 * Allowed values for the <code>kind</code> property.
 * @enum {String}
 * @readonly
 */
Occurrence['KindEnum'] = {

    /**
     * value: "KIND_UNSPECIFIED"
     * @const
     */
    "KIND_UNSPECIFIED": "KIND_UNSPECIFIED",

    /**
     * value: "PACKAGE_VULNERABILITY"
     * @const
     */
    "PACKAGE_VULNERABILITY": "PACKAGE_VULNERABILITY",

    /**
     * value: "BUILD_DETAILS"
     * @const
     */
    "BUILD_DETAILS": "BUILD_DETAILS",

    /**
     * value: "IMAGE_BASIS"
     * @const
     */
    "IMAGE_BASIS": "IMAGE_BASIS",

    /**
     * value: "PACKAGE_MANAGER"
     * @const
     */
    "PACKAGE_MANAGER": "PACKAGE_MANAGER",

    /**
     * value: "DEPLOYABLE"
     * @const
     */
    "DEPLOYABLE": "DEPLOYABLE",

    /**
     * value: "DISCOVERY"
     * @const
     */
    "DISCOVERY": "DISCOVERY",

    /**
     * value: "ATTESTATION_AUTHORITY"
     * @const
     */
    "ATTESTATION_AUTHORITY": "ATTESTATION_AUTHORITY",

    /**
     * value: "UPGRADE"
     * @const
     */
    "UPGRADE": "UPGRADE",

    /**
     * value: "COMPLIANCE"
     * @const
     */
    "COMPLIANCE": "COMPLIANCE",

    /**
     * value: "SBOM"
     * @const
     */
    "SBOM": "SBOM",

    /**
     * value: "SPDX_PACKAGE"
     * @const
     */
    "SPDX_PACKAGE": "SPDX_PACKAGE",

    /**
     * value: "SPDX_FILE"
     * @const
     */
    "SPDX_FILE": "SPDX_FILE",

    /**
     * value: "SPDX_RELATIONSHIP"
     * @const
     */
    "SPDX_RELATIONSHIP": "SPDX_RELATIONSHIP",

    /**
     * value: "DSSE_ATTESTATION"
     * @const
     */
    "DSSE_ATTESTATION": "DSSE_ATTESTATION",

    /**
     * value: "VULNERABILITY_ASSESSMENT"
     * @const
     */
    "VULNERABILITY_ASSESSMENT": "VULNERABILITY_ASSESSMENT",

    /**
     * value: "SBOM_REFERENCE"
     * @const
     */
    "SBOM_REFERENCE": "SBOM_REFERENCE"
};



export default Occurrence;

