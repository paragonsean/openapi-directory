/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1alpha1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Recipe model module.
 * @module model/Recipe
 * @version v1alpha1
 */
class Recipe {
    /**
     * Constructs a new <code>Recipe</code>.
     * Steps taken to build the artifact. For a TaskRun, typically each container corresponds to one step in the recipe.
     * @alias module:model/Recipe
     */
    constructor() { 
        
        Recipe.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Recipe</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Recipe} obj Optional instance to populate.
     * @return {module:model/Recipe} The populated <code>Recipe</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Recipe();

            if (data.hasOwnProperty('arguments')) {
                obj['arguments'] = ApiClient.convertToType(data['arguments'], [{'String': Object}]);
            }
            if (data.hasOwnProperty('definedInMaterial')) {
                obj['definedInMaterial'] = ApiClient.convertToType(data['definedInMaterial'], 'String');
            }
            if (data.hasOwnProperty('entryPoint')) {
                obj['entryPoint'] = ApiClient.convertToType(data['entryPoint'], 'String');
            }
            if (data.hasOwnProperty('environment')) {
                obj['environment'] = ApiClient.convertToType(data['environment'], [{'String': Object}]);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Recipe</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Recipe</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['arguments'])) {
            throw new Error("Expected the field `arguments` to be an array in the JSON data but got " + data['arguments']);
        }
        // ensure the json data is a string
        if (data['definedInMaterial'] && !(typeof data['definedInMaterial'] === 'string' || data['definedInMaterial'] instanceof String)) {
            throw new Error("Expected the field `definedInMaterial` to be a primitive type in the JSON string but got " + data['definedInMaterial']);
        }
        // ensure the json data is a string
        if (data['entryPoint'] && !(typeof data['entryPoint'] === 'string' || data['entryPoint'] instanceof String)) {
            throw new Error("Expected the field `entryPoint` to be a primitive type in the JSON string but got " + data['entryPoint']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['environment'])) {
            throw new Error("Expected the field `environment` to be an array in the JSON data but got " + data['environment']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * Collection of all external inputs that influenced the build on top of recipe.definedInMaterial and recipe.entryPoint. For example, if the recipe type were \"make\", then this might be the flags passed to make aside from the target, which is captured in recipe.entryPoint.
 * @member {Array.<Object.<String, Object>>} arguments
 */
Recipe.prototype['arguments'] = undefined;

/**
 * Index in materials containing the recipe steps that are not implied by recipe.type. For example, if the recipe type were \"make\", then this would point to the source containing the Makefile, not the make program itself. Set to -1 if the recipe doesn't come from a material, as zero is default unset value for int64.
 * @member {String} definedInMaterial
 */
Recipe.prototype['definedInMaterial'] = undefined;

/**
 * String identifying the entry point into the build. This is often a path to a configuration file and/or a target label within that file. The syntax and meaning are defined by recipe.type. For example, if the recipe type were \"make\", then this would reference the directory in which to run make as well as which target to use.
 * @member {String} entryPoint
 */
Recipe.prototype['entryPoint'] = undefined;

/**
 * Any other builder-controlled inputs necessary for correctly evaluating the recipe. Usually only needed for reproducing the build but not evaluated as part of policy.
 * @member {Array.<Object.<String, Object>>} environment
 */
Recipe.prototype['environment'] = undefined;

/**
 * URI indicating what type of recipe was performed. It determines the meaning of recipe.entryPoint, recipe.arguments, recipe.environment, and materials.
 * @member {String} type
 */
Recipe.prototype['type'] = undefined;






export default Recipe;

