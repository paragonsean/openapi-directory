/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1alpha1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CVSS from './CVSS';
import PackageIssue from './PackageIssue';
import VexAssessment from './VexAssessment';

/**
 * The VulnerabilityDetails model module.
 * @module model/VulnerabilityDetails
 * @version v1alpha1
 */
class VulnerabilityDetails {
    /**
     * Constructs a new <code>VulnerabilityDetails</code>.
     * Used by Occurrence to point to where the vulnerability exists and how to fix it.
     * @alias module:model/VulnerabilityDetails
     */
    constructor() { 
        
        VulnerabilityDetails.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>VulnerabilityDetails</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VulnerabilityDetails} obj Optional instance to populate.
     * @return {module:model/VulnerabilityDetails} The populated <code>VulnerabilityDetails</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VulnerabilityDetails();

            if (data.hasOwnProperty('cvssScore')) {
                obj['cvssScore'] = ApiClient.convertToType(data['cvssScore'], 'Number');
            }
            if (data.hasOwnProperty('cvssV2')) {
                obj['cvssV2'] = CVSS.constructFromObject(data['cvssV2']);
            }
            if (data.hasOwnProperty('cvssV3')) {
                obj['cvssV3'] = CVSS.constructFromObject(data['cvssV3']);
            }
            if (data.hasOwnProperty('cvssVersion')) {
                obj['cvssVersion'] = ApiClient.convertToType(data['cvssVersion'], 'String');
            }
            if (data.hasOwnProperty('effectiveSeverity')) {
                obj['effectiveSeverity'] = ApiClient.convertToType(data['effectiveSeverity'], 'String');
            }
            if (data.hasOwnProperty('extraDetails')) {
                obj['extraDetails'] = ApiClient.convertToType(data['extraDetails'], 'String');
            }
            if (data.hasOwnProperty('packageIssue')) {
                obj['packageIssue'] = ApiClient.convertToType(data['packageIssue'], [PackageIssue]);
            }
            if (data.hasOwnProperty('severity')) {
                obj['severity'] = ApiClient.convertToType(data['severity'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('vexAssessment')) {
                obj['vexAssessment'] = VexAssessment.constructFromObject(data['vexAssessment']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>VulnerabilityDetails</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>VulnerabilityDetails</code>.
     */
    static validateJSON(data) {
        // validate the optional field `cvssV2`
        if (data['cvssV2']) { // data not null
          CVSS.validateJSON(data['cvssV2']);
        }
        // validate the optional field `cvssV3`
        if (data['cvssV3']) { // data not null
          CVSS.validateJSON(data['cvssV3']);
        }
        // ensure the json data is a string
        if (data['cvssVersion'] && !(typeof data['cvssVersion'] === 'string' || data['cvssVersion'] instanceof String)) {
            throw new Error("Expected the field `cvssVersion` to be a primitive type in the JSON string but got " + data['cvssVersion']);
        }
        // ensure the json data is a string
        if (data['effectiveSeverity'] && !(typeof data['effectiveSeverity'] === 'string' || data['effectiveSeverity'] instanceof String)) {
            throw new Error("Expected the field `effectiveSeverity` to be a primitive type in the JSON string but got " + data['effectiveSeverity']);
        }
        // ensure the json data is a string
        if (data['extraDetails'] && !(typeof data['extraDetails'] === 'string' || data['extraDetails'] instanceof String)) {
            throw new Error("Expected the field `extraDetails` to be a primitive type in the JSON string but got " + data['extraDetails']);
        }
        if (data['packageIssue']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['packageIssue'])) {
                throw new Error("Expected the field `packageIssue` to be an array in the JSON data but got " + data['packageIssue']);
            }
            // validate the optional field `packageIssue` (array)
            for (const item of data['packageIssue']) {
                PackageIssue.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['severity'] && !(typeof data['severity'] === 'string' || data['severity'] instanceof String)) {
            throw new Error("Expected the field `severity` to be a primitive type in the JSON string but got " + data['severity']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // validate the optional field `vexAssessment`
        if (data['vexAssessment']) { // data not null
          VexAssessment.validateJSON(data['vexAssessment']);
        }

        return true;
    }


}



/**
 * Output only. The CVSS score of this vulnerability. CVSS score is on a scale of 0-10 where 0 indicates low severity and 10 indicates high severity.
 * @member {Number} cvssScore
 */
VulnerabilityDetails.prototype['cvssScore'] = undefined;

/**
 * @member {module:model/CVSS} cvssV2
 */
VulnerabilityDetails.prototype['cvssV2'] = undefined;

/**
 * @member {module:model/CVSS} cvssV3
 */
VulnerabilityDetails.prototype['cvssV3'] = undefined;

/**
 * Output only. CVSS version used to populate cvss_score and severity.
 * @member {module:model/VulnerabilityDetails.CvssVersionEnum} cvssVersion
 */
VulnerabilityDetails.prototype['cvssVersion'] = undefined;

/**
 * The distro assigned severity for this vulnerability when that is available and note provider assigned severity when distro has not yet assigned a severity for this vulnerability. When there are multiple package issues for this vulnerability, they can have different effective severities because some might come from the distro and some might come from installed language packs (e.g. Maven JARs or Go binaries). For this reason, it is advised to use the effective severity on the PackageIssue level, as this field may eventually be deprecated. In the case where multiple PackageIssues have different effective severities, the one set here will be the highest severity of any of the PackageIssues.
 * @member {module:model/VulnerabilityDetails.EffectiveSeverityEnum} effectiveSeverity
 */
VulnerabilityDetails.prototype['effectiveSeverity'] = undefined;

/**
 * Occurrence-specific extra details about the vulnerability.
 * @member {String} extraDetails
 */
VulnerabilityDetails.prototype['extraDetails'] = undefined;

/**
 * The set of affected locations and their fixes (if available) within the associated resource.
 * @member {Array.<module:model/PackageIssue>} packageIssue
 */
VulnerabilityDetails.prototype['packageIssue'] = undefined;

/**
 * Output only. The note provider assigned Severity of the vulnerability.
 * @member {module:model/VulnerabilityDetails.SeverityEnum} severity
 */
VulnerabilityDetails.prototype['severity'] = undefined;

/**
 * The type of package; whether native or non native(ruby gems, node.js packages etc). This may be deprecated in the future because we can have multiple PackageIssues with different package types.
 * @member {String} type
 */
VulnerabilityDetails.prototype['type'] = undefined;

/**
 * @member {module:model/VexAssessment} vexAssessment
 */
VulnerabilityDetails.prototype['vexAssessment'] = undefined;





/**
 * Allowed values for the <code>cvssVersion</code> property.
 * @enum {String}
 * @readonly
 */
VulnerabilityDetails['CvssVersionEnum'] = {

    /**
     * value: "CVSS_VERSION_UNSPECIFIED"
     * @const
     */
    "UNSPECIFIED": "CVSS_VERSION_UNSPECIFIED",

    /**
     * value: "CVSS_VERSION_2"
     * @const
     */
    "2": "CVSS_VERSION_2",

    /**
     * value: "CVSS_VERSION_3"
     * @const
     */
    "3": "CVSS_VERSION_3"
};


/**
 * Allowed values for the <code>effectiveSeverity</code> property.
 * @enum {String}
 * @readonly
 */
VulnerabilityDetails['EffectiveSeverityEnum'] = {

    /**
     * value: "SEVERITY_UNSPECIFIED"
     * @const
     */
    "SEVERITY_UNSPECIFIED": "SEVERITY_UNSPECIFIED",

    /**
     * value: "MINIMAL"
     * @const
     */
    "MINIMAL": "MINIMAL",

    /**
     * value: "LOW"
     * @const
     */
    "LOW": "LOW",

    /**
     * value: "MEDIUM"
     * @const
     */
    "MEDIUM": "MEDIUM",

    /**
     * value: "HIGH"
     * @const
     */
    "HIGH": "HIGH",

    /**
     * value: "CRITICAL"
     * @const
     */
    "CRITICAL": "CRITICAL"
};


/**
 * Allowed values for the <code>severity</code> property.
 * @enum {String}
 * @readonly
 */
VulnerabilityDetails['SeverityEnum'] = {

    /**
     * value: "SEVERITY_UNSPECIFIED"
     * @const
     */
    "SEVERITY_UNSPECIFIED": "SEVERITY_UNSPECIFIED",

    /**
     * value: "MINIMAL"
     * @const
     */
    "MINIMAL": "MINIMAL",

    /**
     * value: "LOW"
     * @const
     */
    "LOW": "LOW",

    /**
     * value: "MEDIUM"
     * @const
     */
    "MEDIUM": "MEDIUM",

    /**
     * value: "HIGH"
     * @const
     */
    "HIGH": "HIGH",

    /**
     * value: "CRITICAL"
     * @const
     */
    "CRITICAL": "CRITICAL"
};



export default VulnerabilityDetails;

