/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1alpha1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRelationshipOccurrence.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRelationshipOccurrence::OAIRelationshipOccurrence(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRelationshipOccurrence::OAIRelationshipOccurrence() {
    this->initializeModel();
}

OAIRelationshipOccurrence::~OAIRelationshipOccurrence() {}

void OAIRelationshipOccurrence::initializeModel() {

    m_comment_isSet = false;
    m_comment_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;

    m_target_isSet = false;
    m_target_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIRelationshipOccurrence::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRelationshipOccurrence::fromJsonObject(QJsonObject json) {

    m_comment_isValid = ::OpenAPI::fromJsonValue(m_comment, json[QString("comment")]);
    m_comment_isSet = !json[QString("comment")].isNull() && m_comment_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;

    m_target_isValid = ::OpenAPI::fromJsonValue(m_target, json[QString("target")]);
    m_target_isSet = !json[QString("target")].isNull() && m_target_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIRelationshipOccurrence::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRelationshipOccurrence::asJsonObject() const {
    QJsonObject obj;
    if (m_comment_isSet) {
        obj.insert(QString("comment"), ::OpenAPI::toJsonValue(m_comment));
    }
    if (m_source_isSet) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_target_isSet) {
        obj.insert(QString("target"), ::OpenAPI::toJsonValue(m_target));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIRelationshipOccurrence::getComment() const {
    return m_comment;
}
void OAIRelationshipOccurrence::setComment(const QString &comment) {
    m_comment = comment;
    m_comment_isSet = true;
}

bool OAIRelationshipOccurrence::is_comment_Set() const{
    return m_comment_isSet;
}

bool OAIRelationshipOccurrence::is_comment_Valid() const{
    return m_comment_isValid;
}

QString OAIRelationshipOccurrence::getSource() const {
    return m_source;
}
void OAIRelationshipOccurrence::setSource(const QString &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIRelationshipOccurrence::is_source_Set() const{
    return m_source_isSet;
}

bool OAIRelationshipOccurrence::is_source_Valid() const{
    return m_source_isValid;
}

QString OAIRelationshipOccurrence::getTarget() const {
    return m_target;
}
void OAIRelationshipOccurrence::setTarget(const QString &target) {
    m_target = target;
    m_target_isSet = true;
}

bool OAIRelationshipOccurrence::is_target_Set() const{
    return m_target_isSet;
}

bool OAIRelationshipOccurrence::is_target_Valid() const{
    return m_target_isValid;
}

QString OAIRelationshipOccurrence::getType() const {
    return m_type;
}
void OAIRelationshipOccurrence::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIRelationshipOccurrence::is_type_Set() const{
    return m_type_isSet;
}

bool OAIRelationshipOccurrence::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIRelationshipOccurrence::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_comment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRelationshipOccurrence::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
