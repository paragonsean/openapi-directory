/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1alpha1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIContaineranalysisGoogleDevtoolsCloudbuildV1ApprovalResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIContaineranalysisGoogleDevtoolsCloudbuildV1ApprovalResult::OAIContaineranalysisGoogleDevtoolsCloudbuildV1ApprovalResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIContaineranalysisGoogleDevtoolsCloudbuildV1ApprovalResult::OAIContaineranalysisGoogleDevtoolsCloudbuildV1ApprovalResult() {
    this->initializeModel();
}

OAIContaineranalysisGoogleDevtoolsCloudbuildV1ApprovalResult::~OAIContaineranalysisGoogleDevtoolsCloudbuildV1ApprovalResult() {}

void OAIContaineranalysisGoogleDevtoolsCloudbuildV1ApprovalResult::initializeModel() {

    m_approval_time_isSet = false;
    m_approval_time_isValid = false;

    m_approver_account_isSet = false;
    m_approver_account_isValid = false;

    m_comment_isSet = false;
    m_comment_isValid = false;

    m_decision_isSet = false;
    m_decision_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIContaineranalysisGoogleDevtoolsCloudbuildV1ApprovalResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIContaineranalysisGoogleDevtoolsCloudbuildV1ApprovalResult::fromJsonObject(QJsonObject json) {

    m_approval_time_isValid = ::OpenAPI::fromJsonValue(m_approval_time, json[QString("approvalTime")]);
    m_approval_time_isSet = !json[QString("approvalTime")].isNull() && m_approval_time_isValid;

    m_approver_account_isValid = ::OpenAPI::fromJsonValue(m_approver_account, json[QString("approverAccount")]);
    m_approver_account_isSet = !json[QString("approverAccount")].isNull() && m_approver_account_isValid;

    m_comment_isValid = ::OpenAPI::fromJsonValue(m_comment, json[QString("comment")]);
    m_comment_isSet = !json[QString("comment")].isNull() && m_comment_isValid;

    m_decision_isValid = ::OpenAPI::fromJsonValue(m_decision, json[QString("decision")]);
    m_decision_isSet = !json[QString("decision")].isNull() && m_decision_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIContaineranalysisGoogleDevtoolsCloudbuildV1ApprovalResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIContaineranalysisGoogleDevtoolsCloudbuildV1ApprovalResult::asJsonObject() const {
    QJsonObject obj;
    if (m_approval_time_isSet) {
        obj.insert(QString("approvalTime"), ::OpenAPI::toJsonValue(m_approval_time));
    }
    if (m_approver_account_isSet) {
        obj.insert(QString("approverAccount"), ::OpenAPI::toJsonValue(m_approver_account));
    }
    if (m_comment_isSet) {
        obj.insert(QString("comment"), ::OpenAPI::toJsonValue(m_comment));
    }
    if (m_decision_isSet) {
        obj.insert(QString("decision"), ::OpenAPI::toJsonValue(m_decision));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAIContaineranalysisGoogleDevtoolsCloudbuildV1ApprovalResult::getApprovalTime() const {
    return m_approval_time;
}
void OAIContaineranalysisGoogleDevtoolsCloudbuildV1ApprovalResult::setApprovalTime(const QString &approval_time) {
    m_approval_time = approval_time;
    m_approval_time_isSet = true;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1ApprovalResult::is_approval_time_Set() const{
    return m_approval_time_isSet;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1ApprovalResult::is_approval_time_Valid() const{
    return m_approval_time_isValid;
}

QString OAIContaineranalysisGoogleDevtoolsCloudbuildV1ApprovalResult::getApproverAccount() const {
    return m_approver_account;
}
void OAIContaineranalysisGoogleDevtoolsCloudbuildV1ApprovalResult::setApproverAccount(const QString &approver_account) {
    m_approver_account = approver_account;
    m_approver_account_isSet = true;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1ApprovalResult::is_approver_account_Set() const{
    return m_approver_account_isSet;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1ApprovalResult::is_approver_account_Valid() const{
    return m_approver_account_isValid;
}

QString OAIContaineranalysisGoogleDevtoolsCloudbuildV1ApprovalResult::getComment() const {
    return m_comment;
}
void OAIContaineranalysisGoogleDevtoolsCloudbuildV1ApprovalResult::setComment(const QString &comment) {
    m_comment = comment;
    m_comment_isSet = true;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1ApprovalResult::is_comment_Set() const{
    return m_comment_isSet;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1ApprovalResult::is_comment_Valid() const{
    return m_comment_isValid;
}

QString OAIContaineranalysisGoogleDevtoolsCloudbuildV1ApprovalResult::getDecision() const {
    return m_decision;
}
void OAIContaineranalysisGoogleDevtoolsCloudbuildV1ApprovalResult::setDecision(const QString &decision) {
    m_decision = decision;
    m_decision_isSet = true;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1ApprovalResult::is_decision_Set() const{
    return m_decision_isSet;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1ApprovalResult::is_decision_Valid() const{
    return m_decision_isValid;
}

QString OAIContaineranalysisGoogleDevtoolsCloudbuildV1ApprovalResult::getUrl() const {
    return m_url;
}
void OAIContaineranalysisGoogleDevtoolsCloudbuildV1ApprovalResult::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1ApprovalResult::is_url_Set() const{
    return m_url_isSet;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1ApprovalResult::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1ApprovalResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_approval_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_approver_account_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_comment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_decision_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1ApprovalResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
