/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1alpha1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISBOMReferenceNote.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISBOMReferenceNote::OAISBOMReferenceNote(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISBOMReferenceNote::OAISBOMReferenceNote() {
    this->initializeModel();
}

OAISBOMReferenceNote::~OAISBOMReferenceNote() {}

void OAISBOMReferenceNote::initializeModel() {

    m_format_isSet = false;
    m_format_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAISBOMReferenceNote::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISBOMReferenceNote::fromJsonObject(QJsonObject json) {

    m_format_isValid = ::OpenAPI::fromJsonValue(m_format, json[QString("format")]);
    m_format_isSet = !json[QString("format")].isNull() && m_format_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAISBOMReferenceNote::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISBOMReferenceNote::asJsonObject() const {
    QJsonObject obj;
    if (m_format_isSet) {
        obj.insert(QString("format"), ::OpenAPI::toJsonValue(m_format));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QString OAISBOMReferenceNote::getFormat() const {
    return m_format;
}
void OAISBOMReferenceNote::setFormat(const QString &format) {
    m_format = format;
    m_format_isSet = true;
}

bool OAISBOMReferenceNote::is_format_Set() const{
    return m_format_isSet;
}

bool OAISBOMReferenceNote::is_format_Valid() const{
    return m_format_isValid;
}

QString OAISBOMReferenceNote::getVersion() const {
    return m_version;
}
void OAISBOMReferenceNote::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAISBOMReferenceNote::is_version_Set() const{
    return m_version_isSet;
}

bool OAISBOMReferenceNote::is_version_Valid() const{
    return m_version_isValid;
}

bool OAISBOMReferenceNote::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISBOMReferenceNote::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
