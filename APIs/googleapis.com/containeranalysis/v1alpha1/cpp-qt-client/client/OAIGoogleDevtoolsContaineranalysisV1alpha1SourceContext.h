/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1alpha1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGoogleDevtoolsContaineranalysisV1alpha1SourceContext.h
 *
 * A SourceContext is a reference to a tree of files. A SourceContext together with a path point to a unique revision of a single file or directory.
 */

#ifndef OAIGoogleDevtoolsContaineranalysisV1alpha1SourceContext_H
#define OAIGoogleDevtoolsContaineranalysisV1alpha1SourceContext_H

#include <QJsonObject>

#include "OAIGoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContext.h"
#include "OAIGoogleDevtoolsContaineranalysisV1alpha1GerritSourceContext.h"
#include "OAIGoogleDevtoolsContaineranalysisV1alpha1GitSourceContext.h"
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIGoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContext;
class OAIGoogleDevtoolsContaineranalysisV1alpha1GerritSourceContext;
class OAIGoogleDevtoolsContaineranalysisV1alpha1GitSourceContext;

class OAIGoogleDevtoolsContaineranalysisV1alpha1SourceContext : public OAIObject {
public:
    OAIGoogleDevtoolsContaineranalysisV1alpha1SourceContext();
    OAIGoogleDevtoolsContaineranalysisV1alpha1SourceContext(QString json);
    ~OAIGoogleDevtoolsContaineranalysisV1alpha1SourceContext() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIGoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContext getCloudRepo() const;
    void setCloudRepo(const OAIGoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContext &cloud_repo);
    bool is_cloud_repo_Set() const;
    bool is_cloud_repo_Valid() const;

    OAIGoogleDevtoolsContaineranalysisV1alpha1GerritSourceContext getGerrit() const;
    void setGerrit(const OAIGoogleDevtoolsContaineranalysisV1alpha1GerritSourceContext &gerrit);
    bool is_gerrit_Set() const;
    bool is_gerrit_Valid() const;

    OAIGoogleDevtoolsContaineranalysisV1alpha1GitSourceContext getGit() const;
    void setGit(const OAIGoogleDevtoolsContaineranalysisV1alpha1GitSourceContext &git);
    bool is_git_Set() const;
    bool is_git_Valid() const;

    QMap<QString, QString> getLabels() const;
    void setLabels(const QMap<QString, QString> &labels);
    bool is_labels_Set() const;
    bool is_labels_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIGoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContext m_cloud_repo;
    bool m_cloud_repo_isSet;
    bool m_cloud_repo_isValid;

    OAIGoogleDevtoolsContaineranalysisV1alpha1GerritSourceContext m_gerrit;
    bool m_gerrit_isSet;
    bool m_gerrit_isValid;

    OAIGoogleDevtoolsContaineranalysisV1alpha1GitSourceContext m_git;
    bool m_git_isSet;
    bool m_git_isValid;

    QMap<QString, QString> m_labels;
    bool m_labels_isSet;
    bool m_labels_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGoogleDevtoolsContaineranalysisV1alpha1SourceContext)

#endif // OAIGoogleDevtoolsContaineranalysisV1alpha1SourceContext_H
