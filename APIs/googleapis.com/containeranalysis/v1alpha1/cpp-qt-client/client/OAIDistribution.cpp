/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1alpha1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDistribution.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDistribution::OAIDistribution(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDistribution::OAIDistribution() {
    this->initializeModel();
}

OAIDistribution::~OAIDistribution() {}

void OAIDistribution::initializeModel() {

    m_architecture_isSet = false;
    m_architecture_isValid = false;

    m_cpe_uri_isSet = false;
    m_cpe_uri_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_latest_version_isSet = false;
    m_latest_version_isValid = false;

    m_maintainer_isSet = false;
    m_maintainer_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIDistribution::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDistribution::fromJsonObject(QJsonObject json) {

    m_architecture_isValid = ::OpenAPI::fromJsonValue(m_architecture, json[QString("architecture")]);
    m_architecture_isSet = !json[QString("architecture")].isNull() && m_architecture_isValid;

    m_cpe_uri_isValid = ::OpenAPI::fromJsonValue(m_cpe_uri, json[QString("cpeUri")]);
    m_cpe_uri_isSet = !json[QString("cpeUri")].isNull() && m_cpe_uri_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_latest_version_isValid = ::OpenAPI::fromJsonValue(m_latest_version, json[QString("latestVersion")]);
    m_latest_version_isSet = !json[QString("latestVersion")].isNull() && m_latest_version_isValid;

    m_maintainer_isValid = ::OpenAPI::fromJsonValue(m_maintainer, json[QString("maintainer")]);
    m_maintainer_isSet = !json[QString("maintainer")].isNull() && m_maintainer_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIDistribution::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDistribution::asJsonObject() const {
    QJsonObject obj;
    if (m_architecture_isSet) {
        obj.insert(QString("architecture"), ::OpenAPI::toJsonValue(m_architecture));
    }
    if (m_cpe_uri_isSet) {
        obj.insert(QString("cpeUri"), ::OpenAPI::toJsonValue(m_cpe_uri));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_latest_version.isSet()) {
        obj.insert(QString("latestVersion"), ::OpenAPI::toJsonValue(m_latest_version));
    }
    if (m_maintainer_isSet) {
        obj.insert(QString("maintainer"), ::OpenAPI::toJsonValue(m_maintainer));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAIDistribution::getArchitecture() const {
    return m_architecture;
}
void OAIDistribution::setArchitecture(const QString &architecture) {
    m_architecture = architecture;
    m_architecture_isSet = true;
}

bool OAIDistribution::is_architecture_Set() const{
    return m_architecture_isSet;
}

bool OAIDistribution::is_architecture_Valid() const{
    return m_architecture_isValid;
}

QString OAIDistribution::getCpeUri() const {
    return m_cpe_uri;
}
void OAIDistribution::setCpeUri(const QString &cpe_uri) {
    m_cpe_uri = cpe_uri;
    m_cpe_uri_isSet = true;
}

bool OAIDistribution::is_cpe_uri_Set() const{
    return m_cpe_uri_isSet;
}

bool OAIDistribution::is_cpe_uri_Valid() const{
    return m_cpe_uri_isValid;
}

QString OAIDistribution::getDescription() const {
    return m_description;
}
void OAIDistribution::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIDistribution::is_description_Set() const{
    return m_description_isSet;
}

bool OAIDistribution::is_description_Valid() const{
    return m_description_isValid;
}

OAIVersion OAIDistribution::getLatestVersion() const {
    return m_latest_version;
}
void OAIDistribution::setLatestVersion(const OAIVersion &latest_version) {
    m_latest_version = latest_version;
    m_latest_version_isSet = true;
}

bool OAIDistribution::is_latest_version_Set() const{
    return m_latest_version_isSet;
}

bool OAIDistribution::is_latest_version_Valid() const{
    return m_latest_version_isValid;
}

QString OAIDistribution::getMaintainer() const {
    return m_maintainer;
}
void OAIDistribution::setMaintainer(const QString &maintainer) {
    m_maintainer = maintainer;
    m_maintainer_isSet = true;
}

bool OAIDistribution::is_maintainer_Set() const{
    return m_maintainer_isSet;
}

bool OAIDistribution::is_maintainer_Valid() const{
    return m_maintainer_isValid;
}

QString OAIDistribution::getUrl() const {
    return m_url;
}
void OAIDistribution::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIDistribution::is_url_Set() const{
    return m_url_isSet;
}

bool OAIDistribution::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIDistribution::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_architecture_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cpe_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latest_version.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_maintainer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDistribution::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
