/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1alpha1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINote.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINote::OAINote(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINote::OAINote() {
    this->initializeModel();
}

OAINote::~OAINote() {}

void OAINote::initializeModel() {

    m_attestation_authority_isSet = false;
    m_attestation_authority_isValid = false;

    m_base_image_isSet = false;
    m_base_image_isValid = false;

    m_build_type_isSet = false;
    m_build_type_isValid = false;

    m_compliance_isSet = false;
    m_compliance_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_deployable_isSet = false;
    m_deployable_isValid = false;

    m_discovery_isSet = false;
    m_discovery_isValid = false;

    m_dsse_attestation_isSet = false;
    m_dsse_attestation_isValid = false;

    m_expiration_time_isSet = false;
    m_expiration_time_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_long_description_isSet = false;
    m_long_description_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_package_isSet = false;
    m_package_isValid = false;

    m_related_url_isSet = false;
    m_related_url_isValid = false;

    m_sbom_isSet = false;
    m_sbom_isValid = false;

    m_sbom_reference_isSet = false;
    m_sbom_reference_isValid = false;

    m_short_description_isSet = false;
    m_short_description_isValid = false;

    m_spdx_file_isSet = false;
    m_spdx_file_isValid = false;

    m_spdx_package_isSet = false;
    m_spdx_package_isValid = false;

    m_spdx_relationship_isSet = false;
    m_spdx_relationship_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;

    m_upgrade_isSet = false;
    m_upgrade_isValid = false;

    m_vulnerability_assessment_isSet = false;
    m_vulnerability_assessment_isValid = false;

    m_vulnerability_type_isSet = false;
    m_vulnerability_type_isValid = false;
}

void OAINote::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINote::fromJsonObject(QJsonObject json) {

    m_attestation_authority_isValid = ::OpenAPI::fromJsonValue(m_attestation_authority, json[QString("attestationAuthority")]);
    m_attestation_authority_isSet = !json[QString("attestationAuthority")].isNull() && m_attestation_authority_isValid;

    m_base_image_isValid = ::OpenAPI::fromJsonValue(m_base_image, json[QString("baseImage")]);
    m_base_image_isSet = !json[QString("baseImage")].isNull() && m_base_image_isValid;

    m_build_type_isValid = ::OpenAPI::fromJsonValue(m_build_type, json[QString("buildType")]);
    m_build_type_isSet = !json[QString("buildType")].isNull() && m_build_type_isValid;

    m_compliance_isValid = ::OpenAPI::fromJsonValue(m_compliance, json[QString("compliance")]);
    m_compliance_isSet = !json[QString("compliance")].isNull() && m_compliance_isValid;

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_deployable_isValid = ::OpenAPI::fromJsonValue(m_deployable, json[QString("deployable")]);
    m_deployable_isSet = !json[QString("deployable")].isNull() && m_deployable_isValid;

    m_discovery_isValid = ::OpenAPI::fromJsonValue(m_discovery, json[QString("discovery")]);
    m_discovery_isSet = !json[QString("discovery")].isNull() && m_discovery_isValid;

    m_dsse_attestation_isValid = ::OpenAPI::fromJsonValue(m_dsse_attestation, json[QString("dsseAttestation")]);
    m_dsse_attestation_isSet = !json[QString("dsseAttestation")].isNull() && m_dsse_attestation_isValid;

    m_expiration_time_isValid = ::OpenAPI::fromJsonValue(m_expiration_time, json[QString("expirationTime")]);
    m_expiration_time_isSet = !json[QString("expirationTime")].isNull() && m_expiration_time_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_long_description_isValid = ::OpenAPI::fromJsonValue(m_long_description, json[QString("longDescription")]);
    m_long_description_isSet = !json[QString("longDescription")].isNull() && m_long_description_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_package_isValid = ::OpenAPI::fromJsonValue(m_package, json[QString("package")]);
    m_package_isSet = !json[QString("package")].isNull() && m_package_isValid;

    m_related_url_isValid = ::OpenAPI::fromJsonValue(m_related_url, json[QString("relatedUrl")]);
    m_related_url_isSet = !json[QString("relatedUrl")].isNull() && m_related_url_isValid;

    m_sbom_isValid = ::OpenAPI::fromJsonValue(m_sbom, json[QString("sbom")]);
    m_sbom_isSet = !json[QString("sbom")].isNull() && m_sbom_isValid;

    m_sbom_reference_isValid = ::OpenAPI::fromJsonValue(m_sbom_reference, json[QString("sbomReference")]);
    m_sbom_reference_isSet = !json[QString("sbomReference")].isNull() && m_sbom_reference_isValid;

    m_short_description_isValid = ::OpenAPI::fromJsonValue(m_short_description, json[QString("shortDescription")]);
    m_short_description_isSet = !json[QString("shortDescription")].isNull() && m_short_description_isValid;

    m_spdx_file_isValid = ::OpenAPI::fromJsonValue(m_spdx_file, json[QString("spdxFile")]);
    m_spdx_file_isSet = !json[QString("spdxFile")].isNull() && m_spdx_file_isValid;

    m_spdx_package_isValid = ::OpenAPI::fromJsonValue(m_spdx_package, json[QString("spdxPackage")]);
    m_spdx_package_isSet = !json[QString("spdxPackage")].isNull() && m_spdx_package_isValid;

    m_spdx_relationship_isValid = ::OpenAPI::fromJsonValue(m_spdx_relationship, json[QString("spdxRelationship")]);
    m_spdx_relationship_isSet = !json[QString("spdxRelationship")].isNull() && m_spdx_relationship_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;

    m_upgrade_isValid = ::OpenAPI::fromJsonValue(m_upgrade, json[QString("upgrade")]);
    m_upgrade_isSet = !json[QString("upgrade")].isNull() && m_upgrade_isValid;

    m_vulnerability_assessment_isValid = ::OpenAPI::fromJsonValue(m_vulnerability_assessment, json[QString("vulnerabilityAssessment")]);
    m_vulnerability_assessment_isSet = !json[QString("vulnerabilityAssessment")].isNull() && m_vulnerability_assessment_isValid;

    m_vulnerability_type_isValid = ::OpenAPI::fromJsonValue(m_vulnerability_type, json[QString("vulnerabilityType")]);
    m_vulnerability_type_isSet = !json[QString("vulnerabilityType")].isNull() && m_vulnerability_type_isValid;
}

QString OAINote::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINote::asJsonObject() const {
    QJsonObject obj;
    if (m_attestation_authority.isSet()) {
        obj.insert(QString("attestationAuthority"), ::OpenAPI::toJsonValue(m_attestation_authority));
    }
    if (m_base_image.isSet()) {
        obj.insert(QString("baseImage"), ::OpenAPI::toJsonValue(m_base_image));
    }
    if (m_build_type.isSet()) {
        obj.insert(QString("buildType"), ::OpenAPI::toJsonValue(m_build_type));
    }
    if (m_compliance.isSet()) {
        obj.insert(QString("compliance"), ::OpenAPI::toJsonValue(m_compliance));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_deployable.isSet()) {
        obj.insert(QString("deployable"), ::OpenAPI::toJsonValue(m_deployable));
    }
    if (m_discovery.isSet()) {
        obj.insert(QString("discovery"), ::OpenAPI::toJsonValue(m_discovery));
    }
    if (m_dsse_attestation.isSet()) {
        obj.insert(QString("dsseAttestation"), ::OpenAPI::toJsonValue(m_dsse_attestation));
    }
    if (m_expiration_time_isSet) {
        obj.insert(QString("expirationTime"), ::OpenAPI::toJsonValue(m_expiration_time));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_long_description_isSet) {
        obj.insert(QString("longDescription"), ::OpenAPI::toJsonValue(m_long_description));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_package.isSet()) {
        obj.insert(QString("package"), ::OpenAPI::toJsonValue(m_package));
    }
    if (m_related_url.size() > 0) {
        obj.insert(QString("relatedUrl"), ::OpenAPI::toJsonValue(m_related_url));
    }
    if (m_sbom.isSet()) {
        obj.insert(QString("sbom"), ::OpenAPI::toJsonValue(m_sbom));
    }
    if (m_sbom_reference.isSet()) {
        obj.insert(QString("sbomReference"), ::OpenAPI::toJsonValue(m_sbom_reference));
    }
    if (m_short_description_isSet) {
        obj.insert(QString("shortDescription"), ::OpenAPI::toJsonValue(m_short_description));
    }
    if (m_spdx_file.isSet()) {
        obj.insert(QString("spdxFile"), ::OpenAPI::toJsonValue(m_spdx_file));
    }
    if (m_spdx_package.isSet()) {
        obj.insert(QString("spdxPackage"), ::OpenAPI::toJsonValue(m_spdx_package));
    }
    if (m_spdx_relationship.isSet()) {
        obj.insert(QString("spdxRelationship"), ::OpenAPI::toJsonValue(m_spdx_relationship));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    if (m_upgrade.isSet()) {
        obj.insert(QString("upgrade"), ::OpenAPI::toJsonValue(m_upgrade));
    }
    if (m_vulnerability_assessment.isSet()) {
        obj.insert(QString("vulnerabilityAssessment"), ::OpenAPI::toJsonValue(m_vulnerability_assessment));
    }
    if (m_vulnerability_type.isSet()) {
        obj.insert(QString("vulnerabilityType"), ::OpenAPI::toJsonValue(m_vulnerability_type));
    }
    return obj;
}

OAIAttestationAuthority OAINote::getAttestationAuthority() const {
    return m_attestation_authority;
}
void OAINote::setAttestationAuthority(const OAIAttestationAuthority &attestation_authority) {
    m_attestation_authority = attestation_authority;
    m_attestation_authority_isSet = true;
}

bool OAINote::is_attestation_authority_Set() const{
    return m_attestation_authority_isSet;
}

bool OAINote::is_attestation_authority_Valid() const{
    return m_attestation_authority_isValid;
}

OAIBasis OAINote::getBaseImage() const {
    return m_base_image;
}
void OAINote::setBaseImage(const OAIBasis &base_image) {
    m_base_image = base_image;
    m_base_image_isSet = true;
}

bool OAINote::is_base_image_Set() const{
    return m_base_image_isSet;
}

bool OAINote::is_base_image_Valid() const{
    return m_base_image_isValid;
}

OAIBuildType OAINote::getBuildType() const {
    return m_build_type;
}
void OAINote::setBuildType(const OAIBuildType &build_type) {
    m_build_type = build_type;
    m_build_type_isSet = true;
}

bool OAINote::is_build_type_Set() const{
    return m_build_type_isSet;
}

bool OAINote::is_build_type_Valid() const{
    return m_build_type_isValid;
}

OAIComplianceNote OAINote::getCompliance() const {
    return m_compliance;
}
void OAINote::setCompliance(const OAIComplianceNote &compliance) {
    m_compliance = compliance;
    m_compliance_isSet = true;
}

bool OAINote::is_compliance_Set() const{
    return m_compliance_isSet;
}

bool OAINote::is_compliance_Valid() const{
    return m_compliance_isValid;
}

QString OAINote::getCreateTime() const {
    return m_create_time;
}
void OAINote::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAINote::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAINote::is_create_time_Valid() const{
    return m_create_time_isValid;
}

OAIDeployable OAINote::getDeployable() const {
    return m_deployable;
}
void OAINote::setDeployable(const OAIDeployable &deployable) {
    m_deployable = deployable;
    m_deployable_isSet = true;
}

bool OAINote::is_deployable_Set() const{
    return m_deployable_isSet;
}

bool OAINote::is_deployable_Valid() const{
    return m_deployable_isValid;
}

OAIDiscovery OAINote::getDiscovery() const {
    return m_discovery;
}
void OAINote::setDiscovery(const OAIDiscovery &discovery) {
    m_discovery = discovery;
    m_discovery_isSet = true;
}

bool OAINote::is_discovery_Set() const{
    return m_discovery_isSet;
}

bool OAINote::is_discovery_Valid() const{
    return m_discovery_isValid;
}

OAIDSSEAttestationNote OAINote::getDsseAttestation() const {
    return m_dsse_attestation;
}
void OAINote::setDsseAttestation(const OAIDSSEAttestationNote &dsse_attestation) {
    m_dsse_attestation = dsse_attestation;
    m_dsse_attestation_isSet = true;
}

bool OAINote::is_dsse_attestation_Set() const{
    return m_dsse_attestation_isSet;
}

bool OAINote::is_dsse_attestation_Valid() const{
    return m_dsse_attestation_isValid;
}

QString OAINote::getExpirationTime() const {
    return m_expiration_time;
}
void OAINote::setExpirationTime(const QString &expiration_time) {
    m_expiration_time = expiration_time;
    m_expiration_time_isSet = true;
}

bool OAINote::is_expiration_time_Set() const{
    return m_expiration_time_isSet;
}

bool OAINote::is_expiration_time_Valid() const{
    return m_expiration_time_isValid;
}

QString OAINote::getKind() const {
    return m_kind;
}
void OAINote::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAINote::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAINote::is_kind_Valid() const{
    return m_kind_isValid;
}

QString OAINote::getLongDescription() const {
    return m_long_description;
}
void OAINote::setLongDescription(const QString &long_description) {
    m_long_description = long_description;
    m_long_description_isSet = true;
}

bool OAINote::is_long_description_Set() const{
    return m_long_description_isSet;
}

bool OAINote::is_long_description_Valid() const{
    return m_long_description_isValid;
}

QString OAINote::getName() const {
    return m_name;
}
void OAINote::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAINote::is_name_Set() const{
    return m_name_isSet;
}

bool OAINote::is_name_Valid() const{
    return m_name_isValid;
}

OAIPackage OAINote::getPackage() const {
    return m_package;
}
void OAINote::setPackage(const OAIPackage &package) {
    m_package = package;
    m_package_isSet = true;
}

bool OAINote::is_package_Set() const{
    return m_package_isSet;
}

bool OAINote::is_package_Valid() const{
    return m_package_isValid;
}

QList<OAIRelatedUrl> OAINote::getRelatedUrl() const {
    return m_related_url;
}
void OAINote::setRelatedUrl(const QList<OAIRelatedUrl> &related_url) {
    m_related_url = related_url;
    m_related_url_isSet = true;
}

bool OAINote::is_related_url_Set() const{
    return m_related_url_isSet;
}

bool OAINote::is_related_url_Valid() const{
    return m_related_url_isValid;
}

OAIDocumentNote OAINote::getSbom() const {
    return m_sbom;
}
void OAINote::setSbom(const OAIDocumentNote &sbom) {
    m_sbom = sbom;
    m_sbom_isSet = true;
}

bool OAINote::is_sbom_Set() const{
    return m_sbom_isSet;
}

bool OAINote::is_sbom_Valid() const{
    return m_sbom_isValid;
}

OAISBOMReferenceNote OAINote::getSbomReference() const {
    return m_sbom_reference;
}
void OAINote::setSbomReference(const OAISBOMReferenceNote &sbom_reference) {
    m_sbom_reference = sbom_reference;
    m_sbom_reference_isSet = true;
}

bool OAINote::is_sbom_reference_Set() const{
    return m_sbom_reference_isSet;
}

bool OAINote::is_sbom_reference_Valid() const{
    return m_sbom_reference_isValid;
}

QString OAINote::getShortDescription() const {
    return m_short_description;
}
void OAINote::setShortDescription(const QString &short_description) {
    m_short_description = short_description;
    m_short_description_isSet = true;
}

bool OAINote::is_short_description_Set() const{
    return m_short_description_isSet;
}

bool OAINote::is_short_description_Valid() const{
    return m_short_description_isValid;
}

OAIFileNote OAINote::getSpdxFile() const {
    return m_spdx_file;
}
void OAINote::setSpdxFile(const OAIFileNote &spdx_file) {
    m_spdx_file = spdx_file;
    m_spdx_file_isSet = true;
}

bool OAINote::is_spdx_file_Set() const{
    return m_spdx_file_isSet;
}

bool OAINote::is_spdx_file_Valid() const{
    return m_spdx_file_isValid;
}

OAIPackageInfoNote OAINote::getSpdxPackage() const {
    return m_spdx_package;
}
void OAINote::setSpdxPackage(const OAIPackageInfoNote &spdx_package) {
    m_spdx_package = spdx_package;
    m_spdx_package_isSet = true;
}

bool OAINote::is_spdx_package_Set() const{
    return m_spdx_package_isSet;
}

bool OAINote::is_spdx_package_Valid() const{
    return m_spdx_package_isValid;
}

OAIRelationshipNote OAINote::getSpdxRelationship() const {
    return m_spdx_relationship;
}
void OAINote::setSpdxRelationship(const OAIRelationshipNote &spdx_relationship) {
    m_spdx_relationship = spdx_relationship;
    m_spdx_relationship_isSet = true;
}

bool OAINote::is_spdx_relationship_Set() const{
    return m_spdx_relationship_isSet;
}

bool OAINote::is_spdx_relationship_Valid() const{
    return m_spdx_relationship_isValid;
}

QString OAINote::getUpdateTime() const {
    return m_update_time;
}
void OAINote::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAINote::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAINote::is_update_time_Valid() const{
    return m_update_time_isValid;
}

OAIUpgradeNote OAINote::getUpgrade() const {
    return m_upgrade;
}
void OAINote::setUpgrade(const OAIUpgradeNote &upgrade) {
    m_upgrade = upgrade;
    m_upgrade_isSet = true;
}

bool OAINote::is_upgrade_Set() const{
    return m_upgrade_isSet;
}

bool OAINote::is_upgrade_Valid() const{
    return m_upgrade_isValid;
}

OAIVulnerabilityAssessmentNote OAINote::getVulnerabilityAssessment() const {
    return m_vulnerability_assessment;
}
void OAINote::setVulnerabilityAssessment(const OAIVulnerabilityAssessmentNote &vulnerability_assessment) {
    m_vulnerability_assessment = vulnerability_assessment;
    m_vulnerability_assessment_isSet = true;
}

bool OAINote::is_vulnerability_assessment_Set() const{
    return m_vulnerability_assessment_isSet;
}

bool OAINote::is_vulnerability_assessment_Valid() const{
    return m_vulnerability_assessment_isValid;
}

OAIVulnerabilityType OAINote::getVulnerabilityType() const {
    return m_vulnerability_type;
}
void OAINote::setVulnerabilityType(const OAIVulnerabilityType &vulnerability_type) {
    m_vulnerability_type = vulnerability_type;
    m_vulnerability_type_isSet = true;
}

bool OAINote::is_vulnerability_type_Set() const{
    return m_vulnerability_type_isSet;
}

bool OAINote::is_vulnerability_type_Valid() const{
    return m_vulnerability_type_isValid;
}

bool OAINote::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attestation_authority.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_image.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_build_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_compliance.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deployable.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_discovery.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dsse_attestation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiration_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_long_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_package.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_related_url.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_sbom.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sbom_reference.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_short_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_spdx_file.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_spdx_package.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_spdx_relationship.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_upgrade.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vulnerability_assessment.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vulnerability_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINote::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
