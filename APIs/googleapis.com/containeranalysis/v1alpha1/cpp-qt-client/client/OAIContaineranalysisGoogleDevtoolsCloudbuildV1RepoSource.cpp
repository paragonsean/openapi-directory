/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1alpha1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource::OAIContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource::OAIContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource() {
    this->initializeModel();
}

OAIContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource::~OAIContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource() {}

void OAIContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource::initializeModel() {

    m_branch_name_isSet = false;
    m_branch_name_isValid = false;

    m_commit_sha_isSet = false;
    m_commit_sha_isValid = false;

    m_dir_isSet = false;
    m_dir_isValid = false;

    m_invert_regex_isSet = false;
    m_invert_regex_isValid = false;

    m_project_id_isSet = false;
    m_project_id_isValid = false;

    m_repo_name_isSet = false;
    m_repo_name_isValid = false;

    m_substitutions_isSet = false;
    m_substitutions_isValid = false;

    m_tag_name_isSet = false;
    m_tag_name_isValid = false;
}

void OAIContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource::fromJsonObject(QJsonObject json) {

    m_branch_name_isValid = ::OpenAPI::fromJsonValue(m_branch_name, json[QString("branchName")]);
    m_branch_name_isSet = !json[QString("branchName")].isNull() && m_branch_name_isValid;

    m_commit_sha_isValid = ::OpenAPI::fromJsonValue(m_commit_sha, json[QString("commitSha")]);
    m_commit_sha_isSet = !json[QString("commitSha")].isNull() && m_commit_sha_isValid;

    m_dir_isValid = ::OpenAPI::fromJsonValue(m_dir, json[QString("dir")]);
    m_dir_isSet = !json[QString("dir")].isNull() && m_dir_isValid;

    m_invert_regex_isValid = ::OpenAPI::fromJsonValue(m_invert_regex, json[QString("invertRegex")]);
    m_invert_regex_isSet = !json[QString("invertRegex")].isNull() && m_invert_regex_isValid;

    m_project_id_isValid = ::OpenAPI::fromJsonValue(m_project_id, json[QString("projectId")]);
    m_project_id_isSet = !json[QString("projectId")].isNull() && m_project_id_isValid;

    m_repo_name_isValid = ::OpenAPI::fromJsonValue(m_repo_name, json[QString("repoName")]);
    m_repo_name_isSet = !json[QString("repoName")].isNull() && m_repo_name_isValid;

    m_substitutions_isValid = ::OpenAPI::fromJsonValue(m_substitutions, json[QString("substitutions")]);
    m_substitutions_isSet = !json[QString("substitutions")].isNull() && m_substitutions_isValid;

    m_tag_name_isValid = ::OpenAPI::fromJsonValue(m_tag_name, json[QString("tagName")]);
    m_tag_name_isSet = !json[QString("tagName")].isNull() && m_tag_name_isValid;
}

QString OAIContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource::asJsonObject() const {
    QJsonObject obj;
    if (m_branch_name_isSet) {
        obj.insert(QString("branchName"), ::OpenAPI::toJsonValue(m_branch_name));
    }
    if (m_commit_sha_isSet) {
        obj.insert(QString("commitSha"), ::OpenAPI::toJsonValue(m_commit_sha));
    }
    if (m_dir_isSet) {
        obj.insert(QString("dir"), ::OpenAPI::toJsonValue(m_dir));
    }
    if (m_invert_regex_isSet) {
        obj.insert(QString("invertRegex"), ::OpenAPI::toJsonValue(m_invert_regex));
    }
    if (m_project_id_isSet) {
        obj.insert(QString("projectId"), ::OpenAPI::toJsonValue(m_project_id));
    }
    if (m_repo_name_isSet) {
        obj.insert(QString("repoName"), ::OpenAPI::toJsonValue(m_repo_name));
    }
    if (m_substitutions.size() > 0) {
        obj.insert(QString("substitutions"), ::OpenAPI::toJsonValue(m_substitutions));
    }
    if (m_tag_name_isSet) {
        obj.insert(QString("tagName"), ::OpenAPI::toJsonValue(m_tag_name));
    }
    return obj;
}

QString OAIContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource::getBranchName() const {
    return m_branch_name;
}
void OAIContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource::setBranchName(const QString &branch_name) {
    m_branch_name = branch_name;
    m_branch_name_isSet = true;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource::is_branch_name_Set() const{
    return m_branch_name_isSet;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource::is_branch_name_Valid() const{
    return m_branch_name_isValid;
}

QString OAIContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource::getCommitSha() const {
    return m_commit_sha;
}
void OAIContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource::setCommitSha(const QString &commit_sha) {
    m_commit_sha = commit_sha;
    m_commit_sha_isSet = true;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource::is_commit_sha_Set() const{
    return m_commit_sha_isSet;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource::is_commit_sha_Valid() const{
    return m_commit_sha_isValid;
}

QString OAIContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource::getDir() const {
    return m_dir;
}
void OAIContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource::setDir(const QString &dir) {
    m_dir = dir;
    m_dir_isSet = true;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource::is_dir_Set() const{
    return m_dir_isSet;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource::is_dir_Valid() const{
    return m_dir_isValid;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource::isInvertRegex() const {
    return m_invert_regex;
}
void OAIContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource::setInvertRegex(const bool &invert_regex) {
    m_invert_regex = invert_regex;
    m_invert_regex_isSet = true;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource::is_invert_regex_Set() const{
    return m_invert_regex_isSet;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource::is_invert_regex_Valid() const{
    return m_invert_regex_isValid;
}

QString OAIContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource::getProjectId() const {
    return m_project_id;
}
void OAIContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource::setProjectId(const QString &project_id) {
    m_project_id = project_id;
    m_project_id_isSet = true;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource::is_project_id_Set() const{
    return m_project_id_isSet;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource::is_project_id_Valid() const{
    return m_project_id_isValid;
}

QString OAIContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource::getRepoName() const {
    return m_repo_name;
}
void OAIContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource::setRepoName(const QString &repo_name) {
    m_repo_name = repo_name;
    m_repo_name_isSet = true;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource::is_repo_name_Set() const{
    return m_repo_name_isSet;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource::is_repo_name_Valid() const{
    return m_repo_name_isValid;
}

QMap<QString, QString> OAIContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource::getSubstitutions() const {
    return m_substitutions;
}
void OAIContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource::setSubstitutions(const QMap<QString, QString> &substitutions) {
    m_substitutions = substitutions;
    m_substitutions_isSet = true;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource::is_substitutions_Set() const{
    return m_substitutions_isSet;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource::is_substitutions_Valid() const{
    return m_substitutions_isValid;
}

QString OAIContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource::getTagName() const {
    return m_tag_name;
}
void OAIContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource::setTagName(const QString &tag_name) {
    m_tag_name = tag_name;
    m_tag_name_isSet = true;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource::is_tag_name_Set() const{
    return m_tag_name_isSet;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource::is_tag_name_Valid() const{
    return m_tag_name_isValid;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_branch_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_commit_sha_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dir_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invert_regex_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repo_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_substitutions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_tag_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
