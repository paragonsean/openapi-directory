/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1alpha1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISeverityCount.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISeverityCount::OAISeverityCount(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISeverityCount::OAISeverityCount() {
    this->initializeModel();
}

OAISeverityCount::~OAISeverityCount() {}

void OAISeverityCount::initializeModel() {

    m_count_isSet = false;
    m_count_isValid = false;

    m_severity_isSet = false;
    m_severity_isValid = false;
}

void OAISeverityCount::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISeverityCount::fromJsonObject(QJsonObject json) {

    m_count_isValid = ::OpenAPI::fromJsonValue(m_count, json[QString("count")]);
    m_count_isSet = !json[QString("count")].isNull() && m_count_isValid;

    m_severity_isValid = ::OpenAPI::fromJsonValue(m_severity, json[QString("severity")]);
    m_severity_isSet = !json[QString("severity")].isNull() && m_severity_isValid;
}

QString OAISeverityCount::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISeverityCount::asJsonObject() const {
    QJsonObject obj;
    if (m_count_isSet) {
        obj.insert(QString("count"), ::OpenAPI::toJsonValue(m_count));
    }
    if (m_severity_isSet) {
        obj.insert(QString("severity"), ::OpenAPI::toJsonValue(m_severity));
    }
    return obj;
}

QString OAISeverityCount::getCount() const {
    return m_count;
}
void OAISeverityCount::setCount(const QString &count) {
    m_count = count;
    m_count_isSet = true;
}

bool OAISeverityCount::is_count_Set() const{
    return m_count_isSet;
}

bool OAISeverityCount::is_count_Valid() const{
    return m_count_isValid;
}

QString OAISeverityCount::getSeverity() const {
    return m_severity;
}
void OAISeverityCount::setSeverity(const QString &severity) {
    m_severity = severity;
    m_severity_isSet = true;
}

bool OAISeverityCount::is_severity_Set() const{
    return m_severity_isSet;
}

bool OAISeverityCount::is_severity_Valid() const{
    return m_severity_isValid;
}

bool OAISeverityCount::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_severity_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISeverityCount::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
