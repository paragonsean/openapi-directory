/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1alpha1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExternalRef.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExternalRef::OAIExternalRef(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExternalRef::OAIExternalRef() {
    this->initializeModel();
}

OAIExternalRef::~OAIExternalRef() {}

void OAIExternalRef::initializeModel() {

    m_category_isSet = false;
    m_category_isValid = false;

    m_comment_isSet = false;
    m_comment_isValid = false;

    m_locator_isSet = false;
    m_locator_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIExternalRef::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExternalRef::fromJsonObject(QJsonObject json) {

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("category")]);
    m_category_isSet = !json[QString("category")].isNull() && m_category_isValid;

    m_comment_isValid = ::OpenAPI::fromJsonValue(m_comment, json[QString("comment")]);
    m_comment_isSet = !json[QString("comment")].isNull() && m_comment_isValid;

    m_locator_isValid = ::OpenAPI::fromJsonValue(m_locator, json[QString("locator")]);
    m_locator_isSet = !json[QString("locator")].isNull() && m_locator_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIExternalRef::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExternalRef::asJsonObject() const {
    QJsonObject obj;
    if (m_category_isSet) {
        obj.insert(QString("category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_comment_isSet) {
        obj.insert(QString("comment"), ::OpenAPI::toJsonValue(m_comment));
    }
    if (m_locator_isSet) {
        obj.insert(QString("locator"), ::OpenAPI::toJsonValue(m_locator));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIExternalRef::getCategory() const {
    return m_category;
}
void OAIExternalRef::setCategory(const QString &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAIExternalRef::is_category_Set() const{
    return m_category_isSet;
}

bool OAIExternalRef::is_category_Valid() const{
    return m_category_isValid;
}

QString OAIExternalRef::getComment() const {
    return m_comment;
}
void OAIExternalRef::setComment(const QString &comment) {
    m_comment = comment;
    m_comment_isSet = true;
}

bool OAIExternalRef::is_comment_Set() const{
    return m_comment_isSet;
}

bool OAIExternalRef::is_comment_Valid() const{
    return m_comment_isValid;
}

QString OAIExternalRef::getLocator() const {
    return m_locator;
}
void OAIExternalRef::setLocator(const QString &locator) {
    m_locator = locator;
    m_locator_isSet = true;
}

bool OAIExternalRef::is_locator_Set() const{
    return m_locator_isSet;
}

bool OAIExternalRef::is_locator_Valid() const{
    return m_locator_isValid;
}

QString OAIExternalRef::getType() const {
    return m_type;
}
void OAIExternalRef::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIExternalRef::is_type_Set() const{
    return m_type_isSet;
}

bool OAIExternalRef::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIExternalRef::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_comment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_locator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExternalRef::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
