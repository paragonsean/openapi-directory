/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1alpha1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIInstallation.h
 *
 * This represents how a particular software package may be installed on a system.
 */

#ifndef OAIInstallation_H
#define OAIInstallation_H

#include <QJsonObject>

#include "OAILicense.h"
#include "OAILocation.h"
#include "OAIVersion.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAILicense;
class OAILocation;
class OAIVersion;

class OAIInstallation : public OAIObject {
public:
    OAIInstallation();
    OAIInstallation(QString json);
    ~OAIInstallation() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getArchitecture() const;
    void setArchitecture(const QString &architecture);
    bool is_architecture_Set() const;
    bool is_architecture_Valid() const;

    QString getCpeUri() const;
    void setCpeUri(const QString &cpe_uri);
    bool is_cpe_uri_Set() const;
    bool is_cpe_uri_Valid() const;

    OAILicense getLicense() const;
    void setLicense(const OAILicense &license);
    bool is_license_Set() const;
    bool is_license_Valid() const;

    QList<OAILocation> getLocation() const;
    void setLocation(const QList<OAILocation> &location);
    bool is_location_Set() const;
    bool is_location_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getPackageType() const;
    void setPackageType(const QString &package_type);
    bool is_package_type_Set() const;
    bool is_package_type_Valid() const;

    OAIVersion getVersion() const;
    void setVersion(const OAIVersion &version);
    bool is_version_Set() const;
    bool is_version_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_architecture;
    bool m_architecture_isSet;
    bool m_architecture_isValid;

    QString m_cpe_uri;
    bool m_cpe_uri_isSet;
    bool m_cpe_uri_isValid;

    OAILicense m_license;
    bool m_license_isSet;
    bool m_license_isValid;

    QList<OAILocation> m_location;
    bool m_location_isSet;
    bool m_location_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_package_type;
    bool m_package_type_isSet;
    bool m_package_type_isValid;

    OAIVersion m_version;
    bool m_version_isSet;
    bool m_version_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIInstallation)

#endif // OAIInstallation_H
