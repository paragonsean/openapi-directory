/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1alpha1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIdentifierHelper.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIdentifierHelper::OAIIdentifierHelper(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIdentifierHelper::OAIIdentifierHelper() {
    this->initializeModel();
}

OAIIdentifierHelper::~OAIIdentifierHelper() {}

void OAIIdentifierHelper::initializeModel() {

    m_field_isSet = false;
    m_field_isValid = false;

    m_generic_uri_isSet = false;
    m_generic_uri_isValid = false;
}

void OAIIdentifierHelper::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIdentifierHelper::fromJsonObject(QJsonObject json) {

    m_field_isValid = ::OpenAPI::fromJsonValue(m_field, json[QString("field")]);
    m_field_isSet = !json[QString("field")].isNull() && m_field_isValid;

    m_generic_uri_isValid = ::OpenAPI::fromJsonValue(m_generic_uri, json[QString("genericUri")]);
    m_generic_uri_isSet = !json[QString("genericUri")].isNull() && m_generic_uri_isValid;
}

QString OAIIdentifierHelper::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIdentifierHelper::asJsonObject() const {
    QJsonObject obj;
    if (m_field_isSet) {
        obj.insert(QString("field"), ::OpenAPI::toJsonValue(m_field));
    }
    if (m_generic_uri_isSet) {
        obj.insert(QString("genericUri"), ::OpenAPI::toJsonValue(m_generic_uri));
    }
    return obj;
}

QString OAIIdentifierHelper::getField() const {
    return m_field;
}
void OAIIdentifierHelper::setField(const QString &field) {
    m_field = field;
    m_field_isSet = true;
}

bool OAIIdentifierHelper::is_field_Set() const{
    return m_field_isSet;
}

bool OAIIdentifierHelper::is_field_Valid() const{
    return m_field_isValid;
}

QString OAIIdentifierHelper::getGenericUri() const {
    return m_generic_uri;
}
void OAIIdentifierHelper::setGenericUri(const QString &generic_uri) {
    m_generic_uri = generic_uri;
    m_generic_uri_isSet = true;
}

bool OAIIdentifierHelper::is_generic_uri_Set() const{
    return m_generic_uri_isSet;
}

bool OAIIdentifierHelper::is_generic_uri_Valid() const{
    return m_generic_uri_isValid;
}

bool OAIIdentifierHelper::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_field_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_generic_uri_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIdentifierHelper::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
