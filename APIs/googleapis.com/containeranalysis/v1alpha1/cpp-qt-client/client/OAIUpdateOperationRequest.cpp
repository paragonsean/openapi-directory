/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1alpha1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateOperationRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateOperationRequest::OAIUpdateOperationRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateOperationRequest::OAIUpdateOperationRequest() {
    this->initializeModel();
}

OAIUpdateOperationRequest::~OAIUpdateOperationRequest() {}

void OAIUpdateOperationRequest::initializeModel() {

    m_operation_isSet = false;
    m_operation_isValid = false;

    m_update_mask_isSet = false;
    m_update_mask_isValid = false;
}

void OAIUpdateOperationRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateOperationRequest::fromJsonObject(QJsonObject json) {

    m_operation_isValid = ::OpenAPI::fromJsonValue(m_operation, json[QString("operation")]);
    m_operation_isSet = !json[QString("operation")].isNull() && m_operation_isValid;

    m_update_mask_isValid = ::OpenAPI::fromJsonValue(m_update_mask, json[QString("updateMask")]);
    m_update_mask_isSet = !json[QString("updateMask")].isNull() && m_update_mask_isValid;
}

QString OAIUpdateOperationRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateOperationRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_operation.isSet()) {
        obj.insert(QString("operation"), ::OpenAPI::toJsonValue(m_operation));
    }
    if (m_update_mask_isSet) {
        obj.insert(QString("updateMask"), ::OpenAPI::toJsonValue(m_update_mask));
    }
    return obj;
}

OAIOperation OAIUpdateOperationRequest::getOperation() const {
    return m_operation;
}
void OAIUpdateOperationRequest::setOperation(const OAIOperation &operation) {
    m_operation = operation;
    m_operation_isSet = true;
}

bool OAIUpdateOperationRequest::is_operation_Set() const{
    return m_operation_isSet;
}

bool OAIUpdateOperationRequest::is_operation_Valid() const{
    return m_operation_isValid;
}

QString OAIUpdateOperationRequest::getUpdateMask() const {
    return m_update_mask;
}
void OAIUpdateOperationRequest::setUpdateMask(const QString &update_mask) {
    m_update_mask = update_mask;
    m_update_mask_isSet = true;
}

bool OAIUpdateOperationRequest::is_update_mask_Set() const{
    return m_update_mask_isSet;
}

bool OAIUpdateOperationRequest::is_update_mask_Valid() const{
    return m_update_mask_isValid;
}

bool OAIUpdateOperationRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_operation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_mask_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateOperationRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
