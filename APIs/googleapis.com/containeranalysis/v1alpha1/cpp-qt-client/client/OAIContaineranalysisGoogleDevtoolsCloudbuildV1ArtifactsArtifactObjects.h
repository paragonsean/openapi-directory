/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1alpha1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsArtifactObjects.h
 *
 * Files in the workspace to upload to Cloud Storage upon successful completion of all build steps.
 */

#ifndef OAIContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsArtifactObjects_H
#define OAIContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsArtifactObjects_H

#include <QJsonObject>

#include "OAIContaineranalysisGoogleDevtoolsCloudbuildV1TimeSpan.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIContaineranalysisGoogleDevtoolsCloudbuildV1TimeSpan;

class OAIContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsArtifactObjects : public OAIObject {
public:
    OAIContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsArtifactObjects();
    OAIContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsArtifactObjects(QString json);
    ~OAIContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsArtifactObjects() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getLocation() const;
    void setLocation(const QString &location);
    bool is_location_Set() const;
    bool is_location_Valid() const;

    QList<QString> getPaths() const;
    void setPaths(const QList<QString> &paths);
    bool is_paths_Set() const;
    bool is_paths_Valid() const;

    OAIContaineranalysisGoogleDevtoolsCloudbuildV1TimeSpan getTiming() const;
    void setTiming(const OAIContaineranalysisGoogleDevtoolsCloudbuildV1TimeSpan &timing);
    bool is_timing_Set() const;
    bool is_timing_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_location;
    bool m_location_isSet;
    bool m_location_isValid;

    QList<QString> m_paths;
    bool m_paths_isSet;
    bool m_paths_isValid;

    OAIContaineranalysisGoogleDevtoolsCloudbuildV1TimeSpan m_timing;
    bool m_timing_isSet;
    bool m_timing_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsArtifactObjects)

#endif // OAIContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsArtifactObjects_H
