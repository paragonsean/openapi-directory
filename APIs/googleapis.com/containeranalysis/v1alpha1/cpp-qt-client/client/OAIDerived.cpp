/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1alpha1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDerived.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDerived::OAIDerived(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDerived::OAIDerived() {
    this->initializeModel();
}

OAIDerived::~OAIDerived() {}

void OAIDerived::initializeModel() {

    m_base_resource_url_isSet = false;
    m_base_resource_url_isValid = false;

    m_distance_isSet = false;
    m_distance_isValid = false;

    m_fingerprint_isSet = false;
    m_fingerprint_isValid = false;

    m_layer_info_isSet = false;
    m_layer_info_isValid = false;
}

void OAIDerived::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDerived::fromJsonObject(QJsonObject json) {

    m_base_resource_url_isValid = ::OpenAPI::fromJsonValue(m_base_resource_url, json[QString("baseResourceUrl")]);
    m_base_resource_url_isSet = !json[QString("baseResourceUrl")].isNull() && m_base_resource_url_isValid;

    m_distance_isValid = ::OpenAPI::fromJsonValue(m_distance, json[QString("distance")]);
    m_distance_isSet = !json[QString("distance")].isNull() && m_distance_isValid;

    m_fingerprint_isValid = ::OpenAPI::fromJsonValue(m_fingerprint, json[QString("fingerprint")]);
    m_fingerprint_isSet = !json[QString("fingerprint")].isNull() && m_fingerprint_isValid;

    m_layer_info_isValid = ::OpenAPI::fromJsonValue(m_layer_info, json[QString("layerInfo")]);
    m_layer_info_isSet = !json[QString("layerInfo")].isNull() && m_layer_info_isValid;
}

QString OAIDerived::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDerived::asJsonObject() const {
    QJsonObject obj;
    if (m_base_resource_url_isSet) {
        obj.insert(QString("baseResourceUrl"), ::OpenAPI::toJsonValue(m_base_resource_url));
    }
    if (m_distance_isSet) {
        obj.insert(QString("distance"), ::OpenAPI::toJsonValue(m_distance));
    }
    if (m_fingerprint.isSet()) {
        obj.insert(QString("fingerprint"), ::OpenAPI::toJsonValue(m_fingerprint));
    }
    if (m_layer_info.size() > 0) {
        obj.insert(QString("layerInfo"), ::OpenAPI::toJsonValue(m_layer_info));
    }
    return obj;
}

QString OAIDerived::getBaseResourceUrl() const {
    return m_base_resource_url;
}
void OAIDerived::setBaseResourceUrl(const QString &base_resource_url) {
    m_base_resource_url = base_resource_url;
    m_base_resource_url_isSet = true;
}

bool OAIDerived::is_base_resource_url_Set() const{
    return m_base_resource_url_isSet;
}

bool OAIDerived::is_base_resource_url_Valid() const{
    return m_base_resource_url_isValid;
}

qint32 OAIDerived::getDistance() const {
    return m_distance;
}
void OAIDerived::setDistance(const qint32 &distance) {
    m_distance = distance;
    m_distance_isSet = true;
}

bool OAIDerived::is_distance_Set() const{
    return m_distance_isSet;
}

bool OAIDerived::is_distance_Valid() const{
    return m_distance_isValid;
}

OAIFingerprint OAIDerived::getFingerprint() const {
    return m_fingerprint;
}
void OAIDerived::setFingerprint(const OAIFingerprint &fingerprint) {
    m_fingerprint = fingerprint;
    m_fingerprint_isSet = true;
}

bool OAIDerived::is_fingerprint_Set() const{
    return m_fingerprint_isSet;
}

bool OAIDerived::is_fingerprint_Valid() const{
    return m_fingerprint_isValid;
}

QList<OAILayer> OAIDerived::getLayerInfo() const {
    return m_layer_info;
}
void OAIDerived::setLayerInfo(const QList<OAILayer> &layer_info) {
    m_layer_info = layer_info;
    m_layer_info_isSet = true;
}

bool OAIDerived::is_layer_info_Set() const{
    return m_layer_info_isSet;
}

bool OAIDerived::is_layer_info_Valid() const{
    return m_layer_info_isValid;
}

bool OAIDerived::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_base_resource_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_distance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fingerprint.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_layer_info.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDerived::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
