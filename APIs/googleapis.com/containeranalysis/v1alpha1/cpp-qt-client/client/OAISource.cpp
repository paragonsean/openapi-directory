/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1alpha1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISource.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISource::OAISource(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISource::OAISource() {
    this->initializeModel();
}

OAISource::~OAISource() {}

void OAISource::initializeModel() {

    m_additional_contexts_isSet = false;
    m_additional_contexts_isValid = false;

    m_artifact_storage_source_isSet = false;
    m_artifact_storage_source_isValid = false;

    m_context_isSet = false;
    m_context_isValid = false;

    m_file_hashes_isSet = false;
    m_file_hashes_isValid = false;

    m_repo_source_isSet = false;
    m_repo_source_isValid = false;

    m_storage_source_isSet = false;
    m_storage_source_isValid = false;
}

void OAISource::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISource::fromJsonObject(QJsonObject json) {

    m_additional_contexts_isValid = ::OpenAPI::fromJsonValue(m_additional_contexts, json[QString("additionalContexts")]);
    m_additional_contexts_isSet = !json[QString("additionalContexts")].isNull() && m_additional_contexts_isValid;

    m_artifact_storage_source_isValid = ::OpenAPI::fromJsonValue(m_artifact_storage_source, json[QString("artifactStorageSource")]);
    m_artifact_storage_source_isSet = !json[QString("artifactStorageSource")].isNull() && m_artifact_storage_source_isValid;

    m_context_isValid = ::OpenAPI::fromJsonValue(m_context, json[QString("context")]);
    m_context_isSet = !json[QString("context")].isNull() && m_context_isValid;

    m_file_hashes_isValid = ::OpenAPI::fromJsonValue(m_file_hashes, json[QString("fileHashes")]);
    m_file_hashes_isSet = !json[QString("fileHashes")].isNull() && m_file_hashes_isValid;

    m_repo_source_isValid = ::OpenAPI::fromJsonValue(m_repo_source, json[QString("repoSource")]);
    m_repo_source_isSet = !json[QString("repoSource")].isNull() && m_repo_source_isValid;

    m_storage_source_isValid = ::OpenAPI::fromJsonValue(m_storage_source, json[QString("storageSource")]);
    m_storage_source_isSet = !json[QString("storageSource")].isNull() && m_storage_source_isValid;
}

QString OAISource::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISource::asJsonObject() const {
    QJsonObject obj;
    if (m_additional_contexts.size() > 0) {
        obj.insert(QString("additionalContexts"), ::OpenAPI::toJsonValue(m_additional_contexts));
    }
    if (m_artifact_storage_source.isSet()) {
        obj.insert(QString("artifactStorageSource"), ::OpenAPI::toJsonValue(m_artifact_storage_source));
    }
    if (m_context.isSet()) {
        obj.insert(QString("context"), ::OpenAPI::toJsonValue(m_context));
    }
    if (m_file_hashes.size() > 0) {
        obj.insert(QString("fileHashes"), ::OpenAPI::toJsonValue(m_file_hashes));
    }
    if (m_repo_source.isSet()) {
        obj.insert(QString("repoSource"), ::OpenAPI::toJsonValue(m_repo_source));
    }
    if (m_storage_source.isSet()) {
        obj.insert(QString("storageSource"), ::OpenAPI::toJsonValue(m_storage_source));
    }
    return obj;
}

QList<OAIGoogleDevtoolsContaineranalysisV1alpha1SourceContext> OAISource::getAdditionalContexts() const {
    return m_additional_contexts;
}
void OAISource::setAdditionalContexts(const QList<OAIGoogleDevtoolsContaineranalysisV1alpha1SourceContext> &additional_contexts) {
    m_additional_contexts = additional_contexts;
    m_additional_contexts_isSet = true;
}

bool OAISource::is_additional_contexts_Set() const{
    return m_additional_contexts_isSet;
}

bool OAISource::is_additional_contexts_Valid() const{
    return m_additional_contexts_isValid;
}

OAIStorageSource OAISource::getArtifactStorageSource() const {
    return m_artifact_storage_source;
}
void OAISource::setArtifactStorageSource(const OAIStorageSource &artifact_storage_source) {
    m_artifact_storage_source = artifact_storage_source;
    m_artifact_storage_source_isSet = true;
}

bool OAISource::is_artifact_storage_source_Set() const{
    return m_artifact_storage_source_isSet;
}

bool OAISource::is_artifact_storage_source_Valid() const{
    return m_artifact_storage_source_isValid;
}

OAIGoogleDevtoolsContaineranalysisV1alpha1SourceContext OAISource::getContext() const {
    return m_context;
}
void OAISource::setContext(const OAIGoogleDevtoolsContaineranalysisV1alpha1SourceContext &context) {
    m_context = context;
    m_context_isSet = true;
}

bool OAISource::is_context_Set() const{
    return m_context_isSet;
}

bool OAISource::is_context_Valid() const{
    return m_context_isValid;
}

QMap<QString, OAIFileHashes> OAISource::getFileHashes() const {
    return m_file_hashes;
}
void OAISource::setFileHashes(const QMap<QString, OAIFileHashes> &file_hashes) {
    m_file_hashes = file_hashes;
    m_file_hashes_isSet = true;
}

bool OAISource::is_file_hashes_Set() const{
    return m_file_hashes_isSet;
}

bool OAISource::is_file_hashes_Valid() const{
    return m_file_hashes_isValid;
}

OAIRepoSource OAISource::getRepoSource() const {
    return m_repo_source;
}
void OAISource::setRepoSource(const OAIRepoSource &repo_source) {
    m_repo_source = repo_source;
    m_repo_source_isSet = true;
}

bool OAISource::is_repo_source_Set() const{
    return m_repo_source_isSet;
}

bool OAISource::is_repo_source_Valid() const{
    return m_repo_source_isValid;
}

OAIStorageSource OAISource::getStorageSource() const {
    return m_storage_source;
}
void OAISource::setStorageSource(const OAIStorageSource &storage_source) {
    m_storage_source = storage_source;
    m_storage_source_isSet = true;
}

bool OAISource::is_storage_source_Set() const{
    return m_storage_source_isSet;
}

bool OAISource::is_storage_source_Valid() const{
    return m_storage_source_isValid;
}

bool OAISource::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_additional_contexts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_artifact_storage_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_context.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_hashes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_repo_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_source.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISource::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
