/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1alpha1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVulnerabilityAssessmentNote.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVulnerabilityAssessmentNote::OAIVulnerabilityAssessmentNote(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVulnerabilityAssessmentNote::OAIVulnerabilityAssessmentNote() {
    this->initializeModel();
}

OAIVulnerabilityAssessmentNote::~OAIVulnerabilityAssessmentNote() {}

void OAIVulnerabilityAssessmentNote::initializeModel() {

    m_assessment_isSet = false;
    m_assessment_isValid = false;

    m_language_code_isSet = false;
    m_language_code_isValid = false;

    m_long_description_isSet = false;
    m_long_description_isValid = false;

    m_product_isSet = false;
    m_product_isValid = false;

    m_publisher_isSet = false;
    m_publisher_isValid = false;

    m_short_description_isSet = false;
    m_short_description_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;
}

void OAIVulnerabilityAssessmentNote::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVulnerabilityAssessmentNote::fromJsonObject(QJsonObject json) {

    m_assessment_isValid = ::OpenAPI::fromJsonValue(m_assessment, json[QString("assessment")]);
    m_assessment_isSet = !json[QString("assessment")].isNull() && m_assessment_isValid;

    m_language_code_isValid = ::OpenAPI::fromJsonValue(m_language_code, json[QString("languageCode")]);
    m_language_code_isSet = !json[QString("languageCode")].isNull() && m_language_code_isValid;

    m_long_description_isValid = ::OpenAPI::fromJsonValue(m_long_description, json[QString("longDescription")]);
    m_long_description_isSet = !json[QString("longDescription")].isNull() && m_long_description_isValid;

    m_product_isValid = ::OpenAPI::fromJsonValue(m_product, json[QString("product")]);
    m_product_isSet = !json[QString("product")].isNull() && m_product_isValid;

    m_publisher_isValid = ::OpenAPI::fromJsonValue(m_publisher, json[QString("publisher")]);
    m_publisher_isSet = !json[QString("publisher")].isNull() && m_publisher_isValid;

    m_short_description_isValid = ::OpenAPI::fromJsonValue(m_short_description, json[QString("shortDescription")]);
    m_short_description_isSet = !json[QString("shortDescription")].isNull() && m_short_description_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;
}

QString OAIVulnerabilityAssessmentNote::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVulnerabilityAssessmentNote::asJsonObject() const {
    QJsonObject obj;
    if (m_assessment.isSet()) {
        obj.insert(QString("assessment"), ::OpenAPI::toJsonValue(m_assessment));
    }
    if (m_language_code_isSet) {
        obj.insert(QString("languageCode"), ::OpenAPI::toJsonValue(m_language_code));
    }
    if (m_long_description_isSet) {
        obj.insert(QString("longDescription"), ::OpenAPI::toJsonValue(m_long_description));
    }
    if (m_product.isSet()) {
        obj.insert(QString("product"), ::OpenAPI::toJsonValue(m_product));
    }
    if (m_publisher.isSet()) {
        obj.insert(QString("publisher"), ::OpenAPI::toJsonValue(m_publisher));
    }
    if (m_short_description_isSet) {
        obj.insert(QString("shortDescription"), ::OpenAPI::toJsonValue(m_short_description));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    return obj;
}

OAIAssessment OAIVulnerabilityAssessmentNote::getAssessment() const {
    return m_assessment;
}
void OAIVulnerabilityAssessmentNote::setAssessment(const OAIAssessment &assessment) {
    m_assessment = assessment;
    m_assessment_isSet = true;
}

bool OAIVulnerabilityAssessmentNote::is_assessment_Set() const{
    return m_assessment_isSet;
}

bool OAIVulnerabilityAssessmentNote::is_assessment_Valid() const{
    return m_assessment_isValid;
}

QString OAIVulnerabilityAssessmentNote::getLanguageCode() const {
    return m_language_code;
}
void OAIVulnerabilityAssessmentNote::setLanguageCode(const QString &language_code) {
    m_language_code = language_code;
    m_language_code_isSet = true;
}

bool OAIVulnerabilityAssessmentNote::is_language_code_Set() const{
    return m_language_code_isSet;
}

bool OAIVulnerabilityAssessmentNote::is_language_code_Valid() const{
    return m_language_code_isValid;
}

QString OAIVulnerabilityAssessmentNote::getLongDescription() const {
    return m_long_description;
}
void OAIVulnerabilityAssessmentNote::setLongDescription(const QString &long_description) {
    m_long_description = long_description;
    m_long_description_isSet = true;
}

bool OAIVulnerabilityAssessmentNote::is_long_description_Set() const{
    return m_long_description_isSet;
}

bool OAIVulnerabilityAssessmentNote::is_long_description_Valid() const{
    return m_long_description_isValid;
}

OAIProduct OAIVulnerabilityAssessmentNote::getProduct() const {
    return m_product;
}
void OAIVulnerabilityAssessmentNote::setProduct(const OAIProduct &product) {
    m_product = product;
    m_product_isSet = true;
}

bool OAIVulnerabilityAssessmentNote::is_product_Set() const{
    return m_product_isSet;
}

bool OAIVulnerabilityAssessmentNote::is_product_Valid() const{
    return m_product_isValid;
}

OAIPublisher OAIVulnerabilityAssessmentNote::getPublisher() const {
    return m_publisher;
}
void OAIVulnerabilityAssessmentNote::setPublisher(const OAIPublisher &publisher) {
    m_publisher = publisher;
    m_publisher_isSet = true;
}

bool OAIVulnerabilityAssessmentNote::is_publisher_Set() const{
    return m_publisher_isSet;
}

bool OAIVulnerabilityAssessmentNote::is_publisher_Valid() const{
    return m_publisher_isValid;
}

QString OAIVulnerabilityAssessmentNote::getShortDescription() const {
    return m_short_description;
}
void OAIVulnerabilityAssessmentNote::setShortDescription(const QString &short_description) {
    m_short_description = short_description;
    m_short_description_isSet = true;
}

bool OAIVulnerabilityAssessmentNote::is_short_description_Set() const{
    return m_short_description_isSet;
}

bool OAIVulnerabilityAssessmentNote::is_short_description_Valid() const{
    return m_short_description_isValid;
}

QString OAIVulnerabilityAssessmentNote::getTitle() const {
    return m_title;
}
void OAIVulnerabilityAssessmentNote::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIVulnerabilityAssessmentNote::is_title_Set() const{
    return m_title_isSet;
}

bool OAIVulnerabilityAssessmentNote::is_title_Valid() const{
    return m_title_isValid;
}

bool OAIVulnerabilityAssessmentNote::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_assessment.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_long_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_publisher.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_short_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVulnerabilityAssessmentNote::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
