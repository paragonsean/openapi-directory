/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1alpha1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDocumentOccurrence.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDocumentOccurrence::OAIDocumentOccurrence(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDocumentOccurrence::OAIDocumentOccurrence() {
    this->initializeModel();
}

OAIDocumentOccurrence::~OAIDocumentOccurrence() {}

void OAIDocumentOccurrence::initializeModel() {

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_creator_comment_isSet = false;
    m_creator_comment_isValid = false;

    m_creators_isSet = false;
    m_creators_isValid = false;

    m_document_comment_isSet = false;
    m_document_comment_isValid = false;

    m_external_document_refs_isSet = false;
    m_external_document_refs_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_license_list_version_isSet = false;
    m_license_list_version_isValid = false;

    m_r_namespace_isSet = false;
    m_r_namespace_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;
}

void OAIDocumentOccurrence::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDocumentOccurrence::fromJsonObject(QJsonObject json) {

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_creator_comment_isValid = ::OpenAPI::fromJsonValue(m_creator_comment, json[QString("creatorComment")]);
    m_creator_comment_isSet = !json[QString("creatorComment")].isNull() && m_creator_comment_isValid;

    m_creators_isValid = ::OpenAPI::fromJsonValue(m_creators, json[QString("creators")]);
    m_creators_isSet = !json[QString("creators")].isNull() && m_creators_isValid;

    m_document_comment_isValid = ::OpenAPI::fromJsonValue(m_document_comment, json[QString("documentComment")]);
    m_document_comment_isSet = !json[QString("documentComment")].isNull() && m_document_comment_isValid;

    m_external_document_refs_isValid = ::OpenAPI::fromJsonValue(m_external_document_refs, json[QString("externalDocumentRefs")]);
    m_external_document_refs_isSet = !json[QString("externalDocumentRefs")].isNull() && m_external_document_refs_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_license_list_version_isValid = ::OpenAPI::fromJsonValue(m_license_list_version, json[QString("licenseListVersion")]);
    m_license_list_version_isSet = !json[QString("licenseListVersion")].isNull() && m_license_list_version_isValid;

    m_r_namespace_isValid = ::OpenAPI::fromJsonValue(m_r_namespace, json[QString("namespace")]);
    m_r_namespace_isSet = !json[QString("namespace")].isNull() && m_r_namespace_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;
}

QString OAIDocumentOccurrence::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDocumentOccurrence::asJsonObject() const {
    QJsonObject obj;
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_creator_comment_isSet) {
        obj.insert(QString("creatorComment"), ::OpenAPI::toJsonValue(m_creator_comment));
    }
    if (m_creators.size() > 0) {
        obj.insert(QString("creators"), ::OpenAPI::toJsonValue(m_creators));
    }
    if (m_document_comment_isSet) {
        obj.insert(QString("documentComment"), ::OpenAPI::toJsonValue(m_document_comment));
    }
    if (m_external_document_refs.size() > 0) {
        obj.insert(QString("externalDocumentRefs"), ::OpenAPI::toJsonValue(m_external_document_refs));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_license_list_version_isSet) {
        obj.insert(QString("licenseListVersion"), ::OpenAPI::toJsonValue(m_license_list_version));
    }
    if (m_r_namespace_isSet) {
        obj.insert(QString("namespace"), ::OpenAPI::toJsonValue(m_r_namespace));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    return obj;
}

QString OAIDocumentOccurrence::getCreateTime() const {
    return m_create_time;
}
void OAIDocumentOccurrence::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIDocumentOccurrence::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIDocumentOccurrence::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAIDocumentOccurrence::getCreatorComment() const {
    return m_creator_comment;
}
void OAIDocumentOccurrence::setCreatorComment(const QString &creator_comment) {
    m_creator_comment = creator_comment;
    m_creator_comment_isSet = true;
}

bool OAIDocumentOccurrence::is_creator_comment_Set() const{
    return m_creator_comment_isSet;
}

bool OAIDocumentOccurrence::is_creator_comment_Valid() const{
    return m_creator_comment_isValid;
}

QList<QString> OAIDocumentOccurrence::getCreators() const {
    return m_creators;
}
void OAIDocumentOccurrence::setCreators(const QList<QString> &creators) {
    m_creators = creators;
    m_creators_isSet = true;
}

bool OAIDocumentOccurrence::is_creators_Set() const{
    return m_creators_isSet;
}

bool OAIDocumentOccurrence::is_creators_Valid() const{
    return m_creators_isValid;
}

QString OAIDocumentOccurrence::getDocumentComment() const {
    return m_document_comment;
}
void OAIDocumentOccurrence::setDocumentComment(const QString &document_comment) {
    m_document_comment = document_comment;
    m_document_comment_isSet = true;
}

bool OAIDocumentOccurrence::is_document_comment_Set() const{
    return m_document_comment_isSet;
}

bool OAIDocumentOccurrence::is_document_comment_Valid() const{
    return m_document_comment_isValid;
}

QList<QString> OAIDocumentOccurrence::getExternalDocumentRefs() const {
    return m_external_document_refs;
}
void OAIDocumentOccurrence::setExternalDocumentRefs(const QList<QString> &external_document_refs) {
    m_external_document_refs = external_document_refs;
    m_external_document_refs_isSet = true;
}

bool OAIDocumentOccurrence::is_external_document_refs_Set() const{
    return m_external_document_refs_isSet;
}

bool OAIDocumentOccurrence::is_external_document_refs_Valid() const{
    return m_external_document_refs_isValid;
}

QString OAIDocumentOccurrence::getId() const {
    return m_id;
}
void OAIDocumentOccurrence::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIDocumentOccurrence::is_id_Set() const{
    return m_id_isSet;
}

bool OAIDocumentOccurrence::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIDocumentOccurrence::getLicenseListVersion() const {
    return m_license_list_version;
}
void OAIDocumentOccurrence::setLicenseListVersion(const QString &license_list_version) {
    m_license_list_version = license_list_version;
    m_license_list_version_isSet = true;
}

bool OAIDocumentOccurrence::is_license_list_version_Set() const{
    return m_license_list_version_isSet;
}

bool OAIDocumentOccurrence::is_license_list_version_Valid() const{
    return m_license_list_version_isValid;
}

QString OAIDocumentOccurrence::getRNamespace() const {
    return m_r_namespace;
}
void OAIDocumentOccurrence::setRNamespace(const QString &r_namespace) {
    m_r_namespace = r_namespace;
    m_r_namespace_isSet = true;
}

bool OAIDocumentOccurrence::is_r_namespace_Set() const{
    return m_r_namespace_isSet;
}

bool OAIDocumentOccurrence::is_r_namespace_Valid() const{
    return m_r_namespace_isValid;
}

QString OAIDocumentOccurrence::getTitle() const {
    return m_title;
}
void OAIDocumentOccurrence::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIDocumentOccurrence::is_title_Set() const{
    return m_title_isSet;
}

bool OAIDocumentOccurrence::is_title_Valid() const{
    return m_title_isValid;
}

bool OAIDocumentOccurrence::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creator_comment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creators.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_document_comment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_document_refs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_license_list_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_namespace_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDocumentOccurrence::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
