/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1alpha1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAttestationAuthority.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAttestationAuthority::OAIAttestationAuthority(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAttestationAuthority::OAIAttestationAuthority() {
    this->initializeModel();
}

OAIAttestationAuthority::~OAIAttestationAuthority() {}

void OAIAttestationAuthority::initializeModel() {

    m_hint_isSet = false;
    m_hint_isValid = false;
}

void OAIAttestationAuthority::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAttestationAuthority::fromJsonObject(QJsonObject json) {

    m_hint_isValid = ::OpenAPI::fromJsonValue(m_hint, json[QString("hint")]);
    m_hint_isSet = !json[QString("hint")].isNull() && m_hint_isValid;
}

QString OAIAttestationAuthority::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAttestationAuthority::asJsonObject() const {
    QJsonObject obj;
    if (m_hint.isSet()) {
        obj.insert(QString("hint"), ::OpenAPI::toJsonValue(m_hint));
    }
    return obj;
}

OAIAttestationAuthorityHint OAIAttestationAuthority::getHint() const {
    return m_hint;
}
void OAIAttestationAuthority::setHint(const OAIAttestationAuthorityHint &hint) {
    m_hint = hint;
    m_hint_isSet = true;
}

bool OAIAttestationAuthority::is_hint_Set() const{
    return m_hint_isSet;
}

bool OAIAttestationAuthority::is_hint_Valid() const{
    return m_hint_isValid;
}

bool OAIAttestationAuthority::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_hint.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAttestationAuthority::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
