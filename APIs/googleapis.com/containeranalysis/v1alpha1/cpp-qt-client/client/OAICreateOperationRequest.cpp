/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1alpha1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateOperationRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateOperationRequest::OAICreateOperationRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateOperationRequest::OAICreateOperationRequest() {
    this->initializeModel();
}

OAICreateOperationRequest::~OAICreateOperationRequest() {}

void OAICreateOperationRequest::initializeModel() {

    m_operation_isSet = false;
    m_operation_isValid = false;

    m_operation_id_isSet = false;
    m_operation_id_isValid = false;
}

void OAICreateOperationRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateOperationRequest::fromJsonObject(QJsonObject json) {

    m_operation_isValid = ::OpenAPI::fromJsonValue(m_operation, json[QString("operation")]);
    m_operation_isSet = !json[QString("operation")].isNull() && m_operation_isValid;

    m_operation_id_isValid = ::OpenAPI::fromJsonValue(m_operation_id, json[QString("operationId")]);
    m_operation_id_isSet = !json[QString("operationId")].isNull() && m_operation_id_isValid;
}

QString OAICreateOperationRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateOperationRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_operation.isSet()) {
        obj.insert(QString("operation"), ::OpenAPI::toJsonValue(m_operation));
    }
    if (m_operation_id_isSet) {
        obj.insert(QString("operationId"), ::OpenAPI::toJsonValue(m_operation_id));
    }
    return obj;
}

OAIOperation OAICreateOperationRequest::getOperation() const {
    return m_operation;
}
void OAICreateOperationRequest::setOperation(const OAIOperation &operation) {
    m_operation = operation;
    m_operation_isSet = true;
}

bool OAICreateOperationRequest::is_operation_Set() const{
    return m_operation_isSet;
}

bool OAICreateOperationRequest::is_operation_Valid() const{
    return m_operation_isValid;
}

QString OAICreateOperationRequest::getOperationId() const {
    return m_operation_id;
}
void OAICreateOperationRequest::setOperationId(const QString &operation_id) {
    m_operation_id = operation_id;
    m_operation_id_isSet = true;
}

bool OAICreateOperationRequest::is_operation_id_Set() const{
    return m_operation_id_isSet;
}

bool OAICreateOperationRequest::is_operation_id_Valid() const{
    return m_operation_id_isValid;
}

bool OAICreateOperationRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_operation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_operation_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateOperationRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
