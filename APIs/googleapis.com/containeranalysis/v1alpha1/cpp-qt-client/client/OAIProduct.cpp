/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1alpha1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProduct.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProduct::OAIProduct(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProduct::OAIProduct() {
    this->initializeModel();
}

OAIProduct::~OAIProduct() {}

void OAIProduct::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_identifier_helper_isSet = false;
    m_identifier_helper_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;
}

void OAIProduct::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProduct::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_identifier_helper_isValid = ::OpenAPI::fromJsonValue(m_identifier_helper, json[QString("identifierHelper")]);
    m_identifier_helper_isSet = !json[QString("identifierHelper")].isNull() && m_identifier_helper_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;
}

QString OAIProduct::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProduct::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_identifier_helper.isSet()) {
        obj.insert(QString("identifierHelper"), ::OpenAPI::toJsonValue(m_identifier_helper));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    return obj;
}

QString OAIProduct::getId() const {
    return m_id;
}
void OAIProduct::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIProduct::is_id_Set() const{
    return m_id_isSet;
}

bool OAIProduct::is_id_Valid() const{
    return m_id_isValid;
}

OAIIdentifierHelper OAIProduct::getIdentifierHelper() const {
    return m_identifier_helper;
}
void OAIProduct::setIdentifierHelper(const OAIIdentifierHelper &identifier_helper) {
    m_identifier_helper = identifier_helper;
    m_identifier_helper_isSet = true;
}

bool OAIProduct::is_identifier_helper_Set() const{
    return m_identifier_helper_isSet;
}

bool OAIProduct::is_identifier_helper_Valid() const{
    return m_identifier_helper_isValid;
}

QString OAIProduct::getName() const {
    return m_name;
}
void OAIProduct::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIProduct::is_name_Set() const{
    return m_name_isSet;
}

bool OAIProduct::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIProduct::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_identifier_helper.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProduct::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
