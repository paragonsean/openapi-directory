/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1alpha1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetPolicyOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetPolicyOptions::OAIGetPolicyOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetPolicyOptions::OAIGetPolicyOptions() {
    this->initializeModel();
}

OAIGetPolicyOptions::~OAIGetPolicyOptions() {}

void OAIGetPolicyOptions::initializeModel() {

    m_requested_policy_version_isSet = false;
    m_requested_policy_version_isValid = false;
}

void OAIGetPolicyOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetPolicyOptions::fromJsonObject(QJsonObject json) {

    m_requested_policy_version_isValid = ::OpenAPI::fromJsonValue(m_requested_policy_version, json[QString("requestedPolicyVersion")]);
    m_requested_policy_version_isSet = !json[QString("requestedPolicyVersion")].isNull() && m_requested_policy_version_isValid;
}

QString OAIGetPolicyOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetPolicyOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_requested_policy_version_isSet) {
        obj.insert(QString("requestedPolicyVersion"), ::OpenAPI::toJsonValue(m_requested_policy_version));
    }
    return obj;
}

qint32 OAIGetPolicyOptions::getRequestedPolicyVersion() const {
    return m_requested_policy_version;
}
void OAIGetPolicyOptions::setRequestedPolicyVersion(const qint32 &requested_policy_version) {
    m_requested_policy_version = requested_policy_version;
    m_requested_policy_version_isSet = true;
}

bool OAIGetPolicyOptions::is_requested_policy_version_Set() const{
    return m_requested_policy_version_isSet;
}

bool OAIGetPolicyOptions::is_requested_policy_version_Valid() const{
    return m_requested_policy_version_isValid;
}

bool OAIGetPolicyOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_requested_policy_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetPolicyOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
