/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1alpha1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpgradeNote.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpgradeNote::OAIUpgradeNote(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpgradeNote::OAIUpgradeNote() {
    this->initializeModel();
}

OAIUpgradeNote::~OAIUpgradeNote() {}

void OAIUpgradeNote::initializeModel() {

    m_distributions_isSet = false;
    m_distributions_isValid = false;

    m_package_isSet = false;
    m_package_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIUpgradeNote::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpgradeNote::fromJsonObject(QJsonObject json) {

    m_distributions_isValid = ::OpenAPI::fromJsonValue(m_distributions, json[QString("distributions")]);
    m_distributions_isSet = !json[QString("distributions")].isNull() && m_distributions_isValid;

    m_package_isValid = ::OpenAPI::fromJsonValue(m_package, json[QString("package")]);
    m_package_isSet = !json[QString("package")].isNull() && m_package_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIUpgradeNote::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpgradeNote::asJsonObject() const {
    QJsonObject obj;
    if (m_distributions.size() > 0) {
        obj.insert(QString("distributions"), ::OpenAPI::toJsonValue(m_distributions));
    }
    if (m_package_isSet) {
        obj.insert(QString("package"), ::OpenAPI::toJsonValue(m_package));
    }
    if (m_version.isSet()) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QList<OAIUpgradeDistribution> OAIUpgradeNote::getDistributions() const {
    return m_distributions;
}
void OAIUpgradeNote::setDistributions(const QList<OAIUpgradeDistribution> &distributions) {
    m_distributions = distributions;
    m_distributions_isSet = true;
}

bool OAIUpgradeNote::is_distributions_Set() const{
    return m_distributions_isSet;
}

bool OAIUpgradeNote::is_distributions_Valid() const{
    return m_distributions_isValid;
}

QString OAIUpgradeNote::getPackage() const {
    return m_package;
}
void OAIUpgradeNote::setPackage(const QString &package) {
    m_package = package;
    m_package_isSet = true;
}

bool OAIUpgradeNote::is_package_Set() const{
    return m_package_isSet;
}

bool OAIUpgradeNote::is_package_Valid() const{
    return m_package_isValid;
}

OAIVersion OAIUpgradeNote::getVersion() const {
    return m_version;
}
void OAIUpgradeNote::setVersion(const OAIVersion &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIUpgradeNote::is_version_Set() const{
    return m_version_isSet;
}

bool OAIUpgradeNote::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIUpgradeNote::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_distributions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_package_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpgradeNote::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
