/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1alpha1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDiscovery.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDiscovery::OAIDiscovery(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDiscovery::OAIDiscovery() {
    this->initializeModel();
}

OAIDiscovery::~OAIDiscovery() {}

void OAIDiscovery::initializeModel() {

    m_analysis_kind_isSet = false;
    m_analysis_kind_isValid = false;
}

void OAIDiscovery::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDiscovery::fromJsonObject(QJsonObject json) {

    m_analysis_kind_isValid = ::OpenAPI::fromJsonValue(m_analysis_kind, json[QString("analysisKind")]);
    m_analysis_kind_isSet = !json[QString("analysisKind")].isNull() && m_analysis_kind_isValid;
}

QString OAIDiscovery::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDiscovery::asJsonObject() const {
    QJsonObject obj;
    if (m_analysis_kind_isSet) {
        obj.insert(QString("analysisKind"), ::OpenAPI::toJsonValue(m_analysis_kind));
    }
    return obj;
}

QString OAIDiscovery::getAnalysisKind() const {
    return m_analysis_kind;
}
void OAIDiscovery::setAnalysisKind(const QString &analysis_kind) {
    m_analysis_kind = analysis_kind;
    m_analysis_kind_isSet = true;
}

bool OAIDiscovery::is_analysis_kind_Set() const{
    return m_analysis_kind_isSet;
}

bool OAIDiscovery::is_analysis_kind_Valid() const{
    return m_analysis_kind_isValid;
}

bool OAIDiscovery::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_analysis_kind_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDiscovery::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
