/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1alpha1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIComplianceVersion.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIComplianceVersion::OAIComplianceVersion(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIComplianceVersion::OAIComplianceVersion() {
    this->initializeModel();
}

OAIComplianceVersion::~OAIComplianceVersion() {}

void OAIComplianceVersion::initializeModel() {

    m_benchmark_document_isSet = false;
    m_benchmark_document_isValid = false;

    m_cpe_uri_isSet = false;
    m_cpe_uri_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIComplianceVersion::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIComplianceVersion::fromJsonObject(QJsonObject json) {

    m_benchmark_document_isValid = ::OpenAPI::fromJsonValue(m_benchmark_document, json[QString("benchmarkDocument")]);
    m_benchmark_document_isSet = !json[QString("benchmarkDocument")].isNull() && m_benchmark_document_isValid;

    m_cpe_uri_isValid = ::OpenAPI::fromJsonValue(m_cpe_uri, json[QString("cpeUri")]);
    m_cpe_uri_isSet = !json[QString("cpeUri")].isNull() && m_cpe_uri_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIComplianceVersion::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIComplianceVersion::asJsonObject() const {
    QJsonObject obj;
    if (m_benchmark_document_isSet) {
        obj.insert(QString("benchmarkDocument"), ::OpenAPI::toJsonValue(m_benchmark_document));
    }
    if (m_cpe_uri_isSet) {
        obj.insert(QString("cpeUri"), ::OpenAPI::toJsonValue(m_cpe_uri));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QString OAIComplianceVersion::getBenchmarkDocument() const {
    return m_benchmark_document;
}
void OAIComplianceVersion::setBenchmarkDocument(const QString &benchmark_document) {
    m_benchmark_document = benchmark_document;
    m_benchmark_document_isSet = true;
}

bool OAIComplianceVersion::is_benchmark_document_Set() const{
    return m_benchmark_document_isSet;
}

bool OAIComplianceVersion::is_benchmark_document_Valid() const{
    return m_benchmark_document_isValid;
}

QString OAIComplianceVersion::getCpeUri() const {
    return m_cpe_uri;
}
void OAIComplianceVersion::setCpeUri(const QString &cpe_uri) {
    m_cpe_uri = cpe_uri;
    m_cpe_uri_isSet = true;
}

bool OAIComplianceVersion::is_cpe_uri_Set() const{
    return m_cpe_uri_isSet;
}

bool OAIComplianceVersion::is_cpe_uri_Valid() const{
    return m_cpe_uri_isValid;
}

QString OAIComplianceVersion::getVersion() const {
    return m_version;
}
void OAIComplianceVersion::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIComplianceVersion::is_version_Set() const{
    return m_version_isSet;
}

bool OAIComplianceVersion::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIComplianceVersion::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_benchmark_document_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cpe_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIComplianceVersion::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
