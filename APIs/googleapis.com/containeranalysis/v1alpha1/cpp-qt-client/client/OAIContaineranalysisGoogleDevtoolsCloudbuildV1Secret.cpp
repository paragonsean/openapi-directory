/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1alpha1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIContaineranalysisGoogleDevtoolsCloudbuildV1Secret.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIContaineranalysisGoogleDevtoolsCloudbuildV1Secret::OAIContaineranalysisGoogleDevtoolsCloudbuildV1Secret(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIContaineranalysisGoogleDevtoolsCloudbuildV1Secret::OAIContaineranalysisGoogleDevtoolsCloudbuildV1Secret() {
    this->initializeModel();
}

OAIContaineranalysisGoogleDevtoolsCloudbuildV1Secret::~OAIContaineranalysisGoogleDevtoolsCloudbuildV1Secret() {}

void OAIContaineranalysisGoogleDevtoolsCloudbuildV1Secret::initializeModel() {

    m_kms_key_name_isSet = false;
    m_kms_key_name_isValid = false;

    m_secret_env_isSet = false;
    m_secret_env_isValid = false;
}

void OAIContaineranalysisGoogleDevtoolsCloudbuildV1Secret::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIContaineranalysisGoogleDevtoolsCloudbuildV1Secret::fromJsonObject(QJsonObject json) {

    m_kms_key_name_isValid = ::OpenAPI::fromJsonValue(m_kms_key_name, json[QString("kmsKeyName")]);
    m_kms_key_name_isSet = !json[QString("kmsKeyName")].isNull() && m_kms_key_name_isValid;

    m_secret_env_isValid = ::OpenAPI::fromJsonValue(m_secret_env, json[QString("secretEnv")]);
    m_secret_env_isSet = !json[QString("secretEnv")].isNull() && m_secret_env_isValid;
}

QString OAIContaineranalysisGoogleDevtoolsCloudbuildV1Secret::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIContaineranalysisGoogleDevtoolsCloudbuildV1Secret::asJsonObject() const {
    QJsonObject obj;
    if (m_kms_key_name_isSet) {
        obj.insert(QString("kmsKeyName"), ::OpenAPI::toJsonValue(m_kms_key_name));
    }
    if (m_secret_env.size() > 0) {
        obj.insert(QString("secretEnv"), ::OpenAPI::toJsonValue(m_secret_env));
    }
    return obj;
}

QString OAIContaineranalysisGoogleDevtoolsCloudbuildV1Secret::getKmsKeyName() const {
    return m_kms_key_name;
}
void OAIContaineranalysisGoogleDevtoolsCloudbuildV1Secret::setKmsKeyName(const QString &kms_key_name) {
    m_kms_key_name = kms_key_name;
    m_kms_key_name_isSet = true;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1Secret::is_kms_key_name_Set() const{
    return m_kms_key_name_isSet;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1Secret::is_kms_key_name_Valid() const{
    return m_kms_key_name_isValid;
}

QMap<QString, QByteArray> OAIContaineranalysisGoogleDevtoolsCloudbuildV1Secret::getSecretEnv() const {
    return m_secret_env;
}
void OAIContaineranalysisGoogleDevtoolsCloudbuildV1Secret::setSecretEnv(const QMap<QString, QByteArray> &secret_env) {
    m_secret_env = secret_env;
    m_secret_env_isSet = true;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1Secret::is_secret_env_Set() const{
    return m_secret_env_isSet;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1Secret::is_secret_env_Valid() const{
    return m_secret_env_isValid;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1Secret::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_kms_key_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secret_env.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1Secret::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
