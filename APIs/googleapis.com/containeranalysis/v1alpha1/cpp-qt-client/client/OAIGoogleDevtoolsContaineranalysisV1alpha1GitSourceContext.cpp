/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1alpha1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleDevtoolsContaineranalysisV1alpha1GitSourceContext.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleDevtoolsContaineranalysisV1alpha1GitSourceContext::OAIGoogleDevtoolsContaineranalysisV1alpha1GitSourceContext(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleDevtoolsContaineranalysisV1alpha1GitSourceContext::OAIGoogleDevtoolsContaineranalysisV1alpha1GitSourceContext() {
    this->initializeModel();
}

OAIGoogleDevtoolsContaineranalysisV1alpha1GitSourceContext::~OAIGoogleDevtoolsContaineranalysisV1alpha1GitSourceContext() {}

void OAIGoogleDevtoolsContaineranalysisV1alpha1GitSourceContext::initializeModel() {

    m_revision_id_isSet = false;
    m_revision_id_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIGoogleDevtoolsContaineranalysisV1alpha1GitSourceContext::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleDevtoolsContaineranalysisV1alpha1GitSourceContext::fromJsonObject(QJsonObject json) {

    m_revision_id_isValid = ::OpenAPI::fromJsonValue(m_revision_id, json[QString("revisionId")]);
    m_revision_id_isSet = !json[QString("revisionId")].isNull() && m_revision_id_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIGoogleDevtoolsContaineranalysisV1alpha1GitSourceContext::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleDevtoolsContaineranalysisV1alpha1GitSourceContext::asJsonObject() const {
    QJsonObject obj;
    if (m_revision_id_isSet) {
        obj.insert(QString("revisionId"), ::OpenAPI::toJsonValue(m_revision_id));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAIGoogleDevtoolsContaineranalysisV1alpha1GitSourceContext::getRevisionId() const {
    return m_revision_id;
}
void OAIGoogleDevtoolsContaineranalysisV1alpha1GitSourceContext::setRevisionId(const QString &revision_id) {
    m_revision_id = revision_id;
    m_revision_id_isSet = true;
}

bool OAIGoogleDevtoolsContaineranalysisV1alpha1GitSourceContext::is_revision_id_Set() const{
    return m_revision_id_isSet;
}

bool OAIGoogleDevtoolsContaineranalysisV1alpha1GitSourceContext::is_revision_id_Valid() const{
    return m_revision_id_isValid;
}

QString OAIGoogleDevtoolsContaineranalysisV1alpha1GitSourceContext::getUrl() const {
    return m_url;
}
void OAIGoogleDevtoolsContaineranalysisV1alpha1GitSourceContext::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIGoogleDevtoolsContaineranalysisV1alpha1GitSourceContext::is_url_Set() const{
    return m_url_isSet;
}

bool OAIGoogleDevtoolsContaineranalysisV1alpha1GitSourceContext::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIGoogleDevtoolsContaineranalysisV1alpha1GitSourceContext::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_revision_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleDevtoolsContaineranalysisV1alpha1GitSourceContext::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
