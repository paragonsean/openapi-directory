/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1alpha1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions::OAIContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions::OAIContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions() {
    this->initializeModel();
}

OAIContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions::~OAIContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions() {}

void OAIContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions::initializeModel() {

    m_automap_substitutions_isSet = false;
    m_automap_substitutions_isValid = false;

    m_default_logs_bucket_behavior_isSet = false;
    m_default_logs_bucket_behavior_isValid = false;

    m_disk_size_gb_isSet = false;
    m_disk_size_gb_isValid = false;

    m_dynamic_substitutions_isSet = false;
    m_dynamic_substitutions_isValid = false;

    m_env_isSet = false;
    m_env_isValid = false;

    m_log_streaming_option_isSet = false;
    m_log_streaming_option_isValid = false;

    m_logging_isSet = false;
    m_logging_isValid = false;

    m_machine_type_isSet = false;
    m_machine_type_isValid = false;

    m_pool_isSet = false;
    m_pool_isValid = false;

    m_requested_verify_option_isSet = false;
    m_requested_verify_option_isValid = false;

    m_secret_env_isSet = false;
    m_secret_env_isValid = false;

    m_source_provenance_hash_isSet = false;
    m_source_provenance_hash_isValid = false;

    m_substitution_option_isSet = false;
    m_substitution_option_isValid = false;

    m_volumes_isSet = false;
    m_volumes_isValid = false;

    m_worker_pool_isSet = false;
    m_worker_pool_isValid = false;
}

void OAIContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions::fromJsonObject(QJsonObject json) {

    m_automap_substitutions_isValid = ::OpenAPI::fromJsonValue(m_automap_substitutions, json[QString("automapSubstitutions")]);
    m_automap_substitutions_isSet = !json[QString("automapSubstitutions")].isNull() && m_automap_substitutions_isValid;

    m_default_logs_bucket_behavior_isValid = ::OpenAPI::fromJsonValue(m_default_logs_bucket_behavior, json[QString("defaultLogsBucketBehavior")]);
    m_default_logs_bucket_behavior_isSet = !json[QString("defaultLogsBucketBehavior")].isNull() && m_default_logs_bucket_behavior_isValid;

    m_disk_size_gb_isValid = ::OpenAPI::fromJsonValue(m_disk_size_gb, json[QString("diskSizeGb")]);
    m_disk_size_gb_isSet = !json[QString("diskSizeGb")].isNull() && m_disk_size_gb_isValid;

    m_dynamic_substitutions_isValid = ::OpenAPI::fromJsonValue(m_dynamic_substitutions, json[QString("dynamicSubstitutions")]);
    m_dynamic_substitutions_isSet = !json[QString("dynamicSubstitutions")].isNull() && m_dynamic_substitutions_isValid;

    m_env_isValid = ::OpenAPI::fromJsonValue(m_env, json[QString("env")]);
    m_env_isSet = !json[QString("env")].isNull() && m_env_isValid;

    m_log_streaming_option_isValid = ::OpenAPI::fromJsonValue(m_log_streaming_option, json[QString("logStreamingOption")]);
    m_log_streaming_option_isSet = !json[QString("logStreamingOption")].isNull() && m_log_streaming_option_isValid;

    m_logging_isValid = ::OpenAPI::fromJsonValue(m_logging, json[QString("logging")]);
    m_logging_isSet = !json[QString("logging")].isNull() && m_logging_isValid;

    m_machine_type_isValid = ::OpenAPI::fromJsonValue(m_machine_type, json[QString("machineType")]);
    m_machine_type_isSet = !json[QString("machineType")].isNull() && m_machine_type_isValid;

    m_pool_isValid = ::OpenAPI::fromJsonValue(m_pool, json[QString("pool")]);
    m_pool_isSet = !json[QString("pool")].isNull() && m_pool_isValid;

    m_requested_verify_option_isValid = ::OpenAPI::fromJsonValue(m_requested_verify_option, json[QString("requestedVerifyOption")]);
    m_requested_verify_option_isSet = !json[QString("requestedVerifyOption")].isNull() && m_requested_verify_option_isValid;

    m_secret_env_isValid = ::OpenAPI::fromJsonValue(m_secret_env, json[QString("secretEnv")]);
    m_secret_env_isSet = !json[QString("secretEnv")].isNull() && m_secret_env_isValid;

    m_source_provenance_hash_isValid = ::OpenAPI::fromJsonValue(m_source_provenance_hash, json[QString("sourceProvenanceHash")]);
    m_source_provenance_hash_isSet = !json[QString("sourceProvenanceHash")].isNull() && m_source_provenance_hash_isValid;

    m_substitution_option_isValid = ::OpenAPI::fromJsonValue(m_substitution_option, json[QString("substitutionOption")]);
    m_substitution_option_isSet = !json[QString("substitutionOption")].isNull() && m_substitution_option_isValid;

    m_volumes_isValid = ::OpenAPI::fromJsonValue(m_volumes, json[QString("volumes")]);
    m_volumes_isSet = !json[QString("volumes")].isNull() && m_volumes_isValid;

    m_worker_pool_isValid = ::OpenAPI::fromJsonValue(m_worker_pool, json[QString("workerPool")]);
    m_worker_pool_isSet = !json[QString("workerPool")].isNull() && m_worker_pool_isValid;
}

QString OAIContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_automap_substitutions_isSet) {
        obj.insert(QString("automapSubstitutions"), ::OpenAPI::toJsonValue(m_automap_substitutions));
    }
    if (m_default_logs_bucket_behavior_isSet) {
        obj.insert(QString("defaultLogsBucketBehavior"), ::OpenAPI::toJsonValue(m_default_logs_bucket_behavior));
    }
    if (m_disk_size_gb_isSet) {
        obj.insert(QString("diskSizeGb"), ::OpenAPI::toJsonValue(m_disk_size_gb));
    }
    if (m_dynamic_substitutions_isSet) {
        obj.insert(QString("dynamicSubstitutions"), ::OpenAPI::toJsonValue(m_dynamic_substitutions));
    }
    if (m_env.size() > 0) {
        obj.insert(QString("env"), ::OpenAPI::toJsonValue(m_env));
    }
    if (m_log_streaming_option_isSet) {
        obj.insert(QString("logStreamingOption"), ::OpenAPI::toJsonValue(m_log_streaming_option));
    }
    if (m_logging_isSet) {
        obj.insert(QString("logging"), ::OpenAPI::toJsonValue(m_logging));
    }
    if (m_machine_type_isSet) {
        obj.insert(QString("machineType"), ::OpenAPI::toJsonValue(m_machine_type));
    }
    if (m_pool.isSet()) {
        obj.insert(QString("pool"), ::OpenAPI::toJsonValue(m_pool));
    }
    if (m_requested_verify_option_isSet) {
        obj.insert(QString("requestedVerifyOption"), ::OpenAPI::toJsonValue(m_requested_verify_option));
    }
    if (m_secret_env.size() > 0) {
        obj.insert(QString("secretEnv"), ::OpenAPI::toJsonValue(m_secret_env));
    }
    if (m_source_provenance_hash.size() > 0) {
        obj.insert(QString("sourceProvenanceHash"), ::OpenAPI::toJsonValue(m_source_provenance_hash));
    }
    if (m_substitution_option_isSet) {
        obj.insert(QString("substitutionOption"), ::OpenAPI::toJsonValue(m_substitution_option));
    }
    if (m_volumes.size() > 0) {
        obj.insert(QString("volumes"), ::OpenAPI::toJsonValue(m_volumes));
    }
    if (m_worker_pool_isSet) {
        obj.insert(QString("workerPool"), ::OpenAPI::toJsonValue(m_worker_pool));
    }
    return obj;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions::isAutomapSubstitutions() const {
    return m_automap_substitutions;
}
void OAIContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions::setAutomapSubstitutions(const bool &automap_substitutions) {
    m_automap_substitutions = automap_substitutions;
    m_automap_substitutions_isSet = true;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions::is_automap_substitutions_Set() const{
    return m_automap_substitutions_isSet;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions::is_automap_substitutions_Valid() const{
    return m_automap_substitutions_isValid;
}

QString OAIContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions::getDefaultLogsBucketBehavior() const {
    return m_default_logs_bucket_behavior;
}
void OAIContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions::setDefaultLogsBucketBehavior(const QString &default_logs_bucket_behavior) {
    m_default_logs_bucket_behavior = default_logs_bucket_behavior;
    m_default_logs_bucket_behavior_isSet = true;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions::is_default_logs_bucket_behavior_Set() const{
    return m_default_logs_bucket_behavior_isSet;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions::is_default_logs_bucket_behavior_Valid() const{
    return m_default_logs_bucket_behavior_isValid;
}

QString OAIContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions::getDiskSizeGb() const {
    return m_disk_size_gb;
}
void OAIContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions::setDiskSizeGb(const QString &disk_size_gb) {
    m_disk_size_gb = disk_size_gb;
    m_disk_size_gb_isSet = true;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions::is_disk_size_gb_Set() const{
    return m_disk_size_gb_isSet;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions::is_disk_size_gb_Valid() const{
    return m_disk_size_gb_isValid;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions::isDynamicSubstitutions() const {
    return m_dynamic_substitutions;
}
void OAIContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions::setDynamicSubstitutions(const bool &dynamic_substitutions) {
    m_dynamic_substitutions = dynamic_substitutions;
    m_dynamic_substitutions_isSet = true;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions::is_dynamic_substitutions_Set() const{
    return m_dynamic_substitutions_isSet;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions::is_dynamic_substitutions_Valid() const{
    return m_dynamic_substitutions_isValid;
}

QList<QString> OAIContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions::getEnv() const {
    return m_env;
}
void OAIContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions::setEnv(const QList<QString> &env) {
    m_env = env;
    m_env_isSet = true;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions::is_env_Set() const{
    return m_env_isSet;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions::is_env_Valid() const{
    return m_env_isValid;
}

QString OAIContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions::getLogStreamingOption() const {
    return m_log_streaming_option;
}
void OAIContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions::setLogStreamingOption(const QString &log_streaming_option) {
    m_log_streaming_option = log_streaming_option;
    m_log_streaming_option_isSet = true;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions::is_log_streaming_option_Set() const{
    return m_log_streaming_option_isSet;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions::is_log_streaming_option_Valid() const{
    return m_log_streaming_option_isValid;
}

QString OAIContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions::getLogging() const {
    return m_logging;
}
void OAIContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions::setLogging(const QString &logging) {
    m_logging = logging;
    m_logging_isSet = true;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions::is_logging_Set() const{
    return m_logging_isSet;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions::is_logging_Valid() const{
    return m_logging_isValid;
}

QString OAIContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions::getMachineType() const {
    return m_machine_type;
}
void OAIContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions::setMachineType(const QString &machine_type) {
    m_machine_type = machine_type;
    m_machine_type_isSet = true;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions::is_machine_type_Set() const{
    return m_machine_type_isSet;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions::is_machine_type_Valid() const{
    return m_machine_type_isValid;
}

OAIContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptionsPoolOption OAIContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions::getPool() const {
    return m_pool;
}
void OAIContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions::setPool(const OAIContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptionsPoolOption &pool) {
    m_pool = pool;
    m_pool_isSet = true;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions::is_pool_Set() const{
    return m_pool_isSet;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions::is_pool_Valid() const{
    return m_pool_isValid;
}

QString OAIContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions::getRequestedVerifyOption() const {
    return m_requested_verify_option;
}
void OAIContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions::setRequestedVerifyOption(const QString &requested_verify_option) {
    m_requested_verify_option = requested_verify_option;
    m_requested_verify_option_isSet = true;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions::is_requested_verify_option_Set() const{
    return m_requested_verify_option_isSet;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions::is_requested_verify_option_Valid() const{
    return m_requested_verify_option_isValid;
}

QList<QString> OAIContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions::getSecretEnv() const {
    return m_secret_env;
}
void OAIContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions::setSecretEnv(const QList<QString> &secret_env) {
    m_secret_env = secret_env;
    m_secret_env_isSet = true;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions::is_secret_env_Set() const{
    return m_secret_env_isSet;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions::is_secret_env_Valid() const{
    return m_secret_env_isValid;
}

QList<QString> OAIContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions::getSourceProvenanceHash() const {
    return m_source_provenance_hash;
}
void OAIContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions::setSourceProvenanceHash(const QList<QString> &source_provenance_hash) {
    m_source_provenance_hash = source_provenance_hash;
    m_source_provenance_hash_isSet = true;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions::is_source_provenance_hash_Set() const{
    return m_source_provenance_hash_isSet;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions::is_source_provenance_hash_Valid() const{
    return m_source_provenance_hash_isValid;
}

QString OAIContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions::getSubstitutionOption() const {
    return m_substitution_option;
}
void OAIContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions::setSubstitutionOption(const QString &substitution_option) {
    m_substitution_option = substitution_option;
    m_substitution_option_isSet = true;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions::is_substitution_option_Set() const{
    return m_substitution_option_isSet;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions::is_substitution_option_Valid() const{
    return m_substitution_option_isValid;
}

QList<OAIContaineranalysisGoogleDevtoolsCloudbuildV1Volume> OAIContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions::getVolumes() const {
    return m_volumes;
}
void OAIContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions::setVolumes(const QList<OAIContaineranalysisGoogleDevtoolsCloudbuildV1Volume> &volumes) {
    m_volumes = volumes;
    m_volumes_isSet = true;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions::is_volumes_Set() const{
    return m_volumes_isSet;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions::is_volumes_Valid() const{
    return m_volumes_isValid;
}

QString OAIContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions::getWorkerPool() const {
    return m_worker_pool;
}
void OAIContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions::setWorkerPool(const QString &worker_pool) {
    m_worker_pool = worker_pool;
    m_worker_pool_isSet = true;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions::is_worker_pool_Set() const{
    return m_worker_pool_isSet;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions::is_worker_pool_Valid() const{
    return m_worker_pool_isValid;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_automap_substitutions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_logs_bucket_behavior_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disk_size_gb_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dynamic_substitutions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_env.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_log_streaming_option_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_logging_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_machine_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pool.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_requested_verify_option_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secret_env.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_provenance_hash.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_substitution_option_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_volumes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_worker_pool_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
