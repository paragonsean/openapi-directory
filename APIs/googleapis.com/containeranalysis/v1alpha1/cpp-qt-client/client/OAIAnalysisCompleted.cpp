/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1alpha1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAnalysisCompleted.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAnalysisCompleted::OAIAnalysisCompleted(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAnalysisCompleted::OAIAnalysisCompleted() {
    this->initializeModel();
}

OAIAnalysisCompleted::~OAIAnalysisCompleted() {}

void OAIAnalysisCompleted::initializeModel() {

    m_analysis_type_isSet = false;
    m_analysis_type_isValid = false;
}

void OAIAnalysisCompleted::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAnalysisCompleted::fromJsonObject(QJsonObject json) {

    m_analysis_type_isValid = ::OpenAPI::fromJsonValue(m_analysis_type, json[QString("analysisType")]);
    m_analysis_type_isSet = !json[QString("analysisType")].isNull() && m_analysis_type_isValid;
}

QString OAIAnalysisCompleted::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAnalysisCompleted::asJsonObject() const {
    QJsonObject obj;
    if (m_analysis_type.size() > 0) {
        obj.insert(QString("analysisType"), ::OpenAPI::toJsonValue(m_analysis_type));
    }
    return obj;
}

QList<QString> OAIAnalysisCompleted::getAnalysisType() const {
    return m_analysis_type;
}
void OAIAnalysisCompleted::setAnalysisType(const QList<QString> &analysis_type) {
    m_analysis_type = analysis_type;
    m_analysis_type_isSet = true;
}

bool OAIAnalysisCompleted::is_analysis_type_Set() const{
    return m_analysis_type_isSet;
}

bool OAIAnalysisCompleted::is_analysis_type_Valid() const{
    return m_analysis_type_isValid;
}

bool OAIAnalysisCompleted::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_analysis_type.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAnalysisCompleted::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
