/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1alpha1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListNoteOccurrencesResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListNoteOccurrencesResponse::OAIListNoteOccurrencesResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListNoteOccurrencesResponse::OAIListNoteOccurrencesResponse() {
    this->initializeModel();
}

OAIListNoteOccurrencesResponse::~OAIListNoteOccurrencesResponse() {}

void OAIListNoteOccurrencesResponse::initializeModel() {

    m_next_page_token_isSet = false;
    m_next_page_token_isValid = false;

    m_occurrences_isSet = false;
    m_occurrences_isValid = false;
}

void OAIListNoteOccurrencesResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListNoteOccurrencesResponse::fromJsonObject(QJsonObject json) {

    m_next_page_token_isValid = ::OpenAPI::fromJsonValue(m_next_page_token, json[QString("nextPageToken")]);
    m_next_page_token_isSet = !json[QString("nextPageToken")].isNull() && m_next_page_token_isValid;

    m_occurrences_isValid = ::OpenAPI::fromJsonValue(m_occurrences, json[QString("occurrences")]);
    m_occurrences_isSet = !json[QString("occurrences")].isNull() && m_occurrences_isValid;
}

QString OAIListNoteOccurrencesResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListNoteOccurrencesResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_next_page_token_isSet) {
        obj.insert(QString("nextPageToken"), ::OpenAPI::toJsonValue(m_next_page_token));
    }
    if (m_occurrences.size() > 0) {
        obj.insert(QString("occurrences"), ::OpenAPI::toJsonValue(m_occurrences));
    }
    return obj;
}

QString OAIListNoteOccurrencesResponse::getNextPageToken() const {
    return m_next_page_token;
}
void OAIListNoteOccurrencesResponse::setNextPageToken(const QString &next_page_token) {
    m_next_page_token = next_page_token;
    m_next_page_token_isSet = true;
}

bool OAIListNoteOccurrencesResponse::is_next_page_token_Set() const{
    return m_next_page_token_isSet;
}

bool OAIListNoteOccurrencesResponse::is_next_page_token_Valid() const{
    return m_next_page_token_isValid;
}

QList<OAIOccurrence> OAIListNoteOccurrencesResponse::getOccurrences() const {
    return m_occurrences;
}
void OAIListNoteOccurrencesResponse::setOccurrences(const QList<OAIOccurrence> &occurrences) {
    m_occurrences = occurrences;
    m_occurrences_isSet = true;
}

bool OAIListNoteOccurrencesResponse::is_occurrences_Set() const{
    return m_occurrences_isSet;
}

bool OAIListNoteOccurrencesResponse::is_occurrences_Valid() const{
    return m_occurrences_isValid;
}

bool OAIListNoteOccurrencesResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_next_page_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_occurrences.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListNoteOccurrencesResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
