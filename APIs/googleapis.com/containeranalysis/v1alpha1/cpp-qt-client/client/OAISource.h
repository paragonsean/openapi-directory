/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1alpha1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAISource.h
 *
 * Source describes the location of the source used for the build.
 */

#ifndef OAISource_H
#define OAISource_H

#include <QJsonObject>

#include "OAIFileHashes.h"
#include "OAIGoogleDevtoolsContaineranalysisV1alpha1SourceContext.h"
#include "OAIRepoSource.h"
#include "OAIStorageSource.h"
#include <QList>
#include <QMap>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIGoogleDevtoolsContaineranalysisV1alpha1SourceContext;
class OAIStorageSource;
class OAIFileHashes;
class OAIRepoSource;

class OAISource : public OAIObject {
public:
    OAISource();
    OAISource(QString json);
    ~OAISource() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<OAIGoogleDevtoolsContaineranalysisV1alpha1SourceContext> getAdditionalContexts() const;
    void setAdditionalContexts(const QList<OAIGoogleDevtoolsContaineranalysisV1alpha1SourceContext> &additional_contexts);
    bool is_additional_contexts_Set() const;
    bool is_additional_contexts_Valid() const;

    OAIStorageSource getArtifactStorageSource() const;
    void setArtifactStorageSource(const OAIStorageSource &artifact_storage_source);
    bool is_artifact_storage_source_Set() const;
    bool is_artifact_storage_source_Valid() const;

    OAIGoogleDevtoolsContaineranalysisV1alpha1SourceContext getContext() const;
    void setContext(const OAIGoogleDevtoolsContaineranalysisV1alpha1SourceContext &context);
    bool is_context_Set() const;
    bool is_context_Valid() const;

    QMap<QString, OAIFileHashes> getFileHashes() const;
    void setFileHashes(const QMap<QString, OAIFileHashes> &file_hashes);
    bool is_file_hashes_Set() const;
    bool is_file_hashes_Valid() const;

    Q_DECL_DEPRECATED OAIRepoSource getRepoSource() const;
    Q_DECL_DEPRECATED void setRepoSource(const OAIRepoSource &repo_source);
    Q_DECL_DEPRECATED bool is_repo_source_Set() const;
    Q_DECL_DEPRECATED bool is_repo_source_Valid() const;

    OAIStorageSource getStorageSource() const;
    void setStorageSource(const OAIStorageSource &storage_source);
    bool is_storage_source_Set() const;
    bool is_storage_source_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<OAIGoogleDevtoolsContaineranalysisV1alpha1SourceContext> m_additional_contexts;
    bool m_additional_contexts_isSet;
    bool m_additional_contexts_isValid;

    OAIStorageSource m_artifact_storage_source;
    bool m_artifact_storage_source_isSet;
    bool m_artifact_storage_source_isValid;

    OAIGoogleDevtoolsContaineranalysisV1alpha1SourceContext m_context;
    bool m_context_isSet;
    bool m_context_isValid;

    QMap<QString, OAIFileHashes> m_file_hashes;
    bool m_file_hashes_isSet;
    bool m_file_hashes_isValid;

    OAIRepoSource m_repo_source;
    bool m_repo_source_isSet;
    bool m_repo_source_isValid;

    OAIStorageSource m_storage_source;
    bool m_storage_source_isSet;
    bool m_storage_source_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAISource)

#endif // OAISource_H
