/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1alpha1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPackageInfoOccurrence.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPackageInfoOccurrence::OAIPackageInfoOccurrence(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPackageInfoOccurrence::OAIPackageInfoOccurrence() {
    this->initializeModel();
}

OAIPackageInfoOccurrence::~OAIPackageInfoOccurrence() {}

void OAIPackageInfoOccurrence::initializeModel() {

    m_comment_isSet = false;
    m_comment_isValid = false;

    m_filename_isSet = false;
    m_filename_isValid = false;

    m_home_page_isSet = false;
    m_home_page_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_license_concluded_isSet = false;
    m_license_concluded_isValid = false;

    m_package_type_isSet = false;
    m_package_type_isValid = false;

    m_source_info_isSet = false;
    m_source_info_isValid = false;

    m_summary_description_isSet = false;
    m_summary_description_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIPackageInfoOccurrence::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPackageInfoOccurrence::fromJsonObject(QJsonObject json) {

    m_comment_isValid = ::OpenAPI::fromJsonValue(m_comment, json[QString("comment")]);
    m_comment_isSet = !json[QString("comment")].isNull() && m_comment_isValid;

    m_filename_isValid = ::OpenAPI::fromJsonValue(m_filename, json[QString("filename")]);
    m_filename_isSet = !json[QString("filename")].isNull() && m_filename_isValid;

    m_home_page_isValid = ::OpenAPI::fromJsonValue(m_home_page, json[QString("homePage")]);
    m_home_page_isSet = !json[QString("homePage")].isNull() && m_home_page_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_license_concluded_isValid = ::OpenAPI::fromJsonValue(m_license_concluded, json[QString("licenseConcluded")]);
    m_license_concluded_isSet = !json[QString("licenseConcluded")].isNull() && m_license_concluded_isValid;

    m_package_type_isValid = ::OpenAPI::fromJsonValue(m_package_type, json[QString("packageType")]);
    m_package_type_isSet = !json[QString("packageType")].isNull() && m_package_type_isValid;

    m_source_info_isValid = ::OpenAPI::fromJsonValue(m_source_info, json[QString("sourceInfo")]);
    m_source_info_isSet = !json[QString("sourceInfo")].isNull() && m_source_info_isValid;

    m_summary_description_isValid = ::OpenAPI::fromJsonValue(m_summary_description, json[QString("summaryDescription")]);
    m_summary_description_isSet = !json[QString("summaryDescription")].isNull() && m_summary_description_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIPackageInfoOccurrence::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPackageInfoOccurrence::asJsonObject() const {
    QJsonObject obj;
    if (m_comment_isSet) {
        obj.insert(QString("comment"), ::OpenAPI::toJsonValue(m_comment));
    }
    if (m_filename_isSet) {
        obj.insert(QString("filename"), ::OpenAPI::toJsonValue(m_filename));
    }
    if (m_home_page_isSet) {
        obj.insert(QString("homePage"), ::OpenAPI::toJsonValue(m_home_page));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_license_concluded.isSet()) {
        obj.insert(QString("licenseConcluded"), ::OpenAPI::toJsonValue(m_license_concluded));
    }
    if (m_package_type_isSet) {
        obj.insert(QString("packageType"), ::OpenAPI::toJsonValue(m_package_type));
    }
    if (m_source_info_isSet) {
        obj.insert(QString("sourceInfo"), ::OpenAPI::toJsonValue(m_source_info));
    }
    if (m_summary_description_isSet) {
        obj.insert(QString("summaryDescription"), ::OpenAPI::toJsonValue(m_summary_description));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QString OAIPackageInfoOccurrence::getComment() const {
    return m_comment;
}
void OAIPackageInfoOccurrence::setComment(const QString &comment) {
    m_comment = comment;
    m_comment_isSet = true;
}

bool OAIPackageInfoOccurrence::is_comment_Set() const{
    return m_comment_isSet;
}

bool OAIPackageInfoOccurrence::is_comment_Valid() const{
    return m_comment_isValid;
}

QString OAIPackageInfoOccurrence::getFilename() const {
    return m_filename;
}
void OAIPackageInfoOccurrence::setFilename(const QString &filename) {
    m_filename = filename;
    m_filename_isSet = true;
}

bool OAIPackageInfoOccurrence::is_filename_Set() const{
    return m_filename_isSet;
}

bool OAIPackageInfoOccurrence::is_filename_Valid() const{
    return m_filename_isValid;
}

QString OAIPackageInfoOccurrence::getHomePage() const {
    return m_home_page;
}
void OAIPackageInfoOccurrence::setHomePage(const QString &home_page) {
    m_home_page = home_page;
    m_home_page_isSet = true;
}

bool OAIPackageInfoOccurrence::is_home_page_Set() const{
    return m_home_page_isSet;
}

bool OAIPackageInfoOccurrence::is_home_page_Valid() const{
    return m_home_page_isValid;
}

QString OAIPackageInfoOccurrence::getId() const {
    return m_id;
}
void OAIPackageInfoOccurrence::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIPackageInfoOccurrence::is_id_Set() const{
    return m_id_isSet;
}

bool OAIPackageInfoOccurrence::is_id_Valid() const{
    return m_id_isValid;
}

OAILicense OAIPackageInfoOccurrence::getLicenseConcluded() const {
    return m_license_concluded;
}
void OAIPackageInfoOccurrence::setLicenseConcluded(const OAILicense &license_concluded) {
    m_license_concluded = license_concluded;
    m_license_concluded_isSet = true;
}

bool OAIPackageInfoOccurrence::is_license_concluded_Set() const{
    return m_license_concluded_isSet;
}

bool OAIPackageInfoOccurrence::is_license_concluded_Valid() const{
    return m_license_concluded_isValid;
}

QString OAIPackageInfoOccurrence::getPackageType() const {
    return m_package_type;
}
void OAIPackageInfoOccurrence::setPackageType(const QString &package_type) {
    m_package_type = package_type;
    m_package_type_isSet = true;
}

bool OAIPackageInfoOccurrence::is_package_type_Set() const{
    return m_package_type_isSet;
}

bool OAIPackageInfoOccurrence::is_package_type_Valid() const{
    return m_package_type_isValid;
}

QString OAIPackageInfoOccurrence::getSourceInfo() const {
    return m_source_info;
}
void OAIPackageInfoOccurrence::setSourceInfo(const QString &source_info) {
    m_source_info = source_info;
    m_source_info_isSet = true;
}

bool OAIPackageInfoOccurrence::is_source_info_Set() const{
    return m_source_info_isSet;
}

bool OAIPackageInfoOccurrence::is_source_info_Valid() const{
    return m_source_info_isValid;
}

QString OAIPackageInfoOccurrence::getSummaryDescription() const {
    return m_summary_description;
}
void OAIPackageInfoOccurrence::setSummaryDescription(const QString &summary_description) {
    m_summary_description = summary_description;
    m_summary_description_isSet = true;
}

bool OAIPackageInfoOccurrence::is_summary_description_Set() const{
    return m_summary_description_isSet;
}

bool OAIPackageInfoOccurrence::is_summary_description_Valid() const{
    return m_summary_description_isValid;
}

QString OAIPackageInfoOccurrence::getTitle() const {
    return m_title;
}
void OAIPackageInfoOccurrence::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIPackageInfoOccurrence::is_title_Set() const{
    return m_title_isSet;
}

bool OAIPackageInfoOccurrence::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIPackageInfoOccurrence::getVersion() const {
    return m_version;
}
void OAIPackageInfoOccurrence::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIPackageInfoOccurrence::is_version_Set() const{
    return m_version_isSet;
}

bool OAIPackageInfoOccurrence::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIPackageInfoOccurrence::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_comment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filename_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_home_page_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_license_concluded.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_package_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_info_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_summary_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPackageInfoOccurrence::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
