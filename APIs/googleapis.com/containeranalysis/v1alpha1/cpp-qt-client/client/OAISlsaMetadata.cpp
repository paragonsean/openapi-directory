/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1alpha1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISlsaMetadata.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISlsaMetadata::OAISlsaMetadata(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISlsaMetadata::OAISlsaMetadata() {
    this->initializeModel();
}

OAISlsaMetadata::~OAISlsaMetadata() {}

void OAISlsaMetadata::initializeModel() {

    m_build_finished_on_isSet = false;
    m_build_finished_on_isValid = false;

    m_build_invocation_id_isSet = false;
    m_build_invocation_id_isValid = false;

    m_build_started_on_isSet = false;
    m_build_started_on_isValid = false;

    m_completeness_isSet = false;
    m_completeness_isValid = false;

    m_reproducible_isSet = false;
    m_reproducible_isValid = false;
}

void OAISlsaMetadata::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISlsaMetadata::fromJsonObject(QJsonObject json) {

    m_build_finished_on_isValid = ::OpenAPI::fromJsonValue(m_build_finished_on, json[QString("buildFinishedOn")]);
    m_build_finished_on_isSet = !json[QString("buildFinishedOn")].isNull() && m_build_finished_on_isValid;

    m_build_invocation_id_isValid = ::OpenAPI::fromJsonValue(m_build_invocation_id, json[QString("buildInvocationId")]);
    m_build_invocation_id_isSet = !json[QString("buildInvocationId")].isNull() && m_build_invocation_id_isValid;

    m_build_started_on_isValid = ::OpenAPI::fromJsonValue(m_build_started_on, json[QString("buildStartedOn")]);
    m_build_started_on_isSet = !json[QString("buildStartedOn")].isNull() && m_build_started_on_isValid;

    m_completeness_isValid = ::OpenAPI::fromJsonValue(m_completeness, json[QString("completeness")]);
    m_completeness_isSet = !json[QString("completeness")].isNull() && m_completeness_isValid;

    m_reproducible_isValid = ::OpenAPI::fromJsonValue(m_reproducible, json[QString("reproducible")]);
    m_reproducible_isSet = !json[QString("reproducible")].isNull() && m_reproducible_isValid;
}

QString OAISlsaMetadata::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISlsaMetadata::asJsonObject() const {
    QJsonObject obj;
    if (m_build_finished_on_isSet) {
        obj.insert(QString("buildFinishedOn"), ::OpenAPI::toJsonValue(m_build_finished_on));
    }
    if (m_build_invocation_id_isSet) {
        obj.insert(QString("buildInvocationId"), ::OpenAPI::toJsonValue(m_build_invocation_id));
    }
    if (m_build_started_on_isSet) {
        obj.insert(QString("buildStartedOn"), ::OpenAPI::toJsonValue(m_build_started_on));
    }
    if (m_completeness.isSet()) {
        obj.insert(QString("completeness"), ::OpenAPI::toJsonValue(m_completeness));
    }
    if (m_reproducible_isSet) {
        obj.insert(QString("reproducible"), ::OpenAPI::toJsonValue(m_reproducible));
    }
    return obj;
}

QString OAISlsaMetadata::getBuildFinishedOn() const {
    return m_build_finished_on;
}
void OAISlsaMetadata::setBuildFinishedOn(const QString &build_finished_on) {
    m_build_finished_on = build_finished_on;
    m_build_finished_on_isSet = true;
}

bool OAISlsaMetadata::is_build_finished_on_Set() const{
    return m_build_finished_on_isSet;
}

bool OAISlsaMetadata::is_build_finished_on_Valid() const{
    return m_build_finished_on_isValid;
}

QString OAISlsaMetadata::getBuildInvocationId() const {
    return m_build_invocation_id;
}
void OAISlsaMetadata::setBuildInvocationId(const QString &build_invocation_id) {
    m_build_invocation_id = build_invocation_id;
    m_build_invocation_id_isSet = true;
}

bool OAISlsaMetadata::is_build_invocation_id_Set() const{
    return m_build_invocation_id_isSet;
}

bool OAISlsaMetadata::is_build_invocation_id_Valid() const{
    return m_build_invocation_id_isValid;
}

QString OAISlsaMetadata::getBuildStartedOn() const {
    return m_build_started_on;
}
void OAISlsaMetadata::setBuildStartedOn(const QString &build_started_on) {
    m_build_started_on = build_started_on;
    m_build_started_on_isSet = true;
}

bool OAISlsaMetadata::is_build_started_on_Set() const{
    return m_build_started_on_isSet;
}

bool OAISlsaMetadata::is_build_started_on_Valid() const{
    return m_build_started_on_isValid;
}

OAISlsaCompleteness OAISlsaMetadata::getCompleteness() const {
    return m_completeness;
}
void OAISlsaMetadata::setCompleteness(const OAISlsaCompleteness &completeness) {
    m_completeness = completeness;
    m_completeness_isSet = true;
}

bool OAISlsaMetadata::is_completeness_Set() const{
    return m_completeness_isSet;
}

bool OAISlsaMetadata::is_completeness_Valid() const{
    return m_completeness_isValid;
}

bool OAISlsaMetadata::isReproducible() const {
    return m_reproducible;
}
void OAISlsaMetadata::setReproducible(const bool &reproducible) {
    m_reproducible = reproducible;
    m_reproducible_isSet = true;
}

bool OAISlsaMetadata::is_reproducible_Set() const{
    return m_reproducible_isSet;
}

bool OAISlsaMetadata::is_reproducible_Valid() const{
    return m_reproducible_isValid;
}

bool OAISlsaMetadata::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_build_finished_on_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_build_invocation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_build_started_on_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_completeness.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_reproducible_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISlsaMetadata::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
