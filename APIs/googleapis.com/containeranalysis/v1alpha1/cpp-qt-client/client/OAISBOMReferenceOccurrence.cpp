/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1alpha1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISBOMReferenceOccurrence.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISBOMReferenceOccurrence::OAISBOMReferenceOccurrence(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISBOMReferenceOccurrence::OAISBOMReferenceOccurrence() {
    this->initializeModel();
}

OAISBOMReferenceOccurrence::~OAISBOMReferenceOccurrence() {}

void OAISBOMReferenceOccurrence::initializeModel() {

    m_payload_isSet = false;
    m_payload_isValid = false;

    m_payload_type_isSet = false;
    m_payload_type_isValid = false;

    m_signatures_isSet = false;
    m_signatures_isValid = false;
}

void OAISBOMReferenceOccurrence::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISBOMReferenceOccurrence::fromJsonObject(QJsonObject json) {

    m_payload_isValid = ::OpenAPI::fromJsonValue(m_payload, json[QString("payload")]);
    m_payload_isSet = !json[QString("payload")].isNull() && m_payload_isValid;

    m_payload_type_isValid = ::OpenAPI::fromJsonValue(m_payload_type, json[QString("payloadType")]);
    m_payload_type_isSet = !json[QString("payloadType")].isNull() && m_payload_type_isValid;

    m_signatures_isValid = ::OpenAPI::fromJsonValue(m_signatures, json[QString("signatures")]);
    m_signatures_isSet = !json[QString("signatures")].isNull() && m_signatures_isValid;
}

QString OAISBOMReferenceOccurrence::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISBOMReferenceOccurrence::asJsonObject() const {
    QJsonObject obj;
    if (m_payload.isSet()) {
        obj.insert(QString("payload"), ::OpenAPI::toJsonValue(m_payload));
    }
    if (m_payload_type_isSet) {
        obj.insert(QString("payloadType"), ::OpenAPI::toJsonValue(m_payload_type));
    }
    if (m_signatures.size() > 0) {
        obj.insert(QString("signatures"), ::OpenAPI::toJsonValue(m_signatures));
    }
    return obj;
}

OAISbomReferenceIntotoPayload OAISBOMReferenceOccurrence::getPayload() const {
    return m_payload;
}
void OAISBOMReferenceOccurrence::setPayload(const OAISbomReferenceIntotoPayload &payload) {
    m_payload = payload;
    m_payload_isSet = true;
}

bool OAISBOMReferenceOccurrence::is_payload_Set() const{
    return m_payload_isSet;
}

bool OAISBOMReferenceOccurrence::is_payload_Valid() const{
    return m_payload_isValid;
}

QString OAISBOMReferenceOccurrence::getPayloadType() const {
    return m_payload_type;
}
void OAISBOMReferenceOccurrence::setPayloadType(const QString &payload_type) {
    m_payload_type = payload_type;
    m_payload_type_isSet = true;
}

bool OAISBOMReferenceOccurrence::is_payload_type_Set() const{
    return m_payload_type_isSet;
}

bool OAISBOMReferenceOccurrence::is_payload_type_Valid() const{
    return m_payload_type_isValid;
}

QList<OAIEnvelopeSignature> OAISBOMReferenceOccurrence::getSignatures() const {
    return m_signatures;
}
void OAISBOMReferenceOccurrence::setSignatures(const QList<OAIEnvelopeSignature> &signatures) {
    m_signatures = signatures;
    m_signatures_isSet = true;
}

bool OAISBOMReferenceOccurrence::is_signatures_Set() const{
    return m_signatures_isSet;
}

bool OAISBOMReferenceOccurrence::is_signatures_Valid() const{
    return m_signatures_isValid;
}

bool OAISBOMReferenceOccurrence::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_payload.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_payload_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_signatures.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISBOMReferenceOccurrence::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
