/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1alpha1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOccurrence.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOccurrence::OAIOccurrence(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOccurrence::OAIOccurrence() {
    this->initializeModel();
}

OAIOccurrence::~OAIOccurrence() {}

void OAIOccurrence::initializeModel() {

    m_attestation_isSet = false;
    m_attestation_isValid = false;

    m_build_details_isSet = false;
    m_build_details_isValid = false;

    m_compliance_isSet = false;
    m_compliance_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_deployment_isSet = false;
    m_deployment_isValid = false;

    m_derived_image_isSet = false;
    m_derived_image_isValid = false;

    m_discovered_isSet = false;
    m_discovered_isValid = false;

    m_dsse_attestation_isSet = false;
    m_dsse_attestation_isValid = false;

    m_envelope_isSet = false;
    m_envelope_isValid = false;

    m_installation_isSet = false;
    m_installation_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_note_name_isSet = false;
    m_note_name_isValid = false;

    m_remediation_isSet = false;
    m_remediation_isValid = false;

    m_resource_isSet = false;
    m_resource_isValid = false;

    m_resource_url_isSet = false;
    m_resource_url_isValid = false;

    m_sbom_isSet = false;
    m_sbom_isValid = false;

    m_sbom_reference_isSet = false;
    m_sbom_reference_isValid = false;

    m_spdx_file_isSet = false;
    m_spdx_file_isValid = false;

    m_spdx_package_isSet = false;
    m_spdx_package_isValid = false;

    m_spdx_relationship_isSet = false;
    m_spdx_relationship_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;

    m_upgrade_isSet = false;
    m_upgrade_isValid = false;

    m_vulnerability_details_isSet = false;
    m_vulnerability_details_isValid = false;
}

void OAIOccurrence::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOccurrence::fromJsonObject(QJsonObject json) {

    m_attestation_isValid = ::OpenAPI::fromJsonValue(m_attestation, json[QString("attestation")]);
    m_attestation_isSet = !json[QString("attestation")].isNull() && m_attestation_isValid;

    m_build_details_isValid = ::OpenAPI::fromJsonValue(m_build_details, json[QString("buildDetails")]);
    m_build_details_isSet = !json[QString("buildDetails")].isNull() && m_build_details_isValid;

    m_compliance_isValid = ::OpenAPI::fromJsonValue(m_compliance, json[QString("compliance")]);
    m_compliance_isSet = !json[QString("compliance")].isNull() && m_compliance_isValid;

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_deployment_isValid = ::OpenAPI::fromJsonValue(m_deployment, json[QString("deployment")]);
    m_deployment_isSet = !json[QString("deployment")].isNull() && m_deployment_isValid;

    m_derived_image_isValid = ::OpenAPI::fromJsonValue(m_derived_image, json[QString("derivedImage")]);
    m_derived_image_isSet = !json[QString("derivedImage")].isNull() && m_derived_image_isValid;

    m_discovered_isValid = ::OpenAPI::fromJsonValue(m_discovered, json[QString("discovered")]);
    m_discovered_isSet = !json[QString("discovered")].isNull() && m_discovered_isValid;

    m_dsse_attestation_isValid = ::OpenAPI::fromJsonValue(m_dsse_attestation, json[QString("dsseAttestation")]);
    m_dsse_attestation_isSet = !json[QString("dsseAttestation")].isNull() && m_dsse_attestation_isValid;

    m_envelope_isValid = ::OpenAPI::fromJsonValue(m_envelope, json[QString("envelope")]);
    m_envelope_isSet = !json[QString("envelope")].isNull() && m_envelope_isValid;

    m_installation_isValid = ::OpenAPI::fromJsonValue(m_installation, json[QString("installation")]);
    m_installation_isSet = !json[QString("installation")].isNull() && m_installation_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_note_name_isValid = ::OpenAPI::fromJsonValue(m_note_name, json[QString("noteName")]);
    m_note_name_isSet = !json[QString("noteName")].isNull() && m_note_name_isValid;

    m_remediation_isValid = ::OpenAPI::fromJsonValue(m_remediation, json[QString("remediation")]);
    m_remediation_isSet = !json[QString("remediation")].isNull() && m_remediation_isValid;

    m_resource_isValid = ::OpenAPI::fromJsonValue(m_resource, json[QString("resource")]);
    m_resource_isSet = !json[QString("resource")].isNull() && m_resource_isValid;

    m_resource_url_isValid = ::OpenAPI::fromJsonValue(m_resource_url, json[QString("resourceUrl")]);
    m_resource_url_isSet = !json[QString("resourceUrl")].isNull() && m_resource_url_isValid;

    m_sbom_isValid = ::OpenAPI::fromJsonValue(m_sbom, json[QString("sbom")]);
    m_sbom_isSet = !json[QString("sbom")].isNull() && m_sbom_isValid;

    m_sbom_reference_isValid = ::OpenAPI::fromJsonValue(m_sbom_reference, json[QString("sbomReference")]);
    m_sbom_reference_isSet = !json[QString("sbomReference")].isNull() && m_sbom_reference_isValid;

    m_spdx_file_isValid = ::OpenAPI::fromJsonValue(m_spdx_file, json[QString("spdxFile")]);
    m_spdx_file_isSet = !json[QString("spdxFile")].isNull() && m_spdx_file_isValid;

    m_spdx_package_isValid = ::OpenAPI::fromJsonValue(m_spdx_package, json[QString("spdxPackage")]);
    m_spdx_package_isSet = !json[QString("spdxPackage")].isNull() && m_spdx_package_isValid;

    m_spdx_relationship_isValid = ::OpenAPI::fromJsonValue(m_spdx_relationship, json[QString("spdxRelationship")]);
    m_spdx_relationship_isSet = !json[QString("spdxRelationship")].isNull() && m_spdx_relationship_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;

    m_upgrade_isValid = ::OpenAPI::fromJsonValue(m_upgrade, json[QString("upgrade")]);
    m_upgrade_isSet = !json[QString("upgrade")].isNull() && m_upgrade_isValid;

    m_vulnerability_details_isValid = ::OpenAPI::fromJsonValue(m_vulnerability_details, json[QString("vulnerabilityDetails")]);
    m_vulnerability_details_isSet = !json[QString("vulnerabilityDetails")].isNull() && m_vulnerability_details_isValid;
}

QString OAIOccurrence::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOccurrence::asJsonObject() const {
    QJsonObject obj;
    if (m_attestation.isSet()) {
        obj.insert(QString("attestation"), ::OpenAPI::toJsonValue(m_attestation));
    }
    if (m_build_details.isSet()) {
        obj.insert(QString("buildDetails"), ::OpenAPI::toJsonValue(m_build_details));
    }
    if (m_compliance.isSet()) {
        obj.insert(QString("compliance"), ::OpenAPI::toJsonValue(m_compliance));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_deployment.isSet()) {
        obj.insert(QString("deployment"), ::OpenAPI::toJsonValue(m_deployment));
    }
    if (m_derived_image.isSet()) {
        obj.insert(QString("derivedImage"), ::OpenAPI::toJsonValue(m_derived_image));
    }
    if (m_discovered.isSet()) {
        obj.insert(QString("discovered"), ::OpenAPI::toJsonValue(m_discovered));
    }
    if (m_dsse_attestation.isSet()) {
        obj.insert(QString("dsseAttestation"), ::OpenAPI::toJsonValue(m_dsse_attestation));
    }
    if (m_envelope.isSet()) {
        obj.insert(QString("envelope"), ::OpenAPI::toJsonValue(m_envelope));
    }
    if (m_installation.isSet()) {
        obj.insert(QString("installation"), ::OpenAPI::toJsonValue(m_installation));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_note_name_isSet) {
        obj.insert(QString("noteName"), ::OpenAPI::toJsonValue(m_note_name));
    }
    if (m_remediation_isSet) {
        obj.insert(QString("remediation"), ::OpenAPI::toJsonValue(m_remediation));
    }
    if (m_resource.isSet()) {
        obj.insert(QString("resource"), ::OpenAPI::toJsonValue(m_resource));
    }
    if (m_resource_url_isSet) {
        obj.insert(QString("resourceUrl"), ::OpenAPI::toJsonValue(m_resource_url));
    }
    if (m_sbom.isSet()) {
        obj.insert(QString("sbom"), ::OpenAPI::toJsonValue(m_sbom));
    }
    if (m_sbom_reference.isSet()) {
        obj.insert(QString("sbomReference"), ::OpenAPI::toJsonValue(m_sbom_reference));
    }
    if (m_spdx_file.isSet()) {
        obj.insert(QString("spdxFile"), ::OpenAPI::toJsonValue(m_spdx_file));
    }
    if (m_spdx_package.isSet()) {
        obj.insert(QString("spdxPackage"), ::OpenAPI::toJsonValue(m_spdx_package));
    }
    if (m_spdx_relationship.isSet()) {
        obj.insert(QString("spdxRelationship"), ::OpenAPI::toJsonValue(m_spdx_relationship));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    if (m_upgrade.isSet()) {
        obj.insert(QString("upgrade"), ::OpenAPI::toJsonValue(m_upgrade));
    }
    if (m_vulnerability_details.isSet()) {
        obj.insert(QString("vulnerabilityDetails"), ::OpenAPI::toJsonValue(m_vulnerability_details));
    }
    return obj;
}

OAIAttestation OAIOccurrence::getAttestation() const {
    return m_attestation;
}
void OAIOccurrence::setAttestation(const OAIAttestation &attestation) {
    m_attestation = attestation;
    m_attestation_isSet = true;
}

bool OAIOccurrence::is_attestation_Set() const{
    return m_attestation_isSet;
}

bool OAIOccurrence::is_attestation_Valid() const{
    return m_attestation_isValid;
}

OAIBuildDetails OAIOccurrence::getBuildDetails() const {
    return m_build_details;
}
void OAIOccurrence::setBuildDetails(const OAIBuildDetails &build_details) {
    m_build_details = build_details;
    m_build_details_isSet = true;
}

bool OAIOccurrence::is_build_details_Set() const{
    return m_build_details_isSet;
}

bool OAIOccurrence::is_build_details_Valid() const{
    return m_build_details_isValid;
}

OAIComplianceOccurrence OAIOccurrence::getCompliance() const {
    return m_compliance;
}
void OAIOccurrence::setCompliance(const OAIComplianceOccurrence &compliance) {
    m_compliance = compliance;
    m_compliance_isSet = true;
}

bool OAIOccurrence::is_compliance_Set() const{
    return m_compliance_isSet;
}

bool OAIOccurrence::is_compliance_Valid() const{
    return m_compliance_isValid;
}

QString OAIOccurrence::getCreateTime() const {
    return m_create_time;
}
void OAIOccurrence::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIOccurrence::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIOccurrence::is_create_time_Valid() const{
    return m_create_time_isValid;
}

OAIDeployment OAIOccurrence::getDeployment() const {
    return m_deployment;
}
void OAIOccurrence::setDeployment(const OAIDeployment &deployment) {
    m_deployment = deployment;
    m_deployment_isSet = true;
}

bool OAIOccurrence::is_deployment_Set() const{
    return m_deployment_isSet;
}

bool OAIOccurrence::is_deployment_Valid() const{
    return m_deployment_isValid;
}

OAIDerived OAIOccurrence::getDerivedImage() const {
    return m_derived_image;
}
void OAIOccurrence::setDerivedImage(const OAIDerived &derived_image) {
    m_derived_image = derived_image;
    m_derived_image_isSet = true;
}

bool OAIOccurrence::is_derived_image_Set() const{
    return m_derived_image_isSet;
}

bool OAIOccurrence::is_derived_image_Valid() const{
    return m_derived_image_isValid;
}

OAIDiscovered OAIOccurrence::getDiscovered() const {
    return m_discovered;
}
void OAIOccurrence::setDiscovered(const OAIDiscovered &discovered) {
    m_discovered = discovered;
    m_discovered_isSet = true;
}

bool OAIOccurrence::is_discovered_Set() const{
    return m_discovered_isSet;
}

bool OAIOccurrence::is_discovered_Valid() const{
    return m_discovered_isValid;
}

OAIDSSEAttestationOccurrence OAIOccurrence::getDsseAttestation() const {
    return m_dsse_attestation;
}
void OAIOccurrence::setDsseAttestation(const OAIDSSEAttestationOccurrence &dsse_attestation) {
    m_dsse_attestation = dsse_attestation;
    m_dsse_attestation_isSet = true;
}

bool OAIOccurrence::is_dsse_attestation_Set() const{
    return m_dsse_attestation_isSet;
}

bool OAIOccurrence::is_dsse_attestation_Valid() const{
    return m_dsse_attestation_isValid;
}

OAIEnvelope OAIOccurrence::getEnvelope() const {
    return m_envelope;
}
void OAIOccurrence::setEnvelope(const OAIEnvelope &envelope) {
    m_envelope = envelope;
    m_envelope_isSet = true;
}

bool OAIOccurrence::is_envelope_Set() const{
    return m_envelope_isSet;
}

bool OAIOccurrence::is_envelope_Valid() const{
    return m_envelope_isValid;
}

OAIInstallation OAIOccurrence::getInstallation() const {
    return m_installation;
}
void OAIOccurrence::setInstallation(const OAIInstallation &installation) {
    m_installation = installation;
    m_installation_isSet = true;
}

bool OAIOccurrence::is_installation_Set() const{
    return m_installation_isSet;
}

bool OAIOccurrence::is_installation_Valid() const{
    return m_installation_isValid;
}

QString OAIOccurrence::getKind() const {
    return m_kind;
}
void OAIOccurrence::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIOccurrence::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIOccurrence::is_kind_Valid() const{
    return m_kind_isValid;
}

QString OAIOccurrence::getName() const {
    return m_name;
}
void OAIOccurrence::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIOccurrence::is_name_Set() const{
    return m_name_isSet;
}

bool OAIOccurrence::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIOccurrence::getNoteName() const {
    return m_note_name;
}
void OAIOccurrence::setNoteName(const QString &note_name) {
    m_note_name = note_name;
    m_note_name_isSet = true;
}

bool OAIOccurrence::is_note_name_Set() const{
    return m_note_name_isSet;
}

bool OAIOccurrence::is_note_name_Valid() const{
    return m_note_name_isValid;
}

QString OAIOccurrence::getRemediation() const {
    return m_remediation;
}
void OAIOccurrence::setRemediation(const QString &remediation) {
    m_remediation = remediation;
    m_remediation_isSet = true;
}

bool OAIOccurrence::is_remediation_Set() const{
    return m_remediation_isSet;
}

bool OAIOccurrence::is_remediation_Valid() const{
    return m_remediation_isValid;
}

OAIResource OAIOccurrence::getResource() const {
    return m_resource;
}
void OAIOccurrence::setResource(const OAIResource &resource) {
    m_resource = resource;
    m_resource_isSet = true;
}

bool OAIOccurrence::is_resource_Set() const{
    return m_resource_isSet;
}

bool OAIOccurrence::is_resource_Valid() const{
    return m_resource_isValid;
}

QString OAIOccurrence::getResourceUrl() const {
    return m_resource_url;
}
void OAIOccurrence::setResourceUrl(const QString &resource_url) {
    m_resource_url = resource_url;
    m_resource_url_isSet = true;
}

bool OAIOccurrence::is_resource_url_Set() const{
    return m_resource_url_isSet;
}

bool OAIOccurrence::is_resource_url_Valid() const{
    return m_resource_url_isValid;
}

OAIDocumentOccurrence OAIOccurrence::getSbom() const {
    return m_sbom;
}
void OAIOccurrence::setSbom(const OAIDocumentOccurrence &sbom) {
    m_sbom = sbom;
    m_sbom_isSet = true;
}

bool OAIOccurrence::is_sbom_Set() const{
    return m_sbom_isSet;
}

bool OAIOccurrence::is_sbom_Valid() const{
    return m_sbom_isValid;
}

OAISBOMReferenceOccurrence OAIOccurrence::getSbomReference() const {
    return m_sbom_reference;
}
void OAIOccurrence::setSbomReference(const OAISBOMReferenceOccurrence &sbom_reference) {
    m_sbom_reference = sbom_reference;
    m_sbom_reference_isSet = true;
}

bool OAIOccurrence::is_sbom_reference_Set() const{
    return m_sbom_reference_isSet;
}

bool OAIOccurrence::is_sbom_reference_Valid() const{
    return m_sbom_reference_isValid;
}

OAIFileOccurrence OAIOccurrence::getSpdxFile() const {
    return m_spdx_file;
}
void OAIOccurrence::setSpdxFile(const OAIFileOccurrence &spdx_file) {
    m_spdx_file = spdx_file;
    m_spdx_file_isSet = true;
}

bool OAIOccurrence::is_spdx_file_Set() const{
    return m_spdx_file_isSet;
}

bool OAIOccurrence::is_spdx_file_Valid() const{
    return m_spdx_file_isValid;
}

OAIPackageInfoOccurrence OAIOccurrence::getSpdxPackage() const {
    return m_spdx_package;
}
void OAIOccurrence::setSpdxPackage(const OAIPackageInfoOccurrence &spdx_package) {
    m_spdx_package = spdx_package;
    m_spdx_package_isSet = true;
}

bool OAIOccurrence::is_spdx_package_Set() const{
    return m_spdx_package_isSet;
}

bool OAIOccurrence::is_spdx_package_Valid() const{
    return m_spdx_package_isValid;
}

OAIRelationshipOccurrence OAIOccurrence::getSpdxRelationship() const {
    return m_spdx_relationship;
}
void OAIOccurrence::setSpdxRelationship(const OAIRelationshipOccurrence &spdx_relationship) {
    m_spdx_relationship = spdx_relationship;
    m_spdx_relationship_isSet = true;
}

bool OAIOccurrence::is_spdx_relationship_Set() const{
    return m_spdx_relationship_isSet;
}

bool OAIOccurrence::is_spdx_relationship_Valid() const{
    return m_spdx_relationship_isValid;
}

QString OAIOccurrence::getUpdateTime() const {
    return m_update_time;
}
void OAIOccurrence::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAIOccurrence::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAIOccurrence::is_update_time_Valid() const{
    return m_update_time_isValid;
}

OAIUpgradeOccurrence OAIOccurrence::getUpgrade() const {
    return m_upgrade;
}
void OAIOccurrence::setUpgrade(const OAIUpgradeOccurrence &upgrade) {
    m_upgrade = upgrade;
    m_upgrade_isSet = true;
}

bool OAIOccurrence::is_upgrade_Set() const{
    return m_upgrade_isSet;
}

bool OAIOccurrence::is_upgrade_Valid() const{
    return m_upgrade_isValid;
}

OAIVulnerabilityDetails OAIOccurrence::getVulnerabilityDetails() const {
    return m_vulnerability_details;
}
void OAIOccurrence::setVulnerabilityDetails(const OAIVulnerabilityDetails &vulnerability_details) {
    m_vulnerability_details = vulnerability_details;
    m_vulnerability_details_isSet = true;
}

bool OAIOccurrence::is_vulnerability_details_Set() const{
    return m_vulnerability_details_isSet;
}

bool OAIOccurrence::is_vulnerability_details_Valid() const{
    return m_vulnerability_details_isValid;
}

bool OAIOccurrence::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attestation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_build_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_compliance.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deployment.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_derived_image.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_discovered.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dsse_attestation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_envelope.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_installation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_note_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_remediation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sbom.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sbom_reference.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_spdx_file.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_spdx_package.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_spdx_relationship.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_upgrade.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vulnerability_details.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOccurrence::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
