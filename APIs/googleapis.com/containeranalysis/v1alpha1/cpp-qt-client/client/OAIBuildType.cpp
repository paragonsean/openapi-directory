/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1alpha1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBuildType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBuildType::OAIBuildType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBuildType::OAIBuildType() {
    this->initializeModel();
}

OAIBuildType::~OAIBuildType() {}

void OAIBuildType::initializeModel() {

    m_builder_version_isSet = false;
    m_builder_version_isValid = false;

    m_signature_isSet = false;
    m_signature_isValid = false;
}

void OAIBuildType::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBuildType::fromJsonObject(QJsonObject json) {

    m_builder_version_isValid = ::OpenAPI::fromJsonValue(m_builder_version, json[QString("builderVersion")]);
    m_builder_version_isSet = !json[QString("builderVersion")].isNull() && m_builder_version_isValid;

    m_signature_isValid = ::OpenAPI::fromJsonValue(m_signature, json[QString("signature")]);
    m_signature_isSet = !json[QString("signature")].isNull() && m_signature_isValid;
}

QString OAIBuildType::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBuildType::asJsonObject() const {
    QJsonObject obj;
    if (m_builder_version_isSet) {
        obj.insert(QString("builderVersion"), ::OpenAPI::toJsonValue(m_builder_version));
    }
    if (m_signature.isSet()) {
        obj.insert(QString("signature"), ::OpenAPI::toJsonValue(m_signature));
    }
    return obj;
}

QString OAIBuildType::getBuilderVersion() const {
    return m_builder_version;
}
void OAIBuildType::setBuilderVersion(const QString &builder_version) {
    m_builder_version = builder_version;
    m_builder_version_isSet = true;
}

bool OAIBuildType::is_builder_version_Set() const{
    return m_builder_version_isSet;
}

bool OAIBuildType::is_builder_version_Valid() const{
    return m_builder_version_isValid;
}

OAIBuildSignature OAIBuildType::getSignature() const {
    return m_signature;
}
void OAIBuildType::setSignature(const OAIBuildSignature &signature) {
    m_signature = signature;
    m_signature_isSet = true;
}

bool OAIBuildType::is_signature_Set() const{
    return m_signature_isSet;
}

bool OAIBuildType::is_signature_Valid() const{
    return m_signature_isValid;
}

bool OAIBuildType::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_builder_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_signature.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBuildType::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
