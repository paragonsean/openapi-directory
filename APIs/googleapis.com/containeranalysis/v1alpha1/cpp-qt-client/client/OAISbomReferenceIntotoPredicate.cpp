/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1alpha1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISbomReferenceIntotoPredicate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISbomReferenceIntotoPredicate::OAISbomReferenceIntotoPredicate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISbomReferenceIntotoPredicate::OAISbomReferenceIntotoPredicate() {
    this->initializeModel();
}

OAISbomReferenceIntotoPredicate::~OAISbomReferenceIntotoPredicate() {}

void OAISbomReferenceIntotoPredicate::initializeModel() {

    m_digest_isSet = false;
    m_digest_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_mime_type_isSet = false;
    m_mime_type_isValid = false;

    m_referrer_id_isSet = false;
    m_referrer_id_isValid = false;
}

void OAISbomReferenceIntotoPredicate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISbomReferenceIntotoPredicate::fromJsonObject(QJsonObject json) {

    m_digest_isValid = ::OpenAPI::fromJsonValue(m_digest, json[QString("digest")]);
    m_digest_isSet = !json[QString("digest")].isNull() && m_digest_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_mime_type_isValid = ::OpenAPI::fromJsonValue(m_mime_type, json[QString("mimeType")]);
    m_mime_type_isSet = !json[QString("mimeType")].isNull() && m_mime_type_isValid;

    m_referrer_id_isValid = ::OpenAPI::fromJsonValue(m_referrer_id, json[QString("referrerId")]);
    m_referrer_id_isSet = !json[QString("referrerId")].isNull() && m_referrer_id_isValid;
}

QString OAISbomReferenceIntotoPredicate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISbomReferenceIntotoPredicate::asJsonObject() const {
    QJsonObject obj;
    if (m_digest.size() > 0) {
        obj.insert(QString("digest"), ::OpenAPI::toJsonValue(m_digest));
    }
    if (m_location_isSet) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_mime_type_isSet) {
        obj.insert(QString("mimeType"), ::OpenAPI::toJsonValue(m_mime_type));
    }
    if (m_referrer_id_isSet) {
        obj.insert(QString("referrerId"), ::OpenAPI::toJsonValue(m_referrer_id));
    }
    return obj;
}

QMap<QString, QString> OAISbomReferenceIntotoPredicate::getDigest() const {
    return m_digest;
}
void OAISbomReferenceIntotoPredicate::setDigest(const QMap<QString, QString> &digest) {
    m_digest = digest;
    m_digest_isSet = true;
}

bool OAISbomReferenceIntotoPredicate::is_digest_Set() const{
    return m_digest_isSet;
}

bool OAISbomReferenceIntotoPredicate::is_digest_Valid() const{
    return m_digest_isValid;
}

QString OAISbomReferenceIntotoPredicate::getLocation() const {
    return m_location;
}
void OAISbomReferenceIntotoPredicate::setLocation(const QString &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAISbomReferenceIntotoPredicate::is_location_Set() const{
    return m_location_isSet;
}

bool OAISbomReferenceIntotoPredicate::is_location_Valid() const{
    return m_location_isValid;
}

QString OAISbomReferenceIntotoPredicate::getMimeType() const {
    return m_mime_type;
}
void OAISbomReferenceIntotoPredicate::setMimeType(const QString &mime_type) {
    m_mime_type = mime_type;
    m_mime_type_isSet = true;
}

bool OAISbomReferenceIntotoPredicate::is_mime_type_Set() const{
    return m_mime_type_isSet;
}

bool OAISbomReferenceIntotoPredicate::is_mime_type_Valid() const{
    return m_mime_type_isValid;
}

QString OAISbomReferenceIntotoPredicate::getReferrerId() const {
    return m_referrer_id;
}
void OAISbomReferenceIntotoPredicate::setReferrerId(const QString &referrer_id) {
    m_referrer_id = referrer_id;
    m_referrer_id_isSet = true;
}

bool OAISbomReferenceIntotoPredicate::is_referrer_id_Set() const{
    return m_referrer_id_isSet;
}

bool OAISbomReferenceIntotoPredicate::is_referrer_id_Valid() const{
    return m_referrer_id_isValid;
}

bool OAISbomReferenceIntotoPredicate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_digest.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mime_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_referrer_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISbomReferenceIntotoPredicate::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
