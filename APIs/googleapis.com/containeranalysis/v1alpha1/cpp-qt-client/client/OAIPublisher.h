/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1alpha1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPublisher.h
 *
 * Publisher contains information about the publisher of this Note.
 */

#ifndef OAIPublisher_H
#define OAIPublisher_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIPublisher : public OAIObject {
public:
    OAIPublisher();
    OAIPublisher(QString json);
    ~OAIPublisher() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getIssuingAuthority() const;
    void setIssuingAuthority(const QString &issuing_authority);
    bool is_issuing_authority_Set() const;
    bool is_issuing_authority_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getPublisherNamespace() const;
    void setPublisherNamespace(const QString &publisher_namespace);
    bool is_publisher_namespace_Set() const;
    bool is_publisher_namespace_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_issuing_authority;
    bool m_issuing_authority_isSet;
    bool m_issuing_authority_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_publisher_namespace;
    bool m_publisher_namespace_isSet;
    bool m_publisher_namespace_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPublisher)

#endif // OAIPublisher_H
