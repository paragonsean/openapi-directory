/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1alpha1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDetail.h
 *
 * Identifies all occurrences of this vulnerability in the package for a specific distro/location For example: glibc in cpe:/o:debian:debian_linux:8 for versions 2.1 - 2.2
 */

#ifndef OAIDetail_H
#define OAIDetail_H

#include <QJsonObject>

#include "OAIVersion.h"
#include "OAIVulnerabilityLocation.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIVulnerabilityLocation;
class OAIVersion;

class OAIDetail : public OAIObject {
public:
    OAIDetail();
    OAIDetail(QString json);
    ~OAIDetail() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getCpeUri() const;
    void setCpeUri(const QString &cpe_uri);
    bool is_cpe_uri_Set() const;
    bool is_cpe_uri_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    OAIVulnerabilityLocation getFixedLocation() const;
    void setFixedLocation(const OAIVulnerabilityLocation &fixed_location);
    bool is_fixed_location_Set() const;
    bool is_fixed_location_Valid() const;

    bool isIsObsolete() const;
    void setIsObsolete(const bool &is_obsolete);
    bool is_is_obsolete_Set() const;
    bool is_is_obsolete_Valid() const;

    OAIVersion getMaxAffectedVersion() const;
    void setMaxAffectedVersion(const OAIVersion &max_affected_version);
    bool is_max_affected_version_Set() const;
    bool is_max_affected_version_Valid() const;

    OAIVersion getMinAffectedVersion() const;
    void setMinAffectedVersion(const OAIVersion &min_affected_version);
    bool is_min_affected_version_Set() const;
    bool is_min_affected_version_Valid() const;

    QString getPackage() const;
    void setPackage(const QString &package);
    bool is_package_Set() const;
    bool is_package_Valid() const;

    QString getPackageType() const;
    void setPackageType(const QString &package_type);
    bool is_package_type_Set() const;
    bool is_package_type_Valid() const;

    QString getSeverityName() const;
    void setSeverityName(const QString &severity_name);
    bool is_severity_name_Set() const;
    bool is_severity_name_Valid() const;

    QString getSource() const;
    void setSource(const QString &source);
    bool is_source_Set() const;
    bool is_source_Valid() const;

    QString getVendor() const;
    void setVendor(const QString &vendor);
    bool is_vendor_Set() const;
    bool is_vendor_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_cpe_uri;
    bool m_cpe_uri_isSet;
    bool m_cpe_uri_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    OAIVulnerabilityLocation m_fixed_location;
    bool m_fixed_location_isSet;
    bool m_fixed_location_isValid;

    bool m_is_obsolete;
    bool m_is_obsolete_isSet;
    bool m_is_obsolete_isValid;

    OAIVersion m_max_affected_version;
    bool m_max_affected_version_isSet;
    bool m_max_affected_version_isValid;

    OAIVersion m_min_affected_version;
    bool m_min_affected_version_isSet;
    bool m_min_affected_version_isValid;

    QString m_package;
    bool m_package_isSet;
    bool m_package_isValid;

    QString m_package_type;
    bool m_package_type_isSet;
    bool m_package_type_isValid;

    QString m_severity_name;
    bool m_severity_name_isSet;
    bool m_severity_name_isValid;

    QString m_source;
    bool m_source_isSet;
    bool m_source_isValid;

    QString m_vendor;
    bool m_vendor_isSet;
    bool m_vendor_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDetail)

#endif // OAIDetail_H
