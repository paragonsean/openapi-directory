/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1alpha1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIComplianceOccurrence.h
 *
 * An indication that the compliance checks in the associated ComplianceNote were not satisfied for particular resources or a specified reason.
 */

#ifndef OAIComplianceOccurrence_H
#define OAIComplianceOccurrence_H

#include <QJsonObject>

#include "OAINonCompliantFile.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAINonCompliantFile;

class OAIComplianceOccurrence : public OAIObject {
public:
    OAIComplianceOccurrence();
    OAIComplianceOccurrence(QString json);
    ~OAIComplianceOccurrence() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getNonComplianceReason() const;
    void setNonComplianceReason(const QString &non_compliance_reason);
    bool is_non_compliance_reason_Set() const;
    bool is_non_compliance_reason_Valid() const;

    QList<OAINonCompliantFile> getNonCompliantFiles() const;
    void setNonCompliantFiles(const QList<OAINonCompliantFile> &non_compliant_files);
    bool is_non_compliant_files_Set() const;
    bool is_non_compliant_files_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_non_compliance_reason;
    bool m_non_compliance_reason_isSet;
    bool m_non_compliance_reason_isValid;

    QList<OAINonCompliantFile> m_non_compliant_files;
    bool m_non_compliant_files_isSet;
    bool m_non_compliant_files_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIComplianceOccurrence)

#endif // OAIComplianceOccurrence_H
