/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1alpha1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVulnerabilityType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVulnerabilityType::OAIVulnerabilityType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVulnerabilityType::OAIVulnerabilityType() {
    this->initializeModel();
}

OAIVulnerabilityType::~OAIVulnerabilityType() {}

void OAIVulnerabilityType::initializeModel() {

    m_cvss_score_isSet = false;
    m_cvss_score_isValid = false;

    m_cvss_v2_isSet = false;
    m_cvss_v2_isValid = false;

    m_cvss_version_isSet = false;
    m_cvss_version_isValid = false;

    m_cwe_isSet = false;
    m_cwe_isValid = false;

    m_details_isSet = false;
    m_details_isValid = false;

    m_severity_isSet = false;
    m_severity_isValid = false;
}

void OAIVulnerabilityType::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVulnerabilityType::fromJsonObject(QJsonObject json) {

    m_cvss_score_isValid = ::OpenAPI::fromJsonValue(m_cvss_score, json[QString("cvssScore")]);
    m_cvss_score_isSet = !json[QString("cvssScore")].isNull() && m_cvss_score_isValid;

    m_cvss_v2_isValid = ::OpenAPI::fromJsonValue(m_cvss_v2, json[QString("cvssV2")]);
    m_cvss_v2_isSet = !json[QString("cvssV2")].isNull() && m_cvss_v2_isValid;

    m_cvss_version_isValid = ::OpenAPI::fromJsonValue(m_cvss_version, json[QString("cvssVersion")]);
    m_cvss_version_isSet = !json[QString("cvssVersion")].isNull() && m_cvss_version_isValid;

    m_cwe_isValid = ::OpenAPI::fromJsonValue(m_cwe, json[QString("cwe")]);
    m_cwe_isSet = !json[QString("cwe")].isNull() && m_cwe_isValid;

    m_details_isValid = ::OpenAPI::fromJsonValue(m_details, json[QString("details")]);
    m_details_isSet = !json[QString("details")].isNull() && m_details_isValid;

    m_severity_isValid = ::OpenAPI::fromJsonValue(m_severity, json[QString("severity")]);
    m_severity_isSet = !json[QString("severity")].isNull() && m_severity_isValid;
}

QString OAIVulnerabilityType::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVulnerabilityType::asJsonObject() const {
    QJsonObject obj;
    if (m_cvss_score_isSet) {
        obj.insert(QString("cvssScore"), ::OpenAPI::toJsonValue(m_cvss_score));
    }
    if (m_cvss_v2.isSet()) {
        obj.insert(QString("cvssV2"), ::OpenAPI::toJsonValue(m_cvss_v2));
    }
    if (m_cvss_version_isSet) {
        obj.insert(QString("cvssVersion"), ::OpenAPI::toJsonValue(m_cvss_version));
    }
    if (m_cwe.size() > 0) {
        obj.insert(QString("cwe"), ::OpenAPI::toJsonValue(m_cwe));
    }
    if (m_details.size() > 0) {
        obj.insert(QString("details"), ::OpenAPI::toJsonValue(m_details));
    }
    if (m_severity_isSet) {
        obj.insert(QString("severity"), ::OpenAPI::toJsonValue(m_severity));
    }
    return obj;
}

float OAIVulnerabilityType::getCvssScore() const {
    return m_cvss_score;
}
void OAIVulnerabilityType::setCvssScore(const float &cvss_score) {
    m_cvss_score = cvss_score;
    m_cvss_score_isSet = true;
}

bool OAIVulnerabilityType::is_cvss_score_Set() const{
    return m_cvss_score_isSet;
}

bool OAIVulnerabilityType::is_cvss_score_Valid() const{
    return m_cvss_score_isValid;
}

OAICVSS OAIVulnerabilityType::getCvssV2() const {
    return m_cvss_v2;
}
void OAIVulnerabilityType::setCvssV2(const OAICVSS &cvss_v2) {
    m_cvss_v2 = cvss_v2;
    m_cvss_v2_isSet = true;
}

bool OAIVulnerabilityType::is_cvss_v2_Set() const{
    return m_cvss_v2_isSet;
}

bool OAIVulnerabilityType::is_cvss_v2_Valid() const{
    return m_cvss_v2_isValid;
}

QString OAIVulnerabilityType::getCvssVersion() const {
    return m_cvss_version;
}
void OAIVulnerabilityType::setCvssVersion(const QString &cvss_version) {
    m_cvss_version = cvss_version;
    m_cvss_version_isSet = true;
}

bool OAIVulnerabilityType::is_cvss_version_Set() const{
    return m_cvss_version_isSet;
}

bool OAIVulnerabilityType::is_cvss_version_Valid() const{
    return m_cvss_version_isValid;
}

QList<QString> OAIVulnerabilityType::getCwe() const {
    return m_cwe;
}
void OAIVulnerabilityType::setCwe(const QList<QString> &cwe) {
    m_cwe = cwe;
    m_cwe_isSet = true;
}

bool OAIVulnerabilityType::is_cwe_Set() const{
    return m_cwe_isSet;
}

bool OAIVulnerabilityType::is_cwe_Valid() const{
    return m_cwe_isValid;
}

QList<OAIDetail> OAIVulnerabilityType::getDetails() const {
    return m_details;
}
void OAIVulnerabilityType::setDetails(const QList<OAIDetail> &details) {
    m_details = details;
    m_details_isSet = true;
}

bool OAIVulnerabilityType::is_details_Set() const{
    return m_details_isSet;
}

bool OAIVulnerabilityType::is_details_Valid() const{
    return m_details_isValid;
}

QString OAIVulnerabilityType::getSeverity() const {
    return m_severity;
}
void OAIVulnerabilityType::setSeverity(const QString &severity) {
    m_severity = severity;
    m_severity_isSet = true;
}

bool OAIVulnerabilityType::is_severity_Set() const{
    return m_severity_isSet;
}

bool OAIVulnerabilityType::is_severity_Valid() const{
    return m_severity_isValid;
}

bool OAIVulnerabilityType::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cvss_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cvss_v2.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cvss_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cwe.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_details.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_severity_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVulnerabilityType::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
