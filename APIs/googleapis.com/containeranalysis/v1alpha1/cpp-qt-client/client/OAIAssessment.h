/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1alpha1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAssessment.h
 *
 * Assessment provides all information that is related to a single vulnerability for this product.
 */

#ifndef OAIAssessment_H
#define OAIAssessment_H

#include <QJsonObject>

#include "OAIJustification.h"
#include "OAIRemediation.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIJustification;
class OAIRemediation;

class OAIAssessment : public OAIObject {
public:
    OAIAssessment();
    OAIAssessment(QString json);
    ~OAIAssessment() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getCve() const;
    void setCve(const QString &cve);
    bool is_cve_Set() const;
    bool is_cve_Valid() const;

    QList<QString> getImpacts() const;
    void setImpacts(const QList<QString> &impacts);
    bool is_impacts_Set() const;
    bool is_impacts_Valid() const;

    OAIJustification getJustification() const;
    void setJustification(const OAIJustification &justification);
    bool is_justification_Set() const;
    bool is_justification_Valid() const;

    QString getLongDescription() const;
    void setLongDescription(const QString &long_description);
    bool is_long_description_Set() const;
    bool is_long_description_Valid() const;

    QList<QString> getRelatedUris() const;
    void setRelatedUris(const QList<QString> &related_uris);
    bool is_related_uris_Set() const;
    bool is_related_uris_Valid() const;

    QList<OAIRemediation> getRemediations() const;
    void setRemediations(const QList<OAIRemediation> &remediations);
    bool is_remediations_Set() const;
    bool is_remediations_Valid() const;

    QString getShortDescription() const;
    void setShortDescription(const QString &short_description);
    bool is_short_description_Set() const;
    bool is_short_description_Valid() const;

    QString getState() const;
    void setState(const QString &state);
    bool is_state_Set() const;
    bool is_state_Valid() const;

    QString getVulnerabilityId() const;
    void setVulnerabilityId(const QString &vulnerability_id);
    bool is_vulnerability_id_Set() const;
    bool is_vulnerability_id_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_cve;
    bool m_cve_isSet;
    bool m_cve_isValid;

    QList<QString> m_impacts;
    bool m_impacts_isSet;
    bool m_impacts_isValid;

    OAIJustification m_justification;
    bool m_justification_isSet;
    bool m_justification_isValid;

    QString m_long_description;
    bool m_long_description_isSet;
    bool m_long_description_isValid;

    QList<QString> m_related_uris;
    bool m_related_uris_isSet;
    bool m_related_uris_isValid;

    QList<OAIRemediation> m_remediations;
    bool m_remediations_isSet;
    bool m_remediations_isValid;

    QString m_short_description;
    bool m_short_description_isSet;
    bool m_short_description_isValid;

    QString m_state;
    bool m_state_isSet;
    bool m_state_isValid;

    QString m_vulnerability_id;
    bool m_vulnerability_id_isSet;
    bool m_vulnerability_id_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAssessment)

#endif // OAIAssessment_H
