/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1alpha1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIArtifact.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIArtifact::OAIArtifact(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIArtifact::OAIArtifact() {
    this->initializeModel();
}

OAIArtifact::~OAIArtifact() {}

void OAIArtifact::initializeModel() {

    m_checksum_isSet = false;
    m_checksum_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_names_isSet = false;
    m_names_isValid = false;
}

void OAIArtifact::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIArtifact::fromJsonObject(QJsonObject json) {

    m_checksum_isValid = ::OpenAPI::fromJsonValue(m_checksum, json[QString("checksum")]);
    m_checksum_isSet = !json[QString("checksum")].isNull() && m_checksum_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_names_isValid = ::OpenAPI::fromJsonValue(m_names, json[QString("names")]);
    m_names_isSet = !json[QString("names")].isNull() && m_names_isValid;
}

QString OAIArtifact::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIArtifact::asJsonObject() const {
    QJsonObject obj;
    if (m_checksum_isSet) {
        obj.insert(QString("checksum"), ::OpenAPI::toJsonValue(m_checksum));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_names.size() > 0) {
        obj.insert(QString("names"), ::OpenAPI::toJsonValue(m_names));
    }
    return obj;
}

QString OAIArtifact::getChecksum() const {
    return m_checksum;
}
void OAIArtifact::setChecksum(const QString &checksum) {
    m_checksum = checksum;
    m_checksum_isSet = true;
}

bool OAIArtifact::is_checksum_Set() const{
    return m_checksum_isSet;
}

bool OAIArtifact::is_checksum_Valid() const{
    return m_checksum_isValid;
}

QString OAIArtifact::getId() const {
    return m_id;
}
void OAIArtifact::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIArtifact::is_id_Set() const{
    return m_id_isSet;
}

bool OAIArtifact::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIArtifact::getName() const {
    return m_name;
}
void OAIArtifact::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIArtifact::is_name_Set() const{
    return m_name_isSet;
}

bool OAIArtifact::is_name_Valid() const{
    return m_name_isValid;
}

QList<QString> OAIArtifact::getNames() const {
    return m_names;
}
void OAIArtifact::setNames(const QList<QString> &names) {
    m_names = names;
    m_names_isSet = true;
}

bool OAIArtifact::is_names_Set() const{
    return m_names_isSet;
}

bool OAIArtifact::is_names_Valid() const{
    return m_names_isValid;
}

bool OAIArtifact::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_checksum_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_names.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIArtifact::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
