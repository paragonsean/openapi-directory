/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1alpha1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetVulnzOccurrencesSummaryResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetVulnzOccurrencesSummaryResponse::OAIGetVulnzOccurrencesSummaryResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetVulnzOccurrencesSummaryResponse::OAIGetVulnzOccurrencesSummaryResponse() {
    this->initializeModel();
}

OAIGetVulnzOccurrencesSummaryResponse::~OAIGetVulnzOccurrencesSummaryResponse() {}

void OAIGetVulnzOccurrencesSummaryResponse::initializeModel() {

    m_counts_isSet = false;
    m_counts_isValid = false;
}

void OAIGetVulnzOccurrencesSummaryResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetVulnzOccurrencesSummaryResponse::fromJsonObject(QJsonObject json) {

    m_counts_isValid = ::OpenAPI::fromJsonValue(m_counts, json[QString("counts")]);
    m_counts_isSet = !json[QString("counts")].isNull() && m_counts_isValid;
}

QString OAIGetVulnzOccurrencesSummaryResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetVulnzOccurrencesSummaryResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_counts.size() > 0) {
        obj.insert(QString("counts"), ::OpenAPI::toJsonValue(m_counts));
    }
    return obj;
}

QList<OAISeverityCount> OAIGetVulnzOccurrencesSummaryResponse::getCounts() const {
    return m_counts;
}
void OAIGetVulnzOccurrencesSummaryResponse::setCounts(const QList<OAISeverityCount> &counts) {
    m_counts = counts;
    m_counts_isSet = true;
}

bool OAIGetVulnzOccurrencesSummaryResponse::is_counts_Set() const{
    return m_counts_isSet;
}

bool OAIGetVulnzOccurrencesSummaryResponse::is_counts_Valid() const{
    return m_counts_isValid;
}

bool OAIGetVulnzOccurrencesSummaryResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_counts.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetVulnzOccurrencesSummaryResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
