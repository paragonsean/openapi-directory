/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1alpha1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFingerprint.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFingerprint::OAIFingerprint(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFingerprint::OAIFingerprint() {
    this->initializeModel();
}

OAIFingerprint::~OAIFingerprint() {}

void OAIFingerprint::initializeModel() {

    m_v1_name_isSet = false;
    m_v1_name_isValid = false;

    m_v2_blob_isSet = false;
    m_v2_blob_isValid = false;

    m_v2_name_isSet = false;
    m_v2_name_isValid = false;
}

void OAIFingerprint::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFingerprint::fromJsonObject(QJsonObject json) {

    m_v1_name_isValid = ::OpenAPI::fromJsonValue(m_v1_name, json[QString("v1Name")]);
    m_v1_name_isSet = !json[QString("v1Name")].isNull() && m_v1_name_isValid;

    m_v2_blob_isValid = ::OpenAPI::fromJsonValue(m_v2_blob, json[QString("v2Blob")]);
    m_v2_blob_isSet = !json[QString("v2Blob")].isNull() && m_v2_blob_isValid;

    m_v2_name_isValid = ::OpenAPI::fromJsonValue(m_v2_name, json[QString("v2Name")]);
    m_v2_name_isSet = !json[QString("v2Name")].isNull() && m_v2_name_isValid;
}

QString OAIFingerprint::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFingerprint::asJsonObject() const {
    QJsonObject obj;
    if (m_v1_name_isSet) {
        obj.insert(QString("v1Name"), ::OpenAPI::toJsonValue(m_v1_name));
    }
    if (m_v2_blob.size() > 0) {
        obj.insert(QString("v2Blob"), ::OpenAPI::toJsonValue(m_v2_blob));
    }
    if (m_v2_name_isSet) {
        obj.insert(QString("v2Name"), ::OpenAPI::toJsonValue(m_v2_name));
    }
    return obj;
}

QString OAIFingerprint::getV1Name() const {
    return m_v1_name;
}
void OAIFingerprint::setV1Name(const QString &v1_name) {
    m_v1_name = v1_name;
    m_v1_name_isSet = true;
}

bool OAIFingerprint::is_v1_name_Set() const{
    return m_v1_name_isSet;
}

bool OAIFingerprint::is_v1_name_Valid() const{
    return m_v1_name_isValid;
}

QList<QString> OAIFingerprint::getV2Blob() const {
    return m_v2_blob;
}
void OAIFingerprint::setV2Blob(const QList<QString> &v2_blob) {
    m_v2_blob = v2_blob;
    m_v2_blob_isSet = true;
}

bool OAIFingerprint::is_v2_blob_Set() const{
    return m_v2_blob_isSet;
}

bool OAIFingerprint::is_v2_blob_Valid() const{
    return m_v2_blob_isValid;
}

QString OAIFingerprint::getV2Name() const {
    return m_v2_name;
}
void OAIFingerprint::setV2Name(const QString &v2_name) {
    m_v2_name = v2_name;
    m_v2_name_isSet = true;
}

bool OAIFingerprint::is_v2_name_Set() const{
    return m_v2_name_isSet;
}

bool OAIFingerprint::is_v2_name_Valid() const{
    return m_v2_name_isValid;
}

bool OAIFingerprint::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_v1_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_v2_blob.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_v2_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFingerprint::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
