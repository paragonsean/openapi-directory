/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1alpha1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleDevtoolsContaineranalysisV1alpha1RepoId.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleDevtoolsContaineranalysisV1alpha1RepoId::OAIGoogleDevtoolsContaineranalysisV1alpha1RepoId(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleDevtoolsContaineranalysisV1alpha1RepoId::OAIGoogleDevtoolsContaineranalysisV1alpha1RepoId() {
    this->initializeModel();
}

OAIGoogleDevtoolsContaineranalysisV1alpha1RepoId::~OAIGoogleDevtoolsContaineranalysisV1alpha1RepoId() {}

void OAIGoogleDevtoolsContaineranalysisV1alpha1RepoId::initializeModel() {

    m_project_repo_id_isSet = false;
    m_project_repo_id_isValid = false;

    m_uid_isSet = false;
    m_uid_isValid = false;
}

void OAIGoogleDevtoolsContaineranalysisV1alpha1RepoId::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleDevtoolsContaineranalysisV1alpha1RepoId::fromJsonObject(QJsonObject json) {

    m_project_repo_id_isValid = ::OpenAPI::fromJsonValue(m_project_repo_id, json[QString("projectRepoId")]);
    m_project_repo_id_isSet = !json[QString("projectRepoId")].isNull() && m_project_repo_id_isValid;

    m_uid_isValid = ::OpenAPI::fromJsonValue(m_uid, json[QString("uid")]);
    m_uid_isSet = !json[QString("uid")].isNull() && m_uid_isValid;
}

QString OAIGoogleDevtoolsContaineranalysisV1alpha1RepoId::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleDevtoolsContaineranalysisV1alpha1RepoId::asJsonObject() const {
    QJsonObject obj;
    if (m_project_repo_id.isSet()) {
        obj.insert(QString("projectRepoId"), ::OpenAPI::toJsonValue(m_project_repo_id));
    }
    if (m_uid_isSet) {
        obj.insert(QString("uid"), ::OpenAPI::toJsonValue(m_uid));
    }
    return obj;
}

OAIGoogleDevtoolsContaineranalysisV1alpha1ProjectRepoId OAIGoogleDevtoolsContaineranalysisV1alpha1RepoId::getProjectRepoId() const {
    return m_project_repo_id;
}
void OAIGoogleDevtoolsContaineranalysisV1alpha1RepoId::setProjectRepoId(const OAIGoogleDevtoolsContaineranalysisV1alpha1ProjectRepoId &project_repo_id) {
    m_project_repo_id = project_repo_id;
    m_project_repo_id_isSet = true;
}

bool OAIGoogleDevtoolsContaineranalysisV1alpha1RepoId::is_project_repo_id_Set() const{
    return m_project_repo_id_isSet;
}

bool OAIGoogleDevtoolsContaineranalysisV1alpha1RepoId::is_project_repo_id_Valid() const{
    return m_project_repo_id_isValid;
}

QString OAIGoogleDevtoolsContaineranalysisV1alpha1RepoId::getUid() const {
    return m_uid;
}
void OAIGoogleDevtoolsContaineranalysisV1alpha1RepoId::setUid(const QString &uid) {
    m_uid = uid;
    m_uid_isSet = true;
}

bool OAIGoogleDevtoolsContaineranalysisV1alpha1RepoId::is_uid_Set() const{
    return m_uid_isSet;
}

bool OAIGoogleDevtoolsContaineranalysisV1alpha1RepoId::is_uid_Valid() const{
    return m_uid_isValid;
}

bool OAIGoogleDevtoolsContaineranalysisV1alpha1RepoId::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_project_repo_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_uid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleDevtoolsContaineranalysisV1alpha1RepoId::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
