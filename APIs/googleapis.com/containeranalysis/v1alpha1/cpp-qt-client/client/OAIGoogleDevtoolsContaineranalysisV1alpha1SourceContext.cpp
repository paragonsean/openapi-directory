/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1alpha1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleDevtoolsContaineranalysisV1alpha1SourceContext.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleDevtoolsContaineranalysisV1alpha1SourceContext::OAIGoogleDevtoolsContaineranalysisV1alpha1SourceContext(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleDevtoolsContaineranalysisV1alpha1SourceContext::OAIGoogleDevtoolsContaineranalysisV1alpha1SourceContext() {
    this->initializeModel();
}

OAIGoogleDevtoolsContaineranalysisV1alpha1SourceContext::~OAIGoogleDevtoolsContaineranalysisV1alpha1SourceContext() {}

void OAIGoogleDevtoolsContaineranalysisV1alpha1SourceContext::initializeModel() {

    m_cloud_repo_isSet = false;
    m_cloud_repo_isValid = false;

    m_gerrit_isSet = false;
    m_gerrit_isValid = false;

    m_git_isSet = false;
    m_git_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;
}

void OAIGoogleDevtoolsContaineranalysisV1alpha1SourceContext::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleDevtoolsContaineranalysisV1alpha1SourceContext::fromJsonObject(QJsonObject json) {

    m_cloud_repo_isValid = ::OpenAPI::fromJsonValue(m_cloud_repo, json[QString("cloudRepo")]);
    m_cloud_repo_isSet = !json[QString("cloudRepo")].isNull() && m_cloud_repo_isValid;

    m_gerrit_isValid = ::OpenAPI::fromJsonValue(m_gerrit, json[QString("gerrit")]);
    m_gerrit_isSet = !json[QString("gerrit")].isNull() && m_gerrit_isValid;

    m_git_isValid = ::OpenAPI::fromJsonValue(m_git, json[QString("git")]);
    m_git_isSet = !json[QString("git")].isNull() && m_git_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;
}

QString OAIGoogleDevtoolsContaineranalysisV1alpha1SourceContext::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleDevtoolsContaineranalysisV1alpha1SourceContext::asJsonObject() const {
    QJsonObject obj;
    if (m_cloud_repo.isSet()) {
        obj.insert(QString("cloudRepo"), ::OpenAPI::toJsonValue(m_cloud_repo));
    }
    if (m_gerrit.isSet()) {
        obj.insert(QString("gerrit"), ::OpenAPI::toJsonValue(m_gerrit));
    }
    if (m_git.isSet()) {
        obj.insert(QString("git"), ::OpenAPI::toJsonValue(m_git));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    return obj;
}

OAIGoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContext OAIGoogleDevtoolsContaineranalysisV1alpha1SourceContext::getCloudRepo() const {
    return m_cloud_repo;
}
void OAIGoogleDevtoolsContaineranalysisV1alpha1SourceContext::setCloudRepo(const OAIGoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContext &cloud_repo) {
    m_cloud_repo = cloud_repo;
    m_cloud_repo_isSet = true;
}

bool OAIGoogleDevtoolsContaineranalysisV1alpha1SourceContext::is_cloud_repo_Set() const{
    return m_cloud_repo_isSet;
}

bool OAIGoogleDevtoolsContaineranalysisV1alpha1SourceContext::is_cloud_repo_Valid() const{
    return m_cloud_repo_isValid;
}

OAIGoogleDevtoolsContaineranalysisV1alpha1GerritSourceContext OAIGoogleDevtoolsContaineranalysisV1alpha1SourceContext::getGerrit() const {
    return m_gerrit;
}
void OAIGoogleDevtoolsContaineranalysisV1alpha1SourceContext::setGerrit(const OAIGoogleDevtoolsContaineranalysisV1alpha1GerritSourceContext &gerrit) {
    m_gerrit = gerrit;
    m_gerrit_isSet = true;
}

bool OAIGoogleDevtoolsContaineranalysisV1alpha1SourceContext::is_gerrit_Set() const{
    return m_gerrit_isSet;
}

bool OAIGoogleDevtoolsContaineranalysisV1alpha1SourceContext::is_gerrit_Valid() const{
    return m_gerrit_isValid;
}

OAIGoogleDevtoolsContaineranalysisV1alpha1GitSourceContext OAIGoogleDevtoolsContaineranalysisV1alpha1SourceContext::getGit() const {
    return m_git;
}
void OAIGoogleDevtoolsContaineranalysisV1alpha1SourceContext::setGit(const OAIGoogleDevtoolsContaineranalysisV1alpha1GitSourceContext &git) {
    m_git = git;
    m_git_isSet = true;
}

bool OAIGoogleDevtoolsContaineranalysisV1alpha1SourceContext::is_git_Set() const{
    return m_git_isSet;
}

bool OAIGoogleDevtoolsContaineranalysisV1alpha1SourceContext::is_git_Valid() const{
    return m_git_isValid;
}

QMap<QString, QString> OAIGoogleDevtoolsContaineranalysisV1alpha1SourceContext::getLabels() const {
    return m_labels;
}
void OAIGoogleDevtoolsContaineranalysisV1alpha1SourceContext::setLabels(const QMap<QString, QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIGoogleDevtoolsContaineranalysisV1alpha1SourceContext::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIGoogleDevtoolsContaineranalysisV1alpha1SourceContext::is_labels_Valid() const{
    return m_labels_isValid;
}

bool OAIGoogleDevtoolsContaineranalysisV1alpha1SourceContext::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cloud_repo.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_gerrit.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_git.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleDevtoolsContaineranalysisV1alpha1SourceContext::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
