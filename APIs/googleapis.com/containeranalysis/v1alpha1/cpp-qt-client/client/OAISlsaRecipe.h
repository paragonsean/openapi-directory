/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1alpha1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAISlsaRecipe.h
 *
 * Steps taken to build the artifact. For a TaskRun, typically each container corresponds to one step in the recipe.
 */

#ifndef OAISlsaRecipe_H
#define OAISlsaRecipe_H

#include <QJsonObject>

#include <QJsonValue>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAISlsaRecipe : public OAIObject {
public:
    OAISlsaRecipe();
    OAISlsaRecipe(QString json);
    ~OAISlsaRecipe() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QMap<QString, QJsonValue> getArguments() const;
    void setArguments(const QMap<QString, QJsonValue> &arguments);
    bool is_arguments_Set() const;
    bool is_arguments_Valid() const;

    QString getDefinedInMaterial() const;
    void setDefinedInMaterial(const QString &defined_in_material);
    bool is_defined_in_material_Set() const;
    bool is_defined_in_material_Valid() const;

    QString getEntryPoint() const;
    void setEntryPoint(const QString &entry_point);
    bool is_entry_point_Set() const;
    bool is_entry_point_Valid() const;

    QMap<QString, QJsonValue> getEnvironment() const;
    void setEnvironment(const QMap<QString, QJsonValue> &environment);
    bool is_environment_Set() const;
    bool is_environment_Valid() const;

    QString getType() const;
    void setType(const QString &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QMap<QString, QJsonValue> m_arguments;
    bool m_arguments_isSet;
    bool m_arguments_isValid;

    QString m_defined_in_material;
    bool m_defined_in_material_isSet;
    bool m_defined_in_material_isValid;

    QString m_entry_point;
    bool m_entry_point_isSet;
    bool m_entry_point_isValid;

    QMap<QString, QJsonValue> m_environment;
    bool m_environment_isSet;
    bool m_environment_isValid;

    QString m_type;
    bool m_type_isSet;
    bool m_type_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAISlsaRecipe)

#endif // OAISlsaRecipe_H
