/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1alpha1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIComplianceNote.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIComplianceNote::OAIComplianceNote(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIComplianceNote::OAIComplianceNote() {
    this->initializeModel();
}

OAIComplianceNote::~OAIComplianceNote() {}

void OAIComplianceNote::initializeModel() {

    m_cis_benchmark_isSet = false;
    m_cis_benchmark_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_rationale_isSet = false;
    m_rationale_isValid = false;

    m_remediation_isSet = false;
    m_remediation_isValid = false;

    m_scan_instructions_isSet = false;
    m_scan_instructions_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIComplianceNote::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIComplianceNote::fromJsonObject(QJsonObject json) {

    m_cis_benchmark_isValid = ::OpenAPI::fromJsonValue(m_cis_benchmark, json[QString("cisBenchmark")]);
    m_cis_benchmark_isSet = !json[QString("cisBenchmark")].isNull() && m_cis_benchmark_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_rationale_isValid = ::OpenAPI::fromJsonValue(m_rationale, json[QString("rationale")]);
    m_rationale_isSet = !json[QString("rationale")].isNull() && m_rationale_isValid;

    m_remediation_isValid = ::OpenAPI::fromJsonValue(m_remediation, json[QString("remediation")]);
    m_remediation_isSet = !json[QString("remediation")].isNull() && m_remediation_isValid;

    m_scan_instructions_isValid = ::OpenAPI::fromJsonValue(m_scan_instructions, json[QString("scanInstructions")]);
    m_scan_instructions_isSet = !json[QString("scanInstructions")].isNull() && m_scan_instructions_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIComplianceNote::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIComplianceNote::asJsonObject() const {
    QJsonObject obj;
    if (m_cis_benchmark.isSet()) {
        obj.insert(QString("cisBenchmark"), ::OpenAPI::toJsonValue(m_cis_benchmark));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_rationale_isSet) {
        obj.insert(QString("rationale"), ::OpenAPI::toJsonValue(m_rationale));
    }
    if (m_remediation_isSet) {
        obj.insert(QString("remediation"), ::OpenAPI::toJsonValue(m_remediation));
    }
    if (m_scan_instructions_isSet) {
        obj.insert(QString("scanInstructions"), ::OpenAPI::toJsonValue(m_scan_instructions));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_version.size() > 0) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

OAICisBenchmark OAIComplianceNote::getCisBenchmark() const {
    return m_cis_benchmark;
}
void OAIComplianceNote::setCisBenchmark(const OAICisBenchmark &cis_benchmark) {
    m_cis_benchmark = cis_benchmark;
    m_cis_benchmark_isSet = true;
}

bool OAIComplianceNote::is_cis_benchmark_Set() const{
    return m_cis_benchmark_isSet;
}

bool OAIComplianceNote::is_cis_benchmark_Valid() const{
    return m_cis_benchmark_isValid;
}

QString OAIComplianceNote::getDescription() const {
    return m_description;
}
void OAIComplianceNote::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIComplianceNote::is_description_Set() const{
    return m_description_isSet;
}

bool OAIComplianceNote::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIComplianceNote::getRationale() const {
    return m_rationale;
}
void OAIComplianceNote::setRationale(const QString &rationale) {
    m_rationale = rationale;
    m_rationale_isSet = true;
}

bool OAIComplianceNote::is_rationale_Set() const{
    return m_rationale_isSet;
}

bool OAIComplianceNote::is_rationale_Valid() const{
    return m_rationale_isValid;
}

QString OAIComplianceNote::getRemediation() const {
    return m_remediation;
}
void OAIComplianceNote::setRemediation(const QString &remediation) {
    m_remediation = remediation;
    m_remediation_isSet = true;
}

bool OAIComplianceNote::is_remediation_Set() const{
    return m_remediation_isSet;
}

bool OAIComplianceNote::is_remediation_Valid() const{
    return m_remediation_isValid;
}

QByteArray OAIComplianceNote::getScanInstructions() const {
    return m_scan_instructions;
}
void OAIComplianceNote::setScanInstructions(const QByteArray &scan_instructions) {
    m_scan_instructions = scan_instructions;
    m_scan_instructions_isSet = true;
}

bool OAIComplianceNote::is_scan_instructions_Set() const{
    return m_scan_instructions_isSet;
}

bool OAIComplianceNote::is_scan_instructions_Valid() const{
    return m_scan_instructions_isValid;
}

QString OAIComplianceNote::getTitle() const {
    return m_title;
}
void OAIComplianceNote::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIComplianceNote::is_title_Set() const{
    return m_title_isSet;
}

bool OAIComplianceNote::is_title_Valid() const{
    return m_title_isValid;
}

QList<OAIComplianceVersion> OAIComplianceNote::getVersion() const {
    return m_version;
}
void OAIComplianceNote::setVersion(const QList<OAIComplianceVersion> &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIComplianceNote::is_version_Set() const{
    return m_version_isSet;
}

bool OAIComplianceNote::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIComplianceNote::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cis_benchmark.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rationale_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_remediation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scan_instructions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIComplianceNote::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
