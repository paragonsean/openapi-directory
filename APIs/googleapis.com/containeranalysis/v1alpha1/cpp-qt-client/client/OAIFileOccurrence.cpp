/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1alpha1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFileOccurrence.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFileOccurrence::OAIFileOccurrence(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFileOccurrence::OAIFileOccurrence() {
    this->initializeModel();
}

OAIFileOccurrence::~OAIFileOccurrence() {}

void OAIFileOccurrence::initializeModel() {

    m_attributions_isSet = false;
    m_attributions_isValid = false;

    m_comment_isSet = false;
    m_comment_isValid = false;

    m_contributors_isSet = false;
    m_contributors_isValid = false;

    m_copyright_isSet = false;
    m_copyright_isValid = false;

    m_files_license_info_isSet = false;
    m_files_license_info_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_license_concluded_isSet = false;
    m_license_concluded_isValid = false;

    m_notice_isSet = false;
    m_notice_isValid = false;
}

void OAIFileOccurrence::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFileOccurrence::fromJsonObject(QJsonObject json) {

    m_attributions_isValid = ::OpenAPI::fromJsonValue(m_attributions, json[QString("attributions")]);
    m_attributions_isSet = !json[QString("attributions")].isNull() && m_attributions_isValid;

    m_comment_isValid = ::OpenAPI::fromJsonValue(m_comment, json[QString("comment")]);
    m_comment_isSet = !json[QString("comment")].isNull() && m_comment_isValid;

    m_contributors_isValid = ::OpenAPI::fromJsonValue(m_contributors, json[QString("contributors")]);
    m_contributors_isSet = !json[QString("contributors")].isNull() && m_contributors_isValid;

    m_copyright_isValid = ::OpenAPI::fromJsonValue(m_copyright, json[QString("copyright")]);
    m_copyright_isSet = !json[QString("copyright")].isNull() && m_copyright_isValid;

    m_files_license_info_isValid = ::OpenAPI::fromJsonValue(m_files_license_info, json[QString("filesLicenseInfo")]);
    m_files_license_info_isSet = !json[QString("filesLicenseInfo")].isNull() && m_files_license_info_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_license_concluded_isValid = ::OpenAPI::fromJsonValue(m_license_concluded, json[QString("licenseConcluded")]);
    m_license_concluded_isSet = !json[QString("licenseConcluded")].isNull() && m_license_concluded_isValid;

    m_notice_isValid = ::OpenAPI::fromJsonValue(m_notice, json[QString("notice")]);
    m_notice_isSet = !json[QString("notice")].isNull() && m_notice_isValid;
}

QString OAIFileOccurrence::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFileOccurrence::asJsonObject() const {
    QJsonObject obj;
    if (m_attributions.size() > 0) {
        obj.insert(QString("attributions"), ::OpenAPI::toJsonValue(m_attributions));
    }
    if (m_comment_isSet) {
        obj.insert(QString("comment"), ::OpenAPI::toJsonValue(m_comment));
    }
    if (m_contributors.size() > 0) {
        obj.insert(QString("contributors"), ::OpenAPI::toJsonValue(m_contributors));
    }
    if (m_copyright_isSet) {
        obj.insert(QString("copyright"), ::OpenAPI::toJsonValue(m_copyright));
    }
    if (m_files_license_info.size() > 0) {
        obj.insert(QString("filesLicenseInfo"), ::OpenAPI::toJsonValue(m_files_license_info));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_license_concluded.isSet()) {
        obj.insert(QString("licenseConcluded"), ::OpenAPI::toJsonValue(m_license_concluded));
    }
    if (m_notice_isSet) {
        obj.insert(QString("notice"), ::OpenAPI::toJsonValue(m_notice));
    }
    return obj;
}

QList<QString> OAIFileOccurrence::getAttributions() const {
    return m_attributions;
}
void OAIFileOccurrence::setAttributions(const QList<QString> &attributions) {
    m_attributions = attributions;
    m_attributions_isSet = true;
}

bool OAIFileOccurrence::is_attributions_Set() const{
    return m_attributions_isSet;
}

bool OAIFileOccurrence::is_attributions_Valid() const{
    return m_attributions_isValid;
}

QString OAIFileOccurrence::getComment() const {
    return m_comment;
}
void OAIFileOccurrence::setComment(const QString &comment) {
    m_comment = comment;
    m_comment_isSet = true;
}

bool OAIFileOccurrence::is_comment_Set() const{
    return m_comment_isSet;
}

bool OAIFileOccurrence::is_comment_Valid() const{
    return m_comment_isValid;
}

QList<QString> OAIFileOccurrence::getContributors() const {
    return m_contributors;
}
void OAIFileOccurrence::setContributors(const QList<QString> &contributors) {
    m_contributors = contributors;
    m_contributors_isSet = true;
}

bool OAIFileOccurrence::is_contributors_Set() const{
    return m_contributors_isSet;
}

bool OAIFileOccurrence::is_contributors_Valid() const{
    return m_contributors_isValid;
}

QString OAIFileOccurrence::getCopyright() const {
    return m_copyright;
}
void OAIFileOccurrence::setCopyright(const QString &copyright) {
    m_copyright = copyright;
    m_copyright_isSet = true;
}

bool OAIFileOccurrence::is_copyright_Set() const{
    return m_copyright_isSet;
}

bool OAIFileOccurrence::is_copyright_Valid() const{
    return m_copyright_isValid;
}

QList<QString> OAIFileOccurrence::getFilesLicenseInfo() const {
    return m_files_license_info;
}
void OAIFileOccurrence::setFilesLicenseInfo(const QList<QString> &files_license_info) {
    m_files_license_info = files_license_info;
    m_files_license_info_isSet = true;
}

bool OAIFileOccurrence::is_files_license_info_Set() const{
    return m_files_license_info_isSet;
}

bool OAIFileOccurrence::is_files_license_info_Valid() const{
    return m_files_license_info_isValid;
}

QString OAIFileOccurrence::getId() const {
    return m_id;
}
void OAIFileOccurrence::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIFileOccurrence::is_id_Set() const{
    return m_id_isSet;
}

bool OAIFileOccurrence::is_id_Valid() const{
    return m_id_isValid;
}

OAILicense OAIFileOccurrence::getLicenseConcluded() const {
    return m_license_concluded;
}
void OAIFileOccurrence::setLicenseConcluded(const OAILicense &license_concluded) {
    m_license_concluded = license_concluded;
    m_license_concluded_isSet = true;
}

bool OAIFileOccurrence::is_license_concluded_Set() const{
    return m_license_concluded_isSet;
}

bool OAIFileOccurrence::is_license_concluded_Valid() const{
    return m_license_concluded_isValid;
}

QString OAIFileOccurrence::getNotice() const {
    return m_notice;
}
void OAIFileOccurrence::setNotice(const QString &notice) {
    m_notice = notice;
    m_notice_isSet = true;
}

bool OAIFileOccurrence::is_notice_Set() const{
    return m_notice_isSet;
}

bool OAIFileOccurrence::is_notice_Valid() const{
    return m_notice_isValid;
}

bool OAIFileOccurrence::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attributions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_comment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contributors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_copyright_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_files_license_info.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_license_concluded.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_notice_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFileOccurrence::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
