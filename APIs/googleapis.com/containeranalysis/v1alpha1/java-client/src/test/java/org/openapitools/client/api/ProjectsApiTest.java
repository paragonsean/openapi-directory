/*
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1alpha1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CreateOperationRequest;
import org.openapitools.client.model.GetVulnzOccurrencesSummaryResponse;
import org.openapitools.client.model.ListNotesResponse;
import org.openapitools.client.model.ListOccurrencesResponse;
import org.openapitools.client.model.ListScanConfigsResponse;
import org.openapitools.client.model.Note;
import org.openapitools.client.model.Occurrence;
import org.openapitools.client.model.Operation;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProjectsApi
 */
@Disabled
public class ProjectsApiTest {

    private final ProjectsApi api = new ProjectsApi();

    /**
     * Creates a new &#x60;Note&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void containeranalysisProjectsNotesCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String name = null;
        String noteId = null;
        Note note = null;
        Note response = api.containeranalysisProjectsNotesCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, name, noteId, note);
        // TODO: test validations
    }

    /**
     * Lists all &#x60;Notes&#x60; for a given project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void containeranalysisProjectsNotesListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        String name = null;
        Integer pageSize = null;
        String pageToken = null;
        ListNotesResponse response = api.containeranalysisProjectsNotesList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, name, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Creates a new &#x60;Occurrence&#x60;. Use this method to create &#x60;Occurrences&#x60; for a resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void containeranalysisProjectsOccurrencesCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String name = null;
        Occurrence occurrence = null;
        Occurrence response = api.containeranalysisProjectsOccurrencesCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, name, occurrence);
        // TODO: test validations
    }

    /**
     * Gets a summary of the number and severity of occurrences.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void containeranalysisProjectsOccurrencesGetVulnerabilitySummaryTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        GetVulnzOccurrencesSummaryResponse response = api.containeranalysisProjectsOccurrencesGetVulnerabilitySummary(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter);
        // TODO: test validations
    }

    /**
     * Lists active &#x60;Occurrences&#x60; for a given project matching the filters.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void containeranalysisProjectsOccurrencesListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        String kind = null;
        String name = null;
        Integer pageSize = null;
        String pageToken = null;
        ListOccurrencesResponse response = api.containeranalysisProjectsOccurrencesList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, kind, name, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Creates a new &#x60;Operation&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void containeranalysisProjectsOperationsCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        CreateOperationRequest createOperationRequest = null;
        Operation response = api.containeranalysisProjectsOperationsCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, createOperationRequest);
        // TODO: test validations
    }

    /**
     * Lists scan configurations for a project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void containeranalysisProjectsScanConfigsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        Integer pageSize = null;
        String pageToken = null;
        ListScanConfigsResponse response = api.containeranalysisProjectsScanConfigsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, pageSize, pageToken);
        // TODO: test validations
    }

}
