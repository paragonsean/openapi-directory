/*
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1alpha1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.GetIamPolicyRequest;
import org.openapitools.client.model.ListNoteOccurrencesResponse;
import org.openapitools.client.model.ListNotesResponse;
import org.openapitools.client.model.Note;
import org.openapitools.client.model.Policy;
import org.openapitools.client.model.SetIamPolicyRequest;
import org.openapitools.client.model.TestIamPermissionsRequest;
import org.openapitools.client.model.TestIamPermissionsResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProvidersApi
 */
@Disabled
public class ProvidersApiTest {

    private final ProvidersApi api = new ProvidersApi();

    /**
     * Creates a new &#x60;Note&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void containeranalysisProvidersNotesCreateTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String noteId = null;
        String parent = null;
        Note note = null;
        Note response = api.containeranalysisProvidersNotesCreate(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, noteId, parent, note);
        // TODO: test validations
    }

    /**
     * Deletes the given &#x60;Note&#x60; from the system.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void containeranalysisProvidersNotesDeleteTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object response = api.containeranalysisProvidersNotesDelete(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Returns the requested &#x60;Note&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void containeranalysisProvidersNotesGetTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Note response = api.containeranalysisProvidersNotesGet(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Gets the access control policy for a note or an &#x60;Occurrence&#x60; resource. Requires &#x60;containeranalysis.notes.setIamPolicy&#x60; or &#x60;containeranalysis.occurrences.setIamPolicy&#x60; permission if the resource is a note or occurrence, respectively. Attempting to call this method on a resource without the required permission will result in a &#x60;PERMISSION_DENIED&#x60; error. Attempting to call this method on a non-existent resource will result in a &#x60;NOT_FOUND&#x60; error if the user has list permission on the project, or a &#x60;PERMISSION_DENIED&#x60; error otherwise. The resource takes the following formats: &#x60;projects/{PROJECT_ID}/occurrences/{OCCURRENCE_ID}&#x60; for occurrences and projects/{PROJECT_ID}/notes/{NOTE_ID} for notes
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void containeranalysisProvidersNotesGetIamPolicyTest() throws ApiException {
        String resource = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GetIamPolicyRequest getIamPolicyRequest = null;
        Policy response = api.containeranalysisProvidersNotesGetIamPolicy(resource, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, getIamPolicyRequest);
        // TODO: test validations
    }

    /**
     * Lists all &#x60;Notes&#x60; for a given project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void containeranalysisProvidersNotesListTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        Integer pageSize = null;
        String pageToken = null;
        String parent = null;
        ListNotesResponse response = api.containeranalysisProvidersNotesList(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, pageSize, pageToken, parent);
        // TODO: test validations
    }

    /**
     * Lists &#x60;Occurrences&#x60; referencing the specified &#x60;Note&#x60;. Use this method to get all occurrences referencing your &#x60;Note&#x60; across all your customer projects.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void containeranalysisProvidersNotesOccurrencesListTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        Integer pageSize = null;
        String pageToken = null;
        ListNoteOccurrencesResponse response = api.containeranalysisProvidersNotesOccurrencesList(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Updates an existing &#x60;Note&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void containeranalysisProvidersNotesPatchTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String updateMask = null;
        Note note = null;
        Note response = api.containeranalysisProvidersNotesPatch(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, updateMask, note);
        // TODO: test validations
    }

    /**
     * Sets the access control policy on the specified &#x60;Note&#x60; or &#x60;Occurrence&#x60;. Requires &#x60;containeranalysis.notes.setIamPolicy&#x60; or &#x60;containeranalysis.occurrences.setIamPolicy&#x60; permission if the resource is a &#x60;Note&#x60; or an &#x60;Occurrence&#x60;, respectively. Attempting to call this method without these permissions will result in a &#x60; &#x60;PERMISSION_DENIED&#x60; error. Attempting to call this method on a non-existent resource will result in a &#x60;NOT_FOUND&#x60; error if the user has &#x60;containeranalysis.notes.list&#x60; permission on a &#x60;Note&#x60; or &#x60;containeranalysis.occurrences.list&#x60; on an &#x60;Occurrence&#x60;, or a &#x60;PERMISSION_DENIED&#x60; error otherwise. The resource takes the following formats: &#x60;projects/{projectid}/occurrences/{occurrenceid}&#x60; for occurrences and projects/{projectid}/notes/{noteid} for notes
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void containeranalysisProvidersNotesSetIamPolicyTest() throws ApiException {
        String resource = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        SetIamPolicyRequest setIamPolicyRequest = null;
        Policy response = api.containeranalysisProvidersNotesSetIamPolicy(resource, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, setIamPolicyRequest);
        // TODO: test validations
    }

    /**
     * Returns the permissions that a caller has on the specified note or occurrence resource. Requires list permission on the project (for example, \&quot;storage.objects.list\&quot; on the containing bucket for testing permission of an object). Attempting to call this method on a non-existent resource will result in a &#x60;NOT_FOUND&#x60; error if the user has list permission on the project, or a &#x60;PERMISSION_DENIED&#x60; error otherwise. The resource takes the following formats: &#x60;projects/{PROJECT_ID}/occurrences/{OCCURRENCE_ID}&#x60; for &#x60;Occurrences&#x60; and &#x60;projects/{PROJECT_ID}/notes/{NOTE_ID}&#x60; for &#x60;Notes&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void containeranalysisProvidersNotesTestIamPermissionsTest() throws ApiException {
        String resource = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        TestIamPermissionsRequest testIamPermissionsRequest = null;
        TestIamPermissionsResponse response = api.containeranalysisProvidersNotesTestIamPermissions(resource, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, testIamPermissionsRequest);
        // TODO: test validations
    }

}
