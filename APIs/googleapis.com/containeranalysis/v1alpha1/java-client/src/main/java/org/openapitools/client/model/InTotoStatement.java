/*
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1alpha1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.InTotoProvenance;
import org.openapitools.client.model.SlsaProvenance;
import org.openapitools.client.model.SlsaProvenanceZeroTwo;
import org.openapitools.client.model.Subject;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Spec defined at https://github.com/in-toto/attestation/tree/main/spec#statement The serialized InTotoStatement will be stored as Envelope.payload. Envelope.payloadType is always \&quot;application/vnd.in-toto+json\&quot;.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:38:46.438210-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class InTotoStatement {
  public static final String SERIALIZED_NAME_TYPE = "_type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_PREDICATE_TYPE = "predicateType";
  @SerializedName(SERIALIZED_NAME_PREDICATE_TYPE)
  private String predicateType;

  public static final String SERIALIZED_NAME_PROVENANCE = "provenance";
  @SerializedName(SERIALIZED_NAME_PROVENANCE)
  private InTotoProvenance provenance;

  public static final String SERIALIZED_NAME_SLSA_PROVENANCE = "slsaProvenance";
  @SerializedName(SERIALIZED_NAME_SLSA_PROVENANCE)
  private SlsaProvenance slsaProvenance;

  public static final String SERIALIZED_NAME_SLSA_PROVENANCE_ZERO_TWO = "slsaProvenanceZeroTwo";
  @SerializedName(SERIALIZED_NAME_SLSA_PROVENANCE_ZERO_TWO)
  private SlsaProvenanceZeroTwo slsaProvenanceZeroTwo;

  public static final String SERIALIZED_NAME_SUBJECT = "subject";
  @SerializedName(SERIALIZED_NAME_SUBJECT)
  private List<Subject> subject = new ArrayList<>();

  public InTotoStatement() {
  }

  public InTotoStatement type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Always \&quot;https://in-toto.io/Statement/v0.1\&quot;.
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public InTotoStatement predicateType(String predicateType) {
    this.predicateType = predicateType;
    return this;
  }

  /**
   * \&quot;https://slsa.dev/provenance/v0.1\&quot; for SlsaProvenance.
   * @return predicateType
   */
  @javax.annotation.Nullable
  public String getPredicateType() {
    return predicateType;
  }

  public void setPredicateType(String predicateType) {
    this.predicateType = predicateType;
  }


  public InTotoStatement provenance(InTotoProvenance provenance) {
    this.provenance = provenance;
    return this;
  }

  /**
   * Get provenance
   * @return provenance
   */
  @javax.annotation.Nullable
  public InTotoProvenance getProvenance() {
    return provenance;
  }

  public void setProvenance(InTotoProvenance provenance) {
    this.provenance = provenance;
  }


  public InTotoStatement slsaProvenance(SlsaProvenance slsaProvenance) {
    this.slsaProvenance = slsaProvenance;
    return this;
  }

  /**
   * Get slsaProvenance
   * @return slsaProvenance
   */
  @javax.annotation.Nullable
  public SlsaProvenance getSlsaProvenance() {
    return slsaProvenance;
  }

  public void setSlsaProvenance(SlsaProvenance slsaProvenance) {
    this.slsaProvenance = slsaProvenance;
  }


  public InTotoStatement slsaProvenanceZeroTwo(SlsaProvenanceZeroTwo slsaProvenanceZeroTwo) {
    this.slsaProvenanceZeroTwo = slsaProvenanceZeroTwo;
    return this;
  }

  /**
   * Get slsaProvenanceZeroTwo
   * @return slsaProvenanceZeroTwo
   */
  @javax.annotation.Nullable
  public SlsaProvenanceZeroTwo getSlsaProvenanceZeroTwo() {
    return slsaProvenanceZeroTwo;
  }

  public void setSlsaProvenanceZeroTwo(SlsaProvenanceZeroTwo slsaProvenanceZeroTwo) {
    this.slsaProvenanceZeroTwo = slsaProvenanceZeroTwo;
  }


  public InTotoStatement subject(List<Subject> subject) {
    this.subject = subject;
    return this;
  }

  public InTotoStatement addSubjectItem(Subject subjectItem) {
    if (this.subject == null) {
      this.subject = new ArrayList<>();
    }
    this.subject.add(subjectItem);
    return this;
  }

  /**
   * subject is the subjects of the intoto statement
   * @return subject
   */
  @javax.annotation.Nullable
  public List<Subject> getSubject() {
    return subject;
  }

  public void setSubject(List<Subject> subject) {
    this.subject = subject;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InTotoStatement inTotoStatement = (InTotoStatement) o;
    return Objects.equals(this.type, inTotoStatement.type) &&
        Objects.equals(this.predicateType, inTotoStatement.predicateType) &&
        Objects.equals(this.provenance, inTotoStatement.provenance) &&
        Objects.equals(this.slsaProvenance, inTotoStatement.slsaProvenance) &&
        Objects.equals(this.slsaProvenanceZeroTwo, inTotoStatement.slsaProvenanceZeroTwo) &&
        Objects.equals(this.subject, inTotoStatement.subject);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, predicateType, provenance, slsaProvenance, slsaProvenanceZeroTwo, subject);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InTotoStatement {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    predicateType: ").append(toIndentedString(predicateType)).append("\n");
    sb.append("    provenance: ").append(toIndentedString(provenance)).append("\n");
    sb.append("    slsaProvenance: ").append(toIndentedString(slsaProvenance)).append("\n");
    sb.append("    slsaProvenanceZeroTwo: ").append(toIndentedString(slsaProvenanceZeroTwo)).append("\n");
    sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("_type");
    openapiFields.add("predicateType");
    openapiFields.add("provenance");
    openapiFields.add("slsaProvenance");
    openapiFields.add("slsaProvenanceZeroTwo");
    openapiFields.add("subject");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InTotoStatement
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InTotoStatement.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InTotoStatement is not found in the empty JSON string", InTotoStatement.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InTotoStatement.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InTotoStatement` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("_type") != null && !jsonObj.get("_type").isJsonNull()) && !jsonObj.get("_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("_type").toString()));
      }
      if ((jsonObj.get("predicateType") != null && !jsonObj.get("predicateType").isJsonNull()) && !jsonObj.get("predicateType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `predicateType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("predicateType").toString()));
      }
      // validate the optional field `provenance`
      if (jsonObj.get("provenance") != null && !jsonObj.get("provenance").isJsonNull()) {
        InTotoProvenance.validateJsonElement(jsonObj.get("provenance"));
      }
      // validate the optional field `slsaProvenance`
      if (jsonObj.get("slsaProvenance") != null && !jsonObj.get("slsaProvenance").isJsonNull()) {
        SlsaProvenance.validateJsonElement(jsonObj.get("slsaProvenance"));
      }
      // validate the optional field `slsaProvenanceZeroTwo`
      if (jsonObj.get("slsaProvenanceZeroTwo") != null && !jsonObj.get("slsaProvenanceZeroTwo").isJsonNull()) {
        SlsaProvenanceZeroTwo.validateJsonElement(jsonObj.get("slsaProvenanceZeroTwo"));
      }
      if (jsonObj.get("subject") != null && !jsonObj.get("subject").isJsonNull()) {
        JsonArray jsonArraysubject = jsonObj.getAsJsonArray("subject");
        if (jsonArraysubject != null) {
          // ensure the json data is an array
          if (!jsonObj.get("subject").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `subject` to be an array in the JSON string but got `%s`", jsonObj.get("subject").toString()));
          }

          // validate the optional field `subject` (array)
          for (int i = 0; i < jsonArraysubject.size(); i++) {
            Subject.validateJsonElement(jsonArraysubject.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InTotoStatement.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InTotoStatement' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InTotoStatement> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InTotoStatement.class));

       return (TypeAdapter<T>) new TypeAdapter<InTotoStatement>() {
           @Override
           public void write(JsonWriter out, InTotoStatement value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InTotoStatement read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InTotoStatement given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InTotoStatement
   * @throws IOException if the JSON string is invalid with respect to InTotoStatement
   */
  public static InTotoStatement fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InTotoStatement.class);
  }

  /**
   * Convert an instance of InTotoStatement to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

