/*
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1alpha1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AttestationAuthority;
import org.openapitools.client.model.Basis;
import org.openapitools.client.model.BuildType;
import org.openapitools.client.model.ComplianceNote;
import org.openapitools.client.model.DSSEAttestationNote;
import org.openapitools.client.model.Deployable;
import org.openapitools.client.model.Discovery;
import org.openapitools.client.model.DocumentNote;
import org.openapitools.client.model.FileNote;
import org.openapitools.client.model.ModelPackage;
import org.openapitools.client.model.PackageInfoNote;
import org.openapitools.client.model.RelatedUrl;
import org.openapitools.client.model.RelationshipNote;
import org.openapitools.client.model.SBOMReferenceNote;
import org.openapitools.client.model.UpgradeNote;
import org.openapitools.client.model.VulnerabilityAssessmentNote;
import org.openapitools.client.model.VulnerabilityType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Provides a detailed description of a &#x60;Note&#x60;.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:38:46.438210-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Note {
  public static final String SERIALIZED_NAME_ATTESTATION_AUTHORITY = "attestationAuthority";
  @SerializedName(SERIALIZED_NAME_ATTESTATION_AUTHORITY)
  private AttestationAuthority attestationAuthority;

  public static final String SERIALIZED_NAME_BASE_IMAGE = "baseImage";
  @SerializedName(SERIALIZED_NAME_BASE_IMAGE)
  private Basis baseImage;

  public static final String SERIALIZED_NAME_BUILD_TYPE = "buildType";
  @SerializedName(SERIALIZED_NAME_BUILD_TYPE)
  private BuildType buildType;

  public static final String SERIALIZED_NAME_COMPLIANCE = "compliance";
  @SerializedName(SERIALIZED_NAME_COMPLIANCE)
  private ComplianceNote compliance;

  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private String createTime;

  public static final String SERIALIZED_NAME_DEPLOYABLE = "deployable";
  @SerializedName(SERIALIZED_NAME_DEPLOYABLE)
  private Deployable deployable;

  public static final String SERIALIZED_NAME_DISCOVERY = "discovery";
  @SerializedName(SERIALIZED_NAME_DISCOVERY)
  private Discovery discovery;

  public static final String SERIALIZED_NAME_DSSE_ATTESTATION = "dsseAttestation";
  @SerializedName(SERIALIZED_NAME_DSSE_ATTESTATION)
  private DSSEAttestationNote dsseAttestation;

  public static final String SERIALIZED_NAME_EXPIRATION_TIME = "expirationTime";
  @SerializedName(SERIALIZED_NAME_EXPIRATION_TIME)
  private String expirationTime;

  /**
   * Output only. This explicitly denotes which kind of note is specified. This field can be used as a filter in list requests.
   */
  @JsonAdapter(KindEnum.Adapter.class)
  public enum KindEnum {
    KIND_UNSPECIFIED("KIND_UNSPECIFIED"),
    
    PACKAGE_VULNERABILITY("PACKAGE_VULNERABILITY"),
    
    BUILD_DETAILS("BUILD_DETAILS"),
    
    IMAGE_BASIS("IMAGE_BASIS"),
    
    PACKAGE_MANAGER("PACKAGE_MANAGER"),
    
    DEPLOYABLE("DEPLOYABLE"),
    
    DISCOVERY("DISCOVERY"),
    
    ATTESTATION_AUTHORITY("ATTESTATION_AUTHORITY"),
    
    UPGRADE("UPGRADE"),
    
    COMPLIANCE("COMPLIANCE"),
    
    SBOM("SBOM"),
    
    SPDX_PACKAGE("SPDX_PACKAGE"),
    
    SPDX_FILE("SPDX_FILE"),
    
    SPDX_RELATIONSHIP("SPDX_RELATIONSHIP"),
    
    DSSE_ATTESTATION("DSSE_ATTESTATION"),
    
    VULNERABILITY_ASSESSMENT("VULNERABILITY_ASSESSMENT"),
    
    SBOM_REFERENCE("SBOM_REFERENCE");

    private String value;

    KindEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static KindEnum fromValue(String value) {
      for (KindEnum b : KindEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<KindEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final KindEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public KindEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return KindEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      KindEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private KindEnum kind;

  public static final String SERIALIZED_NAME_LONG_DESCRIPTION = "longDescription";
  @SerializedName(SERIALIZED_NAME_LONG_DESCRIPTION)
  private String longDescription;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PACKAGE = "package";
  @SerializedName(SERIALIZED_NAME_PACKAGE)
  private ModelPackage _package;

  public static final String SERIALIZED_NAME_RELATED_URL = "relatedUrl";
  @SerializedName(SERIALIZED_NAME_RELATED_URL)
  private List<RelatedUrl> relatedUrl = new ArrayList<>();

  public static final String SERIALIZED_NAME_SBOM = "sbom";
  @SerializedName(SERIALIZED_NAME_SBOM)
  private DocumentNote sbom;

  public static final String SERIALIZED_NAME_SBOM_REFERENCE = "sbomReference";
  @SerializedName(SERIALIZED_NAME_SBOM_REFERENCE)
  private SBOMReferenceNote sbomReference;

  public static final String SERIALIZED_NAME_SHORT_DESCRIPTION = "shortDescription";
  @SerializedName(SERIALIZED_NAME_SHORT_DESCRIPTION)
  private String shortDescription;

  public static final String SERIALIZED_NAME_SPDX_FILE = "spdxFile";
  @SerializedName(SERIALIZED_NAME_SPDX_FILE)
  private FileNote spdxFile;

  public static final String SERIALIZED_NAME_SPDX_PACKAGE = "spdxPackage";
  @SerializedName(SERIALIZED_NAME_SPDX_PACKAGE)
  private PackageInfoNote spdxPackage;

  public static final String SERIALIZED_NAME_SPDX_RELATIONSHIP = "spdxRelationship";
  @SerializedName(SERIALIZED_NAME_SPDX_RELATIONSHIP)
  private RelationshipNote spdxRelationship;

  public static final String SERIALIZED_NAME_UPDATE_TIME = "updateTime";
  @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
  private String updateTime;

  public static final String SERIALIZED_NAME_UPGRADE = "upgrade";
  @SerializedName(SERIALIZED_NAME_UPGRADE)
  private UpgradeNote upgrade;

  public static final String SERIALIZED_NAME_VULNERABILITY_ASSESSMENT = "vulnerabilityAssessment";
  @SerializedName(SERIALIZED_NAME_VULNERABILITY_ASSESSMENT)
  private VulnerabilityAssessmentNote vulnerabilityAssessment;

  public static final String SERIALIZED_NAME_VULNERABILITY_TYPE = "vulnerabilityType";
  @SerializedName(SERIALIZED_NAME_VULNERABILITY_TYPE)
  private VulnerabilityType vulnerabilityType;

  public Note() {
  }

  public Note attestationAuthority(AttestationAuthority attestationAuthority) {
    this.attestationAuthority = attestationAuthority;
    return this;
  }

  /**
   * Get attestationAuthority
   * @return attestationAuthority
   */
  @javax.annotation.Nullable
  public AttestationAuthority getAttestationAuthority() {
    return attestationAuthority;
  }

  public void setAttestationAuthority(AttestationAuthority attestationAuthority) {
    this.attestationAuthority = attestationAuthority;
  }


  public Note baseImage(Basis baseImage) {
    this.baseImage = baseImage;
    return this;
  }

  /**
   * Get baseImage
   * @return baseImage
   */
  @javax.annotation.Nullable
  public Basis getBaseImage() {
    return baseImage;
  }

  public void setBaseImage(Basis baseImage) {
    this.baseImage = baseImage;
  }


  public Note buildType(BuildType buildType) {
    this.buildType = buildType;
    return this;
  }

  /**
   * Get buildType
   * @return buildType
   */
  @javax.annotation.Nullable
  public BuildType getBuildType() {
    return buildType;
  }

  public void setBuildType(BuildType buildType) {
    this.buildType = buildType;
  }


  public Note compliance(ComplianceNote compliance) {
    this.compliance = compliance;
    return this;
  }

  /**
   * Get compliance
   * @return compliance
   */
  @javax.annotation.Nullable
  public ComplianceNote getCompliance() {
    return compliance;
  }

  public void setCompliance(ComplianceNote compliance) {
    this.compliance = compliance;
  }


  public Note createTime(String createTime) {
    this.createTime = createTime;
    return this;
  }

  /**
   * Output only. The time this note was created. This field can be used as a filter in list requests.
   * @return createTime
   */
  @javax.annotation.Nullable
  public String getCreateTime() {
    return createTime;
  }

  public void setCreateTime(String createTime) {
    this.createTime = createTime;
  }


  public Note deployable(Deployable deployable) {
    this.deployable = deployable;
    return this;
  }

  /**
   * Get deployable
   * @return deployable
   */
  @javax.annotation.Nullable
  public Deployable getDeployable() {
    return deployable;
  }

  public void setDeployable(Deployable deployable) {
    this.deployable = deployable;
  }


  public Note discovery(Discovery discovery) {
    this.discovery = discovery;
    return this;
  }

  /**
   * Get discovery
   * @return discovery
   */
  @javax.annotation.Nullable
  public Discovery getDiscovery() {
    return discovery;
  }

  public void setDiscovery(Discovery discovery) {
    this.discovery = discovery;
  }


  public Note dsseAttestation(DSSEAttestationNote dsseAttestation) {
    this.dsseAttestation = dsseAttestation;
    return this;
  }

  /**
   * Get dsseAttestation
   * @return dsseAttestation
   */
  @javax.annotation.Nullable
  public DSSEAttestationNote getDsseAttestation() {
    return dsseAttestation;
  }

  public void setDsseAttestation(DSSEAttestationNote dsseAttestation) {
    this.dsseAttestation = dsseAttestation;
  }


  public Note expirationTime(String expirationTime) {
    this.expirationTime = expirationTime;
    return this;
  }

  /**
   * Time of expiration for this note, null if note does not expire.
   * @return expirationTime
   */
  @javax.annotation.Nullable
  public String getExpirationTime() {
    return expirationTime;
  }

  public void setExpirationTime(String expirationTime) {
    this.expirationTime = expirationTime;
  }


  public Note kind(KindEnum kind) {
    this.kind = kind;
    return this;
  }

  /**
   * Output only. This explicitly denotes which kind of note is specified. This field can be used as a filter in list requests.
   * @return kind
   */
  @javax.annotation.Nullable
  public KindEnum getKind() {
    return kind;
  }

  public void setKind(KindEnum kind) {
    this.kind = kind;
  }


  public Note longDescription(String longDescription) {
    this.longDescription = longDescription;
    return this;
  }

  /**
   * A detailed description of this &#x60;Note&#x60;.
   * @return longDescription
   */
  @javax.annotation.Nullable
  public String getLongDescription() {
    return longDescription;
  }

  public void setLongDescription(String longDescription) {
    this.longDescription = longDescription;
  }


  public Note name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the note in the form \&quot;projects/{provider_project_id}/notes/{NOTE_ID}\&quot;
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Note _package(ModelPackage _package) {
    this._package = _package;
    return this;
  }

  /**
   * Get _package
   * @return _package
   */
  @javax.annotation.Nullable
  public ModelPackage getPackage() {
    return _package;
  }

  public void setPackage(ModelPackage _package) {
    this._package = _package;
  }


  public Note relatedUrl(List<RelatedUrl> relatedUrl) {
    this.relatedUrl = relatedUrl;
    return this;
  }

  public Note addRelatedUrlItem(RelatedUrl relatedUrlItem) {
    if (this.relatedUrl == null) {
      this.relatedUrl = new ArrayList<>();
    }
    this.relatedUrl.add(relatedUrlItem);
    return this;
  }

  /**
   * URLs associated with this note
   * @return relatedUrl
   */
  @javax.annotation.Nullable
  public List<RelatedUrl> getRelatedUrl() {
    return relatedUrl;
  }

  public void setRelatedUrl(List<RelatedUrl> relatedUrl) {
    this.relatedUrl = relatedUrl;
  }


  public Note sbom(DocumentNote sbom) {
    this.sbom = sbom;
    return this;
  }

  /**
   * Get sbom
   * @return sbom
   */
  @javax.annotation.Nullable
  public DocumentNote getSbom() {
    return sbom;
  }

  public void setSbom(DocumentNote sbom) {
    this.sbom = sbom;
  }


  public Note sbomReference(SBOMReferenceNote sbomReference) {
    this.sbomReference = sbomReference;
    return this;
  }

  /**
   * Get sbomReference
   * @return sbomReference
   */
  @javax.annotation.Nullable
  public SBOMReferenceNote getSbomReference() {
    return sbomReference;
  }

  public void setSbomReference(SBOMReferenceNote sbomReference) {
    this.sbomReference = sbomReference;
  }


  public Note shortDescription(String shortDescription) {
    this.shortDescription = shortDescription;
    return this;
  }

  /**
   * A one sentence description of this &#x60;Note&#x60;.
   * @return shortDescription
   */
  @javax.annotation.Nullable
  public String getShortDescription() {
    return shortDescription;
  }

  public void setShortDescription(String shortDescription) {
    this.shortDescription = shortDescription;
  }


  public Note spdxFile(FileNote spdxFile) {
    this.spdxFile = spdxFile;
    return this;
  }

  /**
   * Get spdxFile
   * @return spdxFile
   */
  @javax.annotation.Nullable
  public FileNote getSpdxFile() {
    return spdxFile;
  }

  public void setSpdxFile(FileNote spdxFile) {
    this.spdxFile = spdxFile;
  }


  public Note spdxPackage(PackageInfoNote spdxPackage) {
    this.spdxPackage = spdxPackage;
    return this;
  }

  /**
   * Get spdxPackage
   * @return spdxPackage
   */
  @javax.annotation.Nullable
  public PackageInfoNote getSpdxPackage() {
    return spdxPackage;
  }

  public void setSpdxPackage(PackageInfoNote spdxPackage) {
    this.spdxPackage = spdxPackage;
  }


  public Note spdxRelationship(RelationshipNote spdxRelationship) {
    this.spdxRelationship = spdxRelationship;
    return this;
  }

  /**
   * Get spdxRelationship
   * @return spdxRelationship
   */
  @javax.annotation.Nullable
  public RelationshipNote getSpdxRelationship() {
    return spdxRelationship;
  }

  public void setSpdxRelationship(RelationshipNote spdxRelationship) {
    this.spdxRelationship = spdxRelationship;
  }


  public Note updateTime(String updateTime) {
    this.updateTime = updateTime;
    return this;
  }

  /**
   * Output only. The time this note was last updated. This field can be used as a filter in list requests.
   * @return updateTime
   */
  @javax.annotation.Nullable
  public String getUpdateTime() {
    return updateTime;
  }

  public void setUpdateTime(String updateTime) {
    this.updateTime = updateTime;
  }


  public Note upgrade(UpgradeNote upgrade) {
    this.upgrade = upgrade;
    return this;
  }

  /**
   * Get upgrade
   * @return upgrade
   */
  @javax.annotation.Nullable
  public UpgradeNote getUpgrade() {
    return upgrade;
  }

  public void setUpgrade(UpgradeNote upgrade) {
    this.upgrade = upgrade;
  }


  public Note vulnerabilityAssessment(VulnerabilityAssessmentNote vulnerabilityAssessment) {
    this.vulnerabilityAssessment = vulnerabilityAssessment;
    return this;
  }

  /**
   * Get vulnerabilityAssessment
   * @return vulnerabilityAssessment
   */
  @javax.annotation.Nullable
  public VulnerabilityAssessmentNote getVulnerabilityAssessment() {
    return vulnerabilityAssessment;
  }

  public void setVulnerabilityAssessment(VulnerabilityAssessmentNote vulnerabilityAssessment) {
    this.vulnerabilityAssessment = vulnerabilityAssessment;
  }


  public Note vulnerabilityType(VulnerabilityType vulnerabilityType) {
    this.vulnerabilityType = vulnerabilityType;
    return this;
  }

  /**
   * Get vulnerabilityType
   * @return vulnerabilityType
   */
  @javax.annotation.Nullable
  public VulnerabilityType getVulnerabilityType() {
    return vulnerabilityType;
  }

  public void setVulnerabilityType(VulnerabilityType vulnerabilityType) {
    this.vulnerabilityType = vulnerabilityType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Note note = (Note) o;
    return Objects.equals(this.attestationAuthority, note.attestationAuthority) &&
        Objects.equals(this.baseImage, note.baseImage) &&
        Objects.equals(this.buildType, note.buildType) &&
        Objects.equals(this.compliance, note.compliance) &&
        Objects.equals(this.createTime, note.createTime) &&
        Objects.equals(this.deployable, note.deployable) &&
        Objects.equals(this.discovery, note.discovery) &&
        Objects.equals(this.dsseAttestation, note.dsseAttestation) &&
        Objects.equals(this.expirationTime, note.expirationTime) &&
        Objects.equals(this.kind, note.kind) &&
        Objects.equals(this.longDescription, note.longDescription) &&
        Objects.equals(this.name, note.name) &&
        Objects.equals(this._package, note._package) &&
        Objects.equals(this.relatedUrl, note.relatedUrl) &&
        Objects.equals(this.sbom, note.sbom) &&
        Objects.equals(this.sbomReference, note.sbomReference) &&
        Objects.equals(this.shortDescription, note.shortDescription) &&
        Objects.equals(this.spdxFile, note.spdxFile) &&
        Objects.equals(this.spdxPackage, note.spdxPackage) &&
        Objects.equals(this.spdxRelationship, note.spdxRelationship) &&
        Objects.equals(this.updateTime, note.updateTime) &&
        Objects.equals(this.upgrade, note.upgrade) &&
        Objects.equals(this.vulnerabilityAssessment, note.vulnerabilityAssessment) &&
        Objects.equals(this.vulnerabilityType, note.vulnerabilityType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(attestationAuthority, baseImage, buildType, compliance, createTime, deployable, discovery, dsseAttestation, expirationTime, kind, longDescription, name, _package, relatedUrl, sbom, sbomReference, shortDescription, spdxFile, spdxPackage, spdxRelationship, updateTime, upgrade, vulnerabilityAssessment, vulnerabilityType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Note {\n");
    sb.append("    attestationAuthority: ").append(toIndentedString(attestationAuthority)).append("\n");
    sb.append("    baseImage: ").append(toIndentedString(baseImage)).append("\n");
    sb.append("    buildType: ").append(toIndentedString(buildType)).append("\n");
    sb.append("    compliance: ").append(toIndentedString(compliance)).append("\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    deployable: ").append(toIndentedString(deployable)).append("\n");
    sb.append("    discovery: ").append(toIndentedString(discovery)).append("\n");
    sb.append("    dsseAttestation: ").append(toIndentedString(dsseAttestation)).append("\n");
    sb.append("    expirationTime: ").append(toIndentedString(expirationTime)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    longDescription: ").append(toIndentedString(longDescription)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    _package: ").append(toIndentedString(_package)).append("\n");
    sb.append("    relatedUrl: ").append(toIndentedString(relatedUrl)).append("\n");
    sb.append("    sbom: ").append(toIndentedString(sbom)).append("\n");
    sb.append("    sbomReference: ").append(toIndentedString(sbomReference)).append("\n");
    sb.append("    shortDescription: ").append(toIndentedString(shortDescription)).append("\n");
    sb.append("    spdxFile: ").append(toIndentedString(spdxFile)).append("\n");
    sb.append("    spdxPackage: ").append(toIndentedString(spdxPackage)).append("\n");
    sb.append("    spdxRelationship: ").append(toIndentedString(spdxRelationship)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("    upgrade: ").append(toIndentedString(upgrade)).append("\n");
    sb.append("    vulnerabilityAssessment: ").append(toIndentedString(vulnerabilityAssessment)).append("\n");
    sb.append("    vulnerabilityType: ").append(toIndentedString(vulnerabilityType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("attestationAuthority");
    openapiFields.add("baseImage");
    openapiFields.add("buildType");
    openapiFields.add("compliance");
    openapiFields.add("createTime");
    openapiFields.add("deployable");
    openapiFields.add("discovery");
    openapiFields.add("dsseAttestation");
    openapiFields.add("expirationTime");
    openapiFields.add("kind");
    openapiFields.add("longDescription");
    openapiFields.add("name");
    openapiFields.add("package");
    openapiFields.add("relatedUrl");
    openapiFields.add("sbom");
    openapiFields.add("sbomReference");
    openapiFields.add("shortDescription");
    openapiFields.add("spdxFile");
    openapiFields.add("spdxPackage");
    openapiFields.add("spdxRelationship");
    openapiFields.add("updateTime");
    openapiFields.add("upgrade");
    openapiFields.add("vulnerabilityAssessment");
    openapiFields.add("vulnerabilityType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Note
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Note.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Note is not found in the empty JSON string", Note.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Note.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Note` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `attestationAuthority`
      if (jsonObj.get("attestationAuthority") != null && !jsonObj.get("attestationAuthority").isJsonNull()) {
        AttestationAuthority.validateJsonElement(jsonObj.get("attestationAuthority"));
      }
      // validate the optional field `baseImage`
      if (jsonObj.get("baseImage") != null && !jsonObj.get("baseImage").isJsonNull()) {
        Basis.validateJsonElement(jsonObj.get("baseImage"));
      }
      // validate the optional field `buildType`
      if (jsonObj.get("buildType") != null && !jsonObj.get("buildType").isJsonNull()) {
        BuildType.validateJsonElement(jsonObj.get("buildType"));
      }
      // validate the optional field `compliance`
      if (jsonObj.get("compliance") != null && !jsonObj.get("compliance").isJsonNull()) {
        ComplianceNote.validateJsonElement(jsonObj.get("compliance"));
      }
      if ((jsonObj.get("createTime") != null && !jsonObj.get("createTime").isJsonNull()) && !jsonObj.get("createTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createTime").toString()));
      }
      // validate the optional field `deployable`
      if (jsonObj.get("deployable") != null && !jsonObj.get("deployable").isJsonNull()) {
        Deployable.validateJsonElement(jsonObj.get("deployable"));
      }
      // validate the optional field `discovery`
      if (jsonObj.get("discovery") != null && !jsonObj.get("discovery").isJsonNull()) {
        Discovery.validateJsonElement(jsonObj.get("discovery"));
      }
      // validate the optional field `dsseAttestation`
      if (jsonObj.get("dsseAttestation") != null && !jsonObj.get("dsseAttestation").isJsonNull()) {
        DSSEAttestationNote.validateJsonElement(jsonObj.get("dsseAttestation"));
      }
      if ((jsonObj.get("expirationTime") != null && !jsonObj.get("expirationTime").isJsonNull()) && !jsonObj.get("expirationTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expirationTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expirationTime").toString()));
      }
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      // validate the optional field `kind`
      if (jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) {
        KindEnum.validateJsonElement(jsonObj.get("kind"));
      }
      if ((jsonObj.get("longDescription") != null && !jsonObj.get("longDescription").isJsonNull()) && !jsonObj.get("longDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `longDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("longDescription").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `package`
      if (jsonObj.get("package") != null && !jsonObj.get("package").isJsonNull()) {
        ModelPackage.validateJsonElement(jsonObj.get("package"));
      }
      if (jsonObj.get("relatedUrl") != null && !jsonObj.get("relatedUrl").isJsonNull()) {
        JsonArray jsonArrayrelatedUrl = jsonObj.getAsJsonArray("relatedUrl");
        if (jsonArrayrelatedUrl != null) {
          // ensure the json data is an array
          if (!jsonObj.get("relatedUrl").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `relatedUrl` to be an array in the JSON string but got `%s`", jsonObj.get("relatedUrl").toString()));
          }

          // validate the optional field `relatedUrl` (array)
          for (int i = 0; i < jsonArrayrelatedUrl.size(); i++) {
            RelatedUrl.validateJsonElement(jsonArrayrelatedUrl.get(i));
          };
        }
      }
      // validate the optional field `sbom`
      if (jsonObj.get("sbom") != null && !jsonObj.get("sbom").isJsonNull()) {
        DocumentNote.validateJsonElement(jsonObj.get("sbom"));
      }
      // validate the optional field `sbomReference`
      if (jsonObj.get("sbomReference") != null && !jsonObj.get("sbomReference").isJsonNull()) {
        SBOMReferenceNote.validateJsonElement(jsonObj.get("sbomReference"));
      }
      if ((jsonObj.get("shortDescription") != null && !jsonObj.get("shortDescription").isJsonNull()) && !jsonObj.get("shortDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shortDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shortDescription").toString()));
      }
      // validate the optional field `spdxFile`
      if (jsonObj.get("spdxFile") != null && !jsonObj.get("spdxFile").isJsonNull()) {
        FileNote.validateJsonElement(jsonObj.get("spdxFile"));
      }
      // validate the optional field `spdxPackage`
      if (jsonObj.get("spdxPackage") != null && !jsonObj.get("spdxPackage").isJsonNull()) {
        PackageInfoNote.validateJsonElement(jsonObj.get("spdxPackage"));
      }
      // validate the optional field `spdxRelationship`
      if (jsonObj.get("spdxRelationship") != null && !jsonObj.get("spdxRelationship").isJsonNull()) {
        RelationshipNote.validateJsonElement(jsonObj.get("spdxRelationship"));
      }
      if ((jsonObj.get("updateTime") != null && !jsonObj.get("updateTime").isJsonNull()) && !jsonObj.get("updateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updateTime").toString()));
      }
      // validate the optional field `upgrade`
      if (jsonObj.get("upgrade") != null && !jsonObj.get("upgrade").isJsonNull()) {
        UpgradeNote.validateJsonElement(jsonObj.get("upgrade"));
      }
      // validate the optional field `vulnerabilityAssessment`
      if (jsonObj.get("vulnerabilityAssessment") != null && !jsonObj.get("vulnerabilityAssessment").isJsonNull()) {
        VulnerabilityAssessmentNote.validateJsonElement(jsonObj.get("vulnerabilityAssessment"));
      }
      // validate the optional field `vulnerabilityType`
      if (jsonObj.get("vulnerabilityType") != null && !jsonObj.get("vulnerabilityType").isJsonNull()) {
        VulnerabilityType.validateJsonElement(jsonObj.get("vulnerabilityType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Note.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Note' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Note> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Note.class));

       return (TypeAdapter<T>) new TypeAdapter<Note>() {
           @Override
           public void write(JsonWriter out, Note value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Note read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Note given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Note
   * @throws IOException if the JSON string is invalid with respect to Note
   */
  public static Note fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Note.class);
  }

  /**
   * Convert an instance of Note to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

