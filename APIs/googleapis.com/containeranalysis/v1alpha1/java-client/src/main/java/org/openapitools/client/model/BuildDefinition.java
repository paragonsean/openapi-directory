/*
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1alpha1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.ResourceDescriptor;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * BuildDefinition
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:38:46.438210-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BuildDefinition {
  public static final String SERIALIZED_NAME_BUILD_TYPE = "buildType";
  @SerializedName(SERIALIZED_NAME_BUILD_TYPE)
  private String buildType;

  public static final String SERIALIZED_NAME_EXTERNAL_PARAMETERS = "externalParameters";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_PARAMETERS)
  private Map<String, Object> externalParameters = new HashMap<>();

  public static final String SERIALIZED_NAME_INTERNAL_PARAMETERS = "internalParameters";
  @SerializedName(SERIALIZED_NAME_INTERNAL_PARAMETERS)
  private Map<String, Object> internalParameters = new HashMap<>();

  public static final String SERIALIZED_NAME_RESOLVED_DEPENDENCIES = "resolvedDependencies";
  @SerializedName(SERIALIZED_NAME_RESOLVED_DEPENDENCIES)
  private List<ResourceDescriptor> resolvedDependencies = new ArrayList<>();

  public BuildDefinition() {
  }

  public BuildDefinition buildType(String buildType) {
    this.buildType = buildType;
    return this;
  }

  /**
   * Get buildType
   * @return buildType
   */
  @javax.annotation.Nullable
  public String getBuildType() {
    return buildType;
  }

  public void setBuildType(String buildType) {
    this.buildType = buildType;
  }


  public BuildDefinition externalParameters(Map<String, Object> externalParameters) {
    this.externalParameters = externalParameters;
    return this;
  }

  public BuildDefinition putExternalParametersItem(String key, Object externalParametersItem) {
    if (this.externalParameters == null) {
      this.externalParameters = new HashMap<>();
    }
    this.externalParameters.put(key, externalParametersItem);
    return this;
  }

  /**
   * Get externalParameters
   * @return externalParameters
   */
  @javax.annotation.Nullable
  public Map<String, Object> getExternalParameters() {
    return externalParameters;
  }

  public void setExternalParameters(Map<String, Object> externalParameters) {
    this.externalParameters = externalParameters;
  }


  public BuildDefinition internalParameters(Map<String, Object> internalParameters) {
    this.internalParameters = internalParameters;
    return this;
  }

  public BuildDefinition putInternalParametersItem(String key, Object internalParametersItem) {
    if (this.internalParameters == null) {
      this.internalParameters = new HashMap<>();
    }
    this.internalParameters.put(key, internalParametersItem);
    return this;
  }

  /**
   * Get internalParameters
   * @return internalParameters
   */
  @javax.annotation.Nullable
  public Map<String, Object> getInternalParameters() {
    return internalParameters;
  }

  public void setInternalParameters(Map<String, Object> internalParameters) {
    this.internalParameters = internalParameters;
  }


  public BuildDefinition resolvedDependencies(List<ResourceDescriptor> resolvedDependencies) {
    this.resolvedDependencies = resolvedDependencies;
    return this;
  }

  public BuildDefinition addResolvedDependenciesItem(ResourceDescriptor resolvedDependenciesItem) {
    if (this.resolvedDependencies == null) {
      this.resolvedDependencies = new ArrayList<>();
    }
    this.resolvedDependencies.add(resolvedDependenciesItem);
    return this;
  }

  /**
   * Get resolvedDependencies
   * @return resolvedDependencies
   */
  @javax.annotation.Nullable
  public List<ResourceDescriptor> getResolvedDependencies() {
    return resolvedDependencies;
  }

  public void setResolvedDependencies(List<ResourceDescriptor> resolvedDependencies) {
    this.resolvedDependencies = resolvedDependencies;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BuildDefinition buildDefinition = (BuildDefinition) o;
    return Objects.equals(this.buildType, buildDefinition.buildType) &&
        Objects.equals(this.externalParameters, buildDefinition.externalParameters) &&
        Objects.equals(this.internalParameters, buildDefinition.internalParameters) &&
        Objects.equals(this.resolvedDependencies, buildDefinition.resolvedDependencies);
  }

  @Override
  public int hashCode() {
    return Objects.hash(buildType, externalParameters, internalParameters, resolvedDependencies);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BuildDefinition {\n");
    sb.append("    buildType: ").append(toIndentedString(buildType)).append("\n");
    sb.append("    externalParameters: ").append(toIndentedString(externalParameters)).append("\n");
    sb.append("    internalParameters: ").append(toIndentedString(internalParameters)).append("\n");
    sb.append("    resolvedDependencies: ").append(toIndentedString(resolvedDependencies)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("buildType");
    openapiFields.add("externalParameters");
    openapiFields.add("internalParameters");
    openapiFields.add("resolvedDependencies");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BuildDefinition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BuildDefinition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BuildDefinition is not found in the empty JSON string", BuildDefinition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BuildDefinition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BuildDefinition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("buildType") != null && !jsonObj.get("buildType").isJsonNull()) && !jsonObj.get("buildType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `buildType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("buildType").toString()));
      }
      if (jsonObj.get("resolvedDependencies") != null && !jsonObj.get("resolvedDependencies").isJsonNull()) {
        JsonArray jsonArrayresolvedDependencies = jsonObj.getAsJsonArray("resolvedDependencies");
        if (jsonArrayresolvedDependencies != null) {
          // ensure the json data is an array
          if (!jsonObj.get("resolvedDependencies").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `resolvedDependencies` to be an array in the JSON string but got `%s`", jsonObj.get("resolvedDependencies").toString()));
          }

          // validate the optional field `resolvedDependencies` (array)
          for (int i = 0; i < jsonArrayresolvedDependencies.size(); i++) {
            ResourceDescriptor.validateJsonElement(jsonArrayresolvedDependencies.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BuildDefinition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BuildDefinition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BuildDefinition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BuildDefinition.class));

       return (TypeAdapter<T>) new TypeAdapter<BuildDefinition>() {
           @Override
           public void write(JsonWriter out, BuildDefinition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BuildDefinition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BuildDefinition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BuildDefinition
   * @throws IOException if the JSON string is invalid with respect to BuildDefinition
   */
  public static BuildDefinition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BuildDefinition.class);
  }

  /**
   * Convert an instance of BuildDefinition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

