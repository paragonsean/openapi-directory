/*
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1alpha1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContext;
import org.openapitools.client.model.GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContext;
import org.openapitools.client.model.GoogleDevtoolsContaineranalysisV1alpha1GitSourceContext;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A SourceContext is a reference to a tree of files. A SourceContext together with a path point to a unique revision of a single file or directory.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:38:46.438210-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleDevtoolsContaineranalysisV1alpha1SourceContext {
  public static final String SERIALIZED_NAME_CLOUD_REPO = "cloudRepo";
  @SerializedName(SERIALIZED_NAME_CLOUD_REPO)
  private GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContext cloudRepo;

  public static final String SERIALIZED_NAME_GERRIT = "gerrit";
  @SerializedName(SERIALIZED_NAME_GERRIT)
  private GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContext gerrit;

  public static final String SERIALIZED_NAME_GIT = "git";
  @SerializedName(SERIALIZED_NAME_GIT)
  private GoogleDevtoolsContaineranalysisV1alpha1GitSourceContext git;

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private Map<String, String> labels = new HashMap<>();

  public GoogleDevtoolsContaineranalysisV1alpha1SourceContext() {
  }

  public GoogleDevtoolsContaineranalysisV1alpha1SourceContext cloudRepo(GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContext cloudRepo) {
    this.cloudRepo = cloudRepo;
    return this;
  }

  /**
   * Get cloudRepo
   * @return cloudRepo
   */
  @javax.annotation.Nullable
  public GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContext getCloudRepo() {
    return cloudRepo;
  }

  public void setCloudRepo(GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContext cloudRepo) {
    this.cloudRepo = cloudRepo;
  }


  public GoogleDevtoolsContaineranalysisV1alpha1SourceContext gerrit(GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContext gerrit) {
    this.gerrit = gerrit;
    return this;
  }

  /**
   * Get gerrit
   * @return gerrit
   */
  @javax.annotation.Nullable
  public GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContext getGerrit() {
    return gerrit;
  }

  public void setGerrit(GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContext gerrit) {
    this.gerrit = gerrit;
  }


  public GoogleDevtoolsContaineranalysisV1alpha1SourceContext git(GoogleDevtoolsContaineranalysisV1alpha1GitSourceContext git) {
    this.git = git;
    return this;
  }

  /**
   * Get git
   * @return git
   */
  @javax.annotation.Nullable
  public GoogleDevtoolsContaineranalysisV1alpha1GitSourceContext getGit() {
    return git;
  }

  public void setGit(GoogleDevtoolsContaineranalysisV1alpha1GitSourceContext git) {
    this.git = git;
  }


  public GoogleDevtoolsContaineranalysisV1alpha1SourceContext labels(Map<String, String> labels) {
    this.labels = labels;
    return this;
  }

  public GoogleDevtoolsContaineranalysisV1alpha1SourceContext putLabelsItem(String key, String labelsItem) {
    if (this.labels == null) {
      this.labels = new HashMap<>();
    }
    this.labels.put(key, labelsItem);
    return this;
  }

  /**
   * Labels with user defined metadata.
   * @return labels
   */
  @javax.annotation.Nullable
  public Map<String, String> getLabels() {
    return labels;
  }

  public void setLabels(Map<String, String> labels) {
    this.labels = labels;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleDevtoolsContaineranalysisV1alpha1SourceContext googleDevtoolsContaineranalysisV1alpha1SourceContext = (GoogleDevtoolsContaineranalysisV1alpha1SourceContext) o;
    return Objects.equals(this.cloudRepo, googleDevtoolsContaineranalysisV1alpha1SourceContext.cloudRepo) &&
        Objects.equals(this.gerrit, googleDevtoolsContaineranalysisV1alpha1SourceContext.gerrit) &&
        Objects.equals(this.git, googleDevtoolsContaineranalysisV1alpha1SourceContext.git) &&
        Objects.equals(this.labels, googleDevtoolsContaineranalysisV1alpha1SourceContext.labels);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cloudRepo, gerrit, git, labels);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleDevtoolsContaineranalysisV1alpha1SourceContext {\n");
    sb.append("    cloudRepo: ").append(toIndentedString(cloudRepo)).append("\n");
    sb.append("    gerrit: ").append(toIndentedString(gerrit)).append("\n");
    sb.append("    git: ").append(toIndentedString(git)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cloudRepo");
    openapiFields.add("gerrit");
    openapiFields.add("git");
    openapiFields.add("labels");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleDevtoolsContaineranalysisV1alpha1SourceContext
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleDevtoolsContaineranalysisV1alpha1SourceContext.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleDevtoolsContaineranalysisV1alpha1SourceContext is not found in the empty JSON string", GoogleDevtoolsContaineranalysisV1alpha1SourceContext.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleDevtoolsContaineranalysisV1alpha1SourceContext.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleDevtoolsContaineranalysisV1alpha1SourceContext` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `cloudRepo`
      if (jsonObj.get("cloudRepo") != null && !jsonObj.get("cloudRepo").isJsonNull()) {
        GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContext.validateJsonElement(jsonObj.get("cloudRepo"));
      }
      // validate the optional field `gerrit`
      if (jsonObj.get("gerrit") != null && !jsonObj.get("gerrit").isJsonNull()) {
        GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContext.validateJsonElement(jsonObj.get("gerrit"));
      }
      // validate the optional field `git`
      if (jsonObj.get("git") != null && !jsonObj.get("git").isJsonNull()) {
        GoogleDevtoolsContaineranalysisV1alpha1GitSourceContext.validateJsonElement(jsonObj.get("git"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleDevtoolsContaineranalysisV1alpha1SourceContext.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleDevtoolsContaineranalysisV1alpha1SourceContext' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleDevtoolsContaineranalysisV1alpha1SourceContext> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleDevtoolsContaineranalysisV1alpha1SourceContext.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleDevtoolsContaineranalysisV1alpha1SourceContext>() {
           @Override
           public void write(JsonWriter out, GoogleDevtoolsContaineranalysisV1alpha1SourceContext value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleDevtoolsContaineranalysisV1alpha1SourceContext read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleDevtoolsContaineranalysisV1alpha1SourceContext given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleDevtoolsContaineranalysisV1alpha1SourceContext
   * @throws IOException if the JSON string is invalid with respect to GoogleDevtoolsContaineranalysisV1alpha1SourceContext
   */
  public static GoogleDevtoolsContaineranalysisV1alpha1SourceContext fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleDevtoolsContaineranalysisV1alpha1SourceContext.class);
  }

  /**
   * Convert an instance of GoogleDevtoolsContaineranalysisV1alpha1SourceContext to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

