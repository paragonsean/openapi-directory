/*
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1alpha1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CVSS;
import org.openapitools.client.model.Detail;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * VulnerabilityType provides metadata about a security vulnerability.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:38:46.438210-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class VulnerabilityType {
  public static final String SERIALIZED_NAME_CVSS_SCORE = "cvssScore";
  @SerializedName(SERIALIZED_NAME_CVSS_SCORE)
  private Float cvssScore;

  public static final String SERIALIZED_NAME_CVSS_V2 = "cvssV2";
  @SerializedName(SERIALIZED_NAME_CVSS_V2)
  private CVSS cvssV2;

  /**
   * CVSS version used to populate cvss_score and severity.
   */
  @JsonAdapter(CvssVersionEnum.Adapter.class)
  public enum CvssVersionEnum {
    UNSPECIFIED("CVSS_VERSION_UNSPECIFIED"),
    
    _2("CVSS_VERSION_2"),
    
    _3("CVSS_VERSION_3");

    private String value;

    CvssVersionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CvssVersionEnum fromValue(String value) {
      for (CvssVersionEnum b : CvssVersionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CvssVersionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CvssVersionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CvssVersionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CvssVersionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CvssVersionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CVSS_VERSION = "cvssVersion";
  @SerializedName(SERIALIZED_NAME_CVSS_VERSION)
  private CvssVersionEnum cvssVersion;

  public static final String SERIALIZED_NAME_CWE = "cwe";
  @SerializedName(SERIALIZED_NAME_CWE)
  private List<String> cwe = new ArrayList<>();

  public static final String SERIALIZED_NAME_DETAILS = "details";
  @SerializedName(SERIALIZED_NAME_DETAILS)
  private List<Detail> details = new ArrayList<>();

  /**
   * Note provider assigned impact of the vulnerability
   */
  @JsonAdapter(SeverityEnum.Adapter.class)
  public enum SeverityEnum {
    SEVERITY_UNSPECIFIED("SEVERITY_UNSPECIFIED"),
    
    MINIMAL("MINIMAL"),
    
    LOW("LOW"),
    
    MEDIUM("MEDIUM"),
    
    HIGH("HIGH"),
    
    CRITICAL("CRITICAL");

    private String value;

    SeverityEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SeverityEnum fromValue(String value) {
      for (SeverityEnum b : SeverityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SeverityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SeverityEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SeverityEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SeverityEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SeverityEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SEVERITY = "severity";
  @SerializedName(SERIALIZED_NAME_SEVERITY)
  private SeverityEnum severity;

  public VulnerabilityType() {
  }

  public VulnerabilityType cvssScore(Float cvssScore) {
    this.cvssScore = cvssScore;
    return this;
  }

  /**
   * The CVSS score for this Vulnerability.
   * @return cvssScore
   */
  @javax.annotation.Nullable
  public Float getCvssScore() {
    return cvssScore;
  }

  public void setCvssScore(Float cvssScore) {
    this.cvssScore = cvssScore;
  }


  public VulnerabilityType cvssV2(CVSS cvssV2) {
    this.cvssV2 = cvssV2;
    return this;
  }

  /**
   * Get cvssV2
   * @return cvssV2
   */
  @javax.annotation.Nullable
  public CVSS getCvssV2() {
    return cvssV2;
  }

  public void setCvssV2(CVSS cvssV2) {
    this.cvssV2 = cvssV2;
  }


  public VulnerabilityType cvssVersion(CvssVersionEnum cvssVersion) {
    this.cvssVersion = cvssVersion;
    return this;
  }

  /**
   * CVSS version used to populate cvss_score and severity.
   * @return cvssVersion
   */
  @javax.annotation.Nullable
  public CvssVersionEnum getCvssVersion() {
    return cvssVersion;
  }

  public void setCvssVersion(CvssVersionEnum cvssVersion) {
    this.cvssVersion = cvssVersion;
  }


  public VulnerabilityType cwe(List<String> cwe) {
    this.cwe = cwe;
    return this;
  }

  public VulnerabilityType addCweItem(String cweItem) {
    if (this.cwe == null) {
      this.cwe = new ArrayList<>();
    }
    this.cwe.add(cweItem);
    return this;
  }

  /**
   * A list of CWE for this vulnerability. For details, see: https://cwe.mitre.org/index.html
   * @return cwe
   */
  @javax.annotation.Nullable
  public List<String> getCwe() {
    return cwe;
  }

  public void setCwe(List<String> cwe) {
    this.cwe = cwe;
  }


  public VulnerabilityType details(List<Detail> details) {
    this.details = details;
    return this;
  }

  public VulnerabilityType addDetailsItem(Detail detailsItem) {
    if (this.details == null) {
      this.details = new ArrayList<>();
    }
    this.details.add(detailsItem);
    return this;
  }

  /**
   * All information about the package to specifically identify this vulnerability. One entry per (version range and cpe_uri) the package vulnerability has manifested in.
   * @return details
   */
  @javax.annotation.Nullable
  public List<Detail> getDetails() {
    return details;
  }

  public void setDetails(List<Detail> details) {
    this.details = details;
  }


  public VulnerabilityType severity(SeverityEnum severity) {
    this.severity = severity;
    return this;
  }

  /**
   * Note provider assigned impact of the vulnerability
   * @return severity
   */
  @javax.annotation.Nullable
  public SeverityEnum getSeverity() {
    return severity;
  }

  public void setSeverity(SeverityEnum severity) {
    this.severity = severity;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VulnerabilityType vulnerabilityType = (VulnerabilityType) o;
    return Objects.equals(this.cvssScore, vulnerabilityType.cvssScore) &&
        Objects.equals(this.cvssV2, vulnerabilityType.cvssV2) &&
        Objects.equals(this.cvssVersion, vulnerabilityType.cvssVersion) &&
        Objects.equals(this.cwe, vulnerabilityType.cwe) &&
        Objects.equals(this.details, vulnerabilityType.details) &&
        Objects.equals(this.severity, vulnerabilityType.severity);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cvssScore, cvssV2, cvssVersion, cwe, details, severity);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VulnerabilityType {\n");
    sb.append("    cvssScore: ").append(toIndentedString(cvssScore)).append("\n");
    sb.append("    cvssV2: ").append(toIndentedString(cvssV2)).append("\n");
    sb.append("    cvssVersion: ").append(toIndentedString(cvssVersion)).append("\n");
    sb.append("    cwe: ").append(toIndentedString(cwe)).append("\n");
    sb.append("    details: ").append(toIndentedString(details)).append("\n");
    sb.append("    severity: ").append(toIndentedString(severity)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cvssScore");
    openapiFields.add("cvssV2");
    openapiFields.add("cvssVersion");
    openapiFields.add("cwe");
    openapiFields.add("details");
    openapiFields.add("severity");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VulnerabilityType
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VulnerabilityType.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VulnerabilityType is not found in the empty JSON string", VulnerabilityType.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VulnerabilityType.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VulnerabilityType` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `cvssV2`
      if (jsonObj.get("cvssV2") != null && !jsonObj.get("cvssV2").isJsonNull()) {
        CVSS.validateJsonElement(jsonObj.get("cvssV2"));
      }
      if ((jsonObj.get("cvssVersion") != null && !jsonObj.get("cvssVersion").isJsonNull()) && !jsonObj.get("cvssVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cvssVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cvssVersion").toString()));
      }
      // validate the optional field `cvssVersion`
      if (jsonObj.get("cvssVersion") != null && !jsonObj.get("cvssVersion").isJsonNull()) {
        CvssVersionEnum.validateJsonElement(jsonObj.get("cvssVersion"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("cwe") != null && !jsonObj.get("cwe").isJsonNull() && !jsonObj.get("cwe").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `cwe` to be an array in the JSON string but got `%s`", jsonObj.get("cwe").toString()));
      }
      if (jsonObj.get("details") != null && !jsonObj.get("details").isJsonNull()) {
        JsonArray jsonArraydetails = jsonObj.getAsJsonArray("details");
        if (jsonArraydetails != null) {
          // ensure the json data is an array
          if (!jsonObj.get("details").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `details` to be an array in the JSON string but got `%s`", jsonObj.get("details").toString()));
          }

          // validate the optional field `details` (array)
          for (int i = 0; i < jsonArraydetails.size(); i++) {
            Detail.validateJsonElement(jsonArraydetails.get(i));
          };
        }
      }
      if ((jsonObj.get("severity") != null && !jsonObj.get("severity").isJsonNull()) && !jsonObj.get("severity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `severity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("severity").toString()));
      }
      // validate the optional field `severity`
      if (jsonObj.get("severity") != null && !jsonObj.get("severity").isJsonNull()) {
        SeverityEnum.validateJsonElement(jsonObj.get("severity"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VulnerabilityType.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VulnerabilityType' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VulnerabilityType> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VulnerabilityType.class));

       return (TypeAdapter<T>) new TypeAdapter<VulnerabilityType>() {
           @Override
           public void write(JsonWriter out, VulnerabilityType value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VulnerabilityType read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VulnerabilityType given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VulnerabilityType
   * @throws IOException if the JSON string is invalid with respect to VulnerabilityType
   */
  public static VulnerabilityType fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VulnerabilityType.class);
  }

  /**
   * Convert an instance of VulnerabilityType to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

