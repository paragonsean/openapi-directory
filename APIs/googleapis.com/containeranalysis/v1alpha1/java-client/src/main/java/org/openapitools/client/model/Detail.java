/*
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1alpha1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Version;
import org.openapitools.client.model.VulnerabilityLocation;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Identifies all occurrences of this vulnerability in the package for a specific distro/location For example: glibc in cpe:/o:debian:debian_linux:8 for versions 2.1 - 2.2
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:38:46.438210-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Detail {
  public static final String SERIALIZED_NAME_CPE_URI = "cpeUri";
  @SerializedName(SERIALIZED_NAME_CPE_URI)
  private String cpeUri;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_FIXED_LOCATION = "fixedLocation";
  @SerializedName(SERIALIZED_NAME_FIXED_LOCATION)
  private VulnerabilityLocation fixedLocation;

  public static final String SERIALIZED_NAME_IS_OBSOLETE = "isObsolete";
  @SerializedName(SERIALIZED_NAME_IS_OBSOLETE)
  private Boolean isObsolete;

  public static final String SERIALIZED_NAME_MAX_AFFECTED_VERSION = "maxAffectedVersion";
  @SerializedName(SERIALIZED_NAME_MAX_AFFECTED_VERSION)
  private Version maxAffectedVersion;

  public static final String SERIALIZED_NAME_MIN_AFFECTED_VERSION = "minAffectedVersion";
  @SerializedName(SERIALIZED_NAME_MIN_AFFECTED_VERSION)
  private Version minAffectedVersion;

  public static final String SERIALIZED_NAME_PACKAGE = "package";
  @SerializedName(SERIALIZED_NAME_PACKAGE)
  private String _package;

  public static final String SERIALIZED_NAME_PACKAGE_TYPE = "packageType";
  @SerializedName(SERIALIZED_NAME_PACKAGE_TYPE)
  private String packageType;

  public static final String SERIALIZED_NAME_SEVERITY_NAME = "severityName";
  @SerializedName(SERIALIZED_NAME_SEVERITY_NAME)
  private String severityName;

  public static final String SERIALIZED_NAME_SOURCE = "source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  private String source;

  public static final String SERIALIZED_NAME_VENDOR = "vendor";
  @SerializedName(SERIALIZED_NAME_VENDOR)
  private String vendor;

  public Detail() {
  }

  public Detail cpeUri(String cpeUri) {
    this.cpeUri = cpeUri;
    return this;
  }

  /**
   * The cpe_uri in [cpe format] (https://cpe.mitre.org/specification/) in which the vulnerability manifests. Examples include distro or storage location for vulnerable jar. This field can be used as a filter in list requests.
   * @return cpeUri
   */
  @javax.annotation.Nullable
  public String getCpeUri() {
    return cpeUri;
  }

  public void setCpeUri(String cpeUri) {
    this.cpeUri = cpeUri;
  }


  public Detail description(String description) {
    this.description = description;
    return this;
  }

  /**
   * A vendor-specific description of this note.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public Detail fixedLocation(VulnerabilityLocation fixedLocation) {
    this.fixedLocation = fixedLocation;
    return this;
  }

  /**
   * Get fixedLocation
   * @return fixedLocation
   */
  @javax.annotation.Nullable
  public VulnerabilityLocation getFixedLocation() {
    return fixedLocation;
  }

  public void setFixedLocation(VulnerabilityLocation fixedLocation) {
    this.fixedLocation = fixedLocation;
  }


  public Detail isObsolete(Boolean isObsolete) {
    this.isObsolete = isObsolete;
    return this;
  }

  /**
   * Whether this Detail is obsolete. Occurrences are expected not to point to obsolete details.
   * @return isObsolete
   */
  @javax.annotation.Nullable
  public Boolean getIsObsolete() {
    return isObsolete;
  }

  public void setIsObsolete(Boolean isObsolete) {
    this.isObsolete = isObsolete;
  }


  public Detail maxAffectedVersion(Version maxAffectedVersion) {
    this.maxAffectedVersion = maxAffectedVersion;
    return this;
  }

  /**
   * Get maxAffectedVersion
   * @return maxAffectedVersion
   */
  @javax.annotation.Nullable
  public Version getMaxAffectedVersion() {
    return maxAffectedVersion;
  }

  public void setMaxAffectedVersion(Version maxAffectedVersion) {
    this.maxAffectedVersion = maxAffectedVersion;
  }


  public Detail minAffectedVersion(Version minAffectedVersion) {
    this.minAffectedVersion = minAffectedVersion;
    return this;
  }

  /**
   * Get minAffectedVersion
   * @return minAffectedVersion
   */
  @javax.annotation.Nullable
  public Version getMinAffectedVersion() {
    return minAffectedVersion;
  }

  public void setMinAffectedVersion(Version minAffectedVersion) {
    this.minAffectedVersion = minAffectedVersion;
  }


  public Detail _package(String _package) {
    this._package = _package;
    return this;
  }

  /**
   * The name of the package where the vulnerability was found. This field can be used as a filter in list requests.
   * @return _package
   */
  @javax.annotation.Nullable
  public String getPackage() {
    return _package;
  }

  public void setPackage(String _package) {
    this._package = _package;
  }


  public Detail packageType(String packageType) {
    this.packageType = packageType;
    return this;
  }

  /**
   * The type of package; whether native or non native(ruby gems, node.js packages etc)
   * @return packageType
   */
  @javax.annotation.Nullable
  public String getPackageType() {
    return packageType;
  }

  public void setPackageType(String packageType) {
    this.packageType = packageType;
  }


  public Detail severityName(String severityName) {
    this.severityName = severityName;
    return this;
  }

  /**
   * The severity (eg: distro assigned severity) for this vulnerability.
   * @return severityName
   */
  @javax.annotation.Nullable
  public String getSeverityName() {
    return severityName;
  }

  public void setSeverityName(String severityName) {
    this.severityName = severityName;
  }


  public Detail source(String source) {
    this.source = source;
    return this;
  }

  /**
   * The source from which the information in this Detail was obtained.
   * @return source
   */
  @javax.annotation.Nullable
  public String getSource() {
    return source;
  }

  public void setSource(String source) {
    this.source = source;
  }


  public Detail vendor(String vendor) {
    this.vendor = vendor;
    return this;
  }

  /**
   * The vendor of the product. e.g. \&quot;google\&quot;
   * @return vendor
   */
  @javax.annotation.Nullable
  public String getVendor() {
    return vendor;
  }

  public void setVendor(String vendor) {
    this.vendor = vendor;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Detail detail = (Detail) o;
    return Objects.equals(this.cpeUri, detail.cpeUri) &&
        Objects.equals(this.description, detail.description) &&
        Objects.equals(this.fixedLocation, detail.fixedLocation) &&
        Objects.equals(this.isObsolete, detail.isObsolete) &&
        Objects.equals(this.maxAffectedVersion, detail.maxAffectedVersion) &&
        Objects.equals(this.minAffectedVersion, detail.minAffectedVersion) &&
        Objects.equals(this._package, detail._package) &&
        Objects.equals(this.packageType, detail.packageType) &&
        Objects.equals(this.severityName, detail.severityName) &&
        Objects.equals(this.source, detail.source) &&
        Objects.equals(this.vendor, detail.vendor);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cpeUri, description, fixedLocation, isObsolete, maxAffectedVersion, minAffectedVersion, _package, packageType, severityName, source, vendor);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Detail {\n");
    sb.append("    cpeUri: ").append(toIndentedString(cpeUri)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    fixedLocation: ").append(toIndentedString(fixedLocation)).append("\n");
    sb.append("    isObsolete: ").append(toIndentedString(isObsolete)).append("\n");
    sb.append("    maxAffectedVersion: ").append(toIndentedString(maxAffectedVersion)).append("\n");
    sb.append("    minAffectedVersion: ").append(toIndentedString(minAffectedVersion)).append("\n");
    sb.append("    _package: ").append(toIndentedString(_package)).append("\n");
    sb.append("    packageType: ").append(toIndentedString(packageType)).append("\n");
    sb.append("    severityName: ").append(toIndentedString(severityName)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    vendor: ").append(toIndentedString(vendor)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cpeUri");
    openapiFields.add("description");
    openapiFields.add("fixedLocation");
    openapiFields.add("isObsolete");
    openapiFields.add("maxAffectedVersion");
    openapiFields.add("minAffectedVersion");
    openapiFields.add("package");
    openapiFields.add("packageType");
    openapiFields.add("severityName");
    openapiFields.add("source");
    openapiFields.add("vendor");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Detail
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Detail.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Detail is not found in the empty JSON string", Detail.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Detail.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Detail` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("cpeUri") != null && !jsonObj.get("cpeUri").isJsonNull()) && !jsonObj.get("cpeUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cpeUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cpeUri").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // validate the optional field `fixedLocation`
      if (jsonObj.get("fixedLocation") != null && !jsonObj.get("fixedLocation").isJsonNull()) {
        VulnerabilityLocation.validateJsonElement(jsonObj.get("fixedLocation"));
      }
      // validate the optional field `maxAffectedVersion`
      if (jsonObj.get("maxAffectedVersion") != null && !jsonObj.get("maxAffectedVersion").isJsonNull()) {
        Version.validateJsonElement(jsonObj.get("maxAffectedVersion"));
      }
      // validate the optional field `minAffectedVersion`
      if (jsonObj.get("minAffectedVersion") != null && !jsonObj.get("minAffectedVersion").isJsonNull()) {
        Version.validateJsonElement(jsonObj.get("minAffectedVersion"));
      }
      if ((jsonObj.get("package") != null && !jsonObj.get("package").isJsonNull()) && !jsonObj.get("package").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `package` to be a primitive type in the JSON string but got `%s`", jsonObj.get("package").toString()));
      }
      if ((jsonObj.get("packageType") != null && !jsonObj.get("packageType").isJsonNull()) && !jsonObj.get("packageType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `packageType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("packageType").toString()));
      }
      if ((jsonObj.get("severityName") != null && !jsonObj.get("severityName").isJsonNull()) && !jsonObj.get("severityName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `severityName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("severityName").toString()));
      }
      if ((jsonObj.get("source") != null && !jsonObj.get("source").isJsonNull()) && !jsonObj.get("source").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source").toString()));
      }
      if ((jsonObj.get("vendor") != null && !jsonObj.get("vendor").isJsonNull()) && !jsonObj.get("vendor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vendor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vendor").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Detail.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Detail' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Detail> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Detail.class));

       return (TypeAdapter<T>) new TypeAdapter<Detail>() {
           @Override
           public void write(JsonWriter out, Detail value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Detail read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Detail given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Detail
   * @throws IOException if the JSON string is invalid with respect to Detail
   */
  public static Detail fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Detail.class);
  }

  /**
   * Convert an instance of Detail to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

