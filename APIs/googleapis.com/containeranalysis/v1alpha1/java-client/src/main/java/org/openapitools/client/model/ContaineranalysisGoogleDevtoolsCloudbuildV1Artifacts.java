/*
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1alpha1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsArtifactObjects;
import org.openapitools.client.model.ContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsMavenArtifact;
import org.openapitools.client.model.ContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsNpmPackage;
import org.openapitools.client.model.ContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsPythonPackage;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Artifacts produced by a build that should be uploaded upon successful completion of all build steps.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:38:46.438210-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ContaineranalysisGoogleDevtoolsCloudbuildV1Artifacts {
  public static final String SERIALIZED_NAME_IMAGES = "images";
  @SerializedName(SERIALIZED_NAME_IMAGES)
  private List<String> images = new ArrayList<>();

  public static final String SERIALIZED_NAME_MAVEN_ARTIFACTS = "mavenArtifacts";
  @SerializedName(SERIALIZED_NAME_MAVEN_ARTIFACTS)
  private List<ContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsMavenArtifact> mavenArtifacts = new ArrayList<>();

  public static final String SERIALIZED_NAME_NPM_PACKAGES = "npmPackages";
  @SerializedName(SERIALIZED_NAME_NPM_PACKAGES)
  private List<ContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsNpmPackage> npmPackages = new ArrayList<>();

  public static final String SERIALIZED_NAME_OBJECTS = "objects";
  @SerializedName(SERIALIZED_NAME_OBJECTS)
  private ContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsArtifactObjects objects;

  public static final String SERIALIZED_NAME_PYTHON_PACKAGES = "pythonPackages";
  @SerializedName(SERIALIZED_NAME_PYTHON_PACKAGES)
  private List<ContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsPythonPackage> pythonPackages = new ArrayList<>();

  public ContaineranalysisGoogleDevtoolsCloudbuildV1Artifacts() {
  }

  public ContaineranalysisGoogleDevtoolsCloudbuildV1Artifacts images(List<String> images) {
    this.images = images;
    return this;
  }

  public ContaineranalysisGoogleDevtoolsCloudbuildV1Artifacts addImagesItem(String imagesItem) {
    if (this.images == null) {
      this.images = new ArrayList<>();
    }
    this.images.add(imagesItem);
    return this;
  }

  /**
   * A list of images to be pushed upon the successful completion of all build steps. The images will be pushed using the builder service account&#39;s credentials. The digests of the pushed images will be stored in the Build resource&#39;s results field. If any of the images fail to be pushed, the build is marked FAILURE.
   * @return images
   */
  @javax.annotation.Nullable
  public List<String> getImages() {
    return images;
  }

  public void setImages(List<String> images) {
    this.images = images;
  }


  public ContaineranalysisGoogleDevtoolsCloudbuildV1Artifacts mavenArtifacts(List<ContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsMavenArtifact> mavenArtifacts) {
    this.mavenArtifacts = mavenArtifacts;
    return this;
  }

  public ContaineranalysisGoogleDevtoolsCloudbuildV1Artifacts addMavenArtifactsItem(ContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsMavenArtifact mavenArtifactsItem) {
    if (this.mavenArtifacts == null) {
      this.mavenArtifacts = new ArrayList<>();
    }
    this.mavenArtifacts.add(mavenArtifactsItem);
    return this;
  }

  /**
   * A list of Maven artifacts to be uploaded to Artifact Registry upon successful completion of all build steps. Artifacts in the workspace matching specified paths globs will be uploaded to the specified Artifact Registry repository using the builder service account&#39;s credentials. If any artifacts fail to be pushed, the build is marked FAILURE.
   * @return mavenArtifacts
   */
  @javax.annotation.Nullable
  public List<ContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsMavenArtifact> getMavenArtifacts() {
    return mavenArtifacts;
  }

  public void setMavenArtifacts(List<ContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsMavenArtifact> mavenArtifacts) {
    this.mavenArtifacts = mavenArtifacts;
  }


  public ContaineranalysisGoogleDevtoolsCloudbuildV1Artifacts npmPackages(List<ContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsNpmPackage> npmPackages) {
    this.npmPackages = npmPackages;
    return this;
  }

  public ContaineranalysisGoogleDevtoolsCloudbuildV1Artifacts addNpmPackagesItem(ContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsNpmPackage npmPackagesItem) {
    if (this.npmPackages == null) {
      this.npmPackages = new ArrayList<>();
    }
    this.npmPackages.add(npmPackagesItem);
    return this;
  }

  /**
   * A list of npm packages to be uploaded to Artifact Registry upon successful completion of all build steps. Npm packages in the specified paths will be uploaded to the specified Artifact Registry repository using the builder service account&#39;s credentials. If any packages fail to be pushed, the build is marked FAILURE.
   * @return npmPackages
   */
  @javax.annotation.Nullable
  public List<ContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsNpmPackage> getNpmPackages() {
    return npmPackages;
  }

  public void setNpmPackages(List<ContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsNpmPackage> npmPackages) {
    this.npmPackages = npmPackages;
  }


  public ContaineranalysisGoogleDevtoolsCloudbuildV1Artifacts objects(ContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsArtifactObjects objects) {
    this.objects = objects;
    return this;
  }

  /**
   * Get objects
   * @return objects
   */
  @javax.annotation.Nullable
  public ContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsArtifactObjects getObjects() {
    return objects;
  }

  public void setObjects(ContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsArtifactObjects objects) {
    this.objects = objects;
  }


  public ContaineranalysisGoogleDevtoolsCloudbuildV1Artifacts pythonPackages(List<ContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsPythonPackage> pythonPackages) {
    this.pythonPackages = pythonPackages;
    return this;
  }

  public ContaineranalysisGoogleDevtoolsCloudbuildV1Artifacts addPythonPackagesItem(ContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsPythonPackage pythonPackagesItem) {
    if (this.pythonPackages == null) {
      this.pythonPackages = new ArrayList<>();
    }
    this.pythonPackages.add(pythonPackagesItem);
    return this;
  }

  /**
   * A list of Python packages to be uploaded to Artifact Registry upon successful completion of all build steps. The build service account credentials will be used to perform the upload. If any objects fail to be pushed, the build is marked FAILURE.
   * @return pythonPackages
   */
  @javax.annotation.Nullable
  public List<ContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsPythonPackage> getPythonPackages() {
    return pythonPackages;
  }

  public void setPythonPackages(List<ContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsPythonPackage> pythonPackages) {
    this.pythonPackages = pythonPackages;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ContaineranalysisGoogleDevtoolsCloudbuildV1Artifacts containeranalysisGoogleDevtoolsCloudbuildV1Artifacts = (ContaineranalysisGoogleDevtoolsCloudbuildV1Artifacts) o;
    return Objects.equals(this.images, containeranalysisGoogleDevtoolsCloudbuildV1Artifacts.images) &&
        Objects.equals(this.mavenArtifacts, containeranalysisGoogleDevtoolsCloudbuildV1Artifacts.mavenArtifacts) &&
        Objects.equals(this.npmPackages, containeranalysisGoogleDevtoolsCloudbuildV1Artifacts.npmPackages) &&
        Objects.equals(this.objects, containeranalysisGoogleDevtoolsCloudbuildV1Artifacts.objects) &&
        Objects.equals(this.pythonPackages, containeranalysisGoogleDevtoolsCloudbuildV1Artifacts.pythonPackages);
  }

  @Override
  public int hashCode() {
    return Objects.hash(images, mavenArtifacts, npmPackages, objects, pythonPackages);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContaineranalysisGoogleDevtoolsCloudbuildV1Artifacts {\n");
    sb.append("    images: ").append(toIndentedString(images)).append("\n");
    sb.append("    mavenArtifacts: ").append(toIndentedString(mavenArtifacts)).append("\n");
    sb.append("    npmPackages: ").append(toIndentedString(npmPackages)).append("\n");
    sb.append("    objects: ").append(toIndentedString(objects)).append("\n");
    sb.append("    pythonPackages: ").append(toIndentedString(pythonPackages)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("images");
    openapiFields.add("mavenArtifacts");
    openapiFields.add("npmPackages");
    openapiFields.add("objects");
    openapiFields.add("pythonPackages");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ContaineranalysisGoogleDevtoolsCloudbuildV1Artifacts
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ContaineranalysisGoogleDevtoolsCloudbuildV1Artifacts.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ContaineranalysisGoogleDevtoolsCloudbuildV1Artifacts is not found in the empty JSON string", ContaineranalysisGoogleDevtoolsCloudbuildV1Artifacts.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ContaineranalysisGoogleDevtoolsCloudbuildV1Artifacts.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ContaineranalysisGoogleDevtoolsCloudbuildV1Artifacts` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("images") != null && !jsonObj.get("images").isJsonNull() && !jsonObj.get("images").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `images` to be an array in the JSON string but got `%s`", jsonObj.get("images").toString()));
      }
      if (jsonObj.get("mavenArtifacts") != null && !jsonObj.get("mavenArtifacts").isJsonNull()) {
        JsonArray jsonArraymavenArtifacts = jsonObj.getAsJsonArray("mavenArtifacts");
        if (jsonArraymavenArtifacts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("mavenArtifacts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `mavenArtifacts` to be an array in the JSON string but got `%s`", jsonObj.get("mavenArtifacts").toString()));
          }

          // validate the optional field `mavenArtifacts` (array)
          for (int i = 0; i < jsonArraymavenArtifacts.size(); i++) {
            ContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsMavenArtifact.validateJsonElement(jsonArraymavenArtifacts.get(i));
          };
        }
      }
      if (jsonObj.get("npmPackages") != null && !jsonObj.get("npmPackages").isJsonNull()) {
        JsonArray jsonArraynpmPackages = jsonObj.getAsJsonArray("npmPackages");
        if (jsonArraynpmPackages != null) {
          // ensure the json data is an array
          if (!jsonObj.get("npmPackages").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `npmPackages` to be an array in the JSON string but got `%s`", jsonObj.get("npmPackages").toString()));
          }

          // validate the optional field `npmPackages` (array)
          for (int i = 0; i < jsonArraynpmPackages.size(); i++) {
            ContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsNpmPackage.validateJsonElement(jsonArraynpmPackages.get(i));
          };
        }
      }
      // validate the optional field `objects`
      if (jsonObj.get("objects") != null && !jsonObj.get("objects").isJsonNull()) {
        ContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsArtifactObjects.validateJsonElement(jsonObj.get("objects"));
      }
      if (jsonObj.get("pythonPackages") != null && !jsonObj.get("pythonPackages").isJsonNull()) {
        JsonArray jsonArraypythonPackages = jsonObj.getAsJsonArray("pythonPackages");
        if (jsonArraypythonPackages != null) {
          // ensure the json data is an array
          if (!jsonObj.get("pythonPackages").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `pythonPackages` to be an array in the JSON string but got `%s`", jsonObj.get("pythonPackages").toString()));
          }

          // validate the optional field `pythonPackages` (array)
          for (int i = 0; i < jsonArraypythonPackages.size(); i++) {
            ContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsPythonPackage.validateJsonElement(jsonArraypythonPackages.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ContaineranalysisGoogleDevtoolsCloudbuildV1Artifacts.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ContaineranalysisGoogleDevtoolsCloudbuildV1Artifacts' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ContaineranalysisGoogleDevtoolsCloudbuildV1Artifacts> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ContaineranalysisGoogleDevtoolsCloudbuildV1Artifacts.class));

       return (TypeAdapter<T>) new TypeAdapter<ContaineranalysisGoogleDevtoolsCloudbuildV1Artifacts>() {
           @Override
           public void write(JsonWriter out, ContaineranalysisGoogleDevtoolsCloudbuildV1Artifacts value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ContaineranalysisGoogleDevtoolsCloudbuildV1Artifacts read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ContaineranalysisGoogleDevtoolsCloudbuildV1Artifacts given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ContaineranalysisGoogleDevtoolsCloudbuildV1Artifacts
   * @throws IOException if the JSON string is invalid with respect to ContaineranalysisGoogleDevtoolsCloudbuildV1Artifacts
   */
  public static ContaineranalysisGoogleDevtoolsCloudbuildV1Artifacts fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ContaineranalysisGoogleDevtoolsCloudbuildV1Artifacts.class);
  }

  /**
   * Convert an instance of ContaineranalysisGoogleDevtoolsCloudbuildV1Artifacts to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

