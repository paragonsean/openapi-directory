/*
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1alpha1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.NonCompliantFile;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An indication that the compliance checks in the associated ComplianceNote were not satisfied for particular resources or a specified reason.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:38:46.438210-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ComplianceOccurrence {
  public static final String SERIALIZED_NAME_NON_COMPLIANCE_REASON = "nonComplianceReason";
  @SerializedName(SERIALIZED_NAME_NON_COMPLIANCE_REASON)
  private String nonComplianceReason;

  public static final String SERIALIZED_NAME_NON_COMPLIANT_FILES = "nonCompliantFiles";
  @SerializedName(SERIALIZED_NAME_NON_COMPLIANT_FILES)
  private List<NonCompliantFile> nonCompliantFiles = new ArrayList<>();

  public ComplianceOccurrence() {
  }

  public ComplianceOccurrence nonComplianceReason(String nonComplianceReason) {
    this.nonComplianceReason = nonComplianceReason;
    return this;
  }

  /**
   * The reason for non compliance of these files.
   * @return nonComplianceReason
   */
  @javax.annotation.Nullable
  public String getNonComplianceReason() {
    return nonComplianceReason;
  }

  public void setNonComplianceReason(String nonComplianceReason) {
    this.nonComplianceReason = nonComplianceReason;
  }


  public ComplianceOccurrence nonCompliantFiles(List<NonCompliantFile> nonCompliantFiles) {
    this.nonCompliantFiles = nonCompliantFiles;
    return this;
  }

  public ComplianceOccurrence addNonCompliantFilesItem(NonCompliantFile nonCompliantFilesItem) {
    if (this.nonCompliantFiles == null) {
      this.nonCompliantFiles = new ArrayList<>();
    }
    this.nonCompliantFiles.add(nonCompliantFilesItem);
    return this;
  }

  /**
   * A list of files which are violating compliance checks.
   * @return nonCompliantFiles
   */
  @javax.annotation.Nullable
  public List<NonCompliantFile> getNonCompliantFiles() {
    return nonCompliantFiles;
  }

  public void setNonCompliantFiles(List<NonCompliantFile> nonCompliantFiles) {
    this.nonCompliantFiles = nonCompliantFiles;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ComplianceOccurrence complianceOccurrence = (ComplianceOccurrence) o;
    return Objects.equals(this.nonComplianceReason, complianceOccurrence.nonComplianceReason) &&
        Objects.equals(this.nonCompliantFiles, complianceOccurrence.nonCompliantFiles);
  }

  @Override
  public int hashCode() {
    return Objects.hash(nonComplianceReason, nonCompliantFiles);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ComplianceOccurrence {\n");
    sb.append("    nonComplianceReason: ").append(toIndentedString(nonComplianceReason)).append("\n");
    sb.append("    nonCompliantFiles: ").append(toIndentedString(nonCompliantFiles)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("nonComplianceReason");
    openapiFields.add("nonCompliantFiles");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ComplianceOccurrence
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ComplianceOccurrence.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ComplianceOccurrence is not found in the empty JSON string", ComplianceOccurrence.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ComplianceOccurrence.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ComplianceOccurrence` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("nonComplianceReason") != null && !jsonObj.get("nonComplianceReason").isJsonNull()) && !jsonObj.get("nonComplianceReason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nonComplianceReason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nonComplianceReason").toString()));
      }
      if (jsonObj.get("nonCompliantFiles") != null && !jsonObj.get("nonCompliantFiles").isJsonNull()) {
        JsonArray jsonArraynonCompliantFiles = jsonObj.getAsJsonArray("nonCompliantFiles");
        if (jsonArraynonCompliantFiles != null) {
          // ensure the json data is an array
          if (!jsonObj.get("nonCompliantFiles").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `nonCompliantFiles` to be an array in the JSON string but got `%s`", jsonObj.get("nonCompliantFiles").toString()));
          }

          // validate the optional field `nonCompliantFiles` (array)
          for (int i = 0; i < jsonArraynonCompliantFiles.size(); i++) {
            NonCompliantFile.validateJsonElement(jsonArraynonCompliantFiles.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ComplianceOccurrence.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ComplianceOccurrence' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ComplianceOccurrence> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ComplianceOccurrence.class));

       return (TypeAdapter<T>) new TypeAdapter<ComplianceOccurrence>() {
           @Override
           public void write(JsonWriter out, ComplianceOccurrence value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ComplianceOccurrence read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ComplianceOccurrence given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ComplianceOccurrence
   * @throws IOException if the JSON string is invalid with respect to ComplianceOccurrence
   */
  public static ComplianceOccurrence fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ComplianceOccurrence.class);
  }

  /**
   * Convert an instance of ComplianceOccurrence to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

