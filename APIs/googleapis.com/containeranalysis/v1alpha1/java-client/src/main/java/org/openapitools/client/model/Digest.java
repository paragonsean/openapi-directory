/*
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1alpha1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Digest information.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:38:46.438210-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Digest {
  public static final String SERIALIZED_NAME_ALGO = "algo";
  @SerializedName(SERIALIZED_NAME_ALGO)
  private String algo;

  public static final String SERIALIZED_NAME_DIGEST_BYTES = "digestBytes";
  @SerializedName(SERIALIZED_NAME_DIGEST_BYTES)
  private byte[] digestBytes;

  public Digest() {
  }

  public Digest algo(String algo) {
    this.algo = algo;
    return this;
  }

  /**
   * &#x60;SHA1&#x60;, &#x60;SHA512&#x60; etc.
   * @return algo
   */
  @javax.annotation.Nullable
  public String getAlgo() {
    return algo;
  }

  public void setAlgo(String algo) {
    this.algo = algo;
  }


  public Digest digestBytes(byte[] digestBytes) {
    this.digestBytes = digestBytes;
    return this;
  }

  /**
   * Value of the digest.
   * @return digestBytes
   */
  @javax.annotation.Nullable
  public byte[] getDigestBytes() {
    return digestBytes;
  }

  public void setDigestBytes(byte[] digestBytes) {
    this.digestBytes = digestBytes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Digest digest = (Digest) o;
    return Objects.equals(this.algo, digest.algo) &&
        Arrays.equals(this.digestBytes, digest.digestBytes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(algo, Arrays.hashCode(digestBytes));
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Digest {\n");
    sb.append("    algo: ").append(toIndentedString(algo)).append("\n");
    sb.append("    digestBytes: ").append(toIndentedString(digestBytes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("algo");
    openapiFields.add("digestBytes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Digest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Digest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Digest is not found in the empty JSON string", Digest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Digest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Digest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("algo") != null && !jsonObj.get("algo").isJsonNull()) && !jsonObj.get("algo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `algo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("algo").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Digest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Digest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Digest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Digest.class));

       return (TypeAdapter<T>) new TypeAdapter<Digest>() {
           @Override
           public void write(JsonWriter out, Digest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Digest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Digest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Digest
   * @throws IOException if the JSON string is invalid with respect to Digest
   */
  public static Digest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Digest.class);
  }

  /**
   * Convert an instance of Digest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

