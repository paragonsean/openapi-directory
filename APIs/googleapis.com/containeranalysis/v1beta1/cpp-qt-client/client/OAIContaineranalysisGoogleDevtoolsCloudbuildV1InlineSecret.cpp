/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIContaineranalysisGoogleDevtoolsCloudbuildV1InlineSecret.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIContaineranalysisGoogleDevtoolsCloudbuildV1InlineSecret::OAIContaineranalysisGoogleDevtoolsCloudbuildV1InlineSecret(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIContaineranalysisGoogleDevtoolsCloudbuildV1InlineSecret::OAIContaineranalysisGoogleDevtoolsCloudbuildV1InlineSecret() {
    this->initializeModel();
}

OAIContaineranalysisGoogleDevtoolsCloudbuildV1InlineSecret::~OAIContaineranalysisGoogleDevtoolsCloudbuildV1InlineSecret() {}

void OAIContaineranalysisGoogleDevtoolsCloudbuildV1InlineSecret::initializeModel() {

    m_env_map_isSet = false;
    m_env_map_isValid = false;

    m_kms_key_name_isSet = false;
    m_kms_key_name_isValid = false;
}

void OAIContaineranalysisGoogleDevtoolsCloudbuildV1InlineSecret::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIContaineranalysisGoogleDevtoolsCloudbuildV1InlineSecret::fromJsonObject(QJsonObject json) {

    m_env_map_isValid = ::OpenAPI::fromJsonValue(m_env_map, json[QString("envMap")]);
    m_env_map_isSet = !json[QString("envMap")].isNull() && m_env_map_isValid;

    m_kms_key_name_isValid = ::OpenAPI::fromJsonValue(m_kms_key_name, json[QString("kmsKeyName")]);
    m_kms_key_name_isSet = !json[QString("kmsKeyName")].isNull() && m_kms_key_name_isValid;
}

QString OAIContaineranalysisGoogleDevtoolsCloudbuildV1InlineSecret::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIContaineranalysisGoogleDevtoolsCloudbuildV1InlineSecret::asJsonObject() const {
    QJsonObject obj;
    if (m_env_map.size() > 0) {
        obj.insert(QString("envMap"), ::OpenAPI::toJsonValue(m_env_map));
    }
    if (m_kms_key_name_isSet) {
        obj.insert(QString("kmsKeyName"), ::OpenAPI::toJsonValue(m_kms_key_name));
    }
    return obj;
}

QMap<QString, QByteArray> OAIContaineranalysisGoogleDevtoolsCloudbuildV1InlineSecret::getEnvMap() const {
    return m_env_map;
}
void OAIContaineranalysisGoogleDevtoolsCloudbuildV1InlineSecret::setEnvMap(const QMap<QString, QByteArray> &env_map) {
    m_env_map = env_map;
    m_env_map_isSet = true;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1InlineSecret::is_env_map_Set() const{
    return m_env_map_isSet;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1InlineSecret::is_env_map_Valid() const{
    return m_env_map_isValid;
}

QString OAIContaineranalysisGoogleDevtoolsCloudbuildV1InlineSecret::getKmsKeyName() const {
    return m_kms_key_name;
}
void OAIContaineranalysisGoogleDevtoolsCloudbuildV1InlineSecret::setKmsKeyName(const QString &kms_key_name) {
    m_kms_key_name = kms_key_name;
    m_kms_key_name_isSet = true;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1InlineSecret::is_kms_key_name_Set() const{
    return m_kms_key_name_isSet;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1InlineSecret::is_kms_key_name_Valid() const{
    return m_kms_key_name_isValid;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1InlineSecret::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_env_map.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_kms_key_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1InlineSecret::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
