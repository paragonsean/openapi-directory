/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDocumentNote.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDocumentNote::OAIDocumentNote(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDocumentNote::OAIDocumentNote() {
    this->initializeModel();
}

OAIDocumentNote::~OAIDocumentNote() {}

void OAIDocumentNote::initializeModel() {

    m_data_licence_isSet = false;
    m_data_licence_isValid = false;

    m_spdx_version_isSet = false;
    m_spdx_version_isValid = false;
}

void OAIDocumentNote::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDocumentNote::fromJsonObject(QJsonObject json) {

    m_data_licence_isValid = ::OpenAPI::fromJsonValue(m_data_licence, json[QString("dataLicence")]);
    m_data_licence_isSet = !json[QString("dataLicence")].isNull() && m_data_licence_isValid;

    m_spdx_version_isValid = ::OpenAPI::fromJsonValue(m_spdx_version, json[QString("spdxVersion")]);
    m_spdx_version_isSet = !json[QString("spdxVersion")].isNull() && m_spdx_version_isValid;
}

QString OAIDocumentNote::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDocumentNote::asJsonObject() const {
    QJsonObject obj;
    if (m_data_licence_isSet) {
        obj.insert(QString("dataLicence"), ::OpenAPI::toJsonValue(m_data_licence));
    }
    if (m_spdx_version_isSet) {
        obj.insert(QString("spdxVersion"), ::OpenAPI::toJsonValue(m_spdx_version));
    }
    return obj;
}

QString OAIDocumentNote::getDataLicence() const {
    return m_data_licence;
}
void OAIDocumentNote::setDataLicence(const QString &data_licence) {
    m_data_licence = data_licence;
    m_data_licence_isSet = true;
}

bool OAIDocumentNote::is_data_licence_Set() const{
    return m_data_licence_isSet;
}

bool OAIDocumentNote::is_data_licence_Valid() const{
    return m_data_licence_isValid;
}

QString OAIDocumentNote::getSpdxVersion() const {
    return m_spdx_version;
}
void OAIDocumentNote::setSpdxVersion(const QString &spdx_version) {
    m_spdx_version = spdx_version;
    m_spdx_version_isSet = true;
}

bool OAIDocumentNote::is_spdx_version_Set() const{
    return m_spdx_version_isSet;
}

bool OAIDocumentNote::is_spdx_version_Valid() const{
    return m_spdx_version_isValid;
}

bool OAIDocumentNote::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_licence_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_spdx_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDocumentNote::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
