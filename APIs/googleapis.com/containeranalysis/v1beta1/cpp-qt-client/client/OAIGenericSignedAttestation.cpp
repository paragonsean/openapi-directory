/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGenericSignedAttestation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGenericSignedAttestation::OAIGenericSignedAttestation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGenericSignedAttestation::OAIGenericSignedAttestation() {
    this->initializeModel();
}

OAIGenericSignedAttestation::~OAIGenericSignedAttestation() {}

void OAIGenericSignedAttestation::initializeModel() {

    m_content_type_isSet = false;
    m_content_type_isValid = false;

    m_serialized_payload_isSet = false;
    m_serialized_payload_isValid = false;

    m_signatures_isSet = false;
    m_signatures_isValid = false;
}

void OAIGenericSignedAttestation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGenericSignedAttestation::fromJsonObject(QJsonObject json) {

    m_content_type_isValid = ::OpenAPI::fromJsonValue(m_content_type, json[QString("contentType")]);
    m_content_type_isSet = !json[QString("contentType")].isNull() && m_content_type_isValid;

    m_serialized_payload_isValid = ::OpenAPI::fromJsonValue(m_serialized_payload, json[QString("serializedPayload")]);
    m_serialized_payload_isSet = !json[QString("serializedPayload")].isNull() && m_serialized_payload_isValid;

    m_signatures_isValid = ::OpenAPI::fromJsonValue(m_signatures, json[QString("signatures")]);
    m_signatures_isSet = !json[QString("signatures")].isNull() && m_signatures_isValid;
}

QString OAIGenericSignedAttestation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGenericSignedAttestation::asJsonObject() const {
    QJsonObject obj;
    if (m_content_type_isSet) {
        obj.insert(QString("contentType"), ::OpenAPI::toJsonValue(m_content_type));
    }
    if (m_serialized_payload_isSet) {
        obj.insert(QString("serializedPayload"), ::OpenAPI::toJsonValue(m_serialized_payload));
    }
    if (m_signatures.size() > 0) {
        obj.insert(QString("signatures"), ::OpenAPI::toJsonValue(m_signatures));
    }
    return obj;
}

QString OAIGenericSignedAttestation::getContentType() const {
    return m_content_type;
}
void OAIGenericSignedAttestation::setContentType(const QString &content_type) {
    m_content_type = content_type;
    m_content_type_isSet = true;
}

bool OAIGenericSignedAttestation::is_content_type_Set() const{
    return m_content_type_isSet;
}

bool OAIGenericSignedAttestation::is_content_type_Valid() const{
    return m_content_type_isValid;
}

QByteArray OAIGenericSignedAttestation::getSerializedPayload() const {
    return m_serialized_payload;
}
void OAIGenericSignedAttestation::setSerializedPayload(const QByteArray &serialized_payload) {
    m_serialized_payload = serialized_payload;
    m_serialized_payload_isSet = true;
}

bool OAIGenericSignedAttestation::is_serialized_payload_Set() const{
    return m_serialized_payload_isSet;
}

bool OAIGenericSignedAttestation::is_serialized_payload_Valid() const{
    return m_serialized_payload_isValid;
}

QList<OAISignature> OAIGenericSignedAttestation::getSignatures() const {
    return m_signatures;
}
void OAIGenericSignedAttestation::setSignatures(const QList<OAISignature> &signatures) {
    m_signatures = signatures;
    m_signatures_isSet = true;
}

bool OAIGenericSignedAttestation::is_signatures_Set() const{
    return m_signatures_isSet;
}

bool OAIGenericSignedAttestation::is_signatures_Valid() const{
    return m_signatures_isValid;
}

bool OAIGenericSignedAttestation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_content_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_serialized_payload_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_signatures.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGenericSignedAttestation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
