/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWindowsDetail.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWindowsDetail::OAIWindowsDetail(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWindowsDetail::OAIWindowsDetail() {
    this->initializeModel();
}

OAIWindowsDetail::~OAIWindowsDetail() {}

void OAIWindowsDetail::initializeModel() {

    m_cpe_uri_isSet = false;
    m_cpe_uri_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_fixing_kbs_isSet = false;
    m_fixing_kbs_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;
}

void OAIWindowsDetail::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWindowsDetail::fromJsonObject(QJsonObject json) {

    m_cpe_uri_isValid = ::OpenAPI::fromJsonValue(m_cpe_uri, json[QString("cpeUri")]);
    m_cpe_uri_isSet = !json[QString("cpeUri")].isNull() && m_cpe_uri_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_fixing_kbs_isValid = ::OpenAPI::fromJsonValue(m_fixing_kbs, json[QString("fixingKbs")]);
    m_fixing_kbs_isSet = !json[QString("fixingKbs")].isNull() && m_fixing_kbs_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;
}

QString OAIWindowsDetail::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWindowsDetail::asJsonObject() const {
    QJsonObject obj;
    if (m_cpe_uri_isSet) {
        obj.insert(QString("cpeUri"), ::OpenAPI::toJsonValue(m_cpe_uri));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_fixing_kbs.size() > 0) {
        obj.insert(QString("fixingKbs"), ::OpenAPI::toJsonValue(m_fixing_kbs));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    return obj;
}

QString OAIWindowsDetail::getCpeUri() const {
    return m_cpe_uri;
}
void OAIWindowsDetail::setCpeUri(const QString &cpe_uri) {
    m_cpe_uri = cpe_uri;
    m_cpe_uri_isSet = true;
}

bool OAIWindowsDetail::is_cpe_uri_Set() const{
    return m_cpe_uri_isSet;
}

bool OAIWindowsDetail::is_cpe_uri_Valid() const{
    return m_cpe_uri_isValid;
}

QString OAIWindowsDetail::getDescription() const {
    return m_description;
}
void OAIWindowsDetail::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIWindowsDetail::is_description_Set() const{
    return m_description_isSet;
}

bool OAIWindowsDetail::is_description_Valid() const{
    return m_description_isValid;
}

QList<OAIKnowledgeBase> OAIWindowsDetail::getFixingKbs() const {
    return m_fixing_kbs;
}
void OAIWindowsDetail::setFixingKbs(const QList<OAIKnowledgeBase> &fixing_kbs) {
    m_fixing_kbs = fixing_kbs;
    m_fixing_kbs_isSet = true;
}

bool OAIWindowsDetail::is_fixing_kbs_Set() const{
    return m_fixing_kbs_isSet;
}

bool OAIWindowsDetail::is_fixing_kbs_Valid() const{
    return m_fixing_kbs_isValid;
}

QString OAIWindowsDetail::getName() const {
    return m_name;
}
void OAIWindowsDetail::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIWindowsDetail::is_name_Set() const{
    return m_name_isSet;
}

bool OAIWindowsDetail::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIWindowsDetail::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cpe_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fixing_kbs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWindowsDetail::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
