/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInToto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInToto::OAIInToto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInToto::OAIInToto() {
    this->initializeModel();
}

OAIInToto::~OAIInToto() {}

void OAIInToto::initializeModel() {

    m_expected_command_isSet = false;
    m_expected_command_isValid = false;

    m_expected_materials_isSet = false;
    m_expected_materials_isValid = false;

    m_expected_products_isSet = false;
    m_expected_products_isValid = false;

    m_signing_keys_isSet = false;
    m_signing_keys_isValid = false;

    m_step_name_isSet = false;
    m_step_name_isValid = false;

    m_threshold_isSet = false;
    m_threshold_isValid = false;
}

void OAIInToto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInToto::fromJsonObject(QJsonObject json) {

    m_expected_command_isValid = ::OpenAPI::fromJsonValue(m_expected_command, json[QString("expectedCommand")]);
    m_expected_command_isSet = !json[QString("expectedCommand")].isNull() && m_expected_command_isValid;

    m_expected_materials_isValid = ::OpenAPI::fromJsonValue(m_expected_materials, json[QString("expectedMaterials")]);
    m_expected_materials_isSet = !json[QString("expectedMaterials")].isNull() && m_expected_materials_isValid;

    m_expected_products_isValid = ::OpenAPI::fromJsonValue(m_expected_products, json[QString("expectedProducts")]);
    m_expected_products_isSet = !json[QString("expectedProducts")].isNull() && m_expected_products_isValid;

    m_signing_keys_isValid = ::OpenAPI::fromJsonValue(m_signing_keys, json[QString("signingKeys")]);
    m_signing_keys_isSet = !json[QString("signingKeys")].isNull() && m_signing_keys_isValid;

    m_step_name_isValid = ::OpenAPI::fromJsonValue(m_step_name, json[QString("stepName")]);
    m_step_name_isSet = !json[QString("stepName")].isNull() && m_step_name_isValid;

    m_threshold_isValid = ::OpenAPI::fromJsonValue(m_threshold, json[QString("threshold")]);
    m_threshold_isSet = !json[QString("threshold")].isNull() && m_threshold_isValid;
}

QString OAIInToto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInToto::asJsonObject() const {
    QJsonObject obj;
    if (m_expected_command.size() > 0) {
        obj.insert(QString("expectedCommand"), ::OpenAPI::toJsonValue(m_expected_command));
    }
    if (m_expected_materials.size() > 0) {
        obj.insert(QString("expectedMaterials"), ::OpenAPI::toJsonValue(m_expected_materials));
    }
    if (m_expected_products.size() > 0) {
        obj.insert(QString("expectedProducts"), ::OpenAPI::toJsonValue(m_expected_products));
    }
    if (m_signing_keys.size() > 0) {
        obj.insert(QString("signingKeys"), ::OpenAPI::toJsonValue(m_signing_keys));
    }
    if (m_step_name_isSet) {
        obj.insert(QString("stepName"), ::OpenAPI::toJsonValue(m_step_name));
    }
    if (m_threshold_isSet) {
        obj.insert(QString("threshold"), ::OpenAPI::toJsonValue(m_threshold));
    }
    return obj;
}

QList<QString> OAIInToto::getExpectedCommand() const {
    return m_expected_command;
}
void OAIInToto::setExpectedCommand(const QList<QString> &expected_command) {
    m_expected_command = expected_command;
    m_expected_command_isSet = true;
}

bool OAIInToto::is_expected_command_Set() const{
    return m_expected_command_isSet;
}

bool OAIInToto::is_expected_command_Valid() const{
    return m_expected_command_isValid;
}

QList<OAIArtifactRule> OAIInToto::getExpectedMaterials() const {
    return m_expected_materials;
}
void OAIInToto::setExpectedMaterials(const QList<OAIArtifactRule> &expected_materials) {
    m_expected_materials = expected_materials;
    m_expected_materials_isSet = true;
}

bool OAIInToto::is_expected_materials_Set() const{
    return m_expected_materials_isSet;
}

bool OAIInToto::is_expected_materials_Valid() const{
    return m_expected_materials_isValid;
}

QList<OAIArtifactRule> OAIInToto::getExpectedProducts() const {
    return m_expected_products;
}
void OAIInToto::setExpectedProducts(const QList<OAIArtifactRule> &expected_products) {
    m_expected_products = expected_products;
    m_expected_products_isSet = true;
}

bool OAIInToto::is_expected_products_Set() const{
    return m_expected_products_isSet;
}

bool OAIInToto::is_expected_products_Valid() const{
    return m_expected_products_isValid;
}

QList<OAISigningKey> OAIInToto::getSigningKeys() const {
    return m_signing_keys;
}
void OAIInToto::setSigningKeys(const QList<OAISigningKey> &signing_keys) {
    m_signing_keys = signing_keys;
    m_signing_keys_isSet = true;
}

bool OAIInToto::is_signing_keys_Set() const{
    return m_signing_keys_isSet;
}

bool OAIInToto::is_signing_keys_Valid() const{
    return m_signing_keys_isValid;
}

QString OAIInToto::getStepName() const {
    return m_step_name;
}
void OAIInToto::setStepName(const QString &step_name) {
    m_step_name = step_name;
    m_step_name_isSet = true;
}

bool OAIInToto::is_step_name_Set() const{
    return m_step_name_isSet;
}

bool OAIInToto::is_step_name_Valid() const{
    return m_step_name_isValid;
}

QString OAIInToto::getThreshold() const {
    return m_threshold;
}
void OAIInToto::setThreshold(const QString &threshold) {
    m_threshold = threshold;
    m_threshold_isSet = true;
}

bool OAIInToto::is_threshold_Set() const{
    return m_threshold_isSet;
}

bool OAIInToto::is_threshold_Valid() const{
    return m_threshold_isValid;
}

bool OAIInToto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_expected_command.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_expected_materials.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_expected_products.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_signing_keys.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_step_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_threshold_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInToto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
