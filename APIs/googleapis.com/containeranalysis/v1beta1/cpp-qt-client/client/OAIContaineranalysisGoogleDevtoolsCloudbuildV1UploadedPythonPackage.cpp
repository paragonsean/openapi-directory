/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIContaineranalysisGoogleDevtoolsCloudbuildV1UploadedPythonPackage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIContaineranalysisGoogleDevtoolsCloudbuildV1UploadedPythonPackage::OAIContaineranalysisGoogleDevtoolsCloudbuildV1UploadedPythonPackage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIContaineranalysisGoogleDevtoolsCloudbuildV1UploadedPythonPackage::OAIContaineranalysisGoogleDevtoolsCloudbuildV1UploadedPythonPackage() {
    this->initializeModel();
}

OAIContaineranalysisGoogleDevtoolsCloudbuildV1UploadedPythonPackage::~OAIContaineranalysisGoogleDevtoolsCloudbuildV1UploadedPythonPackage() {}

void OAIContaineranalysisGoogleDevtoolsCloudbuildV1UploadedPythonPackage::initializeModel() {

    m_file_hashes_isSet = false;
    m_file_hashes_isValid = false;

    m_push_timing_isSet = false;
    m_push_timing_isValid = false;

    m_uri_isSet = false;
    m_uri_isValid = false;
}

void OAIContaineranalysisGoogleDevtoolsCloudbuildV1UploadedPythonPackage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIContaineranalysisGoogleDevtoolsCloudbuildV1UploadedPythonPackage::fromJsonObject(QJsonObject json) {

    m_file_hashes_isValid = ::OpenAPI::fromJsonValue(m_file_hashes, json[QString("fileHashes")]);
    m_file_hashes_isSet = !json[QString("fileHashes")].isNull() && m_file_hashes_isValid;

    m_push_timing_isValid = ::OpenAPI::fromJsonValue(m_push_timing, json[QString("pushTiming")]);
    m_push_timing_isSet = !json[QString("pushTiming")].isNull() && m_push_timing_isValid;

    m_uri_isValid = ::OpenAPI::fromJsonValue(m_uri, json[QString("uri")]);
    m_uri_isSet = !json[QString("uri")].isNull() && m_uri_isValid;
}

QString OAIContaineranalysisGoogleDevtoolsCloudbuildV1UploadedPythonPackage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIContaineranalysisGoogleDevtoolsCloudbuildV1UploadedPythonPackage::asJsonObject() const {
    QJsonObject obj;
    if (m_file_hashes.isSet()) {
        obj.insert(QString("fileHashes"), ::OpenAPI::toJsonValue(m_file_hashes));
    }
    if (m_push_timing.isSet()) {
        obj.insert(QString("pushTiming"), ::OpenAPI::toJsonValue(m_push_timing));
    }
    if (m_uri_isSet) {
        obj.insert(QString("uri"), ::OpenAPI::toJsonValue(m_uri));
    }
    return obj;
}

OAIContaineranalysisGoogleDevtoolsCloudbuildV1FileHashes OAIContaineranalysisGoogleDevtoolsCloudbuildV1UploadedPythonPackage::getFileHashes() const {
    return m_file_hashes;
}
void OAIContaineranalysisGoogleDevtoolsCloudbuildV1UploadedPythonPackage::setFileHashes(const OAIContaineranalysisGoogleDevtoolsCloudbuildV1FileHashes &file_hashes) {
    m_file_hashes = file_hashes;
    m_file_hashes_isSet = true;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1UploadedPythonPackage::is_file_hashes_Set() const{
    return m_file_hashes_isSet;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1UploadedPythonPackage::is_file_hashes_Valid() const{
    return m_file_hashes_isValid;
}

OAIContaineranalysisGoogleDevtoolsCloudbuildV1TimeSpan OAIContaineranalysisGoogleDevtoolsCloudbuildV1UploadedPythonPackage::getPushTiming() const {
    return m_push_timing;
}
void OAIContaineranalysisGoogleDevtoolsCloudbuildV1UploadedPythonPackage::setPushTiming(const OAIContaineranalysisGoogleDevtoolsCloudbuildV1TimeSpan &push_timing) {
    m_push_timing = push_timing;
    m_push_timing_isSet = true;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1UploadedPythonPackage::is_push_timing_Set() const{
    return m_push_timing_isSet;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1UploadedPythonPackage::is_push_timing_Valid() const{
    return m_push_timing_isValid;
}

QString OAIContaineranalysisGoogleDevtoolsCloudbuildV1UploadedPythonPackage::getUri() const {
    return m_uri;
}
void OAIContaineranalysisGoogleDevtoolsCloudbuildV1UploadedPythonPackage::setUri(const QString &uri) {
    m_uri = uri;
    m_uri_isSet = true;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1UploadedPythonPackage::is_uri_Set() const{
    return m_uri_isSet;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1UploadedPythonPackage::is_uri_Valid() const{
    return m_uri_isValid;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1UploadedPythonPackage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_file_hashes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_push_timing.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_uri_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1UploadedPythonPackage::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
