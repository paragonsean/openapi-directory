/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPackageInfoOccurrence.h
 *
 * PackageInfoOccurrence represents an SPDX Package Information section: https://spdx.github.io/spdx-spec/3-package-information/
 */

#ifndef OAIPackageInfoOccurrence_H
#define OAIPackageInfoOccurrence_H

#include <QJsonObject>

#include "OAILicense.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAILicense;

class OAIPackageInfoOccurrence : public OAIObject {
public:
    OAIPackageInfoOccurrence();
    OAIPackageInfoOccurrence(QString json);
    ~OAIPackageInfoOccurrence() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getComment() const;
    void setComment(const QString &comment);
    bool is_comment_Set() const;
    bool is_comment_Valid() const;

    QString getFilename() const;
    void setFilename(const QString &filename);
    bool is_filename_Set() const;
    bool is_filename_Valid() const;

    QString getHomePage() const;
    void setHomePage(const QString &home_page);
    bool is_home_page_Set() const;
    bool is_home_page_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    OAILicense getLicenseConcluded() const;
    void setLicenseConcluded(const OAILicense &license_concluded);
    bool is_license_concluded_Set() const;
    bool is_license_concluded_Valid() const;

    QString getPackageType() const;
    void setPackageType(const QString &package_type);
    bool is_package_type_Set() const;
    bool is_package_type_Valid() const;

    QString getSourceInfo() const;
    void setSourceInfo(const QString &source_info);
    bool is_source_info_Set() const;
    bool is_source_info_Valid() const;

    QString getSummaryDescription() const;
    void setSummaryDescription(const QString &summary_description);
    bool is_summary_description_Set() const;
    bool is_summary_description_Valid() const;

    QString getTitle() const;
    void setTitle(const QString &title);
    bool is_title_Set() const;
    bool is_title_Valid() const;

    QString getVersion() const;
    void setVersion(const QString &version);
    bool is_version_Set() const;
    bool is_version_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_comment;
    bool m_comment_isSet;
    bool m_comment_isValid;

    QString m_filename;
    bool m_filename_isSet;
    bool m_filename_isValid;

    QString m_home_page;
    bool m_home_page_isSet;
    bool m_home_page_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    OAILicense m_license_concluded;
    bool m_license_concluded_isSet;
    bool m_license_concluded_isValid;

    QString m_package_type;
    bool m_package_type_isSet;
    bool m_package_type_isValid;

    QString m_source_info;
    bool m_source_info_isSet;
    bool m_source_info_isValid;

    QString m_summary_description;
    bool m_summary_description_isSet;
    bool m_summary_description_isValid;

    QString m_title;
    bool m_title_isSet;
    bool m_title_isValid;

    QString m_version;
    bool m_version_isSet;
    bool m_version_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPackageInfoOccurrence)

#endif // OAIPackageInfoOccurrence_H
