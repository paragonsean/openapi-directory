/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGrafeasV1beta1IntotoDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGrafeasV1beta1IntotoDetails::OAIGrafeasV1beta1IntotoDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGrafeasV1beta1IntotoDetails::OAIGrafeasV1beta1IntotoDetails() {
    this->initializeModel();
}

OAIGrafeasV1beta1IntotoDetails::~OAIGrafeasV1beta1IntotoDetails() {}

void OAIGrafeasV1beta1IntotoDetails::initializeModel() {

    m_signatures_isSet = false;
    m_signatures_isValid = false;

    m_r_signed_isSet = false;
    m_r_signed_isValid = false;
}

void OAIGrafeasV1beta1IntotoDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGrafeasV1beta1IntotoDetails::fromJsonObject(QJsonObject json) {

    m_signatures_isValid = ::OpenAPI::fromJsonValue(m_signatures, json[QString("signatures")]);
    m_signatures_isSet = !json[QString("signatures")].isNull() && m_signatures_isValid;

    m_r_signed_isValid = ::OpenAPI::fromJsonValue(m_r_signed, json[QString("signed")]);
    m_r_signed_isSet = !json[QString("signed")].isNull() && m_r_signed_isValid;
}

QString OAIGrafeasV1beta1IntotoDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGrafeasV1beta1IntotoDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_signatures.size() > 0) {
        obj.insert(QString("signatures"), ::OpenAPI::toJsonValue(m_signatures));
    }
    if (m_r_signed.isSet()) {
        obj.insert(QString("signed"), ::OpenAPI::toJsonValue(m_r_signed));
    }
    return obj;
}

QList<OAIGrafeasV1beta1IntotoSignature> OAIGrafeasV1beta1IntotoDetails::getSignatures() const {
    return m_signatures;
}
void OAIGrafeasV1beta1IntotoDetails::setSignatures(const QList<OAIGrafeasV1beta1IntotoSignature> &signatures) {
    m_signatures = signatures;
    m_signatures_isSet = true;
}

bool OAIGrafeasV1beta1IntotoDetails::is_signatures_Set() const{
    return m_signatures_isSet;
}

bool OAIGrafeasV1beta1IntotoDetails::is_signatures_Valid() const{
    return m_signatures_isValid;
}

OAILink OAIGrafeasV1beta1IntotoDetails::getRSigned() const {
    return m_r_signed;
}
void OAIGrafeasV1beta1IntotoDetails::setRSigned(const OAILink &r_signed) {
    m_r_signed = r_signed;
    m_r_signed_isSet = true;
}

bool OAIGrafeasV1beta1IntotoDetails::is_r_signed_Set() const{
    return m_r_signed_isSet;
}

bool OAIGrafeasV1beta1IntotoDetails::is_r_signed_Valid() const{
    return m_r_signed_isValid;
}

bool OAIGrafeasV1beta1IntotoDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_signatures.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_signed.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGrafeasV1beta1IntotoDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
