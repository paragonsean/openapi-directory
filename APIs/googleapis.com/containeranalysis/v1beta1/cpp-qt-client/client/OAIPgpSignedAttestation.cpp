/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPgpSignedAttestation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPgpSignedAttestation::OAIPgpSignedAttestation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPgpSignedAttestation::OAIPgpSignedAttestation() {
    this->initializeModel();
}

OAIPgpSignedAttestation::~OAIPgpSignedAttestation() {}

void OAIPgpSignedAttestation::initializeModel() {

    m_content_type_isSet = false;
    m_content_type_isValid = false;

    m_pgp_key_id_isSet = false;
    m_pgp_key_id_isValid = false;

    m_signature_isSet = false;
    m_signature_isValid = false;
}

void OAIPgpSignedAttestation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPgpSignedAttestation::fromJsonObject(QJsonObject json) {

    m_content_type_isValid = ::OpenAPI::fromJsonValue(m_content_type, json[QString("contentType")]);
    m_content_type_isSet = !json[QString("contentType")].isNull() && m_content_type_isValid;

    m_pgp_key_id_isValid = ::OpenAPI::fromJsonValue(m_pgp_key_id, json[QString("pgpKeyId")]);
    m_pgp_key_id_isSet = !json[QString("pgpKeyId")].isNull() && m_pgp_key_id_isValid;

    m_signature_isValid = ::OpenAPI::fromJsonValue(m_signature, json[QString("signature")]);
    m_signature_isSet = !json[QString("signature")].isNull() && m_signature_isValid;
}

QString OAIPgpSignedAttestation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPgpSignedAttestation::asJsonObject() const {
    QJsonObject obj;
    if (m_content_type_isSet) {
        obj.insert(QString("contentType"), ::OpenAPI::toJsonValue(m_content_type));
    }
    if (m_pgp_key_id_isSet) {
        obj.insert(QString("pgpKeyId"), ::OpenAPI::toJsonValue(m_pgp_key_id));
    }
    if (m_signature_isSet) {
        obj.insert(QString("signature"), ::OpenAPI::toJsonValue(m_signature));
    }
    return obj;
}

QString OAIPgpSignedAttestation::getContentType() const {
    return m_content_type;
}
void OAIPgpSignedAttestation::setContentType(const QString &content_type) {
    m_content_type = content_type;
    m_content_type_isSet = true;
}

bool OAIPgpSignedAttestation::is_content_type_Set() const{
    return m_content_type_isSet;
}

bool OAIPgpSignedAttestation::is_content_type_Valid() const{
    return m_content_type_isValid;
}

QString OAIPgpSignedAttestation::getPgpKeyId() const {
    return m_pgp_key_id;
}
void OAIPgpSignedAttestation::setPgpKeyId(const QString &pgp_key_id) {
    m_pgp_key_id = pgp_key_id;
    m_pgp_key_id_isSet = true;
}

bool OAIPgpSignedAttestation::is_pgp_key_id_Set() const{
    return m_pgp_key_id_isSet;
}

bool OAIPgpSignedAttestation::is_pgp_key_id_Valid() const{
    return m_pgp_key_id_isValid;
}

QString OAIPgpSignedAttestation::getSignature() const {
    return m_signature;
}
void OAIPgpSignedAttestation::setSignature(const QString &signature) {
    m_signature = signature;
    m_signature_isSet = true;
}

bool OAIPgpSignedAttestation::is_signature_Set() const{
    return m_signature_isSet;
}

bool OAIPgpSignedAttestation::is_signature_Valid() const{
    return m_signature_isValid;
}

bool OAIPgpSignedAttestation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_content_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pgp_key_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_signature_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPgpSignedAttestation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
