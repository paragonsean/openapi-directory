/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDocumentOccurrence.h
 *
 * DocumentOccurrence represents an SPDX Document Creation Information section: https://spdx.github.io/spdx-spec/2-document-creation-information/
 */

#ifndef OAIDocumentOccurrence_H
#define OAIDocumentOccurrence_H

#include <QJsonObject>

#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIDocumentOccurrence : public OAIObject {
public:
    OAIDocumentOccurrence();
    OAIDocumentOccurrence(QString json);
    ~OAIDocumentOccurrence() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getCreateTime() const;
    void setCreateTime(const QString &create_time);
    bool is_create_time_Set() const;
    bool is_create_time_Valid() const;

    QString getCreatorComment() const;
    void setCreatorComment(const QString &creator_comment);
    bool is_creator_comment_Set() const;
    bool is_creator_comment_Valid() const;

    QList<QString> getCreators() const;
    void setCreators(const QList<QString> &creators);
    bool is_creators_Set() const;
    bool is_creators_Valid() const;

    QString getDocumentComment() const;
    void setDocumentComment(const QString &document_comment);
    bool is_document_comment_Set() const;
    bool is_document_comment_Valid() const;

    QList<QString> getExternalDocumentRefs() const;
    void setExternalDocumentRefs(const QList<QString> &external_document_refs);
    bool is_external_document_refs_Set() const;
    bool is_external_document_refs_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QString getLicenseListVersion() const;
    void setLicenseListVersion(const QString &license_list_version);
    bool is_license_list_version_Set() const;
    bool is_license_list_version_Valid() const;

    QString getRNamespace() const;
    void setRNamespace(const QString &r_namespace);
    bool is_r_namespace_Set() const;
    bool is_r_namespace_Valid() const;

    QString getTitle() const;
    void setTitle(const QString &title);
    bool is_title_Set() const;
    bool is_title_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_create_time;
    bool m_create_time_isSet;
    bool m_create_time_isValid;

    QString m_creator_comment;
    bool m_creator_comment_isSet;
    bool m_creator_comment_isValid;

    QList<QString> m_creators;
    bool m_creators_isSet;
    bool m_creators_isValid;

    QString m_document_comment;
    bool m_document_comment_isSet;
    bool m_document_comment_isValid;

    QList<QString> m_external_document_refs;
    bool m_external_document_refs_isSet;
    bool m_external_document_refs_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QString m_license_list_version;
    bool m_license_list_version_isSet;
    bool m_license_list_version_isValid;

    QString m_r_namespace;
    bool m_r_namespace_isSet;
    bool m_r_namespace_isValid;

    QString m_title;
    bool m_title_isSet;
    bool m_title_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDocumentOccurrence)

#endif // OAIDocumentOccurrence_H
