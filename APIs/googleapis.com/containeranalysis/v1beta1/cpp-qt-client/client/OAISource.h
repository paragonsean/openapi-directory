/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAISource.h
 *
 * Source describes the location of the source used for the build.
 */

#ifndef OAISource_H
#define OAISource_H

#include <QJsonObject>

#include "OAIFileHashes.h"
#include "OAISourceContext.h"
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAISourceContext;
class OAIFileHashes;

class OAISource : public OAIObject {
public:
    OAISource();
    OAISource(QString json);
    ~OAISource() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<OAISourceContext> getAdditionalContexts() const;
    void setAdditionalContexts(const QList<OAISourceContext> &additional_contexts);
    bool is_additional_contexts_Set() const;
    bool is_additional_contexts_Valid() const;

    QString getArtifactStorageSourceUri() const;
    void setArtifactStorageSourceUri(const QString &artifact_storage_source_uri);
    bool is_artifact_storage_source_uri_Set() const;
    bool is_artifact_storage_source_uri_Valid() const;

    OAISourceContext getContext() const;
    void setContext(const OAISourceContext &context);
    bool is_context_Set() const;
    bool is_context_Valid() const;

    QMap<QString, OAIFileHashes> getFileHashes() const;
    void setFileHashes(const QMap<QString, OAIFileHashes> &file_hashes);
    bool is_file_hashes_Set() const;
    bool is_file_hashes_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<OAISourceContext> m_additional_contexts;
    bool m_additional_contexts_isSet;
    bool m_additional_contexts_isValid;

    QString m_artifact_storage_source_uri;
    bool m_artifact_storage_source_uri_isSet;
    bool m_artifact_storage_source_uri_isValid;

    OAISourceContext m_context;
    bool m_context_isSet;
    bool m_context_isValid;

    QMap<QString, OAIFileHashes> m_file_hashes;
    bool m_file_hashes_isSet;
    bool m_file_hashes_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAISource)

#endif // OAISource_H
