/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDiscovered.h
 *
 * Provides information about the analysis status of a discovered resource.
 */

#ifndef OAIDiscovered_H
#define OAIDiscovered_H

#include <QJsonObject>

#include "OAIAnalysisCompleted.h"
#include "OAISBOMStatus.h"
#include "OAIStatus.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIAnalysisCompleted;
class OAIStatus;
class OAISBOMStatus;

class OAIDiscovered : public OAIObject {
public:
    OAIDiscovered();
    OAIDiscovered(QString json);
    ~OAIDiscovered() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIAnalysisCompleted getAnalysisCompleted() const;
    void setAnalysisCompleted(const OAIAnalysisCompleted &analysis_completed);
    bool is_analysis_completed_Set() const;
    bool is_analysis_completed_Valid() const;

    QList<OAIStatus> getAnalysisError() const;
    void setAnalysisError(const QList<OAIStatus> &analysis_error);
    bool is_analysis_error_Set() const;
    bool is_analysis_error_Valid() const;

    QString getAnalysisStatus() const;
    void setAnalysisStatus(const QString &analysis_status);
    bool is_analysis_status_Set() const;
    bool is_analysis_status_Valid() const;

    OAIStatus getAnalysisStatusError() const;
    void setAnalysisStatusError(const OAIStatus &analysis_status_error);
    bool is_analysis_status_error_Set() const;
    bool is_analysis_status_error_Valid() const;

    QString getContinuousAnalysis() const;
    void setContinuousAnalysis(const QString &continuous_analysis);
    bool is_continuous_analysis_Set() const;
    bool is_continuous_analysis_Valid() const;

    QString getLastAnalysisTime() const;
    void setLastAnalysisTime(const QString &last_analysis_time);
    bool is_last_analysis_time_Set() const;
    bool is_last_analysis_time_Valid() const;

    QString getLastScanTime() const;
    void setLastScanTime(const QString &last_scan_time);
    bool is_last_scan_time_Set() const;
    bool is_last_scan_time_Valid() const;

    OAISBOMStatus getSbomStatus() const;
    void setSbomStatus(const OAISBOMStatus &sbom_status);
    bool is_sbom_status_Set() const;
    bool is_sbom_status_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIAnalysisCompleted m_analysis_completed;
    bool m_analysis_completed_isSet;
    bool m_analysis_completed_isValid;

    QList<OAIStatus> m_analysis_error;
    bool m_analysis_error_isSet;
    bool m_analysis_error_isValid;

    QString m_analysis_status;
    bool m_analysis_status_isSet;
    bool m_analysis_status_isValid;

    OAIStatus m_analysis_status_error;
    bool m_analysis_status_error_isSet;
    bool m_analysis_status_error_isValid;

    QString m_continuous_analysis;
    bool m_continuous_analysis_isSet;
    bool m_continuous_analysis_isValid;

    QString m_last_analysis_time;
    bool m_last_analysis_time_isSet;
    bool m_last_analysis_time_isValid;

    QString m_last_scan_time;
    bool m_last_scan_time_isSet;
    bool m_last_scan_time_isValid;

    OAISBOMStatus m_sbom_status;
    bool m_sbom_status_isSet;
    bool m_sbom_status_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDiscovered)

#endif // OAIDiscovered_H
