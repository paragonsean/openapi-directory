/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPublisher.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPublisher::OAIPublisher(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPublisher::OAIPublisher() {
    this->initializeModel();
}

OAIPublisher::~OAIPublisher() {}

void OAIPublisher::initializeModel() {

    m_issuing_authority_isSet = false;
    m_issuing_authority_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_publisher_namespace_isSet = false;
    m_publisher_namespace_isValid = false;
}

void OAIPublisher::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPublisher::fromJsonObject(QJsonObject json) {

    m_issuing_authority_isValid = ::OpenAPI::fromJsonValue(m_issuing_authority, json[QString("issuingAuthority")]);
    m_issuing_authority_isSet = !json[QString("issuingAuthority")].isNull() && m_issuing_authority_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_publisher_namespace_isValid = ::OpenAPI::fromJsonValue(m_publisher_namespace, json[QString("publisherNamespace")]);
    m_publisher_namespace_isSet = !json[QString("publisherNamespace")].isNull() && m_publisher_namespace_isValid;
}

QString OAIPublisher::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPublisher::asJsonObject() const {
    QJsonObject obj;
    if (m_issuing_authority_isSet) {
        obj.insert(QString("issuingAuthority"), ::OpenAPI::toJsonValue(m_issuing_authority));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_publisher_namespace_isSet) {
        obj.insert(QString("publisherNamespace"), ::OpenAPI::toJsonValue(m_publisher_namespace));
    }
    return obj;
}

QString OAIPublisher::getIssuingAuthority() const {
    return m_issuing_authority;
}
void OAIPublisher::setIssuingAuthority(const QString &issuing_authority) {
    m_issuing_authority = issuing_authority;
    m_issuing_authority_isSet = true;
}

bool OAIPublisher::is_issuing_authority_Set() const{
    return m_issuing_authority_isSet;
}

bool OAIPublisher::is_issuing_authority_Valid() const{
    return m_issuing_authority_isValid;
}

QString OAIPublisher::getName() const {
    return m_name;
}
void OAIPublisher::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPublisher::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPublisher::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIPublisher::getPublisherNamespace() const {
    return m_publisher_namespace;
}
void OAIPublisher::setPublisherNamespace(const QString &publisher_namespace) {
    m_publisher_namespace = publisher_namespace;
    m_publisher_namespace_isSet = true;
}

bool OAIPublisher::is_publisher_namespace_Set() const{
    return m_publisher_namespace_isSet;
}

bool OAIPublisher::is_publisher_namespace_Valid() const{
    return m_publisher_namespace_isValid;
}

bool OAIPublisher::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_issuing_authority_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_publisher_namespace_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPublisher::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
