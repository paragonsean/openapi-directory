/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBatchCreateNotesRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBatchCreateNotesRequest::OAIBatchCreateNotesRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBatchCreateNotesRequest::OAIBatchCreateNotesRequest() {
    this->initializeModel();
}

OAIBatchCreateNotesRequest::~OAIBatchCreateNotesRequest() {}

void OAIBatchCreateNotesRequest::initializeModel() {

    m_notes_isSet = false;
    m_notes_isValid = false;
}

void OAIBatchCreateNotesRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBatchCreateNotesRequest::fromJsonObject(QJsonObject json) {

    m_notes_isValid = ::OpenAPI::fromJsonValue(m_notes, json[QString("notes")]);
    m_notes_isSet = !json[QString("notes")].isNull() && m_notes_isValid;
}

QString OAIBatchCreateNotesRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBatchCreateNotesRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_notes.size() > 0) {
        obj.insert(QString("notes"), ::OpenAPI::toJsonValue(m_notes));
    }
    return obj;
}

QMap<QString, OAINote> OAIBatchCreateNotesRequest::getNotes() const {
    return m_notes;
}
void OAIBatchCreateNotesRequest::setNotes(const QMap<QString, OAINote> &notes) {
    m_notes = notes;
    m_notes_isSet = true;
}

bool OAIBatchCreateNotesRequest::is_notes_Set() const{
    return m_notes_isSet;
}

bool OAIBatchCreateNotesRequest::is_notes_Valid() const{
    return m_notes_isValid;
}

bool OAIBatchCreateNotesRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_notes.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBatchCreateNotesRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
