/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVulnerabilityLocation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVulnerabilityLocation::OAIVulnerabilityLocation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVulnerabilityLocation::OAIVulnerabilityLocation() {
    this->initializeModel();
}

OAIVulnerabilityLocation::~OAIVulnerabilityLocation() {}

void OAIVulnerabilityLocation::initializeModel() {

    m_cpe_uri_isSet = false;
    m_cpe_uri_isValid = false;

    m_package_isSet = false;
    m_package_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIVulnerabilityLocation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVulnerabilityLocation::fromJsonObject(QJsonObject json) {

    m_cpe_uri_isValid = ::OpenAPI::fromJsonValue(m_cpe_uri, json[QString("cpeUri")]);
    m_cpe_uri_isSet = !json[QString("cpeUri")].isNull() && m_cpe_uri_isValid;

    m_package_isValid = ::OpenAPI::fromJsonValue(m_package, json[QString("package")]);
    m_package_isSet = !json[QString("package")].isNull() && m_package_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIVulnerabilityLocation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVulnerabilityLocation::asJsonObject() const {
    QJsonObject obj;
    if (m_cpe_uri_isSet) {
        obj.insert(QString("cpeUri"), ::OpenAPI::toJsonValue(m_cpe_uri));
    }
    if (m_package_isSet) {
        obj.insert(QString("package"), ::OpenAPI::toJsonValue(m_package));
    }
    if (m_version.isSet()) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QString OAIVulnerabilityLocation::getCpeUri() const {
    return m_cpe_uri;
}
void OAIVulnerabilityLocation::setCpeUri(const QString &cpe_uri) {
    m_cpe_uri = cpe_uri;
    m_cpe_uri_isSet = true;
}

bool OAIVulnerabilityLocation::is_cpe_uri_Set() const{
    return m_cpe_uri_isSet;
}

bool OAIVulnerabilityLocation::is_cpe_uri_Valid() const{
    return m_cpe_uri_isValid;
}

QString OAIVulnerabilityLocation::getPackage() const {
    return m_package;
}
void OAIVulnerabilityLocation::setPackage(const QString &package) {
    m_package = package;
    m_package_isSet = true;
}

bool OAIVulnerabilityLocation::is_package_Set() const{
    return m_package_isSet;
}

bool OAIVulnerabilityLocation::is_package_Valid() const{
    return m_package_isValid;
}

OAIVersion OAIVulnerabilityLocation::getVersion() const {
    return m_version;
}
void OAIVulnerabilityLocation::setVersion(const OAIVersion &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIVulnerabilityLocation::is_version_Set() const{
    return m_version_isSet;
}

bool OAIVulnerabilityLocation::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIVulnerabilityLocation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cpe_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_package_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVulnerabilityLocation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
