/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIContaineranalysisGoogleDevtoolsCloudbuildV1Hash.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIContaineranalysisGoogleDevtoolsCloudbuildV1Hash::OAIContaineranalysisGoogleDevtoolsCloudbuildV1Hash(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIContaineranalysisGoogleDevtoolsCloudbuildV1Hash::OAIContaineranalysisGoogleDevtoolsCloudbuildV1Hash() {
    this->initializeModel();
}

OAIContaineranalysisGoogleDevtoolsCloudbuildV1Hash::~OAIContaineranalysisGoogleDevtoolsCloudbuildV1Hash() {}

void OAIContaineranalysisGoogleDevtoolsCloudbuildV1Hash::initializeModel() {

    m_type_isSet = false;
    m_type_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIContaineranalysisGoogleDevtoolsCloudbuildV1Hash::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIContaineranalysisGoogleDevtoolsCloudbuildV1Hash::fromJsonObject(QJsonObject json) {

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAIContaineranalysisGoogleDevtoolsCloudbuildV1Hash::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIContaineranalysisGoogleDevtoolsCloudbuildV1Hash::asJsonObject() const {
    QJsonObject obj;
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

QString OAIContaineranalysisGoogleDevtoolsCloudbuildV1Hash::getType() const {
    return m_type;
}
void OAIContaineranalysisGoogleDevtoolsCloudbuildV1Hash::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1Hash::is_type_Set() const{
    return m_type_isSet;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1Hash::is_type_Valid() const{
    return m_type_isValid;
}

QByteArray OAIContaineranalysisGoogleDevtoolsCloudbuildV1Hash::getValue() const {
    return m_value;
}
void OAIContaineranalysisGoogleDevtoolsCloudbuildV1Hash::setValue(const QByteArray &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1Hash::is_value_Set() const{
    return m_value_isSet;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1Hash::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1Hash::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1Hash::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
