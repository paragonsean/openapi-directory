/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPackageInfoNote.h
 *
 * PackageInfoNote represents an SPDX Package Information section: https://spdx.github.io/spdx-spec/3-package-information/
 */

#ifndef OAIPackageInfoNote_H
#define OAIPackageInfoNote_H

#include <QJsonObject>

#include "OAIExternalRef.h"
#include "OAILicense.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIExternalRef;
class OAILicense;

class OAIPackageInfoNote : public OAIObject {
public:
    OAIPackageInfoNote();
    OAIPackageInfoNote(QString json);
    ~OAIPackageInfoNote() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isAnalyzed() const;
    void setAnalyzed(const bool &analyzed);
    bool is_analyzed_Set() const;
    bool is_analyzed_Valid() const;

    QString getAttribution() const;
    void setAttribution(const QString &attribution);
    bool is_attribution_Set() const;
    bool is_attribution_Valid() const;

    QString getChecksum() const;
    void setChecksum(const QString &checksum);
    bool is_checksum_Set() const;
    bool is_checksum_Valid() const;

    QString getCopyright() const;
    void setCopyright(const QString &copyright);
    bool is_copyright_Set() const;
    bool is_copyright_Valid() const;

    QString getDetailedDescription() const;
    void setDetailedDescription(const QString &detailed_description);
    bool is_detailed_description_Set() const;
    bool is_detailed_description_Valid() const;

    QString getDownloadLocation() const;
    void setDownloadLocation(const QString &download_location);
    bool is_download_location_Set() const;
    bool is_download_location_Valid() const;

    QList<OAIExternalRef> getExternalRefs() const;
    void setExternalRefs(const QList<OAIExternalRef> &external_refs);
    bool is_external_refs_Set() const;
    bool is_external_refs_Valid() const;

    QList<QString> getFilesLicenseInfo() const;
    void setFilesLicenseInfo(const QList<QString> &files_license_info);
    bool is_files_license_info_Set() const;
    bool is_files_license_info_Valid() const;

    QString getHomePage() const;
    void setHomePage(const QString &home_page);
    bool is_home_page_Set() const;
    bool is_home_page_Valid() const;

    OAILicense getLicenseDeclared() const;
    void setLicenseDeclared(const OAILicense &license_declared);
    bool is_license_declared_Set() const;
    bool is_license_declared_Valid() const;

    QString getOriginator() const;
    void setOriginator(const QString &originator);
    bool is_originator_Set() const;
    bool is_originator_Valid() const;

    QString getPackageType() const;
    void setPackageType(const QString &package_type);
    bool is_package_type_Set() const;
    bool is_package_type_Valid() const;

    QString getSummaryDescription() const;
    void setSummaryDescription(const QString &summary_description);
    bool is_summary_description_Set() const;
    bool is_summary_description_Valid() const;

    QString getSupplier() const;
    void setSupplier(const QString &supplier);
    bool is_supplier_Set() const;
    bool is_supplier_Valid() const;

    QString getTitle() const;
    void setTitle(const QString &title);
    bool is_title_Set() const;
    bool is_title_Valid() const;

    QString getVerificationCode() const;
    void setVerificationCode(const QString &verification_code);
    bool is_verification_code_Set() const;
    bool is_verification_code_Valid() const;

    QString getVersion() const;
    void setVersion(const QString &version);
    bool is_version_Set() const;
    bool is_version_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_analyzed;
    bool m_analyzed_isSet;
    bool m_analyzed_isValid;

    QString m_attribution;
    bool m_attribution_isSet;
    bool m_attribution_isValid;

    QString m_checksum;
    bool m_checksum_isSet;
    bool m_checksum_isValid;

    QString m_copyright;
    bool m_copyright_isSet;
    bool m_copyright_isValid;

    QString m_detailed_description;
    bool m_detailed_description_isSet;
    bool m_detailed_description_isValid;

    QString m_download_location;
    bool m_download_location_isSet;
    bool m_download_location_isValid;

    QList<OAIExternalRef> m_external_refs;
    bool m_external_refs_isSet;
    bool m_external_refs_isValid;

    QList<QString> m_files_license_info;
    bool m_files_license_info_isSet;
    bool m_files_license_info_isValid;

    QString m_home_page;
    bool m_home_page_isSet;
    bool m_home_page_isValid;

    OAILicense m_license_declared;
    bool m_license_declared_isSet;
    bool m_license_declared_isValid;

    QString m_originator;
    bool m_originator_isSet;
    bool m_originator_isValid;

    QString m_package_type;
    bool m_package_type_isSet;
    bool m_package_type_isValid;

    QString m_summary_description;
    bool m_summary_description_isSet;
    bool m_summary_description_isValid;

    QString m_supplier;
    bool m_supplier_isSet;
    bool m_supplier_isValid;

    QString m_title;
    bool m_title_isSet;
    bool m_title_isValid;

    QString m_verification_code;
    bool m_verification_code_isSet;
    bool m_verification_code_isValid;

    QString m_version;
    bool m_version_isSet;
    bool m_version_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPackageInfoNote)

#endif // OAIPackageInfoNote_H
