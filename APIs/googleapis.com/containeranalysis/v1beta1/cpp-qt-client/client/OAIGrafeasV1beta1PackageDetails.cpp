/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGrafeasV1beta1PackageDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGrafeasV1beta1PackageDetails::OAIGrafeasV1beta1PackageDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGrafeasV1beta1PackageDetails::OAIGrafeasV1beta1PackageDetails() {
    this->initializeModel();
}

OAIGrafeasV1beta1PackageDetails::~OAIGrafeasV1beta1PackageDetails() {}

void OAIGrafeasV1beta1PackageDetails::initializeModel() {

    m_installation_isSet = false;
    m_installation_isValid = false;
}

void OAIGrafeasV1beta1PackageDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGrafeasV1beta1PackageDetails::fromJsonObject(QJsonObject json) {

    m_installation_isValid = ::OpenAPI::fromJsonValue(m_installation, json[QString("installation")]);
    m_installation_isSet = !json[QString("installation")].isNull() && m_installation_isValid;
}

QString OAIGrafeasV1beta1PackageDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGrafeasV1beta1PackageDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_installation.isSet()) {
        obj.insert(QString("installation"), ::OpenAPI::toJsonValue(m_installation));
    }
    return obj;
}

OAIInstallation OAIGrafeasV1beta1PackageDetails::getInstallation() const {
    return m_installation;
}
void OAIGrafeasV1beta1PackageDetails::setInstallation(const OAIInstallation &installation) {
    m_installation = installation;
    m_installation_isSet = true;
}

bool OAIGrafeasV1beta1PackageDetails::is_installation_Set() const{
    return m_installation_isSet;
}

bool OAIGrafeasV1beta1PackageDetails::is_installation_Valid() const{
    return m_installation_isValid;
}

bool OAIGrafeasV1beta1PackageDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_installation.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGrafeasV1beta1PackageDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
