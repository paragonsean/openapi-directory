/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPackagesSummaryResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPackagesSummaryResponse::OAIPackagesSummaryResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPackagesSummaryResponse::OAIPackagesSummaryResponse() {
    this->initializeModel();
}

OAIPackagesSummaryResponse::~OAIPackagesSummaryResponse() {}

void OAIPackagesSummaryResponse::initializeModel() {

    m_licenses_summary_isSet = false;
    m_licenses_summary_isValid = false;

    m_resource_url_isSet = false;
    m_resource_url_isValid = false;
}

void OAIPackagesSummaryResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPackagesSummaryResponse::fromJsonObject(QJsonObject json) {

    m_licenses_summary_isValid = ::OpenAPI::fromJsonValue(m_licenses_summary, json[QString("licensesSummary")]);
    m_licenses_summary_isSet = !json[QString("licensesSummary")].isNull() && m_licenses_summary_isValid;

    m_resource_url_isValid = ::OpenAPI::fromJsonValue(m_resource_url, json[QString("resourceUrl")]);
    m_resource_url_isSet = !json[QString("resourceUrl")].isNull() && m_resource_url_isValid;
}

QString OAIPackagesSummaryResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPackagesSummaryResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_licenses_summary.size() > 0) {
        obj.insert(QString("licensesSummary"), ::OpenAPI::toJsonValue(m_licenses_summary));
    }
    if (m_resource_url_isSet) {
        obj.insert(QString("resourceUrl"), ::OpenAPI::toJsonValue(m_resource_url));
    }
    return obj;
}

QList<OAILicensesSummary> OAIPackagesSummaryResponse::getLicensesSummary() const {
    return m_licenses_summary;
}
void OAIPackagesSummaryResponse::setLicensesSummary(const QList<OAILicensesSummary> &licenses_summary) {
    m_licenses_summary = licenses_summary;
    m_licenses_summary_isSet = true;
}

bool OAIPackagesSummaryResponse::is_licenses_summary_Set() const{
    return m_licenses_summary_isSet;
}

bool OAIPackagesSummaryResponse::is_licenses_summary_Valid() const{
    return m_licenses_summary_isValid;
}

QString OAIPackagesSummaryResponse::getResourceUrl() const {
    return m_resource_url;
}
void OAIPackagesSummaryResponse::setResourceUrl(const QString &resource_url) {
    m_resource_url = resource_url;
    m_resource_url_isSet = true;
}

bool OAIPackagesSummaryResponse::is_resource_url_Set() const{
    return m_resource_url_isSet;
}

bool OAIPackagesSummaryResponse::is_resource_url_Valid() const{
    return m_resource_url_isValid;
}

bool OAIPackagesSummaryResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_licenses_summary.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPackagesSummaryResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
