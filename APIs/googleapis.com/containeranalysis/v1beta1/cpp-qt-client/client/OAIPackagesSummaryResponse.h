/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPackagesSummaryResponse.h
 *
 * A summary of the packages found within the given resource.
 */

#ifndef OAIPackagesSummaryResponse_H
#define OAIPackagesSummaryResponse_H

#include <QJsonObject>

#include "OAILicensesSummary.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAILicensesSummary;

class OAIPackagesSummaryResponse : public OAIObject {
public:
    OAIPackagesSummaryResponse();
    OAIPackagesSummaryResponse(QString json);
    ~OAIPackagesSummaryResponse() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<OAILicensesSummary> getLicensesSummary() const;
    void setLicensesSummary(const QList<OAILicensesSummary> &licenses_summary);
    bool is_licenses_summary_Set() const;
    bool is_licenses_summary_Valid() const;

    QString getResourceUrl() const;
    void setResourceUrl(const QString &resource_url);
    bool is_resource_url_Set() const;
    bool is_resource_url_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<OAILicensesSummary> m_licenses_summary;
    bool m_licenses_summary_isSet;
    bool m_licenses_summary_isValid;

    QString m_resource_url;
    bool m_resource_url_isSet;
    bool m_resource_url_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPackagesSummaryResponse)

#endif // OAIPackagesSummaryResponse_H
