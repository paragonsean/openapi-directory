/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPackageInfoNote.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPackageInfoNote::OAIPackageInfoNote(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPackageInfoNote::OAIPackageInfoNote() {
    this->initializeModel();
}

OAIPackageInfoNote::~OAIPackageInfoNote() {}

void OAIPackageInfoNote::initializeModel() {

    m_analyzed_isSet = false;
    m_analyzed_isValid = false;

    m_attribution_isSet = false;
    m_attribution_isValid = false;

    m_checksum_isSet = false;
    m_checksum_isValid = false;

    m_copyright_isSet = false;
    m_copyright_isValid = false;

    m_detailed_description_isSet = false;
    m_detailed_description_isValid = false;

    m_download_location_isSet = false;
    m_download_location_isValid = false;

    m_external_refs_isSet = false;
    m_external_refs_isValid = false;

    m_files_license_info_isSet = false;
    m_files_license_info_isValid = false;

    m_home_page_isSet = false;
    m_home_page_isValid = false;

    m_license_declared_isSet = false;
    m_license_declared_isValid = false;

    m_originator_isSet = false;
    m_originator_isValid = false;

    m_package_type_isSet = false;
    m_package_type_isValid = false;

    m_summary_description_isSet = false;
    m_summary_description_isValid = false;

    m_supplier_isSet = false;
    m_supplier_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_verification_code_isSet = false;
    m_verification_code_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIPackageInfoNote::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPackageInfoNote::fromJsonObject(QJsonObject json) {

    m_analyzed_isValid = ::OpenAPI::fromJsonValue(m_analyzed, json[QString("analyzed")]);
    m_analyzed_isSet = !json[QString("analyzed")].isNull() && m_analyzed_isValid;

    m_attribution_isValid = ::OpenAPI::fromJsonValue(m_attribution, json[QString("attribution")]);
    m_attribution_isSet = !json[QString("attribution")].isNull() && m_attribution_isValid;

    m_checksum_isValid = ::OpenAPI::fromJsonValue(m_checksum, json[QString("checksum")]);
    m_checksum_isSet = !json[QString("checksum")].isNull() && m_checksum_isValid;

    m_copyright_isValid = ::OpenAPI::fromJsonValue(m_copyright, json[QString("copyright")]);
    m_copyright_isSet = !json[QString("copyright")].isNull() && m_copyright_isValid;

    m_detailed_description_isValid = ::OpenAPI::fromJsonValue(m_detailed_description, json[QString("detailedDescription")]);
    m_detailed_description_isSet = !json[QString("detailedDescription")].isNull() && m_detailed_description_isValid;

    m_download_location_isValid = ::OpenAPI::fromJsonValue(m_download_location, json[QString("downloadLocation")]);
    m_download_location_isSet = !json[QString("downloadLocation")].isNull() && m_download_location_isValid;

    m_external_refs_isValid = ::OpenAPI::fromJsonValue(m_external_refs, json[QString("externalRefs")]);
    m_external_refs_isSet = !json[QString("externalRefs")].isNull() && m_external_refs_isValid;

    m_files_license_info_isValid = ::OpenAPI::fromJsonValue(m_files_license_info, json[QString("filesLicenseInfo")]);
    m_files_license_info_isSet = !json[QString("filesLicenseInfo")].isNull() && m_files_license_info_isValid;

    m_home_page_isValid = ::OpenAPI::fromJsonValue(m_home_page, json[QString("homePage")]);
    m_home_page_isSet = !json[QString("homePage")].isNull() && m_home_page_isValid;

    m_license_declared_isValid = ::OpenAPI::fromJsonValue(m_license_declared, json[QString("licenseDeclared")]);
    m_license_declared_isSet = !json[QString("licenseDeclared")].isNull() && m_license_declared_isValid;

    m_originator_isValid = ::OpenAPI::fromJsonValue(m_originator, json[QString("originator")]);
    m_originator_isSet = !json[QString("originator")].isNull() && m_originator_isValid;

    m_package_type_isValid = ::OpenAPI::fromJsonValue(m_package_type, json[QString("packageType")]);
    m_package_type_isSet = !json[QString("packageType")].isNull() && m_package_type_isValid;

    m_summary_description_isValid = ::OpenAPI::fromJsonValue(m_summary_description, json[QString("summaryDescription")]);
    m_summary_description_isSet = !json[QString("summaryDescription")].isNull() && m_summary_description_isValid;

    m_supplier_isValid = ::OpenAPI::fromJsonValue(m_supplier, json[QString("supplier")]);
    m_supplier_isSet = !json[QString("supplier")].isNull() && m_supplier_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_verification_code_isValid = ::OpenAPI::fromJsonValue(m_verification_code, json[QString("verificationCode")]);
    m_verification_code_isSet = !json[QString("verificationCode")].isNull() && m_verification_code_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIPackageInfoNote::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPackageInfoNote::asJsonObject() const {
    QJsonObject obj;
    if (m_analyzed_isSet) {
        obj.insert(QString("analyzed"), ::OpenAPI::toJsonValue(m_analyzed));
    }
    if (m_attribution_isSet) {
        obj.insert(QString("attribution"), ::OpenAPI::toJsonValue(m_attribution));
    }
    if (m_checksum_isSet) {
        obj.insert(QString("checksum"), ::OpenAPI::toJsonValue(m_checksum));
    }
    if (m_copyright_isSet) {
        obj.insert(QString("copyright"), ::OpenAPI::toJsonValue(m_copyright));
    }
    if (m_detailed_description_isSet) {
        obj.insert(QString("detailedDescription"), ::OpenAPI::toJsonValue(m_detailed_description));
    }
    if (m_download_location_isSet) {
        obj.insert(QString("downloadLocation"), ::OpenAPI::toJsonValue(m_download_location));
    }
    if (m_external_refs.size() > 0) {
        obj.insert(QString("externalRefs"), ::OpenAPI::toJsonValue(m_external_refs));
    }
    if (m_files_license_info.size() > 0) {
        obj.insert(QString("filesLicenseInfo"), ::OpenAPI::toJsonValue(m_files_license_info));
    }
    if (m_home_page_isSet) {
        obj.insert(QString("homePage"), ::OpenAPI::toJsonValue(m_home_page));
    }
    if (m_license_declared.isSet()) {
        obj.insert(QString("licenseDeclared"), ::OpenAPI::toJsonValue(m_license_declared));
    }
    if (m_originator_isSet) {
        obj.insert(QString("originator"), ::OpenAPI::toJsonValue(m_originator));
    }
    if (m_package_type_isSet) {
        obj.insert(QString("packageType"), ::OpenAPI::toJsonValue(m_package_type));
    }
    if (m_summary_description_isSet) {
        obj.insert(QString("summaryDescription"), ::OpenAPI::toJsonValue(m_summary_description));
    }
    if (m_supplier_isSet) {
        obj.insert(QString("supplier"), ::OpenAPI::toJsonValue(m_supplier));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_verification_code_isSet) {
        obj.insert(QString("verificationCode"), ::OpenAPI::toJsonValue(m_verification_code));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

bool OAIPackageInfoNote::isAnalyzed() const {
    return m_analyzed;
}
void OAIPackageInfoNote::setAnalyzed(const bool &analyzed) {
    m_analyzed = analyzed;
    m_analyzed_isSet = true;
}

bool OAIPackageInfoNote::is_analyzed_Set() const{
    return m_analyzed_isSet;
}

bool OAIPackageInfoNote::is_analyzed_Valid() const{
    return m_analyzed_isValid;
}

QString OAIPackageInfoNote::getAttribution() const {
    return m_attribution;
}
void OAIPackageInfoNote::setAttribution(const QString &attribution) {
    m_attribution = attribution;
    m_attribution_isSet = true;
}

bool OAIPackageInfoNote::is_attribution_Set() const{
    return m_attribution_isSet;
}

bool OAIPackageInfoNote::is_attribution_Valid() const{
    return m_attribution_isValid;
}

QString OAIPackageInfoNote::getChecksum() const {
    return m_checksum;
}
void OAIPackageInfoNote::setChecksum(const QString &checksum) {
    m_checksum = checksum;
    m_checksum_isSet = true;
}

bool OAIPackageInfoNote::is_checksum_Set() const{
    return m_checksum_isSet;
}

bool OAIPackageInfoNote::is_checksum_Valid() const{
    return m_checksum_isValid;
}

QString OAIPackageInfoNote::getCopyright() const {
    return m_copyright;
}
void OAIPackageInfoNote::setCopyright(const QString &copyright) {
    m_copyright = copyright;
    m_copyright_isSet = true;
}

bool OAIPackageInfoNote::is_copyright_Set() const{
    return m_copyright_isSet;
}

bool OAIPackageInfoNote::is_copyright_Valid() const{
    return m_copyright_isValid;
}

QString OAIPackageInfoNote::getDetailedDescription() const {
    return m_detailed_description;
}
void OAIPackageInfoNote::setDetailedDescription(const QString &detailed_description) {
    m_detailed_description = detailed_description;
    m_detailed_description_isSet = true;
}

bool OAIPackageInfoNote::is_detailed_description_Set() const{
    return m_detailed_description_isSet;
}

bool OAIPackageInfoNote::is_detailed_description_Valid() const{
    return m_detailed_description_isValid;
}

QString OAIPackageInfoNote::getDownloadLocation() const {
    return m_download_location;
}
void OAIPackageInfoNote::setDownloadLocation(const QString &download_location) {
    m_download_location = download_location;
    m_download_location_isSet = true;
}

bool OAIPackageInfoNote::is_download_location_Set() const{
    return m_download_location_isSet;
}

bool OAIPackageInfoNote::is_download_location_Valid() const{
    return m_download_location_isValid;
}

QList<OAIExternalRef> OAIPackageInfoNote::getExternalRefs() const {
    return m_external_refs;
}
void OAIPackageInfoNote::setExternalRefs(const QList<OAIExternalRef> &external_refs) {
    m_external_refs = external_refs;
    m_external_refs_isSet = true;
}

bool OAIPackageInfoNote::is_external_refs_Set() const{
    return m_external_refs_isSet;
}

bool OAIPackageInfoNote::is_external_refs_Valid() const{
    return m_external_refs_isValid;
}

QList<QString> OAIPackageInfoNote::getFilesLicenseInfo() const {
    return m_files_license_info;
}
void OAIPackageInfoNote::setFilesLicenseInfo(const QList<QString> &files_license_info) {
    m_files_license_info = files_license_info;
    m_files_license_info_isSet = true;
}

bool OAIPackageInfoNote::is_files_license_info_Set() const{
    return m_files_license_info_isSet;
}

bool OAIPackageInfoNote::is_files_license_info_Valid() const{
    return m_files_license_info_isValid;
}

QString OAIPackageInfoNote::getHomePage() const {
    return m_home_page;
}
void OAIPackageInfoNote::setHomePage(const QString &home_page) {
    m_home_page = home_page;
    m_home_page_isSet = true;
}

bool OAIPackageInfoNote::is_home_page_Set() const{
    return m_home_page_isSet;
}

bool OAIPackageInfoNote::is_home_page_Valid() const{
    return m_home_page_isValid;
}

OAILicense OAIPackageInfoNote::getLicenseDeclared() const {
    return m_license_declared;
}
void OAIPackageInfoNote::setLicenseDeclared(const OAILicense &license_declared) {
    m_license_declared = license_declared;
    m_license_declared_isSet = true;
}

bool OAIPackageInfoNote::is_license_declared_Set() const{
    return m_license_declared_isSet;
}

bool OAIPackageInfoNote::is_license_declared_Valid() const{
    return m_license_declared_isValid;
}

QString OAIPackageInfoNote::getOriginator() const {
    return m_originator;
}
void OAIPackageInfoNote::setOriginator(const QString &originator) {
    m_originator = originator;
    m_originator_isSet = true;
}

bool OAIPackageInfoNote::is_originator_Set() const{
    return m_originator_isSet;
}

bool OAIPackageInfoNote::is_originator_Valid() const{
    return m_originator_isValid;
}

QString OAIPackageInfoNote::getPackageType() const {
    return m_package_type;
}
void OAIPackageInfoNote::setPackageType(const QString &package_type) {
    m_package_type = package_type;
    m_package_type_isSet = true;
}

bool OAIPackageInfoNote::is_package_type_Set() const{
    return m_package_type_isSet;
}

bool OAIPackageInfoNote::is_package_type_Valid() const{
    return m_package_type_isValid;
}

QString OAIPackageInfoNote::getSummaryDescription() const {
    return m_summary_description;
}
void OAIPackageInfoNote::setSummaryDescription(const QString &summary_description) {
    m_summary_description = summary_description;
    m_summary_description_isSet = true;
}

bool OAIPackageInfoNote::is_summary_description_Set() const{
    return m_summary_description_isSet;
}

bool OAIPackageInfoNote::is_summary_description_Valid() const{
    return m_summary_description_isValid;
}

QString OAIPackageInfoNote::getSupplier() const {
    return m_supplier;
}
void OAIPackageInfoNote::setSupplier(const QString &supplier) {
    m_supplier = supplier;
    m_supplier_isSet = true;
}

bool OAIPackageInfoNote::is_supplier_Set() const{
    return m_supplier_isSet;
}

bool OAIPackageInfoNote::is_supplier_Valid() const{
    return m_supplier_isValid;
}

QString OAIPackageInfoNote::getTitle() const {
    return m_title;
}
void OAIPackageInfoNote::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIPackageInfoNote::is_title_Set() const{
    return m_title_isSet;
}

bool OAIPackageInfoNote::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIPackageInfoNote::getVerificationCode() const {
    return m_verification_code;
}
void OAIPackageInfoNote::setVerificationCode(const QString &verification_code) {
    m_verification_code = verification_code;
    m_verification_code_isSet = true;
}

bool OAIPackageInfoNote::is_verification_code_Set() const{
    return m_verification_code_isSet;
}

bool OAIPackageInfoNote::is_verification_code_Valid() const{
    return m_verification_code_isValid;
}

QString OAIPackageInfoNote::getVersion() const {
    return m_version;
}
void OAIPackageInfoNote::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIPackageInfoNote::is_version_Set() const{
    return m_version_isSet;
}

bool OAIPackageInfoNote::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIPackageInfoNote::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_analyzed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attribution_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_checksum_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_copyright_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_detailed_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_download_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_refs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_files_license_info.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_home_page_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_license_declared.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_originator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_package_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_summary_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_supplier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_verification_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPackageInfoNote::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
