/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIBuildSignature.h
 *
 * Message encapsulating the signature of the verified build.
 */

#ifndef OAIBuildSignature_H
#define OAIBuildSignature_H

#include <QJsonObject>

#include <QByteArray>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIBuildSignature : public OAIObject {
public:
    OAIBuildSignature();
    OAIBuildSignature(QString json);
    ~OAIBuildSignature() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getKeyId() const;
    void setKeyId(const QString &key_id);
    bool is_key_id_Set() const;
    bool is_key_id_Valid() const;

    QString getKeyType() const;
    void setKeyType(const QString &key_type);
    bool is_key_type_Set() const;
    bool is_key_type_Valid() const;

    QString getPublicKey() const;
    void setPublicKey(const QString &public_key);
    bool is_public_key_Set() const;
    bool is_public_key_Valid() const;

    QByteArray getSignature() const;
    void setSignature(const QByteArray &signature);
    bool is_signature_Set() const;
    bool is_signature_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_key_id;
    bool m_key_id_isSet;
    bool m_key_id_isValid;

    QString m_key_type;
    bool m_key_type_isSet;
    bool m_key_type_isValid;

    QString m_public_key;
    bool m_public_key_isSet;
    bool m_public_key_isValid;

    QByteArray m_signature;
    bool m_signature_isSet;
    bool m_signature_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIBuildSignature)

#endif // OAIBuildSignature_H
