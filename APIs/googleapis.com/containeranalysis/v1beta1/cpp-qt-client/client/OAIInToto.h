/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIInToto.h
 *
 * This contains the fields corresponding to the definition of a software supply chain step in an in-toto layout. This information goes into a Grafeas note.
 */

#ifndef OAIInToto_H
#define OAIInToto_H

#include <QJsonObject>

#include "OAIArtifactRule.h"
#include "OAISigningKey.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIArtifactRule;
class OAISigningKey;

class OAIInToto : public OAIObject {
public:
    OAIInToto();
    OAIInToto(QString json);
    ~OAIInToto() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<QString> getExpectedCommand() const;
    void setExpectedCommand(const QList<QString> &expected_command);
    bool is_expected_command_Set() const;
    bool is_expected_command_Valid() const;

    QList<OAIArtifactRule> getExpectedMaterials() const;
    void setExpectedMaterials(const QList<OAIArtifactRule> &expected_materials);
    bool is_expected_materials_Set() const;
    bool is_expected_materials_Valid() const;

    QList<OAIArtifactRule> getExpectedProducts() const;
    void setExpectedProducts(const QList<OAIArtifactRule> &expected_products);
    bool is_expected_products_Set() const;
    bool is_expected_products_Valid() const;

    QList<OAISigningKey> getSigningKeys() const;
    void setSigningKeys(const QList<OAISigningKey> &signing_keys);
    bool is_signing_keys_Set() const;
    bool is_signing_keys_Valid() const;

    QString getStepName() const;
    void setStepName(const QString &step_name);
    bool is_step_name_Set() const;
    bool is_step_name_Valid() const;

    QString getThreshold() const;
    void setThreshold(const QString &threshold);
    bool is_threshold_Set() const;
    bool is_threshold_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<QString> m_expected_command;
    bool m_expected_command_isSet;
    bool m_expected_command_isValid;

    QList<OAIArtifactRule> m_expected_materials;
    bool m_expected_materials_isSet;
    bool m_expected_materials_isValid;

    QList<OAIArtifactRule> m_expected_products;
    bool m_expected_products_isSet;
    bool m_expected_products_isValid;

    QList<OAISigningKey> m_signing_keys;
    bool m_signing_keys_isSet;
    bool m_signing_keys_isValid;

    QString m_step_name;
    bool m_step_name_isSet;
    bool m_step_name_isValid;

    QString m_threshold;
    bool m_threshold_isSet;
    bool m_threshold_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIInToto)

#endif // OAIInToto_H
