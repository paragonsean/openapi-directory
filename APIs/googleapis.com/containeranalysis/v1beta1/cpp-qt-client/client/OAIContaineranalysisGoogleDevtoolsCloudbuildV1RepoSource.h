/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource.h
 *
 * Location of the source in a Google Cloud Source Repository.
 */

#ifndef OAIContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource_H
#define OAIContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource_H

#include <QJsonObject>

#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource : public OAIObject {
public:
    OAIContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource();
    OAIContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource(QString json);
    ~OAIContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getBranchName() const;
    void setBranchName(const QString &branch_name);
    bool is_branch_name_Set() const;
    bool is_branch_name_Valid() const;

    QString getCommitSha() const;
    void setCommitSha(const QString &commit_sha);
    bool is_commit_sha_Set() const;
    bool is_commit_sha_Valid() const;

    QString getDir() const;
    void setDir(const QString &dir);
    bool is_dir_Set() const;
    bool is_dir_Valid() const;

    bool isInvertRegex() const;
    void setInvertRegex(const bool &invert_regex);
    bool is_invert_regex_Set() const;
    bool is_invert_regex_Valid() const;

    QString getProjectId() const;
    void setProjectId(const QString &project_id);
    bool is_project_id_Set() const;
    bool is_project_id_Valid() const;

    QString getRepoName() const;
    void setRepoName(const QString &repo_name);
    bool is_repo_name_Set() const;
    bool is_repo_name_Valid() const;

    QMap<QString, QString> getSubstitutions() const;
    void setSubstitutions(const QMap<QString, QString> &substitutions);
    bool is_substitutions_Set() const;
    bool is_substitutions_Valid() const;

    QString getTagName() const;
    void setTagName(const QString &tag_name);
    bool is_tag_name_Set() const;
    bool is_tag_name_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_branch_name;
    bool m_branch_name_isSet;
    bool m_branch_name_isValid;

    QString m_commit_sha;
    bool m_commit_sha_isSet;
    bool m_commit_sha_isValid;

    QString m_dir;
    bool m_dir_isSet;
    bool m_dir_isValid;

    bool m_invert_regex;
    bool m_invert_regex_isSet;
    bool m_invert_regex_isValid;

    QString m_project_id;
    bool m_project_id_isSet;
    bool m_project_id_isValid;

    QString m_repo_name;
    bool m_repo_name_isSet;
    bool m_repo_name_isValid;

    QMap<QString, QString> m_substitutions;
    bool m_substitutions_isSet;
    bool m_substitutions_isValid;

    QString m_tag_name;
    bool m_tag_name_isSet;
    bool m_tag_name_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource)

#endif // OAIContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource_H
