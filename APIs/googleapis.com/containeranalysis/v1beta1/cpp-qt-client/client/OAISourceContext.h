/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAISourceContext.h
 *
 * A SourceContext is a reference to a tree of files. A SourceContext together with a path point to a unique revision of a single file or directory.
 */

#ifndef OAISourceContext_H
#define OAISourceContext_H

#include <QJsonObject>

#include "OAICloudRepoSourceContext.h"
#include "OAIGerritSourceContext.h"
#include "OAIGitSourceContext.h"
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAICloudRepoSourceContext;
class OAIGerritSourceContext;
class OAIGitSourceContext;

class OAISourceContext : public OAIObject {
public:
    OAISourceContext();
    OAISourceContext(QString json);
    ~OAISourceContext() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAICloudRepoSourceContext getCloudRepo() const;
    void setCloudRepo(const OAICloudRepoSourceContext &cloud_repo);
    bool is_cloud_repo_Set() const;
    bool is_cloud_repo_Valid() const;

    OAIGerritSourceContext getGerrit() const;
    void setGerrit(const OAIGerritSourceContext &gerrit);
    bool is_gerrit_Set() const;
    bool is_gerrit_Valid() const;

    OAIGitSourceContext getGit() const;
    void setGit(const OAIGitSourceContext &git);
    bool is_git_Set() const;
    bool is_git_Valid() const;

    QMap<QString, QString> getLabels() const;
    void setLabels(const QMap<QString, QString> &labels);
    bool is_labels_Set() const;
    bool is_labels_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAICloudRepoSourceContext m_cloud_repo;
    bool m_cloud_repo_isSet;
    bool m_cloud_repo_isValid;

    OAIGerritSourceContext m_gerrit;
    bool m_gerrit_isSet;
    bool m_gerrit_isValid;

    OAIGitSourceContext m_git;
    bool m_git_isSet;
    bool m_git_isValid;

    QMap<QString, QString> m_labels;
    bool m_labels_isSet;
    bool m_labels_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAISourceContext)

#endif // OAISourceContext_H
