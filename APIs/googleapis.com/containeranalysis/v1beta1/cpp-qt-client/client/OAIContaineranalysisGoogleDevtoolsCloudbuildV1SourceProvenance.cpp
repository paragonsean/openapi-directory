/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance::OAIContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance::OAIContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance() {
    this->initializeModel();
}

OAIContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance::~OAIContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance() {}

void OAIContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance::initializeModel() {

    m_file_hashes_isSet = false;
    m_file_hashes_isValid = false;

    m_resolved_connected_repository_isSet = false;
    m_resolved_connected_repository_isValid = false;

    m_resolved_git_source_isSet = false;
    m_resolved_git_source_isValid = false;

    m_resolved_repo_source_isSet = false;
    m_resolved_repo_source_isValid = false;

    m_resolved_storage_source_isSet = false;
    m_resolved_storage_source_isValid = false;

    m_resolved_storage_source_manifest_isSet = false;
    m_resolved_storage_source_manifest_isValid = false;
}

void OAIContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance::fromJsonObject(QJsonObject json) {

    m_file_hashes_isValid = ::OpenAPI::fromJsonValue(m_file_hashes, json[QString("fileHashes")]);
    m_file_hashes_isSet = !json[QString("fileHashes")].isNull() && m_file_hashes_isValid;

    m_resolved_connected_repository_isValid = ::OpenAPI::fromJsonValue(m_resolved_connected_repository, json[QString("resolvedConnectedRepository")]);
    m_resolved_connected_repository_isSet = !json[QString("resolvedConnectedRepository")].isNull() && m_resolved_connected_repository_isValid;

    m_resolved_git_source_isValid = ::OpenAPI::fromJsonValue(m_resolved_git_source, json[QString("resolvedGitSource")]);
    m_resolved_git_source_isSet = !json[QString("resolvedGitSource")].isNull() && m_resolved_git_source_isValid;

    m_resolved_repo_source_isValid = ::OpenAPI::fromJsonValue(m_resolved_repo_source, json[QString("resolvedRepoSource")]);
    m_resolved_repo_source_isSet = !json[QString("resolvedRepoSource")].isNull() && m_resolved_repo_source_isValid;

    m_resolved_storage_source_isValid = ::OpenAPI::fromJsonValue(m_resolved_storage_source, json[QString("resolvedStorageSource")]);
    m_resolved_storage_source_isSet = !json[QString("resolvedStorageSource")].isNull() && m_resolved_storage_source_isValid;

    m_resolved_storage_source_manifest_isValid = ::OpenAPI::fromJsonValue(m_resolved_storage_source_manifest, json[QString("resolvedStorageSourceManifest")]);
    m_resolved_storage_source_manifest_isSet = !json[QString("resolvedStorageSourceManifest")].isNull() && m_resolved_storage_source_manifest_isValid;
}

QString OAIContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance::asJsonObject() const {
    QJsonObject obj;
    if (m_file_hashes.size() > 0) {
        obj.insert(QString("fileHashes"), ::OpenAPI::toJsonValue(m_file_hashes));
    }
    if (m_resolved_connected_repository.isSet()) {
        obj.insert(QString("resolvedConnectedRepository"), ::OpenAPI::toJsonValue(m_resolved_connected_repository));
    }
    if (m_resolved_git_source.isSet()) {
        obj.insert(QString("resolvedGitSource"), ::OpenAPI::toJsonValue(m_resolved_git_source));
    }
    if (m_resolved_repo_source.isSet()) {
        obj.insert(QString("resolvedRepoSource"), ::OpenAPI::toJsonValue(m_resolved_repo_source));
    }
    if (m_resolved_storage_source.isSet()) {
        obj.insert(QString("resolvedStorageSource"), ::OpenAPI::toJsonValue(m_resolved_storage_source));
    }
    if (m_resolved_storage_source_manifest.isSet()) {
        obj.insert(QString("resolvedStorageSourceManifest"), ::OpenAPI::toJsonValue(m_resolved_storage_source_manifest));
    }
    return obj;
}

QMap<QString, OAIContaineranalysisGoogleDevtoolsCloudbuildV1FileHashes> OAIContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance::getFileHashes() const {
    return m_file_hashes;
}
void OAIContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance::setFileHashes(const QMap<QString, OAIContaineranalysisGoogleDevtoolsCloudbuildV1FileHashes> &file_hashes) {
    m_file_hashes = file_hashes;
    m_file_hashes_isSet = true;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance::is_file_hashes_Set() const{
    return m_file_hashes_isSet;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance::is_file_hashes_Valid() const{
    return m_file_hashes_isValid;
}

OAIContaineranalysisGoogleDevtoolsCloudbuildV1ConnectedRepository OAIContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance::getResolvedConnectedRepository() const {
    return m_resolved_connected_repository;
}
void OAIContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance::setResolvedConnectedRepository(const OAIContaineranalysisGoogleDevtoolsCloudbuildV1ConnectedRepository &resolved_connected_repository) {
    m_resolved_connected_repository = resolved_connected_repository;
    m_resolved_connected_repository_isSet = true;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance::is_resolved_connected_repository_Set() const{
    return m_resolved_connected_repository_isSet;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance::is_resolved_connected_repository_Valid() const{
    return m_resolved_connected_repository_isValid;
}

OAIContaineranalysisGoogleDevtoolsCloudbuildV1GitSource OAIContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance::getResolvedGitSource() const {
    return m_resolved_git_source;
}
void OAIContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance::setResolvedGitSource(const OAIContaineranalysisGoogleDevtoolsCloudbuildV1GitSource &resolved_git_source) {
    m_resolved_git_source = resolved_git_source;
    m_resolved_git_source_isSet = true;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance::is_resolved_git_source_Set() const{
    return m_resolved_git_source_isSet;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance::is_resolved_git_source_Valid() const{
    return m_resolved_git_source_isValid;
}

OAIContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource OAIContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance::getResolvedRepoSource() const {
    return m_resolved_repo_source;
}
void OAIContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance::setResolvedRepoSource(const OAIContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource &resolved_repo_source) {
    m_resolved_repo_source = resolved_repo_source;
    m_resolved_repo_source_isSet = true;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance::is_resolved_repo_source_Set() const{
    return m_resolved_repo_source_isSet;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance::is_resolved_repo_source_Valid() const{
    return m_resolved_repo_source_isValid;
}

OAIContaineranalysisGoogleDevtoolsCloudbuildV1StorageSource OAIContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance::getResolvedStorageSource() const {
    return m_resolved_storage_source;
}
void OAIContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance::setResolvedStorageSource(const OAIContaineranalysisGoogleDevtoolsCloudbuildV1StorageSource &resolved_storage_source) {
    m_resolved_storage_source = resolved_storage_source;
    m_resolved_storage_source_isSet = true;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance::is_resolved_storage_source_Set() const{
    return m_resolved_storage_source_isSet;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance::is_resolved_storage_source_Valid() const{
    return m_resolved_storage_source_isValid;
}

OAIContaineranalysisGoogleDevtoolsCloudbuildV1StorageSourceManifest OAIContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance::getResolvedStorageSourceManifest() const {
    return m_resolved_storage_source_manifest;
}
void OAIContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance::setResolvedStorageSourceManifest(const OAIContaineranalysisGoogleDevtoolsCloudbuildV1StorageSourceManifest &resolved_storage_source_manifest) {
    m_resolved_storage_source_manifest = resolved_storage_source_manifest;
    m_resolved_storage_source_manifest_isSet = true;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance::is_resolved_storage_source_manifest_Set() const{
    return m_resolved_storage_source_manifest_isSet;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance::is_resolved_storage_source_manifest_Valid() const{
    return m_resolved_storage_source_manifest_isValid;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_file_hashes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_resolved_connected_repository.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resolved_git_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resolved_repo_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resolved_storage_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resolved_storage_source_manifest.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
