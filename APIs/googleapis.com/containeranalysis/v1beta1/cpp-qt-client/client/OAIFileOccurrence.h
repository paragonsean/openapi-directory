/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIFileOccurrence.h
 *
 * FileOccurrence represents an SPDX File Information section: https://spdx.github.io/spdx-spec/4-file-information/
 */

#ifndef OAIFileOccurrence_H
#define OAIFileOccurrence_H

#include <QJsonObject>

#include "OAILicense.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAILicense;

class OAIFileOccurrence : public OAIObject {
public:
    OAIFileOccurrence();
    OAIFileOccurrence(QString json);
    ~OAIFileOccurrence() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<QString> getAttributions() const;
    void setAttributions(const QList<QString> &attributions);
    bool is_attributions_Set() const;
    bool is_attributions_Valid() const;

    QString getComment() const;
    void setComment(const QString &comment);
    bool is_comment_Set() const;
    bool is_comment_Valid() const;

    QList<QString> getContributors() const;
    void setContributors(const QList<QString> &contributors);
    bool is_contributors_Set() const;
    bool is_contributors_Valid() const;

    QString getCopyright() const;
    void setCopyright(const QString &copyright);
    bool is_copyright_Set() const;
    bool is_copyright_Valid() const;

    QList<QString> getFilesLicenseInfo() const;
    void setFilesLicenseInfo(const QList<QString> &files_license_info);
    bool is_files_license_info_Set() const;
    bool is_files_license_info_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    OAILicense getLicenseConcluded() const;
    void setLicenseConcluded(const OAILicense &license_concluded);
    bool is_license_concluded_Set() const;
    bool is_license_concluded_Valid() const;

    QString getNotice() const;
    void setNotice(const QString &notice);
    bool is_notice_Set() const;
    bool is_notice_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<QString> m_attributions;
    bool m_attributions_isSet;
    bool m_attributions_isValid;

    QString m_comment;
    bool m_comment_isSet;
    bool m_comment_isValid;

    QList<QString> m_contributors;
    bool m_contributors_isSet;
    bool m_contributors_isValid;

    QString m_copyright;
    bool m_copyright_isSet;
    bool m_copyright_isValid;

    QList<QString> m_files_license_info;
    bool m_files_license_info_isSet;
    bool m_files_license_info_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    OAILicense m_license_concluded;
    bool m_license_concluded_isSet;
    bool m_license_concluded_isValid;

    QString m_notice;
    bool m_notice_isSet;
    bool m_notice_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIFileOccurrence)

#endif // OAIFileOccurrence_H
