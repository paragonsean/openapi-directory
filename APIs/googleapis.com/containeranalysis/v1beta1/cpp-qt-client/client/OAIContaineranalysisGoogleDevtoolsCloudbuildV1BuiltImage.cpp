/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIContaineranalysisGoogleDevtoolsCloudbuildV1BuiltImage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIContaineranalysisGoogleDevtoolsCloudbuildV1BuiltImage::OAIContaineranalysisGoogleDevtoolsCloudbuildV1BuiltImage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIContaineranalysisGoogleDevtoolsCloudbuildV1BuiltImage::OAIContaineranalysisGoogleDevtoolsCloudbuildV1BuiltImage() {
    this->initializeModel();
}

OAIContaineranalysisGoogleDevtoolsCloudbuildV1BuiltImage::~OAIContaineranalysisGoogleDevtoolsCloudbuildV1BuiltImage() {}

void OAIContaineranalysisGoogleDevtoolsCloudbuildV1BuiltImage::initializeModel() {

    m_digest_isSet = false;
    m_digest_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_push_timing_isSet = false;
    m_push_timing_isValid = false;
}

void OAIContaineranalysisGoogleDevtoolsCloudbuildV1BuiltImage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIContaineranalysisGoogleDevtoolsCloudbuildV1BuiltImage::fromJsonObject(QJsonObject json) {

    m_digest_isValid = ::OpenAPI::fromJsonValue(m_digest, json[QString("digest")]);
    m_digest_isSet = !json[QString("digest")].isNull() && m_digest_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_push_timing_isValid = ::OpenAPI::fromJsonValue(m_push_timing, json[QString("pushTiming")]);
    m_push_timing_isSet = !json[QString("pushTiming")].isNull() && m_push_timing_isValid;
}

QString OAIContaineranalysisGoogleDevtoolsCloudbuildV1BuiltImage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIContaineranalysisGoogleDevtoolsCloudbuildV1BuiltImage::asJsonObject() const {
    QJsonObject obj;
    if (m_digest_isSet) {
        obj.insert(QString("digest"), ::OpenAPI::toJsonValue(m_digest));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_push_timing.isSet()) {
        obj.insert(QString("pushTiming"), ::OpenAPI::toJsonValue(m_push_timing));
    }
    return obj;
}

QString OAIContaineranalysisGoogleDevtoolsCloudbuildV1BuiltImage::getDigest() const {
    return m_digest;
}
void OAIContaineranalysisGoogleDevtoolsCloudbuildV1BuiltImage::setDigest(const QString &digest) {
    m_digest = digest;
    m_digest_isSet = true;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1BuiltImage::is_digest_Set() const{
    return m_digest_isSet;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1BuiltImage::is_digest_Valid() const{
    return m_digest_isValid;
}

QString OAIContaineranalysisGoogleDevtoolsCloudbuildV1BuiltImage::getName() const {
    return m_name;
}
void OAIContaineranalysisGoogleDevtoolsCloudbuildV1BuiltImage::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1BuiltImage::is_name_Set() const{
    return m_name_isSet;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1BuiltImage::is_name_Valid() const{
    return m_name_isValid;
}

OAIContaineranalysisGoogleDevtoolsCloudbuildV1TimeSpan OAIContaineranalysisGoogleDevtoolsCloudbuildV1BuiltImage::getPushTiming() const {
    return m_push_timing;
}
void OAIContaineranalysisGoogleDevtoolsCloudbuildV1BuiltImage::setPushTiming(const OAIContaineranalysisGoogleDevtoolsCloudbuildV1TimeSpan &push_timing) {
    m_push_timing = push_timing;
    m_push_timing_isSet = true;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1BuiltImage::is_push_timing_Set() const{
    return m_push_timing_isSet;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1BuiltImage::is_push_timing_Valid() const{
    return m_push_timing_isValid;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1BuiltImage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_digest_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_push_timing.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1BuiltImage::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
