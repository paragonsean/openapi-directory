/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISigningKey.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISigningKey::OAISigningKey(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISigningKey::OAISigningKey() {
    this->initializeModel();
}

OAISigningKey::~OAISigningKey() {}

void OAISigningKey::initializeModel() {

    m_key_id_isSet = false;
    m_key_id_isValid = false;

    m_key_scheme_isSet = false;
    m_key_scheme_isValid = false;

    m_key_type_isSet = false;
    m_key_type_isValid = false;

    m_public_key_value_isSet = false;
    m_public_key_value_isValid = false;
}

void OAISigningKey::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISigningKey::fromJsonObject(QJsonObject json) {

    m_key_id_isValid = ::OpenAPI::fromJsonValue(m_key_id, json[QString("keyId")]);
    m_key_id_isSet = !json[QString("keyId")].isNull() && m_key_id_isValid;

    m_key_scheme_isValid = ::OpenAPI::fromJsonValue(m_key_scheme, json[QString("keyScheme")]);
    m_key_scheme_isSet = !json[QString("keyScheme")].isNull() && m_key_scheme_isValid;

    m_key_type_isValid = ::OpenAPI::fromJsonValue(m_key_type, json[QString("keyType")]);
    m_key_type_isSet = !json[QString("keyType")].isNull() && m_key_type_isValid;

    m_public_key_value_isValid = ::OpenAPI::fromJsonValue(m_public_key_value, json[QString("publicKeyValue")]);
    m_public_key_value_isSet = !json[QString("publicKeyValue")].isNull() && m_public_key_value_isValid;
}

QString OAISigningKey::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISigningKey::asJsonObject() const {
    QJsonObject obj;
    if (m_key_id_isSet) {
        obj.insert(QString("keyId"), ::OpenAPI::toJsonValue(m_key_id));
    }
    if (m_key_scheme_isSet) {
        obj.insert(QString("keyScheme"), ::OpenAPI::toJsonValue(m_key_scheme));
    }
    if (m_key_type_isSet) {
        obj.insert(QString("keyType"), ::OpenAPI::toJsonValue(m_key_type));
    }
    if (m_public_key_value_isSet) {
        obj.insert(QString("publicKeyValue"), ::OpenAPI::toJsonValue(m_public_key_value));
    }
    return obj;
}

QString OAISigningKey::getKeyId() const {
    return m_key_id;
}
void OAISigningKey::setKeyId(const QString &key_id) {
    m_key_id = key_id;
    m_key_id_isSet = true;
}

bool OAISigningKey::is_key_id_Set() const{
    return m_key_id_isSet;
}

bool OAISigningKey::is_key_id_Valid() const{
    return m_key_id_isValid;
}

QString OAISigningKey::getKeyScheme() const {
    return m_key_scheme;
}
void OAISigningKey::setKeyScheme(const QString &key_scheme) {
    m_key_scheme = key_scheme;
    m_key_scheme_isSet = true;
}

bool OAISigningKey::is_key_scheme_Set() const{
    return m_key_scheme_isSet;
}

bool OAISigningKey::is_key_scheme_Valid() const{
    return m_key_scheme_isValid;
}

QString OAISigningKey::getKeyType() const {
    return m_key_type;
}
void OAISigningKey::setKeyType(const QString &key_type) {
    m_key_type = key_type;
    m_key_type_isSet = true;
}

bool OAISigningKey::is_key_type_Set() const{
    return m_key_type_isSet;
}

bool OAISigningKey::is_key_type_Valid() const{
    return m_key_type_isValid;
}

QString OAISigningKey::getPublicKeyValue() const {
    return m_public_key_value;
}
void OAISigningKey::setPublicKeyValue(const QString &public_key_value) {
    m_public_key_value = public_key_value;
    m_public_key_value_isSet = true;
}

bool OAISigningKey::is_public_key_value_Set() const{
    return m_public_key_value_isSet;
}

bool OAISigningKey::is_public_key_value_Valid() const{
    return m_public_key_value_isValid;
}

bool OAISigningKey::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_key_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_scheme_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_key_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISigningKey::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
