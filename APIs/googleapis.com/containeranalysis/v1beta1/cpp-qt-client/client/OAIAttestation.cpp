/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAttestation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAttestation::OAIAttestation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAttestation::OAIAttestation() {
    this->initializeModel();
}

OAIAttestation::~OAIAttestation() {}

void OAIAttestation::initializeModel() {

    m_generic_signed_attestation_isSet = false;
    m_generic_signed_attestation_isValid = false;

    m_pgp_signed_attestation_isSet = false;
    m_pgp_signed_attestation_isValid = false;
}

void OAIAttestation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAttestation::fromJsonObject(QJsonObject json) {

    m_generic_signed_attestation_isValid = ::OpenAPI::fromJsonValue(m_generic_signed_attestation, json[QString("genericSignedAttestation")]);
    m_generic_signed_attestation_isSet = !json[QString("genericSignedAttestation")].isNull() && m_generic_signed_attestation_isValid;

    m_pgp_signed_attestation_isValid = ::OpenAPI::fromJsonValue(m_pgp_signed_attestation, json[QString("pgpSignedAttestation")]);
    m_pgp_signed_attestation_isSet = !json[QString("pgpSignedAttestation")].isNull() && m_pgp_signed_attestation_isValid;
}

QString OAIAttestation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAttestation::asJsonObject() const {
    QJsonObject obj;
    if (m_generic_signed_attestation.isSet()) {
        obj.insert(QString("genericSignedAttestation"), ::OpenAPI::toJsonValue(m_generic_signed_attestation));
    }
    if (m_pgp_signed_attestation.isSet()) {
        obj.insert(QString("pgpSignedAttestation"), ::OpenAPI::toJsonValue(m_pgp_signed_attestation));
    }
    return obj;
}

OAIGenericSignedAttestation OAIAttestation::getGenericSignedAttestation() const {
    return m_generic_signed_attestation;
}
void OAIAttestation::setGenericSignedAttestation(const OAIGenericSignedAttestation &generic_signed_attestation) {
    m_generic_signed_attestation = generic_signed_attestation;
    m_generic_signed_attestation_isSet = true;
}

bool OAIAttestation::is_generic_signed_attestation_Set() const{
    return m_generic_signed_attestation_isSet;
}

bool OAIAttestation::is_generic_signed_attestation_Valid() const{
    return m_generic_signed_attestation_isValid;
}

OAIPgpSignedAttestation OAIAttestation::getPgpSignedAttestation() const {
    return m_pgp_signed_attestation;
}
void OAIAttestation::setPgpSignedAttestation(const OAIPgpSignedAttestation &pgp_signed_attestation) {
    m_pgp_signed_attestation = pgp_signed_attestation;
    m_pgp_signed_attestation_isSet = true;
}

bool OAIAttestation::is_pgp_signed_attestation_Set() const{
    return m_pgp_signed_attestation_isSet;
}

bool OAIAttestation::is_pgp_signed_attestation_Valid() const{
    return m_pgp_signed_attestation_isValid;
}

bool OAIAttestation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_generic_signed_attestation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pgp_signed_attestation.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAttestation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
