/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVulnerabilityOccurrencesSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVulnerabilityOccurrencesSummary::OAIVulnerabilityOccurrencesSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVulnerabilityOccurrencesSummary::OAIVulnerabilityOccurrencesSummary() {
    this->initializeModel();
}

OAIVulnerabilityOccurrencesSummary::~OAIVulnerabilityOccurrencesSummary() {}

void OAIVulnerabilityOccurrencesSummary::initializeModel() {

    m_counts_isSet = false;
    m_counts_isValid = false;
}

void OAIVulnerabilityOccurrencesSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVulnerabilityOccurrencesSummary::fromJsonObject(QJsonObject json) {

    m_counts_isValid = ::OpenAPI::fromJsonValue(m_counts, json[QString("counts")]);
    m_counts_isSet = !json[QString("counts")].isNull() && m_counts_isValid;
}

QString OAIVulnerabilityOccurrencesSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVulnerabilityOccurrencesSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_counts.size() > 0) {
        obj.insert(QString("counts"), ::OpenAPI::toJsonValue(m_counts));
    }
    return obj;
}

QList<OAIFixableTotalByDigest> OAIVulnerabilityOccurrencesSummary::getCounts() const {
    return m_counts;
}
void OAIVulnerabilityOccurrencesSummary::setCounts(const QList<OAIFixableTotalByDigest> &counts) {
    m_counts = counts;
    m_counts_isSet = true;
}

bool OAIVulnerabilityOccurrencesSummary::is_counts_Set() const{
    return m_counts_isSet;
}

bool OAIVulnerabilityOccurrencesSummary::is_counts_Valid() const{
    return m_counts_isValid;
}

bool OAIVulnerabilityOccurrencesSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_counts.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVulnerabilityOccurrencesSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
