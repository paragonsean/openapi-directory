/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsMavenArtifact.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsMavenArtifact::OAIContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsMavenArtifact(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsMavenArtifact::OAIContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsMavenArtifact() {
    this->initializeModel();
}

OAIContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsMavenArtifact::~OAIContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsMavenArtifact() {}

void OAIContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsMavenArtifact::initializeModel() {

    m_artifact_id_isSet = false;
    m_artifact_id_isValid = false;

    m_group_id_isSet = false;
    m_group_id_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;

    m_repository_isSet = false;
    m_repository_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsMavenArtifact::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsMavenArtifact::fromJsonObject(QJsonObject json) {

    m_artifact_id_isValid = ::OpenAPI::fromJsonValue(m_artifact_id, json[QString("artifactId")]);
    m_artifact_id_isSet = !json[QString("artifactId")].isNull() && m_artifact_id_isValid;

    m_group_id_isValid = ::OpenAPI::fromJsonValue(m_group_id, json[QString("groupId")]);
    m_group_id_isSet = !json[QString("groupId")].isNull() && m_group_id_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("path")]);
    m_path_isSet = !json[QString("path")].isNull() && m_path_isValid;

    m_repository_isValid = ::OpenAPI::fromJsonValue(m_repository, json[QString("repository")]);
    m_repository_isSet = !json[QString("repository")].isNull() && m_repository_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsMavenArtifact::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsMavenArtifact::asJsonObject() const {
    QJsonObject obj;
    if (m_artifact_id_isSet) {
        obj.insert(QString("artifactId"), ::OpenAPI::toJsonValue(m_artifact_id));
    }
    if (m_group_id_isSet) {
        obj.insert(QString("groupId"), ::OpenAPI::toJsonValue(m_group_id));
    }
    if (m_path_isSet) {
        obj.insert(QString("path"), ::OpenAPI::toJsonValue(m_path));
    }
    if (m_repository_isSet) {
        obj.insert(QString("repository"), ::OpenAPI::toJsonValue(m_repository));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QString OAIContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsMavenArtifact::getArtifactId() const {
    return m_artifact_id;
}
void OAIContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsMavenArtifact::setArtifactId(const QString &artifact_id) {
    m_artifact_id = artifact_id;
    m_artifact_id_isSet = true;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsMavenArtifact::is_artifact_id_Set() const{
    return m_artifact_id_isSet;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsMavenArtifact::is_artifact_id_Valid() const{
    return m_artifact_id_isValid;
}

QString OAIContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsMavenArtifact::getGroupId() const {
    return m_group_id;
}
void OAIContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsMavenArtifact::setGroupId(const QString &group_id) {
    m_group_id = group_id;
    m_group_id_isSet = true;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsMavenArtifact::is_group_id_Set() const{
    return m_group_id_isSet;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsMavenArtifact::is_group_id_Valid() const{
    return m_group_id_isValid;
}

QString OAIContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsMavenArtifact::getPath() const {
    return m_path;
}
void OAIContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsMavenArtifact::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsMavenArtifact::is_path_Set() const{
    return m_path_isSet;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsMavenArtifact::is_path_Valid() const{
    return m_path_isValid;
}

QString OAIContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsMavenArtifact::getRepository() const {
    return m_repository;
}
void OAIContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsMavenArtifact::setRepository(const QString &repository) {
    m_repository = repository;
    m_repository_isSet = true;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsMavenArtifact::is_repository_Set() const{
    return m_repository_isSet;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsMavenArtifact::is_repository_Valid() const{
    return m_repository_isValid;
}

QString OAIContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsMavenArtifact::getVersion() const {
    return m_version;
}
void OAIContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsMavenArtifact::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsMavenArtifact::is_version_Set() const{
    return m_version_isSet;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsMavenArtifact::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsMavenArtifact::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_artifact_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repository_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsMavenArtifact::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
