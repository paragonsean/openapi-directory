/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGrafeasV1beta1IntotoSignature.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGrafeasV1beta1IntotoSignature::OAIGrafeasV1beta1IntotoSignature(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGrafeasV1beta1IntotoSignature::OAIGrafeasV1beta1IntotoSignature() {
    this->initializeModel();
}

OAIGrafeasV1beta1IntotoSignature::~OAIGrafeasV1beta1IntotoSignature() {}

void OAIGrafeasV1beta1IntotoSignature::initializeModel() {

    m_keyid_isSet = false;
    m_keyid_isValid = false;

    m_sig_isSet = false;
    m_sig_isValid = false;
}

void OAIGrafeasV1beta1IntotoSignature::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGrafeasV1beta1IntotoSignature::fromJsonObject(QJsonObject json) {

    m_keyid_isValid = ::OpenAPI::fromJsonValue(m_keyid, json[QString("keyid")]);
    m_keyid_isSet = !json[QString("keyid")].isNull() && m_keyid_isValid;

    m_sig_isValid = ::OpenAPI::fromJsonValue(m_sig, json[QString("sig")]);
    m_sig_isSet = !json[QString("sig")].isNull() && m_sig_isValid;
}

QString OAIGrafeasV1beta1IntotoSignature::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGrafeasV1beta1IntotoSignature::asJsonObject() const {
    QJsonObject obj;
    if (m_keyid_isSet) {
        obj.insert(QString("keyid"), ::OpenAPI::toJsonValue(m_keyid));
    }
    if (m_sig_isSet) {
        obj.insert(QString("sig"), ::OpenAPI::toJsonValue(m_sig));
    }
    return obj;
}

QString OAIGrafeasV1beta1IntotoSignature::getKeyid() const {
    return m_keyid;
}
void OAIGrafeasV1beta1IntotoSignature::setKeyid(const QString &keyid) {
    m_keyid = keyid;
    m_keyid_isSet = true;
}

bool OAIGrafeasV1beta1IntotoSignature::is_keyid_Set() const{
    return m_keyid_isSet;
}

bool OAIGrafeasV1beta1IntotoSignature::is_keyid_Valid() const{
    return m_keyid_isValid;
}

QString OAIGrafeasV1beta1IntotoSignature::getSig() const {
    return m_sig;
}
void OAIGrafeasV1beta1IntotoSignature::setSig(const QString &sig) {
    m_sig = sig;
    m_sig_isSet = true;
}

bool OAIGrafeasV1beta1IntotoSignature::is_sig_Set() const{
    return m_sig_isSet;
}

bool OAIGrafeasV1beta1IntotoSignature::is_sig_Valid() const{
    return m_sig_isValid;
}

bool OAIGrafeasV1beta1IntotoSignature::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_keyid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sig_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGrafeasV1beta1IntotoSignature::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
