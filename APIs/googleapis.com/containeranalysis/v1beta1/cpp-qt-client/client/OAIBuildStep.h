/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIBuildStep.h
 *
 * A step in the build pipeline. Next ID: 21
 */

#ifndef OAIBuildStep_H
#define OAIBuildStep_H

#include <QJsonObject>

#include "OAITimeSpan.h"
#include "OAIVolume.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAITimeSpan;
class OAIVolume;

class OAIBuildStep : public OAIObject {
public:
    OAIBuildStep();
    OAIBuildStep(QString json);
    ~OAIBuildStep() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<qint32> getAllowExitCodes() const;
    void setAllowExitCodes(const QList<qint32> &allow_exit_codes);
    bool is_allow_exit_codes_Set() const;
    bool is_allow_exit_codes_Valid() const;

    bool isAllowFailure() const;
    void setAllowFailure(const bool &allow_failure);
    bool is_allow_failure_Set() const;
    bool is_allow_failure_Valid() const;

    QList<QString> getArgs() const;
    void setArgs(const QList<QString> &args);
    bool is_args_Set() const;
    bool is_args_Valid() const;

    bool isAutomapSubstitutions() const;
    void setAutomapSubstitutions(const bool &automap_substitutions);
    bool is_automap_substitutions_Set() const;
    bool is_automap_substitutions_Valid() const;

    QString getDir() const;
    void setDir(const QString &dir);
    bool is_dir_Set() const;
    bool is_dir_Valid() const;

    QString getEntrypoint() const;
    void setEntrypoint(const QString &entrypoint);
    bool is_entrypoint_Set() const;
    bool is_entrypoint_Valid() const;

    QList<QString> getEnv() const;
    void setEnv(const QList<QString> &env);
    bool is_env_Set() const;
    bool is_env_Valid() const;

    qint32 getExitCode() const;
    void setExitCode(const qint32 &exit_code);
    bool is_exit_code_Set() const;
    bool is_exit_code_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    OAITimeSpan getPullTiming() const;
    void setPullTiming(const OAITimeSpan &pull_timing);
    bool is_pull_timing_Set() const;
    bool is_pull_timing_Valid() const;

    QString getScript() const;
    void setScript(const QString &script);
    bool is_script_Set() const;
    bool is_script_Valid() const;

    QList<QString> getSecretEnv() const;
    void setSecretEnv(const QList<QString> &secret_env);
    bool is_secret_env_Set() const;
    bool is_secret_env_Valid() const;

    QString getStatus() const;
    void setStatus(const QString &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    QString getTimeout() const;
    void setTimeout(const QString &timeout);
    bool is_timeout_Set() const;
    bool is_timeout_Valid() const;

    OAITimeSpan getTiming() const;
    void setTiming(const OAITimeSpan &timing);
    bool is_timing_Set() const;
    bool is_timing_Valid() const;

    QList<OAIVolume> getVolumes() const;
    void setVolumes(const QList<OAIVolume> &volumes);
    bool is_volumes_Set() const;
    bool is_volumes_Valid() const;

    QList<QString> getWaitFor() const;
    void setWaitFor(const QList<QString> &wait_for);
    bool is_wait_for_Set() const;
    bool is_wait_for_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<qint32> m_allow_exit_codes;
    bool m_allow_exit_codes_isSet;
    bool m_allow_exit_codes_isValid;

    bool m_allow_failure;
    bool m_allow_failure_isSet;
    bool m_allow_failure_isValid;

    QList<QString> m_args;
    bool m_args_isSet;
    bool m_args_isValid;

    bool m_automap_substitutions;
    bool m_automap_substitutions_isSet;
    bool m_automap_substitutions_isValid;

    QString m_dir;
    bool m_dir_isSet;
    bool m_dir_isValid;

    QString m_entrypoint;
    bool m_entrypoint_isSet;
    bool m_entrypoint_isValid;

    QList<QString> m_env;
    bool m_env_isSet;
    bool m_env_isValid;

    qint32 m_exit_code;
    bool m_exit_code_isSet;
    bool m_exit_code_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    OAITimeSpan m_pull_timing;
    bool m_pull_timing_isSet;
    bool m_pull_timing_isValid;

    QString m_script;
    bool m_script_isSet;
    bool m_script_isValid;

    QList<QString> m_secret_env;
    bool m_secret_env_isSet;
    bool m_secret_env_isValid;

    QString m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    QString m_timeout;
    bool m_timeout_isSet;
    bool m_timeout_isValid;

    OAITimeSpan m_timing;
    bool m_timing_isSet;
    bool m_timing_isValid;

    QList<OAIVolume> m_volumes;
    bool m_volumes_isSet;
    bool m_volumes_isValid;

    QList<QString> m_wait_for;
    bool m_wait_for_isSet;
    bool m_wait_for_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIBuildStep)

#endif // OAIBuildStep_H
