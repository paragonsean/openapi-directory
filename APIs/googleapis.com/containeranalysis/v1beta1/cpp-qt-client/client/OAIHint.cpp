/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHint.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHint::OAIHint(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHint::OAIHint() {
    this->initializeModel();
}

OAIHint::~OAIHint() {}

void OAIHint::initializeModel() {

    m_human_readable_name_isSet = false;
    m_human_readable_name_isValid = false;
}

void OAIHint::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHint::fromJsonObject(QJsonObject json) {

    m_human_readable_name_isValid = ::OpenAPI::fromJsonValue(m_human_readable_name, json[QString("humanReadableName")]);
    m_human_readable_name_isSet = !json[QString("humanReadableName")].isNull() && m_human_readable_name_isValid;
}

QString OAIHint::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHint::asJsonObject() const {
    QJsonObject obj;
    if (m_human_readable_name_isSet) {
        obj.insert(QString("humanReadableName"), ::OpenAPI::toJsonValue(m_human_readable_name));
    }
    return obj;
}

QString OAIHint::getHumanReadableName() const {
    return m_human_readable_name;
}
void OAIHint::setHumanReadableName(const QString &human_readable_name) {
    m_human_readable_name = human_readable_name;
    m_human_readable_name_isSet = true;
}

bool OAIHint::is_human_readable_name_Set() const{
    return m_human_readable_name_isSet;
}

bool OAIHint::is_human_readable_name_Valid() const{
    return m_human_readable_name_isValid;
}

bool OAIHint::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_human_readable_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHint::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
