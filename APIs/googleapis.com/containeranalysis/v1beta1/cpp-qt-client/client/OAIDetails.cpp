/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDetails::OAIDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDetails::OAIDetails() {
    this->initializeModel();
}

OAIDetails::~OAIDetails() {}

void OAIDetails::initializeModel() {

    m_attestation_isSet = false;
    m_attestation_isValid = false;
}

void OAIDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDetails::fromJsonObject(QJsonObject json) {

    m_attestation_isValid = ::OpenAPI::fromJsonValue(m_attestation, json[QString("attestation")]);
    m_attestation_isSet = !json[QString("attestation")].isNull() && m_attestation_isValid;
}

QString OAIDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_attestation.isSet()) {
        obj.insert(QString("attestation"), ::OpenAPI::toJsonValue(m_attestation));
    }
    return obj;
}

OAIAttestation OAIDetails::getAttestation() const {
    return m_attestation;
}
void OAIDetails::setAttestation(const OAIAttestation &attestation) {
    m_attestation = attestation;
    m_attestation_isSet = true;
}

bool OAIDetails::is_attestation_Set() const{
    return m_attestation_isSet;
}

bool OAIDetails::is_attestation_Valid() const{
    return m_attestation_isValid;
}

bool OAIDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attestation.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
