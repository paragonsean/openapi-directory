/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRunDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRunDetails::OAIRunDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRunDetails::OAIRunDetails() {
    this->initializeModel();
}

OAIRunDetails::~OAIRunDetails() {}

void OAIRunDetails::initializeModel() {

    m_builder_isSet = false;
    m_builder_isValid = false;

    m_byproducts_isSet = false;
    m_byproducts_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;
}

void OAIRunDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRunDetails::fromJsonObject(QJsonObject json) {

    m_builder_isValid = ::OpenAPI::fromJsonValue(m_builder, json[QString("builder")]);
    m_builder_isSet = !json[QString("builder")].isNull() && m_builder_isValid;

    m_byproducts_isValid = ::OpenAPI::fromJsonValue(m_byproducts, json[QString("byproducts")]);
    m_byproducts_isSet = !json[QString("byproducts")].isNull() && m_byproducts_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;
}

QString OAIRunDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRunDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_builder.isSet()) {
        obj.insert(QString("builder"), ::OpenAPI::toJsonValue(m_builder));
    }
    if (m_byproducts.size() > 0) {
        obj.insert(QString("byproducts"), ::OpenAPI::toJsonValue(m_byproducts));
    }
    if (m_metadata.isSet()) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    return obj;
}

OAIProvenanceBuilder OAIRunDetails::getBuilder() const {
    return m_builder;
}
void OAIRunDetails::setBuilder(const OAIProvenanceBuilder &builder) {
    m_builder = builder;
    m_builder_isSet = true;
}

bool OAIRunDetails::is_builder_Set() const{
    return m_builder_isSet;
}

bool OAIRunDetails::is_builder_Valid() const{
    return m_builder_isValid;
}

QList<OAIResourceDescriptor> OAIRunDetails::getByproducts() const {
    return m_byproducts;
}
void OAIRunDetails::setByproducts(const QList<OAIResourceDescriptor> &byproducts) {
    m_byproducts = byproducts;
    m_byproducts_isSet = true;
}

bool OAIRunDetails::is_byproducts_Set() const{
    return m_byproducts_isSet;
}

bool OAIRunDetails::is_byproducts_Valid() const{
    return m_byproducts_isValid;
}

OAIBuildMetadata OAIRunDetails::getMetadata() const {
    return m_metadata;
}
void OAIRunDetails::setMetadata(const OAIBuildMetadata &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIRunDetails::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIRunDetails::is_metadata_Valid() const{
    return m_metadata_isValid;
}

bool OAIRunDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_builder.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_byproducts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRunDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
