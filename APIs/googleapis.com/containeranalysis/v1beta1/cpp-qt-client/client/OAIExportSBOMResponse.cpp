/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExportSBOMResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExportSBOMResponse::OAIExportSBOMResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExportSBOMResponse::OAIExportSBOMResponse() {
    this->initializeModel();
}

OAIExportSBOMResponse::~OAIExportSBOMResponse() {}

void OAIExportSBOMResponse::initializeModel() {

    m_discovery_occurrence_id_isSet = false;
    m_discovery_occurrence_id_isValid = false;
}

void OAIExportSBOMResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExportSBOMResponse::fromJsonObject(QJsonObject json) {

    m_discovery_occurrence_id_isValid = ::OpenAPI::fromJsonValue(m_discovery_occurrence_id, json[QString("discoveryOccurrenceId")]);
    m_discovery_occurrence_id_isSet = !json[QString("discoveryOccurrenceId")].isNull() && m_discovery_occurrence_id_isValid;
}

QString OAIExportSBOMResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExportSBOMResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_discovery_occurrence_id_isSet) {
        obj.insert(QString("discoveryOccurrenceId"), ::OpenAPI::toJsonValue(m_discovery_occurrence_id));
    }
    return obj;
}

QString OAIExportSBOMResponse::getDiscoveryOccurrenceId() const {
    return m_discovery_occurrence_id;
}
void OAIExportSBOMResponse::setDiscoveryOccurrenceId(const QString &discovery_occurrence_id) {
    m_discovery_occurrence_id = discovery_occurrence_id;
    m_discovery_occurrence_id_isSet = true;
}

bool OAIExportSBOMResponse::is_discovery_occurrence_id_Set() const{
    return m_discovery_occurrence_id_isSet;
}

bool OAIExportSBOMResponse::is_discovery_occurrence_id_Valid() const{
    return m_discovery_occurrence_id_isValid;
}

bool OAIExportSBOMResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_discovery_occurrence_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExportSBOMResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
