/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIArtifactRule.h
 *
 * Defines an object to declare an in-toto artifact rule
 */

#ifndef OAIArtifactRule_H
#define OAIArtifactRule_H

#include <QJsonObject>

#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIArtifactRule : public OAIObject {
public:
    OAIArtifactRule();
    OAIArtifactRule(QString json);
    ~OAIArtifactRule() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<QString> getArtifactRule() const;
    void setArtifactRule(const QList<QString> &artifact_rule);
    bool is_artifact_rule_Set() const;
    bool is_artifact_rule_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<QString> m_artifact_rule;
    bool m_artifact_rule_isSet;
    bool m_artifact_rule_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIArtifactRule)

#endif // OAIArtifactRule_H
