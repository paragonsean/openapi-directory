/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIContaineranalysisGoogleDevtoolsCloudbuildV1BuildApproval.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIContaineranalysisGoogleDevtoolsCloudbuildV1BuildApproval::OAIContaineranalysisGoogleDevtoolsCloudbuildV1BuildApproval(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIContaineranalysisGoogleDevtoolsCloudbuildV1BuildApproval::OAIContaineranalysisGoogleDevtoolsCloudbuildV1BuildApproval() {
    this->initializeModel();
}

OAIContaineranalysisGoogleDevtoolsCloudbuildV1BuildApproval::~OAIContaineranalysisGoogleDevtoolsCloudbuildV1BuildApproval() {}

void OAIContaineranalysisGoogleDevtoolsCloudbuildV1BuildApproval::initializeModel() {

    m_config_isSet = false;
    m_config_isValid = false;

    m_result_isSet = false;
    m_result_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;
}

void OAIContaineranalysisGoogleDevtoolsCloudbuildV1BuildApproval::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIContaineranalysisGoogleDevtoolsCloudbuildV1BuildApproval::fromJsonObject(QJsonObject json) {

    m_config_isValid = ::OpenAPI::fromJsonValue(m_config, json[QString("config")]);
    m_config_isSet = !json[QString("config")].isNull() && m_config_isValid;

    m_result_isValid = ::OpenAPI::fromJsonValue(m_result, json[QString("result")]);
    m_result_isSet = !json[QString("result")].isNull() && m_result_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;
}

QString OAIContaineranalysisGoogleDevtoolsCloudbuildV1BuildApproval::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIContaineranalysisGoogleDevtoolsCloudbuildV1BuildApproval::asJsonObject() const {
    QJsonObject obj;
    if (m_config.isSet()) {
        obj.insert(QString("config"), ::OpenAPI::toJsonValue(m_config));
    }
    if (m_result.isSet()) {
        obj.insert(QString("result"), ::OpenAPI::toJsonValue(m_result));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    return obj;
}

OAIContaineranalysisGoogleDevtoolsCloudbuildV1ApprovalConfig OAIContaineranalysisGoogleDevtoolsCloudbuildV1BuildApproval::getConfig() const {
    return m_config;
}
void OAIContaineranalysisGoogleDevtoolsCloudbuildV1BuildApproval::setConfig(const OAIContaineranalysisGoogleDevtoolsCloudbuildV1ApprovalConfig &config) {
    m_config = config;
    m_config_isSet = true;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1BuildApproval::is_config_Set() const{
    return m_config_isSet;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1BuildApproval::is_config_Valid() const{
    return m_config_isValid;
}

OAIContaineranalysisGoogleDevtoolsCloudbuildV1ApprovalResult OAIContaineranalysisGoogleDevtoolsCloudbuildV1BuildApproval::getResult() const {
    return m_result;
}
void OAIContaineranalysisGoogleDevtoolsCloudbuildV1BuildApproval::setResult(const OAIContaineranalysisGoogleDevtoolsCloudbuildV1ApprovalResult &result) {
    m_result = result;
    m_result_isSet = true;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1BuildApproval::is_result_Set() const{
    return m_result_isSet;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1BuildApproval::is_result_Valid() const{
    return m_result_isValid;
}

QString OAIContaineranalysisGoogleDevtoolsCloudbuildV1BuildApproval::getState() const {
    return m_state;
}
void OAIContaineranalysisGoogleDevtoolsCloudbuildV1BuildApproval::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1BuildApproval::is_state_Set() const{
    return m_state_isSet;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1BuildApproval::is_state_Valid() const{
    return m_state_isValid;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1BuildApproval::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_result.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1BuildApproval::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
