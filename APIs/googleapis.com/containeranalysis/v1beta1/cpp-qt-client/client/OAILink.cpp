/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILink.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILink::OAILink(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILink::OAILink() {
    this->initializeModel();
}

OAILink::~OAILink() {}

void OAILink::initializeModel() {

    m_byproducts_isSet = false;
    m_byproducts_isValid = false;

    m_command_isSet = false;
    m_command_isValid = false;

    m_environment_isSet = false;
    m_environment_isValid = false;

    m_materials_isSet = false;
    m_materials_isValid = false;

    m_products_isSet = false;
    m_products_isValid = false;
}

void OAILink::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILink::fromJsonObject(QJsonObject json) {

    m_byproducts_isValid = ::OpenAPI::fromJsonValue(m_byproducts, json[QString("byproducts")]);
    m_byproducts_isSet = !json[QString("byproducts")].isNull() && m_byproducts_isValid;

    m_command_isValid = ::OpenAPI::fromJsonValue(m_command, json[QString("command")]);
    m_command_isSet = !json[QString("command")].isNull() && m_command_isValid;

    m_environment_isValid = ::OpenAPI::fromJsonValue(m_environment, json[QString("environment")]);
    m_environment_isSet = !json[QString("environment")].isNull() && m_environment_isValid;

    m_materials_isValid = ::OpenAPI::fromJsonValue(m_materials, json[QString("materials")]);
    m_materials_isSet = !json[QString("materials")].isNull() && m_materials_isValid;

    m_products_isValid = ::OpenAPI::fromJsonValue(m_products, json[QString("products")]);
    m_products_isSet = !json[QString("products")].isNull() && m_products_isValid;
}

QString OAILink::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILink::asJsonObject() const {
    QJsonObject obj;
    if (m_byproducts.isSet()) {
        obj.insert(QString("byproducts"), ::OpenAPI::toJsonValue(m_byproducts));
    }
    if (m_command.size() > 0) {
        obj.insert(QString("command"), ::OpenAPI::toJsonValue(m_command));
    }
    if (m_environment.isSet()) {
        obj.insert(QString("environment"), ::OpenAPI::toJsonValue(m_environment));
    }
    if (m_materials.size() > 0) {
        obj.insert(QString("materials"), ::OpenAPI::toJsonValue(m_materials));
    }
    if (m_products.size() > 0) {
        obj.insert(QString("products"), ::OpenAPI::toJsonValue(m_products));
    }
    return obj;
}

OAIByProducts OAILink::getByproducts() const {
    return m_byproducts;
}
void OAILink::setByproducts(const OAIByProducts &byproducts) {
    m_byproducts = byproducts;
    m_byproducts_isSet = true;
}

bool OAILink::is_byproducts_Set() const{
    return m_byproducts_isSet;
}

bool OAILink::is_byproducts_Valid() const{
    return m_byproducts_isValid;
}

QList<QString> OAILink::getCommand() const {
    return m_command;
}
void OAILink::setCommand(const QList<QString> &command) {
    m_command = command;
    m_command_isSet = true;
}

bool OAILink::is_command_Set() const{
    return m_command_isSet;
}

bool OAILink::is_command_Valid() const{
    return m_command_isValid;
}

OAIEnvironment OAILink::getEnvironment() const {
    return m_environment;
}
void OAILink::setEnvironment(const OAIEnvironment &environment) {
    m_environment = environment;
    m_environment_isSet = true;
}

bool OAILink::is_environment_Set() const{
    return m_environment_isSet;
}

bool OAILink::is_environment_Valid() const{
    return m_environment_isValid;
}

QList<OAIGrafeasV1beta1IntotoArtifact> OAILink::getMaterials() const {
    return m_materials;
}
void OAILink::setMaterials(const QList<OAIGrafeasV1beta1IntotoArtifact> &materials) {
    m_materials = materials;
    m_materials_isSet = true;
}

bool OAILink::is_materials_Set() const{
    return m_materials_isSet;
}

bool OAILink::is_materials_Valid() const{
    return m_materials_isValid;
}

QList<OAIGrafeasV1beta1IntotoArtifact> OAILink::getProducts() const {
    return m_products;
}
void OAILink::setProducts(const QList<OAIGrafeasV1beta1IntotoArtifact> &products) {
    m_products = products;
    m_products_isSet = true;
}

bool OAILink::is_products_Set() const{
    return m_products_isSet;
}

bool OAILink::is_products_Valid() const{
    return m_products_isValid;
}

bool OAILink::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_byproducts.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_command.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_environment.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_materials.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_products.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILink::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
