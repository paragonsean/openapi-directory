/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIArtifactHashes.h
 *
 * Defines a hash object for use in Materials and Products.
 */

#ifndef OAIArtifactHashes_H
#define OAIArtifactHashes_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIArtifactHashes : public OAIObject {
public:
    OAIArtifactHashes();
    OAIArtifactHashes(QString json);
    ~OAIArtifactHashes() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getSha256() const;
    void setSha256(const QString &sha256);
    bool is_sha256_Set() const;
    bool is_sha256_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_sha256;
    bool m_sha256_isSet;
    bool m_sha256_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIArtifactHashes)

#endif // OAIArtifactHashes_H
