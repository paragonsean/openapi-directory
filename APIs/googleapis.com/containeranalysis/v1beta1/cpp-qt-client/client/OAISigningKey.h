/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAISigningKey.h
 *
 * This defines the format used to record keys used in the software supply chain. An in-toto link is attested using one or more keys defined in the in-toto layout. An example of this is: { \&quot;key_id\&quot;: \&quot;776a00e29f3559e0141b3b096f696abc6cfb0c657ab40f441132b345b0...\&quot;, \&quot;key_type\&quot;: \&quot;rsa\&quot;, \&quot;public_key_value\&quot;: \&quot;-----BEGIN PUBLIC KEY-----\\nMIIBojANBgkqhkiG9w0B...\&quot;, \&quot;key_scheme\&quot;: \&quot;rsassa-pss-sha256\&quot; } The format for in-toto&#39;s key definition can be found in section 4.2 of the in-toto specification.
 */

#ifndef OAISigningKey_H
#define OAISigningKey_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAISigningKey : public OAIObject {
public:
    OAISigningKey();
    OAISigningKey(QString json);
    ~OAISigningKey() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getKeyId() const;
    void setKeyId(const QString &key_id);
    bool is_key_id_Set() const;
    bool is_key_id_Valid() const;

    QString getKeyScheme() const;
    void setKeyScheme(const QString &key_scheme);
    bool is_key_scheme_Set() const;
    bool is_key_scheme_Valid() const;

    QString getKeyType() const;
    void setKeyType(const QString &key_type);
    bool is_key_type_Set() const;
    bool is_key_type_Valid() const;

    QString getPublicKeyValue() const;
    void setPublicKeyValue(const QString &public_key_value);
    bool is_public_key_value_Set() const;
    bool is_public_key_value_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_key_id;
    bool m_key_id_isSet;
    bool m_key_id_isValid;

    QString m_key_scheme;
    bool m_key_scheme_isSet;
    bool m_key_scheme_isValid;

    QString m_key_type;
    bool m_key_type_isSet;
    bool m_key_type_isValid;

    QString m_public_key_value;
    bool m_public_key_value_isSet;
    bool m_public_key_value_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAISigningKey)

#endif // OAISigningKey_H
