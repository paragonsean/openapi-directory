/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPackageIssue.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPackageIssue::OAIPackageIssue(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPackageIssue::OAIPackageIssue() {
    this->initializeModel();
}

OAIPackageIssue::~OAIPackageIssue() {}

void OAIPackageIssue::initializeModel() {

    m_affected_location_isSet = false;
    m_affected_location_isValid = false;

    m_effective_severity_isSet = false;
    m_effective_severity_isValid = false;

    m_fixed_location_isSet = false;
    m_fixed_location_isValid = false;

    m_package_type_isSet = false;
    m_package_type_isValid = false;

    m_severity_name_isSet = false;
    m_severity_name_isValid = false;
}

void OAIPackageIssue::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPackageIssue::fromJsonObject(QJsonObject json) {

    m_affected_location_isValid = ::OpenAPI::fromJsonValue(m_affected_location, json[QString("affectedLocation")]);
    m_affected_location_isSet = !json[QString("affectedLocation")].isNull() && m_affected_location_isValid;

    m_effective_severity_isValid = ::OpenAPI::fromJsonValue(m_effective_severity, json[QString("effectiveSeverity")]);
    m_effective_severity_isSet = !json[QString("effectiveSeverity")].isNull() && m_effective_severity_isValid;

    m_fixed_location_isValid = ::OpenAPI::fromJsonValue(m_fixed_location, json[QString("fixedLocation")]);
    m_fixed_location_isSet = !json[QString("fixedLocation")].isNull() && m_fixed_location_isValid;

    m_package_type_isValid = ::OpenAPI::fromJsonValue(m_package_type, json[QString("packageType")]);
    m_package_type_isSet = !json[QString("packageType")].isNull() && m_package_type_isValid;

    m_severity_name_isValid = ::OpenAPI::fromJsonValue(m_severity_name, json[QString("severityName")]);
    m_severity_name_isSet = !json[QString("severityName")].isNull() && m_severity_name_isValid;
}

QString OAIPackageIssue::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPackageIssue::asJsonObject() const {
    QJsonObject obj;
    if (m_affected_location.isSet()) {
        obj.insert(QString("affectedLocation"), ::OpenAPI::toJsonValue(m_affected_location));
    }
    if (m_effective_severity_isSet) {
        obj.insert(QString("effectiveSeverity"), ::OpenAPI::toJsonValue(m_effective_severity));
    }
    if (m_fixed_location.isSet()) {
        obj.insert(QString("fixedLocation"), ::OpenAPI::toJsonValue(m_fixed_location));
    }
    if (m_package_type_isSet) {
        obj.insert(QString("packageType"), ::OpenAPI::toJsonValue(m_package_type));
    }
    if (m_severity_name_isSet) {
        obj.insert(QString("severityName"), ::OpenAPI::toJsonValue(m_severity_name));
    }
    return obj;
}

OAIVulnerabilityLocation OAIPackageIssue::getAffectedLocation() const {
    return m_affected_location;
}
void OAIPackageIssue::setAffectedLocation(const OAIVulnerabilityLocation &affected_location) {
    m_affected_location = affected_location;
    m_affected_location_isSet = true;
}

bool OAIPackageIssue::is_affected_location_Set() const{
    return m_affected_location_isSet;
}

bool OAIPackageIssue::is_affected_location_Valid() const{
    return m_affected_location_isValid;
}

QString OAIPackageIssue::getEffectiveSeverity() const {
    return m_effective_severity;
}
void OAIPackageIssue::setEffectiveSeverity(const QString &effective_severity) {
    m_effective_severity = effective_severity;
    m_effective_severity_isSet = true;
}

bool OAIPackageIssue::is_effective_severity_Set() const{
    return m_effective_severity_isSet;
}

bool OAIPackageIssue::is_effective_severity_Valid() const{
    return m_effective_severity_isValid;
}

OAIVulnerabilityLocation OAIPackageIssue::getFixedLocation() const {
    return m_fixed_location;
}
void OAIPackageIssue::setFixedLocation(const OAIVulnerabilityLocation &fixed_location) {
    m_fixed_location = fixed_location;
    m_fixed_location_isSet = true;
}

bool OAIPackageIssue::is_fixed_location_Set() const{
    return m_fixed_location_isSet;
}

bool OAIPackageIssue::is_fixed_location_Valid() const{
    return m_fixed_location_isValid;
}

QString OAIPackageIssue::getPackageType() const {
    return m_package_type;
}
void OAIPackageIssue::setPackageType(const QString &package_type) {
    m_package_type = package_type;
    m_package_type_isSet = true;
}

bool OAIPackageIssue::is_package_type_Set() const{
    return m_package_type_isSet;
}

bool OAIPackageIssue::is_package_type_Valid() const{
    return m_package_type_isValid;
}

QString OAIPackageIssue::getSeverityName() const {
    return m_severity_name;
}
void OAIPackageIssue::setSeverityName(const QString &severity_name) {
    m_severity_name = severity_name;
    m_severity_name_isSet = true;
}

bool OAIPackageIssue::is_severity_name_Set() const{
    return m_severity_name_isSet;
}

bool OAIPackageIssue::is_severity_name_Valid() const{
    return m_severity_name_isValid;
}

bool OAIPackageIssue::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_affected_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_effective_severity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fixed_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_package_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_severity_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPackageIssue::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
