/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGenericSignedAttestation.h
 *
 * An attestation wrapper that uses the Grafeas &#x60;Signature&#x60; message. This attestation must define the &#x60;serialized_payload&#x60; that the &#x60;signatures&#x60; verify and any metadata necessary to interpret that plaintext. The signatures should always be over the &#x60;serialized_payload&#x60; bytestring.
 */

#ifndef OAIGenericSignedAttestation_H
#define OAIGenericSignedAttestation_H

#include <QJsonObject>

#include "OAISignature.h"
#include <QByteArray>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAISignature;

class OAIGenericSignedAttestation : public OAIObject {
public:
    OAIGenericSignedAttestation();
    OAIGenericSignedAttestation(QString json);
    ~OAIGenericSignedAttestation() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getContentType() const;
    void setContentType(const QString &content_type);
    bool is_content_type_Set() const;
    bool is_content_type_Valid() const;

    QByteArray getSerializedPayload() const;
    void setSerializedPayload(const QByteArray &serialized_payload);
    bool is_serialized_payload_Set() const;
    bool is_serialized_payload_Valid() const;

    QList<OAISignature> getSignatures() const;
    void setSignatures(const QList<OAISignature> &signatures);
    bool is_signatures_Set() const;
    bool is_signatures_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_content_type;
    bool m_content_type_isSet;
    bool m_content_type_isValid;

    QByteArray m_serialized_payload;
    bool m_serialized_payload_isSet;
    bool m_serialized_payload_isValid;

    QList<OAISignature> m_signatures;
    bool m_signatures_isSet;
    bool m_signatures_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGenericSignedAttestation)

#endif // OAIGenericSignedAttestation_H
