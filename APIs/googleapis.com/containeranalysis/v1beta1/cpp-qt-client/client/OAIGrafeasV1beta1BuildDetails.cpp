/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGrafeasV1beta1BuildDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGrafeasV1beta1BuildDetails::OAIGrafeasV1beta1BuildDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGrafeasV1beta1BuildDetails::OAIGrafeasV1beta1BuildDetails() {
    this->initializeModel();
}

OAIGrafeasV1beta1BuildDetails::~OAIGrafeasV1beta1BuildDetails() {}

void OAIGrafeasV1beta1BuildDetails::initializeModel() {

    m_in_toto_slsa_provenance_v1_isSet = false;
    m_in_toto_slsa_provenance_v1_isValid = false;

    m_provenance_isSet = false;
    m_provenance_isValid = false;

    m_provenance_bytes_isSet = false;
    m_provenance_bytes_isValid = false;
}

void OAIGrafeasV1beta1BuildDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGrafeasV1beta1BuildDetails::fromJsonObject(QJsonObject json) {

    m_in_toto_slsa_provenance_v1_isValid = ::OpenAPI::fromJsonValue(m_in_toto_slsa_provenance_v1, json[QString("inTotoSlsaProvenanceV1")]);
    m_in_toto_slsa_provenance_v1_isSet = !json[QString("inTotoSlsaProvenanceV1")].isNull() && m_in_toto_slsa_provenance_v1_isValid;

    m_provenance_isValid = ::OpenAPI::fromJsonValue(m_provenance, json[QString("provenance")]);
    m_provenance_isSet = !json[QString("provenance")].isNull() && m_provenance_isValid;

    m_provenance_bytes_isValid = ::OpenAPI::fromJsonValue(m_provenance_bytes, json[QString("provenanceBytes")]);
    m_provenance_bytes_isSet = !json[QString("provenanceBytes")].isNull() && m_provenance_bytes_isValid;
}

QString OAIGrafeasV1beta1BuildDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGrafeasV1beta1BuildDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_in_toto_slsa_provenance_v1.isSet()) {
        obj.insert(QString("inTotoSlsaProvenanceV1"), ::OpenAPI::toJsonValue(m_in_toto_slsa_provenance_v1));
    }
    if (m_provenance.isSet()) {
        obj.insert(QString("provenance"), ::OpenAPI::toJsonValue(m_provenance));
    }
    if (m_provenance_bytes_isSet) {
        obj.insert(QString("provenanceBytes"), ::OpenAPI::toJsonValue(m_provenance_bytes));
    }
    return obj;
}

OAIInTotoSlsaProvenanceV1 OAIGrafeasV1beta1BuildDetails::getInTotoSlsaProvenanceV1() const {
    return m_in_toto_slsa_provenance_v1;
}
void OAIGrafeasV1beta1BuildDetails::setInTotoSlsaProvenanceV1(const OAIInTotoSlsaProvenanceV1 &in_toto_slsa_provenance_v1) {
    m_in_toto_slsa_provenance_v1 = in_toto_slsa_provenance_v1;
    m_in_toto_slsa_provenance_v1_isSet = true;
}

bool OAIGrafeasV1beta1BuildDetails::is_in_toto_slsa_provenance_v1_Set() const{
    return m_in_toto_slsa_provenance_v1_isSet;
}

bool OAIGrafeasV1beta1BuildDetails::is_in_toto_slsa_provenance_v1_Valid() const{
    return m_in_toto_slsa_provenance_v1_isValid;
}

OAIBuildProvenance OAIGrafeasV1beta1BuildDetails::getProvenance() const {
    return m_provenance;
}
void OAIGrafeasV1beta1BuildDetails::setProvenance(const OAIBuildProvenance &provenance) {
    m_provenance = provenance;
    m_provenance_isSet = true;
}

bool OAIGrafeasV1beta1BuildDetails::is_provenance_Set() const{
    return m_provenance_isSet;
}

bool OAIGrafeasV1beta1BuildDetails::is_provenance_Valid() const{
    return m_provenance_isValid;
}

QString OAIGrafeasV1beta1BuildDetails::getProvenanceBytes() const {
    return m_provenance_bytes;
}
void OAIGrafeasV1beta1BuildDetails::setProvenanceBytes(const QString &provenance_bytes) {
    m_provenance_bytes = provenance_bytes;
    m_provenance_bytes_isSet = true;
}

bool OAIGrafeasV1beta1BuildDetails::is_provenance_bytes_Set() const{
    return m_provenance_bytes_isSet;
}

bool OAIGrafeasV1beta1BuildDetails::is_provenance_bytes_Valid() const{
    return m_provenance_bytes_isValid;
}

bool OAIGrafeasV1beta1BuildDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_in_toto_slsa_provenance_v1.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_provenance.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_provenance_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGrafeasV1beta1BuildDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
