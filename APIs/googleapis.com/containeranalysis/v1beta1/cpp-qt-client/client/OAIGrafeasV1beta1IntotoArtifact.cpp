/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGrafeasV1beta1IntotoArtifact.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGrafeasV1beta1IntotoArtifact::OAIGrafeasV1beta1IntotoArtifact(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGrafeasV1beta1IntotoArtifact::OAIGrafeasV1beta1IntotoArtifact() {
    this->initializeModel();
}

OAIGrafeasV1beta1IntotoArtifact::~OAIGrafeasV1beta1IntotoArtifact() {}

void OAIGrafeasV1beta1IntotoArtifact::initializeModel() {

    m_hashes_isSet = false;
    m_hashes_isValid = false;

    m_resource_uri_isSet = false;
    m_resource_uri_isValid = false;
}

void OAIGrafeasV1beta1IntotoArtifact::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGrafeasV1beta1IntotoArtifact::fromJsonObject(QJsonObject json) {

    m_hashes_isValid = ::OpenAPI::fromJsonValue(m_hashes, json[QString("hashes")]);
    m_hashes_isSet = !json[QString("hashes")].isNull() && m_hashes_isValid;

    m_resource_uri_isValid = ::OpenAPI::fromJsonValue(m_resource_uri, json[QString("resourceUri")]);
    m_resource_uri_isSet = !json[QString("resourceUri")].isNull() && m_resource_uri_isValid;
}

QString OAIGrafeasV1beta1IntotoArtifact::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGrafeasV1beta1IntotoArtifact::asJsonObject() const {
    QJsonObject obj;
    if (m_hashes.isSet()) {
        obj.insert(QString("hashes"), ::OpenAPI::toJsonValue(m_hashes));
    }
    if (m_resource_uri_isSet) {
        obj.insert(QString("resourceUri"), ::OpenAPI::toJsonValue(m_resource_uri));
    }
    return obj;
}

OAIArtifactHashes OAIGrafeasV1beta1IntotoArtifact::getHashes() const {
    return m_hashes;
}
void OAIGrafeasV1beta1IntotoArtifact::setHashes(const OAIArtifactHashes &hashes) {
    m_hashes = hashes;
    m_hashes_isSet = true;
}

bool OAIGrafeasV1beta1IntotoArtifact::is_hashes_Set() const{
    return m_hashes_isSet;
}

bool OAIGrafeasV1beta1IntotoArtifact::is_hashes_Valid() const{
    return m_hashes_isValid;
}

QString OAIGrafeasV1beta1IntotoArtifact::getResourceUri() const {
    return m_resource_uri;
}
void OAIGrafeasV1beta1IntotoArtifact::setResourceUri(const QString &resource_uri) {
    m_resource_uri = resource_uri;
    m_resource_uri_isSet = true;
}

bool OAIGrafeasV1beta1IntotoArtifact::is_resource_uri_Set() const{
    return m_resource_uri_isSet;
}

bool OAIGrafeasV1beta1IntotoArtifact::is_resource_uri_Valid() const{
    return m_resource_uri_isValid;
}

bool OAIGrafeasV1beta1IntotoArtifact::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_hashes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_uri_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGrafeasV1beta1IntotoArtifact::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
