/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILicensesSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILicensesSummary::OAILicensesSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILicensesSummary::OAILicensesSummary() {
    this->initializeModel();
}

OAILicensesSummary::~OAILicensesSummary() {}

void OAILicensesSummary::initializeModel() {

    m_count_isSet = false;
    m_count_isValid = false;

    m_license_isSet = false;
    m_license_isValid = false;
}

void OAILicensesSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILicensesSummary::fromJsonObject(QJsonObject json) {

    m_count_isValid = ::OpenAPI::fromJsonValue(m_count, json[QString("count")]);
    m_count_isSet = !json[QString("count")].isNull() && m_count_isValid;

    m_license_isValid = ::OpenAPI::fromJsonValue(m_license, json[QString("license")]);
    m_license_isSet = !json[QString("license")].isNull() && m_license_isValid;
}

QString OAILicensesSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILicensesSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_count_isSet) {
        obj.insert(QString("count"), ::OpenAPI::toJsonValue(m_count));
    }
    if (m_license_isSet) {
        obj.insert(QString("license"), ::OpenAPI::toJsonValue(m_license));
    }
    return obj;
}

QString OAILicensesSummary::getCount() const {
    return m_count;
}
void OAILicensesSummary::setCount(const QString &count) {
    m_count = count;
    m_count_isSet = true;
}

bool OAILicensesSummary::is_count_Set() const{
    return m_count_isSet;
}

bool OAILicensesSummary::is_count_Valid() const{
    return m_count_isValid;
}

QString OAILicensesSummary::getLicense() const {
    return m_license;
}
void OAILicensesSummary::setLicense(const QString &license) {
    m_license = license;
    m_license_isSet = true;
}

bool OAILicensesSummary::is_license_Set() const{
    return m_license_isSet;
}

bool OAILicensesSummary::is_license_Valid() const{
    return m_license_isValid;
}

bool OAILicensesSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_license_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILicensesSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
