/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInstallation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInstallation::OAIInstallation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInstallation::OAIInstallation() {
    this->initializeModel();
}

OAIInstallation::~OAIInstallation() {}

void OAIInstallation::initializeModel() {

    m_architecture_isSet = false;
    m_architecture_isValid = false;

    m_cpe_uri_isSet = false;
    m_cpe_uri_isValid = false;

    m_license_isSet = false;
    m_license_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_package_type_isSet = false;
    m_package_type_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIInstallation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInstallation::fromJsonObject(QJsonObject json) {

    m_architecture_isValid = ::OpenAPI::fromJsonValue(m_architecture, json[QString("architecture")]);
    m_architecture_isSet = !json[QString("architecture")].isNull() && m_architecture_isValid;

    m_cpe_uri_isValid = ::OpenAPI::fromJsonValue(m_cpe_uri, json[QString("cpeUri")]);
    m_cpe_uri_isSet = !json[QString("cpeUri")].isNull() && m_cpe_uri_isValid;

    m_license_isValid = ::OpenAPI::fromJsonValue(m_license, json[QString("license")]);
    m_license_isSet = !json[QString("license")].isNull() && m_license_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_package_type_isValid = ::OpenAPI::fromJsonValue(m_package_type, json[QString("packageType")]);
    m_package_type_isSet = !json[QString("packageType")].isNull() && m_package_type_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIInstallation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInstallation::asJsonObject() const {
    QJsonObject obj;
    if (m_architecture_isSet) {
        obj.insert(QString("architecture"), ::OpenAPI::toJsonValue(m_architecture));
    }
    if (m_cpe_uri_isSet) {
        obj.insert(QString("cpeUri"), ::OpenAPI::toJsonValue(m_cpe_uri));
    }
    if (m_license.isSet()) {
        obj.insert(QString("license"), ::OpenAPI::toJsonValue(m_license));
    }
    if (m_location.size() > 0) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_package_type_isSet) {
        obj.insert(QString("packageType"), ::OpenAPI::toJsonValue(m_package_type));
    }
    if (m_version.isSet()) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QString OAIInstallation::getArchitecture() const {
    return m_architecture;
}
void OAIInstallation::setArchitecture(const QString &architecture) {
    m_architecture = architecture;
    m_architecture_isSet = true;
}

bool OAIInstallation::is_architecture_Set() const{
    return m_architecture_isSet;
}

bool OAIInstallation::is_architecture_Valid() const{
    return m_architecture_isValid;
}

QString OAIInstallation::getCpeUri() const {
    return m_cpe_uri;
}
void OAIInstallation::setCpeUri(const QString &cpe_uri) {
    m_cpe_uri = cpe_uri;
    m_cpe_uri_isSet = true;
}

bool OAIInstallation::is_cpe_uri_Set() const{
    return m_cpe_uri_isSet;
}

bool OAIInstallation::is_cpe_uri_Valid() const{
    return m_cpe_uri_isValid;
}

OAILicense OAIInstallation::getLicense() const {
    return m_license;
}
void OAIInstallation::setLicense(const OAILicense &license) {
    m_license = license;
    m_license_isSet = true;
}

bool OAIInstallation::is_license_Set() const{
    return m_license_isSet;
}

bool OAIInstallation::is_license_Valid() const{
    return m_license_isValid;
}

QList<OAILocation> OAIInstallation::getLocation() const {
    return m_location;
}
void OAIInstallation::setLocation(const QList<OAILocation> &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIInstallation::is_location_Set() const{
    return m_location_isSet;
}

bool OAIInstallation::is_location_Valid() const{
    return m_location_isValid;
}

QString OAIInstallation::getName() const {
    return m_name;
}
void OAIInstallation::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIInstallation::is_name_Set() const{
    return m_name_isSet;
}

bool OAIInstallation::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIInstallation::getPackageType() const {
    return m_package_type;
}
void OAIInstallation::setPackageType(const QString &package_type) {
    m_package_type = package_type;
    m_package_type_isSet = true;
}

bool OAIInstallation::is_package_type_Set() const{
    return m_package_type_isSet;
}

bool OAIInstallation::is_package_type_Valid() const{
    return m_package_type_isValid;
}

OAIVersion OAIInstallation::getVersion() const {
    return m_version;
}
void OAIInstallation::setVersion(const OAIVersion &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIInstallation::is_version_Set() const{
    return m_version_isSet;
}

bool OAIInstallation::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIInstallation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_architecture_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cpe_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_license.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_location.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_package_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInstallation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
