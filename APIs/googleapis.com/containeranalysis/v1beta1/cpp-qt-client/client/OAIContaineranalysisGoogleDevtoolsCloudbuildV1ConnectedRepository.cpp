/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIContaineranalysisGoogleDevtoolsCloudbuildV1ConnectedRepository.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIContaineranalysisGoogleDevtoolsCloudbuildV1ConnectedRepository::OAIContaineranalysisGoogleDevtoolsCloudbuildV1ConnectedRepository(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIContaineranalysisGoogleDevtoolsCloudbuildV1ConnectedRepository::OAIContaineranalysisGoogleDevtoolsCloudbuildV1ConnectedRepository() {
    this->initializeModel();
}

OAIContaineranalysisGoogleDevtoolsCloudbuildV1ConnectedRepository::~OAIContaineranalysisGoogleDevtoolsCloudbuildV1ConnectedRepository() {}

void OAIContaineranalysisGoogleDevtoolsCloudbuildV1ConnectedRepository::initializeModel() {

    m_dir_isSet = false;
    m_dir_isValid = false;

    m_repository_isSet = false;
    m_repository_isValid = false;

    m_revision_isSet = false;
    m_revision_isValid = false;
}

void OAIContaineranalysisGoogleDevtoolsCloudbuildV1ConnectedRepository::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIContaineranalysisGoogleDevtoolsCloudbuildV1ConnectedRepository::fromJsonObject(QJsonObject json) {

    m_dir_isValid = ::OpenAPI::fromJsonValue(m_dir, json[QString("dir")]);
    m_dir_isSet = !json[QString("dir")].isNull() && m_dir_isValid;

    m_repository_isValid = ::OpenAPI::fromJsonValue(m_repository, json[QString("repository")]);
    m_repository_isSet = !json[QString("repository")].isNull() && m_repository_isValid;

    m_revision_isValid = ::OpenAPI::fromJsonValue(m_revision, json[QString("revision")]);
    m_revision_isSet = !json[QString("revision")].isNull() && m_revision_isValid;
}

QString OAIContaineranalysisGoogleDevtoolsCloudbuildV1ConnectedRepository::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIContaineranalysisGoogleDevtoolsCloudbuildV1ConnectedRepository::asJsonObject() const {
    QJsonObject obj;
    if (m_dir_isSet) {
        obj.insert(QString("dir"), ::OpenAPI::toJsonValue(m_dir));
    }
    if (m_repository_isSet) {
        obj.insert(QString("repository"), ::OpenAPI::toJsonValue(m_repository));
    }
    if (m_revision_isSet) {
        obj.insert(QString("revision"), ::OpenAPI::toJsonValue(m_revision));
    }
    return obj;
}

QString OAIContaineranalysisGoogleDevtoolsCloudbuildV1ConnectedRepository::getDir() const {
    return m_dir;
}
void OAIContaineranalysisGoogleDevtoolsCloudbuildV1ConnectedRepository::setDir(const QString &dir) {
    m_dir = dir;
    m_dir_isSet = true;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1ConnectedRepository::is_dir_Set() const{
    return m_dir_isSet;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1ConnectedRepository::is_dir_Valid() const{
    return m_dir_isValid;
}

QString OAIContaineranalysisGoogleDevtoolsCloudbuildV1ConnectedRepository::getRepository() const {
    return m_repository;
}
void OAIContaineranalysisGoogleDevtoolsCloudbuildV1ConnectedRepository::setRepository(const QString &repository) {
    m_repository = repository;
    m_repository_isSet = true;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1ConnectedRepository::is_repository_Set() const{
    return m_repository_isSet;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1ConnectedRepository::is_repository_Valid() const{
    return m_repository_isValid;
}

QString OAIContaineranalysisGoogleDevtoolsCloudbuildV1ConnectedRepository::getRevision() const {
    return m_revision;
}
void OAIContaineranalysisGoogleDevtoolsCloudbuildV1ConnectedRepository::setRevision(const QString &revision) {
    m_revision = revision;
    m_revision_isSet = true;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1ConnectedRepository::is_revision_Set() const{
    return m_revision_isSet;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1ConnectedRepository::is_revision_Valid() const{
    return m_revision_isValid;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1ConnectedRepository::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dir_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repository_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_revision_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1ConnectedRepository::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
