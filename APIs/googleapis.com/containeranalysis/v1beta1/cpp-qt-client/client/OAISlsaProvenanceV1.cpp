/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISlsaProvenanceV1.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISlsaProvenanceV1::OAISlsaProvenanceV1(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISlsaProvenanceV1::OAISlsaProvenanceV1() {
    this->initializeModel();
}

OAISlsaProvenanceV1::~OAISlsaProvenanceV1() {}

void OAISlsaProvenanceV1::initializeModel() {

    m_build_definition_isSet = false;
    m_build_definition_isValid = false;

    m_run_details_isSet = false;
    m_run_details_isValid = false;
}

void OAISlsaProvenanceV1::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISlsaProvenanceV1::fromJsonObject(QJsonObject json) {

    m_build_definition_isValid = ::OpenAPI::fromJsonValue(m_build_definition, json[QString("buildDefinition")]);
    m_build_definition_isSet = !json[QString("buildDefinition")].isNull() && m_build_definition_isValid;

    m_run_details_isValid = ::OpenAPI::fromJsonValue(m_run_details, json[QString("runDetails")]);
    m_run_details_isSet = !json[QString("runDetails")].isNull() && m_run_details_isValid;
}

QString OAISlsaProvenanceV1::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISlsaProvenanceV1::asJsonObject() const {
    QJsonObject obj;
    if (m_build_definition.isSet()) {
        obj.insert(QString("buildDefinition"), ::OpenAPI::toJsonValue(m_build_definition));
    }
    if (m_run_details.isSet()) {
        obj.insert(QString("runDetails"), ::OpenAPI::toJsonValue(m_run_details));
    }
    return obj;
}

OAIBuildDefinition OAISlsaProvenanceV1::getBuildDefinition() const {
    return m_build_definition;
}
void OAISlsaProvenanceV1::setBuildDefinition(const OAIBuildDefinition &build_definition) {
    m_build_definition = build_definition;
    m_build_definition_isSet = true;
}

bool OAISlsaProvenanceV1::is_build_definition_Set() const{
    return m_build_definition_isSet;
}

bool OAISlsaProvenanceV1::is_build_definition_Valid() const{
    return m_build_definition_isValid;
}

OAIRunDetails OAISlsaProvenanceV1::getRunDetails() const {
    return m_run_details;
}
void OAISlsaProvenanceV1::setRunDetails(const OAIRunDetails &run_details) {
    m_run_details = run_details;
    m_run_details_isSet = true;
}

bool OAISlsaProvenanceV1::is_run_details_Set() const{
    return m_run_details_isSet;
}

bool OAISlsaProvenanceV1::is_run_details_Valid() const{
    return m_run_details_isValid;
}

bool OAISlsaProvenanceV1::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_build_definition.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_run_details.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISlsaProvenanceV1::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
