/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ContainerAnalysisApi);
  }
}(this, function(expect, ContainerAnalysisApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new ContainerAnalysisApi.Note();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Note', function() {
    it('should create an instance of Note', function() {
      // uncomment below and update the code to test Note
      //var instance = new ContainerAnalysisApi.Note();
      //expect(instance).to.be.a(ContainerAnalysisApi.Note);
    });

    it('should have the property attestationAuthority (base name: "attestationAuthority")', function() {
      // uncomment below and update the code to test the property attestationAuthority
      //var instance = new ContainerAnalysisApi.Note();
      //expect(instance).to.be();
    });

    it('should have the property baseImage (base name: "baseImage")', function() {
      // uncomment below and update the code to test the property baseImage
      //var instance = new ContainerAnalysisApi.Note();
      //expect(instance).to.be();
    });

    it('should have the property build (base name: "build")', function() {
      // uncomment below and update the code to test the property build
      //var instance = new ContainerAnalysisApi.Note();
      //expect(instance).to.be();
    });

    it('should have the property createTime (base name: "createTime")', function() {
      // uncomment below and update the code to test the property createTime
      //var instance = new ContainerAnalysisApi.Note();
      //expect(instance).to.be();
    });

    it('should have the property deployable (base name: "deployable")', function() {
      // uncomment below and update the code to test the property deployable
      //var instance = new ContainerAnalysisApi.Note();
      //expect(instance).to.be();
    });

    it('should have the property discovery (base name: "discovery")', function() {
      // uncomment below and update the code to test the property discovery
      //var instance = new ContainerAnalysisApi.Note();
      //expect(instance).to.be();
    });

    it('should have the property expirationTime (base name: "expirationTime")', function() {
      // uncomment below and update the code to test the property expirationTime
      //var instance = new ContainerAnalysisApi.Note();
      //expect(instance).to.be();
    });

    it('should have the property intoto (base name: "intoto")', function() {
      // uncomment below and update the code to test the property intoto
      //var instance = new ContainerAnalysisApi.Note();
      //expect(instance).to.be();
    });

    it('should have the property kind (base name: "kind")', function() {
      // uncomment below and update the code to test the property kind
      //var instance = new ContainerAnalysisApi.Note();
      //expect(instance).to.be();
    });

    it('should have the property longDescription (base name: "longDescription")', function() {
      // uncomment below and update the code to test the property longDescription
      //var instance = new ContainerAnalysisApi.Note();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new ContainerAnalysisApi.Note();
      //expect(instance).to.be();
    });

    it('should have the property _package (base name: "package")', function() {
      // uncomment below and update the code to test the property _package
      //var instance = new ContainerAnalysisApi.Note();
      //expect(instance).to.be();
    });

    it('should have the property relatedNoteNames (base name: "relatedNoteNames")', function() {
      // uncomment below and update the code to test the property relatedNoteNames
      //var instance = new ContainerAnalysisApi.Note();
      //expect(instance).to.be();
    });

    it('should have the property relatedUrl (base name: "relatedUrl")', function() {
      // uncomment below and update the code to test the property relatedUrl
      //var instance = new ContainerAnalysisApi.Note();
      //expect(instance).to.be();
    });

    it('should have the property sbom (base name: "sbom")', function() {
      // uncomment below and update the code to test the property sbom
      //var instance = new ContainerAnalysisApi.Note();
      //expect(instance).to.be();
    });

    it('should have the property sbomReference (base name: "sbomReference")', function() {
      // uncomment below and update the code to test the property sbomReference
      //var instance = new ContainerAnalysisApi.Note();
      //expect(instance).to.be();
    });

    it('should have the property shortDescription (base name: "shortDescription")', function() {
      // uncomment below and update the code to test the property shortDescription
      //var instance = new ContainerAnalysisApi.Note();
      //expect(instance).to.be();
    });

    it('should have the property spdxFile (base name: "spdxFile")', function() {
      // uncomment below and update the code to test the property spdxFile
      //var instance = new ContainerAnalysisApi.Note();
      //expect(instance).to.be();
    });

    it('should have the property spdxPackage (base name: "spdxPackage")', function() {
      // uncomment below and update the code to test the property spdxPackage
      //var instance = new ContainerAnalysisApi.Note();
      //expect(instance).to.be();
    });

    it('should have the property spdxRelationship (base name: "spdxRelationship")', function() {
      // uncomment below and update the code to test the property spdxRelationship
      //var instance = new ContainerAnalysisApi.Note();
      //expect(instance).to.be();
    });

    it('should have the property updateTime (base name: "updateTime")', function() {
      // uncomment below and update the code to test the property updateTime
      //var instance = new ContainerAnalysisApi.Note();
      //expect(instance).to.be();
    });

    it('should have the property vulnerability (base name: "vulnerability")', function() {
      // uncomment below and update the code to test the property vulnerability
      //var instance = new ContainerAnalysisApi.Note();
      //expect(instance).to.be();
    });

    it('should have the property vulnerabilityAssessment (base name: "vulnerabilityAssessment")', function() {
      // uncomment below and update the code to test the property vulnerabilityAssessment
      //var instance = new ContainerAnalysisApi.Note();
      //expect(instance).to.be();
    });

  });

}));
