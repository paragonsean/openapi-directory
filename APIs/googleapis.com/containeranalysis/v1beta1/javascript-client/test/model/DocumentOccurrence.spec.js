/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ContainerAnalysisApi);
  }
}(this, function(expect, ContainerAnalysisApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new ContainerAnalysisApi.DocumentOccurrence();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DocumentOccurrence', function() {
    it('should create an instance of DocumentOccurrence', function() {
      // uncomment below and update the code to test DocumentOccurrence
      //var instance = new ContainerAnalysisApi.DocumentOccurrence();
      //expect(instance).to.be.a(ContainerAnalysisApi.DocumentOccurrence);
    });

    it('should have the property createTime (base name: "createTime")', function() {
      // uncomment below and update the code to test the property createTime
      //var instance = new ContainerAnalysisApi.DocumentOccurrence();
      //expect(instance).to.be();
    });

    it('should have the property creatorComment (base name: "creatorComment")', function() {
      // uncomment below and update the code to test the property creatorComment
      //var instance = new ContainerAnalysisApi.DocumentOccurrence();
      //expect(instance).to.be();
    });

    it('should have the property creators (base name: "creators")', function() {
      // uncomment below and update the code to test the property creators
      //var instance = new ContainerAnalysisApi.DocumentOccurrence();
      //expect(instance).to.be();
    });

    it('should have the property documentComment (base name: "documentComment")', function() {
      // uncomment below and update the code to test the property documentComment
      //var instance = new ContainerAnalysisApi.DocumentOccurrence();
      //expect(instance).to.be();
    });

    it('should have the property externalDocumentRefs (base name: "externalDocumentRefs")', function() {
      // uncomment below and update the code to test the property externalDocumentRefs
      //var instance = new ContainerAnalysisApi.DocumentOccurrence();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new ContainerAnalysisApi.DocumentOccurrence();
      //expect(instance).to.be();
    });

    it('should have the property licenseListVersion (base name: "licenseListVersion")', function() {
      // uncomment below and update the code to test the property licenseListVersion
      //var instance = new ContainerAnalysisApi.DocumentOccurrence();
      //expect(instance).to.be();
    });

    it('should have the property namespace (base name: "namespace")', function() {
      // uncomment below and update the code to test the property namespace
      //var instance = new ContainerAnalysisApi.DocumentOccurrence();
      //expect(instance).to.be();
    });

    it('should have the property title (base name: "title")', function() {
      // uncomment below and update the code to test the property title
      //var instance = new ContainerAnalysisApi.DocumentOccurrence();
      //expect(instance).to.be();
    });

  });

}));
