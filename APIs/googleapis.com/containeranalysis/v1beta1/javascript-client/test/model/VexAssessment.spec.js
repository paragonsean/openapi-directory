/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ContainerAnalysisApi);
  }
}(this, function(expect, ContainerAnalysisApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new ContainerAnalysisApi.VexAssessment();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('VexAssessment', function() {
    it('should create an instance of VexAssessment', function() {
      // uncomment below and update the code to test VexAssessment
      //var instance = new ContainerAnalysisApi.VexAssessment();
      //expect(instance).to.be.a(ContainerAnalysisApi.VexAssessment);
    });

    it('should have the property cve (base name: "cve")', function() {
      // uncomment below and update the code to test the property cve
      //var instance = new ContainerAnalysisApi.VexAssessment();
      //expect(instance).to.be();
    });

    it('should have the property impacts (base name: "impacts")', function() {
      // uncomment below and update the code to test the property impacts
      //var instance = new ContainerAnalysisApi.VexAssessment();
      //expect(instance).to.be();
    });

    it('should have the property justification (base name: "justification")', function() {
      // uncomment below and update the code to test the property justification
      //var instance = new ContainerAnalysisApi.VexAssessment();
      //expect(instance).to.be();
    });

    it('should have the property noteName (base name: "noteName")', function() {
      // uncomment below and update the code to test the property noteName
      //var instance = new ContainerAnalysisApi.VexAssessment();
      //expect(instance).to.be();
    });

    it('should have the property relatedUris (base name: "relatedUris")', function() {
      // uncomment below and update the code to test the property relatedUris
      //var instance = new ContainerAnalysisApi.VexAssessment();
      //expect(instance).to.be();
    });

    it('should have the property remediations (base name: "remediations")', function() {
      // uncomment below and update the code to test the property remediations
      //var instance = new ContainerAnalysisApi.VexAssessment();
      //expect(instance).to.be();
    });

    it('should have the property state (base name: "state")', function() {
      // uncomment below and update the code to test the property state
      //var instance = new ContainerAnalysisApi.VexAssessment();
      //expect(instance).to.be();
    });

    it('should have the property vulnerabilityId (base name: "vulnerabilityId")', function() {
      // uncomment below and update the code to test the property vulnerabilityId
      //var instance = new ContainerAnalysisApi.VexAssessment();
      //expect(instance).to.be();
    });

  });

}));
