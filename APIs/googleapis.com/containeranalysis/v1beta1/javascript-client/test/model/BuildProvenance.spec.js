/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ContainerAnalysisApi);
  }
}(this, function(expect, ContainerAnalysisApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new ContainerAnalysisApi.BuildProvenance();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('BuildProvenance', function() {
    it('should create an instance of BuildProvenance', function() {
      // uncomment below and update the code to test BuildProvenance
      //var instance = new ContainerAnalysisApi.BuildProvenance();
      //expect(instance).to.be.a(ContainerAnalysisApi.BuildProvenance);
    });

    it('should have the property buildOptions (base name: "buildOptions")', function() {
      // uncomment below and update the code to test the property buildOptions
      //var instance = new ContainerAnalysisApi.BuildProvenance();
      //expect(instance).to.be();
    });

    it('should have the property builderVersion (base name: "builderVersion")', function() {
      // uncomment below and update the code to test the property builderVersion
      //var instance = new ContainerAnalysisApi.BuildProvenance();
      //expect(instance).to.be();
    });

    it('should have the property builtArtifacts (base name: "builtArtifacts")', function() {
      // uncomment below and update the code to test the property builtArtifacts
      //var instance = new ContainerAnalysisApi.BuildProvenance();
      //expect(instance).to.be();
    });

    it('should have the property commands (base name: "commands")', function() {
      // uncomment below and update the code to test the property commands
      //var instance = new ContainerAnalysisApi.BuildProvenance();
      //expect(instance).to.be();
    });

    it('should have the property createTime (base name: "createTime")', function() {
      // uncomment below and update the code to test the property createTime
      //var instance = new ContainerAnalysisApi.BuildProvenance();
      //expect(instance).to.be();
    });

    it('should have the property creator (base name: "creator")', function() {
      // uncomment below and update the code to test the property creator
      //var instance = new ContainerAnalysisApi.BuildProvenance();
      //expect(instance).to.be();
    });

    it('should have the property endTime (base name: "endTime")', function() {
      // uncomment below and update the code to test the property endTime
      //var instance = new ContainerAnalysisApi.BuildProvenance();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new ContainerAnalysisApi.BuildProvenance();
      //expect(instance).to.be();
    });

    it('should have the property logsUri (base name: "logsUri")', function() {
      // uncomment below and update the code to test the property logsUri
      //var instance = new ContainerAnalysisApi.BuildProvenance();
      //expect(instance).to.be();
    });

    it('should have the property projectId (base name: "projectId")', function() {
      // uncomment below and update the code to test the property projectId
      //var instance = new ContainerAnalysisApi.BuildProvenance();
      //expect(instance).to.be();
    });

    it('should have the property sourceProvenance (base name: "sourceProvenance")', function() {
      // uncomment below and update the code to test the property sourceProvenance
      //var instance = new ContainerAnalysisApi.BuildProvenance();
      //expect(instance).to.be();
    });

    it('should have the property startTime (base name: "startTime")', function() {
      // uncomment below and update the code to test the property startTime
      //var instance = new ContainerAnalysisApi.BuildProvenance();
      //expect(instance).to.be();
    });

    it('should have the property triggerId (base name: "triggerId")', function() {
      // uncomment below and update the code to test the property triggerId
      //var instance = new ContainerAnalysisApi.BuildProvenance();
      //expect(instance).to.be();
    });

  });

}));
