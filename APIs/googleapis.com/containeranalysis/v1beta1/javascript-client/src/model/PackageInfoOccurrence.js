/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import License from './License';

/**
 * The PackageInfoOccurrence model module.
 * @module model/PackageInfoOccurrence
 * @version v1beta1
 */
class PackageInfoOccurrence {
    /**
     * Constructs a new <code>PackageInfoOccurrence</code>.
     * PackageInfoOccurrence represents an SPDX Package Information section: https://spdx.github.io/spdx-spec/3-package-information/
     * @alias module:model/PackageInfoOccurrence
     */
    constructor() { 
        
        PackageInfoOccurrence.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PackageInfoOccurrence</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PackageInfoOccurrence} obj Optional instance to populate.
     * @return {module:model/PackageInfoOccurrence} The populated <code>PackageInfoOccurrence</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PackageInfoOccurrence();

            if (data.hasOwnProperty('comment')) {
                obj['comment'] = ApiClient.convertToType(data['comment'], 'String');
            }
            if (data.hasOwnProperty('filename')) {
                obj['filename'] = ApiClient.convertToType(data['filename'], 'String');
            }
            if (data.hasOwnProperty('homePage')) {
                obj['homePage'] = ApiClient.convertToType(data['homePage'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('licenseConcluded')) {
                obj['licenseConcluded'] = License.constructFromObject(data['licenseConcluded']);
            }
            if (data.hasOwnProperty('packageType')) {
                obj['packageType'] = ApiClient.convertToType(data['packageType'], 'String');
            }
            if (data.hasOwnProperty('sourceInfo')) {
                obj['sourceInfo'] = ApiClient.convertToType(data['sourceInfo'], 'String');
            }
            if (data.hasOwnProperty('summaryDescription')) {
                obj['summaryDescription'] = ApiClient.convertToType(data['summaryDescription'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PackageInfoOccurrence</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PackageInfoOccurrence</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['comment'] && !(typeof data['comment'] === 'string' || data['comment'] instanceof String)) {
            throw new Error("Expected the field `comment` to be a primitive type in the JSON string but got " + data['comment']);
        }
        // ensure the json data is a string
        if (data['filename'] && !(typeof data['filename'] === 'string' || data['filename'] instanceof String)) {
            throw new Error("Expected the field `filename` to be a primitive type in the JSON string but got " + data['filename']);
        }
        // ensure the json data is a string
        if (data['homePage'] && !(typeof data['homePage'] === 'string' || data['homePage'] instanceof String)) {
            throw new Error("Expected the field `homePage` to be a primitive type in the JSON string but got " + data['homePage']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // validate the optional field `licenseConcluded`
        if (data['licenseConcluded']) { // data not null
          License.validateJSON(data['licenseConcluded']);
        }
        // ensure the json data is a string
        if (data['packageType'] && !(typeof data['packageType'] === 'string' || data['packageType'] instanceof String)) {
            throw new Error("Expected the field `packageType` to be a primitive type in the JSON string but got " + data['packageType']);
        }
        // ensure the json data is a string
        if (data['sourceInfo'] && !(typeof data['sourceInfo'] === 'string' || data['sourceInfo'] instanceof String)) {
            throw new Error("Expected the field `sourceInfo` to be a primitive type in the JSON string but got " + data['sourceInfo']);
        }
        // ensure the json data is a string
        if (data['summaryDescription'] && !(typeof data['summaryDescription'] === 'string' || data['summaryDescription'] instanceof String)) {
            throw new Error("Expected the field `summaryDescription` to be a primitive type in the JSON string but got " + data['summaryDescription']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['version'] && !(typeof data['version'] === 'string' || data['version'] instanceof String)) {
            throw new Error("Expected the field `version` to be a primitive type in the JSON string but got " + data['version']);
        }

        return true;
    }


}



/**
 * A place for the SPDX file creator to record any general comments about the package being described
 * @member {String} comment
 */
PackageInfoOccurrence.prototype['comment'] = undefined;

/**
 * Provide the actual file name of the package, or path of the directory being treated as a package
 * @member {String} filename
 */
PackageInfoOccurrence.prototype['filename'] = undefined;

/**
 * Output only. Provide a place for the SPDX file creator to record a web site that serves as the package's home page
 * @member {String} homePage
 */
PackageInfoOccurrence.prototype['homePage'] = undefined;

/**
 * Uniquely identify any element in an SPDX document which may be referenced by other elements
 * @member {String} id
 */
PackageInfoOccurrence.prototype['id'] = undefined;

/**
 * @member {module:model/License} licenseConcluded
 */
PackageInfoOccurrence.prototype['licenseConcluded'] = undefined;

/**
 * Output only. The type of package: OS, MAVEN, GO, GO_STDLIB, etc.
 * @member {String} packageType
 */
PackageInfoOccurrence.prototype['packageType'] = undefined;

/**
 * Provide a place for the SPDX file creator to record any relevant background information or additional comments about the origin of the package
 * @member {String} sourceInfo
 */
PackageInfoOccurrence.prototype['sourceInfo'] = undefined;

/**
 * Output only. A short description of the package
 * @member {String} summaryDescription
 */
PackageInfoOccurrence.prototype['summaryDescription'] = undefined;

/**
 * Output only. Identify the full name of the package as given by the Package Originator
 * @member {String} title
 */
PackageInfoOccurrence.prototype['title'] = undefined;

/**
 * Output only. Identify the version of the package
 * @member {String} version
 */
PackageInfoOccurrence.prototype['version'] = undefined;






export default PackageInfoOccurrence;

