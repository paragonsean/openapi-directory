/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import VulnerabilityLocation from './VulnerabilityLocation';

/**
 * The PackageIssue model module.
 * @module model/PackageIssue
 * @version v1beta1
 */
class PackageIssue {
    /**
     * Constructs a new <code>PackageIssue</code>.
     * This message wraps a location affected by a vulnerability and its associated fix (if one is available).
     * @alias module:model/PackageIssue
     */
    constructor() { 
        
        PackageIssue.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PackageIssue</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PackageIssue} obj Optional instance to populate.
     * @return {module:model/PackageIssue} The populated <code>PackageIssue</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PackageIssue();

            if (data.hasOwnProperty('affectedLocation')) {
                obj['affectedLocation'] = VulnerabilityLocation.constructFromObject(data['affectedLocation']);
            }
            if (data.hasOwnProperty('effectiveSeverity')) {
                obj['effectiveSeverity'] = ApiClient.convertToType(data['effectiveSeverity'], 'String');
            }
            if (data.hasOwnProperty('fixedLocation')) {
                obj['fixedLocation'] = VulnerabilityLocation.constructFromObject(data['fixedLocation']);
            }
            if (data.hasOwnProperty('packageType')) {
                obj['packageType'] = ApiClient.convertToType(data['packageType'], 'String');
            }
            if (data.hasOwnProperty('severityName')) {
                obj['severityName'] = ApiClient.convertToType(data['severityName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PackageIssue</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PackageIssue</code>.
     */
    static validateJSON(data) {
        // validate the optional field `affectedLocation`
        if (data['affectedLocation']) { // data not null
          VulnerabilityLocation.validateJSON(data['affectedLocation']);
        }
        // ensure the json data is a string
        if (data['effectiveSeverity'] && !(typeof data['effectiveSeverity'] === 'string' || data['effectiveSeverity'] instanceof String)) {
            throw new Error("Expected the field `effectiveSeverity` to be a primitive type in the JSON string but got " + data['effectiveSeverity']);
        }
        // validate the optional field `fixedLocation`
        if (data['fixedLocation']) { // data not null
          VulnerabilityLocation.validateJSON(data['fixedLocation']);
        }
        // ensure the json data is a string
        if (data['packageType'] && !(typeof data['packageType'] === 'string' || data['packageType'] instanceof String)) {
            throw new Error("Expected the field `packageType` to be a primitive type in the JSON string but got " + data['packageType']);
        }
        // ensure the json data is a string
        if (data['severityName'] && !(typeof data['severityName'] === 'string' || data['severityName'] instanceof String)) {
            throw new Error("Expected the field `severityName` to be a primitive type in the JSON string but got " + data['severityName']);
        }

        return true;
    }


}



/**
 * @member {module:model/VulnerabilityLocation} affectedLocation
 */
PackageIssue.prototype['affectedLocation'] = undefined;

/**
 * Output only. The distro or language system assigned severity for this vulnerability when that is available and note provider assigned severity when it is not available.
 * @member {module:model/PackageIssue.EffectiveSeverityEnum} effectiveSeverity
 */
PackageIssue.prototype['effectiveSeverity'] = undefined;

/**
 * @member {module:model/VulnerabilityLocation} fixedLocation
 */
PackageIssue.prototype['fixedLocation'] = undefined;

/**
 * The type of package (e.g. OS, MAVEN, GO).
 * @member {String} packageType
 */
PackageIssue.prototype['packageType'] = undefined;

/**
 * Deprecated, use Details.effective_severity instead The severity (e.g., distro assigned severity) for this vulnerability.
 * @member {String} severityName
 */
PackageIssue.prototype['severityName'] = undefined;





/**
 * Allowed values for the <code>effectiveSeverity</code> property.
 * @enum {String}
 * @readonly
 */
PackageIssue['EffectiveSeverityEnum'] = {

    /**
     * value: "SEVERITY_UNSPECIFIED"
     * @const
     */
    "SEVERITY_UNSPECIFIED": "SEVERITY_UNSPECIFIED",

    /**
     * value: "MINIMAL"
     * @const
     */
    "MINIMAL": "MINIMAL",

    /**
     * value: "LOW"
     * @const
     */
    "LOW": "LOW",

    /**
     * value: "MEDIUM"
     * @const
     */
    "MEDIUM": "MEDIUM",

    /**
     * value: "HIGH"
     * @const
     */
    "HIGH": "HIGH",

    /**
     * value: "CRITICAL"
     * @const
     */
    "CRITICAL": "CRITICAL"
};



export default PackageIssue;

