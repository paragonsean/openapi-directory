/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CVSS from './CVSS';
import CVSSv3 from './CVSSv3';
import Detail from './Detail';
import WindowsDetail from './WindowsDetail';

/**
 * The Vulnerability model module.
 * @module model/Vulnerability
 * @version v1beta1
 */
class Vulnerability {
    /**
     * Constructs a new <code>Vulnerability</code>.
     * Vulnerability provides metadata about a security vulnerability in a Note.
     * @alias module:model/Vulnerability
     */
    constructor() { 
        
        Vulnerability.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Vulnerability</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Vulnerability} obj Optional instance to populate.
     * @return {module:model/Vulnerability} The populated <code>Vulnerability</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Vulnerability();

            if (data.hasOwnProperty('cvssScore')) {
                obj['cvssScore'] = ApiClient.convertToType(data['cvssScore'], 'Number');
            }
            if (data.hasOwnProperty('cvssV2')) {
                obj['cvssV2'] = CVSS.constructFromObject(data['cvssV2']);
            }
            if (data.hasOwnProperty('cvssV3')) {
                obj['cvssV3'] = CVSSv3.constructFromObject(data['cvssV3']);
            }
            if (data.hasOwnProperty('cvssVersion')) {
                obj['cvssVersion'] = ApiClient.convertToType(data['cvssVersion'], 'String');
            }
            if (data.hasOwnProperty('cwe')) {
                obj['cwe'] = ApiClient.convertToType(data['cwe'], ['String']);
            }
            if (data.hasOwnProperty('details')) {
                obj['details'] = ApiClient.convertToType(data['details'], [Detail]);
            }
            if (data.hasOwnProperty('severity')) {
                obj['severity'] = ApiClient.convertToType(data['severity'], 'String');
            }
            if (data.hasOwnProperty('sourceUpdateTime')) {
                obj['sourceUpdateTime'] = ApiClient.convertToType(data['sourceUpdateTime'], 'String');
            }
            if (data.hasOwnProperty('windowsDetails')) {
                obj['windowsDetails'] = ApiClient.convertToType(data['windowsDetails'], [WindowsDetail]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Vulnerability</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Vulnerability</code>.
     */
    static validateJSON(data) {
        // validate the optional field `cvssV2`
        if (data['cvssV2']) { // data not null
          CVSS.validateJSON(data['cvssV2']);
        }
        // validate the optional field `cvssV3`
        if (data['cvssV3']) { // data not null
          CVSSv3.validateJSON(data['cvssV3']);
        }
        // ensure the json data is a string
        if (data['cvssVersion'] && !(typeof data['cvssVersion'] === 'string' || data['cvssVersion'] instanceof String)) {
            throw new Error("Expected the field `cvssVersion` to be a primitive type in the JSON string but got " + data['cvssVersion']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['cwe'])) {
            throw new Error("Expected the field `cwe` to be an array in the JSON data but got " + data['cwe']);
        }
        if (data['details']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['details'])) {
                throw new Error("Expected the field `details` to be an array in the JSON data but got " + data['details']);
            }
            // validate the optional field `details` (array)
            for (const item of data['details']) {
                Detail.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['severity'] && !(typeof data['severity'] === 'string' || data['severity'] instanceof String)) {
            throw new Error("Expected the field `severity` to be a primitive type in the JSON string but got " + data['severity']);
        }
        // ensure the json data is a string
        if (data['sourceUpdateTime'] && !(typeof data['sourceUpdateTime'] === 'string' || data['sourceUpdateTime'] instanceof String)) {
            throw new Error("Expected the field `sourceUpdateTime` to be a primitive type in the JSON string but got " + data['sourceUpdateTime']);
        }
        if (data['windowsDetails']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['windowsDetails'])) {
                throw new Error("Expected the field `windowsDetails` to be an array in the JSON data but got " + data['windowsDetails']);
            }
            // validate the optional field `windowsDetails` (array)
            for (const item of data['windowsDetails']) {
                WindowsDetail.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * The CVSS score for this vulnerability.
 * @member {Number} cvssScore
 */
Vulnerability.prototype['cvssScore'] = undefined;

/**
 * @member {module:model/CVSS} cvssV2
 */
Vulnerability.prototype['cvssV2'] = undefined;

/**
 * @member {module:model/CVSSv3} cvssV3
 */
Vulnerability.prototype['cvssV3'] = undefined;

/**
 * CVSS version used to populate cvss_score and severity.
 * @member {module:model/Vulnerability.CvssVersionEnum} cvssVersion
 */
Vulnerability.prototype['cvssVersion'] = undefined;

/**
 * A list of CWE for this vulnerability. For details, see: https://cwe.mitre.org/index.html
 * @member {Array.<String>} cwe
 */
Vulnerability.prototype['cwe'] = undefined;

/**
 * All information about the package to specifically identify this vulnerability. One entry per (version range and cpe_uri) the package vulnerability has manifested in.
 * @member {Array.<module:model/Detail>} details
 */
Vulnerability.prototype['details'] = undefined;

/**
 * Note provider assigned impact of the vulnerability.
 * @member {module:model/Vulnerability.SeverityEnum} severity
 */
Vulnerability.prototype['severity'] = undefined;

/**
 * The time this information was last changed at the source. This is an upstream timestamp from the underlying information source - e.g. Ubuntu security tracker.
 * @member {String} sourceUpdateTime
 */
Vulnerability.prototype['sourceUpdateTime'] = undefined;

/**
 * Windows details get their own format because the information format and model don't match a normal detail. Specifically Windows updates are done as patches, thus Windows vulnerabilities really are a missing package, rather than a package being at an incorrect version.
 * @member {Array.<module:model/WindowsDetail>} windowsDetails
 */
Vulnerability.prototype['windowsDetails'] = undefined;





/**
 * Allowed values for the <code>cvssVersion</code> property.
 * @enum {String}
 * @readonly
 */
Vulnerability['CvssVersionEnum'] = {

    /**
     * value: "CVSS_VERSION_UNSPECIFIED"
     * @const
     */
    "UNSPECIFIED": "CVSS_VERSION_UNSPECIFIED",

    /**
     * value: "CVSS_VERSION_2"
     * @const
     */
    "2": "CVSS_VERSION_2",

    /**
     * value: "CVSS_VERSION_3"
     * @const
     */
    "3": "CVSS_VERSION_3"
};


/**
 * Allowed values for the <code>severity</code> property.
 * @enum {String}
 * @readonly
 */
Vulnerability['SeverityEnum'] = {

    /**
     * value: "SEVERITY_UNSPECIFIED"
     * @const
     */
    "SEVERITY_UNSPECIFIED": "SEVERITY_UNSPECIFIED",

    /**
     * value: "MINIMAL"
     * @const
     */
    "MINIMAL": "MINIMAL",

    /**
     * value: "LOW"
     * @const
     */
    "LOW": "LOW",

    /**
     * value: "MEDIUM"
     * @const
     */
    "MEDIUM": "MEDIUM",

    /**
     * value: "HIGH"
     * @const
     */
    "HIGH": "HIGH",

    /**
     * value: "CRITICAL"
     * @const
     */
    "CRITICAL": "CRITICAL"
};



export default Vulnerability;

