/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Signature from './Signature';

/**
 * The GenericSignedAttestation model module.
 * @module model/GenericSignedAttestation
 * @version v1beta1
 */
class GenericSignedAttestation {
    /**
     * Constructs a new <code>GenericSignedAttestation</code>.
     * An attestation wrapper that uses the Grafeas &#x60;Signature&#x60; message. This attestation must define the &#x60;serialized_payload&#x60; that the &#x60;signatures&#x60; verify and any metadata necessary to interpret that plaintext. The signatures should always be over the &#x60;serialized_payload&#x60; bytestring.
     * @alias module:model/GenericSignedAttestation
     */
    constructor() { 
        
        GenericSignedAttestation.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GenericSignedAttestation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GenericSignedAttestation} obj Optional instance to populate.
     * @return {module:model/GenericSignedAttestation} The populated <code>GenericSignedAttestation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GenericSignedAttestation();

            if (data.hasOwnProperty('contentType')) {
                obj['contentType'] = ApiClient.convertToType(data['contentType'], 'String');
            }
            if (data.hasOwnProperty('serializedPayload')) {
                obj['serializedPayload'] = ApiClient.convertToType(data['serializedPayload'], 'Blob');
            }
            if (data.hasOwnProperty('signatures')) {
                obj['signatures'] = ApiClient.convertToType(data['signatures'], [Signature]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GenericSignedAttestation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GenericSignedAttestation</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['contentType'] && !(typeof data['contentType'] === 'string' || data['contentType'] instanceof String)) {
            throw new Error("Expected the field `contentType` to be a primitive type in the JSON string but got " + data['contentType']);
        }
        if (data['signatures']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['signatures'])) {
                throw new Error("Expected the field `signatures` to be an array in the JSON data but got " + data['signatures']);
            }
            // validate the optional field `signatures` (array)
            for (const item of data['signatures']) {
                Signature.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Type (for example schema) of the attestation payload that was signed. The verifier must ensure that the provided type is one that the verifier supports, and that the attestation payload is a valid instantiation of that type (for example by validating a JSON schema).
 * @member {module:model/GenericSignedAttestation.ContentTypeEnum} contentType
 */
GenericSignedAttestation.prototype['contentType'] = undefined;

/**
 * The serialized payload that is verified by one or more `signatures`. The encoding and semantic meaning of this payload must match what is set in `content_type`.
 * @member {Blob} serializedPayload
 */
GenericSignedAttestation.prototype['serializedPayload'] = undefined;

/**
 * One or more signatures over `serialized_payload`. Verifier implementations should consider this attestation message verified if at least one `signature` verifies `serialized_payload`. See `Signature` in common.proto for more details on signature structure and verification.
 * @member {Array.<module:model/Signature>} signatures
 */
GenericSignedAttestation.prototype['signatures'] = undefined;





/**
 * Allowed values for the <code>contentType</code> property.
 * @enum {String}
 * @readonly
 */
GenericSignedAttestation['ContentTypeEnum'] = {

    /**
     * value: "CONTENT_TYPE_UNSPECIFIED"
     * @const
     */
    "CONTENT_TYPE_UNSPECIFIED": "CONTENT_TYPE_UNSPECIFIED",

    /**
     * value: "SIMPLE_SIGNING_JSON"
     * @const
     */
    "SIMPLE_SIGNING_JSON": "SIMPLE_SIGNING_JSON"
};



export default GenericSignedAttestation;

