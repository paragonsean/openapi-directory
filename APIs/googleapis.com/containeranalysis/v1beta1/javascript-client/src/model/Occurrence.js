/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Details from './Details';
import DocumentOccurrence from './DocumentOccurrence';
import Envelope from './Envelope';
import FileOccurrence from './FileOccurrence';
import GrafeasV1beta1BuildDetails from './GrafeasV1beta1BuildDetails';
import GrafeasV1beta1DeploymentDetails from './GrafeasV1beta1DeploymentDetails';
import GrafeasV1beta1DiscoveryDetails from './GrafeasV1beta1DiscoveryDetails';
import GrafeasV1beta1ImageDetails from './GrafeasV1beta1ImageDetails';
import GrafeasV1beta1IntotoDetails from './GrafeasV1beta1IntotoDetails';
import GrafeasV1beta1PackageDetails from './GrafeasV1beta1PackageDetails';
import GrafeasV1beta1VulnerabilityDetails from './GrafeasV1beta1VulnerabilityDetails';
import PackageInfoOccurrence from './PackageInfoOccurrence';
import RelationshipOccurrence from './RelationshipOccurrence';
import Resource from './Resource';
import SBOMReferenceOccurrence from './SBOMReferenceOccurrence';

/**
 * The Occurrence model module.
 * @module model/Occurrence
 * @version v1beta1
 */
class Occurrence {
    /**
     * Constructs a new <code>Occurrence</code>.
     * An instance of an analysis type that has been found on a resource.
     * @alias module:model/Occurrence
     */
    constructor() { 
        
        Occurrence.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Occurrence</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Occurrence} obj Optional instance to populate.
     * @return {module:model/Occurrence} The populated <code>Occurrence</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Occurrence();

            if (data.hasOwnProperty('attestation')) {
                obj['attestation'] = Details.constructFromObject(data['attestation']);
            }
            if (data.hasOwnProperty('build')) {
                obj['build'] = GrafeasV1beta1BuildDetails.constructFromObject(data['build']);
            }
            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'String');
            }
            if (data.hasOwnProperty('deployment')) {
                obj['deployment'] = GrafeasV1beta1DeploymentDetails.constructFromObject(data['deployment']);
            }
            if (data.hasOwnProperty('derivedImage')) {
                obj['derivedImage'] = GrafeasV1beta1ImageDetails.constructFromObject(data['derivedImage']);
            }
            if (data.hasOwnProperty('discovered')) {
                obj['discovered'] = GrafeasV1beta1DiscoveryDetails.constructFromObject(data['discovered']);
            }
            if (data.hasOwnProperty('envelope')) {
                obj['envelope'] = Envelope.constructFromObject(data['envelope']);
            }
            if (data.hasOwnProperty('installation')) {
                obj['installation'] = GrafeasV1beta1PackageDetails.constructFromObject(data['installation']);
            }
            if (data.hasOwnProperty('intoto')) {
                obj['intoto'] = GrafeasV1beta1IntotoDetails.constructFromObject(data['intoto']);
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('noteName')) {
                obj['noteName'] = ApiClient.convertToType(data['noteName'], 'String');
            }
            if (data.hasOwnProperty('remediation')) {
                obj['remediation'] = ApiClient.convertToType(data['remediation'], 'String');
            }
            if (data.hasOwnProperty('resource')) {
                obj['resource'] = Resource.constructFromObject(data['resource']);
            }
            if (data.hasOwnProperty('sbom')) {
                obj['sbom'] = DocumentOccurrence.constructFromObject(data['sbom']);
            }
            if (data.hasOwnProperty('sbomReference')) {
                obj['sbomReference'] = SBOMReferenceOccurrence.constructFromObject(data['sbomReference']);
            }
            if (data.hasOwnProperty('spdxFile')) {
                obj['spdxFile'] = FileOccurrence.constructFromObject(data['spdxFile']);
            }
            if (data.hasOwnProperty('spdxPackage')) {
                obj['spdxPackage'] = PackageInfoOccurrence.constructFromObject(data['spdxPackage']);
            }
            if (data.hasOwnProperty('spdxRelationship')) {
                obj['spdxRelationship'] = RelationshipOccurrence.constructFromObject(data['spdxRelationship']);
            }
            if (data.hasOwnProperty('updateTime')) {
                obj['updateTime'] = ApiClient.convertToType(data['updateTime'], 'String');
            }
            if (data.hasOwnProperty('vulnerability')) {
                obj['vulnerability'] = GrafeasV1beta1VulnerabilityDetails.constructFromObject(data['vulnerability']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Occurrence</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Occurrence</code>.
     */
    static validateJSON(data) {
        // validate the optional field `attestation`
        if (data['attestation']) { // data not null
          Details.validateJSON(data['attestation']);
        }
        // validate the optional field `build`
        if (data['build']) { // data not null
          GrafeasV1beta1BuildDetails.validateJSON(data['build']);
        }
        // ensure the json data is a string
        if (data['createTime'] && !(typeof data['createTime'] === 'string' || data['createTime'] instanceof String)) {
            throw new Error("Expected the field `createTime` to be a primitive type in the JSON string but got " + data['createTime']);
        }
        // validate the optional field `deployment`
        if (data['deployment']) { // data not null
          GrafeasV1beta1DeploymentDetails.validateJSON(data['deployment']);
        }
        // validate the optional field `derivedImage`
        if (data['derivedImage']) { // data not null
          GrafeasV1beta1ImageDetails.validateJSON(data['derivedImage']);
        }
        // validate the optional field `discovered`
        if (data['discovered']) { // data not null
          GrafeasV1beta1DiscoveryDetails.validateJSON(data['discovered']);
        }
        // validate the optional field `envelope`
        if (data['envelope']) { // data not null
          Envelope.validateJSON(data['envelope']);
        }
        // validate the optional field `installation`
        if (data['installation']) { // data not null
          GrafeasV1beta1PackageDetails.validateJSON(data['installation']);
        }
        // validate the optional field `intoto`
        if (data['intoto']) { // data not null
          GrafeasV1beta1IntotoDetails.validateJSON(data['intoto']);
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['noteName'] && !(typeof data['noteName'] === 'string' || data['noteName'] instanceof String)) {
            throw new Error("Expected the field `noteName` to be a primitive type in the JSON string but got " + data['noteName']);
        }
        // ensure the json data is a string
        if (data['remediation'] && !(typeof data['remediation'] === 'string' || data['remediation'] instanceof String)) {
            throw new Error("Expected the field `remediation` to be a primitive type in the JSON string but got " + data['remediation']);
        }
        // validate the optional field `resource`
        if (data['resource']) { // data not null
          Resource.validateJSON(data['resource']);
        }
        // validate the optional field `sbom`
        if (data['sbom']) { // data not null
          DocumentOccurrence.validateJSON(data['sbom']);
        }
        // validate the optional field `sbomReference`
        if (data['sbomReference']) { // data not null
          SBOMReferenceOccurrence.validateJSON(data['sbomReference']);
        }
        // validate the optional field `spdxFile`
        if (data['spdxFile']) { // data not null
          FileOccurrence.validateJSON(data['spdxFile']);
        }
        // validate the optional field `spdxPackage`
        if (data['spdxPackage']) { // data not null
          PackageInfoOccurrence.validateJSON(data['spdxPackage']);
        }
        // validate the optional field `spdxRelationship`
        if (data['spdxRelationship']) { // data not null
          RelationshipOccurrence.validateJSON(data['spdxRelationship']);
        }
        // ensure the json data is a string
        if (data['updateTime'] && !(typeof data['updateTime'] === 'string' || data['updateTime'] instanceof String)) {
            throw new Error("Expected the field `updateTime` to be a primitive type in the JSON string but got " + data['updateTime']);
        }
        // validate the optional field `vulnerability`
        if (data['vulnerability']) { // data not null
          GrafeasV1beta1VulnerabilityDetails.validateJSON(data['vulnerability']);
        }

        return true;
    }


}



/**
 * @member {module:model/Details} attestation
 */
Occurrence.prototype['attestation'] = undefined;

/**
 * @member {module:model/GrafeasV1beta1BuildDetails} build
 */
Occurrence.prototype['build'] = undefined;

/**
 * Output only. The time this occurrence was created.
 * @member {String} createTime
 */
Occurrence.prototype['createTime'] = undefined;

/**
 * @member {module:model/GrafeasV1beta1DeploymentDetails} deployment
 */
Occurrence.prototype['deployment'] = undefined;

/**
 * @member {module:model/GrafeasV1beta1ImageDetails} derivedImage
 */
Occurrence.prototype['derivedImage'] = undefined;

/**
 * @member {module:model/GrafeasV1beta1DiscoveryDetails} discovered
 */
Occurrence.prototype['discovered'] = undefined;

/**
 * @member {module:model/Envelope} envelope
 */
Occurrence.prototype['envelope'] = undefined;

/**
 * @member {module:model/GrafeasV1beta1PackageDetails} installation
 */
Occurrence.prototype['installation'] = undefined;

/**
 * @member {module:model/GrafeasV1beta1IntotoDetails} intoto
 */
Occurrence.prototype['intoto'] = undefined;

/**
 * Output only. This explicitly denotes which of the occurrence details are specified. This field can be used as a filter in list requests.
 * @member {module:model/Occurrence.KindEnum} kind
 */
Occurrence.prototype['kind'] = undefined;

/**
 * Output only. The name of the occurrence in the form of `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]`.
 * @member {String} name
 */
Occurrence.prototype['name'] = undefined;

/**
 * Required. Immutable. The analysis note associated with this occurrence, in the form of `projects/[PROVIDER_ID]/notes/[NOTE_ID]`. This field can be used as a filter in list requests.
 * @member {String} noteName
 */
Occurrence.prototype['noteName'] = undefined;

/**
 * A description of actions that can be taken to remedy the note.
 * @member {String} remediation
 */
Occurrence.prototype['remediation'] = undefined;

/**
 * @member {module:model/Resource} resource
 */
Occurrence.prototype['resource'] = undefined;

/**
 * @member {module:model/DocumentOccurrence} sbom
 */
Occurrence.prototype['sbom'] = undefined;

/**
 * @member {module:model/SBOMReferenceOccurrence} sbomReference
 */
Occurrence.prototype['sbomReference'] = undefined;

/**
 * @member {module:model/FileOccurrence} spdxFile
 */
Occurrence.prototype['spdxFile'] = undefined;

/**
 * @member {module:model/PackageInfoOccurrence} spdxPackage
 */
Occurrence.prototype['spdxPackage'] = undefined;

/**
 * @member {module:model/RelationshipOccurrence} spdxRelationship
 */
Occurrence.prototype['spdxRelationship'] = undefined;

/**
 * Output only. The time this occurrence was last updated.
 * @member {String} updateTime
 */
Occurrence.prototype['updateTime'] = undefined;

/**
 * @member {module:model/GrafeasV1beta1VulnerabilityDetails} vulnerability
 */
Occurrence.prototype['vulnerability'] = undefined;





/**
 * Allowed values for the <code>kind</code> property.
 * @enum {String}
 * @readonly
 */
Occurrence['KindEnum'] = {

    /**
     * value: "NOTE_KIND_UNSPECIFIED"
     * @const
     */
    "NOTE_KIND_UNSPECIFIED": "NOTE_KIND_UNSPECIFIED",

    /**
     * value: "VULNERABILITY"
     * @const
     */
    "VULNERABILITY": "VULNERABILITY",

    /**
     * value: "BUILD"
     * @const
     */
    "BUILD": "BUILD",

    /**
     * value: "IMAGE"
     * @const
     */
    "IMAGE": "IMAGE",

    /**
     * value: "PACKAGE"
     * @const
     */
    "PACKAGE": "PACKAGE",

    /**
     * value: "DEPLOYMENT"
     * @const
     */
    "DEPLOYMENT": "DEPLOYMENT",

    /**
     * value: "DISCOVERY"
     * @const
     */
    "DISCOVERY": "DISCOVERY",

    /**
     * value: "ATTESTATION"
     * @const
     */
    "ATTESTATION": "ATTESTATION",

    /**
     * value: "INTOTO"
     * @const
     */
    "INTOTO": "INTOTO",

    /**
     * value: "SBOM"
     * @const
     */
    "SBOM": "SBOM",

    /**
     * value: "SPDX_PACKAGE"
     * @const
     */
    "SPDX_PACKAGE": "SPDX_PACKAGE",

    /**
     * value: "SPDX_FILE"
     * @const
     */
    "SPDX_FILE": "SPDX_FILE",

    /**
     * value: "SPDX_RELATIONSHIP"
     * @const
     */
    "SPDX_RELATIONSHIP": "SPDX_RELATIONSHIP",

    /**
     * value: "VULNERABILITY_ASSESSMENT"
     * @const
     */
    "VULNERABILITY_ASSESSMENT": "VULNERABILITY_ASSESSMENT",

    /**
     * value: "SBOM_REFERENCE"
     * @const
     */
    "SBOM_REFERENCE": "SBOM_REFERENCE"
};



export default Occurrence;

