/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ByProducts from './ByProducts';
import Environment from './Environment';
import GrafeasV1beta1IntotoArtifact from './GrafeasV1beta1IntotoArtifact';

/**
 * The Link model module.
 * @module model/Link
 * @version v1beta1
 */
class Link {
    /**
     * Constructs a new <code>Link</code>.
     * This corresponds to an in-toto link.
     * @alias module:model/Link
     */
    constructor() { 
        
        Link.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Link</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Link} obj Optional instance to populate.
     * @return {module:model/Link} The populated <code>Link</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Link();

            if (data.hasOwnProperty('byproducts')) {
                obj['byproducts'] = ByProducts.constructFromObject(data['byproducts']);
            }
            if (data.hasOwnProperty('command')) {
                obj['command'] = ApiClient.convertToType(data['command'], ['String']);
            }
            if (data.hasOwnProperty('environment')) {
                obj['environment'] = Environment.constructFromObject(data['environment']);
            }
            if (data.hasOwnProperty('materials')) {
                obj['materials'] = ApiClient.convertToType(data['materials'], [GrafeasV1beta1IntotoArtifact]);
            }
            if (data.hasOwnProperty('products')) {
                obj['products'] = ApiClient.convertToType(data['products'], [GrafeasV1beta1IntotoArtifact]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Link</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Link</code>.
     */
    static validateJSON(data) {
        // validate the optional field `byproducts`
        if (data['byproducts']) { // data not null
          ByProducts.validateJSON(data['byproducts']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['command'])) {
            throw new Error("Expected the field `command` to be an array in the JSON data but got " + data['command']);
        }
        // validate the optional field `environment`
        if (data['environment']) { // data not null
          Environment.validateJSON(data['environment']);
        }
        if (data['materials']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['materials'])) {
                throw new Error("Expected the field `materials` to be an array in the JSON data but got " + data['materials']);
            }
            // validate the optional field `materials` (array)
            for (const item of data['materials']) {
                GrafeasV1beta1IntotoArtifact.validateJSON(item);
            };
        }
        if (data['products']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['products'])) {
                throw new Error("Expected the field `products` to be an array in the JSON data but got " + data['products']);
            }
            // validate the optional field `products` (array)
            for (const item of data['products']) {
                GrafeasV1beta1IntotoArtifact.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {module:model/ByProducts} byproducts
 */
Link.prototype['byproducts'] = undefined;

/**
 * This field contains the full command executed for the step. This can also be empty if links are generated for operations that aren't directly mapped to a specific command. Each term in the command is an independent string in the list. An example of a command in the in-toto metadata field is: \"command\": [\"git\", \"clone\", \"https://github.com/in-toto/demo-project.git\"]
 * @member {Array.<String>} command
 */
Link.prototype['command'] = undefined;

/**
 * @member {module:model/Environment} environment
 */
Link.prototype['environment'] = undefined;

/**
 * Materials are the supply chain artifacts that go into the step and are used for the operation performed. The key of the map is the path of the artifact and the structure contains the recorded hash information. An example is: \"materials\": [ { \"resource_uri\": \"foo/bar\", \"hashes\": { \"sha256\": \"ebebf...\", : } } ]
 * @member {Array.<module:model/GrafeasV1beta1IntotoArtifact>} materials
 */
Link.prototype['materials'] = undefined;

/**
 * Products are the supply chain artifacts generated as a result of the step. The structure is identical to that of materials.
 * @member {Array.<module:model/GrafeasV1beta1IntotoArtifact>} products
 */
Link.prototype['products'] = undefined;






export default Link;

