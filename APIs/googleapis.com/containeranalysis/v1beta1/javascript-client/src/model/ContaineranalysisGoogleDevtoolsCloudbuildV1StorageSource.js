/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSource model module.
 * @module model/ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSource
 * @version v1beta1
 */
class ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSource {
    /**
     * Constructs a new <code>ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSource</code>.
     * Location of the source in an archive file in Cloud Storage.
     * @alias module:model/ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSource
     */
    constructor() { 
        
        ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSource.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSource</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSource} obj Optional instance to populate.
     * @return {module:model/ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSource} The populated <code>ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSource</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSource();

            if (data.hasOwnProperty('bucket')) {
                obj['bucket'] = ApiClient.convertToType(data['bucket'], 'String');
            }
            if (data.hasOwnProperty('generation')) {
                obj['generation'] = ApiClient.convertToType(data['generation'], 'String');
            }
            if (data.hasOwnProperty('object')) {
                obj['object'] = ApiClient.convertToType(data['object'], 'String');
            }
            if (data.hasOwnProperty('sourceFetcher')) {
                obj['sourceFetcher'] = ApiClient.convertToType(data['sourceFetcher'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSource</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSource</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['bucket'] && !(typeof data['bucket'] === 'string' || data['bucket'] instanceof String)) {
            throw new Error("Expected the field `bucket` to be a primitive type in the JSON string but got " + data['bucket']);
        }
        // ensure the json data is a string
        if (data['generation'] && !(typeof data['generation'] === 'string' || data['generation'] instanceof String)) {
            throw new Error("Expected the field `generation` to be a primitive type in the JSON string but got " + data['generation']);
        }
        // ensure the json data is a string
        if (data['object'] && !(typeof data['object'] === 'string' || data['object'] instanceof String)) {
            throw new Error("Expected the field `object` to be a primitive type in the JSON string but got " + data['object']);
        }
        // ensure the json data is a string
        if (data['sourceFetcher'] && !(typeof data['sourceFetcher'] === 'string' || data['sourceFetcher'] instanceof String)) {
            throw new Error("Expected the field `sourceFetcher` to be a primitive type in the JSON string but got " + data['sourceFetcher']);
        }

        return true;
    }


}



/**
 * Cloud Storage bucket containing the source (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)).
 * @member {String} bucket
 */
ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSource.prototype['bucket'] = undefined;

/**
 * Cloud Storage generation for the object. If the generation is omitted, the latest generation will be used.
 * @member {String} generation
 */
ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSource.prototype['generation'] = undefined;

/**
 * Cloud Storage object containing the source. This object must be a zipped (`.zip`) or gzipped archive file (`.tar.gz`) containing source to build.
 * @member {String} object
 */
ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSource.prototype['object'] = undefined;

/**
 * Optional. Option to specify the tool to fetch the source file for the build.
 * @member {module:model/ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSource.SourceFetcherEnum} sourceFetcher
 */
ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSource.prototype['sourceFetcher'] = undefined;





/**
 * Allowed values for the <code>sourceFetcher</code> property.
 * @enum {String}
 * @readonly
 */
ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSource['SourceFetcherEnum'] = {

    /**
     * value: "SOURCE_FETCHER_UNSPECIFIED"
     * @const
     */
    "SOURCE_FETCHER_UNSPECIFIED": "SOURCE_FETCHER_UNSPECIFIED",

    /**
     * value: "GSUTIL"
     * @const
     */
    "GSUTIL": "GSUTIL",

    /**
     * value: "GCS_FETCHER"
     * @const
     */
    "GCS_FETCHER": "GCS_FETCHER"
};



export default ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSource;

