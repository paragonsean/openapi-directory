/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsArtifactObjects from './ContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsArtifactObjects';
import ContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsMavenArtifact from './ContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsMavenArtifact';
import ContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsNpmPackage from './ContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsNpmPackage';
import ContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsPythonPackage from './ContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsPythonPackage';

/**
 * The ContaineranalysisGoogleDevtoolsCloudbuildV1Artifacts model module.
 * @module model/ContaineranalysisGoogleDevtoolsCloudbuildV1Artifacts
 * @version v1beta1
 */
class ContaineranalysisGoogleDevtoolsCloudbuildV1Artifacts {
    /**
     * Constructs a new <code>ContaineranalysisGoogleDevtoolsCloudbuildV1Artifacts</code>.
     * Artifacts produced by a build that should be uploaded upon successful completion of all build steps.
     * @alias module:model/ContaineranalysisGoogleDevtoolsCloudbuildV1Artifacts
     */
    constructor() { 
        
        ContaineranalysisGoogleDevtoolsCloudbuildV1Artifacts.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ContaineranalysisGoogleDevtoolsCloudbuildV1Artifacts</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ContaineranalysisGoogleDevtoolsCloudbuildV1Artifacts} obj Optional instance to populate.
     * @return {module:model/ContaineranalysisGoogleDevtoolsCloudbuildV1Artifacts} The populated <code>ContaineranalysisGoogleDevtoolsCloudbuildV1Artifacts</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ContaineranalysisGoogleDevtoolsCloudbuildV1Artifacts();

            if (data.hasOwnProperty('images')) {
                obj['images'] = ApiClient.convertToType(data['images'], ['String']);
            }
            if (data.hasOwnProperty('mavenArtifacts')) {
                obj['mavenArtifacts'] = ApiClient.convertToType(data['mavenArtifacts'], [ContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsMavenArtifact]);
            }
            if (data.hasOwnProperty('npmPackages')) {
                obj['npmPackages'] = ApiClient.convertToType(data['npmPackages'], [ContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsNpmPackage]);
            }
            if (data.hasOwnProperty('objects')) {
                obj['objects'] = ContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsArtifactObjects.constructFromObject(data['objects']);
            }
            if (data.hasOwnProperty('pythonPackages')) {
                obj['pythonPackages'] = ApiClient.convertToType(data['pythonPackages'], [ContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsPythonPackage]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ContaineranalysisGoogleDevtoolsCloudbuildV1Artifacts</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ContaineranalysisGoogleDevtoolsCloudbuildV1Artifacts</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['images'])) {
            throw new Error("Expected the field `images` to be an array in the JSON data but got " + data['images']);
        }
        if (data['mavenArtifacts']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['mavenArtifacts'])) {
                throw new Error("Expected the field `mavenArtifacts` to be an array in the JSON data but got " + data['mavenArtifacts']);
            }
            // validate the optional field `mavenArtifacts` (array)
            for (const item of data['mavenArtifacts']) {
                ContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsMavenArtifact.validateJSON(item);
            };
        }
        if (data['npmPackages']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['npmPackages'])) {
                throw new Error("Expected the field `npmPackages` to be an array in the JSON data but got " + data['npmPackages']);
            }
            // validate the optional field `npmPackages` (array)
            for (const item of data['npmPackages']) {
                ContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsNpmPackage.validateJSON(item);
            };
        }
        // validate the optional field `objects`
        if (data['objects']) { // data not null
          ContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsArtifactObjects.validateJSON(data['objects']);
        }
        if (data['pythonPackages']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['pythonPackages'])) {
                throw new Error("Expected the field `pythonPackages` to be an array in the JSON data but got " + data['pythonPackages']);
            }
            // validate the optional field `pythonPackages` (array)
            for (const item of data['pythonPackages']) {
                ContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsPythonPackage.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * A list of images to be pushed upon the successful completion of all build steps. The images will be pushed using the builder service account's credentials. The digests of the pushed images will be stored in the Build resource's results field. If any of the images fail to be pushed, the build is marked FAILURE.
 * @member {Array.<String>} images
 */
ContaineranalysisGoogleDevtoolsCloudbuildV1Artifacts.prototype['images'] = undefined;

/**
 * A list of Maven artifacts to be uploaded to Artifact Registry upon successful completion of all build steps. Artifacts in the workspace matching specified paths globs will be uploaded to the specified Artifact Registry repository using the builder service account's credentials. If any artifacts fail to be pushed, the build is marked FAILURE.
 * @member {Array.<module:model/ContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsMavenArtifact>} mavenArtifacts
 */
ContaineranalysisGoogleDevtoolsCloudbuildV1Artifacts.prototype['mavenArtifacts'] = undefined;

/**
 * A list of npm packages to be uploaded to Artifact Registry upon successful completion of all build steps. Npm packages in the specified paths will be uploaded to the specified Artifact Registry repository using the builder service account's credentials. If any packages fail to be pushed, the build is marked FAILURE.
 * @member {Array.<module:model/ContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsNpmPackage>} npmPackages
 */
ContaineranalysisGoogleDevtoolsCloudbuildV1Artifacts.prototype['npmPackages'] = undefined;

/**
 * @member {module:model/ContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsArtifactObjects} objects
 */
ContaineranalysisGoogleDevtoolsCloudbuildV1Artifacts.prototype['objects'] = undefined;

/**
 * A list of Python packages to be uploaded to Artifact Registry upon successful completion of all build steps. The build service account credentials will be used to perform the upload. If any objects fail to be pushed, the build is marked FAILURE.
 * @member {Array.<module:model/ContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsPythonPackage>} pythonPackages
 */
ContaineranalysisGoogleDevtoolsCloudbuildV1Artifacts.prototype['pythonPackages'] = undefined;






export default ContaineranalysisGoogleDevtoolsCloudbuildV1Artifacts;

