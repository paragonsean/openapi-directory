/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AnalysisCompleted from './AnalysisCompleted';
import SBOMStatus from './SBOMStatus';
import Status from './Status';

/**
 * The Discovered model module.
 * @module model/Discovered
 * @version v1beta1
 */
class Discovered {
    /**
     * Constructs a new <code>Discovered</code>.
     * Provides information about the analysis status of a discovered resource.
     * @alias module:model/Discovered
     */
    constructor() { 
        
        Discovered.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Discovered</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Discovered} obj Optional instance to populate.
     * @return {module:model/Discovered} The populated <code>Discovered</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Discovered();

            if (data.hasOwnProperty('analysisCompleted')) {
                obj['analysisCompleted'] = AnalysisCompleted.constructFromObject(data['analysisCompleted']);
            }
            if (data.hasOwnProperty('analysisError')) {
                obj['analysisError'] = ApiClient.convertToType(data['analysisError'], [Status]);
            }
            if (data.hasOwnProperty('analysisStatus')) {
                obj['analysisStatus'] = ApiClient.convertToType(data['analysisStatus'], 'String');
            }
            if (data.hasOwnProperty('analysisStatusError')) {
                obj['analysisStatusError'] = Status.constructFromObject(data['analysisStatusError']);
            }
            if (data.hasOwnProperty('continuousAnalysis')) {
                obj['continuousAnalysis'] = ApiClient.convertToType(data['continuousAnalysis'], 'String');
            }
            if (data.hasOwnProperty('lastAnalysisTime')) {
                obj['lastAnalysisTime'] = ApiClient.convertToType(data['lastAnalysisTime'], 'String');
            }
            if (data.hasOwnProperty('lastScanTime')) {
                obj['lastScanTime'] = ApiClient.convertToType(data['lastScanTime'], 'String');
            }
            if (data.hasOwnProperty('sbomStatus')) {
                obj['sbomStatus'] = SBOMStatus.constructFromObject(data['sbomStatus']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Discovered</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Discovered</code>.
     */
    static validateJSON(data) {
        // validate the optional field `analysisCompleted`
        if (data['analysisCompleted']) { // data not null
          AnalysisCompleted.validateJSON(data['analysisCompleted']);
        }
        if (data['analysisError']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['analysisError'])) {
                throw new Error("Expected the field `analysisError` to be an array in the JSON data but got " + data['analysisError']);
            }
            // validate the optional field `analysisError` (array)
            for (const item of data['analysisError']) {
                Status.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['analysisStatus'] && !(typeof data['analysisStatus'] === 'string' || data['analysisStatus'] instanceof String)) {
            throw new Error("Expected the field `analysisStatus` to be a primitive type in the JSON string but got " + data['analysisStatus']);
        }
        // validate the optional field `analysisStatusError`
        if (data['analysisStatusError']) { // data not null
          Status.validateJSON(data['analysisStatusError']);
        }
        // ensure the json data is a string
        if (data['continuousAnalysis'] && !(typeof data['continuousAnalysis'] === 'string' || data['continuousAnalysis'] instanceof String)) {
            throw new Error("Expected the field `continuousAnalysis` to be a primitive type in the JSON string but got " + data['continuousAnalysis']);
        }
        // ensure the json data is a string
        if (data['lastAnalysisTime'] && !(typeof data['lastAnalysisTime'] === 'string' || data['lastAnalysisTime'] instanceof String)) {
            throw new Error("Expected the field `lastAnalysisTime` to be a primitive type in the JSON string but got " + data['lastAnalysisTime']);
        }
        // ensure the json data is a string
        if (data['lastScanTime'] && !(typeof data['lastScanTime'] === 'string' || data['lastScanTime'] instanceof String)) {
            throw new Error("Expected the field `lastScanTime` to be a primitive type in the JSON string but got " + data['lastScanTime']);
        }
        // validate the optional field `sbomStatus`
        if (data['sbomStatus']) { // data not null
          SBOMStatus.validateJSON(data['sbomStatus']);
        }

        return true;
    }


}



/**
 * @member {module:model/AnalysisCompleted} analysisCompleted
 */
Discovered.prototype['analysisCompleted'] = undefined;

/**
 * Indicates any errors encountered during analysis of a resource. There could be 0 or more of these errors.
 * @member {Array.<module:model/Status>} analysisError
 */
Discovered.prototype['analysisError'] = undefined;

/**
 * The status of discovery for the resource.
 * @member {module:model/Discovered.AnalysisStatusEnum} analysisStatus
 */
Discovered.prototype['analysisStatus'] = undefined;

/**
 * @member {module:model/Status} analysisStatusError
 */
Discovered.prototype['analysisStatusError'] = undefined;

/**
 * Whether the resource is continuously analyzed.
 * @member {module:model/Discovered.ContinuousAnalysisEnum} continuousAnalysis
 */
Discovered.prototype['continuousAnalysis'] = undefined;

/**
 * The last time continuous analysis was done for this resource. Deprecated, do not use.
 * @member {String} lastAnalysisTime
 */
Discovered.prototype['lastAnalysisTime'] = undefined;

/**
 * The last time this resource was scanned.
 * @member {String} lastScanTime
 */
Discovered.prototype['lastScanTime'] = undefined;

/**
 * @member {module:model/SBOMStatus} sbomStatus
 */
Discovered.prototype['sbomStatus'] = undefined;





/**
 * Allowed values for the <code>analysisStatus</code> property.
 * @enum {String}
 * @readonly
 */
Discovered['AnalysisStatusEnum'] = {

    /**
     * value: "ANALYSIS_STATUS_UNSPECIFIED"
     * @const
     */
    "ANALYSIS_STATUS_UNSPECIFIED": "ANALYSIS_STATUS_UNSPECIFIED",

    /**
     * value: "PENDING"
     * @const
     */
    "PENDING": "PENDING",

    /**
     * value: "SCANNING"
     * @const
     */
    "SCANNING": "SCANNING",

    /**
     * value: "FINISHED_SUCCESS"
     * @const
     */
    "FINISHED_SUCCESS": "FINISHED_SUCCESS",

    /**
     * value: "COMPLETE"
     * @const
     */
    "COMPLETE": "COMPLETE",

    /**
     * value: "FINISHED_FAILED"
     * @const
     */
    "FINISHED_FAILED": "FINISHED_FAILED",

    /**
     * value: "FINISHED_UNSUPPORTED"
     * @const
     */
    "FINISHED_UNSUPPORTED": "FINISHED_UNSUPPORTED"
};


/**
 * Allowed values for the <code>continuousAnalysis</code> property.
 * @enum {String}
 * @readonly
 */
Discovered['ContinuousAnalysisEnum'] = {

    /**
     * value: "CONTINUOUS_ANALYSIS_UNSPECIFIED"
     * @const
     */
    "CONTINUOUS_ANALYSIS_UNSPECIFIED": "CONTINUOUS_ANALYSIS_UNSPECIFIED",

    /**
     * value: "ACTIVE"
     * @const
     */
    "ACTIVE": "ACTIVE",

    /**
     * value: "INACTIVE"
     * @const
     */
    "INACTIVE": "INACTIVE"
};



export default Discovered;

