/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SigningKey model module.
 * @module model/SigningKey
 * @version v1beta1
 */
class SigningKey {
    /**
     * Constructs a new <code>SigningKey</code>.
     * This defines the format used to record keys used in the software supply chain. An in-toto link is attested using one or more keys defined in the in-toto layout. An example of this is: { \&quot;key_id\&quot;: \&quot;776a00e29f3559e0141b3b096f696abc6cfb0c657ab40f441132b345b0...\&quot;, \&quot;key_type\&quot;: \&quot;rsa\&quot;, \&quot;public_key_value\&quot;: \&quot;-----BEGIN PUBLIC KEY-----\\nMIIBojANBgkqhkiG9w0B...\&quot;, \&quot;key_scheme\&quot;: \&quot;rsassa-pss-sha256\&quot; } The format for in-toto&#39;s key definition can be found in section 4.2 of the in-toto specification.
     * @alias module:model/SigningKey
     */
    constructor() { 
        
        SigningKey.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SigningKey</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SigningKey} obj Optional instance to populate.
     * @return {module:model/SigningKey} The populated <code>SigningKey</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SigningKey();

            if (data.hasOwnProperty('keyId')) {
                obj['keyId'] = ApiClient.convertToType(data['keyId'], 'String');
            }
            if (data.hasOwnProperty('keyScheme')) {
                obj['keyScheme'] = ApiClient.convertToType(data['keyScheme'], 'String');
            }
            if (data.hasOwnProperty('keyType')) {
                obj['keyType'] = ApiClient.convertToType(data['keyType'], 'String');
            }
            if (data.hasOwnProperty('publicKeyValue')) {
                obj['publicKeyValue'] = ApiClient.convertToType(data['publicKeyValue'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SigningKey</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SigningKey</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['keyId'] && !(typeof data['keyId'] === 'string' || data['keyId'] instanceof String)) {
            throw new Error("Expected the field `keyId` to be a primitive type in the JSON string but got " + data['keyId']);
        }
        // ensure the json data is a string
        if (data['keyScheme'] && !(typeof data['keyScheme'] === 'string' || data['keyScheme'] instanceof String)) {
            throw new Error("Expected the field `keyScheme` to be a primitive type in the JSON string but got " + data['keyScheme']);
        }
        // ensure the json data is a string
        if (data['keyType'] && !(typeof data['keyType'] === 'string' || data['keyType'] instanceof String)) {
            throw new Error("Expected the field `keyType` to be a primitive type in the JSON string but got " + data['keyType']);
        }
        // ensure the json data is a string
        if (data['publicKeyValue'] && !(typeof data['publicKeyValue'] === 'string' || data['publicKeyValue'] instanceof String)) {
            throw new Error("Expected the field `publicKeyValue` to be a primitive type in the JSON string but got " + data['publicKeyValue']);
        }

        return true;
    }


}



/**
 * key_id is an identifier for the signing key.
 * @member {String} keyId
 */
SigningKey.prototype['keyId'] = undefined;

/**
 * This field contains the corresponding signature scheme. Eg: \"rsassa-pss-sha256\".
 * @member {String} keyScheme
 */
SigningKey.prototype['keyScheme'] = undefined;

/**
 * This field identifies the specific signing method. Eg: \"rsa\", \"ed25519\", and \"ecdsa\".
 * @member {String} keyType
 */
SigningKey.prototype['keyType'] = undefined;

/**
 * This field contains the actual public key.
 * @member {String} publicKeyValue
 */
SigningKey.prototype['publicKeyValue'] = undefined;






export default SigningKey;

