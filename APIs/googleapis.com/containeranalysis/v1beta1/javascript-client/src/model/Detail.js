/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Version from './Version';
import VulnerabilityLocation from './VulnerabilityLocation';

/**
 * The Detail model module.
 * @module model/Detail
 * @version v1beta1
 */
class Detail {
    /**
     * Constructs a new <code>Detail</code>.
     * Identifies all appearances of this vulnerability in the package for a specific distro/location. For example: glibc in cpe:/o:debian:debian_linux:8 for versions 2.1 - 2.2
     * @alias module:model/Detail
     */
    constructor() { 
        
        Detail.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Detail</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Detail} obj Optional instance to populate.
     * @return {module:model/Detail} The populated <code>Detail</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Detail();

            if (data.hasOwnProperty('cpeUri')) {
                obj['cpeUri'] = ApiClient.convertToType(data['cpeUri'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('fixedLocation')) {
                obj['fixedLocation'] = VulnerabilityLocation.constructFromObject(data['fixedLocation']);
            }
            if (data.hasOwnProperty('isObsolete')) {
                obj['isObsolete'] = ApiClient.convertToType(data['isObsolete'], 'Boolean');
            }
            if (data.hasOwnProperty('maxAffectedVersion')) {
                obj['maxAffectedVersion'] = Version.constructFromObject(data['maxAffectedVersion']);
            }
            if (data.hasOwnProperty('minAffectedVersion')) {
                obj['minAffectedVersion'] = Version.constructFromObject(data['minAffectedVersion']);
            }
            if (data.hasOwnProperty('package')) {
                obj['package'] = ApiClient.convertToType(data['package'], 'String');
            }
            if (data.hasOwnProperty('packageType')) {
                obj['packageType'] = ApiClient.convertToType(data['packageType'], 'String');
            }
            if (data.hasOwnProperty('severityName')) {
                obj['severityName'] = ApiClient.convertToType(data['severityName'], 'String');
            }
            if (data.hasOwnProperty('source')) {
                obj['source'] = ApiClient.convertToType(data['source'], 'String');
            }
            if (data.hasOwnProperty('sourceUpdateTime')) {
                obj['sourceUpdateTime'] = ApiClient.convertToType(data['sourceUpdateTime'], 'String');
            }
            if (data.hasOwnProperty('vendor')) {
                obj['vendor'] = ApiClient.convertToType(data['vendor'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Detail</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Detail</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['cpeUri'] && !(typeof data['cpeUri'] === 'string' || data['cpeUri'] instanceof String)) {
            throw new Error("Expected the field `cpeUri` to be a primitive type in the JSON string but got " + data['cpeUri']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // validate the optional field `fixedLocation`
        if (data['fixedLocation']) { // data not null
          VulnerabilityLocation.validateJSON(data['fixedLocation']);
        }
        // validate the optional field `maxAffectedVersion`
        if (data['maxAffectedVersion']) { // data not null
          Version.validateJSON(data['maxAffectedVersion']);
        }
        // validate the optional field `minAffectedVersion`
        if (data['minAffectedVersion']) { // data not null
          Version.validateJSON(data['minAffectedVersion']);
        }
        // ensure the json data is a string
        if (data['package'] && !(typeof data['package'] === 'string' || data['package'] instanceof String)) {
            throw new Error("Expected the field `package` to be a primitive type in the JSON string but got " + data['package']);
        }
        // ensure the json data is a string
        if (data['packageType'] && !(typeof data['packageType'] === 'string' || data['packageType'] instanceof String)) {
            throw new Error("Expected the field `packageType` to be a primitive type in the JSON string but got " + data['packageType']);
        }
        // ensure the json data is a string
        if (data['severityName'] && !(typeof data['severityName'] === 'string' || data['severityName'] instanceof String)) {
            throw new Error("Expected the field `severityName` to be a primitive type in the JSON string but got " + data['severityName']);
        }
        // ensure the json data is a string
        if (data['source'] && !(typeof data['source'] === 'string' || data['source'] instanceof String)) {
            throw new Error("Expected the field `source` to be a primitive type in the JSON string but got " + data['source']);
        }
        // ensure the json data is a string
        if (data['sourceUpdateTime'] && !(typeof data['sourceUpdateTime'] === 'string' || data['sourceUpdateTime'] instanceof String)) {
            throw new Error("Expected the field `sourceUpdateTime` to be a primitive type in the JSON string but got " + data['sourceUpdateTime']);
        }
        // ensure the json data is a string
        if (data['vendor'] && !(typeof data['vendor'] === 'string' || data['vendor'] instanceof String)) {
            throw new Error("Expected the field `vendor` to be a primitive type in the JSON string but got " + data['vendor']);
        }

        return true;
    }


}



/**
 * Required. The CPE URI in [cpe format](https://cpe.mitre.org/specification/) in which the vulnerability manifests. Examples include distro or storage location for vulnerable jar.
 * @member {String} cpeUri
 */
Detail.prototype['cpeUri'] = undefined;

/**
 * A vendor-specific description of this note.
 * @member {String} description
 */
Detail.prototype['description'] = undefined;

/**
 * @member {module:model/VulnerabilityLocation} fixedLocation
 */
Detail.prototype['fixedLocation'] = undefined;

/**
 * Whether this detail is obsolete. Occurrences are expected not to point to obsolete details.
 * @member {Boolean} isObsolete
 */
Detail.prototype['isObsolete'] = undefined;

/**
 * @member {module:model/Version} maxAffectedVersion
 */
Detail.prototype['maxAffectedVersion'] = undefined;

/**
 * @member {module:model/Version} minAffectedVersion
 */
Detail.prototype['minAffectedVersion'] = undefined;

/**
 * Required. The name of the package where the vulnerability was found.
 * @member {String} package
 */
Detail.prototype['package'] = undefined;

/**
 * The type of package; whether native or non native(ruby gems, node.js packages etc).
 * @member {String} packageType
 */
Detail.prototype['packageType'] = undefined;

/**
 * The severity (eg: distro assigned severity) for this vulnerability.
 * @member {String} severityName
 */
Detail.prototype['severityName'] = undefined;

/**
 * The source from which the information in this Detail was obtained.
 * @member {String} source
 */
Detail.prototype['source'] = undefined;

/**
 * The time this information was last changed at the source. This is an upstream timestamp from the underlying information source - e.g. Ubuntu security tracker.
 * @member {String} sourceUpdateTime
 */
Detail.prototype['sourceUpdateTime'] = undefined;

/**
 * The name of the vendor of the product.
 * @member {String} vendor
 */
Detail.prototype['vendor'] = undefined;






export default Detail;

