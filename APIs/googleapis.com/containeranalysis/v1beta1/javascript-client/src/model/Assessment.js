/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Justification from './Justification';
import RelatedUrl from './RelatedUrl';
import Remediation from './Remediation';

/**
 * The Assessment model module.
 * @module model/Assessment
 * @version v1beta1
 */
class Assessment {
    /**
     * Constructs a new <code>Assessment</code>.
     * Assessment provides all information that is related to a single vulnerability for this product.
     * @alias module:model/Assessment
     */
    constructor() { 
        
        Assessment.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Assessment</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Assessment} obj Optional instance to populate.
     * @return {module:model/Assessment} The populated <code>Assessment</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Assessment();

            if (data.hasOwnProperty('cve')) {
                obj['cve'] = ApiClient.convertToType(data['cve'], 'String');
            }
            if (data.hasOwnProperty('impacts')) {
                obj['impacts'] = ApiClient.convertToType(data['impacts'], ['String']);
            }
            if (data.hasOwnProperty('justification')) {
                obj['justification'] = Justification.constructFromObject(data['justification']);
            }
            if (data.hasOwnProperty('longDescription')) {
                obj['longDescription'] = ApiClient.convertToType(data['longDescription'], 'String');
            }
            if (data.hasOwnProperty('relatedUris')) {
                obj['relatedUris'] = ApiClient.convertToType(data['relatedUris'], [RelatedUrl]);
            }
            if (data.hasOwnProperty('remediations')) {
                obj['remediations'] = ApiClient.convertToType(data['remediations'], [Remediation]);
            }
            if (data.hasOwnProperty('shortDescription')) {
                obj['shortDescription'] = ApiClient.convertToType(data['shortDescription'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('vulnerabilityId')) {
                obj['vulnerabilityId'] = ApiClient.convertToType(data['vulnerabilityId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Assessment</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Assessment</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['cve'] && !(typeof data['cve'] === 'string' || data['cve'] instanceof String)) {
            throw new Error("Expected the field `cve` to be a primitive type in the JSON string but got " + data['cve']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['impacts'])) {
            throw new Error("Expected the field `impacts` to be an array in the JSON data but got " + data['impacts']);
        }
        // validate the optional field `justification`
        if (data['justification']) { // data not null
          Justification.validateJSON(data['justification']);
        }
        // ensure the json data is a string
        if (data['longDescription'] && !(typeof data['longDescription'] === 'string' || data['longDescription'] instanceof String)) {
            throw new Error("Expected the field `longDescription` to be a primitive type in the JSON string but got " + data['longDescription']);
        }
        if (data['relatedUris']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['relatedUris'])) {
                throw new Error("Expected the field `relatedUris` to be an array in the JSON data but got " + data['relatedUris']);
            }
            // validate the optional field `relatedUris` (array)
            for (const item of data['relatedUris']) {
                RelatedUrl.validateJSON(item);
            };
        }
        if (data['remediations']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['remediations'])) {
                throw new Error("Expected the field `remediations` to be an array in the JSON data but got " + data['remediations']);
            }
            // validate the optional field `remediations` (array)
            for (const item of data['remediations']) {
                Remediation.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['shortDescription'] && !(typeof data['shortDescription'] === 'string' || data['shortDescription'] instanceof String)) {
            throw new Error("Expected the field `shortDescription` to be a primitive type in the JSON string but got " + data['shortDescription']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['vulnerabilityId'] && !(typeof data['vulnerabilityId'] === 'string' || data['vulnerabilityId'] instanceof String)) {
            throw new Error("Expected the field `vulnerabilityId` to be a primitive type in the JSON string but got " + data['vulnerabilityId']);
        }

        return true;
    }


}



/**
 * Holds the MITRE standard Common Vulnerabilities and Exposures (CVE) tracking number for the vulnerability. Deprecated: Use vulnerability_id instead to denote CVEs.
 * @member {String} cve
 */
Assessment.prototype['cve'] = undefined;

/**
 * Contains information about the impact of this vulnerability, this will change with time.
 * @member {Array.<String>} impacts
 */
Assessment.prototype['impacts'] = undefined;

/**
 * @member {module:model/Justification} justification
 */
Assessment.prototype['justification'] = undefined;

/**
 * A detailed description of this Vex.
 * @member {String} longDescription
 */
Assessment.prototype['longDescription'] = undefined;

/**
 * Holds a list of references associated with this vulnerability item and assessment. These uris have additional information about the vulnerability and the assessment itself. E.g. Link to a document which details how this assessment concluded the state of this vulnerability.
 * @member {Array.<module:model/RelatedUrl>} relatedUris
 */
Assessment.prototype['relatedUris'] = undefined;

/**
 * Specifies details on how to handle (and presumably, fix) a vulnerability.
 * @member {Array.<module:model/Remediation>} remediations
 */
Assessment.prototype['remediations'] = undefined;

/**
 * A one sentence description of this Vex.
 * @member {String} shortDescription
 */
Assessment.prototype['shortDescription'] = undefined;

/**
 * Provides the state of this Vulnerability assessment.
 * @member {module:model/Assessment.StateEnum} state
 */
Assessment.prototype['state'] = undefined;

/**
 * The vulnerability identifier for this Assessment. Will hold one of common identifiers e.g. CVE, GHSA etc.
 * @member {String} vulnerabilityId
 */
Assessment.prototype['vulnerabilityId'] = undefined;





/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
Assessment['StateEnum'] = {

    /**
     * value: "STATE_UNSPECIFIED"
     * @const
     */
    "STATE_UNSPECIFIED": "STATE_UNSPECIFIED",

    /**
     * value: "AFFECTED"
     * @const
     */
    "AFFECTED": "AFFECTED",

    /**
     * value: "NOT_AFFECTED"
     * @const
     */
    "NOT_AFFECTED": "NOT_AFFECTED",

    /**
     * value: "FIXED"
     * @const
     */
    "FIXED": "FIXED",

    /**
     * value: "UNDER_INVESTIGATION"
     * @const
     */
    "UNDER_INVESTIGATION": "UNDER_INVESTIGATION"
};



export default Assessment;

