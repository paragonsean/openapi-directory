/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PgpSignedAttestation model module.
 * @module model/PgpSignedAttestation
 * @version v1beta1
 */
class PgpSignedAttestation {
    /**
     * Constructs a new <code>PgpSignedAttestation</code>.
     * An attestation wrapper with a PGP-compatible signature. This message only supports &#x60;ATTACHED&#x60; signatures, where the payload that is signed is included alongside the signature itself in the same file.
     * @alias module:model/PgpSignedAttestation
     */
    constructor() { 
        
        PgpSignedAttestation.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PgpSignedAttestation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PgpSignedAttestation} obj Optional instance to populate.
     * @return {module:model/PgpSignedAttestation} The populated <code>PgpSignedAttestation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PgpSignedAttestation();

            if (data.hasOwnProperty('contentType')) {
                obj['contentType'] = ApiClient.convertToType(data['contentType'], 'String');
            }
            if (data.hasOwnProperty('pgpKeyId')) {
                obj['pgpKeyId'] = ApiClient.convertToType(data['pgpKeyId'], 'String');
            }
            if (data.hasOwnProperty('signature')) {
                obj['signature'] = ApiClient.convertToType(data['signature'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PgpSignedAttestation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PgpSignedAttestation</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['contentType'] && !(typeof data['contentType'] === 'string' || data['contentType'] instanceof String)) {
            throw new Error("Expected the field `contentType` to be a primitive type in the JSON string but got " + data['contentType']);
        }
        // ensure the json data is a string
        if (data['pgpKeyId'] && !(typeof data['pgpKeyId'] === 'string' || data['pgpKeyId'] instanceof String)) {
            throw new Error("Expected the field `pgpKeyId` to be a primitive type in the JSON string but got " + data['pgpKeyId']);
        }
        // ensure the json data is a string
        if (data['signature'] && !(typeof data['signature'] === 'string' || data['signature'] instanceof String)) {
            throw new Error("Expected the field `signature` to be a primitive type in the JSON string but got " + data['signature']);
        }

        return true;
    }


}



/**
 * Type (for example schema) of the attestation payload that was signed. The verifier must ensure that the provided type is one that the verifier supports, and that the attestation payload is a valid instantiation of that type (for example by validating a JSON schema).
 * @member {module:model/PgpSignedAttestation.ContentTypeEnum} contentType
 */
PgpSignedAttestation.prototype['contentType'] = undefined;

/**
 * The cryptographic fingerprint of the key used to generate the signature, as output by, e.g. `gpg --list-keys`. This should be the version 4, full 160-bit fingerprint, expressed as a 40 character hexadecimal string. See https://tools.ietf.org/html/rfc4880#section-12.2 for details. Implementations may choose to acknowledge \"LONG\", \"SHORT\", or other abbreviated key IDs, but only the full fingerprint is guaranteed to work. In gpg, the full fingerprint can be retrieved from the `fpr` field returned when calling --list-keys with --with-colons. For example: ``` gpg --with-colons --with-fingerprint --force-v4-certs \\ --list-keys attester@example.com tru::1:1513631572:0:3:1:5 pub:...... fpr:::::::::24FF6481B76AC91E66A00AC657A93A81EF3AE6FB: ``` Above, the fingerprint is `24FF6481B76AC91E66A00AC657A93A81EF3AE6FB`.
 * @member {String} pgpKeyId
 */
PgpSignedAttestation.prototype['pgpKeyId'] = undefined;

/**
 * Required. The raw content of the signature, as output by GNU Privacy Guard (GPG) or equivalent. Since this message only supports attached signatures, the payload that was signed must be attached. While the signature format supported is dependent on the verification implementation, currently only ASCII-armored (`--armor` to gpg), non-clearsigned (`--sign` rather than `--clearsign` to gpg) are supported. Concretely, `gpg --sign --armor --output=signature.gpg payload.json` will create the signature content expected in this field in `signature.gpg` for the `payload.json` attestation payload.
 * @member {String} signature
 */
PgpSignedAttestation.prototype['signature'] = undefined;





/**
 * Allowed values for the <code>contentType</code> property.
 * @enum {String}
 * @readonly
 */
PgpSignedAttestation['ContentTypeEnum'] = {

    /**
     * value: "CONTENT_TYPE_UNSPECIFIED"
     * @const
     */
    "CONTENT_TYPE_UNSPECIFIED": "CONTENT_TYPE_UNSPECIFIED",

    /**
     * value: "SIMPLE_SIGNING_JSON"
     * @const
     */
    "SIMPLE_SIGNING_JSON": "SIMPLE_SIGNING_JSON"
};



export default PgpSignedAttestation;

