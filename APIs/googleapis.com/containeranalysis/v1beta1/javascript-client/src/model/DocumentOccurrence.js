/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DocumentOccurrence model module.
 * @module model/DocumentOccurrence
 * @version v1beta1
 */
class DocumentOccurrence {
    /**
     * Constructs a new <code>DocumentOccurrence</code>.
     * DocumentOccurrence represents an SPDX Document Creation Information section: https://spdx.github.io/spdx-spec/2-document-creation-information/
     * @alias module:model/DocumentOccurrence
     */
    constructor() { 
        
        DocumentOccurrence.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DocumentOccurrence</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DocumentOccurrence} obj Optional instance to populate.
     * @return {module:model/DocumentOccurrence} The populated <code>DocumentOccurrence</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DocumentOccurrence();

            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'String');
            }
            if (data.hasOwnProperty('creatorComment')) {
                obj['creatorComment'] = ApiClient.convertToType(data['creatorComment'], 'String');
            }
            if (data.hasOwnProperty('creators')) {
                obj['creators'] = ApiClient.convertToType(data['creators'], ['String']);
            }
            if (data.hasOwnProperty('documentComment')) {
                obj['documentComment'] = ApiClient.convertToType(data['documentComment'], 'String');
            }
            if (data.hasOwnProperty('externalDocumentRefs')) {
                obj['externalDocumentRefs'] = ApiClient.convertToType(data['externalDocumentRefs'], ['String']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('licenseListVersion')) {
                obj['licenseListVersion'] = ApiClient.convertToType(data['licenseListVersion'], 'String');
            }
            if (data.hasOwnProperty('namespace')) {
                obj['namespace'] = ApiClient.convertToType(data['namespace'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DocumentOccurrence</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DocumentOccurrence</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['createTime'] && !(typeof data['createTime'] === 'string' || data['createTime'] instanceof String)) {
            throw new Error("Expected the field `createTime` to be a primitive type in the JSON string but got " + data['createTime']);
        }
        // ensure the json data is a string
        if (data['creatorComment'] && !(typeof data['creatorComment'] === 'string' || data['creatorComment'] instanceof String)) {
            throw new Error("Expected the field `creatorComment` to be a primitive type in the JSON string but got " + data['creatorComment']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['creators'])) {
            throw new Error("Expected the field `creators` to be an array in the JSON data but got " + data['creators']);
        }
        // ensure the json data is a string
        if (data['documentComment'] && !(typeof data['documentComment'] === 'string' || data['documentComment'] instanceof String)) {
            throw new Error("Expected the field `documentComment` to be a primitive type in the JSON string but got " + data['documentComment']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['externalDocumentRefs'])) {
            throw new Error("Expected the field `externalDocumentRefs` to be an array in the JSON data but got " + data['externalDocumentRefs']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['licenseListVersion'] && !(typeof data['licenseListVersion'] === 'string' || data['licenseListVersion'] instanceof String)) {
            throw new Error("Expected the field `licenseListVersion` to be a primitive type in the JSON string but got " + data['licenseListVersion']);
        }
        // ensure the json data is a string
        if (data['namespace'] && !(typeof data['namespace'] === 'string' || data['namespace'] instanceof String)) {
            throw new Error("Expected the field `namespace` to be a primitive type in the JSON string but got " + data['namespace']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }

        return true;
    }


}



/**
 * Identify when the SPDX file was originally created. The date is to be specified according to combined date and time in UTC format as specified in ISO 8601 standard
 * @member {String} createTime
 */
DocumentOccurrence.prototype['createTime'] = undefined;

/**
 * A field for creators of the SPDX file to provide general comments about the creation of the SPDX file or any other relevant comment not included in the other fields
 * @member {String} creatorComment
 */
DocumentOccurrence.prototype['creatorComment'] = undefined;

/**
 * Identify who (or what, in the case of a tool) created the SPDX file. If the SPDX file was created by an individual, indicate the person's name
 * @member {Array.<String>} creators
 */
DocumentOccurrence.prototype['creators'] = undefined;

/**
 * A field for creators of the SPDX file content to provide comments to the consumers of the SPDX document
 * @member {String} documentComment
 */
DocumentOccurrence.prototype['documentComment'] = undefined;

/**
 * Identify any external SPDX documents referenced within this SPDX document
 * @member {Array.<String>} externalDocumentRefs
 */
DocumentOccurrence.prototype['externalDocumentRefs'] = undefined;

/**
 * Identify the current SPDX document which may be referenced in relationships by other files, packages internally and documents externally
 * @member {String} id
 */
DocumentOccurrence.prototype['id'] = undefined;

/**
 * A field for creators of the SPDX file to provide the version of the SPDX License List used when the SPDX file was created
 * @member {String} licenseListVersion
 */
DocumentOccurrence.prototype['licenseListVersion'] = undefined;

/**
 * Provide an SPDX document specific namespace as a unique absolute Uniform Resource Identifier (URI) as specified in RFC-3986, with the exception of the ‘#’ delimiter
 * @member {String} namespace
 */
DocumentOccurrence.prototype['namespace'] = undefined;

/**
 * Identify name of this document as designated by creator
 * @member {String} title
 */
DocumentOccurrence.prototype['title'] = undefined;






export default DocumentOccurrence;

