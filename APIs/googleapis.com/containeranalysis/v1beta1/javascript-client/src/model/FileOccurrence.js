/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import License from './License';

/**
 * The FileOccurrence model module.
 * @module model/FileOccurrence
 * @version v1beta1
 */
class FileOccurrence {
    /**
     * Constructs a new <code>FileOccurrence</code>.
     * FileOccurrence represents an SPDX File Information section: https://spdx.github.io/spdx-spec/4-file-information/
     * @alias module:model/FileOccurrence
     */
    constructor() { 
        
        FileOccurrence.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>FileOccurrence</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FileOccurrence} obj Optional instance to populate.
     * @return {module:model/FileOccurrence} The populated <code>FileOccurrence</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FileOccurrence();

            if (data.hasOwnProperty('attributions')) {
                obj['attributions'] = ApiClient.convertToType(data['attributions'], ['String']);
            }
            if (data.hasOwnProperty('comment')) {
                obj['comment'] = ApiClient.convertToType(data['comment'], 'String');
            }
            if (data.hasOwnProperty('contributors')) {
                obj['contributors'] = ApiClient.convertToType(data['contributors'], ['String']);
            }
            if (data.hasOwnProperty('copyright')) {
                obj['copyright'] = ApiClient.convertToType(data['copyright'], 'String');
            }
            if (data.hasOwnProperty('filesLicenseInfo')) {
                obj['filesLicenseInfo'] = ApiClient.convertToType(data['filesLicenseInfo'], ['String']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('licenseConcluded')) {
                obj['licenseConcluded'] = License.constructFromObject(data['licenseConcluded']);
            }
            if (data.hasOwnProperty('notice')) {
                obj['notice'] = ApiClient.convertToType(data['notice'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FileOccurrence</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FileOccurrence</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['attributions'])) {
            throw new Error("Expected the field `attributions` to be an array in the JSON data but got " + data['attributions']);
        }
        // ensure the json data is a string
        if (data['comment'] && !(typeof data['comment'] === 'string' || data['comment'] instanceof String)) {
            throw new Error("Expected the field `comment` to be a primitive type in the JSON string but got " + data['comment']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['contributors'])) {
            throw new Error("Expected the field `contributors` to be an array in the JSON data but got " + data['contributors']);
        }
        // ensure the json data is a string
        if (data['copyright'] && !(typeof data['copyright'] === 'string' || data['copyright'] instanceof String)) {
            throw new Error("Expected the field `copyright` to be a primitive type in the JSON string but got " + data['copyright']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['filesLicenseInfo'])) {
            throw new Error("Expected the field `filesLicenseInfo` to be an array in the JSON data but got " + data['filesLicenseInfo']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // validate the optional field `licenseConcluded`
        if (data['licenseConcluded']) { // data not null
          License.validateJSON(data['licenseConcluded']);
        }
        // ensure the json data is a string
        if (data['notice'] && !(typeof data['notice'] === 'string' || data['notice'] instanceof String)) {
            throw new Error("Expected the field `notice` to be a primitive type in the JSON string but got " + data['notice']);
        }

        return true;
    }


}



/**
 * This field provides a place for the SPDX data creator to record, at the file level, acknowledgements that may be needed to be communicated in some contexts
 * @member {Array.<String>} attributions
 */
FileOccurrence.prototype['attributions'] = undefined;

/**
 * This field provides a place for the SPDX file creator to record any general comments about the file
 * @member {String} comment
 */
FileOccurrence.prototype['comment'] = undefined;

/**
 * This field provides a place for the SPDX file creator to record file contributors
 * @member {Array.<String>} contributors
 */
FileOccurrence.prototype['contributors'] = undefined;

/**
 * Identify the copyright holder of the file, as well as any dates present
 * @member {String} copyright
 */
FileOccurrence.prototype['copyright'] = undefined;

/**
 * This field contains the license information actually found in the file, if any
 * @member {Array.<String>} filesLicenseInfo
 */
FileOccurrence.prototype['filesLicenseInfo'] = undefined;

/**
 * Uniquely identify any element in an SPDX document which may be referenced by other elements
 * @member {String} id
 */
FileOccurrence.prototype['id'] = undefined;

/**
 * @member {module:model/License} licenseConcluded
 */
FileOccurrence.prototype['licenseConcluded'] = undefined;

/**
 * This field provides a place for the SPDX file creator to record license notices or other such related notices found in the file
 * @member {String} notice
 */
FileOccurrence.prototype['notice'] = undefined;






export default FileOccurrence;

