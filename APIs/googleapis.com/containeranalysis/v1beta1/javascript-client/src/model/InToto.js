/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ArtifactRule from './ArtifactRule';
import SigningKey from './SigningKey';

/**
 * The InToto model module.
 * @module model/InToto
 * @version v1beta1
 */
class InToto {
    /**
     * Constructs a new <code>InToto</code>.
     * This contains the fields corresponding to the definition of a software supply chain step in an in-toto layout. This information goes into a Grafeas note.
     * @alias module:model/InToto
     */
    constructor() { 
        
        InToto.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>InToto</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/InToto} obj Optional instance to populate.
     * @return {module:model/InToto} The populated <code>InToto</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new InToto();

            if (data.hasOwnProperty('expectedCommand')) {
                obj['expectedCommand'] = ApiClient.convertToType(data['expectedCommand'], ['String']);
            }
            if (data.hasOwnProperty('expectedMaterials')) {
                obj['expectedMaterials'] = ApiClient.convertToType(data['expectedMaterials'], [ArtifactRule]);
            }
            if (data.hasOwnProperty('expectedProducts')) {
                obj['expectedProducts'] = ApiClient.convertToType(data['expectedProducts'], [ArtifactRule]);
            }
            if (data.hasOwnProperty('signingKeys')) {
                obj['signingKeys'] = ApiClient.convertToType(data['signingKeys'], [SigningKey]);
            }
            if (data.hasOwnProperty('stepName')) {
                obj['stepName'] = ApiClient.convertToType(data['stepName'], 'String');
            }
            if (data.hasOwnProperty('threshold')) {
                obj['threshold'] = ApiClient.convertToType(data['threshold'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>InToto</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>InToto</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['expectedCommand'])) {
            throw new Error("Expected the field `expectedCommand` to be an array in the JSON data but got " + data['expectedCommand']);
        }
        if (data['expectedMaterials']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['expectedMaterials'])) {
                throw new Error("Expected the field `expectedMaterials` to be an array in the JSON data but got " + data['expectedMaterials']);
            }
            // validate the optional field `expectedMaterials` (array)
            for (const item of data['expectedMaterials']) {
                ArtifactRule.validateJSON(item);
            };
        }
        if (data['expectedProducts']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['expectedProducts'])) {
                throw new Error("Expected the field `expectedProducts` to be an array in the JSON data but got " + data['expectedProducts']);
            }
            // validate the optional field `expectedProducts` (array)
            for (const item of data['expectedProducts']) {
                ArtifactRule.validateJSON(item);
            };
        }
        if (data['signingKeys']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['signingKeys'])) {
                throw new Error("Expected the field `signingKeys` to be an array in the JSON data but got " + data['signingKeys']);
            }
            // validate the optional field `signingKeys` (array)
            for (const item of data['signingKeys']) {
                SigningKey.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['stepName'] && !(typeof data['stepName'] === 'string' || data['stepName'] instanceof String)) {
            throw new Error("Expected the field `stepName` to be a primitive type in the JSON string but got " + data['stepName']);
        }
        // ensure the json data is a string
        if (data['threshold'] && !(typeof data['threshold'] === 'string' || data['threshold'] instanceof String)) {
            throw new Error("Expected the field `threshold` to be a primitive type in the JSON string but got " + data['threshold']);
        }

        return true;
    }


}



/**
 * This field contains the expected command used to perform the step.
 * @member {Array.<String>} expectedCommand
 */
InToto.prototype['expectedCommand'] = undefined;

/**
 * The following fields contain in-toto artifact rules identifying the artifacts that enter this supply chain step, and exit the supply chain step, i.e. materials and products of the step.
 * @member {Array.<module:model/ArtifactRule>} expectedMaterials
 */
InToto.prototype['expectedMaterials'] = undefined;

/**
 * @member {Array.<module:model/ArtifactRule>} expectedProducts
 */
InToto.prototype['expectedProducts'] = undefined;

/**
 * This field contains the public keys that can be used to verify the signatures on the step metadata.
 * @member {Array.<module:model/SigningKey>} signingKeys
 */
InToto.prototype['signingKeys'] = undefined;

/**
 * This field identifies the name of the step in the supply chain.
 * @member {String} stepName
 */
InToto.prototype['stepName'] = undefined;

/**
 * This field contains a value that indicates the minimum number of keys that need to be used to sign the step's in-toto link.
 * @member {String} threshold
 */
InToto.prototype['threshold'] = undefined;






export default InToto;

