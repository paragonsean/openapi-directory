/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GenericSignedAttestation from './GenericSignedAttestation';
import PgpSignedAttestation from './PgpSignedAttestation';

/**
 * The Attestation model module.
 * @module model/Attestation
 * @version v1beta1
 */
class Attestation {
    /**
     * Constructs a new <code>Attestation</code>.
     * Occurrence that represents a single \&quot;attestation\&quot;. The authenticity of an attestation can be verified using the attached signature. If the verifier trusts the public key of the signer, then verifying the signature is sufficient to establish trust. In this circumstance, the authority to which this attestation is attached is primarily useful for look-up (how to find this attestation if you already know the authority and artifact to be verified) and intent (which authority was this attestation intended to sign for).
     * @alias module:model/Attestation
     */
    constructor() { 
        
        Attestation.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Attestation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Attestation} obj Optional instance to populate.
     * @return {module:model/Attestation} The populated <code>Attestation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Attestation();

            if (data.hasOwnProperty('genericSignedAttestation')) {
                obj['genericSignedAttestation'] = GenericSignedAttestation.constructFromObject(data['genericSignedAttestation']);
            }
            if (data.hasOwnProperty('pgpSignedAttestation')) {
                obj['pgpSignedAttestation'] = PgpSignedAttestation.constructFromObject(data['pgpSignedAttestation']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Attestation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Attestation</code>.
     */
    static validateJSON(data) {
        // validate the optional field `genericSignedAttestation`
        if (data['genericSignedAttestation']) { // data not null
          GenericSignedAttestation.validateJSON(data['genericSignedAttestation']);
        }
        // validate the optional field `pgpSignedAttestation`
        if (data['pgpSignedAttestation']) { // data not null
          PgpSignedAttestation.validateJSON(data['pgpSignedAttestation']);
        }

        return true;
    }


}



/**
 * @member {module:model/GenericSignedAttestation} genericSignedAttestation
 */
Attestation.prototype['genericSignedAttestation'] = undefined;

/**
 * @member {module:model/PgpSignedAttestation} pgpSignedAttestation
 */
Attestation.prototype['pgpSignedAttestation'] = undefined;






export default Attestation;

