# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.related_url import RelatedUrl
from openapi_server import util


class Remediation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, details: str=None, remediation_type: str=None, remediation_uri: RelatedUrl=None):
        """Remediation - a model defined in OpenAPI

        :param details: The details of this Remediation.
        :param remediation_type: The remediation_type of this Remediation.
        :param remediation_uri: The remediation_uri of this Remediation.
        """
        self.openapi_types = {
            'details': str,
            'remediation_type': str,
            'remediation_uri': RelatedUrl
        }

        self.attribute_map = {
            'details': 'details',
            'remediation_type': 'remediationType',
            'remediation_uri': 'remediationUri'
        }

        self._details = details
        self._remediation_type = remediation_type
        self._remediation_uri = remediation_uri

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Remediation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Remediation of this Remediation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def details(self):
        """Gets the details of this Remediation.

        Contains a comprehensive human-readable discussion of the remediation.

        :return: The details of this Remediation.
        :rtype: str
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this Remediation.

        Contains a comprehensive human-readable discussion of the remediation.

        :param details: The details of this Remediation.
        :type details: str
        """

        self._details = details

    @property
    def remediation_type(self):
        """Gets the remediation_type of this Remediation.

        The type of remediation that can be applied.

        :return: The remediation_type of this Remediation.
        :rtype: str
        """
        return self._remediation_type

    @remediation_type.setter
    def remediation_type(self, remediation_type):
        """Sets the remediation_type of this Remediation.

        The type of remediation that can be applied.

        :param remediation_type: The remediation_type of this Remediation.
        :type remediation_type: str
        """
        allowed_values = ["REMEDIATION_TYPE_UNSPECIFIED", "MITIGATION", "NO_FIX_PLANNED", "NONE_AVAILABLE", "VENDOR_FIX", "WORKAROUND"]  # noqa: E501
        if remediation_type not in allowed_values:
            raise ValueError(
                "Invalid value for `remediation_type` ({0}), must be one of {1}"
                .format(remediation_type, allowed_values)
            )

        self._remediation_type = remediation_type

    @property
    def remediation_uri(self):
        """Gets the remediation_uri of this Remediation.


        :return: The remediation_uri of this Remediation.
        :rtype: RelatedUrl
        """
        return self._remediation_uri

    @remediation_uri.setter
    def remediation_uri(self, remediation_uri):
        """Sets the remediation_uri of this Remediation.


        :param remediation_uri: The remediation_uri of this Remediation.
        :type remediation_uri: RelatedUrl
        """

        self._remediation_uri = remediation_uri
