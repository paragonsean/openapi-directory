# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.assessment import Assessment
from openapi_server.models.product import Product
from openapi_server.models.publisher import Publisher
from openapi_server import util


class VulnerabilityAssessmentNote(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, assessment: Assessment=None, language_code: str=None, long_description: str=None, product: Product=None, publisher: Publisher=None, short_description: str=None, title: str=None):
        """VulnerabilityAssessmentNote - a model defined in OpenAPI

        :param assessment: The assessment of this VulnerabilityAssessmentNote.
        :param language_code: The language_code of this VulnerabilityAssessmentNote.
        :param long_description: The long_description of this VulnerabilityAssessmentNote.
        :param product: The product of this VulnerabilityAssessmentNote.
        :param publisher: The publisher of this VulnerabilityAssessmentNote.
        :param short_description: The short_description of this VulnerabilityAssessmentNote.
        :param title: The title of this VulnerabilityAssessmentNote.
        """
        self.openapi_types = {
            'assessment': Assessment,
            'language_code': str,
            'long_description': str,
            'product': Product,
            'publisher': Publisher,
            'short_description': str,
            'title': str
        }

        self.attribute_map = {
            'assessment': 'assessment',
            'language_code': 'languageCode',
            'long_description': 'longDescription',
            'product': 'product',
            'publisher': 'publisher',
            'short_description': 'shortDescription',
            'title': 'title'
        }

        self._assessment = assessment
        self._language_code = language_code
        self._long_description = long_description
        self._product = product
        self._publisher = publisher
        self._short_description = short_description
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VulnerabilityAssessmentNote':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VulnerabilityAssessmentNote of this VulnerabilityAssessmentNote.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def assessment(self):
        """Gets the assessment of this VulnerabilityAssessmentNote.


        :return: The assessment of this VulnerabilityAssessmentNote.
        :rtype: Assessment
        """
        return self._assessment

    @assessment.setter
    def assessment(self, assessment):
        """Sets the assessment of this VulnerabilityAssessmentNote.


        :param assessment: The assessment of this VulnerabilityAssessmentNote.
        :type assessment: Assessment
        """

        self._assessment = assessment

    @property
    def language_code(self):
        """Gets the language_code of this VulnerabilityAssessmentNote.

        Identifies the language used by this document, corresponding to IETF BCP 47 / RFC 5646.

        :return: The language_code of this VulnerabilityAssessmentNote.
        :rtype: str
        """
        return self._language_code

    @language_code.setter
    def language_code(self, language_code):
        """Sets the language_code of this VulnerabilityAssessmentNote.

        Identifies the language used by this document, corresponding to IETF BCP 47 / RFC 5646.

        :param language_code: The language_code of this VulnerabilityAssessmentNote.
        :type language_code: str
        """

        self._language_code = language_code

    @property
    def long_description(self):
        """Gets the long_description of this VulnerabilityAssessmentNote.

        A detailed description of this Vex.

        :return: The long_description of this VulnerabilityAssessmentNote.
        :rtype: str
        """
        return self._long_description

    @long_description.setter
    def long_description(self, long_description):
        """Sets the long_description of this VulnerabilityAssessmentNote.

        A detailed description of this Vex.

        :param long_description: The long_description of this VulnerabilityAssessmentNote.
        :type long_description: str
        """

        self._long_description = long_description

    @property
    def product(self):
        """Gets the product of this VulnerabilityAssessmentNote.


        :return: The product of this VulnerabilityAssessmentNote.
        :rtype: Product
        """
        return self._product

    @product.setter
    def product(self, product):
        """Sets the product of this VulnerabilityAssessmentNote.


        :param product: The product of this VulnerabilityAssessmentNote.
        :type product: Product
        """

        self._product = product

    @property
    def publisher(self):
        """Gets the publisher of this VulnerabilityAssessmentNote.


        :return: The publisher of this VulnerabilityAssessmentNote.
        :rtype: Publisher
        """
        return self._publisher

    @publisher.setter
    def publisher(self, publisher):
        """Sets the publisher of this VulnerabilityAssessmentNote.


        :param publisher: The publisher of this VulnerabilityAssessmentNote.
        :type publisher: Publisher
        """

        self._publisher = publisher

    @property
    def short_description(self):
        """Gets the short_description of this VulnerabilityAssessmentNote.

        A one sentence description of this Vex.

        :return: The short_description of this VulnerabilityAssessmentNote.
        :rtype: str
        """
        return self._short_description

    @short_description.setter
    def short_description(self, short_description):
        """Sets the short_description of this VulnerabilityAssessmentNote.

        A one sentence description of this Vex.

        :param short_description: The short_description of this VulnerabilityAssessmentNote.
        :type short_description: str
        """

        self._short_description = short_description

    @property
    def title(self):
        """Gets the title of this VulnerabilityAssessmentNote.

        The title of the note. E.g. `Vex-Debian-11.4`

        :return: The title of this VulnerabilityAssessmentNote.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this VulnerabilityAssessmentNote.

        The title of the note. E.g. `Vex-Debian-11.4`

        :param title: The title of this VulnerabilityAssessmentNote.
        :type title: str
        """

        self._title = title
