# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.note import Note
from openapi_server import util


class BatchCreateNotesRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, notes: Dict[str, Note]=None):
        """BatchCreateNotesRequest - a model defined in OpenAPI

        :param notes: The notes of this BatchCreateNotesRequest.
        """
        self.openapi_types = {
            'notes': Dict[str, Note]
        }

        self.attribute_map = {
            'notes': 'notes'
        }

        self._notes = notes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BatchCreateNotesRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BatchCreateNotesRequest of this BatchCreateNotesRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def notes(self):
        """Gets the notes of this BatchCreateNotesRequest.

        Required. The notes to create, the key is expected to be the note ID. Max allowed length is 1000.

        :return: The notes of this BatchCreateNotesRequest.
        :rtype: Dict[str, Note]
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this BatchCreateNotesRequest.

        Required. The notes to create, the key is expected to be the note ID. Max allowed length is 1000.

        :param notes: The notes of this BatchCreateNotesRequest.
        :type notes: Dict[str, Note]
        """

        self._notes = notes
