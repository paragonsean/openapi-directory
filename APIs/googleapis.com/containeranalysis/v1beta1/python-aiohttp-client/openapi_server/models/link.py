# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.by_products import ByProducts
from openapi_server.models.environment import Environment
from openapi_server.models.grafeas_v1beta1_intoto_artifact import GrafeasV1beta1IntotoArtifact
from openapi_server import util


class Link(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, byproducts: ByProducts=None, command: List[str]=None, environment: Environment=None, materials: List[GrafeasV1beta1IntotoArtifact]=None, products: List[GrafeasV1beta1IntotoArtifact]=None):
        """Link - a model defined in OpenAPI

        :param byproducts: The byproducts of this Link.
        :param command: The command of this Link.
        :param environment: The environment of this Link.
        :param materials: The materials of this Link.
        :param products: The products of this Link.
        """
        self.openapi_types = {
            'byproducts': ByProducts,
            'command': List[str],
            'environment': Environment,
            'materials': List[GrafeasV1beta1IntotoArtifact],
            'products': List[GrafeasV1beta1IntotoArtifact]
        }

        self.attribute_map = {
            'byproducts': 'byproducts',
            'command': 'command',
            'environment': 'environment',
            'materials': 'materials',
            'products': 'products'
        }

        self._byproducts = byproducts
        self._command = command
        self._environment = environment
        self._materials = materials
        self._products = products

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Link':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Link of this Link.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def byproducts(self):
        """Gets the byproducts of this Link.


        :return: The byproducts of this Link.
        :rtype: ByProducts
        """
        return self._byproducts

    @byproducts.setter
    def byproducts(self, byproducts):
        """Sets the byproducts of this Link.


        :param byproducts: The byproducts of this Link.
        :type byproducts: ByProducts
        """

        self._byproducts = byproducts

    @property
    def command(self):
        """Gets the command of this Link.

        This field contains the full command executed for the step. This can also be empty if links are generated for operations that aren't directly mapped to a specific command. Each term in the command is an independent string in the list. An example of a command in the in-toto metadata field is: \"command\": [\"git\", \"clone\", \"https://github.com/in-toto/demo-project.git\"]

        :return: The command of this Link.
        :rtype: List[str]
        """
        return self._command

    @command.setter
    def command(self, command):
        """Sets the command of this Link.

        This field contains the full command executed for the step. This can also be empty if links are generated for operations that aren't directly mapped to a specific command. Each term in the command is an independent string in the list. An example of a command in the in-toto metadata field is: \"command\": [\"git\", \"clone\", \"https://github.com/in-toto/demo-project.git\"]

        :param command: The command of this Link.
        :type command: List[str]
        """

        self._command = command

    @property
    def environment(self):
        """Gets the environment of this Link.


        :return: The environment of this Link.
        :rtype: Environment
        """
        return self._environment

    @environment.setter
    def environment(self, environment):
        """Sets the environment of this Link.


        :param environment: The environment of this Link.
        :type environment: Environment
        """

        self._environment = environment

    @property
    def materials(self):
        """Gets the materials of this Link.

        Materials are the supply chain artifacts that go into the step and are used for the operation performed. The key of the map is the path of the artifact and the structure contains the recorded hash information. An example is: \"materials\": [ { \"resource_uri\": \"foo/bar\", \"hashes\": { \"sha256\": \"ebebf...\", : } } ]

        :return: The materials of this Link.
        :rtype: List[GrafeasV1beta1IntotoArtifact]
        """
        return self._materials

    @materials.setter
    def materials(self, materials):
        """Sets the materials of this Link.

        Materials are the supply chain artifacts that go into the step and are used for the operation performed. The key of the map is the path of the artifact and the structure contains the recorded hash information. An example is: \"materials\": [ { \"resource_uri\": \"foo/bar\", \"hashes\": { \"sha256\": \"ebebf...\", : } } ]

        :param materials: The materials of this Link.
        :type materials: List[GrafeasV1beta1IntotoArtifact]
        """

        self._materials = materials

    @property
    def products(self):
        """Gets the products of this Link.

        Products are the supply chain artifacts generated as a result of the step. The structure is identical to that of materials.

        :return: The products of this Link.
        :rtype: List[GrafeasV1beta1IntotoArtifact]
        """
        return self._products

    @products.setter
    def products(self, products):
        """Sets the products of this Link.

        Products are the supply chain artifacts generated as a result of the step. The structure is identical to that of materials.

        :param products: The products of this Link.
        :type products: List[GrafeasV1beta1IntotoArtifact]
        """

        self._products = products
