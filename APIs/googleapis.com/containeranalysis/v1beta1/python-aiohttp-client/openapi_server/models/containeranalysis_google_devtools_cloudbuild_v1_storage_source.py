# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSource(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bucket: str=None, generation: str=None, object: str=None, source_fetcher: str=None):
        """ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSource - a model defined in OpenAPI

        :param bucket: The bucket of this ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSource.
        :param generation: The generation of this ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSource.
        :param object: The object of this ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSource.
        :param source_fetcher: The source_fetcher of this ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSource.
        """
        self.openapi_types = {
            'bucket': str,
            'generation': str,
            'object': str,
            'source_fetcher': str
        }

        self.attribute_map = {
            'bucket': 'bucket',
            'generation': 'generation',
            'object': 'object',
            'source_fetcher': 'sourceFetcher'
        }

        self._bucket = bucket
        self._generation = generation
        self._object = object
        self._source_fetcher = source_fetcher

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSource':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSource of this ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSource.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bucket(self):
        """Gets the bucket of this ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSource.

        Cloud Storage bucket containing the source (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)).

        :return: The bucket of this ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSource.
        :rtype: str
        """
        return self._bucket

    @bucket.setter
    def bucket(self, bucket):
        """Sets the bucket of this ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSource.

        Cloud Storage bucket containing the source (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)).

        :param bucket: The bucket of this ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSource.
        :type bucket: str
        """

        self._bucket = bucket

    @property
    def generation(self):
        """Gets the generation of this ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSource.

        Cloud Storage generation for the object. If the generation is omitted, the latest generation will be used.

        :return: The generation of this ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSource.
        :rtype: str
        """
        return self._generation

    @generation.setter
    def generation(self, generation):
        """Sets the generation of this ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSource.

        Cloud Storage generation for the object. If the generation is omitted, the latest generation will be used.

        :param generation: The generation of this ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSource.
        :type generation: str
        """

        self._generation = generation

    @property
    def object(self):
        """Gets the object of this ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSource.

        Cloud Storage object containing the source. This object must be a zipped (`.zip`) or gzipped archive file (`.tar.gz`) containing source to build.

        :return: The object of this ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSource.
        :rtype: str
        """
        return self._object

    @object.setter
    def object(self, object):
        """Sets the object of this ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSource.

        Cloud Storage object containing the source. This object must be a zipped (`.zip`) or gzipped archive file (`.tar.gz`) containing source to build.

        :param object: The object of this ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSource.
        :type object: str
        """

        self._object = object

    @property
    def source_fetcher(self):
        """Gets the source_fetcher of this ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSource.

        Optional. Option to specify the tool to fetch the source file for the build.

        :return: The source_fetcher of this ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSource.
        :rtype: str
        """
        return self._source_fetcher

    @source_fetcher.setter
    def source_fetcher(self, source_fetcher):
        """Sets the source_fetcher of this ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSource.

        Optional. Option to specify the tool to fetch the source file for the build.

        :param source_fetcher: The source_fetcher of this ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSource.
        :type source_fetcher: str
        """
        allowed_values = ["SOURCE_FETCHER_UNSPECIFIED", "GSUTIL", "GCS_FETCHER"]  # noqa: E501
        if source_fetcher not in allowed_values:
            raise ValueError(
                "Invalid value for `source_fetcher` ({0}), must be one of {1}"
                .format(source_fetcher, allowed_values)
            )

        self._source_fetcher = source_fetcher
