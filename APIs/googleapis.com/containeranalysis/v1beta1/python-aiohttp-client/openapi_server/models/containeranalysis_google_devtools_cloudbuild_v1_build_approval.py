# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.containeranalysis_google_devtools_cloudbuild_v1_approval_config import ContaineranalysisGoogleDevtoolsCloudbuildV1ApprovalConfig
from openapi_server.models.containeranalysis_google_devtools_cloudbuild_v1_approval_result import ContaineranalysisGoogleDevtoolsCloudbuildV1ApprovalResult
from openapi_server import util


class ContaineranalysisGoogleDevtoolsCloudbuildV1BuildApproval(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, config: ContaineranalysisGoogleDevtoolsCloudbuildV1ApprovalConfig=None, result: ContaineranalysisGoogleDevtoolsCloudbuildV1ApprovalResult=None, state: str=None):
        """ContaineranalysisGoogleDevtoolsCloudbuildV1BuildApproval - a model defined in OpenAPI

        :param config: The config of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildApproval.
        :param result: The result of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildApproval.
        :param state: The state of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildApproval.
        """
        self.openapi_types = {
            'config': ContaineranalysisGoogleDevtoolsCloudbuildV1ApprovalConfig,
            'result': ContaineranalysisGoogleDevtoolsCloudbuildV1ApprovalResult,
            'state': str
        }

        self.attribute_map = {
            'config': 'config',
            'result': 'result',
            'state': 'state'
        }

        self._config = config
        self._result = result
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ContaineranalysisGoogleDevtoolsCloudbuildV1BuildApproval':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ContaineranalysisGoogleDevtoolsCloudbuildV1BuildApproval of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildApproval.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def config(self):
        """Gets the config of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildApproval.


        :return: The config of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildApproval.
        :rtype: ContaineranalysisGoogleDevtoolsCloudbuildV1ApprovalConfig
        """
        return self._config

    @config.setter
    def config(self, config):
        """Sets the config of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildApproval.


        :param config: The config of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildApproval.
        :type config: ContaineranalysisGoogleDevtoolsCloudbuildV1ApprovalConfig
        """

        self._config = config

    @property
    def result(self):
        """Gets the result of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildApproval.


        :return: The result of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildApproval.
        :rtype: ContaineranalysisGoogleDevtoolsCloudbuildV1ApprovalResult
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildApproval.


        :param result: The result of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildApproval.
        :type result: ContaineranalysisGoogleDevtoolsCloudbuildV1ApprovalResult
        """

        self._result = result

    @property
    def state(self):
        """Gets the state of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildApproval.

        Output only. The state of this build's approval.

        :return: The state of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildApproval.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildApproval.

        Output only. The state of this build's approval.

        :param state: The state of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildApproval.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "PENDING", "APPROVED", "REJECTED", "CANCELLED"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state
