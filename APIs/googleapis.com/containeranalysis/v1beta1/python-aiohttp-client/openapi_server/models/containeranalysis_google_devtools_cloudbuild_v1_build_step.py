# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.containeranalysis_google_devtools_cloudbuild_v1_time_span import ContaineranalysisGoogleDevtoolsCloudbuildV1TimeSpan
from openapi_server.models.containeranalysis_google_devtools_cloudbuild_v1_volume import ContaineranalysisGoogleDevtoolsCloudbuildV1Volume
from openapi_server import util


class ContaineranalysisGoogleDevtoolsCloudbuildV1BuildStep(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allow_exit_codes: List[int]=None, allow_failure: bool=None, args: List[str]=None, automap_substitutions: bool=None, dir: str=None, entrypoint: str=None, env: List[str]=None, exit_code: int=None, id: str=None, name: str=None, pull_timing: ContaineranalysisGoogleDevtoolsCloudbuildV1TimeSpan=None, script: str=None, secret_env: List[str]=None, status: str=None, timeout: str=None, timing: ContaineranalysisGoogleDevtoolsCloudbuildV1TimeSpan=None, volumes: List[ContaineranalysisGoogleDevtoolsCloudbuildV1Volume]=None, wait_for: List[str]=None):
        """ContaineranalysisGoogleDevtoolsCloudbuildV1BuildStep - a model defined in OpenAPI

        :param allow_exit_codes: The allow_exit_codes of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildStep.
        :param allow_failure: The allow_failure of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildStep.
        :param args: The args of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildStep.
        :param automap_substitutions: The automap_substitutions of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildStep.
        :param dir: The dir of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildStep.
        :param entrypoint: The entrypoint of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildStep.
        :param env: The env of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildStep.
        :param exit_code: The exit_code of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildStep.
        :param id: The id of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildStep.
        :param name: The name of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildStep.
        :param pull_timing: The pull_timing of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildStep.
        :param script: The script of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildStep.
        :param secret_env: The secret_env of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildStep.
        :param status: The status of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildStep.
        :param timeout: The timeout of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildStep.
        :param timing: The timing of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildStep.
        :param volumes: The volumes of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildStep.
        :param wait_for: The wait_for of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildStep.
        """
        self.openapi_types = {
            'allow_exit_codes': List[int],
            'allow_failure': bool,
            'args': List[str],
            'automap_substitutions': bool,
            'dir': str,
            'entrypoint': str,
            'env': List[str],
            'exit_code': int,
            'id': str,
            'name': str,
            'pull_timing': ContaineranalysisGoogleDevtoolsCloudbuildV1TimeSpan,
            'script': str,
            'secret_env': List[str],
            'status': str,
            'timeout': str,
            'timing': ContaineranalysisGoogleDevtoolsCloudbuildV1TimeSpan,
            'volumes': List[ContaineranalysisGoogleDevtoolsCloudbuildV1Volume],
            'wait_for': List[str]
        }

        self.attribute_map = {
            'allow_exit_codes': 'allowExitCodes',
            'allow_failure': 'allowFailure',
            'args': 'args',
            'automap_substitutions': 'automapSubstitutions',
            'dir': 'dir',
            'entrypoint': 'entrypoint',
            'env': 'env',
            'exit_code': 'exitCode',
            'id': 'id',
            'name': 'name',
            'pull_timing': 'pullTiming',
            'script': 'script',
            'secret_env': 'secretEnv',
            'status': 'status',
            'timeout': 'timeout',
            'timing': 'timing',
            'volumes': 'volumes',
            'wait_for': 'waitFor'
        }

        self._allow_exit_codes = allow_exit_codes
        self._allow_failure = allow_failure
        self._args = args
        self._automap_substitutions = automap_substitutions
        self._dir = dir
        self._entrypoint = entrypoint
        self._env = env
        self._exit_code = exit_code
        self._id = id
        self._name = name
        self._pull_timing = pull_timing
        self._script = script
        self._secret_env = secret_env
        self._status = status
        self._timeout = timeout
        self._timing = timing
        self._volumes = volumes
        self._wait_for = wait_for

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ContaineranalysisGoogleDevtoolsCloudbuildV1BuildStep':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ContaineranalysisGoogleDevtoolsCloudbuildV1BuildStep of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildStep.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allow_exit_codes(self):
        """Gets the allow_exit_codes of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildStep.

        Allow this build step to fail without failing the entire build if and only if the exit code is one of the specified codes. If allow_failure is also specified, this field will take precedence.

        :return: The allow_exit_codes of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildStep.
        :rtype: List[int]
        """
        return self._allow_exit_codes

    @allow_exit_codes.setter
    def allow_exit_codes(self, allow_exit_codes):
        """Sets the allow_exit_codes of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildStep.

        Allow this build step to fail without failing the entire build if and only if the exit code is one of the specified codes. If allow_failure is also specified, this field will take precedence.

        :param allow_exit_codes: The allow_exit_codes of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildStep.
        :type allow_exit_codes: List[int]
        """

        self._allow_exit_codes = allow_exit_codes

    @property
    def allow_failure(self):
        """Gets the allow_failure of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildStep.

        Allow this build step to fail without failing the entire build. If false, the entire build will fail if this step fails. Otherwise, the build will succeed, but this step will still have a failure status. Error information will be reported in the failure_detail field.

        :return: The allow_failure of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildStep.
        :rtype: bool
        """
        return self._allow_failure

    @allow_failure.setter
    def allow_failure(self, allow_failure):
        """Sets the allow_failure of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildStep.

        Allow this build step to fail without failing the entire build. If false, the entire build will fail if this step fails. Otherwise, the build will succeed, but this step will still have a failure status. Error information will be reported in the failure_detail field.

        :param allow_failure: The allow_failure of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildStep.
        :type allow_failure: bool
        """

        self._allow_failure = allow_failure

    @property
    def args(self):
        """Gets the args of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildStep.

        A list of arguments that will be presented to the step when it is started. If the image used to run the step's container has an entrypoint, the `args` are used as arguments to that entrypoint. If the image does not define an entrypoint, the first element in args is used as the entrypoint, and the remainder will be used as arguments.

        :return: The args of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildStep.
        :rtype: List[str]
        """
        return self._args

    @args.setter
    def args(self, args):
        """Sets the args of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildStep.

        A list of arguments that will be presented to the step when it is started. If the image used to run the step's container has an entrypoint, the `args` are used as arguments to that entrypoint. If the image does not define an entrypoint, the first element in args is used as the entrypoint, and the remainder will be used as arguments.

        :param args: The args of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildStep.
        :type args: List[str]
        """

        self._args = args

    @property
    def automap_substitutions(self):
        """Gets the automap_substitutions of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildStep.

        Option to include built-in and custom substitutions as env variables for this build step. This option will override the global option in BuildOption.

        :return: The automap_substitutions of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildStep.
        :rtype: bool
        """
        return self._automap_substitutions

    @automap_substitutions.setter
    def automap_substitutions(self, automap_substitutions):
        """Sets the automap_substitutions of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildStep.

        Option to include built-in and custom substitutions as env variables for this build step. This option will override the global option in BuildOption.

        :param automap_substitutions: The automap_substitutions of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildStep.
        :type automap_substitutions: bool
        """

        self._automap_substitutions = automap_substitutions

    @property
    def dir(self):
        """Gets the dir of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildStep.

        Working directory to use when running this step's container. If this value is a relative path, it is relative to the build's working directory. If this value is absolute, it may be outside the build's working directory, in which case the contents of the path may not be persisted across build step executions, unless a `volume` for that path is specified. If the build specifies a `RepoSource` with `dir` and a step with a `dir`, which specifies an absolute path, the `RepoSource` `dir` is ignored for the step's execution.

        :return: The dir of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildStep.
        :rtype: str
        """
        return self._dir

    @dir.setter
    def dir(self, dir):
        """Sets the dir of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildStep.

        Working directory to use when running this step's container. If this value is a relative path, it is relative to the build's working directory. If this value is absolute, it may be outside the build's working directory, in which case the contents of the path may not be persisted across build step executions, unless a `volume` for that path is specified. If the build specifies a `RepoSource` with `dir` and a step with a `dir`, which specifies an absolute path, the `RepoSource` `dir` is ignored for the step's execution.

        :param dir: The dir of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildStep.
        :type dir: str
        """

        self._dir = dir

    @property
    def entrypoint(self):
        """Gets the entrypoint of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildStep.

        Entrypoint to be used instead of the build step image's default entrypoint. If unset, the image's default entrypoint is used.

        :return: The entrypoint of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildStep.
        :rtype: str
        """
        return self._entrypoint

    @entrypoint.setter
    def entrypoint(self, entrypoint):
        """Sets the entrypoint of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildStep.

        Entrypoint to be used instead of the build step image's default entrypoint. If unset, the image's default entrypoint is used.

        :param entrypoint: The entrypoint of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildStep.
        :type entrypoint: str
        """

        self._entrypoint = entrypoint

    @property
    def env(self):
        """Gets the env of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildStep.

        A list of environment variable definitions to be used when running a step. The elements are of the form \"KEY=VALUE\" for the environment variable \"KEY\" being given the value \"VALUE\".

        :return: The env of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildStep.
        :rtype: List[str]
        """
        return self._env

    @env.setter
    def env(self, env):
        """Sets the env of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildStep.

        A list of environment variable definitions to be used when running a step. The elements are of the form \"KEY=VALUE\" for the environment variable \"KEY\" being given the value \"VALUE\".

        :param env: The env of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildStep.
        :type env: List[str]
        """

        self._env = env

    @property
    def exit_code(self):
        """Gets the exit_code of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildStep.

        Output only. Return code from running the step.

        :return: The exit_code of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildStep.
        :rtype: int
        """
        return self._exit_code

    @exit_code.setter
    def exit_code(self, exit_code):
        """Sets the exit_code of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildStep.

        Output only. Return code from running the step.

        :param exit_code: The exit_code of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildStep.
        :type exit_code: int
        """

        self._exit_code = exit_code

    @property
    def id(self):
        """Gets the id of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildStep.

        Unique identifier for this build step, used in `wait_for` to reference this build step as a dependency.

        :return: The id of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildStep.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildStep.

        Unique identifier for this build step, used in `wait_for` to reference this build step as a dependency.

        :param id: The id of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildStep.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildStep.

        Required. The name of the container image that will run this particular build step. If the image is available in the host's Docker daemon's cache, it will be run directly. If not, the host will attempt to pull the image first, using the builder service account's credentials if necessary. The Docker daemon's cache will already have the latest versions of all of the officially supported build steps ([https://github.com/GoogleCloudPlatform/cloud-builders](https://github.com/GoogleCloudPlatform/cloud-builders)). The Docker daemon will also have cached many of the layers for some popular images, like \"ubuntu\", \"debian\", but they will be refreshed at the time you attempt to use them. If you built an image in a previous build step, it will be stored in the host's Docker daemon's cache and is available to use as the name for a later build step.

        :return: The name of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildStep.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildStep.

        Required. The name of the container image that will run this particular build step. If the image is available in the host's Docker daemon's cache, it will be run directly. If not, the host will attempt to pull the image first, using the builder service account's credentials if necessary. The Docker daemon's cache will already have the latest versions of all of the officially supported build steps ([https://github.com/GoogleCloudPlatform/cloud-builders](https://github.com/GoogleCloudPlatform/cloud-builders)). The Docker daemon will also have cached many of the layers for some popular images, like \"ubuntu\", \"debian\", but they will be refreshed at the time you attempt to use them. If you built an image in a previous build step, it will be stored in the host's Docker daemon's cache and is available to use as the name for a later build step.

        :param name: The name of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildStep.
        :type name: str
        """

        self._name = name

    @property
    def pull_timing(self):
        """Gets the pull_timing of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildStep.


        :return: The pull_timing of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildStep.
        :rtype: ContaineranalysisGoogleDevtoolsCloudbuildV1TimeSpan
        """
        return self._pull_timing

    @pull_timing.setter
    def pull_timing(self, pull_timing):
        """Sets the pull_timing of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildStep.


        :param pull_timing: The pull_timing of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildStep.
        :type pull_timing: ContaineranalysisGoogleDevtoolsCloudbuildV1TimeSpan
        """

        self._pull_timing = pull_timing

    @property
    def script(self):
        """Gets the script of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildStep.

        A shell script to be executed in the step. When script is provided, the user cannot specify the entrypoint or args.

        :return: The script of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildStep.
        :rtype: str
        """
        return self._script

    @script.setter
    def script(self, script):
        """Sets the script of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildStep.

        A shell script to be executed in the step. When script is provided, the user cannot specify the entrypoint or args.

        :param script: The script of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildStep.
        :type script: str
        """

        self._script = script

    @property
    def secret_env(self):
        """Gets the secret_env of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildStep.

        A list of environment variables which are encrypted using a Cloud Key Management Service crypto key. These values must be specified in the build's `Secret`.

        :return: The secret_env of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildStep.
        :rtype: List[str]
        """
        return self._secret_env

    @secret_env.setter
    def secret_env(self, secret_env):
        """Sets the secret_env of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildStep.

        A list of environment variables which are encrypted using a Cloud Key Management Service crypto key. These values must be specified in the build's `Secret`.

        :param secret_env: The secret_env of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildStep.
        :type secret_env: List[str]
        """

        self._secret_env = secret_env

    @property
    def status(self):
        """Gets the status of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildStep.

        Output only. Status of the build step. At this time, build step status is only updated on build completion; step status is not updated in real-time as the build progresses.

        :return: The status of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildStep.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildStep.

        Output only. Status of the build step. At this time, build step status is only updated on build completion; step status is not updated in real-time as the build progresses.

        :param status: The status of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildStep.
        :type status: str
        """
        allowed_values = ["STATUS_UNKNOWN", "PENDING", "QUEUED", "WORKING", "SUCCESS", "FAILURE", "INTERNAL_ERROR", "TIMEOUT", "CANCELLED", "EXPIRED"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def timeout(self):
        """Gets the timeout of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildStep.

        Time limit for executing this build step. If not defined, the step has no time limit and will be allowed to continue to run until either it completes or the build itself times out.

        :return: The timeout of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildStep.
        :rtype: str
        """
        return self._timeout

    @timeout.setter
    def timeout(self, timeout):
        """Sets the timeout of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildStep.

        Time limit for executing this build step. If not defined, the step has no time limit and will be allowed to continue to run until either it completes or the build itself times out.

        :param timeout: The timeout of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildStep.
        :type timeout: str
        """

        self._timeout = timeout

    @property
    def timing(self):
        """Gets the timing of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildStep.


        :return: The timing of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildStep.
        :rtype: ContaineranalysisGoogleDevtoolsCloudbuildV1TimeSpan
        """
        return self._timing

    @timing.setter
    def timing(self, timing):
        """Sets the timing of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildStep.


        :param timing: The timing of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildStep.
        :type timing: ContaineranalysisGoogleDevtoolsCloudbuildV1TimeSpan
        """

        self._timing = timing

    @property
    def volumes(self):
        """Gets the volumes of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildStep.

        List of volumes to mount into the build step. Each volume is created as an empty volume prior to execution of the build step. Upon completion of the build, volumes and their contents are discarded. Using a named volume in only one step is not valid as it is indicative of a build request with an incorrect configuration.

        :return: The volumes of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildStep.
        :rtype: List[ContaineranalysisGoogleDevtoolsCloudbuildV1Volume]
        """
        return self._volumes

    @volumes.setter
    def volumes(self, volumes):
        """Sets the volumes of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildStep.

        List of volumes to mount into the build step. Each volume is created as an empty volume prior to execution of the build step. Upon completion of the build, volumes and their contents are discarded. Using a named volume in only one step is not valid as it is indicative of a build request with an incorrect configuration.

        :param volumes: The volumes of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildStep.
        :type volumes: List[ContaineranalysisGoogleDevtoolsCloudbuildV1Volume]
        """

        self._volumes = volumes

    @property
    def wait_for(self):
        """Gets the wait_for of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildStep.

        The ID(s) of the step(s) that this build step depends on. This build step will not start until all the build steps in `wait_for` have completed successfully. If `wait_for` is empty, this build step will start when all previous build steps in the `Build.Steps` list have completed successfully.

        :return: The wait_for of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildStep.
        :rtype: List[str]
        """
        return self._wait_for

    @wait_for.setter
    def wait_for(self, wait_for):
        """Sets the wait_for of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildStep.

        The ID(s) of the step(s) that this build step depends on. This build step will not start until all the build steps in `wait_for` have completed successfully. If `wait_for` is empty, this build step will start when all previous build steps in the `Build.Steps` list have completed successfully.

        :param wait_for: The wait_for of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildStep.
        :type wait_for: List[str]
        """

        self._wait_for = wait_for
