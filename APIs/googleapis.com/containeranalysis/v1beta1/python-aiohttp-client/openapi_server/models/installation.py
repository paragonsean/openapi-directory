# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.license import License
from openapi_server.models.location import Location
from openapi_server.models.version import Version
from openapi_server import util


class Installation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, architecture: str=None, cpe_uri: str=None, license: License=None, location: List[Location]=None, name: str=None, package_type: str=None, version: Version=None):
        """Installation - a model defined in OpenAPI

        :param architecture: The architecture of this Installation.
        :param cpe_uri: The cpe_uri of this Installation.
        :param license: The license of this Installation.
        :param location: The location of this Installation.
        :param name: The name of this Installation.
        :param package_type: The package_type of this Installation.
        :param version: The version of this Installation.
        """
        self.openapi_types = {
            'architecture': str,
            'cpe_uri': str,
            'license': License,
            'location': List[Location],
            'name': str,
            'package_type': str,
            'version': Version
        }

        self.attribute_map = {
            'architecture': 'architecture',
            'cpe_uri': 'cpeUri',
            'license': 'license',
            'location': 'location',
            'name': 'name',
            'package_type': 'packageType',
            'version': 'version'
        }

        self._architecture = architecture
        self._cpe_uri = cpe_uri
        self._license = license
        self._location = location
        self._name = name
        self._package_type = package_type
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Installation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Installation of this Installation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def architecture(self):
        """Gets the architecture of this Installation.

        Output only. The CPU architecture for which packages in this distribution channel were built. Architecture will be blank for language packages.

        :return: The architecture of this Installation.
        :rtype: str
        """
        return self._architecture

    @architecture.setter
    def architecture(self, architecture):
        """Sets the architecture of this Installation.

        Output only. The CPU architecture for which packages in this distribution channel were built. Architecture will be blank for language packages.

        :param architecture: The architecture of this Installation.
        :type architecture: str
        """
        allowed_values = ["ARCHITECTURE_UNSPECIFIED", "X86", "X64"]  # noqa: E501
        if architecture not in allowed_values:
            raise ValueError(
                "Invalid value for `architecture` ({0}), must be one of {1}"
                .format(architecture, allowed_values)
            )

        self._architecture = architecture

    @property
    def cpe_uri(self):
        """Gets the cpe_uri of this Installation.

        Output only. The cpe_uri in [CPE format](https://cpe.mitre.org/specification/) denoting the package manager version distributing a package. The cpe_uri will be blank for language packages.

        :return: The cpe_uri of this Installation.
        :rtype: str
        """
        return self._cpe_uri

    @cpe_uri.setter
    def cpe_uri(self, cpe_uri):
        """Sets the cpe_uri of this Installation.

        Output only. The cpe_uri in [CPE format](https://cpe.mitre.org/specification/) denoting the package manager version distributing a package. The cpe_uri will be blank for language packages.

        :param cpe_uri: The cpe_uri of this Installation.
        :type cpe_uri: str
        """

        self._cpe_uri = cpe_uri

    @property
    def license(self):
        """Gets the license of this Installation.


        :return: The license of this Installation.
        :rtype: License
        """
        return self._license

    @license.setter
    def license(self, license):
        """Sets the license of this Installation.


        :param license: The license of this Installation.
        :type license: License
        """

        self._license = license

    @property
    def location(self):
        """Gets the location of this Installation.

        All of the places within the filesystem versions of this package have been found.

        :return: The location of this Installation.
        :rtype: List[Location]
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this Installation.

        All of the places within the filesystem versions of this package have been found.

        :param location: The location of this Installation.
        :type location: List[Location]
        """

        self._location = location

    @property
    def name(self):
        """Gets the name of this Installation.

        Required. Output only. The name of the installed package.

        :return: The name of this Installation.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Installation.

        Required. Output only. The name of the installed package.

        :param name: The name of this Installation.
        :type name: str
        """

        self._name = name

    @property
    def package_type(self):
        """Gets the package_type of this Installation.

        Output only. The type of package; whether native or non native (e.g., ruby gems, node.js packages, etc.).

        :return: The package_type of this Installation.
        :rtype: str
        """
        return self._package_type

    @package_type.setter
    def package_type(self, package_type):
        """Sets the package_type of this Installation.

        Output only. The type of package; whether native or non native (e.g., ruby gems, node.js packages, etc.).

        :param package_type: The package_type of this Installation.
        :type package_type: str
        """

        self._package_type = package_type

    @property
    def version(self):
        """Gets the version of this Installation.


        :return: The version of this Installation.
        :rtype: Version
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this Installation.


        :param version: The version of this Installation.
        :type version: Version
        """

        self._version = version
