# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class FileNote(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, checksum: List[str]=None, file_type: str=None, title: str=None):
        """FileNote - a model defined in OpenAPI

        :param checksum: The checksum of this FileNote.
        :param file_type: The file_type of this FileNote.
        :param title: The title of this FileNote.
        """
        self.openapi_types = {
            'checksum': List[str],
            'file_type': str,
            'title': str
        }

        self.attribute_map = {
            'checksum': 'checksum',
            'file_type': 'fileType',
            'title': 'title'
        }

        self._checksum = checksum
        self._file_type = file_type
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FileNote':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FileNote of this FileNote.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def checksum(self):
        """Gets the checksum of this FileNote.

        Provide a unique identifier to match analysis information on each specific file in a package

        :return: The checksum of this FileNote.
        :rtype: List[str]
        """
        return self._checksum

    @checksum.setter
    def checksum(self, checksum):
        """Sets the checksum of this FileNote.

        Provide a unique identifier to match analysis information on each specific file in a package

        :param checksum: The checksum of this FileNote.
        :type checksum: List[str]
        """

        self._checksum = checksum

    @property
    def file_type(self):
        """Gets the file_type of this FileNote.

        This field provides information about the type of file identified

        :return: The file_type of this FileNote.
        :rtype: str
        """
        return self._file_type

    @file_type.setter
    def file_type(self, file_type):
        """Sets the file_type of this FileNote.

        This field provides information about the type of file identified

        :param file_type: The file_type of this FileNote.
        :type file_type: str
        """
        allowed_values = ["FILE_TYPE_UNSPECIFIED", "SOURCE", "BINARY", "ARCHIVE", "APPLICATION", "AUDIO", "IMAGE", "TEXT", "VIDEO", "DOCUMENTATION", "SPDX", "OTHER"]  # noqa: E501
        if file_type not in allowed_values:
            raise ValueError(
                "Invalid value for `file_type` ({0}), must be one of {1}"
                .format(file_type, allowed_values)
            )

        self._file_type = file_type

    @property
    def title(self):
        """Gets the title of this FileNote.

        Identify the full path and filename that corresponds to the file information in this section

        :return: The title of this FileNote.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this FileNote.

        Identify the full path and filename that corresponds to the file information in this section

        :param title: The title of this FileNote.
        :type title: str
        """

        self._title = title
