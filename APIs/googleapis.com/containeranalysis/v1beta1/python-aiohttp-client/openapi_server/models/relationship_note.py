# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RelationshipNote(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, type: str=None):
        """RelationshipNote - a model defined in OpenAPI

        :param type: The type of this RelationshipNote.
        """
        self.openapi_types = {
            'type': str
        }

        self.attribute_map = {
            'type': 'type'
        }

        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RelationshipNote':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RelationshipNote of this RelationshipNote.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self):
        """Gets the type of this RelationshipNote.

        The type of relationship between the source and target SPDX elements

        :return: The type of this RelationshipNote.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this RelationshipNote.

        The type of relationship between the source and target SPDX elements

        :param type: The type of this RelationshipNote.
        :type type: str
        """
        allowed_values = ["RELATIONSHIP_TYPE_UNSPECIFIED", "DESCRIBES", "DESCRIBED_BY", "CONTAINS", "CONTAINED_BY", "DEPENDS_ON", "DEPENDENCY_OF", "DEPENDENCY_MANIFEST_OF", "BUILD_DEPENDENCY_OF", "DEV_DEPENDENCY_OF", "OPTIONAL_DEPENDENCY_OF", "PROVIDED_DEPENDENCY_OF", "TEST_DEPENDENCY_OF", "RUNTIME_DEPENDENCY_OF", "EXAMPLE_OF", "GENERATES", "GENERATED_FROM", "ANCESTOR_OF", "DESCENDANT_OF", "VARIANT_OF", "DISTRIBUTION_ARTIFACT", "PATCH_FOR", "PATCH_APPLIED", "COPY_OF", "FILE_ADDED", "FILE_DELETED", "FILE_MODIFIED", "EXPANDED_FROM_ARCHIVE", "DYNAMIC_LINK", "STATIC_LINK", "DATA_FILE_OF", "TEST_CASE_OF", "BUILD_TOOL_OF", "DEV_TOOL_OF", "TEST_OF", "TEST_TOOL_OF", "DOCUMENTATION_OF", "OPTIONAL_COMPONENT_OF", "METAFILE_OF", "PACKAGE_OF", "AMENDS", "PREREQUISITE_FOR", "HAS_PREREQUISITE", "OTHER"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
