# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.containeranalysis_google_devtools_cloudbuild_v1_artifacts import ContaineranalysisGoogleDevtoolsCloudbuildV1Artifacts
from openapi_server.models.containeranalysis_google_devtools_cloudbuild_v1_build_approval import ContaineranalysisGoogleDevtoolsCloudbuildV1BuildApproval
from openapi_server.models.containeranalysis_google_devtools_cloudbuild_v1_build_failure_info import ContaineranalysisGoogleDevtoolsCloudbuildV1BuildFailureInfo
from openapi_server.models.containeranalysis_google_devtools_cloudbuild_v1_build_options import ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions
from openapi_server.models.containeranalysis_google_devtools_cloudbuild_v1_build_step import ContaineranalysisGoogleDevtoolsCloudbuildV1BuildStep
from openapi_server.models.containeranalysis_google_devtools_cloudbuild_v1_build_warning import ContaineranalysisGoogleDevtoolsCloudbuildV1BuildWarning
from openapi_server.models.containeranalysis_google_devtools_cloudbuild_v1_results import ContaineranalysisGoogleDevtoolsCloudbuildV1Results
from openapi_server.models.containeranalysis_google_devtools_cloudbuild_v1_secret import ContaineranalysisGoogleDevtoolsCloudbuildV1Secret
from openapi_server.models.containeranalysis_google_devtools_cloudbuild_v1_secrets import ContaineranalysisGoogleDevtoolsCloudbuildV1Secrets
from openapi_server.models.containeranalysis_google_devtools_cloudbuild_v1_source import ContaineranalysisGoogleDevtoolsCloudbuildV1Source
from openapi_server.models.containeranalysis_google_devtools_cloudbuild_v1_source_provenance import ContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance
from openapi_server.models.containeranalysis_google_devtools_cloudbuild_v1_time_span import ContaineranalysisGoogleDevtoolsCloudbuildV1TimeSpan
from openapi_server import util


class ContaineranalysisGoogleDevtoolsCloudbuildV1Build(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, approval: ContaineranalysisGoogleDevtoolsCloudbuildV1BuildApproval=None, artifacts: ContaineranalysisGoogleDevtoolsCloudbuildV1Artifacts=None, available_secrets: ContaineranalysisGoogleDevtoolsCloudbuildV1Secrets=None, build_trigger_id: str=None, create_time: str=None, failure_info: ContaineranalysisGoogleDevtoolsCloudbuildV1BuildFailureInfo=None, finish_time: str=None, id: str=None, images: List[str]=None, log_url: str=None, logs_bucket: str=None, name: str=None, options: ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions=None, project_id: str=None, queue_ttl: str=None, results: ContaineranalysisGoogleDevtoolsCloudbuildV1Results=None, secrets: List[ContaineranalysisGoogleDevtoolsCloudbuildV1Secret]=None, service_account: str=None, source: ContaineranalysisGoogleDevtoolsCloudbuildV1Source=None, source_provenance: ContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance=None, start_time: str=None, status: str=None, status_detail: str=None, steps: List[ContaineranalysisGoogleDevtoolsCloudbuildV1BuildStep]=None, substitutions: Dict[str, str]=None, tags: List[str]=None, timeout: str=None, timing: Dict[str, ContaineranalysisGoogleDevtoolsCloudbuildV1TimeSpan]=None, warnings: List[ContaineranalysisGoogleDevtoolsCloudbuildV1BuildWarning]=None):
        """ContaineranalysisGoogleDevtoolsCloudbuildV1Build - a model defined in OpenAPI

        :param approval: The approval of this ContaineranalysisGoogleDevtoolsCloudbuildV1Build.
        :param artifacts: The artifacts of this ContaineranalysisGoogleDevtoolsCloudbuildV1Build.
        :param available_secrets: The available_secrets of this ContaineranalysisGoogleDevtoolsCloudbuildV1Build.
        :param build_trigger_id: The build_trigger_id of this ContaineranalysisGoogleDevtoolsCloudbuildV1Build.
        :param create_time: The create_time of this ContaineranalysisGoogleDevtoolsCloudbuildV1Build.
        :param failure_info: The failure_info of this ContaineranalysisGoogleDevtoolsCloudbuildV1Build.
        :param finish_time: The finish_time of this ContaineranalysisGoogleDevtoolsCloudbuildV1Build.
        :param id: The id of this ContaineranalysisGoogleDevtoolsCloudbuildV1Build.
        :param images: The images of this ContaineranalysisGoogleDevtoolsCloudbuildV1Build.
        :param log_url: The log_url of this ContaineranalysisGoogleDevtoolsCloudbuildV1Build.
        :param logs_bucket: The logs_bucket of this ContaineranalysisGoogleDevtoolsCloudbuildV1Build.
        :param name: The name of this ContaineranalysisGoogleDevtoolsCloudbuildV1Build.
        :param options: The options of this ContaineranalysisGoogleDevtoolsCloudbuildV1Build.
        :param project_id: The project_id of this ContaineranalysisGoogleDevtoolsCloudbuildV1Build.
        :param queue_ttl: The queue_ttl of this ContaineranalysisGoogleDevtoolsCloudbuildV1Build.
        :param results: The results of this ContaineranalysisGoogleDevtoolsCloudbuildV1Build.
        :param secrets: The secrets of this ContaineranalysisGoogleDevtoolsCloudbuildV1Build.
        :param service_account: The service_account of this ContaineranalysisGoogleDevtoolsCloudbuildV1Build.
        :param source: The source of this ContaineranalysisGoogleDevtoolsCloudbuildV1Build.
        :param source_provenance: The source_provenance of this ContaineranalysisGoogleDevtoolsCloudbuildV1Build.
        :param start_time: The start_time of this ContaineranalysisGoogleDevtoolsCloudbuildV1Build.
        :param status: The status of this ContaineranalysisGoogleDevtoolsCloudbuildV1Build.
        :param status_detail: The status_detail of this ContaineranalysisGoogleDevtoolsCloudbuildV1Build.
        :param steps: The steps of this ContaineranalysisGoogleDevtoolsCloudbuildV1Build.
        :param substitutions: The substitutions of this ContaineranalysisGoogleDevtoolsCloudbuildV1Build.
        :param tags: The tags of this ContaineranalysisGoogleDevtoolsCloudbuildV1Build.
        :param timeout: The timeout of this ContaineranalysisGoogleDevtoolsCloudbuildV1Build.
        :param timing: The timing of this ContaineranalysisGoogleDevtoolsCloudbuildV1Build.
        :param warnings: The warnings of this ContaineranalysisGoogleDevtoolsCloudbuildV1Build.
        """
        self.openapi_types = {
            'approval': ContaineranalysisGoogleDevtoolsCloudbuildV1BuildApproval,
            'artifacts': ContaineranalysisGoogleDevtoolsCloudbuildV1Artifacts,
            'available_secrets': ContaineranalysisGoogleDevtoolsCloudbuildV1Secrets,
            'build_trigger_id': str,
            'create_time': str,
            'failure_info': ContaineranalysisGoogleDevtoolsCloudbuildV1BuildFailureInfo,
            'finish_time': str,
            'id': str,
            'images': List[str],
            'log_url': str,
            'logs_bucket': str,
            'name': str,
            'options': ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions,
            'project_id': str,
            'queue_ttl': str,
            'results': ContaineranalysisGoogleDevtoolsCloudbuildV1Results,
            'secrets': List[ContaineranalysisGoogleDevtoolsCloudbuildV1Secret],
            'service_account': str,
            'source': ContaineranalysisGoogleDevtoolsCloudbuildV1Source,
            'source_provenance': ContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance,
            'start_time': str,
            'status': str,
            'status_detail': str,
            'steps': List[ContaineranalysisGoogleDevtoolsCloudbuildV1BuildStep],
            'substitutions': Dict[str, str],
            'tags': List[str],
            'timeout': str,
            'timing': Dict[str, ContaineranalysisGoogleDevtoolsCloudbuildV1TimeSpan],
            'warnings': List[ContaineranalysisGoogleDevtoolsCloudbuildV1BuildWarning]
        }

        self.attribute_map = {
            'approval': 'approval',
            'artifacts': 'artifacts',
            'available_secrets': 'availableSecrets',
            'build_trigger_id': 'buildTriggerId',
            'create_time': 'createTime',
            'failure_info': 'failureInfo',
            'finish_time': 'finishTime',
            'id': 'id',
            'images': 'images',
            'log_url': 'logUrl',
            'logs_bucket': 'logsBucket',
            'name': 'name',
            'options': 'options',
            'project_id': 'projectId',
            'queue_ttl': 'queueTtl',
            'results': 'results',
            'secrets': 'secrets',
            'service_account': 'serviceAccount',
            'source': 'source',
            'source_provenance': 'sourceProvenance',
            'start_time': 'startTime',
            'status': 'status',
            'status_detail': 'statusDetail',
            'steps': 'steps',
            'substitutions': 'substitutions',
            'tags': 'tags',
            'timeout': 'timeout',
            'timing': 'timing',
            'warnings': 'warnings'
        }

        self._approval = approval
        self._artifacts = artifacts
        self._available_secrets = available_secrets
        self._build_trigger_id = build_trigger_id
        self._create_time = create_time
        self._failure_info = failure_info
        self._finish_time = finish_time
        self._id = id
        self._images = images
        self._log_url = log_url
        self._logs_bucket = logs_bucket
        self._name = name
        self._options = options
        self._project_id = project_id
        self._queue_ttl = queue_ttl
        self._results = results
        self._secrets = secrets
        self._service_account = service_account
        self._source = source
        self._source_provenance = source_provenance
        self._start_time = start_time
        self._status = status
        self._status_detail = status_detail
        self._steps = steps
        self._substitutions = substitutions
        self._tags = tags
        self._timeout = timeout
        self._timing = timing
        self._warnings = warnings

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ContaineranalysisGoogleDevtoolsCloudbuildV1Build':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ContaineranalysisGoogleDevtoolsCloudbuildV1Build of this ContaineranalysisGoogleDevtoolsCloudbuildV1Build.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def approval(self):
        """Gets the approval of this ContaineranalysisGoogleDevtoolsCloudbuildV1Build.


        :return: The approval of this ContaineranalysisGoogleDevtoolsCloudbuildV1Build.
        :rtype: ContaineranalysisGoogleDevtoolsCloudbuildV1BuildApproval
        """
        return self._approval

    @approval.setter
    def approval(self, approval):
        """Sets the approval of this ContaineranalysisGoogleDevtoolsCloudbuildV1Build.


        :param approval: The approval of this ContaineranalysisGoogleDevtoolsCloudbuildV1Build.
        :type approval: ContaineranalysisGoogleDevtoolsCloudbuildV1BuildApproval
        """

        self._approval = approval

    @property
    def artifacts(self):
        """Gets the artifacts of this ContaineranalysisGoogleDevtoolsCloudbuildV1Build.


        :return: The artifacts of this ContaineranalysisGoogleDevtoolsCloudbuildV1Build.
        :rtype: ContaineranalysisGoogleDevtoolsCloudbuildV1Artifacts
        """
        return self._artifacts

    @artifacts.setter
    def artifacts(self, artifacts):
        """Sets the artifacts of this ContaineranalysisGoogleDevtoolsCloudbuildV1Build.


        :param artifacts: The artifacts of this ContaineranalysisGoogleDevtoolsCloudbuildV1Build.
        :type artifacts: ContaineranalysisGoogleDevtoolsCloudbuildV1Artifacts
        """

        self._artifacts = artifacts

    @property
    def available_secrets(self):
        """Gets the available_secrets of this ContaineranalysisGoogleDevtoolsCloudbuildV1Build.


        :return: The available_secrets of this ContaineranalysisGoogleDevtoolsCloudbuildV1Build.
        :rtype: ContaineranalysisGoogleDevtoolsCloudbuildV1Secrets
        """
        return self._available_secrets

    @available_secrets.setter
    def available_secrets(self, available_secrets):
        """Sets the available_secrets of this ContaineranalysisGoogleDevtoolsCloudbuildV1Build.


        :param available_secrets: The available_secrets of this ContaineranalysisGoogleDevtoolsCloudbuildV1Build.
        :type available_secrets: ContaineranalysisGoogleDevtoolsCloudbuildV1Secrets
        """

        self._available_secrets = available_secrets

    @property
    def build_trigger_id(self):
        """Gets the build_trigger_id of this ContaineranalysisGoogleDevtoolsCloudbuildV1Build.

        Output only. The ID of the `BuildTrigger` that triggered this build, if it was triggered automatically.

        :return: The build_trigger_id of this ContaineranalysisGoogleDevtoolsCloudbuildV1Build.
        :rtype: str
        """
        return self._build_trigger_id

    @build_trigger_id.setter
    def build_trigger_id(self, build_trigger_id):
        """Sets the build_trigger_id of this ContaineranalysisGoogleDevtoolsCloudbuildV1Build.

        Output only. The ID of the `BuildTrigger` that triggered this build, if it was triggered automatically.

        :param build_trigger_id: The build_trigger_id of this ContaineranalysisGoogleDevtoolsCloudbuildV1Build.
        :type build_trigger_id: str
        """

        self._build_trigger_id = build_trigger_id

    @property
    def create_time(self):
        """Gets the create_time of this ContaineranalysisGoogleDevtoolsCloudbuildV1Build.

        Output only. Time at which the request to create the build was received.

        :return: The create_time of this ContaineranalysisGoogleDevtoolsCloudbuildV1Build.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this ContaineranalysisGoogleDevtoolsCloudbuildV1Build.

        Output only. Time at which the request to create the build was received.

        :param create_time: The create_time of this ContaineranalysisGoogleDevtoolsCloudbuildV1Build.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def failure_info(self):
        """Gets the failure_info of this ContaineranalysisGoogleDevtoolsCloudbuildV1Build.


        :return: The failure_info of this ContaineranalysisGoogleDevtoolsCloudbuildV1Build.
        :rtype: ContaineranalysisGoogleDevtoolsCloudbuildV1BuildFailureInfo
        """
        return self._failure_info

    @failure_info.setter
    def failure_info(self, failure_info):
        """Sets the failure_info of this ContaineranalysisGoogleDevtoolsCloudbuildV1Build.


        :param failure_info: The failure_info of this ContaineranalysisGoogleDevtoolsCloudbuildV1Build.
        :type failure_info: ContaineranalysisGoogleDevtoolsCloudbuildV1BuildFailureInfo
        """

        self._failure_info = failure_info

    @property
    def finish_time(self):
        """Gets the finish_time of this ContaineranalysisGoogleDevtoolsCloudbuildV1Build.

        Output only. Time at which execution of the build was finished. The difference between finish_time and start_time is the duration of the build's execution.

        :return: The finish_time of this ContaineranalysisGoogleDevtoolsCloudbuildV1Build.
        :rtype: str
        """
        return self._finish_time

    @finish_time.setter
    def finish_time(self, finish_time):
        """Sets the finish_time of this ContaineranalysisGoogleDevtoolsCloudbuildV1Build.

        Output only. Time at which execution of the build was finished. The difference between finish_time and start_time is the duration of the build's execution.

        :param finish_time: The finish_time of this ContaineranalysisGoogleDevtoolsCloudbuildV1Build.
        :type finish_time: str
        """

        self._finish_time = finish_time

    @property
    def id(self):
        """Gets the id of this ContaineranalysisGoogleDevtoolsCloudbuildV1Build.

        Output only. Unique identifier of the build.

        :return: The id of this ContaineranalysisGoogleDevtoolsCloudbuildV1Build.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ContaineranalysisGoogleDevtoolsCloudbuildV1Build.

        Output only. Unique identifier of the build.

        :param id: The id of this ContaineranalysisGoogleDevtoolsCloudbuildV1Build.
        :type id: str
        """

        self._id = id

    @property
    def images(self):
        """Gets the images of this ContaineranalysisGoogleDevtoolsCloudbuildV1Build.

        A list of images to be pushed upon the successful completion of all build steps. The images are pushed using the builder service account's credentials. The digests of the pushed images will be stored in the `Build` resource's results field. If any of the images fail to be pushed, the build status is marked `FAILURE`.

        :return: The images of this ContaineranalysisGoogleDevtoolsCloudbuildV1Build.
        :rtype: List[str]
        """
        return self._images

    @images.setter
    def images(self, images):
        """Sets the images of this ContaineranalysisGoogleDevtoolsCloudbuildV1Build.

        A list of images to be pushed upon the successful completion of all build steps. The images are pushed using the builder service account's credentials. The digests of the pushed images will be stored in the `Build` resource's results field. If any of the images fail to be pushed, the build status is marked `FAILURE`.

        :param images: The images of this ContaineranalysisGoogleDevtoolsCloudbuildV1Build.
        :type images: List[str]
        """

        self._images = images

    @property
    def log_url(self):
        """Gets the log_url of this ContaineranalysisGoogleDevtoolsCloudbuildV1Build.

        Output only. URL to logs for this build in Google Cloud Console.

        :return: The log_url of this ContaineranalysisGoogleDevtoolsCloudbuildV1Build.
        :rtype: str
        """
        return self._log_url

    @log_url.setter
    def log_url(self, log_url):
        """Sets the log_url of this ContaineranalysisGoogleDevtoolsCloudbuildV1Build.

        Output only. URL to logs for this build in Google Cloud Console.

        :param log_url: The log_url of this ContaineranalysisGoogleDevtoolsCloudbuildV1Build.
        :type log_url: str
        """

        self._log_url = log_url

    @property
    def logs_bucket(self):
        """Gets the logs_bucket of this ContaineranalysisGoogleDevtoolsCloudbuildV1Build.

        Cloud Storage bucket where logs should be written (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)). Logs file names will be of the format `${logs_bucket}/log-${build_id}.txt`.

        :return: The logs_bucket of this ContaineranalysisGoogleDevtoolsCloudbuildV1Build.
        :rtype: str
        """
        return self._logs_bucket

    @logs_bucket.setter
    def logs_bucket(self, logs_bucket):
        """Sets the logs_bucket of this ContaineranalysisGoogleDevtoolsCloudbuildV1Build.

        Cloud Storage bucket where logs should be written (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)). Logs file names will be of the format `${logs_bucket}/log-${build_id}.txt`.

        :param logs_bucket: The logs_bucket of this ContaineranalysisGoogleDevtoolsCloudbuildV1Build.
        :type logs_bucket: str
        """

        self._logs_bucket = logs_bucket

    @property
    def name(self):
        """Gets the name of this ContaineranalysisGoogleDevtoolsCloudbuildV1Build.

        Output only. The 'Build' name with format: `projects/{project}/locations/{location}/builds/{build}`, where {build} is a unique identifier generated by the service.

        :return: The name of this ContaineranalysisGoogleDevtoolsCloudbuildV1Build.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ContaineranalysisGoogleDevtoolsCloudbuildV1Build.

        Output only. The 'Build' name with format: `projects/{project}/locations/{location}/builds/{build}`, where {build} is a unique identifier generated by the service.

        :param name: The name of this ContaineranalysisGoogleDevtoolsCloudbuildV1Build.
        :type name: str
        """

        self._name = name

    @property
    def options(self):
        """Gets the options of this ContaineranalysisGoogleDevtoolsCloudbuildV1Build.


        :return: The options of this ContaineranalysisGoogleDevtoolsCloudbuildV1Build.
        :rtype: ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this ContaineranalysisGoogleDevtoolsCloudbuildV1Build.


        :param options: The options of this ContaineranalysisGoogleDevtoolsCloudbuildV1Build.
        :type options: ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions
        """

        self._options = options

    @property
    def project_id(self):
        """Gets the project_id of this ContaineranalysisGoogleDevtoolsCloudbuildV1Build.

        Output only. ID of the project.

        :return: The project_id of this ContaineranalysisGoogleDevtoolsCloudbuildV1Build.
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this ContaineranalysisGoogleDevtoolsCloudbuildV1Build.

        Output only. ID of the project.

        :param project_id: The project_id of this ContaineranalysisGoogleDevtoolsCloudbuildV1Build.
        :type project_id: str
        """

        self._project_id = project_id

    @property
    def queue_ttl(self):
        """Gets the queue_ttl of this ContaineranalysisGoogleDevtoolsCloudbuildV1Build.

        TTL in queue for this build. If provided and the build is enqueued longer than this value, the build will expire and the build status will be `EXPIRED`. The TTL starts ticking from create_time.

        :return: The queue_ttl of this ContaineranalysisGoogleDevtoolsCloudbuildV1Build.
        :rtype: str
        """
        return self._queue_ttl

    @queue_ttl.setter
    def queue_ttl(self, queue_ttl):
        """Sets the queue_ttl of this ContaineranalysisGoogleDevtoolsCloudbuildV1Build.

        TTL in queue for this build. If provided and the build is enqueued longer than this value, the build will expire and the build status will be `EXPIRED`. The TTL starts ticking from create_time.

        :param queue_ttl: The queue_ttl of this ContaineranalysisGoogleDevtoolsCloudbuildV1Build.
        :type queue_ttl: str
        """

        self._queue_ttl = queue_ttl

    @property
    def results(self):
        """Gets the results of this ContaineranalysisGoogleDevtoolsCloudbuildV1Build.


        :return: The results of this ContaineranalysisGoogleDevtoolsCloudbuildV1Build.
        :rtype: ContaineranalysisGoogleDevtoolsCloudbuildV1Results
        """
        return self._results

    @results.setter
    def results(self, results):
        """Sets the results of this ContaineranalysisGoogleDevtoolsCloudbuildV1Build.


        :param results: The results of this ContaineranalysisGoogleDevtoolsCloudbuildV1Build.
        :type results: ContaineranalysisGoogleDevtoolsCloudbuildV1Results
        """

        self._results = results

    @property
    def secrets(self):
        """Gets the secrets of this ContaineranalysisGoogleDevtoolsCloudbuildV1Build.

        Secrets to decrypt using Cloud Key Management Service. Note: Secret Manager is the recommended technique for managing sensitive data with Cloud Build. Use `available_secrets` to configure builds to access secrets from Secret Manager. For instructions, see: https://cloud.google.com/cloud-build/docs/securing-builds/use-secrets

        :return: The secrets of this ContaineranalysisGoogleDevtoolsCloudbuildV1Build.
        :rtype: List[ContaineranalysisGoogleDevtoolsCloudbuildV1Secret]
        """
        return self._secrets

    @secrets.setter
    def secrets(self, secrets):
        """Sets the secrets of this ContaineranalysisGoogleDevtoolsCloudbuildV1Build.

        Secrets to decrypt using Cloud Key Management Service. Note: Secret Manager is the recommended technique for managing sensitive data with Cloud Build. Use `available_secrets` to configure builds to access secrets from Secret Manager. For instructions, see: https://cloud.google.com/cloud-build/docs/securing-builds/use-secrets

        :param secrets: The secrets of this ContaineranalysisGoogleDevtoolsCloudbuildV1Build.
        :type secrets: List[ContaineranalysisGoogleDevtoolsCloudbuildV1Secret]
        """

        self._secrets = secrets

    @property
    def service_account(self):
        """Gets the service_account of this ContaineranalysisGoogleDevtoolsCloudbuildV1Build.

        IAM service account whose credentials will be used at build runtime. Must be of the format `projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT}`. ACCOUNT can be email address or uniqueId of the service account. 

        :return: The service_account of this ContaineranalysisGoogleDevtoolsCloudbuildV1Build.
        :rtype: str
        """
        return self._service_account

    @service_account.setter
    def service_account(self, service_account):
        """Sets the service_account of this ContaineranalysisGoogleDevtoolsCloudbuildV1Build.

        IAM service account whose credentials will be used at build runtime. Must be of the format `projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT}`. ACCOUNT can be email address or uniqueId of the service account. 

        :param service_account: The service_account of this ContaineranalysisGoogleDevtoolsCloudbuildV1Build.
        :type service_account: str
        """

        self._service_account = service_account

    @property
    def source(self):
        """Gets the source of this ContaineranalysisGoogleDevtoolsCloudbuildV1Build.


        :return: The source of this ContaineranalysisGoogleDevtoolsCloudbuildV1Build.
        :rtype: ContaineranalysisGoogleDevtoolsCloudbuildV1Source
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this ContaineranalysisGoogleDevtoolsCloudbuildV1Build.


        :param source: The source of this ContaineranalysisGoogleDevtoolsCloudbuildV1Build.
        :type source: ContaineranalysisGoogleDevtoolsCloudbuildV1Source
        """

        self._source = source

    @property
    def source_provenance(self):
        """Gets the source_provenance of this ContaineranalysisGoogleDevtoolsCloudbuildV1Build.


        :return: The source_provenance of this ContaineranalysisGoogleDevtoolsCloudbuildV1Build.
        :rtype: ContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance
        """
        return self._source_provenance

    @source_provenance.setter
    def source_provenance(self, source_provenance):
        """Sets the source_provenance of this ContaineranalysisGoogleDevtoolsCloudbuildV1Build.


        :param source_provenance: The source_provenance of this ContaineranalysisGoogleDevtoolsCloudbuildV1Build.
        :type source_provenance: ContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance
        """

        self._source_provenance = source_provenance

    @property
    def start_time(self):
        """Gets the start_time of this ContaineranalysisGoogleDevtoolsCloudbuildV1Build.

        Output only. Time at which execution of the build was started.

        :return: The start_time of this ContaineranalysisGoogleDevtoolsCloudbuildV1Build.
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this ContaineranalysisGoogleDevtoolsCloudbuildV1Build.

        Output only. Time at which execution of the build was started.

        :param start_time: The start_time of this ContaineranalysisGoogleDevtoolsCloudbuildV1Build.
        :type start_time: str
        """

        self._start_time = start_time

    @property
    def status(self):
        """Gets the status of this ContaineranalysisGoogleDevtoolsCloudbuildV1Build.

        Output only. Status of the build.

        :return: The status of this ContaineranalysisGoogleDevtoolsCloudbuildV1Build.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ContaineranalysisGoogleDevtoolsCloudbuildV1Build.

        Output only. Status of the build.

        :param status: The status of this ContaineranalysisGoogleDevtoolsCloudbuildV1Build.
        :type status: str
        """
        allowed_values = ["STATUS_UNKNOWN", "PENDING", "QUEUED", "WORKING", "SUCCESS", "FAILURE", "INTERNAL_ERROR", "TIMEOUT", "CANCELLED", "EXPIRED"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def status_detail(self):
        """Gets the status_detail of this ContaineranalysisGoogleDevtoolsCloudbuildV1Build.

        Output only. Customer-readable message about the current status.

        :return: The status_detail of this ContaineranalysisGoogleDevtoolsCloudbuildV1Build.
        :rtype: str
        """
        return self._status_detail

    @status_detail.setter
    def status_detail(self, status_detail):
        """Sets the status_detail of this ContaineranalysisGoogleDevtoolsCloudbuildV1Build.

        Output only. Customer-readable message about the current status.

        :param status_detail: The status_detail of this ContaineranalysisGoogleDevtoolsCloudbuildV1Build.
        :type status_detail: str
        """

        self._status_detail = status_detail

    @property
    def steps(self):
        """Gets the steps of this ContaineranalysisGoogleDevtoolsCloudbuildV1Build.

        Required. The operations to be performed on the workspace.

        :return: The steps of this ContaineranalysisGoogleDevtoolsCloudbuildV1Build.
        :rtype: List[ContaineranalysisGoogleDevtoolsCloudbuildV1BuildStep]
        """
        return self._steps

    @steps.setter
    def steps(self, steps):
        """Sets the steps of this ContaineranalysisGoogleDevtoolsCloudbuildV1Build.

        Required. The operations to be performed on the workspace.

        :param steps: The steps of this ContaineranalysisGoogleDevtoolsCloudbuildV1Build.
        :type steps: List[ContaineranalysisGoogleDevtoolsCloudbuildV1BuildStep]
        """

        self._steps = steps

    @property
    def substitutions(self):
        """Gets the substitutions of this ContaineranalysisGoogleDevtoolsCloudbuildV1Build.

        Substitutions data for `Build` resource.

        :return: The substitutions of this ContaineranalysisGoogleDevtoolsCloudbuildV1Build.
        :rtype: Dict[str, str]
        """
        return self._substitutions

    @substitutions.setter
    def substitutions(self, substitutions):
        """Sets the substitutions of this ContaineranalysisGoogleDevtoolsCloudbuildV1Build.

        Substitutions data for `Build` resource.

        :param substitutions: The substitutions of this ContaineranalysisGoogleDevtoolsCloudbuildV1Build.
        :type substitutions: Dict[str, str]
        """

        self._substitutions = substitutions

    @property
    def tags(self):
        """Gets the tags of this ContaineranalysisGoogleDevtoolsCloudbuildV1Build.

        Tags for annotation of a `Build`. These are not docker tags.

        :return: The tags of this ContaineranalysisGoogleDevtoolsCloudbuildV1Build.
        :rtype: List[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this ContaineranalysisGoogleDevtoolsCloudbuildV1Build.

        Tags for annotation of a `Build`. These are not docker tags.

        :param tags: The tags of this ContaineranalysisGoogleDevtoolsCloudbuildV1Build.
        :type tags: List[str]
        """

        self._tags = tags

    @property
    def timeout(self):
        """Gets the timeout of this ContaineranalysisGoogleDevtoolsCloudbuildV1Build.

        Amount of time that this build should be allowed to run, to second granularity. If this amount of time elapses, work on the build will cease and the build status will be `TIMEOUT`. `timeout` starts ticking from `startTime`. Default time is 60 minutes.

        :return: The timeout of this ContaineranalysisGoogleDevtoolsCloudbuildV1Build.
        :rtype: str
        """
        return self._timeout

    @timeout.setter
    def timeout(self, timeout):
        """Sets the timeout of this ContaineranalysisGoogleDevtoolsCloudbuildV1Build.

        Amount of time that this build should be allowed to run, to second granularity. If this amount of time elapses, work on the build will cease and the build status will be `TIMEOUT`. `timeout` starts ticking from `startTime`. Default time is 60 minutes.

        :param timeout: The timeout of this ContaineranalysisGoogleDevtoolsCloudbuildV1Build.
        :type timeout: str
        """

        self._timeout = timeout

    @property
    def timing(self):
        """Gets the timing of this ContaineranalysisGoogleDevtoolsCloudbuildV1Build.

        Output only. Stores timing information for phases of the build. Valid keys are: * BUILD: time to execute all build steps. * PUSH: time to push all artifacts including docker images and non docker artifacts. * FETCHSOURCE: time to fetch source. * SETUPBUILD: time to set up build. If the build does not specify source or images, these keys will not be included.

        :return: The timing of this ContaineranalysisGoogleDevtoolsCloudbuildV1Build.
        :rtype: Dict[str, ContaineranalysisGoogleDevtoolsCloudbuildV1TimeSpan]
        """
        return self._timing

    @timing.setter
    def timing(self, timing):
        """Sets the timing of this ContaineranalysisGoogleDevtoolsCloudbuildV1Build.

        Output only. Stores timing information for phases of the build. Valid keys are: * BUILD: time to execute all build steps. * PUSH: time to push all artifacts including docker images and non docker artifacts. * FETCHSOURCE: time to fetch source. * SETUPBUILD: time to set up build. If the build does not specify source or images, these keys will not be included.

        :param timing: The timing of this ContaineranalysisGoogleDevtoolsCloudbuildV1Build.
        :type timing: Dict[str, ContaineranalysisGoogleDevtoolsCloudbuildV1TimeSpan]
        """

        self._timing = timing

    @property
    def warnings(self):
        """Gets the warnings of this ContaineranalysisGoogleDevtoolsCloudbuildV1Build.

        Output only. Non-fatal problems encountered during the execution of the build.

        :return: The warnings of this ContaineranalysisGoogleDevtoolsCloudbuildV1Build.
        :rtype: List[ContaineranalysisGoogleDevtoolsCloudbuildV1BuildWarning]
        """
        return self._warnings

    @warnings.setter
    def warnings(self, warnings):
        """Sets the warnings of this ContaineranalysisGoogleDevtoolsCloudbuildV1Build.

        Output only. Non-fatal problems encountered during the execution of the build.

        :param warnings: The warnings of this ContaineranalysisGoogleDevtoolsCloudbuildV1Build.
        :type warnings: List[ContaineranalysisGoogleDevtoolsCloudbuildV1BuildWarning]
        """

        self._warnings = warnings
