# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Discovery(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, analysis_kind: str=None):
        """Discovery - a model defined in OpenAPI

        :param analysis_kind: The analysis_kind of this Discovery.
        """
        self.openapi_types = {
            'analysis_kind': str
        }

        self.attribute_map = {
            'analysis_kind': 'analysisKind'
        }

        self._analysis_kind = analysis_kind

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Discovery':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Discovery of this Discovery.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def analysis_kind(self):
        """Gets the analysis_kind of this Discovery.

        Required. Immutable. The kind of analysis that is handled by this discovery.

        :return: The analysis_kind of this Discovery.
        :rtype: str
        """
        return self._analysis_kind

    @analysis_kind.setter
    def analysis_kind(self, analysis_kind):
        """Sets the analysis_kind of this Discovery.

        Required. Immutable. The kind of analysis that is handled by this discovery.

        :param analysis_kind: The analysis_kind of this Discovery.
        :type analysis_kind: str
        """
        allowed_values = ["NOTE_KIND_UNSPECIFIED", "VULNERABILITY", "BUILD", "IMAGE", "PACKAGE", "DEPLOYMENT", "DISCOVERY", "ATTESTATION", "INTOTO", "SBOM", "SPDX_PACKAGE", "SPDX_FILE", "SPDX_RELATIONSHIP", "VULNERABILITY_ASSESSMENT", "SBOM_REFERENCE"]  # noqa: E501
        if analysis_kind not in allowed_values:
            raise ValueError(
                "Invalid value for `analysis_kind` ({0}), must be one of {1}"
                .format(analysis_kind, allowed_values)
            )

        self._analysis_kind = analysis_kind
