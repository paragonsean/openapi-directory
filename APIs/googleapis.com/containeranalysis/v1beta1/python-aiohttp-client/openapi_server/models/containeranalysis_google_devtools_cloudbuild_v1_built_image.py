# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.containeranalysis_google_devtools_cloudbuild_v1_time_span import ContaineranalysisGoogleDevtoolsCloudbuildV1TimeSpan
from openapi_server import util


class ContaineranalysisGoogleDevtoolsCloudbuildV1BuiltImage(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, digest: str=None, name: str=None, push_timing: ContaineranalysisGoogleDevtoolsCloudbuildV1TimeSpan=None):
        """ContaineranalysisGoogleDevtoolsCloudbuildV1BuiltImage - a model defined in OpenAPI

        :param digest: The digest of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuiltImage.
        :param name: The name of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuiltImage.
        :param push_timing: The push_timing of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuiltImage.
        """
        self.openapi_types = {
            'digest': str,
            'name': str,
            'push_timing': ContaineranalysisGoogleDevtoolsCloudbuildV1TimeSpan
        }

        self.attribute_map = {
            'digest': 'digest',
            'name': 'name',
            'push_timing': 'pushTiming'
        }

        self._digest = digest
        self._name = name
        self._push_timing = push_timing

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ContaineranalysisGoogleDevtoolsCloudbuildV1BuiltImage':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ContaineranalysisGoogleDevtoolsCloudbuildV1BuiltImage of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuiltImage.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def digest(self):
        """Gets the digest of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuiltImage.

        Docker Registry 2.0 digest.

        :return: The digest of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuiltImage.
        :rtype: str
        """
        return self._digest

    @digest.setter
    def digest(self, digest):
        """Sets the digest of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuiltImage.

        Docker Registry 2.0 digest.

        :param digest: The digest of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuiltImage.
        :type digest: str
        """

        self._digest = digest

    @property
    def name(self):
        """Gets the name of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuiltImage.

        Name used to push the container image to Google Container Registry, as presented to `docker push`.

        :return: The name of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuiltImage.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuiltImage.

        Name used to push the container image to Google Container Registry, as presented to `docker push`.

        :param name: The name of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuiltImage.
        :type name: str
        """

        self._name = name

    @property
    def push_timing(self):
        """Gets the push_timing of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuiltImage.


        :return: The push_timing of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuiltImage.
        :rtype: ContaineranalysisGoogleDevtoolsCloudbuildV1TimeSpan
        """
        return self._push_timing

    @push_timing.setter
    def push_timing(self, push_timing):
        """Sets the push_timing of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuiltImage.


        :param push_timing: The push_timing of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuiltImage.
        :type push_timing: ContaineranalysisGoogleDevtoolsCloudbuildV1TimeSpan
        """

        self._push_timing = push_timing
