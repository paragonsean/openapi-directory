# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.vulnerability_location import VulnerabilityLocation
from openapi_server import util


class PackageIssue(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, affected_location: VulnerabilityLocation=None, effective_severity: str=None, fixed_location: VulnerabilityLocation=None, package_type: str=None, severity_name: str=None):
        """PackageIssue - a model defined in OpenAPI

        :param affected_location: The affected_location of this PackageIssue.
        :param effective_severity: The effective_severity of this PackageIssue.
        :param fixed_location: The fixed_location of this PackageIssue.
        :param package_type: The package_type of this PackageIssue.
        :param severity_name: The severity_name of this PackageIssue.
        """
        self.openapi_types = {
            'affected_location': VulnerabilityLocation,
            'effective_severity': str,
            'fixed_location': VulnerabilityLocation,
            'package_type': str,
            'severity_name': str
        }

        self.attribute_map = {
            'affected_location': 'affectedLocation',
            'effective_severity': 'effectiveSeverity',
            'fixed_location': 'fixedLocation',
            'package_type': 'packageType',
            'severity_name': 'severityName'
        }

        self._affected_location = affected_location
        self._effective_severity = effective_severity
        self._fixed_location = fixed_location
        self._package_type = package_type
        self._severity_name = severity_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PackageIssue':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PackageIssue of this PackageIssue.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def affected_location(self):
        """Gets the affected_location of this PackageIssue.


        :return: The affected_location of this PackageIssue.
        :rtype: VulnerabilityLocation
        """
        return self._affected_location

    @affected_location.setter
    def affected_location(self, affected_location):
        """Sets the affected_location of this PackageIssue.


        :param affected_location: The affected_location of this PackageIssue.
        :type affected_location: VulnerabilityLocation
        """

        self._affected_location = affected_location

    @property
    def effective_severity(self):
        """Gets the effective_severity of this PackageIssue.

        Output only. The distro or language system assigned severity for this vulnerability when that is available and note provider assigned severity when it is not available.

        :return: The effective_severity of this PackageIssue.
        :rtype: str
        """
        return self._effective_severity

    @effective_severity.setter
    def effective_severity(self, effective_severity):
        """Sets the effective_severity of this PackageIssue.

        Output only. The distro or language system assigned severity for this vulnerability when that is available and note provider assigned severity when it is not available.

        :param effective_severity: The effective_severity of this PackageIssue.
        :type effective_severity: str
        """
        allowed_values = ["SEVERITY_UNSPECIFIED", "MINIMAL", "LOW", "MEDIUM", "HIGH", "CRITICAL"]  # noqa: E501
        if effective_severity not in allowed_values:
            raise ValueError(
                "Invalid value for `effective_severity` ({0}), must be one of {1}"
                .format(effective_severity, allowed_values)
            )

        self._effective_severity = effective_severity

    @property
    def fixed_location(self):
        """Gets the fixed_location of this PackageIssue.


        :return: The fixed_location of this PackageIssue.
        :rtype: VulnerabilityLocation
        """
        return self._fixed_location

    @fixed_location.setter
    def fixed_location(self, fixed_location):
        """Sets the fixed_location of this PackageIssue.


        :param fixed_location: The fixed_location of this PackageIssue.
        :type fixed_location: VulnerabilityLocation
        """

        self._fixed_location = fixed_location

    @property
    def package_type(self):
        """Gets the package_type of this PackageIssue.

        The type of package (e.g. OS, MAVEN, GO).

        :return: The package_type of this PackageIssue.
        :rtype: str
        """
        return self._package_type

    @package_type.setter
    def package_type(self, package_type):
        """Sets the package_type of this PackageIssue.

        The type of package (e.g. OS, MAVEN, GO).

        :param package_type: The package_type of this PackageIssue.
        :type package_type: str
        """

        self._package_type = package_type

    @property
    def severity_name(self):
        """Gets the severity_name of this PackageIssue.

        Deprecated, use Details.effective_severity instead The severity (e.g., distro assigned severity) for this vulnerability.

        :return: The severity_name of this PackageIssue.
        :rtype: str
        """
        return self._severity_name

    @severity_name.setter
    def severity_name(self, severity_name):
        """Sets the severity_name of this PackageIssue.

        Deprecated, use Details.effective_severity instead The severity (e.g., distro assigned severity) for this vulnerability.

        :param severity_name: The severity_name of this PackageIssue.
        :type severity_name: str
        """

        self._severity_name = severity_name
