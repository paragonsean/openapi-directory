# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.license import License
from openapi_server import util


class PackageInfoOccurrence(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, comment: str=None, filename: str=None, home_page: str=None, id: str=None, license_concluded: License=None, package_type: str=None, source_info: str=None, summary_description: str=None, title: str=None, version: str=None):
        """PackageInfoOccurrence - a model defined in OpenAPI

        :param comment: The comment of this PackageInfoOccurrence.
        :param filename: The filename of this PackageInfoOccurrence.
        :param home_page: The home_page of this PackageInfoOccurrence.
        :param id: The id of this PackageInfoOccurrence.
        :param license_concluded: The license_concluded of this PackageInfoOccurrence.
        :param package_type: The package_type of this PackageInfoOccurrence.
        :param source_info: The source_info of this PackageInfoOccurrence.
        :param summary_description: The summary_description of this PackageInfoOccurrence.
        :param title: The title of this PackageInfoOccurrence.
        :param version: The version of this PackageInfoOccurrence.
        """
        self.openapi_types = {
            'comment': str,
            'filename': str,
            'home_page': str,
            'id': str,
            'license_concluded': License,
            'package_type': str,
            'source_info': str,
            'summary_description': str,
            'title': str,
            'version': str
        }

        self.attribute_map = {
            'comment': 'comment',
            'filename': 'filename',
            'home_page': 'homePage',
            'id': 'id',
            'license_concluded': 'licenseConcluded',
            'package_type': 'packageType',
            'source_info': 'sourceInfo',
            'summary_description': 'summaryDescription',
            'title': 'title',
            'version': 'version'
        }

        self._comment = comment
        self._filename = filename
        self._home_page = home_page
        self._id = id
        self._license_concluded = license_concluded
        self._package_type = package_type
        self._source_info = source_info
        self._summary_description = summary_description
        self._title = title
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PackageInfoOccurrence':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PackageInfoOccurrence of this PackageInfoOccurrence.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def comment(self):
        """Gets the comment of this PackageInfoOccurrence.

        A place for the SPDX file creator to record any general comments about the package being described

        :return: The comment of this PackageInfoOccurrence.
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this PackageInfoOccurrence.

        A place for the SPDX file creator to record any general comments about the package being described

        :param comment: The comment of this PackageInfoOccurrence.
        :type comment: str
        """

        self._comment = comment

    @property
    def filename(self):
        """Gets the filename of this PackageInfoOccurrence.

        Provide the actual file name of the package, or path of the directory being treated as a package

        :return: The filename of this PackageInfoOccurrence.
        :rtype: str
        """
        return self._filename

    @filename.setter
    def filename(self, filename):
        """Sets the filename of this PackageInfoOccurrence.

        Provide the actual file name of the package, or path of the directory being treated as a package

        :param filename: The filename of this PackageInfoOccurrence.
        :type filename: str
        """

        self._filename = filename

    @property
    def home_page(self):
        """Gets the home_page of this PackageInfoOccurrence.

        Output only. Provide a place for the SPDX file creator to record a web site that serves as the package's home page

        :return: The home_page of this PackageInfoOccurrence.
        :rtype: str
        """
        return self._home_page

    @home_page.setter
    def home_page(self, home_page):
        """Sets the home_page of this PackageInfoOccurrence.

        Output only. Provide a place for the SPDX file creator to record a web site that serves as the package's home page

        :param home_page: The home_page of this PackageInfoOccurrence.
        :type home_page: str
        """

        self._home_page = home_page

    @property
    def id(self):
        """Gets the id of this PackageInfoOccurrence.

        Uniquely identify any element in an SPDX document which may be referenced by other elements

        :return: The id of this PackageInfoOccurrence.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PackageInfoOccurrence.

        Uniquely identify any element in an SPDX document which may be referenced by other elements

        :param id: The id of this PackageInfoOccurrence.
        :type id: str
        """

        self._id = id

    @property
    def license_concluded(self):
        """Gets the license_concluded of this PackageInfoOccurrence.


        :return: The license_concluded of this PackageInfoOccurrence.
        :rtype: License
        """
        return self._license_concluded

    @license_concluded.setter
    def license_concluded(self, license_concluded):
        """Sets the license_concluded of this PackageInfoOccurrence.


        :param license_concluded: The license_concluded of this PackageInfoOccurrence.
        :type license_concluded: License
        """

        self._license_concluded = license_concluded

    @property
    def package_type(self):
        """Gets the package_type of this PackageInfoOccurrence.

        Output only. The type of package: OS, MAVEN, GO, GO_STDLIB, etc.

        :return: The package_type of this PackageInfoOccurrence.
        :rtype: str
        """
        return self._package_type

    @package_type.setter
    def package_type(self, package_type):
        """Sets the package_type of this PackageInfoOccurrence.

        Output only. The type of package: OS, MAVEN, GO, GO_STDLIB, etc.

        :param package_type: The package_type of this PackageInfoOccurrence.
        :type package_type: str
        """

        self._package_type = package_type

    @property
    def source_info(self):
        """Gets the source_info of this PackageInfoOccurrence.

        Provide a place for the SPDX file creator to record any relevant background information or additional comments about the origin of the package

        :return: The source_info of this PackageInfoOccurrence.
        :rtype: str
        """
        return self._source_info

    @source_info.setter
    def source_info(self, source_info):
        """Sets the source_info of this PackageInfoOccurrence.

        Provide a place for the SPDX file creator to record any relevant background information or additional comments about the origin of the package

        :param source_info: The source_info of this PackageInfoOccurrence.
        :type source_info: str
        """

        self._source_info = source_info

    @property
    def summary_description(self):
        """Gets the summary_description of this PackageInfoOccurrence.

        Output only. A short description of the package

        :return: The summary_description of this PackageInfoOccurrence.
        :rtype: str
        """
        return self._summary_description

    @summary_description.setter
    def summary_description(self, summary_description):
        """Sets the summary_description of this PackageInfoOccurrence.

        Output only. A short description of the package

        :param summary_description: The summary_description of this PackageInfoOccurrence.
        :type summary_description: str
        """

        self._summary_description = summary_description

    @property
    def title(self):
        """Gets the title of this PackageInfoOccurrence.

        Output only. Identify the full name of the package as given by the Package Originator

        :return: The title of this PackageInfoOccurrence.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this PackageInfoOccurrence.

        Output only. Identify the full name of the package as given by the Package Originator

        :param title: The title of this PackageInfoOccurrence.
        :type title: str
        """

        self._title = title

    @property
    def version(self):
        """Gets the version of this PackageInfoOccurrence.

        Output only. Identify the version of the package

        :return: The version of this PackageInfoOccurrence.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this PackageInfoOccurrence.

        Output only. Identify the version of the package

        :param version: The version of this PackageInfoOccurrence.
        :type version: str
        """

        self._version = version
