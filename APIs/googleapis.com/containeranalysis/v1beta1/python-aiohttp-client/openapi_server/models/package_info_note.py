# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.external_ref import ExternalRef
from openapi_server.models.license import License
from openapi_server import util


class PackageInfoNote(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, analyzed: bool=None, attribution: str=None, checksum: str=None, copyright: str=None, detailed_description: str=None, download_location: str=None, external_refs: List[ExternalRef]=None, files_license_info: List[str]=None, home_page: str=None, license_declared: License=None, originator: str=None, package_type: str=None, summary_description: str=None, supplier: str=None, title: str=None, verification_code: str=None, version: str=None):
        """PackageInfoNote - a model defined in OpenAPI

        :param analyzed: The analyzed of this PackageInfoNote.
        :param attribution: The attribution of this PackageInfoNote.
        :param checksum: The checksum of this PackageInfoNote.
        :param copyright: The copyright of this PackageInfoNote.
        :param detailed_description: The detailed_description of this PackageInfoNote.
        :param download_location: The download_location of this PackageInfoNote.
        :param external_refs: The external_refs of this PackageInfoNote.
        :param files_license_info: The files_license_info of this PackageInfoNote.
        :param home_page: The home_page of this PackageInfoNote.
        :param license_declared: The license_declared of this PackageInfoNote.
        :param originator: The originator of this PackageInfoNote.
        :param package_type: The package_type of this PackageInfoNote.
        :param summary_description: The summary_description of this PackageInfoNote.
        :param supplier: The supplier of this PackageInfoNote.
        :param title: The title of this PackageInfoNote.
        :param verification_code: The verification_code of this PackageInfoNote.
        :param version: The version of this PackageInfoNote.
        """
        self.openapi_types = {
            'analyzed': bool,
            'attribution': str,
            'checksum': str,
            'copyright': str,
            'detailed_description': str,
            'download_location': str,
            'external_refs': List[ExternalRef],
            'files_license_info': List[str],
            'home_page': str,
            'license_declared': License,
            'originator': str,
            'package_type': str,
            'summary_description': str,
            'supplier': str,
            'title': str,
            'verification_code': str,
            'version': str
        }

        self.attribute_map = {
            'analyzed': 'analyzed',
            'attribution': 'attribution',
            'checksum': 'checksum',
            'copyright': 'copyright',
            'detailed_description': 'detailedDescription',
            'download_location': 'downloadLocation',
            'external_refs': 'externalRefs',
            'files_license_info': 'filesLicenseInfo',
            'home_page': 'homePage',
            'license_declared': 'licenseDeclared',
            'originator': 'originator',
            'package_type': 'packageType',
            'summary_description': 'summaryDescription',
            'supplier': 'supplier',
            'title': 'title',
            'verification_code': 'verificationCode',
            'version': 'version'
        }

        self._analyzed = analyzed
        self._attribution = attribution
        self._checksum = checksum
        self._copyright = copyright
        self._detailed_description = detailed_description
        self._download_location = download_location
        self._external_refs = external_refs
        self._files_license_info = files_license_info
        self._home_page = home_page
        self._license_declared = license_declared
        self._originator = originator
        self._package_type = package_type
        self._summary_description = summary_description
        self._supplier = supplier
        self._title = title
        self._verification_code = verification_code
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PackageInfoNote':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PackageInfoNote of this PackageInfoNote.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def analyzed(self):
        """Gets the analyzed of this PackageInfoNote.

        Indicates whether the file content of this package has been available for or subjected to analysis when creating the SPDX document

        :return: The analyzed of this PackageInfoNote.
        :rtype: bool
        """
        return self._analyzed

    @analyzed.setter
    def analyzed(self, analyzed):
        """Sets the analyzed of this PackageInfoNote.

        Indicates whether the file content of this package has been available for or subjected to analysis when creating the SPDX document

        :param analyzed: The analyzed of this PackageInfoNote.
        :type analyzed: bool
        """

        self._analyzed = analyzed

    @property
    def attribution(self):
        """Gets the attribution of this PackageInfoNote.

        A place for the SPDX data creator to record, at the package level, acknowledgements that may be needed to be communicated in some contexts

        :return: The attribution of this PackageInfoNote.
        :rtype: str
        """
        return self._attribution

    @attribution.setter
    def attribution(self, attribution):
        """Sets the attribution of this PackageInfoNote.

        A place for the SPDX data creator to record, at the package level, acknowledgements that may be needed to be communicated in some contexts

        :param attribution: The attribution of this PackageInfoNote.
        :type attribution: str
        """

        self._attribution = attribution

    @property
    def checksum(self):
        """Gets the checksum of this PackageInfoNote.

        Provide an independently reproducible mechanism that permits unique identification of a specific package that correlates to the data in this SPDX file

        :return: The checksum of this PackageInfoNote.
        :rtype: str
        """
        return self._checksum

    @checksum.setter
    def checksum(self, checksum):
        """Sets the checksum of this PackageInfoNote.

        Provide an independently reproducible mechanism that permits unique identification of a specific package that correlates to the data in this SPDX file

        :param checksum: The checksum of this PackageInfoNote.
        :type checksum: str
        """

        self._checksum = checksum

    @property
    def copyright(self):
        """Gets the copyright of this PackageInfoNote.

        Identify the copyright holders of the package, as well as any dates present

        :return: The copyright of this PackageInfoNote.
        :rtype: str
        """
        return self._copyright

    @copyright.setter
    def copyright(self, copyright):
        """Sets the copyright of this PackageInfoNote.

        Identify the copyright holders of the package, as well as any dates present

        :param copyright: The copyright of this PackageInfoNote.
        :type copyright: str
        """

        self._copyright = copyright

    @property
    def detailed_description(self):
        """Gets the detailed_description of this PackageInfoNote.

        A more detailed description of the package

        :return: The detailed_description of this PackageInfoNote.
        :rtype: str
        """
        return self._detailed_description

    @detailed_description.setter
    def detailed_description(self, detailed_description):
        """Sets the detailed_description of this PackageInfoNote.

        A more detailed description of the package

        :param detailed_description: The detailed_description of this PackageInfoNote.
        :type detailed_description: str
        """

        self._detailed_description = detailed_description

    @property
    def download_location(self):
        """Gets the download_location of this PackageInfoNote.

        This section identifies the download Universal Resource Locator (URL), or a specific location within a version control system (VCS) for the package at the time that the SPDX file was created

        :return: The download_location of this PackageInfoNote.
        :rtype: str
        """
        return self._download_location

    @download_location.setter
    def download_location(self, download_location):
        """Sets the download_location of this PackageInfoNote.

        This section identifies the download Universal Resource Locator (URL), or a specific location within a version control system (VCS) for the package at the time that the SPDX file was created

        :param download_location: The download_location of this PackageInfoNote.
        :type download_location: str
        """

        self._download_location = download_location

    @property
    def external_refs(self):
        """Gets the external_refs of this PackageInfoNote.

        ExternalRef

        :return: The external_refs of this PackageInfoNote.
        :rtype: List[ExternalRef]
        """
        return self._external_refs

    @external_refs.setter
    def external_refs(self, external_refs):
        """Sets the external_refs of this PackageInfoNote.

        ExternalRef

        :param external_refs: The external_refs of this PackageInfoNote.
        :type external_refs: List[ExternalRef]
        """

        self._external_refs = external_refs

    @property
    def files_license_info(self):
        """Gets the files_license_info of this PackageInfoNote.

        Contain the license the SPDX file creator has concluded as governing the This field is to contain a list of all licenses found in the package. The relationship between licenses (i.e., conjunctive, disjunctive) is not specified in this field – it is simply a listing of all licenses found

        :return: The files_license_info of this PackageInfoNote.
        :rtype: List[str]
        """
        return self._files_license_info

    @files_license_info.setter
    def files_license_info(self, files_license_info):
        """Sets the files_license_info of this PackageInfoNote.

        Contain the license the SPDX file creator has concluded as governing the This field is to contain a list of all licenses found in the package. The relationship between licenses (i.e., conjunctive, disjunctive) is not specified in this field – it is simply a listing of all licenses found

        :param files_license_info: The files_license_info of this PackageInfoNote.
        :type files_license_info: List[str]
        """

        self._files_license_info = files_license_info

    @property
    def home_page(self):
        """Gets the home_page of this PackageInfoNote.

        Provide a place for the SPDX file creator to record a web site that serves as the package's home page

        :return: The home_page of this PackageInfoNote.
        :rtype: str
        """
        return self._home_page

    @home_page.setter
    def home_page(self, home_page):
        """Sets the home_page of this PackageInfoNote.

        Provide a place for the SPDX file creator to record a web site that serves as the package's home page

        :param home_page: The home_page of this PackageInfoNote.
        :type home_page: str
        """

        self._home_page = home_page

    @property
    def license_declared(self):
        """Gets the license_declared of this PackageInfoNote.


        :return: The license_declared of this PackageInfoNote.
        :rtype: License
        """
        return self._license_declared

    @license_declared.setter
    def license_declared(self, license_declared):
        """Sets the license_declared of this PackageInfoNote.


        :param license_declared: The license_declared of this PackageInfoNote.
        :type license_declared: License
        """

        self._license_declared = license_declared

    @property
    def originator(self):
        """Gets the originator of this PackageInfoNote.

        If the package identified in the SPDX file originated from a different person or organization than identified as Package Supplier, this field identifies from where or whom the package originally came

        :return: The originator of this PackageInfoNote.
        :rtype: str
        """
        return self._originator

    @originator.setter
    def originator(self, originator):
        """Sets the originator of this PackageInfoNote.

        If the package identified in the SPDX file originated from a different person or organization than identified as Package Supplier, this field identifies from where or whom the package originally came

        :param originator: The originator of this PackageInfoNote.
        :type originator: str
        """

        self._originator = originator

    @property
    def package_type(self):
        """Gets the package_type of this PackageInfoNote.

        The type of package: OS, MAVEN, GO, GO_STDLIB, etc.

        :return: The package_type of this PackageInfoNote.
        :rtype: str
        """
        return self._package_type

    @package_type.setter
    def package_type(self, package_type):
        """Sets the package_type of this PackageInfoNote.

        The type of package: OS, MAVEN, GO, GO_STDLIB, etc.

        :param package_type: The package_type of this PackageInfoNote.
        :type package_type: str
        """

        self._package_type = package_type

    @property
    def summary_description(self):
        """Gets the summary_description of this PackageInfoNote.

        A short description of the package

        :return: The summary_description of this PackageInfoNote.
        :rtype: str
        """
        return self._summary_description

    @summary_description.setter
    def summary_description(self, summary_description):
        """Sets the summary_description of this PackageInfoNote.

        A short description of the package

        :param summary_description: The summary_description of this PackageInfoNote.
        :type summary_description: str
        """

        self._summary_description = summary_description

    @property
    def supplier(self):
        """Gets the supplier of this PackageInfoNote.

        Identify the actual distribution source for the package/directory identified in the SPDX file

        :return: The supplier of this PackageInfoNote.
        :rtype: str
        """
        return self._supplier

    @supplier.setter
    def supplier(self, supplier):
        """Sets the supplier of this PackageInfoNote.

        Identify the actual distribution source for the package/directory identified in the SPDX file

        :param supplier: The supplier of this PackageInfoNote.
        :type supplier: str
        """

        self._supplier = supplier

    @property
    def title(self):
        """Gets the title of this PackageInfoNote.

        Identify the full name of the package as given by the Package Originator

        :return: The title of this PackageInfoNote.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this PackageInfoNote.

        Identify the full name of the package as given by the Package Originator

        :param title: The title of this PackageInfoNote.
        :type title: str
        """

        self._title = title

    @property
    def verification_code(self):
        """Gets the verification_code of this PackageInfoNote.

        This field provides an independently reproducible mechanism identifying specific contents of a package based on the actual files (except the SPDX file itself, if it is included in the package) that make up each package and that correlates to the data in this SPDX file

        :return: The verification_code of this PackageInfoNote.
        :rtype: str
        """
        return self._verification_code

    @verification_code.setter
    def verification_code(self, verification_code):
        """Sets the verification_code of this PackageInfoNote.

        This field provides an independently reproducible mechanism identifying specific contents of a package based on the actual files (except the SPDX file itself, if it is included in the package) that make up each package and that correlates to the data in this SPDX file

        :param verification_code: The verification_code of this PackageInfoNote.
        :type verification_code: str
        """

        self._verification_code = verification_code

    @property
    def version(self):
        """Gets the version of this PackageInfoNote.

        Identify the version of the package

        :return: The version of this PackageInfoNote.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this PackageInfoNote.

        Identify the version of the package

        :param version: The version of this PackageInfoNote.
        :type version: str
        """

        self._version = version
