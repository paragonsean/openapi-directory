# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.signature import Signature
from openapi_server import util


class GenericSignedAttestation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, content_type: str=None, serialized_payload: str=None, signatures: List[Signature]=None):
        """GenericSignedAttestation - a model defined in OpenAPI

        :param content_type: The content_type of this GenericSignedAttestation.
        :param serialized_payload: The serialized_payload of this GenericSignedAttestation.
        :param signatures: The signatures of this GenericSignedAttestation.
        """
        self.openapi_types = {
            'content_type': str,
            'serialized_payload': str,
            'signatures': List[Signature]
        }

        self.attribute_map = {
            'content_type': 'contentType',
            'serialized_payload': 'serializedPayload',
            'signatures': 'signatures'
        }

        self._content_type = content_type
        self._serialized_payload = serialized_payload
        self._signatures = signatures

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GenericSignedAttestation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GenericSignedAttestation of this GenericSignedAttestation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def content_type(self):
        """Gets the content_type of this GenericSignedAttestation.

        Type (for example schema) of the attestation payload that was signed. The verifier must ensure that the provided type is one that the verifier supports, and that the attestation payload is a valid instantiation of that type (for example by validating a JSON schema).

        :return: The content_type of this GenericSignedAttestation.
        :rtype: str
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """Sets the content_type of this GenericSignedAttestation.

        Type (for example schema) of the attestation payload that was signed. The verifier must ensure that the provided type is one that the verifier supports, and that the attestation payload is a valid instantiation of that type (for example by validating a JSON schema).

        :param content_type: The content_type of this GenericSignedAttestation.
        :type content_type: str
        """
        allowed_values = ["CONTENT_TYPE_UNSPECIFIED", "SIMPLE_SIGNING_JSON"]  # noqa: E501
        if content_type not in allowed_values:
            raise ValueError(
                "Invalid value for `content_type` ({0}), must be one of {1}"
                .format(content_type, allowed_values)
            )

        self._content_type = content_type

    @property
    def serialized_payload(self):
        """Gets the serialized_payload of this GenericSignedAttestation.

        The serialized payload that is verified by one or more `signatures`. The encoding and semantic meaning of this payload must match what is set in `content_type`.

        :return: The serialized_payload of this GenericSignedAttestation.
        :rtype: str
        """
        return self._serialized_payload

    @serialized_payload.setter
    def serialized_payload(self, serialized_payload):
        """Sets the serialized_payload of this GenericSignedAttestation.

        The serialized payload that is verified by one or more `signatures`. The encoding and semantic meaning of this payload must match what is set in `content_type`.

        :param serialized_payload: The serialized_payload of this GenericSignedAttestation.
        :type serialized_payload: str
        """

        self._serialized_payload = serialized_payload

    @property
    def signatures(self):
        """Gets the signatures of this GenericSignedAttestation.

        One or more signatures over `serialized_payload`. Verifier implementations should consider this attestation message verified if at least one `signature` verifies `serialized_payload`. See `Signature` in common.proto for more details on signature structure and verification.

        :return: The signatures of this GenericSignedAttestation.
        :rtype: List[Signature]
        """
        return self._signatures

    @signatures.setter
    def signatures(self, signatures):
        """Sets the signatures of this GenericSignedAttestation.

        One or more signatures over `serialized_payload`. Verifier implementations should consider this attestation message verified if at least one `signature` verifies `serialized_payload`. See `Signature` in common.proto for more details on signature structure and verification.

        :param signatures: The signatures of this GenericSignedAttestation.
        :type signatures: List[Signature]
        """

        self._signatures = signatures
