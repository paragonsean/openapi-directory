# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.digest import Digest
from openapi_server.models.distribution import Distribution
from openapi_server.models.license import License
from openapi_server.models.version import Version
from openapi_server import util


class Package(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, architecture: str=None, cpe_uri: str=None, description: str=None, digest: List[Digest]=None, distribution: List[Distribution]=None, license: License=None, maintainer: str=None, name: str=None, package_type: str=None, url: str=None, version: Version=None):
        """Package - a model defined in OpenAPI

        :param architecture: The architecture of this Package.
        :param cpe_uri: The cpe_uri of this Package.
        :param description: The description of this Package.
        :param digest: The digest of this Package.
        :param distribution: The distribution of this Package.
        :param license: The license of this Package.
        :param maintainer: The maintainer of this Package.
        :param name: The name of this Package.
        :param package_type: The package_type of this Package.
        :param url: The url of this Package.
        :param version: The version of this Package.
        """
        self.openapi_types = {
            'architecture': str,
            'cpe_uri': str,
            'description': str,
            'digest': List[Digest],
            'distribution': List[Distribution],
            'license': License,
            'maintainer': str,
            'name': str,
            'package_type': str,
            'url': str,
            'version': Version
        }

        self.attribute_map = {
            'architecture': 'architecture',
            'cpe_uri': 'cpeUri',
            'description': 'description',
            'digest': 'digest',
            'distribution': 'distribution',
            'license': 'license',
            'maintainer': 'maintainer',
            'name': 'name',
            'package_type': 'packageType',
            'url': 'url',
            'version': 'version'
        }

        self._architecture = architecture
        self._cpe_uri = cpe_uri
        self._description = description
        self._digest = digest
        self._distribution = distribution
        self._license = license
        self._maintainer = maintainer
        self._name = name
        self._package_type = package_type
        self._url = url
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Package':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Package of this Package.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def architecture(self):
        """Gets the architecture of this Package.

        The CPU architecture for which packages in this distribution channel were built. Architecture will be blank for language packages.

        :return: The architecture of this Package.
        :rtype: str
        """
        return self._architecture

    @architecture.setter
    def architecture(self, architecture):
        """Sets the architecture of this Package.

        The CPU architecture for which packages in this distribution channel were built. Architecture will be blank for language packages.

        :param architecture: The architecture of this Package.
        :type architecture: str
        """
        allowed_values = ["ARCHITECTURE_UNSPECIFIED", "X86", "X64"]  # noqa: E501
        if architecture not in allowed_values:
            raise ValueError(
                "Invalid value for `architecture` ({0}), must be one of {1}"
                .format(architecture, allowed_values)
            )

        self._architecture = architecture

    @property
    def cpe_uri(self):
        """Gets the cpe_uri of this Package.

        The cpe_uri in [CPE format](https://cpe.mitre.org/specification/) denoting the package manager version distributing a package. The cpe_uri will be blank for language packages.

        :return: The cpe_uri of this Package.
        :rtype: str
        """
        return self._cpe_uri

    @cpe_uri.setter
    def cpe_uri(self, cpe_uri):
        """Sets the cpe_uri of this Package.

        The cpe_uri in [CPE format](https://cpe.mitre.org/specification/) denoting the package manager version distributing a package. The cpe_uri will be blank for language packages.

        :param cpe_uri: The cpe_uri of this Package.
        :type cpe_uri: str
        """

        self._cpe_uri = cpe_uri

    @property
    def description(self):
        """Gets the description of this Package.

        The description of this package.

        :return: The description of this Package.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Package.

        The description of this package.

        :param description: The description of this Package.
        :type description: str
        """

        self._description = description

    @property
    def digest(self):
        """Gets the digest of this Package.

        Hash value, typically a file digest, that allows unique identification a specific package.

        :return: The digest of this Package.
        :rtype: List[Digest]
        """
        return self._digest

    @digest.setter
    def digest(self, digest):
        """Sets the digest of this Package.

        Hash value, typically a file digest, that allows unique identification a specific package.

        :param digest: The digest of this Package.
        :type digest: List[Digest]
        """

        self._digest = digest

    @property
    def distribution(self):
        """Gets the distribution of this Package.

        The various channels by which a package is distributed.

        :return: The distribution of this Package.
        :rtype: List[Distribution]
        """
        return self._distribution

    @distribution.setter
    def distribution(self, distribution):
        """Sets the distribution of this Package.

        The various channels by which a package is distributed.

        :param distribution: The distribution of this Package.
        :type distribution: List[Distribution]
        """

        self._distribution = distribution

    @property
    def license(self):
        """Gets the license of this Package.


        :return: The license of this Package.
        :rtype: License
        """
        return self._license

    @license.setter
    def license(self, license):
        """Sets the license of this Package.


        :param license: The license of this Package.
        :type license: License
        """

        self._license = license

    @property
    def maintainer(self):
        """Gets the maintainer of this Package.

        A freeform text denoting the maintainer of this package.

        :return: The maintainer of this Package.
        :rtype: str
        """
        return self._maintainer

    @maintainer.setter
    def maintainer(self, maintainer):
        """Sets the maintainer of this Package.

        A freeform text denoting the maintainer of this package.

        :param maintainer: The maintainer of this Package.
        :type maintainer: str
        """

        self._maintainer = maintainer

    @property
    def name(self):
        """Gets the name of this Package.

        Required. Immutable. The name of the package.

        :return: The name of this Package.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Package.

        Required. Immutable. The name of the package.

        :param name: The name of this Package.
        :type name: str
        """

        self._name = name

    @property
    def package_type(self):
        """Gets the package_type of this Package.

        The type of package; whether native or non native (e.g., ruby gems, node.js packages, etc.).

        :return: The package_type of this Package.
        :rtype: str
        """
        return self._package_type

    @package_type.setter
    def package_type(self, package_type):
        """Sets the package_type of this Package.

        The type of package; whether native or non native (e.g., ruby gems, node.js packages, etc.).

        :param package_type: The package_type of this Package.
        :type package_type: str
        """

        self._package_type = package_type

    @property
    def url(self):
        """Gets the url of this Package.

        The homepage for this package.

        :return: The url of this Package.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Package.

        The homepage for this package.

        :param url: The url of this Package.
        :type url: str
        """

        self._url = url

    @property
    def version(self):
        """Gets the version of this Package.


        :return: The version of this Package.
        :rtype: Version
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this Package.


        :param version: The version of this Package.
        :type version: Version
        """

        self._version = version
