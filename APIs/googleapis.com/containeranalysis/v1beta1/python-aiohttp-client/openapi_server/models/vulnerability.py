# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.cvss import CVSS
from openapi_server.models.cvssv3 import CVSSv3
from openapi_server.models.detail import Detail
from openapi_server.models.windows_detail import WindowsDetail
from openapi_server import util


class Vulnerability(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cvss_score: float=None, cvss_v2: CVSS=None, cvss_v3: CVSSv3=None, cvss_version: str=None, cwe: List[str]=None, details: List[Detail]=None, severity: str=None, source_update_time: str=None, windows_details: List[WindowsDetail]=None):
        """Vulnerability - a model defined in OpenAPI

        :param cvss_score: The cvss_score of this Vulnerability.
        :param cvss_v2: The cvss_v2 of this Vulnerability.
        :param cvss_v3: The cvss_v3 of this Vulnerability.
        :param cvss_version: The cvss_version of this Vulnerability.
        :param cwe: The cwe of this Vulnerability.
        :param details: The details of this Vulnerability.
        :param severity: The severity of this Vulnerability.
        :param source_update_time: The source_update_time of this Vulnerability.
        :param windows_details: The windows_details of this Vulnerability.
        """
        self.openapi_types = {
            'cvss_score': float,
            'cvss_v2': CVSS,
            'cvss_v3': CVSSv3,
            'cvss_version': str,
            'cwe': List[str],
            'details': List[Detail],
            'severity': str,
            'source_update_time': str,
            'windows_details': List[WindowsDetail]
        }

        self.attribute_map = {
            'cvss_score': 'cvssScore',
            'cvss_v2': 'cvssV2',
            'cvss_v3': 'cvssV3',
            'cvss_version': 'cvssVersion',
            'cwe': 'cwe',
            'details': 'details',
            'severity': 'severity',
            'source_update_time': 'sourceUpdateTime',
            'windows_details': 'windowsDetails'
        }

        self._cvss_score = cvss_score
        self._cvss_v2 = cvss_v2
        self._cvss_v3 = cvss_v3
        self._cvss_version = cvss_version
        self._cwe = cwe
        self._details = details
        self._severity = severity
        self._source_update_time = source_update_time
        self._windows_details = windows_details

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Vulnerability':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Vulnerability of this Vulnerability.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cvss_score(self):
        """Gets the cvss_score of this Vulnerability.

        The CVSS score for this vulnerability.

        :return: The cvss_score of this Vulnerability.
        :rtype: float
        """
        return self._cvss_score

    @cvss_score.setter
    def cvss_score(self, cvss_score):
        """Sets the cvss_score of this Vulnerability.

        The CVSS score for this vulnerability.

        :param cvss_score: The cvss_score of this Vulnerability.
        :type cvss_score: float
        """

        self._cvss_score = cvss_score

    @property
    def cvss_v2(self):
        """Gets the cvss_v2 of this Vulnerability.


        :return: The cvss_v2 of this Vulnerability.
        :rtype: CVSS
        """
        return self._cvss_v2

    @cvss_v2.setter
    def cvss_v2(self, cvss_v2):
        """Sets the cvss_v2 of this Vulnerability.


        :param cvss_v2: The cvss_v2 of this Vulnerability.
        :type cvss_v2: CVSS
        """

        self._cvss_v2 = cvss_v2

    @property
    def cvss_v3(self):
        """Gets the cvss_v3 of this Vulnerability.


        :return: The cvss_v3 of this Vulnerability.
        :rtype: CVSSv3
        """
        return self._cvss_v3

    @cvss_v3.setter
    def cvss_v3(self, cvss_v3):
        """Sets the cvss_v3 of this Vulnerability.


        :param cvss_v3: The cvss_v3 of this Vulnerability.
        :type cvss_v3: CVSSv3
        """

        self._cvss_v3 = cvss_v3

    @property
    def cvss_version(self):
        """Gets the cvss_version of this Vulnerability.

        CVSS version used to populate cvss_score and severity.

        :return: The cvss_version of this Vulnerability.
        :rtype: str
        """
        return self._cvss_version

    @cvss_version.setter
    def cvss_version(self, cvss_version):
        """Sets the cvss_version of this Vulnerability.

        CVSS version used to populate cvss_score and severity.

        :param cvss_version: The cvss_version of this Vulnerability.
        :type cvss_version: str
        """
        allowed_values = ["CVSS_VERSION_UNSPECIFIED", "CVSS_VERSION_2", "CVSS_VERSION_3"]  # noqa: E501
        if cvss_version not in allowed_values:
            raise ValueError(
                "Invalid value for `cvss_version` ({0}), must be one of {1}"
                .format(cvss_version, allowed_values)
            )

        self._cvss_version = cvss_version

    @property
    def cwe(self):
        """Gets the cwe of this Vulnerability.

        A list of CWE for this vulnerability. For details, see: https://cwe.mitre.org/index.html

        :return: The cwe of this Vulnerability.
        :rtype: List[str]
        """
        return self._cwe

    @cwe.setter
    def cwe(self, cwe):
        """Sets the cwe of this Vulnerability.

        A list of CWE for this vulnerability. For details, see: https://cwe.mitre.org/index.html

        :param cwe: The cwe of this Vulnerability.
        :type cwe: List[str]
        """

        self._cwe = cwe

    @property
    def details(self):
        """Gets the details of this Vulnerability.

        All information about the package to specifically identify this vulnerability. One entry per (version range and cpe_uri) the package vulnerability has manifested in.

        :return: The details of this Vulnerability.
        :rtype: List[Detail]
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this Vulnerability.

        All information about the package to specifically identify this vulnerability. One entry per (version range and cpe_uri) the package vulnerability has manifested in.

        :param details: The details of this Vulnerability.
        :type details: List[Detail]
        """

        self._details = details

    @property
    def severity(self):
        """Gets the severity of this Vulnerability.

        Note provider assigned impact of the vulnerability.

        :return: The severity of this Vulnerability.
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this Vulnerability.

        Note provider assigned impact of the vulnerability.

        :param severity: The severity of this Vulnerability.
        :type severity: str
        """
        allowed_values = ["SEVERITY_UNSPECIFIED", "MINIMAL", "LOW", "MEDIUM", "HIGH", "CRITICAL"]  # noqa: E501
        if severity not in allowed_values:
            raise ValueError(
                "Invalid value for `severity` ({0}), must be one of {1}"
                .format(severity, allowed_values)
            )

        self._severity = severity

    @property
    def source_update_time(self):
        """Gets the source_update_time of this Vulnerability.

        The time this information was last changed at the source. This is an upstream timestamp from the underlying information source - e.g. Ubuntu security tracker.

        :return: The source_update_time of this Vulnerability.
        :rtype: str
        """
        return self._source_update_time

    @source_update_time.setter
    def source_update_time(self, source_update_time):
        """Sets the source_update_time of this Vulnerability.

        The time this information was last changed at the source. This is an upstream timestamp from the underlying information source - e.g. Ubuntu security tracker.

        :param source_update_time: The source_update_time of this Vulnerability.
        :type source_update_time: str
        """

        self._source_update_time = source_update_time

    @property
    def windows_details(self):
        """Gets the windows_details of this Vulnerability.

        Windows details get their own format because the information format and model don't match a normal detail. Specifically Windows updates are done as patches, thus Windows vulnerabilities really are a missing package, rather than a package being at an incorrect version.

        :return: The windows_details of this Vulnerability.
        :rtype: List[WindowsDetail]
        """
        return self._windows_details

    @windows_details.setter
    def windows_details(self, windows_details):
        """Sets the windows_details of this Vulnerability.

        Windows details get their own format because the information format and model don't match a normal detail. Specifically Windows updates are done as patches, thus Windows vulnerabilities really are a missing package, rather than a package being at an incorrect version.

        :param windows_details: The windows_details of this Vulnerability.
        :type windows_details: List[WindowsDetail]
        """

        self._windows_details = windows_details
