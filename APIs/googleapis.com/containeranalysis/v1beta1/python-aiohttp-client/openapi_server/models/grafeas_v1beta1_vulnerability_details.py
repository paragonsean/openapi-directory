# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.cvss import CVSS
from openapi_server.models.package_issue import PackageIssue
from openapi_server.models.related_url import RelatedUrl
from openapi_server.models.vex_assessment import VexAssessment
from openapi_server import util


class GrafeasV1beta1VulnerabilityDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cvss_score: float=None, cvss_v2: CVSS=None, cvss_v3: CVSS=None, cvss_version: str=None, effective_severity: str=None, extra_details: str=None, long_description: str=None, package_issue: List[PackageIssue]=None, related_urls: List[RelatedUrl]=None, severity: str=None, short_description: str=None, type: str=None, vex_assessment: VexAssessment=None):
        """GrafeasV1beta1VulnerabilityDetails - a model defined in OpenAPI

        :param cvss_score: The cvss_score of this GrafeasV1beta1VulnerabilityDetails.
        :param cvss_v2: The cvss_v2 of this GrafeasV1beta1VulnerabilityDetails.
        :param cvss_v3: The cvss_v3 of this GrafeasV1beta1VulnerabilityDetails.
        :param cvss_version: The cvss_version of this GrafeasV1beta1VulnerabilityDetails.
        :param effective_severity: The effective_severity of this GrafeasV1beta1VulnerabilityDetails.
        :param extra_details: The extra_details of this GrafeasV1beta1VulnerabilityDetails.
        :param long_description: The long_description of this GrafeasV1beta1VulnerabilityDetails.
        :param package_issue: The package_issue of this GrafeasV1beta1VulnerabilityDetails.
        :param related_urls: The related_urls of this GrafeasV1beta1VulnerabilityDetails.
        :param severity: The severity of this GrafeasV1beta1VulnerabilityDetails.
        :param short_description: The short_description of this GrafeasV1beta1VulnerabilityDetails.
        :param type: The type of this GrafeasV1beta1VulnerabilityDetails.
        :param vex_assessment: The vex_assessment of this GrafeasV1beta1VulnerabilityDetails.
        """
        self.openapi_types = {
            'cvss_score': float,
            'cvss_v2': CVSS,
            'cvss_v3': CVSS,
            'cvss_version': str,
            'effective_severity': str,
            'extra_details': str,
            'long_description': str,
            'package_issue': List[PackageIssue],
            'related_urls': List[RelatedUrl],
            'severity': str,
            'short_description': str,
            'type': str,
            'vex_assessment': VexAssessment
        }

        self.attribute_map = {
            'cvss_score': 'cvssScore',
            'cvss_v2': 'cvssV2',
            'cvss_v3': 'cvssV3',
            'cvss_version': 'cvssVersion',
            'effective_severity': 'effectiveSeverity',
            'extra_details': 'extraDetails',
            'long_description': 'longDescription',
            'package_issue': 'packageIssue',
            'related_urls': 'relatedUrls',
            'severity': 'severity',
            'short_description': 'shortDescription',
            'type': 'type',
            'vex_assessment': 'vexAssessment'
        }

        self._cvss_score = cvss_score
        self._cvss_v2 = cvss_v2
        self._cvss_v3 = cvss_v3
        self._cvss_version = cvss_version
        self._effective_severity = effective_severity
        self._extra_details = extra_details
        self._long_description = long_description
        self._package_issue = package_issue
        self._related_urls = related_urls
        self._severity = severity
        self._short_description = short_description
        self._type = type
        self._vex_assessment = vex_assessment

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GrafeasV1beta1VulnerabilityDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GrafeasV1beta1VulnerabilityDetails of this GrafeasV1beta1VulnerabilityDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cvss_score(self):
        """Gets the cvss_score of this GrafeasV1beta1VulnerabilityDetails.

        Output only. The CVSS score of this vulnerability. CVSS score is on a scale of 0-10 where 0 indicates low severity and 10 indicates high severity.

        :return: The cvss_score of this GrafeasV1beta1VulnerabilityDetails.
        :rtype: float
        """
        return self._cvss_score

    @cvss_score.setter
    def cvss_score(self, cvss_score):
        """Sets the cvss_score of this GrafeasV1beta1VulnerabilityDetails.

        Output only. The CVSS score of this vulnerability. CVSS score is on a scale of 0-10 where 0 indicates low severity and 10 indicates high severity.

        :param cvss_score: The cvss_score of this GrafeasV1beta1VulnerabilityDetails.
        :type cvss_score: float
        """

        self._cvss_score = cvss_score

    @property
    def cvss_v2(self):
        """Gets the cvss_v2 of this GrafeasV1beta1VulnerabilityDetails.


        :return: The cvss_v2 of this GrafeasV1beta1VulnerabilityDetails.
        :rtype: CVSS
        """
        return self._cvss_v2

    @cvss_v2.setter
    def cvss_v2(self, cvss_v2):
        """Sets the cvss_v2 of this GrafeasV1beta1VulnerabilityDetails.


        :param cvss_v2: The cvss_v2 of this GrafeasV1beta1VulnerabilityDetails.
        :type cvss_v2: CVSS
        """

        self._cvss_v2 = cvss_v2

    @property
    def cvss_v3(self):
        """Gets the cvss_v3 of this GrafeasV1beta1VulnerabilityDetails.


        :return: The cvss_v3 of this GrafeasV1beta1VulnerabilityDetails.
        :rtype: CVSS
        """
        return self._cvss_v3

    @cvss_v3.setter
    def cvss_v3(self, cvss_v3):
        """Sets the cvss_v3 of this GrafeasV1beta1VulnerabilityDetails.


        :param cvss_v3: The cvss_v3 of this GrafeasV1beta1VulnerabilityDetails.
        :type cvss_v3: CVSS
        """

        self._cvss_v3 = cvss_v3

    @property
    def cvss_version(self):
        """Gets the cvss_version of this GrafeasV1beta1VulnerabilityDetails.

        Output only. CVSS version used to populate cvss_score and severity.

        :return: The cvss_version of this GrafeasV1beta1VulnerabilityDetails.
        :rtype: str
        """
        return self._cvss_version

    @cvss_version.setter
    def cvss_version(self, cvss_version):
        """Sets the cvss_version of this GrafeasV1beta1VulnerabilityDetails.

        Output only. CVSS version used to populate cvss_score and severity.

        :param cvss_version: The cvss_version of this GrafeasV1beta1VulnerabilityDetails.
        :type cvss_version: str
        """
        allowed_values = ["CVSS_VERSION_UNSPECIFIED", "CVSS_VERSION_2", "CVSS_VERSION_3"]  # noqa: E501
        if cvss_version not in allowed_values:
            raise ValueError(
                "Invalid value for `cvss_version` ({0}), must be one of {1}"
                .format(cvss_version, allowed_values)
            )

        self._cvss_version = cvss_version

    @property
    def effective_severity(self):
        """Gets the effective_severity of this GrafeasV1beta1VulnerabilityDetails.

        The distro assigned severity for this vulnerability when it is available, and note provider assigned severity when distro has not yet assigned a severity for this vulnerability. When there are multiple PackageIssues for this vulnerability, they can have different effective severities because some might be provided by the distro while others are provided by the language ecosystem for a language pack. For this reason, it is advised to use the effective severity on the PackageIssue level. In the case where multiple PackageIssues have differing effective severities, this field should be the highest severity for any of the PackageIssues.

        :return: The effective_severity of this GrafeasV1beta1VulnerabilityDetails.
        :rtype: str
        """
        return self._effective_severity

    @effective_severity.setter
    def effective_severity(self, effective_severity):
        """Sets the effective_severity of this GrafeasV1beta1VulnerabilityDetails.

        The distro assigned severity for this vulnerability when it is available, and note provider assigned severity when distro has not yet assigned a severity for this vulnerability. When there are multiple PackageIssues for this vulnerability, they can have different effective severities because some might be provided by the distro while others are provided by the language ecosystem for a language pack. For this reason, it is advised to use the effective severity on the PackageIssue level. In the case where multiple PackageIssues have differing effective severities, this field should be the highest severity for any of the PackageIssues.

        :param effective_severity: The effective_severity of this GrafeasV1beta1VulnerabilityDetails.
        :type effective_severity: str
        """
        allowed_values = ["SEVERITY_UNSPECIFIED", "MINIMAL", "LOW", "MEDIUM", "HIGH", "CRITICAL"]  # noqa: E501
        if effective_severity not in allowed_values:
            raise ValueError(
                "Invalid value for `effective_severity` ({0}), must be one of {1}"
                .format(effective_severity, allowed_values)
            )

        self._effective_severity = effective_severity

    @property
    def extra_details(self):
        """Gets the extra_details of this GrafeasV1beta1VulnerabilityDetails.

        Occurrence-specific extra details about the vulnerability.

        :return: The extra_details of this GrafeasV1beta1VulnerabilityDetails.
        :rtype: str
        """
        return self._extra_details

    @extra_details.setter
    def extra_details(self, extra_details):
        """Sets the extra_details of this GrafeasV1beta1VulnerabilityDetails.

        Occurrence-specific extra details about the vulnerability.

        :param extra_details: The extra_details of this GrafeasV1beta1VulnerabilityDetails.
        :type extra_details: str
        """

        self._extra_details = extra_details

    @property
    def long_description(self):
        """Gets the long_description of this GrafeasV1beta1VulnerabilityDetails.

        Output only. A detailed description of this vulnerability.

        :return: The long_description of this GrafeasV1beta1VulnerabilityDetails.
        :rtype: str
        """
        return self._long_description

    @long_description.setter
    def long_description(self, long_description):
        """Sets the long_description of this GrafeasV1beta1VulnerabilityDetails.

        Output only. A detailed description of this vulnerability.

        :param long_description: The long_description of this GrafeasV1beta1VulnerabilityDetails.
        :type long_description: str
        """

        self._long_description = long_description

    @property
    def package_issue(self):
        """Gets the package_issue of this GrafeasV1beta1VulnerabilityDetails.

        Required. The set of affected locations and their fixes (if available) within the associated resource.

        :return: The package_issue of this GrafeasV1beta1VulnerabilityDetails.
        :rtype: List[PackageIssue]
        """
        return self._package_issue

    @package_issue.setter
    def package_issue(self, package_issue):
        """Sets the package_issue of this GrafeasV1beta1VulnerabilityDetails.

        Required. The set of affected locations and their fixes (if available) within the associated resource.

        :param package_issue: The package_issue of this GrafeasV1beta1VulnerabilityDetails.
        :type package_issue: List[PackageIssue]
        """

        self._package_issue = package_issue

    @property
    def related_urls(self):
        """Gets the related_urls of this GrafeasV1beta1VulnerabilityDetails.

        Output only. URLs related to this vulnerability.

        :return: The related_urls of this GrafeasV1beta1VulnerabilityDetails.
        :rtype: List[RelatedUrl]
        """
        return self._related_urls

    @related_urls.setter
    def related_urls(self, related_urls):
        """Sets the related_urls of this GrafeasV1beta1VulnerabilityDetails.

        Output only. URLs related to this vulnerability.

        :param related_urls: The related_urls of this GrafeasV1beta1VulnerabilityDetails.
        :type related_urls: List[RelatedUrl]
        """

        self._related_urls = related_urls

    @property
    def severity(self):
        """Gets the severity of this GrafeasV1beta1VulnerabilityDetails.

        Output only. The note provider assigned Severity of the vulnerability.

        :return: The severity of this GrafeasV1beta1VulnerabilityDetails.
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this GrafeasV1beta1VulnerabilityDetails.

        Output only. The note provider assigned Severity of the vulnerability.

        :param severity: The severity of this GrafeasV1beta1VulnerabilityDetails.
        :type severity: str
        """
        allowed_values = ["SEVERITY_UNSPECIFIED", "MINIMAL", "LOW", "MEDIUM", "HIGH", "CRITICAL"]  # noqa: E501
        if severity not in allowed_values:
            raise ValueError(
                "Invalid value for `severity` ({0}), must be one of {1}"
                .format(severity, allowed_values)
            )

        self._severity = severity

    @property
    def short_description(self):
        """Gets the short_description of this GrafeasV1beta1VulnerabilityDetails.

        Output only. A one sentence description of this vulnerability.

        :return: The short_description of this GrafeasV1beta1VulnerabilityDetails.
        :rtype: str
        """
        return self._short_description

    @short_description.setter
    def short_description(self, short_description):
        """Sets the short_description of this GrafeasV1beta1VulnerabilityDetails.

        Output only. A one sentence description of this vulnerability.

        :param short_description: The short_description of this GrafeasV1beta1VulnerabilityDetails.
        :type short_description: str
        """

        self._short_description = short_description

    @property
    def type(self):
        """Gets the type of this GrafeasV1beta1VulnerabilityDetails.

        The type of package; whether native or non native(ruby gems, node.js packages etc)

        :return: The type of this GrafeasV1beta1VulnerabilityDetails.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this GrafeasV1beta1VulnerabilityDetails.

        The type of package; whether native or non native(ruby gems, node.js packages etc)

        :param type: The type of this GrafeasV1beta1VulnerabilityDetails.
        :type type: str
        """

        self._type = type

    @property
    def vex_assessment(self):
        """Gets the vex_assessment of this GrafeasV1beta1VulnerabilityDetails.


        :return: The vex_assessment of this GrafeasV1beta1VulnerabilityDetails.
        :rtype: VexAssessment
        """
        return self._vex_assessment

    @vex_assessment.setter
    def vex_assessment(self, vex_assessment):
        """Sets the vex_assessment of this GrafeasV1beta1VulnerabilityDetails.


        :param vex_assessment: The vex_assessment of this GrafeasV1beta1VulnerabilityDetails.
        :type vex_assessment: VexAssessment
        """

        self._vex_assessment = vex_assessment
