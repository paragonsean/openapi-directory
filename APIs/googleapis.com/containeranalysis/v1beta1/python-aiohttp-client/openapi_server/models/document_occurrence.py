# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DocumentOccurrence(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, create_time: str=None, creator_comment: str=None, creators: List[str]=None, document_comment: str=None, external_document_refs: List[str]=None, id: str=None, license_list_version: str=None, namespace: str=None, title: str=None):
        """DocumentOccurrence - a model defined in OpenAPI

        :param create_time: The create_time of this DocumentOccurrence.
        :param creator_comment: The creator_comment of this DocumentOccurrence.
        :param creators: The creators of this DocumentOccurrence.
        :param document_comment: The document_comment of this DocumentOccurrence.
        :param external_document_refs: The external_document_refs of this DocumentOccurrence.
        :param id: The id of this DocumentOccurrence.
        :param license_list_version: The license_list_version of this DocumentOccurrence.
        :param namespace: The namespace of this DocumentOccurrence.
        :param title: The title of this DocumentOccurrence.
        """
        self.openapi_types = {
            'create_time': str,
            'creator_comment': str,
            'creators': List[str],
            'document_comment': str,
            'external_document_refs': List[str],
            'id': str,
            'license_list_version': str,
            'namespace': str,
            'title': str
        }

        self.attribute_map = {
            'create_time': 'createTime',
            'creator_comment': 'creatorComment',
            'creators': 'creators',
            'document_comment': 'documentComment',
            'external_document_refs': 'externalDocumentRefs',
            'id': 'id',
            'license_list_version': 'licenseListVersion',
            'namespace': 'namespace',
            'title': 'title'
        }

        self._create_time = create_time
        self._creator_comment = creator_comment
        self._creators = creators
        self._document_comment = document_comment
        self._external_document_refs = external_document_refs
        self._id = id
        self._license_list_version = license_list_version
        self._namespace = namespace
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DocumentOccurrence':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DocumentOccurrence of this DocumentOccurrence.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def create_time(self):
        """Gets the create_time of this DocumentOccurrence.

        Identify when the SPDX file was originally created. The date is to be specified according to combined date and time in UTC format as specified in ISO 8601 standard

        :return: The create_time of this DocumentOccurrence.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this DocumentOccurrence.

        Identify when the SPDX file was originally created. The date is to be specified according to combined date and time in UTC format as specified in ISO 8601 standard

        :param create_time: The create_time of this DocumentOccurrence.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def creator_comment(self):
        """Gets the creator_comment of this DocumentOccurrence.

        A field for creators of the SPDX file to provide general comments about the creation of the SPDX file or any other relevant comment not included in the other fields

        :return: The creator_comment of this DocumentOccurrence.
        :rtype: str
        """
        return self._creator_comment

    @creator_comment.setter
    def creator_comment(self, creator_comment):
        """Sets the creator_comment of this DocumentOccurrence.

        A field for creators of the SPDX file to provide general comments about the creation of the SPDX file or any other relevant comment not included in the other fields

        :param creator_comment: The creator_comment of this DocumentOccurrence.
        :type creator_comment: str
        """

        self._creator_comment = creator_comment

    @property
    def creators(self):
        """Gets the creators of this DocumentOccurrence.

        Identify who (or what, in the case of a tool) created the SPDX file. If the SPDX file was created by an individual, indicate the person's name

        :return: The creators of this DocumentOccurrence.
        :rtype: List[str]
        """
        return self._creators

    @creators.setter
    def creators(self, creators):
        """Sets the creators of this DocumentOccurrence.

        Identify who (or what, in the case of a tool) created the SPDX file. If the SPDX file was created by an individual, indicate the person's name

        :param creators: The creators of this DocumentOccurrence.
        :type creators: List[str]
        """

        self._creators = creators

    @property
    def document_comment(self):
        """Gets the document_comment of this DocumentOccurrence.

        A field for creators of the SPDX file content to provide comments to the consumers of the SPDX document

        :return: The document_comment of this DocumentOccurrence.
        :rtype: str
        """
        return self._document_comment

    @document_comment.setter
    def document_comment(self, document_comment):
        """Sets the document_comment of this DocumentOccurrence.

        A field for creators of the SPDX file content to provide comments to the consumers of the SPDX document

        :param document_comment: The document_comment of this DocumentOccurrence.
        :type document_comment: str
        """

        self._document_comment = document_comment

    @property
    def external_document_refs(self):
        """Gets the external_document_refs of this DocumentOccurrence.

        Identify any external SPDX documents referenced within this SPDX document

        :return: The external_document_refs of this DocumentOccurrence.
        :rtype: List[str]
        """
        return self._external_document_refs

    @external_document_refs.setter
    def external_document_refs(self, external_document_refs):
        """Sets the external_document_refs of this DocumentOccurrence.

        Identify any external SPDX documents referenced within this SPDX document

        :param external_document_refs: The external_document_refs of this DocumentOccurrence.
        :type external_document_refs: List[str]
        """

        self._external_document_refs = external_document_refs

    @property
    def id(self):
        """Gets the id of this DocumentOccurrence.

        Identify the current SPDX document which may be referenced in relationships by other files, packages internally and documents externally

        :return: The id of this DocumentOccurrence.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DocumentOccurrence.

        Identify the current SPDX document which may be referenced in relationships by other files, packages internally and documents externally

        :param id: The id of this DocumentOccurrence.
        :type id: str
        """

        self._id = id

    @property
    def license_list_version(self):
        """Gets the license_list_version of this DocumentOccurrence.

        A field for creators of the SPDX file to provide the version of the SPDX License List used when the SPDX file was created

        :return: The license_list_version of this DocumentOccurrence.
        :rtype: str
        """
        return self._license_list_version

    @license_list_version.setter
    def license_list_version(self, license_list_version):
        """Sets the license_list_version of this DocumentOccurrence.

        A field for creators of the SPDX file to provide the version of the SPDX License List used when the SPDX file was created

        :param license_list_version: The license_list_version of this DocumentOccurrence.
        :type license_list_version: str
        """

        self._license_list_version = license_list_version

    @property
    def namespace(self):
        """Gets the namespace of this DocumentOccurrence.

        Provide an SPDX document specific namespace as a unique absolute Uniform Resource Identifier (URI) as specified in RFC-3986, with the exception of the ‘#’ delimiter

        :return: The namespace of this DocumentOccurrence.
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this DocumentOccurrence.

        Provide an SPDX document specific namespace as a unique absolute Uniform Resource Identifier (URI) as specified in RFC-3986, with the exception of the ‘#’ delimiter

        :param namespace: The namespace of this DocumentOccurrence.
        :type namespace: str
        """

        self._namespace = namespace

    @property
    def title(self):
        """Gets the title of this DocumentOccurrence.

        Identify name of this document as designated by creator

        :return: The title of this DocumentOccurrence.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this DocumentOccurrence.

        Identify name of this document as designated by creator

        :param title: The title of this DocumentOccurrence.
        :type title: str
        """

        self._title = title
