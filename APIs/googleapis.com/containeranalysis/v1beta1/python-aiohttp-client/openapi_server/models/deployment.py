# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Deployment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address: str=None, config: str=None, deploy_time: str=None, platform: str=None, resource_uri: List[str]=None, undeploy_time: str=None, user_email: str=None):
        """Deployment - a model defined in OpenAPI

        :param address: The address of this Deployment.
        :param config: The config of this Deployment.
        :param deploy_time: The deploy_time of this Deployment.
        :param platform: The platform of this Deployment.
        :param resource_uri: The resource_uri of this Deployment.
        :param undeploy_time: The undeploy_time of this Deployment.
        :param user_email: The user_email of this Deployment.
        """
        self.openapi_types = {
            'address': str,
            'config': str,
            'deploy_time': str,
            'platform': str,
            'resource_uri': List[str],
            'undeploy_time': str,
            'user_email': str
        }

        self.attribute_map = {
            'address': 'address',
            'config': 'config',
            'deploy_time': 'deployTime',
            'platform': 'platform',
            'resource_uri': 'resourceUri',
            'undeploy_time': 'undeployTime',
            'user_email': 'userEmail'
        }

        self._address = address
        self._config = config
        self._deploy_time = deploy_time
        self._platform = platform
        self._resource_uri = resource_uri
        self._undeploy_time = undeploy_time
        self._user_email = user_email

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Deployment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Deployment of this Deployment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self):
        """Gets the address of this Deployment.

        Address of the runtime element hosting this deployment.

        :return: The address of this Deployment.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this Deployment.

        Address of the runtime element hosting this deployment.

        :param address: The address of this Deployment.
        :type address: str
        """

        self._address = address

    @property
    def config(self):
        """Gets the config of this Deployment.

        Configuration used to create this deployment.

        :return: The config of this Deployment.
        :rtype: str
        """
        return self._config

    @config.setter
    def config(self, config):
        """Sets the config of this Deployment.

        Configuration used to create this deployment.

        :param config: The config of this Deployment.
        :type config: str
        """

        self._config = config

    @property
    def deploy_time(self):
        """Gets the deploy_time of this Deployment.

        Required. Beginning of the lifetime of this deployment.

        :return: The deploy_time of this Deployment.
        :rtype: str
        """
        return self._deploy_time

    @deploy_time.setter
    def deploy_time(self, deploy_time):
        """Sets the deploy_time of this Deployment.

        Required. Beginning of the lifetime of this deployment.

        :param deploy_time: The deploy_time of this Deployment.
        :type deploy_time: str
        """

        self._deploy_time = deploy_time

    @property
    def platform(self):
        """Gets the platform of this Deployment.

        Platform hosting this deployment.

        :return: The platform of this Deployment.
        :rtype: str
        """
        return self._platform

    @platform.setter
    def platform(self, platform):
        """Sets the platform of this Deployment.

        Platform hosting this deployment.

        :param platform: The platform of this Deployment.
        :type platform: str
        """
        allowed_values = ["PLATFORM_UNSPECIFIED", "GKE", "FLEX", "CUSTOM"]  # noqa: E501
        if platform not in allowed_values:
            raise ValueError(
                "Invalid value for `platform` ({0}), must be one of {1}"
                .format(platform, allowed_values)
            )

        self._platform = platform

    @property
    def resource_uri(self):
        """Gets the resource_uri of this Deployment.

        Output only. Resource URI for the artifact being deployed taken from the deployable field with the same name.

        :return: The resource_uri of this Deployment.
        :rtype: List[str]
        """
        return self._resource_uri

    @resource_uri.setter
    def resource_uri(self, resource_uri):
        """Sets the resource_uri of this Deployment.

        Output only. Resource URI for the artifact being deployed taken from the deployable field with the same name.

        :param resource_uri: The resource_uri of this Deployment.
        :type resource_uri: List[str]
        """

        self._resource_uri = resource_uri

    @property
    def undeploy_time(self):
        """Gets the undeploy_time of this Deployment.

        End of the lifetime of this deployment.

        :return: The undeploy_time of this Deployment.
        :rtype: str
        """
        return self._undeploy_time

    @undeploy_time.setter
    def undeploy_time(self, undeploy_time):
        """Sets the undeploy_time of this Deployment.

        End of the lifetime of this deployment.

        :param undeploy_time: The undeploy_time of this Deployment.
        :type undeploy_time: str
        """

        self._undeploy_time = undeploy_time

    @property
    def user_email(self):
        """Gets the user_email of this Deployment.

        Identity of the user that triggered this deployment.

        :return: The user_email of this Deployment.
        :rtype: str
        """
        return self._user_email

    @user_email.setter
    def user_email(self, user_email):
        """Sets the user_email of this Deployment.

        Identity of the user that triggered this deployment.

        :param user_email: The user_email of this Deployment.
        :type user_email: str
        """

        self._user_email = user_email
