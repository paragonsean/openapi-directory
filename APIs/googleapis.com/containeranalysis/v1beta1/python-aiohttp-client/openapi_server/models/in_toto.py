# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.artifact_rule import ArtifactRule
from openapi_server.models.signing_key import SigningKey
from openapi_server import util


class InToto(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, expected_command: List[str]=None, expected_materials: List[ArtifactRule]=None, expected_products: List[ArtifactRule]=None, signing_keys: List[SigningKey]=None, step_name: str=None, threshold: str=None):
        """InToto - a model defined in OpenAPI

        :param expected_command: The expected_command of this InToto.
        :param expected_materials: The expected_materials of this InToto.
        :param expected_products: The expected_products of this InToto.
        :param signing_keys: The signing_keys of this InToto.
        :param step_name: The step_name of this InToto.
        :param threshold: The threshold of this InToto.
        """
        self.openapi_types = {
            'expected_command': List[str],
            'expected_materials': List[ArtifactRule],
            'expected_products': List[ArtifactRule],
            'signing_keys': List[SigningKey],
            'step_name': str,
            'threshold': str
        }

        self.attribute_map = {
            'expected_command': 'expectedCommand',
            'expected_materials': 'expectedMaterials',
            'expected_products': 'expectedProducts',
            'signing_keys': 'signingKeys',
            'step_name': 'stepName',
            'threshold': 'threshold'
        }

        self._expected_command = expected_command
        self._expected_materials = expected_materials
        self._expected_products = expected_products
        self._signing_keys = signing_keys
        self._step_name = step_name
        self._threshold = threshold

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InToto':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InToto of this InToto.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def expected_command(self):
        """Gets the expected_command of this InToto.

        This field contains the expected command used to perform the step.

        :return: The expected_command of this InToto.
        :rtype: List[str]
        """
        return self._expected_command

    @expected_command.setter
    def expected_command(self, expected_command):
        """Sets the expected_command of this InToto.

        This field contains the expected command used to perform the step.

        :param expected_command: The expected_command of this InToto.
        :type expected_command: List[str]
        """

        self._expected_command = expected_command

    @property
    def expected_materials(self):
        """Gets the expected_materials of this InToto.

        The following fields contain in-toto artifact rules identifying the artifacts that enter this supply chain step, and exit the supply chain step, i.e. materials and products of the step.

        :return: The expected_materials of this InToto.
        :rtype: List[ArtifactRule]
        """
        return self._expected_materials

    @expected_materials.setter
    def expected_materials(self, expected_materials):
        """Sets the expected_materials of this InToto.

        The following fields contain in-toto artifact rules identifying the artifacts that enter this supply chain step, and exit the supply chain step, i.e. materials and products of the step.

        :param expected_materials: The expected_materials of this InToto.
        :type expected_materials: List[ArtifactRule]
        """

        self._expected_materials = expected_materials

    @property
    def expected_products(self):
        """Gets the expected_products of this InToto.


        :return: The expected_products of this InToto.
        :rtype: List[ArtifactRule]
        """
        return self._expected_products

    @expected_products.setter
    def expected_products(self, expected_products):
        """Sets the expected_products of this InToto.


        :param expected_products: The expected_products of this InToto.
        :type expected_products: List[ArtifactRule]
        """

        self._expected_products = expected_products

    @property
    def signing_keys(self):
        """Gets the signing_keys of this InToto.

        This field contains the public keys that can be used to verify the signatures on the step metadata.

        :return: The signing_keys of this InToto.
        :rtype: List[SigningKey]
        """
        return self._signing_keys

    @signing_keys.setter
    def signing_keys(self, signing_keys):
        """Sets the signing_keys of this InToto.

        This field contains the public keys that can be used to verify the signatures on the step metadata.

        :param signing_keys: The signing_keys of this InToto.
        :type signing_keys: List[SigningKey]
        """

        self._signing_keys = signing_keys

    @property
    def step_name(self):
        """Gets the step_name of this InToto.

        This field identifies the name of the step in the supply chain.

        :return: The step_name of this InToto.
        :rtype: str
        """
        return self._step_name

    @step_name.setter
    def step_name(self, step_name):
        """Sets the step_name of this InToto.

        This field identifies the name of the step in the supply chain.

        :param step_name: The step_name of this InToto.
        :type step_name: str
        """

        self._step_name = step_name

    @property
    def threshold(self):
        """Gets the threshold of this InToto.

        This field contains a value that indicates the minimum number of keys that need to be used to sign the step's in-toto link.

        :return: The threshold of this InToto.
        :rtype: str
        """
        return self._threshold

    @threshold.setter
    def threshold(self, threshold):
        """Sets the threshold of this InToto.

        This field contains a value that indicates the minimum number of keys that need to be used to sign the step's in-toto link.

        :param threshold: The threshold of this InToto.
        :type threshold: str
        """

        self._threshold = threshold
