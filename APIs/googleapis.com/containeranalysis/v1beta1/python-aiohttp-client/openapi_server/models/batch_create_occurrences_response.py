# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.occurrence import Occurrence
from openapi_server import util


class BatchCreateOccurrencesResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, occurrences: List[Occurrence]=None):
        """BatchCreateOccurrencesResponse - a model defined in OpenAPI

        :param occurrences: The occurrences of this BatchCreateOccurrencesResponse.
        """
        self.openapi_types = {
            'occurrences': List[Occurrence]
        }

        self.attribute_map = {
            'occurrences': 'occurrences'
        }

        self._occurrences = occurrences

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BatchCreateOccurrencesResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BatchCreateOccurrencesResponse of this BatchCreateOccurrencesResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def occurrences(self):
        """Gets the occurrences of this BatchCreateOccurrencesResponse.

        The occurrences that were created.

        :return: The occurrences of this BatchCreateOccurrencesResponse.
        :rtype: List[Occurrence]
        """
        return self._occurrences

    @occurrences.setter
    def occurrences(self, occurrences):
        """Sets the occurrences of this BatchCreateOccurrencesResponse.

        The occurrences that were created.

        :param occurrences: The occurrences of this BatchCreateOccurrencesResponse.
        :type occurrences: List[Occurrence]
        """

        self._occurrences = occurrences
