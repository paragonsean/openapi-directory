/*
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Signature;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An attestation wrapper that uses the Grafeas &#x60;Signature&#x60; message. This attestation must define the &#x60;serialized_payload&#x60; that the &#x60;signatures&#x60; verify and any metadata necessary to interpret that plaintext. The signatures should always be over the &#x60;serialized_payload&#x60; bytestring.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:38:41.469450-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GenericSignedAttestation {
  /**
   * Type (for example schema) of the attestation payload that was signed. The verifier must ensure that the provided type is one that the verifier supports, and that the attestation payload is a valid instantiation of that type (for example by validating a JSON schema).
   */
  @JsonAdapter(ContentTypeEnum.Adapter.class)
  public enum ContentTypeEnum {
    CONTENT_TYPE_UNSPECIFIED("CONTENT_TYPE_UNSPECIFIED"),
    
    SIMPLE_SIGNING_JSON("SIMPLE_SIGNING_JSON");

    private String value;

    ContentTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ContentTypeEnum fromValue(String value) {
      for (ContentTypeEnum b : ContentTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ContentTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ContentTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ContentTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ContentTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ContentTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CONTENT_TYPE = "contentType";
  @SerializedName(SERIALIZED_NAME_CONTENT_TYPE)
  private ContentTypeEnum contentType;

  public static final String SERIALIZED_NAME_SERIALIZED_PAYLOAD = "serializedPayload";
  @SerializedName(SERIALIZED_NAME_SERIALIZED_PAYLOAD)
  private byte[] serializedPayload;

  public static final String SERIALIZED_NAME_SIGNATURES = "signatures";
  @SerializedName(SERIALIZED_NAME_SIGNATURES)
  private List<Signature> signatures = new ArrayList<>();

  public GenericSignedAttestation() {
  }

  public GenericSignedAttestation contentType(ContentTypeEnum contentType) {
    this.contentType = contentType;
    return this;
  }

  /**
   * Type (for example schema) of the attestation payload that was signed. The verifier must ensure that the provided type is one that the verifier supports, and that the attestation payload is a valid instantiation of that type (for example by validating a JSON schema).
   * @return contentType
   */
  @javax.annotation.Nullable
  public ContentTypeEnum getContentType() {
    return contentType;
  }

  public void setContentType(ContentTypeEnum contentType) {
    this.contentType = contentType;
  }


  public GenericSignedAttestation serializedPayload(byte[] serializedPayload) {
    this.serializedPayload = serializedPayload;
    return this;
  }

  /**
   * The serialized payload that is verified by one or more &#x60;signatures&#x60;. The encoding and semantic meaning of this payload must match what is set in &#x60;content_type&#x60;.
   * @return serializedPayload
   */
  @javax.annotation.Nullable
  public byte[] getSerializedPayload() {
    return serializedPayload;
  }

  public void setSerializedPayload(byte[] serializedPayload) {
    this.serializedPayload = serializedPayload;
  }


  public GenericSignedAttestation signatures(List<Signature> signatures) {
    this.signatures = signatures;
    return this;
  }

  public GenericSignedAttestation addSignaturesItem(Signature signaturesItem) {
    if (this.signatures == null) {
      this.signatures = new ArrayList<>();
    }
    this.signatures.add(signaturesItem);
    return this;
  }

  /**
   * One or more signatures over &#x60;serialized_payload&#x60;. Verifier implementations should consider this attestation message verified if at least one &#x60;signature&#x60; verifies &#x60;serialized_payload&#x60;. See &#x60;Signature&#x60; in common.proto for more details on signature structure and verification.
   * @return signatures
   */
  @javax.annotation.Nullable
  public List<Signature> getSignatures() {
    return signatures;
  }

  public void setSignatures(List<Signature> signatures) {
    this.signatures = signatures;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GenericSignedAttestation genericSignedAttestation = (GenericSignedAttestation) o;
    return Objects.equals(this.contentType, genericSignedAttestation.contentType) &&
        Arrays.equals(this.serializedPayload, genericSignedAttestation.serializedPayload) &&
        Objects.equals(this.signatures, genericSignedAttestation.signatures);
  }

  @Override
  public int hashCode() {
    return Objects.hash(contentType, Arrays.hashCode(serializedPayload), signatures);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GenericSignedAttestation {\n");
    sb.append("    contentType: ").append(toIndentedString(contentType)).append("\n");
    sb.append("    serializedPayload: ").append(toIndentedString(serializedPayload)).append("\n");
    sb.append("    signatures: ").append(toIndentedString(signatures)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("contentType");
    openapiFields.add("serializedPayload");
    openapiFields.add("signatures");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GenericSignedAttestation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GenericSignedAttestation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GenericSignedAttestation is not found in the empty JSON string", GenericSignedAttestation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GenericSignedAttestation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GenericSignedAttestation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("contentType") != null && !jsonObj.get("contentType").isJsonNull()) && !jsonObj.get("contentType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contentType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contentType").toString()));
      }
      // validate the optional field `contentType`
      if (jsonObj.get("contentType") != null && !jsonObj.get("contentType").isJsonNull()) {
        ContentTypeEnum.validateJsonElement(jsonObj.get("contentType"));
      }
      if (jsonObj.get("signatures") != null && !jsonObj.get("signatures").isJsonNull()) {
        JsonArray jsonArraysignatures = jsonObj.getAsJsonArray("signatures");
        if (jsonArraysignatures != null) {
          // ensure the json data is an array
          if (!jsonObj.get("signatures").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `signatures` to be an array in the JSON string but got `%s`", jsonObj.get("signatures").toString()));
          }

          // validate the optional field `signatures` (array)
          for (int i = 0; i < jsonArraysignatures.size(); i++) {
            Signature.validateJsonElement(jsonArraysignatures.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GenericSignedAttestation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GenericSignedAttestation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GenericSignedAttestation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GenericSignedAttestation.class));

       return (TypeAdapter<T>) new TypeAdapter<GenericSignedAttestation>() {
           @Override
           public void write(JsonWriter out, GenericSignedAttestation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GenericSignedAttestation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GenericSignedAttestation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GenericSignedAttestation
   * @throws IOException if the JSON string is invalid with respect to GenericSignedAttestation
   */
  public static GenericSignedAttestation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GenericSignedAttestation.class);
  }

  /**
   * Convert an instance of GenericSignedAttestation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

