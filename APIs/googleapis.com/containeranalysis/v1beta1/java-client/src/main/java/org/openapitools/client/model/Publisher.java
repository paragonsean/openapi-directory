/*
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Publisher contains information about the publisher of this Note.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:38:41.469450-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Publisher {
  public static final String SERIALIZED_NAME_ISSUING_AUTHORITY = "issuingAuthority";
  @SerializedName(SERIALIZED_NAME_ISSUING_AUTHORITY)
  private String issuingAuthority;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PUBLISHER_NAMESPACE = "publisherNamespace";
  @SerializedName(SERIALIZED_NAME_PUBLISHER_NAMESPACE)
  private String publisherNamespace;

  public Publisher() {
  }

  public Publisher issuingAuthority(String issuingAuthority) {
    this.issuingAuthority = issuingAuthority;
    return this;
  }

  /**
   * Provides information about the authority of the issuing party to release the document, in particular, the party&#39;s constituency and responsibilities or other obligations.
   * @return issuingAuthority
   */
  @javax.annotation.Nullable
  public String getIssuingAuthority() {
    return issuingAuthority;
  }

  public void setIssuingAuthority(String issuingAuthority) {
    this.issuingAuthority = issuingAuthority;
  }


  public Publisher name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Name of the publisher. Examples: &#39;Google&#39;, &#39;Google Cloud Platform&#39;.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Publisher publisherNamespace(String publisherNamespace) {
    this.publisherNamespace = publisherNamespace;
    return this;
  }

  /**
   * The context or namespace. Contains a URL which is under control of the issuing party and can be used as a globally unique identifier for that issuing party. Example: https://csaf.io
   * @return publisherNamespace
   */
  @javax.annotation.Nullable
  public String getPublisherNamespace() {
    return publisherNamespace;
  }

  public void setPublisherNamespace(String publisherNamespace) {
    this.publisherNamespace = publisherNamespace;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Publisher publisher = (Publisher) o;
    return Objects.equals(this.issuingAuthority, publisher.issuingAuthority) &&
        Objects.equals(this.name, publisher.name) &&
        Objects.equals(this.publisherNamespace, publisher.publisherNamespace);
  }

  @Override
  public int hashCode() {
    return Objects.hash(issuingAuthority, name, publisherNamespace);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Publisher {\n");
    sb.append("    issuingAuthority: ").append(toIndentedString(issuingAuthority)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    publisherNamespace: ").append(toIndentedString(publisherNamespace)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("issuingAuthority");
    openapiFields.add("name");
    openapiFields.add("publisherNamespace");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Publisher
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Publisher.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Publisher is not found in the empty JSON string", Publisher.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Publisher.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Publisher` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("issuingAuthority") != null && !jsonObj.get("issuingAuthority").isJsonNull()) && !jsonObj.get("issuingAuthority").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `issuingAuthority` to be a primitive type in the JSON string but got `%s`", jsonObj.get("issuingAuthority").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("publisherNamespace") != null && !jsonObj.get("publisherNamespace").isJsonNull()) && !jsonObj.get("publisherNamespace").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `publisherNamespace` to be a primitive type in the JSON string but got `%s`", jsonObj.get("publisherNamespace").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Publisher.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Publisher' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Publisher> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Publisher.class));

       return (TypeAdapter<T>) new TypeAdapter<Publisher>() {
           @Override
           public void write(JsonWriter out, Publisher value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Publisher read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Publisher given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Publisher
   * @throws IOException if the JSON string is invalid with respect to Publisher
   */
  public static Publisher fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Publisher.class);
  }

  /**
   * Convert an instance of Publisher to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

