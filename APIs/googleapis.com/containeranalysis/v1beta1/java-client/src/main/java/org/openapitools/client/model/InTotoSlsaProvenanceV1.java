/*
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.SlsaProvenanceV1;
import org.openapitools.client.model.Subject;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * InTotoSlsaProvenanceV1
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:38:41.469450-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class InTotoSlsaProvenanceV1 {
  public static final String SERIALIZED_NAME_TYPE = "_type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_PREDICATE = "predicate";
  @SerializedName(SERIALIZED_NAME_PREDICATE)
  private SlsaProvenanceV1 predicate;

  public static final String SERIALIZED_NAME_PREDICATE_TYPE = "predicateType";
  @SerializedName(SERIALIZED_NAME_PREDICATE_TYPE)
  private String predicateType;

  public static final String SERIALIZED_NAME_SUBJECT = "subject";
  @SerializedName(SERIALIZED_NAME_SUBJECT)
  private List<Subject> subject = new ArrayList<>();

  public InTotoSlsaProvenanceV1() {
  }

  public InTotoSlsaProvenanceV1 type(String type) {
    this.type = type;
    return this;
  }

  /**
   * InToto spec defined at https://github.com/in-toto/attestation/tree/main/spec#statement
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public InTotoSlsaProvenanceV1 predicate(SlsaProvenanceV1 predicate) {
    this.predicate = predicate;
    return this;
  }

  /**
   * Get predicate
   * @return predicate
   */
  @javax.annotation.Nullable
  public SlsaProvenanceV1 getPredicate() {
    return predicate;
  }

  public void setPredicate(SlsaProvenanceV1 predicate) {
    this.predicate = predicate;
  }


  public InTotoSlsaProvenanceV1 predicateType(String predicateType) {
    this.predicateType = predicateType;
    return this;
  }

  /**
   * Get predicateType
   * @return predicateType
   */
  @javax.annotation.Nullable
  public String getPredicateType() {
    return predicateType;
  }

  public void setPredicateType(String predicateType) {
    this.predicateType = predicateType;
  }


  public InTotoSlsaProvenanceV1 subject(List<Subject> subject) {
    this.subject = subject;
    return this;
  }

  public InTotoSlsaProvenanceV1 addSubjectItem(Subject subjectItem) {
    if (this.subject == null) {
      this.subject = new ArrayList<>();
    }
    this.subject.add(subjectItem);
    return this;
  }

  /**
   * Get subject
   * @return subject
   */
  @javax.annotation.Nullable
  public List<Subject> getSubject() {
    return subject;
  }

  public void setSubject(List<Subject> subject) {
    this.subject = subject;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InTotoSlsaProvenanceV1 inTotoSlsaProvenanceV1 = (InTotoSlsaProvenanceV1) o;
    return Objects.equals(this.type, inTotoSlsaProvenanceV1.type) &&
        Objects.equals(this.predicate, inTotoSlsaProvenanceV1.predicate) &&
        Objects.equals(this.predicateType, inTotoSlsaProvenanceV1.predicateType) &&
        Objects.equals(this.subject, inTotoSlsaProvenanceV1.subject);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, predicate, predicateType, subject);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InTotoSlsaProvenanceV1 {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    predicate: ").append(toIndentedString(predicate)).append("\n");
    sb.append("    predicateType: ").append(toIndentedString(predicateType)).append("\n");
    sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("_type");
    openapiFields.add("predicate");
    openapiFields.add("predicateType");
    openapiFields.add("subject");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InTotoSlsaProvenanceV1
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InTotoSlsaProvenanceV1.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InTotoSlsaProvenanceV1 is not found in the empty JSON string", InTotoSlsaProvenanceV1.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InTotoSlsaProvenanceV1.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InTotoSlsaProvenanceV1` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("_type") != null && !jsonObj.get("_type").isJsonNull()) && !jsonObj.get("_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("_type").toString()));
      }
      // validate the optional field `predicate`
      if (jsonObj.get("predicate") != null && !jsonObj.get("predicate").isJsonNull()) {
        SlsaProvenanceV1.validateJsonElement(jsonObj.get("predicate"));
      }
      if ((jsonObj.get("predicateType") != null && !jsonObj.get("predicateType").isJsonNull()) && !jsonObj.get("predicateType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `predicateType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("predicateType").toString()));
      }
      if (jsonObj.get("subject") != null && !jsonObj.get("subject").isJsonNull()) {
        JsonArray jsonArraysubject = jsonObj.getAsJsonArray("subject");
        if (jsonArraysubject != null) {
          // ensure the json data is an array
          if (!jsonObj.get("subject").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `subject` to be an array in the JSON string but got `%s`", jsonObj.get("subject").toString()));
          }

          // validate the optional field `subject` (array)
          for (int i = 0; i < jsonArraysubject.size(); i++) {
            Subject.validateJsonElement(jsonArraysubject.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InTotoSlsaProvenanceV1.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InTotoSlsaProvenanceV1' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InTotoSlsaProvenanceV1> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InTotoSlsaProvenanceV1.class));

       return (TypeAdapter<T>) new TypeAdapter<InTotoSlsaProvenanceV1>() {
           @Override
           public void write(JsonWriter out, InTotoSlsaProvenanceV1 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InTotoSlsaProvenanceV1 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InTotoSlsaProvenanceV1 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InTotoSlsaProvenanceV1
   * @throws IOException if the JSON string is invalid with respect to InTotoSlsaProvenanceV1
   */
  public static InTotoSlsaProvenanceV1 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InTotoSlsaProvenanceV1.class);
  }

  /**
   * Convert an instance of InTotoSlsaProvenanceV1 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

