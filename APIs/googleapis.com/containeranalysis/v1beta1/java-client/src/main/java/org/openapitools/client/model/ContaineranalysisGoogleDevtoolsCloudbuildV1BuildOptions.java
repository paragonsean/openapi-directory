/*
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptionsPoolOption;
import org.openapitools.client.model.ContaineranalysisGoogleDevtoolsCloudbuildV1Volume;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Optional arguments to enable specific features of builds.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:38:41.469450-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions {
  public static final String SERIALIZED_NAME_AUTOMAP_SUBSTITUTIONS = "automapSubstitutions";
  @SerializedName(SERIALIZED_NAME_AUTOMAP_SUBSTITUTIONS)
  private Boolean automapSubstitutions;

  /**
   * Optional. Option to specify how default logs buckets are setup.
   */
  @JsonAdapter(DefaultLogsBucketBehaviorEnum.Adapter.class)
  public enum DefaultLogsBucketBehaviorEnum {
    DEFAULT_LOGS_BUCKET_BEHAVIOR_UNSPECIFIED("DEFAULT_LOGS_BUCKET_BEHAVIOR_UNSPECIFIED"),
    
    REGIONAL_USER_OWNED_BUCKET("REGIONAL_USER_OWNED_BUCKET");

    private String value;

    DefaultLogsBucketBehaviorEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DefaultLogsBucketBehaviorEnum fromValue(String value) {
      for (DefaultLogsBucketBehaviorEnum b : DefaultLogsBucketBehaviorEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DefaultLogsBucketBehaviorEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DefaultLogsBucketBehaviorEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DefaultLogsBucketBehaviorEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DefaultLogsBucketBehaviorEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DefaultLogsBucketBehaviorEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DEFAULT_LOGS_BUCKET_BEHAVIOR = "defaultLogsBucketBehavior";
  @SerializedName(SERIALIZED_NAME_DEFAULT_LOGS_BUCKET_BEHAVIOR)
  private DefaultLogsBucketBehaviorEnum defaultLogsBucketBehavior;

  public static final String SERIALIZED_NAME_DISK_SIZE_GB = "diskSizeGb";
  @SerializedName(SERIALIZED_NAME_DISK_SIZE_GB)
  private String diskSizeGb;

  public static final String SERIALIZED_NAME_DYNAMIC_SUBSTITUTIONS = "dynamicSubstitutions";
  @SerializedName(SERIALIZED_NAME_DYNAMIC_SUBSTITUTIONS)
  private Boolean dynamicSubstitutions;

  public static final String SERIALIZED_NAME_ENV = "env";
  @SerializedName(SERIALIZED_NAME_ENV)
  private List<String> env = new ArrayList<>();

  /**
   * Option to define build log streaming behavior to Cloud Storage.
   */
  @JsonAdapter(LogStreamingOptionEnum.Adapter.class)
  public enum LogStreamingOptionEnum {
    DEFAULT("STREAM_DEFAULT"),
    
    ON("STREAM_ON"),
    
    OFF("STREAM_OFF");

    private String value;

    LogStreamingOptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LogStreamingOptionEnum fromValue(String value) {
      for (LogStreamingOptionEnum b : LogStreamingOptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LogStreamingOptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LogStreamingOptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LogStreamingOptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LogStreamingOptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LogStreamingOptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LOG_STREAMING_OPTION = "logStreamingOption";
  @SerializedName(SERIALIZED_NAME_LOG_STREAMING_OPTION)
  private LogStreamingOptionEnum logStreamingOption;

  /**
   * Option to specify the logging mode, which determines if and where build logs are stored.
   */
  @JsonAdapter(LoggingEnum.Adapter.class)
  public enum LoggingEnum {
    LOGGING_UNSPECIFIED("LOGGING_UNSPECIFIED"),
    
    LEGACY("LEGACY"),
    
    GCS_ONLY("GCS_ONLY"),
    
    STACKDRIVER_ONLY("STACKDRIVER_ONLY"),
    
    CLOUD_LOGGING_ONLY("CLOUD_LOGGING_ONLY"),
    
    NONE("NONE");

    private String value;

    LoggingEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LoggingEnum fromValue(String value) {
      for (LoggingEnum b : LoggingEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LoggingEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LoggingEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LoggingEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LoggingEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LoggingEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LOGGING = "logging";
  @SerializedName(SERIALIZED_NAME_LOGGING)
  private LoggingEnum logging;

  /**
   * Compute Engine machine type on which to run the build.
   */
  @JsonAdapter(MachineTypeEnum.Adapter.class)
  public enum MachineTypeEnum {
    UNSPECIFIED("UNSPECIFIED"),
    
    N1_HIGHCPU_8("N1_HIGHCPU_8"),
    
    N1_HIGHCPU_32("N1_HIGHCPU_32"),
    
    E2_HIGHCPU_8("E2_HIGHCPU_8"),
    
    E2_HIGHCPU_32("E2_HIGHCPU_32"),
    
    E2_MEDIUM("E2_MEDIUM");

    private String value;

    MachineTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MachineTypeEnum fromValue(String value) {
      for (MachineTypeEnum b : MachineTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MachineTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MachineTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MachineTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MachineTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MachineTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MACHINE_TYPE = "machineType";
  @SerializedName(SERIALIZED_NAME_MACHINE_TYPE)
  private MachineTypeEnum machineType;

  public static final String SERIALIZED_NAME_POOL = "pool";
  @SerializedName(SERIALIZED_NAME_POOL)
  private ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptionsPoolOption pool;

  /**
   * Requested verifiability options.
   */
  @JsonAdapter(RequestedVerifyOptionEnum.Adapter.class)
  public enum RequestedVerifyOptionEnum {
    NOT_VERIFIED("NOT_VERIFIED"),
    
    VERIFIED("VERIFIED");

    private String value;

    RequestedVerifyOptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RequestedVerifyOptionEnum fromValue(String value) {
      for (RequestedVerifyOptionEnum b : RequestedVerifyOptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RequestedVerifyOptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RequestedVerifyOptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RequestedVerifyOptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RequestedVerifyOptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RequestedVerifyOptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_REQUESTED_VERIFY_OPTION = "requestedVerifyOption";
  @SerializedName(SERIALIZED_NAME_REQUESTED_VERIFY_OPTION)
  private RequestedVerifyOptionEnum requestedVerifyOption;

  public static final String SERIALIZED_NAME_SECRET_ENV = "secretEnv";
  @SerializedName(SERIALIZED_NAME_SECRET_ENV)
  private List<String> secretEnv = new ArrayList<>();

  /**
   * Gets or Sets sourceProvenanceHash
   */
  @JsonAdapter(SourceProvenanceHashEnum.Adapter.class)
  public enum SourceProvenanceHashEnum {
    NONE("NONE"),
    
    SHA256("SHA256"),
    
    MD5("MD5"),
    
    SHA512("SHA512");

    private String value;

    SourceProvenanceHashEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SourceProvenanceHashEnum fromValue(String value) {
      for (SourceProvenanceHashEnum b : SourceProvenanceHashEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SourceProvenanceHashEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SourceProvenanceHashEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SourceProvenanceHashEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SourceProvenanceHashEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SourceProvenanceHashEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SOURCE_PROVENANCE_HASH = "sourceProvenanceHash";
  @SerializedName(SERIALIZED_NAME_SOURCE_PROVENANCE_HASH)
  private List<SourceProvenanceHashEnum> sourceProvenanceHash = new ArrayList<>();

  /**
   * Option to specify behavior when there is an error in the substitution checks. NOTE: this is always set to ALLOW_LOOSE for triggered builds and cannot be overridden in the build configuration file.
   */
  @JsonAdapter(SubstitutionOptionEnum.Adapter.class)
  public enum SubstitutionOptionEnum {
    MUST_MATCH("MUST_MATCH"),
    
    ALLOW_LOOSE("ALLOW_LOOSE");

    private String value;

    SubstitutionOptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SubstitutionOptionEnum fromValue(String value) {
      for (SubstitutionOptionEnum b : SubstitutionOptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SubstitutionOptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SubstitutionOptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SubstitutionOptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SubstitutionOptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SubstitutionOptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SUBSTITUTION_OPTION = "substitutionOption";
  @SerializedName(SERIALIZED_NAME_SUBSTITUTION_OPTION)
  private SubstitutionOptionEnum substitutionOption;

  public static final String SERIALIZED_NAME_VOLUMES = "volumes";
  @SerializedName(SERIALIZED_NAME_VOLUMES)
  private List<ContaineranalysisGoogleDevtoolsCloudbuildV1Volume> volumes = new ArrayList<>();

  public static final String SERIALIZED_NAME_WORKER_POOL = "workerPool";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_WORKER_POOL)
  private String workerPool;

  public ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions() {
  }

  public ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions automapSubstitutions(Boolean automapSubstitutions) {
    this.automapSubstitutions = automapSubstitutions;
    return this;
  }

  /**
   * Option to include built-in and custom substitutions as env variables for all build steps.
   * @return automapSubstitutions
   */
  @javax.annotation.Nullable
  public Boolean getAutomapSubstitutions() {
    return automapSubstitutions;
  }

  public void setAutomapSubstitutions(Boolean automapSubstitutions) {
    this.automapSubstitutions = automapSubstitutions;
  }


  public ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions defaultLogsBucketBehavior(DefaultLogsBucketBehaviorEnum defaultLogsBucketBehavior) {
    this.defaultLogsBucketBehavior = defaultLogsBucketBehavior;
    return this;
  }

  /**
   * Optional. Option to specify how default logs buckets are setup.
   * @return defaultLogsBucketBehavior
   */
  @javax.annotation.Nullable
  public DefaultLogsBucketBehaviorEnum getDefaultLogsBucketBehavior() {
    return defaultLogsBucketBehavior;
  }

  public void setDefaultLogsBucketBehavior(DefaultLogsBucketBehaviorEnum defaultLogsBucketBehavior) {
    this.defaultLogsBucketBehavior = defaultLogsBucketBehavior;
  }


  public ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions diskSizeGb(String diskSizeGb) {
    this.diskSizeGb = diskSizeGb;
    return this;
  }

  /**
   * Requested disk size for the VM that runs the build. Note that this is *NOT* \&quot;disk free\&quot;; some of the space will be used by the operating system and build utilities. Also note that this is the minimum disk size that will be allocated for the build -- the build may run with a larger disk than requested. At present, the maximum disk size is 2000GB; builds that request more than the maximum are rejected with an error.
   * @return diskSizeGb
   */
  @javax.annotation.Nullable
  public String getDiskSizeGb() {
    return diskSizeGb;
  }

  public void setDiskSizeGb(String diskSizeGb) {
    this.diskSizeGb = diskSizeGb;
  }


  public ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions dynamicSubstitutions(Boolean dynamicSubstitutions) {
    this.dynamicSubstitutions = dynamicSubstitutions;
    return this;
  }

  /**
   * Option to specify whether or not to apply bash style string operations to the substitutions. NOTE: this is always enabled for triggered builds and cannot be overridden in the build configuration file.
   * @return dynamicSubstitutions
   */
  @javax.annotation.Nullable
  public Boolean getDynamicSubstitutions() {
    return dynamicSubstitutions;
  }

  public void setDynamicSubstitutions(Boolean dynamicSubstitutions) {
    this.dynamicSubstitutions = dynamicSubstitutions;
  }


  public ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions env(List<String> env) {
    this.env = env;
    return this;
  }

  public ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions addEnvItem(String envItem) {
    if (this.env == null) {
      this.env = new ArrayList<>();
    }
    this.env.add(envItem);
    return this;
  }

  /**
   * A list of global environment variable definitions that will exist for all build steps in this build. If a variable is defined in both globally and in a build step, the variable will use the build step value. The elements are of the form \&quot;KEY&#x3D;VALUE\&quot; for the environment variable \&quot;KEY\&quot; being given the value \&quot;VALUE\&quot;.
   * @return env
   */
  @javax.annotation.Nullable
  public List<String> getEnv() {
    return env;
  }

  public void setEnv(List<String> env) {
    this.env = env;
  }


  public ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions logStreamingOption(LogStreamingOptionEnum logStreamingOption) {
    this.logStreamingOption = logStreamingOption;
    return this;
  }

  /**
   * Option to define build log streaming behavior to Cloud Storage.
   * @return logStreamingOption
   */
  @javax.annotation.Nullable
  public LogStreamingOptionEnum getLogStreamingOption() {
    return logStreamingOption;
  }

  public void setLogStreamingOption(LogStreamingOptionEnum logStreamingOption) {
    this.logStreamingOption = logStreamingOption;
  }


  public ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions logging(LoggingEnum logging) {
    this.logging = logging;
    return this;
  }

  /**
   * Option to specify the logging mode, which determines if and where build logs are stored.
   * @return logging
   */
  @javax.annotation.Nullable
  public LoggingEnum getLogging() {
    return logging;
  }

  public void setLogging(LoggingEnum logging) {
    this.logging = logging;
  }


  public ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions machineType(MachineTypeEnum machineType) {
    this.machineType = machineType;
    return this;
  }

  /**
   * Compute Engine machine type on which to run the build.
   * @return machineType
   */
  @javax.annotation.Nullable
  public MachineTypeEnum getMachineType() {
    return machineType;
  }

  public void setMachineType(MachineTypeEnum machineType) {
    this.machineType = machineType;
  }


  public ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions pool(ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptionsPoolOption pool) {
    this.pool = pool;
    return this;
  }

  /**
   * Get pool
   * @return pool
   */
  @javax.annotation.Nullable
  public ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptionsPoolOption getPool() {
    return pool;
  }

  public void setPool(ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptionsPoolOption pool) {
    this.pool = pool;
  }


  public ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions requestedVerifyOption(RequestedVerifyOptionEnum requestedVerifyOption) {
    this.requestedVerifyOption = requestedVerifyOption;
    return this;
  }

  /**
   * Requested verifiability options.
   * @return requestedVerifyOption
   */
  @javax.annotation.Nullable
  public RequestedVerifyOptionEnum getRequestedVerifyOption() {
    return requestedVerifyOption;
  }

  public void setRequestedVerifyOption(RequestedVerifyOptionEnum requestedVerifyOption) {
    this.requestedVerifyOption = requestedVerifyOption;
  }


  public ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions secretEnv(List<String> secretEnv) {
    this.secretEnv = secretEnv;
    return this;
  }

  public ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions addSecretEnvItem(String secretEnvItem) {
    if (this.secretEnv == null) {
      this.secretEnv = new ArrayList<>();
    }
    this.secretEnv.add(secretEnvItem);
    return this;
  }

  /**
   * A list of global environment variables, which are encrypted using a Cloud Key Management Service crypto key. These values must be specified in the build&#39;s &#x60;Secret&#x60;. These variables will be available to all build steps in this build.
   * @return secretEnv
   */
  @javax.annotation.Nullable
  public List<String> getSecretEnv() {
    return secretEnv;
  }

  public void setSecretEnv(List<String> secretEnv) {
    this.secretEnv = secretEnv;
  }


  public ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions sourceProvenanceHash(List<SourceProvenanceHashEnum> sourceProvenanceHash) {
    this.sourceProvenanceHash = sourceProvenanceHash;
    return this;
  }

  public ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions addSourceProvenanceHashItem(SourceProvenanceHashEnum sourceProvenanceHashItem) {
    if (this.sourceProvenanceHash == null) {
      this.sourceProvenanceHash = new ArrayList<>();
    }
    this.sourceProvenanceHash.add(sourceProvenanceHashItem);
    return this;
  }

  /**
   * Requested hash for SourceProvenance.
   * @return sourceProvenanceHash
   */
  @javax.annotation.Nullable
  public List<SourceProvenanceHashEnum> getSourceProvenanceHash() {
    return sourceProvenanceHash;
  }

  public void setSourceProvenanceHash(List<SourceProvenanceHashEnum> sourceProvenanceHash) {
    this.sourceProvenanceHash = sourceProvenanceHash;
  }


  public ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions substitutionOption(SubstitutionOptionEnum substitutionOption) {
    this.substitutionOption = substitutionOption;
    return this;
  }

  /**
   * Option to specify behavior when there is an error in the substitution checks. NOTE: this is always set to ALLOW_LOOSE for triggered builds and cannot be overridden in the build configuration file.
   * @return substitutionOption
   */
  @javax.annotation.Nullable
  public SubstitutionOptionEnum getSubstitutionOption() {
    return substitutionOption;
  }

  public void setSubstitutionOption(SubstitutionOptionEnum substitutionOption) {
    this.substitutionOption = substitutionOption;
  }


  public ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions volumes(List<ContaineranalysisGoogleDevtoolsCloudbuildV1Volume> volumes) {
    this.volumes = volumes;
    return this;
  }

  public ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions addVolumesItem(ContaineranalysisGoogleDevtoolsCloudbuildV1Volume volumesItem) {
    if (this.volumes == null) {
      this.volumes = new ArrayList<>();
    }
    this.volumes.add(volumesItem);
    return this;
  }

  /**
   * Global list of volumes to mount for ALL build steps Each volume is created as an empty volume prior to starting the build process. Upon completion of the build, volumes and their contents are discarded. Global volume names and paths cannot conflict with the volumes defined a build step. Using a global volume in a build with only one step is not valid as it is indicative of a build request with an incorrect configuration.
   * @return volumes
   */
  @javax.annotation.Nullable
  public List<ContaineranalysisGoogleDevtoolsCloudbuildV1Volume> getVolumes() {
    return volumes;
  }

  public void setVolumes(List<ContaineranalysisGoogleDevtoolsCloudbuildV1Volume> volumes) {
    this.volumes = volumes;
  }


  @Deprecated
  public ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions workerPool(String workerPool) {
    this.workerPool = workerPool;
    return this;
  }

  /**
   * This field deprecated; please use &#x60;pool.name&#x60; instead.
   * @return workerPool
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public String getWorkerPool() {
    return workerPool;
  }

  @Deprecated
  public void setWorkerPool(String workerPool) {
    this.workerPool = workerPool;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions containeranalysisGoogleDevtoolsCloudbuildV1BuildOptions = (ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions) o;
    return Objects.equals(this.automapSubstitutions, containeranalysisGoogleDevtoolsCloudbuildV1BuildOptions.automapSubstitutions) &&
        Objects.equals(this.defaultLogsBucketBehavior, containeranalysisGoogleDevtoolsCloudbuildV1BuildOptions.defaultLogsBucketBehavior) &&
        Objects.equals(this.diskSizeGb, containeranalysisGoogleDevtoolsCloudbuildV1BuildOptions.diskSizeGb) &&
        Objects.equals(this.dynamicSubstitutions, containeranalysisGoogleDevtoolsCloudbuildV1BuildOptions.dynamicSubstitutions) &&
        Objects.equals(this.env, containeranalysisGoogleDevtoolsCloudbuildV1BuildOptions.env) &&
        Objects.equals(this.logStreamingOption, containeranalysisGoogleDevtoolsCloudbuildV1BuildOptions.logStreamingOption) &&
        Objects.equals(this.logging, containeranalysisGoogleDevtoolsCloudbuildV1BuildOptions.logging) &&
        Objects.equals(this.machineType, containeranalysisGoogleDevtoolsCloudbuildV1BuildOptions.machineType) &&
        Objects.equals(this.pool, containeranalysisGoogleDevtoolsCloudbuildV1BuildOptions.pool) &&
        Objects.equals(this.requestedVerifyOption, containeranalysisGoogleDevtoolsCloudbuildV1BuildOptions.requestedVerifyOption) &&
        Objects.equals(this.secretEnv, containeranalysisGoogleDevtoolsCloudbuildV1BuildOptions.secretEnv) &&
        Objects.equals(this.sourceProvenanceHash, containeranalysisGoogleDevtoolsCloudbuildV1BuildOptions.sourceProvenanceHash) &&
        Objects.equals(this.substitutionOption, containeranalysisGoogleDevtoolsCloudbuildV1BuildOptions.substitutionOption) &&
        Objects.equals(this.volumes, containeranalysisGoogleDevtoolsCloudbuildV1BuildOptions.volumes) &&
        Objects.equals(this.workerPool, containeranalysisGoogleDevtoolsCloudbuildV1BuildOptions.workerPool);
  }

  @Override
  public int hashCode() {
    return Objects.hash(automapSubstitutions, defaultLogsBucketBehavior, diskSizeGb, dynamicSubstitutions, env, logStreamingOption, logging, machineType, pool, requestedVerifyOption, secretEnv, sourceProvenanceHash, substitutionOption, volumes, workerPool);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions {\n");
    sb.append("    automapSubstitutions: ").append(toIndentedString(automapSubstitutions)).append("\n");
    sb.append("    defaultLogsBucketBehavior: ").append(toIndentedString(defaultLogsBucketBehavior)).append("\n");
    sb.append("    diskSizeGb: ").append(toIndentedString(diskSizeGb)).append("\n");
    sb.append("    dynamicSubstitutions: ").append(toIndentedString(dynamicSubstitutions)).append("\n");
    sb.append("    env: ").append(toIndentedString(env)).append("\n");
    sb.append("    logStreamingOption: ").append(toIndentedString(logStreamingOption)).append("\n");
    sb.append("    logging: ").append(toIndentedString(logging)).append("\n");
    sb.append("    machineType: ").append(toIndentedString(machineType)).append("\n");
    sb.append("    pool: ").append(toIndentedString(pool)).append("\n");
    sb.append("    requestedVerifyOption: ").append(toIndentedString(requestedVerifyOption)).append("\n");
    sb.append("    secretEnv: ").append(toIndentedString(secretEnv)).append("\n");
    sb.append("    sourceProvenanceHash: ").append(toIndentedString(sourceProvenanceHash)).append("\n");
    sb.append("    substitutionOption: ").append(toIndentedString(substitutionOption)).append("\n");
    sb.append("    volumes: ").append(toIndentedString(volumes)).append("\n");
    sb.append("    workerPool: ").append(toIndentedString(workerPool)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("automapSubstitutions");
    openapiFields.add("defaultLogsBucketBehavior");
    openapiFields.add("diskSizeGb");
    openapiFields.add("dynamicSubstitutions");
    openapiFields.add("env");
    openapiFields.add("logStreamingOption");
    openapiFields.add("logging");
    openapiFields.add("machineType");
    openapiFields.add("pool");
    openapiFields.add("requestedVerifyOption");
    openapiFields.add("secretEnv");
    openapiFields.add("sourceProvenanceHash");
    openapiFields.add("substitutionOption");
    openapiFields.add("volumes");
    openapiFields.add("workerPool");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions is not found in the empty JSON string", ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("defaultLogsBucketBehavior") != null && !jsonObj.get("defaultLogsBucketBehavior").isJsonNull()) && !jsonObj.get("defaultLogsBucketBehavior").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `defaultLogsBucketBehavior` to be a primitive type in the JSON string but got `%s`", jsonObj.get("defaultLogsBucketBehavior").toString()));
      }
      // validate the optional field `defaultLogsBucketBehavior`
      if (jsonObj.get("defaultLogsBucketBehavior") != null && !jsonObj.get("defaultLogsBucketBehavior").isJsonNull()) {
        DefaultLogsBucketBehaviorEnum.validateJsonElement(jsonObj.get("defaultLogsBucketBehavior"));
      }
      if ((jsonObj.get("diskSizeGb") != null && !jsonObj.get("diskSizeGb").isJsonNull()) && !jsonObj.get("diskSizeGb").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `diskSizeGb` to be a primitive type in the JSON string but got `%s`", jsonObj.get("diskSizeGb").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("env") != null && !jsonObj.get("env").isJsonNull() && !jsonObj.get("env").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `env` to be an array in the JSON string but got `%s`", jsonObj.get("env").toString()));
      }
      if ((jsonObj.get("logStreamingOption") != null && !jsonObj.get("logStreamingOption").isJsonNull()) && !jsonObj.get("logStreamingOption").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `logStreamingOption` to be a primitive type in the JSON string but got `%s`", jsonObj.get("logStreamingOption").toString()));
      }
      // validate the optional field `logStreamingOption`
      if (jsonObj.get("logStreamingOption") != null && !jsonObj.get("logStreamingOption").isJsonNull()) {
        LogStreamingOptionEnum.validateJsonElement(jsonObj.get("logStreamingOption"));
      }
      if ((jsonObj.get("logging") != null && !jsonObj.get("logging").isJsonNull()) && !jsonObj.get("logging").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `logging` to be a primitive type in the JSON string but got `%s`", jsonObj.get("logging").toString()));
      }
      // validate the optional field `logging`
      if (jsonObj.get("logging") != null && !jsonObj.get("logging").isJsonNull()) {
        LoggingEnum.validateJsonElement(jsonObj.get("logging"));
      }
      if ((jsonObj.get("machineType") != null && !jsonObj.get("machineType").isJsonNull()) && !jsonObj.get("machineType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `machineType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("machineType").toString()));
      }
      // validate the optional field `machineType`
      if (jsonObj.get("machineType") != null && !jsonObj.get("machineType").isJsonNull()) {
        MachineTypeEnum.validateJsonElement(jsonObj.get("machineType"));
      }
      // validate the optional field `pool`
      if (jsonObj.get("pool") != null && !jsonObj.get("pool").isJsonNull()) {
        ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptionsPoolOption.validateJsonElement(jsonObj.get("pool"));
      }
      if ((jsonObj.get("requestedVerifyOption") != null && !jsonObj.get("requestedVerifyOption").isJsonNull()) && !jsonObj.get("requestedVerifyOption").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `requestedVerifyOption` to be a primitive type in the JSON string but got `%s`", jsonObj.get("requestedVerifyOption").toString()));
      }
      // validate the optional field `requestedVerifyOption`
      if (jsonObj.get("requestedVerifyOption") != null && !jsonObj.get("requestedVerifyOption").isJsonNull()) {
        RequestedVerifyOptionEnum.validateJsonElement(jsonObj.get("requestedVerifyOption"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("secretEnv") != null && !jsonObj.get("secretEnv").isJsonNull() && !jsonObj.get("secretEnv").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `secretEnv` to be an array in the JSON string but got `%s`", jsonObj.get("secretEnv").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("sourceProvenanceHash") != null && !jsonObj.get("sourceProvenanceHash").isJsonNull() && !jsonObj.get("sourceProvenanceHash").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceProvenanceHash` to be an array in the JSON string but got `%s`", jsonObj.get("sourceProvenanceHash").toString()));
      }
      if ((jsonObj.get("substitutionOption") != null && !jsonObj.get("substitutionOption").isJsonNull()) && !jsonObj.get("substitutionOption").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `substitutionOption` to be a primitive type in the JSON string but got `%s`", jsonObj.get("substitutionOption").toString()));
      }
      // validate the optional field `substitutionOption`
      if (jsonObj.get("substitutionOption") != null && !jsonObj.get("substitutionOption").isJsonNull()) {
        SubstitutionOptionEnum.validateJsonElement(jsonObj.get("substitutionOption"));
      }
      if (jsonObj.get("volumes") != null && !jsonObj.get("volumes").isJsonNull()) {
        JsonArray jsonArrayvolumes = jsonObj.getAsJsonArray("volumes");
        if (jsonArrayvolumes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("volumes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `volumes` to be an array in the JSON string but got `%s`", jsonObj.get("volumes").toString()));
          }

          // validate the optional field `volumes` (array)
          for (int i = 0; i < jsonArrayvolumes.size(); i++) {
            ContaineranalysisGoogleDevtoolsCloudbuildV1Volume.validateJsonElement(jsonArrayvolumes.get(i));
          };
        }
      }
      if ((jsonObj.get("workerPool") != null && !jsonObj.get("workerPool").isJsonNull()) && !jsonObj.get("workerPool").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `workerPool` to be a primitive type in the JSON string but got `%s`", jsonObj.get("workerPool").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions.class));

       return (TypeAdapter<T>) new TypeAdapter<ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions>() {
           @Override
           public void write(JsonWriter out, ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions
   * @throws IOException if the JSON string is invalid with respect to ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions
   */
  public static ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions.class);
  }

  /**
   * Convert an instance of ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

