/*
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Fingerprint;
import org.openapitools.client.model.Layer;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Derived describes the derived image portion (Occurrence) of the DockerImage relationship. This image would be produced from a Dockerfile with FROM .
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:38:41.469450-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Derived {
  public static final String SERIALIZED_NAME_BASE_RESOURCE_URL = "baseResourceUrl";
  @SerializedName(SERIALIZED_NAME_BASE_RESOURCE_URL)
  private String baseResourceUrl;

  public static final String SERIALIZED_NAME_DISTANCE = "distance";
  @SerializedName(SERIALIZED_NAME_DISTANCE)
  private Integer distance;

  public static final String SERIALIZED_NAME_FINGERPRINT = "fingerprint";
  @SerializedName(SERIALIZED_NAME_FINGERPRINT)
  private Fingerprint fingerprint;

  public static final String SERIALIZED_NAME_LAYER_INFO = "layerInfo";
  @SerializedName(SERIALIZED_NAME_LAYER_INFO)
  private List<Layer> layerInfo = new ArrayList<>();

  public Derived() {
  }

  public Derived baseResourceUrl(String baseResourceUrl) {
    this.baseResourceUrl = baseResourceUrl;
    return this;
  }

  /**
   * Output only. This contains the base image URL for the derived image occurrence.
   * @return baseResourceUrl
   */
  @javax.annotation.Nullable
  public String getBaseResourceUrl() {
    return baseResourceUrl;
  }

  public void setBaseResourceUrl(String baseResourceUrl) {
    this.baseResourceUrl = baseResourceUrl;
  }


  public Derived distance(Integer distance) {
    this.distance = distance;
    return this;
  }

  /**
   * Output only. The number of layers by which this image differs from the associated image basis.
   * @return distance
   */
  @javax.annotation.Nullable
  public Integer getDistance() {
    return distance;
  }

  public void setDistance(Integer distance) {
    this.distance = distance;
  }


  public Derived fingerprint(Fingerprint fingerprint) {
    this.fingerprint = fingerprint;
    return this;
  }

  /**
   * Get fingerprint
   * @return fingerprint
   */
  @javax.annotation.Nullable
  public Fingerprint getFingerprint() {
    return fingerprint;
  }

  public void setFingerprint(Fingerprint fingerprint) {
    this.fingerprint = fingerprint;
  }


  public Derived layerInfo(List<Layer> layerInfo) {
    this.layerInfo = layerInfo;
    return this;
  }

  public Derived addLayerInfoItem(Layer layerInfoItem) {
    if (this.layerInfo == null) {
      this.layerInfo = new ArrayList<>();
    }
    this.layerInfo.add(layerInfoItem);
    return this;
  }

  /**
   * This contains layer-specific metadata, if populated it has length \&quot;distance\&quot; and is ordered with [distance] being the layer immediately following the base image and [1] being the final layer.
   * @return layerInfo
   */
  @javax.annotation.Nullable
  public List<Layer> getLayerInfo() {
    return layerInfo;
  }

  public void setLayerInfo(List<Layer> layerInfo) {
    this.layerInfo = layerInfo;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Derived derived = (Derived) o;
    return Objects.equals(this.baseResourceUrl, derived.baseResourceUrl) &&
        Objects.equals(this.distance, derived.distance) &&
        Objects.equals(this.fingerprint, derived.fingerprint) &&
        Objects.equals(this.layerInfo, derived.layerInfo);
  }

  @Override
  public int hashCode() {
    return Objects.hash(baseResourceUrl, distance, fingerprint, layerInfo);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Derived {\n");
    sb.append("    baseResourceUrl: ").append(toIndentedString(baseResourceUrl)).append("\n");
    sb.append("    distance: ").append(toIndentedString(distance)).append("\n");
    sb.append("    fingerprint: ").append(toIndentedString(fingerprint)).append("\n");
    sb.append("    layerInfo: ").append(toIndentedString(layerInfo)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("baseResourceUrl");
    openapiFields.add("distance");
    openapiFields.add("fingerprint");
    openapiFields.add("layerInfo");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Derived
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Derived.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Derived is not found in the empty JSON string", Derived.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Derived.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Derived` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("baseResourceUrl") != null && !jsonObj.get("baseResourceUrl").isJsonNull()) && !jsonObj.get("baseResourceUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `baseResourceUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("baseResourceUrl").toString()));
      }
      // validate the optional field `fingerprint`
      if (jsonObj.get("fingerprint") != null && !jsonObj.get("fingerprint").isJsonNull()) {
        Fingerprint.validateJsonElement(jsonObj.get("fingerprint"));
      }
      if (jsonObj.get("layerInfo") != null && !jsonObj.get("layerInfo").isJsonNull()) {
        JsonArray jsonArraylayerInfo = jsonObj.getAsJsonArray("layerInfo");
        if (jsonArraylayerInfo != null) {
          // ensure the json data is an array
          if (!jsonObj.get("layerInfo").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `layerInfo` to be an array in the JSON string but got `%s`", jsonObj.get("layerInfo").toString()));
          }

          // validate the optional field `layerInfo` (array)
          for (int i = 0; i < jsonArraylayerInfo.size(); i++) {
            Layer.validateJsonElement(jsonArraylayerInfo.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Derived.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Derived' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Derived> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Derived.class));

       return (TypeAdapter<T>) new TypeAdapter<Derived>() {
           @Override
           public void write(JsonWriter out, Derived value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Derived read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Derived given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Derived
   * @throws IOException if the JSON string is invalid with respect to Derived
   */
  public static Derived fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Derived.class);
  }

  /**
   * Convert an instance of Derived to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

