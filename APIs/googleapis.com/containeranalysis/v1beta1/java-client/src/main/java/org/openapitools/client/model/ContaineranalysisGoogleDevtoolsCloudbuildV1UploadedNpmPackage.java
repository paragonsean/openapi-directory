/*
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ContaineranalysisGoogleDevtoolsCloudbuildV1FileHashes;
import org.openapitools.client.model.ContaineranalysisGoogleDevtoolsCloudbuildV1TimeSpan;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An npm package uploaded to Artifact Registry using the NpmPackage directive.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:38:41.469450-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ContaineranalysisGoogleDevtoolsCloudbuildV1UploadedNpmPackage {
  public static final String SERIALIZED_NAME_FILE_HASHES = "fileHashes";
  @SerializedName(SERIALIZED_NAME_FILE_HASHES)
  private ContaineranalysisGoogleDevtoolsCloudbuildV1FileHashes fileHashes;

  public static final String SERIALIZED_NAME_PUSH_TIMING = "pushTiming";
  @SerializedName(SERIALIZED_NAME_PUSH_TIMING)
  private ContaineranalysisGoogleDevtoolsCloudbuildV1TimeSpan pushTiming;

  public static final String SERIALIZED_NAME_URI = "uri";
  @SerializedName(SERIALIZED_NAME_URI)
  private String uri;

  public ContaineranalysisGoogleDevtoolsCloudbuildV1UploadedNpmPackage() {
  }

  public ContaineranalysisGoogleDevtoolsCloudbuildV1UploadedNpmPackage fileHashes(ContaineranalysisGoogleDevtoolsCloudbuildV1FileHashes fileHashes) {
    this.fileHashes = fileHashes;
    return this;
  }

  /**
   * Get fileHashes
   * @return fileHashes
   */
  @javax.annotation.Nullable
  public ContaineranalysisGoogleDevtoolsCloudbuildV1FileHashes getFileHashes() {
    return fileHashes;
  }

  public void setFileHashes(ContaineranalysisGoogleDevtoolsCloudbuildV1FileHashes fileHashes) {
    this.fileHashes = fileHashes;
  }


  public ContaineranalysisGoogleDevtoolsCloudbuildV1UploadedNpmPackage pushTiming(ContaineranalysisGoogleDevtoolsCloudbuildV1TimeSpan pushTiming) {
    this.pushTiming = pushTiming;
    return this;
  }

  /**
   * Get pushTiming
   * @return pushTiming
   */
  @javax.annotation.Nullable
  public ContaineranalysisGoogleDevtoolsCloudbuildV1TimeSpan getPushTiming() {
    return pushTiming;
  }

  public void setPushTiming(ContaineranalysisGoogleDevtoolsCloudbuildV1TimeSpan pushTiming) {
    this.pushTiming = pushTiming;
  }


  public ContaineranalysisGoogleDevtoolsCloudbuildV1UploadedNpmPackage uri(String uri) {
    this.uri = uri;
    return this;
  }

  /**
   * URI of the uploaded npm package.
   * @return uri
   */
  @javax.annotation.Nullable
  public String getUri() {
    return uri;
  }

  public void setUri(String uri) {
    this.uri = uri;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ContaineranalysisGoogleDevtoolsCloudbuildV1UploadedNpmPackage containeranalysisGoogleDevtoolsCloudbuildV1UploadedNpmPackage = (ContaineranalysisGoogleDevtoolsCloudbuildV1UploadedNpmPackage) o;
    return Objects.equals(this.fileHashes, containeranalysisGoogleDevtoolsCloudbuildV1UploadedNpmPackage.fileHashes) &&
        Objects.equals(this.pushTiming, containeranalysisGoogleDevtoolsCloudbuildV1UploadedNpmPackage.pushTiming) &&
        Objects.equals(this.uri, containeranalysisGoogleDevtoolsCloudbuildV1UploadedNpmPackage.uri);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fileHashes, pushTiming, uri);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContaineranalysisGoogleDevtoolsCloudbuildV1UploadedNpmPackage {\n");
    sb.append("    fileHashes: ").append(toIndentedString(fileHashes)).append("\n");
    sb.append("    pushTiming: ").append(toIndentedString(pushTiming)).append("\n");
    sb.append("    uri: ").append(toIndentedString(uri)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("fileHashes");
    openapiFields.add("pushTiming");
    openapiFields.add("uri");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ContaineranalysisGoogleDevtoolsCloudbuildV1UploadedNpmPackage
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ContaineranalysisGoogleDevtoolsCloudbuildV1UploadedNpmPackage.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ContaineranalysisGoogleDevtoolsCloudbuildV1UploadedNpmPackage is not found in the empty JSON string", ContaineranalysisGoogleDevtoolsCloudbuildV1UploadedNpmPackage.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ContaineranalysisGoogleDevtoolsCloudbuildV1UploadedNpmPackage.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ContaineranalysisGoogleDevtoolsCloudbuildV1UploadedNpmPackage` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `fileHashes`
      if (jsonObj.get("fileHashes") != null && !jsonObj.get("fileHashes").isJsonNull()) {
        ContaineranalysisGoogleDevtoolsCloudbuildV1FileHashes.validateJsonElement(jsonObj.get("fileHashes"));
      }
      // validate the optional field `pushTiming`
      if (jsonObj.get("pushTiming") != null && !jsonObj.get("pushTiming").isJsonNull()) {
        ContaineranalysisGoogleDevtoolsCloudbuildV1TimeSpan.validateJsonElement(jsonObj.get("pushTiming"));
      }
      if ((jsonObj.get("uri") != null && !jsonObj.get("uri").isJsonNull()) && !jsonObj.get("uri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uri").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ContaineranalysisGoogleDevtoolsCloudbuildV1UploadedNpmPackage.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ContaineranalysisGoogleDevtoolsCloudbuildV1UploadedNpmPackage' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ContaineranalysisGoogleDevtoolsCloudbuildV1UploadedNpmPackage> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ContaineranalysisGoogleDevtoolsCloudbuildV1UploadedNpmPackage.class));

       return (TypeAdapter<T>) new TypeAdapter<ContaineranalysisGoogleDevtoolsCloudbuildV1UploadedNpmPackage>() {
           @Override
           public void write(JsonWriter out, ContaineranalysisGoogleDevtoolsCloudbuildV1UploadedNpmPackage value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ContaineranalysisGoogleDevtoolsCloudbuildV1UploadedNpmPackage read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ContaineranalysisGoogleDevtoolsCloudbuildV1UploadedNpmPackage given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ContaineranalysisGoogleDevtoolsCloudbuildV1UploadedNpmPackage
   * @throws IOException if the JSON string is invalid with respect to ContaineranalysisGoogleDevtoolsCloudbuildV1UploadedNpmPackage
   */
  public static ContaineranalysisGoogleDevtoolsCloudbuildV1UploadedNpmPackage fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ContaineranalysisGoogleDevtoolsCloudbuildV1UploadedNpmPackage.class);
  }

  /**
   * Convert an instance of ContaineranalysisGoogleDevtoolsCloudbuildV1UploadedNpmPackage to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

