/*
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CVSS;
import org.openapitools.client.model.PackageIssue;
import org.openapitools.client.model.RelatedUrl;
import org.openapitools.client.model.VexAssessment;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Details of a vulnerability Occurrence.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:38:41.469450-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GrafeasV1beta1VulnerabilityDetails {
  public static final String SERIALIZED_NAME_CVSS_SCORE = "cvssScore";
  @SerializedName(SERIALIZED_NAME_CVSS_SCORE)
  private Float cvssScore;

  public static final String SERIALIZED_NAME_CVSS_V2 = "cvssV2";
  @SerializedName(SERIALIZED_NAME_CVSS_V2)
  private CVSS cvssV2;

  public static final String SERIALIZED_NAME_CVSS_V3 = "cvssV3";
  @SerializedName(SERIALIZED_NAME_CVSS_V3)
  private CVSS cvssV3;

  /**
   * Output only. CVSS version used to populate cvss_score and severity.
   */
  @JsonAdapter(CvssVersionEnum.Adapter.class)
  public enum CvssVersionEnum {
    UNSPECIFIED("CVSS_VERSION_UNSPECIFIED"),
    
    _2("CVSS_VERSION_2"),
    
    _3("CVSS_VERSION_3");

    private String value;

    CvssVersionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CvssVersionEnum fromValue(String value) {
      for (CvssVersionEnum b : CvssVersionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CvssVersionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CvssVersionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CvssVersionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CvssVersionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CvssVersionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CVSS_VERSION = "cvssVersion";
  @SerializedName(SERIALIZED_NAME_CVSS_VERSION)
  private CvssVersionEnum cvssVersion;

  /**
   * The distro assigned severity for this vulnerability when it is available, and note provider assigned severity when distro has not yet assigned a severity for this vulnerability. When there are multiple PackageIssues for this vulnerability, they can have different effective severities because some might be provided by the distro while others are provided by the language ecosystem for a language pack. For this reason, it is advised to use the effective severity on the PackageIssue level. In the case where multiple PackageIssues have differing effective severities, this field should be the highest severity for any of the PackageIssues.
   */
  @JsonAdapter(EffectiveSeverityEnum.Adapter.class)
  public enum EffectiveSeverityEnum {
    SEVERITY_UNSPECIFIED("SEVERITY_UNSPECIFIED"),
    
    MINIMAL("MINIMAL"),
    
    LOW("LOW"),
    
    MEDIUM("MEDIUM"),
    
    HIGH("HIGH"),
    
    CRITICAL("CRITICAL");

    private String value;

    EffectiveSeverityEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EffectiveSeverityEnum fromValue(String value) {
      for (EffectiveSeverityEnum b : EffectiveSeverityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EffectiveSeverityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EffectiveSeverityEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EffectiveSeverityEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EffectiveSeverityEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      EffectiveSeverityEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_EFFECTIVE_SEVERITY = "effectiveSeverity";
  @SerializedName(SERIALIZED_NAME_EFFECTIVE_SEVERITY)
  private EffectiveSeverityEnum effectiveSeverity;

  public static final String SERIALIZED_NAME_EXTRA_DETAILS = "extraDetails";
  @SerializedName(SERIALIZED_NAME_EXTRA_DETAILS)
  private String extraDetails;

  public static final String SERIALIZED_NAME_LONG_DESCRIPTION = "longDescription";
  @SerializedName(SERIALIZED_NAME_LONG_DESCRIPTION)
  private String longDescription;

  public static final String SERIALIZED_NAME_PACKAGE_ISSUE = "packageIssue";
  @SerializedName(SERIALIZED_NAME_PACKAGE_ISSUE)
  private List<PackageIssue> packageIssue = new ArrayList<>();

  public static final String SERIALIZED_NAME_RELATED_URLS = "relatedUrls";
  @SerializedName(SERIALIZED_NAME_RELATED_URLS)
  private List<RelatedUrl> relatedUrls = new ArrayList<>();

  /**
   * Output only. The note provider assigned Severity of the vulnerability.
   */
  @JsonAdapter(SeverityEnum.Adapter.class)
  public enum SeverityEnum {
    SEVERITY_UNSPECIFIED("SEVERITY_UNSPECIFIED"),
    
    MINIMAL("MINIMAL"),
    
    LOW("LOW"),
    
    MEDIUM("MEDIUM"),
    
    HIGH("HIGH"),
    
    CRITICAL("CRITICAL");

    private String value;

    SeverityEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SeverityEnum fromValue(String value) {
      for (SeverityEnum b : SeverityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SeverityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SeverityEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SeverityEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SeverityEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SeverityEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SEVERITY = "severity";
  @SerializedName(SERIALIZED_NAME_SEVERITY)
  private SeverityEnum severity;

  public static final String SERIALIZED_NAME_SHORT_DESCRIPTION = "shortDescription";
  @SerializedName(SERIALIZED_NAME_SHORT_DESCRIPTION)
  private String shortDescription;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_VEX_ASSESSMENT = "vexAssessment";
  @SerializedName(SERIALIZED_NAME_VEX_ASSESSMENT)
  private VexAssessment vexAssessment;

  public GrafeasV1beta1VulnerabilityDetails() {
  }

  public GrafeasV1beta1VulnerabilityDetails cvssScore(Float cvssScore) {
    this.cvssScore = cvssScore;
    return this;
  }

  /**
   * Output only. The CVSS score of this vulnerability. CVSS score is on a scale of 0-10 where 0 indicates low severity and 10 indicates high severity.
   * @return cvssScore
   */
  @javax.annotation.Nullable
  public Float getCvssScore() {
    return cvssScore;
  }

  public void setCvssScore(Float cvssScore) {
    this.cvssScore = cvssScore;
  }


  public GrafeasV1beta1VulnerabilityDetails cvssV2(CVSS cvssV2) {
    this.cvssV2 = cvssV2;
    return this;
  }

  /**
   * Get cvssV2
   * @return cvssV2
   */
  @javax.annotation.Nullable
  public CVSS getCvssV2() {
    return cvssV2;
  }

  public void setCvssV2(CVSS cvssV2) {
    this.cvssV2 = cvssV2;
  }


  public GrafeasV1beta1VulnerabilityDetails cvssV3(CVSS cvssV3) {
    this.cvssV3 = cvssV3;
    return this;
  }

  /**
   * Get cvssV3
   * @return cvssV3
   */
  @javax.annotation.Nullable
  public CVSS getCvssV3() {
    return cvssV3;
  }

  public void setCvssV3(CVSS cvssV3) {
    this.cvssV3 = cvssV3;
  }


  public GrafeasV1beta1VulnerabilityDetails cvssVersion(CvssVersionEnum cvssVersion) {
    this.cvssVersion = cvssVersion;
    return this;
  }

  /**
   * Output only. CVSS version used to populate cvss_score and severity.
   * @return cvssVersion
   */
  @javax.annotation.Nullable
  public CvssVersionEnum getCvssVersion() {
    return cvssVersion;
  }

  public void setCvssVersion(CvssVersionEnum cvssVersion) {
    this.cvssVersion = cvssVersion;
  }


  public GrafeasV1beta1VulnerabilityDetails effectiveSeverity(EffectiveSeverityEnum effectiveSeverity) {
    this.effectiveSeverity = effectiveSeverity;
    return this;
  }

  /**
   * The distro assigned severity for this vulnerability when it is available, and note provider assigned severity when distro has not yet assigned a severity for this vulnerability. When there are multiple PackageIssues for this vulnerability, they can have different effective severities because some might be provided by the distro while others are provided by the language ecosystem for a language pack. For this reason, it is advised to use the effective severity on the PackageIssue level. In the case where multiple PackageIssues have differing effective severities, this field should be the highest severity for any of the PackageIssues.
   * @return effectiveSeverity
   */
  @javax.annotation.Nullable
  public EffectiveSeverityEnum getEffectiveSeverity() {
    return effectiveSeverity;
  }

  public void setEffectiveSeverity(EffectiveSeverityEnum effectiveSeverity) {
    this.effectiveSeverity = effectiveSeverity;
  }


  public GrafeasV1beta1VulnerabilityDetails extraDetails(String extraDetails) {
    this.extraDetails = extraDetails;
    return this;
  }

  /**
   * Occurrence-specific extra details about the vulnerability.
   * @return extraDetails
   */
  @javax.annotation.Nullable
  public String getExtraDetails() {
    return extraDetails;
  }

  public void setExtraDetails(String extraDetails) {
    this.extraDetails = extraDetails;
  }


  public GrafeasV1beta1VulnerabilityDetails longDescription(String longDescription) {
    this.longDescription = longDescription;
    return this;
  }

  /**
   * Output only. A detailed description of this vulnerability.
   * @return longDescription
   */
  @javax.annotation.Nullable
  public String getLongDescription() {
    return longDescription;
  }

  public void setLongDescription(String longDescription) {
    this.longDescription = longDescription;
  }


  public GrafeasV1beta1VulnerabilityDetails packageIssue(List<PackageIssue> packageIssue) {
    this.packageIssue = packageIssue;
    return this;
  }

  public GrafeasV1beta1VulnerabilityDetails addPackageIssueItem(PackageIssue packageIssueItem) {
    if (this.packageIssue == null) {
      this.packageIssue = new ArrayList<>();
    }
    this.packageIssue.add(packageIssueItem);
    return this;
  }

  /**
   * Required. The set of affected locations and their fixes (if available) within the associated resource.
   * @return packageIssue
   */
  @javax.annotation.Nullable
  public List<PackageIssue> getPackageIssue() {
    return packageIssue;
  }

  public void setPackageIssue(List<PackageIssue> packageIssue) {
    this.packageIssue = packageIssue;
  }


  public GrafeasV1beta1VulnerabilityDetails relatedUrls(List<RelatedUrl> relatedUrls) {
    this.relatedUrls = relatedUrls;
    return this;
  }

  public GrafeasV1beta1VulnerabilityDetails addRelatedUrlsItem(RelatedUrl relatedUrlsItem) {
    if (this.relatedUrls == null) {
      this.relatedUrls = new ArrayList<>();
    }
    this.relatedUrls.add(relatedUrlsItem);
    return this;
  }

  /**
   * Output only. URLs related to this vulnerability.
   * @return relatedUrls
   */
  @javax.annotation.Nullable
  public List<RelatedUrl> getRelatedUrls() {
    return relatedUrls;
  }

  public void setRelatedUrls(List<RelatedUrl> relatedUrls) {
    this.relatedUrls = relatedUrls;
  }


  public GrafeasV1beta1VulnerabilityDetails severity(SeverityEnum severity) {
    this.severity = severity;
    return this;
  }

  /**
   * Output only. The note provider assigned Severity of the vulnerability.
   * @return severity
   */
  @javax.annotation.Nullable
  public SeverityEnum getSeverity() {
    return severity;
  }

  public void setSeverity(SeverityEnum severity) {
    this.severity = severity;
  }


  public GrafeasV1beta1VulnerabilityDetails shortDescription(String shortDescription) {
    this.shortDescription = shortDescription;
    return this;
  }

  /**
   * Output only. A one sentence description of this vulnerability.
   * @return shortDescription
   */
  @javax.annotation.Nullable
  public String getShortDescription() {
    return shortDescription;
  }

  public void setShortDescription(String shortDescription) {
    this.shortDescription = shortDescription;
  }


  public GrafeasV1beta1VulnerabilityDetails type(String type) {
    this.type = type;
    return this;
  }

  /**
   * The type of package; whether native or non native(ruby gems, node.js packages etc)
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public GrafeasV1beta1VulnerabilityDetails vexAssessment(VexAssessment vexAssessment) {
    this.vexAssessment = vexAssessment;
    return this;
  }

  /**
   * Get vexAssessment
   * @return vexAssessment
   */
  @javax.annotation.Nullable
  public VexAssessment getVexAssessment() {
    return vexAssessment;
  }

  public void setVexAssessment(VexAssessment vexAssessment) {
    this.vexAssessment = vexAssessment;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GrafeasV1beta1VulnerabilityDetails grafeasV1beta1VulnerabilityDetails = (GrafeasV1beta1VulnerabilityDetails) o;
    return Objects.equals(this.cvssScore, grafeasV1beta1VulnerabilityDetails.cvssScore) &&
        Objects.equals(this.cvssV2, grafeasV1beta1VulnerabilityDetails.cvssV2) &&
        Objects.equals(this.cvssV3, grafeasV1beta1VulnerabilityDetails.cvssV3) &&
        Objects.equals(this.cvssVersion, grafeasV1beta1VulnerabilityDetails.cvssVersion) &&
        Objects.equals(this.effectiveSeverity, grafeasV1beta1VulnerabilityDetails.effectiveSeverity) &&
        Objects.equals(this.extraDetails, grafeasV1beta1VulnerabilityDetails.extraDetails) &&
        Objects.equals(this.longDescription, grafeasV1beta1VulnerabilityDetails.longDescription) &&
        Objects.equals(this.packageIssue, grafeasV1beta1VulnerabilityDetails.packageIssue) &&
        Objects.equals(this.relatedUrls, grafeasV1beta1VulnerabilityDetails.relatedUrls) &&
        Objects.equals(this.severity, grafeasV1beta1VulnerabilityDetails.severity) &&
        Objects.equals(this.shortDescription, grafeasV1beta1VulnerabilityDetails.shortDescription) &&
        Objects.equals(this.type, grafeasV1beta1VulnerabilityDetails.type) &&
        Objects.equals(this.vexAssessment, grafeasV1beta1VulnerabilityDetails.vexAssessment);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cvssScore, cvssV2, cvssV3, cvssVersion, effectiveSeverity, extraDetails, longDescription, packageIssue, relatedUrls, severity, shortDescription, type, vexAssessment);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GrafeasV1beta1VulnerabilityDetails {\n");
    sb.append("    cvssScore: ").append(toIndentedString(cvssScore)).append("\n");
    sb.append("    cvssV2: ").append(toIndentedString(cvssV2)).append("\n");
    sb.append("    cvssV3: ").append(toIndentedString(cvssV3)).append("\n");
    sb.append("    cvssVersion: ").append(toIndentedString(cvssVersion)).append("\n");
    sb.append("    effectiveSeverity: ").append(toIndentedString(effectiveSeverity)).append("\n");
    sb.append("    extraDetails: ").append(toIndentedString(extraDetails)).append("\n");
    sb.append("    longDescription: ").append(toIndentedString(longDescription)).append("\n");
    sb.append("    packageIssue: ").append(toIndentedString(packageIssue)).append("\n");
    sb.append("    relatedUrls: ").append(toIndentedString(relatedUrls)).append("\n");
    sb.append("    severity: ").append(toIndentedString(severity)).append("\n");
    sb.append("    shortDescription: ").append(toIndentedString(shortDescription)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    vexAssessment: ").append(toIndentedString(vexAssessment)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cvssScore");
    openapiFields.add("cvssV2");
    openapiFields.add("cvssV3");
    openapiFields.add("cvssVersion");
    openapiFields.add("effectiveSeverity");
    openapiFields.add("extraDetails");
    openapiFields.add("longDescription");
    openapiFields.add("packageIssue");
    openapiFields.add("relatedUrls");
    openapiFields.add("severity");
    openapiFields.add("shortDescription");
    openapiFields.add("type");
    openapiFields.add("vexAssessment");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GrafeasV1beta1VulnerabilityDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GrafeasV1beta1VulnerabilityDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GrafeasV1beta1VulnerabilityDetails is not found in the empty JSON string", GrafeasV1beta1VulnerabilityDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GrafeasV1beta1VulnerabilityDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GrafeasV1beta1VulnerabilityDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `cvssV2`
      if (jsonObj.get("cvssV2") != null && !jsonObj.get("cvssV2").isJsonNull()) {
        CVSS.validateJsonElement(jsonObj.get("cvssV2"));
      }
      // validate the optional field `cvssV3`
      if (jsonObj.get("cvssV3") != null && !jsonObj.get("cvssV3").isJsonNull()) {
        CVSS.validateJsonElement(jsonObj.get("cvssV3"));
      }
      if ((jsonObj.get("cvssVersion") != null && !jsonObj.get("cvssVersion").isJsonNull()) && !jsonObj.get("cvssVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cvssVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cvssVersion").toString()));
      }
      // validate the optional field `cvssVersion`
      if (jsonObj.get("cvssVersion") != null && !jsonObj.get("cvssVersion").isJsonNull()) {
        CvssVersionEnum.validateJsonElement(jsonObj.get("cvssVersion"));
      }
      if ((jsonObj.get("effectiveSeverity") != null && !jsonObj.get("effectiveSeverity").isJsonNull()) && !jsonObj.get("effectiveSeverity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `effectiveSeverity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("effectiveSeverity").toString()));
      }
      // validate the optional field `effectiveSeverity`
      if (jsonObj.get("effectiveSeverity") != null && !jsonObj.get("effectiveSeverity").isJsonNull()) {
        EffectiveSeverityEnum.validateJsonElement(jsonObj.get("effectiveSeverity"));
      }
      if ((jsonObj.get("extraDetails") != null && !jsonObj.get("extraDetails").isJsonNull()) && !jsonObj.get("extraDetails").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `extraDetails` to be a primitive type in the JSON string but got `%s`", jsonObj.get("extraDetails").toString()));
      }
      if ((jsonObj.get("longDescription") != null && !jsonObj.get("longDescription").isJsonNull()) && !jsonObj.get("longDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `longDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("longDescription").toString()));
      }
      if (jsonObj.get("packageIssue") != null && !jsonObj.get("packageIssue").isJsonNull()) {
        JsonArray jsonArraypackageIssue = jsonObj.getAsJsonArray("packageIssue");
        if (jsonArraypackageIssue != null) {
          // ensure the json data is an array
          if (!jsonObj.get("packageIssue").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `packageIssue` to be an array in the JSON string but got `%s`", jsonObj.get("packageIssue").toString()));
          }

          // validate the optional field `packageIssue` (array)
          for (int i = 0; i < jsonArraypackageIssue.size(); i++) {
            PackageIssue.validateJsonElement(jsonArraypackageIssue.get(i));
          };
        }
      }
      if (jsonObj.get("relatedUrls") != null && !jsonObj.get("relatedUrls").isJsonNull()) {
        JsonArray jsonArrayrelatedUrls = jsonObj.getAsJsonArray("relatedUrls");
        if (jsonArrayrelatedUrls != null) {
          // ensure the json data is an array
          if (!jsonObj.get("relatedUrls").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `relatedUrls` to be an array in the JSON string but got `%s`", jsonObj.get("relatedUrls").toString()));
          }

          // validate the optional field `relatedUrls` (array)
          for (int i = 0; i < jsonArrayrelatedUrls.size(); i++) {
            RelatedUrl.validateJsonElement(jsonArrayrelatedUrls.get(i));
          };
        }
      }
      if ((jsonObj.get("severity") != null && !jsonObj.get("severity").isJsonNull()) && !jsonObj.get("severity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `severity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("severity").toString()));
      }
      // validate the optional field `severity`
      if (jsonObj.get("severity") != null && !jsonObj.get("severity").isJsonNull()) {
        SeverityEnum.validateJsonElement(jsonObj.get("severity"));
      }
      if ((jsonObj.get("shortDescription") != null && !jsonObj.get("shortDescription").isJsonNull()) && !jsonObj.get("shortDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shortDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shortDescription").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `vexAssessment`
      if (jsonObj.get("vexAssessment") != null && !jsonObj.get("vexAssessment").isJsonNull()) {
        VexAssessment.validateJsonElement(jsonObj.get("vexAssessment"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GrafeasV1beta1VulnerabilityDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GrafeasV1beta1VulnerabilityDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GrafeasV1beta1VulnerabilityDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GrafeasV1beta1VulnerabilityDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<GrafeasV1beta1VulnerabilityDetails>() {
           @Override
           public void write(JsonWriter out, GrafeasV1beta1VulnerabilityDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GrafeasV1beta1VulnerabilityDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GrafeasV1beta1VulnerabilityDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GrafeasV1beta1VulnerabilityDetails
   * @throws IOException if the JSON string is invalid with respect to GrafeasV1beta1VulnerabilityDetails
   */
  public static GrafeasV1beta1VulnerabilityDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GrafeasV1beta1VulnerabilityDetails.class);
  }

  /**
   * Convert an instance of GrafeasV1beta1VulnerabilityDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

