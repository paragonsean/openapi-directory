/*
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AnalysisCompleted;
import org.openapitools.client.model.SBOMStatus;
import org.openapitools.client.model.Status;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Provides information about the analysis status of a discovered resource.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:38:41.469450-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Discovered {
  public static final String SERIALIZED_NAME_ANALYSIS_COMPLETED = "analysisCompleted";
  @SerializedName(SERIALIZED_NAME_ANALYSIS_COMPLETED)
  private AnalysisCompleted analysisCompleted;

  public static final String SERIALIZED_NAME_ANALYSIS_ERROR = "analysisError";
  @SerializedName(SERIALIZED_NAME_ANALYSIS_ERROR)
  private List<Status> analysisError = new ArrayList<>();

  /**
   * The status of discovery for the resource.
   */
  @JsonAdapter(AnalysisStatusEnum.Adapter.class)
  public enum AnalysisStatusEnum {
    ANALYSIS_STATUS_UNSPECIFIED("ANALYSIS_STATUS_UNSPECIFIED"),
    
    PENDING("PENDING"),
    
    SCANNING("SCANNING"),
    
    FINISHED_SUCCESS("FINISHED_SUCCESS"),
    
    COMPLETE("COMPLETE"),
    
    FINISHED_FAILED("FINISHED_FAILED"),
    
    FINISHED_UNSUPPORTED("FINISHED_UNSUPPORTED");

    private String value;

    AnalysisStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AnalysisStatusEnum fromValue(String value) {
      for (AnalysisStatusEnum b : AnalysisStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AnalysisStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AnalysisStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AnalysisStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AnalysisStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AnalysisStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ANALYSIS_STATUS = "analysisStatus";
  @SerializedName(SERIALIZED_NAME_ANALYSIS_STATUS)
  private AnalysisStatusEnum analysisStatus;

  public static final String SERIALIZED_NAME_ANALYSIS_STATUS_ERROR = "analysisStatusError";
  @SerializedName(SERIALIZED_NAME_ANALYSIS_STATUS_ERROR)
  private Status analysisStatusError;

  /**
   * Whether the resource is continuously analyzed.
   */
  @JsonAdapter(ContinuousAnalysisEnum.Adapter.class)
  public enum ContinuousAnalysisEnum {
    CONTINUOUS_ANALYSIS_UNSPECIFIED("CONTINUOUS_ANALYSIS_UNSPECIFIED"),
    
    ACTIVE("ACTIVE"),
    
    INACTIVE("INACTIVE");

    private String value;

    ContinuousAnalysisEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ContinuousAnalysisEnum fromValue(String value) {
      for (ContinuousAnalysisEnum b : ContinuousAnalysisEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ContinuousAnalysisEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ContinuousAnalysisEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ContinuousAnalysisEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ContinuousAnalysisEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ContinuousAnalysisEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CONTINUOUS_ANALYSIS = "continuousAnalysis";
  @SerializedName(SERIALIZED_NAME_CONTINUOUS_ANALYSIS)
  private ContinuousAnalysisEnum continuousAnalysis;

  public static final String SERIALIZED_NAME_LAST_ANALYSIS_TIME = "lastAnalysisTime";
  @SerializedName(SERIALIZED_NAME_LAST_ANALYSIS_TIME)
  private String lastAnalysisTime;

  public static final String SERIALIZED_NAME_LAST_SCAN_TIME = "lastScanTime";
  @SerializedName(SERIALIZED_NAME_LAST_SCAN_TIME)
  private String lastScanTime;

  public static final String SERIALIZED_NAME_SBOM_STATUS = "sbomStatus";
  @SerializedName(SERIALIZED_NAME_SBOM_STATUS)
  private SBOMStatus sbomStatus;

  public Discovered() {
  }

  public Discovered analysisCompleted(AnalysisCompleted analysisCompleted) {
    this.analysisCompleted = analysisCompleted;
    return this;
  }

  /**
   * Get analysisCompleted
   * @return analysisCompleted
   */
  @javax.annotation.Nullable
  public AnalysisCompleted getAnalysisCompleted() {
    return analysisCompleted;
  }

  public void setAnalysisCompleted(AnalysisCompleted analysisCompleted) {
    this.analysisCompleted = analysisCompleted;
  }


  public Discovered analysisError(List<Status> analysisError) {
    this.analysisError = analysisError;
    return this;
  }

  public Discovered addAnalysisErrorItem(Status analysisErrorItem) {
    if (this.analysisError == null) {
      this.analysisError = new ArrayList<>();
    }
    this.analysisError.add(analysisErrorItem);
    return this;
  }

  /**
   * Indicates any errors encountered during analysis of a resource. There could be 0 or more of these errors.
   * @return analysisError
   */
  @javax.annotation.Nullable
  public List<Status> getAnalysisError() {
    return analysisError;
  }

  public void setAnalysisError(List<Status> analysisError) {
    this.analysisError = analysisError;
  }


  public Discovered analysisStatus(AnalysisStatusEnum analysisStatus) {
    this.analysisStatus = analysisStatus;
    return this;
  }

  /**
   * The status of discovery for the resource.
   * @return analysisStatus
   */
  @javax.annotation.Nullable
  public AnalysisStatusEnum getAnalysisStatus() {
    return analysisStatus;
  }

  public void setAnalysisStatus(AnalysisStatusEnum analysisStatus) {
    this.analysisStatus = analysisStatus;
  }


  public Discovered analysisStatusError(Status analysisStatusError) {
    this.analysisStatusError = analysisStatusError;
    return this;
  }

  /**
   * Get analysisStatusError
   * @return analysisStatusError
   */
  @javax.annotation.Nullable
  public Status getAnalysisStatusError() {
    return analysisStatusError;
  }

  public void setAnalysisStatusError(Status analysisStatusError) {
    this.analysisStatusError = analysisStatusError;
  }


  public Discovered continuousAnalysis(ContinuousAnalysisEnum continuousAnalysis) {
    this.continuousAnalysis = continuousAnalysis;
    return this;
  }

  /**
   * Whether the resource is continuously analyzed.
   * @return continuousAnalysis
   */
  @javax.annotation.Nullable
  public ContinuousAnalysisEnum getContinuousAnalysis() {
    return continuousAnalysis;
  }

  public void setContinuousAnalysis(ContinuousAnalysisEnum continuousAnalysis) {
    this.continuousAnalysis = continuousAnalysis;
  }


  public Discovered lastAnalysisTime(String lastAnalysisTime) {
    this.lastAnalysisTime = lastAnalysisTime;
    return this;
  }

  /**
   * The last time continuous analysis was done for this resource. Deprecated, do not use.
   * @return lastAnalysisTime
   */
  @javax.annotation.Nullable
  public String getLastAnalysisTime() {
    return lastAnalysisTime;
  }

  public void setLastAnalysisTime(String lastAnalysisTime) {
    this.lastAnalysisTime = lastAnalysisTime;
  }


  public Discovered lastScanTime(String lastScanTime) {
    this.lastScanTime = lastScanTime;
    return this;
  }

  /**
   * The last time this resource was scanned.
   * @return lastScanTime
   */
  @javax.annotation.Nullable
  public String getLastScanTime() {
    return lastScanTime;
  }

  public void setLastScanTime(String lastScanTime) {
    this.lastScanTime = lastScanTime;
  }


  public Discovered sbomStatus(SBOMStatus sbomStatus) {
    this.sbomStatus = sbomStatus;
    return this;
  }

  /**
   * Get sbomStatus
   * @return sbomStatus
   */
  @javax.annotation.Nullable
  public SBOMStatus getSbomStatus() {
    return sbomStatus;
  }

  public void setSbomStatus(SBOMStatus sbomStatus) {
    this.sbomStatus = sbomStatus;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Discovered discovered = (Discovered) o;
    return Objects.equals(this.analysisCompleted, discovered.analysisCompleted) &&
        Objects.equals(this.analysisError, discovered.analysisError) &&
        Objects.equals(this.analysisStatus, discovered.analysisStatus) &&
        Objects.equals(this.analysisStatusError, discovered.analysisStatusError) &&
        Objects.equals(this.continuousAnalysis, discovered.continuousAnalysis) &&
        Objects.equals(this.lastAnalysisTime, discovered.lastAnalysisTime) &&
        Objects.equals(this.lastScanTime, discovered.lastScanTime) &&
        Objects.equals(this.sbomStatus, discovered.sbomStatus);
  }

  @Override
  public int hashCode() {
    return Objects.hash(analysisCompleted, analysisError, analysisStatus, analysisStatusError, continuousAnalysis, lastAnalysisTime, lastScanTime, sbomStatus);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Discovered {\n");
    sb.append("    analysisCompleted: ").append(toIndentedString(analysisCompleted)).append("\n");
    sb.append("    analysisError: ").append(toIndentedString(analysisError)).append("\n");
    sb.append("    analysisStatus: ").append(toIndentedString(analysisStatus)).append("\n");
    sb.append("    analysisStatusError: ").append(toIndentedString(analysisStatusError)).append("\n");
    sb.append("    continuousAnalysis: ").append(toIndentedString(continuousAnalysis)).append("\n");
    sb.append("    lastAnalysisTime: ").append(toIndentedString(lastAnalysisTime)).append("\n");
    sb.append("    lastScanTime: ").append(toIndentedString(lastScanTime)).append("\n");
    sb.append("    sbomStatus: ").append(toIndentedString(sbomStatus)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("analysisCompleted");
    openapiFields.add("analysisError");
    openapiFields.add("analysisStatus");
    openapiFields.add("analysisStatusError");
    openapiFields.add("continuousAnalysis");
    openapiFields.add("lastAnalysisTime");
    openapiFields.add("lastScanTime");
    openapiFields.add("sbomStatus");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Discovered
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Discovered.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Discovered is not found in the empty JSON string", Discovered.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Discovered.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Discovered` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `analysisCompleted`
      if (jsonObj.get("analysisCompleted") != null && !jsonObj.get("analysisCompleted").isJsonNull()) {
        AnalysisCompleted.validateJsonElement(jsonObj.get("analysisCompleted"));
      }
      if (jsonObj.get("analysisError") != null && !jsonObj.get("analysisError").isJsonNull()) {
        JsonArray jsonArrayanalysisError = jsonObj.getAsJsonArray("analysisError");
        if (jsonArrayanalysisError != null) {
          // ensure the json data is an array
          if (!jsonObj.get("analysisError").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `analysisError` to be an array in the JSON string but got `%s`", jsonObj.get("analysisError").toString()));
          }

          // validate the optional field `analysisError` (array)
          for (int i = 0; i < jsonArrayanalysisError.size(); i++) {
            Status.validateJsonElement(jsonArrayanalysisError.get(i));
          };
        }
      }
      if ((jsonObj.get("analysisStatus") != null && !jsonObj.get("analysisStatus").isJsonNull()) && !jsonObj.get("analysisStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `analysisStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("analysisStatus").toString()));
      }
      // validate the optional field `analysisStatus`
      if (jsonObj.get("analysisStatus") != null && !jsonObj.get("analysisStatus").isJsonNull()) {
        AnalysisStatusEnum.validateJsonElement(jsonObj.get("analysisStatus"));
      }
      // validate the optional field `analysisStatusError`
      if (jsonObj.get("analysisStatusError") != null && !jsonObj.get("analysisStatusError").isJsonNull()) {
        Status.validateJsonElement(jsonObj.get("analysisStatusError"));
      }
      if ((jsonObj.get("continuousAnalysis") != null && !jsonObj.get("continuousAnalysis").isJsonNull()) && !jsonObj.get("continuousAnalysis").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `continuousAnalysis` to be a primitive type in the JSON string but got `%s`", jsonObj.get("continuousAnalysis").toString()));
      }
      // validate the optional field `continuousAnalysis`
      if (jsonObj.get("continuousAnalysis") != null && !jsonObj.get("continuousAnalysis").isJsonNull()) {
        ContinuousAnalysisEnum.validateJsonElement(jsonObj.get("continuousAnalysis"));
      }
      if ((jsonObj.get("lastAnalysisTime") != null && !jsonObj.get("lastAnalysisTime").isJsonNull()) && !jsonObj.get("lastAnalysisTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastAnalysisTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastAnalysisTime").toString()));
      }
      if ((jsonObj.get("lastScanTime") != null && !jsonObj.get("lastScanTime").isJsonNull()) && !jsonObj.get("lastScanTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastScanTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastScanTime").toString()));
      }
      // validate the optional field `sbomStatus`
      if (jsonObj.get("sbomStatus") != null && !jsonObj.get("sbomStatus").isJsonNull()) {
        SBOMStatus.validateJsonElement(jsonObj.get("sbomStatus"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Discovered.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Discovered' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Discovered> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Discovered.class));

       return (TypeAdapter<T>) new TypeAdapter<Discovered>() {
           @Override
           public void write(JsonWriter out, Discovered value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Discovered read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Discovered given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Discovered
   * @throws IOException if the JSON string is invalid with respect to Discovered
   */
  public static Discovered fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Discovered.class);
  }

  /**
   * Convert an instance of Discovered to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

