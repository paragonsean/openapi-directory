/*
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.BuildDefinition;
import org.openapitools.client.model.RunDetails;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Keep in sync with schema at https://github.com/slsa-framework/slsa/blob/main/docs/provenance/schema/v1/provenance.proto Builder renamed to ProvenanceBuilder because of Java conflicts.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:38:41.469450-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SlsaProvenanceV1 {
  public static final String SERIALIZED_NAME_BUILD_DEFINITION = "buildDefinition";
  @SerializedName(SERIALIZED_NAME_BUILD_DEFINITION)
  private BuildDefinition buildDefinition;

  public static final String SERIALIZED_NAME_RUN_DETAILS = "runDetails";
  @SerializedName(SERIALIZED_NAME_RUN_DETAILS)
  private RunDetails runDetails;

  public SlsaProvenanceV1() {
  }

  public SlsaProvenanceV1 buildDefinition(BuildDefinition buildDefinition) {
    this.buildDefinition = buildDefinition;
    return this;
  }

  /**
   * Get buildDefinition
   * @return buildDefinition
   */
  @javax.annotation.Nullable
  public BuildDefinition getBuildDefinition() {
    return buildDefinition;
  }

  public void setBuildDefinition(BuildDefinition buildDefinition) {
    this.buildDefinition = buildDefinition;
  }


  public SlsaProvenanceV1 runDetails(RunDetails runDetails) {
    this.runDetails = runDetails;
    return this;
  }

  /**
   * Get runDetails
   * @return runDetails
   */
  @javax.annotation.Nullable
  public RunDetails getRunDetails() {
    return runDetails;
  }

  public void setRunDetails(RunDetails runDetails) {
    this.runDetails = runDetails;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SlsaProvenanceV1 slsaProvenanceV1 = (SlsaProvenanceV1) o;
    return Objects.equals(this.buildDefinition, slsaProvenanceV1.buildDefinition) &&
        Objects.equals(this.runDetails, slsaProvenanceV1.runDetails);
  }

  @Override
  public int hashCode() {
    return Objects.hash(buildDefinition, runDetails);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SlsaProvenanceV1 {\n");
    sb.append("    buildDefinition: ").append(toIndentedString(buildDefinition)).append("\n");
    sb.append("    runDetails: ").append(toIndentedString(runDetails)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("buildDefinition");
    openapiFields.add("runDetails");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SlsaProvenanceV1
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SlsaProvenanceV1.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SlsaProvenanceV1 is not found in the empty JSON string", SlsaProvenanceV1.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SlsaProvenanceV1.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SlsaProvenanceV1` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `buildDefinition`
      if (jsonObj.get("buildDefinition") != null && !jsonObj.get("buildDefinition").isJsonNull()) {
        BuildDefinition.validateJsonElement(jsonObj.get("buildDefinition"));
      }
      // validate the optional field `runDetails`
      if (jsonObj.get("runDetails") != null && !jsonObj.get("runDetails").isJsonNull()) {
        RunDetails.validateJsonElement(jsonObj.get("runDetails"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SlsaProvenanceV1.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SlsaProvenanceV1' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SlsaProvenanceV1> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SlsaProvenanceV1.class));

       return (TypeAdapter<T>) new TypeAdapter<SlsaProvenanceV1>() {
           @Override
           public void write(JsonWriter out, SlsaProvenanceV1 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SlsaProvenanceV1 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SlsaProvenanceV1 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SlsaProvenanceV1
   * @throws IOException if the JSON string is invalid with respect to SlsaProvenanceV1
   */
  public static SlsaProvenanceV1 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SlsaProvenanceV1.class);
  }

  /**
   * Convert an instance of SlsaProvenanceV1 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

