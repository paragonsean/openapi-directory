/*
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * This defines the format used to record keys used in the software supply chain. An in-toto link is attested using one or more keys defined in the in-toto layout. An example of this is: { \&quot;key_id\&quot;: \&quot;776a00e29f3559e0141b3b096f696abc6cfb0c657ab40f441132b345b0...\&quot;, \&quot;key_type\&quot;: \&quot;rsa\&quot;, \&quot;public_key_value\&quot;: \&quot;-----BEGIN PUBLIC KEY-----\\nMIIBojANBgkqhkiG9w0B...\&quot;, \&quot;key_scheme\&quot;: \&quot;rsassa-pss-sha256\&quot; } The format for in-toto&#39;s key definition can be found in section 4.2 of the in-toto specification.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:38:41.469450-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SigningKey {
  public static final String SERIALIZED_NAME_KEY_ID = "keyId";
  @SerializedName(SERIALIZED_NAME_KEY_ID)
  private String keyId;

  public static final String SERIALIZED_NAME_KEY_SCHEME = "keyScheme";
  @SerializedName(SERIALIZED_NAME_KEY_SCHEME)
  private String keyScheme;

  public static final String SERIALIZED_NAME_KEY_TYPE = "keyType";
  @SerializedName(SERIALIZED_NAME_KEY_TYPE)
  private String keyType;

  public static final String SERIALIZED_NAME_PUBLIC_KEY_VALUE = "publicKeyValue";
  @SerializedName(SERIALIZED_NAME_PUBLIC_KEY_VALUE)
  private String publicKeyValue;

  public SigningKey() {
  }

  public SigningKey keyId(String keyId) {
    this.keyId = keyId;
    return this;
  }

  /**
   * key_id is an identifier for the signing key.
   * @return keyId
   */
  @javax.annotation.Nullable
  public String getKeyId() {
    return keyId;
  }

  public void setKeyId(String keyId) {
    this.keyId = keyId;
  }


  public SigningKey keyScheme(String keyScheme) {
    this.keyScheme = keyScheme;
    return this;
  }

  /**
   * This field contains the corresponding signature scheme. Eg: \&quot;rsassa-pss-sha256\&quot;.
   * @return keyScheme
   */
  @javax.annotation.Nullable
  public String getKeyScheme() {
    return keyScheme;
  }

  public void setKeyScheme(String keyScheme) {
    this.keyScheme = keyScheme;
  }


  public SigningKey keyType(String keyType) {
    this.keyType = keyType;
    return this;
  }

  /**
   * This field identifies the specific signing method. Eg: \&quot;rsa\&quot;, \&quot;ed25519\&quot;, and \&quot;ecdsa\&quot;.
   * @return keyType
   */
  @javax.annotation.Nullable
  public String getKeyType() {
    return keyType;
  }

  public void setKeyType(String keyType) {
    this.keyType = keyType;
  }


  public SigningKey publicKeyValue(String publicKeyValue) {
    this.publicKeyValue = publicKeyValue;
    return this;
  }

  /**
   * This field contains the actual public key.
   * @return publicKeyValue
   */
  @javax.annotation.Nullable
  public String getPublicKeyValue() {
    return publicKeyValue;
  }

  public void setPublicKeyValue(String publicKeyValue) {
    this.publicKeyValue = publicKeyValue;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SigningKey signingKey = (SigningKey) o;
    return Objects.equals(this.keyId, signingKey.keyId) &&
        Objects.equals(this.keyScheme, signingKey.keyScheme) &&
        Objects.equals(this.keyType, signingKey.keyType) &&
        Objects.equals(this.publicKeyValue, signingKey.publicKeyValue);
  }

  @Override
  public int hashCode() {
    return Objects.hash(keyId, keyScheme, keyType, publicKeyValue);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SigningKey {\n");
    sb.append("    keyId: ").append(toIndentedString(keyId)).append("\n");
    sb.append("    keyScheme: ").append(toIndentedString(keyScheme)).append("\n");
    sb.append("    keyType: ").append(toIndentedString(keyType)).append("\n");
    sb.append("    publicKeyValue: ").append(toIndentedString(publicKeyValue)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("keyId");
    openapiFields.add("keyScheme");
    openapiFields.add("keyType");
    openapiFields.add("publicKeyValue");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SigningKey
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SigningKey.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SigningKey is not found in the empty JSON string", SigningKey.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SigningKey.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SigningKey` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("keyId") != null && !jsonObj.get("keyId").isJsonNull()) && !jsonObj.get("keyId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `keyId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("keyId").toString()));
      }
      if ((jsonObj.get("keyScheme") != null && !jsonObj.get("keyScheme").isJsonNull()) && !jsonObj.get("keyScheme").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `keyScheme` to be a primitive type in the JSON string but got `%s`", jsonObj.get("keyScheme").toString()));
      }
      if ((jsonObj.get("keyType") != null && !jsonObj.get("keyType").isJsonNull()) && !jsonObj.get("keyType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `keyType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("keyType").toString()));
      }
      if ((jsonObj.get("publicKeyValue") != null && !jsonObj.get("publicKeyValue").isJsonNull()) && !jsonObj.get("publicKeyValue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `publicKeyValue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("publicKeyValue").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SigningKey.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SigningKey' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SigningKey> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SigningKey.class));

       return (TypeAdapter<T>) new TypeAdapter<SigningKey>() {
           @Override
           public void write(JsonWriter out, SigningKey value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SigningKey read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SigningKey given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SigningKey
   * @throws IOException if the JSON string is invalid with respect to SigningKey
   */
  public static SigningKey fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SigningKey.class);
  }

  /**
   * Convert an instance of SigningKey to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

