/*
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.BuildProvenance;
import org.openapitools.client.model.InTotoSlsaProvenanceV1;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Details of a build occurrence.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:38:41.469450-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GrafeasV1beta1BuildDetails {
  public static final String SERIALIZED_NAME_IN_TOTO_SLSA_PROVENANCE_V1 = "inTotoSlsaProvenanceV1";
  @SerializedName(SERIALIZED_NAME_IN_TOTO_SLSA_PROVENANCE_V1)
  private InTotoSlsaProvenanceV1 inTotoSlsaProvenanceV1;

  public static final String SERIALIZED_NAME_PROVENANCE = "provenance";
  @SerializedName(SERIALIZED_NAME_PROVENANCE)
  private BuildProvenance provenance;

  public static final String SERIALIZED_NAME_PROVENANCE_BYTES = "provenanceBytes";
  @SerializedName(SERIALIZED_NAME_PROVENANCE_BYTES)
  private String provenanceBytes;

  public GrafeasV1beta1BuildDetails() {
  }

  public GrafeasV1beta1BuildDetails inTotoSlsaProvenanceV1(InTotoSlsaProvenanceV1 inTotoSlsaProvenanceV1) {
    this.inTotoSlsaProvenanceV1 = inTotoSlsaProvenanceV1;
    return this;
  }

  /**
   * Get inTotoSlsaProvenanceV1
   * @return inTotoSlsaProvenanceV1
   */
  @javax.annotation.Nullable
  public InTotoSlsaProvenanceV1 getInTotoSlsaProvenanceV1() {
    return inTotoSlsaProvenanceV1;
  }

  public void setInTotoSlsaProvenanceV1(InTotoSlsaProvenanceV1 inTotoSlsaProvenanceV1) {
    this.inTotoSlsaProvenanceV1 = inTotoSlsaProvenanceV1;
  }


  public GrafeasV1beta1BuildDetails provenance(BuildProvenance provenance) {
    this.provenance = provenance;
    return this;
  }

  /**
   * Get provenance
   * @return provenance
   */
  @javax.annotation.Nullable
  public BuildProvenance getProvenance() {
    return provenance;
  }

  public void setProvenance(BuildProvenance provenance) {
    this.provenance = provenance;
  }


  public GrafeasV1beta1BuildDetails provenanceBytes(String provenanceBytes) {
    this.provenanceBytes = provenanceBytes;
    return this;
  }

  /**
   * Serialized JSON representation of the provenance, used in generating the build signature in the corresponding build note. After verifying the signature, &#x60;provenance_bytes&#x60; can be unmarshalled and compared to the provenance to confirm that it is unchanged. A base64-encoded string representation of the provenance bytes is used for the signature in order to interoperate with openssl which expects this format for signature verification. The serialized form is captured both to avoid ambiguity in how the provenance is marshalled to json as well to prevent incompatibilities with future changes.
   * @return provenanceBytes
   */
  @javax.annotation.Nullable
  public String getProvenanceBytes() {
    return provenanceBytes;
  }

  public void setProvenanceBytes(String provenanceBytes) {
    this.provenanceBytes = provenanceBytes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GrafeasV1beta1BuildDetails grafeasV1beta1BuildDetails = (GrafeasV1beta1BuildDetails) o;
    return Objects.equals(this.inTotoSlsaProvenanceV1, grafeasV1beta1BuildDetails.inTotoSlsaProvenanceV1) &&
        Objects.equals(this.provenance, grafeasV1beta1BuildDetails.provenance) &&
        Objects.equals(this.provenanceBytes, grafeasV1beta1BuildDetails.provenanceBytes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(inTotoSlsaProvenanceV1, provenance, provenanceBytes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GrafeasV1beta1BuildDetails {\n");
    sb.append("    inTotoSlsaProvenanceV1: ").append(toIndentedString(inTotoSlsaProvenanceV1)).append("\n");
    sb.append("    provenance: ").append(toIndentedString(provenance)).append("\n");
    sb.append("    provenanceBytes: ").append(toIndentedString(provenanceBytes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("inTotoSlsaProvenanceV1");
    openapiFields.add("provenance");
    openapiFields.add("provenanceBytes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GrafeasV1beta1BuildDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GrafeasV1beta1BuildDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GrafeasV1beta1BuildDetails is not found in the empty JSON string", GrafeasV1beta1BuildDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GrafeasV1beta1BuildDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GrafeasV1beta1BuildDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `inTotoSlsaProvenanceV1`
      if (jsonObj.get("inTotoSlsaProvenanceV1") != null && !jsonObj.get("inTotoSlsaProvenanceV1").isJsonNull()) {
        InTotoSlsaProvenanceV1.validateJsonElement(jsonObj.get("inTotoSlsaProvenanceV1"));
      }
      // validate the optional field `provenance`
      if (jsonObj.get("provenance") != null && !jsonObj.get("provenance").isJsonNull()) {
        BuildProvenance.validateJsonElement(jsonObj.get("provenance"));
      }
      if ((jsonObj.get("provenanceBytes") != null && !jsonObj.get("provenanceBytes").isJsonNull()) && !jsonObj.get("provenanceBytes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provenanceBytes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provenanceBytes").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GrafeasV1beta1BuildDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GrafeasV1beta1BuildDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GrafeasV1beta1BuildDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GrafeasV1beta1BuildDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<GrafeasV1beta1BuildDetails>() {
           @Override
           public void write(JsonWriter out, GrafeasV1beta1BuildDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GrafeasV1beta1BuildDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GrafeasV1beta1BuildDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GrafeasV1beta1BuildDetails
   * @throws IOException if the JSON string is invalid with respect to GrafeasV1beta1BuildDetails
   */
  public static GrafeasV1beta1BuildDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GrafeasV1beta1BuildDetails.class);
  }

  /**
   * Convert an instance of GrafeasV1beta1BuildDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

