/*
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptionsPoolOption;
import org.openapitools.client.model.ContaineranalysisGoogleDevtoolsCloudbuildV1Volume;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions
 */
public class ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptionsTest {
    private final ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions model = new ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions();

    /**
     * Model tests for ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions
     */
    @Test
    public void testContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions() {
        // TODO: test ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions
    }

    /**
     * Test the property 'automapSubstitutions'
     */
    @Test
    public void automapSubstitutionsTest() {
        // TODO: test automapSubstitutions
    }

    /**
     * Test the property 'defaultLogsBucketBehavior'
     */
    @Test
    public void defaultLogsBucketBehaviorTest() {
        // TODO: test defaultLogsBucketBehavior
    }

    /**
     * Test the property 'diskSizeGb'
     */
    @Test
    public void diskSizeGbTest() {
        // TODO: test diskSizeGb
    }

    /**
     * Test the property 'dynamicSubstitutions'
     */
    @Test
    public void dynamicSubstitutionsTest() {
        // TODO: test dynamicSubstitutions
    }

    /**
     * Test the property 'env'
     */
    @Test
    public void envTest() {
        // TODO: test env
    }

    /**
     * Test the property 'logStreamingOption'
     */
    @Test
    public void logStreamingOptionTest() {
        // TODO: test logStreamingOption
    }

    /**
     * Test the property 'logging'
     */
    @Test
    public void loggingTest() {
        // TODO: test logging
    }

    /**
     * Test the property 'machineType'
     */
    @Test
    public void machineTypeTest() {
        // TODO: test machineType
    }

    /**
     * Test the property 'pool'
     */
    @Test
    public void poolTest() {
        // TODO: test pool
    }

    /**
     * Test the property 'requestedVerifyOption'
     */
    @Test
    public void requestedVerifyOptionTest() {
        // TODO: test requestedVerifyOption
    }

    /**
     * Test the property 'secretEnv'
     */
    @Test
    public void secretEnvTest() {
        // TODO: test secretEnv
    }

    /**
     * Test the property 'sourceProvenanceHash'
     */
    @Test
    public void sourceProvenanceHashTest() {
        // TODO: test sourceProvenanceHash
    }

    /**
     * Test the property 'substitutionOption'
     */
    @Test
    public void substitutionOptionTest() {
        // TODO: test substitutionOption
    }

    /**
     * Test the property 'volumes'
     */
    @Test
    public void volumesTest() {
        // TODO: test volumes
    }

    /**
     * Test the property 'workerPool'
     */
    @Test
    public void workerPoolTest() {
        // TODO: test workerPool
    }

}
