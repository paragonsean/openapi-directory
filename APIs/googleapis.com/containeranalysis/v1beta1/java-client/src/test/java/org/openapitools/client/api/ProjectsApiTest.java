/*
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.BatchCreateNotesRequest;
import org.openapitools.client.model.BatchCreateNotesResponse;
import org.openapitools.client.model.BatchCreateOccurrencesRequest;
import org.openapitools.client.model.BatchCreateOccurrencesResponse;
import org.openapitools.client.model.ExportSBOMResponse;
import org.openapitools.client.model.GetIamPolicyRequest;
import org.openapitools.client.model.ListNoteOccurrencesResponse;
import org.openapitools.client.model.ListNotesResponse;
import org.openapitools.client.model.ListOccurrencesResponse;
import org.openapitools.client.model.Note;
import org.openapitools.client.model.Occurrence;
import org.openapitools.client.model.PackagesSummaryResponse;
import org.openapitools.client.model.Policy;
import org.openapitools.client.model.SetIamPolicyRequest;
import org.openapitools.client.model.TestIamPermissionsRequest;
import org.openapitools.client.model.TestIamPermissionsResponse;
import org.openapitools.client.model.VulnerabilityOccurrencesSummary;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProjectsApi
 */
@Disabled
public class ProjectsApiTest {

    private final ProjectsApi api = new ProjectsApi();

    /**
     * Creates new notes in batch.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void containeranalysisProjectsNotesBatchCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        BatchCreateNotesRequest batchCreateNotesRequest = null;
        BatchCreateNotesResponse response = api.containeranalysisProjectsNotesBatchCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, batchCreateNotesRequest);
        // TODO: test validations
    }

    /**
     * Creates a new note.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void containeranalysisProjectsNotesCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String noteId = null;
        Note note = null;
        Note response = api.containeranalysisProjectsNotesCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, noteId, note);
        // TODO: test validations
    }

    /**
     * Lists notes for the specified project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void containeranalysisProjectsNotesListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        Integer pageSize = null;
        String pageToken = null;
        ListNotesResponse response = api.containeranalysisProjectsNotesList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Lists occurrences referencing the specified note. Provider projects can use this method to get all occurrences across consumer projects referencing the specified note.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void containeranalysisProjectsNotesOccurrencesListTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        Integer pageSize = null;
        String pageToken = null;
        ListNoteOccurrencesResponse response = api.containeranalysisProjectsNotesOccurrencesList(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Creates new occurrences in batch.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void containeranalysisProjectsOccurrencesBatchCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        BatchCreateOccurrencesRequest batchCreateOccurrencesRequest = null;
        BatchCreateOccurrencesResponse response = api.containeranalysisProjectsOccurrencesBatchCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, batchCreateOccurrencesRequest);
        // TODO: test validations
    }

    /**
     * Creates a new occurrence.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void containeranalysisProjectsOccurrencesCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Occurrence occurrence = null;
        Occurrence response = api.containeranalysisProjectsOccurrencesCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, occurrence);
        // TODO: test validations
    }

    /**
     * Deletes the specified occurrence. For example, use this method to delete an occurrence when the occurrence is no longer applicable for the given resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void containeranalysisProjectsOccurrencesDeleteTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object response = api.containeranalysisProjectsOccurrencesDelete(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Gets the specified occurrence.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void containeranalysisProjectsOccurrencesGetTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Occurrence response = api.containeranalysisProjectsOccurrencesGet(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Gets the access control policy for a note or an occurrence resource. Requires &#x60;containeranalysis.notes.setIamPolicy&#x60; or &#x60;containeranalysis.occurrences.setIamPolicy&#x60; permission if the resource is a note or occurrence, respectively. The resource takes the format &#x60;projects/[PROJECT_ID]/notes/[NOTE_ID]&#x60; for notes and &#x60;projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]&#x60; for occurrences.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void containeranalysisProjectsOccurrencesGetIamPolicyTest() throws ApiException {
        String resource = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GetIamPolicyRequest getIamPolicyRequest = null;
        Policy response = api.containeranalysisProjectsOccurrencesGetIamPolicy(resource, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, getIamPolicyRequest);
        // TODO: test validations
    }

    /**
     * Gets the note attached to the specified occurrence. Consumer projects can use this method to get a note that belongs to a provider project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void containeranalysisProjectsOccurrencesGetNotesTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Note response = api.containeranalysisProjectsOccurrencesGetNotes(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Gets a summary of the number and severity of occurrences.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void containeranalysisProjectsOccurrencesGetVulnerabilitySummaryTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        VulnerabilityOccurrencesSummary response = api.containeranalysisProjectsOccurrencesGetVulnerabilitySummary(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter);
        // TODO: test validations
    }

    /**
     * Lists occurrences for the specified project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void containeranalysisProjectsOccurrencesListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        Integer pageSize = null;
        String pageToken = null;
        ListOccurrencesResponse response = api.containeranalysisProjectsOccurrencesList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Updates the specified occurrence.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void containeranalysisProjectsOccurrencesPatchTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String updateMask = null;
        Occurrence occurrence = null;
        Occurrence response = api.containeranalysisProjectsOccurrencesPatch(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, updateMask, occurrence);
        // TODO: test validations
    }

    /**
     * Sets the access control policy on the specified note or occurrence. Requires &#x60;containeranalysis.notes.setIamPolicy&#x60; or &#x60;containeranalysis.occurrences.setIamPolicy&#x60; permission if the resource is a note or an occurrence, respectively. The resource takes the format &#x60;projects/[PROJECT_ID]/notes/[NOTE_ID]&#x60; for notes and &#x60;projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]&#x60; for occurrences.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void containeranalysisProjectsOccurrencesSetIamPolicyTest() throws ApiException {
        String resource = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        SetIamPolicyRequest setIamPolicyRequest = null;
        Policy response = api.containeranalysisProjectsOccurrencesSetIamPolicy(resource, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, setIamPolicyRequest);
        // TODO: test validations
    }

    /**
     * Returns the permissions that a caller has on the specified note or occurrence. Requires list permission on the project (for example, &#x60;containeranalysis.notes.list&#x60;). The resource takes the format &#x60;projects/[PROJECT_ID]/notes/[NOTE_ID]&#x60; for notes and &#x60;projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]&#x60; for occurrences.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void containeranalysisProjectsOccurrencesTestIamPermissionsTest() throws ApiException {
        String resource = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        TestIamPermissionsRequest testIamPermissionsRequest = null;
        TestIamPermissionsResponse response = api.containeranalysisProjectsOccurrencesTestIamPermissions(resource, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, testIamPermissionsRequest);
        // TODO: test validations
    }

    /**
     * Generates an SBOM and other dependency information for the given resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void containeranalysisProjectsResourcesExportSBOMTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object body = null;
        ExportSBOMResponse response = api.containeranalysisProjectsResourcesExportSBOM(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, body);
        // TODO: test validations
    }

    /**
     * Gets a summary of the packages within a given resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void containeranalysisProjectsResourcesGeneratePackagesSummaryTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object body = null;
        PackagesSummaryResponse response = api.containeranalysisProjectsResourcesGeneratePackagesSummary(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, body);
        // TODO: test validations
    }

}
