/*
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.ContaineranalysisGoogleDevtoolsCloudbuildV1Artifacts;
import org.openapitools.client.model.ContaineranalysisGoogleDevtoolsCloudbuildV1BuildApproval;
import org.openapitools.client.model.ContaineranalysisGoogleDevtoolsCloudbuildV1BuildFailureInfo;
import org.openapitools.client.model.ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions;
import org.openapitools.client.model.ContaineranalysisGoogleDevtoolsCloudbuildV1BuildStep;
import org.openapitools.client.model.ContaineranalysisGoogleDevtoolsCloudbuildV1BuildWarning;
import org.openapitools.client.model.ContaineranalysisGoogleDevtoolsCloudbuildV1Results;
import org.openapitools.client.model.ContaineranalysisGoogleDevtoolsCloudbuildV1Secret;
import org.openapitools.client.model.ContaineranalysisGoogleDevtoolsCloudbuildV1Secrets;
import org.openapitools.client.model.ContaineranalysisGoogleDevtoolsCloudbuildV1Source;
import org.openapitools.client.model.ContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance;
import org.openapitools.client.model.ContaineranalysisGoogleDevtoolsCloudbuildV1TimeSpan;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for ContaineranalysisGoogleDevtoolsCloudbuildV1Build
 */
public class ContaineranalysisGoogleDevtoolsCloudbuildV1BuildTest {
    private final ContaineranalysisGoogleDevtoolsCloudbuildV1Build model = new ContaineranalysisGoogleDevtoolsCloudbuildV1Build();

    /**
     * Model tests for ContaineranalysisGoogleDevtoolsCloudbuildV1Build
     */
    @Test
    public void testContaineranalysisGoogleDevtoolsCloudbuildV1Build() {
        // TODO: test ContaineranalysisGoogleDevtoolsCloudbuildV1Build
    }

    /**
     * Test the property 'approval'
     */
    @Test
    public void approvalTest() {
        // TODO: test approval
    }

    /**
     * Test the property 'artifacts'
     */
    @Test
    public void artifactsTest() {
        // TODO: test artifacts
    }

    /**
     * Test the property 'availableSecrets'
     */
    @Test
    public void availableSecretsTest() {
        // TODO: test availableSecrets
    }

    /**
     * Test the property 'buildTriggerId'
     */
    @Test
    public void buildTriggerIdTest() {
        // TODO: test buildTriggerId
    }

    /**
     * Test the property 'createTime'
     */
    @Test
    public void createTimeTest() {
        // TODO: test createTime
    }

    /**
     * Test the property 'failureInfo'
     */
    @Test
    public void failureInfoTest() {
        // TODO: test failureInfo
    }

    /**
     * Test the property 'finishTime'
     */
    @Test
    public void finishTimeTest() {
        // TODO: test finishTime
    }

    /**
     * Test the property 'id'
     */
    @Test
    public void idTest() {
        // TODO: test id
    }

    /**
     * Test the property 'images'
     */
    @Test
    public void imagesTest() {
        // TODO: test images
    }

    /**
     * Test the property 'logUrl'
     */
    @Test
    public void logUrlTest() {
        // TODO: test logUrl
    }

    /**
     * Test the property 'logsBucket'
     */
    @Test
    public void logsBucketTest() {
        // TODO: test logsBucket
    }

    /**
     * Test the property 'name'
     */
    @Test
    public void nameTest() {
        // TODO: test name
    }

    /**
     * Test the property 'options'
     */
    @Test
    public void optionsTest() {
        // TODO: test options
    }

    /**
     * Test the property 'projectId'
     */
    @Test
    public void projectIdTest() {
        // TODO: test projectId
    }

    /**
     * Test the property 'queueTtl'
     */
    @Test
    public void queueTtlTest() {
        // TODO: test queueTtl
    }

    /**
     * Test the property 'results'
     */
    @Test
    public void resultsTest() {
        // TODO: test results
    }

    /**
     * Test the property 'secrets'
     */
    @Test
    public void secretsTest() {
        // TODO: test secrets
    }

    /**
     * Test the property 'serviceAccount'
     */
    @Test
    public void serviceAccountTest() {
        // TODO: test serviceAccount
    }

    /**
     * Test the property 'source'
     */
    @Test
    public void sourceTest() {
        // TODO: test source
    }

    /**
     * Test the property 'sourceProvenance'
     */
    @Test
    public void sourceProvenanceTest() {
        // TODO: test sourceProvenance
    }

    /**
     * Test the property 'startTime'
     */
    @Test
    public void startTimeTest() {
        // TODO: test startTime
    }

    /**
     * Test the property 'status'
     */
    @Test
    public void statusTest() {
        // TODO: test status
    }

    /**
     * Test the property 'statusDetail'
     */
    @Test
    public void statusDetailTest() {
        // TODO: test statusDetail
    }

    /**
     * Test the property 'steps'
     */
    @Test
    public void stepsTest() {
        // TODO: test steps
    }

    /**
     * Test the property 'substitutions'
     */
    @Test
    public void substitutionsTest() {
        // TODO: test substitutions
    }

    /**
     * Test the property 'tags'
     */
    @Test
    public void tagsTest() {
        // TODO: test tags
    }

    /**
     * Test the property 'timeout'
     */
    @Test
    public void timeoutTest() {
        // TODO: test timeout
    }

    /**
     * Test the property 'timing'
     */
    @Test
    public void timingTest() {
        // TODO: test timing
    }

    /**
     * Test the property 'warnings'
     */
    @Test
    public void warningsTest() {
        // TODO: test warnings
    }

}
