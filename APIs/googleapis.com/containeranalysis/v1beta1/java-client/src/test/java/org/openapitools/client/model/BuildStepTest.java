/*
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.TimeSpan;
import org.openapitools.client.model.Volume;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for BuildStep
 */
public class BuildStepTest {
    private final BuildStep model = new BuildStep();

    /**
     * Model tests for BuildStep
     */
    @Test
    public void testBuildStep() {
        // TODO: test BuildStep
    }

    /**
     * Test the property 'allowExitCodes'
     */
    @Test
    public void allowExitCodesTest() {
        // TODO: test allowExitCodes
    }

    /**
     * Test the property 'allowFailure'
     */
    @Test
    public void allowFailureTest() {
        // TODO: test allowFailure
    }

    /**
     * Test the property 'args'
     */
    @Test
    public void argsTest() {
        // TODO: test args
    }

    /**
     * Test the property 'automapSubstitutions'
     */
    @Test
    public void automapSubstitutionsTest() {
        // TODO: test automapSubstitutions
    }

    /**
     * Test the property 'dir'
     */
    @Test
    public void dirTest() {
        // TODO: test dir
    }

    /**
     * Test the property 'entrypoint'
     */
    @Test
    public void entrypointTest() {
        // TODO: test entrypoint
    }

    /**
     * Test the property 'env'
     */
    @Test
    public void envTest() {
        // TODO: test env
    }

    /**
     * Test the property 'exitCode'
     */
    @Test
    public void exitCodeTest() {
        // TODO: test exitCode
    }

    /**
     * Test the property 'id'
     */
    @Test
    public void idTest() {
        // TODO: test id
    }

    /**
     * Test the property 'name'
     */
    @Test
    public void nameTest() {
        // TODO: test name
    }

    /**
     * Test the property 'pullTiming'
     */
    @Test
    public void pullTimingTest() {
        // TODO: test pullTiming
    }

    /**
     * Test the property 'script'
     */
    @Test
    public void scriptTest() {
        // TODO: test script
    }

    /**
     * Test the property 'secretEnv'
     */
    @Test
    public void secretEnvTest() {
        // TODO: test secretEnv
    }

    /**
     * Test the property 'status'
     */
    @Test
    public void statusTest() {
        // TODO: test status
    }

    /**
     * Test the property 'timeout'
     */
    @Test
    public void timeoutTest() {
        // TODO: test timeout
    }

    /**
     * Test the property 'timing'
     */
    @Test
    public void timingTest() {
        // TODO: test timing
    }

    /**
     * Test the property 'volumes'
     */
    @Test
    public void volumesTest() {
        // TODO: test volumes
    }

    /**
     * Test the property 'waitFor'
     */
    @Test
    public void waitForTest() {
        // TODO: test waitFor
    }

}
