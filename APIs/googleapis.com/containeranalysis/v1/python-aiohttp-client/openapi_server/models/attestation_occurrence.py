# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.jwt import Jwt
from openapi_server.models.signature import Signature
from openapi_server import util


class AttestationOccurrence(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, jwts: List[Jwt]=None, serialized_payload: str=None, signatures: List[Signature]=None):
        """AttestationOccurrence - a model defined in OpenAPI

        :param jwts: The jwts of this AttestationOccurrence.
        :param serialized_payload: The serialized_payload of this AttestationOccurrence.
        :param signatures: The signatures of this AttestationOccurrence.
        """
        self.openapi_types = {
            'jwts': List[Jwt],
            'serialized_payload': str,
            'signatures': List[Signature]
        }

        self.attribute_map = {
            'jwts': 'jwts',
            'serialized_payload': 'serializedPayload',
            'signatures': 'signatures'
        }

        self._jwts = jwts
        self._serialized_payload = serialized_payload
        self._signatures = signatures

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AttestationOccurrence':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AttestationOccurrence of this AttestationOccurrence.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def jwts(self):
        """Gets the jwts of this AttestationOccurrence.

        One or more JWTs encoding a self-contained attestation. Each JWT encodes the payload that it verifies within the JWT itself. Verifier implementation SHOULD ignore the `serialized_payload` field when verifying these JWTs. If only JWTs are present on this AttestationOccurrence, then the `serialized_payload` SHOULD be left empty. Each JWT SHOULD encode a claim specific to the `resource_uri` of this Occurrence, but this is not validated by Grafeas metadata API implementations. The JWT itself is opaque to Grafeas.

        :return: The jwts of this AttestationOccurrence.
        :rtype: List[Jwt]
        """
        return self._jwts

    @jwts.setter
    def jwts(self, jwts):
        """Sets the jwts of this AttestationOccurrence.

        One or more JWTs encoding a self-contained attestation. Each JWT encodes the payload that it verifies within the JWT itself. Verifier implementation SHOULD ignore the `serialized_payload` field when verifying these JWTs. If only JWTs are present on this AttestationOccurrence, then the `serialized_payload` SHOULD be left empty. Each JWT SHOULD encode a claim specific to the `resource_uri` of this Occurrence, but this is not validated by Grafeas metadata API implementations. The JWT itself is opaque to Grafeas.

        :param jwts: The jwts of this AttestationOccurrence.
        :type jwts: List[Jwt]
        """

        self._jwts = jwts

    @property
    def serialized_payload(self):
        """Gets the serialized_payload of this AttestationOccurrence.

        Required. The serialized payload that is verified by one or more `signatures`.

        :return: The serialized_payload of this AttestationOccurrence.
        :rtype: str
        """
        return self._serialized_payload

    @serialized_payload.setter
    def serialized_payload(self, serialized_payload):
        """Sets the serialized_payload of this AttestationOccurrence.

        Required. The serialized payload that is verified by one or more `signatures`.

        :param serialized_payload: The serialized_payload of this AttestationOccurrence.
        :type serialized_payload: str
        """

        self._serialized_payload = serialized_payload

    @property
    def signatures(self):
        """Gets the signatures of this AttestationOccurrence.

        One or more signatures over `serialized_payload`. Verifier implementations should consider this attestation message verified if at least one `signature` verifies `serialized_payload`. See `Signature` in common.proto for more details on signature structure and verification.

        :return: The signatures of this AttestationOccurrence.
        :rtype: List[Signature]
        """
        return self._signatures

    @signatures.setter
    def signatures(self, signatures):
        """Sets the signatures of this AttestationOccurrence.

        One or more signatures over `serialized_payload`. Verifier implementations should consider this attestation message verified if at least one `signature` verifies `serialized_payload`. See `Signature` in common.proto for more details on signature structure and verification.

        :param signatures: The signatures of this AttestationOccurrence.
        :type signatures: List[Signature]
        """

        self._signatures = signatures
