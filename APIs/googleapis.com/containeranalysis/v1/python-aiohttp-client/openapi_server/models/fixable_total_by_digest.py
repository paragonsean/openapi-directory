# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class FixableTotalByDigest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, fixable_count: str=None, resource_uri: str=None, severity: str=None, total_count: str=None):
        """FixableTotalByDigest - a model defined in OpenAPI

        :param fixable_count: The fixable_count of this FixableTotalByDigest.
        :param resource_uri: The resource_uri of this FixableTotalByDigest.
        :param severity: The severity of this FixableTotalByDigest.
        :param total_count: The total_count of this FixableTotalByDigest.
        """
        self.openapi_types = {
            'fixable_count': str,
            'resource_uri': str,
            'severity': str,
            'total_count': str
        }

        self.attribute_map = {
            'fixable_count': 'fixableCount',
            'resource_uri': 'resourceUri',
            'severity': 'severity',
            'total_count': 'totalCount'
        }

        self._fixable_count = fixable_count
        self._resource_uri = resource_uri
        self._severity = severity
        self._total_count = total_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FixableTotalByDigest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FixableTotalByDigest of this FixableTotalByDigest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def fixable_count(self):
        """Gets the fixable_count of this FixableTotalByDigest.

        The number of fixable vulnerabilities associated with this resource.

        :return: The fixable_count of this FixableTotalByDigest.
        :rtype: str
        """
        return self._fixable_count

    @fixable_count.setter
    def fixable_count(self, fixable_count):
        """Sets the fixable_count of this FixableTotalByDigest.

        The number of fixable vulnerabilities associated with this resource.

        :param fixable_count: The fixable_count of this FixableTotalByDigest.
        :type fixable_count: str
        """

        self._fixable_count = fixable_count

    @property
    def resource_uri(self):
        """Gets the resource_uri of this FixableTotalByDigest.

        The affected resource.

        :return: The resource_uri of this FixableTotalByDigest.
        :rtype: str
        """
        return self._resource_uri

    @resource_uri.setter
    def resource_uri(self, resource_uri):
        """Sets the resource_uri of this FixableTotalByDigest.

        The affected resource.

        :param resource_uri: The resource_uri of this FixableTotalByDigest.
        :type resource_uri: str
        """

        self._resource_uri = resource_uri

    @property
    def severity(self):
        """Gets the severity of this FixableTotalByDigest.

        The severity for this count. SEVERITY_UNSPECIFIED indicates total across all severities.

        :return: The severity of this FixableTotalByDigest.
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this FixableTotalByDigest.

        The severity for this count. SEVERITY_UNSPECIFIED indicates total across all severities.

        :param severity: The severity of this FixableTotalByDigest.
        :type severity: str
        """
        allowed_values = ["SEVERITY_UNSPECIFIED", "MINIMAL", "LOW", "MEDIUM", "HIGH", "CRITICAL"]  # noqa: E501
        if severity not in allowed_values:
            raise ValueError(
                "Invalid value for `severity` ({0}), must be one of {1}"
                .format(severity, allowed_values)
            )

        self._severity = severity

    @property
    def total_count(self):
        """Gets the total_count of this FixableTotalByDigest.

        The total number of vulnerabilities associated with this resource.

        :return: The total_count of this FixableTotalByDigest.
        :rtype: str
        """
        return self._total_count

    @total_count.setter
    def total_count(self, total_count):
        """Sets the total_count of this FixableTotalByDigest.

        The total number of vulnerabilities associated with this resource.

        :param total_count: The total_count of this FixableTotalByDigest.
        :type total_count: str
        """

        self._total_count = total_count
