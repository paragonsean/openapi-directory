# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.material import Material
from openapi_server.models.slsa_builder import SlsaBuilder
from openapi_server.models.slsa_metadata import SlsaMetadata
from openapi_server.models.slsa_recipe import SlsaRecipe
from openapi_server import util


class SlsaProvenance(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, builder: SlsaBuilder=None, materials: List[Material]=None, metadata: SlsaMetadata=None, recipe: SlsaRecipe=None):
        """SlsaProvenance - a model defined in OpenAPI

        :param builder: The builder of this SlsaProvenance.
        :param materials: The materials of this SlsaProvenance.
        :param metadata: The metadata of this SlsaProvenance.
        :param recipe: The recipe of this SlsaProvenance.
        """
        self.openapi_types = {
            'builder': SlsaBuilder,
            'materials': List[Material],
            'metadata': SlsaMetadata,
            'recipe': SlsaRecipe
        }

        self.attribute_map = {
            'builder': 'builder',
            'materials': 'materials',
            'metadata': 'metadata',
            'recipe': 'recipe'
        }

        self._builder = builder
        self._materials = materials
        self._metadata = metadata
        self._recipe = recipe

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SlsaProvenance':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SlsaProvenance of this SlsaProvenance.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def builder(self):
        """Gets the builder of this SlsaProvenance.


        :return: The builder of this SlsaProvenance.
        :rtype: SlsaBuilder
        """
        return self._builder

    @builder.setter
    def builder(self, builder):
        """Sets the builder of this SlsaProvenance.


        :param builder: The builder of this SlsaProvenance.
        :type builder: SlsaBuilder
        """

        self._builder = builder

    @property
    def materials(self):
        """Gets the materials of this SlsaProvenance.

        The collection of artifacts that influenced the build including sources, dependencies, build tools, base images, and so on. This is considered to be incomplete unless metadata.completeness.materials is true. Unset or null is equivalent to empty.

        :return: The materials of this SlsaProvenance.
        :rtype: List[Material]
        """
        return self._materials

    @materials.setter
    def materials(self, materials):
        """Sets the materials of this SlsaProvenance.

        The collection of artifacts that influenced the build including sources, dependencies, build tools, base images, and so on. This is considered to be incomplete unless metadata.completeness.materials is true. Unset or null is equivalent to empty.

        :param materials: The materials of this SlsaProvenance.
        :type materials: List[Material]
        """

        self._materials = materials

    @property
    def metadata(self):
        """Gets the metadata of this SlsaProvenance.


        :return: The metadata of this SlsaProvenance.
        :rtype: SlsaMetadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this SlsaProvenance.


        :param metadata: The metadata of this SlsaProvenance.
        :type metadata: SlsaMetadata
        """

        self._metadata = metadata

    @property
    def recipe(self):
        """Gets the recipe of this SlsaProvenance.


        :return: The recipe of this SlsaProvenance.
        :rtype: SlsaRecipe
        """
        return self._recipe

    @recipe.setter
    def recipe(self, recipe):
        """Sets the recipe of this SlsaProvenance.


        :param recipe: The recipe of this SlsaProvenance.
        :type recipe: SlsaRecipe
        """

        self._recipe = recipe
