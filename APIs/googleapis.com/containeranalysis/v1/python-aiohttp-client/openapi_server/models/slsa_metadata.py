# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.slsa_completeness import SlsaCompleteness
from openapi_server import util


class SlsaMetadata(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, build_finished_on: str=None, build_invocation_id: str=None, build_started_on: str=None, completeness: SlsaCompleteness=None, reproducible: bool=None):
        """SlsaMetadata - a model defined in OpenAPI

        :param build_finished_on: The build_finished_on of this SlsaMetadata.
        :param build_invocation_id: The build_invocation_id of this SlsaMetadata.
        :param build_started_on: The build_started_on of this SlsaMetadata.
        :param completeness: The completeness of this SlsaMetadata.
        :param reproducible: The reproducible of this SlsaMetadata.
        """
        self.openapi_types = {
            'build_finished_on': str,
            'build_invocation_id': str,
            'build_started_on': str,
            'completeness': SlsaCompleteness,
            'reproducible': bool
        }

        self.attribute_map = {
            'build_finished_on': 'buildFinishedOn',
            'build_invocation_id': 'buildInvocationId',
            'build_started_on': 'buildStartedOn',
            'completeness': 'completeness',
            'reproducible': 'reproducible'
        }

        self._build_finished_on = build_finished_on
        self._build_invocation_id = build_invocation_id
        self._build_started_on = build_started_on
        self._completeness = completeness
        self._reproducible = reproducible

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SlsaMetadata':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SlsaMetadata of this SlsaMetadata.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def build_finished_on(self):
        """Gets the build_finished_on of this SlsaMetadata.

        The timestamp of when the build completed.

        :return: The build_finished_on of this SlsaMetadata.
        :rtype: str
        """
        return self._build_finished_on

    @build_finished_on.setter
    def build_finished_on(self, build_finished_on):
        """Sets the build_finished_on of this SlsaMetadata.

        The timestamp of when the build completed.

        :param build_finished_on: The build_finished_on of this SlsaMetadata.
        :type build_finished_on: str
        """

        self._build_finished_on = build_finished_on

    @property
    def build_invocation_id(self):
        """Gets the build_invocation_id of this SlsaMetadata.

        Identifies the particular build invocation, which can be useful for finding associated logs or other ad-hoc analysis. The value SHOULD be globally unique, per in-toto Provenance spec.

        :return: The build_invocation_id of this SlsaMetadata.
        :rtype: str
        """
        return self._build_invocation_id

    @build_invocation_id.setter
    def build_invocation_id(self, build_invocation_id):
        """Sets the build_invocation_id of this SlsaMetadata.

        Identifies the particular build invocation, which can be useful for finding associated logs or other ad-hoc analysis. The value SHOULD be globally unique, per in-toto Provenance spec.

        :param build_invocation_id: The build_invocation_id of this SlsaMetadata.
        :type build_invocation_id: str
        """

        self._build_invocation_id = build_invocation_id

    @property
    def build_started_on(self):
        """Gets the build_started_on of this SlsaMetadata.

        The timestamp of when the build started.

        :return: The build_started_on of this SlsaMetadata.
        :rtype: str
        """
        return self._build_started_on

    @build_started_on.setter
    def build_started_on(self, build_started_on):
        """Sets the build_started_on of this SlsaMetadata.

        The timestamp of when the build started.

        :param build_started_on: The build_started_on of this SlsaMetadata.
        :type build_started_on: str
        """

        self._build_started_on = build_started_on

    @property
    def completeness(self):
        """Gets the completeness of this SlsaMetadata.


        :return: The completeness of this SlsaMetadata.
        :rtype: SlsaCompleteness
        """
        return self._completeness

    @completeness.setter
    def completeness(self, completeness):
        """Sets the completeness of this SlsaMetadata.


        :param completeness: The completeness of this SlsaMetadata.
        :type completeness: SlsaCompleteness
        """

        self._completeness = completeness

    @property
    def reproducible(self):
        """Gets the reproducible of this SlsaMetadata.

        If true, the builder claims that running the recipe on materials will produce bit-for-bit identical output.

        :return: The reproducible of this SlsaMetadata.
        :rtype: bool
        """
        return self._reproducible

    @reproducible.setter
    def reproducible(self, reproducible):
        """Sets the reproducible of this SlsaMetadata.

        If true, the builder claims that running the recipe on materials will produce bit-for-bit identical output.

        :param reproducible: The reproducible of this SlsaMetadata.
        :type reproducible: bool
        """

        self._reproducible = reproducible
