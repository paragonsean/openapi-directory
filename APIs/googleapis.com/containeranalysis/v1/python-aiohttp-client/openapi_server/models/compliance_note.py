# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.cis_benchmark import CisBenchmark
from openapi_server.models.compliance_version import ComplianceVersion
from openapi_server import util


class ComplianceNote(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cis_benchmark: CisBenchmark=None, description: str=None, rationale: str=None, remediation: str=None, scan_instructions: str=None, title: str=None, version: List[ComplianceVersion]=None):
        """ComplianceNote - a model defined in OpenAPI

        :param cis_benchmark: The cis_benchmark of this ComplianceNote.
        :param description: The description of this ComplianceNote.
        :param rationale: The rationale of this ComplianceNote.
        :param remediation: The remediation of this ComplianceNote.
        :param scan_instructions: The scan_instructions of this ComplianceNote.
        :param title: The title of this ComplianceNote.
        :param version: The version of this ComplianceNote.
        """
        self.openapi_types = {
            'cis_benchmark': CisBenchmark,
            'description': str,
            'rationale': str,
            'remediation': str,
            'scan_instructions': str,
            'title': str,
            'version': List[ComplianceVersion]
        }

        self.attribute_map = {
            'cis_benchmark': 'cisBenchmark',
            'description': 'description',
            'rationale': 'rationale',
            'remediation': 'remediation',
            'scan_instructions': 'scanInstructions',
            'title': 'title',
            'version': 'version'
        }

        self._cis_benchmark = cis_benchmark
        self._description = description
        self._rationale = rationale
        self._remediation = remediation
        self._scan_instructions = scan_instructions
        self._title = title
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ComplianceNote':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ComplianceNote of this ComplianceNote.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cis_benchmark(self):
        """Gets the cis_benchmark of this ComplianceNote.


        :return: The cis_benchmark of this ComplianceNote.
        :rtype: CisBenchmark
        """
        return self._cis_benchmark

    @cis_benchmark.setter
    def cis_benchmark(self, cis_benchmark):
        """Sets the cis_benchmark of this ComplianceNote.


        :param cis_benchmark: The cis_benchmark of this ComplianceNote.
        :type cis_benchmark: CisBenchmark
        """

        self._cis_benchmark = cis_benchmark

    @property
    def description(self):
        """Gets the description of this ComplianceNote.

        A description about this compliance check.

        :return: The description of this ComplianceNote.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ComplianceNote.

        A description about this compliance check.

        :param description: The description of this ComplianceNote.
        :type description: str
        """

        self._description = description

    @property
    def rationale(self):
        """Gets the rationale of this ComplianceNote.

        A rationale for the existence of this compliance check.

        :return: The rationale of this ComplianceNote.
        :rtype: str
        """
        return self._rationale

    @rationale.setter
    def rationale(self, rationale):
        """Sets the rationale of this ComplianceNote.

        A rationale for the existence of this compliance check.

        :param rationale: The rationale of this ComplianceNote.
        :type rationale: str
        """

        self._rationale = rationale

    @property
    def remediation(self):
        """Gets the remediation of this ComplianceNote.

        A description of remediation steps if the compliance check fails.

        :return: The remediation of this ComplianceNote.
        :rtype: str
        """
        return self._remediation

    @remediation.setter
    def remediation(self, remediation):
        """Sets the remediation of this ComplianceNote.

        A description of remediation steps if the compliance check fails.

        :param remediation: The remediation of this ComplianceNote.
        :type remediation: str
        """

        self._remediation = remediation

    @property
    def scan_instructions(self):
        """Gets the scan_instructions of this ComplianceNote.

        Serialized scan instructions with a predefined format.

        :return: The scan_instructions of this ComplianceNote.
        :rtype: str
        """
        return self._scan_instructions

    @scan_instructions.setter
    def scan_instructions(self, scan_instructions):
        """Sets the scan_instructions of this ComplianceNote.

        Serialized scan instructions with a predefined format.

        :param scan_instructions: The scan_instructions of this ComplianceNote.
        :type scan_instructions: str
        """

        self._scan_instructions = scan_instructions

    @property
    def title(self):
        """Gets the title of this ComplianceNote.

        The title that identifies this compliance check.

        :return: The title of this ComplianceNote.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this ComplianceNote.

        The title that identifies this compliance check.

        :param title: The title of this ComplianceNote.
        :type title: str
        """

        self._title = title

    @property
    def version(self):
        """Gets the version of this ComplianceNote.

        The OS and config versions the benchmark applies to.

        :return: The version of this ComplianceNote.
        :rtype: List[ComplianceVersion]
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this ComplianceNote.

        The OS and config versions the benchmark applies to.

        :param version: The version of this ComplianceNote.
        :type version: List[ComplianceVersion]
        """

        self._version = version
