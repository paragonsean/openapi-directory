# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.version import Version
from openapi_server import util


class Distribution(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, architecture: str=None, cpe_uri: str=None, description: str=None, latest_version: Version=None, maintainer: str=None, url: str=None):
        """Distribution - a model defined in OpenAPI

        :param architecture: The architecture of this Distribution.
        :param cpe_uri: The cpe_uri of this Distribution.
        :param description: The description of this Distribution.
        :param latest_version: The latest_version of this Distribution.
        :param maintainer: The maintainer of this Distribution.
        :param url: The url of this Distribution.
        """
        self.openapi_types = {
            'architecture': str,
            'cpe_uri': str,
            'description': str,
            'latest_version': Version,
            'maintainer': str,
            'url': str
        }

        self.attribute_map = {
            'architecture': 'architecture',
            'cpe_uri': 'cpeUri',
            'description': 'description',
            'latest_version': 'latestVersion',
            'maintainer': 'maintainer',
            'url': 'url'
        }

        self._architecture = architecture
        self._cpe_uri = cpe_uri
        self._description = description
        self._latest_version = latest_version
        self._maintainer = maintainer
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Distribution':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Distribution of this Distribution.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def architecture(self):
        """Gets the architecture of this Distribution.

        The CPU architecture for which packages in this distribution channel were built.

        :return: The architecture of this Distribution.
        :rtype: str
        """
        return self._architecture

    @architecture.setter
    def architecture(self, architecture):
        """Sets the architecture of this Distribution.

        The CPU architecture for which packages in this distribution channel were built.

        :param architecture: The architecture of this Distribution.
        :type architecture: str
        """
        allowed_values = ["ARCHITECTURE_UNSPECIFIED", "X86", "X64"]  # noqa: E501
        if architecture not in allowed_values:
            raise ValueError(
                "Invalid value for `architecture` ({0}), must be one of {1}"
                .format(architecture, allowed_values)
            )

        self._architecture = architecture

    @property
    def cpe_uri(self):
        """Gets the cpe_uri of this Distribution.

        Required. The cpe_uri in [CPE format](https://cpe.mitre.org/specification/) denoting the package manager version distributing a package.

        :return: The cpe_uri of this Distribution.
        :rtype: str
        """
        return self._cpe_uri

    @cpe_uri.setter
    def cpe_uri(self, cpe_uri):
        """Sets the cpe_uri of this Distribution.

        Required. The cpe_uri in [CPE format](https://cpe.mitre.org/specification/) denoting the package manager version distributing a package.

        :param cpe_uri: The cpe_uri of this Distribution.
        :type cpe_uri: str
        """

        self._cpe_uri = cpe_uri

    @property
    def description(self):
        """Gets the description of this Distribution.

        The distribution channel-specific description of this package.

        :return: The description of this Distribution.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Distribution.

        The distribution channel-specific description of this package.

        :param description: The description of this Distribution.
        :type description: str
        """

        self._description = description

    @property
    def latest_version(self):
        """Gets the latest_version of this Distribution.


        :return: The latest_version of this Distribution.
        :rtype: Version
        """
        return self._latest_version

    @latest_version.setter
    def latest_version(self, latest_version):
        """Sets the latest_version of this Distribution.


        :param latest_version: The latest_version of this Distribution.
        :type latest_version: Version
        """

        self._latest_version = latest_version

    @property
    def maintainer(self):
        """Gets the maintainer of this Distribution.

        A freeform string denoting the maintainer of this package.

        :return: The maintainer of this Distribution.
        :rtype: str
        """
        return self._maintainer

    @maintainer.setter
    def maintainer(self, maintainer):
        """Sets the maintainer of this Distribution.

        A freeform string denoting the maintainer of this package.

        :param maintainer: The maintainer of this Distribution.
        :type maintainer: str
        """

        self._maintainer = maintainer

    @property
    def url(self):
        """Gets the url of this Distribution.

        The distribution channel-specific homepage for this package.

        :return: The url of this Distribution.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Distribution.

        The distribution channel-specific homepage for this package.

        :param url: The url of this Distribution.
        :type url: str
        """

        self._url = url
