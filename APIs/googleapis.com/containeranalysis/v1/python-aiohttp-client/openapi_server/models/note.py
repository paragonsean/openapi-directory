# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.attestation_note import AttestationNote
from openapi_server.models.build_note import BuildNote
from openapi_server.models.compliance_note import ComplianceNote
from openapi_server.models.dsse_attestation_note import DSSEAttestationNote
from openapi_server.models.deployment_note import DeploymentNote
from openapi_server.models.discovery_note import DiscoveryNote
from openapi_server.models.image_note import ImageNote
from openapi_server.models.package_note import PackageNote
from openapi_server.models.related_url import RelatedUrl
from openapi_server.models.sbom_reference_note import SBOMReferenceNote
from openapi_server.models.upgrade_note import UpgradeNote
from openapi_server.models.vulnerability_assessment_note import VulnerabilityAssessmentNote
from openapi_server.models.vulnerability_note import VulnerabilityNote
from openapi_server import util


class Note(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attestation: AttestationNote=None, build: BuildNote=None, compliance: ComplianceNote=None, create_time: str=None, deployment: DeploymentNote=None, discovery: DiscoveryNote=None, dsse_attestation: DSSEAttestationNote=None, expiration_time: str=None, image: ImageNote=None, kind: str=None, long_description: str=None, name: str=None, package: PackageNote=None, related_note_names: List[str]=None, related_url: List[RelatedUrl]=None, sbom_reference: SBOMReferenceNote=None, short_description: str=None, update_time: str=None, upgrade: UpgradeNote=None, vulnerability: VulnerabilityNote=None, vulnerability_assessment: VulnerabilityAssessmentNote=None):
        """Note - a model defined in OpenAPI

        :param attestation: The attestation of this Note.
        :param build: The build of this Note.
        :param compliance: The compliance of this Note.
        :param create_time: The create_time of this Note.
        :param deployment: The deployment of this Note.
        :param discovery: The discovery of this Note.
        :param dsse_attestation: The dsse_attestation of this Note.
        :param expiration_time: The expiration_time of this Note.
        :param image: The image of this Note.
        :param kind: The kind of this Note.
        :param long_description: The long_description of this Note.
        :param name: The name of this Note.
        :param package: The package of this Note.
        :param related_note_names: The related_note_names of this Note.
        :param related_url: The related_url of this Note.
        :param sbom_reference: The sbom_reference of this Note.
        :param short_description: The short_description of this Note.
        :param update_time: The update_time of this Note.
        :param upgrade: The upgrade of this Note.
        :param vulnerability: The vulnerability of this Note.
        :param vulnerability_assessment: The vulnerability_assessment of this Note.
        """
        self.openapi_types = {
            'attestation': AttestationNote,
            'build': BuildNote,
            'compliance': ComplianceNote,
            'create_time': str,
            'deployment': DeploymentNote,
            'discovery': DiscoveryNote,
            'dsse_attestation': DSSEAttestationNote,
            'expiration_time': str,
            'image': ImageNote,
            'kind': str,
            'long_description': str,
            'name': str,
            'package': PackageNote,
            'related_note_names': List[str],
            'related_url': List[RelatedUrl],
            'sbom_reference': SBOMReferenceNote,
            'short_description': str,
            'update_time': str,
            'upgrade': UpgradeNote,
            'vulnerability': VulnerabilityNote,
            'vulnerability_assessment': VulnerabilityAssessmentNote
        }

        self.attribute_map = {
            'attestation': 'attestation',
            'build': 'build',
            'compliance': 'compliance',
            'create_time': 'createTime',
            'deployment': 'deployment',
            'discovery': 'discovery',
            'dsse_attestation': 'dsseAttestation',
            'expiration_time': 'expirationTime',
            'image': 'image',
            'kind': 'kind',
            'long_description': 'longDescription',
            'name': 'name',
            'package': 'package',
            'related_note_names': 'relatedNoteNames',
            'related_url': 'relatedUrl',
            'sbom_reference': 'sbomReference',
            'short_description': 'shortDescription',
            'update_time': 'updateTime',
            'upgrade': 'upgrade',
            'vulnerability': 'vulnerability',
            'vulnerability_assessment': 'vulnerabilityAssessment'
        }

        self._attestation = attestation
        self._build = build
        self._compliance = compliance
        self._create_time = create_time
        self._deployment = deployment
        self._discovery = discovery
        self._dsse_attestation = dsse_attestation
        self._expiration_time = expiration_time
        self._image = image
        self._kind = kind
        self._long_description = long_description
        self._name = name
        self._package = package
        self._related_note_names = related_note_names
        self._related_url = related_url
        self._sbom_reference = sbom_reference
        self._short_description = short_description
        self._update_time = update_time
        self._upgrade = upgrade
        self._vulnerability = vulnerability
        self._vulnerability_assessment = vulnerability_assessment

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Note':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Note of this Note.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attestation(self):
        """Gets the attestation of this Note.


        :return: The attestation of this Note.
        :rtype: AttestationNote
        """
        return self._attestation

    @attestation.setter
    def attestation(self, attestation):
        """Sets the attestation of this Note.


        :param attestation: The attestation of this Note.
        :type attestation: AttestationNote
        """

        self._attestation = attestation

    @property
    def build(self):
        """Gets the build of this Note.


        :return: The build of this Note.
        :rtype: BuildNote
        """
        return self._build

    @build.setter
    def build(self, build):
        """Sets the build of this Note.


        :param build: The build of this Note.
        :type build: BuildNote
        """

        self._build = build

    @property
    def compliance(self):
        """Gets the compliance of this Note.


        :return: The compliance of this Note.
        :rtype: ComplianceNote
        """
        return self._compliance

    @compliance.setter
    def compliance(self, compliance):
        """Sets the compliance of this Note.


        :param compliance: The compliance of this Note.
        :type compliance: ComplianceNote
        """

        self._compliance = compliance

    @property
    def create_time(self):
        """Gets the create_time of this Note.

        Output only. The time this note was created. This field can be used as a filter in list requests.

        :return: The create_time of this Note.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this Note.

        Output only. The time this note was created. This field can be used as a filter in list requests.

        :param create_time: The create_time of this Note.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def deployment(self):
        """Gets the deployment of this Note.


        :return: The deployment of this Note.
        :rtype: DeploymentNote
        """
        return self._deployment

    @deployment.setter
    def deployment(self, deployment):
        """Sets the deployment of this Note.


        :param deployment: The deployment of this Note.
        :type deployment: DeploymentNote
        """

        self._deployment = deployment

    @property
    def discovery(self):
        """Gets the discovery of this Note.


        :return: The discovery of this Note.
        :rtype: DiscoveryNote
        """
        return self._discovery

    @discovery.setter
    def discovery(self, discovery):
        """Sets the discovery of this Note.


        :param discovery: The discovery of this Note.
        :type discovery: DiscoveryNote
        """

        self._discovery = discovery

    @property
    def dsse_attestation(self):
        """Gets the dsse_attestation of this Note.


        :return: The dsse_attestation of this Note.
        :rtype: DSSEAttestationNote
        """
        return self._dsse_attestation

    @dsse_attestation.setter
    def dsse_attestation(self, dsse_attestation):
        """Sets the dsse_attestation of this Note.


        :param dsse_attestation: The dsse_attestation of this Note.
        :type dsse_attestation: DSSEAttestationNote
        """

        self._dsse_attestation = dsse_attestation

    @property
    def expiration_time(self):
        """Gets the expiration_time of this Note.

        Time of expiration for this note. Empty if note does not expire.

        :return: The expiration_time of this Note.
        :rtype: str
        """
        return self._expiration_time

    @expiration_time.setter
    def expiration_time(self, expiration_time):
        """Sets the expiration_time of this Note.

        Time of expiration for this note. Empty if note does not expire.

        :param expiration_time: The expiration_time of this Note.
        :type expiration_time: str
        """

        self._expiration_time = expiration_time

    @property
    def image(self):
        """Gets the image of this Note.


        :return: The image of this Note.
        :rtype: ImageNote
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this Note.


        :param image: The image of this Note.
        :type image: ImageNote
        """

        self._image = image

    @property
    def kind(self):
        """Gets the kind of this Note.

        Output only. The type of analysis. This field can be used as a filter in list requests.

        :return: The kind of this Note.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this Note.

        Output only. The type of analysis. This field can be used as a filter in list requests.

        :param kind: The kind of this Note.
        :type kind: str
        """
        allowed_values = ["NOTE_KIND_UNSPECIFIED", "VULNERABILITY", "BUILD", "IMAGE", "PACKAGE", "DEPLOYMENT", "DISCOVERY", "ATTESTATION", "UPGRADE", "COMPLIANCE", "DSSE_ATTESTATION", "VULNERABILITY_ASSESSMENT", "SBOM_REFERENCE"]  # noqa: E501
        if kind not in allowed_values:
            raise ValueError(
                "Invalid value for `kind` ({0}), must be one of {1}"
                .format(kind, allowed_values)
            )

        self._kind = kind

    @property
    def long_description(self):
        """Gets the long_description of this Note.

        A detailed description of this note.

        :return: The long_description of this Note.
        :rtype: str
        """
        return self._long_description

    @long_description.setter
    def long_description(self, long_description):
        """Sets the long_description of this Note.

        A detailed description of this note.

        :param long_description: The long_description of this Note.
        :type long_description: str
        """

        self._long_description = long_description

    @property
    def name(self):
        """Gets the name of this Note.

        Output only. The name of the note in the form of `projects/[PROVIDER_ID]/notes/[NOTE_ID]`.

        :return: The name of this Note.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Note.

        Output only. The name of the note in the form of `projects/[PROVIDER_ID]/notes/[NOTE_ID]`.

        :param name: The name of this Note.
        :type name: str
        """

        self._name = name

    @property
    def package(self):
        """Gets the package of this Note.


        :return: The package of this Note.
        :rtype: PackageNote
        """
        return self._package

    @package.setter
    def package(self, package):
        """Sets the package of this Note.


        :param package: The package of this Note.
        :type package: PackageNote
        """

        self._package = package

    @property
    def related_note_names(self):
        """Gets the related_note_names of this Note.

        Other notes related to this note.

        :return: The related_note_names of this Note.
        :rtype: List[str]
        """
        return self._related_note_names

    @related_note_names.setter
    def related_note_names(self, related_note_names):
        """Sets the related_note_names of this Note.

        Other notes related to this note.

        :param related_note_names: The related_note_names of this Note.
        :type related_note_names: List[str]
        """

        self._related_note_names = related_note_names

    @property
    def related_url(self):
        """Gets the related_url of this Note.

        URLs associated with this note.

        :return: The related_url of this Note.
        :rtype: List[RelatedUrl]
        """
        return self._related_url

    @related_url.setter
    def related_url(self, related_url):
        """Sets the related_url of this Note.

        URLs associated with this note.

        :param related_url: The related_url of this Note.
        :type related_url: List[RelatedUrl]
        """

        self._related_url = related_url

    @property
    def sbom_reference(self):
        """Gets the sbom_reference of this Note.


        :return: The sbom_reference of this Note.
        :rtype: SBOMReferenceNote
        """
        return self._sbom_reference

    @sbom_reference.setter
    def sbom_reference(self, sbom_reference):
        """Sets the sbom_reference of this Note.


        :param sbom_reference: The sbom_reference of this Note.
        :type sbom_reference: SBOMReferenceNote
        """

        self._sbom_reference = sbom_reference

    @property
    def short_description(self):
        """Gets the short_description of this Note.

        A one sentence description of this note.

        :return: The short_description of this Note.
        :rtype: str
        """
        return self._short_description

    @short_description.setter
    def short_description(self, short_description):
        """Sets the short_description of this Note.

        A one sentence description of this note.

        :param short_description: The short_description of this Note.
        :type short_description: str
        """

        self._short_description = short_description

    @property
    def update_time(self):
        """Gets the update_time of this Note.

        Output only. The time this note was last updated. This field can be used as a filter in list requests.

        :return: The update_time of this Note.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this Note.

        Output only. The time this note was last updated. This field can be used as a filter in list requests.

        :param update_time: The update_time of this Note.
        :type update_time: str
        """

        self._update_time = update_time

    @property
    def upgrade(self):
        """Gets the upgrade of this Note.


        :return: The upgrade of this Note.
        :rtype: UpgradeNote
        """
        return self._upgrade

    @upgrade.setter
    def upgrade(self, upgrade):
        """Sets the upgrade of this Note.


        :param upgrade: The upgrade of this Note.
        :type upgrade: UpgradeNote
        """

        self._upgrade = upgrade

    @property
    def vulnerability(self):
        """Gets the vulnerability of this Note.


        :return: The vulnerability of this Note.
        :rtype: VulnerabilityNote
        """
        return self._vulnerability

    @vulnerability.setter
    def vulnerability(self, vulnerability):
        """Sets the vulnerability of this Note.


        :param vulnerability: The vulnerability of this Note.
        :type vulnerability: VulnerabilityNote
        """

        self._vulnerability = vulnerability

    @property
    def vulnerability_assessment(self):
        """Gets the vulnerability_assessment of this Note.


        :return: The vulnerability_assessment of this Note.
        :rtype: VulnerabilityAssessmentNote
        """
        return self._vulnerability_assessment

    @vulnerability_assessment.setter
    def vulnerability_assessment(self, vulnerability_assessment):
        """Sets the vulnerability_assessment of this Note.


        :param vulnerability_assessment: The vulnerability_assessment of this Note.
        :type vulnerability_assessment: VulnerabilityAssessmentNote
        """

        self._vulnerability_assessment = vulnerability_assessment
