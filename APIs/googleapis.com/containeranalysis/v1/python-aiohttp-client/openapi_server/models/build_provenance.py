# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.artifact import Artifact
from openapi_server.models.command import Command
from openapi_server.models.source import Source
from openapi_server import util


class BuildProvenance(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, build_options: Dict[str, str]=None, builder_version: str=None, built_artifacts: List[Artifact]=None, commands: List[Command]=None, create_time: str=None, creator: str=None, end_time: str=None, id: str=None, logs_uri: str=None, project_id: str=None, source_provenance: Source=None, start_time: str=None, trigger_id: str=None):
        """BuildProvenance - a model defined in OpenAPI

        :param build_options: The build_options of this BuildProvenance.
        :param builder_version: The builder_version of this BuildProvenance.
        :param built_artifacts: The built_artifacts of this BuildProvenance.
        :param commands: The commands of this BuildProvenance.
        :param create_time: The create_time of this BuildProvenance.
        :param creator: The creator of this BuildProvenance.
        :param end_time: The end_time of this BuildProvenance.
        :param id: The id of this BuildProvenance.
        :param logs_uri: The logs_uri of this BuildProvenance.
        :param project_id: The project_id of this BuildProvenance.
        :param source_provenance: The source_provenance of this BuildProvenance.
        :param start_time: The start_time of this BuildProvenance.
        :param trigger_id: The trigger_id of this BuildProvenance.
        """
        self.openapi_types = {
            'build_options': Dict[str, str],
            'builder_version': str,
            'built_artifacts': List[Artifact],
            'commands': List[Command],
            'create_time': str,
            'creator': str,
            'end_time': str,
            'id': str,
            'logs_uri': str,
            'project_id': str,
            'source_provenance': Source,
            'start_time': str,
            'trigger_id': str
        }

        self.attribute_map = {
            'build_options': 'buildOptions',
            'builder_version': 'builderVersion',
            'built_artifacts': 'builtArtifacts',
            'commands': 'commands',
            'create_time': 'createTime',
            'creator': 'creator',
            'end_time': 'endTime',
            'id': 'id',
            'logs_uri': 'logsUri',
            'project_id': 'projectId',
            'source_provenance': 'sourceProvenance',
            'start_time': 'startTime',
            'trigger_id': 'triggerId'
        }

        self._build_options = build_options
        self._builder_version = builder_version
        self._built_artifacts = built_artifacts
        self._commands = commands
        self._create_time = create_time
        self._creator = creator
        self._end_time = end_time
        self._id = id
        self._logs_uri = logs_uri
        self._project_id = project_id
        self._source_provenance = source_provenance
        self._start_time = start_time
        self._trigger_id = trigger_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BuildProvenance':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BuildProvenance of this BuildProvenance.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def build_options(self):
        """Gets the build_options of this BuildProvenance.

        Special options applied to this build. This is a catch-all field where build providers can enter any desired additional details.

        :return: The build_options of this BuildProvenance.
        :rtype: Dict[str, str]
        """
        return self._build_options

    @build_options.setter
    def build_options(self, build_options):
        """Sets the build_options of this BuildProvenance.

        Special options applied to this build. This is a catch-all field where build providers can enter any desired additional details.

        :param build_options: The build_options of this BuildProvenance.
        :type build_options: Dict[str, str]
        """

        self._build_options = build_options

    @property
    def builder_version(self):
        """Gets the builder_version of this BuildProvenance.

        Version string of the builder at the time this build was executed.

        :return: The builder_version of this BuildProvenance.
        :rtype: str
        """
        return self._builder_version

    @builder_version.setter
    def builder_version(self, builder_version):
        """Sets the builder_version of this BuildProvenance.

        Version string of the builder at the time this build was executed.

        :param builder_version: The builder_version of this BuildProvenance.
        :type builder_version: str
        """

        self._builder_version = builder_version

    @property
    def built_artifacts(self):
        """Gets the built_artifacts of this BuildProvenance.

        Output of the build.

        :return: The built_artifacts of this BuildProvenance.
        :rtype: List[Artifact]
        """
        return self._built_artifacts

    @built_artifacts.setter
    def built_artifacts(self, built_artifacts):
        """Sets the built_artifacts of this BuildProvenance.

        Output of the build.

        :param built_artifacts: The built_artifacts of this BuildProvenance.
        :type built_artifacts: List[Artifact]
        """

        self._built_artifacts = built_artifacts

    @property
    def commands(self):
        """Gets the commands of this BuildProvenance.

        Commands requested by the build.

        :return: The commands of this BuildProvenance.
        :rtype: List[Command]
        """
        return self._commands

    @commands.setter
    def commands(self, commands):
        """Sets the commands of this BuildProvenance.

        Commands requested by the build.

        :param commands: The commands of this BuildProvenance.
        :type commands: List[Command]
        """

        self._commands = commands

    @property
    def create_time(self):
        """Gets the create_time of this BuildProvenance.

        Time at which the build was created.

        :return: The create_time of this BuildProvenance.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this BuildProvenance.

        Time at which the build was created.

        :param create_time: The create_time of this BuildProvenance.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def creator(self):
        """Gets the creator of this BuildProvenance.

        E-mail address of the user who initiated this build. Note that this was the user's e-mail address at the time the build was initiated; this address may not represent the same end-user for all time.

        :return: The creator of this BuildProvenance.
        :rtype: str
        """
        return self._creator

    @creator.setter
    def creator(self, creator):
        """Sets the creator of this BuildProvenance.

        E-mail address of the user who initiated this build. Note that this was the user's e-mail address at the time the build was initiated; this address may not represent the same end-user for all time.

        :param creator: The creator of this BuildProvenance.
        :type creator: str
        """

        self._creator = creator

    @property
    def end_time(self):
        """Gets the end_time of this BuildProvenance.

        Time at which execution of the build was finished.

        :return: The end_time of this BuildProvenance.
        :rtype: str
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this BuildProvenance.

        Time at which execution of the build was finished.

        :param end_time: The end_time of this BuildProvenance.
        :type end_time: str
        """

        self._end_time = end_time

    @property
    def id(self):
        """Gets the id of this BuildProvenance.

        Required. Unique identifier of the build.

        :return: The id of this BuildProvenance.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BuildProvenance.

        Required. Unique identifier of the build.

        :param id: The id of this BuildProvenance.
        :type id: str
        """

        self._id = id

    @property
    def logs_uri(self):
        """Gets the logs_uri of this BuildProvenance.

        URI where any logs for this provenance were written.

        :return: The logs_uri of this BuildProvenance.
        :rtype: str
        """
        return self._logs_uri

    @logs_uri.setter
    def logs_uri(self, logs_uri):
        """Sets the logs_uri of this BuildProvenance.

        URI where any logs for this provenance were written.

        :param logs_uri: The logs_uri of this BuildProvenance.
        :type logs_uri: str
        """

        self._logs_uri = logs_uri

    @property
    def project_id(self):
        """Gets the project_id of this BuildProvenance.

        ID of the project.

        :return: The project_id of this BuildProvenance.
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this BuildProvenance.

        ID of the project.

        :param project_id: The project_id of this BuildProvenance.
        :type project_id: str
        """

        self._project_id = project_id

    @property
    def source_provenance(self):
        """Gets the source_provenance of this BuildProvenance.


        :return: The source_provenance of this BuildProvenance.
        :rtype: Source
        """
        return self._source_provenance

    @source_provenance.setter
    def source_provenance(self, source_provenance):
        """Sets the source_provenance of this BuildProvenance.


        :param source_provenance: The source_provenance of this BuildProvenance.
        :type source_provenance: Source
        """

        self._source_provenance = source_provenance

    @property
    def start_time(self):
        """Gets the start_time of this BuildProvenance.

        Time at which execution of the build was started.

        :return: The start_time of this BuildProvenance.
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this BuildProvenance.

        Time at which execution of the build was started.

        :param start_time: The start_time of this BuildProvenance.
        :type start_time: str
        """

        self._start_time = start_time

    @property
    def trigger_id(self):
        """Gets the trigger_id of this BuildProvenance.

        Trigger identifier if the build was triggered automatically; empty if not.

        :return: The trigger_id of this BuildProvenance.
        :rtype: str
        """
        return self._trigger_id

    @trigger_id.setter
    def trigger_id(self, trigger_id):
        """Sets the trigger_id of this BuildProvenance.

        Trigger identifier if the build was triggered automatically; empty if not.

        :param trigger_id: The trigger_id of this BuildProvenance.
        :type trigger_id: str
        """

        self._trigger_id = trigger_id
