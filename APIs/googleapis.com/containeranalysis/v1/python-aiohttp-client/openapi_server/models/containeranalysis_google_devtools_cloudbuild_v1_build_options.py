# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.containeranalysis_google_devtools_cloudbuild_v1_build_options_pool_option import ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptionsPoolOption
from openapi_server.models.containeranalysis_google_devtools_cloudbuild_v1_volume import ContaineranalysisGoogleDevtoolsCloudbuildV1Volume
from openapi_server import util


class ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, automap_substitutions: bool=None, default_logs_bucket_behavior: str=None, disk_size_gb: str=None, dynamic_substitutions: bool=None, env: List[str]=None, log_streaming_option: str=None, logging: str=None, machine_type: str=None, pool: ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptionsPoolOption=None, requested_verify_option: str=None, secret_env: List[str]=None, source_provenance_hash: List[str]=None, substitution_option: str=None, volumes: List[ContaineranalysisGoogleDevtoolsCloudbuildV1Volume]=None, worker_pool: str=None):
        """ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions - a model defined in OpenAPI

        :param automap_substitutions: The automap_substitutions of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions.
        :param default_logs_bucket_behavior: The default_logs_bucket_behavior of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions.
        :param disk_size_gb: The disk_size_gb of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions.
        :param dynamic_substitutions: The dynamic_substitutions of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions.
        :param env: The env of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions.
        :param log_streaming_option: The log_streaming_option of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions.
        :param logging: The logging of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions.
        :param machine_type: The machine_type of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions.
        :param pool: The pool of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions.
        :param requested_verify_option: The requested_verify_option of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions.
        :param secret_env: The secret_env of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions.
        :param source_provenance_hash: The source_provenance_hash of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions.
        :param substitution_option: The substitution_option of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions.
        :param volumes: The volumes of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions.
        :param worker_pool: The worker_pool of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions.
        """
        self.openapi_types = {
            'automap_substitutions': bool,
            'default_logs_bucket_behavior': str,
            'disk_size_gb': str,
            'dynamic_substitutions': bool,
            'env': List[str],
            'log_streaming_option': str,
            'logging': str,
            'machine_type': str,
            'pool': ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptionsPoolOption,
            'requested_verify_option': str,
            'secret_env': List[str],
            'source_provenance_hash': List[str],
            'substitution_option': str,
            'volumes': List[ContaineranalysisGoogleDevtoolsCloudbuildV1Volume],
            'worker_pool': str
        }

        self.attribute_map = {
            'automap_substitutions': 'automapSubstitutions',
            'default_logs_bucket_behavior': 'defaultLogsBucketBehavior',
            'disk_size_gb': 'diskSizeGb',
            'dynamic_substitutions': 'dynamicSubstitutions',
            'env': 'env',
            'log_streaming_option': 'logStreamingOption',
            'logging': 'logging',
            'machine_type': 'machineType',
            'pool': 'pool',
            'requested_verify_option': 'requestedVerifyOption',
            'secret_env': 'secretEnv',
            'source_provenance_hash': 'sourceProvenanceHash',
            'substitution_option': 'substitutionOption',
            'volumes': 'volumes',
            'worker_pool': 'workerPool'
        }

        self._automap_substitutions = automap_substitutions
        self._default_logs_bucket_behavior = default_logs_bucket_behavior
        self._disk_size_gb = disk_size_gb
        self._dynamic_substitutions = dynamic_substitutions
        self._env = env
        self._log_streaming_option = log_streaming_option
        self._logging = logging
        self._machine_type = machine_type
        self._pool = pool
        self._requested_verify_option = requested_verify_option
        self._secret_env = secret_env
        self._source_provenance_hash = source_provenance_hash
        self._substitution_option = substitution_option
        self._volumes = volumes
        self._worker_pool = worker_pool

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def automap_substitutions(self):
        """Gets the automap_substitutions of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions.

        Option to include built-in and custom substitutions as env variables for all build steps.

        :return: The automap_substitutions of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions.
        :rtype: bool
        """
        return self._automap_substitutions

    @automap_substitutions.setter
    def automap_substitutions(self, automap_substitutions):
        """Sets the automap_substitutions of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions.

        Option to include built-in and custom substitutions as env variables for all build steps.

        :param automap_substitutions: The automap_substitutions of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions.
        :type automap_substitutions: bool
        """

        self._automap_substitutions = automap_substitutions

    @property
    def default_logs_bucket_behavior(self):
        """Gets the default_logs_bucket_behavior of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions.

        Optional. Option to specify how default logs buckets are setup.

        :return: The default_logs_bucket_behavior of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions.
        :rtype: str
        """
        return self._default_logs_bucket_behavior

    @default_logs_bucket_behavior.setter
    def default_logs_bucket_behavior(self, default_logs_bucket_behavior):
        """Sets the default_logs_bucket_behavior of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions.

        Optional. Option to specify how default logs buckets are setup.

        :param default_logs_bucket_behavior: The default_logs_bucket_behavior of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions.
        :type default_logs_bucket_behavior: str
        """
        allowed_values = ["DEFAULT_LOGS_BUCKET_BEHAVIOR_UNSPECIFIED", "REGIONAL_USER_OWNED_BUCKET"]  # noqa: E501
        if default_logs_bucket_behavior not in allowed_values:
            raise ValueError(
                "Invalid value for `default_logs_bucket_behavior` ({0}), must be one of {1}"
                .format(default_logs_bucket_behavior, allowed_values)
            )

        self._default_logs_bucket_behavior = default_logs_bucket_behavior

    @property
    def disk_size_gb(self):
        """Gets the disk_size_gb of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions.

        Requested disk size for the VM that runs the build. Note that this is *NOT* \"disk free\"; some of the space will be used by the operating system and build utilities. Also note that this is the minimum disk size that will be allocated for the build -- the build may run with a larger disk than requested. At present, the maximum disk size is 2000GB; builds that request more than the maximum are rejected with an error.

        :return: The disk_size_gb of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions.
        :rtype: str
        """
        return self._disk_size_gb

    @disk_size_gb.setter
    def disk_size_gb(self, disk_size_gb):
        """Sets the disk_size_gb of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions.

        Requested disk size for the VM that runs the build. Note that this is *NOT* \"disk free\"; some of the space will be used by the operating system and build utilities. Also note that this is the minimum disk size that will be allocated for the build -- the build may run with a larger disk than requested. At present, the maximum disk size is 2000GB; builds that request more than the maximum are rejected with an error.

        :param disk_size_gb: The disk_size_gb of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions.
        :type disk_size_gb: str
        """

        self._disk_size_gb = disk_size_gb

    @property
    def dynamic_substitutions(self):
        """Gets the dynamic_substitutions of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions.

        Option to specify whether or not to apply bash style string operations to the substitutions. NOTE: this is always enabled for triggered builds and cannot be overridden in the build configuration file.

        :return: The dynamic_substitutions of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions.
        :rtype: bool
        """
        return self._dynamic_substitutions

    @dynamic_substitutions.setter
    def dynamic_substitutions(self, dynamic_substitutions):
        """Sets the dynamic_substitutions of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions.

        Option to specify whether or not to apply bash style string operations to the substitutions. NOTE: this is always enabled for triggered builds and cannot be overridden in the build configuration file.

        :param dynamic_substitutions: The dynamic_substitutions of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions.
        :type dynamic_substitutions: bool
        """

        self._dynamic_substitutions = dynamic_substitutions

    @property
    def env(self):
        """Gets the env of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions.

        A list of global environment variable definitions that will exist for all build steps in this build. If a variable is defined in both globally and in a build step, the variable will use the build step value. The elements are of the form \"KEY=VALUE\" for the environment variable \"KEY\" being given the value \"VALUE\".

        :return: The env of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions.
        :rtype: List[str]
        """
        return self._env

    @env.setter
    def env(self, env):
        """Sets the env of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions.

        A list of global environment variable definitions that will exist for all build steps in this build. If a variable is defined in both globally and in a build step, the variable will use the build step value. The elements are of the form \"KEY=VALUE\" for the environment variable \"KEY\" being given the value \"VALUE\".

        :param env: The env of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions.
        :type env: List[str]
        """

        self._env = env

    @property
    def log_streaming_option(self):
        """Gets the log_streaming_option of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions.

        Option to define build log streaming behavior to Cloud Storage.

        :return: The log_streaming_option of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions.
        :rtype: str
        """
        return self._log_streaming_option

    @log_streaming_option.setter
    def log_streaming_option(self, log_streaming_option):
        """Sets the log_streaming_option of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions.

        Option to define build log streaming behavior to Cloud Storage.

        :param log_streaming_option: The log_streaming_option of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions.
        :type log_streaming_option: str
        """
        allowed_values = ["STREAM_DEFAULT", "STREAM_ON", "STREAM_OFF"]  # noqa: E501
        if log_streaming_option not in allowed_values:
            raise ValueError(
                "Invalid value for `log_streaming_option` ({0}), must be one of {1}"
                .format(log_streaming_option, allowed_values)
            )

        self._log_streaming_option = log_streaming_option

    @property
    def logging(self):
        """Gets the logging of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions.

        Option to specify the logging mode, which determines if and where build logs are stored.

        :return: The logging of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions.
        :rtype: str
        """
        return self._logging

    @logging.setter
    def logging(self, logging):
        """Sets the logging of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions.

        Option to specify the logging mode, which determines if and where build logs are stored.

        :param logging: The logging of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions.
        :type logging: str
        """
        allowed_values = ["LOGGING_UNSPECIFIED", "LEGACY", "GCS_ONLY", "STACKDRIVER_ONLY", "CLOUD_LOGGING_ONLY", "NONE"]  # noqa: E501
        if logging not in allowed_values:
            raise ValueError(
                "Invalid value for `logging` ({0}), must be one of {1}"
                .format(logging, allowed_values)
            )

        self._logging = logging

    @property
    def machine_type(self):
        """Gets the machine_type of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions.

        Compute Engine machine type on which to run the build.

        :return: The machine_type of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions.
        :rtype: str
        """
        return self._machine_type

    @machine_type.setter
    def machine_type(self, machine_type):
        """Sets the machine_type of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions.

        Compute Engine machine type on which to run the build.

        :param machine_type: The machine_type of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions.
        :type machine_type: str
        """
        allowed_values = ["UNSPECIFIED", "N1_HIGHCPU_8", "N1_HIGHCPU_32", "E2_HIGHCPU_8", "E2_HIGHCPU_32", "E2_MEDIUM"]  # noqa: E501
        if machine_type not in allowed_values:
            raise ValueError(
                "Invalid value for `machine_type` ({0}), must be one of {1}"
                .format(machine_type, allowed_values)
            )

        self._machine_type = machine_type

    @property
    def pool(self):
        """Gets the pool of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions.


        :return: The pool of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions.
        :rtype: ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptionsPoolOption
        """
        return self._pool

    @pool.setter
    def pool(self, pool):
        """Sets the pool of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions.


        :param pool: The pool of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions.
        :type pool: ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptionsPoolOption
        """

        self._pool = pool

    @property
    def requested_verify_option(self):
        """Gets the requested_verify_option of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions.

        Requested verifiability options.

        :return: The requested_verify_option of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions.
        :rtype: str
        """
        return self._requested_verify_option

    @requested_verify_option.setter
    def requested_verify_option(self, requested_verify_option):
        """Sets the requested_verify_option of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions.

        Requested verifiability options.

        :param requested_verify_option: The requested_verify_option of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions.
        :type requested_verify_option: str
        """
        allowed_values = ["NOT_VERIFIED", "VERIFIED"]  # noqa: E501
        if requested_verify_option not in allowed_values:
            raise ValueError(
                "Invalid value for `requested_verify_option` ({0}), must be one of {1}"
                .format(requested_verify_option, allowed_values)
            )

        self._requested_verify_option = requested_verify_option

    @property
    def secret_env(self):
        """Gets the secret_env of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions.

        A list of global environment variables, which are encrypted using a Cloud Key Management Service crypto key. These values must be specified in the build's `Secret`. These variables will be available to all build steps in this build.

        :return: The secret_env of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions.
        :rtype: List[str]
        """
        return self._secret_env

    @secret_env.setter
    def secret_env(self, secret_env):
        """Sets the secret_env of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions.

        A list of global environment variables, which are encrypted using a Cloud Key Management Service crypto key. These values must be specified in the build's `Secret`. These variables will be available to all build steps in this build.

        :param secret_env: The secret_env of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions.
        :type secret_env: List[str]
        """

        self._secret_env = secret_env

    @property
    def source_provenance_hash(self):
        """Gets the source_provenance_hash of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions.

        Requested hash for SourceProvenance.

        :return: The source_provenance_hash of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions.
        :rtype: List[str]
        """
        return self._source_provenance_hash

    @source_provenance_hash.setter
    def source_provenance_hash(self, source_provenance_hash):
        """Sets the source_provenance_hash of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions.

        Requested hash for SourceProvenance.

        :param source_provenance_hash: The source_provenance_hash of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions.
        :type source_provenance_hash: List[str]
        """
        allowed_values = ["NONE", "SHA256", "MD5", "SHA512"]  # noqa: E501
        if not set(source_provenance_hash).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `source_provenance_hash` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(source_provenance_hash) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._source_provenance_hash = source_provenance_hash

    @property
    def substitution_option(self):
        """Gets the substitution_option of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions.

        Option to specify behavior when there is an error in the substitution checks. NOTE: this is always set to ALLOW_LOOSE for triggered builds and cannot be overridden in the build configuration file.

        :return: The substitution_option of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions.
        :rtype: str
        """
        return self._substitution_option

    @substitution_option.setter
    def substitution_option(self, substitution_option):
        """Sets the substitution_option of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions.

        Option to specify behavior when there is an error in the substitution checks. NOTE: this is always set to ALLOW_LOOSE for triggered builds and cannot be overridden in the build configuration file.

        :param substitution_option: The substitution_option of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions.
        :type substitution_option: str
        """
        allowed_values = ["MUST_MATCH", "ALLOW_LOOSE"]  # noqa: E501
        if substitution_option not in allowed_values:
            raise ValueError(
                "Invalid value for `substitution_option` ({0}), must be one of {1}"
                .format(substitution_option, allowed_values)
            )

        self._substitution_option = substitution_option

    @property
    def volumes(self):
        """Gets the volumes of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions.

        Global list of volumes to mount for ALL build steps Each volume is created as an empty volume prior to starting the build process. Upon completion of the build, volumes and their contents are discarded. Global volume names and paths cannot conflict with the volumes defined a build step. Using a global volume in a build with only one step is not valid as it is indicative of a build request with an incorrect configuration.

        :return: The volumes of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions.
        :rtype: List[ContaineranalysisGoogleDevtoolsCloudbuildV1Volume]
        """
        return self._volumes

    @volumes.setter
    def volumes(self, volumes):
        """Sets the volumes of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions.

        Global list of volumes to mount for ALL build steps Each volume is created as an empty volume prior to starting the build process. Upon completion of the build, volumes and their contents are discarded. Global volume names and paths cannot conflict with the volumes defined a build step. Using a global volume in a build with only one step is not valid as it is indicative of a build request with an incorrect configuration.

        :param volumes: The volumes of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions.
        :type volumes: List[ContaineranalysisGoogleDevtoolsCloudbuildV1Volume]
        """

        self._volumes = volumes

    @property
    def worker_pool(self):
        """Gets the worker_pool of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions.

        This field deprecated; please use `pool.name` instead.

        :return: The worker_pool of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions.
        :rtype: str
        """
        return self._worker_pool

    @worker_pool.setter
    def worker_pool(self, worker_pool):
        """Sets the worker_pool of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions.

        This field deprecated; please use `pool.name` instead.

        :param worker_pool: The worker_pool of this ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions.
        :type worker_pool: str
        """

        self._worker_pool = worker_pool
