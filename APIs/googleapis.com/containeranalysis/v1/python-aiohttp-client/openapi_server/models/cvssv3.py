# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CVSSv3(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attack_complexity: str=None, attack_vector: str=None, availability_impact: str=None, base_score: float=None, confidentiality_impact: str=None, exploitability_score: float=None, impact_score: float=None, integrity_impact: str=None, privileges_required: str=None, scope: str=None, user_interaction: str=None):
        """CVSSv3 - a model defined in OpenAPI

        :param attack_complexity: The attack_complexity of this CVSSv3.
        :param attack_vector: The attack_vector of this CVSSv3.
        :param availability_impact: The availability_impact of this CVSSv3.
        :param base_score: The base_score of this CVSSv3.
        :param confidentiality_impact: The confidentiality_impact of this CVSSv3.
        :param exploitability_score: The exploitability_score of this CVSSv3.
        :param impact_score: The impact_score of this CVSSv3.
        :param integrity_impact: The integrity_impact of this CVSSv3.
        :param privileges_required: The privileges_required of this CVSSv3.
        :param scope: The scope of this CVSSv3.
        :param user_interaction: The user_interaction of this CVSSv3.
        """
        self.openapi_types = {
            'attack_complexity': str,
            'attack_vector': str,
            'availability_impact': str,
            'base_score': float,
            'confidentiality_impact': str,
            'exploitability_score': float,
            'impact_score': float,
            'integrity_impact': str,
            'privileges_required': str,
            'scope': str,
            'user_interaction': str
        }

        self.attribute_map = {
            'attack_complexity': 'attackComplexity',
            'attack_vector': 'attackVector',
            'availability_impact': 'availabilityImpact',
            'base_score': 'baseScore',
            'confidentiality_impact': 'confidentialityImpact',
            'exploitability_score': 'exploitabilityScore',
            'impact_score': 'impactScore',
            'integrity_impact': 'integrityImpact',
            'privileges_required': 'privilegesRequired',
            'scope': 'scope',
            'user_interaction': 'userInteraction'
        }

        self._attack_complexity = attack_complexity
        self._attack_vector = attack_vector
        self._availability_impact = availability_impact
        self._base_score = base_score
        self._confidentiality_impact = confidentiality_impact
        self._exploitability_score = exploitability_score
        self._impact_score = impact_score
        self._integrity_impact = integrity_impact
        self._privileges_required = privileges_required
        self._scope = scope
        self._user_interaction = user_interaction

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CVSSv3':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CVSSv3 of this CVSSv3.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attack_complexity(self):
        """Gets the attack_complexity of this CVSSv3.


        :return: The attack_complexity of this CVSSv3.
        :rtype: str
        """
        return self._attack_complexity

    @attack_complexity.setter
    def attack_complexity(self, attack_complexity):
        """Sets the attack_complexity of this CVSSv3.


        :param attack_complexity: The attack_complexity of this CVSSv3.
        :type attack_complexity: str
        """
        allowed_values = ["ATTACK_COMPLEXITY_UNSPECIFIED", "ATTACK_COMPLEXITY_LOW", "ATTACK_COMPLEXITY_HIGH"]  # noqa: E501
        if attack_complexity not in allowed_values:
            raise ValueError(
                "Invalid value for `attack_complexity` ({0}), must be one of {1}"
                .format(attack_complexity, allowed_values)
            )

        self._attack_complexity = attack_complexity

    @property
    def attack_vector(self):
        """Gets the attack_vector of this CVSSv3.

        Base Metrics Represents the intrinsic characteristics of a vulnerability that are constant over time and across user environments.

        :return: The attack_vector of this CVSSv3.
        :rtype: str
        """
        return self._attack_vector

    @attack_vector.setter
    def attack_vector(self, attack_vector):
        """Sets the attack_vector of this CVSSv3.

        Base Metrics Represents the intrinsic characteristics of a vulnerability that are constant over time and across user environments.

        :param attack_vector: The attack_vector of this CVSSv3.
        :type attack_vector: str
        """
        allowed_values = ["ATTACK_VECTOR_UNSPECIFIED", "ATTACK_VECTOR_NETWORK", "ATTACK_VECTOR_ADJACENT", "ATTACK_VECTOR_LOCAL", "ATTACK_VECTOR_PHYSICAL"]  # noqa: E501
        if attack_vector not in allowed_values:
            raise ValueError(
                "Invalid value for `attack_vector` ({0}), must be one of {1}"
                .format(attack_vector, allowed_values)
            )

        self._attack_vector = attack_vector

    @property
    def availability_impact(self):
        """Gets the availability_impact of this CVSSv3.


        :return: The availability_impact of this CVSSv3.
        :rtype: str
        """
        return self._availability_impact

    @availability_impact.setter
    def availability_impact(self, availability_impact):
        """Sets the availability_impact of this CVSSv3.


        :param availability_impact: The availability_impact of this CVSSv3.
        :type availability_impact: str
        """
        allowed_values = ["IMPACT_UNSPECIFIED", "IMPACT_HIGH", "IMPACT_LOW", "IMPACT_NONE"]  # noqa: E501
        if availability_impact not in allowed_values:
            raise ValueError(
                "Invalid value for `availability_impact` ({0}), must be one of {1}"
                .format(availability_impact, allowed_values)
            )

        self._availability_impact = availability_impact

    @property
    def base_score(self):
        """Gets the base_score of this CVSSv3.

        The base score is a function of the base metric scores.

        :return: The base_score of this CVSSv3.
        :rtype: float
        """
        return self._base_score

    @base_score.setter
    def base_score(self, base_score):
        """Sets the base_score of this CVSSv3.

        The base score is a function of the base metric scores.

        :param base_score: The base_score of this CVSSv3.
        :type base_score: float
        """

        self._base_score = base_score

    @property
    def confidentiality_impact(self):
        """Gets the confidentiality_impact of this CVSSv3.


        :return: The confidentiality_impact of this CVSSv3.
        :rtype: str
        """
        return self._confidentiality_impact

    @confidentiality_impact.setter
    def confidentiality_impact(self, confidentiality_impact):
        """Sets the confidentiality_impact of this CVSSv3.


        :param confidentiality_impact: The confidentiality_impact of this CVSSv3.
        :type confidentiality_impact: str
        """
        allowed_values = ["IMPACT_UNSPECIFIED", "IMPACT_HIGH", "IMPACT_LOW", "IMPACT_NONE"]  # noqa: E501
        if confidentiality_impact not in allowed_values:
            raise ValueError(
                "Invalid value for `confidentiality_impact` ({0}), must be one of {1}"
                .format(confidentiality_impact, allowed_values)
            )

        self._confidentiality_impact = confidentiality_impact

    @property
    def exploitability_score(self):
        """Gets the exploitability_score of this CVSSv3.


        :return: The exploitability_score of this CVSSv3.
        :rtype: float
        """
        return self._exploitability_score

    @exploitability_score.setter
    def exploitability_score(self, exploitability_score):
        """Sets the exploitability_score of this CVSSv3.


        :param exploitability_score: The exploitability_score of this CVSSv3.
        :type exploitability_score: float
        """

        self._exploitability_score = exploitability_score

    @property
    def impact_score(self):
        """Gets the impact_score of this CVSSv3.


        :return: The impact_score of this CVSSv3.
        :rtype: float
        """
        return self._impact_score

    @impact_score.setter
    def impact_score(self, impact_score):
        """Sets the impact_score of this CVSSv3.


        :param impact_score: The impact_score of this CVSSv3.
        :type impact_score: float
        """

        self._impact_score = impact_score

    @property
    def integrity_impact(self):
        """Gets the integrity_impact of this CVSSv3.


        :return: The integrity_impact of this CVSSv3.
        :rtype: str
        """
        return self._integrity_impact

    @integrity_impact.setter
    def integrity_impact(self, integrity_impact):
        """Sets the integrity_impact of this CVSSv3.


        :param integrity_impact: The integrity_impact of this CVSSv3.
        :type integrity_impact: str
        """
        allowed_values = ["IMPACT_UNSPECIFIED", "IMPACT_HIGH", "IMPACT_LOW", "IMPACT_NONE"]  # noqa: E501
        if integrity_impact not in allowed_values:
            raise ValueError(
                "Invalid value for `integrity_impact` ({0}), must be one of {1}"
                .format(integrity_impact, allowed_values)
            )

        self._integrity_impact = integrity_impact

    @property
    def privileges_required(self):
        """Gets the privileges_required of this CVSSv3.


        :return: The privileges_required of this CVSSv3.
        :rtype: str
        """
        return self._privileges_required

    @privileges_required.setter
    def privileges_required(self, privileges_required):
        """Sets the privileges_required of this CVSSv3.


        :param privileges_required: The privileges_required of this CVSSv3.
        :type privileges_required: str
        """
        allowed_values = ["PRIVILEGES_REQUIRED_UNSPECIFIED", "PRIVILEGES_REQUIRED_NONE", "PRIVILEGES_REQUIRED_LOW", "PRIVILEGES_REQUIRED_HIGH"]  # noqa: E501
        if privileges_required not in allowed_values:
            raise ValueError(
                "Invalid value for `privileges_required` ({0}), must be one of {1}"
                .format(privileges_required, allowed_values)
            )

        self._privileges_required = privileges_required

    @property
    def scope(self):
        """Gets the scope of this CVSSv3.


        :return: The scope of this CVSSv3.
        :rtype: str
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this CVSSv3.


        :param scope: The scope of this CVSSv3.
        :type scope: str
        """
        allowed_values = ["SCOPE_UNSPECIFIED", "SCOPE_UNCHANGED", "SCOPE_CHANGED"]  # noqa: E501
        if scope not in allowed_values:
            raise ValueError(
                "Invalid value for `scope` ({0}), must be one of {1}"
                .format(scope, allowed_values)
            )

        self._scope = scope

    @property
    def user_interaction(self):
        """Gets the user_interaction of this CVSSv3.


        :return: The user_interaction of this CVSSv3.
        :rtype: str
        """
        return self._user_interaction

    @user_interaction.setter
    def user_interaction(self, user_interaction):
        """Sets the user_interaction of this CVSSv3.


        :param user_interaction: The user_interaction of this CVSSv3.
        :type user_interaction: str
        """
        allowed_values = ["USER_INTERACTION_UNSPECIFIED", "USER_INTERACTION_NONE", "USER_INTERACTION_REQUIRED"]  # noqa: E501
        if user_interaction not in allowed_values:
            raise ValueError(
                "Invalid value for `user_interaction` ({0}), must be one of {1}"
                .format(user_interaction, allowed_values)
            )

        self._user_interaction = user_interaction
