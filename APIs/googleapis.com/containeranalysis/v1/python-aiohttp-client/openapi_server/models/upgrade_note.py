# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.upgrade_distribution import UpgradeDistribution
from openapi_server.models.version import Version
from openapi_server.models.windows_update import WindowsUpdate
from openapi_server import util


class UpgradeNote(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, distributions: List[UpgradeDistribution]=None, package: str=None, version: Version=None, windows_update: WindowsUpdate=None):
        """UpgradeNote - a model defined in OpenAPI

        :param distributions: The distributions of this UpgradeNote.
        :param package: The package of this UpgradeNote.
        :param version: The version of this UpgradeNote.
        :param windows_update: The windows_update of this UpgradeNote.
        """
        self.openapi_types = {
            'distributions': List[UpgradeDistribution],
            'package': str,
            'version': Version,
            'windows_update': WindowsUpdate
        }

        self.attribute_map = {
            'distributions': 'distributions',
            'package': 'package',
            'version': 'version',
            'windows_update': 'windowsUpdate'
        }

        self._distributions = distributions
        self._package = package
        self._version = version
        self._windows_update = windows_update

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpgradeNote':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpgradeNote of this UpgradeNote.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def distributions(self):
        """Gets the distributions of this UpgradeNote.

        Metadata about the upgrade for each specific operating system.

        :return: The distributions of this UpgradeNote.
        :rtype: List[UpgradeDistribution]
        """
        return self._distributions

    @distributions.setter
    def distributions(self, distributions):
        """Sets the distributions of this UpgradeNote.

        Metadata about the upgrade for each specific operating system.

        :param distributions: The distributions of this UpgradeNote.
        :type distributions: List[UpgradeDistribution]
        """

        self._distributions = distributions

    @property
    def package(self):
        """Gets the package of this UpgradeNote.

        Required for non-Windows OS. The package this Upgrade is for.

        :return: The package of this UpgradeNote.
        :rtype: str
        """
        return self._package

    @package.setter
    def package(self, package):
        """Sets the package of this UpgradeNote.

        Required for non-Windows OS. The package this Upgrade is for.

        :param package: The package of this UpgradeNote.
        :type package: str
        """

        self._package = package

    @property
    def version(self):
        """Gets the version of this UpgradeNote.


        :return: The version of this UpgradeNote.
        :rtype: Version
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this UpgradeNote.


        :param version: The version of this UpgradeNote.
        :type version: Version
        """

        self._version = version

    @property
    def windows_update(self):
        """Gets the windows_update of this UpgradeNote.


        :return: The windows_update of this UpgradeNote.
        :rtype: WindowsUpdate
        """
        return self._windows_update

    @windows_update.setter
    def windows_update(self, windows_update):
        """Sets the windows_update of this UpgradeNote.


        :param windows_update: The windows_update of this UpgradeNote.
        :type windows_update: WindowsUpdate
        """

        self._windows_update = windows_update
