# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.containeranalysis_google_devtools_cloudbuild_v1_connected_repository import ContaineranalysisGoogleDevtoolsCloudbuildV1ConnectedRepository
from openapi_server.models.containeranalysis_google_devtools_cloudbuild_v1_file_hashes import ContaineranalysisGoogleDevtoolsCloudbuildV1FileHashes
from openapi_server.models.containeranalysis_google_devtools_cloudbuild_v1_git_source import ContaineranalysisGoogleDevtoolsCloudbuildV1GitSource
from openapi_server.models.containeranalysis_google_devtools_cloudbuild_v1_repo_source import ContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource
from openapi_server.models.containeranalysis_google_devtools_cloudbuild_v1_storage_source import ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSource
from openapi_server.models.containeranalysis_google_devtools_cloudbuild_v1_storage_source_manifest import ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSourceManifest
from openapi_server import util


class ContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, file_hashes: Dict[str, ContaineranalysisGoogleDevtoolsCloudbuildV1FileHashes]=None, resolved_connected_repository: ContaineranalysisGoogleDevtoolsCloudbuildV1ConnectedRepository=None, resolved_git_source: ContaineranalysisGoogleDevtoolsCloudbuildV1GitSource=None, resolved_repo_source: ContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource=None, resolved_storage_source: ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSource=None, resolved_storage_source_manifest: ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSourceManifest=None):
        """ContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance - a model defined in OpenAPI

        :param file_hashes: The file_hashes of this ContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance.
        :param resolved_connected_repository: The resolved_connected_repository of this ContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance.
        :param resolved_git_source: The resolved_git_source of this ContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance.
        :param resolved_repo_source: The resolved_repo_source of this ContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance.
        :param resolved_storage_source: The resolved_storage_source of this ContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance.
        :param resolved_storage_source_manifest: The resolved_storage_source_manifest of this ContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance.
        """
        self.openapi_types = {
            'file_hashes': Dict[str, ContaineranalysisGoogleDevtoolsCloudbuildV1FileHashes],
            'resolved_connected_repository': ContaineranalysisGoogleDevtoolsCloudbuildV1ConnectedRepository,
            'resolved_git_source': ContaineranalysisGoogleDevtoolsCloudbuildV1GitSource,
            'resolved_repo_source': ContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource,
            'resolved_storage_source': ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSource,
            'resolved_storage_source_manifest': ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSourceManifest
        }

        self.attribute_map = {
            'file_hashes': 'fileHashes',
            'resolved_connected_repository': 'resolvedConnectedRepository',
            'resolved_git_source': 'resolvedGitSource',
            'resolved_repo_source': 'resolvedRepoSource',
            'resolved_storage_source': 'resolvedStorageSource',
            'resolved_storage_source_manifest': 'resolvedStorageSourceManifest'
        }

        self._file_hashes = file_hashes
        self._resolved_connected_repository = resolved_connected_repository
        self._resolved_git_source = resolved_git_source
        self._resolved_repo_source = resolved_repo_source
        self._resolved_storage_source = resolved_storage_source
        self._resolved_storage_source_manifest = resolved_storage_source_manifest

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance of this ContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def file_hashes(self):
        """Gets the file_hashes of this ContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance.

        Output only. Hash(es) of the build source, which can be used to verify that the original source integrity was maintained in the build. Note that `FileHashes` will only be populated if `BuildOptions` has requested a `SourceProvenanceHash`. The keys to this map are file paths used as build source and the values contain the hash values for those files. If the build source came in a single package such as a gzipped tarfile (`.tar.gz`), the `FileHash` will be for the single path to that file.

        :return: The file_hashes of this ContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance.
        :rtype: Dict[str, ContaineranalysisGoogleDevtoolsCloudbuildV1FileHashes]
        """
        return self._file_hashes

    @file_hashes.setter
    def file_hashes(self, file_hashes):
        """Sets the file_hashes of this ContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance.

        Output only. Hash(es) of the build source, which can be used to verify that the original source integrity was maintained in the build. Note that `FileHashes` will only be populated if `BuildOptions` has requested a `SourceProvenanceHash`. The keys to this map are file paths used as build source and the values contain the hash values for those files. If the build source came in a single package such as a gzipped tarfile (`.tar.gz`), the `FileHash` will be for the single path to that file.

        :param file_hashes: The file_hashes of this ContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance.
        :type file_hashes: Dict[str, ContaineranalysisGoogleDevtoolsCloudbuildV1FileHashes]
        """

        self._file_hashes = file_hashes

    @property
    def resolved_connected_repository(self):
        """Gets the resolved_connected_repository of this ContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance.


        :return: The resolved_connected_repository of this ContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance.
        :rtype: ContaineranalysisGoogleDevtoolsCloudbuildV1ConnectedRepository
        """
        return self._resolved_connected_repository

    @resolved_connected_repository.setter
    def resolved_connected_repository(self, resolved_connected_repository):
        """Sets the resolved_connected_repository of this ContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance.


        :param resolved_connected_repository: The resolved_connected_repository of this ContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance.
        :type resolved_connected_repository: ContaineranalysisGoogleDevtoolsCloudbuildV1ConnectedRepository
        """

        self._resolved_connected_repository = resolved_connected_repository

    @property
    def resolved_git_source(self):
        """Gets the resolved_git_source of this ContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance.


        :return: The resolved_git_source of this ContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance.
        :rtype: ContaineranalysisGoogleDevtoolsCloudbuildV1GitSource
        """
        return self._resolved_git_source

    @resolved_git_source.setter
    def resolved_git_source(self, resolved_git_source):
        """Sets the resolved_git_source of this ContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance.


        :param resolved_git_source: The resolved_git_source of this ContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance.
        :type resolved_git_source: ContaineranalysisGoogleDevtoolsCloudbuildV1GitSource
        """

        self._resolved_git_source = resolved_git_source

    @property
    def resolved_repo_source(self):
        """Gets the resolved_repo_source of this ContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance.


        :return: The resolved_repo_source of this ContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance.
        :rtype: ContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource
        """
        return self._resolved_repo_source

    @resolved_repo_source.setter
    def resolved_repo_source(self, resolved_repo_source):
        """Sets the resolved_repo_source of this ContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance.


        :param resolved_repo_source: The resolved_repo_source of this ContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance.
        :type resolved_repo_source: ContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource
        """

        self._resolved_repo_source = resolved_repo_source

    @property
    def resolved_storage_source(self):
        """Gets the resolved_storage_source of this ContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance.


        :return: The resolved_storage_source of this ContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance.
        :rtype: ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSource
        """
        return self._resolved_storage_source

    @resolved_storage_source.setter
    def resolved_storage_source(self, resolved_storage_source):
        """Sets the resolved_storage_source of this ContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance.


        :param resolved_storage_source: The resolved_storage_source of this ContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance.
        :type resolved_storage_source: ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSource
        """

        self._resolved_storage_source = resolved_storage_source

    @property
    def resolved_storage_source_manifest(self):
        """Gets the resolved_storage_source_manifest of this ContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance.


        :return: The resolved_storage_source_manifest of this ContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance.
        :rtype: ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSourceManifest
        """
        return self._resolved_storage_source_manifest

    @resolved_storage_source_manifest.setter
    def resolved_storage_source_manifest(self, resolved_storage_source_manifest):
        """Sets the resolved_storage_source_manifest of this ContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance.


        :param resolved_storage_source_manifest: The resolved_storage_source_manifest of this ContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance.
        :type resolved_storage_source_manifest: ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSourceManifest
        """

        self._resolved_storage_source_manifest = resolved_storage_source_manifest
