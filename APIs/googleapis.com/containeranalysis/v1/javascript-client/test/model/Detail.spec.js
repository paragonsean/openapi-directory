/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ContainerAnalysisApi);
  }
}(this, function(expect, ContainerAnalysisApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new ContainerAnalysisApi.Detail();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Detail', function() {
    it('should create an instance of Detail', function() {
      // uncomment below and update the code to test Detail
      //var instance = new ContainerAnalysisApi.Detail();
      //expect(instance).to.be.a(ContainerAnalysisApi.Detail);
    });

    it('should have the property affectedCpeUri (base name: "affectedCpeUri")', function() {
      // uncomment below and update the code to test the property affectedCpeUri
      //var instance = new ContainerAnalysisApi.Detail();
      //expect(instance).to.be();
    });

    it('should have the property affectedPackage (base name: "affectedPackage")', function() {
      // uncomment below and update the code to test the property affectedPackage
      //var instance = new ContainerAnalysisApi.Detail();
      //expect(instance).to.be();
    });

    it('should have the property affectedVersionEnd (base name: "affectedVersionEnd")', function() {
      // uncomment below and update the code to test the property affectedVersionEnd
      //var instance = new ContainerAnalysisApi.Detail();
      //expect(instance).to.be();
    });

    it('should have the property affectedVersionStart (base name: "affectedVersionStart")', function() {
      // uncomment below and update the code to test the property affectedVersionStart
      //var instance = new ContainerAnalysisApi.Detail();
      //expect(instance).to.be();
    });

    it('should have the property description (base name: "description")', function() {
      // uncomment below and update the code to test the property description
      //var instance = new ContainerAnalysisApi.Detail();
      //expect(instance).to.be();
    });

    it('should have the property fixedCpeUri (base name: "fixedCpeUri")', function() {
      // uncomment below and update the code to test the property fixedCpeUri
      //var instance = new ContainerAnalysisApi.Detail();
      //expect(instance).to.be();
    });

    it('should have the property fixedPackage (base name: "fixedPackage")', function() {
      // uncomment below and update the code to test the property fixedPackage
      //var instance = new ContainerAnalysisApi.Detail();
      //expect(instance).to.be();
    });

    it('should have the property fixedVersion (base name: "fixedVersion")', function() {
      // uncomment below and update the code to test the property fixedVersion
      //var instance = new ContainerAnalysisApi.Detail();
      //expect(instance).to.be();
    });

    it('should have the property isObsolete (base name: "isObsolete")', function() {
      // uncomment below and update the code to test the property isObsolete
      //var instance = new ContainerAnalysisApi.Detail();
      //expect(instance).to.be();
    });

    it('should have the property packageType (base name: "packageType")', function() {
      // uncomment below and update the code to test the property packageType
      //var instance = new ContainerAnalysisApi.Detail();
      //expect(instance).to.be();
    });

    it('should have the property severityName (base name: "severityName")', function() {
      // uncomment below and update the code to test the property severityName
      //var instance = new ContainerAnalysisApi.Detail();
      //expect(instance).to.be();
    });

    it('should have the property source (base name: "source")', function() {
      // uncomment below and update the code to test the property source
      //var instance = new ContainerAnalysisApi.Detail();
      //expect(instance).to.be();
    });

    it('should have the property sourceUpdateTime (base name: "sourceUpdateTime")', function() {
      // uncomment below and update the code to test the property sourceUpdateTime
      //var instance = new ContainerAnalysisApi.Detail();
      //expect(instance).to.be();
    });

    it('should have the property vendor (base name: "vendor")', function() {
      // uncomment below and update the code to test the property vendor
      //var instance = new ContainerAnalysisApi.Detail();
      //expect(instance).to.be();
    });

  });

}));
