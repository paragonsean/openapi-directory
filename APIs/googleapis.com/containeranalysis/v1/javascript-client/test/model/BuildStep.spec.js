/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ContainerAnalysisApi);
  }
}(this, function(expect, ContainerAnalysisApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new ContainerAnalysisApi.BuildStep();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('BuildStep', function() {
    it('should create an instance of BuildStep', function() {
      // uncomment below and update the code to test BuildStep
      //var instance = new ContainerAnalysisApi.BuildStep();
      //expect(instance).to.be.a(ContainerAnalysisApi.BuildStep);
    });

    it('should have the property allowExitCodes (base name: "allowExitCodes")', function() {
      // uncomment below and update the code to test the property allowExitCodes
      //var instance = new ContainerAnalysisApi.BuildStep();
      //expect(instance).to.be();
    });

    it('should have the property allowFailure (base name: "allowFailure")', function() {
      // uncomment below and update the code to test the property allowFailure
      //var instance = new ContainerAnalysisApi.BuildStep();
      //expect(instance).to.be();
    });

    it('should have the property args (base name: "args")', function() {
      // uncomment below and update the code to test the property args
      //var instance = new ContainerAnalysisApi.BuildStep();
      //expect(instance).to.be();
    });

    it('should have the property automapSubstitutions (base name: "automapSubstitutions")', function() {
      // uncomment below and update the code to test the property automapSubstitutions
      //var instance = new ContainerAnalysisApi.BuildStep();
      //expect(instance).to.be();
    });

    it('should have the property dir (base name: "dir")', function() {
      // uncomment below and update the code to test the property dir
      //var instance = new ContainerAnalysisApi.BuildStep();
      //expect(instance).to.be();
    });

    it('should have the property entrypoint (base name: "entrypoint")', function() {
      // uncomment below and update the code to test the property entrypoint
      //var instance = new ContainerAnalysisApi.BuildStep();
      //expect(instance).to.be();
    });

    it('should have the property env (base name: "env")', function() {
      // uncomment below and update the code to test the property env
      //var instance = new ContainerAnalysisApi.BuildStep();
      //expect(instance).to.be();
    });

    it('should have the property exitCode (base name: "exitCode")', function() {
      // uncomment below and update the code to test the property exitCode
      //var instance = new ContainerAnalysisApi.BuildStep();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new ContainerAnalysisApi.BuildStep();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new ContainerAnalysisApi.BuildStep();
      //expect(instance).to.be();
    });

    it('should have the property pullTiming (base name: "pullTiming")', function() {
      // uncomment below and update the code to test the property pullTiming
      //var instance = new ContainerAnalysisApi.BuildStep();
      //expect(instance).to.be();
    });

    it('should have the property script (base name: "script")', function() {
      // uncomment below and update the code to test the property script
      //var instance = new ContainerAnalysisApi.BuildStep();
      //expect(instance).to.be();
    });

    it('should have the property secretEnv (base name: "secretEnv")', function() {
      // uncomment below and update the code to test the property secretEnv
      //var instance = new ContainerAnalysisApi.BuildStep();
      //expect(instance).to.be();
    });

    it('should have the property status (base name: "status")', function() {
      // uncomment below and update the code to test the property status
      //var instance = new ContainerAnalysisApi.BuildStep();
      //expect(instance).to.be();
    });

    it('should have the property timeout (base name: "timeout")', function() {
      // uncomment below and update the code to test the property timeout
      //var instance = new ContainerAnalysisApi.BuildStep();
      //expect(instance).to.be();
    });

    it('should have the property timing (base name: "timing")', function() {
      // uncomment below and update the code to test the property timing
      //var instance = new ContainerAnalysisApi.BuildStep();
      //expect(instance).to.be();
    });

    it('should have the property volumes (base name: "volumes")', function() {
      // uncomment below and update the code to test the property volumes
      //var instance = new ContainerAnalysisApi.BuildStep();
      //expect(instance).to.be();
    });

    it('should have the property waitFor (base name: "waitFor")', function() {
      // uncomment below and update the code to test the property waitFor
      //var instance = new ContainerAnalysisApi.BuildStep();
      //expect(instance).to.be();
    });

  });

}));
