/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ContainerAnalysisApi);
  }
}(this, function(expect, ContainerAnalysisApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new ContainerAnalysisApi.CVSS();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('CVSS', function() {
    it('should create an instance of CVSS', function() {
      // uncomment below and update the code to test CVSS
      //var instance = new ContainerAnalysisApi.CVSS();
      //expect(instance).to.be.a(ContainerAnalysisApi.CVSS);
    });

    it('should have the property attackComplexity (base name: "attackComplexity")', function() {
      // uncomment below and update the code to test the property attackComplexity
      //var instance = new ContainerAnalysisApi.CVSS();
      //expect(instance).to.be();
    });

    it('should have the property attackVector (base name: "attackVector")', function() {
      // uncomment below and update the code to test the property attackVector
      //var instance = new ContainerAnalysisApi.CVSS();
      //expect(instance).to.be();
    });

    it('should have the property authentication (base name: "authentication")', function() {
      // uncomment below and update the code to test the property authentication
      //var instance = new ContainerAnalysisApi.CVSS();
      //expect(instance).to.be();
    });

    it('should have the property availabilityImpact (base name: "availabilityImpact")', function() {
      // uncomment below and update the code to test the property availabilityImpact
      //var instance = new ContainerAnalysisApi.CVSS();
      //expect(instance).to.be();
    });

    it('should have the property baseScore (base name: "baseScore")', function() {
      // uncomment below and update the code to test the property baseScore
      //var instance = new ContainerAnalysisApi.CVSS();
      //expect(instance).to.be();
    });

    it('should have the property confidentialityImpact (base name: "confidentialityImpact")', function() {
      // uncomment below and update the code to test the property confidentialityImpact
      //var instance = new ContainerAnalysisApi.CVSS();
      //expect(instance).to.be();
    });

    it('should have the property exploitabilityScore (base name: "exploitabilityScore")', function() {
      // uncomment below and update the code to test the property exploitabilityScore
      //var instance = new ContainerAnalysisApi.CVSS();
      //expect(instance).to.be();
    });

    it('should have the property impactScore (base name: "impactScore")', function() {
      // uncomment below and update the code to test the property impactScore
      //var instance = new ContainerAnalysisApi.CVSS();
      //expect(instance).to.be();
    });

    it('should have the property integrityImpact (base name: "integrityImpact")', function() {
      // uncomment below and update the code to test the property integrityImpact
      //var instance = new ContainerAnalysisApi.CVSS();
      //expect(instance).to.be();
    });

    it('should have the property privilegesRequired (base name: "privilegesRequired")', function() {
      // uncomment below and update the code to test the property privilegesRequired
      //var instance = new ContainerAnalysisApi.CVSS();
      //expect(instance).to.be();
    });

    it('should have the property scope (base name: "scope")', function() {
      // uncomment below and update the code to test the property scope
      //var instance = new ContainerAnalysisApi.CVSS();
      //expect(instance).to.be();
    });

    it('should have the property userInteraction (base name: "userInteraction")', function() {
      // uncomment below and update the code to test the property userInteraction
      //var instance = new ContainerAnalysisApi.CVSS();
      //expect(instance).to.be();
    });

  });

}));
