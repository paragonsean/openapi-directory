/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AttestationNote from './AttestationNote';
import BuildNote from './BuildNote';
import ComplianceNote from './ComplianceNote';
import DSSEAttestationNote from './DSSEAttestationNote';
import DeploymentNote from './DeploymentNote';
import DiscoveryNote from './DiscoveryNote';
import ImageNote from './ImageNote';
import PackageNote from './PackageNote';
import RelatedUrl from './RelatedUrl';
import SBOMReferenceNote from './SBOMReferenceNote';
import UpgradeNote from './UpgradeNote';
import VulnerabilityAssessmentNote from './VulnerabilityAssessmentNote';
import VulnerabilityNote from './VulnerabilityNote';

/**
 * The Note model module.
 * @module model/Note
 * @version v1
 */
class Note {
    /**
     * Constructs a new <code>Note</code>.
     * A type of analysis that can be done for a resource.
     * @alias module:model/Note
     */
    constructor() { 
        
        Note.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Note</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Note} obj Optional instance to populate.
     * @return {module:model/Note} The populated <code>Note</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Note();

            if (data.hasOwnProperty('attestation')) {
                obj['attestation'] = AttestationNote.constructFromObject(data['attestation']);
            }
            if (data.hasOwnProperty('build')) {
                obj['build'] = BuildNote.constructFromObject(data['build']);
            }
            if (data.hasOwnProperty('compliance')) {
                obj['compliance'] = ComplianceNote.constructFromObject(data['compliance']);
            }
            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'String');
            }
            if (data.hasOwnProperty('deployment')) {
                obj['deployment'] = DeploymentNote.constructFromObject(data['deployment']);
            }
            if (data.hasOwnProperty('discovery')) {
                obj['discovery'] = DiscoveryNote.constructFromObject(data['discovery']);
            }
            if (data.hasOwnProperty('dsseAttestation')) {
                obj['dsseAttestation'] = DSSEAttestationNote.constructFromObject(data['dsseAttestation']);
            }
            if (data.hasOwnProperty('expirationTime')) {
                obj['expirationTime'] = ApiClient.convertToType(data['expirationTime'], 'String');
            }
            if (data.hasOwnProperty('image')) {
                obj['image'] = ImageNote.constructFromObject(data['image']);
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('longDescription')) {
                obj['longDescription'] = ApiClient.convertToType(data['longDescription'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('package')) {
                obj['package'] = PackageNote.constructFromObject(data['package']);
            }
            if (data.hasOwnProperty('relatedNoteNames')) {
                obj['relatedNoteNames'] = ApiClient.convertToType(data['relatedNoteNames'], ['String']);
            }
            if (data.hasOwnProperty('relatedUrl')) {
                obj['relatedUrl'] = ApiClient.convertToType(data['relatedUrl'], [RelatedUrl]);
            }
            if (data.hasOwnProperty('sbomReference')) {
                obj['sbomReference'] = SBOMReferenceNote.constructFromObject(data['sbomReference']);
            }
            if (data.hasOwnProperty('shortDescription')) {
                obj['shortDescription'] = ApiClient.convertToType(data['shortDescription'], 'String');
            }
            if (data.hasOwnProperty('updateTime')) {
                obj['updateTime'] = ApiClient.convertToType(data['updateTime'], 'String');
            }
            if (data.hasOwnProperty('upgrade')) {
                obj['upgrade'] = UpgradeNote.constructFromObject(data['upgrade']);
            }
            if (data.hasOwnProperty('vulnerability')) {
                obj['vulnerability'] = VulnerabilityNote.constructFromObject(data['vulnerability']);
            }
            if (data.hasOwnProperty('vulnerabilityAssessment')) {
                obj['vulnerabilityAssessment'] = VulnerabilityAssessmentNote.constructFromObject(data['vulnerabilityAssessment']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Note</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Note</code>.
     */
    static validateJSON(data) {
        // validate the optional field `attestation`
        if (data['attestation']) { // data not null
          AttestationNote.validateJSON(data['attestation']);
        }
        // validate the optional field `build`
        if (data['build']) { // data not null
          BuildNote.validateJSON(data['build']);
        }
        // validate the optional field `compliance`
        if (data['compliance']) { // data not null
          ComplianceNote.validateJSON(data['compliance']);
        }
        // ensure the json data is a string
        if (data['createTime'] && !(typeof data['createTime'] === 'string' || data['createTime'] instanceof String)) {
            throw new Error("Expected the field `createTime` to be a primitive type in the JSON string but got " + data['createTime']);
        }
        // validate the optional field `deployment`
        if (data['deployment']) { // data not null
          DeploymentNote.validateJSON(data['deployment']);
        }
        // validate the optional field `discovery`
        if (data['discovery']) { // data not null
          DiscoveryNote.validateJSON(data['discovery']);
        }
        // validate the optional field `dsseAttestation`
        if (data['dsseAttestation']) { // data not null
          DSSEAttestationNote.validateJSON(data['dsseAttestation']);
        }
        // ensure the json data is a string
        if (data['expirationTime'] && !(typeof data['expirationTime'] === 'string' || data['expirationTime'] instanceof String)) {
            throw new Error("Expected the field `expirationTime` to be a primitive type in the JSON string but got " + data['expirationTime']);
        }
        // validate the optional field `image`
        if (data['image']) { // data not null
          ImageNote.validateJSON(data['image']);
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // ensure the json data is a string
        if (data['longDescription'] && !(typeof data['longDescription'] === 'string' || data['longDescription'] instanceof String)) {
            throw new Error("Expected the field `longDescription` to be a primitive type in the JSON string but got " + data['longDescription']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `package`
        if (data['package']) { // data not null
          PackageNote.validateJSON(data['package']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['relatedNoteNames'])) {
            throw new Error("Expected the field `relatedNoteNames` to be an array in the JSON data but got " + data['relatedNoteNames']);
        }
        if (data['relatedUrl']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['relatedUrl'])) {
                throw new Error("Expected the field `relatedUrl` to be an array in the JSON data but got " + data['relatedUrl']);
            }
            // validate the optional field `relatedUrl` (array)
            for (const item of data['relatedUrl']) {
                RelatedUrl.validateJSON(item);
            };
        }
        // validate the optional field `sbomReference`
        if (data['sbomReference']) { // data not null
          SBOMReferenceNote.validateJSON(data['sbomReference']);
        }
        // ensure the json data is a string
        if (data['shortDescription'] && !(typeof data['shortDescription'] === 'string' || data['shortDescription'] instanceof String)) {
            throw new Error("Expected the field `shortDescription` to be a primitive type in the JSON string but got " + data['shortDescription']);
        }
        // ensure the json data is a string
        if (data['updateTime'] && !(typeof data['updateTime'] === 'string' || data['updateTime'] instanceof String)) {
            throw new Error("Expected the field `updateTime` to be a primitive type in the JSON string but got " + data['updateTime']);
        }
        // validate the optional field `upgrade`
        if (data['upgrade']) { // data not null
          UpgradeNote.validateJSON(data['upgrade']);
        }
        // validate the optional field `vulnerability`
        if (data['vulnerability']) { // data not null
          VulnerabilityNote.validateJSON(data['vulnerability']);
        }
        // validate the optional field `vulnerabilityAssessment`
        if (data['vulnerabilityAssessment']) { // data not null
          VulnerabilityAssessmentNote.validateJSON(data['vulnerabilityAssessment']);
        }

        return true;
    }


}



/**
 * @member {module:model/AttestationNote} attestation
 */
Note.prototype['attestation'] = undefined;

/**
 * @member {module:model/BuildNote} build
 */
Note.prototype['build'] = undefined;

/**
 * @member {module:model/ComplianceNote} compliance
 */
Note.prototype['compliance'] = undefined;

/**
 * Output only. The time this note was created. This field can be used as a filter in list requests.
 * @member {String} createTime
 */
Note.prototype['createTime'] = undefined;

/**
 * @member {module:model/DeploymentNote} deployment
 */
Note.prototype['deployment'] = undefined;

/**
 * @member {module:model/DiscoveryNote} discovery
 */
Note.prototype['discovery'] = undefined;

/**
 * @member {module:model/DSSEAttestationNote} dsseAttestation
 */
Note.prototype['dsseAttestation'] = undefined;

/**
 * Time of expiration for this note. Empty if note does not expire.
 * @member {String} expirationTime
 */
Note.prototype['expirationTime'] = undefined;

/**
 * @member {module:model/ImageNote} image
 */
Note.prototype['image'] = undefined;

/**
 * Output only. The type of analysis. This field can be used as a filter in list requests.
 * @member {module:model/Note.KindEnum} kind
 */
Note.prototype['kind'] = undefined;

/**
 * A detailed description of this note.
 * @member {String} longDescription
 */
Note.prototype['longDescription'] = undefined;

/**
 * Output only. The name of the note in the form of `projects/[PROVIDER_ID]/notes/[NOTE_ID]`.
 * @member {String} name
 */
Note.prototype['name'] = undefined;

/**
 * @member {module:model/PackageNote} package
 */
Note.prototype['package'] = undefined;

/**
 * Other notes related to this note.
 * @member {Array.<String>} relatedNoteNames
 */
Note.prototype['relatedNoteNames'] = undefined;

/**
 * URLs associated with this note.
 * @member {Array.<module:model/RelatedUrl>} relatedUrl
 */
Note.prototype['relatedUrl'] = undefined;

/**
 * @member {module:model/SBOMReferenceNote} sbomReference
 */
Note.prototype['sbomReference'] = undefined;

/**
 * A one sentence description of this note.
 * @member {String} shortDescription
 */
Note.prototype['shortDescription'] = undefined;

/**
 * Output only. The time this note was last updated. This field can be used as a filter in list requests.
 * @member {String} updateTime
 */
Note.prototype['updateTime'] = undefined;

/**
 * @member {module:model/UpgradeNote} upgrade
 */
Note.prototype['upgrade'] = undefined;

/**
 * @member {module:model/VulnerabilityNote} vulnerability
 */
Note.prototype['vulnerability'] = undefined;

/**
 * @member {module:model/VulnerabilityAssessmentNote} vulnerabilityAssessment
 */
Note.prototype['vulnerabilityAssessment'] = undefined;





/**
 * Allowed values for the <code>kind</code> property.
 * @enum {String}
 * @readonly
 */
Note['KindEnum'] = {

    /**
     * value: "NOTE_KIND_UNSPECIFIED"
     * @const
     */
    "NOTE_KIND_UNSPECIFIED": "NOTE_KIND_UNSPECIFIED",

    /**
     * value: "VULNERABILITY"
     * @const
     */
    "VULNERABILITY": "VULNERABILITY",

    /**
     * value: "BUILD"
     * @const
     */
    "BUILD": "BUILD",

    /**
     * value: "IMAGE"
     * @const
     */
    "IMAGE": "IMAGE",

    /**
     * value: "PACKAGE"
     * @const
     */
    "PACKAGE": "PACKAGE",

    /**
     * value: "DEPLOYMENT"
     * @const
     */
    "DEPLOYMENT": "DEPLOYMENT",

    /**
     * value: "DISCOVERY"
     * @const
     */
    "DISCOVERY": "DISCOVERY",

    /**
     * value: "ATTESTATION"
     * @const
     */
    "ATTESTATION": "ATTESTATION",

    /**
     * value: "UPGRADE"
     * @const
     */
    "UPGRADE": "UPGRADE",

    /**
     * value: "COMPLIANCE"
     * @const
     */
    "COMPLIANCE": "COMPLIANCE",

    /**
     * value: "DSSE_ATTESTATION"
     * @const
     */
    "DSSE_ATTESTATION": "DSSE_ATTESTATION",

    /**
     * value: "VULNERABILITY_ASSESSMENT"
     * @const
     */
    "VULNERABILITY_ASSESSMENT": "VULNERABILITY_ASSESSMENT",

    /**
     * value: "SBOM_REFERENCE"
     * @const
     */
    "SBOM_REFERENCE": "SBOM_REFERENCE"
};



export default Note;

