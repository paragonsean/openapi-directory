/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CVSS from './CVSS';
import PackageIssue from './PackageIssue';
import RelatedUrl from './RelatedUrl';
import VexAssessment from './VexAssessment';

/**
 * The VulnerabilityOccurrence model module.
 * @module model/VulnerabilityOccurrence
 * @version v1
 */
class VulnerabilityOccurrence {
    /**
     * Constructs a new <code>VulnerabilityOccurrence</code>.
     * An occurrence of a severity vulnerability on a resource.
     * @alias module:model/VulnerabilityOccurrence
     */
    constructor() { 
        
        VulnerabilityOccurrence.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>VulnerabilityOccurrence</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VulnerabilityOccurrence} obj Optional instance to populate.
     * @return {module:model/VulnerabilityOccurrence} The populated <code>VulnerabilityOccurrence</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VulnerabilityOccurrence();

            if (data.hasOwnProperty('cvssScore')) {
                obj['cvssScore'] = ApiClient.convertToType(data['cvssScore'], 'Number');
            }
            if (data.hasOwnProperty('cvssV2')) {
                obj['cvssV2'] = CVSS.constructFromObject(data['cvssV2']);
            }
            if (data.hasOwnProperty('cvssVersion')) {
                obj['cvssVersion'] = ApiClient.convertToType(data['cvssVersion'], 'String');
            }
            if (data.hasOwnProperty('cvssv3')) {
                obj['cvssv3'] = CVSS.constructFromObject(data['cvssv3']);
            }
            if (data.hasOwnProperty('effectiveSeverity')) {
                obj['effectiveSeverity'] = ApiClient.convertToType(data['effectiveSeverity'], 'String');
            }
            if (data.hasOwnProperty('extraDetails')) {
                obj['extraDetails'] = ApiClient.convertToType(data['extraDetails'], 'String');
            }
            if (data.hasOwnProperty('fixAvailable')) {
                obj['fixAvailable'] = ApiClient.convertToType(data['fixAvailable'], 'Boolean');
            }
            if (data.hasOwnProperty('longDescription')) {
                obj['longDescription'] = ApiClient.convertToType(data['longDescription'], 'String');
            }
            if (data.hasOwnProperty('packageIssue')) {
                obj['packageIssue'] = ApiClient.convertToType(data['packageIssue'], [PackageIssue]);
            }
            if (data.hasOwnProperty('relatedUrls')) {
                obj['relatedUrls'] = ApiClient.convertToType(data['relatedUrls'], [RelatedUrl]);
            }
            if (data.hasOwnProperty('severity')) {
                obj['severity'] = ApiClient.convertToType(data['severity'], 'String');
            }
            if (data.hasOwnProperty('shortDescription')) {
                obj['shortDescription'] = ApiClient.convertToType(data['shortDescription'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('vexAssessment')) {
                obj['vexAssessment'] = VexAssessment.constructFromObject(data['vexAssessment']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>VulnerabilityOccurrence</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>VulnerabilityOccurrence</code>.
     */
    static validateJSON(data) {
        // validate the optional field `cvssV2`
        if (data['cvssV2']) { // data not null
          CVSS.validateJSON(data['cvssV2']);
        }
        // ensure the json data is a string
        if (data['cvssVersion'] && !(typeof data['cvssVersion'] === 'string' || data['cvssVersion'] instanceof String)) {
            throw new Error("Expected the field `cvssVersion` to be a primitive type in the JSON string but got " + data['cvssVersion']);
        }
        // validate the optional field `cvssv3`
        if (data['cvssv3']) { // data not null
          CVSS.validateJSON(data['cvssv3']);
        }
        // ensure the json data is a string
        if (data['effectiveSeverity'] && !(typeof data['effectiveSeverity'] === 'string' || data['effectiveSeverity'] instanceof String)) {
            throw new Error("Expected the field `effectiveSeverity` to be a primitive type in the JSON string but got " + data['effectiveSeverity']);
        }
        // ensure the json data is a string
        if (data['extraDetails'] && !(typeof data['extraDetails'] === 'string' || data['extraDetails'] instanceof String)) {
            throw new Error("Expected the field `extraDetails` to be a primitive type in the JSON string but got " + data['extraDetails']);
        }
        // ensure the json data is a string
        if (data['longDescription'] && !(typeof data['longDescription'] === 'string' || data['longDescription'] instanceof String)) {
            throw new Error("Expected the field `longDescription` to be a primitive type in the JSON string but got " + data['longDescription']);
        }
        if (data['packageIssue']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['packageIssue'])) {
                throw new Error("Expected the field `packageIssue` to be an array in the JSON data but got " + data['packageIssue']);
            }
            // validate the optional field `packageIssue` (array)
            for (const item of data['packageIssue']) {
                PackageIssue.validateJSON(item);
            };
        }
        if (data['relatedUrls']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['relatedUrls'])) {
                throw new Error("Expected the field `relatedUrls` to be an array in the JSON data but got " + data['relatedUrls']);
            }
            // validate the optional field `relatedUrls` (array)
            for (const item of data['relatedUrls']) {
                RelatedUrl.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['severity'] && !(typeof data['severity'] === 'string' || data['severity'] instanceof String)) {
            throw new Error("Expected the field `severity` to be a primitive type in the JSON string but got " + data['severity']);
        }
        // ensure the json data is a string
        if (data['shortDescription'] && !(typeof data['shortDescription'] === 'string' || data['shortDescription'] instanceof String)) {
            throw new Error("Expected the field `shortDescription` to be a primitive type in the JSON string but got " + data['shortDescription']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // validate the optional field `vexAssessment`
        if (data['vexAssessment']) { // data not null
          VexAssessment.validateJSON(data['vexAssessment']);
        }

        return true;
    }


}



/**
 * Output only. The CVSS score of this vulnerability. CVSS score is on a scale of 0 - 10 where 0 indicates low severity and 10 indicates high severity.
 * @member {Number} cvssScore
 */
VulnerabilityOccurrence.prototype['cvssScore'] = undefined;

/**
 * @member {module:model/CVSS} cvssV2
 */
VulnerabilityOccurrence.prototype['cvssV2'] = undefined;

/**
 * Output only. CVSS version used to populate cvss_score and severity.
 * @member {module:model/VulnerabilityOccurrence.CvssVersionEnum} cvssVersion
 */
VulnerabilityOccurrence.prototype['cvssVersion'] = undefined;

/**
 * @member {module:model/CVSS} cvssv3
 */
VulnerabilityOccurrence.prototype['cvssv3'] = undefined;

/**
 * The distro assigned severity for this vulnerability when it is available, otherwise this is the note provider assigned severity. When there are multiple PackageIssues for this vulnerability, they can have different effective severities because some might be provided by the distro while others are provided by the language ecosystem for a language pack. For this reason, it is advised to use the effective severity on the PackageIssue level. In the case where multiple PackageIssues have differing effective severities, this field should be the highest severity for any of the PackageIssues.
 * @member {module:model/VulnerabilityOccurrence.EffectiveSeverityEnum} effectiveSeverity
 */
VulnerabilityOccurrence.prototype['effectiveSeverity'] = undefined;

/**
 * Occurrence-specific extra details about the vulnerability.
 * @member {String} extraDetails
 */
VulnerabilityOccurrence.prototype['extraDetails'] = undefined;

/**
 * Output only. Whether at least one of the affected packages has a fix available.
 * @member {Boolean} fixAvailable
 */
VulnerabilityOccurrence.prototype['fixAvailable'] = undefined;

/**
 * Output only. A detailed description of this vulnerability.
 * @member {String} longDescription
 */
VulnerabilityOccurrence.prototype['longDescription'] = undefined;

/**
 * Required. The set of affected locations and their fixes (if available) within the associated resource.
 * @member {Array.<module:model/PackageIssue>} packageIssue
 */
VulnerabilityOccurrence.prototype['packageIssue'] = undefined;

/**
 * Output only. URLs related to this vulnerability.
 * @member {Array.<module:model/RelatedUrl>} relatedUrls
 */
VulnerabilityOccurrence.prototype['relatedUrls'] = undefined;

/**
 * Output only. The note provider assigned severity of this vulnerability.
 * @member {module:model/VulnerabilityOccurrence.SeverityEnum} severity
 */
VulnerabilityOccurrence.prototype['severity'] = undefined;

/**
 * Output only. A one sentence description of this vulnerability.
 * @member {String} shortDescription
 */
VulnerabilityOccurrence.prototype['shortDescription'] = undefined;

/**
 * The type of package; whether native or non native (e.g., ruby gems, node.js packages, etc.).
 * @member {String} type
 */
VulnerabilityOccurrence.prototype['type'] = undefined;

/**
 * @member {module:model/VexAssessment} vexAssessment
 */
VulnerabilityOccurrence.prototype['vexAssessment'] = undefined;





/**
 * Allowed values for the <code>cvssVersion</code> property.
 * @enum {String}
 * @readonly
 */
VulnerabilityOccurrence['CvssVersionEnum'] = {

    /**
     * value: "CVSS_VERSION_UNSPECIFIED"
     * @const
     */
    "UNSPECIFIED": "CVSS_VERSION_UNSPECIFIED",

    /**
     * value: "CVSS_VERSION_2"
     * @const
     */
    "2": "CVSS_VERSION_2",

    /**
     * value: "CVSS_VERSION_3"
     * @const
     */
    "3": "CVSS_VERSION_3"
};


/**
 * Allowed values for the <code>effectiveSeverity</code> property.
 * @enum {String}
 * @readonly
 */
VulnerabilityOccurrence['EffectiveSeverityEnum'] = {

    /**
     * value: "SEVERITY_UNSPECIFIED"
     * @const
     */
    "SEVERITY_UNSPECIFIED": "SEVERITY_UNSPECIFIED",

    /**
     * value: "MINIMAL"
     * @const
     */
    "MINIMAL": "MINIMAL",

    /**
     * value: "LOW"
     * @const
     */
    "LOW": "LOW",

    /**
     * value: "MEDIUM"
     * @const
     */
    "MEDIUM": "MEDIUM",

    /**
     * value: "HIGH"
     * @const
     */
    "HIGH": "HIGH",

    /**
     * value: "CRITICAL"
     * @const
     */
    "CRITICAL": "CRITICAL"
};


/**
 * Allowed values for the <code>severity</code> property.
 * @enum {String}
 * @readonly
 */
VulnerabilityOccurrence['SeverityEnum'] = {

    /**
     * value: "SEVERITY_UNSPECIFIED"
     * @const
     */
    "SEVERITY_UNSPECIFIED": "SEVERITY_UNSPECIFIED",

    /**
     * value: "MINIMAL"
     * @const
     */
    "MINIMAL": "MINIMAL",

    /**
     * value: "LOW"
     * @const
     */
    "LOW": "LOW",

    /**
     * value: "MEDIUM"
     * @const
     */
    "MEDIUM": "MEDIUM",

    /**
     * value: "HIGH"
     * @const
     */
    "HIGH": "HIGH",

    /**
     * value: "CRITICAL"
     * @const
     */
    "CRITICAL": "CRITICAL"
};



export default VulnerabilityOccurrence;

