/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ContaineranalysisGoogleDevtoolsCloudbuildV1Artifacts from './ContaineranalysisGoogleDevtoolsCloudbuildV1Artifacts';
import ContaineranalysisGoogleDevtoolsCloudbuildV1BuildApproval from './ContaineranalysisGoogleDevtoolsCloudbuildV1BuildApproval';
import ContaineranalysisGoogleDevtoolsCloudbuildV1BuildFailureInfo from './ContaineranalysisGoogleDevtoolsCloudbuildV1BuildFailureInfo';
import ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions from './ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions';
import ContaineranalysisGoogleDevtoolsCloudbuildV1BuildStep from './ContaineranalysisGoogleDevtoolsCloudbuildV1BuildStep';
import ContaineranalysisGoogleDevtoolsCloudbuildV1BuildWarning from './ContaineranalysisGoogleDevtoolsCloudbuildV1BuildWarning';
import ContaineranalysisGoogleDevtoolsCloudbuildV1Results from './ContaineranalysisGoogleDevtoolsCloudbuildV1Results';
import ContaineranalysisGoogleDevtoolsCloudbuildV1Secret from './ContaineranalysisGoogleDevtoolsCloudbuildV1Secret';
import ContaineranalysisGoogleDevtoolsCloudbuildV1Secrets from './ContaineranalysisGoogleDevtoolsCloudbuildV1Secrets';
import ContaineranalysisGoogleDevtoolsCloudbuildV1Source from './ContaineranalysisGoogleDevtoolsCloudbuildV1Source';
import ContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance from './ContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance';
import ContaineranalysisGoogleDevtoolsCloudbuildV1TimeSpan from './ContaineranalysisGoogleDevtoolsCloudbuildV1TimeSpan';

/**
 * The ContaineranalysisGoogleDevtoolsCloudbuildV1Build model module.
 * @module model/ContaineranalysisGoogleDevtoolsCloudbuildV1Build
 * @version v1
 */
class ContaineranalysisGoogleDevtoolsCloudbuildV1Build {
    /**
     * Constructs a new <code>ContaineranalysisGoogleDevtoolsCloudbuildV1Build</code>.
     * A build resource in the Cloud Build API. At a high level, a &#x60;Build&#x60; describes where to find source code, how to build it (for example, the builder image to run on the source), and where to store the built artifacts. Fields can include the following variables, which will be expanded when the build is created: - $PROJECT_ID: the project ID of the build. - $PROJECT_NUMBER: the project number of the build. - $LOCATION: the location/region of the build. - $BUILD_ID: the autogenerated ID of the build. - $REPO_NAME: the source repository name specified by RepoSource. - $BRANCH_NAME: the branch name specified by RepoSource. - $TAG_NAME: the tag name specified by RepoSource. - $REVISION_ID or $COMMIT_SHA: the commit SHA specified by RepoSource or resolved from the specified branch or tag. - $SHORT_SHA: first 7 characters of $REVISION_ID or $COMMIT_SHA.
     * @alias module:model/ContaineranalysisGoogleDevtoolsCloudbuildV1Build
     */
    constructor() { 
        
        ContaineranalysisGoogleDevtoolsCloudbuildV1Build.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ContaineranalysisGoogleDevtoolsCloudbuildV1Build</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ContaineranalysisGoogleDevtoolsCloudbuildV1Build} obj Optional instance to populate.
     * @return {module:model/ContaineranalysisGoogleDevtoolsCloudbuildV1Build} The populated <code>ContaineranalysisGoogleDevtoolsCloudbuildV1Build</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ContaineranalysisGoogleDevtoolsCloudbuildV1Build();

            if (data.hasOwnProperty('approval')) {
                obj['approval'] = ContaineranalysisGoogleDevtoolsCloudbuildV1BuildApproval.constructFromObject(data['approval']);
            }
            if (data.hasOwnProperty('artifacts')) {
                obj['artifacts'] = ContaineranalysisGoogleDevtoolsCloudbuildV1Artifacts.constructFromObject(data['artifacts']);
            }
            if (data.hasOwnProperty('availableSecrets')) {
                obj['availableSecrets'] = ContaineranalysisGoogleDevtoolsCloudbuildV1Secrets.constructFromObject(data['availableSecrets']);
            }
            if (data.hasOwnProperty('buildTriggerId')) {
                obj['buildTriggerId'] = ApiClient.convertToType(data['buildTriggerId'], 'String');
            }
            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'String');
            }
            if (data.hasOwnProperty('failureInfo')) {
                obj['failureInfo'] = ContaineranalysisGoogleDevtoolsCloudbuildV1BuildFailureInfo.constructFromObject(data['failureInfo']);
            }
            if (data.hasOwnProperty('finishTime')) {
                obj['finishTime'] = ApiClient.convertToType(data['finishTime'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('images')) {
                obj['images'] = ApiClient.convertToType(data['images'], ['String']);
            }
            if (data.hasOwnProperty('logUrl')) {
                obj['logUrl'] = ApiClient.convertToType(data['logUrl'], 'String');
            }
            if (data.hasOwnProperty('logsBucket')) {
                obj['logsBucket'] = ApiClient.convertToType(data['logsBucket'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('options')) {
                obj['options'] = ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions.constructFromObject(data['options']);
            }
            if (data.hasOwnProperty('projectId')) {
                obj['projectId'] = ApiClient.convertToType(data['projectId'], 'String');
            }
            if (data.hasOwnProperty('queueTtl')) {
                obj['queueTtl'] = ApiClient.convertToType(data['queueTtl'], 'String');
            }
            if (data.hasOwnProperty('results')) {
                obj['results'] = ContaineranalysisGoogleDevtoolsCloudbuildV1Results.constructFromObject(data['results']);
            }
            if (data.hasOwnProperty('secrets')) {
                obj['secrets'] = ApiClient.convertToType(data['secrets'], [ContaineranalysisGoogleDevtoolsCloudbuildV1Secret]);
            }
            if (data.hasOwnProperty('serviceAccount')) {
                obj['serviceAccount'] = ApiClient.convertToType(data['serviceAccount'], 'String');
            }
            if (data.hasOwnProperty('source')) {
                obj['source'] = ContaineranalysisGoogleDevtoolsCloudbuildV1Source.constructFromObject(data['source']);
            }
            if (data.hasOwnProperty('sourceProvenance')) {
                obj['sourceProvenance'] = ContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance.constructFromObject(data['sourceProvenance']);
            }
            if (data.hasOwnProperty('startTime')) {
                obj['startTime'] = ApiClient.convertToType(data['startTime'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('statusDetail')) {
                obj['statusDetail'] = ApiClient.convertToType(data['statusDetail'], 'String');
            }
            if (data.hasOwnProperty('steps')) {
                obj['steps'] = ApiClient.convertToType(data['steps'], [ContaineranalysisGoogleDevtoolsCloudbuildV1BuildStep]);
            }
            if (data.hasOwnProperty('substitutions')) {
                obj['substitutions'] = ApiClient.convertToType(data['substitutions'], {'String': 'String'});
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], ['String']);
            }
            if (data.hasOwnProperty('timeout')) {
                obj['timeout'] = ApiClient.convertToType(data['timeout'], 'String');
            }
            if (data.hasOwnProperty('timing')) {
                obj['timing'] = ApiClient.convertToType(data['timing'], {'String': ContaineranalysisGoogleDevtoolsCloudbuildV1TimeSpan});
            }
            if (data.hasOwnProperty('warnings')) {
                obj['warnings'] = ApiClient.convertToType(data['warnings'], [ContaineranalysisGoogleDevtoolsCloudbuildV1BuildWarning]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ContaineranalysisGoogleDevtoolsCloudbuildV1Build</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ContaineranalysisGoogleDevtoolsCloudbuildV1Build</code>.
     */
    static validateJSON(data) {
        // validate the optional field `approval`
        if (data['approval']) { // data not null
          ContaineranalysisGoogleDevtoolsCloudbuildV1BuildApproval.validateJSON(data['approval']);
        }
        // validate the optional field `artifacts`
        if (data['artifacts']) { // data not null
          ContaineranalysisGoogleDevtoolsCloudbuildV1Artifacts.validateJSON(data['artifacts']);
        }
        // validate the optional field `availableSecrets`
        if (data['availableSecrets']) { // data not null
          ContaineranalysisGoogleDevtoolsCloudbuildV1Secrets.validateJSON(data['availableSecrets']);
        }
        // ensure the json data is a string
        if (data['buildTriggerId'] && !(typeof data['buildTriggerId'] === 'string' || data['buildTriggerId'] instanceof String)) {
            throw new Error("Expected the field `buildTriggerId` to be a primitive type in the JSON string but got " + data['buildTriggerId']);
        }
        // ensure the json data is a string
        if (data['createTime'] && !(typeof data['createTime'] === 'string' || data['createTime'] instanceof String)) {
            throw new Error("Expected the field `createTime` to be a primitive type in the JSON string but got " + data['createTime']);
        }
        // validate the optional field `failureInfo`
        if (data['failureInfo']) { // data not null
          ContaineranalysisGoogleDevtoolsCloudbuildV1BuildFailureInfo.validateJSON(data['failureInfo']);
        }
        // ensure the json data is a string
        if (data['finishTime'] && !(typeof data['finishTime'] === 'string' || data['finishTime'] instanceof String)) {
            throw new Error("Expected the field `finishTime` to be a primitive type in the JSON string but got " + data['finishTime']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['images'])) {
            throw new Error("Expected the field `images` to be an array in the JSON data but got " + data['images']);
        }
        // ensure the json data is a string
        if (data['logUrl'] && !(typeof data['logUrl'] === 'string' || data['logUrl'] instanceof String)) {
            throw new Error("Expected the field `logUrl` to be a primitive type in the JSON string but got " + data['logUrl']);
        }
        // ensure the json data is a string
        if (data['logsBucket'] && !(typeof data['logsBucket'] === 'string' || data['logsBucket'] instanceof String)) {
            throw new Error("Expected the field `logsBucket` to be a primitive type in the JSON string but got " + data['logsBucket']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `options`
        if (data['options']) { // data not null
          ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions.validateJSON(data['options']);
        }
        // ensure the json data is a string
        if (data['projectId'] && !(typeof data['projectId'] === 'string' || data['projectId'] instanceof String)) {
            throw new Error("Expected the field `projectId` to be a primitive type in the JSON string but got " + data['projectId']);
        }
        // ensure the json data is a string
        if (data['queueTtl'] && !(typeof data['queueTtl'] === 'string' || data['queueTtl'] instanceof String)) {
            throw new Error("Expected the field `queueTtl` to be a primitive type in the JSON string but got " + data['queueTtl']);
        }
        // validate the optional field `results`
        if (data['results']) { // data not null
          ContaineranalysisGoogleDevtoolsCloudbuildV1Results.validateJSON(data['results']);
        }
        if (data['secrets']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['secrets'])) {
                throw new Error("Expected the field `secrets` to be an array in the JSON data but got " + data['secrets']);
            }
            // validate the optional field `secrets` (array)
            for (const item of data['secrets']) {
                ContaineranalysisGoogleDevtoolsCloudbuildV1Secret.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['serviceAccount'] && !(typeof data['serviceAccount'] === 'string' || data['serviceAccount'] instanceof String)) {
            throw new Error("Expected the field `serviceAccount` to be a primitive type in the JSON string but got " + data['serviceAccount']);
        }
        // validate the optional field `source`
        if (data['source']) { // data not null
          ContaineranalysisGoogleDevtoolsCloudbuildV1Source.validateJSON(data['source']);
        }
        // validate the optional field `sourceProvenance`
        if (data['sourceProvenance']) { // data not null
          ContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance.validateJSON(data['sourceProvenance']);
        }
        // ensure the json data is a string
        if (data['startTime'] && !(typeof data['startTime'] === 'string' || data['startTime'] instanceof String)) {
            throw new Error("Expected the field `startTime` to be a primitive type in the JSON string but got " + data['startTime']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['statusDetail'] && !(typeof data['statusDetail'] === 'string' || data['statusDetail'] instanceof String)) {
            throw new Error("Expected the field `statusDetail` to be a primitive type in the JSON string but got " + data['statusDetail']);
        }
        if (data['steps']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['steps'])) {
                throw new Error("Expected the field `steps` to be an array in the JSON data but got " + data['steps']);
            }
            // validate the optional field `steps` (array)
            for (const item of data['steps']) {
                ContaineranalysisGoogleDevtoolsCloudbuildV1BuildStep.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['tags'])) {
            throw new Error("Expected the field `tags` to be an array in the JSON data but got " + data['tags']);
        }
        // ensure the json data is a string
        if (data['timeout'] && !(typeof data['timeout'] === 'string' || data['timeout'] instanceof String)) {
            throw new Error("Expected the field `timeout` to be a primitive type in the JSON string but got " + data['timeout']);
        }
        if (data['warnings']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['warnings'])) {
                throw new Error("Expected the field `warnings` to be an array in the JSON data but got " + data['warnings']);
            }
            // validate the optional field `warnings` (array)
            for (const item of data['warnings']) {
                ContaineranalysisGoogleDevtoolsCloudbuildV1BuildWarning.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {module:model/ContaineranalysisGoogleDevtoolsCloudbuildV1BuildApproval} approval
 */
ContaineranalysisGoogleDevtoolsCloudbuildV1Build.prototype['approval'] = undefined;

/**
 * @member {module:model/ContaineranalysisGoogleDevtoolsCloudbuildV1Artifacts} artifacts
 */
ContaineranalysisGoogleDevtoolsCloudbuildV1Build.prototype['artifacts'] = undefined;

/**
 * @member {module:model/ContaineranalysisGoogleDevtoolsCloudbuildV1Secrets} availableSecrets
 */
ContaineranalysisGoogleDevtoolsCloudbuildV1Build.prototype['availableSecrets'] = undefined;

/**
 * Output only. The ID of the `BuildTrigger` that triggered this build, if it was triggered automatically.
 * @member {String} buildTriggerId
 */
ContaineranalysisGoogleDevtoolsCloudbuildV1Build.prototype['buildTriggerId'] = undefined;

/**
 * Output only. Time at which the request to create the build was received.
 * @member {String} createTime
 */
ContaineranalysisGoogleDevtoolsCloudbuildV1Build.prototype['createTime'] = undefined;

/**
 * @member {module:model/ContaineranalysisGoogleDevtoolsCloudbuildV1BuildFailureInfo} failureInfo
 */
ContaineranalysisGoogleDevtoolsCloudbuildV1Build.prototype['failureInfo'] = undefined;

/**
 * Output only. Time at which execution of the build was finished. The difference between finish_time and start_time is the duration of the build's execution.
 * @member {String} finishTime
 */
ContaineranalysisGoogleDevtoolsCloudbuildV1Build.prototype['finishTime'] = undefined;

/**
 * Output only. Unique identifier of the build.
 * @member {String} id
 */
ContaineranalysisGoogleDevtoolsCloudbuildV1Build.prototype['id'] = undefined;

/**
 * A list of images to be pushed upon the successful completion of all build steps. The images are pushed using the builder service account's credentials. The digests of the pushed images will be stored in the `Build` resource's results field. If any of the images fail to be pushed, the build status is marked `FAILURE`.
 * @member {Array.<String>} images
 */
ContaineranalysisGoogleDevtoolsCloudbuildV1Build.prototype['images'] = undefined;

/**
 * Output only. URL to logs for this build in Google Cloud Console.
 * @member {String} logUrl
 */
ContaineranalysisGoogleDevtoolsCloudbuildV1Build.prototype['logUrl'] = undefined;

/**
 * Cloud Storage bucket where logs should be written (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)). Logs file names will be of the format `${logs_bucket}/log-${build_id}.txt`.
 * @member {String} logsBucket
 */
ContaineranalysisGoogleDevtoolsCloudbuildV1Build.prototype['logsBucket'] = undefined;

/**
 * Output only. The 'Build' name with format: `projects/{project}/locations/{location}/builds/{build}`, where {build} is a unique identifier generated by the service.
 * @member {String} name
 */
ContaineranalysisGoogleDevtoolsCloudbuildV1Build.prototype['name'] = undefined;

/**
 * @member {module:model/ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions} options
 */
ContaineranalysisGoogleDevtoolsCloudbuildV1Build.prototype['options'] = undefined;

/**
 * Output only. ID of the project.
 * @member {String} projectId
 */
ContaineranalysisGoogleDevtoolsCloudbuildV1Build.prototype['projectId'] = undefined;

/**
 * TTL in queue for this build. If provided and the build is enqueued longer than this value, the build will expire and the build status will be `EXPIRED`. The TTL starts ticking from create_time.
 * @member {String} queueTtl
 */
ContaineranalysisGoogleDevtoolsCloudbuildV1Build.prototype['queueTtl'] = undefined;

/**
 * @member {module:model/ContaineranalysisGoogleDevtoolsCloudbuildV1Results} results
 */
ContaineranalysisGoogleDevtoolsCloudbuildV1Build.prototype['results'] = undefined;

/**
 * Secrets to decrypt using Cloud Key Management Service. Note: Secret Manager is the recommended technique for managing sensitive data with Cloud Build. Use `available_secrets` to configure builds to access secrets from Secret Manager. For instructions, see: https://cloud.google.com/cloud-build/docs/securing-builds/use-secrets
 * @member {Array.<module:model/ContaineranalysisGoogleDevtoolsCloudbuildV1Secret>} secrets
 */
ContaineranalysisGoogleDevtoolsCloudbuildV1Build.prototype['secrets'] = undefined;

/**
 * IAM service account whose credentials will be used at build runtime. Must be of the format `projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT}`. ACCOUNT can be email address or uniqueId of the service account. 
 * @member {String} serviceAccount
 */
ContaineranalysisGoogleDevtoolsCloudbuildV1Build.prototype['serviceAccount'] = undefined;

/**
 * @member {module:model/ContaineranalysisGoogleDevtoolsCloudbuildV1Source} source
 */
ContaineranalysisGoogleDevtoolsCloudbuildV1Build.prototype['source'] = undefined;

/**
 * @member {module:model/ContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance} sourceProvenance
 */
ContaineranalysisGoogleDevtoolsCloudbuildV1Build.prototype['sourceProvenance'] = undefined;

/**
 * Output only. Time at which execution of the build was started.
 * @member {String} startTime
 */
ContaineranalysisGoogleDevtoolsCloudbuildV1Build.prototype['startTime'] = undefined;

/**
 * Output only. Status of the build.
 * @member {module:model/ContaineranalysisGoogleDevtoolsCloudbuildV1Build.StatusEnum} status
 */
ContaineranalysisGoogleDevtoolsCloudbuildV1Build.prototype['status'] = undefined;

/**
 * Output only. Customer-readable message about the current status.
 * @member {String} statusDetail
 */
ContaineranalysisGoogleDevtoolsCloudbuildV1Build.prototype['statusDetail'] = undefined;

/**
 * Required. The operations to be performed on the workspace.
 * @member {Array.<module:model/ContaineranalysisGoogleDevtoolsCloudbuildV1BuildStep>} steps
 */
ContaineranalysisGoogleDevtoolsCloudbuildV1Build.prototype['steps'] = undefined;

/**
 * Substitutions data for `Build` resource.
 * @member {Object.<String, String>} substitutions
 */
ContaineranalysisGoogleDevtoolsCloudbuildV1Build.prototype['substitutions'] = undefined;

/**
 * Tags for annotation of a `Build`. These are not docker tags.
 * @member {Array.<String>} tags
 */
ContaineranalysisGoogleDevtoolsCloudbuildV1Build.prototype['tags'] = undefined;

/**
 * Amount of time that this build should be allowed to run, to second granularity. If this amount of time elapses, work on the build will cease and the build status will be `TIMEOUT`. `timeout` starts ticking from `startTime`. Default time is 60 minutes.
 * @member {String} timeout
 */
ContaineranalysisGoogleDevtoolsCloudbuildV1Build.prototype['timeout'] = undefined;

/**
 * Output only. Stores timing information for phases of the build. Valid keys are: * BUILD: time to execute all build steps. * PUSH: time to push all artifacts including docker images and non docker artifacts. * FETCHSOURCE: time to fetch source. * SETUPBUILD: time to set up build. If the build does not specify source or images, these keys will not be included.
 * @member {Object.<String, module:model/ContaineranalysisGoogleDevtoolsCloudbuildV1TimeSpan>} timing
 */
ContaineranalysisGoogleDevtoolsCloudbuildV1Build.prototype['timing'] = undefined;

/**
 * Output only. Non-fatal problems encountered during the execution of the build.
 * @member {Array.<module:model/ContaineranalysisGoogleDevtoolsCloudbuildV1BuildWarning>} warnings
 */
ContaineranalysisGoogleDevtoolsCloudbuildV1Build.prototype['warnings'] = undefined;





/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
ContaineranalysisGoogleDevtoolsCloudbuildV1Build['StatusEnum'] = {

    /**
     * value: "STATUS_UNKNOWN"
     * @const
     */
    "STATUS_UNKNOWN": "STATUS_UNKNOWN",

    /**
     * value: "PENDING"
     * @const
     */
    "PENDING": "PENDING",

    /**
     * value: "QUEUED"
     * @const
     */
    "QUEUED": "QUEUED",

    /**
     * value: "WORKING"
     * @const
     */
    "WORKING": "WORKING",

    /**
     * value: "SUCCESS"
     * @const
     */
    "SUCCESS": "SUCCESS",

    /**
     * value: "FAILURE"
     * @const
     */
    "FAILURE": "FAILURE",

    /**
     * value: "INTERNAL_ERROR"
     * @const
     */
    "INTERNAL_ERROR": "INTERNAL_ERROR",

    /**
     * value: "TIMEOUT"
     * @const
     */
    "TIMEOUT": "TIMEOUT",

    /**
     * value: "CANCELLED"
     * @const
     */
    "CANCELLED": "CANCELLED",

    /**
     * value: "EXPIRED"
     * @const
     */
    "EXPIRED": "EXPIRED"
};



export default ContaineranalysisGoogleDevtoolsCloudbuildV1Build;

