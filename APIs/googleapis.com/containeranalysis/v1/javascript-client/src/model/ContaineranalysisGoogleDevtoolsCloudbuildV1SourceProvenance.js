/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ContaineranalysisGoogleDevtoolsCloudbuildV1ConnectedRepository from './ContaineranalysisGoogleDevtoolsCloudbuildV1ConnectedRepository';
import ContaineranalysisGoogleDevtoolsCloudbuildV1FileHashes from './ContaineranalysisGoogleDevtoolsCloudbuildV1FileHashes';
import ContaineranalysisGoogleDevtoolsCloudbuildV1GitSource from './ContaineranalysisGoogleDevtoolsCloudbuildV1GitSource';
import ContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource from './ContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource';
import ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSource from './ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSource';
import ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSourceManifest from './ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSourceManifest';

/**
 * The ContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance model module.
 * @module model/ContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance
 * @version v1
 */
class ContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance {
    /**
     * Constructs a new <code>ContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance</code>.
     * Provenance of the source. Ways to find the original source, or verify that some source was used for this build.
     * @alias module:model/ContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance
     */
    constructor() { 
        
        ContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance} obj Optional instance to populate.
     * @return {module:model/ContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance} The populated <code>ContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance();

            if (data.hasOwnProperty('fileHashes')) {
                obj['fileHashes'] = ApiClient.convertToType(data['fileHashes'], {'String': ContaineranalysisGoogleDevtoolsCloudbuildV1FileHashes});
            }
            if (data.hasOwnProperty('resolvedConnectedRepository')) {
                obj['resolvedConnectedRepository'] = ContaineranalysisGoogleDevtoolsCloudbuildV1ConnectedRepository.constructFromObject(data['resolvedConnectedRepository']);
            }
            if (data.hasOwnProperty('resolvedGitSource')) {
                obj['resolvedGitSource'] = ContaineranalysisGoogleDevtoolsCloudbuildV1GitSource.constructFromObject(data['resolvedGitSource']);
            }
            if (data.hasOwnProperty('resolvedRepoSource')) {
                obj['resolvedRepoSource'] = ContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource.constructFromObject(data['resolvedRepoSource']);
            }
            if (data.hasOwnProperty('resolvedStorageSource')) {
                obj['resolvedStorageSource'] = ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSource.constructFromObject(data['resolvedStorageSource']);
            }
            if (data.hasOwnProperty('resolvedStorageSourceManifest')) {
                obj['resolvedStorageSourceManifest'] = ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSourceManifest.constructFromObject(data['resolvedStorageSourceManifest']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance</code>.
     */
    static validateJSON(data) {
        // validate the optional field `resolvedConnectedRepository`
        if (data['resolvedConnectedRepository']) { // data not null
          ContaineranalysisGoogleDevtoolsCloudbuildV1ConnectedRepository.validateJSON(data['resolvedConnectedRepository']);
        }
        // validate the optional field `resolvedGitSource`
        if (data['resolvedGitSource']) { // data not null
          ContaineranalysisGoogleDevtoolsCloudbuildV1GitSource.validateJSON(data['resolvedGitSource']);
        }
        // validate the optional field `resolvedRepoSource`
        if (data['resolvedRepoSource']) { // data not null
          ContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource.validateJSON(data['resolvedRepoSource']);
        }
        // validate the optional field `resolvedStorageSource`
        if (data['resolvedStorageSource']) { // data not null
          ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSource.validateJSON(data['resolvedStorageSource']);
        }
        // validate the optional field `resolvedStorageSourceManifest`
        if (data['resolvedStorageSourceManifest']) { // data not null
          ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSourceManifest.validateJSON(data['resolvedStorageSourceManifest']);
        }

        return true;
    }


}



/**
 * Output only. Hash(es) of the build source, which can be used to verify that the original source integrity was maintained in the build. Note that `FileHashes` will only be populated if `BuildOptions` has requested a `SourceProvenanceHash`. The keys to this map are file paths used as build source and the values contain the hash values for those files. If the build source came in a single package such as a gzipped tarfile (`.tar.gz`), the `FileHash` will be for the single path to that file.
 * @member {Object.<String, module:model/ContaineranalysisGoogleDevtoolsCloudbuildV1FileHashes>} fileHashes
 */
ContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance.prototype['fileHashes'] = undefined;

/**
 * @member {module:model/ContaineranalysisGoogleDevtoolsCloudbuildV1ConnectedRepository} resolvedConnectedRepository
 */
ContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance.prototype['resolvedConnectedRepository'] = undefined;

/**
 * @member {module:model/ContaineranalysisGoogleDevtoolsCloudbuildV1GitSource} resolvedGitSource
 */
ContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance.prototype['resolvedGitSource'] = undefined;

/**
 * @member {module:model/ContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource} resolvedRepoSource
 */
ContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance.prototype['resolvedRepoSource'] = undefined;

/**
 * @member {module:model/ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSource} resolvedStorageSource
 */
ContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance.prototype['resolvedStorageSource'] = undefined;

/**
 * @member {module:model/ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSourceManifest} resolvedStorageSourceManifest
 */
ContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance.prototype['resolvedStorageSourceManifest'] = undefined;






export default ContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance;

