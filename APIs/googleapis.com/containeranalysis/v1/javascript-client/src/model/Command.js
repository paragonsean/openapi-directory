/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Command model module.
 * @module model/Command
 * @version v1
 */
class Command {
    /**
     * Constructs a new <code>Command</code>.
     * Command describes a step performed as part of the build pipeline.
     * @alias module:model/Command
     */
    constructor() { 
        
        Command.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Command</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Command} obj Optional instance to populate.
     * @return {module:model/Command} The populated <code>Command</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Command();

            if (data.hasOwnProperty('args')) {
                obj['args'] = ApiClient.convertToType(data['args'], ['String']);
            }
            if (data.hasOwnProperty('dir')) {
                obj['dir'] = ApiClient.convertToType(data['dir'], 'String');
            }
            if (data.hasOwnProperty('env')) {
                obj['env'] = ApiClient.convertToType(data['env'], ['String']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('waitFor')) {
                obj['waitFor'] = ApiClient.convertToType(data['waitFor'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Command</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Command</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['args'])) {
            throw new Error("Expected the field `args` to be an array in the JSON data but got " + data['args']);
        }
        // ensure the json data is a string
        if (data['dir'] && !(typeof data['dir'] === 'string' || data['dir'] instanceof String)) {
            throw new Error("Expected the field `dir` to be a primitive type in the JSON string but got " + data['dir']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['env'])) {
            throw new Error("Expected the field `env` to be an array in the JSON data but got " + data['env']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['waitFor'])) {
            throw new Error("Expected the field `waitFor` to be an array in the JSON data but got " + data['waitFor']);
        }

        return true;
    }


}



/**
 * Command-line arguments used when executing this command.
 * @member {Array.<String>} args
 */
Command.prototype['args'] = undefined;

/**
 * Working directory (relative to project source root) used when running this command.
 * @member {String} dir
 */
Command.prototype['dir'] = undefined;

/**
 * Environment variables set before running this command.
 * @member {Array.<String>} env
 */
Command.prototype['env'] = undefined;

/**
 * Optional unique identifier for this command, used in wait_for to reference this command as a dependency.
 * @member {String} id
 */
Command.prototype['id'] = undefined;

/**
 * Required. Name of the command, as presented on the command line, or if the command is packaged as a Docker container, as presented to `docker pull`.
 * @member {String} name
 */
Command.prototype['name'] = undefined;

/**
 * The ID(s) of the command(s) that this command depends on.
 * @member {Array.<String>} waitFor
 */
Command.prototype['waitFor'] = undefined;






export default Command;

