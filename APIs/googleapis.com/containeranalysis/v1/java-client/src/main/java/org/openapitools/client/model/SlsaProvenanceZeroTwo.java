/*
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.GrafeasV1SlsaProvenanceZeroTwoSlsaBuilder;
import org.openapitools.client.model.GrafeasV1SlsaProvenanceZeroTwoSlsaInvocation;
import org.openapitools.client.model.GrafeasV1SlsaProvenanceZeroTwoSlsaMaterial;
import org.openapitools.client.model.GrafeasV1SlsaProvenanceZeroTwoSlsaMetadata;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * See full explanation of fields at slsa.dev/provenance/v0.2.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:38:38.234919-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SlsaProvenanceZeroTwo {
  public static final String SERIALIZED_NAME_BUILD_CONFIG = "buildConfig";
  @SerializedName(SERIALIZED_NAME_BUILD_CONFIG)
  private Map<String, Object> buildConfig = new HashMap<>();

  public static final String SERIALIZED_NAME_BUILD_TYPE = "buildType";
  @SerializedName(SERIALIZED_NAME_BUILD_TYPE)
  private String buildType;

  public static final String SERIALIZED_NAME_BUILDER = "builder";
  @SerializedName(SERIALIZED_NAME_BUILDER)
  private GrafeasV1SlsaProvenanceZeroTwoSlsaBuilder builder;

  public static final String SERIALIZED_NAME_INVOCATION = "invocation";
  @SerializedName(SERIALIZED_NAME_INVOCATION)
  private GrafeasV1SlsaProvenanceZeroTwoSlsaInvocation invocation;

  public static final String SERIALIZED_NAME_MATERIALS = "materials";
  @SerializedName(SERIALIZED_NAME_MATERIALS)
  private List<GrafeasV1SlsaProvenanceZeroTwoSlsaMaterial> materials = new ArrayList<>();

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private GrafeasV1SlsaProvenanceZeroTwoSlsaMetadata metadata;

  public SlsaProvenanceZeroTwo() {
  }

  public SlsaProvenanceZeroTwo buildConfig(Map<String, Object> buildConfig) {
    this.buildConfig = buildConfig;
    return this;
  }

  public SlsaProvenanceZeroTwo putBuildConfigItem(String key, Object buildConfigItem) {
    if (this.buildConfig == null) {
      this.buildConfig = new HashMap<>();
    }
    this.buildConfig.put(key, buildConfigItem);
    return this;
  }

  /**
   * Get buildConfig
   * @return buildConfig
   */
  @javax.annotation.Nullable
  public Map<String, Object> getBuildConfig() {
    return buildConfig;
  }

  public void setBuildConfig(Map<String, Object> buildConfig) {
    this.buildConfig = buildConfig;
  }


  public SlsaProvenanceZeroTwo buildType(String buildType) {
    this.buildType = buildType;
    return this;
  }

  /**
   * Get buildType
   * @return buildType
   */
  @javax.annotation.Nullable
  public String getBuildType() {
    return buildType;
  }

  public void setBuildType(String buildType) {
    this.buildType = buildType;
  }


  public SlsaProvenanceZeroTwo builder(GrafeasV1SlsaProvenanceZeroTwoSlsaBuilder builder) {
    this.builder = builder;
    return this;
  }

  /**
   * Get builder
   * @return builder
   */
  @javax.annotation.Nullable
  public GrafeasV1SlsaProvenanceZeroTwoSlsaBuilder getBuilder() {
    return builder;
  }

  public void setBuilder(GrafeasV1SlsaProvenanceZeroTwoSlsaBuilder builder) {
    this.builder = builder;
  }


  public SlsaProvenanceZeroTwo invocation(GrafeasV1SlsaProvenanceZeroTwoSlsaInvocation invocation) {
    this.invocation = invocation;
    return this;
  }

  /**
   * Get invocation
   * @return invocation
   */
  @javax.annotation.Nullable
  public GrafeasV1SlsaProvenanceZeroTwoSlsaInvocation getInvocation() {
    return invocation;
  }

  public void setInvocation(GrafeasV1SlsaProvenanceZeroTwoSlsaInvocation invocation) {
    this.invocation = invocation;
  }


  public SlsaProvenanceZeroTwo materials(List<GrafeasV1SlsaProvenanceZeroTwoSlsaMaterial> materials) {
    this.materials = materials;
    return this;
  }

  public SlsaProvenanceZeroTwo addMaterialsItem(GrafeasV1SlsaProvenanceZeroTwoSlsaMaterial materialsItem) {
    if (this.materials == null) {
      this.materials = new ArrayList<>();
    }
    this.materials.add(materialsItem);
    return this;
  }

  /**
   * Get materials
   * @return materials
   */
  @javax.annotation.Nullable
  public List<GrafeasV1SlsaProvenanceZeroTwoSlsaMaterial> getMaterials() {
    return materials;
  }

  public void setMaterials(List<GrafeasV1SlsaProvenanceZeroTwoSlsaMaterial> materials) {
    this.materials = materials;
  }


  public SlsaProvenanceZeroTwo metadata(GrafeasV1SlsaProvenanceZeroTwoSlsaMetadata metadata) {
    this.metadata = metadata;
    return this;
  }

  /**
   * Get metadata
   * @return metadata
   */
  @javax.annotation.Nullable
  public GrafeasV1SlsaProvenanceZeroTwoSlsaMetadata getMetadata() {
    return metadata;
  }

  public void setMetadata(GrafeasV1SlsaProvenanceZeroTwoSlsaMetadata metadata) {
    this.metadata = metadata;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SlsaProvenanceZeroTwo slsaProvenanceZeroTwo = (SlsaProvenanceZeroTwo) o;
    return Objects.equals(this.buildConfig, slsaProvenanceZeroTwo.buildConfig) &&
        Objects.equals(this.buildType, slsaProvenanceZeroTwo.buildType) &&
        Objects.equals(this.builder, slsaProvenanceZeroTwo.builder) &&
        Objects.equals(this.invocation, slsaProvenanceZeroTwo.invocation) &&
        Objects.equals(this.materials, slsaProvenanceZeroTwo.materials) &&
        Objects.equals(this.metadata, slsaProvenanceZeroTwo.metadata);
  }

  @Override
  public int hashCode() {
    return Objects.hash(buildConfig, buildType, builder, invocation, materials, metadata);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SlsaProvenanceZeroTwo {\n");
    sb.append("    buildConfig: ").append(toIndentedString(buildConfig)).append("\n");
    sb.append("    buildType: ").append(toIndentedString(buildType)).append("\n");
    sb.append("    builder: ").append(toIndentedString(builder)).append("\n");
    sb.append("    invocation: ").append(toIndentedString(invocation)).append("\n");
    sb.append("    materials: ").append(toIndentedString(materials)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("buildConfig");
    openapiFields.add("buildType");
    openapiFields.add("builder");
    openapiFields.add("invocation");
    openapiFields.add("materials");
    openapiFields.add("metadata");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SlsaProvenanceZeroTwo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SlsaProvenanceZeroTwo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SlsaProvenanceZeroTwo is not found in the empty JSON string", SlsaProvenanceZeroTwo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SlsaProvenanceZeroTwo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SlsaProvenanceZeroTwo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("buildType") != null && !jsonObj.get("buildType").isJsonNull()) && !jsonObj.get("buildType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `buildType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("buildType").toString()));
      }
      // validate the optional field `builder`
      if (jsonObj.get("builder") != null && !jsonObj.get("builder").isJsonNull()) {
        GrafeasV1SlsaProvenanceZeroTwoSlsaBuilder.validateJsonElement(jsonObj.get("builder"));
      }
      // validate the optional field `invocation`
      if (jsonObj.get("invocation") != null && !jsonObj.get("invocation").isJsonNull()) {
        GrafeasV1SlsaProvenanceZeroTwoSlsaInvocation.validateJsonElement(jsonObj.get("invocation"));
      }
      if (jsonObj.get("materials") != null && !jsonObj.get("materials").isJsonNull()) {
        JsonArray jsonArraymaterials = jsonObj.getAsJsonArray("materials");
        if (jsonArraymaterials != null) {
          // ensure the json data is an array
          if (!jsonObj.get("materials").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `materials` to be an array in the JSON string but got `%s`", jsonObj.get("materials").toString()));
          }

          // validate the optional field `materials` (array)
          for (int i = 0; i < jsonArraymaterials.size(); i++) {
            GrafeasV1SlsaProvenanceZeroTwoSlsaMaterial.validateJsonElement(jsonArraymaterials.get(i));
          };
        }
      }
      // validate the optional field `metadata`
      if (jsonObj.get("metadata") != null && !jsonObj.get("metadata").isJsonNull()) {
        GrafeasV1SlsaProvenanceZeroTwoSlsaMetadata.validateJsonElement(jsonObj.get("metadata"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SlsaProvenanceZeroTwo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SlsaProvenanceZeroTwo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SlsaProvenanceZeroTwo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SlsaProvenanceZeroTwo.class));

       return (TypeAdapter<T>) new TypeAdapter<SlsaProvenanceZeroTwo>() {
           @Override
           public void write(JsonWriter out, SlsaProvenanceZeroTwo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SlsaProvenanceZeroTwo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SlsaProvenanceZeroTwo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SlsaProvenanceZeroTwo
   * @throws IOException if the JSON string is invalid with respect to SlsaProvenanceZeroTwo
   */
  public static SlsaProvenanceZeroTwo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SlsaProvenanceZeroTwo.class);
  }

  /**
   * Convert an instance of SlsaProvenanceZeroTwo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

