/*
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.ResourceDescriptor;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ProvenanceBuilder
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:38:38.234919-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ProvenanceBuilder {
  public static final String SERIALIZED_NAME_BUILDER_DEPENDENCIES = "builderDependencies";
  @SerializedName(SERIALIZED_NAME_BUILDER_DEPENDENCIES)
  private List<ResourceDescriptor> builderDependencies = new ArrayList<>();

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private Map<String, String> version = new HashMap<>();

  public ProvenanceBuilder() {
  }

  public ProvenanceBuilder builderDependencies(List<ResourceDescriptor> builderDependencies) {
    this.builderDependencies = builderDependencies;
    return this;
  }

  public ProvenanceBuilder addBuilderDependenciesItem(ResourceDescriptor builderDependenciesItem) {
    if (this.builderDependencies == null) {
      this.builderDependencies = new ArrayList<>();
    }
    this.builderDependencies.add(builderDependenciesItem);
    return this;
  }

  /**
   * Get builderDependencies
   * @return builderDependencies
   */
  @javax.annotation.Nullable
  public List<ResourceDescriptor> getBuilderDependencies() {
    return builderDependencies;
  }

  public void setBuilderDependencies(List<ResourceDescriptor> builderDependencies) {
    this.builderDependencies = builderDependencies;
  }


  public ProvenanceBuilder id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public ProvenanceBuilder version(Map<String, String> version) {
    this.version = version;
    return this;
  }

  public ProvenanceBuilder putVersionItem(String key, String versionItem) {
    if (this.version == null) {
      this.version = new HashMap<>();
    }
    this.version.put(key, versionItem);
    return this;
  }

  /**
   * Get version
   * @return version
   */
  @javax.annotation.Nullable
  public Map<String, String> getVersion() {
    return version;
  }

  public void setVersion(Map<String, String> version) {
    this.version = version;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProvenanceBuilder provenanceBuilder = (ProvenanceBuilder) o;
    return Objects.equals(this.builderDependencies, provenanceBuilder.builderDependencies) &&
        Objects.equals(this.id, provenanceBuilder.id) &&
        Objects.equals(this.version, provenanceBuilder.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(builderDependencies, id, version);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProvenanceBuilder {\n");
    sb.append("    builderDependencies: ").append(toIndentedString(builderDependencies)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("builderDependencies");
    openapiFields.add("id");
    openapiFields.add("version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ProvenanceBuilder
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ProvenanceBuilder.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProvenanceBuilder is not found in the empty JSON string", ProvenanceBuilder.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ProvenanceBuilder.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProvenanceBuilder` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("builderDependencies") != null && !jsonObj.get("builderDependencies").isJsonNull()) {
        JsonArray jsonArraybuilderDependencies = jsonObj.getAsJsonArray("builderDependencies");
        if (jsonArraybuilderDependencies != null) {
          // ensure the json data is an array
          if (!jsonObj.get("builderDependencies").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `builderDependencies` to be an array in the JSON string but got `%s`", jsonObj.get("builderDependencies").toString()));
          }

          // validate the optional field `builderDependencies` (array)
          for (int i = 0; i < jsonArraybuilderDependencies.size(); i++) {
            ResourceDescriptor.validateJsonElement(jsonArraybuilderDependencies.get(i));
          };
        }
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProvenanceBuilder.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProvenanceBuilder' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProvenanceBuilder> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProvenanceBuilder.class));

       return (TypeAdapter<T>) new TypeAdapter<ProvenanceBuilder>() {
           @Override
           public void write(JsonWriter out, ProvenanceBuilder value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProvenanceBuilder read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ProvenanceBuilder given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ProvenanceBuilder
   * @throws IOException if the JSON string is invalid with respect to ProvenanceBuilder
   */
  public static ProvenanceBuilder fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProvenanceBuilder.class);
  }

  /**
   * Convert an instance of ProvenanceBuilder to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

