/*
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A note that indicates a type of analysis a provider would perform. This note exists in a provider&#39;s project. A &#x60;Discovery&#x60; occurrence is created in a consumer&#39;s project at the start of analysis.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:38:38.234919-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DiscoveryNote {
  /**
   * Required. Immutable. The kind of analysis that is handled by this discovery.
   */
  @JsonAdapter(AnalysisKindEnum.Adapter.class)
  public enum AnalysisKindEnum {
    NOTE_KIND_UNSPECIFIED("NOTE_KIND_UNSPECIFIED"),
    
    VULNERABILITY("VULNERABILITY"),
    
    BUILD("BUILD"),
    
    IMAGE("IMAGE"),
    
    PACKAGE("PACKAGE"),
    
    DEPLOYMENT("DEPLOYMENT"),
    
    DISCOVERY("DISCOVERY"),
    
    ATTESTATION("ATTESTATION"),
    
    UPGRADE("UPGRADE"),
    
    COMPLIANCE("COMPLIANCE"),
    
    DSSE_ATTESTATION("DSSE_ATTESTATION"),
    
    VULNERABILITY_ASSESSMENT("VULNERABILITY_ASSESSMENT"),
    
    SBOM_REFERENCE("SBOM_REFERENCE");

    private String value;

    AnalysisKindEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AnalysisKindEnum fromValue(String value) {
      for (AnalysisKindEnum b : AnalysisKindEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AnalysisKindEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AnalysisKindEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AnalysisKindEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AnalysisKindEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AnalysisKindEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ANALYSIS_KIND = "analysisKind";
  @SerializedName(SERIALIZED_NAME_ANALYSIS_KIND)
  private AnalysisKindEnum analysisKind;

  public DiscoveryNote() {
  }

  public DiscoveryNote analysisKind(AnalysisKindEnum analysisKind) {
    this.analysisKind = analysisKind;
    return this;
  }

  /**
   * Required. Immutable. The kind of analysis that is handled by this discovery.
   * @return analysisKind
   */
  @javax.annotation.Nullable
  public AnalysisKindEnum getAnalysisKind() {
    return analysisKind;
  }

  public void setAnalysisKind(AnalysisKindEnum analysisKind) {
    this.analysisKind = analysisKind;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DiscoveryNote discoveryNote = (DiscoveryNote) o;
    return Objects.equals(this.analysisKind, discoveryNote.analysisKind);
  }

  @Override
  public int hashCode() {
    return Objects.hash(analysisKind);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DiscoveryNote {\n");
    sb.append("    analysisKind: ").append(toIndentedString(analysisKind)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("analysisKind");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DiscoveryNote
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DiscoveryNote.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DiscoveryNote is not found in the empty JSON string", DiscoveryNote.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DiscoveryNote.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DiscoveryNote` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("analysisKind") != null && !jsonObj.get("analysisKind").isJsonNull()) && !jsonObj.get("analysisKind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `analysisKind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("analysisKind").toString()));
      }
      // validate the optional field `analysisKind`
      if (jsonObj.get("analysisKind") != null && !jsonObj.get("analysisKind").isJsonNull()) {
        AnalysisKindEnum.validateJsonElement(jsonObj.get("analysisKind"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DiscoveryNote.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DiscoveryNote' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DiscoveryNote> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DiscoveryNote.class));

       return (TypeAdapter<T>) new TypeAdapter<DiscoveryNote>() {
           @Override
           public void write(JsonWriter out, DiscoveryNote value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DiscoveryNote read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DiscoveryNote given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DiscoveryNote
   * @throws IOException if the JSON string is invalid with respect to DiscoveryNote
   */
  public static DiscoveryNote fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DiscoveryNote.class);
  }

  /**
   * Convert an instance of DiscoveryNote to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

