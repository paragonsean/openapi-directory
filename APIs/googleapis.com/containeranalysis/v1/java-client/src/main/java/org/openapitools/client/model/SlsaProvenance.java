/*
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Material;
import org.openapitools.client.model.SlsaBuilder;
import org.openapitools.client.model.SlsaMetadata;
import org.openapitools.client.model.SlsaRecipe;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SlsaProvenance
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:38:38.234919-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SlsaProvenance {
  public static final String SERIALIZED_NAME_BUILDER = "builder";
  @SerializedName(SERIALIZED_NAME_BUILDER)
  private SlsaBuilder builder;

  public static final String SERIALIZED_NAME_MATERIALS = "materials";
  @SerializedName(SERIALIZED_NAME_MATERIALS)
  private List<Material> materials = new ArrayList<>();

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private SlsaMetadata metadata;

  public static final String SERIALIZED_NAME_RECIPE = "recipe";
  @SerializedName(SERIALIZED_NAME_RECIPE)
  private SlsaRecipe recipe;

  public SlsaProvenance() {
  }

  public SlsaProvenance builder(SlsaBuilder builder) {
    this.builder = builder;
    return this;
  }

  /**
   * Get builder
   * @return builder
   */
  @javax.annotation.Nullable
  public SlsaBuilder getBuilder() {
    return builder;
  }

  public void setBuilder(SlsaBuilder builder) {
    this.builder = builder;
  }


  public SlsaProvenance materials(List<Material> materials) {
    this.materials = materials;
    return this;
  }

  public SlsaProvenance addMaterialsItem(Material materialsItem) {
    if (this.materials == null) {
      this.materials = new ArrayList<>();
    }
    this.materials.add(materialsItem);
    return this;
  }

  /**
   * The collection of artifacts that influenced the build including sources, dependencies, build tools, base images, and so on. This is considered to be incomplete unless metadata.completeness.materials is true. Unset or null is equivalent to empty.
   * @return materials
   */
  @javax.annotation.Nullable
  public List<Material> getMaterials() {
    return materials;
  }

  public void setMaterials(List<Material> materials) {
    this.materials = materials;
  }


  public SlsaProvenance metadata(SlsaMetadata metadata) {
    this.metadata = metadata;
    return this;
  }

  /**
   * Get metadata
   * @return metadata
   */
  @javax.annotation.Nullable
  public SlsaMetadata getMetadata() {
    return metadata;
  }

  public void setMetadata(SlsaMetadata metadata) {
    this.metadata = metadata;
  }


  public SlsaProvenance recipe(SlsaRecipe recipe) {
    this.recipe = recipe;
    return this;
  }

  /**
   * Get recipe
   * @return recipe
   */
  @javax.annotation.Nullable
  public SlsaRecipe getRecipe() {
    return recipe;
  }

  public void setRecipe(SlsaRecipe recipe) {
    this.recipe = recipe;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SlsaProvenance slsaProvenance = (SlsaProvenance) o;
    return Objects.equals(this.builder, slsaProvenance.builder) &&
        Objects.equals(this.materials, slsaProvenance.materials) &&
        Objects.equals(this.metadata, slsaProvenance.metadata) &&
        Objects.equals(this.recipe, slsaProvenance.recipe);
  }

  @Override
  public int hashCode() {
    return Objects.hash(builder, materials, metadata, recipe);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SlsaProvenance {\n");
    sb.append("    builder: ").append(toIndentedString(builder)).append("\n");
    sb.append("    materials: ").append(toIndentedString(materials)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    recipe: ").append(toIndentedString(recipe)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("builder");
    openapiFields.add("materials");
    openapiFields.add("metadata");
    openapiFields.add("recipe");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SlsaProvenance
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SlsaProvenance.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SlsaProvenance is not found in the empty JSON string", SlsaProvenance.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SlsaProvenance.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SlsaProvenance` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `builder`
      if (jsonObj.get("builder") != null && !jsonObj.get("builder").isJsonNull()) {
        SlsaBuilder.validateJsonElement(jsonObj.get("builder"));
      }
      if (jsonObj.get("materials") != null && !jsonObj.get("materials").isJsonNull()) {
        JsonArray jsonArraymaterials = jsonObj.getAsJsonArray("materials");
        if (jsonArraymaterials != null) {
          // ensure the json data is an array
          if (!jsonObj.get("materials").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `materials` to be an array in the JSON string but got `%s`", jsonObj.get("materials").toString()));
          }

          // validate the optional field `materials` (array)
          for (int i = 0; i < jsonArraymaterials.size(); i++) {
            Material.validateJsonElement(jsonArraymaterials.get(i));
          };
        }
      }
      // validate the optional field `metadata`
      if (jsonObj.get("metadata") != null && !jsonObj.get("metadata").isJsonNull()) {
        SlsaMetadata.validateJsonElement(jsonObj.get("metadata"));
      }
      // validate the optional field `recipe`
      if (jsonObj.get("recipe") != null && !jsonObj.get("recipe").isJsonNull()) {
        SlsaRecipe.validateJsonElement(jsonObj.get("recipe"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SlsaProvenance.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SlsaProvenance' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SlsaProvenance> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SlsaProvenance.class));

       return (TypeAdapter<T>) new TypeAdapter<SlsaProvenance>() {
           @Override
           public void write(JsonWriter out, SlsaProvenance value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SlsaProvenance read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SlsaProvenance given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SlsaProvenance
   * @throws IOException if the JSON string is invalid with respect to SlsaProvenance
   */
  public static SlsaProvenance fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SlsaProvenance.class);
  }

  /**
   * Convert an instance of SlsaProvenance to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

