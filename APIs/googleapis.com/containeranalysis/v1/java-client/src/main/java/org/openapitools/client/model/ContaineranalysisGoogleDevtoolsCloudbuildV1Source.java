/*
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ContaineranalysisGoogleDevtoolsCloudbuildV1ConnectedRepository;
import org.openapitools.client.model.ContaineranalysisGoogleDevtoolsCloudbuildV1GitSource;
import org.openapitools.client.model.ContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource;
import org.openapitools.client.model.ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSource;
import org.openapitools.client.model.ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSourceManifest;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Location of the source in a supported storage service.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:38:38.234919-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ContaineranalysisGoogleDevtoolsCloudbuildV1Source {
  public static final String SERIALIZED_NAME_CONNECTED_REPOSITORY = "connectedRepository";
  @SerializedName(SERIALIZED_NAME_CONNECTED_REPOSITORY)
  private ContaineranalysisGoogleDevtoolsCloudbuildV1ConnectedRepository connectedRepository;

  public static final String SERIALIZED_NAME_GIT_SOURCE = "gitSource";
  @SerializedName(SERIALIZED_NAME_GIT_SOURCE)
  private ContaineranalysisGoogleDevtoolsCloudbuildV1GitSource gitSource;

  public static final String SERIALIZED_NAME_REPO_SOURCE = "repoSource";
  @SerializedName(SERIALIZED_NAME_REPO_SOURCE)
  private ContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource repoSource;

  public static final String SERIALIZED_NAME_STORAGE_SOURCE = "storageSource";
  @SerializedName(SERIALIZED_NAME_STORAGE_SOURCE)
  private ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSource storageSource;

  public static final String SERIALIZED_NAME_STORAGE_SOURCE_MANIFEST = "storageSourceManifest";
  @SerializedName(SERIALIZED_NAME_STORAGE_SOURCE_MANIFEST)
  private ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSourceManifest storageSourceManifest;

  public ContaineranalysisGoogleDevtoolsCloudbuildV1Source() {
  }

  public ContaineranalysisGoogleDevtoolsCloudbuildV1Source connectedRepository(ContaineranalysisGoogleDevtoolsCloudbuildV1ConnectedRepository connectedRepository) {
    this.connectedRepository = connectedRepository;
    return this;
  }

  /**
   * Get connectedRepository
   * @return connectedRepository
   */
  @javax.annotation.Nullable
  public ContaineranalysisGoogleDevtoolsCloudbuildV1ConnectedRepository getConnectedRepository() {
    return connectedRepository;
  }

  public void setConnectedRepository(ContaineranalysisGoogleDevtoolsCloudbuildV1ConnectedRepository connectedRepository) {
    this.connectedRepository = connectedRepository;
  }


  public ContaineranalysisGoogleDevtoolsCloudbuildV1Source gitSource(ContaineranalysisGoogleDevtoolsCloudbuildV1GitSource gitSource) {
    this.gitSource = gitSource;
    return this;
  }

  /**
   * Get gitSource
   * @return gitSource
   */
  @javax.annotation.Nullable
  public ContaineranalysisGoogleDevtoolsCloudbuildV1GitSource getGitSource() {
    return gitSource;
  }

  public void setGitSource(ContaineranalysisGoogleDevtoolsCloudbuildV1GitSource gitSource) {
    this.gitSource = gitSource;
  }


  public ContaineranalysisGoogleDevtoolsCloudbuildV1Source repoSource(ContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource repoSource) {
    this.repoSource = repoSource;
    return this;
  }

  /**
   * Get repoSource
   * @return repoSource
   */
  @javax.annotation.Nullable
  public ContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource getRepoSource() {
    return repoSource;
  }

  public void setRepoSource(ContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource repoSource) {
    this.repoSource = repoSource;
  }


  public ContaineranalysisGoogleDevtoolsCloudbuildV1Source storageSource(ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSource storageSource) {
    this.storageSource = storageSource;
    return this;
  }

  /**
   * Get storageSource
   * @return storageSource
   */
  @javax.annotation.Nullable
  public ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSource getStorageSource() {
    return storageSource;
  }

  public void setStorageSource(ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSource storageSource) {
    this.storageSource = storageSource;
  }


  public ContaineranalysisGoogleDevtoolsCloudbuildV1Source storageSourceManifest(ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSourceManifest storageSourceManifest) {
    this.storageSourceManifest = storageSourceManifest;
    return this;
  }

  /**
   * Get storageSourceManifest
   * @return storageSourceManifest
   */
  @javax.annotation.Nullable
  public ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSourceManifest getStorageSourceManifest() {
    return storageSourceManifest;
  }

  public void setStorageSourceManifest(ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSourceManifest storageSourceManifest) {
    this.storageSourceManifest = storageSourceManifest;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ContaineranalysisGoogleDevtoolsCloudbuildV1Source containeranalysisGoogleDevtoolsCloudbuildV1Source = (ContaineranalysisGoogleDevtoolsCloudbuildV1Source) o;
    return Objects.equals(this.connectedRepository, containeranalysisGoogleDevtoolsCloudbuildV1Source.connectedRepository) &&
        Objects.equals(this.gitSource, containeranalysisGoogleDevtoolsCloudbuildV1Source.gitSource) &&
        Objects.equals(this.repoSource, containeranalysisGoogleDevtoolsCloudbuildV1Source.repoSource) &&
        Objects.equals(this.storageSource, containeranalysisGoogleDevtoolsCloudbuildV1Source.storageSource) &&
        Objects.equals(this.storageSourceManifest, containeranalysisGoogleDevtoolsCloudbuildV1Source.storageSourceManifest);
  }

  @Override
  public int hashCode() {
    return Objects.hash(connectedRepository, gitSource, repoSource, storageSource, storageSourceManifest);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContaineranalysisGoogleDevtoolsCloudbuildV1Source {\n");
    sb.append("    connectedRepository: ").append(toIndentedString(connectedRepository)).append("\n");
    sb.append("    gitSource: ").append(toIndentedString(gitSource)).append("\n");
    sb.append("    repoSource: ").append(toIndentedString(repoSource)).append("\n");
    sb.append("    storageSource: ").append(toIndentedString(storageSource)).append("\n");
    sb.append("    storageSourceManifest: ").append(toIndentedString(storageSourceManifest)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("connectedRepository");
    openapiFields.add("gitSource");
    openapiFields.add("repoSource");
    openapiFields.add("storageSource");
    openapiFields.add("storageSourceManifest");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ContaineranalysisGoogleDevtoolsCloudbuildV1Source
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ContaineranalysisGoogleDevtoolsCloudbuildV1Source.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ContaineranalysisGoogleDevtoolsCloudbuildV1Source is not found in the empty JSON string", ContaineranalysisGoogleDevtoolsCloudbuildV1Source.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ContaineranalysisGoogleDevtoolsCloudbuildV1Source.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ContaineranalysisGoogleDevtoolsCloudbuildV1Source` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `connectedRepository`
      if (jsonObj.get("connectedRepository") != null && !jsonObj.get("connectedRepository").isJsonNull()) {
        ContaineranalysisGoogleDevtoolsCloudbuildV1ConnectedRepository.validateJsonElement(jsonObj.get("connectedRepository"));
      }
      // validate the optional field `gitSource`
      if (jsonObj.get("gitSource") != null && !jsonObj.get("gitSource").isJsonNull()) {
        ContaineranalysisGoogleDevtoolsCloudbuildV1GitSource.validateJsonElement(jsonObj.get("gitSource"));
      }
      // validate the optional field `repoSource`
      if (jsonObj.get("repoSource") != null && !jsonObj.get("repoSource").isJsonNull()) {
        ContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource.validateJsonElement(jsonObj.get("repoSource"));
      }
      // validate the optional field `storageSource`
      if (jsonObj.get("storageSource") != null && !jsonObj.get("storageSource").isJsonNull()) {
        ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSource.validateJsonElement(jsonObj.get("storageSource"));
      }
      // validate the optional field `storageSourceManifest`
      if (jsonObj.get("storageSourceManifest") != null && !jsonObj.get("storageSourceManifest").isJsonNull()) {
        ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSourceManifest.validateJsonElement(jsonObj.get("storageSourceManifest"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ContaineranalysisGoogleDevtoolsCloudbuildV1Source.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ContaineranalysisGoogleDevtoolsCloudbuildV1Source' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ContaineranalysisGoogleDevtoolsCloudbuildV1Source> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ContaineranalysisGoogleDevtoolsCloudbuildV1Source.class));

       return (TypeAdapter<T>) new TypeAdapter<ContaineranalysisGoogleDevtoolsCloudbuildV1Source>() {
           @Override
           public void write(JsonWriter out, ContaineranalysisGoogleDevtoolsCloudbuildV1Source value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ContaineranalysisGoogleDevtoolsCloudbuildV1Source read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ContaineranalysisGoogleDevtoolsCloudbuildV1Source given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ContaineranalysisGoogleDevtoolsCloudbuildV1Source
   * @throws IOException if the JSON string is invalid with respect to ContaineranalysisGoogleDevtoolsCloudbuildV1Source
   */
  public static ContaineranalysisGoogleDevtoolsCloudbuildV1Source fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ContaineranalysisGoogleDevtoolsCloudbuildV1Source.class);
  }

  /**
   * Convert an instance of ContaineranalysisGoogleDevtoolsCloudbuildV1Source to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

