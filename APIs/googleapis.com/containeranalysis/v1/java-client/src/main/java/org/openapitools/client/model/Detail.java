/*
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Version;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A detail for a distro and package affected by this vulnerability and its associated fix (if one is available).
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:38:38.234919-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Detail {
  public static final String SERIALIZED_NAME_AFFECTED_CPE_URI = "affectedCpeUri";
  @SerializedName(SERIALIZED_NAME_AFFECTED_CPE_URI)
  private String affectedCpeUri;

  public static final String SERIALIZED_NAME_AFFECTED_PACKAGE = "affectedPackage";
  @SerializedName(SERIALIZED_NAME_AFFECTED_PACKAGE)
  private String affectedPackage;

  public static final String SERIALIZED_NAME_AFFECTED_VERSION_END = "affectedVersionEnd";
  @SerializedName(SERIALIZED_NAME_AFFECTED_VERSION_END)
  private Version affectedVersionEnd;

  public static final String SERIALIZED_NAME_AFFECTED_VERSION_START = "affectedVersionStart";
  @SerializedName(SERIALIZED_NAME_AFFECTED_VERSION_START)
  private Version affectedVersionStart;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_FIXED_CPE_URI = "fixedCpeUri";
  @SerializedName(SERIALIZED_NAME_FIXED_CPE_URI)
  private String fixedCpeUri;

  public static final String SERIALIZED_NAME_FIXED_PACKAGE = "fixedPackage";
  @SerializedName(SERIALIZED_NAME_FIXED_PACKAGE)
  private String fixedPackage;

  public static final String SERIALIZED_NAME_FIXED_VERSION = "fixedVersion";
  @SerializedName(SERIALIZED_NAME_FIXED_VERSION)
  private Version fixedVersion;

  public static final String SERIALIZED_NAME_IS_OBSOLETE = "isObsolete";
  @SerializedName(SERIALIZED_NAME_IS_OBSOLETE)
  private Boolean isObsolete;

  public static final String SERIALIZED_NAME_PACKAGE_TYPE = "packageType";
  @SerializedName(SERIALIZED_NAME_PACKAGE_TYPE)
  private String packageType;

  public static final String SERIALIZED_NAME_SEVERITY_NAME = "severityName";
  @SerializedName(SERIALIZED_NAME_SEVERITY_NAME)
  private String severityName;

  public static final String SERIALIZED_NAME_SOURCE = "source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  private String source;

  public static final String SERIALIZED_NAME_SOURCE_UPDATE_TIME = "sourceUpdateTime";
  @SerializedName(SERIALIZED_NAME_SOURCE_UPDATE_TIME)
  private String sourceUpdateTime;

  public static final String SERIALIZED_NAME_VENDOR = "vendor";
  @SerializedName(SERIALIZED_NAME_VENDOR)
  private String vendor;

  public Detail() {
  }

  public Detail affectedCpeUri(String affectedCpeUri) {
    this.affectedCpeUri = affectedCpeUri;
    return this;
  }

  /**
   * Required. The [CPE URI](https://cpe.mitre.org/specification/) this vulnerability affects.
   * @return affectedCpeUri
   */
  @javax.annotation.Nullable
  public String getAffectedCpeUri() {
    return affectedCpeUri;
  }

  public void setAffectedCpeUri(String affectedCpeUri) {
    this.affectedCpeUri = affectedCpeUri;
  }


  public Detail affectedPackage(String affectedPackage) {
    this.affectedPackage = affectedPackage;
    return this;
  }

  /**
   * Required. The package this vulnerability affects.
   * @return affectedPackage
   */
  @javax.annotation.Nullable
  public String getAffectedPackage() {
    return affectedPackage;
  }

  public void setAffectedPackage(String affectedPackage) {
    this.affectedPackage = affectedPackage;
  }


  public Detail affectedVersionEnd(Version affectedVersionEnd) {
    this.affectedVersionEnd = affectedVersionEnd;
    return this;
  }

  /**
   * Get affectedVersionEnd
   * @return affectedVersionEnd
   */
  @javax.annotation.Nullable
  public Version getAffectedVersionEnd() {
    return affectedVersionEnd;
  }

  public void setAffectedVersionEnd(Version affectedVersionEnd) {
    this.affectedVersionEnd = affectedVersionEnd;
  }


  public Detail affectedVersionStart(Version affectedVersionStart) {
    this.affectedVersionStart = affectedVersionStart;
    return this;
  }

  /**
   * Get affectedVersionStart
   * @return affectedVersionStart
   */
  @javax.annotation.Nullable
  public Version getAffectedVersionStart() {
    return affectedVersionStart;
  }

  public void setAffectedVersionStart(Version affectedVersionStart) {
    this.affectedVersionStart = affectedVersionStart;
  }


  public Detail description(String description) {
    this.description = description;
    return this;
  }

  /**
   * A vendor-specific description of this vulnerability.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public Detail fixedCpeUri(String fixedCpeUri) {
    this.fixedCpeUri = fixedCpeUri;
    return this;
  }

  /**
   * The distro recommended [CPE URI](https://cpe.mitre.org/specification/) to update to that contains a fix for this vulnerability. It is possible for this to be different from the affected_cpe_uri.
   * @return fixedCpeUri
   */
  @javax.annotation.Nullable
  public String getFixedCpeUri() {
    return fixedCpeUri;
  }

  public void setFixedCpeUri(String fixedCpeUri) {
    this.fixedCpeUri = fixedCpeUri;
  }


  public Detail fixedPackage(String fixedPackage) {
    this.fixedPackage = fixedPackage;
    return this;
  }

  /**
   * The distro recommended package to update to that contains a fix for this vulnerability. It is possible for this to be different from the affected_package.
   * @return fixedPackage
   */
  @javax.annotation.Nullable
  public String getFixedPackage() {
    return fixedPackage;
  }

  public void setFixedPackage(String fixedPackage) {
    this.fixedPackage = fixedPackage;
  }


  public Detail fixedVersion(Version fixedVersion) {
    this.fixedVersion = fixedVersion;
    return this;
  }

  /**
   * Get fixedVersion
   * @return fixedVersion
   */
  @javax.annotation.Nullable
  public Version getFixedVersion() {
    return fixedVersion;
  }

  public void setFixedVersion(Version fixedVersion) {
    this.fixedVersion = fixedVersion;
  }


  public Detail isObsolete(Boolean isObsolete) {
    this.isObsolete = isObsolete;
    return this;
  }

  /**
   * Whether this detail is obsolete. Occurrences are expected not to point to obsolete details.
   * @return isObsolete
   */
  @javax.annotation.Nullable
  public Boolean getIsObsolete() {
    return isObsolete;
  }

  public void setIsObsolete(Boolean isObsolete) {
    this.isObsolete = isObsolete;
  }


  public Detail packageType(String packageType) {
    this.packageType = packageType;
    return this;
  }

  /**
   * The type of package; whether native or non native (e.g., ruby gems, node.js packages, etc.).
   * @return packageType
   */
  @javax.annotation.Nullable
  public String getPackageType() {
    return packageType;
  }

  public void setPackageType(String packageType) {
    this.packageType = packageType;
  }


  public Detail severityName(String severityName) {
    this.severityName = severityName;
    return this;
  }

  /**
   * The distro assigned severity of this vulnerability.
   * @return severityName
   */
  @javax.annotation.Nullable
  public String getSeverityName() {
    return severityName;
  }

  public void setSeverityName(String severityName) {
    this.severityName = severityName;
  }


  public Detail source(String source) {
    this.source = source;
    return this;
  }

  /**
   * The source from which the information in this Detail was obtained.
   * @return source
   */
  @javax.annotation.Nullable
  public String getSource() {
    return source;
  }

  public void setSource(String source) {
    this.source = source;
  }


  public Detail sourceUpdateTime(String sourceUpdateTime) {
    this.sourceUpdateTime = sourceUpdateTime;
    return this;
  }

  /**
   * The time this information was last changed at the source. This is an upstream timestamp from the underlying information source - e.g. Ubuntu security tracker.
   * @return sourceUpdateTime
   */
  @javax.annotation.Nullable
  public String getSourceUpdateTime() {
    return sourceUpdateTime;
  }

  public void setSourceUpdateTime(String sourceUpdateTime) {
    this.sourceUpdateTime = sourceUpdateTime;
  }


  public Detail vendor(String vendor) {
    this.vendor = vendor;
    return this;
  }

  /**
   * The name of the vendor of the product.
   * @return vendor
   */
  @javax.annotation.Nullable
  public String getVendor() {
    return vendor;
  }

  public void setVendor(String vendor) {
    this.vendor = vendor;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Detail detail = (Detail) o;
    return Objects.equals(this.affectedCpeUri, detail.affectedCpeUri) &&
        Objects.equals(this.affectedPackage, detail.affectedPackage) &&
        Objects.equals(this.affectedVersionEnd, detail.affectedVersionEnd) &&
        Objects.equals(this.affectedVersionStart, detail.affectedVersionStart) &&
        Objects.equals(this.description, detail.description) &&
        Objects.equals(this.fixedCpeUri, detail.fixedCpeUri) &&
        Objects.equals(this.fixedPackage, detail.fixedPackage) &&
        Objects.equals(this.fixedVersion, detail.fixedVersion) &&
        Objects.equals(this.isObsolete, detail.isObsolete) &&
        Objects.equals(this.packageType, detail.packageType) &&
        Objects.equals(this.severityName, detail.severityName) &&
        Objects.equals(this.source, detail.source) &&
        Objects.equals(this.sourceUpdateTime, detail.sourceUpdateTime) &&
        Objects.equals(this.vendor, detail.vendor);
  }

  @Override
  public int hashCode() {
    return Objects.hash(affectedCpeUri, affectedPackage, affectedVersionEnd, affectedVersionStart, description, fixedCpeUri, fixedPackage, fixedVersion, isObsolete, packageType, severityName, source, sourceUpdateTime, vendor);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Detail {\n");
    sb.append("    affectedCpeUri: ").append(toIndentedString(affectedCpeUri)).append("\n");
    sb.append("    affectedPackage: ").append(toIndentedString(affectedPackage)).append("\n");
    sb.append("    affectedVersionEnd: ").append(toIndentedString(affectedVersionEnd)).append("\n");
    sb.append("    affectedVersionStart: ").append(toIndentedString(affectedVersionStart)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    fixedCpeUri: ").append(toIndentedString(fixedCpeUri)).append("\n");
    sb.append("    fixedPackage: ").append(toIndentedString(fixedPackage)).append("\n");
    sb.append("    fixedVersion: ").append(toIndentedString(fixedVersion)).append("\n");
    sb.append("    isObsolete: ").append(toIndentedString(isObsolete)).append("\n");
    sb.append("    packageType: ").append(toIndentedString(packageType)).append("\n");
    sb.append("    severityName: ").append(toIndentedString(severityName)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    sourceUpdateTime: ").append(toIndentedString(sourceUpdateTime)).append("\n");
    sb.append("    vendor: ").append(toIndentedString(vendor)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("affectedCpeUri");
    openapiFields.add("affectedPackage");
    openapiFields.add("affectedVersionEnd");
    openapiFields.add("affectedVersionStart");
    openapiFields.add("description");
    openapiFields.add("fixedCpeUri");
    openapiFields.add("fixedPackage");
    openapiFields.add("fixedVersion");
    openapiFields.add("isObsolete");
    openapiFields.add("packageType");
    openapiFields.add("severityName");
    openapiFields.add("source");
    openapiFields.add("sourceUpdateTime");
    openapiFields.add("vendor");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Detail
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Detail.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Detail is not found in the empty JSON string", Detail.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Detail.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Detail` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("affectedCpeUri") != null && !jsonObj.get("affectedCpeUri").isJsonNull()) && !jsonObj.get("affectedCpeUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `affectedCpeUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("affectedCpeUri").toString()));
      }
      if ((jsonObj.get("affectedPackage") != null && !jsonObj.get("affectedPackage").isJsonNull()) && !jsonObj.get("affectedPackage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `affectedPackage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("affectedPackage").toString()));
      }
      // validate the optional field `affectedVersionEnd`
      if (jsonObj.get("affectedVersionEnd") != null && !jsonObj.get("affectedVersionEnd").isJsonNull()) {
        Version.validateJsonElement(jsonObj.get("affectedVersionEnd"));
      }
      // validate the optional field `affectedVersionStart`
      if (jsonObj.get("affectedVersionStart") != null && !jsonObj.get("affectedVersionStart").isJsonNull()) {
        Version.validateJsonElement(jsonObj.get("affectedVersionStart"));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("fixedCpeUri") != null && !jsonObj.get("fixedCpeUri").isJsonNull()) && !jsonObj.get("fixedCpeUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fixedCpeUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fixedCpeUri").toString()));
      }
      if ((jsonObj.get("fixedPackage") != null && !jsonObj.get("fixedPackage").isJsonNull()) && !jsonObj.get("fixedPackage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fixedPackage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fixedPackage").toString()));
      }
      // validate the optional field `fixedVersion`
      if (jsonObj.get("fixedVersion") != null && !jsonObj.get("fixedVersion").isJsonNull()) {
        Version.validateJsonElement(jsonObj.get("fixedVersion"));
      }
      if ((jsonObj.get("packageType") != null && !jsonObj.get("packageType").isJsonNull()) && !jsonObj.get("packageType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `packageType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("packageType").toString()));
      }
      if ((jsonObj.get("severityName") != null && !jsonObj.get("severityName").isJsonNull()) && !jsonObj.get("severityName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `severityName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("severityName").toString()));
      }
      if ((jsonObj.get("source") != null && !jsonObj.get("source").isJsonNull()) && !jsonObj.get("source").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source").toString()));
      }
      if ((jsonObj.get("sourceUpdateTime") != null && !jsonObj.get("sourceUpdateTime").isJsonNull()) && !jsonObj.get("sourceUpdateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceUpdateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceUpdateTime").toString()));
      }
      if ((jsonObj.get("vendor") != null && !jsonObj.get("vendor").isJsonNull()) && !jsonObj.get("vendor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vendor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vendor").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Detail.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Detail' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Detail> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Detail.class));

       return (TypeAdapter<T>) new TypeAdapter<Detail>() {
           @Override
           public void write(JsonWriter out, Detail value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Detail read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Detail given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Detail
   * @throws IOException if the JSON string is invalid with respect to Detail
   */
  public static Detail fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Detail.class);
  }

  /**
   * Convert an instance of Detail to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

