/*
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Location of the source in an archive file in Cloud Storage.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:38:38.234919-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSource {
  public static final String SERIALIZED_NAME_BUCKET = "bucket";
  @SerializedName(SERIALIZED_NAME_BUCKET)
  private String bucket;

  public static final String SERIALIZED_NAME_GENERATION = "generation";
  @SerializedName(SERIALIZED_NAME_GENERATION)
  private String generation;

  public static final String SERIALIZED_NAME_OBJECT = "object";
  @SerializedName(SERIALIZED_NAME_OBJECT)
  private String _object;

  /**
   * Optional. Option to specify the tool to fetch the source file for the build.
   */
  @JsonAdapter(SourceFetcherEnum.Adapter.class)
  public enum SourceFetcherEnum {
    SOURCE_FETCHER_UNSPECIFIED("SOURCE_FETCHER_UNSPECIFIED"),
    
    GSUTIL("GSUTIL"),
    
    GCS_FETCHER("GCS_FETCHER");

    private String value;

    SourceFetcherEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SourceFetcherEnum fromValue(String value) {
      for (SourceFetcherEnum b : SourceFetcherEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SourceFetcherEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SourceFetcherEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SourceFetcherEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SourceFetcherEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SourceFetcherEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SOURCE_FETCHER = "sourceFetcher";
  @SerializedName(SERIALIZED_NAME_SOURCE_FETCHER)
  private SourceFetcherEnum sourceFetcher;

  public ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSource() {
  }

  public ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSource bucket(String bucket) {
    this.bucket = bucket;
    return this;
  }

  /**
   * Cloud Storage bucket containing the source (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)).
   * @return bucket
   */
  @javax.annotation.Nullable
  public String getBucket() {
    return bucket;
  }

  public void setBucket(String bucket) {
    this.bucket = bucket;
  }


  public ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSource generation(String generation) {
    this.generation = generation;
    return this;
  }

  /**
   * Cloud Storage generation for the object. If the generation is omitted, the latest generation will be used.
   * @return generation
   */
  @javax.annotation.Nullable
  public String getGeneration() {
    return generation;
  }

  public void setGeneration(String generation) {
    this.generation = generation;
  }


  public ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSource _object(String _object) {
    this._object = _object;
    return this;
  }

  /**
   * Cloud Storage object containing the source. This object must be a zipped (&#x60;.zip&#x60;) or gzipped archive file (&#x60;.tar.gz&#x60;) containing source to build.
   * @return _object
   */
  @javax.annotation.Nullable
  public String getObject() {
    return _object;
  }

  public void setObject(String _object) {
    this._object = _object;
  }


  public ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSource sourceFetcher(SourceFetcherEnum sourceFetcher) {
    this.sourceFetcher = sourceFetcher;
    return this;
  }

  /**
   * Optional. Option to specify the tool to fetch the source file for the build.
   * @return sourceFetcher
   */
  @javax.annotation.Nullable
  public SourceFetcherEnum getSourceFetcher() {
    return sourceFetcher;
  }

  public void setSourceFetcher(SourceFetcherEnum sourceFetcher) {
    this.sourceFetcher = sourceFetcher;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSource containeranalysisGoogleDevtoolsCloudbuildV1StorageSource = (ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSource) o;
    return Objects.equals(this.bucket, containeranalysisGoogleDevtoolsCloudbuildV1StorageSource.bucket) &&
        Objects.equals(this.generation, containeranalysisGoogleDevtoolsCloudbuildV1StorageSource.generation) &&
        Objects.equals(this._object, containeranalysisGoogleDevtoolsCloudbuildV1StorageSource._object) &&
        Objects.equals(this.sourceFetcher, containeranalysisGoogleDevtoolsCloudbuildV1StorageSource.sourceFetcher);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bucket, generation, _object, sourceFetcher);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSource {\n");
    sb.append("    bucket: ").append(toIndentedString(bucket)).append("\n");
    sb.append("    generation: ").append(toIndentedString(generation)).append("\n");
    sb.append("    _object: ").append(toIndentedString(_object)).append("\n");
    sb.append("    sourceFetcher: ").append(toIndentedString(sourceFetcher)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bucket");
    openapiFields.add("generation");
    openapiFields.add("object");
    openapiFields.add("sourceFetcher");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSource
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSource.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSource is not found in the empty JSON string", ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSource.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSource.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSource` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("bucket") != null && !jsonObj.get("bucket").isJsonNull()) && !jsonObj.get("bucket").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bucket` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bucket").toString()));
      }
      if ((jsonObj.get("generation") != null && !jsonObj.get("generation").isJsonNull()) && !jsonObj.get("generation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `generation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("generation").toString()));
      }
      if ((jsonObj.get("object") != null && !jsonObj.get("object").isJsonNull()) && !jsonObj.get("object").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `object` to be a primitive type in the JSON string but got `%s`", jsonObj.get("object").toString()));
      }
      if ((jsonObj.get("sourceFetcher") != null && !jsonObj.get("sourceFetcher").isJsonNull()) && !jsonObj.get("sourceFetcher").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceFetcher` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceFetcher").toString()));
      }
      // validate the optional field `sourceFetcher`
      if (jsonObj.get("sourceFetcher") != null && !jsonObj.get("sourceFetcher").isJsonNull()) {
        SourceFetcherEnum.validateJsonElement(jsonObj.get("sourceFetcher"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSource.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSource' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSource> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSource.class));

       return (TypeAdapter<T>) new TypeAdapter<ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSource>() {
           @Override
           public void write(JsonWriter out, ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSource value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSource read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSource given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSource
   * @throws IOException if the JSON string is invalid with respect to ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSource
   */
  public static ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSource fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSource.class);
  }

  /**
   * Convert an instance of ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSource to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

