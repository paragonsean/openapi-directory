/*
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A predicate which describes the SBOM being referenced.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:38:38.234919-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SbomReferenceIntotoPredicate {
  public static final String SERIALIZED_NAME_DIGEST = "digest";
  @SerializedName(SERIALIZED_NAME_DIGEST)
  private Map<String, String> digest = new HashMap<>();

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private String location;

  public static final String SERIALIZED_NAME_MIME_TYPE = "mimeType";
  @SerializedName(SERIALIZED_NAME_MIME_TYPE)
  private String mimeType;

  public static final String SERIALIZED_NAME_REFERRER_ID = "referrerId";
  @SerializedName(SERIALIZED_NAME_REFERRER_ID)
  private String referrerId;

  public SbomReferenceIntotoPredicate() {
  }

  public SbomReferenceIntotoPredicate digest(Map<String, String> digest) {
    this.digest = digest;
    return this;
  }

  public SbomReferenceIntotoPredicate putDigestItem(String key, String digestItem) {
    if (this.digest == null) {
      this.digest = new HashMap<>();
    }
    this.digest.put(key, digestItem);
    return this;
  }

  /**
   * A map of algorithm to digest of the contents of the SBOM.
   * @return digest
   */
  @javax.annotation.Nullable
  public Map<String, String> getDigest() {
    return digest;
  }

  public void setDigest(Map<String, String> digest) {
    this.digest = digest;
  }


  public SbomReferenceIntotoPredicate location(String location) {
    this.location = location;
    return this;
  }

  /**
   * The location of the SBOM.
   * @return location
   */
  @javax.annotation.Nullable
  public String getLocation() {
    return location;
  }

  public void setLocation(String location) {
    this.location = location;
  }


  public SbomReferenceIntotoPredicate mimeType(String mimeType) {
    this.mimeType = mimeType;
    return this;
  }

  /**
   * The mime type of the SBOM.
   * @return mimeType
   */
  @javax.annotation.Nullable
  public String getMimeType() {
    return mimeType;
  }

  public void setMimeType(String mimeType) {
    this.mimeType = mimeType;
  }


  public SbomReferenceIntotoPredicate referrerId(String referrerId) {
    this.referrerId = referrerId;
    return this;
  }

  /**
   * The person or system referring this predicate to the consumer.
   * @return referrerId
   */
  @javax.annotation.Nullable
  public String getReferrerId() {
    return referrerId;
  }

  public void setReferrerId(String referrerId) {
    this.referrerId = referrerId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SbomReferenceIntotoPredicate sbomReferenceIntotoPredicate = (SbomReferenceIntotoPredicate) o;
    return Objects.equals(this.digest, sbomReferenceIntotoPredicate.digest) &&
        Objects.equals(this.location, sbomReferenceIntotoPredicate.location) &&
        Objects.equals(this.mimeType, sbomReferenceIntotoPredicate.mimeType) &&
        Objects.equals(this.referrerId, sbomReferenceIntotoPredicate.referrerId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(digest, location, mimeType, referrerId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SbomReferenceIntotoPredicate {\n");
    sb.append("    digest: ").append(toIndentedString(digest)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    mimeType: ").append(toIndentedString(mimeType)).append("\n");
    sb.append("    referrerId: ").append(toIndentedString(referrerId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("digest");
    openapiFields.add("location");
    openapiFields.add("mimeType");
    openapiFields.add("referrerId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SbomReferenceIntotoPredicate
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SbomReferenceIntotoPredicate.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SbomReferenceIntotoPredicate is not found in the empty JSON string", SbomReferenceIntotoPredicate.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SbomReferenceIntotoPredicate.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SbomReferenceIntotoPredicate` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("location") != null && !jsonObj.get("location").isJsonNull()) && !jsonObj.get("location").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `location` to be a primitive type in the JSON string but got `%s`", jsonObj.get("location").toString()));
      }
      if ((jsonObj.get("mimeType") != null && !jsonObj.get("mimeType").isJsonNull()) && !jsonObj.get("mimeType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mimeType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mimeType").toString()));
      }
      if ((jsonObj.get("referrerId") != null && !jsonObj.get("referrerId").isJsonNull()) && !jsonObj.get("referrerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `referrerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("referrerId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SbomReferenceIntotoPredicate.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SbomReferenceIntotoPredicate' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SbomReferenceIntotoPredicate> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SbomReferenceIntotoPredicate.class));

       return (TypeAdapter<T>) new TypeAdapter<SbomReferenceIntotoPredicate>() {
           @Override
           public void write(JsonWriter out, SbomReferenceIntotoPredicate value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SbomReferenceIntotoPredicate read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SbomReferenceIntotoPredicate given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SbomReferenceIntotoPredicate
   * @throws IOException if the JSON string is invalid with respect to SbomReferenceIntotoPredicate
   */
  public static SbomReferenceIntotoPredicate fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SbomReferenceIntotoPredicate.class);
  }

  /**
   * Convert an instance of SbomReferenceIntotoPredicate to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

