/*
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Indicates that the builder claims certain fields in this message to be complete.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:38:38.234919-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GrafeasV1SlsaProvenanceZeroTwoSlsaCompleteness {
  public static final String SERIALIZED_NAME_ENVIRONMENT = "environment";
  @SerializedName(SERIALIZED_NAME_ENVIRONMENT)
  private Boolean environment;

  public static final String SERIALIZED_NAME_MATERIALS = "materials";
  @SerializedName(SERIALIZED_NAME_MATERIALS)
  private Boolean materials;

  public static final String SERIALIZED_NAME_PARAMETERS = "parameters";
  @SerializedName(SERIALIZED_NAME_PARAMETERS)
  private Boolean parameters;

  public GrafeasV1SlsaProvenanceZeroTwoSlsaCompleteness() {
  }

  public GrafeasV1SlsaProvenanceZeroTwoSlsaCompleteness environment(Boolean environment) {
    this.environment = environment;
    return this;
  }

  /**
   * Get environment
   * @return environment
   */
  @javax.annotation.Nullable
  public Boolean getEnvironment() {
    return environment;
  }

  public void setEnvironment(Boolean environment) {
    this.environment = environment;
  }


  public GrafeasV1SlsaProvenanceZeroTwoSlsaCompleteness materials(Boolean materials) {
    this.materials = materials;
    return this;
  }

  /**
   * Get materials
   * @return materials
   */
  @javax.annotation.Nullable
  public Boolean getMaterials() {
    return materials;
  }

  public void setMaterials(Boolean materials) {
    this.materials = materials;
  }


  public GrafeasV1SlsaProvenanceZeroTwoSlsaCompleteness parameters(Boolean parameters) {
    this.parameters = parameters;
    return this;
  }

  /**
   * Get parameters
   * @return parameters
   */
  @javax.annotation.Nullable
  public Boolean getParameters() {
    return parameters;
  }

  public void setParameters(Boolean parameters) {
    this.parameters = parameters;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GrafeasV1SlsaProvenanceZeroTwoSlsaCompleteness grafeasV1SlsaProvenanceZeroTwoSlsaCompleteness = (GrafeasV1SlsaProvenanceZeroTwoSlsaCompleteness) o;
    return Objects.equals(this.environment, grafeasV1SlsaProvenanceZeroTwoSlsaCompleteness.environment) &&
        Objects.equals(this.materials, grafeasV1SlsaProvenanceZeroTwoSlsaCompleteness.materials) &&
        Objects.equals(this.parameters, grafeasV1SlsaProvenanceZeroTwoSlsaCompleteness.parameters);
  }

  @Override
  public int hashCode() {
    return Objects.hash(environment, materials, parameters);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GrafeasV1SlsaProvenanceZeroTwoSlsaCompleteness {\n");
    sb.append("    environment: ").append(toIndentedString(environment)).append("\n");
    sb.append("    materials: ").append(toIndentedString(materials)).append("\n");
    sb.append("    parameters: ").append(toIndentedString(parameters)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("environment");
    openapiFields.add("materials");
    openapiFields.add("parameters");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GrafeasV1SlsaProvenanceZeroTwoSlsaCompleteness
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GrafeasV1SlsaProvenanceZeroTwoSlsaCompleteness.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GrafeasV1SlsaProvenanceZeroTwoSlsaCompleteness is not found in the empty JSON string", GrafeasV1SlsaProvenanceZeroTwoSlsaCompleteness.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GrafeasV1SlsaProvenanceZeroTwoSlsaCompleteness.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GrafeasV1SlsaProvenanceZeroTwoSlsaCompleteness` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GrafeasV1SlsaProvenanceZeroTwoSlsaCompleteness.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GrafeasV1SlsaProvenanceZeroTwoSlsaCompleteness' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GrafeasV1SlsaProvenanceZeroTwoSlsaCompleteness> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GrafeasV1SlsaProvenanceZeroTwoSlsaCompleteness.class));

       return (TypeAdapter<T>) new TypeAdapter<GrafeasV1SlsaProvenanceZeroTwoSlsaCompleteness>() {
           @Override
           public void write(JsonWriter out, GrafeasV1SlsaProvenanceZeroTwoSlsaCompleteness value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GrafeasV1SlsaProvenanceZeroTwoSlsaCompleteness read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GrafeasV1SlsaProvenanceZeroTwoSlsaCompleteness given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GrafeasV1SlsaProvenanceZeroTwoSlsaCompleteness
   * @throws IOException if the JSON string is invalid with respect to GrafeasV1SlsaProvenanceZeroTwoSlsaCompleteness
   */
  public static GrafeasV1SlsaProvenanceZeroTwoSlsaCompleteness fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GrafeasV1SlsaProvenanceZeroTwoSlsaCompleteness.class);
  }

  /**
   * Convert an instance of GrafeasV1SlsaProvenanceZeroTwoSlsaCompleteness to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

