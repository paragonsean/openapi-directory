/*
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.ContaineranalysisGoogleDevtoolsCloudbuildV1ConnectedRepository;
import org.openapitools.client.model.ContaineranalysisGoogleDevtoolsCloudbuildV1FileHashes;
import org.openapitools.client.model.ContaineranalysisGoogleDevtoolsCloudbuildV1GitSource;
import org.openapitools.client.model.ContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource;
import org.openapitools.client.model.ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSource;
import org.openapitools.client.model.ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSourceManifest;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Provenance of the source. Ways to find the original source, or verify that some source was used for this build.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:38:38.234919-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance {
  public static final String SERIALIZED_NAME_FILE_HASHES = "fileHashes";
  @SerializedName(SERIALIZED_NAME_FILE_HASHES)
  private Map<String, ContaineranalysisGoogleDevtoolsCloudbuildV1FileHashes> fileHashes = new HashMap<>();

  public static final String SERIALIZED_NAME_RESOLVED_CONNECTED_REPOSITORY = "resolvedConnectedRepository";
  @SerializedName(SERIALIZED_NAME_RESOLVED_CONNECTED_REPOSITORY)
  private ContaineranalysisGoogleDevtoolsCloudbuildV1ConnectedRepository resolvedConnectedRepository;

  public static final String SERIALIZED_NAME_RESOLVED_GIT_SOURCE = "resolvedGitSource";
  @SerializedName(SERIALIZED_NAME_RESOLVED_GIT_SOURCE)
  private ContaineranalysisGoogleDevtoolsCloudbuildV1GitSource resolvedGitSource;

  public static final String SERIALIZED_NAME_RESOLVED_REPO_SOURCE = "resolvedRepoSource";
  @SerializedName(SERIALIZED_NAME_RESOLVED_REPO_SOURCE)
  private ContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource resolvedRepoSource;

  public static final String SERIALIZED_NAME_RESOLVED_STORAGE_SOURCE = "resolvedStorageSource";
  @SerializedName(SERIALIZED_NAME_RESOLVED_STORAGE_SOURCE)
  private ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSource resolvedStorageSource;

  public static final String SERIALIZED_NAME_RESOLVED_STORAGE_SOURCE_MANIFEST = "resolvedStorageSourceManifest";
  @SerializedName(SERIALIZED_NAME_RESOLVED_STORAGE_SOURCE_MANIFEST)
  private ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSourceManifest resolvedStorageSourceManifest;

  public ContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance() {
  }

  public ContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance(
     Map<String, ContaineranalysisGoogleDevtoolsCloudbuildV1FileHashes> fileHashes
  ) {
    this();
    this.fileHashes = fileHashes;
  }

  /**
   * Output only. Hash(es) of the build source, which can be used to verify that the original source integrity was maintained in the build. Note that &#x60;FileHashes&#x60; will only be populated if &#x60;BuildOptions&#x60; has requested a &#x60;SourceProvenanceHash&#x60;. The keys to this map are file paths used as build source and the values contain the hash values for those files. If the build source came in a single package such as a gzipped tarfile (&#x60;.tar.gz&#x60;), the &#x60;FileHash&#x60; will be for the single path to that file.
   * @return fileHashes
   */
  @javax.annotation.Nullable
  public Map<String, ContaineranalysisGoogleDevtoolsCloudbuildV1FileHashes> getFileHashes() {
    return fileHashes;
  }



  public ContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance resolvedConnectedRepository(ContaineranalysisGoogleDevtoolsCloudbuildV1ConnectedRepository resolvedConnectedRepository) {
    this.resolvedConnectedRepository = resolvedConnectedRepository;
    return this;
  }

  /**
   * Get resolvedConnectedRepository
   * @return resolvedConnectedRepository
   */
  @javax.annotation.Nullable
  public ContaineranalysisGoogleDevtoolsCloudbuildV1ConnectedRepository getResolvedConnectedRepository() {
    return resolvedConnectedRepository;
  }

  public void setResolvedConnectedRepository(ContaineranalysisGoogleDevtoolsCloudbuildV1ConnectedRepository resolvedConnectedRepository) {
    this.resolvedConnectedRepository = resolvedConnectedRepository;
  }


  public ContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance resolvedGitSource(ContaineranalysisGoogleDevtoolsCloudbuildV1GitSource resolvedGitSource) {
    this.resolvedGitSource = resolvedGitSource;
    return this;
  }

  /**
   * Get resolvedGitSource
   * @return resolvedGitSource
   */
  @javax.annotation.Nullable
  public ContaineranalysisGoogleDevtoolsCloudbuildV1GitSource getResolvedGitSource() {
    return resolvedGitSource;
  }

  public void setResolvedGitSource(ContaineranalysisGoogleDevtoolsCloudbuildV1GitSource resolvedGitSource) {
    this.resolvedGitSource = resolvedGitSource;
  }


  public ContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance resolvedRepoSource(ContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource resolvedRepoSource) {
    this.resolvedRepoSource = resolvedRepoSource;
    return this;
  }

  /**
   * Get resolvedRepoSource
   * @return resolvedRepoSource
   */
  @javax.annotation.Nullable
  public ContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource getResolvedRepoSource() {
    return resolvedRepoSource;
  }

  public void setResolvedRepoSource(ContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource resolvedRepoSource) {
    this.resolvedRepoSource = resolvedRepoSource;
  }


  public ContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance resolvedStorageSource(ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSource resolvedStorageSource) {
    this.resolvedStorageSource = resolvedStorageSource;
    return this;
  }

  /**
   * Get resolvedStorageSource
   * @return resolvedStorageSource
   */
  @javax.annotation.Nullable
  public ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSource getResolvedStorageSource() {
    return resolvedStorageSource;
  }

  public void setResolvedStorageSource(ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSource resolvedStorageSource) {
    this.resolvedStorageSource = resolvedStorageSource;
  }


  public ContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance resolvedStorageSourceManifest(ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSourceManifest resolvedStorageSourceManifest) {
    this.resolvedStorageSourceManifest = resolvedStorageSourceManifest;
    return this;
  }

  /**
   * Get resolvedStorageSourceManifest
   * @return resolvedStorageSourceManifest
   */
  @javax.annotation.Nullable
  public ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSourceManifest getResolvedStorageSourceManifest() {
    return resolvedStorageSourceManifest;
  }

  public void setResolvedStorageSourceManifest(ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSourceManifest resolvedStorageSourceManifest) {
    this.resolvedStorageSourceManifest = resolvedStorageSourceManifest;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance containeranalysisGoogleDevtoolsCloudbuildV1SourceProvenance = (ContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance) o;
    return Objects.equals(this.fileHashes, containeranalysisGoogleDevtoolsCloudbuildV1SourceProvenance.fileHashes) &&
        Objects.equals(this.resolvedConnectedRepository, containeranalysisGoogleDevtoolsCloudbuildV1SourceProvenance.resolvedConnectedRepository) &&
        Objects.equals(this.resolvedGitSource, containeranalysisGoogleDevtoolsCloudbuildV1SourceProvenance.resolvedGitSource) &&
        Objects.equals(this.resolvedRepoSource, containeranalysisGoogleDevtoolsCloudbuildV1SourceProvenance.resolvedRepoSource) &&
        Objects.equals(this.resolvedStorageSource, containeranalysisGoogleDevtoolsCloudbuildV1SourceProvenance.resolvedStorageSource) &&
        Objects.equals(this.resolvedStorageSourceManifest, containeranalysisGoogleDevtoolsCloudbuildV1SourceProvenance.resolvedStorageSourceManifest);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fileHashes, resolvedConnectedRepository, resolvedGitSource, resolvedRepoSource, resolvedStorageSource, resolvedStorageSourceManifest);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance {\n");
    sb.append("    fileHashes: ").append(toIndentedString(fileHashes)).append("\n");
    sb.append("    resolvedConnectedRepository: ").append(toIndentedString(resolvedConnectedRepository)).append("\n");
    sb.append("    resolvedGitSource: ").append(toIndentedString(resolvedGitSource)).append("\n");
    sb.append("    resolvedRepoSource: ").append(toIndentedString(resolvedRepoSource)).append("\n");
    sb.append("    resolvedStorageSource: ").append(toIndentedString(resolvedStorageSource)).append("\n");
    sb.append("    resolvedStorageSourceManifest: ").append(toIndentedString(resolvedStorageSourceManifest)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("fileHashes");
    openapiFields.add("resolvedConnectedRepository");
    openapiFields.add("resolvedGitSource");
    openapiFields.add("resolvedRepoSource");
    openapiFields.add("resolvedStorageSource");
    openapiFields.add("resolvedStorageSourceManifest");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance is not found in the empty JSON string", ContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `resolvedConnectedRepository`
      if (jsonObj.get("resolvedConnectedRepository") != null && !jsonObj.get("resolvedConnectedRepository").isJsonNull()) {
        ContaineranalysisGoogleDevtoolsCloudbuildV1ConnectedRepository.validateJsonElement(jsonObj.get("resolvedConnectedRepository"));
      }
      // validate the optional field `resolvedGitSource`
      if (jsonObj.get("resolvedGitSource") != null && !jsonObj.get("resolvedGitSource").isJsonNull()) {
        ContaineranalysisGoogleDevtoolsCloudbuildV1GitSource.validateJsonElement(jsonObj.get("resolvedGitSource"));
      }
      // validate the optional field `resolvedRepoSource`
      if (jsonObj.get("resolvedRepoSource") != null && !jsonObj.get("resolvedRepoSource").isJsonNull()) {
        ContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource.validateJsonElement(jsonObj.get("resolvedRepoSource"));
      }
      // validate the optional field `resolvedStorageSource`
      if (jsonObj.get("resolvedStorageSource") != null && !jsonObj.get("resolvedStorageSource").isJsonNull()) {
        ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSource.validateJsonElement(jsonObj.get("resolvedStorageSource"));
      }
      // validate the optional field `resolvedStorageSourceManifest`
      if (jsonObj.get("resolvedStorageSourceManifest") != null && !jsonObj.get("resolvedStorageSourceManifest").isJsonNull()) {
        ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSourceManifest.validateJsonElement(jsonObj.get("resolvedStorageSourceManifest"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance.class));

       return (TypeAdapter<T>) new TypeAdapter<ContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance>() {
           @Override
           public void write(JsonWriter out, ContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance
   * @throws IOException if the JSON string is invalid with respect to ContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance
   */
  public static ContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance.class);
  }

  /**
   * Convert an instance of ContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

