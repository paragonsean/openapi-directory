/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAISlsaMetadata.h
 *
 * Other properties of the build.
 */

#ifndef OAISlsaMetadata_H
#define OAISlsaMetadata_H

#include <QJsonObject>

#include "OAISlsaCompleteness.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAISlsaCompleteness;

class OAISlsaMetadata : public OAIObject {
public:
    OAISlsaMetadata();
    OAISlsaMetadata(QString json);
    ~OAISlsaMetadata() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getBuildFinishedOn() const;
    void setBuildFinishedOn(const QString &build_finished_on);
    bool is_build_finished_on_Set() const;
    bool is_build_finished_on_Valid() const;

    QString getBuildInvocationId() const;
    void setBuildInvocationId(const QString &build_invocation_id);
    bool is_build_invocation_id_Set() const;
    bool is_build_invocation_id_Valid() const;

    QString getBuildStartedOn() const;
    void setBuildStartedOn(const QString &build_started_on);
    bool is_build_started_on_Set() const;
    bool is_build_started_on_Valid() const;

    OAISlsaCompleteness getCompleteness() const;
    void setCompleteness(const OAISlsaCompleteness &completeness);
    bool is_completeness_Set() const;
    bool is_completeness_Valid() const;

    bool isReproducible() const;
    void setReproducible(const bool &reproducible);
    bool is_reproducible_Set() const;
    bool is_reproducible_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_build_finished_on;
    bool m_build_finished_on_isSet;
    bool m_build_finished_on_isValid;

    QString m_build_invocation_id;
    bool m_build_invocation_id_isSet;
    bool m_build_invocation_id_isValid;

    QString m_build_started_on;
    bool m_build_started_on_isSet;
    bool m_build_started_on_isValid;

    OAISlsaCompleteness m_completeness;
    bool m_completeness_isSet;
    bool m_completeness_isValid;

    bool m_reproducible;
    bool m_reproducible_isSet;
    bool m_reproducible_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAISlsaMetadata)

#endif // OAISlsaMetadata_H
