/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResourceDescriptor.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResourceDescriptor::OAIResourceDescriptor(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResourceDescriptor::OAIResourceDescriptor() {
    this->initializeModel();
}

OAIResourceDescriptor::~OAIResourceDescriptor() {}

void OAIResourceDescriptor::initializeModel() {

    m_annotations_isSet = false;
    m_annotations_isValid = false;

    m_content_isSet = false;
    m_content_isValid = false;

    m_digest_isSet = false;
    m_digest_isValid = false;

    m_download_location_isSet = false;
    m_download_location_isValid = false;

    m_media_type_isSet = false;
    m_media_type_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_uri_isSet = false;
    m_uri_isValid = false;
}

void OAIResourceDescriptor::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIResourceDescriptor::fromJsonObject(QJsonObject json) {

    m_annotations_isValid = ::OpenAPI::fromJsonValue(m_annotations, json[QString("annotations")]);
    m_annotations_isSet = !json[QString("annotations")].isNull() && m_annotations_isValid;

    m_content_isValid = ::OpenAPI::fromJsonValue(m_content, json[QString("content")]);
    m_content_isSet = !json[QString("content")].isNull() && m_content_isValid;

    m_digest_isValid = ::OpenAPI::fromJsonValue(m_digest, json[QString("digest")]);
    m_digest_isSet = !json[QString("digest")].isNull() && m_digest_isValid;

    m_download_location_isValid = ::OpenAPI::fromJsonValue(m_download_location, json[QString("downloadLocation")]);
    m_download_location_isSet = !json[QString("downloadLocation")].isNull() && m_download_location_isValid;

    m_media_type_isValid = ::OpenAPI::fromJsonValue(m_media_type, json[QString("mediaType")]);
    m_media_type_isSet = !json[QString("mediaType")].isNull() && m_media_type_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_uri_isValid = ::OpenAPI::fromJsonValue(m_uri, json[QString("uri")]);
    m_uri_isSet = !json[QString("uri")].isNull() && m_uri_isValid;
}

QString OAIResourceDescriptor::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIResourceDescriptor::asJsonObject() const {
    QJsonObject obj;
    if (m_annotations.size() > 0) {
        obj.insert(QString("annotations"), ::OpenAPI::toJsonValue(m_annotations));
    }
    if (m_content_isSet) {
        obj.insert(QString("content"), ::OpenAPI::toJsonValue(m_content));
    }
    if (m_digest.size() > 0) {
        obj.insert(QString("digest"), ::OpenAPI::toJsonValue(m_digest));
    }
    if (m_download_location_isSet) {
        obj.insert(QString("downloadLocation"), ::OpenAPI::toJsonValue(m_download_location));
    }
    if (m_media_type_isSet) {
        obj.insert(QString("mediaType"), ::OpenAPI::toJsonValue(m_media_type));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_uri_isSet) {
        obj.insert(QString("uri"), ::OpenAPI::toJsonValue(m_uri));
    }
    return obj;
}

QMap<QString, QJsonValue> OAIResourceDescriptor::getAnnotations() const {
    return m_annotations;
}
void OAIResourceDescriptor::setAnnotations(const QMap<QString, QJsonValue> &annotations) {
    m_annotations = annotations;
    m_annotations_isSet = true;
}

bool OAIResourceDescriptor::is_annotations_Set() const{
    return m_annotations_isSet;
}

bool OAIResourceDescriptor::is_annotations_Valid() const{
    return m_annotations_isValid;
}

QByteArray OAIResourceDescriptor::getContent() const {
    return m_content;
}
void OAIResourceDescriptor::setContent(const QByteArray &content) {
    m_content = content;
    m_content_isSet = true;
}

bool OAIResourceDescriptor::is_content_Set() const{
    return m_content_isSet;
}

bool OAIResourceDescriptor::is_content_Valid() const{
    return m_content_isValid;
}

QMap<QString, QString> OAIResourceDescriptor::getDigest() const {
    return m_digest;
}
void OAIResourceDescriptor::setDigest(const QMap<QString, QString> &digest) {
    m_digest = digest;
    m_digest_isSet = true;
}

bool OAIResourceDescriptor::is_digest_Set() const{
    return m_digest_isSet;
}

bool OAIResourceDescriptor::is_digest_Valid() const{
    return m_digest_isValid;
}

QString OAIResourceDescriptor::getDownloadLocation() const {
    return m_download_location;
}
void OAIResourceDescriptor::setDownloadLocation(const QString &download_location) {
    m_download_location = download_location;
    m_download_location_isSet = true;
}

bool OAIResourceDescriptor::is_download_location_Set() const{
    return m_download_location_isSet;
}

bool OAIResourceDescriptor::is_download_location_Valid() const{
    return m_download_location_isValid;
}

QString OAIResourceDescriptor::getMediaType() const {
    return m_media_type;
}
void OAIResourceDescriptor::setMediaType(const QString &media_type) {
    m_media_type = media_type;
    m_media_type_isSet = true;
}

bool OAIResourceDescriptor::is_media_type_Set() const{
    return m_media_type_isSet;
}

bool OAIResourceDescriptor::is_media_type_Valid() const{
    return m_media_type_isValid;
}

QString OAIResourceDescriptor::getName() const {
    return m_name;
}
void OAIResourceDescriptor::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIResourceDescriptor::is_name_Set() const{
    return m_name_isSet;
}

bool OAIResourceDescriptor::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIResourceDescriptor::getUri() const {
    return m_uri;
}
void OAIResourceDescriptor::setUri(const QString &uri) {
    m_uri = uri;
    m_uri_isSet = true;
}

bool OAIResourceDescriptor::is_uri_Set() const{
    return m_uri_isSet;
}

bool OAIResourceDescriptor::is_uri_Valid() const{
    return m_uri_isValid;
}

bool OAIResourceDescriptor::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_annotations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_digest.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_download_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_media_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uri_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIResourceDescriptor::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
