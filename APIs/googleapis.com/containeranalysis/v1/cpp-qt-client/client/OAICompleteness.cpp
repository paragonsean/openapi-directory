/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICompleteness.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICompleteness::OAICompleteness(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICompleteness::OAICompleteness() {
    this->initializeModel();
}

OAICompleteness::~OAICompleteness() {}

void OAICompleteness::initializeModel() {

    m_arguments_isSet = false;
    m_arguments_isValid = false;

    m_environment_isSet = false;
    m_environment_isValid = false;

    m_materials_isSet = false;
    m_materials_isValid = false;
}

void OAICompleteness::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICompleteness::fromJsonObject(QJsonObject json) {

    m_arguments_isValid = ::OpenAPI::fromJsonValue(m_arguments, json[QString("arguments")]);
    m_arguments_isSet = !json[QString("arguments")].isNull() && m_arguments_isValid;

    m_environment_isValid = ::OpenAPI::fromJsonValue(m_environment, json[QString("environment")]);
    m_environment_isSet = !json[QString("environment")].isNull() && m_environment_isValid;

    m_materials_isValid = ::OpenAPI::fromJsonValue(m_materials, json[QString("materials")]);
    m_materials_isSet = !json[QString("materials")].isNull() && m_materials_isValid;
}

QString OAICompleteness::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICompleteness::asJsonObject() const {
    QJsonObject obj;
    if (m_arguments_isSet) {
        obj.insert(QString("arguments"), ::OpenAPI::toJsonValue(m_arguments));
    }
    if (m_environment_isSet) {
        obj.insert(QString("environment"), ::OpenAPI::toJsonValue(m_environment));
    }
    if (m_materials_isSet) {
        obj.insert(QString("materials"), ::OpenAPI::toJsonValue(m_materials));
    }
    return obj;
}

bool OAICompleteness::isArguments() const {
    return m_arguments;
}
void OAICompleteness::setArguments(const bool &arguments) {
    m_arguments = arguments;
    m_arguments_isSet = true;
}

bool OAICompleteness::is_arguments_Set() const{
    return m_arguments_isSet;
}

bool OAICompleteness::is_arguments_Valid() const{
    return m_arguments_isValid;
}

bool OAICompleteness::isEnvironment() const {
    return m_environment;
}
void OAICompleteness::setEnvironment(const bool &environment) {
    m_environment = environment;
    m_environment_isSet = true;
}

bool OAICompleteness::is_environment_Set() const{
    return m_environment_isSet;
}

bool OAICompleteness::is_environment_Valid() const{
    return m_environment_isValid;
}

bool OAICompleteness::isMaterials() const {
    return m_materials;
}
void OAICompleteness::setMaterials(const bool &materials) {
    m_materials = materials;
    m_materials_isSet = true;
}

bool OAICompleteness::is_materials_Set() const{
    return m_materials_isSet;
}

bool OAICompleteness::is_materials_Valid() const{
    return m_materials_isValid;
}

bool OAICompleteness::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arguments_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_environment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_materials_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICompleteness::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
