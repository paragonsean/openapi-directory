/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGrafeasV1SlsaProvenanceZeroTwoSlsaInvocation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGrafeasV1SlsaProvenanceZeroTwoSlsaInvocation::OAIGrafeasV1SlsaProvenanceZeroTwoSlsaInvocation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGrafeasV1SlsaProvenanceZeroTwoSlsaInvocation::OAIGrafeasV1SlsaProvenanceZeroTwoSlsaInvocation() {
    this->initializeModel();
}

OAIGrafeasV1SlsaProvenanceZeroTwoSlsaInvocation::~OAIGrafeasV1SlsaProvenanceZeroTwoSlsaInvocation() {}

void OAIGrafeasV1SlsaProvenanceZeroTwoSlsaInvocation::initializeModel() {

    m_config_source_isSet = false;
    m_config_source_isValid = false;

    m_environment_isSet = false;
    m_environment_isValid = false;

    m_parameters_isSet = false;
    m_parameters_isValid = false;
}

void OAIGrafeasV1SlsaProvenanceZeroTwoSlsaInvocation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGrafeasV1SlsaProvenanceZeroTwoSlsaInvocation::fromJsonObject(QJsonObject json) {

    m_config_source_isValid = ::OpenAPI::fromJsonValue(m_config_source, json[QString("configSource")]);
    m_config_source_isSet = !json[QString("configSource")].isNull() && m_config_source_isValid;

    m_environment_isValid = ::OpenAPI::fromJsonValue(m_environment, json[QString("environment")]);
    m_environment_isSet = !json[QString("environment")].isNull() && m_environment_isValid;

    m_parameters_isValid = ::OpenAPI::fromJsonValue(m_parameters, json[QString("parameters")]);
    m_parameters_isSet = !json[QString("parameters")].isNull() && m_parameters_isValid;
}

QString OAIGrafeasV1SlsaProvenanceZeroTwoSlsaInvocation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGrafeasV1SlsaProvenanceZeroTwoSlsaInvocation::asJsonObject() const {
    QJsonObject obj;
    if (m_config_source.isSet()) {
        obj.insert(QString("configSource"), ::OpenAPI::toJsonValue(m_config_source));
    }
    if (m_environment.size() > 0) {
        obj.insert(QString("environment"), ::OpenAPI::toJsonValue(m_environment));
    }
    if (m_parameters.size() > 0) {
        obj.insert(QString("parameters"), ::OpenAPI::toJsonValue(m_parameters));
    }
    return obj;
}

OAIGrafeasV1SlsaProvenanceZeroTwoSlsaConfigSource OAIGrafeasV1SlsaProvenanceZeroTwoSlsaInvocation::getConfigSource() const {
    return m_config_source;
}
void OAIGrafeasV1SlsaProvenanceZeroTwoSlsaInvocation::setConfigSource(const OAIGrafeasV1SlsaProvenanceZeroTwoSlsaConfigSource &config_source) {
    m_config_source = config_source;
    m_config_source_isSet = true;
}

bool OAIGrafeasV1SlsaProvenanceZeroTwoSlsaInvocation::is_config_source_Set() const{
    return m_config_source_isSet;
}

bool OAIGrafeasV1SlsaProvenanceZeroTwoSlsaInvocation::is_config_source_Valid() const{
    return m_config_source_isValid;
}

QMap<QString, QJsonValue> OAIGrafeasV1SlsaProvenanceZeroTwoSlsaInvocation::getEnvironment() const {
    return m_environment;
}
void OAIGrafeasV1SlsaProvenanceZeroTwoSlsaInvocation::setEnvironment(const QMap<QString, QJsonValue> &environment) {
    m_environment = environment;
    m_environment_isSet = true;
}

bool OAIGrafeasV1SlsaProvenanceZeroTwoSlsaInvocation::is_environment_Set() const{
    return m_environment_isSet;
}

bool OAIGrafeasV1SlsaProvenanceZeroTwoSlsaInvocation::is_environment_Valid() const{
    return m_environment_isValid;
}

QMap<QString, QJsonValue> OAIGrafeasV1SlsaProvenanceZeroTwoSlsaInvocation::getParameters() const {
    return m_parameters;
}
void OAIGrafeasV1SlsaProvenanceZeroTwoSlsaInvocation::setParameters(const QMap<QString, QJsonValue> &parameters) {
    m_parameters = parameters;
    m_parameters_isSet = true;
}

bool OAIGrafeasV1SlsaProvenanceZeroTwoSlsaInvocation::is_parameters_Set() const{
    return m_parameters_isSet;
}

bool OAIGrafeasV1SlsaProvenanceZeroTwoSlsaInvocation::is_parameters_Valid() const{
    return m_parameters_isValid;
}

bool OAIGrafeasV1SlsaProvenanceZeroTwoSlsaInvocation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_config_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_environment.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameters.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGrafeasV1SlsaProvenanceZeroTwoSlsaInvocation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
