/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGrafeasV1FileLocation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGrafeasV1FileLocation::OAIGrafeasV1FileLocation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGrafeasV1FileLocation::OAIGrafeasV1FileLocation() {
    this->initializeModel();
}

OAIGrafeasV1FileLocation::~OAIGrafeasV1FileLocation() {}

void OAIGrafeasV1FileLocation::initializeModel() {

    m_file_path_isSet = false;
    m_file_path_isValid = false;
}

void OAIGrafeasV1FileLocation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGrafeasV1FileLocation::fromJsonObject(QJsonObject json) {

    m_file_path_isValid = ::OpenAPI::fromJsonValue(m_file_path, json[QString("filePath")]);
    m_file_path_isSet = !json[QString("filePath")].isNull() && m_file_path_isValid;
}

QString OAIGrafeasV1FileLocation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGrafeasV1FileLocation::asJsonObject() const {
    QJsonObject obj;
    if (m_file_path_isSet) {
        obj.insert(QString("filePath"), ::OpenAPI::toJsonValue(m_file_path));
    }
    return obj;
}

QString OAIGrafeasV1FileLocation::getFilePath() const {
    return m_file_path;
}
void OAIGrafeasV1FileLocation::setFilePath(const QString &file_path) {
    m_file_path = file_path;
    m_file_path_isSet = true;
}

bool OAIGrafeasV1FileLocation::is_file_path_Set() const{
    return m_file_path_isSet;
}

bool OAIGrafeasV1FileLocation::is_file_path_Valid() const{
    return m_file_path_isValid;
}

bool OAIGrafeasV1FileLocation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_file_path_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGrafeasV1FileLocation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
