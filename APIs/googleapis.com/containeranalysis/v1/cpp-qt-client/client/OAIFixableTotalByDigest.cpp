/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFixableTotalByDigest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFixableTotalByDigest::OAIFixableTotalByDigest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFixableTotalByDigest::OAIFixableTotalByDigest() {
    this->initializeModel();
}

OAIFixableTotalByDigest::~OAIFixableTotalByDigest() {}

void OAIFixableTotalByDigest::initializeModel() {

    m_fixable_count_isSet = false;
    m_fixable_count_isValid = false;

    m_resource_uri_isSet = false;
    m_resource_uri_isValid = false;

    m_severity_isSet = false;
    m_severity_isValid = false;

    m_total_count_isSet = false;
    m_total_count_isValid = false;
}

void OAIFixableTotalByDigest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFixableTotalByDigest::fromJsonObject(QJsonObject json) {

    m_fixable_count_isValid = ::OpenAPI::fromJsonValue(m_fixable_count, json[QString("fixableCount")]);
    m_fixable_count_isSet = !json[QString("fixableCount")].isNull() && m_fixable_count_isValid;

    m_resource_uri_isValid = ::OpenAPI::fromJsonValue(m_resource_uri, json[QString("resourceUri")]);
    m_resource_uri_isSet = !json[QString("resourceUri")].isNull() && m_resource_uri_isValid;

    m_severity_isValid = ::OpenAPI::fromJsonValue(m_severity, json[QString("severity")]);
    m_severity_isSet = !json[QString("severity")].isNull() && m_severity_isValid;

    m_total_count_isValid = ::OpenAPI::fromJsonValue(m_total_count, json[QString("totalCount")]);
    m_total_count_isSet = !json[QString("totalCount")].isNull() && m_total_count_isValid;
}

QString OAIFixableTotalByDigest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFixableTotalByDigest::asJsonObject() const {
    QJsonObject obj;
    if (m_fixable_count_isSet) {
        obj.insert(QString("fixableCount"), ::OpenAPI::toJsonValue(m_fixable_count));
    }
    if (m_resource_uri_isSet) {
        obj.insert(QString("resourceUri"), ::OpenAPI::toJsonValue(m_resource_uri));
    }
    if (m_severity_isSet) {
        obj.insert(QString("severity"), ::OpenAPI::toJsonValue(m_severity));
    }
    if (m_total_count_isSet) {
        obj.insert(QString("totalCount"), ::OpenAPI::toJsonValue(m_total_count));
    }
    return obj;
}

QString OAIFixableTotalByDigest::getFixableCount() const {
    return m_fixable_count;
}
void OAIFixableTotalByDigest::setFixableCount(const QString &fixable_count) {
    m_fixable_count = fixable_count;
    m_fixable_count_isSet = true;
}

bool OAIFixableTotalByDigest::is_fixable_count_Set() const{
    return m_fixable_count_isSet;
}

bool OAIFixableTotalByDigest::is_fixable_count_Valid() const{
    return m_fixable_count_isValid;
}

QString OAIFixableTotalByDigest::getResourceUri() const {
    return m_resource_uri;
}
void OAIFixableTotalByDigest::setResourceUri(const QString &resource_uri) {
    m_resource_uri = resource_uri;
    m_resource_uri_isSet = true;
}

bool OAIFixableTotalByDigest::is_resource_uri_Set() const{
    return m_resource_uri_isSet;
}

bool OAIFixableTotalByDigest::is_resource_uri_Valid() const{
    return m_resource_uri_isValid;
}

QString OAIFixableTotalByDigest::getSeverity() const {
    return m_severity;
}
void OAIFixableTotalByDigest::setSeverity(const QString &severity) {
    m_severity = severity;
    m_severity_isSet = true;
}

bool OAIFixableTotalByDigest::is_severity_Set() const{
    return m_severity_isSet;
}

bool OAIFixableTotalByDigest::is_severity_Valid() const{
    return m_severity_isValid;
}

QString OAIFixableTotalByDigest::getTotalCount() const {
    return m_total_count;
}
void OAIFixableTotalByDigest::setTotalCount(const QString &total_count) {
    m_total_count = total_count;
    m_total_count_isSet = true;
}

bool OAIFixableTotalByDigest::is_total_count_Set() const{
    return m_total_count_isSet;
}

bool OAIFixableTotalByDigest::is_total_count_Valid() const{
    return m_total_count_isValid;
}

bool OAIFixableTotalByDigest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_fixable_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_severity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFixableTotalByDigest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
