/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBuildDefinition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBuildDefinition::OAIBuildDefinition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBuildDefinition::OAIBuildDefinition() {
    this->initializeModel();
}

OAIBuildDefinition::~OAIBuildDefinition() {}

void OAIBuildDefinition::initializeModel() {

    m_build_type_isSet = false;
    m_build_type_isValid = false;

    m_external_parameters_isSet = false;
    m_external_parameters_isValid = false;

    m_internal_parameters_isSet = false;
    m_internal_parameters_isValid = false;

    m_resolved_dependencies_isSet = false;
    m_resolved_dependencies_isValid = false;
}

void OAIBuildDefinition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBuildDefinition::fromJsonObject(QJsonObject json) {

    m_build_type_isValid = ::OpenAPI::fromJsonValue(m_build_type, json[QString("buildType")]);
    m_build_type_isSet = !json[QString("buildType")].isNull() && m_build_type_isValid;

    m_external_parameters_isValid = ::OpenAPI::fromJsonValue(m_external_parameters, json[QString("externalParameters")]);
    m_external_parameters_isSet = !json[QString("externalParameters")].isNull() && m_external_parameters_isValid;

    m_internal_parameters_isValid = ::OpenAPI::fromJsonValue(m_internal_parameters, json[QString("internalParameters")]);
    m_internal_parameters_isSet = !json[QString("internalParameters")].isNull() && m_internal_parameters_isValid;

    m_resolved_dependencies_isValid = ::OpenAPI::fromJsonValue(m_resolved_dependencies, json[QString("resolvedDependencies")]);
    m_resolved_dependencies_isSet = !json[QString("resolvedDependencies")].isNull() && m_resolved_dependencies_isValid;
}

QString OAIBuildDefinition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBuildDefinition::asJsonObject() const {
    QJsonObject obj;
    if (m_build_type_isSet) {
        obj.insert(QString("buildType"), ::OpenAPI::toJsonValue(m_build_type));
    }
    if (m_external_parameters.size() > 0) {
        obj.insert(QString("externalParameters"), ::OpenAPI::toJsonValue(m_external_parameters));
    }
    if (m_internal_parameters.size() > 0) {
        obj.insert(QString("internalParameters"), ::OpenAPI::toJsonValue(m_internal_parameters));
    }
    if (m_resolved_dependencies.size() > 0) {
        obj.insert(QString("resolvedDependencies"), ::OpenAPI::toJsonValue(m_resolved_dependencies));
    }
    return obj;
}

QString OAIBuildDefinition::getBuildType() const {
    return m_build_type;
}
void OAIBuildDefinition::setBuildType(const QString &build_type) {
    m_build_type = build_type;
    m_build_type_isSet = true;
}

bool OAIBuildDefinition::is_build_type_Set() const{
    return m_build_type_isSet;
}

bool OAIBuildDefinition::is_build_type_Valid() const{
    return m_build_type_isValid;
}

QMap<QString, QJsonValue> OAIBuildDefinition::getExternalParameters() const {
    return m_external_parameters;
}
void OAIBuildDefinition::setExternalParameters(const QMap<QString, QJsonValue> &external_parameters) {
    m_external_parameters = external_parameters;
    m_external_parameters_isSet = true;
}

bool OAIBuildDefinition::is_external_parameters_Set() const{
    return m_external_parameters_isSet;
}

bool OAIBuildDefinition::is_external_parameters_Valid() const{
    return m_external_parameters_isValid;
}

QMap<QString, QJsonValue> OAIBuildDefinition::getInternalParameters() const {
    return m_internal_parameters;
}
void OAIBuildDefinition::setInternalParameters(const QMap<QString, QJsonValue> &internal_parameters) {
    m_internal_parameters = internal_parameters;
    m_internal_parameters_isSet = true;
}

bool OAIBuildDefinition::is_internal_parameters_Set() const{
    return m_internal_parameters_isSet;
}

bool OAIBuildDefinition::is_internal_parameters_Valid() const{
    return m_internal_parameters_isValid;
}

QList<OAIResourceDescriptor> OAIBuildDefinition::getResolvedDependencies() const {
    return m_resolved_dependencies;
}
void OAIBuildDefinition::setResolvedDependencies(const QList<OAIResourceDescriptor> &resolved_dependencies) {
    m_resolved_dependencies = resolved_dependencies;
    m_resolved_dependencies_isSet = true;
}

bool OAIBuildDefinition::is_resolved_dependencies_Set() const{
    return m_resolved_dependencies_isSet;
}

bool OAIBuildDefinition::is_resolved_dependencies_Valid() const{
    return m_resolved_dependencies_isValid;
}

bool OAIBuildDefinition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_build_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_parameters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_internal_parameters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_resolved_dependencies.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBuildDefinition::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
