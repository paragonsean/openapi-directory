/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInTotoProvenance.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInTotoProvenance::OAIInTotoProvenance(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInTotoProvenance::OAIInTotoProvenance() {
    this->initializeModel();
}

OAIInTotoProvenance::~OAIInTotoProvenance() {}

void OAIInTotoProvenance::initializeModel() {

    m_builder_config_isSet = false;
    m_builder_config_isValid = false;

    m_materials_isSet = false;
    m_materials_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_recipe_isSet = false;
    m_recipe_isValid = false;
}

void OAIInTotoProvenance::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInTotoProvenance::fromJsonObject(QJsonObject json) {

    m_builder_config_isValid = ::OpenAPI::fromJsonValue(m_builder_config, json[QString("builderConfig")]);
    m_builder_config_isSet = !json[QString("builderConfig")].isNull() && m_builder_config_isValid;

    m_materials_isValid = ::OpenAPI::fromJsonValue(m_materials, json[QString("materials")]);
    m_materials_isSet = !json[QString("materials")].isNull() && m_materials_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_recipe_isValid = ::OpenAPI::fromJsonValue(m_recipe, json[QString("recipe")]);
    m_recipe_isSet = !json[QString("recipe")].isNull() && m_recipe_isValid;
}

QString OAIInTotoProvenance::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInTotoProvenance::asJsonObject() const {
    QJsonObject obj;
    if (m_builder_config.isSet()) {
        obj.insert(QString("builderConfig"), ::OpenAPI::toJsonValue(m_builder_config));
    }
    if (m_materials.size() > 0) {
        obj.insert(QString("materials"), ::OpenAPI::toJsonValue(m_materials));
    }
    if (m_metadata.isSet()) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_recipe.isSet()) {
        obj.insert(QString("recipe"), ::OpenAPI::toJsonValue(m_recipe));
    }
    return obj;
}

OAIBuilderConfig OAIInTotoProvenance::getBuilderConfig() const {
    return m_builder_config;
}
void OAIInTotoProvenance::setBuilderConfig(const OAIBuilderConfig &builder_config) {
    m_builder_config = builder_config;
    m_builder_config_isSet = true;
}

bool OAIInTotoProvenance::is_builder_config_Set() const{
    return m_builder_config_isSet;
}

bool OAIInTotoProvenance::is_builder_config_Valid() const{
    return m_builder_config_isValid;
}

QList<QString> OAIInTotoProvenance::getMaterials() const {
    return m_materials;
}
void OAIInTotoProvenance::setMaterials(const QList<QString> &materials) {
    m_materials = materials;
    m_materials_isSet = true;
}

bool OAIInTotoProvenance::is_materials_Set() const{
    return m_materials_isSet;
}

bool OAIInTotoProvenance::is_materials_Valid() const{
    return m_materials_isValid;
}

OAIMetadata OAIInTotoProvenance::getMetadata() const {
    return m_metadata;
}
void OAIInTotoProvenance::setMetadata(const OAIMetadata &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIInTotoProvenance::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIInTotoProvenance::is_metadata_Valid() const{
    return m_metadata_isValid;
}

OAIRecipe OAIInTotoProvenance::getRecipe() const {
    return m_recipe;
}
void OAIInTotoProvenance::setRecipe(const OAIRecipe &recipe) {
    m_recipe = recipe;
    m_recipe_isSet = true;
}

bool OAIInTotoProvenance::is_recipe_Set() const{
    return m_recipe_isSet;
}

bool OAIInTotoProvenance::is_recipe_Valid() const{
    return m_recipe_isValid;
}

bool OAIInTotoProvenance::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_builder_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_materials.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_recipe.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInTotoProvenance::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
