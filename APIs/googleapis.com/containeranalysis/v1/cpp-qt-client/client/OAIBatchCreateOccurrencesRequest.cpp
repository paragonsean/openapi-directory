/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBatchCreateOccurrencesRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBatchCreateOccurrencesRequest::OAIBatchCreateOccurrencesRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBatchCreateOccurrencesRequest::OAIBatchCreateOccurrencesRequest() {
    this->initializeModel();
}

OAIBatchCreateOccurrencesRequest::~OAIBatchCreateOccurrencesRequest() {}

void OAIBatchCreateOccurrencesRequest::initializeModel() {

    m_occurrences_isSet = false;
    m_occurrences_isValid = false;
}

void OAIBatchCreateOccurrencesRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBatchCreateOccurrencesRequest::fromJsonObject(QJsonObject json) {

    m_occurrences_isValid = ::OpenAPI::fromJsonValue(m_occurrences, json[QString("occurrences")]);
    m_occurrences_isSet = !json[QString("occurrences")].isNull() && m_occurrences_isValid;
}

QString OAIBatchCreateOccurrencesRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBatchCreateOccurrencesRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_occurrences.size() > 0) {
        obj.insert(QString("occurrences"), ::OpenAPI::toJsonValue(m_occurrences));
    }
    return obj;
}

QList<OAIOccurrence> OAIBatchCreateOccurrencesRequest::getOccurrences() const {
    return m_occurrences;
}
void OAIBatchCreateOccurrencesRequest::setOccurrences(const QList<OAIOccurrence> &occurrences) {
    m_occurrences = occurrences;
    m_occurrences_isSet = true;
}

bool OAIBatchCreateOccurrencesRequest::is_occurrences_Set() const{
    return m_occurrences_isSet;
}

bool OAIBatchCreateOccurrencesRequest::is_occurrences_Valid() const{
    return m_occurrences_isValid;
}

bool OAIBatchCreateOccurrencesRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_occurrences.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBatchCreateOccurrencesRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
