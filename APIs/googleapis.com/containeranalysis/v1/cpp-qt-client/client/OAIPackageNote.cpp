/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPackageNote.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPackageNote::OAIPackageNote(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPackageNote::OAIPackageNote() {
    this->initializeModel();
}

OAIPackageNote::~OAIPackageNote() {}

void OAIPackageNote::initializeModel() {

    m_architecture_isSet = false;
    m_architecture_isValid = false;

    m_cpe_uri_isSet = false;
    m_cpe_uri_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_digest_isSet = false;
    m_digest_isValid = false;

    m_distribution_isSet = false;
    m_distribution_isValid = false;

    m_license_isSet = false;
    m_license_isValid = false;

    m_maintainer_isSet = false;
    m_maintainer_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_package_type_isSet = false;
    m_package_type_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIPackageNote::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPackageNote::fromJsonObject(QJsonObject json) {

    m_architecture_isValid = ::OpenAPI::fromJsonValue(m_architecture, json[QString("architecture")]);
    m_architecture_isSet = !json[QString("architecture")].isNull() && m_architecture_isValid;

    m_cpe_uri_isValid = ::OpenAPI::fromJsonValue(m_cpe_uri, json[QString("cpeUri")]);
    m_cpe_uri_isSet = !json[QString("cpeUri")].isNull() && m_cpe_uri_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_digest_isValid = ::OpenAPI::fromJsonValue(m_digest, json[QString("digest")]);
    m_digest_isSet = !json[QString("digest")].isNull() && m_digest_isValid;

    m_distribution_isValid = ::OpenAPI::fromJsonValue(m_distribution, json[QString("distribution")]);
    m_distribution_isSet = !json[QString("distribution")].isNull() && m_distribution_isValid;

    m_license_isValid = ::OpenAPI::fromJsonValue(m_license, json[QString("license")]);
    m_license_isSet = !json[QString("license")].isNull() && m_license_isValid;

    m_maintainer_isValid = ::OpenAPI::fromJsonValue(m_maintainer, json[QString("maintainer")]);
    m_maintainer_isSet = !json[QString("maintainer")].isNull() && m_maintainer_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_package_type_isValid = ::OpenAPI::fromJsonValue(m_package_type, json[QString("packageType")]);
    m_package_type_isSet = !json[QString("packageType")].isNull() && m_package_type_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIPackageNote::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPackageNote::asJsonObject() const {
    QJsonObject obj;
    if (m_architecture_isSet) {
        obj.insert(QString("architecture"), ::OpenAPI::toJsonValue(m_architecture));
    }
    if (m_cpe_uri_isSet) {
        obj.insert(QString("cpeUri"), ::OpenAPI::toJsonValue(m_cpe_uri));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_digest.size() > 0) {
        obj.insert(QString("digest"), ::OpenAPI::toJsonValue(m_digest));
    }
    if (m_distribution.size() > 0) {
        obj.insert(QString("distribution"), ::OpenAPI::toJsonValue(m_distribution));
    }
    if (m_license.isSet()) {
        obj.insert(QString("license"), ::OpenAPI::toJsonValue(m_license));
    }
    if (m_maintainer_isSet) {
        obj.insert(QString("maintainer"), ::OpenAPI::toJsonValue(m_maintainer));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_package_type_isSet) {
        obj.insert(QString("packageType"), ::OpenAPI::toJsonValue(m_package_type));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_version.isSet()) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QString OAIPackageNote::getArchitecture() const {
    return m_architecture;
}
void OAIPackageNote::setArchitecture(const QString &architecture) {
    m_architecture = architecture;
    m_architecture_isSet = true;
}

bool OAIPackageNote::is_architecture_Set() const{
    return m_architecture_isSet;
}

bool OAIPackageNote::is_architecture_Valid() const{
    return m_architecture_isValid;
}

QString OAIPackageNote::getCpeUri() const {
    return m_cpe_uri;
}
void OAIPackageNote::setCpeUri(const QString &cpe_uri) {
    m_cpe_uri = cpe_uri;
    m_cpe_uri_isSet = true;
}

bool OAIPackageNote::is_cpe_uri_Set() const{
    return m_cpe_uri_isSet;
}

bool OAIPackageNote::is_cpe_uri_Valid() const{
    return m_cpe_uri_isValid;
}

QString OAIPackageNote::getDescription() const {
    return m_description;
}
void OAIPackageNote::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIPackageNote::is_description_Set() const{
    return m_description_isSet;
}

bool OAIPackageNote::is_description_Valid() const{
    return m_description_isValid;
}

QList<OAIDigest> OAIPackageNote::getDigest() const {
    return m_digest;
}
void OAIPackageNote::setDigest(const QList<OAIDigest> &digest) {
    m_digest = digest;
    m_digest_isSet = true;
}

bool OAIPackageNote::is_digest_Set() const{
    return m_digest_isSet;
}

bool OAIPackageNote::is_digest_Valid() const{
    return m_digest_isValid;
}

QList<OAIDistribution> OAIPackageNote::getDistribution() const {
    return m_distribution;
}
void OAIPackageNote::setDistribution(const QList<OAIDistribution> &distribution) {
    m_distribution = distribution;
    m_distribution_isSet = true;
}

bool OAIPackageNote::is_distribution_Set() const{
    return m_distribution_isSet;
}

bool OAIPackageNote::is_distribution_Valid() const{
    return m_distribution_isValid;
}

OAILicense OAIPackageNote::getLicense() const {
    return m_license;
}
void OAIPackageNote::setLicense(const OAILicense &license) {
    m_license = license;
    m_license_isSet = true;
}

bool OAIPackageNote::is_license_Set() const{
    return m_license_isSet;
}

bool OAIPackageNote::is_license_Valid() const{
    return m_license_isValid;
}

QString OAIPackageNote::getMaintainer() const {
    return m_maintainer;
}
void OAIPackageNote::setMaintainer(const QString &maintainer) {
    m_maintainer = maintainer;
    m_maintainer_isSet = true;
}

bool OAIPackageNote::is_maintainer_Set() const{
    return m_maintainer_isSet;
}

bool OAIPackageNote::is_maintainer_Valid() const{
    return m_maintainer_isValid;
}

QString OAIPackageNote::getName() const {
    return m_name;
}
void OAIPackageNote::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPackageNote::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPackageNote::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIPackageNote::getPackageType() const {
    return m_package_type;
}
void OAIPackageNote::setPackageType(const QString &package_type) {
    m_package_type = package_type;
    m_package_type_isSet = true;
}

bool OAIPackageNote::is_package_type_Set() const{
    return m_package_type_isSet;
}

bool OAIPackageNote::is_package_type_Valid() const{
    return m_package_type_isValid;
}

QString OAIPackageNote::getUrl() const {
    return m_url;
}
void OAIPackageNote::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIPackageNote::is_url_Set() const{
    return m_url_isSet;
}

bool OAIPackageNote::is_url_Valid() const{
    return m_url_isValid;
}

OAIVersion OAIPackageNote::getVersion() const {
    return m_version;
}
void OAIPackageNote::setVersion(const OAIVersion &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIPackageNote::is_version_Set() const{
    return m_version_isSet;
}

bool OAIPackageNote::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIPackageNote::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_architecture_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cpe_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_digest.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_distribution.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_license.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_maintainer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_package_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPackageNote::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
