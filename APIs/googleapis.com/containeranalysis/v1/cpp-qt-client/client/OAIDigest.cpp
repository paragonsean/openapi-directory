/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDigest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDigest::OAIDigest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDigest::OAIDigest() {
    this->initializeModel();
}

OAIDigest::~OAIDigest() {}

void OAIDigest::initializeModel() {

    m_algo_isSet = false;
    m_algo_isValid = false;

    m_digest_bytes_isSet = false;
    m_digest_bytes_isValid = false;
}

void OAIDigest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDigest::fromJsonObject(QJsonObject json) {

    m_algo_isValid = ::OpenAPI::fromJsonValue(m_algo, json[QString("algo")]);
    m_algo_isSet = !json[QString("algo")].isNull() && m_algo_isValid;

    m_digest_bytes_isValid = ::OpenAPI::fromJsonValue(m_digest_bytes, json[QString("digestBytes")]);
    m_digest_bytes_isSet = !json[QString("digestBytes")].isNull() && m_digest_bytes_isValid;
}

QString OAIDigest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDigest::asJsonObject() const {
    QJsonObject obj;
    if (m_algo_isSet) {
        obj.insert(QString("algo"), ::OpenAPI::toJsonValue(m_algo));
    }
    if (m_digest_bytes_isSet) {
        obj.insert(QString("digestBytes"), ::OpenAPI::toJsonValue(m_digest_bytes));
    }
    return obj;
}

QString OAIDigest::getAlgo() const {
    return m_algo;
}
void OAIDigest::setAlgo(const QString &algo) {
    m_algo = algo;
    m_algo_isSet = true;
}

bool OAIDigest::is_algo_Set() const{
    return m_algo_isSet;
}

bool OAIDigest::is_algo_Valid() const{
    return m_algo_isValid;
}

QByteArray OAIDigest::getDigestBytes() const {
    return m_digest_bytes;
}
void OAIDigest::setDigestBytes(const QByteArray &digest_bytes) {
    m_digest_bytes = digest_bytes;
    m_digest_bytes_isSet = true;
}

bool OAIDigest::is_digest_bytes_Set() const{
    return m_digest_bytes_isSet;
}

bool OAIDigest::is_digest_bytes_Valid() const{
    return m_digest_bytes_isValid;
}

bool OAIDigest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_algo_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_digest_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDigest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
