/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICVSSv3.h
 *
 * Common Vulnerability Scoring System version 3. For details, see https://www.first.org/cvss/specification-document
 */

#ifndef OAICVSSv3_H
#define OAICVSSv3_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAICVSSv3 : public OAIObject {
public:
    OAICVSSv3();
    OAICVSSv3(QString json);
    ~OAICVSSv3() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAttackComplexity() const;
    void setAttackComplexity(const QString &attack_complexity);
    bool is_attack_complexity_Set() const;
    bool is_attack_complexity_Valid() const;

    QString getAttackVector() const;
    void setAttackVector(const QString &attack_vector);
    bool is_attack_vector_Set() const;
    bool is_attack_vector_Valid() const;

    QString getAvailabilityImpact() const;
    void setAvailabilityImpact(const QString &availability_impact);
    bool is_availability_impact_Set() const;
    bool is_availability_impact_Valid() const;

    float getBaseScore() const;
    void setBaseScore(const float &base_score);
    bool is_base_score_Set() const;
    bool is_base_score_Valid() const;

    QString getConfidentialityImpact() const;
    void setConfidentialityImpact(const QString &confidentiality_impact);
    bool is_confidentiality_impact_Set() const;
    bool is_confidentiality_impact_Valid() const;

    float getExploitabilityScore() const;
    void setExploitabilityScore(const float &exploitability_score);
    bool is_exploitability_score_Set() const;
    bool is_exploitability_score_Valid() const;

    float getImpactScore() const;
    void setImpactScore(const float &impact_score);
    bool is_impact_score_Set() const;
    bool is_impact_score_Valid() const;

    QString getIntegrityImpact() const;
    void setIntegrityImpact(const QString &integrity_impact);
    bool is_integrity_impact_Set() const;
    bool is_integrity_impact_Valid() const;

    QString getPrivilegesRequired() const;
    void setPrivilegesRequired(const QString &privileges_required);
    bool is_privileges_required_Set() const;
    bool is_privileges_required_Valid() const;

    QString getScope() const;
    void setScope(const QString &scope);
    bool is_scope_Set() const;
    bool is_scope_Valid() const;

    QString getUserInteraction() const;
    void setUserInteraction(const QString &user_interaction);
    bool is_user_interaction_Set() const;
    bool is_user_interaction_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_attack_complexity;
    bool m_attack_complexity_isSet;
    bool m_attack_complexity_isValid;

    QString m_attack_vector;
    bool m_attack_vector_isSet;
    bool m_attack_vector_isValid;

    QString m_availability_impact;
    bool m_availability_impact_isSet;
    bool m_availability_impact_isValid;

    float m_base_score;
    bool m_base_score_isSet;
    bool m_base_score_isValid;

    QString m_confidentiality_impact;
    bool m_confidentiality_impact_isSet;
    bool m_confidentiality_impact_isValid;

    float m_exploitability_score;
    bool m_exploitability_score_isSet;
    bool m_exploitability_score_isValid;

    float m_impact_score;
    bool m_impact_score_isSet;
    bool m_impact_score_isValid;

    QString m_integrity_impact;
    bool m_integrity_impact_isSet;
    bool m_integrity_impact_isValid;

    QString m_privileges_required;
    bool m_privileges_required_isSet;
    bool m_privileges_required_isValid;

    QString m_scope;
    bool m_scope_isSet;
    bool m_scope_isValid;

    QString m_user_interaction;
    bool m_user_interaction_isSet;
    bool m_user_interaction_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICVSSv3)

#endif // OAICVSSv3_H
