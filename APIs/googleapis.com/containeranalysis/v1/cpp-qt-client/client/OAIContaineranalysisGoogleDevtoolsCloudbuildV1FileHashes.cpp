/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIContaineranalysisGoogleDevtoolsCloudbuildV1FileHashes.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIContaineranalysisGoogleDevtoolsCloudbuildV1FileHashes::OAIContaineranalysisGoogleDevtoolsCloudbuildV1FileHashes(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIContaineranalysisGoogleDevtoolsCloudbuildV1FileHashes::OAIContaineranalysisGoogleDevtoolsCloudbuildV1FileHashes() {
    this->initializeModel();
}

OAIContaineranalysisGoogleDevtoolsCloudbuildV1FileHashes::~OAIContaineranalysisGoogleDevtoolsCloudbuildV1FileHashes() {}

void OAIContaineranalysisGoogleDevtoolsCloudbuildV1FileHashes::initializeModel() {

    m_file_hash_isSet = false;
    m_file_hash_isValid = false;
}

void OAIContaineranalysisGoogleDevtoolsCloudbuildV1FileHashes::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIContaineranalysisGoogleDevtoolsCloudbuildV1FileHashes::fromJsonObject(QJsonObject json) {

    m_file_hash_isValid = ::OpenAPI::fromJsonValue(m_file_hash, json[QString("fileHash")]);
    m_file_hash_isSet = !json[QString("fileHash")].isNull() && m_file_hash_isValid;
}

QString OAIContaineranalysisGoogleDevtoolsCloudbuildV1FileHashes::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIContaineranalysisGoogleDevtoolsCloudbuildV1FileHashes::asJsonObject() const {
    QJsonObject obj;
    if (m_file_hash.size() > 0) {
        obj.insert(QString("fileHash"), ::OpenAPI::toJsonValue(m_file_hash));
    }
    return obj;
}

QList<OAIContaineranalysisGoogleDevtoolsCloudbuildV1Hash> OAIContaineranalysisGoogleDevtoolsCloudbuildV1FileHashes::getFileHash() const {
    return m_file_hash;
}
void OAIContaineranalysisGoogleDevtoolsCloudbuildV1FileHashes::setFileHash(const QList<OAIContaineranalysisGoogleDevtoolsCloudbuildV1Hash> &file_hash) {
    m_file_hash = file_hash;
    m_file_hash_isSet = true;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1FileHashes::is_file_hash_Set() const{
    return m_file_hash_isSet;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1FileHashes::is_file_hash_Valid() const{
    return m_file_hash_isValid;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1FileHashes::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_file_hash.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1FileHashes::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
