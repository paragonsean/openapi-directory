/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIContaineranalysisGoogleDevtoolsCloudbuildV1Results.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIContaineranalysisGoogleDevtoolsCloudbuildV1Results::OAIContaineranalysisGoogleDevtoolsCloudbuildV1Results(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIContaineranalysisGoogleDevtoolsCloudbuildV1Results::OAIContaineranalysisGoogleDevtoolsCloudbuildV1Results() {
    this->initializeModel();
}

OAIContaineranalysisGoogleDevtoolsCloudbuildV1Results::~OAIContaineranalysisGoogleDevtoolsCloudbuildV1Results() {}

void OAIContaineranalysisGoogleDevtoolsCloudbuildV1Results::initializeModel() {

    m_artifact_manifest_isSet = false;
    m_artifact_manifest_isValid = false;

    m_artifact_timing_isSet = false;
    m_artifact_timing_isValid = false;

    m_build_step_images_isSet = false;
    m_build_step_images_isValid = false;

    m_build_step_outputs_isSet = false;
    m_build_step_outputs_isValid = false;

    m_images_isSet = false;
    m_images_isValid = false;

    m_maven_artifacts_isSet = false;
    m_maven_artifacts_isValid = false;

    m_npm_packages_isSet = false;
    m_npm_packages_isValid = false;

    m_num_artifacts_isSet = false;
    m_num_artifacts_isValid = false;

    m_python_packages_isSet = false;
    m_python_packages_isValid = false;
}

void OAIContaineranalysisGoogleDevtoolsCloudbuildV1Results::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIContaineranalysisGoogleDevtoolsCloudbuildV1Results::fromJsonObject(QJsonObject json) {

    m_artifact_manifest_isValid = ::OpenAPI::fromJsonValue(m_artifact_manifest, json[QString("artifactManifest")]);
    m_artifact_manifest_isSet = !json[QString("artifactManifest")].isNull() && m_artifact_manifest_isValid;

    m_artifact_timing_isValid = ::OpenAPI::fromJsonValue(m_artifact_timing, json[QString("artifactTiming")]);
    m_artifact_timing_isSet = !json[QString("artifactTiming")].isNull() && m_artifact_timing_isValid;

    m_build_step_images_isValid = ::OpenAPI::fromJsonValue(m_build_step_images, json[QString("buildStepImages")]);
    m_build_step_images_isSet = !json[QString("buildStepImages")].isNull() && m_build_step_images_isValid;

    m_build_step_outputs_isValid = ::OpenAPI::fromJsonValue(m_build_step_outputs, json[QString("buildStepOutputs")]);
    m_build_step_outputs_isSet = !json[QString("buildStepOutputs")].isNull() && m_build_step_outputs_isValid;

    m_images_isValid = ::OpenAPI::fromJsonValue(m_images, json[QString("images")]);
    m_images_isSet = !json[QString("images")].isNull() && m_images_isValid;

    m_maven_artifacts_isValid = ::OpenAPI::fromJsonValue(m_maven_artifacts, json[QString("mavenArtifacts")]);
    m_maven_artifacts_isSet = !json[QString("mavenArtifacts")].isNull() && m_maven_artifacts_isValid;

    m_npm_packages_isValid = ::OpenAPI::fromJsonValue(m_npm_packages, json[QString("npmPackages")]);
    m_npm_packages_isSet = !json[QString("npmPackages")].isNull() && m_npm_packages_isValid;

    m_num_artifacts_isValid = ::OpenAPI::fromJsonValue(m_num_artifacts, json[QString("numArtifacts")]);
    m_num_artifacts_isSet = !json[QString("numArtifacts")].isNull() && m_num_artifacts_isValid;

    m_python_packages_isValid = ::OpenAPI::fromJsonValue(m_python_packages, json[QString("pythonPackages")]);
    m_python_packages_isSet = !json[QString("pythonPackages")].isNull() && m_python_packages_isValid;
}

QString OAIContaineranalysisGoogleDevtoolsCloudbuildV1Results::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIContaineranalysisGoogleDevtoolsCloudbuildV1Results::asJsonObject() const {
    QJsonObject obj;
    if (m_artifact_manifest_isSet) {
        obj.insert(QString("artifactManifest"), ::OpenAPI::toJsonValue(m_artifact_manifest));
    }
    if (m_artifact_timing.isSet()) {
        obj.insert(QString("artifactTiming"), ::OpenAPI::toJsonValue(m_artifact_timing));
    }
    if (m_build_step_images.size() > 0) {
        obj.insert(QString("buildStepImages"), ::OpenAPI::toJsonValue(m_build_step_images));
    }
    if (m_build_step_outputs.size() > 0) {
        obj.insert(QString("buildStepOutputs"), ::OpenAPI::toJsonValue(m_build_step_outputs));
    }
    if (m_images.size() > 0) {
        obj.insert(QString("images"), ::OpenAPI::toJsonValue(m_images));
    }
    if (m_maven_artifacts.size() > 0) {
        obj.insert(QString("mavenArtifacts"), ::OpenAPI::toJsonValue(m_maven_artifacts));
    }
    if (m_npm_packages.size() > 0) {
        obj.insert(QString("npmPackages"), ::OpenAPI::toJsonValue(m_npm_packages));
    }
    if (m_num_artifacts_isSet) {
        obj.insert(QString("numArtifacts"), ::OpenAPI::toJsonValue(m_num_artifacts));
    }
    if (m_python_packages.size() > 0) {
        obj.insert(QString("pythonPackages"), ::OpenAPI::toJsonValue(m_python_packages));
    }
    return obj;
}

QString OAIContaineranalysisGoogleDevtoolsCloudbuildV1Results::getArtifactManifest() const {
    return m_artifact_manifest;
}
void OAIContaineranalysisGoogleDevtoolsCloudbuildV1Results::setArtifactManifest(const QString &artifact_manifest) {
    m_artifact_manifest = artifact_manifest;
    m_artifact_manifest_isSet = true;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1Results::is_artifact_manifest_Set() const{
    return m_artifact_manifest_isSet;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1Results::is_artifact_manifest_Valid() const{
    return m_artifact_manifest_isValid;
}

OAIContaineranalysisGoogleDevtoolsCloudbuildV1TimeSpan OAIContaineranalysisGoogleDevtoolsCloudbuildV1Results::getArtifactTiming() const {
    return m_artifact_timing;
}
void OAIContaineranalysisGoogleDevtoolsCloudbuildV1Results::setArtifactTiming(const OAIContaineranalysisGoogleDevtoolsCloudbuildV1TimeSpan &artifact_timing) {
    m_artifact_timing = artifact_timing;
    m_artifact_timing_isSet = true;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1Results::is_artifact_timing_Set() const{
    return m_artifact_timing_isSet;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1Results::is_artifact_timing_Valid() const{
    return m_artifact_timing_isValid;
}

QList<QString> OAIContaineranalysisGoogleDevtoolsCloudbuildV1Results::getBuildStepImages() const {
    return m_build_step_images;
}
void OAIContaineranalysisGoogleDevtoolsCloudbuildV1Results::setBuildStepImages(const QList<QString> &build_step_images) {
    m_build_step_images = build_step_images;
    m_build_step_images_isSet = true;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1Results::is_build_step_images_Set() const{
    return m_build_step_images_isSet;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1Results::is_build_step_images_Valid() const{
    return m_build_step_images_isValid;
}

QList<QByteArray> OAIContaineranalysisGoogleDevtoolsCloudbuildV1Results::getBuildStepOutputs() const {
    return m_build_step_outputs;
}
void OAIContaineranalysisGoogleDevtoolsCloudbuildV1Results::setBuildStepOutputs(const QList<QByteArray> &build_step_outputs) {
    m_build_step_outputs = build_step_outputs;
    m_build_step_outputs_isSet = true;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1Results::is_build_step_outputs_Set() const{
    return m_build_step_outputs_isSet;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1Results::is_build_step_outputs_Valid() const{
    return m_build_step_outputs_isValid;
}

QList<OAIContaineranalysisGoogleDevtoolsCloudbuildV1BuiltImage> OAIContaineranalysisGoogleDevtoolsCloudbuildV1Results::getImages() const {
    return m_images;
}
void OAIContaineranalysisGoogleDevtoolsCloudbuildV1Results::setImages(const QList<OAIContaineranalysisGoogleDevtoolsCloudbuildV1BuiltImage> &images) {
    m_images = images;
    m_images_isSet = true;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1Results::is_images_Set() const{
    return m_images_isSet;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1Results::is_images_Valid() const{
    return m_images_isValid;
}

QList<OAIContaineranalysisGoogleDevtoolsCloudbuildV1UploadedMavenArtifact> OAIContaineranalysisGoogleDevtoolsCloudbuildV1Results::getMavenArtifacts() const {
    return m_maven_artifacts;
}
void OAIContaineranalysisGoogleDevtoolsCloudbuildV1Results::setMavenArtifacts(const QList<OAIContaineranalysisGoogleDevtoolsCloudbuildV1UploadedMavenArtifact> &maven_artifacts) {
    m_maven_artifacts = maven_artifacts;
    m_maven_artifacts_isSet = true;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1Results::is_maven_artifacts_Set() const{
    return m_maven_artifacts_isSet;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1Results::is_maven_artifacts_Valid() const{
    return m_maven_artifacts_isValid;
}

QList<OAIContaineranalysisGoogleDevtoolsCloudbuildV1UploadedNpmPackage> OAIContaineranalysisGoogleDevtoolsCloudbuildV1Results::getNpmPackages() const {
    return m_npm_packages;
}
void OAIContaineranalysisGoogleDevtoolsCloudbuildV1Results::setNpmPackages(const QList<OAIContaineranalysisGoogleDevtoolsCloudbuildV1UploadedNpmPackage> &npm_packages) {
    m_npm_packages = npm_packages;
    m_npm_packages_isSet = true;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1Results::is_npm_packages_Set() const{
    return m_npm_packages_isSet;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1Results::is_npm_packages_Valid() const{
    return m_npm_packages_isValid;
}

QString OAIContaineranalysisGoogleDevtoolsCloudbuildV1Results::getNumArtifacts() const {
    return m_num_artifacts;
}
void OAIContaineranalysisGoogleDevtoolsCloudbuildV1Results::setNumArtifacts(const QString &num_artifacts) {
    m_num_artifacts = num_artifacts;
    m_num_artifacts_isSet = true;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1Results::is_num_artifacts_Set() const{
    return m_num_artifacts_isSet;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1Results::is_num_artifacts_Valid() const{
    return m_num_artifacts_isValid;
}

QList<OAIContaineranalysisGoogleDevtoolsCloudbuildV1UploadedPythonPackage> OAIContaineranalysisGoogleDevtoolsCloudbuildV1Results::getPythonPackages() const {
    return m_python_packages;
}
void OAIContaineranalysisGoogleDevtoolsCloudbuildV1Results::setPythonPackages(const QList<OAIContaineranalysisGoogleDevtoolsCloudbuildV1UploadedPythonPackage> &python_packages) {
    m_python_packages = python_packages;
    m_python_packages_isSet = true;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1Results::is_python_packages_Set() const{
    return m_python_packages_isSet;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1Results::is_python_packages_Valid() const{
    return m_python_packages_isValid;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1Results::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_artifact_manifest_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_artifact_timing.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_build_step_images.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_build_step_outputs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_images.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_maven_artifacts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_npm_packages.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_num_artifacts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_python_packages.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1Results::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
