/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICloudRepoSourceContext.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICloudRepoSourceContext::OAICloudRepoSourceContext(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICloudRepoSourceContext::OAICloudRepoSourceContext() {
    this->initializeModel();
}

OAICloudRepoSourceContext::~OAICloudRepoSourceContext() {}

void OAICloudRepoSourceContext::initializeModel() {

    m_alias_context_isSet = false;
    m_alias_context_isValid = false;

    m_repo_id_isSet = false;
    m_repo_id_isValid = false;

    m_revision_id_isSet = false;
    m_revision_id_isValid = false;
}

void OAICloudRepoSourceContext::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICloudRepoSourceContext::fromJsonObject(QJsonObject json) {

    m_alias_context_isValid = ::OpenAPI::fromJsonValue(m_alias_context, json[QString("aliasContext")]);
    m_alias_context_isSet = !json[QString("aliasContext")].isNull() && m_alias_context_isValid;

    m_repo_id_isValid = ::OpenAPI::fromJsonValue(m_repo_id, json[QString("repoId")]);
    m_repo_id_isSet = !json[QString("repoId")].isNull() && m_repo_id_isValid;

    m_revision_id_isValid = ::OpenAPI::fromJsonValue(m_revision_id, json[QString("revisionId")]);
    m_revision_id_isSet = !json[QString("revisionId")].isNull() && m_revision_id_isValid;
}

QString OAICloudRepoSourceContext::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICloudRepoSourceContext::asJsonObject() const {
    QJsonObject obj;
    if (m_alias_context.isSet()) {
        obj.insert(QString("aliasContext"), ::OpenAPI::toJsonValue(m_alias_context));
    }
    if (m_repo_id.isSet()) {
        obj.insert(QString("repoId"), ::OpenAPI::toJsonValue(m_repo_id));
    }
    if (m_revision_id_isSet) {
        obj.insert(QString("revisionId"), ::OpenAPI::toJsonValue(m_revision_id));
    }
    return obj;
}

OAIAliasContext OAICloudRepoSourceContext::getAliasContext() const {
    return m_alias_context;
}
void OAICloudRepoSourceContext::setAliasContext(const OAIAliasContext &alias_context) {
    m_alias_context = alias_context;
    m_alias_context_isSet = true;
}

bool OAICloudRepoSourceContext::is_alias_context_Set() const{
    return m_alias_context_isSet;
}

bool OAICloudRepoSourceContext::is_alias_context_Valid() const{
    return m_alias_context_isValid;
}

OAIRepoId OAICloudRepoSourceContext::getRepoId() const {
    return m_repo_id;
}
void OAICloudRepoSourceContext::setRepoId(const OAIRepoId &repo_id) {
    m_repo_id = repo_id;
    m_repo_id_isSet = true;
}

bool OAICloudRepoSourceContext::is_repo_id_Set() const{
    return m_repo_id_isSet;
}

bool OAICloudRepoSourceContext::is_repo_id_Valid() const{
    return m_repo_id_isValid;
}

QString OAICloudRepoSourceContext::getRevisionId() const {
    return m_revision_id;
}
void OAICloudRepoSourceContext::setRevisionId(const QString &revision_id) {
    m_revision_id = revision_id;
    m_revision_id_isSet = true;
}

bool OAICloudRepoSourceContext::is_revision_id_Set() const{
    return m_revision_id_isSet;
}

bool OAICloudRepoSourceContext::is_revision_id_Valid() const{
    return m_revision_id_isValid;
}

bool OAICloudRepoSourceContext::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_alias_context.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_repo_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_revision_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICloudRepoSourceContext::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
