/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISourceContext.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISourceContext::OAISourceContext(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISourceContext::OAISourceContext() {
    this->initializeModel();
}

OAISourceContext::~OAISourceContext() {}

void OAISourceContext::initializeModel() {

    m_cloud_repo_isSet = false;
    m_cloud_repo_isValid = false;

    m_gerrit_isSet = false;
    m_gerrit_isValid = false;

    m_git_isSet = false;
    m_git_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;
}

void OAISourceContext::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISourceContext::fromJsonObject(QJsonObject json) {

    m_cloud_repo_isValid = ::OpenAPI::fromJsonValue(m_cloud_repo, json[QString("cloudRepo")]);
    m_cloud_repo_isSet = !json[QString("cloudRepo")].isNull() && m_cloud_repo_isValid;

    m_gerrit_isValid = ::OpenAPI::fromJsonValue(m_gerrit, json[QString("gerrit")]);
    m_gerrit_isSet = !json[QString("gerrit")].isNull() && m_gerrit_isValid;

    m_git_isValid = ::OpenAPI::fromJsonValue(m_git, json[QString("git")]);
    m_git_isSet = !json[QString("git")].isNull() && m_git_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;
}

QString OAISourceContext::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISourceContext::asJsonObject() const {
    QJsonObject obj;
    if (m_cloud_repo.isSet()) {
        obj.insert(QString("cloudRepo"), ::OpenAPI::toJsonValue(m_cloud_repo));
    }
    if (m_gerrit.isSet()) {
        obj.insert(QString("gerrit"), ::OpenAPI::toJsonValue(m_gerrit));
    }
    if (m_git.isSet()) {
        obj.insert(QString("git"), ::OpenAPI::toJsonValue(m_git));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    return obj;
}

OAICloudRepoSourceContext OAISourceContext::getCloudRepo() const {
    return m_cloud_repo;
}
void OAISourceContext::setCloudRepo(const OAICloudRepoSourceContext &cloud_repo) {
    m_cloud_repo = cloud_repo;
    m_cloud_repo_isSet = true;
}

bool OAISourceContext::is_cloud_repo_Set() const{
    return m_cloud_repo_isSet;
}

bool OAISourceContext::is_cloud_repo_Valid() const{
    return m_cloud_repo_isValid;
}

OAIGerritSourceContext OAISourceContext::getGerrit() const {
    return m_gerrit;
}
void OAISourceContext::setGerrit(const OAIGerritSourceContext &gerrit) {
    m_gerrit = gerrit;
    m_gerrit_isSet = true;
}

bool OAISourceContext::is_gerrit_Set() const{
    return m_gerrit_isSet;
}

bool OAISourceContext::is_gerrit_Valid() const{
    return m_gerrit_isValid;
}

OAIGitSourceContext OAISourceContext::getGit() const {
    return m_git;
}
void OAISourceContext::setGit(const OAIGitSourceContext &git) {
    m_git = git;
    m_git_isSet = true;
}

bool OAISourceContext::is_git_Set() const{
    return m_git_isSet;
}

bool OAISourceContext::is_git_Valid() const{
    return m_git_isValid;
}

QMap<QString, QString> OAISourceContext::getLabels() const {
    return m_labels;
}
void OAISourceContext::setLabels(const QMap<QString, QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAISourceContext::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAISourceContext::is_labels_Valid() const{
    return m_labels_isValid;
}

bool OAISourceContext::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cloud_repo.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_gerrit.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_git.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISourceContext::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
