/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIVulnerabilityAssessmentNote.h
 *
 * A single VulnerabilityAssessmentNote represents one particular product&#39;s vulnerability assessment for one CVE.
 */

#ifndef OAIVulnerabilityAssessmentNote_H
#define OAIVulnerabilityAssessmentNote_H

#include <QJsonObject>

#include "OAIAssessment.h"
#include "OAIProduct.h"
#include "OAIPublisher.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIAssessment;
class OAIProduct;
class OAIPublisher;

class OAIVulnerabilityAssessmentNote : public OAIObject {
public:
    OAIVulnerabilityAssessmentNote();
    OAIVulnerabilityAssessmentNote(QString json);
    ~OAIVulnerabilityAssessmentNote() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIAssessment getAssessment() const;
    void setAssessment(const OAIAssessment &assessment);
    bool is_assessment_Set() const;
    bool is_assessment_Valid() const;

    QString getLanguageCode() const;
    void setLanguageCode(const QString &language_code);
    bool is_language_code_Set() const;
    bool is_language_code_Valid() const;

    QString getLongDescription() const;
    void setLongDescription(const QString &long_description);
    bool is_long_description_Set() const;
    bool is_long_description_Valid() const;

    OAIProduct getProduct() const;
    void setProduct(const OAIProduct &product);
    bool is_product_Set() const;
    bool is_product_Valid() const;

    OAIPublisher getPublisher() const;
    void setPublisher(const OAIPublisher &publisher);
    bool is_publisher_Set() const;
    bool is_publisher_Valid() const;

    QString getShortDescription() const;
    void setShortDescription(const QString &short_description);
    bool is_short_description_Set() const;
    bool is_short_description_Valid() const;

    QString getTitle() const;
    void setTitle(const QString &title);
    bool is_title_Set() const;
    bool is_title_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIAssessment m_assessment;
    bool m_assessment_isSet;
    bool m_assessment_isValid;

    QString m_language_code;
    bool m_language_code_isSet;
    bool m_language_code_isValid;

    QString m_long_description;
    bool m_long_description_isSet;
    bool m_long_description_isValid;

    OAIProduct m_product;
    bool m_product_isSet;
    bool m_product_isValid;

    OAIPublisher m_publisher;
    bool m_publisher_isSet;
    bool m_publisher_isValid;

    QString m_short_description;
    bool m_short_description_isSet;
    bool m_short_description_isValid;

    QString m_title;
    bool m_title_isSet;
    bool m_title_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIVulnerabilityAssessmentNote)

#endif // OAIVulnerabilityAssessmentNote_H
