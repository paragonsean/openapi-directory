/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOccurrence.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOccurrence::OAIOccurrence(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOccurrence::OAIOccurrence() {
    this->initializeModel();
}

OAIOccurrence::~OAIOccurrence() {}

void OAIOccurrence::initializeModel() {

    m_attestation_isSet = false;
    m_attestation_isValid = false;

    m_build_isSet = false;
    m_build_isValid = false;

    m_compliance_isSet = false;
    m_compliance_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_deployment_isSet = false;
    m_deployment_isValid = false;

    m_discovery_isSet = false;
    m_discovery_isValid = false;

    m_dsse_attestation_isSet = false;
    m_dsse_attestation_isValid = false;

    m_envelope_isSet = false;
    m_envelope_isValid = false;

    m_image_isSet = false;
    m_image_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_note_name_isSet = false;
    m_note_name_isValid = false;

    m_package_isSet = false;
    m_package_isValid = false;

    m_remediation_isSet = false;
    m_remediation_isValid = false;

    m_resource_uri_isSet = false;
    m_resource_uri_isValid = false;

    m_sbom_reference_isSet = false;
    m_sbom_reference_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;

    m_upgrade_isSet = false;
    m_upgrade_isValid = false;

    m_vulnerability_isSet = false;
    m_vulnerability_isValid = false;
}

void OAIOccurrence::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOccurrence::fromJsonObject(QJsonObject json) {

    m_attestation_isValid = ::OpenAPI::fromJsonValue(m_attestation, json[QString("attestation")]);
    m_attestation_isSet = !json[QString("attestation")].isNull() && m_attestation_isValid;

    m_build_isValid = ::OpenAPI::fromJsonValue(m_build, json[QString("build")]);
    m_build_isSet = !json[QString("build")].isNull() && m_build_isValid;

    m_compliance_isValid = ::OpenAPI::fromJsonValue(m_compliance, json[QString("compliance")]);
    m_compliance_isSet = !json[QString("compliance")].isNull() && m_compliance_isValid;

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_deployment_isValid = ::OpenAPI::fromJsonValue(m_deployment, json[QString("deployment")]);
    m_deployment_isSet = !json[QString("deployment")].isNull() && m_deployment_isValid;

    m_discovery_isValid = ::OpenAPI::fromJsonValue(m_discovery, json[QString("discovery")]);
    m_discovery_isSet = !json[QString("discovery")].isNull() && m_discovery_isValid;

    m_dsse_attestation_isValid = ::OpenAPI::fromJsonValue(m_dsse_attestation, json[QString("dsseAttestation")]);
    m_dsse_attestation_isSet = !json[QString("dsseAttestation")].isNull() && m_dsse_attestation_isValid;

    m_envelope_isValid = ::OpenAPI::fromJsonValue(m_envelope, json[QString("envelope")]);
    m_envelope_isSet = !json[QString("envelope")].isNull() && m_envelope_isValid;

    m_image_isValid = ::OpenAPI::fromJsonValue(m_image, json[QString("image")]);
    m_image_isSet = !json[QString("image")].isNull() && m_image_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_note_name_isValid = ::OpenAPI::fromJsonValue(m_note_name, json[QString("noteName")]);
    m_note_name_isSet = !json[QString("noteName")].isNull() && m_note_name_isValid;

    m_package_isValid = ::OpenAPI::fromJsonValue(m_package, json[QString("package")]);
    m_package_isSet = !json[QString("package")].isNull() && m_package_isValid;

    m_remediation_isValid = ::OpenAPI::fromJsonValue(m_remediation, json[QString("remediation")]);
    m_remediation_isSet = !json[QString("remediation")].isNull() && m_remediation_isValid;

    m_resource_uri_isValid = ::OpenAPI::fromJsonValue(m_resource_uri, json[QString("resourceUri")]);
    m_resource_uri_isSet = !json[QString("resourceUri")].isNull() && m_resource_uri_isValid;

    m_sbom_reference_isValid = ::OpenAPI::fromJsonValue(m_sbom_reference, json[QString("sbomReference")]);
    m_sbom_reference_isSet = !json[QString("sbomReference")].isNull() && m_sbom_reference_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;

    m_upgrade_isValid = ::OpenAPI::fromJsonValue(m_upgrade, json[QString("upgrade")]);
    m_upgrade_isSet = !json[QString("upgrade")].isNull() && m_upgrade_isValid;

    m_vulnerability_isValid = ::OpenAPI::fromJsonValue(m_vulnerability, json[QString("vulnerability")]);
    m_vulnerability_isSet = !json[QString("vulnerability")].isNull() && m_vulnerability_isValid;
}

QString OAIOccurrence::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOccurrence::asJsonObject() const {
    QJsonObject obj;
    if (m_attestation.isSet()) {
        obj.insert(QString("attestation"), ::OpenAPI::toJsonValue(m_attestation));
    }
    if (m_build.isSet()) {
        obj.insert(QString("build"), ::OpenAPI::toJsonValue(m_build));
    }
    if (m_compliance.isSet()) {
        obj.insert(QString("compliance"), ::OpenAPI::toJsonValue(m_compliance));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_deployment.isSet()) {
        obj.insert(QString("deployment"), ::OpenAPI::toJsonValue(m_deployment));
    }
    if (m_discovery.isSet()) {
        obj.insert(QString("discovery"), ::OpenAPI::toJsonValue(m_discovery));
    }
    if (m_dsse_attestation.isSet()) {
        obj.insert(QString("dsseAttestation"), ::OpenAPI::toJsonValue(m_dsse_attestation));
    }
    if (m_envelope.isSet()) {
        obj.insert(QString("envelope"), ::OpenAPI::toJsonValue(m_envelope));
    }
    if (m_image.isSet()) {
        obj.insert(QString("image"), ::OpenAPI::toJsonValue(m_image));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_note_name_isSet) {
        obj.insert(QString("noteName"), ::OpenAPI::toJsonValue(m_note_name));
    }
    if (m_package.isSet()) {
        obj.insert(QString("package"), ::OpenAPI::toJsonValue(m_package));
    }
    if (m_remediation_isSet) {
        obj.insert(QString("remediation"), ::OpenAPI::toJsonValue(m_remediation));
    }
    if (m_resource_uri_isSet) {
        obj.insert(QString("resourceUri"), ::OpenAPI::toJsonValue(m_resource_uri));
    }
    if (m_sbom_reference.isSet()) {
        obj.insert(QString("sbomReference"), ::OpenAPI::toJsonValue(m_sbom_reference));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    if (m_upgrade.isSet()) {
        obj.insert(QString("upgrade"), ::OpenAPI::toJsonValue(m_upgrade));
    }
    if (m_vulnerability.isSet()) {
        obj.insert(QString("vulnerability"), ::OpenAPI::toJsonValue(m_vulnerability));
    }
    return obj;
}

OAIAttestationOccurrence OAIOccurrence::getAttestation() const {
    return m_attestation;
}
void OAIOccurrence::setAttestation(const OAIAttestationOccurrence &attestation) {
    m_attestation = attestation;
    m_attestation_isSet = true;
}

bool OAIOccurrence::is_attestation_Set() const{
    return m_attestation_isSet;
}

bool OAIOccurrence::is_attestation_Valid() const{
    return m_attestation_isValid;
}

OAIBuildOccurrence OAIOccurrence::getBuild() const {
    return m_build;
}
void OAIOccurrence::setBuild(const OAIBuildOccurrence &build) {
    m_build = build;
    m_build_isSet = true;
}

bool OAIOccurrence::is_build_Set() const{
    return m_build_isSet;
}

bool OAIOccurrence::is_build_Valid() const{
    return m_build_isValid;
}

OAIComplianceOccurrence OAIOccurrence::getCompliance() const {
    return m_compliance;
}
void OAIOccurrence::setCompliance(const OAIComplianceOccurrence &compliance) {
    m_compliance = compliance;
    m_compliance_isSet = true;
}

bool OAIOccurrence::is_compliance_Set() const{
    return m_compliance_isSet;
}

bool OAIOccurrence::is_compliance_Valid() const{
    return m_compliance_isValid;
}

QString OAIOccurrence::getCreateTime() const {
    return m_create_time;
}
void OAIOccurrence::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIOccurrence::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIOccurrence::is_create_time_Valid() const{
    return m_create_time_isValid;
}

OAIDeploymentOccurrence OAIOccurrence::getDeployment() const {
    return m_deployment;
}
void OAIOccurrence::setDeployment(const OAIDeploymentOccurrence &deployment) {
    m_deployment = deployment;
    m_deployment_isSet = true;
}

bool OAIOccurrence::is_deployment_Set() const{
    return m_deployment_isSet;
}

bool OAIOccurrence::is_deployment_Valid() const{
    return m_deployment_isValid;
}

OAIDiscoveryOccurrence OAIOccurrence::getDiscovery() const {
    return m_discovery;
}
void OAIOccurrence::setDiscovery(const OAIDiscoveryOccurrence &discovery) {
    m_discovery = discovery;
    m_discovery_isSet = true;
}

bool OAIOccurrence::is_discovery_Set() const{
    return m_discovery_isSet;
}

bool OAIOccurrence::is_discovery_Valid() const{
    return m_discovery_isValid;
}

OAIDSSEAttestationOccurrence OAIOccurrence::getDsseAttestation() const {
    return m_dsse_attestation;
}
void OAIOccurrence::setDsseAttestation(const OAIDSSEAttestationOccurrence &dsse_attestation) {
    m_dsse_attestation = dsse_attestation;
    m_dsse_attestation_isSet = true;
}

bool OAIOccurrence::is_dsse_attestation_Set() const{
    return m_dsse_attestation_isSet;
}

bool OAIOccurrence::is_dsse_attestation_Valid() const{
    return m_dsse_attestation_isValid;
}

OAIEnvelope OAIOccurrence::getEnvelope() const {
    return m_envelope;
}
void OAIOccurrence::setEnvelope(const OAIEnvelope &envelope) {
    m_envelope = envelope;
    m_envelope_isSet = true;
}

bool OAIOccurrence::is_envelope_Set() const{
    return m_envelope_isSet;
}

bool OAIOccurrence::is_envelope_Valid() const{
    return m_envelope_isValid;
}

OAIImageOccurrence OAIOccurrence::getImage() const {
    return m_image;
}
void OAIOccurrence::setImage(const OAIImageOccurrence &image) {
    m_image = image;
    m_image_isSet = true;
}

bool OAIOccurrence::is_image_Set() const{
    return m_image_isSet;
}

bool OAIOccurrence::is_image_Valid() const{
    return m_image_isValid;
}

QString OAIOccurrence::getKind() const {
    return m_kind;
}
void OAIOccurrence::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIOccurrence::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIOccurrence::is_kind_Valid() const{
    return m_kind_isValid;
}

QString OAIOccurrence::getName() const {
    return m_name;
}
void OAIOccurrence::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIOccurrence::is_name_Set() const{
    return m_name_isSet;
}

bool OAIOccurrence::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIOccurrence::getNoteName() const {
    return m_note_name;
}
void OAIOccurrence::setNoteName(const QString &note_name) {
    m_note_name = note_name;
    m_note_name_isSet = true;
}

bool OAIOccurrence::is_note_name_Set() const{
    return m_note_name_isSet;
}

bool OAIOccurrence::is_note_name_Valid() const{
    return m_note_name_isValid;
}

OAIPackageOccurrence OAIOccurrence::getPackage() const {
    return m_package;
}
void OAIOccurrence::setPackage(const OAIPackageOccurrence &package) {
    m_package = package;
    m_package_isSet = true;
}

bool OAIOccurrence::is_package_Set() const{
    return m_package_isSet;
}

bool OAIOccurrence::is_package_Valid() const{
    return m_package_isValid;
}

QString OAIOccurrence::getRemediation() const {
    return m_remediation;
}
void OAIOccurrence::setRemediation(const QString &remediation) {
    m_remediation = remediation;
    m_remediation_isSet = true;
}

bool OAIOccurrence::is_remediation_Set() const{
    return m_remediation_isSet;
}

bool OAIOccurrence::is_remediation_Valid() const{
    return m_remediation_isValid;
}

QString OAIOccurrence::getResourceUri() const {
    return m_resource_uri;
}
void OAIOccurrence::setResourceUri(const QString &resource_uri) {
    m_resource_uri = resource_uri;
    m_resource_uri_isSet = true;
}

bool OAIOccurrence::is_resource_uri_Set() const{
    return m_resource_uri_isSet;
}

bool OAIOccurrence::is_resource_uri_Valid() const{
    return m_resource_uri_isValid;
}

OAISBOMReferenceOccurrence OAIOccurrence::getSbomReference() const {
    return m_sbom_reference;
}
void OAIOccurrence::setSbomReference(const OAISBOMReferenceOccurrence &sbom_reference) {
    m_sbom_reference = sbom_reference;
    m_sbom_reference_isSet = true;
}

bool OAIOccurrence::is_sbom_reference_Set() const{
    return m_sbom_reference_isSet;
}

bool OAIOccurrence::is_sbom_reference_Valid() const{
    return m_sbom_reference_isValid;
}

QString OAIOccurrence::getUpdateTime() const {
    return m_update_time;
}
void OAIOccurrence::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAIOccurrence::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAIOccurrence::is_update_time_Valid() const{
    return m_update_time_isValid;
}

OAIUpgradeOccurrence OAIOccurrence::getUpgrade() const {
    return m_upgrade;
}
void OAIOccurrence::setUpgrade(const OAIUpgradeOccurrence &upgrade) {
    m_upgrade = upgrade;
    m_upgrade_isSet = true;
}

bool OAIOccurrence::is_upgrade_Set() const{
    return m_upgrade_isSet;
}

bool OAIOccurrence::is_upgrade_Valid() const{
    return m_upgrade_isValid;
}

OAIVulnerabilityOccurrence OAIOccurrence::getVulnerability() const {
    return m_vulnerability;
}
void OAIOccurrence::setVulnerability(const OAIVulnerabilityOccurrence &vulnerability) {
    m_vulnerability = vulnerability;
    m_vulnerability_isSet = true;
}

bool OAIOccurrence::is_vulnerability_Set() const{
    return m_vulnerability_isSet;
}

bool OAIOccurrence::is_vulnerability_Valid() const{
    return m_vulnerability_isValid;
}

bool OAIOccurrence::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attestation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_build.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_compliance.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deployment.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_discovery.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dsse_attestation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_envelope.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_image.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_note_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_package.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_remediation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sbom_reference.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_upgrade.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vulnerability.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOccurrence::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
