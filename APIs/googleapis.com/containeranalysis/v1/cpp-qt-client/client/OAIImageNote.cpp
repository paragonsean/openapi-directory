/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImageNote.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImageNote::OAIImageNote(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImageNote::OAIImageNote() {
    this->initializeModel();
}

OAIImageNote::~OAIImageNote() {}

void OAIImageNote::initializeModel() {

    m_fingerprint_isSet = false;
    m_fingerprint_isValid = false;

    m_resource_url_isSet = false;
    m_resource_url_isValid = false;
}

void OAIImageNote::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImageNote::fromJsonObject(QJsonObject json) {

    m_fingerprint_isValid = ::OpenAPI::fromJsonValue(m_fingerprint, json[QString("fingerprint")]);
    m_fingerprint_isSet = !json[QString("fingerprint")].isNull() && m_fingerprint_isValid;

    m_resource_url_isValid = ::OpenAPI::fromJsonValue(m_resource_url, json[QString("resourceUrl")]);
    m_resource_url_isSet = !json[QString("resourceUrl")].isNull() && m_resource_url_isValid;
}

QString OAIImageNote::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImageNote::asJsonObject() const {
    QJsonObject obj;
    if (m_fingerprint.isSet()) {
        obj.insert(QString("fingerprint"), ::OpenAPI::toJsonValue(m_fingerprint));
    }
    if (m_resource_url_isSet) {
        obj.insert(QString("resourceUrl"), ::OpenAPI::toJsonValue(m_resource_url));
    }
    return obj;
}

OAIFingerprint OAIImageNote::getFingerprint() const {
    return m_fingerprint;
}
void OAIImageNote::setFingerprint(const OAIFingerprint &fingerprint) {
    m_fingerprint = fingerprint;
    m_fingerprint_isSet = true;
}

bool OAIImageNote::is_fingerprint_Set() const{
    return m_fingerprint_isSet;
}

bool OAIImageNote::is_fingerprint_Valid() const{
    return m_fingerprint_isValid;
}

QString OAIImageNote::getResourceUrl() const {
    return m_resource_url;
}
void OAIImageNote::setResourceUrl(const QString &resource_url) {
    m_resource_url = resource_url;
    m_resource_url_isSet = true;
}

bool OAIImageNote::is_resource_url_Set() const{
    return m_resource_url_isSet;
}

bool OAIImageNote::is_resource_url_Valid() const{
    return m_resource_url_isValid;
}

bool OAIImageNote::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_fingerprint.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImageNote::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
