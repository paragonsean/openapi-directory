/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIContaineranalysisGoogleDevtoolsCloudbuildV1GitSource.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIContaineranalysisGoogleDevtoolsCloudbuildV1GitSource::OAIContaineranalysisGoogleDevtoolsCloudbuildV1GitSource(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIContaineranalysisGoogleDevtoolsCloudbuildV1GitSource::OAIContaineranalysisGoogleDevtoolsCloudbuildV1GitSource() {
    this->initializeModel();
}

OAIContaineranalysisGoogleDevtoolsCloudbuildV1GitSource::~OAIContaineranalysisGoogleDevtoolsCloudbuildV1GitSource() {}

void OAIContaineranalysisGoogleDevtoolsCloudbuildV1GitSource::initializeModel() {

    m_dir_isSet = false;
    m_dir_isValid = false;

    m_revision_isSet = false;
    m_revision_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIContaineranalysisGoogleDevtoolsCloudbuildV1GitSource::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIContaineranalysisGoogleDevtoolsCloudbuildV1GitSource::fromJsonObject(QJsonObject json) {

    m_dir_isValid = ::OpenAPI::fromJsonValue(m_dir, json[QString("dir")]);
    m_dir_isSet = !json[QString("dir")].isNull() && m_dir_isValid;

    m_revision_isValid = ::OpenAPI::fromJsonValue(m_revision, json[QString("revision")]);
    m_revision_isSet = !json[QString("revision")].isNull() && m_revision_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIContaineranalysisGoogleDevtoolsCloudbuildV1GitSource::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIContaineranalysisGoogleDevtoolsCloudbuildV1GitSource::asJsonObject() const {
    QJsonObject obj;
    if (m_dir_isSet) {
        obj.insert(QString("dir"), ::OpenAPI::toJsonValue(m_dir));
    }
    if (m_revision_isSet) {
        obj.insert(QString("revision"), ::OpenAPI::toJsonValue(m_revision));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAIContaineranalysisGoogleDevtoolsCloudbuildV1GitSource::getDir() const {
    return m_dir;
}
void OAIContaineranalysisGoogleDevtoolsCloudbuildV1GitSource::setDir(const QString &dir) {
    m_dir = dir;
    m_dir_isSet = true;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1GitSource::is_dir_Set() const{
    return m_dir_isSet;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1GitSource::is_dir_Valid() const{
    return m_dir_isValid;
}

QString OAIContaineranalysisGoogleDevtoolsCloudbuildV1GitSource::getRevision() const {
    return m_revision;
}
void OAIContaineranalysisGoogleDevtoolsCloudbuildV1GitSource::setRevision(const QString &revision) {
    m_revision = revision;
    m_revision_isSet = true;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1GitSource::is_revision_Set() const{
    return m_revision_isSet;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1GitSource::is_revision_Valid() const{
    return m_revision_isValid;
}

QString OAIContaineranalysisGoogleDevtoolsCloudbuildV1GitSource::getUrl() const {
    return m_url;
}
void OAIContaineranalysisGoogleDevtoolsCloudbuildV1GitSource::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1GitSource::is_url_Set() const{
    return m_url_isSet;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1GitSource::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1GitSource::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dir_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_revision_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1GitSource::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
