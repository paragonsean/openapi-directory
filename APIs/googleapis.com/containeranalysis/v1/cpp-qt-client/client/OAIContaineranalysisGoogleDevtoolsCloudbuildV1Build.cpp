/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIContaineranalysisGoogleDevtoolsCloudbuildV1Build.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIContaineranalysisGoogleDevtoolsCloudbuildV1Build::OAIContaineranalysisGoogleDevtoolsCloudbuildV1Build(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIContaineranalysisGoogleDevtoolsCloudbuildV1Build::OAIContaineranalysisGoogleDevtoolsCloudbuildV1Build() {
    this->initializeModel();
}

OAIContaineranalysisGoogleDevtoolsCloudbuildV1Build::~OAIContaineranalysisGoogleDevtoolsCloudbuildV1Build() {}

void OAIContaineranalysisGoogleDevtoolsCloudbuildV1Build::initializeModel() {

    m_approval_isSet = false;
    m_approval_isValid = false;

    m_artifacts_isSet = false;
    m_artifacts_isValid = false;

    m_available_secrets_isSet = false;
    m_available_secrets_isValid = false;

    m_build_trigger_id_isSet = false;
    m_build_trigger_id_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_failure_info_isSet = false;
    m_failure_info_isValid = false;

    m_finish_time_isSet = false;
    m_finish_time_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_images_isSet = false;
    m_images_isValid = false;

    m_log_url_isSet = false;
    m_log_url_isValid = false;

    m_logs_bucket_isSet = false;
    m_logs_bucket_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_options_isSet = false;
    m_options_isValid = false;

    m_project_id_isSet = false;
    m_project_id_isValid = false;

    m_queue_ttl_isSet = false;
    m_queue_ttl_isValid = false;

    m_results_isSet = false;
    m_results_isValid = false;

    m_secrets_isSet = false;
    m_secrets_isValid = false;

    m_service_account_isSet = false;
    m_service_account_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;

    m_source_provenance_isSet = false;
    m_source_provenance_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_status_detail_isSet = false;
    m_status_detail_isValid = false;

    m_steps_isSet = false;
    m_steps_isValid = false;

    m_substitutions_isSet = false;
    m_substitutions_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_timeout_isSet = false;
    m_timeout_isValid = false;

    m_timing_isSet = false;
    m_timing_isValid = false;

    m_warnings_isSet = false;
    m_warnings_isValid = false;
}

void OAIContaineranalysisGoogleDevtoolsCloudbuildV1Build::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIContaineranalysisGoogleDevtoolsCloudbuildV1Build::fromJsonObject(QJsonObject json) {

    m_approval_isValid = ::OpenAPI::fromJsonValue(m_approval, json[QString("approval")]);
    m_approval_isSet = !json[QString("approval")].isNull() && m_approval_isValid;

    m_artifacts_isValid = ::OpenAPI::fromJsonValue(m_artifacts, json[QString("artifacts")]);
    m_artifacts_isSet = !json[QString("artifacts")].isNull() && m_artifacts_isValid;

    m_available_secrets_isValid = ::OpenAPI::fromJsonValue(m_available_secrets, json[QString("availableSecrets")]);
    m_available_secrets_isSet = !json[QString("availableSecrets")].isNull() && m_available_secrets_isValid;

    m_build_trigger_id_isValid = ::OpenAPI::fromJsonValue(m_build_trigger_id, json[QString("buildTriggerId")]);
    m_build_trigger_id_isSet = !json[QString("buildTriggerId")].isNull() && m_build_trigger_id_isValid;

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_failure_info_isValid = ::OpenAPI::fromJsonValue(m_failure_info, json[QString("failureInfo")]);
    m_failure_info_isSet = !json[QString("failureInfo")].isNull() && m_failure_info_isValid;

    m_finish_time_isValid = ::OpenAPI::fromJsonValue(m_finish_time, json[QString("finishTime")]);
    m_finish_time_isSet = !json[QString("finishTime")].isNull() && m_finish_time_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_images_isValid = ::OpenAPI::fromJsonValue(m_images, json[QString("images")]);
    m_images_isSet = !json[QString("images")].isNull() && m_images_isValid;

    m_log_url_isValid = ::OpenAPI::fromJsonValue(m_log_url, json[QString("logUrl")]);
    m_log_url_isSet = !json[QString("logUrl")].isNull() && m_log_url_isValid;

    m_logs_bucket_isValid = ::OpenAPI::fromJsonValue(m_logs_bucket, json[QString("logsBucket")]);
    m_logs_bucket_isSet = !json[QString("logsBucket")].isNull() && m_logs_bucket_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_options_isValid = ::OpenAPI::fromJsonValue(m_options, json[QString("options")]);
    m_options_isSet = !json[QString("options")].isNull() && m_options_isValid;

    m_project_id_isValid = ::OpenAPI::fromJsonValue(m_project_id, json[QString("projectId")]);
    m_project_id_isSet = !json[QString("projectId")].isNull() && m_project_id_isValid;

    m_queue_ttl_isValid = ::OpenAPI::fromJsonValue(m_queue_ttl, json[QString("queueTtl")]);
    m_queue_ttl_isSet = !json[QString("queueTtl")].isNull() && m_queue_ttl_isValid;

    m_results_isValid = ::OpenAPI::fromJsonValue(m_results, json[QString("results")]);
    m_results_isSet = !json[QString("results")].isNull() && m_results_isValid;

    m_secrets_isValid = ::OpenAPI::fromJsonValue(m_secrets, json[QString("secrets")]);
    m_secrets_isSet = !json[QString("secrets")].isNull() && m_secrets_isValid;

    m_service_account_isValid = ::OpenAPI::fromJsonValue(m_service_account, json[QString("serviceAccount")]);
    m_service_account_isSet = !json[QString("serviceAccount")].isNull() && m_service_account_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;

    m_source_provenance_isValid = ::OpenAPI::fromJsonValue(m_source_provenance, json[QString("sourceProvenance")]);
    m_source_provenance_isSet = !json[QString("sourceProvenance")].isNull() && m_source_provenance_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_status_detail_isValid = ::OpenAPI::fromJsonValue(m_status_detail, json[QString("statusDetail")]);
    m_status_detail_isSet = !json[QString("statusDetail")].isNull() && m_status_detail_isValid;

    m_steps_isValid = ::OpenAPI::fromJsonValue(m_steps, json[QString("steps")]);
    m_steps_isSet = !json[QString("steps")].isNull() && m_steps_isValid;

    m_substitutions_isValid = ::OpenAPI::fromJsonValue(m_substitutions, json[QString("substitutions")]);
    m_substitutions_isSet = !json[QString("substitutions")].isNull() && m_substitutions_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_timeout_isValid = ::OpenAPI::fromJsonValue(m_timeout, json[QString("timeout")]);
    m_timeout_isSet = !json[QString("timeout")].isNull() && m_timeout_isValid;

    m_timing_isValid = ::OpenAPI::fromJsonValue(m_timing, json[QString("timing")]);
    m_timing_isSet = !json[QString("timing")].isNull() && m_timing_isValid;

    m_warnings_isValid = ::OpenAPI::fromJsonValue(m_warnings, json[QString("warnings")]);
    m_warnings_isSet = !json[QString("warnings")].isNull() && m_warnings_isValid;
}

QString OAIContaineranalysisGoogleDevtoolsCloudbuildV1Build::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIContaineranalysisGoogleDevtoolsCloudbuildV1Build::asJsonObject() const {
    QJsonObject obj;
    if (m_approval.isSet()) {
        obj.insert(QString("approval"), ::OpenAPI::toJsonValue(m_approval));
    }
    if (m_artifacts.isSet()) {
        obj.insert(QString("artifacts"), ::OpenAPI::toJsonValue(m_artifacts));
    }
    if (m_available_secrets.isSet()) {
        obj.insert(QString("availableSecrets"), ::OpenAPI::toJsonValue(m_available_secrets));
    }
    if (m_build_trigger_id_isSet) {
        obj.insert(QString("buildTriggerId"), ::OpenAPI::toJsonValue(m_build_trigger_id));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_failure_info.isSet()) {
        obj.insert(QString("failureInfo"), ::OpenAPI::toJsonValue(m_failure_info));
    }
    if (m_finish_time_isSet) {
        obj.insert(QString("finishTime"), ::OpenAPI::toJsonValue(m_finish_time));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_images.size() > 0) {
        obj.insert(QString("images"), ::OpenAPI::toJsonValue(m_images));
    }
    if (m_log_url_isSet) {
        obj.insert(QString("logUrl"), ::OpenAPI::toJsonValue(m_log_url));
    }
    if (m_logs_bucket_isSet) {
        obj.insert(QString("logsBucket"), ::OpenAPI::toJsonValue(m_logs_bucket));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_options.isSet()) {
        obj.insert(QString("options"), ::OpenAPI::toJsonValue(m_options));
    }
    if (m_project_id_isSet) {
        obj.insert(QString("projectId"), ::OpenAPI::toJsonValue(m_project_id));
    }
    if (m_queue_ttl_isSet) {
        obj.insert(QString("queueTtl"), ::OpenAPI::toJsonValue(m_queue_ttl));
    }
    if (m_results.isSet()) {
        obj.insert(QString("results"), ::OpenAPI::toJsonValue(m_results));
    }
    if (m_secrets.size() > 0) {
        obj.insert(QString("secrets"), ::OpenAPI::toJsonValue(m_secrets));
    }
    if (m_service_account_isSet) {
        obj.insert(QString("serviceAccount"), ::OpenAPI::toJsonValue(m_service_account));
    }
    if (m_source.isSet()) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_source_provenance.isSet()) {
        obj.insert(QString("sourceProvenance"), ::OpenAPI::toJsonValue(m_source_provenance));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_status_detail_isSet) {
        obj.insert(QString("statusDetail"), ::OpenAPI::toJsonValue(m_status_detail));
    }
    if (m_steps.size() > 0) {
        obj.insert(QString("steps"), ::OpenAPI::toJsonValue(m_steps));
    }
    if (m_substitutions.size() > 0) {
        obj.insert(QString("substitutions"), ::OpenAPI::toJsonValue(m_substitutions));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_timeout_isSet) {
        obj.insert(QString("timeout"), ::OpenAPI::toJsonValue(m_timeout));
    }
    if (m_timing.size() > 0) {
        obj.insert(QString("timing"), ::OpenAPI::toJsonValue(m_timing));
    }
    if (m_warnings.size() > 0) {
        obj.insert(QString("warnings"), ::OpenAPI::toJsonValue(m_warnings));
    }
    return obj;
}

OAIContaineranalysisGoogleDevtoolsCloudbuildV1BuildApproval OAIContaineranalysisGoogleDevtoolsCloudbuildV1Build::getApproval() const {
    return m_approval;
}
void OAIContaineranalysisGoogleDevtoolsCloudbuildV1Build::setApproval(const OAIContaineranalysisGoogleDevtoolsCloudbuildV1BuildApproval &approval) {
    m_approval = approval;
    m_approval_isSet = true;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1Build::is_approval_Set() const{
    return m_approval_isSet;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1Build::is_approval_Valid() const{
    return m_approval_isValid;
}

OAIContaineranalysisGoogleDevtoolsCloudbuildV1Artifacts OAIContaineranalysisGoogleDevtoolsCloudbuildV1Build::getArtifacts() const {
    return m_artifacts;
}
void OAIContaineranalysisGoogleDevtoolsCloudbuildV1Build::setArtifacts(const OAIContaineranalysisGoogleDevtoolsCloudbuildV1Artifacts &artifacts) {
    m_artifacts = artifacts;
    m_artifacts_isSet = true;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1Build::is_artifacts_Set() const{
    return m_artifacts_isSet;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1Build::is_artifacts_Valid() const{
    return m_artifacts_isValid;
}

OAIContaineranalysisGoogleDevtoolsCloudbuildV1Secrets OAIContaineranalysisGoogleDevtoolsCloudbuildV1Build::getAvailableSecrets() const {
    return m_available_secrets;
}
void OAIContaineranalysisGoogleDevtoolsCloudbuildV1Build::setAvailableSecrets(const OAIContaineranalysisGoogleDevtoolsCloudbuildV1Secrets &available_secrets) {
    m_available_secrets = available_secrets;
    m_available_secrets_isSet = true;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1Build::is_available_secrets_Set() const{
    return m_available_secrets_isSet;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1Build::is_available_secrets_Valid() const{
    return m_available_secrets_isValid;
}

QString OAIContaineranalysisGoogleDevtoolsCloudbuildV1Build::getBuildTriggerId() const {
    return m_build_trigger_id;
}
void OAIContaineranalysisGoogleDevtoolsCloudbuildV1Build::setBuildTriggerId(const QString &build_trigger_id) {
    m_build_trigger_id = build_trigger_id;
    m_build_trigger_id_isSet = true;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1Build::is_build_trigger_id_Set() const{
    return m_build_trigger_id_isSet;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1Build::is_build_trigger_id_Valid() const{
    return m_build_trigger_id_isValid;
}

QString OAIContaineranalysisGoogleDevtoolsCloudbuildV1Build::getCreateTime() const {
    return m_create_time;
}
void OAIContaineranalysisGoogleDevtoolsCloudbuildV1Build::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1Build::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1Build::is_create_time_Valid() const{
    return m_create_time_isValid;
}

OAIContaineranalysisGoogleDevtoolsCloudbuildV1BuildFailureInfo OAIContaineranalysisGoogleDevtoolsCloudbuildV1Build::getFailureInfo() const {
    return m_failure_info;
}
void OAIContaineranalysisGoogleDevtoolsCloudbuildV1Build::setFailureInfo(const OAIContaineranalysisGoogleDevtoolsCloudbuildV1BuildFailureInfo &failure_info) {
    m_failure_info = failure_info;
    m_failure_info_isSet = true;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1Build::is_failure_info_Set() const{
    return m_failure_info_isSet;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1Build::is_failure_info_Valid() const{
    return m_failure_info_isValid;
}

QString OAIContaineranalysisGoogleDevtoolsCloudbuildV1Build::getFinishTime() const {
    return m_finish_time;
}
void OAIContaineranalysisGoogleDevtoolsCloudbuildV1Build::setFinishTime(const QString &finish_time) {
    m_finish_time = finish_time;
    m_finish_time_isSet = true;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1Build::is_finish_time_Set() const{
    return m_finish_time_isSet;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1Build::is_finish_time_Valid() const{
    return m_finish_time_isValid;
}

QString OAIContaineranalysisGoogleDevtoolsCloudbuildV1Build::getId() const {
    return m_id;
}
void OAIContaineranalysisGoogleDevtoolsCloudbuildV1Build::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1Build::is_id_Set() const{
    return m_id_isSet;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1Build::is_id_Valid() const{
    return m_id_isValid;
}

QList<QString> OAIContaineranalysisGoogleDevtoolsCloudbuildV1Build::getImages() const {
    return m_images;
}
void OAIContaineranalysisGoogleDevtoolsCloudbuildV1Build::setImages(const QList<QString> &images) {
    m_images = images;
    m_images_isSet = true;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1Build::is_images_Set() const{
    return m_images_isSet;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1Build::is_images_Valid() const{
    return m_images_isValid;
}

QString OAIContaineranalysisGoogleDevtoolsCloudbuildV1Build::getLogUrl() const {
    return m_log_url;
}
void OAIContaineranalysisGoogleDevtoolsCloudbuildV1Build::setLogUrl(const QString &log_url) {
    m_log_url = log_url;
    m_log_url_isSet = true;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1Build::is_log_url_Set() const{
    return m_log_url_isSet;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1Build::is_log_url_Valid() const{
    return m_log_url_isValid;
}

QString OAIContaineranalysisGoogleDevtoolsCloudbuildV1Build::getLogsBucket() const {
    return m_logs_bucket;
}
void OAIContaineranalysisGoogleDevtoolsCloudbuildV1Build::setLogsBucket(const QString &logs_bucket) {
    m_logs_bucket = logs_bucket;
    m_logs_bucket_isSet = true;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1Build::is_logs_bucket_Set() const{
    return m_logs_bucket_isSet;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1Build::is_logs_bucket_Valid() const{
    return m_logs_bucket_isValid;
}

QString OAIContaineranalysisGoogleDevtoolsCloudbuildV1Build::getName() const {
    return m_name;
}
void OAIContaineranalysisGoogleDevtoolsCloudbuildV1Build::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1Build::is_name_Set() const{
    return m_name_isSet;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1Build::is_name_Valid() const{
    return m_name_isValid;
}

OAIContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions OAIContaineranalysisGoogleDevtoolsCloudbuildV1Build::getOptions() const {
    return m_options;
}
void OAIContaineranalysisGoogleDevtoolsCloudbuildV1Build::setOptions(const OAIContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions &options) {
    m_options = options;
    m_options_isSet = true;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1Build::is_options_Set() const{
    return m_options_isSet;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1Build::is_options_Valid() const{
    return m_options_isValid;
}

QString OAIContaineranalysisGoogleDevtoolsCloudbuildV1Build::getProjectId() const {
    return m_project_id;
}
void OAIContaineranalysisGoogleDevtoolsCloudbuildV1Build::setProjectId(const QString &project_id) {
    m_project_id = project_id;
    m_project_id_isSet = true;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1Build::is_project_id_Set() const{
    return m_project_id_isSet;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1Build::is_project_id_Valid() const{
    return m_project_id_isValid;
}

QString OAIContaineranalysisGoogleDevtoolsCloudbuildV1Build::getQueueTtl() const {
    return m_queue_ttl;
}
void OAIContaineranalysisGoogleDevtoolsCloudbuildV1Build::setQueueTtl(const QString &queue_ttl) {
    m_queue_ttl = queue_ttl;
    m_queue_ttl_isSet = true;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1Build::is_queue_ttl_Set() const{
    return m_queue_ttl_isSet;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1Build::is_queue_ttl_Valid() const{
    return m_queue_ttl_isValid;
}

OAIContaineranalysisGoogleDevtoolsCloudbuildV1Results OAIContaineranalysisGoogleDevtoolsCloudbuildV1Build::getResults() const {
    return m_results;
}
void OAIContaineranalysisGoogleDevtoolsCloudbuildV1Build::setResults(const OAIContaineranalysisGoogleDevtoolsCloudbuildV1Results &results) {
    m_results = results;
    m_results_isSet = true;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1Build::is_results_Set() const{
    return m_results_isSet;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1Build::is_results_Valid() const{
    return m_results_isValid;
}

QList<OAIContaineranalysisGoogleDevtoolsCloudbuildV1Secret> OAIContaineranalysisGoogleDevtoolsCloudbuildV1Build::getSecrets() const {
    return m_secrets;
}
void OAIContaineranalysisGoogleDevtoolsCloudbuildV1Build::setSecrets(const QList<OAIContaineranalysisGoogleDevtoolsCloudbuildV1Secret> &secrets) {
    m_secrets = secrets;
    m_secrets_isSet = true;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1Build::is_secrets_Set() const{
    return m_secrets_isSet;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1Build::is_secrets_Valid() const{
    return m_secrets_isValid;
}

QString OAIContaineranalysisGoogleDevtoolsCloudbuildV1Build::getServiceAccount() const {
    return m_service_account;
}
void OAIContaineranalysisGoogleDevtoolsCloudbuildV1Build::setServiceAccount(const QString &service_account) {
    m_service_account = service_account;
    m_service_account_isSet = true;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1Build::is_service_account_Set() const{
    return m_service_account_isSet;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1Build::is_service_account_Valid() const{
    return m_service_account_isValid;
}

OAIContaineranalysisGoogleDevtoolsCloudbuildV1Source OAIContaineranalysisGoogleDevtoolsCloudbuildV1Build::getSource() const {
    return m_source;
}
void OAIContaineranalysisGoogleDevtoolsCloudbuildV1Build::setSource(const OAIContaineranalysisGoogleDevtoolsCloudbuildV1Source &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1Build::is_source_Set() const{
    return m_source_isSet;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1Build::is_source_Valid() const{
    return m_source_isValid;
}

OAIContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance OAIContaineranalysisGoogleDevtoolsCloudbuildV1Build::getSourceProvenance() const {
    return m_source_provenance;
}
void OAIContaineranalysisGoogleDevtoolsCloudbuildV1Build::setSourceProvenance(const OAIContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance &source_provenance) {
    m_source_provenance = source_provenance;
    m_source_provenance_isSet = true;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1Build::is_source_provenance_Set() const{
    return m_source_provenance_isSet;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1Build::is_source_provenance_Valid() const{
    return m_source_provenance_isValid;
}

QString OAIContaineranalysisGoogleDevtoolsCloudbuildV1Build::getStartTime() const {
    return m_start_time;
}
void OAIContaineranalysisGoogleDevtoolsCloudbuildV1Build::setStartTime(const QString &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1Build::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1Build::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QString OAIContaineranalysisGoogleDevtoolsCloudbuildV1Build::getStatus() const {
    return m_status;
}
void OAIContaineranalysisGoogleDevtoolsCloudbuildV1Build::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1Build::is_status_Set() const{
    return m_status_isSet;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1Build::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIContaineranalysisGoogleDevtoolsCloudbuildV1Build::getStatusDetail() const {
    return m_status_detail;
}
void OAIContaineranalysisGoogleDevtoolsCloudbuildV1Build::setStatusDetail(const QString &status_detail) {
    m_status_detail = status_detail;
    m_status_detail_isSet = true;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1Build::is_status_detail_Set() const{
    return m_status_detail_isSet;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1Build::is_status_detail_Valid() const{
    return m_status_detail_isValid;
}

QList<OAIContaineranalysisGoogleDevtoolsCloudbuildV1BuildStep> OAIContaineranalysisGoogleDevtoolsCloudbuildV1Build::getSteps() const {
    return m_steps;
}
void OAIContaineranalysisGoogleDevtoolsCloudbuildV1Build::setSteps(const QList<OAIContaineranalysisGoogleDevtoolsCloudbuildV1BuildStep> &steps) {
    m_steps = steps;
    m_steps_isSet = true;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1Build::is_steps_Set() const{
    return m_steps_isSet;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1Build::is_steps_Valid() const{
    return m_steps_isValid;
}

QMap<QString, QString> OAIContaineranalysisGoogleDevtoolsCloudbuildV1Build::getSubstitutions() const {
    return m_substitutions;
}
void OAIContaineranalysisGoogleDevtoolsCloudbuildV1Build::setSubstitutions(const QMap<QString, QString> &substitutions) {
    m_substitutions = substitutions;
    m_substitutions_isSet = true;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1Build::is_substitutions_Set() const{
    return m_substitutions_isSet;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1Build::is_substitutions_Valid() const{
    return m_substitutions_isValid;
}

QList<QString> OAIContaineranalysisGoogleDevtoolsCloudbuildV1Build::getTags() const {
    return m_tags;
}
void OAIContaineranalysisGoogleDevtoolsCloudbuildV1Build::setTags(const QList<QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1Build::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1Build::is_tags_Valid() const{
    return m_tags_isValid;
}

QString OAIContaineranalysisGoogleDevtoolsCloudbuildV1Build::getTimeout() const {
    return m_timeout;
}
void OAIContaineranalysisGoogleDevtoolsCloudbuildV1Build::setTimeout(const QString &timeout) {
    m_timeout = timeout;
    m_timeout_isSet = true;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1Build::is_timeout_Set() const{
    return m_timeout_isSet;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1Build::is_timeout_Valid() const{
    return m_timeout_isValid;
}

QMap<QString, OAIContaineranalysisGoogleDevtoolsCloudbuildV1TimeSpan> OAIContaineranalysisGoogleDevtoolsCloudbuildV1Build::getTiming() const {
    return m_timing;
}
void OAIContaineranalysisGoogleDevtoolsCloudbuildV1Build::setTiming(const QMap<QString, OAIContaineranalysisGoogleDevtoolsCloudbuildV1TimeSpan> &timing) {
    m_timing = timing;
    m_timing_isSet = true;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1Build::is_timing_Set() const{
    return m_timing_isSet;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1Build::is_timing_Valid() const{
    return m_timing_isValid;
}

QList<OAIContaineranalysisGoogleDevtoolsCloudbuildV1BuildWarning> OAIContaineranalysisGoogleDevtoolsCloudbuildV1Build::getWarnings() const {
    return m_warnings;
}
void OAIContaineranalysisGoogleDevtoolsCloudbuildV1Build::setWarnings(const QList<OAIContaineranalysisGoogleDevtoolsCloudbuildV1BuildWarning> &warnings) {
    m_warnings = warnings;
    m_warnings_isSet = true;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1Build::is_warnings_Set() const{
    return m_warnings_isSet;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1Build::is_warnings_Valid() const{
    return m_warnings_isValid;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1Build::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_approval.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_artifacts.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_available_secrets.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_build_trigger_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_failure_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_finish_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_images.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_log_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_logs_bucket_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_queue_ttl_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_results.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_secrets.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_account_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_provenance.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_detail_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_steps.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_substitutions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_timeout_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timing.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_warnings.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1Build::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
