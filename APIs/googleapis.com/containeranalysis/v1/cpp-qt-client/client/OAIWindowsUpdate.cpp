/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWindowsUpdate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWindowsUpdate::OAIWindowsUpdate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWindowsUpdate::OAIWindowsUpdate() {
    this->initializeModel();
}

OAIWindowsUpdate::~OAIWindowsUpdate() {}

void OAIWindowsUpdate::initializeModel() {

    m_categories_isSet = false;
    m_categories_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_identity_isSet = false;
    m_identity_isValid = false;

    m_kb_article_ids_isSet = false;
    m_kb_article_ids_isValid = false;

    m_last_published_timestamp_isSet = false;
    m_last_published_timestamp_isValid = false;

    m_support_url_isSet = false;
    m_support_url_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;
}

void OAIWindowsUpdate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWindowsUpdate::fromJsonObject(QJsonObject json) {

    m_categories_isValid = ::OpenAPI::fromJsonValue(m_categories, json[QString("categories")]);
    m_categories_isSet = !json[QString("categories")].isNull() && m_categories_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_identity_isValid = ::OpenAPI::fromJsonValue(m_identity, json[QString("identity")]);
    m_identity_isSet = !json[QString("identity")].isNull() && m_identity_isValid;

    m_kb_article_ids_isValid = ::OpenAPI::fromJsonValue(m_kb_article_ids, json[QString("kbArticleIds")]);
    m_kb_article_ids_isSet = !json[QString("kbArticleIds")].isNull() && m_kb_article_ids_isValid;

    m_last_published_timestamp_isValid = ::OpenAPI::fromJsonValue(m_last_published_timestamp, json[QString("lastPublishedTimestamp")]);
    m_last_published_timestamp_isSet = !json[QString("lastPublishedTimestamp")].isNull() && m_last_published_timestamp_isValid;

    m_support_url_isValid = ::OpenAPI::fromJsonValue(m_support_url, json[QString("supportUrl")]);
    m_support_url_isSet = !json[QString("supportUrl")].isNull() && m_support_url_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;
}

QString OAIWindowsUpdate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWindowsUpdate::asJsonObject() const {
    QJsonObject obj;
    if (m_categories.size() > 0) {
        obj.insert(QString("categories"), ::OpenAPI::toJsonValue(m_categories));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_identity.isSet()) {
        obj.insert(QString("identity"), ::OpenAPI::toJsonValue(m_identity));
    }
    if (m_kb_article_ids.size() > 0) {
        obj.insert(QString("kbArticleIds"), ::OpenAPI::toJsonValue(m_kb_article_ids));
    }
    if (m_last_published_timestamp_isSet) {
        obj.insert(QString("lastPublishedTimestamp"), ::OpenAPI::toJsonValue(m_last_published_timestamp));
    }
    if (m_support_url_isSet) {
        obj.insert(QString("supportUrl"), ::OpenAPI::toJsonValue(m_support_url));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    return obj;
}

QList<OAICategory> OAIWindowsUpdate::getCategories() const {
    return m_categories;
}
void OAIWindowsUpdate::setCategories(const QList<OAICategory> &categories) {
    m_categories = categories;
    m_categories_isSet = true;
}

bool OAIWindowsUpdate::is_categories_Set() const{
    return m_categories_isSet;
}

bool OAIWindowsUpdate::is_categories_Valid() const{
    return m_categories_isValid;
}

QString OAIWindowsUpdate::getDescription() const {
    return m_description;
}
void OAIWindowsUpdate::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIWindowsUpdate::is_description_Set() const{
    return m_description_isSet;
}

bool OAIWindowsUpdate::is_description_Valid() const{
    return m_description_isValid;
}

OAIIdentity OAIWindowsUpdate::getIdentity() const {
    return m_identity;
}
void OAIWindowsUpdate::setIdentity(const OAIIdentity &identity) {
    m_identity = identity;
    m_identity_isSet = true;
}

bool OAIWindowsUpdate::is_identity_Set() const{
    return m_identity_isSet;
}

bool OAIWindowsUpdate::is_identity_Valid() const{
    return m_identity_isValid;
}

QList<QString> OAIWindowsUpdate::getKbArticleIds() const {
    return m_kb_article_ids;
}
void OAIWindowsUpdate::setKbArticleIds(const QList<QString> &kb_article_ids) {
    m_kb_article_ids = kb_article_ids;
    m_kb_article_ids_isSet = true;
}

bool OAIWindowsUpdate::is_kb_article_ids_Set() const{
    return m_kb_article_ids_isSet;
}

bool OAIWindowsUpdate::is_kb_article_ids_Valid() const{
    return m_kb_article_ids_isValid;
}

QString OAIWindowsUpdate::getLastPublishedTimestamp() const {
    return m_last_published_timestamp;
}
void OAIWindowsUpdate::setLastPublishedTimestamp(const QString &last_published_timestamp) {
    m_last_published_timestamp = last_published_timestamp;
    m_last_published_timestamp_isSet = true;
}

bool OAIWindowsUpdate::is_last_published_timestamp_Set() const{
    return m_last_published_timestamp_isSet;
}

bool OAIWindowsUpdate::is_last_published_timestamp_Valid() const{
    return m_last_published_timestamp_isValid;
}

QString OAIWindowsUpdate::getSupportUrl() const {
    return m_support_url;
}
void OAIWindowsUpdate::setSupportUrl(const QString &support_url) {
    m_support_url = support_url;
    m_support_url_isSet = true;
}

bool OAIWindowsUpdate::is_support_url_Set() const{
    return m_support_url_isSet;
}

bool OAIWindowsUpdate::is_support_url_Valid() const{
    return m_support_url_isValid;
}

QString OAIWindowsUpdate::getTitle() const {
    return m_title;
}
void OAIWindowsUpdate::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIWindowsUpdate::is_title_Set() const{
    return m_title_isSet;
}

bool OAIWindowsUpdate::is_title_Valid() const{
    return m_title_isValid;
}

bool OAIWindowsUpdate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_categories.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_identity.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_kb_article_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_published_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_support_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWindowsUpdate::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
