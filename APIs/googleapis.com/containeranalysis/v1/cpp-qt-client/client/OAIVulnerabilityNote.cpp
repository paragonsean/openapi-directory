/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVulnerabilityNote.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVulnerabilityNote::OAIVulnerabilityNote(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVulnerabilityNote::OAIVulnerabilityNote() {
    this->initializeModel();
}

OAIVulnerabilityNote::~OAIVulnerabilityNote() {}

void OAIVulnerabilityNote::initializeModel() {

    m_cvss_score_isSet = false;
    m_cvss_score_isValid = false;

    m_cvss_v2_isSet = false;
    m_cvss_v2_isValid = false;

    m_cvss_v3_isSet = false;
    m_cvss_v3_isValid = false;

    m_cvss_version_isSet = false;
    m_cvss_version_isValid = false;

    m_details_isSet = false;
    m_details_isValid = false;

    m_severity_isSet = false;
    m_severity_isValid = false;

    m_source_update_time_isSet = false;
    m_source_update_time_isValid = false;

    m_windows_details_isSet = false;
    m_windows_details_isValid = false;
}

void OAIVulnerabilityNote::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVulnerabilityNote::fromJsonObject(QJsonObject json) {

    m_cvss_score_isValid = ::OpenAPI::fromJsonValue(m_cvss_score, json[QString("cvssScore")]);
    m_cvss_score_isSet = !json[QString("cvssScore")].isNull() && m_cvss_score_isValid;

    m_cvss_v2_isValid = ::OpenAPI::fromJsonValue(m_cvss_v2, json[QString("cvssV2")]);
    m_cvss_v2_isSet = !json[QString("cvssV2")].isNull() && m_cvss_v2_isValid;

    m_cvss_v3_isValid = ::OpenAPI::fromJsonValue(m_cvss_v3, json[QString("cvssV3")]);
    m_cvss_v3_isSet = !json[QString("cvssV3")].isNull() && m_cvss_v3_isValid;

    m_cvss_version_isValid = ::OpenAPI::fromJsonValue(m_cvss_version, json[QString("cvssVersion")]);
    m_cvss_version_isSet = !json[QString("cvssVersion")].isNull() && m_cvss_version_isValid;

    m_details_isValid = ::OpenAPI::fromJsonValue(m_details, json[QString("details")]);
    m_details_isSet = !json[QString("details")].isNull() && m_details_isValid;

    m_severity_isValid = ::OpenAPI::fromJsonValue(m_severity, json[QString("severity")]);
    m_severity_isSet = !json[QString("severity")].isNull() && m_severity_isValid;

    m_source_update_time_isValid = ::OpenAPI::fromJsonValue(m_source_update_time, json[QString("sourceUpdateTime")]);
    m_source_update_time_isSet = !json[QString("sourceUpdateTime")].isNull() && m_source_update_time_isValid;

    m_windows_details_isValid = ::OpenAPI::fromJsonValue(m_windows_details, json[QString("windowsDetails")]);
    m_windows_details_isSet = !json[QString("windowsDetails")].isNull() && m_windows_details_isValid;
}

QString OAIVulnerabilityNote::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVulnerabilityNote::asJsonObject() const {
    QJsonObject obj;
    if (m_cvss_score_isSet) {
        obj.insert(QString("cvssScore"), ::OpenAPI::toJsonValue(m_cvss_score));
    }
    if (m_cvss_v2.isSet()) {
        obj.insert(QString("cvssV2"), ::OpenAPI::toJsonValue(m_cvss_v2));
    }
    if (m_cvss_v3.isSet()) {
        obj.insert(QString("cvssV3"), ::OpenAPI::toJsonValue(m_cvss_v3));
    }
    if (m_cvss_version_isSet) {
        obj.insert(QString("cvssVersion"), ::OpenAPI::toJsonValue(m_cvss_version));
    }
    if (m_details.size() > 0) {
        obj.insert(QString("details"), ::OpenAPI::toJsonValue(m_details));
    }
    if (m_severity_isSet) {
        obj.insert(QString("severity"), ::OpenAPI::toJsonValue(m_severity));
    }
    if (m_source_update_time_isSet) {
        obj.insert(QString("sourceUpdateTime"), ::OpenAPI::toJsonValue(m_source_update_time));
    }
    if (m_windows_details.size() > 0) {
        obj.insert(QString("windowsDetails"), ::OpenAPI::toJsonValue(m_windows_details));
    }
    return obj;
}

float OAIVulnerabilityNote::getCvssScore() const {
    return m_cvss_score;
}
void OAIVulnerabilityNote::setCvssScore(const float &cvss_score) {
    m_cvss_score = cvss_score;
    m_cvss_score_isSet = true;
}

bool OAIVulnerabilityNote::is_cvss_score_Set() const{
    return m_cvss_score_isSet;
}

bool OAIVulnerabilityNote::is_cvss_score_Valid() const{
    return m_cvss_score_isValid;
}

OAICVSS OAIVulnerabilityNote::getCvssV2() const {
    return m_cvss_v2;
}
void OAIVulnerabilityNote::setCvssV2(const OAICVSS &cvss_v2) {
    m_cvss_v2 = cvss_v2;
    m_cvss_v2_isSet = true;
}

bool OAIVulnerabilityNote::is_cvss_v2_Set() const{
    return m_cvss_v2_isSet;
}

bool OAIVulnerabilityNote::is_cvss_v2_Valid() const{
    return m_cvss_v2_isValid;
}

OAICVSSv3 OAIVulnerabilityNote::getCvssV3() const {
    return m_cvss_v3;
}
void OAIVulnerabilityNote::setCvssV3(const OAICVSSv3 &cvss_v3) {
    m_cvss_v3 = cvss_v3;
    m_cvss_v3_isSet = true;
}

bool OAIVulnerabilityNote::is_cvss_v3_Set() const{
    return m_cvss_v3_isSet;
}

bool OAIVulnerabilityNote::is_cvss_v3_Valid() const{
    return m_cvss_v3_isValid;
}

QString OAIVulnerabilityNote::getCvssVersion() const {
    return m_cvss_version;
}
void OAIVulnerabilityNote::setCvssVersion(const QString &cvss_version) {
    m_cvss_version = cvss_version;
    m_cvss_version_isSet = true;
}

bool OAIVulnerabilityNote::is_cvss_version_Set() const{
    return m_cvss_version_isSet;
}

bool OAIVulnerabilityNote::is_cvss_version_Valid() const{
    return m_cvss_version_isValid;
}

QList<OAIDetail> OAIVulnerabilityNote::getDetails() const {
    return m_details;
}
void OAIVulnerabilityNote::setDetails(const QList<OAIDetail> &details) {
    m_details = details;
    m_details_isSet = true;
}

bool OAIVulnerabilityNote::is_details_Set() const{
    return m_details_isSet;
}

bool OAIVulnerabilityNote::is_details_Valid() const{
    return m_details_isValid;
}

QString OAIVulnerabilityNote::getSeverity() const {
    return m_severity;
}
void OAIVulnerabilityNote::setSeverity(const QString &severity) {
    m_severity = severity;
    m_severity_isSet = true;
}

bool OAIVulnerabilityNote::is_severity_Set() const{
    return m_severity_isSet;
}

bool OAIVulnerabilityNote::is_severity_Valid() const{
    return m_severity_isValid;
}

QString OAIVulnerabilityNote::getSourceUpdateTime() const {
    return m_source_update_time;
}
void OAIVulnerabilityNote::setSourceUpdateTime(const QString &source_update_time) {
    m_source_update_time = source_update_time;
    m_source_update_time_isSet = true;
}

bool OAIVulnerabilityNote::is_source_update_time_Set() const{
    return m_source_update_time_isSet;
}

bool OAIVulnerabilityNote::is_source_update_time_Valid() const{
    return m_source_update_time_isValid;
}

QList<OAIWindowsDetail> OAIVulnerabilityNote::getWindowsDetails() const {
    return m_windows_details;
}
void OAIVulnerabilityNote::setWindowsDetails(const QList<OAIWindowsDetail> &windows_details) {
    m_windows_details = windows_details;
    m_windows_details_isSet = true;
}

bool OAIVulnerabilityNote::is_windows_details_Set() const{
    return m_windows_details_isSet;
}

bool OAIVulnerabilityNote::is_windows_details_Valid() const{
    return m_windows_details_isValid;
}

bool OAIVulnerabilityNote::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cvss_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cvss_v2.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cvss_v3.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cvss_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_details.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_severity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_windows_details.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVulnerabilityNote::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
