/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDiscoveryOccurrence.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDiscoveryOccurrence::OAIDiscoveryOccurrence(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDiscoveryOccurrence::OAIDiscoveryOccurrence() {
    this->initializeModel();
}

OAIDiscoveryOccurrence::~OAIDiscoveryOccurrence() {}

void OAIDiscoveryOccurrence::initializeModel() {

    m_analysis_completed_isSet = false;
    m_analysis_completed_isValid = false;

    m_analysis_error_isSet = false;
    m_analysis_error_isValid = false;

    m_analysis_status_isSet = false;
    m_analysis_status_isValid = false;

    m_analysis_status_error_isSet = false;
    m_analysis_status_error_isValid = false;

    m_archive_time_isSet = false;
    m_archive_time_isValid = false;

    m_continuous_analysis_isSet = false;
    m_continuous_analysis_isValid = false;

    m_cpe_isSet = false;
    m_cpe_isValid = false;

    m_last_scan_time_isSet = false;
    m_last_scan_time_isValid = false;

    m_sbom_status_isSet = false;
    m_sbom_status_isValid = false;
}

void OAIDiscoveryOccurrence::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDiscoveryOccurrence::fromJsonObject(QJsonObject json) {

    m_analysis_completed_isValid = ::OpenAPI::fromJsonValue(m_analysis_completed, json[QString("analysisCompleted")]);
    m_analysis_completed_isSet = !json[QString("analysisCompleted")].isNull() && m_analysis_completed_isValid;

    m_analysis_error_isValid = ::OpenAPI::fromJsonValue(m_analysis_error, json[QString("analysisError")]);
    m_analysis_error_isSet = !json[QString("analysisError")].isNull() && m_analysis_error_isValid;

    m_analysis_status_isValid = ::OpenAPI::fromJsonValue(m_analysis_status, json[QString("analysisStatus")]);
    m_analysis_status_isSet = !json[QString("analysisStatus")].isNull() && m_analysis_status_isValid;

    m_analysis_status_error_isValid = ::OpenAPI::fromJsonValue(m_analysis_status_error, json[QString("analysisStatusError")]);
    m_analysis_status_error_isSet = !json[QString("analysisStatusError")].isNull() && m_analysis_status_error_isValid;

    m_archive_time_isValid = ::OpenAPI::fromJsonValue(m_archive_time, json[QString("archiveTime")]);
    m_archive_time_isSet = !json[QString("archiveTime")].isNull() && m_archive_time_isValid;

    m_continuous_analysis_isValid = ::OpenAPI::fromJsonValue(m_continuous_analysis, json[QString("continuousAnalysis")]);
    m_continuous_analysis_isSet = !json[QString("continuousAnalysis")].isNull() && m_continuous_analysis_isValid;

    m_cpe_isValid = ::OpenAPI::fromJsonValue(m_cpe, json[QString("cpe")]);
    m_cpe_isSet = !json[QString("cpe")].isNull() && m_cpe_isValid;

    m_last_scan_time_isValid = ::OpenAPI::fromJsonValue(m_last_scan_time, json[QString("lastScanTime")]);
    m_last_scan_time_isSet = !json[QString("lastScanTime")].isNull() && m_last_scan_time_isValid;

    m_sbom_status_isValid = ::OpenAPI::fromJsonValue(m_sbom_status, json[QString("sbomStatus")]);
    m_sbom_status_isSet = !json[QString("sbomStatus")].isNull() && m_sbom_status_isValid;
}

QString OAIDiscoveryOccurrence::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDiscoveryOccurrence::asJsonObject() const {
    QJsonObject obj;
    if (m_analysis_completed.isSet()) {
        obj.insert(QString("analysisCompleted"), ::OpenAPI::toJsonValue(m_analysis_completed));
    }
    if (m_analysis_error.size() > 0) {
        obj.insert(QString("analysisError"), ::OpenAPI::toJsonValue(m_analysis_error));
    }
    if (m_analysis_status_isSet) {
        obj.insert(QString("analysisStatus"), ::OpenAPI::toJsonValue(m_analysis_status));
    }
    if (m_analysis_status_error.isSet()) {
        obj.insert(QString("analysisStatusError"), ::OpenAPI::toJsonValue(m_analysis_status_error));
    }
    if (m_archive_time_isSet) {
        obj.insert(QString("archiveTime"), ::OpenAPI::toJsonValue(m_archive_time));
    }
    if (m_continuous_analysis_isSet) {
        obj.insert(QString("continuousAnalysis"), ::OpenAPI::toJsonValue(m_continuous_analysis));
    }
    if (m_cpe_isSet) {
        obj.insert(QString("cpe"), ::OpenAPI::toJsonValue(m_cpe));
    }
    if (m_last_scan_time_isSet) {
        obj.insert(QString("lastScanTime"), ::OpenAPI::toJsonValue(m_last_scan_time));
    }
    if (m_sbom_status.isSet()) {
        obj.insert(QString("sbomStatus"), ::OpenAPI::toJsonValue(m_sbom_status));
    }
    return obj;
}

OAIAnalysisCompleted OAIDiscoveryOccurrence::getAnalysisCompleted() const {
    return m_analysis_completed;
}
void OAIDiscoveryOccurrence::setAnalysisCompleted(const OAIAnalysisCompleted &analysis_completed) {
    m_analysis_completed = analysis_completed;
    m_analysis_completed_isSet = true;
}

bool OAIDiscoveryOccurrence::is_analysis_completed_Set() const{
    return m_analysis_completed_isSet;
}

bool OAIDiscoveryOccurrence::is_analysis_completed_Valid() const{
    return m_analysis_completed_isValid;
}

QList<OAIStatus> OAIDiscoveryOccurrence::getAnalysisError() const {
    return m_analysis_error;
}
void OAIDiscoveryOccurrence::setAnalysisError(const QList<OAIStatus> &analysis_error) {
    m_analysis_error = analysis_error;
    m_analysis_error_isSet = true;
}

bool OAIDiscoveryOccurrence::is_analysis_error_Set() const{
    return m_analysis_error_isSet;
}

bool OAIDiscoveryOccurrence::is_analysis_error_Valid() const{
    return m_analysis_error_isValid;
}

QString OAIDiscoveryOccurrence::getAnalysisStatus() const {
    return m_analysis_status;
}
void OAIDiscoveryOccurrence::setAnalysisStatus(const QString &analysis_status) {
    m_analysis_status = analysis_status;
    m_analysis_status_isSet = true;
}

bool OAIDiscoveryOccurrence::is_analysis_status_Set() const{
    return m_analysis_status_isSet;
}

bool OAIDiscoveryOccurrence::is_analysis_status_Valid() const{
    return m_analysis_status_isValid;
}

OAIStatus OAIDiscoveryOccurrence::getAnalysisStatusError() const {
    return m_analysis_status_error;
}
void OAIDiscoveryOccurrence::setAnalysisStatusError(const OAIStatus &analysis_status_error) {
    m_analysis_status_error = analysis_status_error;
    m_analysis_status_error_isSet = true;
}

bool OAIDiscoveryOccurrence::is_analysis_status_error_Set() const{
    return m_analysis_status_error_isSet;
}

bool OAIDiscoveryOccurrence::is_analysis_status_error_Valid() const{
    return m_analysis_status_error_isValid;
}

QString OAIDiscoveryOccurrence::getArchiveTime() const {
    return m_archive_time;
}
void OAIDiscoveryOccurrence::setArchiveTime(const QString &archive_time) {
    m_archive_time = archive_time;
    m_archive_time_isSet = true;
}

bool OAIDiscoveryOccurrence::is_archive_time_Set() const{
    return m_archive_time_isSet;
}

bool OAIDiscoveryOccurrence::is_archive_time_Valid() const{
    return m_archive_time_isValid;
}

QString OAIDiscoveryOccurrence::getContinuousAnalysis() const {
    return m_continuous_analysis;
}
void OAIDiscoveryOccurrence::setContinuousAnalysis(const QString &continuous_analysis) {
    m_continuous_analysis = continuous_analysis;
    m_continuous_analysis_isSet = true;
}

bool OAIDiscoveryOccurrence::is_continuous_analysis_Set() const{
    return m_continuous_analysis_isSet;
}

bool OAIDiscoveryOccurrence::is_continuous_analysis_Valid() const{
    return m_continuous_analysis_isValid;
}

QString OAIDiscoveryOccurrence::getCpe() const {
    return m_cpe;
}
void OAIDiscoveryOccurrence::setCpe(const QString &cpe) {
    m_cpe = cpe;
    m_cpe_isSet = true;
}

bool OAIDiscoveryOccurrence::is_cpe_Set() const{
    return m_cpe_isSet;
}

bool OAIDiscoveryOccurrence::is_cpe_Valid() const{
    return m_cpe_isValid;
}

QString OAIDiscoveryOccurrence::getLastScanTime() const {
    return m_last_scan_time;
}
void OAIDiscoveryOccurrence::setLastScanTime(const QString &last_scan_time) {
    m_last_scan_time = last_scan_time;
    m_last_scan_time_isSet = true;
}

bool OAIDiscoveryOccurrence::is_last_scan_time_Set() const{
    return m_last_scan_time_isSet;
}

bool OAIDiscoveryOccurrence::is_last_scan_time_Valid() const{
    return m_last_scan_time_isValid;
}

OAISBOMStatus OAIDiscoveryOccurrence::getSbomStatus() const {
    return m_sbom_status;
}
void OAIDiscoveryOccurrence::setSbomStatus(const OAISBOMStatus &sbom_status) {
    m_sbom_status = sbom_status;
    m_sbom_status_isSet = true;
}

bool OAIDiscoveryOccurrence::is_sbom_status_Set() const{
    return m_sbom_status_isSet;
}

bool OAIDiscoveryOccurrence::is_sbom_status_Valid() const{
    return m_sbom_status_isValid;
}

bool OAIDiscoveryOccurrence::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_analysis_completed.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_analysis_error.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_analysis_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_analysis_status_error.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_archive_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_continuous_analysis_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cpe_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_scan_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sbom_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDiscoveryOccurrence::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
