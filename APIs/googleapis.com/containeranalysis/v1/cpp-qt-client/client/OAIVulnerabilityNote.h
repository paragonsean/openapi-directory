/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIVulnerabilityNote.h
 *
 * A security vulnerability that can be found in resources.
 */

#ifndef OAIVulnerabilityNote_H
#define OAIVulnerabilityNote_H

#include <QJsonObject>

#include "OAICVSS.h"
#include "OAICVSSv3.h"
#include "OAIDetail.h"
#include "OAIWindowsDetail.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAICVSS;
class OAICVSSv3;
class OAIDetail;
class OAIWindowsDetail;

class OAIVulnerabilityNote : public OAIObject {
public:
    OAIVulnerabilityNote();
    OAIVulnerabilityNote(QString json);
    ~OAIVulnerabilityNote() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    float getCvssScore() const;
    void setCvssScore(const float &cvss_score);
    bool is_cvss_score_Set() const;
    bool is_cvss_score_Valid() const;

    OAICVSS getCvssV2() const;
    void setCvssV2(const OAICVSS &cvss_v2);
    bool is_cvss_v2_Set() const;
    bool is_cvss_v2_Valid() const;

    OAICVSSv3 getCvssV3() const;
    void setCvssV3(const OAICVSSv3 &cvss_v3);
    bool is_cvss_v3_Set() const;
    bool is_cvss_v3_Valid() const;

    QString getCvssVersion() const;
    void setCvssVersion(const QString &cvss_version);
    bool is_cvss_version_Set() const;
    bool is_cvss_version_Valid() const;

    QList<OAIDetail> getDetails() const;
    void setDetails(const QList<OAIDetail> &details);
    bool is_details_Set() const;
    bool is_details_Valid() const;

    QString getSeverity() const;
    void setSeverity(const QString &severity);
    bool is_severity_Set() const;
    bool is_severity_Valid() const;

    QString getSourceUpdateTime() const;
    void setSourceUpdateTime(const QString &source_update_time);
    bool is_source_update_time_Set() const;
    bool is_source_update_time_Valid() const;

    QList<OAIWindowsDetail> getWindowsDetails() const;
    void setWindowsDetails(const QList<OAIWindowsDetail> &windows_details);
    bool is_windows_details_Set() const;
    bool is_windows_details_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    float m_cvss_score;
    bool m_cvss_score_isSet;
    bool m_cvss_score_isValid;

    OAICVSS m_cvss_v2;
    bool m_cvss_v2_isSet;
    bool m_cvss_v2_isValid;

    OAICVSSv3 m_cvss_v3;
    bool m_cvss_v3_isSet;
    bool m_cvss_v3_isValid;

    QString m_cvss_version;
    bool m_cvss_version_isSet;
    bool m_cvss_version_isValid;

    QList<OAIDetail> m_details;
    bool m_details_isSet;
    bool m_details_isValid;

    QString m_severity;
    bool m_severity_isSet;
    bool m_severity_isValid;

    QString m_source_update_time;
    bool m_source_update_time_isSet;
    bool m_source_update_time_isValid;

    QList<OAIWindowsDetail> m_windows_details;
    bool m_windows_details_isSet;
    bool m_windows_details_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIVulnerabilityNote)

#endif // OAIVulnerabilityNote_H
