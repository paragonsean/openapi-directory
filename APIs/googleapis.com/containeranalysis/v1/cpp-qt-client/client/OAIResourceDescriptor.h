/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIResourceDescriptor.h
 *
 * 
 */

#ifndef OAIResourceDescriptor_H
#define OAIResourceDescriptor_H

#include <QJsonObject>

#include <QByteArray>
#include <QJsonValue>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIResourceDescriptor : public OAIObject {
public:
    OAIResourceDescriptor();
    OAIResourceDescriptor(QString json);
    ~OAIResourceDescriptor() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QMap<QString, QJsonValue> getAnnotations() const;
    void setAnnotations(const QMap<QString, QJsonValue> &annotations);
    bool is_annotations_Set() const;
    bool is_annotations_Valid() const;

    QByteArray getContent() const;
    void setContent(const QByteArray &content);
    bool is_content_Set() const;
    bool is_content_Valid() const;

    QMap<QString, QString> getDigest() const;
    void setDigest(const QMap<QString, QString> &digest);
    bool is_digest_Set() const;
    bool is_digest_Valid() const;

    QString getDownloadLocation() const;
    void setDownloadLocation(const QString &download_location);
    bool is_download_location_Set() const;
    bool is_download_location_Valid() const;

    QString getMediaType() const;
    void setMediaType(const QString &media_type);
    bool is_media_type_Set() const;
    bool is_media_type_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getUri() const;
    void setUri(const QString &uri);
    bool is_uri_Set() const;
    bool is_uri_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QMap<QString, QJsonValue> m_annotations;
    bool m_annotations_isSet;
    bool m_annotations_isValid;

    QByteArray m_content;
    bool m_content_isSet;
    bool m_content_isValid;

    QMap<QString, QString> m_digest;
    bool m_digest_isSet;
    bool m_digest_isValid;

    QString m_download_location;
    bool m_download_location_isSet;
    bool m_download_location_isValid;

    QString m_media_type;
    bool m_media_type_isSet;
    bool m_media_type_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_uri;
    bool m_uri_isSet;
    bool m_uri_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIResourceDescriptor)

#endif // OAIResourceDescriptor_H
