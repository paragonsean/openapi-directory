/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAttestationOccurrence.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAttestationOccurrence::OAIAttestationOccurrence(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAttestationOccurrence::OAIAttestationOccurrence() {
    this->initializeModel();
}

OAIAttestationOccurrence::~OAIAttestationOccurrence() {}

void OAIAttestationOccurrence::initializeModel() {

    m_jwts_isSet = false;
    m_jwts_isValid = false;

    m_serialized_payload_isSet = false;
    m_serialized_payload_isValid = false;

    m_signatures_isSet = false;
    m_signatures_isValid = false;
}

void OAIAttestationOccurrence::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAttestationOccurrence::fromJsonObject(QJsonObject json) {

    m_jwts_isValid = ::OpenAPI::fromJsonValue(m_jwts, json[QString("jwts")]);
    m_jwts_isSet = !json[QString("jwts")].isNull() && m_jwts_isValid;

    m_serialized_payload_isValid = ::OpenAPI::fromJsonValue(m_serialized_payload, json[QString("serializedPayload")]);
    m_serialized_payload_isSet = !json[QString("serializedPayload")].isNull() && m_serialized_payload_isValid;

    m_signatures_isValid = ::OpenAPI::fromJsonValue(m_signatures, json[QString("signatures")]);
    m_signatures_isSet = !json[QString("signatures")].isNull() && m_signatures_isValid;
}

QString OAIAttestationOccurrence::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAttestationOccurrence::asJsonObject() const {
    QJsonObject obj;
    if (m_jwts.size() > 0) {
        obj.insert(QString("jwts"), ::OpenAPI::toJsonValue(m_jwts));
    }
    if (m_serialized_payload_isSet) {
        obj.insert(QString("serializedPayload"), ::OpenAPI::toJsonValue(m_serialized_payload));
    }
    if (m_signatures.size() > 0) {
        obj.insert(QString("signatures"), ::OpenAPI::toJsonValue(m_signatures));
    }
    return obj;
}

QList<OAIJwt> OAIAttestationOccurrence::getJwts() const {
    return m_jwts;
}
void OAIAttestationOccurrence::setJwts(const QList<OAIJwt> &jwts) {
    m_jwts = jwts;
    m_jwts_isSet = true;
}

bool OAIAttestationOccurrence::is_jwts_Set() const{
    return m_jwts_isSet;
}

bool OAIAttestationOccurrence::is_jwts_Valid() const{
    return m_jwts_isValid;
}

QByteArray OAIAttestationOccurrence::getSerializedPayload() const {
    return m_serialized_payload;
}
void OAIAttestationOccurrence::setSerializedPayload(const QByteArray &serialized_payload) {
    m_serialized_payload = serialized_payload;
    m_serialized_payload_isSet = true;
}

bool OAIAttestationOccurrence::is_serialized_payload_Set() const{
    return m_serialized_payload_isSet;
}

bool OAIAttestationOccurrence::is_serialized_payload_Valid() const{
    return m_serialized_payload_isValid;
}

QList<OAISignature> OAIAttestationOccurrence::getSignatures() const {
    return m_signatures;
}
void OAIAttestationOccurrence::setSignatures(const QList<OAISignature> &signatures) {
    m_signatures = signatures;
    m_signatures_isSet = true;
}

bool OAIAttestationOccurrence::is_signatures_Set() const{
    return m_signatures_isSet;
}

bool OAIAttestationOccurrence::is_signatures_Valid() const{
    return m_signatures_isValid;
}

bool OAIAttestationOccurrence::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_jwts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_serialized_payload_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_signatures.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAttestationOccurrence::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
