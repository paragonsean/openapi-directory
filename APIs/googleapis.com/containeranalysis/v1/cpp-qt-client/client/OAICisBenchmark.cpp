/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICisBenchmark.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICisBenchmark::OAICisBenchmark(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICisBenchmark::OAICisBenchmark() {
    this->initializeModel();
}

OAICisBenchmark::~OAICisBenchmark() {}

void OAICisBenchmark::initializeModel() {

    m_profile_level_isSet = false;
    m_profile_level_isValid = false;

    m_severity_isSet = false;
    m_severity_isValid = false;
}

void OAICisBenchmark::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICisBenchmark::fromJsonObject(QJsonObject json) {

    m_profile_level_isValid = ::OpenAPI::fromJsonValue(m_profile_level, json[QString("profileLevel")]);
    m_profile_level_isSet = !json[QString("profileLevel")].isNull() && m_profile_level_isValid;

    m_severity_isValid = ::OpenAPI::fromJsonValue(m_severity, json[QString("severity")]);
    m_severity_isSet = !json[QString("severity")].isNull() && m_severity_isValid;
}

QString OAICisBenchmark::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICisBenchmark::asJsonObject() const {
    QJsonObject obj;
    if (m_profile_level_isSet) {
        obj.insert(QString("profileLevel"), ::OpenAPI::toJsonValue(m_profile_level));
    }
    if (m_severity_isSet) {
        obj.insert(QString("severity"), ::OpenAPI::toJsonValue(m_severity));
    }
    return obj;
}

qint32 OAICisBenchmark::getProfileLevel() const {
    return m_profile_level;
}
void OAICisBenchmark::setProfileLevel(const qint32 &profile_level) {
    m_profile_level = profile_level;
    m_profile_level_isSet = true;
}

bool OAICisBenchmark::is_profile_level_Set() const{
    return m_profile_level_isSet;
}

bool OAICisBenchmark::is_profile_level_Valid() const{
    return m_profile_level_isValid;
}

QString OAICisBenchmark::getSeverity() const {
    return m_severity;
}
void OAICisBenchmark::setSeverity(const QString &severity) {
    m_severity = severity;
    m_severity_isSet = true;
}

bool OAICisBenchmark::is_severity_Set() const{
    return m_severity_isSet;
}

bool OAICisBenchmark::is_severity_Valid() const{
    return m_severity_isValid;
}

bool OAICisBenchmark::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_profile_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_severity_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICisBenchmark::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
