/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINote.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINote::OAINote(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINote::OAINote() {
    this->initializeModel();
}

OAINote::~OAINote() {}

void OAINote::initializeModel() {

    m_attestation_isSet = false;
    m_attestation_isValid = false;

    m_build_isSet = false;
    m_build_isValid = false;

    m_compliance_isSet = false;
    m_compliance_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_deployment_isSet = false;
    m_deployment_isValid = false;

    m_discovery_isSet = false;
    m_discovery_isValid = false;

    m_dsse_attestation_isSet = false;
    m_dsse_attestation_isValid = false;

    m_expiration_time_isSet = false;
    m_expiration_time_isValid = false;

    m_image_isSet = false;
    m_image_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_long_description_isSet = false;
    m_long_description_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_package_isSet = false;
    m_package_isValid = false;

    m_related_note_names_isSet = false;
    m_related_note_names_isValid = false;

    m_related_url_isSet = false;
    m_related_url_isValid = false;

    m_sbom_reference_isSet = false;
    m_sbom_reference_isValid = false;

    m_short_description_isSet = false;
    m_short_description_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;

    m_upgrade_isSet = false;
    m_upgrade_isValid = false;

    m_vulnerability_isSet = false;
    m_vulnerability_isValid = false;

    m_vulnerability_assessment_isSet = false;
    m_vulnerability_assessment_isValid = false;
}

void OAINote::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINote::fromJsonObject(QJsonObject json) {

    m_attestation_isValid = ::OpenAPI::fromJsonValue(m_attestation, json[QString("attestation")]);
    m_attestation_isSet = !json[QString("attestation")].isNull() && m_attestation_isValid;

    m_build_isValid = ::OpenAPI::fromJsonValue(m_build, json[QString("build")]);
    m_build_isSet = !json[QString("build")].isNull() && m_build_isValid;

    m_compliance_isValid = ::OpenAPI::fromJsonValue(m_compliance, json[QString("compliance")]);
    m_compliance_isSet = !json[QString("compliance")].isNull() && m_compliance_isValid;

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_deployment_isValid = ::OpenAPI::fromJsonValue(m_deployment, json[QString("deployment")]);
    m_deployment_isSet = !json[QString("deployment")].isNull() && m_deployment_isValid;

    m_discovery_isValid = ::OpenAPI::fromJsonValue(m_discovery, json[QString("discovery")]);
    m_discovery_isSet = !json[QString("discovery")].isNull() && m_discovery_isValid;

    m_dsse_attestation_isValid = ::OpenAPI::fromJsonValue(m_dsse_attestation, json[QString("dsseAttestation")]);
    m_dsse_attestation_isSet = !json[QString("dsseAttestation")].isNull() && m_dsse_attestation_isValid;

    m_expiration_time_isValid = ::OpenAPI::fromJsonValue(m_expiration_time, json[QString("expirationTime")]);
    m_expiration_time_isSet = !json[QString("expirationTime")].isNull() && m_expiration_time_isValid;

    m_image_isValid = ::OpenAPI::fromJsonValue(m_image, json[QString("image")]);
    m_image_isSet = !json[QString("image")].isNull() && m_image_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_long_description_isValid = ::OpenAPI::fromJsonValue(m_long_description, json[QString("longDescription")]);
    m_long_description_isSet = !json[QString("longDescription")].isNull() && m_long_description_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_package_isValid = ::OpenAPI::fromJsonValue(m_package, json[QString("package")]);
    m_package_isSet = !json[QString("package")].isNull() && m_package_isValid;

    m_related_note_names_isValid = ::OpenAPI::fromJsonValue(m_related_note_names, json[QString("relatedNoteNames")]);
    m_related_note_names_isSet = !json[QString("relatedNoteNames")].isNull() && m_related_note_names_isValid;

    m_related_url_isValid = ::OpenAPI::fromJsonValue(m_related_url, json[QString("relatedUrl")]);
    m_related_url_isSet = !json[QString("relatedUrl")].isNull() && m_related_url_isValid;

    m_sbom_reference_isValid = ::OpenAPI::fromJsonValue(m_sbom_reference, json[QString("sbomReference")]);
    m_sbom_reference_isSet = !json[QString("sbomReference")].isNull() && m_sbom_reference_isValid;

    m_short_description_isValid = ::OpenAPI::fromJsonValue(m_short_description, json[QString("shortDescription")]);
    m_short_description_isSet = !json[QString("shortDescription")].isNull() && m_short_description_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;

    m_upgrade_isValid = ::OpenAPI::fromJsonValue(m_upgrade, json[QString("upgrade")]);
    m_upgrade_isSet = !json[QString("upgrade")].isNull() && m_upgrade_isValid;

    m_vulnerability_isValid = ::OpenAPI::fromJsonValue(m_vulnerability, json[QString("vulnerability")]);
    m_vulnerability_isSet = !json[QString("vulnerability")].isNull() && m_vulnerability_isValid;

    m_vulnerability_assessment_isValid = ::OpenAPI::fromJsonValue(m_vulnerability_assessment, json[QString("vulnerabilityAssessment")]);
    m_vulnerability_assessment_isSet = !json[QString("vulnerabilityAssessment")].isNull() && m_vulnerability_assessment_isValid;
}

QString OAINote::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINote::asJsonObject() const {
    QJsonObject obj;
    if (m_attestation.isSet()) {
        obj.insert(QString("attestation"), ::OpenAPI::toJsonValue(m_attestation));
    }
    if (m_build.isSet()) {
        obj.insert(QString("build"), ::OpenAPI::toJsonValue(m_build));
    }
    if (m_compliance.isSet()) {
        obj.insert(QString("compliance"), ::OpenAPI::toJsonValue(m_compliance));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_deployment.isSet()) {
        obj.insert(QString("deployment"), ::OpenAPI::toJsonValue(m_deployment));
    }
    if (m_discovery.isSet()) {
        obj.insert(QString("discovery"), ::OpenAPI::toJsonValue(m_discovery));
    }
    if (m_dsse_attestation.isSet()) {
        obj.insert(QString("dsseAttestation"), ::OpenAPI::toJsonValue(m_dsse_attestation));
    }
    if (m_expiration_time_isSet) {
        obj.insert(QString("expirationTime"), ::OpenAPI::toJsonValue(m_expiration_time));
    }
    if (m_image.isSet()) {
        obj.insert(QString("image"), ::OpenAPI::toJsonValue(m_image));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_long_description_isSet) {
        obj.insert(QString("longDescription"), ::OpenAPI::toJsonValue(m_long_description));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_package.isSet()) {
        obj.insert(QString("package"), ::OpenAPI::toJsonValue(m_package));
    }
    if (m_related_note_names.size() > 0) {
        obj.insert(QString("relatedNoteNames"), ::OpenAPI::toJsonValue(m_related_note_names));
    }
    if (m_related_url.size() > 0) {
        obj.insert(QString("relatedUrl"), ::OpenAPI::toJsonValue(m_related_url));
    }
    if (m_sbom_reference.isSet()) {
        obj.insert(QString("sbomReference"), ::OpenAPI::toJsonValue(m_sbom_reference));
    }
    if (m_short_description_isSet) {
        obj.insert(QString("shortDescription"), ::OpenAPI::toJsonValue(m_short_description));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    if (m_upgrade.isSet()) {
        obj.insert(QString("upgrade"), ::OpenAPI::toJsonValue(m_upgrade));
    }
    if (m_vulnerability.isSet()) {
        obj.insert(QString("vulnerability"), ::OpenAPI::toJsonValue(m_vulnerability));
    }
    if (m_vulnerability_assessment.isSet()) {
        obj.insert(QString("vulnerabilityAssessment"), ::OpenAPI::toJsonValue(m_vulnerability_assessment));
    }
    return obj;
}

OAIAttestationNote OAINote::getAttestation() const {
    return m_attestation;
}
void OAINote::setAttestation(const OAIAttestationNote &attestation) {
    m_attestation = attestation;
    m_attestation_isSet = true;
}

bool OAINote::is_attestation_Set() const{
    return m_attestation_isSet;
}

bool OAINote::is_attestation_Valid() const{
    return m_attestation_isValid;
}

OAIBuildNote OAINote::getBuild() const {
    return m_build;
}
void OAINote::setBuild(const OAIBuildNote &build) {
    m_build = build;
    m_build_isSet = true;
}

bool OAINote::is_build_Set() const{
    return m_build_isSet;
}

bool OAINote::is_build_Valid() const{
    return m_build_isValid;
}

OAIComplianceNote OAINote::getCompliance() const {
    return m_compliance;
}
void OAINote::setCompliance(const OAIComplianceNote &compliance) {
    m_compliance = compliance;
    m_compliance_isSet = true;
}

bool OAINote::is_compliance_Set() const{
    return m_compliance_isSet;
}

bool OAINote::is_compliance_Valid() const{
    return m_compliance_isValid;
}

QString OAINote::getCreateTime() const {
    return m_create_time;
}
void OAINote::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAINote::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAINote::is_create_time_Valid() const{
    return m_create_time_isValid;
}

OAIDeploymentNote OAINote::getDeployment() const {
    return m_deployment;
}
void OAINote::setDeployment(const OAIDeploymentNote &deployment) {
    m_deployment = deployment;
    m_deployment_isSet = true;
}

bool OAINote::is_deployment_Set() const{
    return m_deployment_isSet;
}

bool OAINote::is_deployment_Valid() const{
    return m_deployment_isValid;
}

OAIDiscoveryNote OAINote::getDiscovery() const {
    return m_discovery;
}
void OAINote::setDiscovery(const OAIDiscoveryNote &discovery) {
    m_discovery = discovery;
    m_discovery_isSet = true;
}

bool OAINote::is_discovery_Set() const{
    return m_discovery_isSet;
}

bool OAINote::is_discovery_Valid() const{
    return m_discovery_isValid;
}

OAIDSSEAttestationNote OAINote::getDsseAttestation() const {
    return m_dsse_attestation;
}
void OAINote::setDsseAttestation(const OAIDSSEAttestationNote &dsse_attestation) {
    m_dsse_attestation = dsse_attestation;
    m_dsse_attestation_isSet = true;
}

bool OAINote::is_dsse_attestation_Set() const{
    return m_dsse_attestation_isSet;
}

bool OAINote::is_dsse_attestation_Valid() const{
    return m_dsse_attestation_isValid;
}

QString OAINote::getExpirationTime() const {
    return m_expiration_time;
}
void OAINote::setExpirationTime(const QString &expiration_time) {
    m_expiration_time = expiration_time;
    m_expiration_time_isSet = true;
}

bool OAINote::is_expiration_time_Set() const{
    return m_expiration_time_isSet;
}

bool OAINote::is_expiration_time_Valid() const{
    return m_expiration_time_isValid;
}

OAIImageNote OAINote::getImage() const {
    return m_image;
}
void OAINote::setImage(const OAIImageNote &image) {
    m_image = image;
    m_image_isSet = true;
}

bool OAINote::is_image_Set() const{
    return m_image_isSet;
}

bool OAINote::is_image_Valid() const{
    return m_image_isValid;
}

QString OAINote::getKind() const {
    return m_kind;
}
void OAINote::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAINote::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAINote::is_kind_Valid() const{
    return m_kind_isValid;
}

QString OAINote::getLongDescription() const {
    return m_long_description;
}
void OAINote::setLongDescription(const QString &long_description) {
    m_long_description = long_description;
    m_long_description_isSet = true;
}

bool OAINote::is_long_description_Set() const{
    return m_long_description_isSet;
}

bool OAINote::is_long_description_Valid() const{
    return m_long_description_isValid;
}

QString OAINote::getName() const {
    return m_name;
}
void OAINote::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAINote::is_name_Set() const{
    return m_name_isSet;
}

bool OAINote::is_name_Valid() const{
    return m_name_isValid;
}

OAIPackageNote OAINote::getPackage() const {
    return m_package;
}
void OAINote::setPackage(const OAIPackageNote &package) {
    m_package = package;
    m_package_isSet = true;
}

bool OAINote::is_package_Set() const{
    return m_package_isSet;
}

bool OAINote::is_package_Valid() const{
    return m_package_isValid;
}

QList<QString> OAINote::getRelatedNoteNames() const {
    return m_related_note_names;
}
void OAINote::setRelatedNoteNames(const QList<QString> &related_note_names) {
    m_related_note_names = related_note_names;
    m_related_note_names_isSet = true;
}

bool OAINote::is_related_note_names_Set() const{
    return m_related_note_names_isSet;
}

bool OAINote::is_related_note_names_Valid() const{
    return m_related_note_names_isValid;
}

QList<OAIRelatedUrl> OAINote::getRelatedUrl() const {
    return m_related_url;
}
void OAINote::setRelatedUrl(const QList<OAIRelatedUrl> &related_url) {
    m_related_url = related_url;
    m_related_url_isSet = true;
}

bool OAINote::is_related_url_Set() const{
    return m_related_url_isSet;
}

bool OAINote::is_related_url_Valid() const{
    return m_related_url_isValid;
}

OAISBOMReferenceNote OAINote::getSbomReference() const {
    return m_sbom_reference;
}
void OAINote::setSbomReference(const OAISBOMReferenceNote &sbom_reference) {
    m_sbom_reference = sbom_reference;
    m_sbom_reference_isSet = true;
}

bool OAINote::is_sbom_reference_Set() const{
    return m_sbom_reference_isSet;
}

bool OAINote::is_sbom_reference_Valid() const{
    return m_sbom_reference_isValid;
}

QString OAINote::getShortDescription() const {
    return m_short_description;
}
void OAINote::setShortDescription(const QString &short_description) {
    m_short_description = short_description;
    m_short_description_isSet = true;
}

bool OAINote::is_short_description_Set() const{
    return m_short_description_isSet;
}

bool OAINote::is_short_description_Valid() const{
    return m_short_description_isValid;
}

QString OAINote::getUpdateTime() const {
    return m_update_time;
}
void OAINote::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAINote::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAINote::is_update_time_Valid() const{
    return m_update_time_isValid;
}

OAIUpgradeNote OAINote::getUpgrade() const {
    return m_upgrade;
}
void OAINote::setUpgrade(const OAIUpgradeNote &upgrade) {
    m_upgrade = upgrade;
    m_upgrade_isSet = true;
}

bool OAINote::is_upgrade_Set() const{
    return m_upgrade_isSet;
}

bool OAINote::is_upgrade_Valid() const{
    return m_upgrade_isValid;
}

OAIVulnerabilityNote OAINote::getVulnerability() const {
    return m_vulnerability;
}
void OAINote::setVulnerability(const OAIVulnerabilityNote &vulnerability) {
    m_vulnerability = vulnerability;
    m_vulnerability_isSet = true;
}

bool OAINote::is_vulnerability_Set() const{
    return m_vulnerability_isSet;
}

bool OAINote::is_vulnerability_Valid() const{
    return m_vulnerability_isValid;
}

OAIVulnerabilityAssessmentNote OAINote::getVulnerabilityAssessment() const {
    return m_vulnerability_assessment;
}
void OAINote::setVulnerabilityAssessment(const OAIVulnerabilityAssessmentNote &vulnerability_assessment) {
    m_vulnerability_assessment = vulnerability_assessment;
    m_vulnerability_assessment_isSet = true;
}

bool OAINote::is_vulnerability_assessment_Set() const{
    return m_vulnerability_assessment_isSet;
}

bool OAINote::is_vulnerability_assessment_Valid() const{
    return m_vulnerability_assessment_isValid;
}

bool OAINote::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attestation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_build.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_compliance.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deployment.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_discovery.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dsse_attestation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiration_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_long_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_package.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_related_note_names.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_related_url.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_sbom_reference.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_short_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_upgrade.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vulnerability.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vulnerability_assessment.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINote::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
