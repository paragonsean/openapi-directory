/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAISignature.h
 *
 * Verifiers (e.g. Kritis implementations) MUST verify signatures with respect to the trust anchors defined in policy (e.g. a Kritis policy). Typically this means that the verifier has been configured with a map from &#x60;public_key_id&#x60; to public key material (and any required parameters, e.g. signing algorithm). In particular, verification implementations MUST NOT treat the signature &#x60;public_key_id&#x60; as anything more than a key lookup hint. The &#x60;public_key_id&#x60; DOES NOT validate or authenticate a public key; it only provides a mechanism for quickly selecting a public key ALREADY CONFIGURED on the verifier through a trusted channel. Verification implementations MUST reject signatures in any of the following circumstances: * The &#x60;public_key_id&#x60; is not recognized by the verifier. * The public key that &#x60;public_key_id&#x60; refers to does not verify the signature with respect to the payload. The &#x60;signature&#x60; contents SHOULD NOT be \&quot;attached\&quot; (where the payload is included with the serialized &#x60;signature&#x60; bytes). Verifiers MUST ignore any \&quot;attached\&quot; payload and only verify signatures with respect to explicitly provided payload (e.g. a &#x60;payload&#x60; field on the proto message that holds this Signature, or the canonical serialization of the proto message that holds this signature).
 */

#ifndef OAISignature_H
#define OAISignature_H

#include <QJsonObject>

#include <QByteArray>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAISignature : public OAIObject {
public:
    OAISignature();
    OAISignature(QString json);
    ~OAISignature() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getPublicKeyId() const;
    void setPublicKeyId(const QString &public_key_id);
    bool is_public_key_id_Set() const;
    bool is_public_key_id_Valid() const;

    QByteArray getSignature() const;
    void setSignature(const QByteArray &signature);
    bool is_signature_Set() const;
    bool is_signature_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_public_key_id;
    bool m_public_key_id_isSet;
    bool m_public_key_id_isValid;

    QByteArray m_signature;
    bool m_signature_isSet;
    bool m_signature_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAISignature)

#endif // OAISignature_H
