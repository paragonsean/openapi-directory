/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeploymentNote.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeploymentNote::OAIDeploymentNote(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeploymentNote::OAIDeploymentNote() {
    this->initializeModel();
}

OAIDeploymentNote::~OAIDeploymentNote() {}

void OAIDeploymentNote::initializeModel() {

    m_resource_uri_isSet = false;
    m_resource_uri_isValid = false;
}

void OAIDeploymentNote::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeploymentNote::fromJsonObject(QJsonObject json) {

    m_resource_uri_isValid = ::OpenAPI::fromJsonValue(m_resource_uri, json[QString("resourceUri")]);
    m_resource_uri_isSet = !json[QString("resourceUri")].isNull() && m_resource_uri_isValid;
}

QString OAIDeploymentNote::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeploymentNote::asJsonObject() const {
    QJsonObject obj;
    if (m_resource_uri.size() > 0) {
        obj.insert(QString("resourceUri"), ::OpenAPI::toJsonValue(m_resource_uri));
    }
    return obj;
}

QList<QString> OAIDeploymentNote::getResourceUri() const {
    return m_resource_uri;
}
void OAIDeploymentNote::setResourceUri(const QList<QString> &resource_uri) {
    m_resource_uri = resource_uri;
    m_resource_uri_isSet = true;
}

bool OAIDeploymentNote::is_resource_uri_Set() const{
    return m_resource_uri_isSet;
}

bool OAIDeploymentNote::is_resource_uri_Valid() const{
    return m_resource_uri_isValid;
}

bool OAIDeploymentNote::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_resource_uri.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeploymentNote::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
