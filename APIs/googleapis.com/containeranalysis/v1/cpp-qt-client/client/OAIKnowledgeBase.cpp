/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIKnowledgeBase.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIKnowledgeBase::OAIKnowledgeBase(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIKnowledgeBase::OAIKnowledgeBase() {
    this->initializeModel();
}

OAIKnowledgeBase::~OAIKnowledgeBase() {}

void OAIKnowledgeBase::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIKnowledgeBase::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIKnowledgeBase::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIKnowledgeBase::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIKnowledgeBase::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAIKnowledgeBase::getName() const {
    return m_name;
}
void OAIKnowledgeBase::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIKnowledgeBase::is_name_Set() const{
    return m_name_isSet;
}

bool OAIKnowledgeBase::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIKnowledgeBase::getUrl() const {
    return m_url;
}
void OAIKnowledgeBase::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIKnowledgeBase::is_url_Set() const{
    return m_url_isSet;
}

bool OAIKnowledgeBase::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIKnowledgeBase::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIKnowledgeBase::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
