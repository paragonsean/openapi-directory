/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISlsaProvenanceZeroTwo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISlsaProvenanceZeroTwo::OAISlsaProvenanceZeroTwo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISlsaProvenanceZeroTwo::OAISlsaProvenanceZeroTwo() {
    this->initializeModel();
}

OAISlsaProvenanceZeroTwo::~OAISlsaProvenanceZeroTwo() {}

void OAISlsaProvenanceZeroTwo::initializeModel() {

    m_build_config_isSet = false;
    m_build_config_isValid = false;

    m_build_type_isSet = false;
    m_build_type_isValid = false;

    m_builder_isSet = false;
    m_builder_isValid = false;

    m_invocation_isSet = false;
    m_invocation_isValid = false;

    m_materials_isSet = false;
    m_materials_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;
}

void OAISlsaProvenanceZeroTwo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISlsaProvenanceZeroTwo::fromJsonObject(QJsonObject json) {

    m_build_config_isValid = ::OpenAPI::fromJsonValue(m_build_config, json[QString("buildConfig")]);
    m_build_config_isSet = !json[QString("buildConfig")].isNull() && m_build_config_isValid;

    m_build_type_isValid = ::OpenAPI::fromJsonValue(m_build_type, json[QString("buildType")]);
    m_build_type_isSet = !json[QString("buildType")].isNull() && m_build_type_isValid;

    m_builder_isValid = ::OpenAPI::fromJsonValue(m_builder, json[QString("builder")]);
    m_builder_isSet = !json[QString("builder")].isNull() && m_builder_isValid;

    m_invocation_isValid = ::OpenAPI::fromJsonValue(m_invocation, json[QString("invocation")]);
    m_invocation_isSet = !json[QString("invocation")].isNull() && m_invocation_isValid;

    m_materials_isValid = ::OpenAPI::fromJsonValue(m_materials, json[QString("materials")]);
    m_materials_isSet = !json[QString("materials")].isNull() && m_materials_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;
}

QString OAISlsaProvenanceZeroTwo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISlsaProvenanceZeroTwo::asJsonObject() const {
    QJsonObject obj;
    if (m_build_config.size() > 0) {
        obj.insert(QString("buildConfig"), ::OpenAPI::toJsonValue(m_build_config));
    }
    if (m_build_type_isSet) {
        obj.insert(QString("buildType"), ::OpenAPI::toJsonValue(m_build_type));
    }
    if (m_builder.isSet()) {
        obj.insert(QString("builder"), ::OpenAPI::toJsonValue(m_builder));
    }
    if (m_invocation.isSet()) {
        obj.insert(QString("invocation"), ::OpenAPI::toJsonValue(m_invocation));
    }
    if (m_materials.size() > 0) {
        obj.insert(QString("materials"), ::OpenAPI::toJsonValue(m_materials));
    }
    if (m_metadata.isSet()) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    return obj;
}

QMap<QString, QJsonValue> OAISlsaProvenanceZeroTwo::getBuildConfig() const {
    return m_build_config;
}
void OAISlsaProvenanceZeroTwo::setBuildConfig(const QMap<QString, QJsonValue> &build_config) {
    m_build_config = build_config;
    m_build_config_isSet = true;
}

bool OAISlsaProvenanceZeroTwo::is_build_config_Set() const{
    return m_build_config_isSet;
}

bool OAISlsaProvenanceZeroTwo::is_build_config_Valid() const{
    return m_build_config_isValid;
}

QString OAISlsaProvenanceZeroTwo::getBuildType() const {
    return m_build_type;
}
void OAISlsaProvenanceZeroTwo::setBuildType(const QString &build_type) {
    m_build_type = build_type;
    m_build_type_isSet = true;
}

bool OAISlsaProvenanceZeroTwo::is_build_type_Set() const{
    return m_build_type_isSet;
}

bool OAISlsaProvenanceZeroTwo::is_build_type_Valid() const{
    return m_build_type_isValid;
}

OAIGrafeasV1SlsaProvenanceZeroTwoSlsaBuilder OAISlsaProvenanceZeroTwo::getBuilder() const {
    return m_builder;
}
void OAISlsaProvenanceZeroTwo::setBuilder(const OAIGrafeasV1SlsaProvenanceZeroTwoSlsaBuilder &builder) {
    m_builder = builder;
    m_builder_isSet = true;
}

bool OAISlsaProvenanceZeroTwo::is_builder_Set() const{
    return m_builder_isSet;
}

bool OAISlsaProvenanceZeroTwo::is_builder_Valid() const{
    return m_builder_isValid;
}

OAIGrafeasV1SlsaProvenanceZeroTwoSlsaInvocation OAISlsaProvenanceZeroTwo::getInvocation() const {
    return m_invocation;
}
void OAISlsaProvenanceZeroTwo::setInvocation(const OAIGrafeasV1SlsaProvenanceZeroTwoSlsaInvocation &invocation) {
    m_invocation = invocation;
    m_invocation_isSet = true;
}

bool OAISlsaProvenanceZeroTwo::is_invocation_Set() const{
    return m_invocation_isSet;
}

bool OAISlsaProvenanceZeroTwo::is_invocation_Valid() const{
    return m_invocation_isValid;
}

QList<OAIGrafeasV1SlsaProvenanceZeroTwoSlsaMaterial> OAISlsaProvenanceZeroTwo::getMaterials() const {
    return m_materials;
}
void OAISlsaProvenanceZeroTwo::setMaterials(const QList<OAIGrafeasV1SlsaProvenanceZeroTwoSlsaMaterial> &materials) {
    m_materials = materials;
    m_materials_isSet = true;
}

bool OAISlsaProvenanceZeroTwo::is_materials_Set() const{
    return m_materials_isSet;
}

bool OAISlsaProvenanceZeroTwo::is_materials_Valid() const{
    return m_materials_isValid;
}

OAIGrafeasV1SlsaProvenanceZeroTwoSlsaMetadata OAISlsaProvenanceZeroTwo::getMetadata() const {
    return m_metadata;
}
void OAISlsaProvenanceZeroTwo::setMetadata(const OAIGrafeasV1SlsaProvenanceZeroTwoSlsaMetadata &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAISlsaProvenanceZeroTwo::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAISlsaProvenanceZeroTwo::is_metadata_Valid() const{
    return m_metadata_isValid;
}

bool OAISlsaProvenanceZeroTwo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_build_config.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_build_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_builder.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_invocation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_materials.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISlsaProvenanceZeroTwo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
