/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIContaineranalysisGoogleDevtoolsCloudbuildV1StorageSourceManifest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIContaineranalysisGoogleDevtoolsCloudbuildV1StorageSourceManifest::OAIContaineranalysisGoogleDevtoolsCloudbuildV1StorageSourceManifest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIContaineranalysisGoogleDevtoolsCloudbuildV1StorageSourceManifest::OAIContaineranalysisGoogleDevtoolsCloudbuildV1StorageSourceManifest() {
    this->initializeModel();
}

OAIContaineranalysisGoogleDevtoolsCloudbuildV1StorageSourceManifest::~OAIContaineranalysisGoogleDevtoolsCloudbuildV1StorageSourceManifest() {}

void OAIContaineranalysisGoogleDevtoolsCloudbuildV1StorageSourceManifest::initializeModel() {

    m_bucket_isSet = false;
    m_bucket_isValid = false;

    m_generation_isSet = false;
    m_generation_isValid = false;

    m_object_isSet = false;
    m_object_isValid = false;
}

void OAIContaineranalysisGoogleDevtoolsCloudbuildV1StorageSourceManifest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIContaineranalysisGoogleDevtoolsCloudbuildV1StorageSourceManifest::fromJsonObject(QJsonObject json) {

    m_bucket_isValid = ::OpenAPI::fromJsonValue(m_bucket, json[QString("bucket")]);
    m_bucket_isSet = !json[QString("bucket")].isNull() && m_bucket_isValid;

    m_generation_isValid = ::OpenAPI::fromJsonValue(m_generation, json[QString("generation")]);
    m_generation_isSet = !json[QString("generation")].isNull() && m_generation_isValid;

    m_object_isValid = ::OpenAPI::fromJsonValue(m_object, json[QString("object")]);
    m_object_isSet = !json[QString("object")].isNull() && m_object_isValid;
}

QString OAIContaineranalysisGoogleDevtoolsCloudbuildV1StorageSourceManifest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIContaineranalysisGoogleDevtoolsCloudbuildV1StorageSourceManifest::asJsonObject() const {
    QJsonObject obj;
    if (m_bucket_isSet) {
        obj.insert(QString("bucket"), ::OpenAPI::toJsonValue(m_bucket));
    }
    if (m_generation_isSet) {
        obj.insert(QString("generation"), ::OpenAPI::toJsonValue(m_generation));
    }
    if (m_object_isSet) {
        obj.insert(QString("object"), ::OpenAPI::toJsonValue(m_object));
    }
    return obj;
}

QString OAIContaineranalysisGoogleDevtoolsCloudbuildV1StorageSourceManifest::getBucket() const {
    return m_bucket;
}
void OAIContaineranalysisGoogleDevtoolsCloudbuildV1StorageSourceManifest::setBucket(const QString &bucket) {
    m_bucket = bucket;
    m_bucket_isSet = true;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1StorageSourceManifest::is_bucket_Set() const{
    return m_bucket_isSet;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1StorageSourceManifest::is_bucket_Valid() const{
    return m_bucket_isValid;
}

QString OAIContaineranalysisGoogleDevtoolsCloudbuildV1StorageSourceManifest::getGeneration() const {
    return m_generation;
}
void OAIContaineranalysisGoogleDevtoolsCloudbuildV1StorageSourceManifest::setGeneration(const QString &generation) {
    m_generation = generation;
    m_generation_isSet = true;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1StorageSourceManifest::is_generation_Set() const{
    return m_generation_isSet;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1StorageSourceManifest::is_generation_Valid() const{
    return m_generation_isValid;
}

QString OAIContaineranalysisGoogleDevtoolsCloudbuildV1StorageSourceManifest::getObject() const {
    return m_object;
}
void OAIContaineranalysisGoogleDevtoolsCloudbuildV1StorageSourceManifest::setObject(const QString &object) {
    m_object = object;
    m_object_isSet = true;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1StorageSourceManifest::is_object_Set() const{
    return m_object_isSet;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1StorageSourceManifest::is_object_Valid() const{
    return m_object_isValid;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1StorageSourceManifest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bucket_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_generation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIContaineranalysisGoogleDevtoolsCloudbuildV1StorageSourceManifest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
