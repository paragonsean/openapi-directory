/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGitSourceContext.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGitSourceContext::OAIGitSourceContext(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGitSourceContext::OAIGitSourceContext() {
    this->initializeModel();
}

OAIGitSourceContext::~OAIGitSourceContext() {}

void OAIGitSourceContext::initializeModel() {

    m_revision_id_isSet = false;
    m_revision_id_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIGitSourceContext::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGitSourceContext::fromJsonObject(QJsonObject json) {

    m_revision_id_isValid = ::OpenAPI::fromJsonValue(m_revision_id, json[QString("revisionId")]);
    m_revision_id_isSet = !json[QString("revisionId")].isNull() && m_revision_id_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIGitSourceContext::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGitSourceContext::asJsonObject() const {
    QJsonObject obj;
    if (m_revision_id_isSet) {
        obj.insert(QString("revisionId"), ::OpenAPI::toJsonValue(m_revision_id));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAIGitSourceContext::getRevisionId() const {
    return m_revision_id;
}
void OAIGitSourceContext::setRevisionId(const QString &revision_id) {
    m_revision_id = revision_id;
    m_revision_id_isSet = true;
}

bool OAIGitSourceContext::is_revision_id_Set() const{
    return m_revision_id_isSet;
}

bool OAIGitSourceContext::is_revision_id_Valid() const{
    return m_revision_id_isValid;
}

QString OAIGitSourceContext::getUrl() const {
    return m_url;
}
void OAIGitSourceContext::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIGitSourceContext::is_url_Set() const{
    return m_url_isSet;
}

bool OAIGitSourceContext::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIGitSourceContext::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_revision_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGitSourceContext::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
