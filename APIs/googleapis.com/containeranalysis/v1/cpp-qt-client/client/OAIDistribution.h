/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDistribution.h
 *
 * This represents a particular channel of distribution for a given package. E.g., Debian&#39;s jessie-backports dpkg mirror.
 */

#ifndef OAIDistribution_H
#define OAIDistribution_H

#include <QJsonObject>

#include "OAIVersion.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIVersion;

class OAIDistribution : public OAIObject {
public:
    OAIDistribution();
    OAIDistribution(QString json);
    ~OAIDistribution() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getArchitecture() const;
    void setArchitecture(const QString &architecture);
    bool is_architecture_Set() const;
    bool is_architecture_Valid() const;

    QString getCpeUri() const;
    void setCpeUri(const QString &cpe_uri);
    bool is_cpe_uri_Set() const;
    bool is_cpe_uri_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    OAIVersion getLatestVersion() const;
    void setLatestVersion(const OAIVersion &latest_version);
    bool is_latest_version_Set() const;
    bool is_latest_version_Valid() const;

    QString getMaintainer() const;
    void setMaintainer(const QString &maintainer);
    bool is_maintainer_Set() const;
    bool is_maintainer_Valid() const;

    QString getUrl() const;
    void setUrl(const QString &url);
    bool is_url_Set() const;
    bool is_url_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_architecture;
    bool m_architecture_isSet;
    bool m_architecture_isValid;

    QString m_cpe_uri;
    bool m_cpe_uri_isSet;
    bool m_cpe_uri_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    OAIVersion m_latest_version;
    bool m_latest_version_isSet;
    bool m_latest_version_isValid;

    QString m_maintainer;
    bool m_maintainer_isSet;
    bool m_maintainer_isValid;

    QString m_url;
    bool m_url_isSet;
    bool m_url_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDistribution)

#endif // OAIDistribution_H
