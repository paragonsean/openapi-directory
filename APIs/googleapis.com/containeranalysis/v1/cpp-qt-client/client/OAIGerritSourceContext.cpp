/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGerritSourceContext.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGerritSourceContext::OAIGerritSourceContext(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGerritSourceContext::OAIGerritSourceContext() {
    this->initializeModel();
}

OAIGerritSourceContext::~OAIGerritSourceContext() {}

void OAIGerritSourceContext::initializeModel() {

    m_alias_context_isSet = false;
    m_alias_context_isValid = false;

    m_gerrit_project_isSet = false;
    m_gerrit_project_isValid = false;

    m_host_uri_isSet = false;
    m_host_uri_isValid = false;

    m_revision_id_isSet = false;
    m_revision_id_isValid = false;
}

void OAIGerritSourceContext::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGerritSourceContext::fromJsonObject(QJsonObject json) {

    m_alias_context_isValid = ::OpenAPI::fromJsonValue(m_alias_context, json[QString("aliasContext")]);
    m_alias_context_isSet = !json[QString("aliasContext")].isNull() && m_alias_context_isValid;

    m_gerrit_project_isValid = ::OpenAPI::fromJsonValue(m_gerrit_project, json[QString("gerritProject")]);
    m_gerrit_project_isSet = !json[QString("gerritProject")].isNull() && m_gerrit_project_isValid;

    m_host_uri_isValid = ::OpenAPI::fromJsonValue(m_host_uri, json[QString("hostUri")]);
    m_host_uri_isSet = !json[QString("hostUri")].isNull() && m_host_uri_isValid;

    m_revision_id_isValid = ::OpenAPI::fromJsonValue(m_revision_id, json[QString("revisionId")]);
    m_revision_id_isSet = !json[QString("revisionId")].isNull() && m_revision_id_isValid;
}

QString OAIGerritSourceContext::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGerritSourceContext::asJsonObject() const {
    QJsonObject obj;
    if (m_alias_context.isSet()) {
        obj.insert(QString("aliasContext"), ::OpenAPI::toJsonValue(m_alias_context));
    }
    if (m_gerrit_project_isSet) {
        obj.insert(QString("gerritProject"), ::OpenAPI::toJsonValue(m_gerrit_project));
    }
    if (m_host_uri_isSet) {
        obj.insert(QString("hostUri"), ::OpenAPI::toJsonValue(m_host_uri));
    }
    if (m_revision_id_isSet) {
        obj.insert(QString("revisionId"), ::OpenAPI::toJsonValue(m_revision_id));
    }
    return obj;
}

OAIAliasContext OAIGerritSourceContext::getAliasContext() const {
    return m_alias_context;
}
void OAIGerritSourceContext::setAliasContext(const OAIAliasContext &alias_context) {
    m_alias_context = alias_context;
    m_alias_context_isSet = true;
}

bool OAIGerritSourceContext::is_alias_context_Set() const{
    return m_alias_context_isSet;
}

bool OAIGerritSourceContext::is_alias_context_Valid() const{
    return m_alias_context_isValid;
}

QString OAIGerritSourceContext::getGerritProject() const {
    return m_gerrit_project;
}
void OAIGerritSourceContext::setGerritProject(const QString &gerrit_project) {
    m_gerrit_project = gerrit_project;
    m_gerrit_project_isSet = true;
}

bool OAIGerritSourceContext::is_gerrit_project_Set() const{
    return m_gerrit_project_isSet;
}

bool OAIGerritSourceContext::is_gerrit_project_Valid() const{
    return m_gerrit_project_isValid;
}

QString OAIGerritSourceContext::getHostUri() const {
    return m_host_uri;
}
void OAIGerritSourceContext::setHostUri(const QString &host_uri) {
    m_host_uri = host_uri;
    m_host_uri_isSet = true;
}

bool OAIGerritSourceContext::is_host_uri_Set() const{
    return m_host_uri_isSet;
}

bool OAIGerritSourceContext::is_host_uri_Valid() const{
    return m_host_uri_isValid;
}

QString OAIGerritSourceContext::getRevisionId() const {
    return m_revision_id;
}
void OAIGerritSourceContext::setRevisionId(const QString &revision_id) {
    m_revision_id = revision_id;
    m_revision_id_isSet = true;
}

bool OAIGerritSourceContext::is_revision_id_Set() const{
    return m_revision_id_isSet;
}

bool OAIGerritSourceContext::is_revision_id_Valid() const{
    return m_revision_id_isValid;
}

bool OAIGerritSourceContext::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_alias_context.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_gerrit_project_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_host_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_revision_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGerritSourceContext::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
