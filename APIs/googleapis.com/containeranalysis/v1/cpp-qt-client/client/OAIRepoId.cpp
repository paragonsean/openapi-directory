/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRepoId.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRepoId::OAIRepoId(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRepoId::OAIRepoId() {
    this->initializeModel();
}

OAIRepoId::~OAIRepoId() {}

void OAIRepoId::initializeModel() {

    m_project_repo_id_isSet = false;
    m_project_repo_id_isValid = false;

    m_uid_isSet = false;
    m_uid_isValid = false;
}

void OAIRepoId::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRepoId::fromJsonObject(QJsonObject json) {

    m_project_repo_id_isValid = ::OpenAPI::fromJsonValue(m_project_repo_id, json[QString("projectRepoId")]);
    m_project_repo_id_isSet = !json[QString("projectRepoId")].isNull() && m_project_repo_id_isValid;

    m_uid_isValid = ::OpenAPI::fromJsonValue(m_uid, json[QString("uid")]);
    m_uid_isSet = !json[QString("uid")].isNull() && m_uid_isValid;
}

QString OAIRepoId::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRepoId::asJsonObject() const {
    QJsonObject obj;
    if (m_project_repo_id.isSet()) {
        obj.insert(QString("projectRepoId"), ::OpenAPI::toJsonValue(m_project_repo_id));
    }
    if (m_uid_isSet) {
        obj.insert(QString("uid"), ::OpenAPI::toJsonValue(m_uid));
    }
    return obj;
}

OAIProjectRepoId OAIRepoId::getProjectRepoId() const {
    return m_project_repo_id;
}
void OAIRepoId::setProjectRepoId(const OAIProjectRepoId &project_repo_id) {
    m_project_repo_id = project_repo_id;
    m_project_repo_id_isSet = true;
}

bool OAIRepoId::is_project_repo_id_Set() const{
    return m_project_repo_id_isSet;
}

bool OAIRepoId::is_project_repo_id_Valid() const{
    return m_project_repo_id_isValid;
}

QString OAIRepoId::getUid() const {
    return m_uid;
}
void OAIRepoId::setUid(const QString &uid) {
    m_uid = uid;
    m_uid_isSet = true;
}

bool OAIRepoId::is_uid_Set() const{
    return m_uid_isSet;
}

bool OAIRepoId::is_uid_Valid() const{
    return m_uid_isValid;
}

bool OAIRepoId::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_project_repo_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_uid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRepoId::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
