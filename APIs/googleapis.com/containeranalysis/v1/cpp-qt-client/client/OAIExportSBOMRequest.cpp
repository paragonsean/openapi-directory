/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExportSBOMRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExportSBOMRequest::OAIExportSBOMRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExportSBOMRequest::OAIExportSBOMRequest() {
    this->initializeModel();
}

OAIExportSBOMRequest::~OAIExportSBOMRequest() {}

void OAIExportSBOMRequest::initializeModel() {

    m_cloud_storage_location_isSet = false;
    m_cloud_storage_location_isValid = false;
}

void OAIExportSBOMRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExportSBOMRequest::fromJsonObject(QJsonObject json) {

    m_cloud_storage_location_isValid = ::OpenAPI::fromJsonValue(m_cloud_storage_location, json[QString("cloudStorageLocation")]);
    m_cloud_storage_location_isSet = !json[QString("cloudStorageLocation")].isNull() && m_cloud_storage_location_isValid;
}

QString OAIExportSBOMRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExportSBOMRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_cloud_storage_location_isSet) {
        obj.insert(QString("cloudStorageLocation"), ::OpenAPI::toJsonValue(m_cloud_storage_location));
    }
    return obj;
}

OAIObject OAIExportSBOMRequest::getCloudStorageLocation() const {
    return m_cloud_storage_location;
}
void OAIExportSBOMRequest::setCloudStorageLocation(const OAIObject &cloud_storage_location) {
    m_cloud_storage_location = cloud_storage_location;
    m_cloud_storage_location_isSet = true;
}

bool OAIExportSBOMRequest::is_cloud_storage_location_Set() const{
    return m_cloud_storage_location_isSet;
}

bool OAIExportSBOMRequest::is_cloud_storage_location_Valid() const{
    return m_cloud_storage_location_isValid;
}

bool OAIExportSBOMRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cloud_storage_location_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExportSBOMRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
