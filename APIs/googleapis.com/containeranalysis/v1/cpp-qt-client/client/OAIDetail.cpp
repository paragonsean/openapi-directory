/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDetail.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDetail::OAIDetail(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDetail::OAIDetail() {
    this->initializeModel();
}

OAIDetail::~OAIDetail() {}

void OAIDetail::initializeModel() {

    m_affected_cpe_uri_isSet = false;
    m_affected_cpe_uri_isValid = false;

    m_affected_package_isSet = false;
    m_affected_package_isValid = false;

    m_affected_version_end_isSet = false;
    m_affected_version_end_isValid = false;

    m_affected_version_start_isSet = false;
    m_affected_version_start_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_fixed_cpe_uri_isSet = false;
    m_fixed_cpe_uri_isValid = false;

    m_fixed_package_isSet = false;
    m_fixed_package_isValid = false;

    m_fixed_version_isSet = false;
    m_fixed_version_isValid = false;

    m_is_obsolete_isSet = false;
    m_is_obsolete_isValid = false;

    m_package_type_isSet = false;
    m_package_type_isValid = false;

    m_severity_name_isSet = false;
    m_severity_name_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;

    m_source_update_time_isSet = false;
    m_source_update_time_isValid = false;

    m_vendor_isSet = false;
    m_vendor_isValid = false;
}

void OAIDetail::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDetail::fromJsonObject(QJsonObject json) {

    m_affected_cpe_uri_isValid = ::OpenAPI::fromJsonValue(m_affected_cpe_uri, json[QString("affectedCpeUri")]);
    m_affected_cpe_uri_isSet = !json[QString("affectedCpeUri")].isNull() && m_affected_cpe_uri_isValid;

    m_affected_package_isValid = ::OpenAPI::fromJsonValue(m_affected_package, json[QString("affectedPackage")]);
    m_affected_package_isSet = !json[QString("affectedPackage")].isNull() && m_affected_package_isValid;

    m_affected_version_end_isValid = ::OpenAPI::fromJsonValue(m_affected_version_end, json[QString("affectedVersionEnd")]);
    m_affected_version_end_isSet = !json[QString("affectedVersionEnd")].isNull() && m_affected_version_end_isValid;

    m_affected_version_start_isValid = ::OpenAPI::fromJsonValue(m_affected_version_start, json[QString("affectedVersionStart")]);
    m_affected_version_start_isSet = !json[QString("affectedVersionStart")].isNull() && m_affected_version_start_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_fixed_cpe_uri_isValid = ::OpenAPI::fromJsonValue(m_fixed_cpe_uri, json[QString("fixedCpeUri")]);
    m_fixed_cpe_uri_isSet = !json[QString("fixedCpeUri")].isNull() && m_fixed_cpe_uri_isValid;

    m_fixed_package_isValid = ::OpenAPI::fromJsonValue(m_fixed_package, json[QString("fixedPackage")]);
    m_fixed_package_isSet = !json[QString("fixedPackage")].isNull() && m_fixed_package_isValid;

    m_fixed_version_isValid = ::OpenAPI::fromJsonValue(m_fixed_version, json[QString("fixedVersion")]);
    m_fixed_version_isSet = !json[QString("fixedVersion")].isNull() && m_fixed_version_isValid;

    m_is_obsolete_isValid = ::OpenAPI::fromJsonValue(m_is_obsolete, json[QString("isObsolete")]);
    m_is_obsolete_isSet = !json[QString("isObsolete")].isNull() && m_is_obsolete_isValid;

    m_package_type_isValid = ::OpenAPI::fromJsonValue(m_package_type, json[QString("packageType")]);
    m_package_type_isSet = !json[QString("packageType")].isNull() && m_package_type_isValid;

    m_severity_name_isValid = ::OpenAPI::fromJsonValue(m_severity_name, json[QString("severityName")]);
    m_severity_name_isSet = !json[QString("severityName")].isNull() && m_severity_name_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;

    m_source_update_time_isValid = ::OpenAPI::fromJsonValue(m_source_update_time, json[QString("sourceUpdateTime")]);
    m_source_update_time_isSet = !json[QString("sourceUpdateTime")].isNull() && m_source_update_time_isValid;

    m_vendor_isValid = ::OpenAPI::fromJsonValue(m_vendor, json[QString("vendor")]);
    m_vendor_isSet = !json[QString("vendor")].isNull() && m_vendor_isValid;
}

QString OAIDetail::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDetail::asJsonObject() const {
    QJsonObject obj;
    if (m_affected_cpe_uri_isSet) {
        obj.insert(QString("affectedCpeUri"), ::OpenAPI::toJsonValue(m_affected_cpe_uri));
    }
    if (m_affected_package_isSet) {
        obj.insert(QString("affectedPackage"), ::OpenAPI::toJsonValue(m_affected_package));
    }
    if (m_affected_version_end.isSet()) {
        obj.insert(QString("affectedVersionEnd"), ::OpenAPI::toJsonValue(m_affected_version_end));
    }
    if (m_affected_version_start.isSet()) {
        obj.insert(QString("affectedVersionStart"), ::OpenAPI::toJsonValue(m_affected_version_start));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_fixed_cpe_uri_isSet) {
        obj.insert(QString("fixedCpeUri"), ::OpenAPI::toJsonValue(m_fixed_cpe_uri));
    }
    if (m_fixed_package_isSet) {
        obj.insert(QString("fixedPackage"), ::OpenAPI::toJsonValue(m_fixed_package));
    }
    if (m_fixed_version.isSet()) {
        obj.insert(QString("fixedVersion"), ::OpenAPI::toJsonValue(m_fixed_version));
    }
    if (m_is_obsolete_isSet) {
        obj.insert(QString("isObsolete"), ::OpenAPI::toJsonValue(m_is_obsolete));
    }
    if (m_package_type_isSet) {
        obj.insert(QString("packageType"), ::OpenAPI::toJsonValue(m_package_type));
    }
    if (m_severity_name_isSet) {
        obj.insert(QString("severityName"), ::OpenAPI::toJsonValue(m_severity_name));
    }
    if (m_source_isSet) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_source_update_time_isSet) {
        obj.insert(QString("sourceUpdateTime"), ::OpenAPI::toJsonValue(m_source_update_time));
    }
    if (m_vendor_isSet) {
        obj.insert(QString("vendor"), ::OpenAPI::toJsonValue(m_vendor));
    }
    return obj;
}

QString OAIDetail::getAffectedCpeUri() const {
    return m_affected_cpe_uri;
}
void OAIDetail::setAffectedCpeUri(const QString &affected_cpe_uri) {
    m_affected_cpe_uri = affected_cpe_uri;
    m_affected_cpe_uri_isSet = true;
}

bool OAIDetail::is_affected_cpe_uri_Set() const{
    return m_affected_cpe_uri_isSet;
}

bool OAIDetail::is_affected_cpe_uri_Valid() const{
    return m_affected_cpe_uri_isValid;
}

QString OAIDetail::getAffectedPackage() const {
    return m_affected_package;
}
void OAIDetail::setAffectedPackage(const QString &affected_package) {
    m_affected_package = affected_package;
    m_affected_package_isSet = true;
}

bool OAIDetail::is_affected_package_Set() const{
    return m_affected_package_isSet;
}

bool OAIDetail::is_affected_package_Valid() const{
    return m_affected_package_isValid;
}

OAIVersion OAIDetail::getAffectedVersionEnd() const {
    return m_affected_version_end;
}
void OAIDetail::setAffectedVersionEnd(const OAIVersion &affected_version_end) {
    m_affected_version_end = affected_version_end;
    m_affected_version_end_isSet = true;
}

bool OAIDetail::is_affected_version_end_Set() const{
    return m_affected_version_end_isSet;
}

bool OAIDetail::is_affected_version_end_Valid() const{
    return m_affected_version_end_isValid;
}

OAIVersion OAIDetail::getAffectedVersionStart() const {
    return m_affected_version_start;
}
void OAIDetail::setAffectedVersionStart(const OAIVersion &affected_version_start) {
    m_affected_version_start = affected_version_start;
    m_affected_version_start_isSet = true;
}

bool OAIDetail::is_affected_version_start_Set() const{
    return m_affected_version_start_isSet;
}

bool OAIDetail::is_affected_version_start_Valid() const{
    return m_affected_version_start_isValid;
}

QString OAIDetail::getDescription() const {
    return m_description;
}
void OAIDetail::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIDetail::is_description_Set() const{
    return m_description_isSet;
}

bool OAIDetail::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIDetail::getFixedCpeUri() const {
    return m_fixed_cpe_uri;
}
void OAIDetail::setFixedCpeUri(const QString &fixed_cpe_uri) {
    m_fixed_cpe_uri = fixed_cpe_uri;
    m_fixed_cpe_uri_isSet = true;
}

bool OAIDetail::is_fixed_cpe_uri_Set() const{
    return m_fixed_cpe_uri_isSet;
}

bool OAIDetail::is_fixed_cpe_uri_Valid() const{
    return m_fixed_cpe_uri_isValid;
}

QString OAIDetail::getFixedPackage() const {
    return m_fixed_package;
}
void OAIDetail::setFixedPackage(const QString &fixed_package) {
    m_fixed_package = fixed_package;
    m_fixed_package_isSet = true;
}

bool OAIDetail::is_fixed_package_Set() const{
    return m_fixed_package_isSet;
}

bool OAIDetail::is_fixed_package_Valid() const{
    return m_fixed_package_isValid;
}

OAIVersion OAIDetail::getFixedVersion() const {
    return m_fixed_version;
}
void OAIDetail::setFixedVersion(const OAIVersion &fixed_version) {
    m_fixed_version = fixed_version;
    m_fixed_version_isSet = true;
}

bool OAIDetail::is_fixed_version_Set() const{
    return m_fixed_version_isSet;
}

bool OAIDetail::is_fixed_version_Valid() const{
    return m_fixed_version_isValid;
}

bool OAIDetail::isIsObsolete() const {
    return m_is_obsolete;
}
void OAIDetail::setIsObsolete(const bool &is_obsolete) {
    m_is_obsolete = is_obsolete;
    m_is_obsolete_isSet = true;
}

bool OAIDetail::is_is_obsolete_Set() const{
    return m_is_obsolete_isSet;
}

bool OAIDetail::is_is_obsolete_Valid() const{
    return m_is_obsolete_isValid;
}

QString OAIDetail::getPackageType() const {
    return m_package_type;
}
void OAIDetail::setPackageType(const QString &package_type) {
    m_package_type = package_type;
    m_package_type_isSet = true;
}

bool OAIDetail::is_package_type_Set() const{
    return m_package_type_isSet;
}

bool OAIDetail::is_package_type_Valid() const{
    return m_package_type_isValid;
}

QString OAIDetail::getSeverityName() const {
    return m_severity_name;
}
void OAIDetail::setSeverityName(const QString &severity_name) {
    m_severity_name = severity_name;
    m_severity_name_isSet = true;
}

bool OAIDetail::is_severity_name_Set() const{
    return m_severity_name_isSet;
}

bool OAIDetail::is_severity_name_Valid() const{
    return m_severity_name_isValid;
}

QString OAIDetail::getSource() const {
    return m_source;
}
void OAIDetail::setSource(const QString &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIDetail::is_source_Set() const{
    return m_source_isSet;
}

bool OAIDetail::is_source_Valid() const{
    return m_source_isValid;
}

QString OAIDetail::getSourceUpdateTime() const {
    return m_source_update_time;
}
void OAIDetail::setSourceUpdateTime(const QString &source_update_time) {
    m_source_update_time = source_update_time;
    m_source_update_time_isSet = true;
}

bool OAIDetail::is_source_update_time_Set() const{
    return m_source_update_time_isSet;
}

bool OAIDetail::is_source_update_time_Valid() const{
    return m_source_update_time_isValid;
}

QString OAIDetail::getVendor() const {
    return m_vendor;
}
void OAIDetail::setVendor(const QString &vendor) {
    m_vendor = vendor;
    m_vendor_isSet = true;
}

bool OAIDetail::is_vendor_Set() const{
    return m_vendor_isSet;
}

bool OAIDetail::is_vendor_Valid() const{
    return m_vendor_isValid;
}

bool OAIDetail::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_affected_cpe_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_affected_package_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_affected_version_end.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_affected_version_start.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fixed_cpe_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fixed_package_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fixed_version.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_obsolete_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_package_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_severity_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vendor_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDetail::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
