/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDSSEAttestationOccurrence.h
 *
 * Deprecated. Prefer to use a regular Occurrence, and populate the Envelope at the top level of the Occurrence.
 */

#ifndef OAIDSSEAttestationOccurrence_H
#define OAIDSSEAttestationOccurrence_H

#include <QJsonObject>

#include "OAIEnvelope.h"
#include "OAIInTotoStatement.h"

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIEnvelope;
class OAIInTotoStatement;

class OAIDSSEAttestationOccurrence : public OAIObject {
public:
    OAIDSSEAttestationOccurrence();
    OAIDSSEAttestationOccurrence(QString json);
    ~OAIDSSEAttestationOccurrence() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIEnvelope getEnvelope() const;
    void setEnvelope(const OAIEnvelope &envelope);
    bool is_envelope_Set() const;
    bool is_envelope_Valid() const;

    OAIInTotoStatement getStatement() const;
    void setStatement(const OAIInTotoStatement &statement);
    bool is_statement_Set() const;
    bool is_statement_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIEnvelope m_envelope;
    bool m_envelope_isSet;
    bool m_envelope_isValid;

    OAIInTotoStatement m_statement;
    bool m_statement_isSet;
    bool m_statement_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDSSEAttestationOccurrence)

#endif // OAIDSSEAttestationOccurrence_H
