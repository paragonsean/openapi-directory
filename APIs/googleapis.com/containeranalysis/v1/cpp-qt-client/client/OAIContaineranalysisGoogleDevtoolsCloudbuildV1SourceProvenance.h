/**
 * Container Analysis API
 * This API is a prerequisite for leveraging Artifact Analysis scanning capabilities in both Artifact Registry and with Advanced Vulnerability Insights (runtime scanning) in GKE. In addition, the Container Analysis API is an implementation of the Grafeas API, which enables storing, querying, and retrieval of critical metadata about all of your software artifacts.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance.h
 *
 * Provenance of the source. Ways to find the original source, or verify that some source was used for this build.
 */

#ifndef OAIContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance_H
#define OAIContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance_H

#include <QJsonObject>

#include "OAIContaineranalysisGoogleDevtoolsCloudbuildV1ConnectedRepository.h"
#include "OAIContaineranalysisGoogleDevtoolsCloudbuildV1FileHashes.h"
#include "OAIContaineranalysisGoogleDevtoolsCloudbuildV1GitSource.h"
#include "OAIContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource.h"
#include "OAIContaineranalysisGoogleDevtoolsCloudbuildV1StorageSource.h"
#include "OAIContaineranalysisGoogleDevtoolsCloudbuildV1StorageSourceManifest.h"
#include <QMap>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIContaineranalysisGoogleDevtoolsCloudbuildV1FileHashes;
class OAIContaineranalysisGoogleDevtoolsCloudbuildV1ConnectedRepository;
class OAIContaineranalysisGoogleDevtoolsCloudbuildV1GitSource;
class OAIContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource;
class OAIContaineranalysisGoogleDevtoolsCloudbuildV1StorageSource;
class OAIContaineranalysisGoogleDevtoolsCloudbuildV1StorageSourceManifest;

class OAIContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance : public OAIObject {
public:
    OAIContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance();
    OAIContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance(QString json);
    ~OAIContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QMap<QString, OAIContaineranalysisGoogleDevtoolsCloudbuildV1FileHashes> getFileHashes() const;
    void setFileHashes(const QMap<QString, OAIContaineranalysisGoogleDevtoolsCloudbuildV1FileHashes> &file_hashes);
    bool is_file_hashes_Set() const;
    bool is_file_hashes_Valid() const;

    OAIContaineranalysisGoogleDevtoolsCloudbuildV1ConnectedRepository getResolvedConnectedRepository() const;
    void setResolvedConnectedRepository(const OAIContaineranalysisGoogleDevtoolsCloudbuildV1ConnectedRepository &resolved_connected_repository);
    bool is_resolved_connected_repository_Set() const;
    bool is_resolved_connected_repository_Valid() const;

    OAIContaineranalysisGoogleDevtoolsCloudbuildV1GitSource getResolvedGitSource() const;
    void setResolvedGitSource(const OAIContaineranalysisGoogleDevtoolsCloudbuildV1GitSource &resolved_git_source);
    bool is_resolved_git_source_Set() const;
    bool is_resolved_git_source_Valid() const;

    OAIContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource getResolvedRepoSource() const;
    void setResolvedRepoSource(const OAIContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource &resolved_repo_source);
    bool is_resolved_repo_source_Set() const;
    bool is_resolved_repo_source_Valid() const;

    OAIContaineranalysisGoogleDevtoolsCloudbuildV1StorageSource getResolvedStorageSource() const;
    void setResolvedStorageSource(const OAIContaineranalysisGoogleDevtoolsCloudbuildV1StorageSource &resolved_storage_source);
    bool is_resolved_storage_source_Set() const;
    bool is_resolved_storage_source_Valid() const;

    OAIContaineranalysisGoogleDevtoolsCloudbuildV1StorageSourceManifest getResolvedStorageSourceManifest() const;
    void setResolvedStorageSourceManifest(const OAIContaineranalysisGoogleDevtoolsCloudbuildV1StorageSourceManifest &resolved_storage_source_manifest);
    bool is_resolved_storage_source_manifest_Set() const;
    bool is_resolved_storage_source_manifest_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QMap<QString, OAIContaineranalysisGoogleDevtoolsCloudbuildV1FileHashes> m_file_hashes;
    bool m_file_hashes_isSet;
    bool m_file_hashes_isValid;

    OAIContaineranalysisGoogleDevtoolsCloudbuildV1ConnectedRepository m_resolved_connected_repository;
    bool m_resolved_connected_repository_isSet;
    bool m_resolved_connected_repository_isValid;

    OAIContaineranalysisGoogleDevtoolsCloudbuildV1GitSource m_resolved_git_source;
    bool m_resolved_git_source_isSet;
    bool m_resolved_git_source_isValid;

    OAIContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource m_resolved_repo_source;
    bool m_resolved_repo_source_isSet;
    bool m_resolved_repo_source_isValid;

    OAIContaineranalysisGoogleDevtoolsCloudbuildV1StorageSource m_resolved_storage_source;
    bool m_resolved_storage_source_isSet;
    bool m_resolved_storage_source_isValid;

    OAIContaineranalysisGoogleDevtoolsCloudbuildV1StorageSourceManifest m_resolved_storage_source_manifest;
    bool m_resolved_storage_source_manifest_isSet;
    bool m_resolved_storage_source_manifest_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance)

#endif // OAIContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance_H
