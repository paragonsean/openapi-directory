/**
 * Vertex AI API
 * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.VertexAiApi);
  }
}(this, function(expect, VertexAiApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new VertexAiApi.LearningServingLlmMessageMetadata();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('LearningServingLlmMessageMetadata', function() {
    it('should create an instance of LearningServingLlmMessageMetadata', function() {
      // uncomment below and update the code to test LearningServingLlmMessageMetadata
      //var instance = new VertexAiApi.LearningServingLlmMessageMetadata();
      //expect(instance).to.be.a(VertexAiApi.LearningServingLlmMessageMetadata);
    });

    it('should have the property classifierSummary (base name: "classifierSummary")', function() {
      // uncomment below and update the code to test the property classifierSummary
      //var instance = new VertexAiApi.LearningServingLlmMessageMetadata();
      //expect(instance).to.be();
    });

    it('should have the property codeyOutput (base name: "codeyOutput")', function() {
      // uncomment below and update the code to test the property codeyOutput
      //var instance = new VertexAiApi.LearningServingLlmMessageMetadata();
      //expect(instance).to.be();
    });

    it('should have the property currentStreamTextLength (base name: "currentStreamTextLength")', function() {
      // uncomment below and update the code to test the property currentStreamTextLength
      //var instance = new VertexAiApi.LearningServingLlmMessageMetadata();
      //expect(instance).to.be();
    });

    it('should have the property deleted (base name: "deleted")', function() {
      // uncomment below and update the code to test the property deleted
      //var instance = new VertexAiApi.LearningServingLlmMessageMetadata();
      //expect(instance).to.be();
    });

    it('should have the property filterMeta (base name: "filterMeta")', function() {
      // uncomment below and update the code to test the property filterMeta
      //var instance = new VertexAiApi.LearningServingLlmMessageMetadata();
      //expect(instance).to.be();
    });

    it('should have the property finalMessageScore (base name: "finalMessageScore")', function() {
      // uncomment below and update the code to test the property finalMessageScore
      //var instance = new VertexAiApi.LearningServingLlmMessageMetadata();
      //expect(instance).to.be();
    });

    it('should have the property finishReason (base name: "finishReason")', function() {
      // uncomment below and update the code to test the property finishReason
      //var instance = new VertexAiApi.LearningServingLlmMessageMetadata();
      //expect(instance).to.be();
    });

    it('should have the property groundingMetadata (base name: "groundingMetadata")', function() {
      // uncomment below and update the code to test the property groundingMetadata
      //var instance = new VertexAiApi.LearningServingLlmMessageMetadata();
      //expect(instance).to.be();
    });

    it('should have the property isCode (base name: "isCode")', function() {
      // uncomment below and update the code to test the property isCode
      //var instance = new VertexAiApi.LearningServingLlmMessageMetadata();
      //expect(instance).to.be();
    });

    it('should have the property isFallback (base name: "isFallback")', function() {
      // uncomment below and update the code to test the property isFallback
      //var instance = new VertexAiApi.LearningServingLlmMessageMetadata();
      //expect(instance).to.be();
    });

    it('should have the property langidResult (base name: "langidResult")', function() {
      // uncomment below and update the code to test the property langidResult
      //var instance = new VertexAiApi.LearningServingLlmMessageMetadata();
      //expect(instance).to.be();
    });

    it('should have the property language (base name: "language")', function() {
      // uncomment below and update the code to test the property language
      //var instance = new VertexAiApi.LearningServingLlmMessageMetadata();
      //expect(instance).to.be();
    });

    it('should have the property lmPrefix (base name: "lmPrefix")', function() {
      // uncomment below and update the code to test the property lmPrefix
      //var instance = new VertexAiApi.LearningServingLlmMessageMetadata();
      //expect(instance).to.be();
    });

    it('should have the property originalText (base name: "originalText")', function() {
      // uncomment below and update the code to test the property originalText
      //var instance = new VertexAiApi.LearningServingLlmMessageMetadata();
      //expect(instance).to.be();
    });

    it('should have the property perStreamDecodedTokenCount (base name: "perStreamDecodedTokenCount")', function() {
      // uncomment below and update the code to test the property perStreamDecodedTokenCount
      //var instance = new VertexAiApi.LearningServingLlmMessageMetadata();
      //expect(instance).to.be();
    });

    it('should have the property raiOutputs (base name: "raiOutputs")', function() {
      // uncomment below and update the code to test the property raiOutputs
      //var instance = new VertexAiApi.LearningServingLlmMessageMetadata();
      //expect(instance).to.be();
    });

    it('should have the property recitationResult (base name: "recitationResult")', function() {
      // uncomment below and update the code to test the property recitationResult
      //var instance = new VertexAiApi.LearningServingLlmMessageMetadata();
      //expect(instance).to.be();
    });

    it('should have the property returnTokenCount (base name: "returnTokenCount")', function() {
      // uncomment below and update the code to test the property returnTokenCount
      //var instance = new VertexAiApi.LearningServingLlmMessageMetadata();
      //expect(instance).to.be();
    });

    it('should have the property scores (base name: "scores")', function() {
      // uncomment below and update the code to test the property scores
      //var instance = new VertexAiApi.LearningServingLlmMessageMetadata();
      //expect(instance).to.be();
    });

    it('should have the property streamTerminated (base name: "streamTerminated")', function() {
      // uncomment below and update the code to test the property streamTerminated
      //var instance = new VertexAiApi.LearningServingLlmMessageMetadata();
      //expect(instance).to.be();
    });

    it('should have the property totalDecodedTokenCount (base name: "totalDecodedTokenCount")', function() {
      // uncomment below and update the code to test the property totalDecodedTokenCount
      //var instance = new VertexAiApi.LearningServingLlmMessageMetadata();
      //expect(instance).to.be();
    });

    it('should have the property translatedUserPrompts (base name: "translatedUserPrompts")', function() {
      // uncomment below and update the code to test the property translatedUserPrompts
      //var instance = new VertexAiApi.LearningServingLlmMessageMetadata();
      //expect(instance).to.be();
    });

    it('should have the property vertexRaiResult (base name: "vertexRaiResult")', function() {
      // uncomment below and update the code to test the property vertexRaiResult
      //var instance = new VertexAiApi.LearningServingLlmMessageMetadata();
      //expect(instance).to.be();
    });

  });

}));
