/**
 * Vertex AI API
 * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GoogleCloudAiplatformV1beta1EnvVar from './GoogleCloudAiplatformV1beta1EnvVar';

/**
 * The GoogleCloudAiplatformV1beta1ContainerSpec model module.
 * @module model/GoogleCloudAiplatformV1beta1ContainerSpec
 * @version v1beta1
 */
class GoogleCloudAiplatformV1beta1ContainerSpec {
    /**
     * Constructs a new <code>GoogleCloudAiplatformV1beta1ContainerSpec</code>.
     * The spec of a Container.
     * @alias module:model/GoogleCloudAiplatformV1beta1ContainerSpec
     */
    constructor() { 
        
        GoogleCloudAiplatformV1beta1ContainerSpec.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleCloudAiplatformV1beta1ContainerSpec</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleCloudAiplatformV1beta1ContainerSpec} obj Optional instance to populate.
     * @return {module:model/GoogleCloudAiplatformV1beta1ContainerSpec} The populated <code>GoogleCloudAiplatformV1beta1ContainerSpec</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleCloudAiplatformV1beta1ContainerSpec();

            if (data.hasOwnProperty('args')) {
                obj['args'] = ApiClient.convertToType(data['args'], ['String']);
            }
            if (data.hasOwnProperty('command')) {
                obj['command'] = ApiClient.convertToType(data['command'], ['String']);
            }
            if (data.hasOwnProperty('env')) {
                obj['env'] = ApiClient.convertToType(data['env'], [GoogleCloudAiplatformV1beta1EnvVar]);
            }
            if (data.hasOwnProperty('imageUri')) {
                obj['imageUri'] = ApiClient.convertToType(data['imageUri'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleCloudAiplatformV1beta1ContainerSpec</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleCloudAiplatformV1beta1ContainerSpec</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['args'])) {
            throw new Error("Expected the field `args` to be an array in the JSON data but got " + data['args']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['command'])) {
            throw new Error("Expected the field `command` to be an array in the JSON data but got " + data['command']);
        }
        if (data['env']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['env'])) {
                throw new Error("Expected the field `env` to be an array in the JSON data but got " + data['env']);
            }
            // validate the optional field `env` (array)
            for (const item of data['env']) {
                GoogleCloudAiplatformV1beta1EnvVar.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['imageUri'] && !(typeof data['imageUri'] === 'string' || data['imageUri'] instanceof String)) {
            throw new Error("Expected the field `imageUri` to be a primitive type in the JSON string but got " + data['imageUri']);
        }

        return true;
    }


}



/**
 * The arguments to be passed when starting the container.
 * @member {Array.<String>} args
 */
GoogleCloudAiplatformV1beta1ContainerSpec.prototype['args'] = undefined;

/**
 * The command to be invoked when the container is started. It overrides the entrypoint instruction in Dockerfile when provided.
 * @member {Array.<String>} command
 */
GoogleCloudAiplatformV1beta1ContainerSpec.prototype['command'] = undefined;

/**
 * Environment variables to be passed to the container. Maximum limit is 100.
 * @member {Array.<module:model/GoogleCloudAiplatformV1beta1EnvVar>} env
 */
GoogleCloudAiplatformV1beta1ContainerSpec.prototype['env'] = undefined;

/**
 * Required. The URI of a container image in the Container Registry that is to be run on each worker replica.
 * @member {String} imageUri
 */
GoogleCloudAiplatformV1beta1ContainerSpec.prototype['imageUri'] = undefined;






export default GoogleCloudAiplatformV1beta1ContainerSpec;

