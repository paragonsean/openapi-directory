/**
 * Vertex AI API
 * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GoogleCloudAiplatformV1beta1NearestNeighborQueryEmbedding from './GoogleCloudAiplatformV1beta1NearestNeighborQueryEmbedding';
import GoogleCloudAiplatformV1beta1NearestNeighborQueryParameters from './GoogleCloudAiplatformV1beta1NearestNeighborQueryParameters';
import GoogleCloudAiplatformV1beta1NearestNeighborQueryStringFilter from './GoogleCloudAiplatformV1beta1NearestNeighborQueryStringFilter';

/**
 * The GoogleCloudAiplatformV1beta1NearestNeighborQuery model module.
 * @module model/GoogleCloudAiplatformV1beta1NearestNeighborQuery
 * @version v1beta1
 */
class GoogleCloudAiplatformV1beta1NearestNeighborQuery {
    /**
     * Constructs a new <code>GoogleCloudAiplatformV1beta1NearestNeighborQuery</code>.
     * A query to find a number of similar entities.
     * @alias module:model/GoogleCloudAiplatformV1beta1NearestNeighborQuery
     */
    constructor() { 
        
        GoogleCloudAiplatformV1beta1NearestNeighborQuery.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleCloudAiplatformV1beta1NearestNeighborQuery</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleCloudAiplatformV1beta1NearestNeighborQuery} obj Optional instance to populate.
     * @return {module:model/GoogleCloudAiplatformV1beta1NearestNeighborQuery} The populated <code>GoogleCloudAiplatformV1beta1NearestNeighborQuery</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleCloudAiplatformV1beta1NearestNeighborQuery();

            if (data.hasOwnProperty('embedding')) {
                obj['embedding'] = GoogleCloudAiplatformV1beta1NearestNeighborQueryEmbedding.constructFromObject(data['embedding']);
            }
            if (data.hasOwnProperty('entityId')) {
                obj['entityId'] = ApiClient.convertToType(data['entityId'], 'String');
            }
            if (data.hasOwnProperty('neighborCount')) {
                obj['neighborCount'] = ApiClient.convertToType(data['neighborCount'], 'Number');
            }
            if (data.hasOwnProperty('parameters')) {
                obj['parameters'] = GoogleCloudAiplatformV1beta1NearestNeighborQueryParameters.constructFromObject(data['parameters']);
            }
            if (data.hasOwnProperty('perCrowdingAttributeNeighborCount')) {
                obj['perCrowdingAttributeNeighborCount'] = ApiClient.convertToType(data['perCrowdingAttributeNeighborCount'], 'Number');
            }
            if (data.hasOwnProperty('stringFilters')) {
                obj['stringFilters'] = ApiClient.convertToType(data['stringFilters'], [GoogleCloudAiplatformV1beta1NearestNeighborQueryStringFilter]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleCloudAiplatformV1beta1NearestNeighborQuery</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleCloudAiplatformV1beta1NearestNeighborQuery</code>.
     */
    static validateJSON(data) {
        // validate the optional field `embedding`
        if (data['embedding']) { // data not null
          GoogleCloudAiplatformV1beta1NearestNeighborQueryEmbedding.validateJSON(data['embedding']);
        }
        // ensure the json data is a string
        if (data['entityId'] && !(typeof data['entityId'] === 'string' || data['entityId'] instanceof String)) {
            throw new Error("Expected the field `entityId` to be a primitive type in the JSON string but got " + data['entityId']);
        }
        // validate the optional field `parameters`
        if (data['parameters']) { // data not null
          GoogleCloudAiplatformV1beta1NearestNeighborQueryParameters.validateJSON(data['parameters']);
        }
        if (data['stringFilters']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['stringFilters'])) {
                throw new Error("Expected the field `stringFilters` to be an array in the JSON data but got " + data['stringFilters']);
            }
            // validate the optional field `stringFilters` (array)
            for (const item of data['stringFilters']) {
                GoogleCloudAiplatformV1beta1NearestNeighborQueryStringFilter.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {module:model/GoogleCloudAiplatformV1beta1NearestNeighborQueryEmbedding} embedding
 */
GoogleCloudAiplatformV1beta1NearestNeighborQuery.prototype['embedding'] = undefined;

/**
 * Optional. The entity id whose similar entities should be searched for. If embedding is set, search will use embedding instead of entity_id.
 * @member {String} entityId
 */
GoogleCloudAiplatformV1beta1NearestNeighborQuery.prototype['entityId'] = undefined;

/**
 * Optional. The number of similar entities to be retrieved from feature view for each query.
 * @member {Number} neighborCount
 */
GoogleCloudAiplatformV1beta1NearestNeighborQuery.prototype['neighborCount'] = undefined;

/**
 * @member {module:model/GoogleCloudAiplatformV1beta1NearestNeighborQueryParameters} parameters
 */
GoogleCloudAiplatformV1beta1NearestNeighborQuery.prototype['parameters'] = undefined;

/**
 * Optional. Crowding is a constraint on a neighbor list produced by nearest neighbor search requiring that no more than sper_crowding_attribute_neighbor_count of the k neighbors returned have the same value of crowding_attribute. It's used for improving result diversity.
 * @member {Number} perCrowdingAttributeNeighborCount
 */
GoogleCloudAiplatformV1beta1NearestNeighborQuery.prototype['perCrowdingAttributeNeighborCount'] = undefined;

/**
 * Optional. The list of string filters.
 * @member {Array.<module:model/GoogleCloudAiplatformV1beta1NearestNeighborQueryStringFilter>} stringFilters
 */
GoogleCloudAiplatformV1beta1NearestNeighborQuery.prototype['stringFilters'] = undefined;






export default GoogleCloudAiplatformV1beta1NearestNeighborQuery;

