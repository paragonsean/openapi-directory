/**
 * Vertex AI API
 * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The LearningGenaiRootCodeyChatMetadata model module.
 * @module model/LearningGenaiRootCodeyChatMetadata
 * @version v1beta1
 */
class LearningGenaiRootCodeyChatMetadata {
    /**
     * Constructs a new <code>LearningGenaiRootCodeyChatMetadata</code>.
     * Stores all metadata relating to AIDA DoConversation.
     * @alias module:model/LearningGenaiRootCodeyChatMetadata
     */
    constructor() { 
        
        LearningGenaiRootCodeyChatMetadata.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LearningGenaiRootCodeyChatMetadata</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LearningGenaiRootCodeyChatMetadata} obj Optional instance to populate.
     * @return {module:model/LearningGenaiRootCodeyChatMetadata} The populated <code>LearningGenaiRootCodeyChatMetadata</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LearningGenaiRootCodeyChatMetadata();

            if (data.hasOwnProperty('codeLanguage')) {
                obj['codeLanguage'] = ApiClient.convertToType(data['codeLanguage'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LearningGenaiRootCodeyChatMetadata</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LearningGenaiRootCodeyChatMetadata</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['codeLanguage'] && !(typeof data['codeLanguage'] === 'string' || data['codeLanguage'] instanceof String)) {
            throw new Error("Expected the field `codeLanguage` to be a primitive type in the JSON string but got " + data['codeLanguage']);
        }

        return true;
    }


}



/**
 * Indicates the programming language of the code if the message is a code chunk.
 * @member {module:model/LearningGenaiRootCodeyChatMetadata.CodeLanguageEnum} codeLanguage
 */
LearningGenaiRootCodeyChatMetadata.prototype['codeLanguage'] = undefined;





/**
 * Allowed values for the <code>codeLanguage</code> property.
 * @enum {String}
 * @readonly
 */
LearningGenaiRootCodeyChatMetadata['CodeLanguageEnum'] = {

    /**
     * value: "UNSPECIFIED"
     * @const
     */
    "UNSPECIFIED": "UNSPECIFIED",

    /**
     * value: "ALL"
     * @const
     */
    "ALL": "ALL",

    /**
     * value: "TEXT"
     * @const
     */
    "TEXT": "TEXT",

    /**
     * value: "CPP"
     * @const
     */
    "CPP": "CPP",

    /**
     * value: "PYTHON"
     * @const
     */
    "PYTHON": "PYTHON",

    /**
     * value: "KOTLIN"
     * @const
     */
    "KOTLIN": "KOTLIN",

    /**
     * value: "JAVA"
     * @const
     */
    "JAVA": "JAVA",

    /**
     * value: "JAVASCRIPT"
     * @const
     */
    "JAVASCRIPT": "JAVASCRIPT",

    /**
     * value: "GO"
     * @const
     */
    "GO": "GO",

    /**
     * value: "R"
     * @const
     */
    "R": "R",

    /**
     * value: "JUPYTER_NOTEBOOK"
     * @const
     */
    "JUPYTER_NOTEBOOK": "JUPYTER_NOTEBOOK",

    /**
     * value: "TYPESCRIPT"
     * @const
     */
    "TYPESCRIPT": "TYPESCRIPT",

    /**
     * value: "HTML"
     * @const
     */
    "HTML": "HTML",

    /**
     * value: "SQL"
     * @const
     */
    "SQL": "SQL",

    /**
     * value: "BASH"
     * @const
     */
    "BASH": "BASH",

    /**
     * value: "C"
     * @const
     */
    "C": "C",

    /**
     * value: "DART"
     * @const
     */
    "DART": "DART",

    /**
     * value: "GRADLE"
     * @const
     */
    "GRADLE": "GRADLE",

    /**
     * value: "JAVADOC"
     * @const
     */
    "JAVADOC": "JAVADOC",

    /**
     * value: "JSON"
     * @const
     */
    "JSON": "JSON",

    /**
     * value: "MAKEFILE"
     * @const
     */
    "MAKEFILE": "MAKEFILE",

    /**
     * value: "MARKDOWN"
     * @const
     */
    "MARKDOWN": "MARKDOWN",

    /**
     * value: "PROTO"
     * @const
     */
    "PROTO": "PROTO",

    /**
     * value: "XML"
     * @const
     */
    "XML": "XML",

    /**
     * value: "YAML"
     * @const
     */
    "YAML": "YAML"
};



export default LearningGenaiRootCodeyChatMetadata;

