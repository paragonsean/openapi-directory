/**
 * Vertex AI API
 * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GoogleCloudAiplatformV1beta1Measurement from './GoogleCloudAiplatformV1beta1Measurement';
import GoogleCloudAiplatformV1beta1TrialParameter from './GoogleCloudAiplatformV1beta1TrialParameter';

/**
 * The GoogleCloudAiplatformV1beta1Trial model module.
 * @module model/GoogleCloudAiplatformV1beta1Trial
 * @version v1beta1
 */
class GoogleCloudAiplatformV1beta1Trial {
    /**
     * Constructs a new <code>GoogleCloudAiplatformV1beta1Trial</code>.
     * A message representing a Trial. A Trial contains a unique set of Parameters that has been or will be evaluated, along with the objective metrics got by running the Trial.
     * @alias module:model/GoogleCloudAiplatformV1beta1Trial
     */
    constructor() { 
        
        GoogleCloudAiplatformV1beta1Trial.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleCloudAiplatformV1beta1Trial</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleCloudAiplatformV1beta1Trial} obj Optional instance to populate.
     * @return {module:model/GoogleCloudAiplatformV1beta1Trial} The populated <code>GoogleCloudAiplatformV1beta1Trial</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleCloudAiplatformV1beta1Trial();

            if (data.hasOwnProperty('clientId')) {
                obj['clientId'] = ApiClient.convertToType(data['clientId'], 'String');
            }
            if (data.hasOwnProperty('customJob')) {
                obj['customJob'] = ApiClient.convertToType(data['customJob'], 'String');
            }
            if (data.hasOwnProperty('endTime')) {
                obj['endTime'] = ApiClient.convertToType(data['endTime'], 'String');
            }
            if (data.hasOwnProperty('finalMeasurement')) {
                obj['finalMeasurement'] = GoogleCloudAiplatformV1beta1Measurement.constructFromObject(data['finalMeasurement']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('infeasibleReason')) {
                obj['infeasibleReason'] = ApiClient.convertToType(data['infeasibleReason'], 'String');
            }
            if (data.hasOwnProperty('measurements')) {
                obj['measurements'] = ApiClient.convertToType(data['measurements'], [GoogleCloudAiplatformV1beta1Measurement]);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('parameters')) {
                obj['parameters'] = ApiClient.convertToType(data['parameters'], [GoogleCloudAiplatformV1beta1TrialParameter]);
            }
            if (data.hasOwnProperty('startTime')) {
                obj['startTime'] = ApiClient.convertToType(data['startTime'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('webAccessUris')) {
                obj['webAccessUris'] = ApiClient.convertToType(data['webAccessUris'], {'String': 'String'});
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleCloudAiplatformV1beta1Trial</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleCloudAiplatformV1beta1Trial</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['clientId'] && !(typeof data['clientId'] === 'string' || data['clientId'] instanceof String)) {
            throw new Error("Expected the field `clientId` to be a primitive type in the JSON string but got " + data['clientId']);
        }
        // ensure the json data is a string
        if (data['customJob'] && !(typeof data['customJob'] === 'string' || data['customJob'] instanceof String)) {
            throw new Error("Expected the field `customJob` to be a primitive type in the JSON string but got " + data['customJob']);
        }
        // ensure the json data is a string
        if (data['endTime'] && !(typeof data['endTime'] === 'string' || data['endTime'] instanceof String)) {
            throw new Error("Expected the field `endTime` to be a primitive type in the JSON string but got " + data['endTime']);
        }
        // validate the optional field `finalMeasurement`
        if (data['finalMeasurement']) { // data not null
          GoogleCloudAiplatformV1beta1Measurement.validateJSON(data['finalMeasurement']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['infeasibleReason'] && !(typeof data['infeasibleReason'] === 'string' || data['infeasibleReason'] instanceof String)) {
            throw new Error("Expected the field `infeasibleReason` to be a primitive type in the JSON string but got " + data['infeasibleReason']);
        }
        if (data['measurements']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['measurements'])) {
                throw new Error("Expected the field `measurements` to be an array in the JSON data but got " + data['measurements']);
            }
            // validate the optional field `measurements` (array)
            for (const item of data['measurements']) {
                GoogleCloudAiplatformV1beta1Measurement.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        if (data['parameters']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['parameters'])) {
                throw new Error("Expected the field `parameters` to be an array in the JSON data but got " + data['parameters']);
            }
            // validate the optional field `parameters` (array)
            for (const item of data['parameters']) {
                GoogleCloudAiplatformV1beta1TrialParameter.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['startTime'] && !(typeof data['startTime'] === 'string' || data['startTime'] instanceof String)) {
            throw new Error("Expected the field `startTime` to be a primitive type in the JSON string but got " + data['startTime']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }

        return true;
    }


}



/**
 * Output only. The identifier of the client that originally requested this Trial. Each client is identified by a unique client_id. When a client asks for a suggestion, Vertex AI Vizier will assign it a Trial. The client should evaluate the Trial, complete it, and report back to Vertex AI Vizier. If suggestion is asked again by same client_id before the Trial is completed, the same Trial will be returned. Multiple clients with different client_ids can ask for suggestions simultaneously, each of them will get their own Trial.
 * @member {String} clientId
 */
GoogleCloudAiplatformV1beta1Trial.prototype['clientId'] = undefined;

/**
 * Output only. The CustomJob name linked to the Trial. It's set for a HyperparameterTuningJob's Trial.
 * @member {String} customJob
 */
GoogleCloudAiplatformV1beta1Trial.prototype['customJob'] = undefined;

/**
 * Output only. Time when the Trial's status changed to `SUCCEEDED` or `INFEASIBLE`.
 * @member {String} endTime
 */
GoogleCloudAiplatformV1beta1Trial.prototype['endTime'] = undefined;

/**
 * @member {module:model/GoogleCloudAiplatformV1beta1Measurement} finalMeasurement
 */
GoogleCloudAiplatformV1beta1Trial.prototype['finalMeasurement'] = undefined;

/**
 * Output only. The identifier of the Trial assigned by the service.
 * @member {String} id
 */
GoogleCloudAiplatformV1beta1Trial.prototype['id'] = undefined;

/**
 * Output only. A human readable string describing why the Trial is infeasible. This is set only if Trial state is `INFEASIBLE`.
 * @member {String} infeasibleReason
 */
GoogleCloudAiplatformV1beta1Trial.prototype['infeasibleReason'] = undefined;

/**
 * Output only. A list of measurements that are strictly lexicographically ordered by their induced tuples (steps, elapsed_duration). These are used for early stopping computations.
 * @member {Array.<module:model/GoogleCloudAiplatformV1beta1Measurement>} measurements
 */
GoogleCloudAiplatformV1beta1Trial.prototype['measurements'] = undefined;

/**
 * Output only. Resource name of the Trial assigned by the service.
 * @member {String} name
 */
GoogleCloudAiplatformV1beta1Trial.prototype['name'] = undefined;

/**
 * Output only. The parameters of the Trial.
 * @member {Array.<module:model/GoogleCloudAiplatformV1beta1TrialParameter>} parameters
 */
GoogleCloudAiplatformV1beta1Trial.prototype['parameters'] = undefined;

/**
 * Output only. Time when the Trial was started.
 * @member {String} startTime
 */
GoogleCloudAiplatformV1beta1Trial.prototype['startTime'] = undefined;

/**
 * Output only. The detailed state of the Trial.
 * @member {module:model/GoogleCloudAiplatformV1beta1Trial.StateEnum} state
 */
GoogleCloudAiplatformV1beta1Trial.prototype['state'] = undefined;

/**
 * Output only. URIs for accessing [interactive shells](https://cloud.google.com/vertex-ai/docs/training/monitor-debug-interactive-shell) (one URI for each training node). Only available if this trial is part of a HyperparameterTuningJob and the job's trial_job_spec.enable_web_access field is `true`. The keys are names of each node used for the trial; for example, `workerpool0-0` for the primary node, `workerpool1-0` for the first node in the second worker pool, and `workerpool1-1` for the second node in the second worker pool. The values are the URIs for each node's interactive shell.
 * @member {Object.<String, String>} webAccessUris
 */
GoogleCloudAiplatformV1beta1Trial.prototype['webAccessUris'] = undefined;





/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
GoogleCloudAiplatformV1beta1Trial['StateEnum'] = {

    /**
     * value: "STATE_UNSPECIFIED"
     * @const
     */
    "STATE_UNSPECIFIED": "STATE_UNSPECIFIED",

    /**
     * value: "REQUESTED"
     * @const
     */
    "REQUESTED": "REQUESTED",

    /**
     * value: "ACTIVE"
     * @const
     */
    "ACTIVE": "ACTIVE",

    /**
     * value: "STOPPING"
     * @const
     */
    "STOPPING": "STOPPING",

    /**
     * value: "SUCCEEDED"
     * @const
     */
    "SUCCEEDED": "SUCCEEDED",

    /**
     * value: "INFEASIBLE"
     * @const
     */
    "INFEASIBLE": "INFEASIBLE"
};



export default GoogleCloudAiplatformV1beta1Trial;

