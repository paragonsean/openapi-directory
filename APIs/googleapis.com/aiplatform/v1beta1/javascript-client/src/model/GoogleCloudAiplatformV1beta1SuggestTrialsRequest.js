/**
 * Vertex AI API
 * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GoogleCloudAiplatformV1beta1TrialContext from './GoogleCloudAiplatformV1beta1TrialContext';

/**
 * The GoogleCloudAiplatformV1beta1SuggestTrialsRequest model module.
 * @module model/GoogleCloudAiplatformV1beta1SuggestTrialsRequest
 * @version v1beta1
 */
class GoogleCloudAiplatformV1beta1SuggestTrialsRequest {
    /**
     * Constructs a new <code>GoogleCloudAiplatformV1beta1SuggestTrialsRequest</code>.
     * Request message for VizierService.SuggestTrials.
     * @alias module:model/GoogleCloudAiplatformV1beta1SuggestTrialsRequest
     */
    constructor() { 
        
        GoogleCloudAiplatformV1beta1SuggestTrialsRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleCloudAiplatformV1beta1SuggestTrialsRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleCloudAiplatformV1beta1SuggestTrialsRequest} obj Optional instance to populate.
     * @return {module:model/GoogleCloudAiplatformV1beta1SuggestTrialsRequest} The populated <code>GoogleCloudAiplatformV1beta1SuggestTrialsRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleCloudAiplatformV1beta1SuggestTrialsRequest();

            if (data.hasOwnProperty('clientId')) {
                obj['clientId'] = ApiClient.convertToType(data['clientId'], 'String');
            }
            if (data.hasOwnProperty('contexts')) {
                obj['contexts'] = ApiClient.convertToType(data['contexts'], [GoogleCloudAiplatformV1beta1TrialContext]);
            }
            if (data.hasOwnProperty('suggestionCount')) {
                obj['suggestionCount'] = ApiClient.convertToType(data['suggestionCount'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleCloudAiplatformV1beta1SuggestTrialsRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleCloudAiplatformV1beta1SuggestTrialsRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['clientId'] && !(typeof data['clientId'] === 'string' || data['clientId'] instanceof String)) {
            throw new Error("Expected the field `clientId` to be a primitive type in the JSON string but got " + data['clientId']);
        }
        if (data['contexts']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['contexts'])) {
                throw new Error("Expected the field `contexts` to be an array in the JSON data but got " + data['contexts']);
            }
            // validate the optional field `contexts` (array)
            for (const item of data['contexts']) {
                GoogleCloudAiplatformV1beta1TrialContext.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Required. The identifier of the client that is requesting the suggestion. If multiple SuggestTrialsRequests have the same `client_id`, the service will return the identical suggested Trial if the Trial is pending, and provide a new Trial if the last suggested Trial was completed.
 * @member {String} clientId
 */
GoogleCloudAiplatformV1beta1SuggestTrialsRequest.prototype['clientId'] = undefined;

/**
 * Optional. This allows you to specify the \"context\" for a Trial; a context is a slice (a subspace) of the search space. Typical uses for contexts: 1) You are using Vizier to tune a server for best performance, but there's a strong weekly cycle. The context specifies the day-of-week. This allows Tuesday to generalize from Wednesday without assuming that everything is identical. 2) Imagine you're optimizing some medical treatment for people. As they walk in the door, you know certain facts about them (e.g. sex, weight, height, blood-pressure). Put that information in the context, and Vizier will adapt its suggestions to the patient. 3) You want to do a fair A/B test efficiently. Specify the \"A\" and \"B\" conditions as contexts, and Vizier will generalize between \"A\" and \"B\" conditions. If they are similar, this will allow Vizier to converge to the optimum faster than if \"A\" and \"B\" were separate Studies. NOTE: You can also enter contexts as REQUESTED Trials, e.g. via the CreateTrial() RPC; that's the asynchronous option where you don't need a close association between contexts and suggestions. NOTE: All the Parameters you set in a context MUST be defined in the Study. NOTE: You must supply 0 or $suggestion_count contexts. If you don't supply any contexts, Vizier will make suggestions from the full search space specified in the StudySpec; if you supply a full set of context, each suggestion will match the corresponding context. NOTE: A Context with no features set matches anything, and allows suggestions from the full search space. NOTE: Contexts MUST lie within the search space specified in the StudySpec. It's an error if they don't. NOTE: Contexts preferentially match ACTIVE then REQUESTED trials before new suggestions are generated. NOTE: Generation of suggestions involves a match between a Context and (optionally) a REQUESTED trial; if that match is not fully specified, a suggestion will be geneated in the merged subspace.
 * @member {Array.<module:model/GoogleCloudAiplatformV1beta1TrialContext>} contexts
 */
GoogleCloudAiplatformV1beta1SuggestTrialsRequest.prototype['contexts'] = undefined;

/**
 * Required. The number of suggestions requested. It must be positive.
 * @member {Number} suggestionCount
 */
GoogleCloudAiplatformV1beta1SuggestTrialsRequest.prototype['suggestionCount'] = undefined;






export default GoogleCloudAiplatformV1beta1SuggestTrialsRequest;

