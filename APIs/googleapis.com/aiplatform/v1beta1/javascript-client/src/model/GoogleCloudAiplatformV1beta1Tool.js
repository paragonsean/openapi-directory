/**
 * Vertex AI API
 * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GoogleCloudAiplatformV1beta1FunctionDeclaration from './GoogleCloudAiplatformV1beta1FunctionDeclaration';
import GoogleCloudAiplatformV1beta1GoogleSearchRetrieval from './GoogleCloudAiplatformV1beta1GoogleSearchRetrieval';
import GoogleCloudAiplatformV1beta1Retrieval from './GoogleCloudAiplatformV1beta1Retrieval';

/**
 * The GoogleCloudAiplatformV1beta1Tool model module.
 * @module model/GoogleCloudAiplatformV1beta1Tool
 * @version v1beta1
 */
class GoogleCloudAiplatformV1beta1Tool {
    /**
     * Constructs a new <code>GoogleCloudAiplatformV1beta1Tool</code>.
     * Tool details that the model may use to generate response. A &#x60;Tool&#x60; is a piece of code that enables the system to interact with external systems to perform an action, or set of actions, outside of knowledge and scope of the model. A Tool object should contain exactly one type of Tool (e.g FunctionDeclaration, Retrieval or GoogleSearchRetrieval).
     * @alias module:model/GoogleCloudAiplatformV1beta1Tool
     */
    constructor() { 
        
        GoogleCloudAiplatformV1beta1Tool.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleCloudAiplatformV1beta1Tool</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleCloudAiplatformV1beta1Tool} obj Optional instance to populate.
     * @return {module:model/GoogleCloudAiplatformV1beta1Tool} The populated <code>GoogleCloudAiplatformV1beta1Tool</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleCloudAiplatformV1beta1Tool();

            if (data.hasOwnProperty('functionDeclarations')) {
                obj['functionDeclarations'] = ApiClient.convertToType(data['functionDeclarations'], [GoogleCloudAiplatformV1beta1FunctionDeclaration]);
            }
            if (data.hasOwnProperty('googleSearchRetrieval')) {
                obj['googleSearchRetrieval'] = GoogleCloudAiplatformV1beta1GoogleSearchRetrieval.constructFromObject(data['googleSearchRetrieval']);
            }
            if (data.hasOwnProperty('retrieval')) {
                obj['retrieval'] = GoogleCloudAiplatformV1beta1Retrieval.constructFromObject(data['retrieval']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleCloudAiplatformV1beta1Tool</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleCloudAiplatformV1beta1Tool</code>.
     */
    static validateJSON(data) {
        if (data['functionDeclarations']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['functionDeclarations'])) {
                throw new Error("Expected the field `functionDeclarations` to be an array in the JSON data but got " + data['functionDeclarations']);
            }
            // validate the optional field `functionDeclarations` (array)
            for (const item of data['functionDeclarations']) {
                GoogleCloudAiplatformV1beta1FunctionDeclaration.validateJSON(item);
            };
        }
        // validate the optional field `googleSearchRetrieval`
        if (data['googleSearchRetrieval']) { // data not null
          GoogleCloudAiplatformV1beta1GoogleSearchRetrieval.validateJSON(data['googleSearchRetrieval']);
        }
        // validate the optional field `retrieval`
        if (data['retrieval']) { // data not null
          GoogleCloudAiplatformV1beta1Retrieval.validateJSON(data['retrieval']);
        }

        return true;
    }


}



/**
 * Optional. Function tool type. One or more function declarations to be passed to the model along with the current user query. Model may decide to call a subset of these functions by populating FunctionCall in the response. User should provide a FunctionResponse for each function call in the next turn. Based on the function responses, Model will generate the final response back to the user. Maximum 64 function declarations can be provided.
 * @member {Array.<module:model/GoogleCloudAiplatformV1beta1FunctionDeclaration>} functionDeclarations
 */
GoogleCloudAiplatformV1beta1Tool.prototype['functionDeclarations'] = undefined;

/**
 * @member {module:model/GoogleCloudAiplatformV1beta1GoogleSearchRetrieval} googleSearchRetrieval
 */
GoogleCloudAiplatformV1beta1Tool.prototype['googleSearchRetrieval'] = undefined;

/**
 * @member {module:model/GoogleCloudAiplatformV1beta1Retrieval} retrieval
 */
GoogleCloudAiplatformV1beta1Tool.prototype['retrieval'] = undefined;






export default GoogleCloudAiplatformV1beta1Tool;

