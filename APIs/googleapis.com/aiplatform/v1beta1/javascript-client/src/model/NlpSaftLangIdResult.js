/**
 * Vertex AI API
 * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import NlpSaftLanguageSpan from './NlpSaftLanguageSpan';
import NlpSaftLanguageSpanSequence from './NlpSaftLanguageSpanSequence';

/**
 * The NlpSaftLangIdResult model module.
 * @module model/NlpSaftLangIdResult
 * @version v1beta1
 */
class NlpSaftLangIdResult {
    /**
     * Constructs a new <code>NlpSaftLangIdResult</code>.
     * @alias module:model/NlpSaftLangIdResult
     */
    constructor() { 
        
        NlpSaftLangIdResult.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>NlpSaftLangIdResult</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NlpSaftLangIdResult} obj Optional instance to populate.
     * @return {module:model/NlpSaftLangIdResult} The populated <code>NlpSaftLangIdResult</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NlpSaftLangIdResult();

            if (data.hasOwnProperty('modelVersion')) {
                obj['modelVersion'] = ApiClient.convertToType(data['modelVersion'], 'String');
            }
            if (data.hasOwnProperty('predictions')) {
                obj['predictions'] = ApiClient.convertToType(data['predictions'], [NlpSaftLanguageSpan]);
            }
            if (data.hasOwnProperty('spanPredictions')) {
                obj['spanPredictions'] = ApiClient.convertToType(data['spanPredictions'], [NlpSaftLanguageSpanSequence]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NlpSaftLangIdResult</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NlpSaftLangIdResult</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['modelVersion'] && !(typeof data['modelVersion'] === 'string' || data['modelVersion'] instanceof String)) {
            throw new Error("Expected the field `modelVersion` to be a primitive type in the JSON string but got " + data['modelVersion']);
        }
        if (data['predictions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['predictions'])) {
                throw new Error("Expected the field `predictions` to be an array in the JSON data but got " + data['predictions']);
            }
            // validate the optional field `predictions` (array)
            for (const item of data['predictions']) {
                NlpSaftLanguageSpan.validateJSON(item);
            };
        }
        if (data['spanPredictions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['spanPredictions'])) {
                throw new Error("Expected the field `spanPredictions` to be an array in the JSON data but got " + data['spanPredictions']);
            }
            // validate the optional field `spanPredictions` (array)
            for (const item of data['spanPredictions']) {
                NlpSaftLanguageSpanSequence.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * The version of the model used to create these annotations.
 * @member {module:model/NlpSaftLangIdResult.ModelVersionEnum} modelVersion
 */
NlpSaftLangIdResult.prototype['modelVersion'] = undefined;

/**
 * This field stores the n-best list of possible BCP 47 language code strings for a given input sorted in descending order according to each code's respective probability.
 * @member {Array.<module:model/NlpSaftLanguageSpan>} predictions
 */
NlpSaftLangIdResult.prototype['predictions'] = undefined;

/**
 * This field stores language predictions of subspans of the input, when available. Each LanguageSpanSequence is a sequence of LanguageSpans. A particular sequence of LanguageSpans has an associated probability, and need not necessarily cover the entire input. If no language could be predicted for any span, then this field may be empty.
 * @member {Array.<module:model/NlpSaftLanguageSpanSequence>} spanPredictions
 */
NlpSaftLangIdResult.prototype['spanPredictions'] = undefined;





/**
 * Allowed values for the <code>modelVersion</code> property.
 * @enum {String}
 * @readonly
 */
NlpSaftLangIdResult['ModelVersionEnum'] = {

    /**
     * value: "VERSION_UNSPECIFIED"
     * @const
     */
    "VERSION_UNSPECIFIED": "VERSION_UNSPECIFIED",

    /**
     * value: "INDEXING_20181017"
     * @const
     */
    "INDEXING_20181017": "INDEXING_20181017",

    /**
     * value: "INDEXING_20191206"
     * @const
     */
    "INDEXING_20191206": "INDEXING_20191206",

    /**
     * value: "INDEXING_20200313"
     * @const
     */
    "INDEXING_20200313": "INDEXING_20200313",

    /**
     * value: "INDEXING_20210618"
     * @const
     */
    "INDEXING_20210618": "INDEXING_20210618",

    /**
     * value: "STANDARD_20220516"
     * @const
     */
    "STANDARD_20220516": "STANDARD_20220516"
};



export default NlpSaftLangIdResult;

