/**
 * Vertex AI API
 * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The GoogleCloudAiplatformV1beta1Execution model module.
 * @module model/GoogleCloudAiplatformV1beta1Execution
 * @version v1beta1
 */
class GoogleCloudAiplatformV1beta1Execution {
    /**
     * Constructs a new <code>GoogleCloudAiplatformV1beta1Execution</code>.
     * Instance of a general execution.
     * @alias module:model/GoogleCloudAiplatformV1beta1Execution
     */
    constructor() { 
        
        GoogleCloudAiplatformV1beta1Execution.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleCloudAiplatformV1beta1Execution</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleCloudAiplatformV1beta1Execution} obj Optional instance to populate.
     * @return {module:model/GoogleCloudAiplatformV1beta1Execution} The populated <code>GoogleCloudAiplatformV1beta1Execution</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleCloudAiplatformV1beta1Execution();

            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('etag')) {
                obj['etag'] = ApiClient.convertToType(data['etag'], 'String');
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], {'String': 'String'});
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ApiClient.convertToType(data['metadata'], {'String': Object});
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('schemaTitle')) {
                obj['schemaTitle'] = ApiClient.convertToType(data['schemaTitle'], 'String');
            }
            if (data.hasOwnProperty('schemaVersion')) {
                obj['schemaVersion'] = ApiClient.convertToType(data['schemaVersion'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('updateTime')) {
                obj['updateTime'] = ApiClient.convertToType(data['updateTime'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleCloudAiplatformV1beta1Execution</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleCloudAiplatformV1beta1Execution</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['createTime'] && !(typeof data['createTime'] === 'string' || data['createTime'] instanceof String)) {
            throw new Error("Expected the field `createTime` to be a primitive type in the JSON string but got " + data['createTime']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['etag'] && !(typeof data['etag'] === 'string' || data['etag'] instanceof String)) {
            throw new Error("Expected the field `etag` to be a primitive type in the JSON string but got " + data['etag']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['schemaTitle'] && !(typeof data['schemaTitle'] === 'string' || data['schemaTitle'] instanceof String)) {
            throw new Error("Expected the field `schemaTitle` to be a primitive type in the JSON string but got " + data['schemaTitle']);
        }
        // ensure the json data is a string
        if (data['schemaVersion'] && !(typeof data['schemaVersion'] === 'string' || data['schemaVersion'] instanceof String)) {
            throw new Error("Expected the field `schemaVersion` to be a primitive type in the JSON string but got " + data['schemaVersion']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['updateTime'] && !(typeof data['updateTime'] === 'string' || data['updateTime'] instanceof String)) {
            throw new Error("Expected the field `updateTime` to be a primitive type in the JSON string but got " + data['updateTime']);
        }

        return true;
    }


}



/**
 * Output only. Timestamp when this Execution was created.
 * @member {String} createTime
 */
GoogleCloudAiplatformV1beta1Execution.prototype['createTime'] = undefined;

/**
 * Description of the Execution
 * @member {String} description
 */
GoogleCloudAiplatformV1beta1Execution.prototype['description'] = undefined;

/**
 * User provided display name of the Execution. May be up to 128 Unicode characters.
 * @member {String} displayName
 */
GoogleCloudAiplatformV1beta1Execution.prototype['displayName'] = undefined;

/**
 * An eTag used to perform consistent read-modify-write updates. If not set, a blind \"overwrite\" update happens.
 * @member {String} etag
 */
GoogleCloudAiplatformV1beta1Execution.prototype['etag'] = undefined;

/**
 * The labels with user-defined metadata to organize your Executions. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. No more than 64 user labels can be associated with one Execution (System labels are excluded).
 * @member {Object.<String, String>} labels
 */
GoogleCloudAiplatformV1beta1Execution.prototype['labels'] = undefined;

/**
 * Properties of the Execution. Top level metadata keys' heading and trailing spaces will be trimmed. The size of this field should not exceed 200KB.
 * @member {Object.<String, Object>} metadata
 */
GoogleCloudAiplatformV1beta1Execution.prototype['metadata'] = undefined;

/**
 * Output only. The resource name of the Execution.
 * @member {String} name
 */
GoogleCloudAiplatformV1beta1Execution.prototype['name'] = undefined;

/**
 * The title of the schema describing the metadata. Schema title and version is expected to be registered in earlier Create Schema calls. And both are used together as unique identifiers to identify schemas within the local metadata store.
 * @member {String} schemaTitle
 */
GoogleCloudAiplatformV1beta1Execution.prototype['schemaTitle'] = undefined;

/**
 * The version of the schema in `schema_title` to use. Schema title and version is expected to be registered in earlier Create Schema calls. And both are used together as unique identifiers to identify schemas within the local metadata store.
 * @member {String} schemaVersion
 */
GoogleCloudAiplatformV1beta1Execution.prototype['schemaVersion'] = undefined;

/**
 * The state of this Execution. This is a property of the Execution, and does not imply or capture any ongoing process. This property is managed by clients (such as Vertex AI Pipelines) and the system does not prescribe or check the validity of state transitions.
 * @member {module:model/GoogleCloudAiplatformV1beta1Execution.StateEnum} state
 */
GoogleCloudAiplatformV1beta1Execution.prototype['state'] = undefined;

/**
 * Output only. Timestamp when this Execution was last updated.
 * @member {String} updateTime
 */
GoogleCloudAiplatformV1beta1Execution.prototype['updateTime'] = undefined;





/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
GoogleCloudAiplatformV1beta1Execution['StateEnum'] = {

    /**
     * value: "STATE_UNSPECIFIED"
     * @const
     */
    "STATE_UNSPECIFIED": "STATE_UNSPECIFIED",

    /**
     * value: "NEW"
     * @const
     */
    "NEW": "NEW",

    /**
     * value: "RUNNING"
     * @const
     */
    "RUNNING": "RUNNING",

    /**
     * value: "COMPLETE"
     * @const
     */
    "COMPLETE": "COMPLETE",

    /**
     * value: "FAILED"
     * @const
     */
    "FAILED": "FAILED",

    /**
     * value: "CACHED"
     * @const
     */
    "CACHED": "CACHED",

    /**
     * value: "CANCELLED"
     * @const
     */
    "CANCELLED": "CANCELLED"
};



export default GoogleCloudAiplatformV1beta1Execution;

