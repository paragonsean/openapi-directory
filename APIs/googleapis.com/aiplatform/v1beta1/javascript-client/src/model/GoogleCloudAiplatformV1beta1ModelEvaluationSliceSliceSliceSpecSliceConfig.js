/**
 * Vertex AI API
 * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GoogleCloudAiplatformV1beta1ModelEvaluationSliceSliceSliceSpecRange from './GoogleCloudAiplatformV1beta1ModelEvaluationSliceSliceSliceSpecRange';
import GoogleCloudAiplatformV1beta1ModelEvaluationSliceSliceSliceSpecValue from './GoogleCloudAiplatformV1beta1ModelEvaluationSliceSliceSliceSpecValue';

/**
 * The GoogleCloudAiplatformV1beta1ModelEvaluationSliceSliceSliceSpecSliceConfig model module.
 * @module model/GoogleCloudAiplatformV1beta1ModelEvaluationSliceSliceSliceSpecSliceConfig
 * @version v1beta1
 */
class GoogleCloudAiplatformV1beta1ModelEvaluationSliceSliceSliceSpecSliceConfig {
    /**
     * Constructs a new <code>GoogleCloudAiplatformV1beta1ModelEvaluationSliceSliceSliceSpecSliceConfig</code>.
     * Specification message containing the config for this SliceSpec. When &#x60;kind&#x60; is selected as &#x60;value&#x60; and/or &#x60;range&#x60;, only a single slice will be computed. When &#x60;all_values&#x60; is present, a separate slice will be computed for each possible label/value for the corresponding key in &#x60;config&#x60;. Examples, with feature zip_code with values 12345, 23334, 88888 and feature country with values \&quot;US\&quot;, \&quot;Canada\&quot;, \&quot;Mexico\&quot; in the dataset: Example 1: { \&quot;zip_code\&quot;: { \&quot;value\&quot;: { \&quot;float_value\&quot;: 12345.0 } } } A single slice for any data with zip_code 12345 in the dataset. Example 2: { \&quot;zip_code\&quot;: { \&quot;range\&quot;: { \&quot;low\&quot;: 12345, \&quot;high\&quot;: 20000 } } } A single slice containing data where the zip_codes between 12345 and 20000 For this example, data with the zip_code of 12345 will be in this slice. Example 3: { \&quot;zip_code\&quot;: { \&quot;range\&quot;: { \&quot;low\&quot;: 10000, \&quot;high\&quot;: 20000 } }, \&quot;country\&quot;: { \&quot;value\&quot;: { \&quot;string_value\&quot;: \&quot;US\&quot; } } } A single slice containing data where the zip_codes between 10000 and 20000 has the country \&quot;US\&quot;. For this example, data with the zip_code of 12345 and country \&quot;US\&quot; will be in this slice. Example 4: { \&quot;country\&quot;: {\&quot;all_values\&quot;: { \&quot;value\&quot;: true } } } Three slices are computed, one for each unique country in the dataset. Example 5: { \&quot;country\&quot;: { \&quot;all_values\&quot;: { \&quot;value\&quot;: true } }, \&quot;zip_code\&quot;: { \&quot;value\&quot;: { \&quot;float_value\&quot;: 12345.0 } } } Three slices are computed, one for each unique country in the dataset where the zip_code is also 12345. For this example, data with zip_code 12345 and country \&quot;US\&quot; will be in one slice, zip_code 12345 and country \&quot;Canada\&quot; in another slice, and zip_code 12345 and country \&quot;Mexico\&quot; in another slice, totaling 3 slices.
     * @alias module:model/GoogleCloudAiplatformV1beta1ModelEvaluationSliceSliceSliceSpecSliceConfig
     */
    constructor() { 
        
        GoogleCloudAiplatformV1beta1ModelEvaluationSliceSliceSliceSpecSliceConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleCloudAiplatformV1beta1ModelEvaluationSliceSliceSliceSpecSliceConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleCloudAiplatformV1beta1ModelEvaluationSliceSliceSliceSpecSliceConfig} obj Optional instance to populate.
     * @return {module:model/GoogleCloudAiplatformV1beta1ModelEvaluationSliceSliceSliceSpecSliceConfig} The populated <code>GoogleCloudAiplatformV1beta1ModelEvaluationSliceSliceSliceSpecSliceConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleCloudAiplatformV1beta1ModelEvaluationSliceSliceSliceSpecSliceConfig();

            if (data.hasOwnProperty('allValues')) {
                obj['allValues'] = ApiClient.convertToType(data['allValues'], 'Boolean');
            }
            if (data.hasOwnProperty('range')) {
                obj['range'] = GoogleCloudAiplatformV1beta1ModelEvaluationSliceSliceSliceSpecRange.constructFromObject(data['range']);
            }
            if (data.hasOwnProperty('value')) {
                obj['value'] = GoogleCloudAiplatformV1beta1ModelEvaluationSliceSliceSliceSpecValue.constructFromObject(data['value']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleCloudAiplatformV1beta1ModelEvaluationSliceSliceSliceSpecSliceConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleCloudAiplatformV1beta1ModelEvaluationSliceSliceSliceSpecSliceConfig</code>.
     */
    static validateJSON(data) {
        // validate the optional field `range`
        if (data['range']) { // data not null
          GoogleCloudAiplatformV1beta1ModelEvaluationSliceSliceSliceSpecRange.validateJSON(data['range']);
        }
        // validate the optional field `value`
        if (data['value']) { // data not null
          GoogleCloudAiplatformV1beta1ModelEvaluationSliceSliceSliceSpecValue.validateJSON(data['value']);
        }

        return true;
    }


}



/**
 * If all_values is set to true, then all possible labels of the keyed feature will have another slice computed. Example: `{\"all_values\":{\"value\":true}}`
 * @member {Boolean} allValues
 */
GoogleCloudAiplatformV1beta1ModelEvaluationSliceSliceSliceSpecSliceConfig.prototype['allValues'] = undefined;

/**
 * @member {module:model/GoogleCloudAiplatformV1beta1ModelEvaluationSliceSliceSliceSpecRange} range
 */
GoogleCloudAiplatformV1beta1ModelEvaluationSliceSliceSliceSpecSliceConfig.prototype['range'] = undefined;

/**
 * @member {module:model/GoogleCloudAiplatformV1beta1ModelEvaluationSliceSliceSliceSpecValue} value
 */
GoogleCloudAiplatformV1beta1ModelEvaluationSliceSliceSliceSpecSliceConfig.prototype['value'] = undefined;






export default GoogleCloudAiplatformV1beta1ModelEvaluationSliceSliceSliceSpecSliceConfig;

