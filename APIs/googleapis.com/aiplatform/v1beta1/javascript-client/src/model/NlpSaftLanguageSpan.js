/**
 * Vertex AI API
 * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import NlpSaftLangIdLocalesResult from './NlpSaftLangIdLocalesResult';

/**
 * The NlpSaftLanguageSpan model module.
 * @module model/NlpSaftLanguageSpan
 * @version v1beta1
 */
class NlpSaftLanguageSpan {
    /**
     * Constructs a new <code>NlpSaftLanguageSpan</code>.
     * @alias module:model/NlpSaftLanguageSpan
     */
    constructor() { 
        
        NlpSaftLanguageSpan.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>NlpSaftLanguageSpan</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NlpSaftLanguageSpan} obj Optional instance to populate.
     * @return {module:model/NlpSaftLanguageSpan} The populated <code>NlpSaftLanguageSpan</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NlpSaftLanguageSpan();

            if (data.hasOwnProperty('end')) {
                obj['end'] = ApiClient.convertToType(data['end'], 'Number');
            }
            if (data.hasOwnProperty('languageCode')) {
                obj['languageCode'] = ApiClient.convertToType(data['languageCode'], 'String');
            }
            if (data.hasOwnProperty('locales')) {
                obj['locales'] = NlpSaftLangIdLocalesResult.constructFromObject(data['locales']);
            }
            if (data.hasOwnProperty('probability')) {
                obj['probability'] = ApiClient.convertToType(data['probability'], 'Number');
            }
            if (data.hasOwnProperty('start')) {
                obj['start'] = ApiClient.convertToType(data['start'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NlpSaftLanguageSpan</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NlpSaftLanguageSpan</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['languageCode'] && !(typeof data['languageCode'] === 'string' || data['languageCode'] instanceof String)) {
            throw new Error("Expected the field `languageCode` to be a primitive type in the JSON string but got " + data['languageCode']);
        }
        // validate the optional field `locales`
        if (data['locales']) { // data not null
          NlpSaftLangIdLocalesResult.validateJSON(data['locales']);
        }

        return true;
    }


}



/**
 * @member {Number} end
 */
NlpSaftLanguageSpan.prototype['end'] = undefined;

/**
 * A BCP 47 language code for this span.
 * @member {String} languageCode
 */
NlpSaftLanguageSpan.prototype['languageCode'] = undefined;

/**
 * @member {module:model/NlpSaftLangIdLocalesResult} locales
 */
NlpSaftLanguageSpan.prototype['locales'] = undefined;

/**
 * A probability associated with this prediction.
 * @member {Number} probability
 */
NlpSaftLanguageSpan.prototype['probability'] = undefined;

/**
 * Start and end byte offsets, inclusive, within the given input string. A value of -1 implies that this field is not set. Both fields must either be set with a nonnegative value or both are unset. If both are unset then this LanguageSpan applies to the entire input.
 * @member {Number} start
 */
NlpSaftLanguageSpan.prototype['start'] = undefined;






export default NlpSaftLanguageSpan;

