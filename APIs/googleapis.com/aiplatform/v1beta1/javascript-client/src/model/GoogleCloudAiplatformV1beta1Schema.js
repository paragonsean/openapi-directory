/**
 * Vertex AI API
 * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The GoogleCloudAiplatformV1beta1Schema model module.
 * @module model/GoogleCloudAiplatformV1beta1Schema
 * @version v1beta1
 */
class GoogleCloudAiplatformV1beta1Schema {
    /**
     * Constructs a new <code>GoogleCloudAiplatformV1beta1Schema</code>.
     * Schema is used to define the format of input/output data. Represents a select subset of an [OpenAPI 3.0 schema object](https://spec.openapis.org/oas/v3.0.3#schema). More fields may be added in the future as needed.
     * @alias module:model/GoogleCloudAiplatformV1beta1Schema
     */
    constructor() { 
        
        GoogleCloudAiplatformV1beta1Schema.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleCloudAiplatformV1beta1Schema</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleCloudAiplatformV1beta1Schema} obj Optional instance to populate.
     * @return {module:model/GoogleCloudAiplatformV1beta1Schema} The populated <code>GoogleCloudAiplatformV1beta1Schema</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleCloudAiplatformV1beta1Schema();

            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('enum')) {
                obj['enum'] = ApiClient.convertToType(data['enum'], ['String']);
            }
            if (data.hasOwnProperty('example')) {
                obj['example'] = ApiClient.convertToType(data['example'], Object);
            }
            if (data.hasOwnProperty('format')) {
                obj['format'] = ApiClient.convertToType(data['format'], 'String');
            }
            if (data.hasOwnProperty('items')) {
                obj['items'] = GoogleCloudAiplatformV1beta1Schema.constructFromObject(data['items']);
            }
            if (data.hasOwnProperty('nullable')) {
                obj['nullable'] = ApiClient.convertToType(data['nullable'], 'Boolean');
            }
            if (data.hasOwnProperty('properties')) {
                obj['properties'] = ApiClient.convertToType(data['properties'], {'String': GoogleCloudAiplatformV1beta1Schema});
            }
            if (data.hasOwnProperty('required')) {
                obj['required'] = ApiClient.convertToType(data['required'], ['String']);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleCloudAiplatformV1beta1Schema</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleCloudAiplatformV1beta1Schema</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['enum'])) {
            throw new Error("Expected the field `enum` to be an array in the JSON data but got " + data['enum']);
        }
        // ensure the json data is a string
        if (data['format'] && !(typeof data['format'] === 'string' || data['format'] instanceof String)) {
            throw new Error("Expected the field `format` to be a primitive type in the JSON string but got " + data['format']);
        }
        // validate the optional field `items`
        if (data['items']) { // data not null
          GoogleCloudAiplatformV1beta1Schema.validateJSON(data['items']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['required'])) {
            throw new Error("Expected the field `required` to be an array in the JSON data but got " + data['required']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * Optional. The description of the data.
 * @member {String} description
 */
GoogleCloudAiplatformV1beta1Schema.prototype['description'] = undefined;

/**
 * Optional. Possible values of the element of Type.STRING with enum format. For example we can define an Enum Direction as : {type:STRING, format:enum, enum:[\"EAST\", NORTH\", \"SOUTH\", \"WEST\"]}
 * @member {Array.<String>} enum
 */
GoogleCloudAiplatformV1beta1Schema.prototype['enum'] = undefined;

/**
 * Optional. Example of the object. Will only populated when the object is the root.
 * @member {Object} example
 */
GoogleCloudAiplatformV1beta1Schema.prototype['example'] = undefined;

/**
 * Optional. The format of the data. Supported formats: for NUMBER type: float, double for INTEGER type: int32, int64
 * @member {String} format
 */
GoogleCloudAiplatformV1beta1Schema.prototype['format'] = undefined;

/**
 * @member {module:model/GoogleCloudAiplatformV1beta1Schema} items
 */
GoogleCloudAiplatformV1beta1Schema.prototype['items'] = undefined;

/**
 * Optional. Indicates if the value may be null.
 * @member {Boolean} nullable
 */
GoogleCloudAiplatformV1beta1Schema.prototype['nullable'] = undefined;

/**
 * Optional. Properties of Type.OBJECT.
 * @member {Object.<String, module:model/GoogleCloudAiplatformV1beta1Schema>} properties
 */
GoogleCloudAiplatformV1beta1Schema.prototype['properties'] = undefined;

/**
 * Optional. Required properties of Type.OBJECT.
 * @member {Array.<String>} required
 */
GoogleCloudAiplatformV1beta1Schema.prototype['required'] = undefined;

/**
 * Optional. The type of the data.
 * @member {module:model/GoogleCloudAiplatformV1beta1Schema.TypeEnum} type
 */
GoogleCloudAiplatformV1beta1Schema.prototype['type'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
GoogleCloudAiplatformV1beta1Schema['TypeEnum'] = {

    /**
     * value: "TYPE_UNSPECIFIED"
     * @const
     */
    "TYPE_UNSPECIFIED": "TYPE_UNSPECIFIED",

    /**
     * value: "STRING"
     * @const
     */
    "STRING": "STRING",

    /**
     * value: "NUMBER"
     * @const
     */
    "NUMBER": "NUMBER",

    /**
     * value: "INTEGER"
     * @const
     */
    "INTEGER": "INTEGER",

    /**
     * value: "BOOLEAN"
     * @const
     */
    "BOOLEAN": "BOOLEAN",

    /**
     * value: "ARRAY"
     * @const
     */
    "ARRAY": "ARRAY",

    /**
     * value: "OBJECT"
     * @const
     */
    "OBJECT": "OBJECT"
};



export default GoogleCloudAiplatformV1beta1Schema;

