/**
 * Vertex AI API
 * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudAiplatformV1beta1PythonPackageSpec.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudAiplatformV1beta1PythonPackageSpec::OAIGoogleCloudAiplatformV1beta1PythonPackageSpec(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudAiplatformV1beta1PythonPackageSpec::OAIGoogleCloudAiplatformV1beta1PythonPackageSpec() {
    this->initializeModel();
}

OAIGoogleCloudAiplatformV1beta1PythonPackageSpec::~OAIGoogleCloudAiplatformV1beta1PythonPackageSpec() {}

void OAIGoogleCloudAiplatformV1beta1PythonPackageSpec::initializeModel() {

    m_args_isSet = false;
    m_args_isValid = false;

    m_env_isSet = false;
    m_env_isValid = false;

    m_executor_image_uri_isSet = false;
    m_executor_image_uri_isValid = false;

    m_package_uris_isSet = false;
    m_package_uris_isValid = false;

    m_python_module_isSet = false;
    m_python_module_isValid = false;
}

void OAIGoogleCloudAiplatformV1beta1PythonPackageSpec::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudAiplatformV1beta1PythonPackageSpec::fromJsonObject(QJsonObject json) {

    m_args_isValid = ::OpenAPI::fromJsonValue(m_args, json[QString("args")]);
    m_args_isSet = !json[QString("args")].isNull() && m_args_isValid;

    m_env_isValid = ::OpenAPI::fromJsonValue(m_env, json[QString("env")]);
    m_env_isSet = !json[QString("env")].isNull() && m_env_isValid;

    m_executor_image_uri_isValid = ::OpenAPI::fromJsonValue(m_executor_image_uri, json[QString("executorImageUri")]);
    m_executor_image_uri_isSet = !json[QString("executorImageUri")].isNull() && m_executor_image_uri_isValid;

    m_package_uris_isValid = ::OpenAPI::fromJsonValue(m_package_uris, json[QString("packageUris")]);
    m_package_uris_isSet = !json[QString("packageUris")].isNull() && m_package_uris_isValid;

    m_python_module_isValid = ::OpenAPI::fromJsonValue(m_python_module, json[QString("pythonModule")]);
    m_python_module_isSet = !json[QString("pythonModule")].isNull() && m_python_module_isValid;
}

QString OAIGoogleCloudAiplatformV1beta1PythonPackageSpec::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudAiplatformV1beta1PythonPackageSpec::asJsonObject() const {
    QJsonObject obj;
    if (m_args.size() > 0) {
        obj.insert(QString("args"), ::OpenAPI::toJsonValue(m_args));
    }
    if (m_env.size() > 0) {
        obj.insert(QString("env"), ::OpenAPI::toJsonValue(m_env));
    }
    if (m_executor_image_uri_isSet) {
        obj.insert(QString("executorImageUri"), ::OpenAPI::toJsonValue(m_executor_image_uri));
    }
    if (m_package_uris.size() > 0) {
        obj.insert(QString("packageUris"), ::OpenAPI::toJsonValue(m_package_uris));
    }
    if (m_python_module_isSet) {
        obj.insert(QString("pythonModule"), ::OpenAPI::toJsonValue(m_python_module));
    }
    return obj;
}

QList<QString> OAIGoogleCloudAiplatformV1beta1PythonPackageSpec::getArgs() const {
    return m_args;
}
void OAIGoogleCloudAiplatformV1beta1PythonPackageSpec::setArgs(const QList<QString> &args) {
    m_args = args;
    m_args_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1PythonPackageSpec::is_args_Set() const{
    return m_args_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1PythonPackageSpec::is_args_Valid() const{
    return m_args_isValid;
}

QList<OAIGoogleCloudAiplatformV1beta1EnvVar> OAIGoogleCloudAiplatformV1beta1PythonPackageSpec::getEnv() const {
    return m_env;
}
void OAIGoogleCloudAiplatformV1beta1PythonPackageSpec::setEnv(const QList<OAIGoogleCloudAiplatformV1beta1EnvVar> &env) {
    m_env = env;
    m_env_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1PythonPackageSpec::is_env_Set() const{
    return m_env_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1PythonPackageSpec::is_env_Valid() const{
    return m_env_isValid;
}

QString OAIGoogleCloudAiplatformV1beta1PythonPackageSpec::getExecutorImageUri() const {
    return m_executor_image_uri;
}
void OAIGoogleCloudAiplatformV1beta1PythonPackageSpec::setExecutorImageUri(const QString &executor_image_uri) {
    m_executor_image_uri = executor_image_uri;
    m_executor_image_uri_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1PythonPackageSpec::is_executor_image_uri_Set() const{
    return m_executor_image_uri_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1PythonPackageSpec::is_executor_image_uri_Valid() const{
    return m_executor_image_uri_isValid;
}

QList<QString> OAIGoogleCloudAiplatformV1beta1PythonPackageSpec::getPackageUris() const {
    return m_package_uris;
}
void OAIGoogleCloudAiplatformV1beta1PythonPackageSpec::setPackageUris(const QList<QString> &package_uris) {
    m_package_uris = package_uris;
    m_package_uris_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1PythonPackageSpec::is_package_uris_Set() const{
    return m_package_uris_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1PythonPackageSpec::is_package_uris_Valid() const{
    return m_package_uris_isValid;
}

QString OAIGoogleCloudAiplatformV1beta1PythonPackageSpec::getPythonModule() const {
    return m_python_module;
}
void OAIGoogleCloudAiplatformV1beta1PythonPackageSpec::setPythonModule(const QString &python_module) {
    m_python_module = python_module;
    m_python_module_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1PythonPackageSpec::is_python_module_Set() const{
    return m_python_module_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1PythonPackageSpec::is_python_module_Valid() const{
    return m_python_module_isValid;
}

bool OAIGoogleCloudAiplatformV1beta1PythonPackageSpec::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_args.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_env.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_executor_image_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_package_uris.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_python_module_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudAiplatformV1beta1PythonPackageSpec::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
