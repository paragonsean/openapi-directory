/**
 * Vertex AI API
 * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudAiplatformV1beta1Tool.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudAiplatformV1beta1Tool::OAIGoogleCloudAiplatformV1beta1Tool(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudAiplatformV1beta1Tool::OAIGoogleCloudAiplatformV1beta1Tool() {
    this->initializeModel();
}

OAIGoogleCloudAiplatformV1beta1Tool::~OAIGoogleCloudAiplatformV1beta1Tool() {}

void OAIGoogleCloudAiplatformV1beta1Tool::initializeModel() {

    m_function_declarations_isSet = false;
    m_function_declarations_isValid = false;

    m_google_search_retrieval_isSet = false;
    m_google_search_retrieval_isValid = false;

    m_retrieval_isSet = false;
    m_retrieval_isValid = false;
}

void OAIGoogleCloudAiplatformV1beta1Tool::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudAiplatformV1beta1Tool::fromJsonObject(QJsonObject json) {

    m_function_declarations_isValid = ::OpenAPI::fromJsonValue(m_function_declarations, json[QString("functionDeclarations")]);
    m_function_declarations_isSet = !json[QString("functionDeclarations")].isNull() && m_function_declarations_isValid;

    m_google_search_retrieval_isValid = ::OpenAPI::fromJsonValue(m_google_search_retrieval, json[QString("googleSearchRetrieval")]);
    m_google_search_retrieval_isSet = !json[QString("googleSearchRetrieval")].isNull() && m_google_search_retrieval_isValid;

    m_retrieval_isValid = ::OpenAPI::fromJsonValue(m_retrieval, json[QString("retrieval")]);
    m_retrieval_isSet = !json[QString("retrieval")].isNull() && m_retrieval_isValid;
}

QString OAIGoogleCloudAiplatformV1beta1Tool::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudAiplatformV1beta1Tool::asJsonObject() const {
    QJsonObject obj;
    if (m_function_declarations.size() > 0) {
        obj.insert(QString("functionDeclarations"), ::OpenAPI::toJsonValue(m_function_declarations));
    }
    if (m_google_search_retrieval.isSet()) {
        obj.insert(QString("googleSearchRetrieval"), ::OpenAPI::toJsonValue(m_google_search_retrieval));
    }
    if (m_retrieval.isSet()) {
        obj.insert(QString("retrieval"), ::OpenAPI::toJsonValue(m_retrieval));
    }
    return obj;
}

QList<OAIGoogleCloudAiplatformV1beta1FunctionDeclaration> OAIGoogleCloudAiplatformV1beta1Tool::getFunctionDeclarations() const {
    return m_function_declarations;
}
void OAIGoogleCloudAiplatformV1beta1Tool::setFunctionDeclarations(const QList<OAIGoogleCloudAiplatformV1beta1FunctionDeclaration> &function_declarations) {
    m_function_declarations = function_declarations;
    m_function_declarations_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1Tool::is_function_declarations_Set() const{
    return m_function_declarations_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1Tool::is_function_declarations_Valid() const{
    return m_function_declarations_isValid;
}

OAIGoogleCloudAiplatformV1beta1GoogleSearchRetrieval OAIGoogleCloudAiplatformV1beta1Tool::getGoogleSearchRetrieval() const {
    return m_google_search_retrieval;
}
void OAIGoogleCloudAiplatformV1beta1Tool::setGoogleSearchRetrieval(const OAIGoogleCloudAiplatformV1beta1GoogleSearchRetrieval &google_search_retrieval) {
    m_google_search_retrieval = google_search_retrieval;
    m_google_search_retrieval_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1Tool::is_google_search_retrieval_Set() const{
    return m_google_search_retrieval_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1Tool::is_google_search_retrieval_Valid() const{
    return m_google_search_retrieval_isValid;
}

OAIGoogleCloudAiplatformV1beta1Retrieval OAIGoogleCloudAiplatformV1beta1Tool::getRetrieval() const {
    return m_retrieval;
}
void OAIGoogleCloudAiplatformV1beta1Tool::setRetrieval(const OAIGoogleCloudAiplatformV1beta1Retrieval &retrieval) {
    m_retrieval = retrieval;
    m_retrieval_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1Tool::is_retrieval_Set() const{
    return m_retrieval_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1Tool::is_retrieval_Valid() const{
    return m_retrieval_isValid;
}

bool OAIGoogleCloudAiplatformV1beta1Tool::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_function_declarations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_google_search_retrieval.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_retrieval.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudAiplatformV1beta1Tool::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
