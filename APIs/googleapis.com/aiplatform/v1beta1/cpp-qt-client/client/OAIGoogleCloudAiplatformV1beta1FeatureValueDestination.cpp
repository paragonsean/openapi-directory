/**
 * Vertex AI API
 * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudAiplatformV1beta1FeatureValueDestination.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudAiplatformV1beta1FeatureValueDestination::OAIGoogleCloudAiplatformV1beta1FeatureValueDestination(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudAiplatformV1beta1FeatureValueDestination::OAIGoogleCloudAiplatformV1beta1FeatureValueDestination() {
    this->initializeModel();
}

OAIGoogleCloudAiplatformV1beta1FeatureValueDestination::~OAIGoogleCloudAiplatformV1beta1FeatureValueDestination() {}

void OAIGoogleCloudAiplatformV1beta1FeatureValueDestination::initializeModel() {

    m_bigquery_destination_isSet = false;
    m_bigquery_destination_isValid = false;

    m_csv_destination_isSet = false;
    m_csv_destination_isValid = false;

    m_tfrecord_destination_isSet = false;
    m_tfrecord_destination_isValid = false;
}

void OAIGoogleCloudAiplatformV1beta1FeatureValueDestination::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudAiplatformV1beta1FeatureValueDestination::fromJsonObject(QJsonObject json) {

    m_bigquery_destination_isValid = ::OpenAPI::fromJsonValue(m_bigquery_destination, json[QString("bigqueryDestination")]);
    m_bigquery_destination_isSet = !json[QString("bigqueryDestination")].isNull() && m_bigquery_destination_isValid;

    m_csv_destination_isValid = ::OpenAPI::fromJsonValue(m_csv_destination, json[QString("csvDestination")]);
    m_csv_destination_isSet = !json[QString("csvDestination")].isNull() && m_csv_destination_isValid;

    m_tfrecord_destination_isValid = ::OpenAPI::fromJsonValue(m_tfrecord_destination, json[QString("tfrecordDestination")]);
    m_tfrecord_destination_isSet = !json[QString("tfrecordDestination")].isNull() && m_tfrecord_destination_isValid;
}

QString OAIGoogleCloudAiplatformV1beta1FeatureValueDestination::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudAiplatformV1beta1FeatureValueDestination::asJsonObject() const {
    QJsonObject obj;
    if (m_bigquery_destination.isSet()) {
        obj.insert(QString("bigqueryDestination"), ::OpenAPI::toJsonValue(m_bigquery_destination));
    }
    if (m_csv_destination.isSet()) {
        obj.insert(QString("csvDestination"), ::OpenAPI::toJsonValue(m_csv_destination));
    }
    if (m_tfrecord_destination.isSet()) {
        obj.insert(QString("tfrecordDestination"), ::OpenAPI::toJsonValue(m_tfrecord_destination));
    }
    return obj;
}

OAIGoogleCloudAiplatformV1beta1BigQueryDestination OAIGoogleCloudAiplatformV1beta1FeatureValueDestination::getBigqueryDestination() const {
    return m_bigquery_destination;
}
void OAIGoogleCloudAiplatformV1beta1FeatureValueDestination::setBigqueryDestination(const OAIGoogleCloudAiplatformV1beta1BigQueryDestination &bigquery_destination) {
    m_bigquery_destination = bigquery_destination;
    m_bigquery_destination_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1FeatureValueDestination::is_bigquery_destination_Set() const{
    return m_bigquery_destination_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1FeatureValueDestination::is_bigquery_destination_Valid() const{
    return m_bigquery_destination_isValid;
}

OAIGoogleCloudAiplatformV1beta1CsvDestination OAIGoogleCloudAiplatformV1beta1FeatureValueDestination::getCsvDestination() const {
    return m_csv_destination;
}
void OAIGoogleCloudAiplatformV1beta1FeatureValueDestination::setCsvDestination(const OAIGoogleCloudAiplatformV1beta1CsvDestination &csv_destination) {
    m_csv_destination = csv_destination;
    m_csv_destination_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1FeatureValueDestination::is_csv_destination_Set() const{
    return m_csv_destination_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1FeatureValueDestination::is_csv_destination_Valid() const{
    return m_csv_destination_isValid;
}

OAIGoogleCloudAiplatformV1beta1TFRecordDestination OAIGoogleCloudAiplatformV1beta1FeatureValueDestination::getTfrecordDestination() const {
    return m_tfrecord_destination;
}
void OAIGoogleCloudAiplatformV1beta1FeatureValueDestination::setTfrecordDestination(const OAIGoogleCloudAiplatformV1beta1TFRecordDestination &tfrecord_destination) {
    m_tfrecord_destination = tfrecord_destination;
    m_tfrecord_destination_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1FeatureValueDestination::is_tfrecord_destination_Set() const{
    return m_tfrecord_destination_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1FeatureValueDestination::is_tfrecord_destination_Valid() const{
    return m_tfrecord_destination_isValid;
}

bool OAIGoogleCloudAiplatformV1beta1FeatureValueDestination::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bigquery_destination.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_csv_destination.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tfrecord_destination.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudAiplatformV1beta1FeatureValueDestination::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
