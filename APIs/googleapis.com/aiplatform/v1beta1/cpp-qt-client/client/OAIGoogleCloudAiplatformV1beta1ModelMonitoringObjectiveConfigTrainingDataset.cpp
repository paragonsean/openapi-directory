/**
 * Vertex AI API
 * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudAiplatformV1beta1ModelMonitoringObjectiveConfigTrainingDataset.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudAiplatformV1beta1ModelMonitoringObjectiveConfigTrainingDataset::OAIGoogleCloudAiplatformV1beta1ModelMonitoringObjectiveConfigTrainingDataset(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudAiplatformV1beta1ModelMonitoringObjectiveConfigTrainingDataset::OAIGoogleCloudAiplatformV1beta1ModelMonitoringObjectiveConfigTrainingDataset() {
    this->initializeModel();
}

OAIGoogleCloudAiplatformV1beta1ModelMonitoringObjectiveConfigTrainingDataset::~OAIGoogleCloudAiplatformV1beta1ModelMonitoringObjectiveConfigTrainingDataset() {}

void OAIGoogleCloudAiplatformV1beta1ModelMonitoringObjectiveConfigTrainingDataset::initializeModel() {

    m_bigquery_source_isSet = false;
    m_bigquery_source_isValid = false;

    m_data_format_isSet = false;
    m_data_format_isValid = false;

    m_dataset_isSet = false;
    m_dataset_isValid = false;

    m_gcs_source_isSet = false;
    m_gcs_source_isValid = false;

    m_logging_sampling_strategy_isSet = false;
    m_logging_sampling_strategy_isValid = false;

    m_target_field_isSet = false;
    m_target_field_isValid = false;
}

void OAIGoogleCloudAiplatformV1beta1ModelMonitoringObjectiveConfigTrainingDataset::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudAiplatformV1beta1ModelMonitoringObjectiveConfigTrainingDataset::fromJsonObject(QJsonObject json) {

    m_bigquery_source_isValid = ::OpenAPI::fromJsonValue(m_bigquery_source, json[QString("bigquerySource")]);
    m_bigquery_source_isSet = !json[QString("bigquerySource")].isNull() && m_bigquery_source_isValid;

    m_data_format_isValid = ::OpenAPI::fromJsonValue(m_data_format, json[QString("dataFormat")]);
    m_data_format_isSet = !json[QString("dataFormat")].isNull() && m_data_format_isValid;

    m_dataset_isValid = ::OpenAPI::fromJsonValue(m_dataset, json[QString("dataset")]);
    m_dataset_isSet = !json[QString("dataset")].isNull() && m_dataset_isValid;

    m_gcs_source_isValid = ::OpenAPI::fromJsonValue(m_gcs_source, json[QString("gcsSource")]);
    m_gcs_source_isSet = !json[QString("gcsSource")].isNull() && m_gcs_source_isValid;

    m_logging_sampling_strategy_isValid = ::OpenAPI::fromJsonValue(m_logging_sampling_strategy, json[QString("loggingSamplingStrategy")]);
    m_logging_sampling_strategy_isSet = !json[QString("loggingSamplingStrategy")].isNull() && m_logging_sampling_strategy_isValid;

    m_target_field_isValid = ::OpenAPI::fromJsonValue(m_target_field, json[QString("targetField")]);
    m_target_field_isSet = !json[QString("targetField")].isNull() && m_target_field_isValid;
}

QString OAIGoogleCloudAiplatformV1beta1ModelMonitoringObjectiveConfigTrainingDataset::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudAiplatformV1beta1ModelMonitoringObjectiveConfigTrainingDataset::asJsonObject() const {
    QJsonObject obj;
    if (m_bigquery_source.isSet()) {
        obj.insert(QString("bigquerySource"), ::OpenAPI::toJsonValue(m_bigquery_source));
    }
    if (m_data_format_isSet) {
        obj.insert(QString("dataFormat"), ::OpenAPI::toJsonValue(m_data_format));
    }
    if (m_dataset_isSet) {
        obj.insert(QString("dataset"), ::OpenAPI::toJsonValue(m_dataset));
    }
    if (m_gcs_source.isSet()) {
        obj.insert(QString("gcsSource"), ::OpenAPI::toJsonValue(m_gcs_source));
    }
    if (m_logging_sampling_strategy.isSet()) {
        obj.insert(QString("loggingSamplingStrategy"), ::OpenAPI::toJsonValue(m_logging_sampling_strategy));
    }
    if (m_target_field_isSet) {
        obj.insert(QString("targetField"), ::OpenAPI::toJsonValue(m_target_field));
    }
    return obj;
}

OAIGoogleCloudAiplatformV1beta1BigQuerySource OAIGoogleCloudAiplatformV1beta1ModelMonitoringObjectiveConfigTrainingDataset::getBigquerySource() const {
    return m_bigquery_source;
}
void OAIGoogleCloudAiplatformV1beta1ModelMonitoringObjectiveConfigTrainingDataset::setBigquerySource(const OAIGoogleCloudAiplatformV1beta1BigQuerySource &bigquery_source) {
    m_bigquery_source = bigquery_source;
    m_bigquery_source_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1ModelMonitoringObjectiveConfigTrainingDataset::is_bigquery_source_Set() const{
    return m_bigquery_source_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1ModelMonitoringObjectiveConfigTrainingDataset::is_bigquery_source_Valid() const{
    return m_bigquery_source_isValid;
}

QString OAIGoogleCloudAiplatformV1beta1ModelMonitoringObjectiveConfigTrainingDataset::getDataFormat() const {
    return m_data_format;
}
void OAIGoogleCloudAiplatformV1beta1ModelMonitoringObjectiveConfigTrainingDataset::setDataFormat(const QString &data_format) {
    m_data_format = data_format;
    m_data_format_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1ModelMonitoringObjectiveConfigTrainingDataset::is_data_format_Set() const{
    return m_data_format_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1ModelMonitoringObjectiveConfigTrainingDataset::is_data_format_Valid() const{
    return m_data_format_isValid;
}

QString OAIGoogleCloudAiplatformV1beta1ModelMonitoringObjectiveConfigTrainingDataset::getDataset() const {
    return m_dataset;
}
void OAIGoogleCloudAiplatformV1beta1ModelMonitoringObjectiveConfigTrainingDataset::setDataset(const QString &dataset) {
    m_dataset = dataset;
    m_dataset_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1ModelMonitoringObjectiveConfigTrainingDataset::is_dataset_Set() const{
    return m_dataset_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1ModelMonitoringObjectiveConfigTrainingDataset::is_dataset_Valid() const{
    return m_dataset_isValid;
}

OAIGoogleCloudAiplatformV1beta1GcsSource OAIGoogleCloudAiplatformV1beta1ModelMonitoringObjectiveConfigTrainingDataset::getGcsSource() const {
    return m_gcs_source;
}
void OAIGoogleCloudAiplatformV1beta1ModelMonitoringObjectiveConfigTrainingDataset::setGcsSource(const OAIGoogleCloudAiplatformV1beta1GcsSource &gcs_source) {
    m_gcs_source = gcs_source;
    m_gcs_source_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1ModelMonitoringObjectiveConfigTrainingDataset::is_gcs_source_Set() const{
    return m_gcs_source_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1ModelMonitoringObjectiveConfigTrainingDataset::is_gcs_source_Valid() const{
    return m_gcs_source_isValid;
}

OAIGoogleCloudAiplatformV1beta1SamplingStrategy OAIGoogleCloudAiplatformV1beta1ModelMonitoringObjectiveConfigTrainingDataset::getLoggingSamplingStrategy() const {
    return m_logging_sampling_strategy;
}
void OAIGoogleCloudAiplatformV1beta1ModelMonitoringObjectiveConfigTrainingDataset::setLoggingSamplingStrategy(const OAIGoogleCloudAiplatformV1beta1SamplingStrategy &logging_sampling_strategy) {
    m_logging_sampling_strategy = logging_sampling_strategy;
    m_logging_sampling_strategy_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1ModelMonitoringObjectiveConfigTrainingDataset::is_logging_sampling_strategy_Set() const{
    return m_logging_sampling_strategy_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1ModelMonitoringObjectiveConfigTrainingDataset::is_logging_sampling_strategy_Valid() const{
    return m_logging_sampling_strategy_isValid;
}

QString OAIGoogleCloudAiplatformV1beta1ModelMonitoringObjectiveConfigTrainingDataset::getTargetField() const {
    return m_target_field;
}
void OAIGoogleCloudAiplatformV1beta1ModelMonitoringObjectiveConfigTrainingDataset::setTargetField(const QString &target_field) {
    m_target_field = target_field;
    m_target_field_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1ModelMonitoringObjectiveConfigTrainingDataset::is_target_field_Set() const{
    return m_target_field_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1ModelMonitoringObjectiveConfigTrainingDataset::is_target_field_Valid() const{
    return m_target_field_isValid;
}

bool OAIGoogleCloudAiplatformV1beta1ModelMonitoringObjectiveConfigTrainingDataset::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bigquery_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dataset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gcs_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_logging_sampling_strategy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_field_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudAiplatformV1beta1ModelMonitoringObjectiveConfigTrainingDataset::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
