/**
 * Vertex AI API
 * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudAiplatformV1beta1ModelMonitoringConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudAiplatformV1beta1ModelMonitoringConfig::OAIGoogleCloudAiplatformV1beta1ModelMonitoringConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudAiplatformV1beta1ModelMonitoringConfig::OAIGoogleCloudAiplatformV1beta1ModelMonitoringConfig() {
    this->initializeModel();
}

OAIGoogleCloudAiplatformV1beta1ModelMonitoringConfig::~OAIGoogleCloudAiplatformV1beta1ModelMonitoringConfig() {}

void OAIGoogleCloudAiplatformV1beta1ModelMonitoringConfig::initializeModel() {

    m_alert_config_isSet = false;
    m_alert_config_isValid = false;

    m_analysis_instance_schema_uri_isSet = false;
    m_analysis_instance_schema_uri_isValid = false;

    m_objective_configs_isSet = false;
    m_objective_configs_isValid = false;

    m_stats_anomalies_base_directory_isSet = false;
    m_stats_anomalies_base_directory_isValid = false;
}

void OAIGoogleCloudAiplatformV1beta1ModelMonitoringConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudAiplatformV1beta1ModelMonitoringConfig::fromJsonObject(QJsonObject json) {

    m_alert_config_isValid = ::OpenAPI::fromJsonValue(m_alert_config, json[QString("alertConfig")]);
    m_alert_config_isSet = !json[QString("alertConfig")].isNull() && m_alert_config_isValid;

    m_analysis_instance_schema_uri_isValid = ::OpenAPI::fromJsonValue(m_analysis_instance_schema_uri, json[QString("analysisInstanceSchemaUri")]);
    m_analysis_instance_schema_uri_isSet = !json[QString("analysisInstanceSchemaUri")].isNull() && m_analysis_instance_schema_uri_isValid;

    m_objective_configs_isValid = ::OpenAPI::fromJsonValue(m_objective_configs, json[QString("objectiveConfigs")]);
    m_objective_configs_isSet = !json[QString("objectiveConfigs")].isNull() && m_objective_configs_isValid;

    m_stats_anomalies_base_directory_isValid = ::OpenAPI::fromJsonValue(m_stats_anomalies_base_directory, json[QString("statsAnomaliesBaseDirectory")]);
    m_stats_anomalies_base_directory_isSet = !json[QString("statsAnomaliesBaseDirectory")].isNull() && m_stats_anomalies_base_directory_isValid;
}

QString OAIGoogleCloudAiplatformV1beta1ModelMonitoringConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudAiplatformV1beta1ModelMonitoringConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_alert_config.isSet()) {
        obj.insert(QString("alertConfig"), ::OpenAPI::toJsonValue(m_alert_config));
    }
    if (m_analysis_instance_schema_uri_isSet) {
        obj.insert(QString("analysisInstanceSchemaUri"), ::OpenAPI::toJsonValue(m_analysis_instance_schema_uri));
    }
    if (m_objective_configs.size() > 0) {
        obj.insert(QString("objectiveConfigs"), ::OpenAPI::toJsonValue(m_objective_configs));
    }
    if (m_stats_anomalies_base_directory.isSet()) {
        obj.insert(QString("statsAnomaliesBaseDirectory"), ::OpenAPI::toJsonValue(m_stats_anomalies_base_directory));
    }
    return obj;
}

OAIGoogleCloudAiplatformV1beta1ModelMonitoringAlertConfig OAIGoogleCloudAiplatformV1beta1ModelMonitoringConfig::getAlertConfig() const {
    return m_alert_config;
}
void OAIGoogleCloudAiplatformV1beta1ModelMonitoringConfig::setAlertConfig(const OAIGoogleCloudAiplatformV1beta1ModelMonitoringAlertConfig &alert_config) {
    m_alert_config = alert_config;
    m_alert_config_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1ModelMonitoringConfig::is_alert_config_Set() const{
    return m_alert_config_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1ModelMonitoringConfig::is_alert_config_Valid() const{
    return m_alert_config_isValid;
}

QString OAIGoogleCloudAiplatformV1beta1ModelMonitoringConfig::getAnalysisInstanceSchemaUri() const {
    return m_analysis_instance_schema_uri;
}
void OAIGoogleCloudAiplatformV1beta1ModelMonitoringConfig::setAnalysisInstanceSchemaUri(const QString &analysis_instance_schema_uri) {
    m_analysis_instance_schema_uri = analysis_instance_schema_uri;
    m_analysis_instance_schema_uri_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1ModelMonitoringConfig::is_analysis_instance_schema_uri_Set() const{
    return m_analysis_instance_schema_uri_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1ModelMonitoringConfig::is_analysis_instance_schema_uri_Valid() const{
    return m_analysis_instance_schema_uri_isValid;
}

QList<OAIGoogleCloudAiplatformV1beta1ModelMonitoringObjectiveConfig> OAIGoogleCloudAiplatformV1beta1ModelMonitoringConfig::getObjectiveConfigs() const {
    return m_objective_configs;
}
void OAIGoogleCloudAiplatformV1beta1ModelMonitoringConfig::setObjectiveConfigs(const QList<OAIGoogleCloudAiplatformV1beta1ModelMonitoringObjectiveConfig> &objective_configs) {
    m_objective_configs = objective_configs;
    m_objective_configs_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1ModelMonitoringConfig::is_objective_configs_Set() const{
    return m_objective_configs_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1ModelMonitoringConfig::is_objective_configs_Valid() const{
    return m_objective_configs_isValid;
}

OAIGoogleCloudAiplatformV1beta1GcsDestination OAIGoogleCloudAiplatformV1beta1ModelMonitoringConfig::getStatsAnomaliesBaseDirectory() const {
    return m_stats_anomalies_base_directory;
}
void OAIGoogleCloudAiplatformV1beta1ModelMonitoringConfig::setStatsAnomaliesBaseDirectory(const OAIGoogleCloudAiplatformV1beta1GcsDestination &stats_anomalies_base_directory) {
    m_stats_anomalies_base_directory = stats_anomalies_base_directory;
    m_stats_anomalies_base_directory_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1ModelMonitoringConfig::is_stats_anomalies_base_directory_Set() const{
    return m_stats_anomalies_base_directory_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1ModelMonitoringConfig::is_stats_anomalies_base_directory_Valid() const{
    return m_stats_anomalies_base_directory_isValid;
}

bool OAIGoogleCloudAiplatformV1beta1ModelMonitoringConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_alert_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_analysis_instance_schema_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_objective_configs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_stats_anomalies_base_directory.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudAiplatformV1beta1ModelMonitoringConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
