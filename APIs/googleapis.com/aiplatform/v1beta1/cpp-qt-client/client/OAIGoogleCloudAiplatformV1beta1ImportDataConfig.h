/**
 * Vertex AI API
 * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGoogleCloudAiplatformV1beta1ImportDataConfig.h
 *
 * Describes the location from where we import data into a Dataset, together with the labels that will be applied to the DataItems and the Annotations.
 */

#ifndef OAIGoogleCloudAiplatformV1beta1ImportDataConfig_H
#define OAIGoogleCloudAiplatformV1beta1ImportDataConfig_H

#include <QJsonObject>

#include "OAIGoogleCloudAiplatformV1beta1GcsSource.h"
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIGoogleCloudAiplatformV1beta1GcsSource;

class OAIGoogleCloudAiplatformV1beta1ImportDataConfig : public OAIObject {
public:
    OAIGoogleCloudAiplatformV1beta1ImportDataConfig();
    OAIGoogleCloudAiplatformV1beta1ImportDataConfig(QString json);
    ~OAIGoogleCloudAiplatformV1beta1ImportDataConfig() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QMap<QString, QString> getAnnotationLabels() const;
    void setAnnotationLabels(const QMap<QString, QString> &annotation_labels);
    bool is_annotation_labels_Set() const;
    bool is_annotation_labels_Valid() const;

    QMap<QString, QString> getDataItemLabels() const;
    void setDataItemLabels(const QMap<QString, QString> &data_item_labels);
    bool is_data_item_labels_Set() const;
    bool is_data_item_labels_Valid() const;

    OAIGoogleCloudAiplatformV1beta1GcsSource getGcsSource() const;
    void setGcsSource(const OAIGoogleCloudAiplatformV1beta1GcsSource &gcs_source);
    bool is_gcs_source_Set() const;
    bool is_gcs_source_Valid() const;

    QString getImportSchemaUri() const;
    void setImportSchemaUri(const QString &import_schema_uri);
    bool is_import_schema_uri_Set() const;
    bool is_import_schema_uri_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QMap<QString, QString> m_annotation_labels;
    bool m_annotation_labels_isSet;
    bool m_annotation_labels_isValid;

    QMap<QString, QString> m_data_item_labels;
    bool m_data_item_labels_isSet;
    bool m_data_item_labels_isValid;

    OAIGoogleCloudAiplatformV1beta1GcsSource m_gcs_source;
    bool m_gcs_source_isSet;
    bool m_gcs_source_isValid;

    QString m_import_schema_uri;
    bool m_import_schema_uri_isSet;
    bool m_import_schema_uri_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGoogleCloudAiplatformV1beta1ImportDataConfig)

#endif // OAIGoogleCloudAiplatformV1beta1ImportDataConfig_H
