/**
 * Vertex AI API
 * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudAiplatformV1beta1TensorboardTimeSeriesMetadata.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudAiplatformV1beta1TensorboardTimeSeriesMetadata::OAIGoogleCloudAiplatformV1beta1TensorboardTimeSeriesMetadata(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudAiplatformV1beta1TensorboardTimeSeriesMetadata::OAIGoogleCloudAiplatformV1beta1TensorboardTimeSeriesMetadata() {
    this->initializeModel();
}

OAIGoogleCloudAiplatformV1beta1TensorboardTimeSeriesMetadata::~OAIGoogleCloudAiplatformV1beta1TensorboardTimeSeriesMetadata() {}

void OAIGoogleCloudAiplatformV1beta1TensorboardTimeSeriesMetadata::initializeModel() {

    m_max_blob_sequence_length_isSet = false;
    m_max_blob_sequence_length_isValid = false;

    m_max_step_isSet = false;
    m_max_step_isValid = false;

    m_max_wall_time_isSet = false;
    m_max_wall_time_isValid = false;
}

void OAIGoogleCloudAiplatformV1beta1TensorboardTimeSeriesMetadata::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudAiplatformV1beta1TensorboardTimeSeriesMetadata::fromJsonObject(QJsonObject json) {

    m_max_blob_sequence_length_isValid = ::OpenAPI::fromJsonValue(m_max_blob_sequence_length, json[QString("maxBlobSequenceLength")]);
    m_max_blob_sequence_length_isSet = !json[QString("maxBlobSequenceLength")].isNull() && m_max_blob_sequence_length_isValid;

    m_max_step_isValid = ::OpenAPI::fromJsonValue(m_max_step, json[QString("maxStep")]);
    m_max_step_isSet = !json[QString("maxStep")].isNull() && m_max_step_isValid;

    m_max_wall_time_isValid = ::OpenAPI::fromJsonValue(m_max_wall_time, json[QString("maxWallTime")]);
    m_max_wall_time_isSet = !json[QString("maxWallTime")].isNull() && m_max_wall_time_isValid;
}

QString OAIGoogleCloudAiplatformV1beta1TensorboardTimeSeriesMetadata::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudAiplatformV1beta1TensorboardTimeSeriesMetadata::asJsonObject() const {
    QJsonObject obj;
    if (m_max_blob_sequence_length_isSet) {
        obj.insert(QString("maxBlobSequenceLength"), ::OpenAPI::toJsonValue(m_max_blob_sequence_length));
    }
    if (m_max_step_isSet) {
        obj.insert(QString("maxStep"), ::OpenAPI::toJsonValue(m_max_step));
    }
    if (m_max_wall_time_isSet) {
        obj.insert(QString("maxWallTime"), ::OpenAPI::toJsonValue(m_max_wall_time));
    }
    return obj;
}

QString OAIGoogleCloudAiplatformV1beta1TensorboardTimeSeriesMetadata::getMaxBlobSequenceLength() const {
    return m_max_blob_sequence_length;
}
void OAIGoogleCloudAiplatformV1beta1TensorboardTimeSeriesMetadata::setMaxBlobSequenceLength(const QString &max_blob_sequence_length) {
    m_max_blob_sequence_length = max_blob_sequence_length;
    m_max_blob_sequence_length_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1TensorboardTimeSeriesMetadata::is_max_blob_sequence_length_Set() const{
    return m_max_blob_sequence_length_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1TensorboardTimeSeriesMetadata::is_max_blob_sequence_length_Valid() const{
    return m_max_blob_sequence_length_isValid;
}

QString OAIGoogleCloudAiplatformV1beta1TensorboardTimeSeriesMetadata::getMaxStep() const {
    return m_max_step;
}
void OAIGoogleCloudAiplatformV1beta1TensorboardTimeSeriesMetadata::setMaxStep(const QString &max_step) {
    m_max_step = max_step;
    m_max_step_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1TensorboardTimeSeriesMetadata::is_max_step_Set() const{
    return m_max_step_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1TensorboardTimeSeriesMetadata::is_max_step_Valid() const{
    return m_max_step_isValid;
}

QString OAIGoogleCloudAiplatformV1beta1TensorboardTimeSeriesMetadata::getMaxWallTime() const {
    return m_max_wall_time;
}
void OAIGoogleCloudAiplatformV1beta1TensorboardTimeSeriesMetadata::setMaxWallTime(const QString &max_wall_time) {
    m_max_wall_time = max_wall_time;
    m_max_wall_time_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1TensorboardTimeSeriesMetadata::is_max_wall_time_Set() const{
    return m_max_wall_time_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1TensorboardTimeSeriesMetadata::is_max_wall_time_Valid() const{
    return m_max_wall_time_isValid;
}

bool OAIGoogleCloudAiplatformV1beta1TensorboardTimeSeriesMetadata::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_max_blob_sequence_length_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_step_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_wall_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudAiplatformV1beta1TensorboardTimeSeriesMetadata::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
