/**
 * Vertex AI API
 * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudAiplatformV1beta1Tensor.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudAiplatformV1beta1Tensor::OAIGoogleCloudAiplatformV1beta1Tensor(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudAiplatformV1beta1Tensor::OAIGoogleCloudAiplatformV1beta1Tensor() {
    this->initializeModel();
}

OAIGoogleCloudAiplatformV1beta1Tensor::~OAIGoogleCloudAiplatformV1beta1Tensor() {}

void OAIGoogleCloudAiplatformV1beta1Tensor::initializeModel() {

    m_bool_val_isSet = false;
    m_bool_val_isValid = false;

    m_bytes_val_isSet = false;
    m_bytes_val_isValid = false;

    m_double_val_isSet = false;
    m_double_val_isValid = false;

    m_dtype_isSet = false;
    m_dtype_isValid = false;

    m_float_val_isSet = false;
    m_float_val_isValid = false;

    m_int64_val_isSet = false;
    m_int64_val_isValid = false;

    m_int_val_isSet = false;
    m_int_val_isValid = false;

    m_list_val_isSet = false;
    m_list_val_isValid = false;

    m_shape_isSet = false;
    m_shape_isValid = false;

    m_string_val_isSet = false;
    m_string_val_isValid = false;

    m_struct_val_isSet = false;
    m_struct_val_isValid = false;

    m_tensor_val_isSet = false;
    m_tensor_val_isValid = false;

    m_uint64_val_isSet = false;
    m_uint64_val_isValid = false;

    m_uint_val_isSet = false;
    m_uint_val_isValid = false;
}

void OAIGoogleCloudAiplatformV1beta1Tensor::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudAiplatformV1beta1Tensor::fromJsonObject(QJsonObject json) {

    m_bool_val_isValid = ::OpenAPI::fromJsonValue(m_bool_val, json[QString("boolVal")]);
    m_bool_val_isSet = !json[QString("boolVal")].isNull() && m_bool_val_isValid;

    m_bytes_val_isValid = ::OpenAPI::fromJsonValue(m_bytes_val, json[QString("bytesVal")]);
    m_bytes_val_isSet = !json[QString("bytesVal")].isNull() && m_bytes_val_isValid;

    m_double_val_isValid = ::OpenAPI::fromJsonValue(m_double_val, json[QString("doubleVal")]);
    m_double_val_isSet = !json[QString("doubleVal")].isNull() && m_double_val_isValid;

    m_dtype_isValid = ::OpenAPI::fromJsonValue(m_dtype, json[QString("dtype")]);
    m_dtype_isSet = !json[QString("dtype")].isNull() && m_dtype_isValid;

    m_float_val_isValid = ::OpenAPI::fromJsonValue(m_float_val, json[QString("floatVal")]);
    m_float_val_isSet = !json[QString("floatVal")].isNull() && m_float_val_isValid;

    m_int64_val_isValid = ::OpenAPI::fromJsonValue(m_int64_val, json[QString("int64Val")]);
    m_int64_val_isSet = !json[QString("int64Val")].isNull() && m_int64_val_isValid;

    m_int_val_isValid = ::OpenAPI::fromJsonValue(m_int_val, json[QString("intVal")]);
    m_int_val_isSet = !json[QString("intVal")].isNull() && m_int_val_isValid;

    m_list_val_isValid = ::OpenAPI::fromJsonValue(m_list_val, json[QString("listVal")]);
    m_list_val_isSet = !json[QString("listVal")].isNull() && m_list_val_isValid;

    m_shape_isValid = ::OpenAPI::fromJsonValue(m_shape, json[QString("shape")]);
    m_shape_isSet = !json[QString("shape")].isNull() && m_shape_isValid;

    m_string_val_isValid = ::OpenAPI::fromJsonValue(m_string_val, json[QString("stringVal")]);
    m_string_val_isSet = !json[QString("stringVal")].isNull() && m_string_val_isValid;

    m_struct_val_isValid = ::OpenAPI::fromJsonValue(m_struct_val, json[QString("structVal")]);
    m_struct_val_isSet = !json[QString("structVal")].isNull() && m_struct_val_isValid;

    m_tensor_val_isValid = ::OpenAPI::fromJsonValue(m_tensor_val, json[QString("tensorVal")]);
    m_tensor_val_isSet = !json[QString("tensorVal")].isNull() && m_tensor_val_isValid;

    m_uint64_val_isValid = ::OpenAPI::fromJsonValue(m_uint64_val, json[QString("uint64Val")]);
    m_uint64_val_isSet = !json[QString("uint64Val")].isNull() && m_uint64_val_isValid;

    m_uint_val_isValid = ::OpenAPI::fromJsonValue(m_uint_val, json[QString("uintVal")]);
    m_uint_val_isSet = !json[QString("uintVal")].isNull() && m_uint_val_isValid;
}

QString OAIGoogleCloudAiplatformV1beta1Tensor::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudAiplatformV1beta1Tensor::asJsonObject() const {
    QJsonObject obj;
    if (m_bool_val.size() > 0) {
        obj.insert(QString("boolVal"), ::OpenAPI::toJsonValue(m_bool_val));
    }
    if (m_bytes_val.size() > 0) {
        obj.insert(QString("bytesVal"), ::OpenAPI::toJsonValue(m_bytes_val));
    }
    if (m_double_val.size() > 0) {
        obj.insert(QString("doubleVal"), ::OpenAPI::toJsonValue(m_double_val));
    }
    if (m_dtype_isSet) {
        obj.insert(QString("dtype"), ::OpenAPI::toJsonValue(m_dtype));
    }
    if (m_float_val.size() > 0) {
        obj.insert(QString("floatVal"), ::OpenAPI::toJsonValue(m_float_val));
    }
    if (m_int64_val.size() > 0) {
        obj.insert(QString("int64Val"), ::OpenAPI::toJsonValue(m_int64_val));
    }
    if (m_int_val.size() > 0) {
        obj.insert(QString("intVal"), ::OpenAPI::toJsonValue(m_int_val));
    }
    if (m_list_val.size() > 0) {
        obj.insert(QString("listVal"), ::OpenAPI::toJsonValue(m_list_val));
    }
    if (m_shape.size() > 0) {
        obj.insert(QString("shape"), ::OpenAPI::toJsonValue(m_shape));
    }
    if (m_string_val.size() > 0) {
        obj.insert(QString("stringVal"), ::OpenAPI::toJsonValue(m_string_val));
    }
    if (m_struct_val.size() > 0) {
        obj.insert(QString("structVal"), ::OpenAPI::toJsonValue(m_struct_val));
    }
    if (m_tensor_val_isSet) {
        obj.insert(QString("tensorVal"), ::OpenAPI::toJsonValue(m_tensor_val));
    }
    if (m_uint64_val.size() > 0) {
        obj.insert(QString("uint64Val"), ::OpenAPI::toJsonValue(m_uint64_val));
    }
    if (m_uint_val.size() > 0) {
        obj.insert(QString("uintVal"), ::OpenAPI::toJsonValue(m_uint_val));
    }
    return obj;
}

QList<bool> OAIGoogleCloudAiplatformV1beta1Tensor::getBoolVal() const {
    return m_bool_val;
}
void OAIGoogleCloudAiplatformV1beta1Tensor::setBoolVal(const QList<bool> &bool_val) {
    m_bool_val = bool_val;
    m_bool_val_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1Tensor::is_bool_val_Set() const{
    return m_bool_val_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1Tensor::is_bool_val_Valid() const{
    return m_bool_val_isValid;
}

QList<QByteArray> OAIGoogleCloudAiplatformV1beta1Tensor::getBytesVal() const {
    return m_bytes_val;
}
void OAIGoogleCloudAiplatformV1beta1Tensor::setBytesVal(const QList<QByteArray> &bytes_val) {
    m_bytes_val = bytes_val;
    m_bytes_val_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1Tensor::is_bytes_val_Set() const{
    return m_bytes_val_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1Tensor::is_bytes_val_Valid() const{
    return m_bytes_val_isValid;
}

QList<double> OAIGoogleCloudAiplatformV1beta1Tensor::getDoubleVal() const {
    return m_double_val;
}
void OAIGoogleCloudAiplatformV1beta1Tensor::setDoubleVal(const QList<double> &double_val) {
    m_double_val = double_val;
    m_double_val_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1Tensor::is_double_val_Set() const{
    return m_double_val_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1Tensor::is_double_val_Valid() const{
    return m_double_val_isValid;
}

QString OAIGoogleCloudAiplatformV1beta1Tensor::getDtype() const {
    return m_dtype;
}
void OAIGoogleCloudAiplatformV1beta1Tensor::setDtype(const QString &dtype) {
    m_dtype = dtype;
    m_dtype_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1Tensor::is_dtype_Set() const{
    return m_dtype_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1Tensor::is_dtype_Valid() const{
    return m_dtype_isValid;
}

QList<float> OAIGoogleCloudAiplatformV1beta1Tensor::getFloatVal() const {
    return m_float_val;
}
void OAIGoogleCloudAiplatformV1beta1Tensor::setFloatVal(const QList<float> &float_val) {
    m_float_val = float_val;
    m_float_val_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1Tensor::is_float_val_Set() const{
    return m_float_val_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1Tensor::is_float_val_Valid() const{
    return m_float_val_isValid;
}

QList<QString> OAIGoogleCloudAiplatformV1beta1Tensor::getInt64Val() const {
    return m_int64_val;
}
void OAIGoogleCloudAiplatformV1beta1Tensor::setInt64Val(const QList<QString> &int64_val) {
    m_int64_val = int64_val;
    m_int64_val_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1Tensor::is_int64_val_Set() const{
    return m_int64_val_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1Tensor::is_int64_val_Valid() const{
    return m_int64_val_isValid;
}

QList<qint32> OAIGoogleCloudAiplatformV1beta1Tensor::getIntVal() const {
    return m_int_val;
}
void OAIGoogleCloudAiplatformV1beta1Tensor::setIntVal(const QList<qint32> &int_val) {
    m_int_val = int_val;
    m_int_val_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1Tensor::is_int_val_Set() const{
    return m_int_val_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1Tensor::is_int_val_Valid() const{
    return m_int_val_isValid;
}

QList<OAIGoogleCloudAiplatformV1beta1Tensor> OAIGoogleCloudAiplatformV1beta1Tensor::getListVal() const {
    return m_list_val;
}
void OAIGoogleCloudAiplatformV1beta1Tensor::setListVal(const QList<OAIGoogleCloudAiplatformV1beta1Tensor> &list_val) {
    m_list_val = list_val;
    m_list_val_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1Tensor::is_list_val_Set() const{
    return m_list_val_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1Tensor::is_list_val_Valid() const{
    return m_list_val_isValid;
}

QList<QString> OAIGoogleCloudAiplatformV1beta1Tensor::getShape() const {
    return m_shape;
}
void OAIGoogleCloudAiplatformV1beta1Tensor::setShape(const QList<QString> &shape) {
    m_shape = shape;
    m_shape_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1Tensor::is_shape_Set() const{
    return m_shape_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1Tensor::is_shape_Valid() const{
    return m_shape_isValid;
}

QList<QString> OAIGoogleCloudAiplatformV1beta1Tensor::getStringVal() const {
    return m_string_val;
}
void OAIGoogleCloudAiplatformV1beta1Tensor::setStringVal(const QList<QString> &string_val) {
    m_string_val = string_val;
    m_string_val_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1Tensor::is_string_val_Set() const{
    return m_string_val_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1Tensor::is_string_val_Valid() const{
    return m_string_val_isValid;
}

QMap<QString, OAIGoogleCloudAiplatformV1beta1Tensor> OAIGoogleCloudAiplatformV1beta1Tensor::getStructVal() const {
    return m_struct_val;
}
void OAIGoogleCloudAiplatformV1beta1Tensor::setStructVal(const QMap<QString, OAIGoogleCloudAiplatformV1beta1Tensor> &struct_val) {
    m_struct_val = struct_val;
    m_struct_val_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1Tensor::is_struct_val_Set() const{
    return m_struct_val_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1Tensor::is_struct_val_Valid() const{
    return m_struct_val_isValid;
}

QByteArray OAIGoogleCloudAiplatformV1beta1Tensor::getTensorVal() const {
    return m_tensor_val;
}
void OAIGoogleCloudAiplatformV1beta1Tensor::setTensorVal(const QByteArray &tensor_val) {
    m_tensor_val = tensor_val;
    m_tensor_val_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1Tensor::is_tensor_val_Set() const{
    return m_tensor_val_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1Tensor::is_tensor_val_Valid() const{
    return m_tensor_val_isValid;
}

QList<QString> OAIGoogleCloudAiplatformV1beta1Tensor::getUint64Val() const {
    return m_uint64_val;
}
void OAIGoogleCloudAiplatformV1beta1Tensor::setUint64Val(const QList<QString> &uint64_val) {
    m_uint64_val = uint64_val;
    m_uint64_val_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1Tensor::is_uint64_val_Set() const{
    return m_uint64_val_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1Tensor::is_uint64_val_Valid() const{
    return m_uint64_val_isValid;
}

QList<qint32> OAIGoogleCloudAiplatformV1beta1Tensor::getUintVal() const {
    return m_uint_val;
}
void OAIGoogleCloudAiplatformV1beta1Tensor::setUintVal(const QList<qint32> &uint_val) {
    m_uint_val = uint_val;
    m_uint_val_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1Tensor::is_uint_val_Set() const{
    return m_uint_val_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1Tensor::is_uint_val_Valid() const{
    return m_uint_val_isValid;
}

bool OAIGoogleCloudAiplatformV1beta1Tensor::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bool_val.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_bytes_val.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_double_val.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_dtype_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_float_val.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_int64_val.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_int_val.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_list_val.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_shape.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_string_val.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_struct_val.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_tensor_val_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uint64_val.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_uint_val.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudAiplatformV1beta1Tensor::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
