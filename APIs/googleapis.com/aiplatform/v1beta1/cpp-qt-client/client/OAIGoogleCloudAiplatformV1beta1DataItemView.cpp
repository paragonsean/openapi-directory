/**
 * Vertex AI API
 * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudAiplatformV1beta1DataItemView.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudAiplatformV1beta1DataItemView::OAIGoogleCloudAiplatformV1beta1DataItemView(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudAiplatformV1beta1DataItemView::OAIGoogleCloudAiplatformV1beta1DataItemView() {
    this->initializeModel();
}

OAIGoogleCloudAiplatformV1beta1DataItemView::~OAIGoogleCloudAiplatformV1beta1DataItemView() {}

void OAIGoogleCloudAiplatformV1beta1DataItemView::initializeModel() {

    m_annotations_isSet = false;
    m_annotations_isValid = false;

    m_data_item_isSet = false;
    m_data_item_isValid = false;

    m_has_truncated_annotations_isSet = false;
    m_has_truncated_annotations_isValid = false;
}

void OAIGoogleCloudAiplatformV1beta1DataItemView::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudAiplatformV1beta1DataItemView::fromJsonObject(QJsonObject json) {

    m_annotations_isValid = ::OpenAPI::fromJsonValue(m_annotations, json[QString("annotations")]);
    m_annotations_isSet = !json[QString("annotations")].isNull() && m_annotations_isValid;

    m_data_item_isValid = ::OpenAPI::fromJsonValue(m_data_item, json[QString("dataItem")]);
    m_data_item_isSet = !json[QString("dataItem")].isNull() && m_data_item_isValid;

    m_has_truncated_annotations_isValid = ::OpenAPI::fromJsonValue(m_has_truncated_annotations, json[QString("hasTruncatedAnnotations")]);
    m_has_truncated_annotations_isSet = !json[QString("hasTruncatedAnnotations")].isNull() && m_has_truncated_annotations_isValid;
}

QString OAIGoogleCloudAiplatformV1beta1DataItemView::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudAiplatformV1beta1DataItemView::asJsonObject() const {
    QJsonObject obj;
    if (m_annotations.size() > 0) {
        obj.insert(QString("annotations"), ::OpenAPI::toJsonValue(m_annotations));
    }
    if (m_data_item.isSet()) {
        obj.insert(QString("dataItem"), ::OpenAPI::toJsonValue(m_data_item));
    }
    if (m_has_truncated_annotations_isSet) {
        obj.insert(QString("hasTruncatedAnnotations"), ::OpenAPI::toJsonValue(m_has_truncated_annotations));
    }
    return obj;
}

QList<OAIGoogleCloudAiplatformV1beta1Annotation> OAIGoogleCloudAiplatformV1beta1DataItemView::getAnnotations() const {
    return m_annotations;
}
void OAIGoogleCloudAiplatformV1beta1DataItemView::setAnnotations(const QList<OAIGoogleCloudAiplatformV1beta1Annotation> &annotations) {
    m_annotations = annotations;
    m_annotations_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1DataItemView::is_annotations_Set() const{
    return m_annotations_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1DataItemView::is_annotations_Valid() const{
    return m_annotations_isValid;
}

OAIGoogleCloudAiplatformV1beta1DataItem OAIGoogleCloudAiplatformV1beta1DataItemView::getDataItem() const {
    return m_data_item;
}
void OAIGoogleCloudAiplatformV1beta1DataItemView::setDataItem(const OAIGoogleCloudAiplatformV1beta1DataItem &data_item) {
    m_data_item = data_item;
    m_data_item_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1DataItemView::is_data_item_Set() const{
    return m_data_item_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1DataItemView::is_data_item_Valid() const{
    return m_data_item_isValid;
}

bool OAIGoogleCloudAiplatformV1beta1DataItemView::isHasTruncatedAnnotations() const {
    return m_has_truncated_annotations;
}
void OAIGoogleCloudAiplatformV1beta1DataItemView::setHasTruncatedAnnotations(const bool &has_truncated_annotations) {
    m_has_truncated_annotations = has_truncated_annotations;
    m_has_truncated_annotations_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1DataItemView::is_has_truncated_annotations_Set() const{
    return m_has_truncated_annotations_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1DataItemView::is_has_truncated_annotations_Valid() const{
    return m_has_truncated_annotations_isValid;
}

bool OAIGoogleCloudAiplatformV1beta1DataItemView::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_annotations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_item.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_truncated_annotations_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudAiplatformV1beta1DataItemView::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
