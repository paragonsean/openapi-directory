/**
 * Vertex AI API
 * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudAiplatformV1beta1DatasetVersion.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudAiplatformV1beta1DatasetVersion::OAIGoogleCloudAiplatformV1beta1DatasetVersion(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudAiplatformV1beta1DatasetVersion::OAIGoogleCloudAiplatformV1beta1DatasetVersion() {
    this->initializeModel();
}

OAIGoogleCloudAiplatformV1beta1DatasetVersion::~OAIGoogleCloudAiplatformV1beta1DatasetVersion() {}

void OAIGoogleCloudAiplatformV1beta1DatasetVersion::initializeModel() {

    m_big_query_dataset_name_isSet = false;
    m_big_query_dataset_name_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_etag_isSet = false;
    m_etag_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;
}

void OAIGoogleCloudAiplatformV1beta1DatasetVersion::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudAiplatformV1beta1DatasetVersion::fromJsonObject(QJsonObject json) {

    m_big_query_dataset_name_isValid = ::OpenAPI::fromJsonValue(m_big_query_dataset_name, json[QString("bigQueryDatasetName")]);
    m_big_query_dataset_name_isSet = !json[QString("bigQueryDatasetName")].isNull() && m_big_query_dataset_name_isValid;

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_etag_isValid = ::OpenAPI::fromJsonValue(m_etag, json[QString("etag")]);
    m_etag_isSet = !json[QString("etag")].isNull() && m_etag_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;
}

QString OAIGoogleCloudAiplatformV1beta1DatasetVersion::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudAiplatformV1beta1DatasetVersion::asJsonObject() const {
    QJsonObject obj;
    if (m_big_query_dataset_name_isSet) {
        obj.insert(QString("bigQueryDatasetName"), ::OpenAPI::toJsonValue(m_big_query_dataset_name));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_etag_isSet) {
        obj.insert(QString("etag"), ::OpenAPI::toJsonValue(m_etag));
    }
    if (m_metadata_isSet) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    return obj;
}

QString OAIGoogleCloudAiplatformV1beta1DatasetVersion::getBigQueryDatasetName() const {
    return m_big_query_dataset_name;
}
void OAIGoogleCloudAiplatformV1beta1DatasetVersion::setBigQueryDatasetName(const QString &big_query_dataset_name) {
    m_big_query_dataset_name = big_query_dataset_name;
    m_big_query_dataset_name_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1DatasetVersion::is_big_query_dataset_name_Set() const{
    return m_big_query_dataset_name_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1DatasetVersion::is_big_query_dataset_name_Valid() const{
    return m_big_query_dataset_name_isValid;
}

QString OAIGoogleCloudAiplatformV1beta1DatasetVersion::getCreateTime() const {
    return m_create_time;
}
void OAIGoogleCloudAiplatformV1beta1DatasetVersion::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1DatasetVersion::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1DatasetVersion::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAIGoogleCloudAiplatformV1beta1DatasetVersion::getDisplayName() const {
    return m_display_name;
}
void OAIGoogleCloudAiplatformV1beta1DatasetVersion::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1DatasetVersion::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1DatasetVersion::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIGoogleCloudAiplatformV1beta1DatasetVersion::getEtag() const {
    return m_etag;
}
void OAIGoogleCloudAiplatformV1beta1DatasetVersion::setEtag(const QString &etag) {
    m_etag = etag;
    m_etag_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1DatasetVersion::is_etag_Set() const{
    return m_etag_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1DatasetVersion::is_etag_Valid() const{
    return m_etag_isValid;
}

QJsonValue OAIGoogleCloudAiplatformV1beta1DatasetVersion::getMetadata() const {
    return m_metadata;
}
void OAIGoogleCloudAiplatformV1beta1DatasetVersion::setMetadata(const QJsonValue &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1DatasetVersion::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1DatasetVersion::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QString OAIGoogleCloudAiplatformV1beta1DatasetVersion::getName() const {
    return m_name;
}
void OAIGoogleCloudAiplatformV1beta1DatasetVersion::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1DatasetVersion::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1DatasetVersion::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIGoogleCloudAiplatformV1beta1DatasetVersion::getUpdateTime() const {
    return m_update_time;
}
void OAIGoogleCloudAiplatformV1beta1DatasetVersion::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1DatasetVersion::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1DatasetVersion::is_update_time_Valid() const{
    return m_update_time_isValid;
}

bool OAIGoogleCloudAiplatformV1beta1DatasetVersion::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_big_query_dataset_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_etag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudAiplatformV1beta1DatasetVersion::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
