/**
 * Vertex AI API
 * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudAiplatformV1beta1MachineSpec.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudAiplatformV1beta1MachineSpec::OAIGoogleCloudAiplatformV1beta1MachineSpec(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudAiplatformV1beta1MachineSpec::OAIGoogleCloudAiplatformV1beta1MachineSpec() {
    this->initializeModel();
}

OAIGoogleCloudAiplatformV1beta1MachineSpec::~OAIGoogleCloudAiplatformV1beta1MachineSpec() {}

void OAIGoogleCloudAiplatformV1beta1MachineSpec::initializeModel() {

    m_accelerator_count_isSet = false;
    m_accelerator_count_isValid = false;

    m_accelerator_type_isSet = false;
    m_accelerator_type_isValid = false;

    m_machine_type_isSet = false;
    m_machine_type_isValid = false;

    m_tpu_topology_isSet = false;
    m_tpu_topology_isValid = false;
}

void OAIGoogleCloudAiplatformV1beta1MachineSpec::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudAiplatformV1beta1MachineSpec::fromJsonObject(QJsonObject json) {

    m_accelerator_count_isValid = ::OpenAPI::fromJsonValue(m_accelerator_count, json[QString("acceleratorCount")]);
    m_accelerator_count_isSet = !json[QString("acceleratorCount")].isNull() && m_accelerator_count_isValid;

    m_accelerator_type_isValid = ::OpenAPI::fromJsonValue(m_accelerator_type, json[QString("acceleratorType")]);
    m_accelerator_type_isSet = !json[QString("acceleratorType")].isNull() && m_accelerator_type_isValid;

    m_machine_type_isValid = ::OpenAPI::fromJsonValue(m_machine_type, json[QString("machineType")]);
    m_machine_type_isSet = !json[QString("machineType")].isNull() && m_machine_type_isValid;

    m_tpu_topology_isValid = ::OpenAPI::fromJsonValue(m_tpu_topology, json[QString("tpuTopology")]);
    m_tpu_topology_isSet = !json[QString("tpuTopology")].isNull() && m_tpu_topology_isValid;
}

QString OAIGoogleCloudAiplatformV1beta1MachineSpec::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudAiplatformV1beta1MachineSpec::asJsonObject() const {
    QJsonObject obj;
    if (m_accelerator_count_isSet) {
        obj.insert(QString("acceleratorCount"), ::OpenAPI::toJsonValue(m_accelerator_count));
    }
    if (m_accelerator_type_isSet) {
        obj.insert(QString("acceleratorType"), ::OpenAPI::toJsonValue(m_accelerator_type));
    }
    if (m_machine_type_isSet) {
        obj.insert(QString("machineType"), ::OpenAPI::toJsonValue(m_machine_type));
    }
    if (m_tpu_topology_isSet) {
        obj.insert(QString("tpuTopology"), ::OpenAPI::toJsonValue(m_tpu_topology));
    }
    return obj;
}

qint32 OAIGoogleCloudAiplatformV1beta1MachineSpec::getAcceleratorCount() const {
    return m_accelerator_count;
}
void OAIGoogleCloudAiplatformV1beta1MachineSpec::setAcceleratorCount(const qint32 &accelerator_count) {
    m_accelerator_count = accelerator_count;
    m_accelerator_count_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1MachineSpec::is_accelerator_count_Set() const{
    return m_accelerator_count_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1MachineSpec::is_accelerator_count_Valid() const{
    return m_accelerator_count_isValid;
}

QString OAIGoogleCloudAiplatformV1beta1MachineSpec::getAcceleratorType() const {
    return m_accelerator_type;
}
void OAIGoogleCloudAiplatformV1beta1MachineSpec::setAcceleratorType(const QString &accelerator_type) {
    m_accelerator_type = accelerator_type;
    m_accelerator_type_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1MachineSpec::is_accelerator_type_Set() const{
    return m_accelerator_type_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1MachineSpec::is_accelerator_type_Valid() const{
    return m_accelerator_type_isValid;
}

QString OAIGoogleCloudAiplatformV1beta1MachineSpec::getMachineType() const {
    return m_machine_type;
}
void OAIGoogleCloudAiplatformV1beta1MachineSpec::setMachineType(const QString &machine_type) {
    m_machine_type = machine_type;
    m_machine_type_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1MachineSpec::is_machine_type_Set() const{
    return m_machine_type_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1MachineSpec::is_machine_type_Valid() const{
    return m_machine_type_isValid;
}

QString OAIGoogleCloudAiplatformV1beta1MachineSpec::getTpuTopology() const {
    return m_tpu_topology;
}
void OAIGoogleCloudAiplatformV1beta1MachineSpec::setTpuTopology(const QString &tpu_topology) {
    m_tpu_topology = tpu_topology;
    m_tpu_topology_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1MachineSpec::is_tpu_topology_Set() const{
    return m_tpu_topology_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1MachineSpec::is_tpu_topology_Valid() const{
    return m_tpu_topology_isValid;
}

bool OAIGoogleCloudAiplatformV1beta1MachineSpec::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_accelerator_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_accelerator_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_machine_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tpu_topology_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudAiplatformV1beta1MachineSpec::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
