/**
 * Vertex AI API
 * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILanguageLabsAidaTrustRecitationProtoDocAttribution.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILanguageLabsAidaTrustRecitationProtoDocAttribution::OAILanguageLabsAidaTrustRecitationProtoDocAttribution(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILanguageLabsAidaTrustRecitationProtoDocAttribution::OAILanguageLabsAidaTrustRecitationProtoDocAttribution() {
    this->initializeModel();
}

OAILanguageLabsAidaTrustRecitationProtoDocAttribution::~OAILanguageLabsAidaTrustRecitationProtoDocAttribution() {}

void OAILanguageLabsAidaTrustRecitationProtoDocAttribution::initializeModel() {

    m_amarna_id_isSet = false;
    m_amarna_id_isValid = false;

    m_arxiv_id_isSet = false;
    m_arxiv_id_isValid = false;

    m_author_isSet = false;
    m_author_isValid = false;

    m_bibkey_isSet = false;
    m_bibkey_isValid = false;

    m_biorxiv_id_isSet = false;
    m_biorxiv_id_isValid = false;

    m_book_title_isSet = false;
    m_book_title_isValid = false;

    m_book_volume_id_isSet = false;
    m_book_volume_id_isValid = false;

    m_category_isSet = false;
    m_category_isValid = false;

    m_conversation_id_isSet = false;
    m_conversation_id_isValid = false;

    m_dataset_isSet = false;
    m_dataset_isValid = false;

    m_filepath_isSet = false;
    m_filepath_isValid = false;

    m_gemini_id_isSet = false;
    m_gemini_id_isValid = false;

    m_gnews_article_title_isSet = false;
    m_gnews_article_title_isValid = false;

    m_goodall_example_id_isSet = false;
    m_goodall_example_id_isValid = false;

    m_is_opt_out_isSet = false;
    m_is_opt_out_isValid = false;

    m_is_prompt_isSet = false;
    m_is_prompt_isValid = false;

    m_lamda_example_id_isSet = false;
    m_lamda_example_id_isValid = false;

    m_license_isSet = false;
    m_license_isValid = false;

    m_meena_conversation_id_isSet = false;
    m_meena_conversation_id_isValid = false;

    m_natural_language_code_isSet = false;
    m_natural_language_code_isValid = false;

    m_no_attribution_isSet = false;
    m_no_attribution_isValid = false;

    m_podcast_utterance_id_isSet = false;
    m_podcast_utterance_id_isValid = false;

    m_publication_date_isSet = false;
    m_publication_date_isValid = false;

    m_quality_score_experiment_only_isSet = false;
    m_quality_score_experiment_only_isValid = false;

    m_repo_isSet = false;
    m_repo_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_volume_id_isSet = false;
    m_volume_id_isValid = false;

    m_wikipedia_article_title_isSet = false;
    m_wikipedia_article_title_isValid = false;

    m_youtube_video_id_isSet = false;
    m_youtube_video_id_isValid = false;
}

void OAILanguageLabsAidaTrustRecitationProtoDocAttribution::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILanguageLabsAidaTrustRecitationProtoDocAttribution::fromJsonObject(QJsonObject json) {

    m_amarna_id_isValid = ::OpenAPI::fromJsonValue(m_amarna_id, json[QString("amarnaId")]);
    m_amarna_id_isSet = !json[QString("amarnaId")].isNull() && m_amarna_id_isValid;

    m_arxiv_id_isValid = ::OpenAPI::fromJsonValue(m_arxiv_id, json[QString("arxivId")]);
    m_arxiv_id_isSet = !json[QString("arxivId")].isNull() && m_arxiv_id_isValid;

    m_author_isValid = ::OpenAPI::fromJsonValue(m_author, json[QString("author")]);
    m_author_isSet = !json[QString("author")].isNull() && m_author_isValid;

    m_bibkey_isValid = ::OpenAPI::fromJsonValue(m_bibkey, json[QString("bibkey")]);
    m_bibkey_isSet = !json[QString("bibkey")].isNull() && m_bibkey_isValid;

    m_biorxiv_id_isValid = ::OpenAPI::fromJsonValue(m_biorxiv_id, json[QString("biorxivId")]);
    m_biorxiv_id_isSet = !json[QString("biorxivId")].isNull() && m_biorxiv_id_isValid;

    m_book_title_isValid = ::OpenAPI::fromJsonValue(m_book_title, json[QString("bookTitle")]);
    m_book_title_isSet = !json[QString("bookTitle")].isNull() && m_book_title_isValid;

    m_book_volume_id_isValid = ::OpenAPI::fromJsonValue(m_book_volume_id, json[QString("bookVolumeId")]);
    m_book_volume_id_isSet = !json[QString("bookVolumeId")].isNull() && m_book_volume_id_isValid;

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("category")]);
    m_category_isSet = !json[QString("category")].isNull() && m_category_isValid;

    m_conversation_id_isValid = ::OpenAPI::fromJsonValue(m_conversation_id, json[QString("conversationId")]);
    m_conversation_id_isSet = !json[QString("conversationId")].isNull() && m_conversation_id_isValid;

    m_dataset_isValid = ::OpenAPI::fromJsonValue(m_dataset, json[QString("dataset")]);
    m_dataset_isSet = !json[QString("dataset")].isNull() && m_dataset_isValid;

    m_filepath_isValid = ::OpenAPI::fromJsonValue(m_filepath, json[QString("filepath")]);
    m_filepath_isSet = !json[QString("filepath")].isNull() && m_filepath_isValid;

    m_gemini_id_isValid = ::OpenAPI::fromJsonValue(m_gemini_id, json[QString("geminiId")]);
    m_gemini_id_isSet = !json[QString("geminiId")].isNull() && m_gemini_id_isValid;

    m_gnews_article_title_isValid = ::OpenAPI::fromJsonValue(m_gnews_article_title, json[QString("gnewsArticleTitle")]);
    m_gnews_article_title_isSet = !json[QString("gnewsArticleTitle")].isNull() && m_gnews_article_title_isValid;

    m_goodall_example_id_isValid = ::OpenAPI::fromJsonValue(m_goodall_example_id, json[QString("goodallExampleId")]);
    m_goodall_example_id_isSet = !json[QString("goodallExampleId")].isNull() && m_goodall_example_id_isValid;

    m_is_opt_out_isValid = ::OpenAPI::fromJsonValue(m_is_opt_out, json[QString("isOptOut")]);
    m_is_opt_out_isSet = !json[QString("isOptOut")].isNull() && m_is_opt_out_isValid;

    m_is_prompt_isValid = ::OpenAPI::fromJsonValue(m_is_prompt, json[QString("isPrompt")]);
    m_is_prompt_isSet = !json[QString("isPrompt")].isNull() && m_is_prompt_isValid;

    m_lamda_example_id_isValid = ::OpenAPI::fromJsonValue(m_lamda_example_id, json[QString("lamdaExampleId")]);
    m_lamda_example_id_isSet = !json[QString("lamdaExampleId")].isNull() && m_lamda_example_id_isValid;

    m_license_isValid = ::OpenAPI::fromJsonValue(m_license, json[QString("license")]);
    m_license_isSet = !json[QString("license")].isNull() && m_license_isValid;

    m_meena_conversation_id_isValid = ::OpenAPI::fromJsonValue(m_meena_conversation_id, json[QString("meenaConversationId")]);
    m_meena_conversation_id_isSet = !json[QString("meenaConversationId")].isNull() && m_meena_conversation_id_isValid;

    m_natural_language_code_isValid = ::OpenAPI::fromJsonValue(m_natural_language_code, json[QString("naturalLanguageCode")]);
    m_natural_language_code_isSet = !json[QString("naturalLanguageCode")].isNull() && m_natural_language_code_isValid;

    m_no_attribution_isValid = ::OpenAPI::fromJsonValue(m_no_attribution, json[QString("noAttribution")]);
    m_no_attribution_isSet = !json[QString("noAttribution")].isNull() && m_no_attribution_isValid;

    m_podcast_utterance_id_isValid = ::OpenAPI::fromJsonValue(m_podcast_utterance_id, json[QString("podcastUtteranceId")]);
    m_podcast_utterance_id_isSet = !json[QString("podcastUtteranceId")].isNull() && m_podcast_utterance_id_isValid;

    m_publication_date_isValid = ::OpenAPI::fromJsonValue(m_publication_date, json[QString("publicationDate")]);
    m_publication_date_isSet = !json[QString("publicationDate")].isNull() && m_publication_date_isValid;

    m_quality_score_experiment_only_isValid = ::OpenAPI::fromJsonValue(m_quality_score_experiment_only, json[QString("qualityScoreExperimentOnly")]);
    m_quality_score_experiment_only_isSet = !json[QString("qualityScoreExperimentOnly")].isNull() && m_quality_score_experiment_only_isValid;

    m_repo_isValid = ::OpenAPI::fromJsonValue(m_repo, json[QString("repo")]);
    m_repo_isSet = !json[QString("repo")].isNull() && m_repo_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_volume_id_isValid = ::OpenAPI::fromJsonValue(m_volume_id, json[QString("volumeId")]);
    m_volume_id_isSet = !json[QString("volumeId")].isNull() && m_volume_id_isValid;

    m_wikipedia_article_title_isValid = ::OpenAPI::fromJsonValue(m_wikipedia_article_title, json[QString("wikipediaArticleTitle")]);
    m_wikipedia_article_title_isSet = !json[QString("wikipediaArticleTitle")].isNull() && m_wikipedia_article_title_isValid;

    m_youtube_video_id_isValid = ::OpenAPI::fromJsonValue(m_youtube_video_id, json[QString("youtubeVideoId")]);
    m_youtube_video_id_isSet = !json[QString("youtubeVideoId")].isNull() && m_youtube_video_id_isValid;
}

QString OAILanguageLabsAidaTrustRecitationProtoDocAttribution::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILanguageLabsAidaTrustRecitationProtoDocAttribution::asJsonObject() const {
    QJsonObject obj;
    if (m_amarna_id_isSet) {
        obj.insert(QString("amarnaId"), ::OpenAPI::toJsonValue(m_amarna_id));
    }
    if (m_arxiv_id_isSet) {
        obj.insert(QString("arxivId"), ::OpenAPI::toJsonValue(m_arxiv_id));
    }
    if (m_author_isSet) {
        obj.insert(QString("author"), ::OpenAPI::toJsonValue(m_author));
    }
    if (m_bibkey_isSet) {
        obj.insert(QString("bibkey"), ::OpenAPI::toJsonValue(m_bibkey));
    }
    if (m_biorxiv_id_isSet) {
        obj.insert(QString("biorxivId"), ::OpenAPI::toJsonValue(m_biorxiv_id));
    }
    if (m_book_title_isSet) {
        obj.insert(QString("bookTitle"), ::OpenAPI::toJsonValue(m_book_title));
    }
    if (m_book_volume_id_isSet) {
        obj.insert(QString("bookVolumeId"), ::OpenAPI::toJsonValue(m_book_volume_id));
    }
    if (m_category_isSet) {
        obj.insert(QString("category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_conversation_id_isSet) {
        obj.insert(QString("conversationId"), ::OpenAPI::toJsonValue(m_conversation_id));
    }
    if (m_dataset_isSet) {
        obj.insert(QString("dataset"), ::OpenAPI::toJsonValue(m_dataset));
    }
    if (m_filepath_isSet) {
        obj.insert(QString("filepath"), ::OpenAPI::toJsonValue(m_filepath));
    }
    if (m_gemini_id_isSet) {
        obj.insert(QString("geminiId"), ::OpenAPI::toJsonValue(m_gemini_id));
    }
    if (m_gnews_article_title_isSet) {
        obj.insert(QString("gnewsArticleTitle"), ::OpenAPI::toJsonValue(m_gnews_article_title));
    }
    if (m_goodall_example_id_isSet) {
        obj.insert(QString("goodallExampleId"), ::OpenAPI::toJsonValue(m_goodall_example_id));
    }
    if (m_is_opt_out_isSet) {
        obj.insert(QString("isOptOut"), ::OpenAPI::toJsonValue(m_is_opt_out));
    }
    if (m_is_prompt_isSet) {
        obj.insert(QString("isPrompt"), ::OpenAPI::toJsonValue(m_is_prompt));
    }
    if (m_lamda_example_id_isSet) {
        obj.insert(QString("lamdaExampleId"), ::OpenAPI::toJsonValue(m_lamda_example_id));
    }
    if (m_license_isSet) {
        obj.insert(QString("license"), ::OpenAPI::toJsonValue(m_license));
    }
    if (m_meena_conversation_id_isSet) {
        obj.insert(QString("meenaConversationId"), ::OpenAPI::toJsonValue(m_meena_conversation_id));
    }
    if (m_natural_language_code_isSet) {
        obj.insert(QString("naturalLanguageCode"), ::OpenAPI::toJsonValue(m_natural_language_code));
    }
    if (m_no_attribution_isSet) {
        obj.insert(QString("noAttribution"), ::OpenAPI::toJsonValue(m_no_attribution));
    }
    if (m_podcast_utterance_id_isSet) {
        obj.insert(QString("podcastUtteranceId"), ::OpenAPI::toJsonValue(m_podcast_utterance_id));
    }
    if (m_publication_date.isSet()) {
        obj.insert(QString("publicationDate"), ::OpenAPI::toJsonValue(m_publication_date));
    }
    if (m_quality_score_experiment_only_isSet) {
        obj.insert(QString("qualityScoreExperimentOnly"), ::OpenAPI::toJsonValue(m_quality_score_experiment_only));
    }
    if (m_repo_isSet) {
        obj.insert(QString("repo"), ::OpenAPI::toJsonValue(m_repo));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_volume_id_isSet) {
        obj.insert(QString("volumeId"), ::OpenAPI::toJsonValue(m_volume_id));
    }
    if (m_wikipedia_article_title_isSet) {
        obj.insert(QString("wikipediaArticleTitle"), ::OpenAPI::toJsonValue(m_wikipedia_article_title));
    }
    if (m_youtube_video_id_isSet) {
        obj.insert(QString("youtubeVideoId"), ::OpenAPI::toJsonValue(m_youtube_video_id));
    }
    return obj;
}

QString OAILanguageLabsAidaTrustRecitationProtoDocAttribution::getAmarnaId() const {
    return m_amarna_id;
}
void OAILanguageLabsAidaTrustRecitationProtoDocAttribution::setAmarnaId(const QString &amarna_id) {
    m_amarna_id = amarna_id;
    m_amarna_id_isSet = true;
}

bool OAILanguageLabsAidaTrustRecitationProtoDocAttribution::is_amarna_id_Set() const{
    return m_amarna_id_isSet;
}

bool OAILanguageLabsAidaTrustRecitationProtoDocAttribution::is_amarna_id_Valid() const{
    return m_amarna_id_isValid;
}

QString OAILanguageLabsAidaTrustRecitationProtoDocAttribution::getArxivId() const {
    return m_arxiv_id;
}
void OAILanguageLabsAidaTrustRecitationProtoDocAttribution::setArxivId(const QString &arxiv_id) {
    m_arxiv_id = arxiv_id;
    m_arxiv_id_isSet = true;
}

bool OAILanguageLabsAidaTrustRecitationProtoDocAttribution::is_arxiv_id_Set() const{
    return m_arxiv_id_isSet;
}

bool OAILanguageLabsAidaTrustRecitationProtoDocAttribution::is_arxiv_id_Valid() const{
    return m_arxiv_id_isValid;
}

QString OAILanguageLabsAidaTrustRecitationProtoDocAttribution::getAuthor() const {
    return m_author;
}
void OAILanguageLabsAidaTrustRecitationProtoDocAttribution::setAuthor(const QString &author) {
    m_author = author;
    m_author_isSet = true;
}

bool OAILanguageLabsAidaTrustRecitationProtoDocAttribution::is_author_Set() const{
    return m_author_isSet;
}

bool OAILanguageLabsAidaTrustRecitationProtoDocAttribution::is_author_Valid() const{
    return m_author_isValid;
}

QString OAILanguageLabsAidaTrustRecitationProtoDocAttribution::getBibkey() const {
    return m_bibkey;
}
void OAILanguageLabsAidaTrustRecitationProtoDocAttribution::setBibkey(const QString &bibkey) {
    m_bibkey = bibkey;
    m_bibkey_isSet = true;
}

bool OAILanguageLabsAidaTrustRecitationProtoDocAttribution::is_bibkey_Set() const{
    return m_bibkey_isSet;
}

bool OAILanguageLabsAidaTrustRecitationProtoDocAttribution::is_bibkey_Valid() const{
    return m_bibkey_isValid;
}

QString OAILanguageLabsAidaTrustRecitationProtoDocAttribution::getBiorxivId() const {
    return m_biorxiv_id;
}
void OAILanguageLabsAidaTrustRecitationProtoDocAttribution::setBiorxivId(const QString &biorxiv_id) {
    m_biorxiv_id = biorxiv_id;
    m_biorxiv_id_isSet = true;
}

bool OAILanguageLabsAidaTrustRecitationProtoDocAttribution::is_biorxiv_id_Set() const{
    return m_biorxiv_id_isSet;
}

bool OAILanguageLabsAidaTrustRecitationProtoDocAttribution::is_biorxiv_id_Valid() const{
    return m_biorxiv_id_isValid;
}

QString OAILanguageLabsAidaTrustRecitationProtoDocAttribution::getBookTitle() const {
    return m_book_title;
}
void OAILanguageLabsAidaTrustRecitationProtoDocAttribution::setBookTitle(const QString &book_title) {
    m_book_title = book_title;
    m_book_title_isSet = true;
}

bool OAILanguageLabsAidaTrustRecitationProtoDocAttribution::is_book_title_Set() const{
    return m_book_title_isSet;
}

bool OAILanguageLabsAidaTrustRecitationProtoDocAttribution::is_book_title_Valid() const{
    return m_book_title_isValid;
}

QString OAILanguageLabsAidaTrustRecitationProtoDocAttribution::getBookVolumeId() const {
    return m_book_volume_id;
}
void OAILanguageLabsAidaTrustRecitationProtoDocAttribution::setBookVolumeId(const QString &book_volume_id) {
    m_book_volume_id = book_volume_id;
    m_book_volume_id_isSet = true;
}

bool OAILanguageLabsAidaTrustRecitationProtoDocAttribution::is_book_volume_id_Set() const{
    return m_book_volume_id_isSet;
}

bool OAILanguageLabsAidaTrustRecitationProtoDocAttribution::is_book_volume_id_Valid() const{
    return m_book_volume_id_isValid;
}

QString OAILanguageLabsAidaTrustRecitationProtoDocAttribution::getCategory() const {
    return m_category;
}
void OAILanguageLabsAidaTrustRecitationProtoDocAttribution::setCategory(const QString &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAILanguageLabsAidaTrustRecitationProtoDocAttribution::is_category_Set() const{
    return m_category_isSet;
}

bool OAILanguageLabsAidaTrustRecitationProtoDocAttribution::is_category_Valid() const{
    return m_category_isValid;
}

QString OAILanguageLabsAidaTrustRecitationProtoDocAttribution::getConversationId() const {
    return m_conversation_id;
}
void OAILanguageLabsAidaTrustRecitationProtoDocAttribution::setConversationId(const QString &conversation_id) {
    m_conversation_id = conversation_id;
    m_conversation_id_isSet = true;
}

bool OAILanguageLabsAidaTrustRecitationProtoDocAttribution::is_conversation_id_Set() const{
    return m_conversation_id_isSet;
}

bool OAILanguageLabsAidaTrustRecitationProtoDocAttribution::is_conversation_id_Valid() const{
    return m_conversation_id_isValid;
}

QString OAILanguageLabsAidaTrustRecitationProtoDocAttribution::getDataset() const {
    return m_dataset;
}
void OAILanguageLabsAidaTrustRecitationProtoDocAttribution::setDataset(const QString &dataset) {
    m_dataset = dataset;
    m_dataset_isSet = true;
}

bool OAILanguageLabsAidaTrustRecitationProtoDocAttribution::is_dataset_Set() const{
    return m_dataset_isSet;
}

bool OAILanguageLabsAidaTrustRecitationProtoDocAttribution::is_dataset_Valid() const{
    return m_dataset_isValid;
}

QString OAILanguageLabsAidaTrustRecitationProtoDocAttribution::getFilepath() const {
    return m_filepath;
}
void OAILanguageLabsAidaTrustRecitationProtoDocAttribution::setFilepath(const QString &filepath) {
    m_filepath = filepath;
    m_filepath_isSet = true;
}

bool OAILanguageLabsAidaTrustRecitationProtoDocAttribution::is_filepath_Set() const{
    return m_filepath_isSet;
}

bool OAILanguageLabsAidaTrustRecitationProtoDocAttribution::is_filepath_Valid() const{
    return m_filepath_isValid;
}

QString OAILanguageLabsAidaTrustRecitationProtoDocAttribution::getGeminiId() const {
    return m_gemini_id;
}
void OAILanguageLabsAidaTrustRecitationProtoDocAttribution::setGeminiId(const QString &gemini_id) {
    m_gemini_id = gemini_id;
    m_gemini_id_isSet = true;
}

bool OAILanguageLabsAidaTrustRecitationProtoDocAttribution::is_gemini_id_Set() const{
    return m_gemini_id_isSet;
}

bool OAILanguageLabsAidaTrustRecitationProtoDocAttribution::is_gemini_id_Valid() const{
    return m_gemini_id_isValid;
}

QString OAILanguageLabsAidaTrustRecitationProtoDocAttribution::getGnewsArticleTitle() const {
    return m_gnews_article_title;
}
void OAILanguageLabsAidaTrustRecitationProtoDocAttribution::setGnewsArticleTitle(const QString &gnews_article_title) {
    m_gnews_article_title = gnews_article_title;
    m_gnews_article_title_isSet = true;
}

bool OAILanguageLabsAidaTrustRecitationProtoDocAttribution::is_gnews_article_title_Set() const{
    return m_gnews_article_title_isSet;
}

bool OAILanguageLabsAidaTrustRecitationProtoDocAttribution::is_gnews_article_title_Valid() const{
    return m_gnews_article_title_isValid;
}

QString OAILanguageLabsAidaTrustRecitationProtoDocAttribution::getGoodallExampleId() const {
    return m_goodall_example_id;
}
void OAILanguageLabsAidaTrustRecitationProtoDocAttribution::setGoodallExampleId(const QString &goodall_example_id) {
    m_goodall_example_id = goodall_example_id;
    m_goodall_example_id_isSet = true;
}

bool OAILanguageLabsAidaTrustRecitationProtoDocAttribution::is_goodall_example_id_Set() const{
    return m_goodall_example_id_isSet;
}

bool OAILanguageLabsAidaTrustRecitationProtoDocAttribution::is_goodall_example_id_Valid() const{
    return m_goodall_example_id_isValid;
}

bool OAILanguageLabsAidaTrustRecitationProtoDocAttribution::isIsOptOut() const {
    return m_is_opt_out;
}
void OAILanguageLabsAidaTrustRecitationProtoDocAttribution::setIsOptOut(const bool &is_opt_out) {
    m_is_opt_out = is_opt_out;
    m_is_opt_out_isSet = true;
}

bool OAILanguageLabsAidaTrustRecitationProtoDocAttribution::is_is_opt_out_Set() const{
    return m_is_opt_out_isSet;
}

bool OAILanguageLabsAidaTrustRecitationProtoDocAttribution::is_is_opt_out_Valid() const{
    return m_is_opt_out_isValid;
}

bool OAILanguageLabsAidaTrustRecitationProtoDocAttribution::isIsPrompt() const {
    return m_is_prompt;
}
void OAILanguageLabsAidaTrustRecitationProtoDocAttribution::setIsPrompt(const bool &is_prompt) {
    m_is_prompt = is_prompt;
    m_is_prompt_isSet = true;
}

bool OAILanguageLabsAidaTrustRecitationProtoDocAttribution::is_is_prompt_Set() const{
    return m_is_prompt_isSet;
}

bool OAILanguageLabsAidaTrustRecitationProtoDocAttribution::is_is_prompt_Valid() const{
    return m_is_prompt_isValid;
}

QString OAILanguageLabsAidaTrustRecitationProtoDocAttribution::getLamdaExampleId() const {
    return m_lamda_example_id;
}
void OAILanguageLabsAidaTrustRecitationProtoDocAttribution::setLamdaExampleId(const QString &lamda_example_id) {
    m_lamda_example_id = lamda_example_id;
    m_lamda_example_id_isSet = true;
}

bool OAILanguageLabsAidaTrustRecitationProtoDocAttribution::is_lamda_example_id_Set() const{
    return m_lamda_example_id_isSet;
}

bool OAILanguageLabsAidaTrustRecitationProtoDocAttribution::is_lamda_example_id_Valid() const{
    return m_lamda_example_id_isValid;
}

QString OAILanguageLabsAidaTrustRecitationProtoDocAttribution::getLicense() const {
    return m_license;
}
void OAILanguageLabsAidaTrustRecitationProtoDocAttribution::setLicense(const QString &license) {
    m_license = license;
    m_license_isSet = true;
}

bool OAILanguageLabsAidaTrustRecitationProtoDocAttribution::is_license_Set() const{
    return m_license_isSet;
}

bool OAILanguageLabsAidaTrustRecitationProtoDocAttribution::is_license_Valid() const{
    return m_license_isValid;
}

QString OAILanguageLabsAidaTrustRecitationProtoDocAttribution::getMeenaConversationId() const {
    return m_meena_conversation_id;
}
void OAILanguageLabsAidaTrustRecitationProtoDocAttribution::setMeenaConversationId(const QString &meena_conversation_id) {
    m_meena_conversation_id = meena_conversation_id;
    m_meena_conversation_id_isSet = true;
}

bool OAILanguageLabsAidaTrustRecitationProtoDocAttribution::is_meena_conversation_id_Set() const{
    return m_meena_conversation_id_isSet;
}

bool OAILanguageLabsAidaTrustRecitationProtoDocAttribution::is_meena_conversation_id_Valid() const{
    return m_meena_conversation_id_isValid;
}

QString OAILanguageLabsAidaTrustRecitationProtoDocAttribution::getNaturalLanguageCode() const {
    return m_natural_language_code;
}
void OAILanguageLabsAidaTrustRecitationProtoDocAttribution::setNaturalLanguageCode(const QString &natural_language_code) {
    m_natural_language_code = natural_language_code;
    m_natural_language_code_isSet = true;
}

bool OAILanguageLabsAidaTrustRecitationProtoDocAttribution::is_natural_language_code_Set() const{
    return m_natural_language_code_isSet;
}

bool OAILanguageLabsAidaTrustRecitationProtoDocAttribution::is_natural_language_code_Valid() const{
    return m_natural_language_code_isValid;
}

bool OAILanguageLabsAidaTrustRecitationProtoDocAttribution::isNoAttribution() const {
    return m_no_attribution;
}
void OAILanguageLabsAidaTrustRecitationProtoDocAttribution::setNoAttribution(const bool &no_attribution) {
    m_no_attribution = no_attribution;
    m_no_attribution_isSet = true;
}

bool OAILanguageLabsAidaTrustRecitationProtoDocAttribution::is_no_attribution_Set() const{
    return m_no_attribution_isSet;
}

bool OAILanguageLabsAidaTrustRecitationProtoDocAttribution::is_no_attribution_Valid() const{
    return m_no_attribution_isValid;
}

QString OAILanguageLabsAidaTrustRecitationProtoDocAttribution::getPodcastUtteranceId() const {
    return m_podcast_utterance_id;
}
void OAILanguageLabsAidaTrustRecitationProtoDocAttribution::setPodcastUtteranceId(const QString &podcast_utterance_id) {
    m_podcast_utterance_id = podcast_utterance_id;
    m_podcast_utterance_id_isSet = true;
}

bool OAILanguageLabsAidaTrustRecitationProtoDocAttribution::is_podcast_utterance_id_Set() const{
    return m_podcast_utterance_id_isSet;
}

bool OAILanguageLabsAidaTrustRecitationProtoDocAttribution::is_podcast_utterance_id_Valid() const{
    return m_podcast_utterance_id_isValid;
}

OAIGoogleTypeDate OAILanguageLabsAidaTrustRecitationProtoDocAttribution::getPublicationDate() const {
    return m_publication_date;
}
void OAILanguageLabsAidaTrustRecitationProtoDocAttribution::setPublicationDate(const OAIGoogleTypeDate &publication_date) {
    m_publication_date = publication_date;
    m_publication_date_isSet = true;
}

bool OAILanguageLabsAidaTrustRecitationProtoDocAttribution::is_publication_date_Set() const{
    return m_publication_date_isSet;
}

bool OAILanguageLabsAidaTrustRecitationProtoDocAttribution::is_publication_date_Valid() const{
    return m_publication_date_isValid;
}

double OAILanguageLabsAidaTrustRecitationProtoDocAttribution::getQualityScoreExperimentOnly() const {
    return m_quality_score_experiment_only;
}
void OAILanguageLabsAidaTrustRecitationProtoDocAttribution::setQualityScoreExperimentOnly(const double &quality_score_experiment_only) {
    m_quality_score_experiment_only = quality_score_experiment_only;
    m_quality_score_experiment_only_isSet = true;
}

bool OAILanguageLabsAidaTrustRecitationProtoDocAttribution::is_quality_score_experiment_only_Set() const{
    return m_quality_score_experiment_only_isSet;
}

bool OAILanguageLabsAidaTrustRecitationProtoDocAttribution::is_quality_score_experiment_only_Valid() const{
    return m_quality_score_experiment_only_isValid;
}

QString OAILanguageLabsAidaTrustRecitationProtoDocAttribution::getRepo() const {
    return m_repo;
}
void OAILanguageLabsAidaTrustRecitationProtoDocAttribution::setRepo(const QString &repo) {
    m_repo = repo;
    m_repo_isSet = true;
}

bool OAILanguageLabsAidaTrustRecitationProtoDocAttribution::is_repo_Set() const{
    return m_repo_isSet;
}

bool OAILanguageLabsAidaTrustRecitationProtoDocAttribution::is_repo_Valid() const{
    return m_repo_isValid;
}

QString OAILanguageLabsAidaTrustRecitationProtoDocAttribution::getUrl() const {
    return m_url;
}
void OAILanguageLabsAidaTrustRecitationProtoDocAttribution::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAILanguageLabsAidaTrustRecitationProtoDocAttribution::is_url_Set() const{
    return m_url_isSet;
}

bool OAILanguageLabsAidaTrustRecitationProtoDocAttribution::is_url_Valid() const{
    return m_url_isValid;
}

QString OAILanguageLabsAidaTrustRecitationProtoDocAttribution::getVolumeId() const {
    return m_volume_id;
}
void OAILanguageLabsAidaTrustRecitationProtoDocAttribution::setVolumeId(const QString &volume_id) {
    m_volume_id = volume_id;
    m_volume_id_isSet = true;
}

bool OAILanguageLabsAidaTrustRecitationProtoDocAttribution::is_volume_id_Set() const{
    return m_volume_id_isSet;
}

bool OAILanguageLabsAidaTrustRecitationProtoDocAttribution::is_volume_id_Valid() const{
    return m_volume_id_isValid;
}

QString OAILanguageLabsAidaTrustRecitationProtoDocAttribution::getWikipediaArticleTitle() const {
    return m_wikipedia_article_title;
}
void OAILanguageLabsAidaTrustRecitationProtoDocAttribution::setWikipediaArticleTitle(const QString &wikipedia_article_title) {
    m_wikipedia_article_title = wikipedia_article_title;
    m_wikipedia_article_title_isSet = true;
}

bool OAILanguageLabsAidaTrustRecitationProtoDocAttribution::is_wikipedia_article_title_Set() const{
    return m_wikipedia_article_title_isSet;
}

bool OAILanguageLabsAidaTrustRecitationProtoDocAttribution::is_wikipedia_article_title_Valid() const{
    return m_wikipedia_article_title_isValid;
}

QString OAILanguageLabsAidaTrustRecitationProtoDocAttribution::getYoutubeVideoId() const {
    return m_youtube_video_id;
}
void OAILanguageLabsAidaTrustRecitationProtoDocAttribution::setYoutubeVideoId(const QString &youtube_video_id) {
    m_youtube_video_id = youtube_video_id;
    m_youtube_video_id_isSet = true;
}

bool OAILanguageLabsAidaTrustRecitationProtoDocAttribution::is_youtube_video_id_Set() const{
    return m_youtube_video_id_isSet;
}

bool OAILanguageLabsAidaTrustRecitationProtoDocAttribution::is_youtube_video_id_Valid() const{
    return m_youtube_video_id_isValid;
}

bool OAILanguageLabsAidaTrustRecitationProtoDocAttribution::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_amarna_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_arxiv_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_author_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bibkey_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_biorxiv_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_book_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_book_volume_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_conversation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dataset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filepath_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gemini_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gnews_article_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_goodall_example_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_opt_out_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_prompt_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lamda_example_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_license_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_meena_conversation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_natural_language_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_no_attribution_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_podcast_utterance_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_publication_date.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_quality_score_experiment_only_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repo_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_volume_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wikipedia_article_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_youtube_video_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILanguageLabsAidaTrustRecitationProtoDocAttribution::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
