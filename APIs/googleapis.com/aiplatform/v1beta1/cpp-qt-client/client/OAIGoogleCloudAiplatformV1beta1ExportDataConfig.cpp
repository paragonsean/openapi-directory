/**
 * Vertex AI API
 * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudAiplatformV1beta1ExportDataConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudAiplatformV1beta1ExportDataConfig::OAIGoogleCloudAiplatformV1beta1ExportDataConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudAiplatformV1beta1ExportDataConfig::OAIGoogleCloudAiplatformV1beta1ExportDataConfig() {
    this->initializeModel();
}

OAIGoogleCloudAiplatformV1beta1ExportDataConfig::~OAIGoogleCloudAiplatformV1beta1ExportDataConfig() {}

void OAIGoogleCloudAiplatformV1beta1ExportDataConfig::initializeModel() {

    m_annotations_filter_isSet = false;
    m_annotations_filter_isValid = false;

    m_fraction_split_isSet = false;
    m_fraction_split_isValid = false;

    m_gcs_destination_isSet = false;
    m_gcs_destination_isValid = false;
}

void OAIGoogleCloudAiplatformV1beta1ExportDataConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudAiplatformV1beta1ExportDataConfig::fromJsonObject(QJsonObject json) {

    m_annotations_filter_isValid = ::OpenAPI::fromJsonValue(m_annotations_filter, json[QString("annotationsFilter")]);
    m_annotations_filter_isSet = !json[QString("annotationsFilter")].isNull() && m_annotations_filter_isValid;

    m_fraction_split_isValid = ::OpenAPI::fromJsonValue(m_fraction_split, json[QString("fractionSplit")]);
    m_fraction_split_isSet = !json[QString("fractionSplit")].isNull() && m_fraction_split_isValid;

    m_gcs_destination_isValid = ::OpenAPI::fromJsonValue(m_gcs_destination, json[QString("gcsDestination")]);
    m_gcs_destination_isSet = !json[QString("gcsDestination")].isNull() && m_gcs_destination_isValid;
}

QString OAIGoogleCloudAiplatformV1beta1ExportDataConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudAiplatformV1beta1ExportDataConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_annotations_filter_isSet) {
        obj.insert(QString("annotationsFilter"), ::OpenAPI::toJsonValue(m_annotations_filter));
    }
    if (m_fraction_split.isSet()) {
        obj.insert(QString("fractionSplit"), ::OpenAPI::toJsonValue(m_fraction_split));
    }
    if (m_gcs_destination.isSet()) {
        obj.insert(QString("gcsDestination"), ::OpenAPI::toJsonValue(m_gcs_destination));
    }
    return obj;
}

QString OAIGoogleCloudAiplatformV1beta1ExportDataConfig::getAnnotationsFilter() const {
    return m_annotations_filter;
}
void OAIGoogleCloudAiplatformV1beta1ExportDataConfig::setAnnotationsFilter(const QString &annotations_filter) {
    m_annotations_filter = annotations_filter;
    m_annotations_filter_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1ExportDataConfig::is_annotations_filter_Set() const{
    return m_annotations_filter_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1ExportDataConfig::is_annotations_filter_Valid() const{
    return m_annotations_filter_isValid;
}

OAIGoogleCloudAiplatformV1beta1ExportFractionSplit OAIGoogleCloudAiplatformV1beta1ExportDataConfig::getFractionSplit() const {
    return m_fraction_split;
}
void OAIGoogleCloudAiplatformV1beta1ExportDataConfig::setFractionSplit(const OAIGoogleCloudAiplatformV1beta1ExportFractionSplit &fraction_split) {
    m_fraction_split = fraction_split;
    m_fraction_split_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1ExportDataConfig::is_fraction_split_Set() const{
    return m_fraction_split_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1ExportDataConfig::is_fraction_split_Valid() const{
    return m_fraction_split_isValid;
}

OAIGoogleCloudAiplatformV1beta1GcsDestination OAIGoogleCloudAiplatformV1beta1ExportDataConfig::getGcsDestination() const {
    return m_gcs_destination;
}
void OAIGoogleCloudAiplatformV1beta1ExportDataConfig::setGcsDestination(const OAIGoogleCloudAiplatformV1beta1GcsDestination &gcs_destination) {
    m_gcs_destination = gcs_destination;
    m_gcs_destination_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1ExportDataConfig::is_gcs_destination_Set() const{
    return m_gcs_destination_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1ExportDataConfig::is_gcs_destination_Valid() const{
    return m_gcs_destination_isValid;
}

bool OAIGoogleCloudAiplatformV1beta1ExportDataConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_annotations_filter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fraction_split.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_gcs_destination.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudAiplatformV1beta1ExportDataConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
