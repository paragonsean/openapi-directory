/**
 * Vertex AI API
 * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILearningGenaiRootCalculationType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILearningGenaiRootCalculationType::OAILearningGenaiRootCalculationType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILearningGenaiRootCalculationType::OAILearningGenaiRootCalculationType() {
    this->initializeModel();
}

OAILearningGenaiRootCalculationType::~OAILearningGenaiRootCalculationType() {}

void OAILearningGenaiRootCalculationType::initializeModel() {

    m_score_type_isSet = false;
    m_score_type_isValid = false;

    m_weights_isSet = false;
    m_weights_isValid = false;
}

void OAILearningGenaiRootCalculationType::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILearningGenaiRootCalculationType::fromJsonObject(QJsonObject json) {

    m_score_type_isValid = ::OpenAPI::fromJsonValue(m_score_type, json[QString("scoreType")]);
    m_score_type_isSet = !json[QString("scoreType")].isNull() && m_score_type_isValid;

    m_weights_isValid = ::OpenAPI::fromJsonValue(m_weights, json[QString("weights")]);
    m_weights_isSet = !json[QString("weights")].isNull() && m_weights_isValid;
}

QString OAILearningGenaiRootCalculationType::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILearningGenaiRootCalculationType::asJsonObject() const {
    QJsonObject obj;
    if (m_score_type_isSet) {
        obj.insert(QString("scoreType"), ::OpenAPI::toJsonValue(m_score_type));
    }
    if (m_weights_isSet) {
        obj.insert(QString("weights"), ::OpenAPI::toJsonValue(m_weights));
    }
    return obj;
}

QString OAILearningGenaiRootCalculationType::getScoreType() const {
    return m_score_type;
}
void OAILearningGenaiRootCalculationType::setScoreType(const QString &score_type) {
    m_score_type = score_type;
    m_score_type_isSet = true;
}

bool OAILearningGenaiRootCalculationType::is_score_type_Set() const{
    return m_score_type_isSet;
}

bool OAILearningGenaiRootCalculationType::is_score_type_Valid() const{
    return m_score_type_isValid;
}

double OAILearningGenaiRootCalculationType::getWeights() const {
    return m_weights;
}
void OAILearningGenaiRootCalculationType::setWeights(const double &weights) {
    m_weights = weights;
    m_weights_isSet = true;
}

bool OAILearningGenaiRootCalculationType::is_weights_Set() const{
    return m_weights_isSet;
}

bool OAILearningGenaiRootCalculationType::is_weights_Valid() const{
    return m_weights_isValid;
}

bool OAILearningGenaiRootCalculationType::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_score_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_weights_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILearningGenaiRootCalculationType::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
