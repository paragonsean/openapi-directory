/**
 * Vertex AI API
 * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILearningGenaiRecitationSegmentResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILearningGenaiRecitationSegmentResult::OAILearningGenaiRecitationSegmentResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILearningGenaiRecitationSegmentResult::OAILearningGenaiRecitationSegmentResult() {
    this->initializeModel();
}

OAILearningGenaiRecitationSegmentResult::~OAILearningGenaiRecitationSegmentResult() {}

void OAILearningGenaiRecitationSegmentResult::initializeModel() {

    m_attribution_dataset_isSet = false;
    m_attribution_dataset_isValid = false;

    m_display_attribution_message_isSet = false;
    m_display_attribution_message_isValid = false;

    m_doc_attribution_isSet = false;
    m_doc_attribution_isValid = false;

    m_doc_occurrences_isSet = false;
    m_doc_occurrences_isValid = false;

    m_end_index_isSet = false;
    m_end_index_isValid = false;

    m_raw_text_isSet = false;
    m_raw_text_isValid = false;

    m_segment_recitation_action_isSet = false;
    m_segment_recitation_action_isValid = false;

    m_start_index_isSet = false;
    m_start_index_isValid = false;
}

void OAILearningGenaiRecitationSegmentResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILearningGenaiRecitationSegmentResult::fromJsonObject(QJsonObject json) {

    m_attribution_dataset_isValid = ::OpenAPI::fromJsonValue(m_attribution_dataset, json[QString("attributionDataset")]);
    m_attribution_dataset_isSet = !json[QString("attributionDataset")].isNull() && m_attribution_dataset_isValid;

    m_display_attribution_message_isValid = ::OpenAPI::fromJsonValue(m_display_attribution_message, json[QString("displayAttributionMessage")]);
    m_display_attribution_message_isSet = !json[QString("displayAttributionMessage")].isNull() && m_display_attribution_message_isValid;

    m_doc_attribution_isValid = ::OpenAPI::fromJsonValue(m_doc_attribution, json[QString("docAttribution")]);
    m_doc_attribution_isSet = !json[QString("docAttribution")].isNull() && m_doc_attribution_isValid;

    m_doc_occurrences_isValid = ::OpenAPI::fromJsonValue(m_doc_occurrences, json[QString("docOccurrences")]);
    m_doc_occurrences_isSet = !json[QString("docOccurrences")].isNull() && m_doc_occurrences_isValid;

    m_end_index_isValid = ::OpenAPI::fromJsonValue(m_end_index, json[QString("endIndex")]);
    m_end_index_isSet = !json[QString("endIndex")].isNull() && m_end_index_isValid;

    m_raw_text_isValid = ::OpenAPI::fromJsonValue(m_raw_text, json[QString("rawText")]);
    m_raw_text_isSet = !json[QString("rawText")].isNull() && m_raw_text_isValid;

    m_segment_recitation_action_isValid = ::OpenAPI::fromJsonValue(m_segment_recitation_action, json[QString("segmentRecitationAction")]);
    m_segment_recitation_action_isSet = !json[QString("segmentRecitationAction")].isNull() && m_segment_recitation_action_isValid;

    m_start_index_isValid = ::OpenAPI::fromJsonValue(m_start_index, json[QString("startIndex")]);
    m_start_index_isSet = !json[QString("startIndex")].isNull() && m_start_index_isValid;
}

QString OAILearningGenaiRecitationSegmentResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILearningGenaiRecitationSegmentResult::asJsonObject() const {
    QJsonObject obj;
    if (m_attribution_dataset_isSet) {
        obj.insert(QString("attributionDataset"), ::OpenAPI::toJsonValue(m_attribution_dataset));
    }
    if (m_display_attribution_message_isSet) {
        obj.insert(QString("displayAttributionMessage"), ::OpenAPI::toJsonValue(m_display_attribution_message));
    }
    if (m_doc_attribution.isSet()) {
        obj.insert(QString("docAttribution"), ::OpenAPI::toJsonValue(m_doc_attribution));
    }
    if (m_doc_occurrences_isSet) {
        obj.insert(QString("docOccurrences"), ::OpenAPI::toJsonValue(m_doc_occurrences));
    }
    if (m_end_index_isSet) {
        obj.insert(QString("endIndex"), ::OpenAPI::toJsonValue(m_end_index));
    }
    if (m_raw_text_isSet) {
        obj.insert(QString("rawText"), ::OpenAPI::toJsonValue(m_raw_text));
    }
    if (m_segment_recitation_action_isSet) {
        obj.insert(QString("segmentRecitationAction"), ::OpenAPI::toJsonValue(m_segment_recitation_action));
    }
    if (m_start_index_isSet) {
        obj.insert(QString("startIndex"), ::OpenAPI::toJsonValue(m_start_index));
    }
    return obj;
}

QString OAILearningGenaiRecitationSegmentResult::getAttributionDataset() const {
    return m_attribution_dataset;
}
void OAILearningGenaiRecitationSegmentResult::setAttributionDataset(const QString &attribution_dataset) {
    m_attribution_dataset = attribution_dataset;
    m_attribution_dataset_isSet = true;
}

bool OAILearningGenaiRecitationSegmentResult::is_attribution_dataset_Set() const{
    return m_attribution_dataset_isSet;
}

bool OAILearningGenaiRecitationSegmentResult::is_attribution_dataset_Valid() const{
    return m_attribution_dataset_isValid;
}

QString OAILearningGenaiRecitationSegmentResult::getDisplayAttributionMessage() const {
    return m_display_attribution_message;
}
void OAILearningGenaiRecitationSegmentResult::setDisplayAttributionMessage(const QString &display_attribution_message) {
    m_display_attribution_message = display_attribution_message;
    m_display_attribution_message_isSet = true;
}

bool OAILearningGenaiRecitationSegmentResult::is_display_attribution_message_Set() const{
    return m_display_attribution_message_isSet;
}

bool OAILearningGenaiRecitationSegmentResult::is_display_attribution_message_Valid() const{
    return m_display_attribution_message_isValid;
}

OAILearningGenaiRecitationDocAttribution OAILearningGenaiRecitationSegmentResult::getDocAttribution() const {
    return m_doc_attribution;
}
void OAILearningGenaiRecitationSegmentResult::setDocAttribution(const OAILearningGenaiRecitationDocAttribution &doc_attribution) {
    m_doc_attribution = doc_attribution;
    m_doc_attribution_isSet = true;
}

bool OAILearningGenaiRecitationSegmentResult::is_doc_attribution_Set() const{
    return m_doc_attribution_isSet;
}

bool OAILearningGenaiRecitationSegmentResult::is_doc_attribution_Valid() const{
    return m_doc_attribution_isValid;
}

qint32 OAILearningGenaiRecitationSegmentResult::getDocOccurrences() const {
    return m_doc_occurrences;
}
void OAILearningGenaiRecitationSegmentResult::setDocOccurrences(const qint32 &doc_occurrences) {
    m_doc_occurrences = doc_occurrences;
    m_doc_occurrences_isSet = true;
}

bool OAILearningGenaiRecitationSegmentResult::is_doc_occurrences_Set() const{
    return m_doc_occurrences_isSet;
}

bool OAILearningGenaiRecitationSegmentResult::is_doc_occurrences_Valid() const{
    return m_doc_occurrences_isValid;
}

qint32 OAILearningGenaiRecitationSegmentResult::getEndIndex() const {
    return m_end_index;
}
void OAILearningGenaiRecitationSegmentResult::setEndIndex(const qint32 &end_index) {
    m_end_index = end_index;
    m_end_index_isSet = true;
}

bool OAILearningGenaiRecitationSegmentResult::is_end_index_Set() const{
    return m_end_index_isSet;
}

bool OAILearningGenaiRecitationSegmentResult::is_end_index_Valid() const{
    return m_end_index_isValid;
}

QString OAILearningGenaiRecitationSegmentResult::getRawText() const {
    return m_raw_text;
}
void OAILearningGenaiRecitationSegmentResult::setRawText(const QString &raw_text) {
    m_raw_text = raw_text;
    m_raw_text_isSet = true;
}

bool OAILearningGenaiRecitationSegmentResult::is_raw_text_Set() const{
    return m_raw_text_isSet;
}

bool OAILearningGenaiRecitationSegmentResult::is_raw_text_Valid() const{
    return m_raw_text_isValid;
}

QString OAILearningGenaiRecitationSegmentResult::getSegmentRecitationAction() const {
    return m_segment_recitation_action;
}
void OAILearningGenaiRecitationSegmentResult::setSegmentRecitationAction(const QString &segment_recitation_action) {
    m_segment_recitation_action = segment_recitation_action;
    m_segment_recitation_action_isSet = true;
}

bool OAILearningGenaiRecitationSegmentResult::is_segment_recitation_action_Set() const{
    return m_segment_recitation_action_isSet;
}

bool OAILearningGenaiRecitationSegmentResult::is_segment_recitation_action_Valid() const{
    return m_segment_recitation_action_isValid;
}

qint32 OAILearningGenaiRecitationSegmentResult::getStartIndex() const {
    return m_start_index;
}
void OAILearningGenaiRecitationSegmentResult::setStartIndex(const qint32 &start_index) {
    m_start_index = start_index;
    m_start_index_isSet = true;
}

bool OAILearningGenaiRecitationSegmentResult::is_start_index_Set() const{
    return m_start_index_isSet;
}

bool OAILearningGenaiRecitationSegmentResult::is_start_index_Valid() const{
    return m_start_index_isValid;
}

bool OAILearningGenaiRecitationSegmentResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attribution_dataset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_attribution_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_doc_attribution.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_doc_occurrences_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_raw_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_segment_recitation_action_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_index_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILearningGenaiRecitationSegmentResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
