/**
 * Vertex AI API
 * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudAiplatformV1beta1ModelMonitoringStatsAnomalies.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudAiplatformV1beta1ModelMonitoringStatsAnomalies::OAIGoogleCloudAiplatformV1beta1ModelMonitoringStatsAnomalies(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudAiplatformV1beta1ModelMonitoringStatsAnomalies::OAIGoogleCloudAiplatformV1beta1ModelMonitoringStatsAnomalies() {
    this->initializeModel();
}

OAIGoogleCloudAiplatformV1beta1ModelMonitoringStatsAnomalies::~OAIGoogleCloudAiplatformV1beta1ModelMonitoringStatsAnomalies() {}

void OAIGoogleCloudAiplatformV1beta1ModelMonitoringStatsAnomalies::initializeModel() {

    m_anomaly_count_isSet = false;
    m_anomaly_count_isValid = false;

    m_deployed_model_id_isSet = false;
    m_deployed_model_id_isValid = false;

    m_feature_stats_isSet = false;
    m_feature_stats_isValid = false;

    m_objective_isSet = false;
    m_objective_isValid = false;
}

void OAIGoogleCloudAiplatformV1beta1ModelMonitoringStatsAnomalies::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudAiplatformV1beta1ModelMonitoringStatsAnomalies::fromJsonObject(QJsonObject json) {

    m_anomaly_count_isValid = ::OpenAPI::fromJsonValue(m_anomaly_count, json[QString("anomalyCount")]);
    m_anomaly_count_isSet = !json[QString("anomalyCount")].isNull() && m_anomaly_count_isValid;

    m_deployed_model_id_isValid = ::OpenAPI::fromJsonValue(m_deployed_model_id, json[QString("deployedModelId")]);
    m_deployed_model_id_isSet = !json[QString("deployedModelId")].isNull() && m_deployed_model_id_isValid;

    m_feature_stats_isValid = ::OpenAPI::fromJsonValue(m_feature_stats, json[QString("featureStats")]);
    m_feature_stats_isSet = !json[QString("featureStats")].isNull() && m_feature_stats_isValid;

    m_objective_isValid = ::OpenAPI::fromJsonValue(m_objective, json[QString("objective")]);
    m_objective_isSet = !json[QString("objective")].isNull() && m_objective_isValid;
}

QString OAIGoogleCloudAiplatformV1beta1ModelMonitoringStatsAnomalies::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudAiplatformV1beta1ModelMonitoringStatsAnomalies::asJsonObject() const {
    QJsonObject obj;
    if (m_anomaly_count_isSet) {
        obj.insert(QString("anomalyCount"), ::OpenAPI::toJsonValue(m_anomaly_count));
    }
    if (m_deployed_model_id_isSet) {
        obj.insert(QString("deployedModelId"), ::OpenAPI::toJsonValue(m_deployed_model_id));
    }
    if (m_feature_stats.size() > 0) {
        obj.insert(QString("featureStats"), ::OpenAPI::toJsonValue(m_feature_stats));
    }
    if (m_objective_isSet) {
        obj.insert(QString("objective"), ::OpenAPI::toJsonValue(m_objective));
    }
    return obj;
}

qint32 OAIGoogleCloudAiplatformV1beta1ModelMonitoringStatsAnomalies::getAnomalyCount() const {
    return m_anomaly_count;
}
void OAIGoogleCloudAiplatformV1beta1ModelMonitoringStatsAnomalies::setAnomalyCount(const qint32 &anomaly_count) {
    m_anomaly_count = anomaly_count;
    m_anomaly_count_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1ModelMonitoringStatsAnomalies::is_anomaly_count_Set() const{
    return m_anomaly_count_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1ModelMonitoringStatsAnomalies::is_anomaly_count_Valid() const{
    return m_anomaly_count_isValid;
}

QString OAIGoogleCloudAiplatformV1beta1ModelMonitoringStatsAnomalies::getDeployedModelId() const {
    return m_deployed_model_id;
}
void OAIGoogleCloudAiplatformV1beta1ModelMonitoringStatsAnomalies::setDeployedModelId(const QString &deployed_model_id) {
    m_deployed_model_id = deployed_model_id;
    m_deployed_model_id_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1ModelMonitoringStatsAnomalies::is_deployed_model_id_Set() const{
    return m_deployed_model_id_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1ModelMonitoringStatsAnomalies::is_deployed_model_id_Valid() const{
    return m_deployed_model_id_isValid;
}

QList<OAIGoogleCloudAiplatformV1beta1ModelMonitoringStatsAnomaliesFeatureHistoricStatsAnomalies> OAIGoogleCloudAiplatformV1beta1ModelMonitoringStatsAnomalies::getFeatureStats() const {
    return m_feature_stats;
}
void OAIGoogleCloudAiplatformV1beta1ModelMonitoringStatsAnomalies::setFeatureStats(const QList<OAIGoogleCloudAiplatformV1beta1ModelMonitoringStatsAnomaliesFeatureHistoricStatsAnomalies> &feature_stats) {
    m_feature_stats = feature_stats;
    m_feature_stats_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1ModelMonitoringStatsAnomalies::is_feature_stats_Set() const{
    return m_feature_stats_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1ModelMonitoringStatsAnomalies::is_feature_stats_Valid() const{
    return m_feature_stats_isValid;
}

QString OAIGoogleCloudAiplatformV1beta1ModelMonitoringStatsAnomalies::getObjective() const {
    return m_objective;
}
void OAIGoogleCloudAiplatformV1beta1ModelMonitoringStatsAnomalies::setObjective(const QString &objective) {
    m_objective = objective;
    m_objective_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1ModelMonitoringStatsAnomalies::is_objective_Set() const{
    return m_objective_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1ModelMonitoringStatsAnomalies::is_objective_Valid() const{
    return m_objective_isValid;
}

bool OAIGoogleCloudAiplatformV1beta1ModelMonitoringStatsAnomalies::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_anomaly_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deployed_model_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_feature_stats.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_objective_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudAiplatformV1beta1ModelMonitoringStatsAnomalies::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
