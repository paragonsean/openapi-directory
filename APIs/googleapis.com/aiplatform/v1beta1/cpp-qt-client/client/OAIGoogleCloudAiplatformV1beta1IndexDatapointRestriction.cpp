/**
 * Vertex AI API
 * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudAiplatformV1beta1IndexDatapointRestriction.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudAiplatformV1beta1IndexDatapointRestriction::OAIGoogleCloudAiplatformV1beta1IndexDatapointRestriction(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudAiplatformV1beta1IndexDatapointRestriction::OAIGoogleCloudAiplatformV1beta1IndexDatapointRestriction() {
    this->initializeModel();
}

OAIGoogleCloudAiplatformV1beta1IndexDatapointRestriction::~OAIGoogleCloudAiplatformV1beta1IndexDatapointRestriction() {}

void OAIGoogleCloudAiplatformV1beta1IndexDatapointRestriction::initializeModel() {

    m_allow_list_isSet = false;
    m_allow_list_isValid = false;

    m_deny_list_isSet = false;
    m_deny_list_isValid = false;

    m_r_namespace_isSet = false;
    m_r_namespace_isValid = false;
}

void OAIGoogleCloudAiplatformV1beta1IndexDatapointRestriction::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudAiplatformV1beta1IndexDatapointRestriction::fromJsonObject(QJsonObject json) {

    m_allow_list_isValid = ::OpenAPI::fromJsonValue(m_allow_list, json[QString("allowList")]);
    m_allow_list_isSet = !json[QString("allowList")].isNull() && m_allow_list_isValid;

    m_deny_list_isValid = ::OpenAPI::fromJsonValue(m_deny_list, json[QString("denyList")]);
    m_deny_list_isSet = !json[QString("denyList")].isNull() && m_deny_list_isValid;

    m_r_namespace_isValid = ::OpenAPI::fromJsonValue(m_r_namespace, json[QString("namespace")]);
    m_r_namespace_isSet = !json[QString("namespace")].isNull() && m_r_namespace_isValid;
}

QString OAIGoogleCloudAiplatformV1beta1IndexDatapointRestriction::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudAiplatformV1beta1IndexDatapointRestriction::asJsonObject() const {
    QJsonObject obj;
    if (m_allow_list.size() > 0) {
        obj.insert(QString("allowList"), ::OpenAPI::toJsonValue(m_allow_list));
    }
    if (m_deny_list.size() > 0) {
        obj.insert(QString("denyList"), ::OpenAPI::toJsonValue(m_deny_list));
    }
    if (m_r_namespace_isSet) {
        obj.insert(QString("namespace"), ::OpenAPI::toJsonValue(m_r_namespace));
    }
    return obj;
}

QList<QString> OAIGoogleCloudAiplatformV1beta1IndexDatapointRestriction::getAllowList() const {
    return m_allow_list;
}
void OAIGoogleCloudAiplatformV1beta1IndexDatapointRestriction::setAllowList(const QList<QString> &allow_list) {
    m_allow_list = allow_list;
    m_allow_list_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1IndexDatapointRestriction::is_allow_list_Set() const{
    return m_allow_list_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1IndexDatapointRestriction::is_allow_list_Valid() const{
    return m_allow_list_isValid;
}

QList<QString> OAIGoogleCloudAiplatformV1beta1IndexDatapointRestriction::getDenyList() const {
    return m_deny_list;
}
void OAIGoogleCloudAiplatformV1beta1IndexDatapointRestriction::setDenyList(const QList<QString> &deny_list) {
    m_deny_list = deny_list;
    m_deny_list_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1IndexDatapointRestriction::is_deny_list_Set() const{
    return m_deny_list_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1IndexDatapointRestriction::is_deny_list_Valid() const{
    return m_deny_list_isValid;
}

QString OAIGoogleCloudAiplatformV1beta1IndexDatapointRestriction::getRNamespace() const {
    return m_r_namespace;
}
void OAIGoogleCloudAiplatformV1beta1IndexDatapointRestriction::setRNamespace(const QString &r_namespace) {
    m_r_namespace = r_namespace;
    m_r_namespace_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1IndexDatapointRestriction::is_r_namespace_Set() const{
    return m_r_namespace_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1IndexDatapointRestriction::is_r_namespace_Valid() const{
    return m_r_namespace_isValid;
}

bool OAIGoogleCloudAiplatformV1beta1IndexDatapointRestriction::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allow_list.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_deny_list.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_namespace_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudAiplatformV1beta1IndexDatapointRestriction::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
