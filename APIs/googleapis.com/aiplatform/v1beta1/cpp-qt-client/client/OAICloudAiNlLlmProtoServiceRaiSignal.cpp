/**
 * Vertex AI API
 * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICloudAiNlLlmProtoServiceRaiSignal.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICloudAiNlLlmProtoServiceRaiSignal::OAICloudAiNlLlmProtoServiceRaiSignal(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICloudAiNlLlmProtoServiceRaiSignal::OAICloudAiNlLlmProtoServiceRaiSignal() {
    this->initializeModel();
}

OAICloudAiNlLlmProtoServiceRaiSignal::~OAICloudAiNlLlmProtoServiceRaiSignal() {}

void OAICloudAiNlLlmProtoServiceRaiSignal::initializeModel() {

    m_confidence_isSet = false;
    m_confidence_isValid = false;

    m_flagged_isSet = false;
    m_flagged_isValid = false;

    m_rai_category_isSet = false;
    m_rai_category_isValid = false;

    m_score_isSet = false;
    m_score_isValid = false;
}

void OAICloudAiNlLlmProtoServiceRaiSignal::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICloudAiNlLlmProtoServiceRaiSignal::fromJsonObject(QJsonObject json) {

    m_confidence_isValid = ::OpenAPI::fromJsonValue(m_confidence, json[QString("confidence")]);
    m_confidence_isSet = !json[QString("confidence")].isNull() && m_confidence_isValid;

    m_flagged_isValid = ::OpenAPI::fromJsonValue(m_flagged, json[QString("flagged")]);
    m_flagged_isSet = !json[QString("flagged")].isNull() && m_flagged_isValid;

    m_rai_category_isValid = ::OpenAPI::fromJsonValue(m_rai_category, json[QString("raiCategory")]);
    m_rai_category_isSet = !json[QString("raiCategory")].isNull() && m_rai_category_isValid;

    m_score_isValid = ::OpenAPI::fromJsonValue(m_score, json[QString("score")]);
    m_score_isSet = !json[QString("score")].isNull() && m_score_isValid;
}

QString OAICloudAiNlLlmProtoServiceRaiSignal::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICloudAiNlLlmProtoServiceRaiSignal::asJsonObject() const {
    QJsonObject obj;
    if (m_confidence_isSet) {
        obj.insert(QString("confidence"), ::OpenAPI::toJsonValue(m_confidence));
    }
    if (m_flagged_isSet) {
        obj.insert(QString("flagged"), ::OpenAPI::toJsonValue(m_flagged));
    }
    if (m_rai_category_isSet) {
        obj.insert(QString("raiCategory"), ::OpenAPI::toJsonValue(m_rai_category));
    }
    if (m_score_isSet) {
        obj.insert(QString("score"), ::OpenAPI::toJsonValue(m_score));
    }
    return obj;
}

QString OAICloudAiNlLlmProtoServiceRaiSignal::getConfidence() const {
    return m_confidence;
}
void OAICloudAiNlLlmProtoServiceRaiSignal::setConfidence(const QString &confidence) {
    m_confidence = confidence;
    m_confidence_isSet = true;
}

bool OAICloudAiNlLlmProtoServiceRaiSignal::is_confidence_Set() const{
    return m_confidence_isSet;
}

bool OAICloudAiNlLlmProtoServiceRaiSignal::is_confidence_Valid() const{
    return m_confidence_isValid;
}

bool OAICloudAiNlLlmProtoServiceRaiSignal::isFlagged() const {
    return m_flagged;
}
void OAICloudAiNlLlmProtoServiceRaiSignal::setFlagged(const bool &flagged) {
    m_flagged = flagged;
    m_flagged_isSet = true;
}

bool OAICloudAiNlLlmProtoServiceRaiSignal::is_flagged_Set() const{
    return m_flagged_isSet;
}

bool OAICloudAiNlLlmProtoServiceRaiSignal::is_flagged_Valid() const{
    return m_flagged_isValid;
}

QString OAICloudAiNlLlmProtoServiceRaiSignal::getRaiCategory() const {
    return m_rai_category;
}
void OAICloudAiNlLlmProtoServiceRaiSignal::setRaiCategory(const QString &rai_category) {
    m_rai_category = rai_category;
    m_rai_category_isSet = true;
}

bool OAICloudAiNlLlmProtoServiceRaiSignal::is_rai_category_Set() const{
    return m_rai_category_isSet;
}

bool OAICloudAiNlLlmProtoServiceRaiSignal::is_rai_category_Valid() const{
    return m_rai_category_isValid;
}

float OAICloudAiNlLlmProtoServiceRaiSignal::getScore() const {
    return m_score;
}
void OAICloudAiNlLlmProtoServiceRaiSignal::setScore(const float &score) {
    m_score = score;
    m_score_isSet = true;
}

bool OAICloudAiNlLlmProtoServiceRaiSignal::is_score_Set() const{
    return m_score_isSet;
}

bool OAICloudAiNlLlmProtoServiceRaiSignal::is_score_Valid() const{
    return m_score_isValid;
}

bool OAICloudAiNlLlmProtoServiceRaiSignal::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_confidence_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_flagged_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rai_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_score_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICloudAiNlLlmProtoServiceRaiSignal::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
