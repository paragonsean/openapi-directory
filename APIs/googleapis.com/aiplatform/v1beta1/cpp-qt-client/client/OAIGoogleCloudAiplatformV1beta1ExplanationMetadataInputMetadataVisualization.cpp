/**
 * Vertex AI API
 * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudAiplatformV1beta1ExplanationMetadataInputMetadataVisualization.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudAiplatformV1beta1ExplanationMetadataInputMetadataVisualization::OAIGoogleCloudAiplatformV1beta1ExplanationMetadataInputMetadataVisualization(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudAiplatformV1beta1ExplanationMetadataInputMetadataVisualization::OAIGoogleCloudAiplatformV1beta1ExplanationMetadataInputMetadataVisualization() {
    this->initializeModel();
}

OAIGoogleCloudAiplatformV1beta1ExplanationMetadataInputMetadataVisualization::~OAIGoogleCloudAiplatformV1beta1ExplanationMetadataInputMetadataVisualization() {}

void OAIGoogleCloudAiplatformV1beta1ExplanationMetadataInputMetadataVisualization::initializeModel() {

    m_clip_percent_lowerbound_isSet = false;
    m_clip_percent_lowerbound_isValid = false;

    m_clip_percent_upperbound_isSet = false;
    m_clip_percent_upperbound_isValid = false;

    m_color_map_isSet = false;
    m_color_map_isValid = false;

    m_overlay_type_isSet = false;
    m_overlay_type_isValid = false;

    m_polarity_isSet = false;
    m_polarity_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIGoogleCloudAiplatformV1beta1ExplanationMetadataInputMetadataVisualization::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudAiplatformV1beta1ExplanationMetadataInputMetadataVisualization::fromJsonObject(QJsonObject json) {

    m_clip_percent_lowerbound_isValid = ::OpenAPI::fromJsonValue(m_clip_percent_lowerbound, json[QString("clipPercentLowerbound")]);
    m_clip_percent_lowerbound_isSet = !json[QString("clipPercentLowerbound")].isNull() && m_clip_percent_lowerbound_isValid;

    m_clip_percent_upperbound_isValid = ::OpenAPI::fromJsonValue(m_clip_percent_upperbound, json[QString("clipPercentUpperbound")]);
    m_clip_percent_upperbound_isSet = !json[QString("clipPercentUpperbound")].isNull() && m_clip_percent_upperbound_isValid;

    m_color_map_isValid = ::OpenAPI::fromJsonValue(m_color_map, json[QString("colorMap")]);
    m_color_map_isSet = !json[QString("colorMap")].isNull() && m_color_map_isValid;

    m_overlay_type_isValid = ::OpenAPI::fromJsonValue(m_overlay_type, json[QString("overlayType")]);
    m_overlay_type_isSet = !json[QString("overlayType")].isNull() && m_overlay_type_isValid;

    m_polarity_isValid = ::OpenAPI::fromJsonValue(m_polarity, json[QString("polarity")]);
    m_polarity_isSet = !json[QString("polarity")].isNull() && m_polarity_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIGoogleCloudAiplatformV1beta1ExplanationMetadataInputMetadataVisualization::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudAiplatformV1beta1ExplanationMetadataInputMetadataVisualization::asJsonObject() const {
    QJsonObject obj;
    if (m_clip_percent_lowerbound_isSet) {
        obj.insert(QString("clipPercentLowerbound"), ::OpenAPI::toJsonValue(m_clip_percent_lowerbound));
    }
    if (m_clip_percent_upperbound_isSet) {
        obj.insert(QString("clipPercentUpperbound"), ::OpenAPI::toJsonValue(m_clip_percent_upperbound));
    }
    if (m_color_map_isSet) {
        obj.insert(QString("colorMap"), ::OpenAPI::toJsonValue(m_color_map));
    }
    if (m_overlay_type_isSet) {
        obj.insert(QString("overlayType"), ::OpenAPI::toJsonValue(m_overlay_type));
    }
    if (m_polarity_isSet) {
        obj.insert(QString("polarity"), ::OpenAPI::toJsonValue(m_polarity));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

float OAIGoogleCloudAiplatformV1beta1ExplanationMetadataInputMetadataVisualization::getClipPercentLowerbound() const {
    return m_clip_percent_lowerbound;
}
void OAIGoogleCloudAiplatformV1beta1ExplanationMetadataInputMetadataVisualization::setClipPercentLowerbound(const float &clip_percent_lowerbound) {
    m_clip_percent_lowerbound = clip_percent_lowerbound;
    m_clip_percent_lowerbound_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1ExplanationMetadataInputMetadataVisualization::is_clip_percent_lowerbound_Set() const{
    return m_clip_percent_lowerbound_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1ExplanationMetadataInputMetadataVisualization::is_clip_percent_lowerbound_Valid() const{
    return m_clip_percent_lowerbound_isValid;
}

float OAIGoogleCloudAiplatformV1beta1ExplanationMetadataInputMetadataVisualization::getClipPercentUpperbound() const {
    return m_clip_percent_upperbound;
}
void OAIGoogleCloudAiplatformV1beta1ExplanationMetadataInputMetadataVisualization::setClipPercentUpperbound(const float &clip_percent_upperbound) {
    m_clip_percent_upperbound = clip_percent_upperbound;
    m_clip_percent_upperbound_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1ExplanationMetadataInputMetadataVisualization::is_clip_percent_upperbound_Set() const{
    return m_clip_percent_upperbound_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1ExplanationMetadataInputMetadataVisualization::is_clip_percent_upperbound_Valid() const{
    return m_clip_percent_upperbound_isValid;
}

QString OAIGoogleCloudAiplatformV1beta1ExplanationMetadataInputMetadataVisualization::getColorMap() const {
    return m_color_map;
}
void OAIGoogleCloudAiplatformV1beta1ExplanationMetadataInputMetadataVisualization::setColorMap(const QString &color_map) {
    m_color_map = color_map;
    m_color_map_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1ExplanationMetadataInputMetadataVisualization::is_color_map_Set() const{
    return m_color_map_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1ExplanationMetadataInputMetadataVisualization::is_color_map_Valid() const{
    return m_color_map_isValid;
}

QString OAIGoogleCloudAiplatformV1beta1ExplanationMetadataInputMetadataVisualization::getOverlayType() const {
    return m_overlay_type;
}
void OAIGoogleCloudAiplatformV1beta1ExplanationMetadataInputMetadataVisualization::setOverlayType(const QString &overlay_type) {
    m_overlay_type = overlay_type;
    m_overlay_type_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1ExplanationMetadataInputMetadataVisualization::is_overlay_type_Set() const{
    return m_overlay_type_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1ExplanationMetadataInputMetadataVisualization::is_overlay_type_Valid() const{
    return m_overlay_type_isValid;
}

QString OAIGoogleCloudAiplatformV1beta1ExplanationMetadataInputMetadataVisualization::getPolarity() const {
    return m_polarity;
}
void OAIGoogleCloudAiplatformV1beta1ExplanationMetadataInputMetadataVisualization::setPolarity(const QString &polarity) {
    m_polarity = polarity;
    m_polarity_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1ExplanationMetadataInputMetadataVisualization::is_polarity_Set() const{
    return m_polarity_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1ExplanationMetadataInputMetadataVisualization::is_polarity_Valid() const{
    return m_polarity_isValid;
}

QString OAIGoogleCloudAiplatformV1beta1ExplanationMetadataInputMetadataVisualization::getType() const {
    return m_type;
}
void OAIGoogleCloudAiplatformV1beta1ExplanationMetadataInputMetadataVisualization::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1ExplanationMetadataInputMetadataVisualization::is_type_Set() const{
    return m_type_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1ExplanationMetadataInputMetadataVisualization::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIGoogleCloudAiplatformV1beta1ExplanationMetadataInputMetadataVisualization::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_clip_percent_lowerbound_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_clip_percent_upperbound_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_color_map_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_overlay_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_polarity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudAiplatformV1beta1ExplanationMetadataInputMetadataVisualization::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
