/**
 * Vertex AI API
 * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudAiplatformV1beta1ReportExecutionEventRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudAiplatformV1beta1ReportExecutionEventRequest::OAIGoogleCloudAiplatformV1beta1ReportExecutionEventRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudAiplatformV1beta1ReportExecutionEventRequest::OAIGoogleCloudAiplatformV1beta1ReportExecutionEventRequest() {
    this->initializeModel();
}

OAIGoogleCloudAiplatformV1beta1ReportExecutionEventRequest::~OAIGoogleCloudAiplatformV1beta1ReportExecutionEventRequest() {}

void OAIGoogleCloudAiplatformV1beta1ReportExecutionEventRequest::initializeModel() {

    m_event_type_isSet = false;
    m_event_type_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_vm_token_isSet = false;
    m_vm_token_isValid = false;
}

void OAIGoogleCloudAiplatformV1beta1ReportExecutionEventRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudAiplatformV1beta1ReportExecutionEventRequest::fromJsonObject(QJsonObject json) {

    m_event_type_isValid = ::OpenAPI::fromJsonValue(m_event_type, json[QString("eventType")]);
    m_event_type_isSet = !json[QString("eventType")].isNull() && m_event_type_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_vm_token_isValid = ::OpenAPI::fromJsonValue(m_vm_token, json[QString("vmToken")]);
    m_vm_token_isSet = !json[QString("vmToken")].isNull() && m_vm_token_isValid;
}

QString OAIGoogleCloudAiplatformV1beta1ReportExecutionEventRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudAiplatformV1beta1ReportExecutionEventRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_event_type_isSet) {
        obj.insert(QString("eventType"), ::OpenAPI::toJsonValue(m_event_type));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_vm_token_isSet) {
        obj.insert(QString("vmToken"), ::OpenAPI::toJsonValue(m_vm_token));
    }
    return obj;
}

QString OAIGoogleCloudAiplatformV1beta1ReportExecutionEventRequest::getEventType() const {
    return m_event_type;
}
void OAIGoogleCloudAiplatformV1beta1ReportExecutionEventRequest::setEventType(const QString &event_type) {
    m_event_type = event_type;
    m_event_type_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1ReportExecutionEventRequest::is_event_type_Set() const{
    return m_event_type_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1ReportExecutionEventRequest::is_event_type_Valid() const{
    return m_event_type_isValid;
}

OAIGoogleRpcStatus OAIGoogleCloudAiplatformV1beta1ReportExecutionEventRequest::getStatus() const {
    return m_status;
}
void OAIGoogleCloudAiplatformV1beta1ReportExecutionEventRequest::setStatus(const OAIGoogleRpcStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1ReportExecutionEventRequest::is_status_Set() const{
    return m_status_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1ReportExecutionEventRequest::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIGoogleCloudAiplatformV1beta1ReportExecutionEventRequest::getVmToken() const {
    return m_vm_token;
}
void OAIGoogleCloudAiplatformV1beta1ReportExecutionEventRequest::setVmToken(const QString &vm_token) {
    m_vm_token = vm_token;
    m_vm_token_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1ReportExecutionEventRequest::is_vm_token_Set() const{
    return m_vm_token_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1ReportExecutionEventRequest::is_vm_token_Valid() const{
    return m_vm_token_isValid;
}

bool OAIGoogleCloudAiplatformV1beta1ReportExecutionEventRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_event_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vm_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudAiplatformV1beta1ReportExecutionEventRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
