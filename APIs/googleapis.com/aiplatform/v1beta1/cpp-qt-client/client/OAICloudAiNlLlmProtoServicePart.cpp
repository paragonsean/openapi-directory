/**
 * Vertex AI API
 * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICloudAiNlLlmProtoServicePart.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICloudAiNlLlmProtoServicePart::OAICloudAiNlLlmProtoServicePart(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICloudAiNlLlmProtoServicePart::OAICloudAiNlLlmProtoServicePart() {
    this->initializeModel();
}

OAICloudAiNlLlmProtoServicePart::~OAICloudAiNlLlmProtoServicePart() {}

void OAICloudAiNlLlmProtoServicePart::initializeModel() {

    m_file_data_isSet = false;
    m_file_data_isValid = false;

    m_function_call_isSet = false;
    m_function_call_isValid = false;

    m_function_response_isSet = false;
    m_function_response_isValid = false;

    m_inline_data_isSet = false;
    m_inline_data_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;

    m_video_metadata_isSet = false;
    m_video_metadata_isValid = false;
}

void OAICloudAiNlLlmProtoServicePart::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICloudAiNlLlmProtoServicePart::fromJsonObject(QJsonObject json) {

    m_file_data_isValid = ::OpenAPI::fromJsonValue(m_file_data, json[QString("fileData")]);
    m_file_data_isSet = !json[QString("fileData")].isNull() && m_file_data_isValid;

    m_function_call_isValid = ::OpenAPI::fromJsonValue(m_function_call, json[QString("functionCall")]);
    m_function_call_isSet = !json[QString("functionCall")].isNull() && m_function_call_isValid;

    m_function_response_isValid = ::OpenAPI::fromJsonValue(m_function_response, json[QString("functionResponse")]);
    m_function_response_isSet = !json[QString("functionResponse")].isNull() && m_function_response_isValid;

    m_inline_data_isValid = ::OpenAPI::fromJsonValue(m_inline_data, json[QString("inlineData")]);
    m_inline_data_isSet = !json[QString("inlineData")].isNull() && m_inline_data_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("text")]);
    m_text_isSet = !json[QString("text")].isNull() && m_text_isValid;

    m_video_metadata_isValid = ::OpenAPI::fromJsonValue(m_video_metadata, json[QString("videoMetadata")]);
    m_video_metadata_isSet = !json[QString("videoMetadata")].isNull() && m_video_metadata_isValid;
}

QString OAICloudAiNlLlmProtoServicePart::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICloudAiNlLlmProtoServicePart::asJsonObject() const {
    QJsonObject obj;
    if (m_file_data.isSet()) {
        obj.insert(QString("fileData"), ::OpenAPI::toJsonValue(m_file_data));
    }
    if (m_function_call.isSet()) {
        obj.insert(QString("functionCall"), ::OpenAPI::toJsonValue(m_function_call));
    }
    if (m_function_response.isSet()) {
        obj.insert(QString("functionResponse"), ::OpenAPI::toJsonValue(m_function_response));
    }
    if (m_inline_data.isSet()) {
        obj.insert(QString("inlineData"), ::OpenAPI::toJsonValue(m_inline_data));
    }
    if (m_text_isSet) {
        obj.insert(QString("text"), ::OpenAPI::toJsonValue(m_text));
    }
    if (m_video_metadata.isSet()) {
        obj.insert(QString("videoMetadata"), ::OpenAPI::toJsonValue(m_video_metadata));
    }
    return obj;
}

OAICloudAiNlLlmProtoServicePartFileData OAICloudAiNlLlmProtoServicePart::getFileData() const {
    return m_file_data;
}
void OAICloudAiNlLlmProtoServicePart::setFileData(const OAICloudAiNlLlmProtoServicePartFileData &file_data) {
    m_file_data = file_data;
    m_file_data_isSet = true;
}

bool OAICloudAiNlLlmProtoServicePart::is_file_data_Set() const{
    return m_file_data_isSet;
}

bool OAICloudAiNlLlmProtoServicePart::is_file_data_Valid() const{
    return m_file_data_isValid;
}

OAICloudAiNlLlmProtoServiceFunctionCall OAICloudAiNlLlmProtoServicePart::getFunctionCall() const {
    return m_function_call;
}
void OAICloudAiNlLlmProtoServicePart::setFunctionCall(const OAICloudAiNlLlmProtoServiceFunctionCall &function_call) {
    m_function_call = function_call;
    m_function_call_isSet = true;
}

bool OAICloudAiNlLlmProtoServicePart::is_function_call_Set() const{
    return m_function_call_isSet;
}

bool OAICloudAiNlLlmProtoServicePart::is_function_call_Valid() const{
    return m_function_call_isValid;
}

OAICloudAiNlLlmProtoServiceFunctionResponse OAICloudAiNlLlmProtoServicePart::getFunctionResponse() const {
    return m_function_response;
}
void OAICloudAiNlLlmProtoServicePart::setFunctionResponse(const OAICloudAiNlLlmProtoServiceFunctionResponse &function_response) {
    m_function_response = function_response;
    m_function_response_isSet = true;
}

bool OAICloudAiNlLlmProtoServicePart::is_function_response_Set() const{
    return m_function_response_isSet;
}

bool OAICloudAiNlLlmProtoServicePart::is_function_response_Valid() const{
    return m_function_response_isValid;
}

OAICloudAiNlLlmProtoServicePartBlob OAICloudAiNlLlmProtoServicePart::getInlineData() const {
    return m_inline_data;
}
void OAICloudAiNlLlmProtoServicePart::setInlineData(const OAICloudAiNlLlmProtoServicePartBlob &inline_data) {
    m_inline_data = inline_data;
    m_inline_data_isSet = true;
}

bool OAICloudAiNlLlmProtoServicePart::is_inline_data_Set() const{
    return m_inline_data_isSet;
}

bool OAICloudAiNlLlmProtoServicePart::is_inline_data_Valid() const{
    return m_inline_data_isValid;
}

QString OAICloudAiNlLlmProtoServicePart::getText() const {
    return m_text;
}
void OAICloudAiNlLlmProtoServicePart::setText(const QString &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAICloudAiNlLlmProtoServicePart::is_text_Set() const{
    return m_text_isSet;
}

bool OAICloudAiNlLlmProtoServicePart::is_text_Valid() const{
    return m_text_isValid;
}

OAICloudAiNlLlmProtoServicePartVideoMetadata OAICloudAiNlLlmProtoServicePart::getVideoMetadata() const {
    return m_video_metadata;
}
void OAICloudAiNlLlmProtoServicePart::setVideoMetadata(const OAICloudAiNlLlmProtoServicePartVideoMetadata &video_metadata) {
    m_video_metadata = video_metadata;
    m_video_metadata_isSet = true;
}

bool OAICloudAiNlLlmProtoServicePart::is_video_metadata_Set() const{
    return m_video_metadata_isSet;
}

bool OAICloudAiNlLlmProtoServicePart::is_video_metadata_Valid() const{
    return m_video_metadata_isValid;
}

bool OAICloudAiNlLlmProtoServicePart::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_file_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_function_call.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_function_response.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_inline_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_video_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICloudAiNlLlmProtoServicePart::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
