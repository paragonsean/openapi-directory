/**
 * Vertex AI API
 * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudAiplatformV1beta1NearestNeighborQueryStringFilter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudAiplatformV1beta1NearestNeighborQueryStringFilter::OAIGoogleCloudAiplatformV1beta1NearestNeighborQueryStringFilter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudAiplatformV1beta1NearestNeighborQueryStringFilter::OAIGoogleCloudAiplatformV1beta1NearestNeighborQueryStringFilter() {
    this->initializeModel();
}

OAIGoogleCloudAiplatformV1beta1NearestNeighborQueryStringFilter::~OAIGoogleCloudAiplatformV1beta1NearestNeighborQueryStringFilter() {}

void OAIGoogleCloudAiplatformV1beta1NearestNeighborQueryStringFilter::initializeModel() {

    m_allow_tokens_isSet = false;
    m_allow_tokens_isValid = false;

    m_deny_tokens_isSet = false;
    m_deny_tokens_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;
}

void OAIGoogleCloudAiplatformV1beta1NearestNeighborQueryStringFilter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudAiplatformV1beta1NearestNeighborQueryStringFilter::fromJsonObject(QJsonObject json) {

    m_allow_tokens_isValid = ::OpenAPI::fromJsonValue(m_allow_tokens, json[QString("allowTokens")]);
    m_allow_tokens_isSet = !json[QString("allowTokens")].isNull() && m_allow_tokens_isValid;

    m_deny_tokens_isValid = ::OpenAPI::fromJsonValue(m_deny_tokens, json[QString("denyTokens")]);
    m_deny_tokens_isSet = !json[QString("denyTokens")].isNull() && m_deny_tokens_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;
}

QString OAIGoogleCloudAiplatformV1beta1NearestNeighborQueryStringFilter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudAiplatformV1beta1NearestNeighborQueryStringFilter::asJsonObject() const {
    QJsonObject obj;
    if (m_allow_tokens.size() > 0) {
        obj.insert(QString("allowTokens"), ::OpenAPI::toJsonValue(m_allow_tokens));
    }
    if (m_deny_tokens.size() > 0) {
        obj.insert(QString("denyTokens"), ::OpenAPI::toJsonValue(m_deny_tokens));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    return obj;
}

QList<QString> OAIGoogleCloudAiplatformV1beta1NearestNeighborQueryStringFilter::getAllowTokens() const {
    return m_allow_tokens;
}
void OAIGoogleCloudAiplatformV1beta1NearestNeighborQueryStringFilter::setAllowTokens(const QList<QString> &allow_tokens) {
    m_allow_tokens = allow_tokens;
    m_allow_tokens_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1NearestNeighborQueryStringFilter::is_allow_tokens_Set() const{
    return m_allow_tokens_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1NearestNeighborQueryStringFilter::is_allow_tokens_Valid() const{
    return m_allow_tokens_isValid;
}

QList<QString> OAIGoogleCloudAiplatformV1beta1NearestNeighborQueryStringFilter::getDenyTokens() const {
    return m_deny_tokens;
}
void OAIGoogleCloudAiplatformV1beta1NearestNeighborQueryStringFilter::setDenyTokens(const QList<QString> &deny_tokens) {
    m_deny_tokens = deny_tokens;
    m_deny_tokens_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1NearestNeighborQueryStringFilter::is_deny_tokens_Set() const{
    return m_deny_tokens_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1NearestNeighborQueryStringFilter::is_deny_tokens_Valid() const{
    return m_deny_tokens_isValid;
}

QString OAIGoogleCloudAiplatformV1beta1NearestNeighborQueryStringFilter::getName() const {
    return m_name;
}
void OAIGoogleCloudAiplatformV1beta1NearestNeighborQueryStringFilter::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1NearestNeighborQueryStringFilter::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1NearestNeighborQueryStringFilter::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIGoogleCloudAiplatformV1beta1NearestNeighborQueryStringFilter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allow_tokens.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_deny_tokens.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudAiplatformV1beta1NearestNeighborQueryStringFilter::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
