/**
 * Vertex AI API
 * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudAiplatformV1beta1PipelineJob.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudAiplatformV1beta1PipelineJob::OAIGoogleCloudAiplatformV1beta1PipelineJob(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudAiplatformV1beta1PipelineJob::OAIGoogleCloudAiplatformV1beta1PipelineJob() {
    this->initializeModel();
}

OAIGoogleCloudAiplatformV1beta1PipelineJob::~OAIGoogleCloudAiplatformV1beta1PipelineJob() {}

void OAIGoogleCloudAiplatformV1beta1PipelineJob::initializeModel() {

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_encryption_spec_isSet = false;
    m_encryption_spec_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_error_isSet = false;
    m_error_isValid = false;

    m_job_detail_isSet = false;
    m_job_detail_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_network_isSet = false;
    m_network_isValid = false;

    m_pipeline_spec_isSet = false;
    m_pipeline_spec_isValid = false;

    m_preflight_validations_isSet = false;
    m_preflight_validations_isValid = false;

    m_reserved_ip_ranges_isSet = false;
    m_reserved_ip_ranges_isValid = false;

    m_runtime_config_isSet = false;
    m_runtime_config_isValid = false;

    m_schedule_name_isSet = false;
    m_schedule_name_isValid = false;

    m_service_account_isSet = false;
    m_service_account_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_template_metadata_isSet = false;
    m_template_metadata_isValid = false;

    m_template_uri_isSet = false;
    m_template_uri_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;
}

void OAIGoogleCloudAiplatformV1beta1PipelineJob::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudAiplatformV1beta1PipelineJob::fromJsonObject(QJsonObject json) {

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_encryption_spec_isValid = ::OpenAPI::fromJsonValue(m_encryption_spec, json[QString("encryptionSpec")]);
    m_encryption_spec_isSet = !json[QString("encryptionSpec")].isNull() && m_encryption_spec_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("endTime")]);
    m_end_time_isSet = !json[QString("endTime")].isNull() && m_end_time_isValid;

    m_error_isValid = ::OpenAPI::fromJsonValue(m_error, json[QString("error")]);
    m_error_isSet = !json[QString("error")].isNull() && m_error_isValid;

    m_job_detail_isValid = ::OpenAPI::fromJsonValue(m_job_detail, json[QString("jobDetail")]);
    m_job_detail_isSet = !json[QString("jobDetail")].isNull() && m_job_detail_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_network_isValid = ::OpenAPI::fromJsonValue(m_network, json[QString("network")]);
    m_network_isSet = !json[QString("network")].isNull() && m_network_isValid;

    m_pipeline_spec_isValid = ::OpenAPI::fromJsonValue(m_pipeline_spec, json[QString("pipelineSpec")]);
    m_pipeline_spec_isSet = !json[QString("pipelineSpec")].isNull() && m_pipeline_spec_isValid;

    m_preflight_validations_isValid = ::OpenAPI::fromJsonValue(m_preflight_validations, json[QString("preflightValidations")]);
    m_preflight_validations_isSet = !json[QString("preflightValidations")].isNull() && m_preflight_validations_isValid;

    m_reserved_ip_ranges_isValid = ::OpenAPI::fromJsonValue(m_reserved_ip_ranges, json[QString("reservedIpRanges")]);
    m_reserved_ip_ranges_isSet = !json[QString("reservedIpRanges")].isNull() && m_reserved_ip_ranges_isValid;

    m_runtime_config_isValid = ::OpenAPI::fromJsonValue(m_runtime_config, json[QString("runtimeConfig")]);
    m_runtime_config_isSet = !json[QString("runtimeConfig")].isNull() && m_runtime_config_isValid;

    m_schedule_name_isValid = ::OpenAPI::fromJsonValue(m_schedule_name, json[QString("scheduleName")]);
    m_schedule_name_isSet = !json[QString("scheduleName")].isNull() && m_schedule_name_isValid;

    m_service_account_isValid = ::OpenAPI::fromJsonValue(m_service_account, json[QString("serviceAccount")]);
    m_service_account_isSet = !json[QString("serviceAccount")].isNull() && m_service_account_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_template_metadata_isValid = ::OpenAPI::fromJsonValue(m_template_metadata, json[QString("templateMetadata")]);
    m_template_metadata_isSet = !json[QString("templateMetadata")].isNull() && m_template_metadata_isValid;

    m_template_uri_isValid = ::OpenAPI::fromJsonValue(m_template_uri, json[QString("templateUri")]);
    m_template_uri_isSet = !json[QString("templateUri")].isNull() && m_template_uri_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;
}

QString OAIGoogleCloudAiplatformV1beta1PipelineJob::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudAiplatformV1beta1PipelineJob::asJsonObject() const {
    QJsonObject obj;
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_encryption_spec.isSet()) {
        obj.insert(QString("encryptionSpec"), ::OpenAPI::toJsonValue(m_encryption_spec));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("endTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_error.isSet()) {
        obj.insert(QString("error"), ::OpenAPI::toJsonValue(m_error));
    }
    if (m_job_detail.isSet()) {
        obj.insert(QString("jobDetail"), ::OpenAPI::toJsonValue(m_job_detail));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_network_isSet) {
        obj.insert(QString("network"), ::OpenAPI::toJsonValue(m_network));
    }
    if (m_pipeline_spec.size() > 0) {
        obj.insert(QString("pipelineSpec"), ::OpenAPI::toJsonValue(m_pipeline_spec));
    }
    if (m_preflight_validations_isSet) {
        obj.insert(QString("preflightValidations"), ::OpenAPI::toJsonValue(m_preflight_validations));
    }
    if (m_reserved_ip_ranges.size() > 0) {
        obj.insert(QString("reservedIpRanges"), ::OpenAPI::toJsonValue(m_reserved_ip_ranges));
    }
    if (m_runtime_config.isSet()) {
        obj.insert(QString("runtimeConfig"), ::OpenAPI::toJsonValue(m_runtime_config));
    }
    if (m_schedule_name_isSet) {
        obj.insert(QString("scheduleName"), ::OpenAPI::toJsonValue(m_schedule_name));
    }
    if (m_service_account_isSet) {
        obj.insert(QString("serviceAccount"), ::OpenAPI::toJsonValue(m_service_account));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_template_metadata.isSet()) {
        obj.insert(QString("templateMetadata"), ::OpenAPI::toJsonValue(m_template_metadata));
    }
    if (m_template_uri_isSet) {
        obj.insert(QString("templateUri"), ::OpenAPI::toJsonValue(m_template_uri));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    return obj;
}

QString OAIGoogleCloudAiplatformV1beta1PipelineJob::getCreateTime() const {
    return m_create_time;
}
void OAIGoogleCloudAiplatformV1beta1PipelineJob::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1PipelineJob::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1PipelineJob::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAIGoogleCloudAiplatformV1beta1PipelineJob::getDisplayName() const {
    return m_display_name;
}
void OAIGoogleCloudAiplatformV1beta1PipelineJob::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1PipelineJob::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1PipelineJob::is_display_name_Valid() const{
    return m_display_name_isValid;
}

OAIGoogleCloudAiplatformV1beta1EncryptionSpec OAIGoogleCloudAiplatformV1beta1PipelineJob::getEncryptionSpec() const {
    return m_encryption_spec;
}
void OAIGoogleCloudAiplatformV1beta1PipelineJob::setEncryptionSpec(const OAIGoogleCloudAiplatformV1beta1EncryptionSpec &encryption_spec) {
    m_encryption_spec = encryption_spec;
    m_encryption_spec_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1PipelineJob::is_encryption_spec_Set() const{
    return m_encryption_spec_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1PipelineJob::is_encryption_spec_Valid() const{
    return m_encryption_spec_isValid;
}

QString OAIGoogleCloudAiplatformV1beta1PipelineJob::getEndTime() const {
    return m_end_time;
}
void OAIGoogleCloudAiplatformV1beta1PipelineJob::setEndTime(const QString &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1PipelineJob::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1PipelineJob::is_end_time_Valid() const{
    return m_end_time_isValid;
}

OAIGoogleRpcStatus OAIGoogleCloudAiplatformV1beta1PipelineJob::getError() const {
    return m_error;
}
void OAIGoogleCloudAiplatformV1beta1PipelineJob::setError(const OAIGoogleRpcStatus &error) {
    m_error = error;
    m_error_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1PipelineJob::is_error_Set() const{
    return m_error_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1PipelineJob::is_error_Valid() const{
    return m_error_isValid;
}

OAIGoogleCloudAiplatformV1beta1PipelineJobDetail OAIGoogleCloudAiplatformV1beta1PipelineJob::getJobDetail() const {
    return m_job_detail;
}
void OAIGoogleCloudAiplatformV1beta1PipelineJob::setJobDetail(const OAIGoogleCloudAiplatformV1beta1PipelineJobDetail &job_detail) {
    m_job_detail = job_detail;
    m_job_detail_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1PipelineJob::is_job_detail_Set() const{
    return m_job_detail_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1PipelineJob::is_job_detail_Valid() const{
    return m_job_detail_isValid;
}

QMap<QString, QString> OAIGoogleCloudAiplatformV1beta1PipelineJob::getLabels() const {
    return m_labels;
}
void OAIGoogleCloudAiplatformV1beta1PipelineJob::setLabels(const QMap<QString, QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1PipelineJob::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1PipelineJob::is_labels_Valid() const{
    return m_labels_isValid;
}

QString OAIGoogleCloudAiplatformV1beta1PipelineJob::getName() const {
    return m_name;
}
void OAIGoogleCloudAiplatformV1beta1PipelineJob::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1PipelineJob::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1PipelineJob::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIGoogleCloudAiplatformV1beta1PipelineJob::getNetwork() const {
    return m_network;
}
void OAIGoogleCloudAiplatformV1beta1PipelineJob::setNetwork(const QString &network) {
    m_network = network;
    m_network_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1PipelineJob::is_network_Set() const{
    return m_network_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1PipelineJob::is_network_Valid() const{
    return m_network_isValid;
}

QMap<QString, QJsonValue> OAIGoogleCloudAiplatformV1beta1PipelineJob::getPipelineSpec() const {
    return m_pipeline_spec;
}
void OAIGoogleCloudAiplatformV1beta1PipelineJob::setPipelineSpec(const QMap<QString, QJsonValue> &pipeline_spec) {
    m_pipeline_spec = pipeline_spec;
    m_pipeline_spec_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1PipelineJob::is_pipeline_spec_Set() const{
    return m_pipeline_spec_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1PipelineJob::is_pipeline_spec_Valid() const{
    return m_pipeline_spec_isValid;
}

bool OAIGoogleCloudAiplatformV1beta1PipelineJob::isPreflightValidations() const {
    return m_preflight_validations;
}
void OAIGoogleCloudAiplatformV1beta1PipelineJob::setPreflightValidations(const bool &preflight_validations) {
    m_preflight_validations = preflight_validations;
    m_preflight_validations_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1PipelineJob::is_preflight_validations_Set() const{
    return m_preflight_validations_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1PipelineJob::is_preflight_validations_Valid() const{
    return m_preflight_validations_isValid;
}

QList<QString> OAIGoogleCloudAiplatformV1beta1PipelineJob::getReservedIpRanges() const {
    return m_reserved_ip_ranges;
}
void OAIGoogleCloudAiplatformV1beta1PipelineJob::setReservedIpRanges(const QList<QString> &reserved_ip_ranges) {
    m_reserved_ip_ranges = reserved_ip_ranges;
    m_reserved_ip_ranges_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1PipelineJob::is_reserved_ip_ranges_Set() const{
    return m_reserved_ip_ranges_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1PipelineJob::is_reserved_ip_ranges_Valid() const{
    return m_reserved_ip_ranges_isValid;
}

OAIGoogleCloudAiplatformV1beta1PipelineJobRuntimeConfig OAIGoogleCloudAiplatformV1beta1PipelineJob::getRuntimeConfig() const {
    return m_runtime_config;
}
void OAIGoogleCloudAiplatformV1beta1PipelineJob::setRuntimeConfig(const OAIGoogleCloudAiplatformV1beta1PipelineJobRuntimeConfig &runtime_config) {
    m_runtime_config = runtime_config;
    m_runtime_config_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1PipelineJob::is_runtime_config_Set() const{
    return m_runtime_config_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1PipelineJob::is_runtime_config_Valid() const{
    return m_runtime_config_isValid;
}

QString OAIGoogleCloudAiplatformV1beta1PipelineJob::getScheduleName() const {
    return m_schedule_name;
}
void OAIGoogleCloudAiplatformV1beta1PipelineJob::setScheduleName(const QString &schedule_name) {
    m_schedule_name = schedule_name;
    m_schedule_name_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1PipelineJob::is_schedule_name_Set() const{
    return m_schedule_name_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1PipelineJob::is_schedule_name_Valid() const{
    return m_schedule_name_isValid;
}

QString OAIGoogleCloudAiplatformV1beta1PipelineJob::getServiceAccount() const {
    return m_service_account;
}
void OAIGoogleCloudAiplatformV1beta1PipelineJob::setServiceAccount(const QString &service_account) {
    m_service_account = service_account;
    m_service_account_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1PipelineJob::is_service_account_Set() const{
    return m_service_account_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1PipelineJob::is_service_account_Valid() const{
    return m_service_account_isValid;
}

QString OAIGoogleCloudAiplatformV1beta1PipelineJob::getStartTime() const {
    return m_start_time;
}
void OAIGoogleCloudAiplatformV1beta1PipelineJob::setStartTime(const QString &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1PipelineJob::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1PipelineJob::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QString OAIGoogleCloudAiplatformV1beta1PipelineJob::getState() const {
    return m_state;
}
void OAIGoogleCloudAiplatformV1beta1PipelineJob::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1PipelineJob::is_state_Set() const{
    return m_state_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1PipelineJob::is_state_Valid() const{
    return m_state_isValid;
}

OAIGoogleCloudAiplatformV1beta1PipelineTemplateMetadata OAIGoogleCloudAiplatformV1beta1PipelineJob::getTemplateMetadata() const {
    return m_template_metadata;
}
void OAIGoogleCloudAiplatformV1beta1PipelineJob::setTemplateMetadata(const OAIGoogleCloudAiplatformV1beta1PipelineTemplateMetadata &template_metadata) {
    m_template_metadata = template_metadata;
    m_template_metadata_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1PipelineJob::is_template_metadata_Set() const{
    return m_template_metadata_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1PipelineJob::is_template_metadata_Valid() const{
    return m_template_metadata_isValid;
}

QString OAIGoogleCloudAiplatformV1beta1PipelineJob::getTemplateUri() const {
    return m_template_uri;
}
void OAIGoogleCloudAiplatformV1beta1PipelineJob::setTemplateUri(const QString &template_uri) {
    m_template_uri = template_uri;
    m_template_uri_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1PipelineJob::is_template_uri_Set() const{
    return m_template_uri_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1PipelineJob::is_template_uri_Valid() const{
    return m_template_uri_isValid;
}

QString OAIGoogleCloudAiplatformV1beta1PipelineJob::getUpdateTime() const {
    return m_update_time;
}
void OAIGoogleCloudAiplatformV1beta1PipelineJob::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1PipelineJob::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1PipelineJob::is_update_time_Valid() const{
    return m_update_time_isValid;
}

bool OAIGoogleCloudAiplatformV1beta1PipelineJob::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_encryption_spec.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_detail.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pipeline_spec.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_preflight_validations_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reserved_ip_ranges.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_runtime_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_schedule_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_account_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_template_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_template_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudAiplatformV1beta1PipelineJob::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
