/**
 * Vertex AI API
 * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudAiplatformV1beta1ExamplesRestrictionsNamespace.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudAiplatformV1beta1ExamplesRestrictionsNamespace::OAIGoogleCloudAiplatformV1beta1ExamplesRestrictionsNamespace(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudAiplatformV1beta1ExamplesRestrictionsNamespace::OAIGoogleCloudAiplatformV1beta1ExamplesRestrictionsNamespace() {
    this->initializeModel();
}

OAIGoogleCloudAiplatformV1beta1ExamplesRestrictionsNamespace::~OAIGoogleCloudAiplatformV1beta1ExamplesRestrictionsNamespace() {}

void OAIGoogleCloudAiplatformV1beta1ExamplesRestrictionsNamespace::initializeModel() {

    m_allow_isSet = false;
    m_allow_isValid = false;

    m_deny_isSet = false;
    m_deny_isValid = false;

    m_namespace_name_isSet = false;
    m_namespace_name_isValid = false;
}

void OAIGoogleCloudAiplatformV1beta1ExamplesRestrictionsNamespace::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudAiplatformV1beta1ExamplesRestrictionsNamespace::fromJsonObject(QJsonObject json) {

    m_allow_isValid = ::OpenAPI::fromJsonValue(m_allow, json[QString("allow")]);
    m_allow_isSet = !json[QString("allow")].isNull() && m_allow_isValid;

    m_deny_isValid = ::OpenAPI::fromJsonValue(m_deny, json[QString("deny")]);
    m_deny_isSet = !json[QString("deny")].isNull() && m_deny_isValid;

    m_namespace_name_isValid = ::OpenAPI::fromJsonValue(m_namespace_name, json[QString("namespaceName")]);
    m_namespace_name_isSet = !json[QString("namespaceName")].isNull() && m_namespace_name_isValid;
}

QString OAIGoogleCloudAiplatformV1beta1ExamplesRestrictionsNamespace::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudAiplatformV1beta1ExamplesRestrictionsNamespace::asJsonObject() const {
    QJsonObject obj;
    if (m_allow.size() > 0) {
        obj.insert(QString("allow"), ::OpenAPI::toJsonValue(m_allow));
    }
    if (m_deny.size() > 0) {
        obj.insert(QString("deny"), ::OpenAPI::toJsonValue(m_deny));
    }
    if (m_namespace_name_isSet) {
        obj.insert(QString("namespaceName"), ::OpenAPI::toJsonValue(m_namespace_name));
    }
    return obj;
}

QList<QString> OAIGoogleCloudAiplatformV1beta1ExamplesRestrictionsNamespace::getAllow() const {
    return m_allow;
}
void OAIGoogleCloudAiplatformV1beta1ExamplesRestrictionsNamespace::setAllow(const QList<QString> &allow) {
    m_allow = allow;
    m_allow_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1ExamplesRestrictionsNamespace::is_allow_Set() const{
    return m_allow_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1ExamplesRestrictionsNamespace::is_allow_Valid() const{
    return m_allow_isValid;
}

QList<QString> OAIGoogleCloudAiplatformV1beta1ExamplesRestrictionsNamespace::getDeny() const {
    return m_deny;
}
void OAIGoogleCloudAiplatformV1beta1ExamplesRestrictionsNamespace::setDeny(const QList<QString> &deny) {
    m_deny = deny;
    m_deny_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1ExamplesRestrictionsNamespace::is_deny_Set() const{
    return m_deny_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1ExamplesRestrictionsNamespace::is_deny_Valid() const{
    return m_deny_isValid;
}

QString OAIGoogleCloudAiplatformV1beta1ExamplesRestrictionsNamespace::getNamespaceName() const {
    return m_namespace_name;
}
void OAIGoogleCloudAiplatformV1beta1ExamplesRestrictionsNamespace::setNamespaceName(const QString &namespace_name) {
    m_namespace_name = namespace_name;
    m_namespace_name_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1ExamplesRestrictionsNamespace::is_namespace_name_Set() const{
    return m_namespace_name_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1ExamplesRestrictionsNamespace::is_namespace_name_Valid() const{
    return m_namespace_name_isValid;
}

bool OAIGoogleCloudAiplatformV1beta1ExamplesRestrictionsNamespace::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allow.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_deny.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_namespace_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudAiplatformV1beta1ExamplesRestrictionsNamespace::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
