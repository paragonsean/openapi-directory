/**
 * Vertex AI API
 * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudAiplatformV1beta1InputDataConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudAiplatformV1beta1InputDataConfig::OAIGoogleCloudAiplatformV1beta1InputDataConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudAiplatformV1beta1InputDataConfig::OAIGoogleCloudAiplatformV1beta1InputDataConfig() {
    this->initializeModel();
}

OAIGoogleCloudAiplatformV1beta1InputDataConfig::~OAIGoogleCloudAiplatformV1beta1InputDataConfig() {}

void OAIGoogleCloudAiplatformV1beta1InputDataConfig::initializeModel() {

    m_annotation_schema_uri_isSet = false;
    m_annotation_schema_uri_isValid = false;

    m_annotations_filter_isSet = false;
    m_annotations_filter_isValid = false;

    m_bigquery_destination_isSet = false;
    m_bigquery_destination_isValid = false;

    m_dataset_id_isSet = false;
    m_dataset_id_isValid = false;

    m_filter_split_isSet = false;
    m_filter_split_isValid = false;

    m_fraction_split_isSet = false;
    m_fraction_split_isValid = false;

    m_gcs_destination_isSet = false;
    m_gcs_destination_isValid = false;

    m_persist_ml_use_assignment_isSet = false;
    m_persist_ml_use_assignment_isValid = false;

    m_predefined_split_isSet = false;
    m_predefined_split_isValid = false;

    m_saved_query_id_isSet = false;
    m_saved_query_id_isValid = false;

    m_stratified_split_isSet = false;
    m_stratified_split_isValid = false;

    m_timestamp_split_isSet = false;
    m_timestamp_split_isValid = false;
}

void OAIGoogleCloudAiplatformV1beta1InputDataConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudAiplatformV1beta1InputDataConfig::fromJsonObject(QJsonObject json) {

    m_annotation_schema_uri_isValid = ::OpenAPI::fromJsonValue(m_annotation_schema_uri, json[QString("annotationSchemaUri")]);
    m_annotation_schema_uri_isSet = !json[QString("annotationSchemaUri")].isNull() && m_annotation_schema_uri_isValid;

    m_annotations_filter_isValid = ::OpenAPI::fromJsonValue(m_annotations_filter, json[QString("annotationsFilter")]);
    m_annotations_filter_isSet = !json[QString("annotationsFilter")].isNull() && m_annotations_filter_isValid;

    m_bigquery_destination_isValid = ::OpenAPI::fromJsonValue(m_bigquery_destination, json[QString("bigqueryDestination")]);
    m_bigquery_destination_isSet = !json[QString("bigqueryDestination")].isNull() && m_bigquery_destination_isValid;

    m_dataset_id_isValid = ::OpenAPI::fromJsonValue(m_dataset_id, json[QString("datasetId")]);
    m_dataset_id_isSet = !json[QString("datasetId")].isNull() && m_dataset_id_isValid;

    m_filter_split_isValid = ::OpenAPI::fromJsonValue(m_filter_split, json[QString("filterSplit")]);
    m_filter_split_isSet = !json[QString("filterSplit")].isNull() && m_filter_split_isValid;

    m_fraction_split_isValid = ::OpenAPI::fromJsonValue(m_fraction_split, json[QString("fractionSplit")]);
    m_fraction_split_isSet = !json[QString("fractionSplit")].isNull() && m_fraction_split_isValid;

    m_gcs_destination_isValid = ::OpenAPI::fromJsonValue(m_gcs_destination, json[QString("gcsDestination")]);
    m_gcs_destination_isSet = !json[QString("gcsDestination")].isNull() && m_gcs_destination_isValid;

    m_persist_ml_use_assignment_isValid = ::OpenAPI::fromJsonValue(m_persist_ml_use_assignment, json[QString("persistMlUseAssignment")]);
    m_persist_ml_use_assignment_isSet = !json[QString("persistMlUseAssignment")].isNull() && m_persist_ml_use_assignment_isValid;

    m_predefined_split_isValid = ::OpenAPI::fromJsonValue(m_predefined_split, json[QString("predefinedSplit")]);
    m_predefined_split_isSet = !json[QString("predefinedSplit")].isNull() && m_predefined_split_isValid;

    m_saved_query_id_isValid = ::OpenAPI::fromJsonValue(m_saved_query_id, json[QString("savedQueryId")]);
    m_saved_query_id_isSet = !json[QString("savedQueryId")].isNull() && m_saved_query_id_isValid;

    m_stratified_split_isValid = ::OpenAPI::fromJsonValue(m_stratified_split, json[QString("stratifiedSplit")]);
    m_stratified_split_isSet = !json[QString("stratifiedSplit")].isNull() && m_stratified_split_isValid;

    m_timestamp_split_isValid = ::OpenAPI::fromJsonValue(m_timestamp_split, json[QString("timestampSplit")]);
    m_timestamp_split_isSet = !json[QString("timestampSplit")].isNull() && m_timestamp_split_isValid;
}

QString OAIGoogleCloudAiplatformV1beta1InputDataConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudAiplatformV1beta1InputDataConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_annotation_schema_uri_isSet) {
        obj.insert(QString("annotationSchemaUri"), ::OpenAPI::toJsonValue(m_annotation_schema_uri));
    }
    if (m_annotations_filter_isSet) {
        obj.insert(QString("annotationsFilter"), ::OpenAPI::toJsonValue(m_annotations_filter));
    }
    if (m_bigquery_destination.isSet()) {
        obj.insert(QString("bigqueryDestination"), ::OpenAPI::toJsonValue(m_bigquery_destination));
    }
    if (m_dataset_id_isSet) {
        obj.insert(QString("datasetId"), ::OpenAPI::toJsonValue(m_dataset_id));
    }
    if (m_filter_split.isSet()) {
        obj.insert(QString("filterSplit"), ::OpenAPI::toJsonValue(m_filter_split));
    }
    if (m_fraction_split.isSet()) {
        obj.insert(QString("fractionSplit"), ::OpenAPI::toJsonValue(m_fraction_split));
    }
    if (m_gcs_destination.isSet()) {
        obj.insert(QString("gcsDestination"), ::OpenAPI::toJsonValue(m_gcs_destination));
    }
    if (m_persist_ml_use_assignment_isSet) {
        obj.insert(QString("persistMlUseAssignment"), ::OpenAPI::toJsonValue(m_persist_ml_use_assignment));
    }
    if (m_predefined_split.isSet()) {
        obj.insert(QString("predefinedSplit"), ::OpenAPI::toJsonValue(m_predefined_split));
    }
    if (m_saved_query_id_isSet) {
        obj.insert(QString("savedQueryId"), ::OpenAPI::toJsonValue(m_saved_query_id));
    }
    if (m_stratified_split.isSet()) {
        obj.insert(QString("stratifiedSplit"), ::OpenAPI::toJsonValue(m_stratified_split));
    }
    if (m_timestamp_split.isSet()) {
        obj.insert(QString("timestampSplit"), ::OpenAPI::toJsonValue(m_timestamp_split));
    }
    return obj;
}

QString OAIGoogleCloudAiplatformV1beta1InputDataConfig::getAnnotationSchemaUri() const {
    return m_annotation_schema_uri;
}
void OAIGoogleCloudAiplatformV1beta1InputDataConfig::setAnnotationSchemaUri(const QString &annotation_schema_uri) {
    m_annotation_schema_uri = annotation_schema_uri;
    m_annotation_schema_uri_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1InputDataConfig::is_annotation_schema_uri_Set() const{
    return m_annotation_schema_uri_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1InputDataConfig::is_annotation_schema_uri_Valid() const{
    return m_annotation_schema_uri_isValid;
}

QString OAIGoogleCloudAiplatformV1beta1InputDataConfig::getAnnotationsFilter() const {
    return m_annotations_filter;
}
void OAIGoogleCloudAiplatformV1beta1InputDataConfig::setAnnotationsFilter(const QString &annotations_filter) {
    m_annotations_filter = annotations_filter;
    m_annotations_filter_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1InputDataConfig::is_annotations_filter_Set() const{
    return m_annotations_filter_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1InputDataConfig::is_annotations_filter_Valid() const{
    return m_annotations_filter_isValid;
}

OAIGoogleCloudAiplatformV1beta1BigQueryDestination OAIGoogleCloudAiplatformV1beta1InputDataConfig::getBigqueryDestination() const {
    return m_bigquery_destination;
}
void OAIGoogleCloudAiplatformV1beta1InputDataConfig::setBigqueryDestination(const OAIGoogleCloudAiplatformV1beta1BigQueryDestination &bigquery_destination) {
    m_bigquery_destination = bigquery_destination;
    m_bigquery_destination_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1InputDataConfig::is_bigquery_destination_Set() const{
    return m_bigquery_destination_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1InputDataConfig::is_bigquery_destination_Valid() const{
    return m_bigquery_destination_isValid;
}

QString OAIGoogleCloudAiplatformV1beta1InputDataConfig::getDatasetId() const {
    return m_dataset_id;
}
void OAIGoogleCloudAiplatformV1beta1InputDataConfig::setDatasetId(const QString &dataset_id) {
    m_dataset_id = dataset_id;
    m_dataset_id_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1InputDataConfig::is_dataset_id_Set() const{
    return m_dataset_id_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1InputDataConfig::is_dataset_id_Valid() const{
    return m_dataset_id_isValid;
}

OAIGoogleCloudAiplatformV1beta1FilterSplit OAIGoogleCloudAiplatformV1beta1InputDataConfig::getFilterSplit() const {
    return m_filter_split;
}
void OAIGoogleCloudAiplatformV1beta1InputDataConfig::setFilterSplit(const OAIGoogleCloudAiplatformV1beta1FilterSplit &filter_split) {
    m_filter_split = filter_split;
    m_filter_split_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1InputDataConfig::is_filter_split_Set() const{
    return m_filter_split_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1InputDataConfig::is_filter_split_Valid() const{
    return m_filter_split_isValid;
}

OAIGoogleCloudAiplatformV1beta1FractionSplit OAIGoogleCloudAiplatformV1beta1InputDataConfig::getFractionSplit() const {
    return m_fraction_split;
}
void OAIGoogleCloudAiplatformV1beta1InputDataConfig::setFractionSplit(const OAIGoogleCloudAiplatformV1beta1FractionSplit &fraction_split) {
    m_fraction_split = fraction_split;
    m_fraction_split_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1InputDataConfig::is_fraction_split_Set() const{
    return m_fraction_split_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1InputDataConfig::is_fraction_split_Valid() const{
    return m_fraction_split_isValid;
}

OAIGoogleCloudAiplatformV1beta1GcsDestination OAIGoogleCloudAiplatformV1beta1InputDataConfig::getGcsDestination() const {
    return m_gcs_destination;
}
void OAIGoogleCloudAiplatformV1beta1InputDataConfig::setGcsDestination(const OAIGoogleCloudAiplatformV1beta1GcsDestination &gcs_destination) {
    m_gcs_destination = gcs_destination;
    m_gcs_destination_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1InputDataConfig::is_gcs_destination_Set() const{
    return m_gcs_destination_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1InputDataConfig::is_gcs_destination_Valid() const{
    return m_gcs_destination_isValid;
}

bool OAIGoogleCloudAiplatformV1beta1InputDataConfig::isPersistMlUseAssignment() const {
    return m_persist_ml_use_assignment;
}
void OAIGoogleCloudAiplatformV1beta1InputDataConfig::setPersistMlUseAssignment(const bool &persist_ml_use_assignment) {
    m_persist_ml_use_assignment = persist_ml_use_assignment;
    m_persist_ml_use_assignment_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1InputDataConfig::is_persist_ml_use_assignment_Set() const{
    return m_persist_ml_use_assignment_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1InputDataConfig::is_persist_ml_use_assignment_Valid() const{
    return m_persist_ml_use_assignment_isValid;
}

OAIGoogleCloudAiplatformV1beta1PredefinedSplit OAIGoogleCloudAiplatformV1beta1InputDataConfig::getPredefinedSplit() const {
    return m_predefined_split;
}
void OAIGoogleCloudAiplatformV1beta1InputDataConfig::setPredefinedSplit(const OAIGoogleCloudAiplatformV1beta1PredefinedSplit &predefined_split) {
    m_predefined_split = predefined_split;
    m_predefined_split_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1InputDataConfig::is_predefined_split_Set() const{
    return m_predefined_split_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1InputDataConfig::is_predefined_split_Valid() const{
    return m_predefined_split_isValid;
}

QString OAIGoogleCloudAiplatformV1beta1InputDataConfig::getSavedQueryId() const {
    return m_saved_query_id;
}
void OAIGoogleCloudAiplatformV1beta1InputDataConfig::setSavedQueryId(const QString &saved_query_id) {
    m_saved_query_id = saved_query_id;
    m_saved_query_id_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1InputDataConfig::is_saved_query_id_Set() const{
    return m_saved_query_id_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1InputDataConfig::is_saved_query_id_Valid() const{
    return m_saved_query_id_isValid;
}

OAIGoogleCloudAiplatformV1beta1StratifiedSplit OAIGoogleCloudAiplatformV1beta1InputDataConfig::getStratifiedSplit() const {
    return m_stratified_split;
}
void OAIGoogleCloudAiplatformV1beta1InputDataConfig::setStratifiedSplit(const OAIGoogleCloudAiplatformV1beta1StratifiedSplit &stratified_split) {
    m_stratified_split = stratified_split;
    m_stratified_split_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1InputDataConfig::is_stratified_split_Set() const{
    return m_stratified_split_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1InputDataConfig::is_stratified_split_Valid() const{
    return m_stratified_split_isValid;
}

OAIGoogleCloudAiplatformV1beta1TimestampSplit OAIGoogleCloudAiplatformV1beta1InputDataConfig::getTimestampSplit() const {
    return m_timestamp_split;
}
void OAIGoogleCloudAiplatformV1beta1InputDataConfig::setTimestampSplit(const OAIGoogleCloudAiplatformV1beta1TimestampSplit &timestamp_split) {
    m_timestamp_split = timestamp_split;
    m_timestamp_split_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1InputDataConfig::is_timestamp_split_Set() const{
    return m_timestamp_split_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1InputDataConfig::is_timestamp_split_Valid() const{
    return m_timestamp_split_isValid;
}

bool OAIGoogleCloudAiplatformV1beta1InputDataConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_annotation_schema_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_annotations_filter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bigquery_destination.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dataset_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filter_split.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_fraction_split.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_gcs_destination.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_persist_ml_use_assignment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_predefined_split.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_saved_query_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stratified_split.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_split.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudAiplatformV1beta1InputDataConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
