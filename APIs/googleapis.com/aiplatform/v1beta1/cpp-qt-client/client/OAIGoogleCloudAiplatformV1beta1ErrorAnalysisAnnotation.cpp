/**
 * Vertex AI API
 * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudAiplatformV1beta1ErrorAnalysisAnnotation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudAiplatformV1beta1ErrorAnalysisAnnotation::OAIGoogleCloudAiplatformV1beta1ErrorAnalysisAnnotation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudAiplatformV1beta1ErrorAnalysisAnnotation::OAIGoogleCloudAiplatformV1beta1ErrorAnalysisAnnotation() {
    this->initializeModel();
}

OAIGoogleCloudAiplatformV1beta1ErrorAnalysisAnnotation::~OAIGoogleCloudAiplatformV1beta1ErrorAnalysisAnnotation() {}

void OAIGoogleCloudAiplatformV1beta1ErrorAnalysisAnnotation::initializeModel() {

    m_attributed_items_isSet = false;
    m_attributed_items_isValid = false;

    m_outlier_score_isSet = false;
    m_outlier_score_isValid = false;

    m_outlier_threshold_isSet = false;
    m_outlier_threshold_isValid = false;

    m_query_type_isSet = false;
    m_query_type_isValid = false;
}

void OAIGoogleCloudAiplatformV1beta1ErrorAnalysisAnnotation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudAiplatformV1beta1ErrorAnalysisAnnotation::fromJsonObject(QJsonObject json) {

    m_attributed_items_isValid = ::OpenAPI::fromJsonValue(m_attributed_items, json[QString("attributedItems")]);
    m_attributed_items_isSet = !json[QString("attributedItems")].isNull() && m_attributed_items_isValid;

    m_outlier_score_isValid = ::OpenAPI::fromJsonValue(m_outlier_score, json[QString("outlierScore")]);
    m_outlier_score_isSet = !json[QString("outlierScore")].isNull() && m_outlier_score_isValid;

    m_outlier_threshold_isValid = ::OpenAPI::fromJsonValue(m_outlier_threshold, json[QString("outlierThreshold")]);
    m_outlier_threshold_isSet = !json[QString("outlierThreshold")].isNull() && m_outlier_threshold_isValid;

    m_query_type_isValid = ::OpenAPI::fromJsonValue(m_query_type, json[QString("queryType")]);
    m_query_type_isSet = !json[QString("queryType")].isNull() && m_query_type_isValid;
}

QString OAIGoogleCloudAiplatformV1beta1ErrorAnalysisAnnotation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudAiplatformV1beta1ErrorAnalysisAnnotation::asJsonObject() const {
    QJsonObject obj;
    if (m_attributed_items.size() > 0) {
        obj.insert(QString("attributedItems"), ::OpenAPI::toJsonValue(m_attributed_items));
    }
    if (m_outlier_score_isSet) {
        obj.insert(QString("outlierScore"), ::OpenAPI::toJsonValue(m_outlier_score));
    }
    if (m_outlier_threshold_isSet) {
        obj.insert(QString("outlierThreshold"), ::OpenAPI::toJsonValue(m_outlier_threshold));
    }
    if (m_query_type_isSet) {
        obj.insert(QString("queryType"), ::OpenAPI::toJsonValue(m_query_type));
    }
    return obj;
}

QList<OAIGoogleCloudAiplatformV1beta1ErrorAnalysisAnnotationAttributedItem> OAIGoogleCloudAiplatformV1beta1ErrorAnalysisAnnotation::getAttributedItems() const {
    return m_attributed_items;
}
void OAIGoogleCloudAiplatformV1beta1ErrorAnalysisAnnotation::setAttributedItems(const QList<OAIGoogleCloudAiplatformV1beta1ErrorAnalysisAnnotationAttributedItem> &attributed_items) {
    m_attributed_items = attributed_items;
    m_attributed_items_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1ErrorAnalysisAnnotation::is_attributed_items_Set() const{
    return m_attributed_items_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1ErrorAnalysisAnnotation::is_attributed_items_Valid() const{
    return m_attributed_items_isValid;
}

double OAIGoogleCloudAiplatformV1beta1ErrorAnalysisAnnotation::getOutlierScore() const {
    return m_outlier_score;
}
void OAIGoogleCloudAiplatformV1beta1ErrorAnalysisAnnotation::setOutlierScore(const double &outlier_score) {
    m_outlier_score = outlier_score;
    m_outlier_score_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1ErrorAnalysisAnnotation::is_outlier_score_Set() const{
    return m_outlier_score_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1ErrorAnalysisAnnotation::is_outlier_score_Valid() const{
    return m_outlier_score_isValid;
}

double OAIGoogleCloudAiplatformV1beta1ErrorAnalysisAnnotation::getOutlierThreshold() const {
    return m_outlier_threshold;
}
void OAIGoogleCloudAiplatformV1beta1ErrorAnalysisAnnotation::setOutlierThreshold(const double &outlier_threshold) {
    m_outlier_threshold = outlier_threshold;
    m_outlier_threshold_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1ErrorAnalysisAnnotation::is_outlier_threshold_Set() const{
    return m_outlier_threshold_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1ErrorAnalysisAnnotation::is_outlier_threshold_Valid() const{
    return m_outlier_threshold_isValid;
}

QString OAIGoogleCloudAiplatformV1beta1ErrorAnalysisAnnotation::getQueryType() const {
    return m_query_type;
}
void OAIGoogleCloudAiplatformV1beta1ErrorAnalysisAnnotation::setQueryType(const QString &query_type) {
    m_query_type = query_type;
    m_query_type_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1ErrorAnalysisAnnotation::is_query_type_Set() const{
    return m_query_type_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1ErrorAnalysisAnnotation::is_query_type_Valid() const{
    return m_query_type_isValid;
}

bool OAIGoogleCloudAiplatformV1beta1ErrorAnalysisAnnotation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attributed_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_outlier_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_outlier_threshold_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudAiplatformV1beta1ErrorAnalysisAnnotation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
