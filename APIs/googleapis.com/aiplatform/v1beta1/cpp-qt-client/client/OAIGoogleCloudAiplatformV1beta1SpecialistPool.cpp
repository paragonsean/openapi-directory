/**
 * Vertex AI API
 * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudAiplatformV1beta1SpecialistPool.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudAiplatformV1beta1SpecialistPool::OAIGoogleCloudAiplatformV1beta1SpecialistPool(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudAiplatformV1beta1SpecialistPool::OAIGoogleCloudAiplatformV1beta1SpecialistPool() {
    this->initializeModel();
}

OAIGoogleCloudAiplatformV1beta1SpecialistPool::~OAIGoogleCloudAiplatformV1beta1SpecialistPool() {}

void OAIGoogleCloudAiplatformV1beta1SpecialistPool::initializeModel() {

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_pending_data_labeling_jobs_isSet = false;
    m_pending_data_labeling_jobs_isValid = false;

    m_specialist_manager_emails_isSet = false;
    m_specialist_manager_emails_isValid = false;

    m_specialist_managers_count_isSet = false;
    m_specialist_managers_count_isValid = false;

    m_specialist_worker_emails_isSet = false;
    m_specialist_worker_emails_isValid = false;
}

void OAIGoogleCloudAiplatformV1beta1SpecialistPool::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudAiplatformV1beta1SpecialistPool::fromJsonObject(QJsonObject json) {

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_pending_data_labeling_jobs_isValid = ::OpenAPI::fromJsonValue(m_pending_data_labeling_jobs, json[QString("pendingDataLabelingJobs")]);
    m_pending_data_labeling_jobs_isSet = !json[QString("pendingDataLabelingJobs")].isNull() && m_pending_data_labeling_jobs_isValid;

    m_specialist_manager_emails_isValid = ::OpenAPI::fromJsonValue(m_specialist_manager_emails, json[QString("specialistManagerEmails")]);
    m_specialist_manager_emails_isSet = !json[QString("specialistManagerEmails")].isNull() && m_specialist_manager_emails_isValid;

    m_specialist_managers_count_isValid = ::OpenAPI::fromJsonValue(m_specialist_managers_count, json[QString("specialistManagersCount")]);
    m_specialist_managers_count_isSet = !json[QString("specialistManagersCount")].isNull() && m_specialist_managers_count_isValid;

    m_specialist_worker_emails_isValid = ::OpenAPI::fromJsonValue(m_specialist_worker_emails, json[QString("specialistWorkerEmails")]);
    m_specialist_worker_emails_isSet = !json[QString("specialistWorkerEmails")].isNull() && m_specialist_worker_emails_isValid;
}

QString OAIGoogleCloudAiplatformV1beta1SpecialistPool::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudAiplatformV1beta1SpecialistPool::asJsonObject() const {
    QJsonObject obj;
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_pending_data_labeling_jobs.size() > 0) {
        obj.insert(QString("pendingDataLabelingJobs"), ::OpenAPI::toJsonValue(m_pending_data_labeling_jobs));
    }
    if (m_specialist_manager_emails.size() > 0) {
        obj.insert(QString("specialistManagerEmails"), ::OpenAPI::toJsonValue(m_specialist_manager_emails));
    }
    if (m_specialist_managers_count_isSet) {
        obj.insert(QString("specialistManagersCount"), ::OpenAPI::toJsonValue(m_specialist_managers_count));
    }
    if (m_specialist_worker_emails.size() > 0) {
        obj.insert(QString("specialistWorkerEmails"), ::OpenAPI::toJsonValue(m_specialist_worker_emails));
    }
    return obj;
}

QString OAIGoogleCloudAiplatformV1beta1SpecialistPool::getDisplayName() const {
    return m_display_name;
}
void OAIGoogleCloudAiplatformV1beta1SpecialistPool::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1SpecialistPool::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1SpecialistPool::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIGoogleCloudAiplatformV1beta1SpecialistPool::getName() const {
    return m_name;
}
void OAIGoogleCloudAiplatformV1beta1SpecialistPool::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1SpecialistPool::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1SpecialistPool::is_name_Valid() const{
    return m_name_isValid;
}

QList<QString> OAIGoogleCloudAiplatformV1beta1SpecialistPool::getPendingDataLabelingJobs() const {
    return m_pending_data_labeling_jobs;
}
void OAIGoogleCloudAiplatformV1beta1SpecialistPool::setPendingDataLabelingJobs(const QList<QString> &pending_data_labeling_jobs) {
    m_pending_data_labeling_jobs = pending_data_labeling_jobs;
    m_pending_data_labeling_jobs_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1SpecialistPool::is_pending_data_labeling_jobs_Set() const{
    return m_pending_data_labeling_jobs_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1SpecialistPool::is_pending_data_labeling_jobs_Valid() const{
    return m_pending_data_labeling_jobs_isValid;
}

QList<QString> OAIGoogleCloudAiplatformV1beta1SpecialistPool::getSpecialistManagerEmails() const {
    return m_specialist_manager_emails;
}
void OAIGoogleCloudAiplatformV1beta1SpecialistPool::setSpecialistManagerEmails(const QList<QString> &specialist_manager_emails) {
    m_specialist_manager_emails = specialist_manager_emails;
    m_specialist_manager_emails_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1SpecialistPool::is_specialist_manager_emails_Set() const{
    return m_specialist_manager_emails_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1SpecialistPool::is_specialist_manager_emails_Valid() const{
    return m_specialist_manager_emails_isValid;
}

qint32 OAIGoogleCloudAiplatformV1beta1SpecialistPool::getSpecialistManagersCount() const {
    return m_specialist_managers_count;
}
void OAIGoogleCloudAiplatformV1beta1SpecialistPool::setSpecialistManagersCount(const qint32 &specialist_managers_count) {
    m_specialist_managers_count = specialist_managers_count;
    m_specialist_managers_count_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1SpecialistPool::is_specialist_managers_count_Set() const{
    return m_specialist_managers_count_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1SpecialistPool::is_specialist_managers_count_Valid() const{
    return m_specialist_managers_count_isValid;
}

QList<QString> OAIGoogleCloudAiplatformV1beta1SpecialistPool::getSpecialistWorkerEmails() const {
    return m_specialist_worker_emails;
}
void OAIGoogleCloudAiplatformV1beta1SpecialistPool::setSpecialistWorkerEmails(const QList<QString> &specialist_worker_emails) {
    m_specialist_worker_emails = specialist_worker_emails;
    m_specialist_worker_emails_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1SpecialistPool::is_specialist_worker_emails_Set() const{
    return m_specialist_worker_emails_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1SpecialistPool::is_specialist_worker_emails_Valid() const{
    return m_specialist_worker_emails_isValid;
}

bool OAIGoogleCloudAiplatformV1beta1SpecialistPool::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pending_data_labeling_jobs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_specialist_manager_emails.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_specialist_managers_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_specialist_worker_emails.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudAiplatformV1beta1SpecialistPool::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
