/**
 * Vertex AI API
 * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudAiplatformV1beta1NasJobSpec.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudAiplatformV1beta1NasJobSpec::OAIGoogleCloudAiplatformV1beta1NasJobSpec(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudAiplatformV1beta1NasJobSpec::OAIGoogleCloudAiplatformV1beta1NasJobSpec() {
    this->initializeModel();
}

OAIGoogleCloudAiplatformV1beta1NasJobSpec::~OAIGoogleCloudAiplatformV1beta1NasJobSpec() {}

void OAIGoogleCloudAiplatformV1beta1NasJobSpec::initializeModel() {

    m_multi_trial_algorithm_spec_isSet = false;
    m_multi_trial_algorithm_spec_isValid = false;

    m_resume_nas_job_id_isSet = false;
    m_resume_nas_job_id_isValid = false;

    m_search_space_spec_isSet = false;
    m_search_space_spec_isValid = false;
}

void OAIGoogleCloudAiplatformV1beta1NasJobSpec::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudAiplatformV1beta1NasJobSpec::fromJsonObject(QJsonObject json) {

    m_multi_trial_algorithm_spec_isValid = ::OpenAPI::fromJsonValue(m_multi_trial_algorithm_spec, json[QString("multiTrialAlgorithmSpec")]);
    m_multi_trial_algorithm_spec_isSet = !json[QString("multiTrialAlgorithmSpec")].isNull() && m_multi_trial_algorithm_spec_isValid;

    m_resume_nas_job_id_isValid = ::OpenAPI::fromJsonValue(m_resume_nas_job_id, json[QString("resumeNasJobId")]);
    m_resume_nas_job_id_isSet = !json[QString("resumeNasJobId")].isNull() && m_resume_nas_job_id_isValid;

    m_search_space_spec_isValid = ::OpenAPI::fromJsonValue(m_search_space_spec, json[QString("searchSpaceSpec")]);
    m_search_space_spec_isSet = !json[QString("searchSpaceSpec")].isNull() && m_search_space_spec_isValid;
}

QString OAIGoogleCloudAiplatformV1beta1NasJobSpec::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudAiplatformV1beta1NasJobSpec::asJsonObject() const {
    QJsonObject obj;
    if (m_multi_trial_algorithm_spec.isSet()) {
        obj.insert(QString("multiTrialAlgorithmSpec"), ::OpenAPI::toJsonValue(m_multi_trial_algorithm_spec));
    }
    if (m_resume_nas_job_id_isSet) {
        obj.insert(QString("resumeNasJobId"), ::OpenAPI::toJsonValue(m_resume_nas_job_id));
    }
    if (m_search_space_spec_isSet) {
        obj.insert(QString("searchSpaceSpec"), ::OpenAPI::toJsonValue(m_search_space_spec));
    }
    return obj;
}

OAIGoogleCloudAiplatformV1beta1NasJobSpecMultiTrialAlgorithmSpec OAIGoogleCloudAiplatformV1beta1NasJobSpec::getMultiTrialAlgorithmSpec() const {
    return m_multi_trial_algorithm_spec;
}
void OAIGoogleCloudAiplatformV1beta1NasJobSpec::setMultiTrialAlgorithmSpec(const OAIGoogleCloudAiplatformV1beta1NasJobSpecMultiTrialAlgorithmSpec &multi_trial_algorithm_spec) {
    m_multi_trial_algorithm_spec = multi_trial_algorithm_spec;
    m_multi_trial_algorithm_spec_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1NasJobSpec::is_multi_trial_algorithm_spec_Set() const{
    return m_multi_trial_algorithm_spec_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1NasJobSpec::is_multi_trial_algorithm_spec_Valid() const{
    return m_multi_trial_algorithm_spec_isValid;
}

QString OAIGoogleCloudAiplatformV1beta1NasJobSpec::getResumeNasJobId() const {
    return m_resume_nas_job_id;
}
void OAIGoogleCloudAiplatformV1beta1NasJobSpec::setResumeNasJobId(const QString &resume_nas_job_id) {
    m_resume_nas_job_id = resume_nas_job_id;
    m_resume_nas_job_id_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1NasJobSpec::is_resume_nas_job_id_Set() const{
    return m_resume_nas_job_id_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1NasJobSpec::is_resume_nas_job_id_Valid() const{
    return m_resume_nas_job_id_isValid;
}

QString OAIGoogleCloudAiplatformV1beta1NasJobSpec::getSearchSpaceSpec() const {
    return m_search_space_spec;
}
void OAIGoogleCloudAiplatformV1beta1NasJobSpec::setSearchSpaceSpec(const QString &search_space_spec) {
    m_search_space_spec = search_space_spec;
    m_search_space_spec_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1NasJobSpec::is_search_space_spec_Set() const{
    return m_search_space_spec_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1NasJobSpec::is_search_space_spec_Valid() const{
    return m_search_space_spec_isValid;
}

bool OAIGoogleCloudAiplatformV1beta1NasJobSpec::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_multi_trial_algorithm_spec.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resume_nas_job_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_search_space_spec_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudAiplatformV1beta1NasJobSpec::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
