/**
 * Vertex AI API
 * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGoogleCloudAiplatformV1beta1FeatureStatsAnomaly.h
 *
 * Stats and Anomaly generated at specific timestamp for specific Feature. The start_time and end_time are used to define the time range of the dataset that current stats belongs to, e.g. prediction traffic is bucketed into prediction datasets by time window. If the Dataset is not defined by time window, start_time &#x3D; end_time. Timestamp of the stats and anomalies always refers to end_time. Raw stats and anomalies are stored in stats_uri or anomaly_uri in the tensorflow defined protos. Field data_stats contains almost identical information with the raw stats in Vertex AI defined proto, for UI to display.
 */

#ifndef OAIGoogleCloudAiplatformV1beta1FeatureStatsAnomaly_H
#define OAIGoogleCloudAiplatformV1beta1FeatureStatsAnomaly_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIGoogleCloudAiplatformV1beta1FeatureStatsAnomaly : public OAIObject {
public:
    OAIGoogleCloudAiplatformV1beta1FeatureStatsAnomaly();
    OAIGoogleCloudAiplatformV1beta1FeatureStatsAnomaly(QString json);
    ~OAIGoogleCloudAiplatformV1beta1FeatureStatsAnomaly() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    double getAnomalyDetectionThreshold() const;
    void setAnomalyDetectionThreshold(const double &anomaly_detection_threshold);
    bool is_anomaly_detection_threshold_Set() const;
    bool is_anomaly_detection_threshold_Valid() const;

    QString getAnomalyUri() const;
    void setAnomalyUri(const QString &anomaly_uri);
    bool is_anomaly_uri_Set() const;
    bool is_anomaly_uri_Valid() const;

    double getDistributionDeviation() const;
    void setDistributionDeviation(const double &distribution_deviation);
    bool is_distribution_deviation_Set() const;
    bool is_distribution_deviation_Valid() const;

    QString getEndTime() const;
    void setEndTime(const QString &end_time);
    bool is_end_time_Set() const;
    bool is_end_time_Valid() const;

    double getScore() const;
    void setScore(const double &score);
    bool is_score_Set() const;
    bool is_score_Valid() const;

    QString getStartTime() const;
    void setStartTime(const QString &start_time);
    bool is_start_time_Set() const;
    bool is_start_time_Valid() const;

    QString getStatsUri() const;
    void setStatsUri(const QString &stats_uri);
    bool is_stats_uri_Set() const;
    bool is_stats_uri_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    double m_anomaly_detection_threshold;
    bool m_anomaly_detection_threshold_isSet;
    bool m_anomaly_detection_threshold_isValid;

    QString m_anomaly_uri;
    bool m_anomaly_uri_isSet;
    bool m_anomaly_uri_isValid;

    double m_distribution_deviation;
    bool m_distribution_deviation_isSet;
    bool m_distribution_deviation_isValid;

    QString m_end_time;
    bool m_end_time_isSet;
    bool m_end_time_isValid;

    double m_score;
    bool m_score_isSet;
    bool m_score_isValid;

    QString m_start_time;
    bool m_start_time_isSet;
    bool m_start_time_isValid;

    QString m_stats_uri;
    bool m_stats_uri_isSet;
    bool m_stats_uri_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGoogleCloudAiplatformV1beta1FeatureStatsAnomaly)

#endif // OAIGoogleCloudAiplatformV1beta1FeatureStatsAnomaly_H
