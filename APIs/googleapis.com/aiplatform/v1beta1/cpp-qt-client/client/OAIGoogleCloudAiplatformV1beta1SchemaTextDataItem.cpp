/**
 * Vertex AI API
 * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudAiplatformV1beta1SchemaTextDataItem.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudAiplatformV1beta1SchemaTextDataItem::OAIGoogleCloudAiplatformV1beta1SchemaTextDataItem(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudAiplatformV1beta1SchemaTextDataItem::OAIGoogleCloudAiplatformV1beta1SchemaTextDataItem() {
    this->initializeModel();
}

OAIGoogleCloudAiplatformV1beta1SchemaTextDataItem::~OAIGoogleCloudAiplatformV1beta1SchemaTextDataItem() {}

void OAIGoogleCloudAiplatformV1beta1SchemaTextDataItem::initializeModel() {

    m_gcs_uri_isSet = false;
    m_gcs_uri_isValid = false;
}

void OAIGoogleCloudAiplatformV1beta1SchemaTextDataItem::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudAiplatformV1beta1SchemaTextDataItem::fromJsonObject(QJsonObject json) {

    m_gcs_uri_isValid = ::OpenAPI::fromJsonValue(m_gcs_uri, json[QString("gcsUri")]);
    m_gcs_uri_isSet = !json[QString("gcsUri")].isNull() && m_gcs_uri_isValid;
}

QString OAIGoogleCloudAiplatformV1beta1SchemaTextDataItem::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudAiplatformV1beta1SchemaTextDataItem::asJsonObject() const {
    QJsonObject obj;
    if (m_gcs_uri_isSet) {
        obj.insert(QString("gcsUri"), ::OpenAPI::toJsonValue(m_gcs_uri));
    }
    return obj;
}

QString OAIGoogleCloudAiplatformV1beta1SchemaTextDataItem::getGcsUri() const {
    return m_gcs_uri;
}
void OAIGoogleCloudAiplatformV1beta1SchemaTextDataItem::setGcsUri(const QString &gcs_uri) {
    m_gcs_uri = gcs_uri;
    m_gcs_uri_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1SchemaTextDataItem::is_gcs_uri_Set() const{
    return m_gcs_uri_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1SchemaTextDataItem::is_gcs_uri_Valid() const{
    return m_gcs_uri_isValid;
}

bool OAIGoogleCloudAiplatformV1beta1SchemaTextDataItem::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_gcs_uri_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudAiplatformV1beta1SchemaTextDataItem::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
