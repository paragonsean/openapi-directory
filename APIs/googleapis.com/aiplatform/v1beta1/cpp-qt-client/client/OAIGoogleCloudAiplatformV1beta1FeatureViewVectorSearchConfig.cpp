/**
 * Vertex AI API
 * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudAiplatformV1beta1FeatureViewVectorSearchConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudAiplatformV1beta1FeatureViewVectorSearchConfig::OAIGoogleCloudAiplatformV1beta1FeatureViewVectorSearchConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudAiplatformV1beta1FeatureViewVectorSearchConfig::OAIGoogleCloudAiplatformV1beta1FeatureViewVectorSearchConfig() {
    this->initializeModel();
}

OAIGoogleCloudAiplatformV1beta1FeatureViewVectorSearchConfig::~OAIGoogleCloudAiplatformV1beta1FeatureViewVectorSearchConfig() {}

void OAIGoogleCloudAiplatformV1beta1FeatureViewVectorSearchConfig::initializeModel() {

    m_brute_force_config_isSet = false;
    m_brute_force_config_isValid = false;

    m_crowding_column_isSet = false;
    m_crowding_column_isValid = false;

    m_distance_measure_type_isSet = false;
    m_distance_measure_type_isValid = false;

    m_embedding_column_isSet = false;
    m_embedding_column_isValid = false;

    m_embedding_dimension_isSet = false;
    m_embedding_dimension_isValid = false;

    m_filter_columns_isSet = false;
    m_filter_columns_isValid = false;

    m_tree_ah_config_isSet = false;
    m_tree_ah_config_isValid = false;
}

void OAIGoogleCloudAiplatformV1beta1FeatureViewVectorSearchConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudAiplatformV1beta1FeatureViewVectorSearchConfig::fromJsonObject(QJsonObject json) {

    m_brute_force_config_isValid = ::OpenAPI::fromJsonValue(m_brute_force_config, json[QString("bruteForceConfig")]);
    m_brute_force_config_isSet = !json[QString("bruteForceConfig")].isNull() && m_brute_force_config_isValid;

    m_crowding_column_isValid = ::OpenAPI::fromJsonValue(m_crowding_column, json[QString("crowdingColumn")]);
    m_crowding_column_isSet = !json[QString("crowdingColumn")].isNull() && m_crowding_column_isValid;

    m_distance_measure_type_isValid = ::OpenAPI::fromJsonValue(m_distance_measure_type, json[QString("distanceMeasureType")]);
    m_distance_measure_type_isSet = !json[QString("distanceMeasureType")].isNull() && m_distance_measure_type_isValid;

    m_embedding_column_isValid = ::OpenAPI::fromJsonValue(m_embedding_column, json[QString("embeddingColumn")]);
    m_embedding_column_isSet = !json[QString("embeddingColumn")].isNull() && m_embedding_column_isValid;

    m_embedding_dimension_isValid = ::OpenAPI::fromJsonValue(m_embedding_dimension, json[QString("embeddingDimension")]);
    m_embedding_dimension_isSet = !json[QString("embeddingDimension")].isNull() && m_embedding_dimension_isValid;

    m_filter_columns_isValid = ::OpenAPI::fromJsonValue(m_filter_columns, json[QString("filterColumns")]);
    m_filter_columns_isSet = !json[QString("filterColumns")].isNull() && m_filter_columns_isValid;

    m_tree_ah_config_isValid = ::OpenAPI::fromJsonValue(m_tree_ah_config, json[QString("treeAhConfig")]);
    m_tree_ah_config_isSet = !json[QString("treeAhConfig")].isNull() && m_tree_ah_config_isValid;
}

QString OAIGoogleCloudAiplatformV1beta1FeatureViewVectorSearchConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudAiplatformV1beta1FeatureViewVectorSearchConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_brute_force_config_isSet) {
        obj.insert(QString("bruteForceConfig"), ::OpenAPI::toJsonValue(m_brute_force_config));
    }
    if (m_crowding_column_isSet) {
        obj.insert(QString("crowdingColumn"), ::OpenAPI::toJsonValue(m_crowding_column));
    }
    if (m_distance_measure_type_isSet) {
        obj.insert(QString("distanceMeasureType"), ::OpenAPI::toJsonValue(m_distance_measure_type));
    }
    if (m_embedding_column_isSet) {
        obj.insert(QString("embeddingColumn"), ::OpenAPI::toJsonValue(m_embedding_column));
    }
    if (m_embedding_dimension_isSet) {
        obj.insert(QString("embeddingDimension"), ::OpenAPI::toJsonValue(m_embedding_dimension));
    }
    if (m_filter_columns.size() > 0) {
        obj.insert(QString("filterColumns"), ::OpenAPI::toJsonValue(m_filter_columns));
    }
    if (m_tree_ah_config.isSet()) {
        obj.insert(QString("treeAhConfig"), ::OpenAPI::toJsonValue(m_tree_ah_config));
    }
    return obj;
}

OAIObject OAIGoogleCloudAiplatformV1beta1FeatureViewVectorSearchConfig::getBruteForceConfig() const {
    return m_brute_force_config;
}
void OAIGoogleCloudAiplatformV1beta1FeatureViewVectorSearchConfig::setBruteForceConfig(const OAIObject &brute_force_config) {
    m_brute_force_config = brute_force_config;
    m_brute_force_config_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1FeatureViewVectorSearchConfig::is_brute_force_config_Set() const{
    return m_brute_force_config_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1FeatureViewVectorSearchConfig::is_brute_force_config_Valid() const{
    return m_brute_force_config_isValid;
}

QString OAIGoogleCloudAiplatformV1beta1FeatureViewVectorSearchConfig::getCrowdingColumn() const {
    return m_crowding_column;
}
void OAIGoogleCloudAiplatformV1beta1FeatureViewVectorSearchConfig::setCrowdingColumn(const QString &crowding_column) {
    m_crowding_column = crowding_column;
    m_crowding_column_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1FeatureViewVectorSearchConfig::is_crowding_column_Set() const{
    return m_crowding_column_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1FeatureViewVectorSearchConfig::is_crowding_column_Valid() const{
    return m_crowding_column_isValid;
}

QString OAIGoogleCloudAiplatformV1beta1FeatureViewVectorSearchConfig::getDistanceMeasureType() const {
    return m_distance_measure_type;
}
void OAIGoogleCloudAiplatformV1beta1FeatureViewVectorSearchConfig::setDistanceMeasureType(const QString &distance_measure_type) {
    m_distance_measure_type = distance_measure_type;
    m_distance_measure_type_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1FeatureViewVectorSearchConfig::is_distance_measure_type_Set() const{
    return m_distance_measure_type_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1FeatureViewVectorSearchConfig::is_distance_measure_type_Valid() const{
    return m_distance_measure_type_isValid;
}

QString OAIGoogleCloudAiplatformV1beta1FeatureViewVectorSearchConfig::getEmbeddingColumn() const {
    return m_embedding_column;
}
void OAIGoogleCloudAiplatformV1beta1FeatureViewVectorSearchConfig::setEmbeddingColumn(const QString &embedding_column) {
    m_embedding_column = embedding_column;
    m_embedding_column_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1FeatureViewVectorSearchConfig::is_embedding_column_Set() const{
    return m_embedding_column_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1FeatureViewVectorSearchConfig::is_embedding_column_Valid() const{
    return m_embedding_column_isValid;
}

qint32 OAIGoogleCloudAiplatformV1beta1FeatureViewVectorSearchConfig::getEmbeddingDimension() const {
    return m_embedding_dimension;
}
void OAIGoogleCloudAiplatformV1beta1FeatureViewVectorSearchConfig::setEmbeddingDimension(const qint32 &embedding_dimension) {
    m_embedding_dimension = embedding_dimension;
    m_embedding_dimension_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1FeatureViewVectorSearchConfig::is_embedding_dimension_Set() const{
    return m_embedding_dimension_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1FeatureViewVectorSearchConfig::is_embedding_dimension_Valid() const{
    return m_embedding_dimension_isValid;
}

QList<QString> OAIGoogleCloudAiplatformV1beta1FeatureViewVectorSearchConfig::getFilterColumns() const {
    return m_filter_columns;
}
void OAIGoogleCloudAiplatformV1beta1FeatureViewVectorSearchConfig::setFilterColumns(const QList<QString> &filter_columns) {
    m_filter_columns = filter_columns;
    m_filter_columns_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1FeatureViewVectorSearchConfig::is_filter_columns_Set() const{
    return m_filter_columns_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1FeatureViewVectorSearchConfig::is_filter_columns_Valid() const{
    return m_filter_columns_isValid;
}

OAIGoogleCloudAiplatformV1beta1FeatureViewVectorSearchConfigTreeAHConfig OAIGoogleCloudAiplatformV1beta1FeatureViewVectorSearchConfig::getTreeAhConfig() const {
    return m_tree_ah_config;
}
void OAIGoogleCloudAiplatformV1beta1FeatureViewVectorSearchConfig::setTreeAhConfig(const OAIGoogleCloudAiplatformV1beta1FeatureViewVectorSearchConfigTreeAHConfig &tree_ah_config) {
    m_tree_ah_config = tree_ah_config;
    m_tree_ah_config_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1FeatureViewVectorSearchConfig::is_tree_ah_config_Set() const{
    return m_tree_ah_config_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1FeatureViewVectorSearchConfig::is_tree_ah_config_Valid() const{
    return m_tree_ah_config_isValid;
}

bool OAIGoogleCloudAiplatformV1beta1FeatureViewVectorSearchConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_brute_force_config_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_crowding_column_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_distance_measure_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_embedding_column_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_embedding_dimension_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filter_columns.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_tree_ah_config.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudAiplatformV1beta1FeatureViewVectorSearchConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
