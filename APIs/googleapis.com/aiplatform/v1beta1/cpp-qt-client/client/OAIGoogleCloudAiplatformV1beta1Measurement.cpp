/**
 * Vertex AI API
 * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudAiplatformV1beta1Measurement.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudAiplatformV1beta1Measurement::OAIGoogleCloudAiplatformV1beta1Measurement(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudAiplatformV1beta1Measurement::OAIGoogleCloudAiplatformV1beta1Measurement() {
    this->initializeModel();
}

OAIGoogleCloudAiplatformV1beta1Measurement::~OAIGoogleCloudAiplatformV1beta1Measurement() {}

void OAIGoogleCloudAiplatformV1beta1Measurement::initializeModel() {

    m_elapsed_duration_isSet = false;
    m_elapsed_duration_isValid = false;

    m_metrics_isSet = false;
    m_metrics_isValid = false;

    m_step_count_isSet = false;
    m_step_count_isValid = false;
}

void OAIGoogleCloudAiplatformV1beta1Measurement::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudAiplatformV1beta1Measurement::fromJsonObject(QJsonObject json) {

    m_elapsed_duration_isValid = ::OpenAPI::fromJsonValue(m_elapsed_duration, json[QString("elapsedDuration")]);
    m_elapsed_duration_isSet = !json[QString("elapsedDuration")].isNull() && m_elapsed_duration_isValid;

    m_metrics_isValid = ::OpenAPI::fromJsonValue(m_metrics, json[QString("metrics")]);
    m_metrics_isSet = !json[QString("metrics")].isNull() && m_metrics_isValid;

    m_step_count_isValid = ::OpenAPI::fromJsonValue(m_step_count, json[QString("stepCount")]);
    m_step_count_isSet = !json[QString("stepCount")].isNull() && m_step_count_isValid;
}

QString OAIGoogleCloudAiplatformV1beta1Measurement::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudAiplatformV1beta1Measurement::asJsonObject() const {
    QJsonObject obj;
    if (m_elapsed_duration_isSet) {
        obj.insert(QString("elapsedDuration"), ::OpenAPI::toJsonValue(m_elapsed_duration));
    }
    if (m_metrics.size() > 0) {
        obj.insert(QString("metrics"), ::OpenAPI::toJsonValue(m_metrics));
    }
    if (m_step_count_isSet) {
        obj.insert(QString("stepCount"), ::OpenAPI::toJsonValue(m_step_count));
    }
    return obj;
}

QString OAIGoogleCloudAiplatformV1beta1Measurement::getElapsedDuration() const {
    return m_elapsed_duration;
}
void OAIGoogleCloudAiplatformV1beta1Measurement::setElapsedDuration(const QString &elapsed_duration) {
    m_elapsed_duration = elapsed_duration;
    m_elapsed_duration_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1Measurement::is_elapsed_duration_Set() const{
    return m_elapsed_duration_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1Measurement::is_elapsed_duration_Valid() const{
    return m_elapsed_duration_isValid;
}

QList<OAIGoogleCloudAiplatformV1beta1MeasurementMetric> OAIGoogleCloudAiplatformV1beta1Measurement::getMetrics() const {
    return m_metrics;
}
void OAIGoogleCloudAiplatformV1beta1Measurement::setMetrics(const QList<OAIGoogleCloudAiplatformV1beta1MeasurementMetric> &metrics) {
    m_metrics = metrics;
    m_metrics_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1Measurement::is_metrics_Set() const{
    return m_metrics_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1Measurement::is_metrics_Valid() const{
    return m_metrics_isValid;
}

QString OAIGoogleCloudAiplatformV1beta1Measurement::getStepCount() const {
    return m_step_count;
}
void OAIGoogleCloudAiplatformV1beta1Measurement::setStepCount(const QString &step_count) {
    m_step_count = step_count;
    m_step_count_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1Measurement::is_step_count_Set() const{
    return m_step_count_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1Measurement::is_step_count_Valid() const{
    return m_step_count_isValid;
}

bool OAIGoogleCloudAiplatformV1beta1Measurement::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_elapsed_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metrics.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_step_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudAiplatformV1beta1Measurement::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
