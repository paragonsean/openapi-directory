/**
 * Vertex AI API
 * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICloudAiLargeModelsVisionGenerateVideoResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICloudAiLargeModelsVisionGenerateVideoResponse::OAICloudAiLargeModelsVisionGenerateVideoResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICloudAiLargeModelsVisionGenerateVideoResponse::OAICloudAiLargeModelsVisionGenerateVideoResponse() {
    this->initializeModel();
}

OAICloudAiLargeModelsVisionGenerateVideoResponse::~OAICloudAiLargeModelsVisionGenerateVideoResponse() {}

void OAICloudAiLargeModelsVisionGenerateVideoResponse::initializeModel() {

    m_generated_samples_isSet = false;
    m_generated_samples_isValid = false;

    m_rai_media_filtered_count_isSet = false;
    m_rai_media_filtered_count_isValid = false;

    m_rai_media_filtered_reasons_isSet = false;
    m_rai_media_filtered_reasons_isValid = false;

    m_rai_text_filtered_reason_isSet = false;
    m_rai_text_filtered_reason_isValid = false;
}

void OAICloudAiLargeModelsVisionGenerateVideoResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICloudAiLargeModelsVisionGenerateVideoResponse::fromJsonObject(QJsonObject json) {

    m_generated_samples_isValid = ::OpenAPI::fromJsonValue(m_generated_samples, json[QString("generatedSamples")]);
    m_generated_samples_isSet = !json[QString("generatedSamples")].isNull() && m_generated_samples_isValid;

    m_rai_media_filtered_count_isValid = ::OpenAPI::fromJsonValue(m_rai_media_filtered_count, json[QString("raiMediaFilteredCount")]);
    m_rai_media_filtered_count_isSet = !json[QString("raiMediaFilteredCount")].isNull() && m_rai_media_filtered_count_isValid;

    m_rai_media_filtered_reasons_isValid = ::OpenAPI::fromJsonValue(m_rai_media_filtered_reasons, json[QString("raiMediaFilteredReasons")]);
    m_rai_media_filtered_reasons_isSet = !json[QString("raiMediaFilteredReasons")].isNull() && m_rai_media_filtered_reasons_isValid;

    m_rai_text_filtered_reason_isValid = ::OpenAPI::fromJsonValue(m_rai_text_filtered_reason, json[QString("raiTextFilteredReason")]);
    m_rai_text_filtered_reason_isSet = !json[QString("raiTextFilteredReason")].isNull() && m_rai_text_filtered_reason_isValid;
}

QString OAICloudAiLargeModelsVisionGenerateVideoResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICloudAiLargeModelsVisionGenerateVideoResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_generated_samples.size() > 0) {
        obj.insert(QString("generatedSamples"), ::OpenAPI::toJsonValue(m_generated_samples));
    }
    if (m_rai_media_filtered_count_isSet) {
        obj.insert(QString("raiMediaFilteredCount"), ::OpenAPI::toJsonValue(m_rai_media_filtered_count));
    }
    if (m_rai_media_filtered_reasons.size() > 0) {
        obj.insert(QString("raiMediaFilteredReasons"), ::OpenAPI::toJsonValue(m_rai_media_filtered_reasons));
    }
    if (m_rai_text_filtered_reason.isSet()) {
        obj.insert(QString("raiTextFilteredReason"), ::OpenAPI::toJsonValue(m_rai_text_filtered_reason));
    }
    return obj;
}

QList<OAICloudAiLargeModelsVisionMedia> OAICloudAiLargeModelsVisionGenerateVideoResponse::getGeneratedSamples() const {
    return m_generated_samples;
}
void OAICloudAiLargeModelsVisionGenerateVideoResponse::setGeneratedSamples(const QList<OAICloudAiLargeModelsVisionMedia> &generated_samples) {
    m_generated_samples = generated_samples;
    m_generated_samples_isSet = true;
}

bool OAICloudAiLargeModelsVisionGenerateVideoResponse::is_generated_samples_Set() const{
    return m_generated_samples_isSet;
}

bool OAICloudAiLargeModelsVisionGenerateVideoResponse::is_generated_samples_Valid() const{
    return m_generated_samples_isValid;
}

qint32 OAICloudAiLargeModelsVisionGenerateVideoResponse::getRaiMediaFilteredCount() const {
    return m_rai_media_filtered_count;
}
void OAICloudAiLargeModelsVisionGenerateVideoResponse::setRaiMediaFilteredCount(const qint32 &rai_media_filtered_count) {
    m_rai_media_filtered_count = rai_media_filtered_count;
    m_rai_media_filtered_count_isSet = true;
}

bool OAICloudAiLargeModelsVisionGenerateVideoResponse::is_rai_media_filtered_count_Set() const{
    return m_rai_media_filtered_count_isSet;
}

bool OAICloudAiLargeModelsVisionGenerateVideoResponse::is_rai_media_filtered_count_Valid() const{
    return m_rai_media_filtered_count_isValid;
}

QList<QString> OAICloudAiLargeModelsVisionGenerateVideoResponse::getRaiMediaFilteredReasons() const {
    return m_rai_media_filtered_reasons;
}
void OAICloudAiLargeModelsVisionGenerateVideoResponse::setRaiMediaFilteredReasons(const QList<QString> &rai_media_filtered_reasons) {
    m_rai_media_filtered_reasons = rai_media_filtered_reasons;
    m_rai_media_filtered_reasons_isSet = true;
}

bool OAICloudAiLargeModelsVisionGenerateVideoResponse::is_rai_media_filtered_reasons_Set() const{
    return m_rai_media_filtered_reasons_isSet;
}

bool OAICloudAiLargeModelsVisionGenerateVideoResponse::is_rai_media_filtered_reasons_Valid() const{
    return m_rai_media_filtered_reasons_isValid;
}

OAICloudAiLargeModelsVisionFilteredText OAICloudAiLargeModelsVisionGenerateVideoResponse::getRaiTextFilteredReason() const {
    return m_rai_text_filtered_reason;
}
void OAICloudAiLargeModelsVisionGenerateVideoResponse::setRaiTextFilteredReason(const OAICloudAiLargeModelsVisionFilteredText &rai_text_filtered_reason) {
    m_rai_text_filtered_reason = rai_text_filtered_reason;
    m_rai_text_filtered_reason_isSet = true;
}

bool OAICloudAiLargeModelsVisionGenerateVideoResponse::is_rai_text_filtered_reason_Set() const{
    return m_rai_text_filtered_reason_isSet;
}

bool OAICloudAiLargeModelsVisionGenerateVideoResponse::is_rai_text_filtered_reason_Valid() const{
    return m_rai_text_filtered_reason_isValid;
}

bool OAICloudAiLargeModelsVisionGenerateVideoResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_generated_samples.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_rai_media_filtered_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rai_media_filtered_reasons.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_rai_text_filtered_reason.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICloudAiLargeModelsVisionGenerateVideoResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
