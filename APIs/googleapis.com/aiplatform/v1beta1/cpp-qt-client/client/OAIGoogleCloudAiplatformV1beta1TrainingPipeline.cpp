/**
 * Vertex AI API
 * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudAiplatformV1beta1TrainingPipeline.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudAiplatformV1beta1TrainingPipeline::OAIGoogleCloudAiplatformV1beta1TrainingPipeline(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudAiplatformV1beta1TrainingPipeline::OAIGoogleCloudAiplatformV1beta1TrainingPipeline() {
    this->initializeModel();
}

OAIGoogleCloudAiplatformV1beta1TrainingPipeline::~OAIGoogleCloudAiplatformV1beta1TrainingPipeline() {}

void OAIGoogleCloudAiplatformV1beta1TrainingPipeline::initializeModel() {

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_encryption_spec_isSet = false;
    m_encryption_spec_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_error_isSet = false;
    m_error_isValid = false;

    m_input_data_config_isSet = false;
    m_input_data_config_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_model_id_isSet = false;
    m_model_id_isValid = false;

    m_model_to_upload_isSet = false;
    m_model_to_upload_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_parent_model_isSet = false;
    m_parent_model_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_training_task_definition_isSet = false;
    m_training_task_definition_isValid = false;

    m_training_task_inputs_isSet = false;
    m_training_task_inputs_isValid = false;

    m_training_task_metadata_isSet = false;
    m_training_task_metadata_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;
}

void OAIGoogleCloudAiplatformV1beta1TrainingPipeline::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudAiplatformV1beta1TrainingPipeline::fromJsonObject(QJsonObject json) {

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_encryption_spec_isValid = ::OpenAPI::fromJsonValue(m_encryption_spec, json[QString("encryptionSpec")]);
    m_encryption_spec_isSet = !json[QString("encryptionSpec")].isNull() && m_encryption_spec_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("endTime")]);
    m_end_time_isSet = !json[QString("endTime")].isNull() && m_end_time_isValid;

    m_error_isValid = ::OpenAPI::fromJsonValue(m_error, json[QString("error")]);
    m_error_isSet = !json[QString("error")].isNull() && m_error_isValid;

    m_input_data_config_isValid = ::OpenAPI::fromJsonValue(m_input_data_config, json[QString("inputDataConfig")]);
    m_input_data_config_isSet = !json[QString("inputDataConfig")].isNull() && m_input_data_config_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_model_id_isValid = ::OpenAPI::fromJsonValue(m_model_id, json[QString("modelId")]);
    m_model_id_isSet = !json[QString("modelId")].isNull() && m_model_id_isValid;

    m_model_to_upload_isValid = ::OpenAPI::fromJsonValue(m_model_to_upload, json[QString("modelToUpload")]);
    m_model_to_upload_isSet = !json[QString("modelToUpload")].isNull() && m_model_to_upload_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_parent_model_isValid = ::OpenAPI::fromJsonValue(m_parent_model, json[QString("parentModel")]);
    m_parent_model_isSet = !json[QString("parentModel")].isNull() && m_parent_model_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_training_task_definition_isValid = ::OpenAPI::fromJsonValue(m_training_task_definition, json[QString("trainingTaskDefinition")]);
    m_training_task_definition_isSet = !json[QString("trainingTaskDefinition")].isNull() && m_training_task_definition_isValid;

    m_training_task_inputs_isValid = ::OpenAPI::fromJsonValue(m_training_task_inputs, json[QString("trainingTaskInputs")]);
    m_training_task_inputs_isSet = !json[QString("trainingTaskInputs")].isNull() && m_training_task_inputs_isValid;

    m_training_task_metadata_isValid = ::OpenAPI::fromJsonValue(m_training_task_metadata, json[QString("trainingTaskMetadata")]);
    m_training_task_metadata_isSet = !json[QString("trainingTaskMetadata")].isNull() && m_training_task_metadata_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;
}

QString OAIGoogleCloudAiplatformV1beta1TrainingPipeline::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudAiplatformV1beta1TrainingPipeline::asJsonObject() const {
    QJsonObject obj;
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_encryption_spec.isSet()) {
        obj.insert(QString("encryptionSpec"), ::OpenAPI::toJsonValue(m_encryption_spec));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("endTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_error.isSet()) {
        obj.insert(QString("error"), ::OpenAPI::toJsonValue(m_error));
    }
    if (m_input_data_config.isSet()) {
        obj.insert(QString("inputDataConfig"), ::OpenAPI::toJsonValue(m_input_data_config));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_model_id_isSet) {
        obj.insert(QString("modelId"), ::OpenAPI::toJsonValue(m_model_id));
    }
    if (m_model_to_upload.isSet()) {
        obj.insert(QString("modelToUpload"), ::OpenAPI::toJsonValue(m_model_to_upload));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_parent_model_isSet) {
        obj.insert(QString("parentModel"), ::OpenAPI::toJsonValue(m_parent_model));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_training_task_definition_isSet) {
        obj.insert(QString("trainingTaskDefinition"), ::OpenAPI::toJsonValue(m_training_task_definition));
    }
    if (m_training_task_inputs_isSet) {
        obj.insert(QString("trainingTaskInputs"), ::OpenAPI::toJsonValue(m_training_task_inputs));
    }
    if (m_training_task_metadata_isSet) {
        obj.insert(QString("trainingTaskMetadata"), ::OpenAPI::toJsonValue(m_training_task_metadata));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    return obj;
}

QString OAIGoogleCloudAiplatformV1beta1TrainingPipeline::getCreateTime() const {
    return m_create_time;
}
void OAIGoogleCloudAiplatformV1beta1TrainingPipeline::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1TrainingPipeline::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1TrainingPipeline::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAIGoogleCloudAiplatformV1beta1TrainingPipeline::getDisplayName() const {
    return m_display_name;
}
void OAIGoogleCloudAiplatformV1beta1TrainingPipeline::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1TrainingPipeline::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1TrainingPipeline::is_display_name_Valid() const{
    return m_display_name_isValid;
}

OAIGoogleCloudAiplatformV1beta1EncryptionSpec OAIGoogleCloudAiplatformV1beta1TrainingPipeline::getEncryptionSpec() const {
    return m_encryption_spec;
}
void OAIGoogleCloudAiplatformV1beta1TrainingPipeline::setEncryptionSpec(const OAIGoogleCloudAiplatformV1beta1EncryptionSpec &encryption_spec) {
    m_encryption_spec = encryption_spec;
    m_encryption_spec_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1TrainingPipeline::is_encryption_spec_Set() const{
    return m_encryption_spec_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1TrainingPipeline::is_encryption_spec_Valid() const{
    return m_encryption_spec_isValid;
}

QString OAIGoogleCloudAiplatformV1beta1TrainingPipeline::getEndTime() const {
    return m_end_time;
}
void OAIGoogleCloudAiplatformV1beta1TrainingPipeline::setEndTime(const QString &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1TrainingPipeline::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1TrainingPipeline::is_end_time_Valid() const{
    return m_end_time_isValid;
}

OAIGoogleRpcStatus OAIGoogleCloudAiplatformV1beta1TrainingPipeline::getError() const {
    return m_error;
}
void OAIGoogleCloudAiplatformV1beta1TrainingPipeline::setError(const OAIGoogleRpcStatus &error) {
    m_error = error;
    m_error_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1TrainingPipeline::is_error_Set() const{
    return m_error_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1TrainingPipeline::is_error_Valid() const{
    return m_error_isValid;
}

OAIGoogleCloudAiplatformV1beta1InputDataConfig OAIGoogleCloudAiplatformV1beta1TrainingPipeline::getInputDataConfig() const {
    return m_input_data_config;
}
void OAIGoogleCloudAiplatformV1beta1TrainingPipeline::setInputDataConfig(const OAIGoogleCloudAiplatformV1beta1InputDataConfig &input_data_config) {
    m_input_data_config = input_data_config;
    m_input_data_config_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1TrainingPipeline::is_input_data_config_Set() const{
    return m_input_data_config_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1TrainingPipeline::is_input_data_config_Valid() const{
    return m_input_data_config_isValid;
}

QMap<QString, QString> OAIGoogleCloudAiplatformV1beta1TrainingPipeline::getLabels() const {
    return m_labels;
}
void OAIGoogleCloudAiplatformV1beta1TrainingPipeline::setLabels(const QMap<QString, QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1TrainingPipeline::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1TrainingPipeline::is_labels_Valid() const{
    return m_labels_isValid;
}

QString OAIGoogleCloudAiplatformV1beta1TrainingPipeline::getModelId() const {
    return m_model_id;
}
void OAIGoogleCloudAiplatformV1beta1TrainingPipeline::setModelId(const QString &model_id) {
    m_model_id = model_id;
    m_model_id_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1TrainingPipeline::is_model_id_Set() const{
    return m_model_id_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1TrainingPipeline::is_model_id_Valid() const{
    return m_model_id_isValid;
}

OAIGoogleCloudAiplatformV1beta1Model OAIGoogleCloudAiplatformV1beta1TrainingPipeline::getModelToUpload() const {
    return m_model_to_upload;
}
void OAIGoogleCloudAiplatformV1beta1TrainingPipeline::setModelToUpload(const OAIGoogleCloudAiplatformV1beta1Model &model_to_upload) {
    m_model_to_upload = model_to_upload;
    m_model_to_upload_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1TrainingPipeline::is_model_to_upload_Set() const{
    return m_model_to_upload_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1TrainingPipeline::is_model_to_upload_Valid() const{
    return m_model_to_upload_isValid;
}

QString OAIGoogleCloudAiplatformV1beta1TrainingPipeline::getName() const {
    return m_name;
}
void OAIGoogleCloudAiplatformV1beta1TrainingPipeline::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1TrainingPipeline::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1TrainingPipeline::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIGoogleCloudAiplatformV1beta1TrainingPipeline::getParentModel() const {
    return m_parent_model;
}
void OAIGoogleCloudAiplatformV1beta1TrainingPipeline::setParentModel(const QString &parent_model) {
    m_parent_model = parent_model;
    m_parent_model_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1TrainingPipeline::is_parent_model_Set() const{
    return m_parent_model_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1TrainingPipeline::is_parent_model_Valid() const{
    return m_parent_model_isValid;
}

QString OAIGoogleCloudAiplatformV1beta1TrainingPipeline::getStartTime() const {
    return m_start_time;
}
void OAIGoogleCloudAiplatformV1beta1TrainingPipeline::setStartTime(const QString &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1TrainingPipeline::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1TrainingPipeline::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QString OAIGoogleCloudAiplatformV1beta1TrainingPipeline::getState() const {
    return m_state;
}
void OAIGoogleCloudAiplatformV1beta1TrainingPipeline::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1TrainingPipeline::is_state_Set() const{
    return m_state_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1TrainingPipeline::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIGoogleCloudAiplatformV1beta1TrainingPipeline::getTrainingTaskDefinition() const {
    return m_training_task_definition;
}
void OAIGoogleCloudAiplatformV1beta1TrainingPipeline::setTrainingTaskDefinition(const QString &training_task_definition) {
    m_training_task_definition = training_task_definition;
    m_training_task_definition_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1TrainingPipeline::is_training_task_definition_Set() const{
    return m_training_task_definition_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1TrainingPipeline::is_training_task_definition_Valid() const{
    return m_training_task_definition_isValid;
}

QJsonValue OAIGoogleCloudAiplatformV1beta1TrainingPipeline::getTrainingTaskInputs() const {
    return m_training_task_inputs;
}
void OAIGoogleCloudAiplatformV1beta1TrainingPipeline::setTrainingTaskInputs(const QJsonValue &training_task_inputs) {
    m_training_task_inputs = training_task_inputs;
    m_training_task_inputs_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1TrainingPipeline::is_training_task_inputs_Set() const{
    return m_training_task_inputs_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1TrainingPipeline::is_training_task_inputs_Valid() const{
    return m_training_task_inputs_isValid;
}

QJsonValue OAIGoogleCloudAiplatformV1beta1TrainingPipeline::getTrainingTaskMetadata() const {
    return m_training_task_metadata;
}
void OAIGoogleCloudAiplatformV1beta1TrainingPipeline::setTrainingTaskMetadata(const QJsonValue &training_task_metadata) {
    m_training_task_metadata = training_task_metadata;
    m_training_task_metadata_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1TrainingPipeline::is_training_task_metadata_Set() const{
    return m_training_task_metadata_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1TrainingPipeline::is_training_task_metadata_Valid() const{
    return m_training_task_metadata_isValid;
}

QString OAIGoogleCloudAiplatformV1beta1TrainingPipeline::getUpdateTime() const {
    return m_update_time;
}
void OAIGoogleCloudAiplatformV1beta1TrainingPipeline::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1TrainingPipeline::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1TrainingPipeline::is_update_time_Valid() const{
    return m_update_time_isValid;
}

bool OAIGoogleCloudAiplatformV1beta1TrainingPipeline::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_encryption_spec.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_data_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_to_upload.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_model_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_training_task_definition_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_training_task_inputs_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_training_task_metadata_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudAiplatformV1beta1TrainingPipeline::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
