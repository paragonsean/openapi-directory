/**
 * Vertex AI API
 * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILearningGenaiRootFilterMetadataFilterDebugInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILearningGenaiRootFilterMetadataFilterDebugInfo::OAILearningGenaiRootFilterMetadataFilterDebugInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILearningGenaiRootFilterMetadataFilterDebugInfo::OAILearningGenaiRootFilterMetadataFilterDebugInfo() {
    this->initializeModel();
}

OAILearningGenaiRootFilterMetadataFilterDebugInfo::~OAILearningGenaiRootFilterMetadataFilterDebugInfo() {}

void OAILearningGenaiRootFilterMetadataFilterDebugInfo::initializeModel() {

    m_classifier_output_isSet = false;
    m_classifier_output_isValid = false;

    m_default_metadata_isSet = false;
    m_default_metadata_isValid = false;

    m_language_filter_result_isSet = false;
    m_language_filter_result_isValid = false;

    m_rai_output_isSet = false;
    m_rai_output_isValid = false;

    m_rai_result_isSet = false;
    m_rai_result_isValid = false;

    m_rai_signal_isSet = false;
    m_rai_signal_isValid = false;

    m_stream_recitation_result_isSet = false;
    m_stream_recitation_result_isValid = false;

    m_takedown_result_isSet = false;
    m_takedown_result_isValid = false;

    m_toxicity_result_isSet = false;
    m_toxicity_result_isValid = false;
}

void OAILearningGenaiRootFilterMetadataFilterDebugInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILearningGenaiRootFilterMetadataFilterDebugInfo::fromJsonObject(QJsonObject json) {

    m_classifier_output_isValid = ::OpenAPI::fromJsonValue(m_classifier_output, json[QString("classifierOutput")]);
    m_classifier_output_isSet = !json[QString("classifierOutput")].isNull() && m_classifier_output_isValid;

    m_default_metadata_isValid = ::OpenAPI::fromJsonValue(m_default_metadata, json[QString("defaultMetadata")]);
    m_default_metadata_isSet = !json[QString("defaultMetadata")].isNull() && m_default_metadata_isValid;

    m_language_filter_result_isValid = ::OpenAPI::fromJsonValue(m_language_filter_result, json[QString("languageFilterResult")]);
    m_language_filter_result_isSet = !json[QString("languageFilterResult")].isNull() && m_language_filter_result_isValid;

    m_rai_output_isValid = ::OpenAPI::fromJsonValue(m_rai_output, json[QString("raiOutput")]);
    m_rai_output_isSet = !json[QString("raiOutput")].isNull() && m_rai_output_isValid;

    m_rai_result_isValid = ::OpenAPI::fromJsonValue(m_rai_result, json[QString("raiResult")]);
    m_rai_result_isSet = !json[QString("raiResult")].isNull() && m_rai_result_isValid;

    m_rai_signal_isValid = ::OpenAPI::fromJsonValue(m_rai_signal, json[QString("raiSignal")]);
    m_rai_signal_isSet = !json[QString("raiSignal")].isNull() && m_rai_signal_isValid;

    m_stream_recitation_result_isValid = ::OpenAPI::fromJsonValue(m_stream_recitation_result, json[QString("streamRecitationResult")]);
    m_stream_recitation_result_isSet = !json[QString("streamRecitationResult")].isNull() && m_stream_recitation_result_isValid;

    m_takedown_result_isValid = ::OpenAPI::fromJsonValue(m_takedown_result, json[QString("takedownResult")]);
    m_takedown_result_isSet = !json[QString("takedownResult")].isNull() && m_takedown_result_isValid;

    m_toxicity_result_isValid = ::OpenAPI::fromJsonValue(m_toxicity_result, json[QString("toxicityResult")]);
    m_toxicity_result_isSet = !json[QString("toxicityResult")].isNull() && m_toxicity_result_isValid;
}

QString OAILearningGenaiRootFilterMetadataFilterDebugInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILearningGenaiRootFilterMetadataFilterDebugInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_classifier_output.isSet()) {
        obj.insert(QString("classifierOutput"), ::OpenAPI::toJsonValue(m_classifier_output));
    }
    if (m_default_metadata_isSet) {
        obj.insert(QString("defaultMetadata"), ::OpenAPI::toJsonValue(m_default_metadata));
    }
    if (m_language_filter_result.isSet()) {
        obj.insert(QString("languageFilterResult"), ::OpenAPI::toJsonValue(m_language_filter_result));
    }
    if (m_rai_output.isSet()) {
        obj.insert(QString("raiOutput"), ::OpenAPI::toJsonValue(m_rai_output));
    }
    if (m_rai_result.isSet()) {
        obj.insert(QString("raiResult"), ::OpenAPI::toJsonValue(m_rai_result));
    }
    if (m_rai_signal.isSet()) {
        obj.insert(QString("raiSignal"), ::OpenAPI::toJsonValue(m_rai_signal));
    }
    if (m_stream_recitation_result.isSet()) {
        obj.insert(QString("streamRecitationResult"), ::OpenAPI::toJsonValue(m_stream_recitation_result));
    }
    if (m_takedown_result.isSet()) {
        obj.insert(QString("takedownResult"), ::OpenAPI::toJsonValue(m_takedown_result));
    }
    if (m_toxicity_result.isSet()) {
        obj.insert(QString("toxicityResult"), ::OpenAPI::toJsonValue(m_toxicity_result));
    }
    return obj;
}

OAILearningGenaiRootClassifierOutput OAILearningGenaiRootFilterMetadataFilterDebugInfo::getClassifierOutput() const {
    return m_classifier_output;
}
void OAILearningGenaiRootFilterMetadataFilterDebugInfo::setClassifierOutput(const OAILearningGenaiRootClassifierOutput &classifier_output) {
    m_classifier_output = classifier_output;
    m_classifier_output_isSet = true;
}

bool OAILearningGenaiRootFilterMetadataFilterDebugInfo::is_classifier_output_Set() const{
    return m_classifier_output_isSet;
}

bool OAILearningGenaiRootFilterMetadataFilterDebugInfo::is_classifier_output_Valid() const{
    return m_classifier_output_isValid;
}

QString OAILearningGenaiRootFilterMetadataFilterDebugInfo::getDefaultMetadata() const {
    return m_default_metadata;
}
void OAILearningGenaiRootFilterMetadataFilterDebugInfo::setDefaultMetadata(const QString &default_metadata) {
    m_default_metadata = default_metadata;
    m_default_metadata_isSet = true;
}

bool OAILearningGenaiRootFilterMetadataFilterDebugInfo::is_default_metadata_Set() const{
    return m_default_metadata_isSet;
}

bool OAILearningGenaiRootFilterMetadataFilterDebugInfo::is_default_metadata_Valid() const{
    return m_default_metadata_isValid;
}

OAILearningGenaiRootLanguageFilterResult OAILearningGenaiRootFilterMetadataFilterDebugInfo::getLanguageFilterResult() const {
    return m_language_filter_result;
}
void OAILearningGenaiRootFilterMetadataFilterDebugInfo::setLanguageFilterResult(const OAILearningGenaiRootLanguageFilterResult &language_filter_result) {
    m_language_filter_result = language_filter_result;
    m_language_filter_result_isSet = true;
}

bool OAILearningGenaiRootFilterMetadataFilterDebugInfo::is_language_filter_result_Set() const{
    return m_language_filter_result_isSet;
}

bool OAILearningGenaiRootFilterMetadataFilterDebugInfo::is_language_filter_result_Valid() const{
    return m_language_filter_result_isValid;
}

OAILearningGenaiRootRAIOutput OAILearningGenaiRootFilterMetadataFilterDebugInfo::getRaiOutput() const {
    return m_rai_output;
}
void OAILearningGenaiRootFilterMetadataFilterDebugInfo::setRaiOutput(const OAILearningGenaiRootRAIOutput &rai_output) {
    m_rai_output = rai_output;
    m_rai_output_isSet = true;
}

bool OAILearningGenaiRootFilterMetadataFilterDebugInfo::is_rai_output_Set() const{
    return m_rai_output_isSet;
}

bool OAILearningGenaiRootFilterMetadataFilterDebugInfo::is_rai_output_Valid() const{
    return m_rai_output_isValid;
}

OAICloudAiNlLlmProtoServiceRaiResult OAILearningGenaiRootFilterMetadataFilterDebugInfo::getRaiResult() const {
    return m_rai_result;
}
void OAILearningGenaiRootFilterMetadataFilterDebugInfo::setRaiResult(const OAICloudAiNlLlmProtoServiceRaiResult &rai_result) {
    m_rai_result = rai_result;
    m_rai_result_isSet = true;
}

bool OAILearningGenaiRootFilterMetadataFilterDebugInfo::is_rai_result_Set() const{
    return m_rai_result_isSet;
}

bool OAILearningGenaiRootFilterMetadataFilterDebugInfo::is_rai_result_Valid() const{
    return m_rai_result_isValid;
}

OAICloudAiNlLlmProtoServiceRaiSignal OAILearningGenaiRootFilterMetadataFilterDebugInfo::getRaiSignal() const {
    return m_rai_signal;
}
void OAILearningGenaiRootFilterMetadataFilterDebugInfo::setRaiSignal(const OAICloudAiNlLlmProtoServiceRaiSignal &rai_signal) {
    m_rai_signal = rai_signal;
    m_rai_signal_isSet = true;
}

bool OAILearningGenaiRootFilterMetadataFilterDebugInfo::is_rai_signal_Set() const{
    return m_rai_signal_isSet;
}

bool OAILearningGenaiRootFilterMetadataFilterDebugInfo::is_rai_signal_Valid() const{
    return m_rai_signal_isValid;
}

OAILanguageLabsAidaTrustRecitationProtoStreamRecitationResult OAILearningGenaiRootFilterMetadataFilterDebugInfo::getStreamRecitationResult() const {
    return m_stream_recitation_result;
}
void OAILearningGenaiRootFilterMetadataFilterDebugInfo::setStreamRecitationResult(const OAILanguageLabsAidaTrustRecitationProtoStreamRecitationResult &stream_recitation_result) {
    m_stream_recitation_result = stream_recitation_result;
    m_stream_recitation_result_isSet = true;
}

bool OAILearningGenaiRootFilterMetadataFilterDebugInfo::is_stream_recitation_result_Set() const{
    return m_stream_recitation_result_isSet;
}

bool OAILearningGenaiRootFilterMetadataFilterDebugInfo::is_stream_recitation_result_Valid() const{
    return m_stream_recitation_result_isValid;
}

OAILearningGenaiRootTakedownResult OAILearningGenaiRootFilterMetadataFilterDebugInfo::getTakedownResult() const {
    return m_takedown_result;
}
void OAILearningGenaiRootFilterMetadataFilterDebugInfo::setTakedownResult(const OAILearningGenaiRootTakedownResult &takedown_result) {
    m_takedown_result = takedown_result;
    m_takedown_result_isSet = true;
}

bool OAILearningGenaiRootFilterMetadataFilterDebugInfo::is_takedown_result_Set() const{
    return m_takedown_result_isSet;
}

bool OAILearningGenaiRootFilterMetadataFilterDebugInfo::is_takedown_result_Valid() const{
    return m_takedown_result_isValid;
}

OAILearningGenaiRootToxicityResult OAILearningGenaiRootFilterMetadataFilterDebugInfo::getToxicityResult() const {
    return m_toxicity_result;
}
void OAILearningGenaiRootFilterMetadataFilterDebugInfo::setToxicityResult(const OAILearningGenaiRootToxicityResult &toxicity_result) {
    m_toxicity_result = toxicity_result;
    m_toxicity_result_isSet = true;
}

bool OAILearningGenaiRootFilterMetadataFilterDebugInfo::is_toxicity_result_Set() const{
    return m_toxicity_result_isSet;
}

bool OAILearningGenaiRootFilterMetadataFilterDebugInfo::is_toxicity_result_Valid() const{
    return m_toxicity_result_isValid;
}

bool OAILearningGenaiRootFilterMetadataFilterDebugInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_classifier_output.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_metadata_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_filter_result.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_rai_output.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_rai_result.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_rai_signal.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_stream_recitation_result.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_takedown_result.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_toxicity_result.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILearningGenaiRootFilterMetadataFilterDebugInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
