/**
 * Vertex AI API
 * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudAiplatformV1beta1SamplingStrategy.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudAiplatformV1beta1SamplingStrategy::OAIGoogleCloudAiplatformV1beta1SamplingStrategy(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudAiplatformV1beta1SamplingStrategy::OAIGoogleCloudAiplatformV1beta1SamplingStrategy() {
    this->initializeModel();
}

OAIGoogleCloudAiplatformV1beta1SamplingStrategy::~OAIGoogleCloudAiplatformV1beta1SamplingStrategy() {}

void OAIGoogleCloudAiplatformV1beta1SamplingStrategy::initializeModel() {

    m_random_sample_config_isSet = false;
    m_random_sample_config_isValid = false;
}

void OAIGoogleCloudAiplatformV1beta1SamplingStrategy::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudAiplatformV1beta1SamplingStrategy::fromJsonObject(QJsonObject json) {

    m_random_sample_config_isValid = ::OpenAPI::fromJsonValue(m_random_sample_config, json[QString("randomSampleConfig")]);
    m_random_sample_config_isSet = !json[QString("randomSampleConfig")].isNull() && m_random_sample_config_isValid;
}

QString OAIGoogleCloudAiplatformV1beta1SamplingStrategy::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudAiplatformV1beta1SamplingStrategy::asJsonObject() const {
    QJsonObject obj;
    if (m_random_sample_config.isSet()) {
        obj.insert(QString("randomSampleConfig"), ::OpenAPI::toJsonValue(m_random_sample_config));
    }
    return obj;
}

OAIGoogleCloudAiplatformV1beta1SamplingStrategyRandomSampleConfig OAIGoogleCloudAiplatformV1beta1SamplingStrategy::getRandomSampleConfig() const {
    return m_random_sample_config;
}
void OAIGoogleCloudAiplatformV1beta1SamplingStrategy::setRandomSampleConfig(const OAIGoogleCloudAiplatformV1beta1SamplingStrategyRandomSampleConfig &random_sample_config) {
    m_random_sample_config = random_sample_config;
    m_random_sample_config_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1SamplingStrategy::is_random_sample_config_Set() const{
    return m_random_sample_config_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1SamplingStrategy::is_random_sample_config_Valid() const{
    return m_random_sample_config_isValid;
}

bool OAIGoogleCloudAiplatformV1beta1SamplingStrategy::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_random_sample_config.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudAiplatformV1beta1SamplingStrategy::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
