/**
 * Vertex AI API
 * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudAiplatformV1beta1ExportTensorboardTimeSeriesDataRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudAiplatformV1beta1ExportTensorboardTimeSeriesDataRequest::OAIGoogleCloudAiplatformV1beta1ExportTensorboardTimeSeriesDataRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudAiplatformV1beta1ExportTensorboardTimeSeriesDataRequest::OAIGoogleCloudAiplatformV1beta1ExportTensorboardTimeSeriesDataRequest() {
    this->initializeModel();
}

OAIGoogleCloudAiplatformV1beta1ExportTensorboardTimeSeriesDataRequest::~OAIGoogleCloudAiplatformV1beta1ExportTensorboardTimeSeriesDataRequest() {}

void OAIGoogleCloudAiplatformV1beta1ExportTensorboardTimeSeriesDataRequest::initializeModel() {

    m_filter_isSet = false;
    m_filter_isValid = false;

    m_order_by_isSet = false;
    m_order_by_isValid = false;

    m_page_size_isSet = false;
    m_page_size_isValid = false;

    m_page_token_isSet = false;
    m_page_token_isValid = false;
}

void OAIGoogleCloudAiplatformV1beta1ExportTensorboardTimeSeriesDataRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudAiplatformV1beta1ExportTensorboardTimeSeriesDataRequest::fromJsonObject(QJsonObject json) {

    m_filter_isValid = ::OpenAPI::fromJsonValue(m_filter, json[QString("filter")]);
    m_filter_isSet = !json[QString("filter")].isNull() && m_filter_isValid;

    m_order_by_isValid = ::OpenAPI::fromJsonValue(m_order_by, json[QString("orderBy")]);
    m_order_by_isSet = !json[QString("orderBy")].isNull() && m_order_by_isValid;

    m_page_size_isValid = ::OpenAPI::fromJsonValue(m_page_size, json[QString("pageSize")]);
    m_page_size_isSet = !json[QString("pageSize")].isNull() && m_page_size_isValid;

    m_page_token_isValid = ::OpenAPI::fromJsonValue(m_page_token, json[QString("pageToken")]);
    m_page_token_isSet = !json[QString("pageToken")].isNull() && m_page_token_isValid;
}

QString OAIGoogleCloudAiplatformV1beta1ExportTensorboardTimeSeriesDataRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudAiplatformV1beta1ExportTensorboardTimeSeriesDataRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_filter_isSet) {
        obj.insert(QString("filter"), ::OpenAPI::toJsonValue(m_filter));
    }
    if (m_order_by_isSet) {
        obj.insert(QString("orderBy"), ::OpenAPI::toJsonValue(m_order_by));
    }
    if (m_page_size_isSet) {
        obj.insert(QString("pageSize"), ::OpenAPI::toJsonValue(m_page_size));
    }
    if (m_page_token_isSet) {
        obj.insert(QString("pageToken"), ::OpenAPI::toJsonValue(m_page_token));
    }
    return obj;
}

QString OAIGoogleCloudAiplatformV1beta1ExportTensorboardTimeSeriesDataRequest::getFilter() const {
    return m_filter;
}
void OAIGoogleCloudAiplatformV1beta1ExportTensorboardTimeSeriesDataRequest::setFilter(const QString &filter) {
    m_filter = filter;
    m_filter_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1ExportTensorboardTimeSeriesDataRequest::is_filter_Set() const{
    return m_filter_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1ExportTensorboardTimeSeriesDataRequest::is_filter_Valid() const{
    return m_filter_isValid;
}

QString OAIGoogleCloudAiplatformV1beta1ExportTensorboardTimeSeriesDataRequest::getOrderBy() const {
    return m_order_by;
}
void OAIGoogleCloudAiplatformV1beta1ExportTensorboardTimeSeriesDataRequest::setOrderBy(const QString &order_by) {
    m_order_by = order_by;
    m_order_by_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1ExportTensorboardTimeSeriesDataRequest::is_order_by_Set() const{
    return m_order_by_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1ExportTensorboardTimeSeriesDataRequest::is_order_by_Valid() const{
    return m_order_by_isValid;
}

qint32 OAIGoogleCloudAiplatformV1beta1ExportTensorboardTimeSeriesDataRequest::getPageSize() const {
    return m_page_size;
}
void OAIGoogleCloudAiplatformV1beta1ExportTensorboardTimeSeriesDataRequest::setPageSize(const qint32 &page_size) {
    m_page_size = page_size;
    m_page_size_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1ExportTensorboardTimeSeriesDataRequest::is_page_size_Set() const{
    return m_page_size_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1ExportTensorboardTimeSeriesDataRequest::is_page_size_Valid() const{
    return m_page_size_isValid;
}

QString OAIGoogleCloudAiplatformV1beta1ExportTensorboardTimeSeriesDataRequest::getPageToken() const {
    return m_page_token;
}
void OAIGoogleCloudAiplatformV1beta1ExportTensorboardTimeSeriesDataRequest::setPageToken(const QString &page_token) {
    m_page_token = page_token;
    m_page_token_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1ExportTensorboardTimeSeriesDataRequest::is_page_token_Set() const{
    return m_page_token_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1ExportTensorboardTimeSeriesDataRequest::is_page_token_Valid() const{
    return m_page_token_isValid;
}

bool OAIGoogleCloudAiplatformV1beta1ExportTensorboardTimeSeriesDataRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_filter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudAiplatformV1beta1ExportTensorboardTimeSeriesDataRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
