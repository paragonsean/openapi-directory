/**
 * Vertex AI API
 * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudAiplatformV1beta1NearestNeighborQuery.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudAiplatformV1beta1NearestNeighborQuery::OAIGoogleCloudAiplatformV1beta1NearestNeighborQuery(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudAiplatformV1beta1NearestNeighborQuery::OAIGoogleCloudAiplatformV1beta1NearestNeighborQuery() {
    this->initializeModel();
}

OAIGoogleCloudAiplatformV1beta1NearestNeighborQuery::~OAIGoogleCloudAiplatformV1beta1NearestNeighborQuery() {}

void OAIGoogleCloudAiplatformV1beta1NearestNeighborQuery::initializeModel() {

    m_embedding_isSet = false;
    m_embedding_isValid = false;

    m_entity_id_isSet = false;
    m_entity_id_isValid = false;

    m_neighbor_count_isSet = false;
    m_neighbor_count_isValid = false;

    m_parameters_isSet = false;
    m_parameters_isValid = false;

    m_per_crowding_attribute_neighbor_count_isSet = false;
    m_per_crowding_attribute_neighbor_count_isValid = false;

    m_string_filters_isSet = false;
    m_string_filters_isValid = false;
}

void OAIGoogleCloudAiplatformV1beta1NearestNeighborQuery::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudAiplatformV1beta1NearestNeighborQuery::fromJsonObject(QJsonObject json) {

    m_embedding_isValid = ::OpenAPI::fromJsonValue(m_embedding, json[QString("embedding")]);
    m_embedding_isSet = !json[QString("embedding")].isNull() && m_embedding_isValid;

    m_entity_id_isValid = ::OpenAPI::fromJsonValue(m_entity_id, json[QString("entityId")]);
    m_entity_id_isSet = !json[QString("entityId")].isNull() && m_entity_id_isValid;

    m_neighbor_count_isValid = ::OpenAPI::fromJsonValue(m_neighbor_count, json[QString("neighborCount")]);
    m_neighbor_count_isSet = !json[QString("neighborCount")].isNull() && m_neighbor_count_isValid;

    m_parameters_isValid = ::OpenAPI::fromJsonValue(m_parameters, json[QString("parameters")]);
    m_parameters_isSet = !json[QString("parameters")].isNull() && m_parameters_isValid;

    m_per_crowding_attribute_neighbor_count_isValid = ::OpenAPI::fromJsonValue(m_per_crowding_attribute_neighbor_count, json[QString("perCrowdingAttributeNeighborCount")]);
    m_per_crowding_attribute_neighbor_count_isSet = !json[QString("perCrowdingAttributeNeighborCount")].isNull() && m_per_crowding_attribute_neighbor_count_isValid;

    m_string_filters_isValid = ::OpenAPI::fromJsonValue(m_string_filters, json[QString("stringFilters")]);
    m_string_filters_isSet = !json[QString("stringFilters")].isNull() && m_string_filters_isValid;
}

QString OAIGoogleCloudAiplatformV1beta1NearestNeighborQuery::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudAiplatformV1beta1NearestNeighborQuery::asJsonObject() const {
    QJsonObject obj;
    if (m_embedding.isSet()) {
        obj.insert(QString("embedding"), ::OpenAPI::toJsonValue(m_embedding));
    }
    if (m_entity_id_isSet) {
        obj.insert(QString("entityId"), ::OpenAPI::toJsonValue(m_entity_id));
    }
    if (m_neighbor_count_isSet) {
        obj.insert(QString("neighborCount"), ::OpenAPI::toJsonValue(m_neighbor_count));
    }
    if (m_parameters.isSet()) {
        obj.insert(QString("parameters"), ::OpenAPI::toJsonValue(m_parameters));
    }
    if (m_per_crowding_attribute_neighbor_count_isSet) {
        obj.insert(QString("perCrowdingAttributeNeighborCount"), ::OpenAPI::toJsonValue(m_per_crowding_attribute_neighbor_count));
    }
    if (m_string_filters.size() > 0) {
        obj.insert(QString("stringFilters"), ::OpenAPI::toJsonValue(m_string_filters));
    }
    return obj;
}

OAIGoogleCloudAiplatformV1beta1NearestNeighborQueryEmbedding OAIGoogleCloudAiplatformV1beta1NearestNeighborQuery::getEmbedding() const {
    return m_embedding;
}
void OAIGoogleCloudAiplatformV1beta1NearestNeighborQuery::setEmbedding(const OAIGoogleCloudAiplatformV1beta1NearestNeighborQueryEmbedding &embedding) {
    m_embedding = embedding;
    m_embedding_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1NearestNeighborQuery::is_embedding_Set() const{
    return m_embedding_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1NearestNeighborQuery::is_embedding_Valid() const{
    return m_embedding_isValid;
}

QString OAIGoogleCloudAiplatformV1beta1NearestNeighborQuery::getEntityId() const {
    return m_entity_id;
}
void OAIGoogleCloudAiplatformV1beta1NearestNeighborQuery::setEntityId(const QString &entity_id) {
    m_entity_id = entity_id;
    m_entity_id_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1NearestNeighborQuery::is_entity_id_Set() const{
    return m_entity_id_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1NearestNeighborQuery::is_entity_id_Valid() const{
    return m_entity_id_isValid;
}

qint32 OAIGoogleCloudAiplatformV1beta1NearestNeighborQuery::getNeighborCount() const {
    return m_neighbor_count;
}
void OAIGoogleCloudAiplatformV1beta1NearestNeighborQuery::setNeighborCount(const qint32 &neighbor_count) {
    m_neighbor_count = neighbor_count;
    m_neighbor_count_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1NearestNeighborQuery::is_neighbor_count_Set() const{
    return m_neighbor_count_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1NearestNeighborQuery::is_neighbor_count_Valid() const{
    return m_neighbor_count_isValid;
}

OAIGoogleCloudAiplatformV1beta1NearestNeighborQueryParameters OAIGoogleCloudAiplatformV1beta1NearestNeighborQuery::getParameters() const {
    return m_parameters;
}
void OAIGoogleCloudAiplatformV1beta1NearestNeighborQuery::setParameters(const OAIGoogleCloudAiplatformV1beta1NearestNeighborQueryParameters &parameters) {
    m_parameters = parameters;
    m_parameters_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1NearestNeighborQuery::is_parameters_Set() const{
    return m_parameters_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1NearestNeighborQuery::is_parameters_Valid() const{
    return m_parameters_isValid;
}

qint32 OAIGoogleCloudAiplatformV1beta1NearestNeighborQuery::getPerCrowdingAttributeNeighborCount() const {
    return m_per_crowding_attribute_neighbor_count;
}
void OAIGoogleCloudAiplatformV1beta1NearestNeighborQuery::setPerCrowdingAttributeNeighborCount(const qint32 &per_crowding_attribute_neighbor_count) {
    m_per_crowding_attribute_neighbor_count = per_crowding_attribute_neighbor_count;
    m_per_crowding_attribute_neighbor_count_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1NearestNeighborQuery::is_per_crowding_attribute_neighbor_count_Set() const{
    return m_per_crowding_attribute_neighbor_count_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1NearestNeighborQuery::is_per_crowding_attribute_neighbor_count_Valid() const{
    return m_per_crowding_attribute_neighbor_count_isValid;
}

QList<OAIGoogleCloudAiplatformV1beta1NearestNeighborQueryStringFilter> OAIGoogleCloudAiplatformV1beta1NearestNeighborQuery::getStringFilters() const {
    return m_string_filters;
}
void OAIGoogleCloudAiplatformV1beta1NearestNeighborQuery::setStringFilters(const QList<OAIGoogleCloudAiplatformV1beta1NearestNeighborQueryStringFilter> &string_filters) {
    m_string_filters = string_filters;
    m_string_filters_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1NearestNeighborQuery::is_string_filters_Set() const{
    return m_string_filters_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1NearestNeighborQuery::is_string_filters_Valid() const{
    return m_string_filters_isValid;
}

bool OAIGoogleCloudAiplatformV1beta1NearestNeighborQuery::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_embedding.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_neighbor_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_per_crowding_attribute_neighbor_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_string_filters.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudAiplatformV1beta1NearestNeighborQuery::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
