/**
 * Vertex AI API
 * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudAiplatformV1beta1Annotation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudAiplatformV1beta1Annotation::OAIGoogleCloudAiplatformV1beta1Annotation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudAiplatformV1beta1Annotation::OAIGoogleCloudAiplatformV1beta1Annotation() {
    this->initializeModel();
}

OAIGoogleCloudAiplatformV1beta1Annotation::~OAIGoogleCloudAiplatformV1beta1Annotation() {}

void OAIGoogleCloudAiplatformV1beta1Annotation::initializeModel() {

    m_annotation_source_isSet = false;
    m_annotation_source_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_etag_isSet = false;
    m_etag_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_payload_isSet = false;
    m_payload_isValid = false;

    m_payload_schema_uri_isSet = false;
    m_payload_schema_uri_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;
}

void OAIGoogleCloudAiplatformV1beta1Annotation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudAiplatformV1beta1Annotation::fromJsonObject(QJsonObject json) {

    m_annotation_source_isValid = ::OpenAPI::fromJsonValue(m_annotation_source, json[QString("annotationSource")]);
    m_annotation_source_isSet = !json[QString("annotationSource")].isNull() && m_annotation_source_isValid;

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_etag_isValid = ::OpenAPI::fromJsonValue(m_etag, json[QString("etag")]);
    m_etag_isSet = !json[QString("etag")].isNull() && m_etag_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_payload_isValid = ::OpenAPI::fromJsonValue(m_payload, json[QString("payload")]);
    m_payload_isSet = !json[QString("payload")].isNull() && m_payload_isValid;

    m_payload_schema_uri_isValid = ::OpenAPI::fromJsonValue(m_payload_schema_uri, json[QString("payloadSchemaUri")]);
    m_payload_schema_uri_isSet = !json[QString("payloadSchemaUri")].isNull() && m_payload_schema_uri_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;
}

QString OAIGoogleCloudAiplatformV1beta1Annotation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudAiplatformV1beta1Annotation::asJsonObject() const {
    QJsonObject obj;
    if (m_annotation_source.isSet()) {
        obj.insert(QString("annotationSource"), ::OpenAPI::toJsonValue(m_annotation_source));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_etag_isSet) {
        obj.insert(QString("etag"), ::OpenAPI::toJsonValue(m_etag));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_payload_isSet) {
        obj.insert(QString("payload"), ::OpenAPI::toJsonValue(m_payload));
    }
    if (m_payload_schema_uri_isSet) {
        obj.insert(QString("payloadSchemaUri"), ::OpenAPI::toJsonValue(m_payload_schema_uri));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    return obj;
}

OAIGoogleCloudAiplatformV1beta1UserActionReference OAIGoogleCloudAiplatformV1beta1Annotation::getAnnotationSource() const {
    return m_annotation_source;
}
void OAIGoogleCloudAiplatformV1beta1Annotation::setAnnotationSource(const OAIGoogleCloudAiplatformV1beta1UserActionReference &annotation_source) {
    m_annotation_source = annotation_source;
    m_annotation_source_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1Annotation::is_annotation_source_Set() const{
    return m_annotation_source_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1Annotation::is_annotation_source_Valid() const{
    return m_annotation_source_isValid;
}

QString OAIGoogleCloudAiplatformV1beta1Annotation::getCreateTime() const {
    return m_create_time;
}
void OAIGoogleCloudAiplatformV1beta1Annotation::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1Annotation::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1Annotation::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAIGoogleCloudAiplatformV1beta1Annotation::getEtag() const {
    return m_etag;
}
void OAIGoogleCloudAiplatformV1beta1Annotation::setEtag(const QString &etag) {
    m_etag = etag;
    m_etag_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1Annotation::is_etag_Set() const{
    return m_etag_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1Annotation::is_etag_Valid() const{
    return m_etag_isValid;
}

QMap<QString, QString> OAIGoogleCloudAiplatformV1beta1Annotation::getLabels() const {
    return m_labels;
}
void OAIGoogleCloudAiplatformV1beta1Annotation::setLabels(const QMap<QString, QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1Annotation::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1Annotation::is_labels_Valid() const{
    return m_labels_isValid;
}

QString OAIGoogleCloudAiplatformV1beta1Annotation::getName() const {
    return m_name;
}
void OAIGoogleCloudAiplatformV1beta1Annotation::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1Annotation::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1Annotation::is_name_Valid() const{
    return m_name_isValid;
}

QJsonValue OAIGoogleCloudAiplatformV1beta1Annotation::getPayload() const {
    return m_payload;
}
void OAIGoogleCloudAiplatformV1beta1Annotation::setPayload(const QJsonValue &payload) {
    m_payload = payload;
    m_payload_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1Annotation::is_payload_Set() const{
    return m_payload_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1Annotation::is_payload_Valid() const{
    return m_payload_isValid;
}

QString OAIGoogleCloudAiplatformV1beta1Annotation::getPayloadSchemaUri() const {
    return m_payload_schema_uri;
}
void OAIGoogleCloudAiplatformV1beta1Annotation::setPayloadSchemaUri(const QString &payload_schema_uri) {
    m_payload_schema_uri = payload_schema_uri;
    m_payload_schema_uri_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1Annotation::is_payload_schema_uri_Set() const{
    return m_payload_schema_uri_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1Annotation::is_payload_schema_uri_Valid() const{
    return m_payload_schema_uri_isValid;
}

QString OAIGoogleCloudAiplatformV1beta1Annotation::getUpdateTime() const {
    return m_update_time;
}
void OAIGoogleCloudAiplatformV1beta1Annotation::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1Annotation::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1Annotation::is_update_time_Valid() const{
    return m_update_time_isValid;
}

bool OAIGoogleCloudAiplatformV1beta1Annotation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_annotation_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_etag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payload_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payload_schema_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudAiplatformV1beta1Annotation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
