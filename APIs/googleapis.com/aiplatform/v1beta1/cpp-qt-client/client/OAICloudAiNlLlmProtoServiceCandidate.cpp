/**
 * Vertex AI API
 * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICloudAiNlLlmProtoServiceCandidate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICloudAiNlLlmProtoServiceCandidate::OAICloudAiNlLlmProtoServiceCandidate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICloudAiNlLlmProtoServiceCandidate::OAICloudAiNlLlmProtoServiceCandidate() {
    this->initializeModel();
}

OAICloudAiNlLlmProtoServiceCandidate::~OAICloudAiNlLlmProtoServiceCandidate() {}

void OAICloudAiNlLlmProtoServiceCandidate::initializeModel() {

    m_citation_metadata_isSet = false;
    m_citation_metadata_isValid = false;

    m_content_isSet = false;
    m_content_isValid = false;

    m_finish_message_isSet = false;
    m_finish_message_isValid = false;

    m_finish_reason_isSet = false;
    m_finish_reason_isValid = false;

    m_grounding_metadata_isSet = false;
    m_grounding_metadata_isValid = false;

    m_index_isSet = false;
    m_index_isValid = false;

    m_safety_ratings_isSet = false;
    m_safety_ratings_isValid = false;
}

void OAICloudAiNlLlmProtoServiceCandidate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICloudAiNlLlmProtoServiceCandidate::fromJsonObject(QJsonObject json) {

    m_citation_metadata_isValid = ::OpenAPI::fromJsonValue(m_citation_metadata, json[QString("citationMetadata")]);
    m_citation_metadata_isSet = !json[QString("citationMetadata")].isNull() && m_citation_metadata_isValid;

    m_content_isValid = ::OpenAPI::fromJsonValue(m_content, json[QString("content")]);
    m_content_isSet = !json[QString("content")].isNull() && m_content_isValid;

    m_finish_message_isValid = ::OpenAPI::fromJsonValue(m_finish_message, json[QString("finishMessage")]);
    m_finish_message_isSet = !json[QString("finishMessage")].isNull() && m_finish_message_isValid;

    m_finish_reason_isValid = ::OpenAPI::fromJsonValue(m_finish_reason, json[QString("finishReason")]);
    m_finish_reason_isSet = !json[QString("finishReason")].isNull() && m_finish_reason_isValid;

    m_grounding_metadata_isValid = ::OpenAPI::fromJsonValue(m_grounding_metadata, json[QString("groundingMetadata")]);
    m_grounding_metadata_isSet = !json[QString("groundingMetadata")].isNull() && m_grounding_metadata_isValid;

    m_index_isValid = ::OpenAPI::fromJsonValue(m_index, json[QString("index")]);
    m_index_isSet = !json[QString("index")].isNull() && m_index_isValid;

    m_safety_ratings_isValid = ::OpenAPI::fromJsonValue(m_safety_ratings, json[QString("safetyRatings")]);
    m_safety_ratings_isSet = !json[QString("safetyRatings")].isNull() && m_safety_ratings_isValid;
}

QString OAICloudAiNlLlmProtoServiceCandidate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICloudAiNlLlmProtoServiceCandidate::asJsonObject() const {
    QJsonObject obj;
    if (m_citation_metadata.isSet()) {
        obj.insert(QString("citationMetadata"), ::OpenAPI::toJsonValue(m_citation_metadata));
    }
    if (m_content.isSet()) {
        obj.insert(QString("content"), ::OpenAPI::toJsonValue(m_content));
    }
    if (m_finish_message_isSet) {
        obj.insert(QString("finishMessage"), ::OpenAPI::toJsonValue(m_finish_message));
    }
    if (m_finish_reason_isSet) {
        obj.insert(QString("finishReason"), ::OpenAPI::toJsonValue(m_finish_reason));
    }
    if (m_grounding_metadata.isSet()) {
        obj.insert(QString("groundingMetadata"), ::OpenAPI::toJsonValue(m_grounding_metadata));
    }
    if (m_index_isSet) {
        obj.insert(QString("index"), ::OpenAPI::toJsonValue(m_index));
    }
    if (m_safety_ratings.size() > 0) {
        obj.insert(QString("safetyRatings"), ::OpenAPI::toJsonValue(m_safety_ratings));
    }
    return obj;
}

OAICloudAiNlLlmProtoServiceCitationMetadata OAICloudAiNlLlmProtoServiceCandidate::getCitationMetadata() const {
    return m_citation_metadata;
}
void OAICloudAiNlLlmProtoServiceCandidate::setCitationMetadata(const OAICloudAiNlLlmProtoServiceCitationMetadata &citation_metadata) {
    m_citation_metadata = citation_metadata;
    m_citation_metadata_isSet = true;
}

bool OAICloudAiNlLlmProtoServiceCandidate::is_citation_metadata_Set() const{
    return m_citation_metadata_isSet;
}

bool OAICloudAiNlLlmProtoServiceCandidate::is_citation_metadata_Valid() const{
    return m_citation_metadata_isValid;
}

OAICloudAiNlLlmProtoServiceContent OAICloudAiNlLlmProtoServiceCandidate::getContent() const {
    return m_content;
}
void OAICloudAiNlLlmProtoServiceCandidate::setContent(const OAICloudAiNlLlmProtoServiceContent &content) {
    m_content = content;
    m_content_isSet = true;
}

bool OAICloudAiNlLlmProtoServiceCandidate::is_content_Set() const{
    return m_content_isSet;
}

bool OAICloudAiNlLlmProtoServiceCandidate::is_content_Valid() const{
    return m_content_isValid;
}

QString OAICloudAiNlLlmProtoServiceCandidate::getFinishMessage() const {
    return m_finish_message;
}
void OAICloudAiNlLlmProtoServiceCandidate::setFinishMessage(const QString &finish_message) {
    m_finish_message = finish_message;
    m_finish_message_isSet = true;
}

bool OAICloudAiNlLlmProtoServiceCandidate::is_finish_message_Set() const{
    return m_finish_message_isSet;
}

bool OAICloudAiNlLlmProtoServiceCandidate::is_finish_message_Valid() const{
    return m_finish_message_isValid;
}

QString OAICloudAiNlLlmProtoServiceCandidate::getFinishReason() const {
    return m_finish_reason;
}
void OAICloudAiNlLlmProtoServiceCandidate::setFinishReason(const QString &finish_reason) {
    m_finish_reason = finish_reason;
    m_finish_reason_isSet = true;
}

bool OAICloudAiNlLlmProtoServiceCandidate::is_finish_reason_Set() const{
    return m_finish_reason_isSet;
}

bool OAICloudAiNlLlmProtoServiceCandidate::is_finish_reason_Valid() const{
    return m_finish_reason_isValid;
}

OAILearningGenaiRootGroundingMetadata OAICloudAiNlLlmProtoServiceCandidate::getGroundingMetadata() const {
    return m_grounding_metadata;
}
void OAICloudAiNlLlmProtoServiceCandidate::setGroundingMetadata(const OAILearningGenaiRootGroundingMetadata &grounding_metadata) {
    m_grounding_metadata = grounding_metadata;
    m_grounding_metadata_isSet = true;
}

bool OAICloudAiNlLlmProtoServiceCandidate::is_grounding_metadata_Set() const{
    return m_grounding_metadata_isSet;
}

bool OAICloudAiNlLlmProtoServiceCandidate::is_grounding_metadata_Valid() const{
    return m_grounding_metadata_isValid;
}

qint32 OAICloudAiNlLlmProtoServiceCandidate::getIndex() const {
    return m_index;
}
void OAICloudAiNlLlmProtoServiceCandidate::setIndex(const qint32 &index) {
    m_index = index;
    m_index_isSet = true;
}

bool OAICloudAiNlLlmProtoServiceCandidate::is_index_Set() const{
    return m_index_isSet;
}

bool OAICloudAiNlLlmProtoServiceCandidate::is_index_Valid() const{
    return m_index_isValid;
}

QList<OAICloudAiNlLlmProtoServiceSafetyRating> OAICloudAiNlLlmProtoServiceCandidate::getSafetyRatings() const {
    return m_safety_ratings;
}
void OAICloudAiNlLlmProtoServiceCandidate::setSafetyRatings(const QList<OAICloudAiNlLlmProtoServiceSafetyRating> &safety_ratings) {
    m_safety_ratings = safety_ratings;
    m_safety_ratings_isSet = true;
}

bool OAICloudAiNlLlmProtoServiceCandidate::is_safety_ratings_Set() const{
    return m_safety_ratings_isSet;
}

bool OAICloudAiNlLlmProtoServiceCandidate::is_safety_ratings_Valid() const{
    return m_safety_ratings_isValid;
}

bool OAICloudAiNlLlmProtoServiceCandidate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_citation_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_content.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_finish_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_finish_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_grounding_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_safety_ratings.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICloudAiNlLlmProtoServiceCandidate::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
