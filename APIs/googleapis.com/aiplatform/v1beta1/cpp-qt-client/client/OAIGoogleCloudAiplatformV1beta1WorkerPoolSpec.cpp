/**
 * Vertex AI API
 * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudAiplatformV1beta1WorkerPoolSpec.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudAiplatformV1beta1WorkerPoolSpec::OAIGoogleCloudAiplatformV1beta1WorkerPoolSpec(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudAiplatformV1beta1WorkerPoolSpec::OAIGoogleCloudAiplatformV1beta1WorkerPoolSpec() {
    this->initializeModel();
}

OAIGoogleCloudAiplatformV1beta1WorkerPoolSpec::~OAIGoogleCloudAiplatformV1beta1WorkerPoolSpec() {}

void OAIGoogleCloudAiplatformV1beta1WorkerPoolSpec::initializeModel() {

    m_container_spec_isSet = false;
    m_container_spec_isValid = false;

    m_disk_spec_isSet = false;
    m_disk_spec_isValid = false;

    m_machine_spec_isSet = false;
    m_machine_spec_isValid = false;

    m_nfs_mounts_isSet = false;
    m_nfs_mounts_isValid = false;

    m_python_package_spec_isSet = false;
    m_python_package_spec_isValid = false;

    m_replica_count_isSet = false;
    m_replica_count_isValid = false;
}

void OAIGoogleCloudAiplatformV1beta1WorkerPoolSpec::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudAiplatformV1beta1WorkerPoolSpec::fromJsonObject(QJsonObject json) {

    m_container_spec_isValid = ::OpenAPI::fromJsonValue(m_container_spec, json[QString("containerSpec")]);
    m_container_spec_isSet = !json[QString("containerSpec")].isNull() && m_container_spec_isValid;

    m_disk_spec_isValid = ::OpenAPI::fromJsonValue(m_disk_spec, json[QString("diskSpec")]);
    m_disk_spec_isSet = !json[QString("diskSpec")].isNull() && m_disk_spec_isValid;

    m_machine_spec_isValid = ::OpenAPI::fromJsonValue(m_machine_spec, json[QString("machineSpec")]);
    m_machine_spec_isSet = !json[QString("machineSpec")].isNull() && m_machine_spec_isValid;

    m_nfs_mounts_isValid = ::OpenAPI::fromJsonValue(m_nfs_mounts, json[QString("nfsMounts")]);
    m_nfs_mounts_isSet = !json[QString("nfsMounts")].isNull() && m_nfs_mounts_isValid;

    m_python_package_spec_isValid = ::OpenAPI::fromJsonValue(m_python_package_spec, json[QString("pythonPackageSpec")]);
    m_python_package_spec_isSet = !json[QString("pythonPackageSpec")].isNull() && m_python_package_spec_isValid;

    m_replica_count_isValid = ::OpenAPI::fromJsonValue(m_replica_count, json[QString("replicaCount")]);
    m_replica_count_isSet = !json[QString("replicaCount")].isNull() && m_replica_count_isValid;
}

QString OAIGoogleCloudAiplatformV1beta1WorkerPoolSpec::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudAiplatformV1beta1WorkerPoolSpec::asJsonObject() const {
    QJsonObject obj;
    if (m_container_spec.isSet()) {
        obj.insert(QString("containerSpec"), ::OpenAPI::toJsonValue(m_container_spec));
    }
    if (m_disk_spec.isSet()) {
        obj.insert(QString("diskSpec"), ::OpenAPI::toJsonValue(m_disk_spec));
    }
    if (m_machine_spec.isSet()) {
        obj.insert(QString("machineSpec"), ::OpenAPI::toJsonValue(m_machine_spec));
    }
    if (m_nfs_mounts.size() > 0) {
        obj.insert(QString("nfsMounts"), ::OpenAPI::toJsonValue(m_nfs_mounts));
    }
    if (m_python_package_spec.isSet()) {
        obj.insert(QString("pythonPackageSpec"), ::OpenAPI::toJsonValue(m_python_package_spec));
    }
    if (m_replica_count_isSet) {
        obj.insert(QString("replicaCount"), ::OpenAPI::toJsonValue(m_replica_count));
    }
    return obj;
}

OAIGoogleCloudAiplatformV1beta1ContainerSpec OAIGoogleCloudAiplatformV1beta1WorkerPoolSpec::getContainerSpec() const {
    return m_container_spec;
}
void OAIGoogleCloudAiplatformV1beta1WorkerPoolSpec::setContainerSpec(const OAIGoogleCloudAiplatformV1beta1ContainerSpec &container_spec) {
    m_container_spec = container_spec;
    m_container_spec_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1WorkerPoolSpec::is_container_spec_Set() const{
    return m_container_spec_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1WorkerPoolSpec::is_container_spec_Valid() const{
    return m_container_spec_isValid;
}

OAIGoogleCloudAiplatformV1beta1DiskSpec OAIGoogleCloudAiplatformV1beta1WorkerPoolSpec::getDiskSpec() const {
    return m_disk_spec;
}
void OAIGoogleCloudAiplatformV1beta1WorkerPoolSpec::setDiskSpec(const OAIGoogleCloudAiplatformV1beta1DiskSpec &disk_spec) {
    m_disk_spec = disk_spec;
    m_disk_spec_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1WorkerPoolSpec::is_disk_spec_Set() const{
    return m_disk_spec_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1WorkerPoolSpec::is_disk_spec_Valid() const{
    return m_disk_spec_isValid;
}

OAIGoogleCloudAiplatformV1beta1MachineSpec OAIGoogleCloudAiplatformV1beta1WorkerPoolSpec::getMachineSpec() const {
    return m_machine_spec;
}
void OAIGoogleCloudAiplatformV1beta1WorkerPoolSpec::setMachineSpec(const OAIGoogleCloudAiplatformV1beta1MachineSpec &machine_spec) {
    m_machine_spec = machine_spec;
    m_machine_spec_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1WorkerPoolSpec::is_machine_spec_Set() const{
    return m_machine_spec_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1WorkerPoolSpec::is_machine_spec_Valid() const{
    return m_machine_spec_isValid;
}

QList<OAIGoogleCloudAiplatformV1beta1NfsMount> OAIGoogleCloudAiplatformV1beta1WorkerPoolSpec::getNfsMounts() const {
    return m_nfs_mounts;
}
void OAIGoogleCloudAiplatformV1beta1WorkerPoolSpec::setNfsMounts(const QList<OAIGoogleCloudAiplatformV1beta1NfsMount> &nfs_mounts) {
    m_nfs_mounts = nfs_mounts;
    m_nfs_mounts_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1WorkerPoolSpec::is_nfs_mounts_Set() const{
    return m_nfs_mounts_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1WorkerPoolSpec::is_nfs_mounts_Valid() const{
    return m_nfs_mounts_isValid;
}

OAIGoogleCloudAiplatformV1beta1PythonPackageSpec OAIGoogleCloudAiplatformV1beta1WorkerPoolSpec::getPythonPackageSpec() const {
    return m_python_package_spec;
}
void OAIGoogleCloudAiplatformV1beta1WorkerPoolSpec::setPythonPackageSpec(const OAIGoogleCloudAiplatformV1beta1PythonPackageSpec &python_package_spec) {
    m_python_package_spec = python_package_spec;
    m_python_package_spec_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1WorkerPoolSpec::is_python_package_spec_Set() const{
    return m_python_package_spec_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1WorkerPoolSpec::is_python_package_spec_Valid() const{
    return m_python_package_spec_isValid;
}

QString OAIGoogleCloudAiplatformV1beta1WorkerPoolSpec::getReplicaCount() const {
    return m_replica_count;
}
void OAIGoogleCloudAiplatformV1beta1WorkerPoolSpec::setReplicaCount(const QString &replica_count) {
    m_replica_count = replica_count;
    m_replica_count_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1WorkerPoolSpec::is_replica_count_Set() const{
    return m_replica_count_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1WorkerPoolSpec::is_replica_count_Valid() const{
    return m_replica_count_isValid;
}

bool OAIGoogleCloudAiplatformV1beta1WorkerPoolSpec::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_container_spec.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_disk_spec.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_machine_spec.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_nfs_mounts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_python_package_spec.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_replica_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudAiplatformV1beta1WorkerPoolSpec::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
