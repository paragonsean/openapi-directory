/**
 * Vertex AI API
 * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINlpSaftLanguageSpan.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINlpSaftLanguageSpan::OAINlpSaftLanguageSpan(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINlpSaftLanguageSpan::OAINlpSaftLanguageSpan() {
    this->initializeModel();
}

OAINlpSaftLanguageSpan::~OAINlpSaftLanguageSpan() {}

void OAINlpSaftLanguageSpan::initializeModel() {

    m_end_isSet = false;
    m_end_isValid = false;

    m_language_code_isSet = false;
    m_language_code_isValid = false;

    m_locales_isSet = false;
    m_locales_isValid = false;

    m_probability_isSet = false;
    m_probability_isValid = false;

    m_start_isSet = false;
    m_start_isValid = false;
}

void OAINlpSaftLanguageSpan::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINlpSaftLanguageSpan::fromJsonObject(QJsonObject json) {

    m_end_isValid = ::OpenAPI::fromJsonValue(m_end, json[QString("end")]);
    m_end_isSet = !json[QString("end")].isNull() && m_end_isValid;

    m_language_code_isValid = ::OpenAPI::fromJsonValue(m_language_code, json[QString("languageCode")]);
    m_language_code_isSet = !json[QString("languageCode")].isNull() && m_language_code_isValid;

    m_locales_isValid = ::OpenAPI::fromJsonValue(m_locales, json[QString("locales")]);
    m_locales_isSet = !json[QString("locales")].isNull() && m_locales_isValid;

    m_probability_isValid = ::OpenAPI::fromJsonValue(m_probability, json[QString("probability")]);
    m_probability_isSet = !json[QString("probability")].isNull() && m_probability_isValid;

    m_start_isValid = ::OpenAPI::fromJsonValue(m_start, json[QString("start")]);
    m_start_isSet = !json[QString("start")].isNull() && m_start_isValid;
}

QString OAINlpSaftLanguageSpan::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINlpSaftLanguageSpan::asJsonObject() const {
    QJsonObject obj;
    if (m_end_isSet) {
        obj.insert(QString("end"), ::OpenAPI::toJsonValue(m_end));
    }
    if (m_language_code_isSet) {
        obj.insert(QString("languageCode"), ::OpenAPI::toJsonValue(m_language_code));
    }
    if (m_locales.isSet()) {
        obj.insert(QString("locales"), ::OpenAPI::toJsonValue(m_locales));
    }
    if (m_probability_isSet) {
        obj.insert(QString("probability"), ::OpenAPI::toJsonValue(m_probability));
    }
    if (m_start_isSet) {
        obj.insert(QString("start"), ::OpenAPI::toJsonValue(m_start));
    }
    return obj;
}

qint32 OAINlpSaftLanguageSpan::getEnd() const {
    return m_end;
}
void OAINlpSaftLanguageSpan::setEnd(const qint32 &end) {
    m_end = end;
    m_end_isSet = true;
}

bool OAINlpSaftLanguageSpan::is_end_Set() const{
    return m_end_isSet;
}

bool OAINlpSaftLanguageSpan::is_end_Valid() const{
    return m_end_isValid;
}

QString OAINlpSaftLanguageSpan::getLanguageCode() const {
    return m_language_code;
}
void OAINlpSaftLanguageSpan::setLanguageCode(const QString &language_code) {
    m_language_code = language_code;
    m_language_code_isSet = true;
}

bool OAINlpSaftLanguageSpan::is_language_code_Set() const{
    return m_language_code_isSet;
}

bool OAINlpSaftLanguageSpan::is_language_code_Valid() const{
    return m_language_code_isValid;
}

OAINlpSaftLangIdLocalesResult OAINlpSaftLanguageSpan::getLocales() const {
    return m_locales;
}
void OAINlpSaftLanguageSpan::setLocales(const OAINlpSaftLangIdLocalesResult &locales) {
    m_locales = locales;
    m_locales_isSet = true;
}

bool OAINlpSaftLanguageSpan::is_locales_Set() const{
    return m_locales_isSet;
}

bool OAINlpSaftLanguageSpan::is_locales_Valid() const{
    return m_locales_isValid;
}

float OAINlpSaftLanguageSpan::getProbability() const {
    return m_probability;
}
void OAINlpSaftLanguageSpan::setProbability(const float &probability) {
    m_probability = probability;
    m_probability_isSet = true;
}

bool OAINlpSaftLanguageSpan::is_probability_Set() const{
    return m_probability_isSet;
}

bool OAINlpSaftLanguageSpan::is_probability_Valid() const{
    return m_probability_isValid;
}

qint32 OAINlpSaftLanguageSpan::getStart() const {
    return m_start;
}
void OAINlpSaftLanguageSpan::setStart(const qint32 &start) {
    m_start = start;
    m_start_isSet = true;
}

bool OAINlpSaftLanguageSpan::is_start_Set() const{
    return m_start_isSet;
}

bool OAINlpSaftLanguageSpan::is_start_Valid() const{
    return m_start_isValid;
}

bool OAINlpSaftLanguageSpan::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_end_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_locales.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_probability_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINlpSaftLanguageSpan::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
