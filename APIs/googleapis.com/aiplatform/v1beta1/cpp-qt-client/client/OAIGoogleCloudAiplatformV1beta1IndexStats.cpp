/**
 * Vertex AI API
 * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudAiplatformV1beta1IndexStats.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudAiplatformV1beta1IndexStats::OAIGoogleCloudAiplatformV1beta1IndexStats(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudAiplatformV1beta1IndexStats::OAIGoogleCloudAiplatformV1beta1IndexStats() {
    this->initializeModel();
}

OAIGoogleCloudAiplatformV1beta1IndexStats::~OAIGoogleCloudAiplatformV1beta1IndexStats() {}

void OAIGoogleCloudAiplatformV1beta1IndexStats::initializeModel() {

    m_shards_count_isSet = false;
    m_shards_count_isValid = false;

    m_vectors_count_isSet = false;
    m_vectors_count_isValid = false;
}

void OAIGoogleCloudAiplatformV1beta1IndexStats::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudAiplatformV1beta1IndexStats::fromJsonObject(QJsonObject json) {

    m_shards_count_isValid = ::OpenAPI::fromJsonValue(m_shards_count, json[QString("shardsCount")]);
    m_shards_count_isSet = !json[QString("shardsCount")].isNull() && m_shards_count_isValid;

    m_vectors_count_isValid = ::OpenAPI::fromJsonValue(m_vectors_count, json[QString("vectorsCount")]);
    m_vectors_count_isSet = !json[QString("vectorsCount")].isNull() && m_vectors_count_isValid;
}

QString OAIGoogleCloudAiplatformV1beta1IndexStats::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudAiplatformV1beta1IndexStats::asJsonObject() const {
    QJsonObject obj;
    if (m_shards_count_isSet) {
        obj.insert(QString("shardsCount"), ::OpenAPI::toJsonValue(m_shards_count));
    }
    if (m_vectors_count_isSet) {
        obj.insert(QString("vectorsCount"), ::OpenAPI::toJsonValue(m_vectors_count));
    }
    return obj;
}

qint32 OAIGoogleCloudAiplatformV1beta1IndexStats::getShardsCount() const {
    return m_shards_count;
}
void OAIGoogleCloudAiplatformV1beta1IndexStats::setShardsCount(const qint32 &shards_count) {
    m_shards_count = shards_count;
    m_shards_count_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1IndexStats::is_shards_count_Set() const{
    return m_shards_count_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1IndexStats::is_shards_count_Valid() const{
    return m_shards_count_isValid;
}

QString OAIGoogleCloudAiplatformV1beta1IndexStats::getVectorsCount() const {
    return m_vectors_count;
}
void OAIGoogleCloudAiplatformV1beta1IndexStats::setVectorsCount(const QString &vectors_count) {
    m_vectors_count = vectors_count;
    m_vectors_count_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1IndexStats::is_vectors_count_Set() const{
    return m_vectors_count_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1IndexStats::is_vectors_count_Valid() const{
    return m_vectors_count_isValid;
}

bool OAIGoogleCloudAiplatformV1beta1IndexStats::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_shards_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vectors_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudAiplatformV1beta1IndexStats::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
