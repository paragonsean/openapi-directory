/**
 * Vertex AI API
 * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudAiplatformV1beta1NearestNeighborQueryParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudAiplatformV1beta1NearestNeighborQueryParameters::OAIGoogleCloudAiplatformV1beta1NearestNeighborQueryParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudAiplatformV1beta1NearestNeighborQueryParameters::OAIGoogleCloudAiplatformV1beta1NearestNeighborQueryParameters() {
    this->initializeModel();
}

OAIGoogleCloudAiplatformV1beta1NearestNeighborQueryParameters::~OAIGoogleCloudAiplatformV1beta1NearestNeighborQueryParameters() {}

void OAIGoogleCloudAiplatformV1beta1NearestNeighborQueryParameters::initializeModel() {

    m_approximate_neighbor_candidates_isSet = false;
    m_approximate_neighbor_candidates_isValid = false;

    m_leaf_nodes_search_fraction_isSet = false;
    m_leaf_nodes_search_fraction_isValid = false;
}

void OAIGoogleCloudAiplatformV1beta1NearestNeighborQueryParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudAiplatformV1beta1NearestNeighborQueryParameters::fromJsonObject(QJsonObject json) {

    m_approximate_neighbor_candidates_isValid = ::OpenAPI::fromJsonValue(m_approximate_neighbor_candidates, json[QString("approximateNeighborCandidates")]);
    m_approximate_neighbor_candidates_isSet = !json[QString("approximateNeighborCandidates")].isNull() && m_approximate_neighbor_candidates_isValid;

    m_leaf_nodes_search_fraction_isValid = ::OpenAPI::fromJsonValue(m_leaf_nodes_search_fraction, json[QString("leafNodesSearchFraction")]);
    m_leaf_nodes_search_fraction_isSet = !json[QString("leafNodesSearchFraction")].isNull() && m_leaf_nodes_search_fraction_isValid;
}

QString OAIGoogleCloudAiplatformV1beta1NearestNeighborQueryParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudAiplatformV1beta1NearestNeighborQueryParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_approximate_neighbor_candidates_isSet) {
        obj.insert(QString("approximateNeighborCandidates"), ::OpenAPI::toJsonValue(m_approximate_neighbor_candidates));
    }
    if (m_leaf_nodes_search_fraction_isSet) {
        obj.insert(QString("leafNodesSearchFraction"), ::OpenAPI::toJsonValue(m_leaf_nodes_search_fraction));
    }
    return obj;
}

qint32 OAIGoogleCloudAiplatformV1beta1NearestNeighborQueryParameters::getApproximateNeighborCandidates() const {
    return m_approximate_neighbor_candidates;
}
void OAIGoogleCloudAiplatformV1beta1NearestNeighborQueryParameters::setApproximateNeighborCandidates(const qint32 &approximate_neighbor_candidates) {
    m_approximate_neighbor_candidates = approximate_neighbor_candidates;
    m_approximate_neighbor_candidates_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1NearestNeighborQueryParameters::is_approximate_neighbor_candidates_Set() const{
    return m_approximate_neighbor_candidates_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1NearestNeighborQueryParameters::is_approximate_neighbor_candidates_Valid() const{
    return m_approximate_neighbor_candidates_isValid;
}

double OAIGoogleCloudAiplatformV1beta1NearestNeighborQueryParameters::getLeafNodesSearchFraction() const {
    return m_leaf_nodes_search_fraction;
}
void OAIGoogleCloudAiplatformV1beta1NearestNeighborQueryParameters::setLeafNodesSearchFraction(const double &leaf_nodes_search_fraction) {
    m_leaf_nodes_search_fraction = leaf_nodes_search_fraction;
    m_leaf_nodes_search_fraction_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1NearestNeighborQueryParameters::is_leaf_nodes_search_fraction_Set() const{
    return m_leaf_nodes_search_fraction_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1NearestNeighborQueryParameters::is_leaf_nodes_search_fraction_Valid() const{
    return m_leaf_nodes_search_fraction_isValid;
}

bool OAIGoogleCloudAiplatformV1beta1NearestNeighborQueryParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_approximate_neighbor_candidates_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_leaf_nodes_search_fraction_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudAiplatformV1beta1NearestNeighborQueryParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
