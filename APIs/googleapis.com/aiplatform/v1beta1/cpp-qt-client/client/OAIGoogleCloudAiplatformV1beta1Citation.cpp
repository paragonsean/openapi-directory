/**
 * Vertex AI API
 * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudAiplatformV1beta1Citation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudAiplatformV1beta1Citation::OAIGoogleCloudAiplatformV1beta1Citation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudAiplatformV1beta1Citation::OAIGoogleCloudAiplatformV1beta1Citation() {
    this->initializeModel();
}

OAIGoogleCloudAiplatformV1beta1Citation::~OAIGoogleCloudAiplatformV1beta1Citation() {}

void OAIGoogleCloudAiplatformV1beta1Citation::initializeModel() {

    m_end_index_isSet = false;
    m_end_index_isValid = false;

    m_license_isSet = false;
    m_license_isValid = false;

    m_publication_date_isSet = false;
    m_publication_date_isValid = false;

    m_start_index_isSet = false;
    m_start_index_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_uri_isSet = false;
    m_uri_isValid = false;
}

void OAIGoogleCloudAiplatformV1beta1Citation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudAiplatformV1beta1Citation::fromJsonObject(QJsonObject json) {

    m_end_index_isValid = ::OpenAPI::fromJsonValue(m_end_index, json[QString("endIndex")]);
    m_end_index_isSet = !json[QString("endIndex")].isNull() && m_end_index_isValid;

    m_license_isValid = ::OpenAPI::fromJsonValue(m_license, json[QString("license")]);
    m_license_isSet = !json[QString("license")].isNull() && m_license_isValid;

    m_publication_date_isValid = ::OpenAPI::fromJsonValue(m_publication_date, json[QString("publicationDate")]);
    m_publication_date_isSet = !json[QString("publicationDate")].isNull() && m_publication_date_isValid;

    m_start_index_isValid = ::OpenAPI::fromJsonValue(m_start_index, json[QString("startIndex")]);
    m_start_index_isSet = !json[QString("startIndex")].isNull() && m_start_index_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_uri_isValid = ::OpenAPI::fromJsonValue(m_uri, json[QString("uri")]);
    m_uri_isSet = !json[QString("uri")].isNull() && m_uri_isValid;
}

QString OAIGoogleCloudAiplatformV1beta1Citation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudAiplatformV1beta1Citation::asJsonObject() const {
    QJsonObject obj;
    if (m_end_index_isSet) {
        obj.insert(QString("endIndex"), ::OpenAPI::toJsonValue(m_end_index));
    }
    if (m_license_isSet) {
        obj.insert(QString("license"), ::OpenAPI::toJsonValue(m_license));
    }
    if (m_publication_date.isSet()) {
        obj.insert(QString("publicationDate"), ::OpenAPI::toJsonValue(m_publication_date));
    }
    if (m_start_index_isSet) {
        obj.insert(QString("startIndex"), ::OpenAPI::toJsonValue(m_start_index));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_uri_isSet) {
        obj.insert(QString("uri"), ::OpenAPI::toJsonValue(m_uri));
    }
    return obj;
}

qint32 OAIGoogleCloudAiplatformV1beta1Citation::getEndIndex() const {
    return m_end_index;
}
void OAIGoogleCloudAiplatformV1beta1Citation::setEndIndex(const qint32 &end_index) {
    m_end_index = end_index;
    m_end_index_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1Citation::is_end_index_Set() const{
    return m_end_index_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1Citation::is_end_index_Valid() const{
    return m_end_index_isValid;
}

QString OAIGoogleCloudAiplatformV1beta1Citation::getLicense() const {
    return m_license;
}
void OAIGoogleCloudAiplatformV1beta1Citation::setLicense(const QString &license) {
    m_license = license;
    m_license_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1Citation::is_license_Set() const{
    return m_license_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1Citation::is_license_Valid() const{
    return m_license_isValid;
}

OAIGoogleTypeDate OAIGoogleCloudAiplatformV1beta1Citation::getPublicationDate() const {
    return m_publication_date;
}
void OAIGoogleCloudAiplatformV1beta1Citation::setPublicationDate(const OAIGoogleTypeDate &publication_date) {
    m_publication_date = publication_date;
    m_publication_date_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1Citation::is_publication_date_Set() const{
    return m_publication_date_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1Citation::is_publication_date_Valid() const{
    return m_publication_date_isValid;
}

qint32 OAIGoogleCloudAiplatformV1beta1Citation::getStartIndex() const {
    return m_start_index;
}
void OAIGoogleCloudAiplatformV1beta1Citation::setStartIndex(const qint32 &start_index) {
    m_start_index = start_index;
    m_start_index_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1Citation::is_start_index_Set() const{
    return m_start_index_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1Citation::is_start_index_Valid() const{
    return m_start_index_isValid;
}

QString OAIGoogleCloudAiplatformV1beta1Citation::getTitle() const {
    return m_title;
}
void OAIGoogleCloudAiplatformV1beta1Citation::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1Citation::is_title_Set() const{
    return m_title_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1Citation::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIGoogleCloudAiplatformV1beta1Citation::getUri() const {
    return m_uri;
}
void OAIGoogleCloudAiplatformV1beta1Citation::setUri(const QString &uri) {
    m_uri = uri;
    m_uri_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1Citation::is_uri_Set() const{
    return m_uri_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1Citation::is_uri_Valid() const{
    return m_uri_isValid;
}

bool OAIGoogleCloudAiplatformV1beta1Citation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_end_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_license_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_publication_date.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uri_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudAiplatformV1beta1Citation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
