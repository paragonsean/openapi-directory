/**
 * Vertex AI API
 * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILearningGenaiRootLanguageFilterResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILearningGenaiRootLanguageFilterResult::OAILearningGenaiRootLanguageFilterResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILearningGenaiRootLanguageFilterResult::OAILearningGenaiRootLanguageFilterResult() {
    this->initializeModel();
}

OAILearningGenaiRootLanguageFilterResult::~OAILearningGenaiRootLanguageFilterResult() {}

void OAILearningGenaiRootLanguageFilterResult::initializeModel() {

    m_allowed_isSet = false;
    m_allowed_isValid = false;

    m_detected_language_isSet = false;
    m_detected_language_isValid = false;

    m_detected_language_probability_isSet = false;
    m_detected_language_probability_isValid = false;
}

void OAILearningGenaiRootLanguageFilterResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILearningGenaiRootLanguageFilterResult::fromJsonObject(QJsonObject json) {

    m_allowed_isValid = ::OpenAPI::fromJsonValue(m_allowed, json[QString("allowed")]);
    m_allowed_isSet = !json[QString("allowed")].isNull() && m_allowed_isValid;

    m_detected_language_isValid = ::OpenAPI::fromJsonValue(m_detected_language, json[QString("detectedLanguage")]);
    m_detected_language_isSet = !json[QString("detectedLanguage")].isNull() && m_detected_language_isValid;

    m_detected_language_probability_isValid = ::OpenAPI::fromJsonValue(m_detected_language_probability, json[QString("detectedLanguageProbability")]);
    m_detected_language_probability_isSet = !json[QString("detectedLanguageProbability")].isNull() && m_detected_language_probability_isValid;
}

QString OAILearningGenaiRootLanguageFilterResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILearningGenaiRootLanguageFilterResult::asJsonObject() const {
    QJsonObject obj;
    if (m_allowed_isSet) {
        obj.insert(QString("allowed"), ::OpenAPI::toJsonValue(m_allowed));
    }
    if (m_detected_language_isSet) {
        obj.insert(QString("detectedLanguage"), ::OpenAPI::toJsonValue(m_detected_language));
    }
    if (m_detected_language_probability_isSet) {
        obj.insert(QString("detectedLanguageProbability"), ::OpenAPI::toJsonValue(m_detected_language_probability));
    }
    return obj;
}

bool OAILearningGenaiRootLanguageFilterResult::isAllowed() const {
    return m_allowed;
}
void OAILearningGenaiRootLanguageFilterResult::setAllowed(const bool &allowed) {
    m_allowed = allowed;
    m_allowed_isSet = true;
}

bool OAILearningGenaiRootLanguageFilterResult::is_allowed_Set() const{
    return m_allowed_isSet;
}

bool OAILearningGenaiRootLanguageFilterResult::is_allowed_Valid() const{
    return m_allowed_isValid;
}

QString OAILearningGenaiRootLanguageFilterResult::getDetectedLanguage() const {
    return m_detected_language;
}
void OAILearningGenaiRootLanguageFilterResult::setDetectedLanguage(const QString &detected_language) {
    m_detected_language = detected_language;
    m_detected_language_isSet = true;
}

bool OAILearningGenaiRootLanguageFilterResult::is_detected_language_Set() const{
    return m_detected_language_isSet;
}

bool OAILearningGenaiRootLanguageFilterResult::is_detected_language_Valid() const{
    return m_detected_language_isValid;
}

float OAILearningGenaiRootLanguageFilterResult::getDetectedLanguageProbability() const {
    return m_detected_language_probability;
}
void OAILearningGenaiRootLanguageFilterResult::setDetectedLanguageProbability(const float &detected_language_probability) {
    m_detected_language_probability = detected_language_probability;
    m_detected_language_probability_isSet = true;
}

bool OAILearningGenaiRootLanguageFilterResult::is_detected_language_probability_Set() const{
    return m_detected_language_probability_isSet;
}

bool OAILearningGenaiRootLanguageFilterResult::is_detected_language_probability_Valid() const{
    return m_detected_language_probability_isValid;
}

bool OAILearningGenaiRootLanguageFilterResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allowed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_detected_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_detected_language_probability_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILearningGenaiRootLanguageFilterResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
