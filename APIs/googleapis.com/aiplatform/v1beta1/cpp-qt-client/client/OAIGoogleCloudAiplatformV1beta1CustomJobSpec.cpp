/**
 * Vertex AI API
 * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudAiplatformV1beta1CustomJobSpec.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudAiplatformV1beta1CustomJobSpec::OAIGoogleCloudAiplatformV1beta1CustomJobSpec(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudAiplatformV1beta1CustomJobSpec::OAIGoogleCloudAiplatformV1beta1CustomJobSpec() {
    this->initializeModel();
}

OAIGoogleCloudAiplatformV1beta1CustomJobSpec::~OAIGoogleCloudAiplatformV1beta1CustomJobSpec() {}

void OAIGoogleCloudAiplatformV1beta1CustomJobSpec::initializeModel() {

    m_base_output_directory_isSet = false;
    m_base_output_directory_isValid = false;

    m_enable_dashboard_access_isSet = false;
    m_enable_dashboard_access_isValid = false;

    m_enable_web_access_isSet = false;
    m_enable_web_access_isValid = false;

    m_experiment_isSet = false;
    m_experiment_isValid = false;

    m_experiment_run_isSet = false;
    m_experiment_run_isValid = false;

    m_models_isSet = false;
    m_models_isValid = false;

    m_network_isSet = false;
    m_network_isValid = false;

    m_persistent_resource_id_isSet = false;
    m_persistent_resource_id_isValid = false;

    m_protected_artifact_location_id_isSet = false;
    m_protected_artifact_location_id_isValid = false;

    m_reserved_ip_ranges_isSet = false;
    m_reserved_ip_ranges_isValid = false;

    m_scheduling_isSet = false;
    m_scheduling_isValid = false;

    m_service_account_isSet = false;
    m_service_account_isValid = false;

    m_tensorboard_isSet = false;
    m_tensorboard_isValid = false;

    m_worker_pool_specs_isSet = false;
    m_worker_pool_specs_isValid = false;
}

void OAIGoogleCloudAiplatformV1beta1CustomJobSpec::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudAiplatformV1beta1CustomJobSpec::fromJsonObject(QJsonObject json) {

    m_base_output_directory_isValid = ::OpenAPI::fromJsonValue(m_base_output_directory, json[QString("baseOutputDirectory")]);
    m_base_output_directory_isSet = !json[QString("baseOutputDirectory")].isNull() && m_base_output_directory_isValid;

    m_enable_dashboard_access_isValid = ::OpenAPI::fromJsonValue(m_enable_dashboard_access, json[QString("enableDashboardAccess")]);
    m_enable_dashboard_access_isSet = !json[QString("enableDashboardAccess")].isNull() && m_enable_dashboard_access_isValid;

    m_enable_web_access_isValid = ::OpenAPI::fromJsonValue(m_enable_web_access, json[QString("enableWebAccess")]);
    m_enable_web_access_isSet = !json[QString("enableWebAccess")].isNull() && m_enable_web_access_isValid;

    m_experiment_isValid = ::OpenAPI::fromJsonValue(m_experiment, json[QString("experiment")]);
    m_experiment_isSet = !json[QString("experiment")].isNull() && m_experiment_isValid;

    m_experiment_run_isValid = ::OpenAPI::fromJsonValue(m_experiment_run, json[QString("experimentRun")]);
    m_experiment_run_isSet = !json[QString("experimentRun")].isNull() && m_experiment_run_isValid;

    m_models_isValid = ::OpenAPI::fromJsonValue(m_models, json[QString("models")]);
    m_models_isSet = !json[QString("models")].isNull() && m_models_isValid;

    m_network_isValid = ::OpenAPI::fromJsonValue(m_network, json[QString("network")]);
    m_network_isSet = !json[QString("network")].isNull() && m_network_isValid;

    m_persistent_resource_id_isValid = ::OpenAPI::fromJsonValue(m_persistent_resource_id, json[QString("persistentResourceId")]);
    m_persistent_resource_id_isSet = !json[QString("persistentResourceId")].isNull() && m_persistent_resource_id_isValid;

    m_protected_artifact_location_id_isValid = ::OpenAPI::fromJsonValue(m_protected_artifact_location_id, json[QString("protectedArtifactLocationId")]);
    m_protected_artifact_location_id_isSet = !json[QString("protectedArtifactLocationId")].isNull() && m_protected_artifact_location_id_isValid;

    m_reserved_ip_ranges_isValid = ::OpenAPI::fromJsonValue(m_reserved_ip_ranges, json[QString("reservedIpRanges")]);
    m_reserved_ip_ranges_isSet = !json[QString("reservedIpRanges")].isNull() && m_reserved_ip_ranges_isValid;

    m_scheduling_isValid = ::OpenAPI::fromJsonValue(m_scheduling, json[QString("scheduling")]);
    m_scheduling_isSet = !json[QString("scheduling")].isNull() && m_scheduling_isValid;

    m_service_account_isValid = ::OpenAPI::fromJsonValue(m_service_account, json[QString("serviceAccount")]);
    m_service_account_isSet = !json[QString("serviceAccount")].isNull() && m_service_account_isValid;

    m_tensorboard_isValid = ::OpenAPI::fromJsonValue(m_tensorboard, json[QString("tensorboard")]);
    m_tensorboard_isSet = !json[QString("tensorboard")].isNull() && m_tensorboard_isValid;

    m_worker_pool_specs_isValid = ::OpenAPI::fromJsonValue(m_worker_pool_specs, json[QString("workerPoolSpecs")]);
    m_worker_pool_specs_isSet = !json[QString("workerPoolSpecs")].isNull() && m_worker_pool_specs_isValid;
}

QString OAIGoogleCloudAiplatformV1beta1CustomJobSpec::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudAiplatformV1beta1CustomJobSpec::asJsonObject() const {
    QJsonObject obj;
    if (m_base_output_directory.isSet()) {
        obj.insert(QString("baseOutputDirectory"), ::OpenAPI::toJsonValue(m_base_output_directory));
    }
    if (m_enable_dashboard_access_isSet) {
        obj.insert(QString("enableDashboardAccess"), ::OpenAPI::toJsonValue(m_enable_dashboard_access));
    }
    if (m_enable_web_access_isSet) {
        obj.insert(QString("enableWebAccess"), ::OpenAPI::toJsonValue(m_enable_web_access));
    }
    if (m_experiment_isSet) {
        obj.insert(QString("experiment"), ::OpenAPI::toJsonValue(m_experiment));
    }
    if (m_experiment_run_isSet) {
        obj.insert(QString("experimentRun"), ::OpenAPI::toJsonValue(m_experiment_run));
    }
    if (m_models.size() > 0) {
        obj.insert(QString("models"), ::OpenAPI::toJsonValue(m_models));
    }
    if (m_network_isSet) {
        obj.insert(QString("network"), ::OpenAPI::toJsonValue(m_network));
    }
    if (m_persistent_resource_id_isSet) {
        obj.insert(QString("persistentResourceId"), ::OpenAPI::toJsonValue(m_persistent_resource_id));
    }
    if (m_protected_artifact_location_id_isSet) {
        obj.insert(QString("protectedArtifactLocationId"), ::OpenAPI::toJsonValue(m_protected_artifact_location_id));
    }
    if (m_reserved_ip_ranges.size() > 0) {
        obj.insert(QString("reservedIpRanges"), ::OpenAPI::toJsonValue(m_reserved_ip_ranges));
    }
    if (m_scheduling.isSet()) {
        obj.insert(QString("scheduling"), ::OpenAPI::toJsonValue(m_scheduling));
    }
    if (m_service_account_isSet) {
        obj.insert(QString("serviceAccount"), ::OpenAPI::toJsonValue(m_service_account));
    }
    if (m_tensorboard_isSet) {
        obj.insert(QString("tensorboard"), ::OpenAPI::toJsonValue(m_tensorboard));
    }
    if (m_worker_pool_specs.size() > 0) {
        obj.insert(QString("workerPoolSpecs"), ::OpenAPI::toJsonValue(m_worker_pool_specs));
    }
    return obj;
}

OAIGoogleCloudAiplatformV1beta1GcsDestination OAIGoogleCloudAiplatformV1beta1CustomJobSpec::getBaseOutputDirectory() const {
    return m_base_output_directory;
}
void OAIGoogleCloudAiplatformV1beta1CustomJobSpec::setBaseOutputDirectory(const OAIGoogleCloudAiplatformV1beta1GcsDestination &base_output_directory) {
    m_base_output_directory = base_output_directory;
    m_base_output_directory_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1CustomJobSpec::is_base_output_directory_Set() const{
    return m_base_output_directory_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1CustomJobSpec::is_base_output_directory_Valid() const{
    return m_base_output_directory_isValid;
}

bool OAIGoogleCloudAiplatformV1beta1CustomJobSpec::isEnableDashboardAccess() const {
    return m_enable_dashboard_access;
}
void OAIGoogleCloudAiplatformV1beta1CustomJobSpec::setEnableDashboardAccess(const bool &enable_dashboard_access) {
    m_enable_dashboard_access = enable_dashboard_access;
    m_enable_dashboard_access_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1CustomJobSpec::is_enable_dashboard_access_Set() const{
    return m_enable_dashboard_access_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1CustomJobSpec::is_enable_dashboard_access_Valid() const{
    return m_enable_dashboard_access_isValid;
}

bool OAIGoogleCloudAiplatformV1beta1CustomJobSpec::isEnableWebAccess() const {
    return m_enable_web_access;
}
void OAIGoogleCloudAiplatformV1beta1CustomJobSpec::setEnableWebAccess(const bool &enable_web_access) {
    m_enable_web_access = enable_web_access;
    m_enable_web_access_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1CustomJobSpec::is_enable_web_access_Set() const{
    return m_enable_web_access_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1CustomJobSpec::is_enable_web_access_Valid() const{
    return m_enable_web_access_isValid;
}

QString OAIGoogleCloudAiplatformV1beta1CustomJobSpec::getExperiment() const {
    return m_experiment;
}
void OAIGoogleCloudAiplatformV1beta1CustomJobSpec::setExperiment(const QString &experiment) {
    m_experiment = experiment;
    m_experiment_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1CustomJobSpec::is_experiment_Set() const{
    return m_experiment_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1CustomJobSpec::is_experiment_Valid() const{
    return m_experiment_isValid;
}

QString OAIGoogleCloudAiplatformV1beta1CustomJobSpec::getExperimentRun() const {
    return m_experiment_run;
}
void OAIGoogleCloudAiplatformV1beta1CustomJobSpec::setExperimentRun(const QString &experiment_run) {
    m_experiment_run = experiment_run;
    m_experiment_run_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1CustomJobSpec::is_experiment_run_Set() const{
    return m_experiment_run_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1CustomJobSpec::is_experiment_run_Valid() const{
    return m_experiment_run_isValid;
}

QList<QString> OAIGoogleCloudAiplatformV1beta1CustomJobSpec::getModels() const {
    return m_models;
}
void OAIGoogleCloudAiplatformV1beta1CustomJobSpec::setModels(const QList<QString> &models) {
    m_models = models;
    m_models_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1CustomJobSpec::is_models_Set() const{
    return m_models_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1CustomJobSpec::is_models_Valid() const{
    return m_models_isValid;
}

QString OAIGoogleCloudAiplatformV1beta1CustomJobSpec::getNetwork() const {
    return m_network;
}
void OAIGoogleCloudAiplatformV1beta1CustomJobSpec::setNetwork(const QString &network) {
    m_network = network;
    m_network_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1CustomJobSpec::is_network_Set() const{
    return m_network_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1CustomJobSpec::is_network_Valid() const{
    return m_network_isValid;
}

QString OAIGoogleCloudAiplatformV1beta1CustomJobSpec::getPersistentResourceId() const {
    return m_persistent_resource_id;
}
void OAIGoogleCloudAiplatformV1beta1CustomJobSpec::setPersistentResourceId(const QString &persistent_resource_id) {
    m_persistent_resource_id = persistent_resource_id;
    m_persistent_resource_id_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1CustomJobSpec::is_persistent_resource_id_Set() const{
    return m_persistent_resource_id_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1CustomJobSpec::is_persistent_resource_id_Valid() const{
    return m_persistent_resource_id_isValid;
}

QString OAIGoogleCloudAiplatformV1beta1CustomJobSpec::getProtectedArtifactLocationId() const {
    return m_protected_artifact_location_id;
}
void OAIGoogleCloudAiplatformV1beta1CustomJobSpec::setProtectedArtifactLocationId(const QString &protected_artifact_location_id) {
    m_protected_artifact_location_id = protected_artifact_location_id;
    m_protected_artifact_location_id_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1CustomJobSpec::is_protected_artifact_location_id_Set() const{
    return m_protected_artifact_location_id_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1CustomJobSpec::is_protected_artifact_location_id_Valid() const{
    return m_protected_artifact_location_id_isValid;
}

QList<QString> OAIGoogleCloudAiplatformV1beta1CustomJobSpec::getReservedIpRanges() const {
    return m_reserved_ip_ranges;
}
void OAIGoogleCloudAiplatformV1beta1CustomJobSpec::setReservedIpRanges(const QList<QString> &reserved_ip_ranges) {
    m_reserved_ip_ranges = reserved_ip_ranges;
    m_reserved_ip_ranges_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1CustomJobSpec::is_reserved_ip_ranges_Set() const{
    return m_reserved_ip_ranges_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1CustomJobSpec::is_reserved_ip_ranges_Valid() const{
    return m_reserved_ip_ranges_isValid;
}

OAIGoogleCloudAiplatformV1beta1Scheduling OAIGoogleCloudAiplatformV1beta1CustomJobSpec::getScheduling() const {
    return m_scheduling;
}
void OAIGoogleCloudAiplatformV1beta1CustomJobSpec::setScheduling(const OAIGoogleCloudAiplatformV1beta1Scheduling &scheduling) {
    m_scheduling = scheduling;
    m_scheduling_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1CustomJobSpec::is_scheduling_Set() const{
    return m_scheduling_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1CustomJobSpec::is_scheduling_Valid() const{
    return m_scheduling_isValid;
}

QString OAIGoogleCloudAiplatformV1beta1CustomJobSpec::getServiceAccount() const {
    return m_service_account;
}
void OAIGoogleCloudAiplatformV1beta1CustomJobSpec::setServiceAccount(const QString &service_account) {
    m_service_account = service_account;
    m_service_account_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1CustomJobSpec::is_service_account_Set() const{
    return m_service_account_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1CustomJobSpec::is_service_account_Valid() const{
    return m_service_account_isValid;
}

QString OAIGoogleCloudAiplatformV1beta1CustomJobSpec::getTensorboard() const {
    return m_tensorboard;
}
void OAIGoogleCloudAiplatformV1beta1CustomJobSpec::setTensorboard(const QString &tensorboard) {
    m_tensorboard = tensorboard;
    m_tensorboard_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1CustomJobSpec::is_tensorboard_Set() const{
    return m_tensorboard_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1CustomJobSpec::is_tensorboard_Valid() const{
    return m_tensorboard_isValid;
}

QList<OAIGoogleCloudAiplatformV1beta1WorkerPoolSpec> OAIGoogleCloudAiplatformV1beta1CustomJobSpec::getWorkerPoolSpecs() const {
    return m_worker_pool_specs;
}
void OAIGoogleCloudAiplatformV1beta1CustomJobSpec::setWorkerPoolSpecs(const QList<OAIGoogleCloudAiplatformV1beta1WorkerPoolSpec> &worker_pool_specs) {
    m_worker_pool_specs = worker_pool_specs;
    m_worker_pool_specs_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1CustomJobSpec::is_worker_pool_specs_Set() const{
    return m_worker_pool_specs_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1CustomJobSpec::is_worker_pool_specs_Valid() const{
    return m_worker_pool_specs_isValid;
}

bool OAIGoogleCloudAiplatformV1beta1CustomJobSpec::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_base_output_directory.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_dashboard_access_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_web_access_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_experiment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_experiment_run_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_models.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_persistent_resource_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_protected_artifact_location_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reserved_ip_ranges.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_scheduling.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_account_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tensorboard_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_worker_pool_specs.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudAiplatformV1beta1CustomJobSpec::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
