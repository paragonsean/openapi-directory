/**
 * Vertex AI API
 * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudAiplatformV1beta1NearestNeighborSearchOperationMetadataRecordError.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudAiplatformV1beta1NearestNeighborSearchOperationMetadataRecordError::OAIGoogleCloudAiplatformV1beta1NearestNeighborSearchOperationMetadataRecordError(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudAiplatformV1beta1NearestNeighborSearchOperationMetadataRecordError::OAIGoogleCloudAiplatformV1beta1NearestNeighborSearchOperationMetadataRecordError() {
    this->initializeModel();
}

OAIGoogleCloudAiplatformV1beta1NearestNeighborSearchOperationMetadataRecordError::~OAIGoogleCloudAiplatformV1beta1NearestNeighborSearchOperationMetadataRecordError() {}

void OAIGoogleCloudAiplatformV1beta1NearestNeighborSearchOperationMetadataRecordError::initializeModel() {

    m_embedding_id_isSet = false;
    m_embedding_id_isValid = false;

    m_error_message_isSet = false;
    m_error_message_isValid = false;

    m_error_type_isSet = false;
    m_error_type_isValid = false;

    m_raw_record_isSet = false;
    m_raw_record_isValid = false;

    m_source_gcs_uri_isSet = false;
    m_source_gcs_uri_isValid = false;
}

void OAIGoogleCloudAiplatformV1beta1NearestNeighborSearchOperationMetadataRecordError::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudAiplatformV1beta1NearestNeighborSearchOperationMetadataRecordError::fromJsonObject(QJsonObject json) {

    m_embedding_id_isValid = ::OpenAPI::fromJsonValue(m_embedding_id, json[QString("embeddingId")]);
    m_embedding_id_isSet = !json[QString("embeddingId")].isNull() && m_embedding_id_isValid;

    m_error_message_isValid = ::OpenAPI::fromJsonValue(m_error_message, json[QString("errorMessage")]);
    m_error_message_isSet = !json[QString("errorMessage")].isNull() && m_error_message_isValid;

    m_error_type_isValid = ::OpenAPI::fromJsonValue(m_error_type, json[QString("errorType")]);
    m_error_type_isSet = !json[QString("errorType")].isNull() && m_error_type_isValid;

    m_raw_record_isValid = ::OpenAPI::fromJsonValue(m_raw_record, json[QString("rawRecord")]);
    m_raw_record_isSet = !json[QString("rawRecord")].isNull() && m_raw_record_isValid;

    m_source_gcs_uri_isValid = ::OpenAPI::fromJsonValue(m_source_gcs_uri, json[QString("sourceGcsUri")]);
    m_source_gcs_uri_isSet = !json[QString("sourceGcsUri")].isNull() && m_source_gcs_uri_isValid;
}

QString OAIGoogleCloudAiplatformV1beta1NearestNeighborSearchOperationMetadataRecordError::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudAiplatformV1beta1NearestNeighborSearchOperationMetadataRecordError::asJsonObject() const {
    QJsonObject obj;
    if (m_embedding_id_isSet) {
        obj.insert(QString("embeddingId"), ::OpenAPI::toJsonValue(m_embedding_id));
    }
    if (m_error_message_isSet) {
        obj.insert(QString("errorMessage"), ::OpenAPI::toJsonValue(m_error_message));
    }
    if (m_error_type_isSet) {
        obj.insert(QString("errorType"), ::OpenAPI::toJsonValue(m_error_type));
    }
    if (m_raw_record_isSet) {
        obj.insert(QString("rawRecord"), ::OpenAPI::toJsonValue(m_raw_record));
    }
    if (m_source_gcs_uri_isSet) {
        obj.insert(QString("sourceGcsUri"), ::OpenAPI::toJsonValue(m_source_gcs_uri));
    }
    return obj;
}

QString OAIGoogleCloudAiplatformV1beta1NearestNeighborSearchOperationMetadataRecordError::getEmbeddingId() const {
    return m_embedding_id;
}
void OAIGoogleCloudAiplatformV1beta1NearestNeighborSearchOperationMetadataRecordError::setEmbeddingId(const QString &embedding_id) {
    m_embedding_id = embedding_id;
    m_embedding_id_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1NearestNeighborSearchOperationMetadataRecordError::is_embedding_id_Set() const{
    return m_embedding_id_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1NearestNeighborSearchOperationMetadataRecordError::is_embedding_id_Valid() const{
    return m_embedding_id_isValid;
}

QString OAIGoogleCloudAiplatformV1beta1NearestNeighborSearchOperationMetadataRecordError::getErrorMessage() const {
    return m_error_message;
}
void OAIGoogleCloudAiplatformV1beta1NearestNeighborSearchOperationMetadataRecordError::setErrorMessage(const QString &error_message) {
    m_error_message = error_message;
    m_error_message_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1NearestNeighborSearchOperationMetadataRecordError::is_error_message_Set() const{
    return m_error_message_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1NearestNeighborSearchOperationMetadataRecordError::is_error_message_Valid() const{
    return m_error_message_isValid;
}

QString OAIGoogleCloudAiplatformV1beta1NearestNeighborSearchOperationMetadataRecordError::getErrorType() const {
    return m_error_type;
}
void OAIGoogleCloudAiplatformV1beta1NearestNeighborSearchOperationMetadataRecordError::setErrorType(const QString &error_type) {
    m_error_type = error_type;
    m_error_type_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1NearestNeighborSearchOperationMetadataRecordError::is_error_type_Set() const{
    return m_error_type_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1NearestNeighborSearchOperationMetadataRecordError::is_error_type_Valid() const{
    return m_error_type_isValid;
}

QString OAIGoogleCloudAiplatformV1beta1NearestNeighborSearchOperationMetadataRecordError::getRawRecord() const {
    return m_raw_record;
}
void OAIGoogleCloudAiplatformV1beta1NearestNeighborSearchOperationMetadataRecordError::setRawRecord(const QString &raw_record) {
    m_raw_record = raw_record;
    m_raw_record_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1NearestNeighborSearchOperationMetadataRecordError::is_raw_record_Set() const{
    return m_raw_record_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1NearestNeighborSearchOperationMetadataRecordError::is_raw_record_Valid() const{
    return m_raw_record_isValid;
}

QString OAIGoogleCloudAiplatformV1beta1NearestNeighborSearchOperationMetadataRecordError::getSourceGcsUri() const {
    return m_source_gcs_uri;
}
void OAIGoogleCloudAiplatformV1beta1NearestNeighborSearchOperationMetadataRecordError::setSourceGcsUri(const QString &source_gcs_uri) {
    m_source_gcs_uri = source_gcs_uri;
    m_source_gcs_uri_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1NearestNeighborSearchOperationMetadataRecordError::is_source_gcs_uri_Set() const{
    return m_source_gcs_uri_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1NearestNeighborSearchOperationMetadataRecordError::is_source_gcs_uri_Valid() const{
    return m_source_gcs_uri_isValid;
}

bool OAIGoogleCloudAiplatformV1beta1NearestNeighborSearchOperationMetadataRecordError::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_embedding_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_raw_record_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_gcs_uri_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudAiplatformV1beta1NearestNeighborSearchOperationMetadataRecordError::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
