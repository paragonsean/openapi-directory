/**
 * Vertex AI API
 * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudAiplatformV1beta1NearestNeighborSearchOperationMetadata.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudAiplatformV1beta1NearestNeighborSearchOperationMetadata::OAIGoogleCloudAiplatformV1beta1NearestNeighborSearchOperationMetadata(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudAiplatformV1beta1NearestNeighborSearchOperationMetadata::OAIGoogleCloudAiplatformV1beta1NearestNeighborSearchOperationMetadata() {
    this->initializeModel();
}

OAIGoogleCloudAiplatformV1beta1NearestNeighborSearchOperationMetadata::~OAIGoogleCloudAiplatformV1beta1NearestNeighborSearchOperationMetadata() {}

void OAIGoogleCloudAiplatformV1beta1NearestNeighborSearchOperationMetadata::initializeModel() {

    m_content_validation_stats_isSet = false;
    m_content_validation_stats_isValid = false;

    m_data_bytes_count_isSet = false;
    m_data_bytes_count_isValid = false;
}

void OAIGoogleCloudAiplatformV1beta1NearestNeighborSearchOperationMetadata::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudAiplatformV1beta1NearestNeighborSearchOperationMetadata::fromJsonObject(QJsonObject json) {

    m_content_validation_stats_isValid = ::OpenAPI::fromJsonValue(m_content_validation_stats, json[QString("contentValidationStats")]);
    m_content_validation_stats_isSet = !json[QString("contentValidationStats")].isNull() && m_content_validation_stats_isValid;

    m_data_bytes_count_isValid = ::OpenAPI::fromJsonValue(m_data_bytes_count, json[QString("dataBytesCount")]);
    m_data_bytes_count_isSet = !json[QString("dataBytesCount")].isNull() && m_data_bytes_count_isValid;
}

QString OAIGoogleCloudAiplatformV1beta1NearestNeighborSearchOperationMetadata::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudAiplatformV1beta1NearestNeighborSearchOperationMetadata::asJsonObject() const {
    QJsonObject obj;
    if (m_content_validation_stats.size() > 0) {
        obj.insert(QString("contentValidationStats"), ::OpenAPI::toJsonValue(m_content_validation_stats));
    }
    if (m_data_bytes_count_isSet) {
        obj.insert(QString("dataBytesCount"), ::OpenAPI::toJsonValue(m_data_bytes_count));
    }
    return obj;
}

QList<OAIGoogleCloudAiplatformV1beta1NearestNeighborSearchOperationMetadataContentValidationStats> OAIGoogleCloudAiplatformV1beta1NearestNeighborSearchOperationMetadata::getContentValidationStats() const {
    return m_content_validation_stats;
}
void OAIGoogleCloudAiplatformV1beta1NearestNeighborSearchOperationMetadata::setContentValidationStats(const QList<OAIGoogleCloudAiplatformV1beta1NearestNeighborSearchOperationMetadataContentValidationStats> &content_validation_stats) {
    m_content_validation_stats = content_validation_stats;
    m_content_validation_stats_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1NearestNeighborSearchOperationMetadata::is_content_validation_stats_Set() const{
    return m_content_validation_stats_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1NearestNeighborSearchOperationMetadata::is_content_validation_stats_Valid() const{
    return m_content_validation_stats_isValid;
}

QString OAIGoogleCloudAiplatformV1beta1NearestNeighborSearchOperationMetadata::getDataBytesCount() const {
    return m_data_bytes_count;
}
void OAIGoogleCloudAiplatformV1beta1NearestNeighborSearchOperationMetadata::setDataBytesCount(const QString &data_bytes_count) {
    m_data_bytes_count = data_bytes_count;
    m_data_bytes_count_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1NearestNeighborSearchOperationMetadata::is_data_bytes_count_Set() const{
    return m_data_bytes_count_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1NearestNeighborSearchOperationMetadata::is_data_bytes_count_Valid() const{
    return m_data_bytes_count_isValid;
}

bool OAIGoogleCloudAiplatformV1beta1NearestNeighborSearchOperationMetadata::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_content_validation_stats.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_bytes_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudAiplatformV1beta1NearestNeighborSearchOperationMetadata::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
