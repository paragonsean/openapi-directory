/**
 * Vertex AI API
 * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudAiplatformV1beta1BatchReadFeatureValuesRequestEntityTypeSpec.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudAiplatformV1beta1BatchReadFeatureValuesRequestEntityTypeSpec::OAIGoogleCloudAiplatformV1beta1BatchReadFeatureValuesRequestEntityTypeSpec(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudAiplatformV1beta1BatchReadFeatureValuesRequestEntityTypeSpec::OAIGoogleCloudAiplatformV1beta1BatchReadFeatureValuesRequestEntityTypeSpec() {
    this->initializeModel();
}

OAIGoogleCloudAiplatformV1beta1BatchReadFeatureValuesRequestEntityTypeSpec::~OAIGoogleCloudAiplatformV1beta1BatchReadFeatureValuesRequestEntityTypeSpec() {}

void OAIGoogleCloudAiplatformV1beta1BatchReadFeatureValuesRequestEntityTypeSpec::initializeModel() {

    m_entity_type_id_isSet = false;
    m_entity_type_id_isValid = false;

    m_feature_selector_isSet = false;
    m_feature_selector_isValid = false;

    m_settings_isSet = false;
    m_settings_isValid = false;
}

void OAIGoogleCloudAiplatformV1beta1BatchReadFeatureValuesRequestEntityTypeSpec::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudAiplatformV1beta1BatchReadFeatureValuesRequestEntityTypeSpec::fromJsonObject(QJsonObject json) {

    m_entity_type_id_isValid = ::OpenAPI::fromJsonValue(m_entity_type_id, json[QString("entityTypeId")]);
    m_entity_type_id_isSet = !json[QString("entityTypeId")].isNull() && m_entity_type_id_isValid;

    m_feature_selector_isValid = ::OpenAPI::fromJsonValue(m_feature_selector, json[QString("featureSelector")]);
    m_feature_selector_isSet = !json[QString("featureSelector")].isNull() && m_feature_selector_isValid;

    m_settings_isValid = ::OpenAPI::fromJsonValue(m_settings, json[QString("settings")]);
    m_settings_isSet = !json[QString("settings")].isNull() && m_settings_isValid;
}

QString OAIGoogleCloudAiplatformV1beta1BatchReadFeatureValuesRequestEntityTypeSpec::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudAiplatformV1beta1BatchReadFeatureValuesRequestEntityTypeSpec::asJsonObject() const {
    QJsonObject obj;
    if (m_entity_type_id_isSet) {
        obj.insert(QString("entityTypeId"), ::OpenAPI::toJsonValue(m_entity_type_id));
    }
    if (m_feature_selector.isSet()) {
        obj.insert(QString("featureSelector"), ::OpenAPI::toJsonValue(m_feature_selector));
    }
    if (m_settings.size() > 0) {
        obj.insert(QString("settings"), ::OpenAPI::toJsonValue(m_settings));
    }
    return obj;
}

QString OAIGoogleCloudAiplatformV1beta1BatchReadFeatureValuesRequestEntityTypeSpec::getEntityTypeId() const {
    return m_entity_type_id;
}
void OAIGoogleCloudAiplatformV1beta1BatchReadFeatureValuesRequestEntityTypeSpec::setEntityTypeId(const QString &entity_type_id) {
    m_entity_type_id = entity_type_id;
    m_entity_type_id_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1BatchReadFeatureValuesRequestEntityTypeSpec::is_entity_type_id_Set() const{
    return m_entity_type_id_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1BatchReadFeatureValuesRequestEntityTypeSpec::is_entity_type_id_Valid() const{
    return m_entity_type_id_isValid;
}

OAIGoogleCloudAiplatformV1beta1FeatureSelector OAIGoogleCloudAiplatformV1beta1BatchReadFeatureValuesRequestEntityTypeSpec::getFeatureSelector() const {
    return m_feature_selector;
}
void OAIGoogleCloudAiplatformV1beta1BatchReadFeatureValuesRequestEntityTypeSpec::setFeatureSelector(const OAIGoogleCloudAiplatformV1beta1FeatureSelector &feature_selector) {
    m_feature_selector = feature_selector;
    m_feature_selector_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1BatchReadFeatureValuesRequestEntityTypeSpec::is_feature_selector_Set() const{
    return m_feature_selector_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1BatchReadFeatureValuesRequestEntityTypeSpec::is_feature_selector_Valid() const{
    return m_feature_selector_isValid;
}

QList<OAIGoogleCloudAiplatformV1beta1DestinationFeatureSetting> OAIGoogleCloudAiplatformV1beta1BatchReadFeatureValuesRequestEntityTypeSpec::getSettings() const {
    return m_settings;
}
void OAIGoogleCloudAiplatformV1beta1BatchReadFeatureValuesRequestEntityTypeSpec::setSettings(const QList<OAIGoogleCloudAiplatformV1beta1DestinationFeatureSetting> &settings) {
    m_settings = settings;
    m_settings_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1BatchReadFeatureValuesRequestEntityTypeSpec::is_settings_Set() const{
    return m_settings_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1BatchReadFeatureValuesRequestEntityTypeSpec::is_settings_Valid() const{
    return m_settings_isValid;
}

bool OAIGoogleCloudAiplatformV1beta1BatchReadFeatureValuesRequestEntityTypeSpec::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_entity_type_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_feature_selector.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_settings.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudAiplatformV1beta1BatchReadFeatureValuesRequestEntityTypeSpec::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
