/**
 * Vertex AI API
 * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICloudAiLargeModelsVisionRaiInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICloudAiLargeModelsVisionRaiInfo::OAICloudAiLargeModelsVisionRaiInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICloudAiLargeModelsVisionRaiInfo::OAICloudAiLargeModelsVisionRaiInfo() {
    this->initializeModel();
}

OAICloudAiLargeModelsVisionRaiInfo::~OAICloudAiLargeModelsVisionRaiInfo() {}

void OAICloudAiLargeModelsVisionRaiInfo::initializeModel() {

    m_rai_categories_isSet = false;
    m_rai_categories_isValid = false;

    m_scores_isSet = false;
    m_scores_isValid = false;
}

void OAICloudAiLargeModelsVisionRaiInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICloudAiLargeModelsVisionRaiInfo::fromJsonObject(QJsonObject json) {

    m_rai_categories_isValid = ::OpenAPI::fromJsonValue(m_rai_categories, json[QString("raiCategories")]);
    m_rai_categories_isSet = !json[QString("raiCategories")].isNull() && m_rai_categories_isValid;

    m_scores_isValid = ::OpenAPI::fromJsonValue(m_scores, json[QString("scores")]);
    m_scores_isSet = !json[QString("scores")].isNull() && m_scores_isValid;
}

QString OAICloudAiLargeModelsVisionRaiInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICloudAiLargeModelsVisionRaiInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_rai_categories.size() > 0) {
        obj.insert(QString("raiCategories"), ::OpenAPI::toJsonValue(m_rai_categories));
    }
    if (m_scores.size() > 0) {
        obj.insert(QString("scores"), ::OpenAPI::toJsonValue(m_scores));
    }
    return obj;
}

QList<QString> OAICloudAiLargeModelsVisionRaiInfo::getRaiCategories() const {
    return m_rai_categories;
}
void OAICloudAiLargeModelsVisionRaiInfo::setRaiCategories(const QList<QString> &rai_categories) {
    m_rai_categories = rai_categories;
    m_rai_categories_isSet = true;
}

bool OAICloudAiLargeModelsVisionRaiInfo::is_rai_categories_Set() const{
    return m_rai_categories_isSet;
}

bool OAICloudAiLargeModelsVisionRaiInfo::is_rai_categories_Valid() const{
    return m_rai_categories_isValid;
}

QList<float> OAICloudAiLargeModelsVisionRaiInfo::getScores() const {
    return m_scores;
}
void OAICloudAiLargeModelsVisionRaiInfo::setScores(const QList<float> &scores) {
    m_scores = scores;
    m_scores_isSet = true;
}

bool OAICloudAiLargeModelsVisionRaiInfo::is_scores_Set() const{
    return m_scores_isSet;
}

bool OAICloudAiLargeModelsVisionRaiInfo::is_scores_Valid() const{
    return m_scores_isValid;
}

bool OAICloudAiLargeModelsVisionRaiInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_rai_categories.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_scores.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICloudAiLargeModelsVisionRaiInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
