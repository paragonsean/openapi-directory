/**
 * Vertex AI API
 * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudAiplatformV1beta1SampleConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudAiplatformV1beta1SampleConfig::OAIGoogleCloudAiplatformV1beta1SampleConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudAiplatformV1beta1SampleConfig::OAIGoogleCloudAiplatformV1beta1SampleConfig() {
    this->initializeModel();
}

OAIGoogleCloudAiplatformV1beta1SampleConfig::~OAIGoogleCloudAiplatformV1beta1SampleConfig() {}

void OAIGoogleCloudAiplatformV1beta1SampleConfig::initializeModel() {

    m_following_batch_sample_percentage_isSet = false;
    m_following_batch_sample_percentage_isValid = false;

    m_initial_batch_sample_percentage_isSet = false;
    m_initial_batch_sample_percentage_isValid = false;

    m_sample_strategy_isSet = false;
    m_sample_strategy_isValid = false;
}

void OAIGoogleCloudAiplatformV1beta1SampleConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudAiplatformV1beta1SampleConfig::fromJsonObject(QJsonObject json) {

    m_following_batch_sample_percentage_isValid = ::OpenAPI::fromJsonValue(m_following_batch_sample_percentage, json[QString("followingBatchSamplePercentage")]);
    m_following_batch_sample_percentage_isSet = !json[QString("followingBatchSamplePercentage")].isNull() && m_following_batch_sample_percentage_isValid;

    m_initial_batch_sample_percentage_isValid = ::OpenAPI::fromJsonValue(m_initial_batch_sample_percentage, json[QString("initialBatchSamplePercentage")]);
    m_initial_batch_sample_percentage_isSet = !json[QString("initialBatchSamplePercentage")].isNull() && m_initial_batch_sample_percentage_isValid;

    m_sample_strategy_isValid = ::OpenAPI::fromJsonValue(m_sample_strategy, json[QString("sampleStrategy")]);
    m_sample_strategy_isSet = !json[QString("sampleStrategy")].isNull() && m_sample_strategy_isValid;
}

QString OAIGoogleCloudAiplatformV1beta1SampleConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudAiplatformV1beta1SampleConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_following_batch_sample_percentage_isSet) {
        obj.insert(QString("followingBatchSamplePercentage"), ::OpenAPI::toJsonValue(m_following_batch_sample_percentage));
    }
    if (m_initial_batch_sample_percentage_isSet) {
        obj.insert(QString("initialBatchSamplePercentage"), ::OpenAPI::toJsonValue(m_initial_batch_sample_percentage));
    }
    if (m_sample_strategy_isSet) {
        obj.insert(QString("sampleStrategy"), ::OpenAPI::toJsonValue(m_sample_strategy));
    }
    return obj;
}

qint32 OAIGoogleCloudAiplatformV1beta1SampleConfig::getFollowingBatchSamplePercentage() const {
    return m_following_batch_sample_percentage;
}
void OAIGoogleCloudAiplatformV1beta1SampleConfig::setFollowingBatchSamplePercentage(const qint32 &following_batch_sample_percentage) {
    m_following_batch_sample_percentage = following_batch_sample_percentage;
    m_following_batch_sample_percentage_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1SampleConfig::is_following_batch_sample_percentage_Set() const{
    return m_following_batch_sample_percentage_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1SampleConfig::is_following_batch_sample_percentage_Valid() const{
    return m_following_batch_sample_percentage_isValid;
}

qint32 OAIGoogleCloudAiplatformV1beta1SampleConfig::getInitialBatchSamplePercentage() const {
    return m_initial_batch_sample_percentage;
}
void OAIGoogleCloudAiplatformV1beta1SampleConfig::setInitialBatchSamplePercentage(const qint32 &initial_batch_sample_percentage) {
    m_initial_batch_sample_percentage = initial_batch_sample_percentage;
    m_initial_batch_sample_percentage_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1SampleConfig::is_initial_batch_sample_percentage_Set() const{
    return m_initial_batch_sample_percentage_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1SampleConfig::is_initial_batch_sample_percentage_Valid() const{
    return m_initial_batch_sample_percentage_isValid;
}

QString OAIGoogleCloudAiplatformV1beta1SampleConfig::getSampleStrategy() const {
    return m_sample_strategy;
}
void OAIGoogleCloudAiplatformV1beta1SampleConfig::setSampleStrategy(const QString &sample_strategy) {
    m_sample_strategy = sample_strategy;
    m_sample_strategy_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1SampleConfig::is_sample_strategy_Set() const{
    return m_sample_strategy_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1SampleConfig::is_sample_strategy_Valid() const{
    return m_sample_strategy_isValid;
}

bool OAIGoogleCloudAiplatformV1beta1SampleConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_following_batch_sample_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_initial_batch_sample_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sample_strategy_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudAiplatformV1beta1SampleConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
