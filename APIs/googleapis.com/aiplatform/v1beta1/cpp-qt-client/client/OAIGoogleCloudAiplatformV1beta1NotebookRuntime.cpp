/**
 * Vertex AI API
 * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudAiplatformV1beta1NotebookRuntime.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudAiplatformV1beta1NotebookRuntime::OAIGoogleCloudAiplatformV1beta1NotebookRuntime(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudAiplatformV1beta1NotebookRuntime::OAIGoogleCloudAiplatformV1beta1NotebookRuntime() {
    this->initializeModel();
}

OAIGoogleCloudAiplatformV1beta1NotebookRuntime::~OAIGoogleCloudAiplatformV1beta1NotebookRuntime() {}

void OAIGoogleCloudAiplatformV1beta1NotebookRuntime::initializeModel() {

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_expiration_time_isSet = false;
    m_expiration_time_isValid = false;

    m_health_state_isSet = false;
    m_health_state_isValid = false;

    m_is_upgradable_isSet = false;
    m_is_upgradable_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_network_tags_isSet = false;
    m_network_tags_isValid = false;

    m_notebook_runtime_template_ref_isSet = false;
    m_notebook_runtime_template_ref_isValid = false;

    m_notebook_runtime_type_isSet = false;
    m_notebook_runtime_type_isValid = false;

    m_proxy_uri_isSet = false;
    m_proxy_uri_isValid = false;

    m_reservation_affinity_isSet = false;
    m_reservation_affinity_isValid = false;

    m_runtime_state_isSet = false;
    m_runtime_state_isValid = false;

    m_runtime_user_isSet = false;
    m_runtime_user_isValid = false;

    m_service_account_isSet = false;
    m_service_account_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIGoogleCloudAiplatformV1beta1NotebookRuntime::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudAiplatformV1beta1NotebookRuntime::fromJsonObject(QJsonObject json) {

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_expiration_time_isValid = ::OpenAPI::fromJsonValue(m_expiration_time, json[QString("expirationTime")]);
    m_expiration_time_isSet = !json[QString("expirationTime")].isNull() && m_expiration_time_isValid;

    m_health_state_isValid = ::OpenAPI::fromJsonValue(m_health_state, json[QString("healthState")]);
    m_health_state_isSet = !json[QString("healthState")].isNull() && m_health_state_isValid;

    m_is_upgradable_isValid = ::OpenAPI::fromJsonValue(m_is_upgradable, json[QString("isUpgradable")]);
    m_is_upgradable_isSet = !json[QString("isUpgradable")].isNull() && m_is_upgradable_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_network_tags_isValid = ::OpenAPI::fromJsonValue(m_network_tags, json[QString("networkTags")]);
    m_network_tags_isSet = !json[QString("networkTags")].isNull() && m_network_tags_isValid;

    m_notebook_runtime_template_ref_isValid = ::OpenAPI::fromJsonValue(m_notebook_runtime_template_ref, json[QString("notebookRuntimeTemplateRef")]);
    m_notebook_runtime_template_ref_isSet = !json[QString("notebookRuntimeTemplateRef")].isNull() && m_notebook_runtime_template_ref_isValid;

    m_notebook_runtime_type_isValid = ::OpenAPI::fromJsonValue(m_notebook_runtime_type, json[QString("notebookRuntimeType")]);
    m_notebook_runtime_type_isSet = !json[QString("notebookRuntimeType")].isNull() && m_notebook_runtime_type_isValid;

    m_proxy_uri_isValid = ::OpenAPI::fromJsonValue(m_proxy_uri, json[QString("proxyUri")]);
    m_proxy_uri_isSet = !json[QString("proxyUri")].isNull() && m_proxy_uri_isValid;

    m_reservation_affinity_isValid = ::OpenAPI::fromJsonValue(m_reservation_affinity, json[QString("reservationAffinity")]);
    m_reservation_affinity_isSet = !json[QString("reservationAffinity")].isNull() && m_reservation_affinity_isValid;

    m_runtime_state_isValid = ::OpenAPI::fromJsonValue(m_runtime_state, json[QString("runtimeState")]);
    m_runtime_state_isSet = !json[QString("runtimeState")].isNull() && m_runtime_state_isValid;

    m_runtime_user_isValid = ::OpenAPI::fromJsonValue(m_runtime_user, json[QString("runtimeUser")]);
    m_runtime_user_isSet = !json[QString("runtimeUser")].isNull() && m_runtime_user_isValid;

    m_service_account_isValid = ::OpenAPI::fromJsonValue(m_service_account, json[QString("serviceAccount")]);
    m_service_account_isSet = !json[QString("serviceAccount")].isNull() && m_service_account_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIGoogleCloudAiplatformV1beta1NotebookRuntime::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudAiplatformV1beta1NotebookRuntime::asJsonObject() const {
    QJsonObject obj;
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_expiration_time_isSet) {
        obj.insert(QString("expirationTime"), ::OpenAPI::toJsonValue(m_expiration_time));
    }
    if (m_health_state_isSet) {
        obj.insert(QString("healthState"), ::OpenAPI::toJsonValue(m_health_state));
    }
    if (m_is_upgradable_isSet) {
        obj.insert(QString("isUpgradable"), ::OpenAPI::toJsonValue(m_is_upgradable));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_network_tags.size() > 0) {
        obj.insert(QString("networkTags"), ::OpenAPI::toJsonValue(m_network_tags));
    }
    if (m_notebook_runtime_template_ref.isSet()) {
        obj.insert(QString("notebookRuntimeTemplateRef"), ::OpenAPI::toJsonValue(m_notebook_runtime_template_ref));
    }
    if (m_notebook_runtime_type_isSet) {
        obj.insert(QString("notebookRuntimeType"), ::OpenAPI::toJsonValue(m_notebook_runtime_type));
    }
    if (m_proxy_uri_isSet) {
        obj.insert(QString("proxyUri"), ::OpenAPI::toJsonValue(m_proxy_uri));
    }
    if (m_reservation_affinity.isSet()) {
        obj.insert(QString("reservationAffinity"), ::OpenAPI::toJsonValue(m_reservation_affinity));
    }
    if (m_runtime_state_isSet) {
        obj.insert(QString("runtimeState"), ::OpenAPI::toJsonValue(m_runtime_state));
    }
    if (m_runtime_user_isSet) {
        obj.insert(QString("runtimeUser"), ::OpenAPI::toJsonValue(m_runtime_user));
    }
    if (m_service_account_isSet) {
        obj.insert(QString("serviceAccount"), ::OpenAPI::toJsonValue(m_service_account));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QString OAIGoogleCloudAiplatformV1beta1NotebookRuntime::getCreateTime() const {
    return m_create_time;
}
void OAIGoogleCloudAiplatformV1beta1NotebookRuntime::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1NotebookRuntime::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1NotebookRuntime::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAIGoogleCloudAiplatformV1beta1NotebookRuntime::getDescription() const {
    return m_description;
}
void OAIGoogleCloudAiplatformV1beta1NotebookRuntime::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1NotebookRuntime::is_description_Set() const{
    return m_description_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1NotebookRuntime::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIGoogleCloudAiplatformV1beta1NotebookRuntime::getDisplayName() const {
    return m_display_name;
}
void OAIGoogleCloudAiplatformV1beta1NotebookRuntime::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1NotebookRuntime::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1NotebookRuntime::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIGoogleCloudAiplatformV1beta1NotebookRuntime::getExpirationTime() const {
    return m_expiration_time;
}
void OAIGoogleCloudAiplatformV1beta1NotebookRuntime::setExpirationTime(const QString &expiration_time) {
    m_expiration_time = expiration_time;
    m_expiration_time_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1NotebookRuntime::is_expiration_time_Set() const{
    return m_expiration_time_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1NotebookRuntime::is_expiration_time_Valid() const{
    return m_expiration_time_isValid;
}

QString OAIGoogleCloudAiplatformV1beta1NotebookRuntime::getHealthState() const {
    return m_health_state;
}
void OAIGoogleCloudAiplatformV1beta1NotebookRuntime::setHealthState(const QString &health_state) {
    m_health_state = health_state;
    m_health_state_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1NotebookRuntime::is_health_state_Set() const{
    return m_health_state_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1NotebookRuntime::is_health_state_Valid() const{
    return m_health_state_isValid;
}

bool OAIGoogleCloudAiplatformV1beta1NotebookRuntime::isIsUpgradable() const {
    return m_is_upgradable;
}
void OAIGoogleCloudAiplatformV1beta1NotebookRuntime::setIsUpgradable(const bool &is_upgradable) {
    m_is_upgradable = is_upgradable;
    m_is_upgradable_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1NotebookRuntime::is_is_upgradable_Set() const{
    return m_is_upgradable_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1NotebookRuntime::is_is_upgradable_Valid() const{
    return m_is_upgradable_isValid;
}

QMap<QString, QString> OAIGoogleCloudAiplatformV1beta1NotebookRuntime::getLabels() const {
    return m_labels;
}
void OAIGoogleCloudAiplatformV1beta1NotebookRuntime::setLabels(const QMap<QString, QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1NotebookRuntime::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1NotebookRuntime::is_labels_Valid() const{
    return m_labels_isValid;
}

QString OAIGoogleCloudAiplatformV1beta1NotebookRuntime::getName() const {
    return m_name;
}
void OAIGoogleCloudAiplatformV1beta1NotebookRuntime::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1NotebookRuntime::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1NotebookRuntime::is_name_Valid() const{
    return m_name_isValid;
}

QList<QString> OAIGoogleCloudAiplatformV1beta1NotebookRuntime::getNetworkTags() const {
    return m_network_tags;
}
void OAIGoogleCloudAiplatformV1beta1NotebookRuntime::setNetworkTags(const QList<QString> &network_tags) {
    m_network_tags = network_tags;
    m_network_tags_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1NotebookRuntime::is_network_tags_Set() const{
    return m_network_tags_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1NotebookRuntime::is_network_tags_Valid() const{
    return m_network_tags_isValid;
}

OAIGoogleCloudAiplatformV1beta1NotebookRuntimeTemplateRef OAIGoogleCloudAiplatformV1beta1NotebookRuntime::getNotebookRuntimeTemplateRef() const {
    return m_notebook_runtime_template_ref;
}
void OAIGoogleCloudAiplatformV1beta1NotebookRuntime::setNotebookRuntimeTemplateRef(const OAIGoogleCloudAiplatformV1beta1NotebookRuntimeTemplateRef &notebook_runtime_template_ref) {
    m_notebook_runtime_template_ref = notebook_runtime_template_ref;
    m_notebook_runtime_template_ref_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1NotebookRuntime::is_notebook_runtime_template_ref_Set() const{
    return m_notebook_runtime_template_ref_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1NotebookRuntime::is_notebook_runtime_template_ref_Valid() const{
    return m_notebook_runtime_template_ref_isValid;
}

QString OAIGoogleCloudAiplatformV1beta1NotebookRuntime::getNotebookRuntimeType() const {
    return m_notebook_runtime_type;
}
void OAIGoogleCloudAiplatformV1beta1NotebookRuntime::setNotebookRuntimeType(const QString &notebook_runtime_type) {
    m_notebook_runtime_type = notebook_runtime_type;
    m_notebook_runtime_type_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1NotebookRuntime::is_notebook_runtime_type_Set() const{
    return m_notebook_runtime_type_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1NotebookRuntime::is_notebook_runtime_type_Valid() const{
    return m_notebook_runtime_type_isValid;
}

QString OAIGoogleCloudAiplatformV1beta1NotebookRuntime::getProxyUri() const {
    return m_proxy_uri;
}
void OAIGoogleCloudAiplatformV1beta1NotebookRuntime::setProxyUri(const QString &proxy_uri) {
    m_proxy_uri = proxy_uri;
    m_proxy_uri_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1NotebookRuntime::is_proxy_uri_Set() const{
    return m_proxy_uri_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1NotebookRuntime::is_proxy_uri_Valid() const{
    return m_proxy_uri_isValid;
}

OAIGoogleCloudAiplatformV1beta1NotebookReservationAffinity OAIGoogleCloudAiplatformV1beta1NotebookRuntime::getReservationAffinity() const {
    return m_reservation_affinity;
}
void OAIGoogleCloudAiplatformV1beta1NotebookRuntime::setReservationAffinity(const OAIGoogleCloudAiplatformV1beta1NotebookReservationAffinity &reservation_affinity) {
    m_reservation_affinity = reservation_affinity;
    m_reservation_affinity_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1NotebookRuntime::is_reservation_affinity_Set() const{
    return m_reservation_affinity_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1NotebookRuntime::is_reservation_affinity_Valid() const{
    return m_reservation_affinity_isValid;
}

QString OAIGoogleCloudAiplatformV1beta1NotebookRuntime::getRuntimeState() const {
    return m_runtime_state;
}
void OAIGoogleCloudAiplatformV1beta1NotebookRuntime::setRuntimeState(const QString &runtime_state) {
    m_runtime_state = runtime_state;
    m_runtime_state_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1NotebookRuntime::is_runtime_state_Set() const{
    return m_runtime_state_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1NotebookRuntime::is_runtime_state_Valid() const{
    return m_runtime_state_isValid;
}

QString OAIGoogleCloudAiplatformV1beta1NotebookRuntime::getRuntimeUser() const {
    return m_runtime_user;
}
void OAIGoogleCloudAiplatformV1beta1NotebookRuntime::setRuntimeUser(const QString &runtime_user) {
    m_runtime_user = runtime_user;
    m_runtime_user_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1NotebookRuntime::is_runtime_user_Set() const{
    return m_runtime_user_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1NotebookRuntime::is_runtime_user_Valid() const{
    return m_runtime_user_isValid;
}

QString OAIGoogleCloudAiplatformV1beta1NotebookRuntime::getServiceAccount() const {
    return m_service_account;
}
void OAIGoogleCloudAiplatformV1beta1NotebookRuntime::setServiceAccount(const QString &service_account) {
    m_service_account = service_account;
    m_service_account_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1NotebookRuntime::is_service_account_Set() const{
    return m_service_account_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1NotebookRuntime::is_service_account_Valid() const{
    return m_service_account_isValid;
}

QString OAIGoogleCloudAiplatformV1beta1NotebookRuntime::getUpdateTime() const {
    return m_update_time;
}
void OAIGoogleCloudAiplatformV1beta1NotebookRuntime::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1NotebookRuntime::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1NotebookRuntime::is_update_time_Valid() const{
    return m_update_time_isValid;
}

QString OAIGoogleCloudAiplatformV1beta1NotebookRuntime::getVersion() const {
    return m_version;
}
void OAIGoogleCloudAiplatformV1beta1NotebookRuntime::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1NotebookRuntime::is_version_Set() const{
    return m_version_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1NotebookRuntime::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIGoogleCloudAiplatformV1beta1NotebookRuntime::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiration_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_health_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_upgradable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_notebook_runtime_template_ref.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_notebook_runtime_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_proxy_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reservation_affinity.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_runtime_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_runtime_user_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_account_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudAiplatformV1beta1NotebookRuntime::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
