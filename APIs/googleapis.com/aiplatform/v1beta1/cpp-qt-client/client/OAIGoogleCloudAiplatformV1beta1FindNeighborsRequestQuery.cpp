/**
 * Vertex AI API
 * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudAiplatformV1beta1FindNeighborsRequestQuery.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudAiplatformV1beta1FindNeighborsRequestQuery::OAIGoogleCloudAiplatformV1beta1FindNeighborsRequestQuery(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudAiplatformV1beta1FindNeighborsRequestQuery::OAIGoogleCloudAiplatformV1beta1FindNeighborsRequestQuery() {
    this->initializeModel();
}

OAIGoogleCloudAiplatformV1beta1FindNeighborsRequestQuery::~OAIGoogleCloudAiplatformV1beta1FindNeighborsRequestQuery() {}

void OAIGoogleCloudAiplatformV1beta1FindNeighborsRequestQuery::initializeModel() {

    m_approximate_neighbor_count_isSet = false;
    m_approximate_neighbor_count_isValid = false;

    m_datapoint_isSet = false;
    m_datapoint_isValid = false;

    m_fraction_leaf_nodes_to_search_override_isSet = false;
    m_fraction_leaf_nodes_to_search_override_isValid = false;

    m_neighbor_count_isSet = false;
    m_neighbor_count_isValid = false;

    m_per_crowding_attribute_neighbor_count_isSet = false;
    m_per_crowding_attribute_neighbor_count_isValid = false;
}

void OAIGoogleCloudAiplatformV1beta1FindNeighborsRequestQuery::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudAiplatformV1beta1FindNeighborsRequestQuery::fromJsonObject(QJsonObject json) {

    m_approximate_neighbor_count_isValid = ::OpenAPI::fromJsonValue(m_approximate_neighbor_count, json[QString("approximateNeighborCount")]);
    m_approximate_neighbor_count_isSet = !json[QString("approximateNeighborCount")].isNull() && m_approximate_neighbor_count_isValid;

    m_datapoint_isValid = ::OpenAPI::fromJsonValue(m_datapoint, json[QString("datapoint")]);
    m_datapoint_isSet = !json[QString("datapoint")].isNull() && m_datapoint_isValid;

    m_fraction_leaf_nodes_to_search_override_isValid = ::OpenAPI::fromJsonValue(m_fraction_leaf_nodes_to_search_override, json[QString("fractionLeafNodesToSearchOverride")]);
    m_fraction_leaf_nodes_to_search_override_isSet = !json[QString("fractionLeafNodesToSearchOverride")].isNull() && m_fraction_leaf_nodes_to_search_override_isValid;

    m_neighbor_count_isValid = ::OpenAPI::fromJsonValue(m_neighbor_count, json[QString("neighborCount")]);
    m_neighbor_count_isSet = !json[QString("neighborCount")].isNull() && m_neighbor_count_isValid;

    m_per_crowding_attribute_neighbor_count_isValid = ::OpenAPI::fromJsonValue(m_per_crowding_attribute_neighbor_count, json[QString("perCrowdingAttributeNeighborCount")]);
    m_per_crowding_attribute_neighbor_count_isSet = !json[QString("perCrowdingAttributeNeighborCount")].isNull() && m_per_crowding_attribute_neighbor_count_isValid;
}

QString OAIGoogleCloudAiplatformV1beta1FindNeighborsRequestQuery::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudAiplatformV1beta1FindNeighborsRequestQuery::asJsonObject() const {
    QJsonObject obj;
    if (m_approximate_neighbor_count_isSet) {
        obj.insert(QString("approximateNeighborCount"), ::OpenAPI::toJsonValue(m_approximate_neighbor_count));
    }
    if (m_datapoint.isSet()) {
        obj.insert(QString("datapoint"), ::OpenAPI::toJsonValue(m_datapoint));
    }
    if (m_fraction_leaf_nodes_to_search_override_isSet) {
        obj.insert(QString("fractionLeafNodesToSearchOverride"), ::OpenAPI::toJsonValue(m_fraction_leaf_nodes_to_search_override));
    }
    if (m_neighbor_count_isSet) {
        obj.insert(QString("neighborCount"), ::OpenAPI::toJsonValue(m_neighbor_count));
    }
    if (m_per_crowding_attribute_neighbor_count_isSet) {
        obj.insert(QString("perCrowdingAttributeNeighborCount"), ::OpenAPI::toJsonValue(m_per_crowding_attribute_neighbor_count));
    }
    return obj;
}

qint32 OAIGoogleCloudAiplatformV1beta1FindNeighborsRequestQuery::getApproximateNeighborCount() const {
    return m_approximate_neighbor_count;
}
void OAIGoogleCloudAiplatformV1beta1FindNeighborsRequestQuery::setApproximateNeighborCount(const qint32 &approximate_neighbor_count) {
    m_approximate_neighbor_count = approximate_neighbor_count;
    m_approximate_neighbor_count_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1FindNeighborsRequestQuery::is_approximate_neighbor_count_Set() const{
    return m_approximate_neighbor_count_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1FindNeighborsRequestQuery::is_approximate_neighbor_count_Valid() const{
    return m_approximate_neighbor_count_isValid;
}

OAIGoogleCloudAiplatformV1beta1IndexDatapoint OAIGoogleCloudAiplatformV1beta1FindNeighborsRequestQuery::getDatapoint() const {
    return m_datapoint;
}
void OAIGoogleCloudAiplatformV1beta1FindNeighborsRequestQuery::setDatapoint(const OAIGoogleCloudAiplatformV1beta1IndexDatapoint &datapoint) {
    m_datapoint = datapoint;
    m_datapoint_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1FindNeighborsRequestQuery::is_datapoint_Set() const{
    return m_datapoint_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1FindNeighborsRequestQuery::is_datapoint_Valid() const{
    return m_datapoint_isValid;
}

double OAIGoogleCloudAiplatformV1beta1FindNeighborsRequestQuery::getFractionLeafNodesToSearchOverride() const {
    return m_fraction_leaf_nodes_to_search_override;
}
void OAIGoogleCloudAiplatformV1beta1FindNeighborsRequestQuery::setFractionLeafNodesToSearchOverride(const double &fraction_leaf_nodes_to_search_override) {
    m_fraction_leaf_nodes_to_search_override = fraction_leaf_nodes_to_search_override;
    m_fraction_leaf_nodes_to_search_override_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1FindNeighborsRequestQuery::is_fraction_leaf_nodes_to_search_override_Set() const{
    return m_fraction_leaf_nodes_to_search_override_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1FindNeighborsRequestQuery::is_fraction_leaf_nodes_to_search_override_Valid() const{
    return m_fraction_leaf_nodes_to_search_override_isValid;
}

qint32 OAIGoogleCloudAiplatformV1beta1FindNeighborsRequestQuery::getNeighborCount() const {
    return m_neighbor_count;
}
void OAIGoogleCloudAiplatformV1beta1FindNeighborsRequestQuery::setNeighborCount(const qint32 &neighbor_count) {
    m_neighbor_count = neighbor_count;
    m_neighbor_count_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1FindNeighborsRequestQuery::is_neighbor_count_Set() const{
    return m_neighbor_count_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1FindNeighborsRequestQuery::is_neighbor_count_Valid() const{
    return m_neighbor_count_isValid;
}

qint32 OAIGoogleCloudAiplatformV1beta1FindNeighborsRequestQuery::getPerCrowdingAttributeNeighborCount() const {
    return m_per_crowding_attribute_neighbor_count;
}
void OAIGoogleCloudAiplatformV1beta1FindNeighborsRequestQuery::setPerCrowdingAttributeNeighborCount(const qint32 &per_crowding_attribute_neighbor_count) {
    m_per_crowding_attribute_neighbor_count = per_crowding_attribute_neighbor_count;
    m_per_crowding_attribute_neighbor_count_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1FindNeighborsRequestQuery::is_per_crowding_attribute_neighbor_count_Set() const{
    return m_per_crowding_attribute_neighbor_count_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1FindNeighborsRequestQuery::is_per_crowding_attribute_neighbor_count_Valid() const{
    return m_per_crowding_attribute_neighbor_count_isValid;
}

bool OAIGoogleCloudAiplatformV1beta1FindNeighborsRequestQuery::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_approximate_neighbor_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_datapoint.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_fraction_leaf_nodes_to_search_override_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_neighbor_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_per_crowding_attribute_neighbor_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudAiplatformV1beta1FindNeighborsRequestQuery::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
