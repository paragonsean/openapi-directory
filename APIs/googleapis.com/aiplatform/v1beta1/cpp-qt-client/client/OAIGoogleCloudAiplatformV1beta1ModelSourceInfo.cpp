/**
 * Vertex AI API
 * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudAiplatformV1beta1ModelSourceInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudAiplatformV1beta1ModelSourceInfo::OAIGoogleCloudAiplatformV1beta1ModelSourceInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudAiplatformV1beta1ModelSourceInfo::OAIGoogleCloudAiplatformV1beta1ModelSourceInfo() {
    this->initializeModel();
}

OAIGoogleCloudAiplatformV1beta1ModelSourceInfo::~OAIGoogleCloudAiplatformV1beta1ModelSourceInfo() {}

void OAIGoogleCloudAiplatformV1beta1ModelSourceInfo::initializeModel() {

    m_copy_isSet = false;
    m_copy_isValid = false;

    m_source_type_isSet = false;
    m_source_type_isValid = false;
}

void OAIGoogleCloudAiplatformV1beta1ModelSourceInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudAiplatformV1beta1ModelSourceInfo::fromJsonObject(QJsonObject json) {

    m_copy_isValid = ::OpenAPI::fromJsonValue(m_copy, json[QString("copy")]);
    m_copy_isSet = !json[QString("copy")].isNull() && m_copy_isValid;

    m_source_type_isValid = ::OpenAPI::fromJsonValue(m_source_type, json[QString("sourceType")]);
    m_source_type_isSet = !json[QString("sourceType")].isNull() && m_source_type_isValid;
}

QString OAIGoogleCloudAiplatformV1beta1ModelSourceInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudAiplatformV1beta1ModelSourceInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_copy_isSet) {
        obj.insert(QString("copy"), ::OpenAPI::toJsonValue(m_copy));
    }
    if (m_source_type_isSet) {
        obj.insert(QString("sourceType"), ::OpenAPI::toJsonValue(m_source_type));
    }
    return obj;
}

bool OAIGoogleCloudAiplatformV1beta1ModelSourceInfo::isCopy() const {
    return m_copy;
}
void OAIGoogleCloudAiplatformV1beta1ModelSourceInfo::setCopy(const bool &copy) {
    m_copy = copy;
    m_copy_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1ModelSourceInfo::is_copy_Set() const{
    return m_copy_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1ModelSourceInfo::is_copy_Valid() const{
    return m_copy_isValid;
}

QString OAIGoogleCloudAiplatformV1beta1ModelSourceInfo::getSourceType() const {
    return m_source_type;
}
void OAIGoogleCloudAiplatformV1beta1ModelSourceInfo::setSourceType(const QString &source_type) {
    m_source_type = source_type;
    m_source_type_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1ModelSourceInfo::is_source_type_Set() const{
    return m_source_type_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1ModelSourceInfo::is_source_type_Valid() const{
    return m_source_type_isValid;
}

bool OAIGoogleCloudAiplatformV1beta1ModelSourceInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_copy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudAiplatformV1beta1ModelSourceInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
