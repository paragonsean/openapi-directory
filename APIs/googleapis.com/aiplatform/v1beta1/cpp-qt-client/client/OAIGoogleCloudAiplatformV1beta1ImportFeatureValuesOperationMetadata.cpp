/**
 * Vertex AI API
 * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudAiplatformV1beta1ImportFeatureValuesOperationMetadata.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudAiplatformV1beta1ImportFeatureValuesOperationMetadata::OAIGoogleCloudAiplatformV1beta1ImportFeatureValuesOperationMetadata(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudAiplatformV1beta1ImportFeatureValuesOperationMetadata::OAIGoogleCloudAiplatformV1beta1ImportFeatureValuesOperationMetadata() {
    this->initializeModel();
}

OAIGoogleCloudAiplatformV1beta1ImportFeatureValuesOperationMetadata::~OAIGoogleCloudAiplatformV1beta1ImportFeatureValuesOperationMetadata() {}

void OAIGoogleCloudAiplatformV1beta1ImportFeatureValuesOperationMetadata::initializeModel() {

    m_blocking_operation_ids_isSet = false;
    m_blocking_operation_ids_isValid = false;

    m_generic_metadata_isSet = false;
    m_generic_metadata_isValid = false;

    m_imported_entity_count_isSet = false;
    m_imported_entity_count_isValid = false;

    m_imported_feature_value_count_isSet = false;
    m_imported_feature_value_count_isValid = false;

    m_invalid_row_count_isSet = false;
    m_invalid_row_count_isValid = false;

    m_source_uris_isSet = false;
    m_source_uris_isValid = false;

    m_timestamp_outside_retention_rows_count_isSet = false;
    m_timestamp_outside_retention_rows_count_isValid = false;
}

void OAIGoogleCloudAiplatformV1beta1ImportFeatureValuesOperationMetadata::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudAiplatformV1beta1ImportFeatureValuesOperationMetadata::fromJsonObject(QJsonObject json) {

    m_blocking_operation_ids_isValid = ::OpenAPI::fromJsonValue(m_blocking_operation_ids, json[QString("blockingOperationIds")]);
    m_blocking_operation_ids_isSet = !json[QString("blockingOperationIds")].isNull() && m_blocking_operation_ids_isValid;

    m_generic_metadata_isValid = ::OpenAPI::fromJsonValue(m_generic_metadata, json[QString("genericMetadata")]);
    m_generic_metadata_isSet = !json[QString("genericMetadata")].isNull() && m_generic_metadata_isValid;

    m_imported_entity_count_isValid = ::OpenAPI::fromJsonValue(m_imported_entity_count, json[QString("importedEntityCount")]);
    m_imported_entity_count_isSet = !json[QString("importedEntityCount")].isNull() && m_imported_entity_count_isValid;

    m_imported_feature_value_count_isValid = ::OpenAPI::fromJsonValue(m_imported_feature_value_count, json[QString("importedFeatureValueCount")]);
    m_imported_feature_value_count_isSet = !json[QString("importedFeatureValueCount")].isNull() && m_imported_feature_value_count_isValid;

    m_invalid_row_count_isValid = ::OpenAPI::fromJsonValue(m_invalid_row_count, json[QString("invalidRowCount")]);
    m_invalid_row_count_isSet = !json[QString("invalidRowCount")].isNull() && m_invalid_row_count_isValid;

    m_source_uris_isValid = ::OpenAPI::fromJsonValue(m_source_uris, json[QString("sourceUris")]);
    m_source_uris_isSet = !json[QString("sourceUris")].isNull() && m_source_uris_isValid;

    m_timestamp_outside_retention_rows_count_isValid = ::OpenAPI::fromJsonValue(m_timestamp_outside_retention_rows_count, json[QString("timestampOutsideRetentionRowsCount")]);
    m_timestamp_outside_retention_rows_count_isSet = !json[QString("timestampOutsideRetentionRowsCount")].isNull() && m_timestamp_outside_retention_rows_count_isValid;
}

QString OAIGoogleCloudAiplatformV1beta1ImportFeatureValuesOperationMetadata::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudAiplatformV1beta1ImportFeatureValuesOperationMetadata::asJsonObject() const {
    QJsonObject obj;
    if (m_blocking_operation_ids.size() > 0) {
        obj.insert(QString("blockingOperationIds"), ::OpenAPI::toJsonValue(m_blocking_operation_ids));
    }
    if (m_generic_metadata.isSet()) {
        obj.insert(QString("genericMetadata"), ::OpenAPI::toJsonValue(m_generic_metadata));
    }
    if (m_imported_entity_count_isSet) {
        obj.insert(QString("importedEntityCount"), ::OpenAPI::toJsonValue(m_imported_entity_count));
    }
    if (m_imported_feature_value_count_isSet) {
        obj.insert(QString("importedFeatureValueCount"), ::OpenAPI::toJsonValue(m_imported_feature_value_count));
    }
    if (m_invalid_row_count_isSet) {
        obj.insert(QString("invalidRowCount"), ::OpenAPI::toJsonValue(m_invalid_row_count));
    }
    if (m_source_uris.size() > 0) {
        obj.insert(QString("sourceUris"), ::OpenAPI::toJsonValue(m_source_uris));
    }
    if (m_timestamp_outside_retention_rows_count_isSet) {
        obj.insert(QString("timestampOutsideRetentionRowsCount"), ::OpenAPI::toJsonValue(m_timestamp_outside_retention_rows_count));
    }
    return obj;
}

QList<QString> OAIGoogleCloudAiplatformV1beta1ImportFeatureValuesOperationMetadata::getBlockingOperationIds() const {
    return m_blocking_operation_ids;
}
void OAIGoogleCloudAiplatformV1beta1ImportFeatureValuesOperationMetadata::setBlockingOperationIds(const QList<QString> &blocking_operation_ids) {
    m_blocking_operation_ids = blocking_operation_ids;
    m_blocking_operation_ids_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1ImportFeatureValuesOperationMetadata::is_blocking_operation_ids_Set() const{
    return m_blocking_operation_ids_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1ImportFeatureValuesOperationMetadata::is_blocking_operation_ids_Valid() const{
    return m_blocking_operation_ids_isValid;
}

OAIGoogleCloudAiplatformV1beta1GenericOperationMetadata OAIGoogleCloudAiplatformV1beta1ImportFeatureValuesOperationMetadata::getGenericMetadata() const {
    return m_generic_metadata;
}
void OAIGoogleCloudAiplatformV1beta1ImportFeatureValuesOperationMetadata::setGenericMetadata(const OAIGoogleCloudAiplatformV1beta1GenericOperationMetadata &generic_metadata) {
    m_generic_metadata = generic_metadata;
    m_generic_metadata_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1ImportFeatureValuesOperationMetadata::is_generic_metadata_Set() const{
    return m_generic_metadata_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1ImportFeatureValuesOperationMetadata::is_generic_metadata_Valid() const{
    return m_generic_metadata_isValid;
}

QString OAIGoogleCloudAiplatformV1beta1ImportFeatureValuesOperationMetadata::getImportedEntityCount() const {
    return m_imported_entity_count;
}
void OAIGoogleCloudAiplatformV1beta1ImportFeatureValuesOperationMetadata::setImportedEntityCount(const QString &imported_entity_count) {
    m_imported_entity_count = imported_entity_count;
    m_imported_entity_count_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1ImportFeatureValuesOperationMetadata::is_imported_entity_count_Set() const{
    return m_imported_entity_count_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1ImportFeatureValuesOperationMetadata::is_imported_entity_count_Valid() const{
    return m_imported_entity_count_isValid;
}

QString OAIGoogleCloudAiplatformV1beta1ImportFeatureValuesOperationMetadata::getImportedFeatureValueCount() const {
    return m_imported_feature_value_count;
}
void OAIGoogleCloudAiplatformV1beta1ImportFeatureValuesOperationMetadata::setImportedFeatureValueCount(const QString &imported_feature_value_count) {
    m_imported_feature_value_count = imported_feature_value_count;
    m_imported_feature_value_count_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1ImportFeatureValuesOperationMetadata::is_imported_feature_value_count_Set() const{
    return m_imported_feature_value_count_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1ImportFeatureValuesOperationMetadata::is_imported_feature_value_count_Valid() const{
    return m_imported_feature_value_count_isValid;
}

QString OAIGoogleCloudAiplatformV1beta1ImportFeatureValuesOperationMetadata::getInvalidRowCount() const {
    return m_invalid_row_count;
}
void OAIGoogleCloudAiplatformV1beta1ImportFeatureValuesOperationMetadata::setInvalidRowCount(const QString &invalid_row_count) {
    m_invalid_row_count = invalid_row_count;
    m_invalid_row_count_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1ImportFeatureValuesOperationMetadata::is_invalid_row_count_Set() const{
    return m_invalid_row_count_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1ImportFeatureValuesOperationMetadata::is_invalid_row_count_Valid() const{
    return m_invalid_row_count_isValid;
}

QList<QString> OAIGoogleCloudAiplatformV1beta1ImportFeatureValuesOperationMetadata::getSourceUris() const {
    return m_source_uris;
}
void OAIGoogleCloudAiplatformV1beta1ImportFeatureValuesOperationMetadata::setSourceUris(const QList<QString> &source_uris) {
    m_source_uris = source_uris;
    m_source_uris_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1ImportFeatureValuesOperationMetadata::is_source_uris_Set() const{
    return m_source_uris_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1ImportFeatureValuesOperationMetadata::is_source_uris_Valid() const{
    return m_source_uris_isValid;
}

QString OAIGoogleCloudAiplatformV1beta1ImportFeatureValuesOperationMetadata::getTimestampOutsideRetentionRowsCount() const {
    return m_timestamp_outside_retention_rows_count;
}
void OAIGoogleCloudAiplatformV1beta1ImportFeatureValuesOperationMetadata::setTimestampOutsideRetentionRowsCount(const QString &timestamp_outside_retention_rows_count) {
    m_timestamp_outside_retention_rows_count = timestamp_outside_retention_rows_count;
    m_timestamp_outside_retention_rows_count_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1ImportFeatureValuesOperationMetadata::is_timestamp_outside_retention_rows_count_Set() const{
    return m_timestamp_outside_retention_rows_count_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1ImportFeatureValuesOperationMetadata::is_timestamp_outside_retention_rows_count_Valid() const{
    return m_timestamp_outside_retention_rows_count_isValid;
}

bool OAIGoogleCloudAiplatformV1beta1ImportFeatureValuesOperationMetadata::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_blocking_operation_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_generic_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_imported_entity_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_imported_feature_value_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invalid_row_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_uris.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_outside_retention_rows_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudAiplatformV1beta1ImportFeatureValuesOperationMetadata::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
