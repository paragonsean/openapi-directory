/**
 * Vertex AI API
 * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudAiplatformV1beta1BatchReadFeatureValuesRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudAiplatformV1beta1BatchReadFeatureValuesRequest::OAIGoogleCloudAiplatformV1beta1BatchReadFeatureValuesRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudAiplatformV1beta1BatchReadFeatureValuesRequest::OAIGoogleCloudAiplatformV1beta1BatchReadFeatureValuesRequest() {
    this->initializeModel();
}

OAIGoogleCloudAiplatformV1beta1BatchReadFeatureValuesRequest::~OAIGoogleCloudAiplatformV1beta1BatchReadFeatureValuesRequest() {}

void OAIGoogleCloudAiplatformV1beta1BatchReadFeatureValuesRequest::initializeModel() {

    m_bigquery_read_instances_isSet = false;
    m_bigquery_read_instances_isValid = false;

    m_csv_read_instances_isSet = false;
    m_csv_read_instances_isValid = false;

    m_destination_isSet = false;
    m_destination_isValid = false;

    m_entity_type_specs_isSet = false;
    m_entity_type_specs_isValid = false;

    m_pass_through_fields_isSet = false;
    m_pass_through_fields_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;
}

void OAIGoogleCloudAiplatformV1beta1BatchReadFeatureValuesRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudAiplatformV1beta1BatchReadFeatureValuesRequest::fromJsonObject(QJsonObject json) {

    m_bigquery_read_instances_isValid = ::OpenAPI::fromJsonValue(m_bigquery_read_instances, json[QString("bigqueryReadInstances")]);
    m_bigquery_read_instances_isSet = !json[QString("bigqueryReadInstances")].isNull() && m_bigquery_read_instances_isValid;

    m_csv_read_instances_isValid = ::OpenAPI::fromJsonValue(m_csv_read_instances, json[QString("csvReadInstances")]);
    m_csv_read_instances_isSet = !json[QString("csvReadInstances")].isNull() && m_csv_read_instances_isValid;

    m_destination_isValid = ::OpenAPI::fromJsonValue(m_destination, json[QString("destination")]);
    m_destination_isSet = !json[QString("destination")].isNull() && m_destination_isValid;

    m_entity_type_specs_isValid = ::OpenAPI::fromJsonValue(m_entity_type_specs, json[QString("entityTypeSpecs")]);
    m_entity_type_specs_isSet = !json[QString("entityTypeSpecs")].isNull() && m_entity_type_specs_isValid;

    m_pass_through_fields_isValid = ::OpenAPI::fromJsonValue(m_pass_through_fields, json[QString("passThroughFields")]);
    m_pass_through_fields_isSet = !json[QString("passThroughFields")].isNull() && m_pass_through_fields_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;
}

QString OAIGoogleCloudAiplatformV1beta1BatchReadFeatureValuesRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudAiplatformV1beta1BatchReadFeatureValuesRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_bigquery_read_instances.isSet()) {
        obj.insert(QString("bigqueryReadInstances"), ::OpenAPI::toJsonValue(m_bigquery_read_instances));
    }
    if (m_csv_read_instances.isSet()) {
        obj.insert(QString("csvReadInstances"), ::OpenAPI::toJsonValue(m_csv_read_instances));
    }
    if (m_destination.isSet()) {
        obj.insert(QString("destination"), ::OpenAPI::toJsonValue(m_destination));
    }
    if (m_entity_type_specs.size() > 0) {
        obj.insert(QString("entityTypeSpecs"), ::OpenAPI::toJsonValue(m_entity_type_specs));
    }
    if (m_pass_through_fields.size() > 0) {
        obj.insert(QString("passThroughFields"), ::OpenAPI::toJsonValue(m_pass_through_fields));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    return obj;
}

OAIGoogleCloudAiplatformV1beta1BigQuerySource OAIGoogleCloudAiplatformV1beta1BatchReadFeatureValuesRequest::getBigqueryReadInstances() const {
    return m_bigquery_read_instances;
}
void OAIGoogleCloudAiplatformV1beta1BatchReadFeatureValuesRequest::setBigqueryReadInstances(const OAIGoogleCloudAiplatformV1beta1BigQuerySource &bigquery_read_instances) {
    m_bigquery_read_instances = bigquery_read_instances;
    m_bigquery_read_instances_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1BatchReadFeatureValuesRequest::is_bigquery_read_instances_Set() const{
    return m_bigquery_read_instances_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1BatchReadFeatureValuesRequest::is_bigquery_read_instances_Valid() const{
    return m_bigquery_read_instances_isValid;
}

OAIGoogleCloudAiplatformV1beta1CsvSource OAIGoogleCloudAiplatformV1beta1BatchReadFeatureValuesRequest::getCsvReadInstances() const {
    return m_csv_read_instances;
}
void OAIGoogleCloudAiplatformV1beta1BatchReadFeatureValuesRequest::setCsvReadInstances(const OAIGoogleCloudAiplatformV1beta1CsvSource &csv_read_instances) {
    m_csv_read_instances = csv_read_instances;
    m_csv_read_instances_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1BatchReadFeatureValuesRequest::is_csv_read_instances_Set() const{
    return m_csv_read_instances_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1BatchReadFeatureValuesRequest::is_csv_read_instances_Valid() const{
    return m_csv_read_instances_isValid;
}

OAIGoogleCloudAiplatformV1beta1FeatureValueDestination OAIGoogleCloudAiplatformV1beta1BatchReadFeatureValuesRequest::getDestination() const {
    return m_destination;
}
void OAIGoogleCloudAiplatformV1beta1BatchReadFeatureValuesRequest::setDestination(const OAIGoogleCloudAiplatformV1beta1FeatureValueDestination &destination) {
    m_destination = destination;
    m_destination_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1BatchReadFeatureValuesRequest::is_destination_Set() const{
    return m_destination_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1BatchReadFeatureValuesRequest::is_destination_Valid() const{
    return m_destination_isValid;
}

QList<OAIGoogleCloudAiplatformV1beta1BatchReadFeatureValuesRequestEntityTypeSpec> OAIGoogleCloudAiplatformV1beta1BatchReadFeatureValuesRequest::getEntityTypeSpecs() const {
    return m_entity_type_specs;
}
void OAIGoogleCloudAiplatformV1beta1BatchReadFeatureValuesRequest::setEntityTypeSpecs(const QList<OAIGoogleCloudAiplatformV1beta1BatchReadFeatureValuesRequestEntityTypeSpec> &entity_type_specs) {
    m_entity_type_specs = entity_type_specs;
    m_entity_type_specs_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1BatchReadFeatureValuesRequest::is_entity_type_specs_Set() const{
    return m_entity_type_specs_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1BatchReadFeatureValuesRequest::is_entity_type_specs_Valid() const{
    return m_entity_type_specs_isValid;
}

QList<OAIGoogleCloudAiplatformV1beta1BatchReadFeatureValuesRequestPassThroughField> OAIGoogleCloudAiplatformV1beta1BatchReadFeatureValuesRequest::getPassThroughFields() const {
    return m_pass_through_fields;
}
void OAIGoogleCloudAiplatformV1beta1BatchReadFeatureValuesRequest::setPassThroughFields(const QList<OAIGoogleCloudAiplatformV1beta1BatchReadFeatureValuesRequestPassThroughField> &pass_through_fields) {
    m_pass_through_fields = pass_through_fields;
    m_pass_through_fields_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1BatchReadFeatureValuesRequest::is_pass_through_fields_Set() const{
    return m_pass_through_fields_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1BatchReadFeatureValuesRequest::is_pass_through_fields_Valid() const{
    return m_pass_through_fields_isValid;
}

QString OAIGoogleCloudAiplatformV1beta1BatchReadFeatureValuesRequest::getStartTime() const {
    return m_start_time;
}
void OAIGoogleCloudAiplatformV1beta1BatchReadFeatureValuesRequest::setStartTime(const QString &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIGoogleCloudAiplatformV1beta1BatchReadFeatureValuesRequest::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIGoogleCloudAiplatformV1beta1BatchReadFeatureValuesRequest::is_start_time_Valid() const{
    return m_start_time_isValid;
}

bool OAIGoogleCloudAiplatformV1beta1BatchReadFeatureValuesRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bigquery_read_instances.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_csv_read_instances.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_type_specs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_pass_through_fields.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudAiplatformV1beta1BatchReadFeatureValuesRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
