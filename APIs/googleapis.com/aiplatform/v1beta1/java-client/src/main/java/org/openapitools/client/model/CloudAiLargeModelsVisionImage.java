/*
 * Vertex AI API
 * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CloudAiLargeModelsVisionImageRAIScores;
import org.openapitools.client.model.CloudAiLargeModelsVisionRaiInfo;
import org.openapitools.client.model.CloudAiLargeModelsVisionSemanticFilterResponse;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Image.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:33:30.041358-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CloudAiLargeModelsVisionImage {
  public static final String SERIALIZED_NAME_ENCODING = "encoding";
  @SerializedName(SERIALIZED_NAME_ENCODING)
  private String encoding;

  public static final String SERIALIZED_NAME_IMAGE = "image";
  @SerializedName(SERIALIZED_NAME_IMAGE)
  private byte[] image;

  public static final String SERIALIZED_NAME_IMAGE_RAI_SCORES = "imageRaiScores";
  @SerializedName(SERIALIZED_NAME_IMAGE_RAI_SCORES)
  private CloudAiLargeModelsVisionImageRAIScores imageRaiScores;

  public static final String SERIALIZED_NAME_RAI_INFO = "raiInfo";
  @SerializedName(SERIALIZED_NAME_RAI_INFO)
  private CloudAiLargeModelsVisionRaiInfo raiInfo;

  public static final String SERIALIZED_NAME_SEMANTIC_FILTER_RESPONSE = "semanticFilterResponse";
  @SerializedName(SERIALIZED_NAME_SEMANTIC_FILTER_RESPONSE)
  private CloudAiLargeModelsVisionSemanticFilterResponse semanticFilterResponse;

  public static final String SERIALIZED_NAME_TEXT = "text";
  @SerializedName(SERIALIZED_NAME_TEXT)
  private String text;

  public static final String SERIALIZED_NAME_URI = "uri";
  @SerializedName(SERIALIZED_NAME_URI)
  private String uri;

  public CloudAiLargeModelsVisionImage() {
  }

  public CloudAiLargeModelsVisionImage encoding(String encoding) {
    this.encoding = encoding;
    return this;
  }

  /**
   * Image encoding, encoded as \&quot;image/png\&quot; or \&quot;image/jpg\&quot;.
   * @return encoding
   */
  @javax.annotation.Nullable
  public String getEncoding() {
    return encoding;
  }

  public void setEncoding(String encoding) {
    this.encoding = encoding;
  }


  public CloudAiLargeModelsVisionImage image(byte[] image) {
    this.image = image;
    return this;
  }

  /**
   * Raw bytes.
   * @return image
   */
  @javax.annotation.Nullable
  public byte[] getImage() {
    return image;
  }

  public void setImage(byte[] image) {
    this.image = image;
  }


  public CloudAiLargeModelsVisionImage imageRaiScores(CloudAiLargeModelsVisionImageRAIScores imageRaiScores) {
    this.imageRaiScores = imageRaiScores;
    return this;
  }

  /**
   * Get imageRaiScores
   * @return imageRaiScores
   */
  @javax.annotation.Nullable
  public CloudAiLargeModelsVisionImageRAIScores getImageRaiScores() {
    return imageRaiScores;
  }

  public void setImageRaiScores(CloudAiLargeModelsVisionImageRAIScores imageRaiScores) {
    this.imageRaiScores = imageRaiScores;
  }


  public CloudAiLargeModelsVisionImage raiInfo(CloudAiLargeModelsVisionRaiInfo raiInfo) {
    this.raiInfo = raiInfo;
    return this;
  }

  /**
   * Get raiInfo
   * @return raiInfo
   */
  @javax.annotation.Nullable
  public CloudAiLargeModelsVisionRaiInfo getRaiInfo() {
    return raiInfo;
  }

  public void setRaiInfo(CloudAiLargeModelsVisionRaiInfo raiInfo) {
    this.raiInfo = raiInfo;
  }


  public CloudAiLargeModelsVisionImage semanticFilterResponse(CloudAiLargeModelsVisionSemanticFilterResponse semanticFilterResponse) {
    this.semanticFilterResponse = semanticFilterResponse;
    return this;
  }

  /**
   * Get semanticFilterResponse
   * @return semanticFilterResponse
   */
  @javax.annotation.Nullable
  public CloudAiLargeModelsVisionSemanticFilterResponse getSemanticFilterResponse() {
    return semanticFilterResponse;
  }

  public void setSemanticFilterResponse(CloudAiLargeModelsVisionSemanticFilterResponse semanticFilterResponse) {
    this.semanticFilterResponse = semanticFilterResponse;
  }


  public CloudAiLargeModelsVisionImage text(String text) {
    this.text = text;
    return this;
  }

  /**
   * Text/Expanded text input for imagen.
   * @return text
   */
  @javax.annotation.Nullable
  public String getText() {
    return text;
  }

  public void setText(String text) {
    this.text = text;
  }


  public CloudAiLargeModelsVisionImage uri(String uri) {
    this.uri = uri;
    return this;
  }

  /**
   * Path to another storage (typically Google Cloud Storage).
   * @return uri
   */
  @javax.annotation.Nullable
  public String getUri() {
    return uri;
  }

  public void setUri(String uri) {
    this.uri = uri;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CloudAiLargeModelsVisionImage cloudAiLargeModelsVisionImage = (CloudAiLargeModelsVisionImage) o;
    return Objects.equals(this.encoding, cloudAiLargeModelsVisionImage.encoding) &&
        Arrays.equals(this.image, cloudAiLargeModelsVisionImage.image) &&
        Objects.equals(this.imageRaiScores, cloudAiLargeModelsVisionImage.imageRaiScores) &&
        Objects.equals(this.raiInfo, cloudAiLargeModelsVisionImage.raiInfo) &&
        Objects.equals(this.semanticFilterResponse, cloudAiLargeModelsVisionImage.semanticFilterResponse) &&
        Objects.equals(this.text, cloudAiLargeModelsVisionImage.text) &&
        Objects.equals(this.uri, cloudAiLargeModelsVisionImage.uri);
  }

  @Override
  public int hashCode() {
    return Objects.hash(encoding, Arrays.hashCode(image), imageRaiScores, raiInfo, semanticFilterResponse, text, uri);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CloudAiLargeModelsVisionImage {\n");
    sb.append("    encoding: ").append(toIndentedString(encoding)).append("\n");
    sb.append("    image: ").append(toIndentedString(image)).append("\n");
    sb.append("    imageRaiScores: ").append(toIndentedString(imageRaiScores)).append("\n");
    sb.append("    raiInfo: ").append(toIndentedString(raiInfo)).append("\n");
    sb.append("    semanticFilterResponse: ").append(toIndentedString(semanticFilterResponse)).append("\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("    uri: ").append(toIndentedString(uri)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("encoding");
    openapiFields.add("image");
    openapiFields.add("imageRaiScores");
    openapiFields.add("raiInfo");
    openapiFields.add("semanticFilterResponse");
    openapiFields.add("text");
    openapiFields.add("uri");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CloudAiLargeModelsVisionImage
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CloudAiLargeModelsVisionImage.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CloudAiLargeModelsVisionImage is not found in the empty JSON string", CloudAiLargeModelsVisionImage.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CloudAiLargeModelsVisionImage.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CloudAiLargeModelsVisionImage` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("encoding") != null && !jsonObj.get("encoding").isJsonNull()) && !jsonObj.get("encoding").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `encoding` to be a primitive type in the JSON string but got `%s`", jsonObj.get("encoding").toString()));
      }
      // validate the optional field `imageRaiScores`
      if (jsonObj.get("imageRaiScores") != null && !jsonObj.get("imageRaiScores").isJsonNull()) {
        CloudAiLargeModelsVisionImageRAIScores.validateJsonElement(jsonObj.get("imageRaiScores"));
      }
      // validate the optional field `raiInfo`
      if (jsonObj.get("raiInfo") != null && !jsonObj.get("raiInfo").isJsonNull()) {
        CloudAiLargeModelsVisionRaiInfo.validateJsonElement(jsonObj.get("raiInfo"));
      }
      // validate the optional field `semanticFilterResponse`
      if (jsonObj.get("semanticFilterResponse") != null && !jsonObj.get("semanticFilterResponse").isJsonNull()) {
        CloudAiLargeModelsVisionSemanticFilterResponse.validateJsonElement(jsonObj.get("semanticFilterResponse"));
      }
      if ((jsonObj.get("text") != null && !jsonObj.get("text").isJsonNull()) && !jsonObj.get("text").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `text` to be a primitive type in the JSON string but got `%s`", jsonObj.get("text").toString()));
      }
      if ((jsonObj.get("uri") != null && !jsonObj.get("uri").isJsonNull()) && !jsonObj.get("uri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uri").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CloudAiLargeModelsVisionImage.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CloudAiLargeModelsVisionImage' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CloudAiLargeModelsVisionImage> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CloudAiLargeModelsVisionImage.class));

       return (TypeAdapter<T>) new TypeAdapter<CloudAiLargeModelsVisionImage>() {
           @Override
           public void write(JsonWriter out, CloudAiLargeModelsVisionImage value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CloudAiLargeModelsVisionImage read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CloudAiLargeModelsVisionImage given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CloudAiLargeModelsVisionImage
   * @throws IOException if the JSON string is invalid with respect to CloudAiLargeModelsVisionImage
   */
  public static CloudAiLargeModelsVisionImage fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CloudAiLargeModelsVisionImage.class);
  }

  /**
   * Convert an instance of CloudAiLargeModelsVisionImage to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

