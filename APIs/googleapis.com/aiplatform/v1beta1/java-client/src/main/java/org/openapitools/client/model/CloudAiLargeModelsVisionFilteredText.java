/*
 * Vertex AI API
 * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Details for filtered input text.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:33:30.041358-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CloudAiLargeModelsVisionFilteredText {
  /**
   * Confidence level
   */
  @JsonAdapter(CategoryEnum.Adapter.class)
  public enum CategoryEnum {
    RAI_CATEGORY_UNSPECIFIED("RAI_CATEGORY_UNSPECIFIED"),
    
    OBSCENE("OBSCENE"),
    
    SEXUALLY_EXPLICIT("SEXUALLY_EXPLICIT"),
    
    IDENTITY_ATTACK("IDENTITY_ATTACK"),
    
    VIOLENCE_ABUSE("VIOLENCE_ABUSE"),
    
    CSAI("CSAI"),
    
    SPII("SPII"),
    
    CELEBRITY("CELEBRITY"),
    
    FACE_IMG("FACE_IMG"),
    
    WATERMARK_IMG("WATERMARK_IMG"),
    
    MEMORIZATION_IMG("MEMORIZATION_IMG"),
    
    CSAI_IMG("CSAI_IMG"),
    
    PORN_IMG("PORN_IMG"),
    
    VIOLENCE_IMG("VIOLENCE_IMG"),
    
    CHILD_IMG("CHILD_IMG"),
    
    TOXIC("TOXIC"),
    
    SENSITIVE_WORD("SENSITIVE_WORD"),
    
    PERSON_IMG("PERSON_IMG"),
    
    ICA_IMG("ICA_IMG"),
    
    SEXUAL_IMG("SEXUAL_IMG"),
    
    IU_IMG("IU_IMG"),
    
    RACY_IMG("RACY_IMG"),
    
    PEDO_IMG("PEDO_IMG"),
    
    DEATH_HARM_TRAGEDY("DEATH_HARM_TRAGEDY"),
    
    HEALTH("HEALTH"),
    
    FIREARMS_WEAPONS("FIREARMS_WEAPONS"),
    
    RELIGIOUS_BELIEF("RELIGIOUS_BELIEF"),
    
    ILLICIT_DRUGS("ILLICIT_DRUGS"),
    
    WAR_CONFLICT("WAR_CONFLICT"),
    
    POLITICS("POLITICS"),
    
    HATE_SYMBOL_IMG("HATE_SYMBOL_IMG"),
    
    CHILD_TEXT("CHILD_TEXT"),
    
    DANGEROUS_CONTENT("DANGEROUS_CONTENT"),
    
    RECITATION_TEXT("RECITATION_TEXT"),
    
    CELEBRITY_IMG("CELEBRITY_IMG");

    private String value;

    CategoryEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CategoryEnum fromValue(String value) {
      for (CategoryEnum b : CategoryEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CategoryEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CategoryEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CategoryEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CategoryEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CategoryEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CATEGORY = "category";
  @SerializedName(SERIALIZED_NAME_CATEGORY)
  private CategoryEnum category;

  /**
   * Filtered category
   */
  @JsonAdapter(ConfidenceEnum.Adapter.class)
  public enum ConfidenceEnum {
    UNSPECIFIED("CONFIDENCE_UNSPECIFIED"),
    
    LOW("CONFIDENCE_LOW"),
    
    MEDIUM("CONFIDENCE_MEDIUM"),
    
    HIGH("CONFIDENCE_HIGH");

    private String value;

    ConfidenceEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ConfidenceEnum fromValue(String value) {
      for (ConfidenceEnum b : ConfidenceEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ConfidenceEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ConfidenceEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ConfidenceEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ConfidenceEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ConfidenceEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CONFIDENCE = "confidence";
  @SerializedName(SERIALIZED_NAME_CONFIDENCE)
  private ConfidenceEnum confidence;

  public static final String SERIALIZED_NAME_PROMPT = "prompt";
  @SerializedName(SERIALIZED_NAME_PROMPT)
  private String prompt;

  public static final String SERIALIZED_NAME_SCORE = "score";
  @SerializedName(SERIALIZED_NAME_SCORE)
  private Double score;

  public CloudAiLargeModelsVisionFilteredText() {
  }

  public CloudAiLargeModelsVisionFilteredText category(CategoryEnum category) {
    this.category = category;
    return this;
  }

  /**
   * Confidence level
   * @return category
   */
  @javax.annotation.Nullable
  public CategoryEnum getCategory() {
    return category;
  }

  public void setCategory(CategoryEnum category) {
    this.category = category;
  }


  public CloudAiLargeModelsVisionFilteredText confidence(ConfidenceEnum confidence) {
    this.confidence = confidence;
    return this;
  }

  /**
   * Filtered category
   * @return confidence
   */
  @javax.annotation.Nullable
  public ConfidenceEnum getConfidence() {
    return confidence;
  }

  public void setConfidence(ConfidenceEnum confidence) {
    this.confidence = confidence;
  }


  public CloudAiLargeModelsVisionFilteredText prompt(String prompt) {
    this.prompt = prompt;
    return this;
  }

  /**
   * Input prompt
   * @return prompt
   */
  @javax.annotation.Nullable
  public String getPrompt() {
    return prompt;
  }

  public void setPrompt(String prompt) {
    this.prompt = prompt;
  }


  public CloudAiLargeModelsVisionFilteredText score(Double score) {
    this.score = score;
    return this;
  }

  /**
   * Score for category
   * @return score
   */
  @javax.annotation.Nullable
  public Double getScore() {
    return score;
  }

  public void setScore(Double score) {
    this.score = score;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CloudAiLargeModelsVisionFilteredText cloudAiLargeModelsVisionFilteredText = (CloudAiLargeModelsVisionFilteredText) o;
    return Objects.equals(this.category, cloudAiLargeModelsVisionFilteredText.category) &&
        Objects.equals(this.confidence, cloudAiLargeModelsVisionFilteredText.confidence) &&
        Objects.equals(this.prompt, cloudAiLargeModelsVisionFilteredText.prompt) &&
        Objects.equals(this.score, cloudAiLargeModelsVisionFilteredText.score);
  }

  @Override
  public int hashCode() {
    return Objects.hash(category, confidence, prompt, score);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CloudAiLargeModelsVisionFilteredText {\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    confidence: ").append(toIndentedString(confidence)).append("\n");
    sb.append("    prompt: ").append(toIndentedString(prompt)).append("\n");
    sb.append("    score: ").append(toIndentedString(score)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("category");
    openapiFields.add("confidence");
    openapiFields.add("prompt");
    openapiFields.add("score");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CloudAiLargeModelsVisionFilteredText
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CloudAiLargeModelsVisionFilteredText.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CloudAiLargeModelsVisionFilteredText is not found in the empty JSON string", CloudAiLargeModelsVisionFilteredText.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CloudAiLargeModelsVisionFilteredText.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CloudAiLargeModelsVisionFilteredText` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("category") != null && !jsonObj.get("category").isJsonNull()) && !jsonObj.get("category").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `category` to be a primitive type in the JSON string but got `%s`", jsonObj.get("category").toString()));
      }
      // validate the optional field `category`
      if (jsonObj.get("category") != null && !jsonObj.get("category").isJsonNull()) {
        CategoryEnum.validateJsonElement(jsonObj.get("category"));
      }
      if ((jsonObj.get("confidence") != null && !jsonObj.get("confidence").isJsonNull()) && !jsonObj.get("confidence").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `confidence` to be a primitive type in the JSON string but got `%s`", jsonObj.get("confidence").toString()));
      }
      // validate the optional field `confidence`
      if (jsonObj.get("confidence") != null && !jsonObj.get("confidence").isJsonNull()) {
        ConfidenceEnum.validateJsonElement(jsonObj.get("confidence"));
      }
      if ((jsonObj.get("prompt") != null && !jsonObj.get("prompt").isJsonNull()) && !jsonObj.get("prompt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `prompt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("prompt").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CloudAiLargeModelsVisionFilteredText.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CloudAiLargeModelsVisionFilteredText' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CloudAiLargeModelsVisionFilteredText> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CloudAiLargeModelsVisionFilteredText.class));

       return (TypeAdapter<T>) new TypeAdapter<CloudAiLargeModelsVisionFilteredText>() {
           @Override
           public void write(JsonWriter out, CloudAiLargeModelsVisionFilteredText value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CloudAiLargeModelsVisionFilteredText read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CloudAiLargeModelsVisionFilteredText given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CloudAiLargeModelsVisionFilteredText
   * @throws IOException if the JSON string is invalid with respect to CloudAiLargeModelsVisionFilteredText
   */
  public static CloudAiLargeModelsVisionFilteredText fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CloudAiLargeModelsVisionFilteredText.class);
  }

  /**
   * Convert an instance of CloudAiLargeModelsVisionFilteredText to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

