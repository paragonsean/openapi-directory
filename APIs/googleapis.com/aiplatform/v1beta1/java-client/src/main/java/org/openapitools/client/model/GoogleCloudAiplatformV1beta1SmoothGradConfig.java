/*
 * Vertex AI API
 * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.GoogleCloudAiplatformV1beta1FeatureNoiseSigma;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Config for SmoothGrad approximation of gradients. When enabled, the gradients are approximated by averaging the gradients from noisy samples in the vicinity of the inputs. Adding noise can help improve the computed gradients. Refer to this paper for more details: https://arxiv.org/pdf/1706.03825.pdf
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:33:30.041358-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudAiplatformV1beta1SmoothGradConfig {
  public static final String SERIALIZED_NAME_FEATURE_NOISE_SIGMA = "featureNoiseSigma";
  @SerializedName(SERIALIZED_NAME_FEATURE_NOISE_SIGMA)
  private GoogleCloudAiplatformV1beta1FeatureNoiseSigma featureNoiseSigma;

  public static final String SERIALIZED_NAME_NOISE_SIGMA = "noiseSigma";
  @SerializedName(SERIALIZED_NAME_NOISE_SIGMA)
  private Float noiseSigma;

  public static final String SERIALIZED_NAME_NOISY_SAMPLE_COUNT = "noisySampleCount";
  @SerializedName(SERIALIZED_NAME_NOISY_SAMPLE_COUNT)
  private Integer noisySampleCount;

  public GoogleCloudAiplatformV1beta1SmoothGradConfig() {
  }

  public GoogleCloudAiplatformV1beta1SmoothGradConfig featureNoiseSigma(GoogleCloudAiplatformV1beta1FeatureNoiseSigma featureNoiseSigma) {
    this.featureNoiseSigma = featureNoiseSigma;
    return this;
  }

  /**
   * Get featureNoiseSigma
   * @return featureNoiseSigma
   */
  @javax.annotation.Nullable
  public GoogleCloudAiplatformV1beta1FeatureNoiseSigma getFeatureNoiseSigma() {
    return featureNoiseSigma;
  }

  public void setFeatureNoiseSigma(GoogleCloudAiplatformV1beta1FeatureNoiseSigma featureNoiseSigma) {
    this.featureNoiseSigma = featureNoiseSigma;
  }


  public GoogleCloudAiplatformV1beta1SmoothGradConfig noiseSigma(Float noiseSigma) {
    this.noiseSigma = noiseSigma;
    return this;
  }

  /**
   * This is a single float value and will be used to add noise to all the features. Use this field when all features are normalized to have the same distribution: scale to range [0, 1], [-1, 1] or z-scoring, where features are normalized to have 0-mean and 1-variance. Learn more about [normalization](https://developers.google.com/machine-learning/data-prep/transform/normalization). For best results the recommended value is about 10% - 20% of the standard deviation of the input feature. Refer to section 3.2 of the SmoothGrad paper: https://arxiv.org/pdf/1706.03825.pdf. Defaults to 0.1. If the distribution is different per feature, set feature_noise_sigma instead for each feature.
   * @return noiseSigma
   */
  @javax.annotation.Nullable
  public Float getNoiseSigma() {
    return noiseSigma;
  }

  public void setNoiseSigma(Float noiseSigma) {
    this.noiseSigma = noiseSigma;
  }


  public GoogleCloudAiplatformV1beta1SmoothGradConfig noisySampleCount(Integer noisySampleCount) {
    this.noisySampleCount = noisySampleCount;
    return this;
  }

  /**
   * The number of gradient samples to use for approximation. The higher this number, the more accurate the gradient is, but the runtime complexity increases by this factor as well. Valid range of its value is [1, 50]. Defaults to 3.
   * @return noisySampleCount
   */
  @javax.annotation.Nullable
  public Integer getNoisySampleCount() {
    return noisySampleCount;
  }

  public void setNoisySampleCount(Integer noisySampleCount) {
    this.noisySampleCount = noisySampleCount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudAiplatformV1beta1SmoothGradConfig googleCloudAiplatformV1beta1SmoothGradConfig = (GoogleCloudAiplatformV1beta1SmoothGradConfig) o;
    return Objects.equals(this.featureNoiseSigma, googleCloudAiplatformV1beta1SmoothGradConfig.featureNoiseSigma) &&
        Objects.equals(this.noiseSigma, googleCloudAiplatformV1beta1SmoothGradConfig.noiseSigma) &&
        Objects.equals(this.noisySampleCount, googleCloudAiplatformV1beta1SmoothGradConfig.noisySampleCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(featureNoiseSigma, noiseSigma, noisySampleCount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudAiplatformV1beta1SmoothGradConfig {\n");
    sb.append("    featureNoiseSigma: ").append(toIndentedString(featureNoiseSigma)).append("\n");
    sb.append("    noiseSigma: ").append(toIndentedString(noiseSigma)).append("\n");
    sb.append("    noisySampleCount: ").append(toIndentedString(noisySampleCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("featureNoiseSigma");
    openapiFields.add("noiseSigma");
    openapiFields.add("noisySampleCount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudAiplatformV1beta1SmoothGradConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudAiplatformV1beta1SmoothGradConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudAiplatformV1beta1SmoothGradConfig is not found in the empty JSON string", GoogleCloudAiplatformV1beta1SmoothGradConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudAiplatformV1beta1SmoothGradConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudAiplatformV1beta1SmoothGradConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `featureNoiseSigma`
      if (jsonObj.get("featureNoiseSigma") != null && !jsonObj.get("featureNoiseSigma").isJsonNull()) {
        GoogleCloudAiplatformV1beta1FeatureNoiseSigma.validateJsonElement(jsonObj.get("featureNoiseSigma"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudAiplatformV1beta1SmoothGradConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudAiplatformV1beta1SmoothGradConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudAiplatformV1beta1SmoothGradConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudAiplatformV1beta1SmoothGradConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudAiplatformV1beta1SmoothGradConfig>() {
           @Override
           public void write(JsonWriter out, GoogleCloudAiplatformV1beta1SmoothGradConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudAiplatformV1beta1SmoothGradConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudAiplatformV1beta1SmoothGradConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudAiplatformV1beta1SmoothGradConfig
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudAiplatformV1beta1SmoothGradConfig
   */
  public static GoogleCloudAiplatformV1beta1SmoothGradConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudAiplatformV1beta1SmoothGradConfig.class);
  }

  /**
   * Convert an instance of GoogleCloudAiplatformV1beta1SmoothGradConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

