/*
 * Vertex AI API
 * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Proto to capture a signal generated by the toxicity model.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:33:30.041358-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LearningGenaiRootToxicitySignal {
  public static final String SERIALIZED_NAME_ALLOWED = "allowed";
  @SerializedName(SERIALIZED_NAME_ALLOWED)
  private Boolean allowed;

  /**
   * Gets or Sets label
   */
  @JsonAdapter(LabelEnum.Adapter.class)
  public enum LabelEnum {
    LABEL_UNSPECIFIED("LABEL_UNSPECIFIED"),
    
    NOT_SENSITIVE("NOT_SENSITIVE"),
    
    SENSITIVE("SENSITIVE"),
    
    ACCIDENTS_DISASTERS("ACCIDENTS_DISASTERS"),
    
    ADULT("ADULT"),
    
    COMPUTER_SECURITY("COMPUTER_SECURITY"),
    
    CONTROVERSIAL_SOCIAL_ISSUES("CONTROVERSIAL_SOCIAL_ISSUES"),
    
    DEATH_TRAGEDY("DEATH_TRAGEDY"),
    
    DRUGS("DRUGS"),
    
    IDENTITY_ETHNICITY("IDENTITY_ETHNICITY"),
    
    FINANCIAL_HARDSHIP("FINANCIAL_HARDSHIP"),
    
    FIREARMS_WEAPONS("FIREARMS_WEAPONS"),
    
    HEALTH("HEALTH"),
    
    INSULT("INSULT"),
    
    LEGAL("LEGAL"),
    
    MENTAL_HEALTH("MENTAL_HEALTH"),
    
    POLITICS("POLITICS"),
    
    RELIGION_BELIEFS("RELIGION_BELIEFS"),
    
    SAFETY("SAFETY"),
    
    SELF_HARM("SELF_HARM"),
    
    SPECIAL_NEEDS("SPECIAL_NEEDS"),
    
    TERRORISM("TERRORISM"),
    
    TOXIC("TOXIC"),
    
    TROUBLED_RELATIONSHIP("TROUBLED_RELATIONSHIP"),
    
    VIOLENCE_ABUSE("VIOLENCE_ABUSE"),
    
    VULGAR("VULGAR"),
    
    WAR_CONFLICT("WAR_CONFLICT");

    private String value;

    LabelEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LabelEnum fromValue(String value) {
      for (LabelEnum b : LabelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LabelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LabelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LabelEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LabelEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LabelEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LABEL = "label";
  @SerializedName(SERIALIZED_NAME_LABEL)
  private LabelEnum label;

  public static final String SERIALIZED_NAME_SCORE = "score";
  @SerializedName(SERIALIZED_NAME_SCORE)
  private Float score;

  public LearningGenaiRootToxicitySignal() {
  }

  public LearningGenaiRootToxicitySignal allowed(Boolean allowed) {
    this.allowed = allowed;
    return this;
  }

  /**
   * Get allowed
   * @return allowed
   */
  @javax.annotation.Nullable
  public Boolean getAllowed() {
    return allowed;
  }

  public void setAllowed(Boolean allowed) {
    this.allowed = allowed;
  }


  public LearningGenaiRootToxicitySignal label(LabelEnum label) {
    this.label = label;
    return this;
  }

  /**
   * Get label
   * @return label
   */
  @javax.annotation.Nullable
  public LabelEnum getLabel() {
    return label;
  }

  public void setLabel(LabelEnum label) {
    this.label = label;
  }


  public LearningGenaiRootToxicitySignal score(Float score) {
    this.score = score;
    return this;
  }

  /**
   * Get score
   * @return score
   */
  @javax.annotation.Nullable
  public Float getScore() {
    return score;
  }

  public void setScore(Float score) {
    this.score = score;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LearningGenaiRootToxicitySignal learningGenaiRootToxicitySignal = (LearningGenaiRootToxicitySignal) o;
    return Objects.equals(this.allowed, learningGenaiRootToxicitySignal.allowed) &&
        Objects.equals(this.label, learningGenaiRootToxicitySignal.label) &&
        Objects.equals(this.score, learningGenaiRootToxicitySignal.score);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowed, label, score);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LearningGenaiRootToxicitySignal {\n");
    sb.append("    allowed: ").append(toIndentedString(allowed)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    score: ").append(toIndentedString(score)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allowed");
    openapiFields.add("label");
    openapiFields.add("score");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LearningGenaiRootToxicitySignal
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LearningGenaiRootToxicitySignal.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LearningGenaiRootToxicitySignal is not found in the empty JSON string", LearningGenaiRootToxicitySignal.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LearningGenaiRootToxicitySignal.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LearningGenaiRootToxicitySignal` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("label") != null && !jsonObj.get("label").isJsonNull()) && !jsonObj.get("label").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `label` to be a primitive type in the JSON string but got `%s`", jsonObj.get("label").toString()));
      }
      // validate the optional field `label`
      if (jsonObj.get("label") != null && !jsonObj.get("label").isJsonNull()) {
        LabelEnum.validateJsonElement(jsonObj.get("label"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LearningGenaiRootToxicitySignal.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LearningGenaiRootToxicitySignal' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LearningGenaiRootToxicitySignal> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LearningGenaiRootToxicitySignal.class));

       return (TypeAdapter<T>) new TypeAdapter<LearningGenaiRootToxicitySignal>() {
           @Override
           public void write(JsonWriter out, LearningGenaiRootToxicitySignal value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LearningGenaiRootToxicitySignal read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LearningGenaiRootToxicitySignal given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LearningGenaiRootToxicitySignal
   * @throws IOException if the JSON string is invalid with respect to LearningGenaiRootToxicitySignal
   */
  public static LearningGenaiRootToxicitySignal fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LearningGenaiRootToxicitySignal.class);
  }

  /**
   * Convert an instance of LearningGenaiRootToxicitySignal to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

