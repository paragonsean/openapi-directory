/*
 * Vertex AI API
 * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CloudAiNlLlmProtoServiceSafetyRatingInfluentialTerm;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Safety rating corresponding to the generated content.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:33:30.041358-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CloudAiNlLlmProtoServiceSafetyRating {
  public static final String SERIALIZED_NAME_BLOCKED = "blocked";
  @SerializedName(SERIALIZED_NAME_BLOCKED)
  private Boolean blocked;

  /**
   * Harm category.
   */
  @JsonAdapter(CategoryEnum.Adapter.class)
  public enum CategoryEnum {
    UNSPECIFIED("HARM_CATEGORY_UNSPECIFIED"),
    
    HATE_SPEECH("HARM_CATEGORY_HATE_SPEECH"),
    
    DANGEROUS_CONTENT("HARM_CATEGORY_DANGEROUS_CONTENT"),
    
    HARASSMENT("HARM_CATEGORY_HARASSMENT"),
    
    SEXUALLY_EXPLICIT("HARM_CATEGORY_SEXUALLY_EXPLICIT");

    private String value;

    CategoryEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CategoryEnum fromValue(String value) {
      for (CategoryEnum b : CategoryEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CategoryEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CategoryEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CategoryEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CategoryEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CategoryEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CATEGORY = "category";
  @SerializedName(SERIALIZED_NAME_CATEGORY)
  private CategoryEnum category;

  public static final String SERIALIZED_NAME_INFLUENTIAL_TERMS = "influentialTerms";
  @SerializedName(SERIALIZED_NAME_INFLUENTIAL_TERMS)
  private List<CloudAiNlLlmProtoServiceSafetyRatingInfluentialTerm> influentialTerms = new ArrayList<>();

  /**
   * Harm probability levels in the content.
   */
  @JsonAdapter(ProbabilityEnum.Adapter.class)
  public enum ProbabilityEnum {
    HARM_PROBABILITY_UNSPECIFIED("HARM_PROBABILITY_UNSPECIFIED"),
    
    NEGLIGIBLE("NEGLIGIBLE"),
    
    LOW("LOW"),
    
    MEDIUM("MEDIUM"),
    
    HIGH("HIGH");

    private String value;

    ProbabilityEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProbabilityEnum fromValue(String value) {
      for (ProbabilityEnum b : ProbabilityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProbabilityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProbabilityEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProbabilityEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProbabilityEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ProbabilityEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PROBABILITY = "probability";
  @SerializedName(SERIALIZED_NAME_PROBABILITY)
  private ProbabilityEnum probability;

  public static final String SERIALIZED_NAME_PROBABILITY_SCORE = "probabilityScore";
  @SerializedName(SERIALIZED_NAME_PROBABILITY_SCORE)
  private Float probabilityScore;

  /**
   * Harm severity levels in the content.
   */
  @JsonAdapter(SeverityEnum.Adapter.class)
  public enum SeverityEnum {
    UNSPECIFIED("HARM_SEVERITY_UNSPECIFIED"),
    
    NEGLIGIBLE("HARM_SEVERITY_NEGLIGIBLE"),
    
    LOW("HARM_SEVERITY_LOW"),
    
    MEDIUM("HARM_SEVERITY_MEDIUM"),
    
    HIGH("HARM_SEVERITY_HIGH");

    private String value;

    SeverityEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SeverityEnum fromValue(String value) {
      for (SeverityEnum b : SeverityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SeverityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SeverityEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SeverityEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SeverityEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SeverityEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SEVERITY = "severity";
  @SerializedName(SERIALIZED_NAME_SEVERITY)
  private SeverityEnum severity;

  public static final String SERIALIZED_NAME_SEVERITY_SCORE = "severityScore";
  @SerializedName(SERIALIZED_NAME_SEVERITY_SCORE)
  private Float severityScore;

  public CloudAiNlLlmProtoServiceSafetyRating() {
  }

  public CloudAiNlLlmProtoServiceSafetyRating blocked(Boolean blocked) {
    this.blocked = blocked;
    return this;
  }

  /**
   * Indicates whether the content was filtered out because of this rating.
   * @return blocked
   */
  @javax.annotation.Nullable
  public Boolean getBlocked() {
    return blocked;
  }

  public void setBlocked(Boolean blocked) {
    this.blocked = blocked;
  }


  public CloudAiNlLlmProtoServiceSafetyRating category(CategoryEnum category) {
    this.category = category;
    return this;
  }

  /**
   * Harm category.
   * @return category
   */
  @javax.annotation.Nullable
  public CategoryEnum getCategory() {
    return category;
  }

  public void setCategory(CategoryEnum category) {
    this.category = category;
  }


  public CloudAiNlLlmProtoServiceSafetyRating influentialTerms(List<CloudAiNlLlmProtoServiceSafetyRatingInfluentialTerm> influentialTerms) {
    this.influentialTerms = influentialTerms;
    return this;
  }

  public CloudAiNlLlmProtoServiceSafetyRating addInfluentialTermsItem(CloudAiNlLlmProtoServiceSafetyRatingInfluentialTerm influentialTermsItem) {
    if (this.influentialTerms == null) {
      this.influentialTerms = new ArrayList<>();
    }
    this.influentialTerms.add(influentialTermsItem);
    return this;
  }

  /**
   * The influential terms that could potentially block the response.
   * @return influentialTerms
   */
  @javax.annotation.Nullable
  public List<CloudAiNlLlmProtoServiceSafetyRatingInfluentialTerm> getInfluentialTerms() {
    return influentialTerms;
  }

  public void setInfluentialTerms(List<CloudAiNlLlmProtoServiceSafetyRatingInfluentialTerm> influentialTerms) {
    this.influentialTerms = influentialTerms;
  }


  public CloudAiNlLlmProtoServiceSafetyRating probability(ProbabilityEnum probability) {
    this.probability = probability;
    return this;
  }

  /**
   * Harm probability levels in the content.
   * @return probability
   */
  @javax.annotation.Nullable
  public ProbabilityEnum getProbability() {
    return probability;
  }

  public void setProbability(ProbabilityEnum probability) {
    this.probability = probability;
  }


  public CloudAiNlLlmProtoServiceSafetyRating probabilityScore(Float probabilityScore) {
    this.probabilityScore = probabilityScore;
    return this;
  }

  /**
   * Harm probability score.
   * @return probabilityScore
   */
  @javax.annotation.Nullable
  public Float getProbabilityScore() {
    return probabilityScore;
  }

  public void setProbabilityScore(Float probabilityScore) {
    this.probabilityScore = probabilityScore;
  }


  public CloudAiNlLlmProtoServiceSafetyRating severity(SeverityEnum severity) {
    this.severity = severity;
    return this;
  }

  /**
   * Harm severity levels in the content.
   * @return severity
   */
  @javax.annotation.Nullable
  public SeverityEnum getSeverity() {
    return severity;
  }

  public void setSeverity(SeverityEnum severity) {
    this.severity = severity;
  }


  public CloudAiNlLlmProtoServiceSafetyRating severityScore(Float severityScore) {
    this.severityScore = severityScore;
    return this;
  }

  /**
   * Harm severity score.
   * @return severityScore
   */
  @javax.annotation.Nullable
  public Float getSeverityScore() {
    return severityScore;
  }

  public void setSeverityScore(Float severityScore) {
    this.severityScore = severityScore;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CloudAiNlLlmProtoServiceSafetyRating cloudAiNlLlmProtoServiceSafetyRating = (CloudAiNlLlmProtoServiceSafetyRating) o;
    return Objects.equals(this.blocked, cloudAiNlLlmProtoServiceSafetyRating.blocked) &&
        Objects.equals(this.category, cloudAiNlLlmProtoServiceSafetyRating.category) &&
        Objects.equals(this.influentialTerms, cloudAiNlLlmProtoServiceSafetyRating.influentialTerms) &&
        Objects.equals(this.probability, cloudAiNlLlmProtoServiceSafetyRating.probability) &&
        Objects.equals(this.probabilityScore, cloudAiNlLlmProtoServiceSafetyRating.probabilityScore) &&
        Objects.equals(this.severity, cloudAiNlLlmProtoServiceSafetyRating.severity) &&
        Objects.equals(this.severityScore, cloudAiNlLlmProtoServiceSafetyRating.severityScore);
  }

  @Override
  public int hashCode() {
    return Objects.hash(blocked, category, influentialTerms, probability, probabilityScore, severity, severityScore);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CloudAiNlLlmProtoServiceSafetyRating {\n");
    sb.append("    blocked: ").append(toIndentedString(blocked)).append("\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    influentialTerms: ").append(toIndentedString(influentialTerms)).append("\n");
    sb.append("    probability: ").append(toIndentedString(probability)).append("\n");
    sb.append("    probabilityScore: ").append(toIndentedString(probabilityScore)).append("\n");
    sb.append("    severity: ").append(toIndentedString(severity)).append("\n");
    sb.append("    severityScore: ").append(toIndentedString(severityScore)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("blocked");
    openapiFields.add("category");
    openapiFields.add("influentialTerms");
    openapiFields.add("probability");
    openapiFields.add("probabilityScore");
    openapiFields.add("severity");
    openapiFields.add("severityScore");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CloudAiNlLlmProtoServiceSafetyRating
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CloudAiNlLlmProtoServiceSafetyRating.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CloudAiNlLlmProtoServiceSafetyRating is not found in the empty JSON string", CloudAiNlLlmProtoServiceSafetyRating.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CloudAiNlLlmProtoServiceSafetyRating.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CloudAiNlLlmProtoServiceSafetyRating` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("category") != null && !jsonObj.get("category").isJsonNull()) && !jsonObj.get("category").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `category` to be a primitive type in the JSON string but got `%s`", jsonObj.get("category").toString()));
      }
      // validate the optional field `category`
      if (jsonObj.get("category") != null && !jsonObj.get("category").isJsonNull()) {
        CategoryEnum.validateJsonElement(jsonObj.get("category"));
      }
      if (jsonObj.get("influentialTerms") != null && !jsonObj.get("influentialTerms").isJsonNull()) {
        JsonArray jsonArrayinfluentialTerms = jsonObj.getAsJsonArray("influentialTerms");
        if (jsonArrayinfluentialTerms != null) {
          // ensure the json data is an array
          if (!jsonObj.get("influentialTerms").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `influentialTerms` to be an array in the JSON string but got `%s`", jsonObj.get("influentialTerms").toString()));
          }

          // validate the optional field `influentialTerms` (array)
          for (int i = 0; i < jsonArrayinfluentialTerms.size(); i++) {
            CloudAiNlLlmProtoServiceSafetyRatingInfluentialTerm.validateJsonElement(jsonArrayinfluentialTerms.get(i));
          };
        }
      }
      if ((jsonObj.get("probability") != null && !jsonObj.get("probability").isJsonNull()) && !jsonObj.get("probability").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `probability` to be a primitive type in the JSON string but got `%s`", jsonObj.get("probability").toString()));
      }
      // validate the optional field `probability`
      if (jsonObj.get("probability") != null && !jsonObj.get("probability").isJsonNull()) {
        ProbabilityEnum.validateJsonElement(jsonObj.get("probability"));
      }
      if ((jsonObj.get("severity") != null && !jsonObj.get("severity").isJsonNull()) && !jsonObj.get("severity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `severity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("severity").toString()));
      }
      // validate the optional field `severity`
      if (jsonObj.get("severity") != null && !jsonObj.get("severity").isJsonNull()) {
        SeverityEnum.validateJsonElement(jsonObj.get("severity"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CloudAiNlLlmProtoServiceSafetyRating.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CloudAiNlLlmProtoServiceSafetyRating' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CloudAiNlLlmProtoServiceSafetyRating> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CloudAiNlLlmProtoServiceSafetyRating.class));

       return (TypeAdapter<T>) new TypeAdapter<CloudAiNlLlmProtoServiceSafetyRating>() {
           @Override
           public void write(JsonWriter out, CloudAiNlLlmProtoServiceSafetyRating value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CloudAiNlLlmProtoServiceSafetyRating read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CloudAiNlLlmProtoServiceSafetyRating given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CloudAiNlLlmProtoServiceSafetyRating
   * @throws IOException if the JSON string is invalid with respect to CloudAiNlLlmProtoServiceSafetyRating
   */
  public static CloudAiNlLlmProtoServiceSafetyRating fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CloudAiNlLlmProtoServiceSafetyRating.class);
  }

  /**
   * Convert an instance of CloudAiNlLlmProtoServiceSafetyRating to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

