/*
 * Vertex AI API
 * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.GoogleCloudAiplatformV1beta1CreatePipelineJobRequest;
import org.openapitools.client.model.GoogleCloudAiplatformV1beta1ScheduleRunResponse;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An instance of a Schedule periodically schedules runs to make API calls based on user specified time specification and API request type.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:33:30.041358-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudAiplatformV1beta1Schedule {
  public static final String SERIALIZED_NAME_ALLOW_QUEUEING = "allowQueueing";
  @SerializedName(SERIALIZED_NAME_ALLOW_QUEUEING)
  private Boolean allowQueueing;

  public static final String SERIALIZED_NAME_CATCH_UP = "catchUp";
  @SerializedName(SERIALIZED_NAME_CATCH_UP)
  private Boolean catchUp;

  public static final String SERIALIZED_NAME_CREATE_PIPELINE_JOB_REQUEST = "createPipelineJobRequest";
  @SerializedName(SERIALIZED_NAME_CREATE_PIPELINE_JOB_REQUEST)
  private GoogleCloudAiplatformV1beta1CreatePipelineJobRequest createPipelineJobRequest;

  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private String createTime;

  public static final String SERIALIZED_NAME_CRON = "cron";
  @SerializedName(SERIALIZED_NAME_CRON)
  private String cron;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_END_TIME = "endTime";
  @SerializedName(SERIALIZED_NAME_END_TIME)
  private String endTime;

  public static final String SERIALIZED_NAME_LAST_PAUSE_TIME = "lastPauseTime";
  @SerializedName(SERIALIZED_NAME_LAST_PAUSE_TIME)
  private String lastPauseTime;

  public static final String SERIALIZED_NAME_LAST_RESUME_TIME = "lastResumeTime";
  @SerializedName(SERIALIZED_NAME_LAST_RESUME_TIME)
  private String lastResumeTime;

  public static final String SERIALIZED_NAME_LAST_SCHEDULED_RUN_RESPONSE = "lastScheduledRunResponse";
  @SerializedName(SERIALIZED_NAME_LAST_SCHEDULED_RUN_RESPONSE)
  private GoogleCloudAiplatformV1beta1ScheduleRunResponse lastScheduledRunResponse;

  public static final String SERIALIZED_NAME_MAX_CONCURRENT_RUN_COUNT = "maxConcurrentRunCount";
  @SerializedName(SERIALIZED_NAME_MAX_CONCURRENT_RUN_COUNT)
  private String maxConcurrentRunCount;

  public static final String SERIALIZED_NAME_MAX_RUN_COUNT = "maxRunCount";
  @SerializedName(SERIALIZED_NAME_MAX_RUN_COUNT)
  private String maxRunCount;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NEXT_RUN_TIME = "nextRunTime";
  @SerializedName(SERIALIZED_NAME_NEXT_RUN_TIME)
  private String nextRunTime;

  public static final String SERIALIZED_NAME_START_TIME = "startTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private String startTime;

  public static final String SERIALIZED_NAME_STARTED_RUN_COUNT = "startedRunCount";
  @SerializedName(SERIALIZED_NAME_STARTED_RUN_COUNT)
  private String startedRunCount;

  /**
   * Output only. The state of this Schedule.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    STATE_UNSPECIFIED("STATE_UNSPECIFIED"),
    
    ACTIVE("ACTIVE"),
    
    PAUSED("PAUSED"),
    
    COMPLETED("COMPLETED");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public static final String SERIALIZED_NAME_UPDATE_TIME = "updateTime";
  @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
  private String updateTime;

  public GoogleCloudAiplatformV1beta1Schedule() {
  }

  public GoogleCloudAiplatformV1beta1Schedule(
     Boolean catchUp, 
     String createTime, 
     String lastPauseTime, 
     String lastResumeTime, 
     String nextRunTime, 
     String startedRunCount, 
     StateEnum state, 
     String updateTime
  ) {
    this();
    this.catchUp = catchUp;
    this.createTime = createTime;
    this.lastPauseTime = lastPauseTime;
    this.lastResumeTime = lastResumeTime;
    this.nextRunTime = nextRunTime;
    this.startedRunCount = startedRunCount;
    this.state = state;
    this.updateTime = updateTime;
  }

  public GoogleCloudAiplatformV1beta1Schedule allowQueueing(Boolean allowQueueing) {
    this.allowQueueing = allowQueueing;
    return this;
  }

  /**
   * Optional. Whether new scheduled runs can be queued when max_concurrent_runs limit is reached. If set to true, new runs will be queued instead of skipped. Default to false.
   * @return allowQueueing
   */
  @javax.annotation.Nullable
  public Boolean getAllowQueueing() {
    return allowQueueing;
  }

  public void setAllowQueueing(Boolean allowQueueing) {
    this.allowQueueing = allowQueueing;
  }


  /**
   * Output only. Whether to backfill missed runs when the schedule is resumed from PAUSED state. If set to true, all missed runs will be scheduled. New runs will be scheduled after the backfill is complete. Default to false.
   * @return catchUp
   */
  @javax.annotation.Nullable
  public Boolean getCatchUp() {
    return catchUp;
  }



  public GoogleCloudAiplatformV1beta1Schedule createPipelineJobRequest(GoogleCloudAiplatformV1beta1CreatePipelineJobRequest createPipelineJobRequest) {
    this.createPipelineJobRequest = createPipelineJobRequest;
    return this;
  }

  /**
   * Get createPipelineJobRequest
   * @return createPipelineJobRequest
   */
  @javax.annotation.Nullable
  public GoogleCloudAiplatformV1beta1CreatePipelineJobRequest getCreatePipelineJobRequest() {
    return createPipelineJobRequest;
  }

  public void setCreatePipelineJobRequest(GoogleCloudAiplatformV1beta1CreatePipelineJobRequest createPipelineJobRequest) {
    this.createPipelineJobRequest = createPipelineJobRequest;
  }


  /**
   * Output only. Timestamp when this Schedule was created.
   * @return createTime
   */
  @javax.annotation.Nullable
  public String getCreateTime() {
    return createTime;
  }



  public GoogleCloudAiplatformV1beta1Schedule cron(String cron) {
    this.cron = cron;
    return this;
  }

  /**
   * Cron schedule (https://en.wikipedia.org/wiki/Cron) to launch scheduled runs. To explicitly set a timezone to the cron tab, apply a prefix in the cron tab: \&quot;CRON_TZ&#x3D;${IANA_TIME_ZONE}\&quot; or \&quot;TZ&#x3D;${IANA_TIME_ZONE}\&quot;. The ${IANA_TIME_ZONE} may only be a valid string from IANA time zone database. For example, \&quot;CRON_TZ&#x3D;America/New_York 1 * * * *\&quot;, or \&quot;TZ&#x3D;America/New_York 1 * * * *\&quot;.
   * @return cron
   */
  @javax.annotation.Nullable
  public String getCron() {
    return cron;
  }

  public void setCron(String cron) {
    this.cron = cron;
  }


  public GoogleCloudAiplatformV1beta1Schedule displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * Required. User provided name of the Schedule. The name can be up to 128 characters long and can consist of any UTF-8 characters.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public GoogleCloudAiplatformV1beta1Schedule endTime(String endTime) {
    this.endTime = endTime;
    return this;
  }

  /**
   * Optional. Timestamp after which no new runs can be scheduled. If specified, The schedule will be completed when either end_time is reached or when scheduled_run_count &gt;&#x3D; max_run_count. If not specified, new runs will keep getting scheduled until this Schedule is paused or deleted. Already scheduled runs will be allowed to complete. Unset if not specified.
   * @return endTime
   */
  @javax.annotation.Nullable
  public String getEndTime() {
    return endTime;
  }

  public void setEndTime(String endTime) {
    this.endTime = endTime;
  }


  /**
   * Output only. Timestamp when this Schedule was last paused. Unset if never paused.
   * @return lastPauseTime
   */
  @javax.annotation.Nullable
  public String getLastPauseTime() {
    return lastPauseTime;
  }



  /**
   * Output only. Timestamp when this Schedule was last resumed. Unset if never resumed from pause.
   * @return lastResumeTime
   */
  @javax.annotation.Nullable
  public String getLastResumeTime() {
    return lastResumeTime;
  }



  public GoogleCloudAiplatformV1beta1Schedule lastScheduledRunResponse(GoogleCloudAiplatformV1beta1ScheduleRunResponse lastScheduledRunResponse) {
    this.lastScheduledRunResponse = lastScheduledRunResponse;
    return this;
  }

  /**
   * Get lastScheduledRunResponse
   * @return lastScheduledRunResponse
   */
  @javax.annotation.Nullable
  public GoogleCloudAiplatformV1beta1ScheduleRunResponse getLastScheduledRunResponse() {
    return lastScheduledRunResponse;
  }

  public void setLastScheduledRunResponse(GoogleCloudAiplatformV1beta1ScheduleRunResponse lastScheduledRunResponse) {
    this.lastScheduledRunResponse = lastScheduledRunResponse;
  }


  public GoogleCloudAiplatformV1beta1Schedule maxConcurrentRunCount(String maxConcurrentRunCount) {
    this.maxConcurrentRunCount = maxConcurrentRunCount;
    return this;
  }

  /**
   * Required. Maximum number of runs that can be started concurrently for this Schedule. This is the limit for starting the scheduled requests and not the execution of the operations/jobs created by the requests (if applicable).
   * @return maxConcurrentRunCount
   */
  @javax.annotation.Nullable
  public String getMaxConcurrentRunCount() {
    return maxConcurrentRunCount;
  }

  public void setMaxConcurrentRunCount(String maxConcurrentRunCount) {
    this.maxConcurrentRunCount = maxConcurrentRunCount;
  }


  public GoogleCloudAiplatformV1beta1Schedule maxRunCount(String maxRunCount) {
    this.maxRunCount = maxRunCount;
    return this;
  }

  /**
   * Optional. Maximum run count of the schedule. If specified, The schedule will be completed when either started_run_count &gt;&#x3D; max_run_count or when end_time is reached. If not specified, new runs will keep getting scheduled until this Schedule is paused or deleted. Already scheduled runs will be allowed to complete. Unset if not specified.
   * @return maxRunCount
   */
  @javax.annotation.Nullable
  public String getMaxRunCount() {
    return maxRunCount;
  }

  public void setMaxRunCount(String maxRunCount) {
    this.maxRunCount = maxRunCount;
  }


  public GoogleCloudAiplatformV1beta1Schedule name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Immutable. The resource name of the Schedule.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  /**
   * Output only. Timestamp when this Schedule should schedule the next run. Having a next_run_time in the past means the runs are being started behind schedule.
   * @return nextRunTime
   */
  @javax.annotation.Nullable
  public String getNextRunTime() {
    return nextRunTime;
  }



  public GoogleCloudAiplatformV1beta1Schedule startTime(String startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * Optional. Timestamp after which the first run can be scheduled. Default to Schedule create time if not specified.
   * @return startTime
   */
  @javax.annotation.Nullable
  public String getStartTime() {
    return startTime;
  }

  public void setStartTime(String startTime) {
    this.startTime = startTime;
  }


  /**
   * Output only. The number of runs started by this schedule.
   * @return startedRunCount
   */
  @javax.annotation.Nullable
  public String getStartedRunCount() {
    return startedRunCount;
  }



  /**
   * Output only. The state of this Schedule.
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }



  /**
   * Output only. Timestamp when this Schedule was updated.
   * @return updateTime
   */
  @javax.annotation.Nullable
  public String getUpdateTime() {
    return updateTime;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudAiplatformV1beta1Schedule googleCloudAiplatformV1beta1Schedule = (GoogleCloudAiplatformV1beta1Schedule) o;
    return Objects.equals(this.allowQueueing, googleCloudAiplatformV1beta1Schedule.allowQueueing) &&
        Objects.equals(this.catchUp, googleCloudAiplatformV1beta1Schedule.catchUp) &&
        Objects.equals(this.createPipelineJobRequest, googleCloudAiplatformV1beta1Schedule.createPipelineJobRequest) &&
        Objects.equals(this.createTime, googleCloudAiplatformV1beta1Schedule.createTime) &&
        Objects.equals(this.cron, googleCloudAiplatformV1beta1Schedule.cron) &&
        Objects.equals(this.displayName, googleCloudAiplatformV1beta1Schedule.displayName) &&
        Objects.equals(this.endTime, googleCloudAiplatformV1beta1Schedule.endTime) &&
        Objects.equals(this.lastPauseTime, googleCloudAiplatformV1beta1Schedule.lastPauseTime) &&
        Objects.equals(this.lastResumeTime, googleCloudAiplatformV1beta1Schedule.lastResumeTime) &&
        Objects.equals(this.lastScheduledRunResponse, googleCloudAiplatformV1beta1Schedule.lastScheduledRunResponse) &&
        Objects.equals(this.maxConcurrentRunCount, googleCloudAiplatformV1beta1Schedule.maxConcurrentRunCount) &&
        Objects.equals(this.maxRunCount, googleCloudAiplatformV1beta1Schedule.maxRunCount) &&
        Objects.equals(this.name, googleCloudAiplatformV1beta1Schedule.name) &&
        Objects.equals(this.nextRunTime, googleCloudAiplatformV1beta1Schedule.nextRunTime) &&
        Objects.equals(this.startTime, googleCloudAiplatformV1beta1Schedule.startTime) &&
        Objects.equals(this.startedRunCount, googleCloudAiplatformV1beta1Schedule.startedRunCount) &&
        Objects.equals(this.state, googleCloudAiplatformV1beta1Schedule.state) &&
        Objects.equals(this.updateTime, googleCloudAiplatformV1beta1Schedule.updateTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowQueueing, catchUp, createPipelineJobRequest, createTime, cron, displayName, endTime, lastPauseTime, lastResumeTime, lastScheduledRunResponse, maxConcurrentRunCount, maxRunCount, name, nextRunTime, startTime, startedRunCount, state, updateTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudAiplatformV1beta1Schedule {\n");
    sb.append("    allowQueueing: ").append(toIndentedString(allowQueueing)).append("\n");
    sb.append("    catchUp: ").append(toIndentedString(catchUp)).append("\n");
    sb.append("    createPipelineJobRequest: ").append(toIndentedString(createPipelineJobRequest)).append("\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    cron: ").append(toIndentedString(cron)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    lastPauseTime: ").append(toIndentedString(lastPauseTime)).append("\n");
    sb.append("    lastResumeTime: ").append(toIndentedString(lastResumeTime)).append("\n");
    sb.append("    lastScheduledRunResponse: ").append(toIndentedString(lastScheduledRunResponse)).append("\n");
    sb.append("    maxConcurrentRunCount: ").append(toIndentedString(maxConcurrentRunCount)).append("\n");
    sb.append("    maxRunCount: ").append(toIndentedString(maxRunCount)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    nextRunTime: ").append(toIndentedString(nextRunTime)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    startedRunCount: ").append(toIndentedString(startedRunCount)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allowQueueing");
    openapiFields.add("catchUp");
    openapiFields.add("createPipelineJobRequest");
    openapiFields.add("createTime");
    openapiFields.add("cron");
    openapiFields.add("displayName");
    openapiFields.add("endTime");
    openapiFields.add("lastPauseTime");
    openapiFields.add("lastResumeTime");
    openapiFields.add("lastScheduledRunResponse");
    openapiFields.add("maxConcurrentRunCount");
    openapiFields.add("maxRunCount");
    openapiFields.add("name");
    openapiFields.add("nextRunTime");
    openapiFields.add("startTime");
    openapiFields.add("startedRunCount");
    openapiFields.add("state");
    openapiFields.add("updateTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudAiplatformV1beta1Schedule
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudAiplatformV1beta1Schedule.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudAiplatformV1beta1Schedule is not found in the empty JSON string", GoogleCloudAiplatformV1beta1Schedule.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudAiplatformV1beta1Schedule.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudAiplatformV1beta1Schedule` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `createPipelineJobRequest`
      if (jsonObj.get("createPipelineJobRequest") != null && !jsonObj.get("createPipelineJobRequest").isJsonNull()) {
        GoogleCloudAiplatformV1beta1CreatePipelineJobRequest.validateJsonElement(jsonObj.get("createPipelineJobRequest"));
      }
      if ((jsonObj.get("createTime") != null && !jsonObj.get("createTime").isJsonNull()) && !jsonObj.get("createTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createTime").toString()));
      }
      if ((jsonObj.get("cron") != null && !jsonObj.get("cron").isJsonNull()) && !jsonObj.get("cron").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cron` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cron").toString()));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if ((jsonObj.get("endTime") != null && !jsonObj.get("endTime").isJsonNull()) && !jsonObj.get("endTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `endTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("endTime").toString()));
      }
      if ((jsonObj.get("lastPauseTime") != null && !jsonObj.get("lastPauseTime").isJsonNull()) && !jsonObj.get("lastPauseTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastPauseTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastPauseTime").toString()));
      }
      if ((jsonObj.get("lastResumeTime") != null && !jsonObj.get("lastResumeTime").isJsonNull()) && !jsonObj.get("lastResumeTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastResumeTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastResumeTime").toString()));
      }
      // validate the optional field `lastScheduledRunResponse`
      if (jsonObj.get("lastScheduledRunResponse") != null && !jsonObj.get("lastScheduledRunResponse").isJsonNull()) {
        GoogleCloudAiplatformV1beta1ScheduleRunResponse.validateJsonElement(jsonObj.get("lastScheduledRunResponse"));
      }
      if ((jsonObj.get("maxConcurrentRunCount") != null && !jsonObj.get("maxConcurrentRunCount").isJsonNull()) && !jsonObj.get("maxConcurrentRunCount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `maxConcurrentRunCount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("maxConcurrentRunCount").toString()));
      }
      if ((jsonObj.get("maxRunCount") != null && !jsonObj.get("maxRunCount").isJsonNull()) && !jsonObj.get("maxRunCount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `maxRunCount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("maxRunCount").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("nextRunTime") != null && !jsonObj.get("nextRunTime").isJsonNull()) && !jsonObj.get("nextRunTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nextRunTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nextRunTime").toString()));
      }
      if ((jsonObj.get("startTime") != null && !jsonObj.get("startTime").isJsonNull()) && !jsonObj.get("startTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `startTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("startTime").toString()));
      }
      if ((jsonObj.get("startedRunCount") != null && !jsonObj.get("startedRunCount").isJsonNull()) && !jsonObj.get("startedRunCount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `startedRunCount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("startedRunCount").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
      if ((jsonObj.get("updateTime") != null && !jsonObj.get("updateTime").isJsonNull()) && !jsonObj.get("updateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updateTime").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudAiplatformV1beta1Schedule.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudAiplatformV1beta1Schedule' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudAiplatformV1beta1Schedule> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudAiplatformV1beta1Schedule.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudAiplatformV1beta1Schedule>() {
           @Override
           public void write(JsonWriter out, GoogleCloudAiplatformV1beta1Schedule value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudAiplatformV1beta1Schedule read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudAiplatformV1beta1Schedule given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudAiplatformV1beta1Schedule
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudAiplatformV1beta1Schedule
   */
  public static GoogleCloudAiplatformV1beta1Schedule fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudAiplatformV1beta1Schedule.class);
  }

  /**
   * Convert an instance of GoogleCloudAiplatformV1beta1Schedule to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

