/*
 * Vertex AI API
 * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Success and error statistics of processing multiple entities (for example, DataItems or structured data rows) in batch.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:33:30.041358-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudAiplatformV1beta1CompletionStats {
  public static final String SERIALIZED_NAME_FAILED_COUNT = "failedCount";
  @SerializedName(SERIALIZED_NAME_FAILED_COUNT)
  private String failedCount;

  public static final String SERIALIZED_NAME_INCOMPLETE_COUNT = "incompleteCount";
  @SerializedName(SERIALIZED_NAME_INCOMPLETE_COUNT)
  private String incompleteCount;

  public static final String SERIALIZED_NAME_SUCCESSFUL_COUNT = "successfulCount";
  @SerializedName(SERIALIZED_NAME_SUCCESSFUL_COUNT)
  private String successfulCount;

  public static final String SERIALIZED_NAME_SUCCESSFUL_FORECAST_POINT_COUNT = "successfulForecastPointCount";
  @SerializedName(SERIALIZED_NAME_SUCCESSFUL_FORECAST_POINT_COUNT)
  private String successfulForecastPointCount;

  public GoogleCloudAiplatformV1beta1CompletionStats() {
  }

  public GoogleCloudAiplatformV1beta1CompletionStats(
     String failedCount, 
     String incompleteCount, 
     String successfulCount, 
     String successfulForecastPointCount
  ) {
    this();
    this.failedCount = failedCount;
    this.incompleteCount = incompleteCount;
    this.successfulCount = successfulCount;
    this.successfulForecastPointCount = successfulForecastPointCount;
  }

  /**
   * Output only. The number of entities for which any error was encountered.
   * @return failedCount
   */
  @javax.annotation.Nullable
  public String getFailedCount() {
    return failedCount;
  }



  /**
   * Output only. In cases when enough errors are encountered a job, pipeline, or operation may be failed as a whole. Below is the number of entities for which the processing had not been finished (either in successful or failed state). Set to -1 if the number is unknown (for example, the operation failed before the total entity number could be collected).
   * @return incompleteCount
   */
  @javax.annotation.Nullable
  public String getIncompleteCount() {
    return incompleteCount;
  }



  /**
   * Output only. The number of entities that had been processed successfully.
   * @return successfulCount
   */
  @javax.annotation.Nullable
  public String getSuccessfulCount() {
    return successfulCount;
  }



  /**
   * Output only. The number of the successful forecast points that are generated by the forecasting model. This is ONLY used by the forecasting batch prediction.
   * @return successfulForecastPointCount
   */
  @javax.annotation.Nullable
  public String getSuccessfulForecastPointCount() {
    return successfulForecastPointCount;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudAiplatformV1beta1CompletionStats googleCloudAiplatformV1beta1CompletionStats = (GoogleCloudAiplatformV1beta1CompletionStats) o;
    return Objects.equals(this.failedCount, googleCloudAiplatformV1beta1CompletionStats.failedCount) &&
        Objects.equals(this.incompleteCount, googleCloudAiplatformV1beta1CompletionStats.incompleteCount) &&
        Objects.equals(this.successfulCount, googleCloudAiplatformV1beta1CompletionStats.successfulCount) &&
        Objects.equals(this.successfulForecastPointCount, googleCloudAiplatformV1beta1CompletionStats.successfulForecastPointCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(failedCount, incompleteCount, successfulCount, successfulForecastPointCount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudAiplatformV1beta1CompletionStats {\n");
    sb.append("    failedCount: ").append(toIndentedString(failedCount)).append("\n");
    sb.append("    incompleteCount: ").append(toIndentedString(incompleteCount)).append("\n");
    sb.append("    successfulCount: ").append(toIndentedString(successfulCount)).append("\n");
    sb.append("    successfulForecastPointCount: ").append(toIndentedString(successfulForecastPointCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("failedCount");
    openapiFields.add("incompleteCount");
    openapiFields.add("successfulCount");
    openapiFields.add("successfulForecastPointCount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudAiplatformV1beta1CompletionStats
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudAiplatformV1beta1CompletionStats.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudAiplatformV1beta1CompletionStats is not found in the empty JSON string", GoogleCloudAiplatformV1beta1CompletionStats.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudAiplatformV1beta1CompletionStats.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudAiplatformV1beta1CompletionStats` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("failedCount") != null && !jsonObj.get("failedCount").isJsonNull()) && !jsonObj.get("failedCount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `failedCount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("failedCount").toString()));
      }
      if ((jsonObj.get("incompleteCount") != null && !jsonObj.get("incompleteCount").isJsonNull()) && !jsonObj.get("incompleteCount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `incompleteCount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("incompleteCount").toString()));
      }
      if ((jsonObj.get("successfulCount") != null && !jsonObj.get("successfulCount").isJsonNull()) && !jsonObj.get("successfulCount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `successfulCount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("successfulCount").toString()));
      }
      if ((jsonObj.get("successfulForecastPointCount") != null && !jsonObj.get("successfulForecastPointCount").isJsonNull()) && !jsonObj.get("successfulForecastPointCount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `successfulForecastPointCount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("successfulForecastPointCount").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudAiplatformV1beta1CompletionStats.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudAiplatformV1beta1CompletionStats' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudAiplatformV1beta1CompletionStats> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudAiplatformV1beta1CompletionStats.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudAiplatformV1beta1CompletionStats>() {
           @Override
           public void write(JsonWriter out, GoogleCloudAiplatformV1beta1CompletionStats value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudAiplatformV1beta1CompletionStats read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudAiplatformV1beta1CompletionStats given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudAiplatformV1beta1CompletionStats
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudAiplatformV1beta1CompletionStats
   */
  public static GoogleCloudAiplatformV1beta1CompletionStats fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudAiplatformV1beta1CompletionStats.class);
  }

  /**
   * Convert an instance of GoogleCloudAiplatformV1beta1CompletionStats to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

