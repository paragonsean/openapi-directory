# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleCloudAiplatformV1beta1MachineSpec(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, accelerator_count: int=None, accelerator_type: str=None, machine_type: str=None, tpu_topology: str=None):
        """GoogleCloudAiplatformV1beta1MachineSpec - a model defined in OpenAPI

        :param accelerator_count: The accelerator_count of this GoogleCloudAiplatformV1beta1MachineSpec.
        :param accelerator_type: The accelerator_type of this GoogleCloudAiplatformV1beta1MachineSpec.
        :param machine_type: The machine_type of this GoogleCloudAiplatformV1beta1MachineSpec.
        :param tpu_topology: The tpu_topology of this GoogleCloudAiplatformV1beta1MachineSpec.
        """
        self.openapi_types = {
            'accelerator_count': int,
            'accelerator_type': str,
            'machine_type': str,
            'tpu_topology': str
        }

        self.attribute_map = {
            'accelerator_count': 'acceleratorCount',
            'accelerator_type': 'acceleratorType',
            'machine_type': 'machineType',
            'tpu_topology': 'tpuTopology'
        }

        self._accelerator_count = accelerator_count
        self._accelerator_type = accelerator_type
        self._machine_type = machine_type
        self._tpu_topology = tpu_topology

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudAiplatformV1beta1MachineSpec':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudAiplatformV1beta1MachineSpec of this GoogleCloudAiplatformV1beta1MachineSpec.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def accelerator_count(self):
        """Gets the accelerator_count of this GoogleCloudAiplatformV1beta1MachineSpec.

        The number of accelerators to attach to the machine.

        :return: The accelerator_count of this GoogleCloudAiplatformV1beta1MachineSpec.
        :rtype: int
        """
        return self._accelerator_count

    @accelerator_count.setter
    def accelerator_count(self, accelerator_count):
        """Sets the accelerator_count of this GoogleCloudAiplatformV1beta1MachineSpec.

        The number of accelerators to attach to the machine.

        :param accelerator_count: The accelerator_count of this GoogleCloudAiplatformV1beta1MachineSpec.
        :type accelerator_count: int
        """

        self._accelerator_count = accelerator_count

    @property
    def accelerator_type(self):
        """Gets the accelerator_type of this GoogleCloudAiplatformV1beta1MachineSpec.

        Immutable. The type of accelerator(s) that may be attached to the machine as per accelerator_count.

        :return: The accelerator_type of this GoogleCloudAiplatformV1beta1MachineSpec.
        :rtype: str
        """
        return self._accelerator_type

    @accelerator_type.setter
    def accelerator_type(self, accelerator_type):
        """Sets the accelerator_type of this GoogleCloudAiplatformV1beta1MachineSpec.

        Immutable. The type of accelerator(s) that may be attached to the machine as per accelerator_count.

        :param accelerator_type: The accelerator_type of this GoogleCloudAiplatformV1beta1MachineSpec.
        :type accelerator_type: str
        """
        allowed_values = ["ACCELERATOR_TYPE_UNSPECIFIED", "NVIDIA_TESLA_K80", "NVIDIA_TESLA_P100", "NVIDIA_TESLA_V100", "NVIDIA_TESLA_P4", "NVIDIA_TESLA_T4", "NVIDIA_TESLA_A100", "NVIDIA_A100_80GB", "NVIDIA_L4", "NVIDIA_H100_80GB", "TPU_V2", "TPU_V3", "TPU_V4_POD", "TPU_V5_LITEPOD"]  # noqa: E501
        if accelerator_type not in allowed_values:
            raise ValueError(
                "Invalid value for `accelerator_type` ({0}), must be one of {1}"
                .format(accelerator_type, allowed_values)
            )

        self._accelerator_type = accelerator_type

    @property
    def machine_type(self):
        """Gets the machine_type of this GoogleCloudAiplatformV1beta1MachineSpec.

        Immutable. The type of the machine. See the [list of machine types supported for prediction](https://cloud.google.com/vertex-ai/docs/predictions/configure-compute#machine-types) See the [list of machine types supported for custom training](https://cloud.google.com/vertex-ai/docs/training/configure-compute#machine-types). For DeployedModel this field is optional, and the default value is `n1-standard-2`. For BatchPredictionJob or as part of WorkerPoolSpec this field is required.

        :return: The machine_type of this GoogleCloudAiplatformV1beta1MachineSpec.
        :rtype: str
        """
        return self._machine_type

    @machine_type.setter
    def machine_type(self, machine_type):
        """Sets the machine_type of this GoogleCloudAiplatformV1beta1MachineSpec.

        Immutable. The type of the machine. See the [list of machine types supported for prediction](https://cloud.google.com/vertex-ai/docs/predictions/configure-compute#machine-types) See the [list of machine types supported for custom training](https://cloud.google.com/vertex-ai/docs/training/configure-compute#machine-types). For DeployedModel this field is optional, and the default value is `n1-standard-2`. For BatchPredictionJob or as part of WorkerPoolSpec this field is required.

        :param machine_type: The machine_type of this GoogleCloudAiplatformV1beta1MachineSpec.
        :type machine_type: str
        """

        self._machine_type = machine_type

    @property
    def tpu_topology(self):
        """Gets the tpu_topology of this GoogleCloudAiplatformV1beta1MachineSpec.

        Immutable. The topology of the TPUs. Corresponds to the TPU topologies available from GKE. (Example: tpu_topology: \"2x2x1\").

        :return: The tpu_topology of this GoogleCloudAiplatformV1beta1MachineSpec.
        :rtype: str
        """
        return self._tpu_topology

    @tpu_topology.setter
    def tpu_topology(self, tpu_topology):
        """Sets the tpu_topology of this GoogleCloudAiplatformV1beta1MachineSpec.

        Immutable. The topology of the TPUs. Corresponds to the TPU topologies available from GKE. (Example: tpu_topology: \"2x2x1\").

        :param tpu_topology: The tpu_topology of this GoogleCloudAiplatformV1beta1MachineSpec.
        :type tpu_topology: str
        """

        self._tpu_topology = tpu_topology
