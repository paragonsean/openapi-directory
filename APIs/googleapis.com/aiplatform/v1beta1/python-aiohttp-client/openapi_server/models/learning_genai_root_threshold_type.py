# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LearningGenaiRootThresholdType(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, score_type: str=None, threshold: float=None):
        """LearningGenaiRootThresholdType - a model defined in OpenAPI

        :param score_type: The score_type of this LearningGenaiRootThresholdType.
        :param threshold: The threshold of this LearningGenaiRootThresholdType.
        """
        self.openapi_types = {
            'score_type': str,
            'threshold': float
        }

        self.attribute_map = {
            'score_type': 'scoreType',
            'threshold': 'threshold'
        }

        self._score_type = score_type
        self._threshold = threshold

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LearningGenaiRootThresholdType':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LearningGenaiRootThresholdType of this LearningGenaiRootThresholdType.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def score_type(self):
        """Gets the score_type of this LearningGenaiRootThresholdType.


        :return: The score_type of this LearningGenaiRootThresholdType.
        :rtype: str
        """
        return self._score_type

    @score_type.setter
    def score_type(self, score_type):
        """Sets the score_type of this LearningGenaiRootThresholdType.


        :param score_type: The score_type of this LearningGenaiRootThresholdType.
        :type score_type: str
        """
        allowed_values = ["TYPE_UNKNOWN", "TYPE_SAFE", "TYPE_POLICY", "TYPE_GENERATION"]  # noqa: E501
        if score_type not in allowed_values:
            raise ValueError(
                "Invalid value for `score_type` ({0}), must be one of {1}"
                .format(score_type, allowed_values)
            )

        self._score_type = score_type

    @property
    def threshold(self):
        """Gets the threshold of this LearningGenaiRootThresholdType.


        :return: The threshold of this LearningGenaiRootThresholdType.
        :rtype: float
        """
        return self._threshold

    @threshold.setter
    def threshold(self, threshold):
        """Sets the threshold of this LearningGenaiRootThresholdType.


        :param threshold: The threshold of this LearningGenaiRootThresholdType.
        :type threshold: float
        """

        self._threshold = threshold
