# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LearningGenaiRootHarmSafetyCatCategories(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, categories: List[str]=None):
        """LearningGenaiRootHarmSafetyCatCategories - a model defined in OpenAPI

        :param categories: The categories of this LearningGenaiRootHarmSafetyCatCategories.
        """
        self.openapi_types = {
            'categories': List[str]
        }

        self.attribute_map = {
            'categories': 'categories'
        }

        self._categories = categories

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LearningGenaiRootHarmSafetyCatCategories':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LearningGenaiRootHarmSafetyCatCategories of this LearningGenaiRootHarmSafetyCatCategories.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def categories(self):
        """Gets the categories of this LearningGenaiRootHarmSafetyCatCategories.


        :return: The categories of this LearningGenaiRootHarmSafetyCatCategories.
        :rtype: List[str]
        """
        return self._categories

    @categories.setter
    def categories(self, categories):
        """Sets the categories of this LearningGenaiRootHarmSafetyCatCategories.


        :param categories: The categories of this LearningGenaiRootHarmSafetyCatCategories.
        :type categories: List[str]
        """
        allowed_values = ["SAFETYCAT_CATEGORY_UNSPECIFIED", "TOXICITY", "OBSCENE", "SEXUAL", "INSULT", "IDENTITY_HATE", "DEATH_HARM_TRAGEDY", "VIOLENCE_ABUSE", "FIREARMS_WEAPONS", "PUBLIC_SAFETY", "HEALTH", "RELIGION_BELIEF", "DRUGS", "WAR_CONFLICT", "POLITICS", "FINANCE", "LEGAL", "DANGEROUS", "DANGEROUS_SEVERITY", "HARASSMENT_SEVERITY", "HATE_SEVERITY", "SEXUAL_SEVERITY"]  # noqa: E501
        if not set(categories).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `categories` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(categories) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._categories = categories
