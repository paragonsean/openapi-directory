# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CloudAiLargeModelsVisionFilteredText(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, category: str=None, confidence: str=None, prompt: str=None, score: float=None):
        """CloudAiLargeModelsVisionFilteredText - a model defined in OpenAPI

        :param category: The category of this CloudAiLargeModelsVisionFilteredText.
        :param confidence: The confidence of this CloudAiLargeModelsVisionFilteredText.
        :param prompt: The prompt of this CloudAiLargeModelsVisionFilteredText.
        :param score: The score of this CloudAiLargeModelsVisionFilteredText.
        """
        self.openapi_types = {
            'category': str,
            'confidence': str,
            'prompt': str,
            'score': float
        }

        self.attribute_map = {
            'category': 'category',
            'confidence': 'confidence',
            'prompt': 'prompt',
            'score': 'score'
        }

        self._category = category
        self._confidence = confidence
        self._prompt = prompt
        self._score = score

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CloudAiLargeModelsVisionFilteredText':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CloudAiLargeModelsVisionFilteredText of this CloudAiLargeModelsVisionFilteredText.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def category(self):
        """Gets the category of this CloudAiLargeModelsVisionFilteredText.

        Confidence level

        :return: The category of this CloudAiLargeModelsVisionFilteredText.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this CloudAiLargeModelsVisionFilteredText.

        Confidence level

        :param category: The category of this CloudAiLargeModelsVisionFilteredText.
        :type category: str
        """
        allowed_values = ["RAI_CATEGORY_UNSPECIFIED", "OBSCENE", "SEXUALLY_EXPLICIT", "IDENTITY_ATTACK", "VIOLENCE_ABUSE", "CSAI", "SPII", "CELEBRITY", "FACE_IMG", "WATERMARK_IMG", "MEMORIZATION_IMG", "CSAI_IMG", "PORN_IMG", "VIOLENCE_IMG", "CHILD_IMG", "TOXIC", "SENSITIVE_WORD", "PERSON_IMG", "ICA_IMG", "SEXUAL_IMG", "IU_IMG", "RACY_IMG", "PEDO_IMG", "DEATH_HARM_TRAGEDY", "HEALTH", "FIREARMS_WEAPONS", "RELIGIOUS_BELIEF", "ILLICIT_DRUGS", "WAR_CONFLICT", "POLITICS", "HATE_SYMBOL_IMG", "CHILD_TEXT", "DANGEROUS_CONTENT", "RECITATION_TEXT", "CELEBRITY_IMG"]  # noqa: E501
        if category not in allowed_values:
            raise ValueError(
                "Invalid value for `category` ({0}), must be one of {1}"
                .format(category, allowed_values)
            )

        self._category = category

    @property
    def confidence(self):
        """Gets the confidence of this CloudAiLargeModelsVisionFilteredText.

        Filtered category

        :return: The confidence of this CloudAiLargeModelsVisionFilteredText.
        :rtype: str
        """
        return self._confidence

    @confidence.setter
    def confidence(self, confidence):
        """Sets the confidence of this CloudAiLargeModelsVisionFilteredText.

        Filtered category

        :param confidence: The confidence of this CloudAiLargeModelsVisionFilteredText.
        :type confidence: str
        """
        allowed_values = ["CONFIDENCE_UNSPECIFIED", "CONFIDENCE_LOW", "CONFIDENCE_MEDIUM", "CONFIDENCE_HIGH"]  # noqa: E501
        if confidence not in allowed_values:
            raise ValueError(
                "Invalid value for `confidence` ({0}), must be one of {1}"
                .format(confidence, allowed_values)
            )

        self._confidence = confidence

    @property
    def prompt(self):
        """Gets the prompt of this CloudAiLargeModelsVisionFilteredText.

        Input prompt

        :return: The prompt of this CloudAiLargeModelsVisionFilteredText.
        :rtype: str
        """
        return self._prompt

    @prompt.setter
    def prompt(self, prompt):
        """Sets the prompt of this CloudAiLargeModelsVisionFilteredText.

        Input prompt

        :param prompt: The prompt of this CloudAiLargeModelsVisionFilteredText.
        :type prompt: str
        """

        self._prompt = prompt

    @property
    def score(self):
        """Gets the score of this CloudAiLargeModelsVisionFilteredText.

        Score for category

        :return: The score of this CloudAiLargeModelsVisionFilteredText.
        :rtype: float
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this CloudAiLargeModelsVisionFilteredText.

        Score for category

        :param score: The score of this CloudAiLargeModelsVisionFilteredText.
        :type score: float
        """

        self._score = score
