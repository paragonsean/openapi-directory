# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleCloudAiplatformV1beta1StudySpecConvexStopConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, autoregressive_order: str=None, learning_rate_parameter_name: str=None, max_num_steps: str=None, min_num_steps: str=None, use_seconds: bool=None):
        """GoogleCloudAiplatformV1beta1StudySpecConvexStopConfig - a model defined in OpenAPI

        :param autoregressive_order: The autoregressive_order of this GoogleCloudAiplatformV1beta1StudySpecConvexStopConfig.
        :param learning_rate_parameter_name: The learning_rate_parameter_name of this GoogleCloudAiplatformV1beta1StudySpecConvexStopConfig.
        :param max_num_steps: The max_num_steps of this GoogleCloudAiplatformV1beta1StudySpecConvexStopConfig.
        :param min_num_steps: The min_num_steps of this GoogleCloudAiplatformV1beta1StudySpecConvexStopConfig.
        :param use_seconds: The use_seconds of this GoogleCloudAiplatformV1beta1StudySpecConvexStopConfig.
        """
        self.openapi_types = {
            'autoregressive_order': str,
            'learning_rate_parameter_name': str,
            'max_num_steps': str,
            'min_num_steps': str,
            'use_seconds': bool
        }

        self.attribute_map = {
            'autoregressive_order': 'autoregressiveOrder',
            'learning_rate_parameter_name': 'learningRateParameterName',
            'max_num_steps': 'maxNumSteps',
            'min_num_steps': 'minNumSteps',
            'use_seconds': 'useSeconds'
        }

        self._autoregressive_order = autoregressive_order
        self._learning_rate_parameter_name = learning_rate_parameter_name
        self._max_num_steps = max_num_steps
        self._min_num_steps = min_num_steps
        self._use_seconds = use_seconds

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudAiplatformV1beta1StudySpecConvexStopConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudAiplatformV1beta1StudySpecConvexStopConfig of this GoogleCloudAiplatformV1beta1StudySpecConvexStopConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def autoregressive_order(self):
        """Gets the autoregressive_order of this GoogleCloudAiplatformV1beta1StudySpecConvexStopConfig.

        The number of Trial measurements used in autoregressive model for value prediction. A trial won't be considered early stopping if has fewer measurement points.

        :return: The autoregressive_order of this GoogleCloudAiplatformV1beta1StudySpecConvexStopConfig.
        :rtype: str
        """
        return self._autoregressive_order

    @autoregressive_order.setter
    def autoregressive_order(self, autoregressive_order):
        """Sets the autoregressive_order of this GoogleCloudAiplatformV1beta1StudySpecConvexStopConfig.

        The number of Trial measurements used in autoregressive model for value prediction. A trial won't be considered early stopping if has fewer measurement points.

        :param autoregressive_order: The autoregressive_order of this GoogleCloudAiplatformV1beta1StudySpecConvexStopConfig.
        :type autoregressive_order: str
        """

        self._autoregressive_order = autoregressive_order

    @property
    def learning_rate_parameter_name(self):
        """Gets the learning_rate_parameter_name of this GoogleCloudAiplatformV1beta1StudySpecConvexStopConfig.

        The hyper-parameter name used in the tuning job that stands for learning rate. Leave it blank if learning rate is not in a parameter in tuning. The learning_rate is used to estimate the objective value of the ongoing trial.

        :return: The learning_rate_parameter_name of this GoogleCloudAiplatformV1beta1StudySpecConvexStopConfig.
        :rtype: str
        """
        return self._learning_rate_parameter_name

    @learning_rate_parameter_name.setter
    def learning_rate_parameter_name(self, learning_rate_parameter_name):
        """Sets the learning_rate_parameter_name of this GoogleCloudAiplatformV1beta1StudySpecConvexStopConfig.

        The hyper-parameter name used in the tuning job that stands for learning rate. Leave it blank if learning rate is not in a parameter in tuning. The learning_rate is used to estimate the objective value of the ongoing trial.

        :param learning_rate_parameter_name: The learning_rate_parameter_name of this GoogleCloudAiplatformV1beta1StudySpecConvexStopConfig.
        :type learning_rate_parameter_name: str
        """

        self._learning_rate_parameter_name = learning_rate_parameter_name

    @property
    def max_num_steps(self):
        """Gets the max_num_steps of this GoogleCloudAiplatformV1beta1StudySpecConvexStopConfig.

        Steps used in predicting the final objective for early stopped trials. In general, it's set to be the same as the defined steps in training / tuning. When use_steps is false, this field is set to the maximum elapsed seconds.

        :return: The max_num_steps of this GoogleCloudAiplatformV1beta1StudySpecConvexStopConfig.
        :rtype: str
        """
        return self._max_num_steps

    @max_num_steps.setter
    def max_num_steps(self, max_num_steps):
        """Sets the max_num_steps of this GoogleCloudAiplatformV1beta1StudySpecConvexStopConfig.

        Steps used in predicting the final objective for early stopped trials. In general, it's set to be the same as the defined steps in training / tuning. When use_steps is false, this field is set to the maximum elapsed seconds.

        :param max_num_steps: The max_num_steps of this GoogleCloudAiplatformV1beta1StudySpecConvexStopConfig.
        :type max_num_steps: str
        """

        self._max_num_steps = max_num_steps

    @property
    def min_num_steps(self):
        """Gets the min_num_steps of this GoogleCloudAiplatformV1beta1StudySpecConvexStopConfig.

        Minimum number of steps for a trial to complete. Trials which do not have a measurement with num_steps > min_num_steps won't be considered for early stopping. It's ok to set it to 0, and a trial can be early stopped at any stage. By default, min_num_steps is set to be one-tenth of the max_num_steps. When use_steps is false, this field is set to the minimum elapsed seconds.

        :return: The min_num_steps of this GoogleCloudAiplatformV1beta1StudySpecConvexStopConfig.
        :rtype: str
        """
        return self._min_num_steps

    @min_num_steps.setter
    def min_num_steps(self, min_num_steps):
        """Sets the min_num_steps of this GoogleCloudAiplatformV1beta1StudySpecConvexStopConfig.

        Minimum number of steps for a trial to complete. Trials which do not have a measurement with num_steps > min_num_steps won't be considered for early stopping. It's ok to set it to 0, and a trial can be early stopped at any stage. By default, min_num_steps is set to be one-tenth of the max_num_steps. When use_steps is false, this field is set to the minimum elapsed seconds.

        :param min_num_steps: The min_num_steps of this GoogleCloudAiplatformV1beta1StudySpecConvexStopConfig.
        :type min_num_steps: str
        """

        self._min_num_steps = min_num_steps

    @property
    def use_seconds(self):
        """Gets the use_seconds of this GoogleCloudAiplatformV1beta1StudySpecConvexStopConfig.

        This bool determines whether or not the rule is applied based on elapsed_secs or steps. If use_seconds==false, the early stopping decision is made according to the predicted objective values according to the target steps. If use_seconds==true, elapsed_secs is used instead of steps. Also, in this case, the parameters max_num_steps and min_num_steps are overloaded to contain max_elapsed_seconds and min_elapsed_seconds.

        :return: The use_seconds of this GoogleCloudAiplatformV1beta1StudySpecConvexStopConfig.
        :rtype: bool
        """
        return self._use_seconds

    @use_seconds.setter
    def use_seconds(self, use_seconds):
        """Sets the use_seconds of this GoogleCloudAiplatformV1beta1StudySpecConvexStopConfig.

        This bool determines whether or not the rule is applied based on elapsed_secs or steps. If use_seconds==false, the early stopping decision is made according to the predicted objective values according to the target steps. If use_seconds==true, elapsed_secs is used instead of steps. Also, in this case, the parameters max_num_steps and min_num_steps are overloaded to contain max_elapsed_seconds and min_elapsed_seconds.

        :param use_seconds: The use_seconds of this GoogleCloudAiplatformV1beta1StudySpecConvexStopConfig.
        :type use_seconds: bool
        """

        self._use_seconds = use_seconds
