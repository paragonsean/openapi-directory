# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_aiplatform_v1beta1_nearest_neighbor_query_embedding import GoogleCloudAiplatformV1beta1NearestNeighborQueryEmbedding
from openapi_server.models.google_cloud_aiplatform_v1beta1_nearest_neighbor_query_parameters import GoogleCloudAiplatformV1beta1NearestNeighborQueryParameters
from openapi_server.models.google_cloud_aiplatform_v1beta1_nearest_neighbor_query_string_filter import GoogleCloudAiplatformV1beta1NearestNeighborQueryStringFilter
from openapi_server import util


class GoogleCloudAiplatformV1beta1NearestNeighborQuery(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, embedding: GoogleCloudAiplatformV1beta1NearestNeighborQueryEmbedding=None, entity_id: str=None, neighbor_count: int=None, parameters: GoogleCloudAiplatformV1beta1NearestNeighborQueryParameters=None, per_crowding_attribute_neighbor_count: int=None, string_filters: List[GoogleCloudAiplatformV1beta1NearestNeighborQueryStringFilter]=None):
        """GoogleCloudAiplatformV1beta1NearestNeighborQuery - a model defined in OpenAPI

        :param embedding: The embedding of this GoogleCloudAiplatformV1beta1NearestNeighborQuery.
        :param entity_id: The entity_id of this GoogleCloudAiplatformV1beta1NearestNeighborQuery.
        :param neighbor_count: The neighbor_count of this GoogleCloudAiplatformV1beta1NearestNeighborQuery.
        :param parameters: The parameters of this GoogleCloudAiplatformV1beta1NearestNeighborQuery.
        :param per_crowding_attribute_neighbor_count: The per_crowding_attribute_neighbor_count of this GoogleCloudAiplatformV1beta1NearestNeighborQuery.
        :param string_filters: The string_filters of this GoogleCloudAiplatformV1beta1NearestNeighborQuery.
        """
        self.openapi_types = {
            'embedding': GoogleCloudAiplatformV1beta1NearestNeighborQueryEmbedding,
            'entity_id': str,
            'neighbor_count': int,
            'parameters': GoogleCloudAiplatformV1beta1NearestNeighborQueryParameters,
            'per_crowding_attribute_neighbor_count': int,
            'string_filters': List[GoogleCloudAiplatformV1beta1NearestNeighborQueryStringFilter]
        }

        self.attribute_map = {
            'embedding': 'embedding',
            'entity_id': 'entityId',
            'neighbor_count': 'neighborCount',
            'parameters': 'parameters',
            'per_crowding_attribute_neighbor_count': 'perCrowdingAttributeNeighborCount',
            'string_filters': 'stringFilters'
        }

        self._embedding = embedding
        self._entity_id = entity_id
        self._neighbor_count = neighbor_count
        self._parameters = parameters
        self._per_crowding_attribute_neighbor_count = per_crowding_attribute_neighbor_count
        self._string_filters = string_filters

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudAiplatformV1beta1NearestNeighborQuery':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudAiplatformV1beta1NearestNeighborQuery of this GoogleCloudAiplatformV1beta1NearestNeighborQuery.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def embedding(self):
        """Gets the embedding of this GoogleCloudAiplatformV1beta1NearestNeighborQuery.


        :return: The embedding of this GoogleCloudAiplatformV1beta1NearestNeighborQuery.
        :rtype: GoogleCloudAiplatformV1beta1NearestNeighborQueryEmbedding
        """
        return self._embedding

    @embedding.setter
    def embedding(self, embedding):
        """Sets the embedding of this GoogleCloudAiplatformV1beta1NearestNeighborQuery.


        :param embedding: The embedding of this GoogleCloudAiplatformV1beta1NearestNeighborQuery.
        :type embedding: GoogleCloudAiplatformV1beta1NearestNeighborQueryEmbedding
        """

        self._embedding = embedding

    @property
    def entity_id(self):
        """Gets the entity_id of this GoogleCloudAiplatformV1beta1NearestNeighborQuery.

        Optional. The entity id whose similar entities should be searched for. If embedding is set, search will use embedding instead of entity_id.

        :return: The entity_id of this GoogleCloudAiplatformV1beta1NearestNeighborQuery.
        :rtype: str
        """
        return self._entity_id

    @entity_id.setter
    def entity_id(self, entity_id):
        """Sets the entity_id of this GoogleCloudAiplatformV1beta1NearestNeighborQuery.

        Optional. The entity id whose similar entities should be searched for. If embedding is set, search will use embedding instead of entity_id.

        :param entity_id: The entity_id of this GoogleCloudAiplatformV1beta1NearestNeighborQuery.
        :type entity_id: str
        """

        self._entity_id = entity_id

    @property
    def neighbor_count(self):
        """Gets the neighbor_count of this GoogleCloudAiplatformV1beta1NearestNeighborQuery.

        Optional. The number of similar entities to be retrieved from feature view for each query.

        :return: The neighbor_count of this GoogleCloudAiplatformV1beta1NearestNeighborQuery.
        :rtype: int
        """
        return self._neighbor_count

    @neighbor_count.setter
    def neighbor_count(self, neighbor_count):
        """Sets the neighbor_count of this GoogleCloudAiplatformV1beta1NearestNeighborQuery.

        Optional. The number of similar entities to be retrieved from feature view for each query.

        :param neighbor_count: The neighbor_count of this GoogleCloudAiplatformV1beta1NearestNeighborQuery.
        :type neighbor_count: int
        """

        self._neighbor_count = neighbor_count

    @property
    def parameters(self):
        """Gets the parameters of this GoogleCloudAiplatformV1beta1NearestNeighborQuery.


        :return: The parameters of this GoogleCloudAiplatformV1beta1NearestNeighborQuery.
        :rtype: GoogleCloudAiplatformV1beta1NearestNeighborQueryParameters
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this GoogleCloudAiplatformV1beta1NearestNeighborQuery.


        :param parameters: The parameters of this GoogleCloudAiplatformV1beta1NearestNeighborQuery.
        :type parameters: GoogleCloudAiplatformV1beta1NearestNeighborQueryParameters
        """

        self._parameters = parameters

    @property
    def per_crowding_attribute_neighbor_count(self):
        """Gets the per_crowding_attribute_neighbor_count of this GoogleCloudAiplatformV1beta1NearestNeighborQuery.

        Optional. Crowding is a constraint on a neighbor list produced by nearest neighbor search requiring that no more than sper_crowding_attribute_neighbor_count of the k neighbors returned have the same value of crowding_attribute. It's used for improving result diversity.

        :return: The per_crowding_attribute_neighbor_count of this GoogleCloudAiplatformV1beta1NearestNeighborQuery.
        :rtype: int
        """
        return self._per_crowding_attribute_neighbor_count

    @per_crowding_attribute_neighbor_count.setter
    def per_crowding_attribute_neighbor_count(self, per_crowding_attribute_neighbor_count):
        """Sets the per_crowding_attribute_neighbor_count of this GoogleCloudAiplatformV1beta1NearestNeighborQuery.

        Optional. Crowding is a constraint on a neighbor list produced by nearest neighbor search requiring that no more than sper_crowding_attribute_neighbor_count of the k neighbors returned have the same value of crowding_attribute. It's used for improving result diversity.

        :param per_crowding_attribute_neighbor_count: The per_crowding_attribute_neighbor_count of this GoogleCloudAiplatformV1beta1NearestNeighborQuery.
        :type per_crowding_attribute_neighbor_count: int
        """

        self._per_crowding_attribute_neighbor_count = per_crowding_attribute_neighbor_count

    @property
    def string_filters(self):
        """Gets the string_filters of this GoogleCloudAiplatformV1beta1NearestNeighborQuery.

        Optional. The list of string filters.

        :return: The string_filters of this GoogleCloudAiplatformV1beta1NearestNeighborQuery.
        :rtype: List[GoogleCloudAiplatformV1beta1NearestNeighborQueryStringFilter]
        """
        return self._string_filters

    @string_filters.setter
    def string_filters(self, string_filters):
        """Sets the string_filters of this GoogleCloudAiplatformV1beta1NearestNeighborQuery.

        Optional. The list of string filters.

        :param string_filters: The string_filters of this GoogleCloudAiplatformV1beta1NearestNeighborQuery.
        :type string_filters: List[GoogleCloudAiplatformV1beta1NearestNeighborQueryStringFilter]
        """

        self._string_filters = string_filters
