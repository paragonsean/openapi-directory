# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_aiplatform_v1beta1_create_pipeline_job_request import GoogleCloudAiplatformV1beta1CreatePipelineJobRequest
from openapi_server.models.google_cloud_aiplatform_v1beta1_schedule_run_response import GoogleCloudAiplatformV1beta1ScheduleRunResponse
from openapi_server import util


class GoogleCloudAiplatformV1beta1Schedule(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allow_queueing: bool=None, catch_up: bool=None, create_pipeline_job_request: GoogleCloudAiplatformV1beta1CreatePipelineJobRequest=None, create_time: str=None, cron: str=None, display_name: str=None, end_time: str=None, last_pause_time: str=None, last_resume_time: str=None, last_scheduled_run_response: GoogleCloudAiplatformV1beta1ScheduleRunResponse=None, max_concurrent_run_count: str=None, max_run_count: str=None, name: str=None, next_run_time: str=None, start_time: str=None, started_run_count: str=None, state: str=None, update_time: str=None):
        """GoogleCloudAiplatformV1beta1Schedule - a model defined in OpenAPI

        :param allow_queueing: The allow_queueing of this GoogleCloudAiplatformV1beta1Schedule.
        :param catch_up: The catch_up of this GoogleCloudAiplatformV1beta1Schedule.
        :param create_pipeline_job_request: The create_pipeline_job_request of this GoogleCloudAiplatformV1beta1Schedule.
        :param create_time: The create_time of this GoogleCloudAiplatformV1beta1Schedule.
        :param cron: The cron of this GoogleCloudAiplatformV1beta1Schedule.
        :param display_name: The display_name of this GoogleCloudAiplatformV1beta1Schedule.
        :param end_time: The end_time of this GoogleCloudAiplatformV1beta1Schedule.
        :param last_pause_time: The last_pause_time of this GoogleCloudAiplatformV1beta1Schedule.
        :param last_resume_time: The last_resume_time of this GoogleCloudAiplatformV1beta1Schedule.
        :param last_scheduled_run_response: The last_scheduled_run_response of this GoogleCloudAiplatformV1beta1Schedule.
        :param max_concurrent_run_count: The max_concurrent_run_count of this GoogleCloudAiplatformV1beta1Schedule.
        :param max_run_count: The max_run_count of this GoogleCloudAiplatformV1beta1Schedule.
        :param name: The name of this GoogleCloudAiplatformV1beta1Schedule.
        :param next_run_time: The next_run_time of this GoogleCloudAiplatformV1beta1Schedule.
        :param start_time: The start_time of this GoogleCloudAiplatformV1beta1Schedule.
        :param started_run_count: The started_run_count of this GoogleCloudAiplatformV1beta1Schedule.
        :param state: The state of this GoogleCloudAiplatformV1beta1Schedule.
        :param update_time: The update_time of this GoogleCloudAiplatformV1beta1Schedule.
        """
        self.openapi_types = {
            'allow_queueing': bool,
            'catch_up': bool,
            'create_pipeline_job_request': GoogleCloudAiplatformV1beta1CreatePipelineJobRequest,
            'create_time': str,
            'cron': str,
            'display_name': str,
            'end_time': str,
            'last_pause_time': str,
            'last_resume_time': str,
            'last_scheduled_run_response': GoogleCloudAiplatformV1beta1ScheduleRunResponse,
            'max_concurrent_run_count': str,
            'max_run_count': str,
            'name': str,
            'next_run_time': str,
            'start_time': str,
            'started_run_count': str,
            'state': str,
            'update_time': str
        }

        self.attribute_map = {
            'allow_queueing': 'allowQueueing',
            'catch_up': 'catchUp',
            'create_pipeline_job_request': 'createPipelineJobRequest',
            'create_time': 'createTime',
            'cron': 'cron',
            'display_name': 'displayName',
            'end_time': 'endTime',
            'last_pause_time': 'lastPauseTime',
            'last_resume_time': 'lastResumeTime',
            'last_scheduled_run_response': 'lastScheduledRunResponse',
            'max_concurrent_run_count': 'maxConcurrentRunCount',
            'max_run_count': 'maxRunCount',
            'name': 'name',
            'next_run_time': 'nextRunTime',
            'start_time': 'startTime',
            'started_run_count': 'startedRunCount',
            'state': 'state',
            'update_time': 'updateTime'
        }

        self._allow_queueing = allow_queueing
        self._catch_up = catch_up
        self._create_pipeline_job_request = create_pipeline_job_request
        self._create_time = create_time
        self._cron = cron
        self._display_name = display_name
        self._end_time = end_time
        self._last_pause_time = last_pause_time
        self._last_resume_time = last_resume_time
        self._last_scheduled_run_response = last_scheduled_run_response
        self._max_concurrent_run_count = max_concurrent_run_count
        self._max_run_count = max_run_count
        self._name = name
        self._next_run_time = next_run_time
        self._start_time = start_time
        self._started_run_count = started_run_count
        self._state = state
        self._update_time = update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudAiplatformV1beta1Schedule':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudAiplatformV1beta1Schedule of this GoogleCloudAiplatformV1beta1Schedule.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allow_queueing(self):
        """Gets the allow_queueing of this GoogleCloudAiplatformV1beta1Schedule.

        Optional. Whether new scheduled runs can be queued when max_concurrent_runs limit is reached. If set to true, new runs will be queued instead of skipped. Default to false.

        :return: The allow_queueing of this GoogleCloudAiplatformV1beta1Schedule.
        :rtype: bool
        """
        return self._allow_queueing

    @allow_queueing.setter
    def allow_queueing(self, allow_queueing):
        """Sets the allow_queueing of this GoogleCloudAiplatformV1beta1Schedule.

        Optional. Whether new scheduled runs can be queued when max_concurrent_runs limit is reached. If set to true, new runs will be queued instead of skipped. Default to false.

        :param allow_queueing: The allow_queueing of this GoogleCloudAiplatformV1beta1Schedule.
        :type allow_queueing: bool
        """

        self._allow_queueing = allow_queueing

    @property
    def catch_up(self):
        """Gets the catch_up of this GoogleCloudAiplatformV1beta1Schedule.

        Output only. Whether to backfill missed runs when the schedule is resumed from PAUSED state. If set to true, all missed runs will be scheduled. New runs will be scheduled after the backfill is complete. Default to false.

        :return: The catch_up of this GoogleCloudAiplatformV1beta1Schedule.
        :rtype: bool
        """
        return self._catch_up

    @catch_up.setter
    def catch_up(self, catch_up):
        """Sets the catch_up of this GoogleCloudAiplatformV1beta1Schedule.

        Output only. Whether to backfill missed runs when the schedule is resumed from PAUSED state. If set to true, all missed runs will be scheduled. New runs will be scheduled after the backfill is complete. Default to false.

        :param catch_up: The catch_up of this GoogleCloudAiplatformV1beta1Schedule.
        :type catch_up: bool
        """

        self._catch_up = catch_up

    @property
    def create_pipeline_job_request(self):
        """Gets the create_pipeline_job_request of this GoogleCloudAiplatformV1beta1Schedule.


        :return: The create_pipeline_job_request of this GoogleCloudAiplatformV1beta1Schedule.
        :rtype: GoogleCloudAiplatformV1beta1CreatePipelineJobRequest
        """
        return self._create_pipeline_job_request

    @create_pipeline_job_request.setter
    def create_pipeline_job_request(self, create_pipeline_job_request):
        """Sets the create_pipeline_job_request of this GoogleCloudAiplatformV1beta1Schedule.


        :param create_pipeline_job_request: The create_pipeline_job_request of this GoogleCloudAiplatformV1beta1Schedule.
        :type create_pipeline_job_request: GoogleCloudAiplatformV1beta1CreatePipelineJobRequest
        """

        self._create_pipeline_job_request = create_pipeline_job_request

    @property
    def create_time(self):
        """Gets the create_time of this GoogleCloudAiplatformV1beta1Schedule.

        Output only. Timestamp when this Schedule was created.

        :return: The create_time of this GoogleCloudAiplatformV1beta1Schedule.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this GoogleCloudAiplatformV1beta1Schedule.

        Output only. Timestamp when this Schedule was created.

        :param create_time: The create_time of this GoogleCloudAiplatformV1beta1Schedule.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def cron(self):
        """Gets the cron of this GoogleCloudAiplatformV1beta1Schedule.

        Cron schedule (https://en.wikipedia.org/wiki/Cron) to launch scheduled runs. To explicitly set a timezone to the cron tab, apply a prefix in the cron tab: \"CRON_TZ=${IANA_TIME_ZONE}\" or \"TZ=${IANA_TIME_ZONE}\". The ${IANA_TIME_ZONE} may only be a valid string from IANA time zone database. For example, \"CRON_TZ=America/New_York 1 * * * *\", or \"TZ=America/New_York 1 * * * *\".

        :return: The cron of this GoogleCloudAiplatformV1beta1Schedule.
        :rtype: str
        """
        return self._cron

    @cron.setter
    def cron(self, cron):
        """Sets the cron of this GoogleCloudAiplatformV1beta1Schedule.

        Cron schedule (https://en.wikipedia.org/wiki/Cron) to launch scheduled runs. To explicitly set a timezone to the cron tab, apply a prefix in the cron tab: \"CRON_TZ=${IANA_TIME_ZONE}\" or \"TZ=${IANA_TIME_ZONE}\". The ${IANA_TIME_ZONE} may only be a valid string from IANA time zone database. For example, \"CRON_TZ=America/New_York 1 * * * *\", or \"TZ=America/New_York 1 * * * *\".

        :param cron: The cron of this GoogleCloudAiplatformV1beta1Schedule.
        :type cron: str
        """

        self._cron = cron

    @property
    def display_name(self):
        """Gets the display_name of this GoogleCloudAiplatformV1beta1Schedule.

        Required. User provided name of the Schedule. The name can be up to 128 characters long and can consist of any UTF-8 characters.

        :return: The display_name of this GoogleCloudAiplatformV1beta1Schedule.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this GoogleCloudAiplatformV1beta1Schedule.

        Required. User provided name of the Schedule. The name can be up to 128 characters long and can consist of any UTF-8 characters.

        :param display_name: The display_name of this GoogleCloudAiplatformV1beta1Schedule.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def end_time(self):
        """Gets the end_time of this GoogleCloudAiplatformV1beta1Schedule.

        Optional. Timestamp after which no new runs can be scheduled. If specified, The schedule will be completed when either end_time is reached or when scheduled_run_count >= max_run_count. If not specified, new runs will keep getting scheduled until this Schedule is paused or deleted. Already scheduled runs will be allowed to complete. Unset if not specified.

        :return: The end_time of this GoogleCloudAiplatformV1beta1Schedule.
        :rtype: str
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this GoogleCloudAiplatformV1beta1Schedule.

        Optional. Timestamp after which no new runs can be scheduled. If specified, The schedule will be completed when either end_time is reached or when scheduled_run_count >= max_run_count. If not specified, new runs will keep getting scheduled until this Schedule is paused or deleted. Already scheduled runs will be allowed to complete. Unset if not specified.

        :param end_time: The end_time of this GoogleCloudAiplatformV1beta1Schedule.
        :type end_time: str
        """

        self._end_time = end_time

    @property
    def last_pause_time(self):
        """Gets the last_pause_time of this GoogleCloudAiplatformV1beta1Schedule.

        Output only. Timestamp when this Schedule was last paused. Unset if never paused.

        :return: The last_pause_time of this GoogleCloudAiplatformV1beta1Schedule.
        :rtype: str
        """
        return self._last_pause_time

    @last_pause_time.setter
    def last_pause_time(self, last_pause_time):
        """Sets the last_pause_time of this GoogleCloudAiplatformV1beta1Schedule.

        Output only. Timestamp when this Schedule was last paused. Unset if never paused.

        :param last_pause_time: The last_pause_time of this GoogleCloudAiplatformV1beta1Schedule.
        :type last_pause_time: str
        """

        self._last_pause_time = last_pause_time

    @property
    def last_resume_time(self):
        """Gets the last_resume_time of this GoogleCloudAiplatformV1beta1Schedule.

        Output only. Timestamp when this Schedule was last resumed. Unset if never resumed from pause.

        :return: The last_resume_time of this GoogleCloudAiplatformV1beta1Schedule.
        :rtype: str
        """
        return self._last_resume_time

    @last_resume_time.setter
    def last_resume_time(self, last_resume_time):
        """Sets the last_resume_time of this GoogleCloudAiplatformV1beta1Schedule.

        Output only. Timestamp when this Schedule was last resumed. Unset if never resumed from pause.

        :param last_resume_time: The last_resume_time of this GoogleCloudAiplatformV1beta1Schedule.
        :type last_resume_time: str
        """

        self._last_resume_time = last_resume_time

    @property
    def last_scheduled_run_response(self):
        """Gets the last_scheduled_run_response of this GoogleCloudAiplatformV1beta1Schedule.


        :return: The last_scheduled_run_response of this GoogleCloudAiplatformV1beta1Schedule.
        :rtype: GoogleCloudAiplatformV1beta1ScheduleRunResponse
        """
        return self._last_scheduled_run_response

    @last_scheduled_run_response.setter
    def last_scheduled_run_response(self, last_scheduled_run_response):
        """Sets the last_scheduled_run_response of this GoogleCloudAiplatformV1beta1Schedule.


        :param last_scheduled_run_response: The last_scheduled_run_response of this GoogleCloudAiplatformV1beta1Schedule.
        :type last_scheduled_run_response: GoogleCloudAiplatformV1beta1ScheduleRunResponse
        """

        self._last_scheduled_run_response = last_scheduled_run_response

    @property
    def max_concurrent_run_count(self):
        """Gets the max_concurrent_run_count of this GoogleCloudAiplatformV1beta1Schedule.

        Required. Maximum number of runs that can be started concurrently for this Schedule. This is the limit for starting the scheduled requests and not the execution of the operations/jobs created by the requests (if applicable).

        :return: The max_concurrent_run_count of this GoogleCloudAiplatformV1beta1Schedule.
        :rtype: str
        """
        return self._max_concurrent_run_count

    @max_concurrent_run_count.setter
    def max_concurrent_run_count(self, max_concurrent_run_count):
        """Sets the max_concurrent_run_count of this GoogleCloudAiplatformV1beta1Schedule.

        Required. Maximum number of runs that can be started concurrently for this Schedule. This is the limit for starting the scheduled requests and not the execution of the operations/jobs created by the requests (if applicable).

        :param max_concurrent_run_count: The max_concurrent_run_count of this GoogleCloudAiplatformV1beta1Schedule.
        :type max_concurrent_run_count: str
        """

        self._max_concurrent_run_count = max_concurrent_run_count

    @property
    def max_run_count(self):
        """Gets the max_run_count of this GoogleCloudAiplatformV1beta1Schedule.

        Optional. Maximum run count of the schedule. If specified, The schedule will be completed when either started_run_count >= max_run_count or when end_time is reached. If not specified, new runs will keep getting scheduled until this Schedule is paused or deleted. Already scheduled runs will be allowed to complete. Unset if not specified.

        :return: The max_run_count of this GoogleCloudAiplatformV1beta1Schedule.
        :rtype: str
        """
        return self._max_run_count

    @max_run_count.setter
    def max_run_count(self, max_run_count):
        """Sets the max_run_count of this GoogleCloudAiplatformV1beta1Schedule.

        Optional. Maximum run count of the schedule. If specified, The schedule will be completed when either started_run_count >= max_run_count or when end_time is reached. If not specified, new runs will keep getting scheduled until this Schedule is paused or deleted. Already scheduled runs will be allowed to complete. Unset if not specified.

        :param max_run_count: The max_run_count of this GoogleCloudAiplatformV1beta1Schedule.
        :type max_run_count: str
        """

        self._max_run_count = max_run_count

    @property
    def name(self):
        """Gets the name of this GoogleCloudAiplatformV1beta1Schedule.

        Immutable. The resource name of the Schedule.

        :return: The name of this GoogleCloudAiplatformV1beta1Schedule.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GoogleCloudAiplatformV1beta1Schedule.

        Immutable. The resource name of the Schedule.

        :param name: The name of this GoogleCloudAiplatformV1beta1Schedule.
        :type name: str
        """

        self._name = name

    @property
    def next_run_time(self):
        """Gets the next_run_time of this GoogleCloudAiplatformV1beta1Schedule.

        Output only. Timestamp when this Schedule should schedule the next run. Having a next_run_time in the past means the runs are being started behind schedule.

        :return: The next_run_time of this GoogleCloudAiplatformV1beta1Schedule.
        :rtype: str
        """
        return self._next_run_time

    @next_run_time.setter
    def next_run_time(self, next_run_time):
        """Sets the next_run_time of this GoogleCloudAiplatformV1beta1Schedule.

        Output only. Timestamp when this Schedule should schedule the next run. Having a next_run_time in the past means the runs are being started behind schedule.

        :param next_run_time: The next_run_time of this GoogleCloudAiplatformV1beta1Schedule.
        :type next_run_time: str
        """

        self._next_run_time = next_run_time

    @property
    def start_time(self):
        """Gets the start_time of this GoogleCloudAiplatformV1beta1Schedule.

        Optional. Timestamp after which the first run can be scheduled. Default to Schedule create time if not specified.

        :return: The start_time of this GoogleCloudAiplatformV1beta1Schedule.
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this GoogleCloudAiplatformV1beta1Schedule.

        Optional. Timestamp after which the first run can be scheduled. Default to Schedule create time if not specified.

        :param start_time: The start_time of this GoogleCloudAiplatformV1beta1Schedule.
        :type start_time: str
        """

        self._start_time = start_time

    @property
    def started_run_count(self):
        """Gets the started_run_count of this GoogleCloudAiplatformV1beta1Schedule.

        Output only. The number of runs started by this schedule.

        :return: The started_run_count of this GoogleCloudAiplatformV1beta1Schedule.
        :rtype: str
        """
        return self._started_run_count

    @started_run_count.setter
    def started_run_count(self, started_run_count):
        """Sets the started_run_count of this GoogleCloudAiplatformV1beta1Schedule.

        Output only. The number of runs started by this schedule.

        :param started_run_count: The started_run_count of this GoogleCloudAiplatformV1beta1Schedule.
        :type started_run_count: str
        """

        self._started_run_count = started_run_count

    @property
    def state(self):
        """Gets the state of this GoogleCloudAiplatformV1beta1Schedule.

        Output only. The state of this Schedule.

        :return: The state of this GoogleCloudAiplatformV1beta1Schedule.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this GoogleCloudAiplatformV1beta1Schedule.

        Output only. The state of this Schedule.

        :param state: The state of this GoogleCloudAiplatformV1beta1Schedule.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "ACTIVE", "PAUSED", "COMPLETED"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def update_time(self):
        """Gets the update_time of this GoogleCloudAiplatformV1beta1Schedule.

        Output only. Timestamp when this Schedule was updated.

        :return: The update_time of this GoogleCloudAiplatformV1beta1Schedule.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this GoogleCloudAiplatformV1beta1Schedule.

        Output only. Timestamp when this Schedule was updated.

        :param update_time: The update_time of this GoogleCloudAiplatformV1beta1Schedule.
        :type update_time: str
        """

        self._update_time = update_time
