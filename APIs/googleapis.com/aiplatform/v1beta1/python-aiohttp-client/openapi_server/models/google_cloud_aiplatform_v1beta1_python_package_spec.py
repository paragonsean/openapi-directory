# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_aiplatform_v1beta1_env_var import GoogleCloudAiplatformV1beta1EnvVar
from openapi_server import util


class GoogleCloudAiplatformV1beta1PythonPackageSpec(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, args: List[str]=None, env: List[GoogleCloudAiplatformV1beta1EnvVar]=None, executor_image_uri: str=None, package_uris: List[str]=None, python_module: str=None):
        """GoogleCloudAiplatformV1beta1PythonPackageSpec - a model defined in OpenAPI

        :param args: The args of this GoogleCloudAiplatformV1beta1PythonPackageSpec.
        :param env: The env of this GoogleCloudAiplatformV1beta1PythonPackageSpec.
        :param executor_image_uri: The executor_image_uri of this GoogleCloudAiplatformV1beta1PythonPackageSpec.
        :param package_uris: The package_uris of this GoogleCloudAiplatformV1beta1PythonPackageSpec.
        :param python_module: The python_module of this GoogleCloudAiplatformV1beta1PythonPackageSpec.
        """
        self.openapi_types = {
            'args': List[str],
            'env': List[GoogleCloudAiplatformV1beta1EnvVar],
            'executor_image_uri': str,
            'package_uris': List[str],
            'python_module': str
        }

        self.attribute_map = {
            'args': 'args',
            'env': 'env',
            'executor_image_uri': 'executorImageUri',
            'package_uris': 'packageUris',
            'python_module': 'pythonModule'
        }

        self._args = args
        self._env = env
        self._executor_image_uri = executor_image_uri
        self._package_uris = package_uris
        self._python_module = python_module

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudAiplatformV1beta1PythonPackageSpec':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudAiplatformV1beta1PythonPackageSpec of this GoogleCloudAiplatformV1beta1PythonPackageSpec.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def args(self):
        """Gets the args of this GoogleCloudAiplatformV1beta1PythonPackageSpec.

        Command line arguments to be passed to the Python task.

        :return: The args of this GoogleCloudAiplatformV1beta1PythonPackageSpec.
        :rtype: List[str]
        """
        return self._args

    @args.setter
    def args(self, args):
        """Sets the args of this GoogleCloudAiplatformV1beta1PythonPackageSpec.

        Command line arguments to be passed to the Python task.

        :param args: The args of this GoogleCloudAiplatformV1beta1PythonPackageSpec.
        :type args: List[str]
        """

        self._args = args

    @property
    def env(self):
        """Gets the env of this GoogleCloudAiplatformV1beta1PythonPackageSpec.

        Environment variables to be passed to the python module. Maximum limit is 100.

        :return: The env of this GoogleCloudAiplatformV1beta1PythonPackageSpec.
        :rtype: List[GoogleCloudAiplatformV1beta1EnvVar]
        """
        return self._env

    @env.setter
    def env(self, env):
        """Sets the env of this GoogleCloudAiplatformV1beta1PythonPackageSpec.

        Environment variables to be passed to the python module. Maximum limit is 100.

        :param env: The env of this GoogleCloudAiplatformV1beta1PythonPackageSpec.
        :type env: List[GoogleCloudAiplatformV1beta1EnvVar]
        """

        self._env = env

    @property
    def executor_image_uri(self):
        """Gets the executor_image_uri of this GoogleCloudAiplatformV1beta1PythonPackageSpec.

        Required. The URI of a container image in Artifact Registry that will run the provided Python package. Vertex AI provides a wide range of executor images with pre-installed packages to meet users' various use cases. See the list of [pre-built containers for training](https://cloud.google.com/vertex-ai/docs/training/pre-built-containers). You must use an image from this list.

        :return: The executor_image_uri of this GoogleCloudAiplatformV1beta1PythonPackageSpec.
        :rtype: str
        """
        return self._executor_image_uri

    @executor_image_uri.setter
    def executor_image_uri(self, executor_image_uri):
        """Sets the executor_image_uri of this GoogleCloudAiplatformV1beta1PythonPackageSpec.

        Required. The URI of a container image in Artifact Registry that will run the provided Python package. Vertex AI provides a wide range of executor images with pre-installed packages to meet users' various use cases. See the list of [pre-built containers for training](https://cloud.google.com/vertex-ai/docs/training/pre-built-containers). You must use an image from this list.

        :param executor_image_uri: The executor_image_uri of this GoogleCloudAiplatformV1beta1PythonPackageSpec.
        :type executor_image_uri: str
        """

        self._executor_image_uri = executor_image_uri

    @property
    def package_uris(self):
        """Gets the package_uris of this GoogleCloudAiplatformV1beta1PythonPackageSpec.

        Required. The Google Cloud Storage location of the Python package files which are the training program and its dependent packages. The maximum number of package URIs is 100.

        :return: The package_uris of this GoogleCloudAiplatformV1beta1PythonPackageSpec.
        :rtype: List[str]
        """
        return self._package_uris

    @package_uris.setter
    def package_uris(self, package_uris):
        """Sets the package_uris of this GoogleCloudAiplatformV1beta1PythonPackageSpec.

        Required. The Google Cloud Storage location of the Python package files which are the training program and its dependent packages. The maximum number of package URIs is 100.

        :param package_uris: The package_uris of this GoogleCloudAiplatformV1beta1PythonPackageSpec.
        :type package_uris: List[str]
        """

        self._package_uris = package_uris

    @property
    def python_module(self):
        """Gets the python_module of this GoogleCloudAiplatformV1beta1PythonPackageSpec.

        Required. The Python module name to run after installing the packages.

        :return: The python_module of this GoogleCloudAiplatformV1beta1PythonPackageSpec.
        :rtype: str
        """
        return self._python_module

    @python_module.setter
    def python_module(self, python_module):
        """Sets the python_module of this GoogleCloudAiplatformV1beta1PythonPackageSpec.

        Required. The Python module name to run after installing the packages.

        :param python_module: The python_module of this GoogleCloudAiplatformV1beta1PythonPackageSpec.
        :type python_module: str
        """

        self._python_module = python_module
