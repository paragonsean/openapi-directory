# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_aiplatform_v1beta1_measurement import GoogleCloudAiplatformV1beta1Measurement
from openapi_server import util


class GoogleCloudAiplatformV1beta1NasTrial(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, end_time: str=None, final_measurement: GoogleCloudAiplatformV1beta1Measurement=None, id: str=None, start_time: str=None, state: str=None):
        """GoogleCloudAiplatformV1beta1NasTrial - a model defined in OpenAPI

        :param end_time: The end_time of this GoogleCloudAiplatformV1beta1NasTrial.
        :param final_measurement: The final_measurement of this GoogleCloudAiplatformV1beta1NasTrial.
        :param id: The id of this GoogleCloudAiplatformV1beta1NasTrial.
        :param start_time: The start_time of this GoogleCloudAiplatformV1beta1NasTrial.
        :param state: The state of this GoogleCloudAiplatformV1beta1NasTrial.
        """
        self.openapi_types = {
            'end_time': str,
            'final_measurement': GoogleCloudAiplatformV1beta1Measurement,
            'id': str,
            'start_time': str,
            'state': str
        }

        self.attribute_map = {
            'end_time': 'endTime',
            'final_measurement': 'finalMeasurement',
            'id': 'id',
            'start_time': 'startTime',
            'state': 'state'
        }

        self._end_time = end_time
        self._final_measurement = final_measurement
        self._id = id
        self._start_time = start_time
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudAiplatformV1beta1NasTrial':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudAiplatformV1beta1NasTrial of this GoogleCloudAiplatformV1beta1NasTrial.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def end_time(self):
        """Gets the end_time of this GoogleCloudAiplatformV1beta1NasTrial.

        Output only. Time when the NasTrial's status changed to `SUCCEEDED` or `INFEASIBLE`.

        :return: The end_time of this GoogleCloudAiplatformV1beta1NasTrial.
        :rtype: str
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this GoogleCloudAiplatformV1beta1NasTrial.

        Output only. Time when the NasTrial's status changed to `SUCCEEDED` or `INFEASIBLE`.

        :param end_time: The end_time of this GoogleCloudAiplatformV1beta1NasTrial.
        :type end_time: str
        """

        self._end_time = end_time

    @property
    def final_measurement(self):
        """Gets the final_measurement of this GoogleCloudAiplatformV1beta1NasTrial.


        :return: The final_measurement of this GoogleCloudAiplatformV1beta1NasTrial.
        :rtype: GoogleCloudAiplatformV1beta1Measurement
        """
        return self._final_measurement

    @final_measurement.setter
    def final_measurement(self, final_measurement):
        """Sets the final_measurement of this GoogleCloudAiplatformV1beta1NasTrial.


        :param final_measurement: The final_measurement of this GoogleCloudAiplatformV1beta1NasTrial.
        :type final_measurement: GoogleCloudAiplatformV1beta1Measurement
        """

        self._final_measurement = final_measurement

    @property
    def id(self):
        """Gets the id of this GoogleCloudAiplatformV1beta1NasTrial.

        Output only. The identifier of the NasTrial assigned by the service.

        :return: The id of this GoogleCloudAiplatformV1beta1NasTrial.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GoogleCloudAiplatformV1beta1NasTrial.

        Output only. The identifier of the NasTrial assigned by the service.

        :param id: The id of this GoogleCloudAiplatformV1beta1NasTrial.
        :type id: str
        """

        self._id = id

    @property
    def start_time(self):
        """Gets the start_time of this GoogleCloudAiplatformV1beta1NasTrial.

        Output only. Time when the NasTrial was started.

        :return: The start_time of this GoogleCloudAiplatformV1beta1NasTrial.
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this GoogleCloudAiplatformV1beta1NasTrial.

        Output only. Time when the NasTrial was started.

        :param start_time: The start_time of this GoogleCloudAiplatformV1beta1NasTrial.
        :type start_time: str
        """

        self._start_time = start_time

    @property
    def state(self):
        """Gets the state of this GoogleCloudAiplatformV1beta1NasTrial.

        Output only. The detailed state of the NasTrial.

        :return: The state of this GoogleCloudAiplatformV1beta1NasTrial.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this GoogleCloudAiplatformV1beta1NasTrial.

        Output only. The detailed state of the NasTrial.

        :param state: The state of this GoogleCloudAiplatformV1beta1NasTrial.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "REQUESTED", "ACTIVE", "STOPPING", "SUCCEEDED", "INFEASIBLE"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state
