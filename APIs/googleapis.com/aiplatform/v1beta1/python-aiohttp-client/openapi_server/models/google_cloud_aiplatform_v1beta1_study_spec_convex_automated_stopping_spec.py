# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleCloudAiplatformV1beta1StudySpecConvexAutomatedStoppingSpec(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, learning_rate_parameter_name: str=None, max_step_count: str=None, min_measurement_count: str=None, min_step_count: str=None, update_all_stopped_trials: bool=None, use_elapsed_duration: bool=None):
        """GoogleCloudAiplatformV1beta1StudySpecConvexAutomatedStoppingSpec - a model defined in OpenAPI

        :param learning_rate_parameter_name: The learning_rate_parameter_name of this GoogleCloudAiplatformV1beta1StudySpecConvexAutomatedStoppingSpec.
        :param max_step_count: The max_step_count of this GoogleCloudAiplatformV1beta1StudySpecConvexAutomatedStoppingSpec.
        :param min_measurement_count: The min_measurement_count of this GoogleCloudAiplatformV1beta1StudySpecConvexAutomatedStoppingSpec.
        :param min_step_count: The min_step_count of this GoogleCloudAiplatformV1beta1StudySpecConvexAutomatedStoppingSpec.
        :param update_all_stopped_trials: The update_all_stopped_trials of this GoogleCloudAiplatformV1beta1StudySpecConvexAutomatedStoppingSpec.
        :param use_elapsed_duration: The use_elapsed_duration of this GoogleCloudAiplatformV1beta1StudySpecConvexAutomatedStoppingSpec.
        """
        self.openapi_types = {
            'learning_rate_parameter_name': str,
            'max_step_count': str,
            'min_measurement_count': str,
            'min_step_count': str,
            'update_all_stopped_trials': bool,
            'use_elapsed_duration': bool
        }

        self.attribute_map = {
            'learning_rate_parameter_name': 'learningRateParameterName',
            'max_step_count': 'maxStepCount',
            'min_measurement_count': 'minMeasurementCount',
            'min_step_count': 'minStepCount',
            'update_all_stopped_trials': 'updateAllStoppedTrials',
            'use_elapsed_duration': 'useElapsedDuration'
        }

        self._learning_rate_parameter_name = learning_rate_parameter_name
        self._max_step_count = max_step_count
        self._min_measurement_count = min_measurement_count
        self._min_step_count = min_step_count
        self._update_all_stopped_trials = update_all_stopped_trials
        self._use_elapsed_duration = use_elapsed_duration

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudAiplatformV1beta1StudySpecConvexAutomatedStoppingSpec':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudAiplatformV1beta1StudySpecConvexAutomatedStoppingSpec of this GoogleCloudAiplatformV1beta1StudySpecConvexAutomatedStoppingSpec.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def learning_rate_parameter_name(self):
        """Gets the learning_rate_parameter_name of this GoogleCloudAiplatformV1beta1StudySpecConvexAutomatedStoppingSpec.

        The hyper-parameter name used in the tuning job that stands for learning rate. Leave it blank if learning rate is not in a parameter in tuning. The learning_rate is used to estimate the objective value of the ongoing trial.

        :return: The learning_rate_parameter_name of this GoogleCloudAiplatformV1beta1StudySpecConvexAutomatedStoppingSpec.
        :rtype: str
        """
        return self._learning_rate_parameter_name

    @learning_rate_parameter_name.setter
    def learning_rate_parameter_name(self, learning_rate_parameter_name):
        """Sets the learning_rate_parameter_name of this GoogleCloudAiplatformV1beta1StudySpecConvexAutomatedStoppingSpec.

        The hyper-parameter name used in the tuning job that stands for learning rate. Leave it blank if learning rate is not in a parameter in tuning. The learning_rate is used to estimate the objective value of the ongoing trial.

        :param learning_rate_parameter_name: The learning_rate_parameter_name of this GoogleCloudAiplatformV1beta1StudySpecConvexAutomatedStoppingSpec.
        :type learning_rate_parameter_name: str
        """

        self._learning_rate_parameter_name = learning_rate_parameter_name

    @property
    def max_step_count(self):
        """Gets the max_step_count of this GoogleCloudAiplatformV1beta1StudySpecConvexAutomatedStoppingSpec.

        Steps used in predicting the final objective for early stopped trials. In general, it's set to be the same as the defined steps in training / tuning. If not defined, it will learn it from the completed trials. When use_steps is false, this field is set to the maximum elapsed seconds.

        :return: The max_step_count of this GoogleCloudAiplatformV1beta1StudySpecConvexAutomatedStoppingSpec.
        :rtype: str
        """
        return self._max_step_count

    @max_step_count.setter
    def max_step_count(self, max_step_count):
        """Sets the max_step_count of this GoogleCloudAiplatformV1beta1StudySpecConvexAutomatedStoppingSpec.

        Steps used in predicting the final objective for early stopped trials. In general, it's set to be the same as the defined steps in training / tuning. If not defined, it will learn it from the completed trials. When use_steps is false, this field is set to the maximum elapsed seconds.

        :param max_step_count: The max_step_count of this GoogleCloudAiplatformV1beta1StudySpecConvexAutomatedStoppingSpec.
        :type max_step_count: str
        """

        self._max_step_count = max_step_count

    @property
    def min_measurement_count(self):
        """Gets the min_measurement_count of this GoogleCloudAiplatformV1beta1StudySpecConvexAutomatedStoppingSpec.

        The minimal number of measurements in a Trial. Early-stopping checks will not trigger if less than min_measurement_count+1 completed trials or pending trials with less than min_measurement_count measurements. If not defined, the default value is 5.

        :return: The min_measurement_count of this GoogleCloudAiplatformV1beta1StudySpecConvexAutomatedStoppingSpec.
        :rtype: str
        """
        return self._min_measurement_count

    @min_measurement_count.setter
    def min_measurement_count(self, min_measurement_count):
        """Sets the min_measurement_count of this GoogleCloudAiplatformV1beta1StudySpecConvexAutomatedStoppingSpec.

        The minimal number of measurements in a Trial. Early-stopping checks will not trigger if less than min_measurement_count+1 completed trials or pending trials with less than min_measurement_count measurements. If not defined, the default value is 5.

        :param min_measurement_count: The min_measurement_count of this GoogleCloudAiplatformV1beta1StudySpecConvexAutomatedStoppingSpec.
        :type min_measurement_count: str
        """

        self._min_measurement_count = min_measurement_count

    @property
    def min_step_count(self):
        """Gets the min_step_count of this GoogleCloudAiplatformV1beta1StudySpecConvexAutomatedStoppingSpec.

        Minimum number of steps for a trial to complete. Trials which do not have a measurement with step_count > min_step_count won't be considered for early stopping. It's ok to set it to 0, and a trial can be early stopped at any stage. By default, min_step_count is set to be one-tenth of the max_step_count. When use_elapsed_duration is true, this field is set to the minimum elapsed seconds.

        :return: The min_step_count of this GoogleCloudAiplatformV1beta1StudySpecConvexAutomatedStoppingSpec.
        :rtype: str
        """
        return self._min_step_count

    @min_step_count.setter
    def min_step_count(self, min_step_count):
        """Sets the min_step_count of this GoogleCloudAiplatformV1beta1StudySpecConvexAutomatedStoppingSpec.

        Minimum number of steps for a trial to complete. Trials which do not have a measurement with step_count > min_step_count won't be considered for early stopping. It's ok to set it to 0, and a trial can be early stopped at any stage. By default, min_step_count is set to be one-tenth of the max_step_count. When use_elapsed_duration is true, this field is set to the minimum elapsed seconds.

        :param min_step_count: The min_step_count of this GoogleCloudAiplatformV1beta1StudySpecConvexAutomatedStoppingSpec.
        :type min_step_count: str
        """

        self._min_step_count = min_step_count

    @property
    def update_all_stopped_trials(self):
        """Gets the update_all_stopped_trials of this GoogleCloudAiplatformV1beta1StudySpecConvexAutomatedStoppingSpec.

        ConvexAutomatedStoppingSpec by default only updates the trials that needs to be early stopped using a newly trained auto-regressive model. When this flag is set to True, all stopped trials from the beginning are potentially updated in terms of their `final_measurement`. Also, note that the training logic of autoregressive models is different in this case. Enabling this option has shown better results and this may be the default option in the future.

        :return: The update_all_stopped_trials of this GoogleCloudAiplatformV1beta1StudySpecConvexAutomatedStoppingSpec.
        :rtype: bool
        """
        return self._update_all_stopped_trials

    @update_all_stopped_trials.setter
    def update_all_stopped_trials(self, update_all_stopped_trials):
        """Sets the update_all_stopped_trials of this GoogleCloudAiplatformV1beta1StudySpecConvexAutomatedStoppingSpec.

        ConvexAutomatedStoppingSpec by default only updates the trials that needs to be early stopped using a newly trained auto-regressive model. When this flag is set to True, all stopped trials from the beginning are potentially updated in terms of their `final_measurement`. Also, note that the training logic of autoregressive models is different in this case. Enabling this option has shown better results and this may be the default option in the future.

        :param update_all_stopped_trials: The update_all_stopped_trials of this GoogleCloudAiplatformV1beta1StudySpecConvexAutomatedStoppingSpec.
        :type update_all_stopped_trials: bool
        """

        self._update_all_stopped_trials = update_all_stopped_trials

    @property
    def use_elapsed_duration(self):
        """Gets the use_elapsed_duration of this GoogleCloudAiplatformV1beta1StudySpecConvexAutomatedStoppingSpec.

        This bool determines whether or not the rule is applied based on elapsed_secs or steps. If use_elapsed_duration==false, the early stopping decision is made according to the predicted objective values according to the target steps. If use_elapsed_duration==true, elapsed_secs is used instead of steps. Also, in this case, the parameters max_num_steps and min_num_steps are overloaded to contain max_elapsed_seconds and min_elapsed_seconds.

        :return: The use_elapsed_duration of this GoogleCloudAiplatformV1beta1StudySpecConvexAutomatedStoppingSpec.
        :rtype: bool
        """
        return self._use_elapsed_duration

    @use_elapsed_duration.setter
    def use_elapsed_duration(self, use_elapsed_duration):
        """Sets the use_elapsed_duration of this GoogleCloudAiplatformV1beta1StudySpecConvexAutomatedStoppingSpec.

        This bool determines whether or not the rule is applied based on elapsed_secs or steps. If use_elapsed_duration==false, the early stopping decision is made according to the predicted objective values according to the target steps. If use_elapsed_duration==true, elapsed_secs is used instead of steps. Also, in this case, the parameters max_num_steps and min_num_steps are overloaded to contain max_elapsed_seconds and min_elapsed_seconds.

        :param use_elapsed_duration: The use_elapsed_duration of this GoogleCloudAiplatformV1beta1StudySpecConvexAutomatedStoppingSpec.
        :type use_elapsed_duration: bool
        """

        self._use_elapsed_duration = use_elapsed_duration
