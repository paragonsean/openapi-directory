# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleCloudAiplatformV1beta1SchemaTrainingjobDefinitionAutoMlTablesInputsTransformationNumericTransformation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, column_name: str=None, invalid_values_allowed: bool=None):
        """GoogleCloudAiplatformV1beta1SchemaTrainingjobDefinitionAutoMlTablesInputsTransformationNumericTransformation - a model defined in OpenAPI

        :param column_name: The column_name of this GoogleCloudAiplatformV1beta1SchemaTrainingjobDefinitionAutoMlTablesInputsTransformationNumericTransformation.
        :param invalid_values_allowed: The invalid_values_allowed of this GoogleCloudAiplatformV1beta1SchemaTrainingjobDefinitionAutoMlTablesInputsTransformationNumericTransformation.
        """
        self.openapi_types = {
            'column_name': str,
            'invalid_values_allowed': bool
        }

        self.attribute_map = {
            'column_name': 'columnName',
            'invalid_values_allowed': 'invalidValuesAllowed'
        }

        self._column_name = column_name
        self._invalid_values_allowed = invalid_values_allowed

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudAiplatformV1beta1SchemaTrainingjobDefinitionAutoMlTablesInputsTransformationNumericTransformation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudAiplatformV1beta1SchemaTrainingjobDefinitionAutoMlTablesInputsTransformationNumericTransformation of this GoogleCloudAiplatformV1beta1SchemaTrainingjobDefinitionAutoMlTablesInputsTransformationNumericTransformation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def column_name(self):
        """Gets the column_name of this GoogleCloudAiplatformV1beta1SchemaTrainingjobDefinitionAutoMlTablesInputsTransformationNumericTransformation.


        :return: The column_name of this GoogleCloudAiplatformV1beta1SchemaTrainingjobDefinitionAutoMlTablesInputsTransformationNumericTransformation.
        :rtype: str
        """
        return self._column_name

    @column_name.setter
    def column_name(self, column_name):
        """Sets the column_name of this GoogleCloudAiplatformV1beta1SchemaTrainingjobDefinitionAutoMlTablesInputsTransformationNumericTransformation.


        :param column_name: The column_name of this GoogleCloudAiplatformV1beta1SchemaTrainingjobDefinitionAutoMlTablesInputsTransformationNumericTransformation.
        :type column_name: str
        """

        self._column_name = column_name

    @property
    def invalid_values_allowed(self):
        """Gets the invalid_values_allowed of this GoogleCloudAiplatformV1beta1SchemaTrainingjobDefinitionAutoMlTablesInputsTransformationNumericTransformation.

        If invalid values is allowed, the training pipeline will create a boolean feature that indicated whether the value is valid. Otherwise, the training pipeline will discard the input row from trainining data.

        :return: The invalid_values_allowed of this GoogleCloudAiplatformV1beta1SchemaTrainingjobDefinitionAutoMlTablesInputsTransformationNumericTransformation.
        :rtype: bool
        """
        return self._invalid_values_allowed

    @invalid_values_allowed.setter
    def invalid_values_allowed(self, invalid_values_allowed):
        """Sets the invalid_values_allowed of this GoogleCloudAiplatformV1beta1SchemaTrainingjobDefinitionAutoMlTablesInputsTransformationNumericTransformation.

        If invalid values is allowed, the training pipeline will create a boolean feature that indicated whether the value is valid. Otherwise, the training pipeline will discard the input row from trainining data.

        :param invalid_values_allowed: The invalid_values_allowed of this GoogleCloudAiplatformV1beta1SchemaTrainingjobDefinitionAutoMlTablesInputsTransformationNumericTransformation.
        :type invalid_values_allowed: bool
        """

        self._invalid_values_allowed = invalid_values_allowed
