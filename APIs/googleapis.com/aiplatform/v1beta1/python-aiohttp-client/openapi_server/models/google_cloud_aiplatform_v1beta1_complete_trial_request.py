# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_aiplatform_v1beta1_measurement import GoogleCloudAiplatformV1beta1Measurement
from openapi_server import util


class GoogleCloudAiplatformV1beta1CompleteTrialRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, final_measurement: GoogleCloudAiplatformV1beta1Measurement=None, infeasible_reason: str=None, trial_infeasible: bool=None):
        """GoogleCloudAiplatformV1beta1CompleteTrialRequest - a model defined in OpenAPI

        :param final_measurement: The final_measurement of this GoogleCloudAiplatformV1beta1CompleteTrialRequest.
        :param infeasible_reason: The infeasible_reason of this GoogleCloudAiplatformV1beta1CompleteTrialRequest.
        :param trial_infeasible: The trial_infeasible of this GoogleCloudAiplatformV1beta1CompleteTrialRequest.
        """
        self.openapi_types = {
            'final_measurement': GoogleCloudAiplatformV1beta1Measurement,
            'infeasible_reason': str,
            'trial_infeasible': bool
        }

        self.attribute_map = {
            'final_measurement': 'finalMeasurement',
            'infeasible_reason': 'infeasibleReason',
            'trial_infeasible': 'trialInfeasible'
        }

        self._final_measurement = final_measurement
        self._infeasible_reason = infeasible_reason
        self._trial_infeasible = trial_infeasible

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudAiplatformV1beta1CompleteTrialRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudAiplatformV1beta1CompleteTrialRequest of this GoogleCloudAiplatformV1beta1CompleteTrialRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def final_measurement(self):
        """Gets the final_measurement of this GoogleCloudAiplatformV1beta1CompleteTrialRequest.


        :return: The final_measurement of this GoogleCloudAiplatformV1beta1CompleteTrialRequest.
        :rtype: GoogleCloudAiplatformV1beta1Measurement
        """
        return self._final_measurement

    @final_measurement.setter
    def final_measurement(self, final_measurement):
        """Sets the final_measurement of this GoogleCloudAiplatformV1beta1CompleteTrialRequest.


        :param final_measurement: The final_measurement of this GoogleCloudAiplatformV1beta1CompleteTrialRequest.
        :type final_measurement: GoogleCloudAiplatformV1beta1Measurement
        """

        self._final_measurement = final_measurement

    @property
    def infeasible_reason(self):
        """Gets the infeasible_reason of this GoogleCloudAiplatformV1beta1CompleteTrialRequest.

        Optional. A human readable reason why the trial was infeasible. This should only be provided if `trial_infeasible` is true.

        :return: The infeasible_reason of this GoogleCloudAiplatformV1beta1CompleteTrialRequest.
        :rtype: str
        """
        return self._infeasible_reason

    @infeasible_reason.setter
    def infeasible_reason(self, infeasible_reason):
        """Sets the infeasible_reason of this GoogleCloudAiplatformV1beta1CompleteTrialRequest.

        Optional. A human readable reason why the trial was infeasible. This should only be provided if `trial_infeasible` is true.

        :param infeasible_reason: The infeasible_reason of this GoogleCloudAiplatformV1beta1CompleteTrialRequest.
        :type infeasible_reason: str
        """

        self._infeasible_reason = infeasible_reason

    @property
    def trial_infeasible(self):
        """Gets the trial_infeasible of this GoogleCloudAiplatformV1beta1CompleteTrialRequest.

        Optional. True if the Trial cannot be run with the given Parameter, and final_measurement will be ignored.

        :return: The trial_infeasible of this GoogleCloudAiplatformV1beta1CompleteTrialRequest.
        :rtype: bool
        """
        return self._trial_infeasible

    @trial_infeasible.setter
    def trial_infeasible(self, trial_infeasible):
        """Sets the trial_infeasible of this GoogleCloudAiplatformV1beta1CompleteTrialRequest.

        Optional. True if the Trial cannot be run with the given Parameter, and final_measurement will be ignored.

        :param trial_infeasible: The trial_infeasible of this GoogleCloudAiplatformV1beta1CompleteTrialRequest.
        :type trial_infeasible: bool
        """

        self._trial_infeasible = trial_infeasible
