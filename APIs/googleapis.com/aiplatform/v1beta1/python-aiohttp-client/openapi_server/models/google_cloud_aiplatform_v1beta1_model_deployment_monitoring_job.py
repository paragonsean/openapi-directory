# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_aiplatform_v1beta1_encryption_spec import GoogleCloudAiplatformV1beta1EncryptionSpec
from openapi_server.models.google_cloud_aiplatform_v1beta1_gcs_destination import GoogleCloudAiplatformV1beta1GcsDestination
from openapi_server.models.google_cloud_aiplatform_v1beta1_model_deployment_monitoring_big_query_table import GoogleCloudAiplatformV1beta1ModelDeploymentMonitoringBigQueryTable
from openapi_server.models.google_cloud_aiplatform_v1beta1_model_deployment_monitoring_job_latest_monitoring_pipeline_metadata import GoogleCloudAiplatformV1beta1ModelDeploymentMonitoringJobLatestMonitoringPipelineMetadata
from openapi_server.models.google_cloud_aiplatform_v1beta1_model_deployment_monitoring_objective_config import GoogleCloudAiplatformV1beta1ModelDeploymentMonitoringObjectiveConfig
from openapi_server.models.google_cloud_aiplatform_v1beta1_model_deployment_monitoring_schedule_config import GoogleCloudAiplatformV1beta1ModelDeploymentMonitoringScheduleConfig
from openapi_server.models.google_cloud_aiplatform_v1beta1_model_monitoring_alert_config import GoogleCloudAiplatformV1beta1ModelMonitoringAlertConfig
from openapi_server.models.google_cloud_aiplatform_v1beta1_sampling_strategy import GoogleCloudAiplatformV1beta1SamplingStrategy
from openapi_server.models.google_rpc_status import GoogleRpcStatus
from openapi_server import util


class GoogleCloudAiplatformV1beta1ModelDeploymentMonitoringJob(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, analysis_instance_schema_uri: str=None, bigquery_tables: List[GoogleCloudAiplatformV1beta1ModelDeploymentMonitoringBigQueryTable]=None, create_time: str=None, display_name: str=None, enable_monitoring_pipeline_logs: bool=None, encryption_spec: GoogleCloudAiplatformV1beta1EncryptionSpec=None, endpoint: str=None, error: GoogleRpcStatus=None, labels: Dict[str, str]=None, latest_monitoring_pipeline_metadata: GoogleCloudAiplatformV1beta1ModelDeploymentMonitoringJobLatestMonitoringPipelineMetadata=None, log_ttl: str=None, logging_sampling_strategy: GoogleCloudAiplatformV1beta1SamplingStrategy=None, model_deployment_monitoring_objective_configs: List[GoogleCloudAiplatformV1beta1ModelDeploymentMonitoringObjectiveConfig]=None, model_deployment_monitoring_schedule_config: GoogleCloudAiplatformV1beta1ModelDeploymentMonitoringScheduleConfig=None, model_monitoring_alert_config: GoogleCloudAiplatformV1beta1ModelMonitoringAlertConfig=None, name: str=None, next_schedule_time: str=None, predict_instance_schema_uri: str=None, sample_predict_instance: object=None, schedule_state: str=None, state: str=None, stats_anomalies_base_directory: GoogleCloudAiplatformV1beta1GcsDestination=None, update_time: str=None):
        """GoogleCloudAiplatformV1beta1ModelDeploymentMonitoringJob - a model defined in OpenAPI

        :param analysis_instance_schema_uri: The analysis_instance_schema_uri of this GoogleCloudAiplatformV1beta1ModelDeploymentMonitoringJob.
        :param bigquery_tables: The bigquery_tables of this GoogleCloudAiplatformV1beta1ModelDeploymentMonitoringJob.
        :param create_time: The create_time of this GoogleCloudAiplatformV1beta1ModelDeploymentMonitoringJob.
        :param display_name: The display_name of this GoogleCloudAiplatformV1beta1ModelDeploymentMonitoringJob.
        :param enable_monitoring_pipeline_logs: The enable_monitoring_pipeline_logs of this GoogleCloudAiplatformV1beta1ModelDeploymentMonitoringJob.
        :param encryption_spec: The encryption_spec of this GoogleCloudAiplatformV1beta1ModelDeploymentMonitoringJob.
        :param endpoint: The endpoint of this GoogleCloudAiplatformV1beta1ModelDeploymentMonitoringJob.
        :param error: The error of this GoogleCloudAiplatformV1beta1ModelDeploymentMonitoringJob.
        :param labels: The labels of this GoogleCloudAiplatformV1beta1ModelDeploymentMonitoringJob.
        :param latest_monitoring_pipeline_metadata: The latest_monitoring_pipeline_metadata of this GoogleCloudAiplatformV1beta1ModelDeploymentMonitoringJob.
        :param log_ttl: The log_ttl of this GoogleCloudAiplatformV1beta1ModelDeploymentMonitoringJob.
        :param logging_sampling_strategy: The logging_sampling_strategy of this GoogleCloudAiplatformV1beta1ModelDeploymentMonitoringJob.
        :param model_deployment_monitoring_objective_configs: The model_deployment_monitoring_objective_configs of this GoogleCloudAiplatformV1beta1ModelDeploymentMonitoringJob.
        :param model_deployment_monitoring_schedule_config: The model_deployment_monitoring_schedule_config of this GoogleCloudAiplatformV1beta1ModelDeploymentMonitoringJob.
        :param model_monitoring_alert_config: The model_monitoring_alert_config of this GoogleCloudAiplatformV1beta1ModelDeploymentMonitoringJob.
        :param name: The name of this GoogleCloudAiplatformV1beta1ModelDeploymentMonitoringJob.
        :param next_schedule_time: The next_schedule_time of this GoogleCloudAiplatformV1beta1ModelDeploymentMonitoringJob.
        :param predict_instance_schema_uri: The predict_instance_schema_uri of this GoogleCloudAiplatformV1beta1ModelDeploymentMonitoringJob.
        :param sample_predict_instance: The sample_predict_instance of this GoogleCloudAiplatformV1beta1ModelDeploymentMonitoringJob.
        :param schedule_state: The schedule_state of this GoogleCloudAiplatformV1beta1ModelDeploymentMonitoringJob.
        :param state: The state of this GoogleCloudAiplatformV1beta1ModelDeploymentMonitoringJob.
        :param stats_anomalies_base_directory: The stats_anomalies_base_directory of this GoogleCloudAiplatformV1beta1ModelDeploymentMonitoringJob.
        :param update_time: The update_time of this GoogleCloudAiplatformV1beta1ModelDeploymentMonitoringJob.
        """
        self.openapi_types = {
            'analysis_instance_schema_uri': str,
            'bigquery_tables': List[GoogleCloudAiplatformV1beta1ModelDeploymentMonitoringBigQueryTable],
            'create_time': str,
            'display_name': str,
            'enable_monitoring_pipeline_logs': bool,
            'encryption_spec': GoogleCloudAiplatformV1beta1EncryptionSpec,
            'endpoint': str,
            'error': GoogleRpcStatus,
            'labels': Dict[str, str],
            'latest_monitoring_pipeline_metadata': GoogleCloudAiplatformV1beta1ModelDeploymentMonitoringJobLatestMonitoringPipelineMetadata,
            'log_ttl': str,
            'logging_sampling_strategy': GoogleCloudAiplatformV1beta1SamplingStrategy,
            'model_deployment_monitoring_objective_configs': List[GoogleCloudAiplatformV1beta1ModelDeploymentMonitoringObjectiveConfig],
            'model_deployment_monitoring_schedule_config': GoogleCloudAiplatformV1beta1ModelDeploymentMonitoringScheduleConfig,
            'model_monitoring_alert_config': GoogleCloudAiplatformV1beta1ModelMonitoringAlertConfig,
            'name': str,
            'next_schedule_time': str,
            'predict_instance_schema_uri': str,
            'sample_predict_instance': object,
            'schedule_state': str,
            'state': str,
            'stats_anomalies_base_directory': GoogleCloudAiplatformV1beta1GcsDestination,
            'update_time': str
        }

        self.attribute_map = {
            'analysis_instance_schema_uri': 'analysisInstanceSchemaUri',
            'bigquery_tables': 'bigqueryTables',
            'create_time': 'createTime',
            'display_name': 'displayName',
            'enable_monitoring_pipeline_logs': 'enableMonitoringPipelineLogs',
            'encryption_spec': 'encryptionSpec',
            'endpoint': 'endpoint',
            'error': 'error',
            'labels': 'labels',
            'latest_monitoring_pipeline_metadata': 'latestMonitoringPipelineMetadata',
            'log_ttl': 'logTtl',
            'logging_sampling_strategy': 'loggingSamplingStrategy',
            'model_deployment_monitoring_objective_configs': 'modelDeploymentMonitoringObjectiveConfigs',
            'model_deployment_monitoring_schedule_config': 'modelDeploymentMonitoringScheduleConfig',
            'model_monitoring_alert_config': 'modelMonitoringAlertConfig',
            'name': 'name',
            'next_schedule_time': 'nextScheduleTime',
            'predict_instance_schema_uri': 'predictInstanceSchemaUri',
            'sample_predict_instance': 'samplePredictInstance',
            'schedule_state': 'scheduleState',
            'state': 'state',
            'stats_anomalies_base_directory': 'statsAnomaliesBaseDirectory',
            'update_time': 'updateTime'
        }

        self._analysis_instance_schema_uri = analysis_instance_schema_uri
        self._bigquery_tables = bigquery_tables
        self._create_time = create_time
        self._display_name = display_name
        self._enable_monitoring_pipeline_logs = enable_monitoring_pipeline_logs
        self._encryption_spec = encryption_spec
        self._endpoint = endpoint
        self._error = error
        self._labels = labels
        self._latest_monitoring_pipeline_metadata = latest_monitoring_pipeline_metadata
        self._log_ttl = log_ttl
        self._logging_sampling_strategy = logging_sampling_strategy
        self._model_deployment_monitoring_objective_configs = model_deployment_monitoring_objective_configs
        self._model_deployment_monitoring_schedule_config = model_deployment_monitoring_schedule_config
        self._model_monitoring_alert_config = model_monitoring_alert_config
        self._name = name
        self._next_schedule_time = next_schedule_time
        self._predict_instance_schema_uri = predict_instance_schema_uri
        self._sample_predict_instance = sample_predict_instance
        self._schedule_state = schedule_state
        self._state = state
        self._stats_anomalies_base_directory = stats_anomalies_base_directory
        self._update_time = update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudAiplatformV1beta1ModelDeploymentMonitoringJob':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudAiplatformV1beta1ModelDeploymentMonitoringJob of this GoogleCloudAiplatformV1beta1ModelDeploymentMonitoringJob.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def analysis_instance_schema_uri(self):
        """Gets the analysis_instance_schema_uri of this GoogleCloudAiplatformV1beta1ModelDeploymentMonitoringJob.

        YAML schema file uri describing the format of a single instance that you want Tensorflow Data Validation (TFDV) to analyze. If this field is empty, all the feature data types are inferred from predict_instance_schema_uri, meaning that TFDV will use the data in the exact format(data type) as prediction request/response. If there are any data type differences between predict instance and TFDV instance, this field can be used to override the schema. For models trained with Vertex AI, this field must be set as all the fields in predict instance formatted as string.

        :return: The analysis_instance_schema_uri of this GoogleCloudAiplatformV1beta1ModelDeploymentMonitoringJob.
        :rtype: str
        """
        return self._analysis_instance_schema_uri

    @analysis_instance_schema_uri.setter
    def analysis_instance_schema_uri(self, analysis_instance_schema_uri):
        """Sets the analysis_instance_schema_uri of this GoogleCloudAiplatformV1beta1ModelDeploymentMonitoringJob.

        YAML schema file uri describing the format of a single instance that you want Tensorflow Data Validation (TFDV) to analyze. If this field is empty, all the feature data types are inferred from predict_instance_schema_uri, meaning that TFDV will use the data in the exact format(data type) as prediction request/response. If there are any data type differences between predict instance and TFDV instance, this field can be used to override the schema. For models trained with Vertex AI, this field must be set as all the fields in predict instance formatted as string.

        :param analysis_instance_schema_uri: The analysis_instance_schema_uri of this GoogleCloudAiplatformV1beta1ModelDeploymentMonitoringJob.
        :type analysis_instance_schema_uri: str
        """

        self._analysis_instance_schema_uri = analysis_instance_schema_uri

    @property
    def bigquery_tables(self):
        """Gets the bigquery_tables of this GoogleCloudAiplatformV1beta1ModelDeploymentMonitoringJob.

        Output only. The created bigquery tables for the job under customer project. Customer could do their own query & analysis. There could be 4 log tables in maximum: 1. Training data logging predict request/response 2. Serving data logging predict request/response

        :return: The bigquery_tables of this GoogleCloudAiplatformV1beta1ModelDeploymentMonitoringJob.
        :rtype: List[GoogleCloudAiplatformV1beta1ModelDeploymentMonitoringBigQueryTable]
        """
        return self._bigquery_tables

    @bigquery_tables.setter
    def bigquery_tables(self, bigquery_tables):
        """Sets the bigquery_tables of this GoogleCloudAiplatformV1beta1ModelDeploymentMonitoringJob.

        Output only. The created bigquery tables for the job under customer project. Customer could do their own query & analysis. There could be 4 log tables in maximum: 1. Training data logging predict request/response 2. Serving data logging predict request/response

        :param bigquery_tables: The bigquery_tables of this GoogleCloudAiplatformV1beta1ModelDeploymentMonitoringJob.
        :type bigquery_tables: List[GoogleCloudAiplatformV1beta1ModelDeploymentMonitoringBigQueryTable]
        """

        self._bigquery_tables = bigquery_tables

    @property
    def create_time(self):
        """Gets the create_time of this GoogleCloudAiplatformV1beta1ModelDeploymentMonitoringJob.

        Output only. Timestamp when this ModelDeploymentMonitoringJob was created.

        :return: The create_time of this GoogleCloudAiplatformV1beta1ModelDeploymentMonitoringJob.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this GoogleCloudAiplatformV1beta1ModelDeploymentMonitoringJob.

        Output only. Timestamp when this ModelDeploymentMonitoringJob was created.

        :param create_time: The create_time of this GoogleCloudAiplatformV1beta1ModelDeploymentMonitoringJob.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def display_name(self):
        """Gets the display_name of this GoogleCloudAiplatformV1beta1ModelDeploymentMonitoringJob.

        Required. The user-defined name of the ModelDeploymentMonitoringJob. The name can be up to 128 characters long and can consist of any UTF-8 characters. Display name of a ModelDeploymentMonitoringJob.

        :return: The display_name of this GoogleCloudAiplatformV1beta1ModelDeploymentMonitoringJob.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this GoogleCloudAiplatformV1beta1ModelDeploymentMonitoringJob.

        Required. The user-defined name of the ModelDeploymentMonitoringJob. The name can be up to 128 characters long and can consist of any UTF-8 characters. Display name of a ModelDeploymentMonitoringJob.

        :param display_name: The display_name of this GoogleCloudAiplatformV1beta1ModelDeploymentMonitoringJob.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def enable_monitoring_pipeline_logs(self):
        """Gets the enable_monitoring_pipeline_logs of this GoogleCloudAiplatformV1beta1ModelDeploymentMonitoringJob.

        If true, the scheduled monitoring pipeline logs are sent to Google Cloud Logging, including pipeline status and anomalies detected. Please note the logs incur cost, which are subject to [Cloud Logging pricing](https://cloud.google.com/logging#pricing).

        :return: The enable_monitoring_pipeline_logs of this GoogleCloudAiplatformV1beta1ModelDeploymentMonitoringJob.
        :rtype: bool
        """
        return self._enable_monitoring_pipeline_logs

    @enable_monitoring_pipeline_logs.setter
    def enable_monitoring_pipeline_logs(self, enable_monitoring_pipeline_logs):
        """Sets the enable_monitoring_pipeline_logs of this GoogleCloudAiplatformV1beta1ModelDeploymentMonitoringJob.

        If true, the scheduled monitoring pipeline logs are sent to Google Cloud Logging, including pipeline status and anomalies detected. Please note the logs incur cost, which are subject to [Cloud Logging pricing](https://cloud.google.com/logging#pricing).

        :param enable_monitoring_pipeline_logs: The enable_monitoring_pipeline_logs of this GoogleCloudAiplatformV1beta1ModelDeploymentMonitoringJob.
        :type enable_monitoring_pipeline_logs: bool
        """

        self._enable_monitoring_pipeline_logs = enable_monitoring_pipeline_logs

    @property
    def encryption_spec(self):
        """Gets the encryption_spec of this GoogleCloudAiplatformV1beta1ModelDeploymentMonitoringJob.


        :return: The encryption_spec of this GoogleCloudAiplatformV1beta1ModelDeploymentMonitoringJob.
        :rtype: GoogleCloudAiplatformV1beta1EncryptionSpec
        """
        return self._encryption_spec

    @encryption_spec.setter
    def encryption_spec(self, encryption_spec):
        """Sets the encryption_spec of this GoogleCloudAiplatformV1beta1ModelDeploymentMonitoringJob.


        :param encryption_spec: The encryption_spec of this GoogleCloudAiplatformV1beta1ModelDeploymentMonitoringJob.
        :type encryption_spec: GoogleCloudAiplatformV1beta1EncryptionSpec
        """

        self._encryption_spec = encryption_spec

    @property
    def endpoint(self):
        """Gets the endpoint of this GoogleCloudAiplatformV1beta1ModelDeploymentMonitoringJob.

        Required. Endpoint resource name. Format: `projects/{project}/locations/{location}/endpoints/{endpoint}`

        :return: The endpoint of this GoogleCloudAiplatformV1beta1ModelDeploymentMonitoringJob.
        :rtype: str
        """
        return self._endpoint

    @endpoint.setter
    def endpoint(self, endpoint):
        """Sets the endpoint of this GoogleCloudAiplatformV1beta1ModelDeploymentMonitoringJob.

        Required. Endpoint resource name. Format: `projects/{project}/locations/{location}/endpoints/{endpoint}`

        :param endpoint: The endpoint of this GoogleCloudAiplatformV1beta1ModelDeploymentMonitoringJob.
        :type endpoint: str
        """

        self._endpoint = endpoint

    @property
    def error(self):
        """Gets the error of this GoogleCloudAiplatformV1beta1ModelDeploymentMonitoringJob.


        :return: The error of this GoogleCloudAiplatformV1beta1ModelDeploymentMonitoringJob.
        :rtype: GoogleRpcStatus
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this GoogleCloudAiplatformV1beta1ModelDeploymentMonitoringJob.


        :param error: The error of this GoogleCloudAiplatformV1beta1ModelDeploymentMonitoringJob.
        :type error: GoogleRpcStatus
        """

        self._error = error

    @property
    def labels(self):
        """Gets the labels of this GoogleCloudAiplatformV1beta1ModelDeploymentMonitoringJob.

        The labels with user-defined metadata to organize your ModelDeploymentMonitoringJob. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. See https://goo.gl/xmQnxf for more information and examples of labels.

        :return: The labels of this GoogleCloudAiplatformV1beta1ModelDeploymentMonitoringJob.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this GoogleCloudAiplatformV1beta1ModelDeploymentMonitoringJob.

        The labels with user-defined metadata to organize your ModelDeploymentMonitoringJob. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. See https://goo.gl/xmQnxf for more information and examples of labels.

        :param labels: The labels of this GoogleCloudAiplatformV1beta1ModelDeploymentMonitoringJob.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def latest_monitoring_pipeline_metadata(self):
        """Gets the latest_monitoring_pipeline_metadata of this GoogleCloudAiplatformV1beta1ModelDeploymentMonitoringJob.


        :return: The latest_monitoring_pipeline_metadata of this GoogleCloudAiplatformV1beta1ModelDeploymentMonitoringJob.
        :rtype: GoogleCloudAiplatformV1beta1ModelDeploymentMonitoringJobLatestMonitoringPipelineMetadata
        """
        return self._latest_monitoring_pipeline_metadata

    @latest_monitoring_pipeline_metadata.setter
    def latest_monitoring_pipeline_metadata(self, latest_monitoring_pipeline_metadata):
        """Sets the latest_monitoring_pipeline_metadata of this GoogleCloudAiplatformV1beta1ModelDeploymentMonitoringJob.


        :param latest_monitoring_pipeline_metadata: The latest_monitoring_pipeline_metadata of this GoogleCloudAiplatformV1beta1ModelDeploymentMonitoringJob.
        :type latest_monitoring_pipeline_metadata: GoogleCloudAiplatformV1beta1ModelDeploymentMonitoringJobLatestMonitoringPipelineMetadata
        """

        self._latest_monitoring_pipeline_metadata = latest_monitoring_pipeline_metadata

    @property
    def log_ttl(self):
        """Gets the log_ttl of this GoogleCloudAiplatformV1beta1ModelDeploymentMonitoringJob.

        The TTL of BigQuery tables in user projects which stores logs. A day is the basic unit of the TTL and we take the ceil of TTL/86400(a day). e.g. { second: 3600} indicates ttl = 1 day.

        :return: The log_ttl of this GoogleCloudAiplatformV1beta1ModelDeploymentMonitoringJob.
        :rtype: str
        """
        return self._log_ttl

    @log_ttl.setter
    def log_ttl(self, log_ttl):
        """Sets the log_ttl of this GoogleCloudAiplatformV1beta1ModelDeploymentMonitoringJob.

        The TTL of BigQuery tables in user projects which stores logs. A day is the basic unit of the TTL and we take the ceil of TTL/86400(a day). e.g. { second: 3600} indicates ttl = 1 day.

        :param log_ttl: The log_ttl of this GoogleCloudAiplatformV1beta1ModelDeploymentMonitoringJob.
        :type log_ttl: str
        """

        self._log_ttl = log_ttl

    @property
    def logging_sampling_strategy(self):
        """Gets the logging_sampling_strategy of this GoogleCloudAiplatformV1beta1ModelDeploymentMonitoringJob.


        :return: The logging_sampling_strategy of this GoogleCloudAiplatformV1beta1ModelDeploymentMonitoringJob.
        :rtype: GoogleCloudAiplatformV1beta1SamplingStrategy
        """
        return self._logging_sampling_strategy

    @logging_sampling_strategy.setter
    def logging_sampling_strategy(self, logging_sampling_strategy):
        """Sets the logging_sampling_strategy of this GoogleCloudAiplatformV1beta1ModelDeploymentMonitoringJob.


        :param logging_sampling_strategy: The logging_sampling_strategy of this GoogleCloudAiplatformV1beta1ModelDeploymentMonitoringJob.
        :type logging_sampling_strategy: GoogleCloudAiplatformV1beta1SamplingStrategy
        """

        self._logging_sampling_strategy = logging_sampling_strategy

    @property
    def model_deployment_monitoring_objective_configs(self):
        """Gets the model_deployment_monitoring_objective_configs of this GoogleCloudAiplatformV1beta1ModelDeploymentMonitoringJob.

        Required. The config for monitoring objectives. This is a per DeployedModel config. Each DeployedModel needs to be configured separately.

        :return: The model_deployment_monitoring_objective_configs of this GoogleCloudAiplatformV1beta1ModelDeploymentMonitoringJob.
        :rtype: List[GoogleCloudAiplatformV1beta1ModelDeploymentMonitoringObjectiveConfig]
        """
        return self._model_deployment_monitoring_objective_configs

    @model_deployment_monitoring_objective_configs.setter
    def model_deployment_monitoring_objective_configs(self, model_deployment_monitoring_objective_configs):
        """Sets the model_deployment_monitoring_objective_configs of this GoogleCloudAiplatformV1beta1ModelDeploymentMonitoringJob.

        Required. The config for monitoring objectives. This is a per DeployedModel config. Each DeployedModel needs to be configured separately.

        :param model_deployment_monitoring_objective_configs: The model_deployment_monitoring_objective_configs of this GoogleCloudAiplatformV1beta1ModelDeploymentMonitoringJob.
        :type model_deployment_monitoring_objective_configs: List[GoogleCloudAiplatformV1beta1ModelDeploymentMonitoringObjectiveConfig]
        """

        self._model_deployment_monitoring_objective_configs = model_deployment_monitoring_objective_configs

    @property
    def model_deployment_monitoring_schedule_config(self):
        """Gets the model_deployment_monitoring_schedule_config of this GoogleCloudAiplatformV1beta1ModelDeploymentMonitoringJob.


        :return: The model_deployment_monitoring_schedule_config of this GoogleCloudAiplatformV1beta1ModelDeploymentMonitoringJob.
        :rtype: GoogleCloudAiplatformV1beta1ModelDeploymentMonitoringScheduleConfig
        """
        return self._model_deployment_monitoring_schedule_config

    @model_deployment_monitoring_schedule_config.setter
    def model_deployment_monitoring_schedule_config(self, model_deployment_monitoring_schedule_config):
        """Sets the model_deployment_monitoring_schedule_config of this GoogleCloudAiplatformV1beta1ModelDeploymentMonitoringJob.


        :param model_deployment_monitoring_schedule_config: The model_deployment_monitoring_schedule_config of this GoogleCloudAiplatformV1beta1ModelDeploymentMonitoringJob.
        :type model_deployment_monitoring_schedule_config: GoogleCloudAiplatformV1beta1ModelDeploymentMonitoringScheduleConfig
        """

        self._model_deployment_monitoring_schedule_config = model_deployment_monitoring_schedule_config

    @property
    def model_monitoring_alert_config(self):
        """Gets the model_monitoring_alert_config of this GoogleCloudAiplatformV1beta1ModelDeploymentMonitoringJob.


        :return: The model_monitoring_alert_config of this GoogleCloudAiplatformV1beta1ModelDeploymentMonitoringJob.
        :rtype: GoogleCloudAiplatformV1beta1ModelMonitoringAlertConfig
        """
        return self._model_monitoring_alert_config

    @model_monitoring_alert_config.setter
    def model_monitoring_alert_config(self, model_monitoring_alert_config):
        """Sets the model_monitoring_alert_config of this GoogleCloudAiplatformV1beta1ModelDeploymentMonitoringJob.


        :param model_monitoring_alert_config: The model_monitoring_alert_config of this GoogleCloudAiplatformV1beta1ModelDeploymentMonitoringJob.
        :type model_monitoring_alert_config: GoogleCloudAiplatformV1beta1ModelMonitoringAlertConfig
        """

        self._model_monitoring_alert_config = model_monitoring_alert_config

    @property
    def name(self):
        """Gets the name of this GoogleCloudAiplatformV1beta1ModelDeploymentMonitoringJob.

        Output only. Resource name of a ModelDeploymentMonitoringJob.

        :return: The name of this GoogleCloudAiplatformV1beta1ModelDeploymentMonitoringJob.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GoogleCloudAiplatformV1beta1ModelDeploymentMonitoringJob.

        Output only. Resource name of a ModelDeploymentMonitoringJob.

        :param name: The name of this GoogleCloudAiplatformV1beta1ModelDeploymentMonitoringJob.
        :type name: str
        """

        self._name = name

    @property
    def next_schedule_time(self):
        """Gets the next_schedule_time of this GoogleCloudAiplatformV1beta1ModelDeploymentMonitoringJob.

        Output only. Timestamp when this monitoring pipeline will be scheduled to run for the next round.

        :return: The next_schedule_time of this GoogleCloudAiplatformV1beta1ModelDeploymentMonitoringJob.
        :rtype: str
        """
        return self._next_schedule_time

    @next_schedule_time.setter
    def next_schedule_time(self, next_schedule_time):
        """Sets the next_schedule_time of this GoogleCloudAiplatformV1beta1ModelDeploymentMonitoringJob.

        Output only. Timestamp when this monitoring pipeline will be scheduled to run for the next round.

        :param next_schedule_time: The next_schedule_time of this GoogleCloudAiplatformV1beta1ModelDeploymentMonitoringJob.
        :type next_schedule_time: str
        """

        self._next_schedule_time = next_schedule_time

    @property
    def predict_instance_schema_uri(self):
        """Gets the predict_instance_schema_uri of this GoogleCloudAiplatformV1beta1ModelDeploymentMonitoringJob.

        YAML schema file uri describing the format of a single instance, which are given to format this Endpoint's prediction (and explanation). If not set, we will generate predict schema from collected predict requests.

        :return: The predict_instance_schema_uri of this GoogleCloudAiplatformV1beta1ModelDeploymentMonitoringJob.
        :rtype: str
        """
        return self._predict_instance_schema_uri

    @predict_instance_schema_uri.setter
    def predict_instance_schema_uri(self, predict_instance_schema_uri):
        """Sets the predict_instance_schema_uri of this GoogleCloudAiplatformV1beta1ModelDeploymentMonitoringJob.

        YAML schema file uri describing the format of a single instance, which are given to format this Endpoint's prediction (and explanation). If not set, we will generate predict schema from collected predict requests.

        :param predict_instance_schema_uri: The predict_instance_schema_uri of this GoogleCloudAiplatformV1beta1ModelDeploymentMonitoringJob.
        :type predict_instance_schema_uri: str
        """

        self._predict_instance_schema_uri = predict_instance_schema_uri

    @property
    def sample_predict_instance(self):
        """Gets the sample_predict_instance of this GoogleCloudAiplatformV1beta1ModelDeploymentMonitoringJob.

        Sample Predict instance, same format as PredictRequest.instances, this can be set as a replacement of ModelDeploymentMonitoringJob.predict_instance_schema_uri. If not set, we will generate predict schema from collected predict requests.

        :return: The sample_predict_instance of this GoogleCloudAiplatformV1beta1ModelDeploymentMonitoringJob.
        :rtype: object
        """
        return self._sample_predict_instance

    @sample_predict_instance.setter
    def sample_predict_instance(self, sample_predict_instance):
        """Sets the sample_predict_instance of this GoogleCloudAiplatformV1beta1ModelDeploymentMonitoringJob.

        Sample Predict instance, same format as PredictRequest.instances, this can be set as a replacement of ModelDeploymentMonitoringJob.predict_instance_schema_uri. If not set, we will generate predict schema from collected predict requests.

        :param sample_predict_instance: The sample_predict_instance of this GoogleCloudAiplatformV1beta1ModelDeploymentMonitoringJob.
        :type sample_predict_instance: object
        """

        self._sample_predict_instance = sample_predict_instance

    @property
    def schedule_state(self):
        """Gets the schedule_state of this GoogleCloudAiplatformV1beta1ModelDeploymentMonitoringJob.

        Output only. Schedule state when the monitoring job is in Running state.

        :return: The schedule_state of this GoogleCloudAiplatformV1beta1ModelDeploymentMonitoringJob.
        :rtype: str
        """
        return self._schedule_state

    @schedule_state.setter
    def schedule_state(self, schedule_state):
        """Sets the schedule_state of this GoogleCloudAiplatformV1beta1ModelDeploymentMonitoringJob.

        Output only. Schedule state when the monitoring job is in Running state.

        :param schedule_state: The schedule_state of this GoogleCloudAiplatformV1beta1ModelDeploymentMonitoringJob.
        :type schedule_state: str
        """
        allowed_values = ["MONITORING_SCHEDULE_STATE_UNSPECIFIED", "PENDING", "OFFLINE", "RUNNING"]  # noqa: E501
        if schedule_state not in allowed_values:
            raise ValueError(
                "Invalid value for `schedule_state` ({0}), must be one of {1}"
                .format(schedule_state, allowed_values)
            )

        self._schedule_state = schedule_state

    @property
    def state(self):
        """Gets the state of this GoogleCloudAiplatformV1beta1ModelDeploymentMonitoringJob.

        Output only. The detailed state of the monitoring job. When the job is still creating, the state will be 'PENDING'. Once the job is successfully created, the state will be 'RUNNING'. Pause the job, the state will be 'PAUSED'. Resume the job, the state will return to 'RUNNING'.

        :return: The state of this GoogleCloudAiplatformV1beta1ModelDeploymentMonitoringJob.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this GoogleCloudAiplatformV1beta1ModelDeploymentMonitoringJob.

        Output only. The detailed state of the monitoring job. When the job is still creating, the state will be 'PENDING'. Once the job is successfully created, the state will be 'RUNNING'. Pause the job, the state will be 'PAUSED'. Resume the job, the state will return to 'RUNNING'.

        :param state: The state of this GoogleCloudAiplatformV1beta1ModelDeploymentMonitoringJob.
        :type state: str
        """
        allowed_values = ["JOB_STATE_UNSPECIFIED", "JOB_STATE_QUEUED", "JOB_STATE_PENDING", "JOB_STATE_RUNNING", "JOB_STATE_SUCCEEDED", "JOB_STATE_FAILED", "JOB_STATE_CANCELLING", "JOB_STATE_CANCELLED", "JOB_STATE_PAUSED", "JOB_STATE_EXPIRED", "JOB_STATE_UPDATING", "JOB_STATE_PARTIALLY_SUCCEEDED"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def stats_anomalies_base_directory(self):
        """Gets the stats_anomalies_base_directory of this GoogleCloudAiplatformV1beta1ModelDeploymentMonitoringJob.


        :return: The stats_anomalies_base_directory of this GoogleCloudAiplatformV1beta1ModelDeploymentMonitoringJob.
        :rtype: GoogleCloudAiplatformV1beta1GcsDestination
        """
        return self._stats_anomalies_base_directory

    @stats_anomalies_base_directory.setter
    def stats_anomalies_base_directory(self, stats_anomalies_base_directory):
        """Sets the stats_anomalies_base_directory of this GoogleCloudAiplatformV1beta1ModelDeploymentMonitoringJob.


        :param stats_anomalies_base_directory: The stats_anomalies_base_directory of this GoogleCloudAiplatformV1beta1ModelDeploymentMonitoringJob.
        :type stats_anomalies_base_directory: GoogleCloudAiplatformV1beta1GcsDestination
        """

        self._stats_anomalies_base_directory = stats_anomalies_base_directory

    @property
    def update_time(self):
        """Gets the update_time of this GoogleCloudAiplatformV1beta1ModelDeploymentMonitoringJob.

        Output only. Timestamp when this ModelDeploymentMonitoringJob was updated most recently.

        :return: The update_time of this GoogleCloudAiplatformV1beta1ModelDeploymentMonitoringJob.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this GoogleCloudAiplatformV1beta1ModelDeploymentMonitoringJob.

        Output only. Timestamp when this ModelDeploymentMonitoringJob was updated most recently.

        :param update_time: The update_time of this GoogleCloudAiplatformV1beta1ModelDeploymentMonitoringJob.
        :type update_time: str
        """

        self._update_time = update_time
