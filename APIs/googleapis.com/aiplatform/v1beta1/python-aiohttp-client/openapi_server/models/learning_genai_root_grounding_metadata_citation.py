# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LearningGenaiRootGroundingMetadataCitation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, end_index: int=None, fact_index: int=None, score: float=None, start_index: int=None):
        """LearningGenaiRootGroundingMetadataCitation - a model defined in OpenAPI

        :param end_index: The end_index of this LearningGenaiRootGroundingMetadataCitation.
        :param fact_index: The fact_index of this LearningGenaiRootGroundingMetadataCitation.
        :param score: The score of this LearningGenaiRootGroundingMetadataCitation.
        :param start_index: The start_index of this LearningGenaiRootGroundingMetadataCitation.
        """
        self.openapi_types = {
            'end_index': int,
            'fact_index': int,
            'score': float,
            'start_index': int
        }

        self.attribute_map = {
            'end_index': 'endIndex',
            'fact_index': 'factIndex',
            'score': 'score',
            'start_index': 'startIndex'
        }

        self._end_index = end_index
        self._fact_index = fact_index
        self._score = score
        self._start_index = start_index

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LearningGenaiRootGroundingMetadataCitation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LearningGenaiRootGroundingMetadataCitation of this LearningGenaiRootGroundingMetadataCitation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def end_index(self):
        """Gets the end_index of this LearningGenaiRootGroundingMetadataCitation.

        Index in the prediction output where the citation ends (exclusive). Must be > start_index and < len(output).

        :return: The end_index of this LearningGenaiRootGroundingMetadataCitation.
        :rtype: int
        """
        return self._end_index

    @end_index.setter
    def end_index(self, end_index):
        """Sets the end_index of this LearningGenaiRootGroundingMetadataCitation.

        Index in the prediction output where the citation ends (exclusive). Must be > start_index and < len(output).

        :param end_index: The end_index of this LearningGenaiRootGroundingMetadataCitation.
        :type end_index: int
        """

        self._end_index = end_index

    @property
    def fact_index(self):
        """Gets the fact_index of this LearningGenaiRootGroundingMetadataCitation.

        Index of the fact supporting this claim. Should be within the range of the `world_facts` in the GenerateResponse.

        :return: The fact_index of this LearningGenaiRootGroundingMetadataCitation.
        :rtype: int
        """
        return self._fact_index

    @fact_index.setter
    def fact_index(self, fact_index):
        """Sets the fact_index of this LearningGenaiRootGroundingMetadataCitation.

        Index of the fact supporting this claim. Should be within the range of the `world_facts` in the GenerateResponse.

        :param fact_index: The fact_index of this LearningGenaiRootGroundingMetadataCitation.
        :type fact_index: int
        """

        self._fact_index = fact_index

    @property
    def score(self):
        """Gets the score of this LearningGenaiRootGroundingMetadataCitation.

        Confidence score of this entailment. Value is [0,1] with 1 is the most confidence.

        :return: The score of this LearningGenaiRootGroundingMetadataCitation.
        :rtype: float
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this LearningGenaiRootGroundingMetadataCitation.

        Confidence score of this entailment. Value is [0,1] with 1 is the most confidence.

        :param score: The score of this LearningGenaiRootGroundingMetadataCitation.
        :type score: float
        """

        self._score = score

    @property
    def start_index(self):
        """Gets the start_index of this LearningGenaiRootGroundingMetadataCitation.

        Index in the prediction output where the citation starts (inclusive). Must be >= 0 and < end_index.

        :return: The start_index of this LearningGenaiRootGroundingMetadataCitation.
        :rtype: int
        """
        return self._start_index

    @start_index.setter
    def start_index(self, start_index):
        """Sets the start_index of this LearningGenaiRootGroundingMetadataCitation.

        Index in the prediction output where the citation starts (inclusive). Must be >= 0 and < end_index.

        :param start_index: The start_index of this LearningGenaiRootGroundingMetadataCitation.
        :type start_index: int
        """

        self._start_index = start_index
