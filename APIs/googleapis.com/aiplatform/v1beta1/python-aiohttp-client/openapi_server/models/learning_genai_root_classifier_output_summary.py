# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.learning_genai_root_metric_output import LearningGenaiRootMetricOutput
from openapi_server.models.learning_genai_root_rule_output import LearningGenaiRootRuleOutput
from openapi_server import util


class LearningGenaiRootClassifierOutputSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, metrics: List[LearningGenaiRootMetricOutput]=None, rule_output: LearningGenaiRootRuleOutput=None, rule_outputs: List[LearningGenaiRootRuleOutput]=None):
        """LearningGenaiRootClassifierOutputSummary - a model defined in OpenAPI

        :param metrics: The metrics of this LearningGenaiRootClassifierOutputSummary.
        :param rule_output: The rule_output of this LearningGenaiRootClassifierOutputSummary.
        :param rule_outputs: The rule_outputs of this LearningGenaiRootClassifierOutputSummary.
        """
        self.openapi_types = {
            'metrics': List[LearningGenaiRootMetricOutput],
            'rule_output': LearningGenaiRootRuleOutput,
            'rule_outputs': List[LearningGenaiRootRuleOutput]
        }

        self.attribute_map = {
            'metrics': 'metrics',
            'rule_output': 'ruleOutput',
            'rule_outputs': 'ruleOutputs'
        }

        self._metrics = metrics
        self._rule_output = rule_output
        self._rule_outputs = rule_outputs

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LearningGenaiRootClassifierOutputSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LearningGenaiRootClassifierOutputSummary of this LearningGenaiRootClassifierOutputSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def metrics(self):
        """Gets the metrics of this LearningGenaiRootClassifierOutputSummary.


        :return: The metrics of this LearningGenaiRootClassifierOutputSummary.
        :rtype: List[LearningGenaiRootMetricOutput]
        """
        return self._metrics

    @metrics.setter
    def metrics(self, metrics):
        """Sets the metrics of this LearningGenaiRootClassifierOutputSummary.


        :param metrics: The metrics of this LearningGenaiRootClassifierOutputSummary.
        :type metrics: List[LearningGenaiRootMetricOutput]
        """

        self._metrics = metrics

    @property
    def rule_output(self):
        """Gets the rule_output of this LearningGenaiRootClassifierOutputSummary.


        :return: The rule_output of this LearningGenaiRootClassifierOutputSummary.
        :rtype: LearningGenaiRootRuleOutput
        """
        return self._rule_output

    @rule_output.setter
    def rule_output(self, rule_output):
        """Sets the rule_output of this LearningGenaiRootClassifierOutputSummary.


        :param rule_output: The rule_output of this LearningGenaiRootClassifierOutputSummary.
        :type rule_output: LearningGenaiRootRuleOutput
        """

        self._rule_output = rule_output

    @property
    def rule_outputs(self):
        """Gets the rule_outputs of this LearningGenaiRootClassifierOutputSummary.

        outputs of all matching rule.

        :return: The rule_outputs of this LearningGenaiRootClassifierOutputSummary.
        :rtype: List[LearningGenaiRootRuleOutput]
        """
        return self._rule_outputs

    @rule_outputs.setter
    def rule_outputs(self, rule_outputs):
        """Sets the rule_outputs of this LearningGenaiRootClassifierOutputSummary.

        outputs of all matching rule.

        :param rule_outputs: The rule_outputs of this LearningGenaiRootClassifierOutputSummary.
        :type rule_outputs: List[LearningGenaiRootRuleOutput]
        """

        self._rule_outputs = rule_outputs
