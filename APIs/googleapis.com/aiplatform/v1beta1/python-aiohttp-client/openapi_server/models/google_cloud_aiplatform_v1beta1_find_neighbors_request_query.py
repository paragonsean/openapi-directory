# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_aiplatform_v1beta1_index_datapoint import GoogleCloudAiplatformV1beta1IndexDatapoint
from openapi_server import util


class GoogleCloudAiplatformV1beta1FindNeighborsRequestQuery(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, approximate_neighbor_count: int=None, datapoint: GoogleCloudAiplatformV1beta1IndexDatapoint=None, fraction_leaf_nodes_to_search_override: float=None, neighbor_count: int=None, per_crowding_attribute_neighbor_count: int=None):
        """GoogleCloudAiplatformV1beta1FindNeighborsRequestQuery - a model defined in OpenAPI

        :param approximate_neighbor_count: The approximate_neighbor_count of this GoogleCloudAiplatformV1beta1FindNeighborsRequestQuery.
        :param datapoint: The datapoint of this GoogleCloudAiplatformV1beta1FindNeighborsRequestQuery.
        :param fraction_leaf_nodes_to_search_override: The fraction_leaf_nodes_to_search_override of this GoogleCloudAiplatformV1beta1FindNeighborsRequestQuery.
        :param neighbor_count: The neighbor_count of this GoogleCloudAiplatformV1beta1FindNeighborsRequestQuery.
        :param per_crowding_attribute_neighbor_count: The per_crowding_attribute_neighbor_count of this GoogleCloudAiplatformV1beta1FindNeighborsRequestQuery.
        """
        self.openapi_types = {
            'approximate_neighbor_count': int,
            'datapoint': GoogleCloudAiplatformV1beta1IndexDatapoint,
            'fraction_leaf_nodes_to_search_override': float,
            'neighbor_count': int,
            'per_crowding_attribute_neighbor_count': int
        }

        self.attribute_map = {
            'approximate_neighbor_count': 'approximateNeighborCount',
            'datapoint': 'datapoint',
            'fraction_leaf_nodes_to_search_override': 'fractionLeafNodesToSearchOverride',
            'neighbor_count': 'neighborCount',
            'per_crowding_attribute_neighbor_count': 'perCrowdingAttributeNeighborCount'
        }

        self._approximate_neighbor_count = approximate_neighbor_count
        self._datapoint = datapoint
        self._fraction_leaf_nodes_to_search_override = fraction_leaf_nodes_to_search_override
        self._neighbor_count = neighbor_count
        self._per_crowding_attribute_neighbor_count = per_crowding_attribute_neighbor_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudAiplatformV1beta1FindNeighborsRequestQuery':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudAiplatformV1beta1FindNeighborsRequestQuery of this GoogleCloudAiplatformV1beta1FindNeighborsRequestQuery.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def approximate_neighbor_count(self):
        """Gets the approximate_neighbor_count of this GoogleCloudAiplatformV1beta1FindNeighborsRequestQuery.

        The number of neighbors to find via approximate search before exact reordering is performed. If not set, the default value from scam config is used; if set, this value must be > 0.

        :return: The approximate_neighbor_count of this GoogleCloudAiplatformV1beta1FindNeighborsRequestQuery.
        :rtype: int
        """
        return self._approximate_neighbor_count

    @approximate_neighbor_count.setter
    def approximate_neighbor_count(self, approximate_neighbor_count):
        """Sets the approximate_neighbor_count of this GoogleCloudAiplatformV1beta1FindNeighborsRequestQuery.

        The number of neighbors to find via approximate search before exact reordering is performed. If not set, the default value from scam config is used; if set, this value must be > 0.

        :param approximate_neighbor_count: The approximate_neighbor_count of this GoogleCloudAiplatformV1beta1FindNeighborsRequestQuery.
        :type approximate_neighbor_count: int
        """

        self._approximate_neighbor_count = approximate_neighbor_count

    @property
    def datapoint(self):
        """Gets the datapoint of this GoogleCloudAiplatformV1beta1FindNeighborsRequestQuery.


        :return: The datapoint of this GoogleCloudAiplatformV1beta1FindNeighborsRequestQuery.
        :rtype: GoogleCloudAiplatformV1beta1IndexDatapoint
        """
        return self._datapoint

    @datapoint.setter
    def datapoint(self, datapoint):
        """Sets the datapoint of this GoogleCloudAiplatformV1beta1FindNeighborsRequestQuery.


        :param datapoint: The datapoint of this GoogleCloudAiplatformV1beta1FindNeighborsRequestQuery.
        :type datapoint: GoogleCloudAiplatformV1beta1IndexDatapoint
        """

        self._datapoint = datapoint

    @property
    def fraction_leaf_nodes_to_search_override(self):
        """Gets the fraction_leaf_nodes_to_search_override of this GoogleCloudAiplatformV1beta1FindNeighborsRequestQuery.

        The fraction of the number of leaves to search, set at query time allows user to tune search performance. This value increase result in both search accuracy and latency increase. The value should be between 0.0 and 1.0. If not set or set to 0.0, query uses the default value specified in NearestNeighborSearchConfig.TreeAHConfig.fraction_leaf_nodes_to_search.

        :return: The fraction_leaf_nodes_to_search_override of this GoogleCloudAiplatformV1beta1FindNeighborsRequestQuery.
        :rtype: float
        """
        return self._fraction_leaf_nodes_to_search_override

    @fraction_leaf_nodes_to_search_override.setter
    def fraction_leaf_nodes_to_search_override(self, fraction_leaf_nodes_to_search_override):
        """Sets the fraction_leaf_nodes_to_search_override of this GoogleCloudAiplatformV1beta1FindNeighborsRequestQuery.

        The fraction of the number of leaves to search, set at query time allows user to tune search performance. This value increase result in both search accuracy and latency increase. The value should be between 0.0 and 1.0. If not set or set to 0.0, query uses the default value specified in NearestNeighborSearchConfig.TreeAHConfig.fraction_leaf_nodes_to_search.

        :param fraction_leaf_nodes_to_search_override: The fraction_leaf_nodes_to_search_override of this GoogleCloudAiplatformV1beta1FindNeighborsRequestQuery.
        :type fraction_leaf_nodes_to_search_override: float
        """

        self._fraction_leaf_nodes_to_search_override = fraction_leaf_nodes_to_search_override

    @property
    def neighbor_count(self):
        """Gets the neighbor_count of this GoogleCloudAiplatformV1beta1FindNeighborsRequestQuery.

        The number of nearest neighbors to be retrieved from database for each query. If not set, will use the default from the service configuration (https://cloud.google.com/vertex-ai/docs/matching-engine/configuring-indexes#nearest-neighbor-search-config).

        :return: The neighbor_count of this GoogleCloudAiplatformV1beta1FindNeighborsRequestQuery.
        :rtype: int
        """
        return self._neighbor_count

    @neighbor_count.setter
    def neighbor_count(self, neighbor_count):
        """Sets the neighbor_count of this GoogleCloudAiplatformV1beta1FindNeighborsRequestQuery.

        The number of nearest neighbors to be retrieved from database for each query. If not set, will use the default from the service configuration (https://cloud.google.com/vertex-ai/docs/matching-engine/configuring-indexes#nearest-neighbor-search-config).

        :param neighbor_count: The neighbor_count of this GoogleCloudAiplatformV1beta1FindNeighborsRequestQuery.
        :type neighbor_count: int
        """

        self._neighbor_count = neighbor_count

    @property
    def per_crowding_attribute_neighbor_count(self):
        """Gets the per_crowding_attribute_neighbor_count of this GoogleCloudAiplatformV1beta1FindNeighborsRequestQuery.

        Crowding is a constraint on a neighbor list produced by nearest neighbor search requiring that no more than some value k' of the k neighbors returned have the same value of crowding_attribute. It's used for improving result diversity. This field is the maximum number of matches with the same crowding tag.

        :return: The per_crowding_attribute_neighbor_count of this GoogleCloudAiplatformV1beta1FindNeighborsRequestQuery.
        :rtype: int
        """
        return self._per_crowding_attribute_neighbor_count

    @per_crowding_attribute_neighbor_count.setter
    def per_crowding_attribute_neighbor_count(self, per_crowding_attribute_neighbor_count):
        """Sets the per_crowding_attribute_neighbor_count of this GoogleCloudAiplatformV1beta1FindNeighborsRequestQuery.

        Crowding is a constraint on a neighbor list produced by nearest neighbor search requiring that no more than some value k' of the k neighbors returned have the same value of crowding_attribute. It's used for improving result diversity. This field is the maximum number of matches with the same crowding tag.

        :param per_crowding_attribute_neighbor_count: The per_crowding_attribute_neighbor_count of this GoogleCloudAiplatformV1beta1FindNeighborsRequestQuery.
        :type per_crowding_attribute_neighbor_count: int
        """

        self._per_crowding_attribute_neighbor_count = per_crowding_attribute_neighbor_count
