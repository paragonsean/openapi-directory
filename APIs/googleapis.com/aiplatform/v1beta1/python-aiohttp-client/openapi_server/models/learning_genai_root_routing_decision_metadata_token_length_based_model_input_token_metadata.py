# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LearningGenaiRootRoutingDecisionMetadataTokenLengthBasedModelInputTokenMetadata(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, computed_input_token_length: int=None, model_id: str=None):
        """LearningGenaiRootRoutingDecisionMetadataTokenLengthBasedModelInputTokenMetadata - a model defined in OpenAPI

        :param computed_input_token_length: The computed_input_token_length of this LearningGenaiRootRoutingDecisionMetadataTokenLengthBasedModelInputTokenMetadata.
        :param model_id: The model_id of this LearningGenaiRootRoutingDecisionMetadataTokenLengthBasedModelInputTokenMetadata.
        """
        self.openapi_types = {
            'computed_input_token_length': int,
            'model_id': str
        }

        self.attribute_map = {
            'computed_input_token_length': 'computedInputTokenLength',
            'model_id': 'modelId'
        }

        self._computed_input_token_length = computed_input_token_length
        self._model_id = model_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LearningGenaiRootRoutingDecisionMetadataTokenLengthBasedModelInputTokenMetadata':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LearningGenaiRootRoutingDecisionMetadataTokenLengthBasedModelInputTokenMetadata of this LearningGenaiRootRoutingDecisionMetadataTokenLengthBasedModelInputTokenMetadata.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def computed_input_token_length(self):
        """Gets the computed_input_token_length of this LearningGenaiRootRoutingDecisionMetadataTokenLengthBasedModelInputTokenMetadata.

        The length computed by backends using the formatter & tokenizer specific to the model

        :return: The computed_input_token_length of this LearningGenaiRootRoutingDecisionMetadataTokenLengthBasedModelInputTokenMetadata.
        :rtype: int
        """
        return self._computed_input_token_length

    @computed_input_token_length.setter
    def computed_input_token_length(self, computed_input_token_length):
        """Sets the computed_input_token_length of this LearningGenaiRootRoutingDecisionMetadataTokenLengthBasedModelInputTokenMetadata.

        The length computed by backends using the formatter & tokenizer specific to the model

        :param computed_input_token_length: The computed_input_token_length of this LearningGenaiRootRoutingDecisionMetadataTokenLengthBasedModelInputTokenMetadata.
        :type computed_input_token_length: int
        """

        self._computed_input_token_length = computed_input_token_length

    @property
    def model_id(self):
        """Gets the model_id of this LearningGenaiRootRoutingDecisionMetadataTokenLengthBasedModelInputTokenMetadata.


        :return: The model_id of this LearningGenaiRootRoutingDecisionMetadataTokenLengthBasedModelInputTokenMetadata.
        :rtype: str
        """
        return self._model_id

    @model_id.setter
    def model_id(self, model_id):
        """Sets the model_id of this LearningGenaiRootRoutingDecisionMetadataTokenLengthBasedModelInputTokenMetadata.


        :param model_id: The model_id of this LearningGenaiRootRoutingDecisionMetadataTokenLengthBasedModelInputTokenMetadata.
        :type model_id: str
        """

        self._model_id = model_id
