# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.learning_genai_root_codey_truncator_metadata import LearningGenaiRootCodeyTruncatorMetadata
from openapi_server import util


class LearningGenaiRootCodeyCheckpoint(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, codey_truncator_metadata: LearningGenaiRootCodeyTruncatorMetadata=None, current_sample: str=None, post_inference_step: str=None):
        """LearningGenaiRootCodeyCheckpoint - a model defined in OpenAPI

        :param codey_truncator_metadata: The codey_truncator_metadata of this LearningGenaiRootCodeyCheckpoint.
        :param current_sample: The current_sample of this LearningGenaiRootCodeyCheckpoint.
        :param post_inference_step: The post_inference_step of this LearningGenaiRootCodeyCheckpoint.
        """
        self.openapi_types = {
            'codey_truncator_metadata': LearningGenaiRootCodeyTruncatorMetadata,
            'current_sample': str,
            'post_inference_step': str
        }

        self.attribute_map = {
            'codey_truncator_metadata': 'codeyTruncatorMetadata',
            'current_sample': 'currentSample',
            'post_inference_step': 'postInferenceStep'
        }

        self._codey_truncator_metadata = codey_truncator_metadata
        self._current_sample = current_sample
        self._post_inference_step = post_inference_step

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LearningGenaiRootCodeyCheckpoint':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LearningGenaiRootCodeyCheckpoint of this LearningGenaiRootCodeyCheckpoint.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def codey_truncator_metadata(self):
        """Gets the codey_truncator_metadata of this LearningGenaiRootCodeyCheckpoint.


        :return: The codey_truncator_metadata of this LearningGenaiRootCodeyCheckpoint.
        :rtype: LearningGenaiRootCodeyTruncatorMetadata
        """
        return self._codey_truncator_metadata

    @codey_truncator_metadata.setter
    def codey_truncator_metadata(self, codey_truncator_metadata):
        """Sets the codey_truncator_metadata of this LearningGenaiRootCodeyCheckpoint.


        :param codey_truncator_metadata: The codey_truncator_metadata of this LearningGenaiRootCodeyCheckpoint.
        :type codey_truncator_metadata: LearningGenaiRootCodeyTruncatorMetadata
        """

        self._codey_truncator_metadata = codey_truncator_metadata

    @property
    def current_sample(self):
        """Gets the current_sample of this LearningGenaiRootCodeyCheckpoint.

        Current state of the sample after truncator.

        :return: The current_sample of this LearningGenaiRootCodeyCheckpoint.
        :rtype: str
        """
        return self._current_sample

    @current_sample.setter
    def current_sample(self, current_sample):
        """Sets the current_sample of this LearningGenaiRootCodeyCheckpoint.

        Current state of the sample after truncator.

        :param current_sample: The current_sample of this LearningGenaiRootCodeyCheckpoint.
        :type current_sample: str
        """

        self._current_sample = current_sample

    @property
    def post_inference_step(self):
        """Gets the post_inference_step of this LearningGenaiRootCodeyCheckpoint.

        Postprocessor run that yielded this checkpoint.

        :return: The post_inference_step of this LearningGenaiRootCodeyCheckpoint.
        :rtype: str
        """
        return self._post_inference_step

    @post_inference_step.setter
    def post_inference_step(self, post_inference_step):
        """Sets the post_inference_step of this LearningGenaiRootCodeyCheckpoint.

        Postprocessor run that yielded this checkpoint.

        :param post_inference_step: The post_inference_step of this LearningGenaiRootCodeyCheckpoint.
        :type post_inference_step: str
        """
        allowed_values = ["STEP_POST_PROCESSING_STEP_UNSPECIFIED", "STEP_ORIGINAL_MODEL_OUTPUT", "STEP_MODEL_OUTPUT_DEDUPLICATION", "STEP_STOP_SEQUENCE_TRUNCATION", "STEP_HEURISTIC_TRUNCATION", "STEP_WALD_TRUNCATION", "STEP_WHITESPACE_TRUNCATION", "STEP_FINAL_DEDUPLICATION", "STEP_TOXICITY_CHECK", "STEP_RECITATION_CHECK", "STEP_RETURNED", "STEP_WALKBACK_CORRECTION", "STEP_SCORE_THRESHOLDING", "STEP_MODEL_CONFIG_STOP_SEQUENCE_TRUNCATION", "STEP_CUSTOM_STOP_SEQUENCE_TRUNCATION", "STEP_EXPECTED_SAMPLE_SIZE"]  # noqa: E501
        if post_inference_step not in allowed_values:
            raise ValueError(
                "Invalid value for `post_inference_step` ({0}), must be one of {1}"
                .format(post_inference_step, allowed_values)
            )

        self._post_inference_step = post_inference_step
