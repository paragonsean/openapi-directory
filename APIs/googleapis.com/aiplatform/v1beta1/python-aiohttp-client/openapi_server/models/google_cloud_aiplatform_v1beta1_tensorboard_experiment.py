# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleCloudAiplatformV1beta1TensorboardExperiment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, create_time: str=None, description: str=None, display_name: str=None, etag: str=None, labels: Dict[str, str]=None, name: str=None, source: str=None, update_time: str=None):
        """GoogleCloudAiplatformV1beta1TensorboardExperiment - a model defined in OpenAPI

        :param create_time: The create_time of this GoogleCloudAiplatformV1beta1TensorboardExperiment.
        :param description: The description of this GoogleCloudAiplatformV1beta1TensorboardExperiment.
        :param display_name: The display_name of this GoogleCloudAiplatformV1beta1TensorboardExperiment.
        :param etag: The etag of this GoogleCloudAiplatformV1beta1TensorboardExperiment.
        :param labels: The labels of this GoogleCloudAiplatformV1beta1TensorboardExperiment.
        :param name: The name of this GoogleCloudAiplatformV1beta1TensorboardExperiment.
        :param source: The source of this GoogleCloudAiplatformV1beta1TensorboardExperiment.
        :param update_time: The update_time of this GoogleCloudAiplatformV1beta1TensorboardExperiment.
        """
        self.openapi_types = {
            'create_time': str,
            'description': str,
            'display_name': str,
            'etag': str,
            'labels': Dict[str, str],
            'name': str,
            'source': str,
            'update_time': str
        }

        self.attribute_map = {
            'create_time': 'createTime',
            'description': 'description',
            'display_name': 'displayName',
            'etag': 'etag',
            'labels': 'labels',
            'name': 'name',
            'source': 'source',
            'update_time': 'updateTime'
        }

        self._create_time = create_time
        self._description = description
        self._display_name = display_name
        self._etag = etag
        self._labels = labels
        self._name = name
        self._source = source
        self._update_time = update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudAiplatformV1beta1TensorboardExperiment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudAiplatformV1beta1TensorboardExperiment of this GoogleCloudAiplatformV1beta1TensorboardExperiment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def create_time(self):
        """Gets the create_time of this GoogleCloudAiplatformV1beta1TensorboardExperiment.

        Output only. Timestamp when this TensorboardExperiment was created.

        :return: The create_time of this GoogleCloudAiplatformV1beta1TensorboardExperiment.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this GoogleCloudAiplatformV1beta1TensorboardExperiment.

        Output only. Timestamp when this TensorboardExperiment was created.

        :param create_time: The create_time of this GoogleCloudAiplatformV1beta1TensorboardExperiment.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def description(self):
        """Gets the description of this GoogleCloudAiplatformV1beta1TensorboardExperiment.

        Description of this TensorboardExperiment.

        :return: The description of this GoogleCloudAiplatformV1beta1TensorboardExperiment.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this GoogleCloudAiplatformV1beta1TensorboardExperiment.

        Description of this TensorboardExperiment.

        :param description: The description of this GoogleCloudAiplatformV1beta1TensorboardExperiment.
        :type description: str
        """

        self._description = description

    @property
    def display_name(self):
        """Gets the display_name of this GoogleCloudAiplatformV1beta1TensorboardExperiment.

        User provided name of this TensorboardExperiment.

        :return: The display_name of this GoogleCloudAiplatformV1beta1TensorboardExperiment.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this GoogleCloudAiplatformV1beta1TensorboardExperiment.

        User provided name of this TensorboardExperiment.

        :param display_name: The display_name of this GoogleCloudAiplatformV1beta1TensorboardExperiment.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def etag(self):
        """Gets the etag of this GoogleCloudAiplatformV1beta1TensorboardExperiment.

        Used to perform consistent read-modify-write updates. If not set, a blind \"overwrite\" update happens.

        :return: The etag of this GoogleCloudAiplatformV1beta1TensorboardExperiment.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this GoogleCloudAiplatformV1beta1TensorboardExperiment.

        Used to perform consistent read-modify-write updates. If not set, a blind \"overwrite\" update happens.

        :param etag: The etag of this GoogleCloudAiplatformV1beta1TensorboardExperiment.
        :type etag: str
        """

        self._etag = etag

    @property
    def labels(self):
        """Gets the labels of this GoogleCloudAiplatformV1beta1TensorboardExperiment.

        The labels with user-defined metadata to organize your TensorboardExperiment. Label keys and values cannot be longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. No more than 64 user labels can be associated with one Dataset (System labels are excluded). See https://goo.gl/xmQnxf for more information and examples of labels. System reserved label keys are prefixed with `aiplatform.googleapis.com/` and are immutable. The following system labels exist for each Dataset: * `aiplatform.googleapis.com/dataset_metadata_schema`: output only. Its value is the metadata_schema's title.

        :return: The labels of this GoogleCloudAiplatformV1beta1TensorboardExperiment.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this GoogleCloudAiplatformV1beta1TensorboardExperiment.

        The labels with user-defined metadata to organize your TensorboardExperiment. Label keys and values cannot be longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. No more than 64 user labels can be associated with one Dataset (System labels are excluded). See https://goo.gl/xmQnxf for more information and examples of labels. System reserved label keys are prefixed with `aiplatform.googleapis.com/` and are immutable. The following system labels exist for each Dataset: * `aiplatform.googleapis.com/dataset_metadata_schema`: output only. Its value is the metadata_schema's title.

        :param labels: The labels of this GoogleCloudAiplatformV1beta1TensorboardExperiment.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def name(self):
        """Gets the name of this GoogleCloudAiplatformV1beta1TensorboardExperiment.

        Output only. Name of the TensorboardExperiment. Format: `projects/{project}/locations/{location}/tensorboards/{tensorboard}/experiments/{experiment}`

        :return: The name of this GoogleCloudAiplatformV1beta1TensorboardExperiment.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GoogleCloudAiplatformV1beta1TensorboardExperiment.

        Output only. Name of the TensorboardExperiment. Format: `projects/{project}/locations/{location}/tensorboards/{tensorboard}/experiments/{experiment}`

        :param name: The name of this GoogleCloudAiplatformV1beta1TensorboardExperiment.
        :type name: str
        """

        self._name = name

    @property
    def source(self):
        """Gets the source of this GoogleCloudAiplatformV1beta1TensorboardExperiment.

        Immutable. Source of the TensorboardExperiment. Example: a custom training job.

        :return: The source of this GoogleCloudAiplatformV1beta1TensorboardExperiment.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this GoogleCloudAiplatformV1beta1TensorboardExperiment.

        Immutable. Source of the TensorboardExperiment. Example: a custom training job.

        :param source: The source of this GoogleCloudAiplatformV1beta1TensorboardExperiment.
        :type source: str
        """

        self._source = source

    @property
    def update_time(self):
        """Gets the update_time of this GoogleCloudAiplatformV1beta1TensorboardExperiment.

        Output only. Timestamp when this TensorboardExperiment was last updated.

        :return: The update_time of this GoogleCloudAiplatformV1beta1TensorboardExperiment.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this GoogleCloudAiplatformV1beta1TensorboardExperiment.

        Output only. Timestamp when this TensorboardExperiment was last updated.

        :param update_time: The update_time of this GoogleCloudAiplatformV1beta1TensorboardExperiment.
        :type update_time: str
        """

        self._update_time = update_time
