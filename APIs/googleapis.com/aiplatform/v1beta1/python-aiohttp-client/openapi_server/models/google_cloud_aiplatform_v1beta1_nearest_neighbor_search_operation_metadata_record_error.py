# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleCloudAiplatformV1beta1NearestNeighborSearchOperationMetadataRecordError(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, embedding_id: str=None, error_message: str=None, error_type: str=None, raw_record: str=None, source_gcs_uri: str=None):
        """GoogleCloudAiplatformV1beta1NearestNeighborSearchOperationMetadataRecordError - a model defined in OpenAPI

        :param embedding_id: The embedding_id of this GoogleCloudAiplatformV1beta1NearestNeighborSearchOperationMetadataRecordError.
        :param error_message: The error_message of this GoogleCloudAiplatformV1beta1NearestNeighborSearchOperationMetadataRecordError.
        :param error_type: The error_type of this GoogleCloudAiplatformV1beta1NearestNeighborSearchOperationMetadataRecordError.
        :param raw_record: The raw_record of this GoogleCloudAiplatformV1beta1NearestNeighborSearchOperationMetadataRecordError.
        :param source_gcs_uri: The source_gcs_uri of this GoogleCloudAiplatformV1beta1NearestNeighborSearchOperationMetadataRecordError.
        """
        self.openapi_types = {
            'embedding_id': str,
            'error_message': str,
            'error_type': str,
            'raw_record': str,
            'source_gcs_uri': str
        }

        self.attribute_map = {
            'embedding_id': 'embeddingId',
            'error_message': 'errorMessage',
            'error_type': 'errorType',
            'raw_record': 'rawRecord',
            'source_gcs_uri': 'sourceGcsUri'
        }

        self._embedding_id = embedding_id
        self._error_message = error_message
        self._error_type = error_type
        self._raw_record = raw_record
        self._source_gcs_uri = source_gcs_uri

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudAiplatformV1beta1NearestNeighborSearchOperationMetadataRecordError':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudAiplatformV1beta1NearestNeighborSearchOperationMetadataRecordError of this GoogleCloudAiplatformV1beta1NearestNeighborSearchOperationMetadataRecordError.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def embedding_id(self):
        """Gets the embedding_id of this GoogleCloudAiplatformV1beta1NearestNeighborSearchOperationMetadataRecordError.

        Empty if the embedding id is failed to parse.

        :return: The embedding_id of this GoogleCloudAiplatformV1beta1NearestNeighborSearchOperationMetadataRecordError.
        :rtype: str
        """
        return self._embedding_id

    @embedding_id.setter
    def embedding_id(self, embedding_id):
        """Sets the embedding_id of this GoogleCloudAiplatformV1beta1NearestNeighborSearchOperationMetadataRecordError.

        Empty if the embedding id is failed to parse.

        :param embedding_id: The embedding_id of this GoogleCloudAiplatformV1beta1NearestNeighborSearchOperationMetadataRecordError.
        :type embedding_id: str
        """

        self._embedding_id = embedding_id

    @property
    def error_message(self):
        """Gets the error_message of this GoogleCloudAiplatformV1beta1NearestNeighborSearchOperationMetadataRecordError.

        A human-readable message that is shown to the user to help them fix the error. Note that this message may change from time to time, your code should check against error_type as the source of truth.

        :return: The error_message of this GoogleCloudAiplatformV1beta1NearestNeighborSearchOperationMetadataRecordError.
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """Sets the error_message of this GoogleCloudAiplatformV1beta1NearestNeighborSearchOperationMetadataRecordError.

        A human-readable message that is shown to the user to help them fix the error. Note that this message may change from time to time, your code should check against error_type as the source of truth.

        :param error_message: The error_message of this GoogleCloudAiplatformV1beta1NearestNeighborSearchOperationMetadataRecordError.
        :type error_message: str
        """

        self._error_message = error_message

    @property
    def error_type(self):
        """Gets the error_type of this GoogleCloudAiplatformV1beta1NearestNeighborSearchOperationMetadataRecordError.

        The error type of this record.

        :return: The error_type of this GoogleCloudAiplatformV1beta1NearestNeighborSearchOperationMetadataRecordError.
        :rtype: str
        """
        return self._error_type

    @error_type.setter
    def error_type(self, error_type):
        """Sets the error_type of this GoogleCloudAiplatformV1beta1NearestNeighborSearchOperationMetadataRecordError.

        The error type of this record.

        :param error_type: The error_type of this GoogleCloudAiplatformV1beta1NearestNeighborSearchOperationMetadataRecordError.
        :type error_type: str
        """
        allowed_values = ["ERROR_TYPE_UNSPECIFIED", "EMPTY_LINE", "INVALID_JSON_SYNTAX", "INVALID_CSV_SYNTAX", "INVALID_AVRO_SYNTAX", "INVALID_EMBEDDING_ID", "EMBEDDING_SIZE_MISMATCH", "NAMESPACE_MISSING", "PARSING_ERROR", "DUPLICATE_NAMESPACE", "OP_IN_DATAPOINT", "MULTIPLE_VALUES", "INVALID_NUMERIC_VALUE", "INVALID_ENCODING"]  # noqa: E501
        if error_type not in allowed_values:
            raise ValueError(
                "Invalid value for `error_type` ({0}), must be one of {1}"
                .format(error_type, allowed_values)
            )

        self._error_type = error_type

    @property
    def raw_record(self):
        """Gets the raw_record of this GoogleCloudAiplatformV1beta1NearestNeighborSearchOperationMetadataRecordError.

        The original content of this record.

        :return: The raw_record of this GoogleCloudAiplatformV1beta1NearestNeighborSearchOperationMetadataRecordError.
        :rtype: str
        """
        return self._raw_record

    @raw_record.setter
    def raw_record(self, raw_record):
        """Sets the raw_record of this GoogleCloudAiplatformV1beta1NearestNeighborSearchOperationMetadataRecordError.

        The original content of this record.

        :param raw_record: The raw_record of this GoogleCloudAiplatformV1beta1NearestNeighborSearchOperationMetadataRecordError.
        :type raw_record: str
        """

        self._raw_record = raw_record

    @property
    def source_gcs_uri(self):
        """Gets the source_gcs_uri of this GoogleCloudAiplatformV1beta1NearestNeighborSearchOperationMetadataRecordError.

        Cloud Storage URI pointing to the original file in user's bucket.

        :return: The source_gcs_uri of this GoogleCloudAiplatformV1beta1NearestNeighborSearchOperationMetadataRecordError.
        :rtype: str
        """
        return self._source_gcs_uri

    @source_gcs_uri.setter
    def source_gcs_uri(self, source_gcs_uri):
        """Sets the source_gcs_uri of this GoogleCloudAiplatformV1beta1NearestNeighborSearchOperationMetadataRecordError.

        Cloud Storage URI pointing to the original file in user's bucket.

        :param source_gcs_uri: The source_gcs_uri of this GoogleCloudAiplatformV1beta1NearestNeighborSearchOperationMetadataRecordError.
        :type source_gcs_uri: str
        """

        self._source_gcs_uri = source_gcs_uri
