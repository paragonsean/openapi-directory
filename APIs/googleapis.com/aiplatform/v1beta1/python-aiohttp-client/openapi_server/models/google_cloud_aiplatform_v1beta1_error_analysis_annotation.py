# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_aiplatform_v1beta1_error_analysis_annotation_attributed_item import GoogleCloudAiplatformV1beta1ErrorAnalysisAnnotationAttributedItem
from openapi_server import util


class GoogleCloudAiplatformV1beta1ErrorAnalysisAnnotation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attributed_items: List[GoogleCloudAiplatformV1beta1ErrorAnalysisAnnotationAttributedItem]=None, outlier_score: float=None, outlier_threshold: float=None, query_type: str=None):
        """GoogleCloudAiplatformV1beta1ErrorAnalysisAnnotation - a model defined in OpenAPI

        :param attributed_items: The attributed_items of this GoogleCloudAiplatformV1beta1ErrorAnalysisAnnotation.
        :param outlier_score: The outlier_score of this GoogleCloudAiplatformV1beta1ErrorAnalysisAnnotation.
        :param outlier_threshold: The outlier_threshold of this GoogleCloudAiplatformV1beta1ErrorAnalysisAnnotation.
        :param query_type: The query_type of this GoogleCloudAiplatformV1beta1ErrorAnalysisAnnotation.
        """
        self.openapi_types = {
            'attributed_items': List[GoogleCloudAiplatformV1beta1ErrorAnalysisAnnotationAttributedItem],
            'outlier_score': float,
            'outlier_threshold': float,
            'query_type': str
        }

        self.attribute_map = {
            'attributed_items': 'attributedItems',
            'outlier_score': 'outlierScore',
            'outlier_threshold': 'outlierThreshold',
            'query_type': 'queryType'
        }

        self._attributed_items = attributed_items
        self._outlier_score = outlier_score
        self._outlier_threshold = outlier_threshold
        self._query_type = query_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudAiplatformV1beta1ErrorAnalysisAnnotation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudAiplatformV1beta1ErrorAnalysisAnnotation of this GoogleCloudAiplatformV1beta1ErrorAnalysisAnnotation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attributed_items(self):
        """Gets the attributed_items of this GoogleCloudAiplatformV1beta1ErrorAnalysisAnnotation.

        Attributed items for a given annotation, typically representing neighbors from the training sets constrained by the query type.

        :return: The attributed_items of this GoogleCloudAiplatformV1beta1ErrorAnalysisAnnotation.
        :rtype: List[GoogleCloudAiplatformV1beta1ErrorAnalysisAnnotationAttributedItem]
        """
        return self._attributed_items

    @attributed_items.setter
    def attributed_items(self, attributed_items):
        """Sets the attributed_items of this GoogleCloudAiplatformV1beta1ErrorAnalysisAnnotation.

        Attributed items for a given annotation, typically representing neighbors from the training sets constrained by the query type.

        :param attributed_items: The attributed_items of this GoogleCloudAiplatformV1beta1ErrorAnalysisAnnotation.
        :type attributed_items: List[GoogleCloudAiplatformV1beta1ErrorAnalysisAnnotationAttributedItem]
        """

        self._attributed_items = attributed_items

    @property
    def outlier_score(self):
        """Gets the outlier_score of this GoogleCloudAiplatformV1beta1ErrorAnalysisAnnotation.

        The outlier score of this annotated item. Usually defined as the min of all distances from attributed items.

        :return: The outlier_score of this GoogleCloudAiplatformV1beta1ErrorAnalysisAnnotation.
        :rtype: float
        """
        return self._outlier_score

    @outlier_score.setter
    def outlier_score(self, outlier_score):
        """Sets the outlier_score of this GoogleCloudAiplatformV1beta1ErrorAnalysisAnnotation.

        The outlier score of this annotated item. Usually defined as the min of all distances from attributed items.

        :param outlier_score: The outlier_score of this GoogleCloudAiplatformV1beta1ErrorAnalysisAnnotation.
        :type outlier_score: float
        """

        self._outlier_score = outlier_score

    @property
    def outlier_threshold(self):
        """Gets the outlier_threshold of this GoogleCloudAiplatformV1beta1ErrorAnalysisAnnotation.

        The threshold used to determine if this annotation is an outlier or not.

        :return: The outlier_threshold of this GoogleCloudAiplatformV1beta1ErrorAnalysisAnnotation.
        :rtype: float
        """
        return self._outlier_threshold

    @outlier_threshold.setter
    def outlier_threshold(self, outlier_threshold):
        """Sets the outlier_threshold of this GoogleCloudAiplatformV1beta1ErrorAnalysisAnnotation.

        The threshold used to determine if this annotation is an outlier or not.

        :param outlier_threshold: The outlier_threshold of this GoogleCloudAiplatformV1beta1ErrorAnalysisAnnotation.
        :type outlier_threshold: float
        """

        self._outlier_threshold = outlier_threshold

    @property
    def query_type(self):
        """Gets the query_type of this GoogleCloudAiplatformV1beta1ErrorAnalysisAnnotation.

        The query type used for finding the attributed items.

        :return: The query_type of this GoogleCloudAiplatformV1beta1ErrorAnalysisAnnotation.
        :rtype: str
        """
        return self._query_type

    @query_type.setter
    def query_type(self, query_type):
        """Sets the query_type of this GoogleCloudAiplatformV1beta1ErrorAnalysisAnnotation.

        The query type used for finding the attributed items.

        :param query_type: The query_type of this GoogleCloudAiplatformV1beta1ErrorAnalysisAnnotation.
        :type query_type: str
        """
        allowed_values = ["QUERY_TYPE_UNSPECIFIED", "ALL_SIMILAR", "SAME_CLASS_SIMILAR", "SAME_CLASS_DISSIMILAR"]  # noqa: E501
        if query_type not in allowed_values:
            raise ValueError(
                "Invalid value for `query_type` ({0}), must be one of {1}"
                .format(query_type, allowed_values)
            )

        self._query_type = query_type
