# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleCloudAiplatformV1beta1IndexDatapointNumericRestriction(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, namespace: str=None, op: str=None, value_double: float=None, value_float: float=None, value_int: str=None):
        """GoogleCloudAiplatformV1beta1IndexDatapointNumericRestriction - a model defined in OpenAPI

        :param namespace: The namespace of this GoogleCloudAiplatformV1beta1IndexDatapointNumericRestriction.
        :param op: The op of this GoogleCloudAiplatformV1beta1IndexDatapointNumericRestriction.
        :param value_double: The value_double of this GoogleCloudAiplatformV1beta1IndexDatapointNumericRestriction.
        :param value_float: The value_float of this GoogleCloudAiplatformV1beta1IndexDatapointNumericRestriction.
        :param value_int: The value_int of this GoogleCloudAiplatformV1beta1IndexDatapointNumericRestriction.
        """
        self.openapi_types = {
            'namespace': str,
            'op': str,
            'value_double': float,
            'value_float': float,
            'value_int': str
        }

        self.attribute_map = {
            'namespace': 'namespace',
            'op': 'op',
            'value_double': 'valueDouble',
            'value_float': 'valueFloat',
            'value_int': 'valueInt'
        }

        self._namespace = namespace
        self._op = op
        self._value_double = value_double
        self._value_float = value_float
        self._value_int = value_int

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudAiplatformV1beta1IndexDatapointNumericRestriction':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudAiplatformV1beta1IndexDatapointNumericRestriction of this GoogleCloudAiplatformV1beta1IndexDatapointNumericRestriction.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def namespace(self):
        """Gets the namespace of this GoogleCloudAiplatformV1beta1IndexDatapointNumericRestriction.

        The namespace of this restriction. e.g.: cost.

        :return: The namespace of this GoogleCloudAiplatformV1beta1IndexDatapointNumericRestriction.
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this GoogleCloudAiplatformV1beta1IndexDatapointNumericRestriction.

        The namespace of this restriction. e.g.: cost.

        :param namespace: The namespace of this GoogleCloudAiplatformV1beta1IndexDatapointNumericRestriction.
        :type namespace: str
        """

        self._namespace = namespace

    @property
    def op(self):
        """Gets the op of this GoogleCloudAiplatformV1beta1IndexDatapointNumericRestriction.

        This MUST be specified for queries and must NOT be specified for datapoints.

        :return: The op of this GoogleCloudAiplatformV1beta1IndexDatapointNumericRestriction.
        :rtype: str
        """
        return self._op

    @op.setter
    def op(self, op):
        """Sets the op of this GoogleCloudAiplatformV1beta1IndexDatapointNumericRestriction.

        This MUST be specified for queries and must NOT be specified for datapoints.

        :param op: The op of this GoogleCloudAiplatformV1beta1IndexDatapointNumericRestriction.
        :type op: str
        """
        allowed_values = ["OPERATOR_UNSPECIFIED", "LESS", "LESS_EQUAL", "EQUAL", "GREATER_EQUAL", "GREATER", "NOT_EQUAL"]  # noqa: E501
        if op not in allowed_values:
            raise ValueError(
                "Invalid value for `op` ({0}), must be one of {1}"
                .format(op, allowed_values)
            )

        self._op = op

    @property
    def value_double(self):
        """Gets the value_double of this GoogleCloudAiplatformV1beta1IndexDatapointNumericRestriction.

        Represents 64 bit float.

        :return: The value_double of this GoogleCloudAiplatformV1beta1IndexDatapointNumericRestriction.
        :rtype: float
        """
        return self._value_double

    @value_double.setter
    def value_double(self, value_double):
        """Sets the value_double of this GoogleCloudAiplatformV1beta1IndexDatapointNumericRestriction.

        Represents 64 bit float.

        :param value_double: The value_double of this GoogleCloudAiplatformV1beta1IndexDatapointNumericRestriction.
        :type value_double: float
        """

        self._value_double = value_double

    @property
    def value_float(self):
        """Gets the value_float of this GoogleCloudAiplatformV1beta1IndexDatapointNumericRestriction.

        Represents 32 bit float.

        :return: The value_float of this GoogleCloudAiplatformV1beta1IndexDatapointNumericRestriction.
        :rtype: float
        """
        return self._value_float

    @value_float.setter
    def value_float(self, value_float):
        """Sets the value_float of this GoogleCloudAiplatformV1beta1IndexDatapointNumericRestriction.

        Represents 32 bit float.

        :param value_float: The value_float of this GoogleCloudAiplatformV1beta1IndexDatapointNumericRestriction.
        :type value_float: float
        """

        self._value_float = value_float

    @property
    def value_int(self):
        """Gets the value_int of this GoogleCloudAiplatformV1beta1IndexDatapointNumericRestriction.

        Represents 64 bit integer.

        :return: The value_int of this GoogleCloudAiplatformV1beta1IndexDatapointNumericRestriction.
        :rtype: str
        """
        return self._value_int

    @value_int.setter
    def value_int(self, value_int):
        """Sets the value_int of this GoogleCloudAiplatformV1beta1IndexDatapointNumericRestriction.

        Represents 64 bit integer.

        :param value_int: The value_int of this GoogleCloudAiplatformV1beta1IndexDatapointNumericRestriction.
        :type value_int: str
        """

        self._value_int = value_int
