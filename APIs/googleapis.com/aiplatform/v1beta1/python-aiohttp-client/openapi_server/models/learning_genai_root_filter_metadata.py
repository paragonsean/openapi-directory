# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.learning_genai_root_filter_metadata_filter_debug_info import LearningGenaiRootFilterMetadataFilterDebugInfo
from openapi_server import util


class LearningGenaiRootFilterMetadata(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, confidence: str=None, debug_info: LearningGenaiRootFilterMetadataFilterDebugInfo=None, fallback: str=None, info: str=None, name: str=None, reason: str=None, text: str=None):
        """LearningGenaiRootFilterMetadata - a model defined in OpenAPI

        :param confidence: The confidence of this LearningGenaiRootFilterMetadata.
        :param debug_info: The debug_info of this LearningGenaiRootFilterMetadata.
        :param fallback: The fallback of this LearningGenaiRootFilterMetadata.
        :param info: The info of this LearningGenaiRootFilterMetadata.
        :param name: The name of this LearningGenaiRootFilterMetadata.
        :param reason: The reason of this LearningGenaiRootFilterMetadata.
        :param text: The text of this LearningGenaiRootFilterMetadata.
        """
        self.openapi_types = {
            'confidence': str,
            'debug_info': LearningGenaiRootFilterMetadataFilterDebugInfo,
            'fallback': str,
            'info': str,
            'name': str,
            'reason': str,
            'text': str
        }

        self.attribute_map = {
            'confidence': 'confidence',
            'debug_info': 'debugInfo',
            'fallback': 'fallback',
            'info': 'info',
            'name': 'name',
            'reason': 'reason',
            'text': 'text'
        }

        self._confidence = confidence
        self._debug_info = debug_info
        self._fallback = fallback
        self._info = info
        self._name = name
        self._reason = reason
        self._text = text

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LearningGenaiRootFilterMetadata':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LearningGenaiRootFilterMetadata of this LearningGenaiRootFilterMetadata.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def confidence(self):
        """Gets the confidence of this LearningGenaiRootFilterMetadata.

        Filter confidence.

        :return: The confidence of this LearningGenaiRootFilterMetadata.
        :rtype: str
        """
        return self._confidence

    @confidence.setter
    def confidence(self, confidence):
        """Sets the confidence of this LearningGenaiRootFilterMetadata.

        Filter confidence.

        :param confidence: The confidence of this LearningGenaiRootFilterMetadata.
        :type confidence: str
        """
        allowed_values = ["FILTER_CONFIDENCE_UNKNOWN", "FILTER_CONFIDENCE_VERY_LOW", "FILTER_CONFIDENCE_LOW", "FILTER_CONFIDENCE_MEDIUM", "FILTER_CONFIDENCE_HIGH", "FILTER_CONFIDENCE_VERY_HIGH"]  # noqa: E501
        if confidence not in allowed_values:
            raise ValueError(
                "Invalid value for `confidence` ({0}), must be one of {1}"
                .format(confidence, allowed_values)
            )

        self._confidence = confidence

    @property
    def debug_info(self):
        """Gets the debug_info of this LearningGenaiRootFilterMetadata.


        :return: The debug_info of this LearningGenaiRootFilterMetadata.
        :rtype: LearningGenaiRootFilterMetadataFilterDebugInfo
        """
        return self._debug_info

    @debug_info.setter
    def debug_info(self, debug_info):
        """Sets the debug_info of this LearningGenaiRootFilterMetadata.


        :param debug_info: The debug_info of this LearningGenaiRootFilterMetadata.
        :type debug_info: LearningGenaiRootFilterMetadataFilterDebugInfo
        """

        self._debug_info = debug_info

    @property
    def fallback(self):
        """Gets the fallback of this LearningGenaiRootFilterMetadata.

        A fallback message chosen by the applied filter.

        :return: The fallback of this LearningGenaiRootFilterMetadata.
        :rtype: str
        """
        return self._fallback

    @fallback.setter
    def fallback(self, fallback):
        """Sets the fallback of this LearningGenaiRootFilterMetadata.

        A fallback message chosen by the applied filter.

        :param fallback: The fallback of this LearningGenaiRootFilterMetadata.
        :type fallback: str
        """

        self._fallback = fallback

    @property
    def info(self):
        """Gets the info of this LearningGenaiRootFilterMetadata.

        Additional info for the filter.

        :return: The info of this LearningGenaiRootFilterMetadata.
        :rtype: str
        """
        return self._info

    @info.setter
    def info(self, info):
        """Sets the info of this LearningGenaiRootFilterMetadata.

        Additional info for the filter.

        :param info: The info of this LearningGenaiRootFilterMetadata.
        :type info: str
        """

        self._info = info

    @property
    def name(self):
        """Gets the name of this LearningGenaiRootFilterMetadata.

        Name of the filter that triggered.

        :return: The name of this LearningGenaiRootFilterMetadata.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this LearningGenaiRootFilterMetadata.

        Name of the filter that triggered.

        :param name: The name of this LearningGenaiRootFilterMetadata.
        :type name: str
        """

        self._name = name

    @property
    def reason(self):
        """Gets the reason of this LearningGenaiRootFilterMetadata.

        Filter reason.

        :return: The reason of this LearningGenaiRootFilterMetadata.
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this LearningGenaiRootFilterMetadata.

        Filter reason.

        :param reason: The reason of this LearningGenaiRootFilterMetadata.
        :type reason: str
        """
        allowed_values = ["FILTER_REASON_UNKNOWN", "FILTER_REASON_NOT_FILTERED", "FILTER_REASON_SENSITIVE", "FILTER_REASON_RECITATION", "FILTER_REASON_LANGUAGE", "FILTER_REASON_TAKEDOWN", "FILTER_REASON_CLASSIFIER", "FILTER_REASON_EMPTY_RESPONSE", "FILTER_REASON_SIMILARITY_TAKEDOWN", "FILTER_REASON_UNSAFE", "FILTER_REASON_PAIRWISE_CLASSIFIER", "FILTER_REASON_CODEY", "FILTER_REASON_URL", "FILTER_REASON_EMAIL", "FILTER_REASON_SAFETY_CAT", "FILTER_REASON_REQUEST_RESPONSE_TAKEDOWN", "FILTER_REASON_RAI_PQC", "FILTER_REASON_ATLAS", "FILTER_REASON_RAI_CSAM", "FILTER_REASON_RAI_FRINGE", "FILTER_REASON_RAI_SPII", "FILTER_REASON_RAI_IMAGE_VIOLENCE", "FILTER_REASON_RAI_IMAGE_PORN", "FILTER_REASON_RAI_IMAGE_CSAM", "FILTER_REASON_RAI_IMAGE_PEDO", "FILTER_REASON_RAI_VIDEO_FRAME_VIOLENCE", "FILTER_REASON_RAI_VIDEO_FRAME_PORN", "FILTER_REASON_RAI_VIDEO_FRAME_CSAM", "FILTER_REASON_RAI_VIDEO_FRAME_PEDO", "FILTER_REASON_RAI_CONTEXTUAL_DANGEROUS", "FILTER_REASON_RAI_GRAIL_TEXT", "FILTER_REASON_RAI_GRAIL_IMAGE", "FILTER_REASON_RAI_SAFETYCAT", "FILTER_REASON_TOXICITY", "FILTER_REASON_ATLAS_PRICING", "FILTER_REASON_ATLAS_BILLING", "FILTER_REASON_ATLAS_NON_ENGLISH_QUESTION", "FILTER_REASON_ATLAS_NOT_RELATED_TO_GCP", "FILTER_REASON_ATLAS_AWS_AZURE_RELATED"]  # noqa: E501
        if reason not in allowed_values:
            raise ValueError(
                "Invalid value for `reason` ({0}), must be one of {1}"
                .format(reason, allowed_values)
            )

        self._reason = reason

    @property
    def text(self):
        """Gets the text of this LearningGenaiRootFilterMetadata.

        The input query or generated response that is getting filtered.

        :return: The text of this LearningGenaiRootFilterMetadata.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this LearningGenaiRootFilterMetadata.

        The input query or generated response that is getting filtered.

        :param text: The text of this LearningGenaiRootFilterMetadata.
        :type text: str
        """

        self._text = text
