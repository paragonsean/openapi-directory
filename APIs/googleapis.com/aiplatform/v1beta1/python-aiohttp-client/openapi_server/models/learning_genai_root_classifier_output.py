# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.learning_genai_root_classifier_state import LearningGenaiRootClassifierState
from openapi_server.models.learning_genai_root_rule_output import LearningGenaiRootRuleOutput
from openapi_server import util


class LearningGenaiRootClassifierOutput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, rule_output: LearningGenaiRootRuleOutput=None, rule_outputs: List[LearningGenaiRootRuleOutput]=None, state: LearningGenaiRootClassifierState=None):
        """LearningGenaiRootClassifierOutput - a model defined in OpenAPI

        :param rule_output: The rule_output of this LearningGenaiRootClassifierOutput.
        :param rule_outputs: The rule_outputs of this LearningGenaiRootClassifierOutput.
        :param state: The state of this LearningGenaiRootClassifierOutput.
        """
        self.openapi_types = {
            'rule_output': LearningGenaiRootRuleOutput,
            'rule_outputs': List[LearningGenaiRootRuleOutput],
            'state': LearningGenaiRootClassifierState
        }

        self.attribute_map = {
            'rule_output': 'ruleOutput',
            'rule_outputs': 'ruleOutputs',
            'state': 'state'
        }

        self._rule_output = rule_output
        self._rule_outputs = rule_outputs
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LearningGenaiRootClassifierOutput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LearningGenaiRootClassifierOutput of this LearningGenaiRootClassifierOutput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def rule_output(self):
        """Gets the rule_output of this LearningGenaiRootClassifierOutput.


        :return: The rule_output of this LearningGenaiRootClassifierOutput.
        :rtype: LearningGenaiRootRuleOutput
        """
        return self._rule_output

    @rule_output.setter
    def rule_output(self, rule_output):
        """Sets the rule_output of this LearningGenaiRootClassifierOutput.


        :param rule_output: The rule_output of this LearningGenaiRootClassifierOutput.
        :type rule_output: LearningGenaiRootRuleOutput
        """

        self._rule_output = rule_output

    @property
    def rule_outputs(self):
        """Gets the rule_outputs of this LearningGenaiRootClassifierOutput.

        outputs of all matching rule.

        :return: The rule_outputs of this LearningGenaiRootClassifierOutput.
        :rtype: List[LearningGenaiRootRuleOutput]
        """
        return self._rule_outputs

    @rule_outputs.setter
    def rule_outputs(self, rule_outputs):
        """Sets the rule_outputs of this LearningGenaiRootClassifierOutput.

        outputs of all matching rule.

        :param rule_outputs: The rule_outputs of this LearningGenaiRootClassifierOutput.
        :type rule_outputs: List[LearningGenaiRootRuleOutput]
        """

        self._rule_outputs = rule_outputs

    @property
    def state(self):
        """Gets the state of this LearningGenaiRootClassifierOutput.


        :return: The state of this LearningGenaiRootClassifierOutput.
        :rtype: LearningGenaiRootClassifierState
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this LearningGenaiRootClassifierOutput.


        :param state: The state of this LearningGenaiRootClassifierOutput.
        :type state: LearningGenaiRootClassifierState
        """

        self._state = state
