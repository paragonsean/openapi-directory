# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleCloudAiplatformV1beta1GenerationConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, candidate_count: int=None, max_output_tokens: int=None, stop_sequences: List[str]=None, temperature: float=None, top_k: float=None, top_p: float=None):
        """GoogleCloudAiplatformV1beta1GenerationConfig - a model defined in OpenAPI

        :param candidate_count: The candidate_count of this GoogleCloudAiplatformV1beta1GenerationConfig.
        :param max_output_tokens: The max_output_tokens of this GoogleCloudAiplatformV1beta1GenerationConfig.
        :param stop_sequences: The stop_sequences of this GoogleCloudAiplatformV1beta1GenerationConfig.
        :param temperature: The temperature of this GoogleCloudAiplatformV1beta1GenerationConfig.
        :param top_k: The top_k of this GoogleCloudAiplatformV1beta1GenerationConfig.
        :param top_p: The top_p of this GoogleCloudAiplatformV1beta1GenerationConfig.
        """
        self.openapi_types = {
            'candidate_count': int,
            'max_output_tokens': int,
            'stop_sequences': List[str],
            'temperature': float,
            'top_k': float,
            'top_p': float
        }

        self.attribute_map = {
            'candidate_count': 'candidateCount',
            'max_output_tokens': 'maxOutputTokens',
            'stop_sequences': 'stopSequences',
            'temperature': 'temperature',
            'top_k': 'topK',
            'top_p': 'topP'
        }

        self._candidate_count = candidate_count
        self._max_output_tokens = max_output_tokens
        self._stop_sequences = stop_sequences
        self._temperature = temperature
        self._top_k = top_k
        self._top_p = top_p

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudAiplatformV1beta1GenerationConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudAiplatformV1beta1GenerationConfig of this GoogleCloudAiplatformV1beta1GenerationConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def candidate_count(self):
        """Gets the candidate_count of this GoogleCloudAiplatformV1beta1GenerationConfig.

        Optional. Number of candidates to generate.

        :return: The candidate_count of this GoogleCloudAiplatformV1beta1GenerationConfig.
        :rtype: int
        """
        return self._candidate_count

    @candidate_count.setter
    def candidate_count(self, candidate_count):
        """Sets the candidate_count of this GoogleCloudAiplatformV1beta1GenerationConfig.

        Optional. Number of candidates to generate.

        :param candidate_count: The candidate_count of this GoogleCloudAiplatformV1beta1GenerationConfig.
        :type candidate_count: int
        """

        self._candidate_count = candidate_count

    @property
    def max_output_tokens(self):
        """Gets the max_output_tokens of this GoogleCloudAiplatformV1beta1GenerationConfig.

        Optional. The maximum number of output tokens to generate per message.

        :return: The max_output_tokens of this GoogleCloudAiplatformV1beta1GenerationConfig.
        :rtype: int
        """
        return self._max_output_tokens

    @max_output_tokens.setter
    def max_output_tokens(self, max_output_tokens):
        """Sets the max_output_tokens of this GoogleCloudAiplatformV1beta1GenerationConfig.

        Optional. The maximum number of output tokens to generate per message.

        :param max_output_tokens: The max_output_tokens of this GoogleCloudAiplatformV1beta1GenerationConfig.
        :type max_output_tokens: int
        """

        self._max_output_tokens = max_output_tokens

    @property
    def stop_sequences(self):
        """Gets the stop_sequences of this GoogleCloudAiplatformV1beta1GenerationConfig.

        Optional. Stop sequences.

        :return: The stop_sequences of this GoogleCloudAiplatformV1beta1GenerationConfig.
        :rtype: List[str]
        """
        return self._stop_sequences

    @stop_sequences.setter
    def stop_sequences(self, stop_sequences):
        """Sets the stop_sequences of this GoogleCloudAiplatformV1beta1GenerationConfig.

        Optional. Stop sequences.

        :param stop_sequences: The stop_sequences of this GoogleCloudAiplatformV1beta1GenerationConfig.
        :type stop_sequences: List[str]
        """

        self._stop_sequences = stop_sequences

    @property
    def temperature(self):
        """Gets the temperature of this GoogleCloudAiplatformV1beta1GenerationConfig.

        Optional. Controls the randomness of predictions.

        :return: The temperature of this GoogleCloudAiplatformV1beta1GenerationConfig.
        :rtype: float
        """
        return self._temperature

    @temperature.setter
    def temperature(self, temperature):
        """Sets the temperature of this GoogleCloudAiplatformV1beta1GenerationConfig.

        Optional. Controls the randomness of predictions.

        :param temperature: The temperature of this GoogleCloudAiplatformV1beta1GenerationConfig.
        :type temperature: float
        """

        self._temperature = temperature

    @property
    def top_k(self):
        """Gets the top_k of this GoogleCloudAiplatformV1beta1GenerationConfig.

        Optional. If specified, top-k sampling will be used.

        :return: The top_k of this GoogleCloudAiplatformV1beta1GenerationConfig.
        :rtype: float
        """
        return self._top_k

    @top_k.setter
    def top_k(self, top_k):
        """Sets the top_k of this GoogleCloudAiplatformV1beta1GenerationConfig.

        Optional. If specified, top-k sampling will be used.

        :param top_k: The top_k of this GoogleCloudAiplatformV1beta1GenerationConfig.
        :type top_k: float
        """

        self._top_k = top_k

    @property
    def top_p(self):
        """Gets the top_p of this GoogleCloudAiplatformV1beta1GenerationConfig.

        Optional. If specified, nucleus sampling will be used.

        :return: The top_p of this GoogleCloudAiplatformV1beta1GenerationConfig.
        :rtype: float
        """
        return self._top_p

    @top_p.setter
    def top_p(self, top_p):
        """Sets the top_p of this GoogleCloudAiplatformV1beta1GenerationConfig.

        Optional. If specified, nucleus sampling will be used.

        :param top_p: The top_p of this GoogleCloudAiplatformV1beta1GenerationConfig.
        :type top_p: float
        """

        self._top_p = top_p
