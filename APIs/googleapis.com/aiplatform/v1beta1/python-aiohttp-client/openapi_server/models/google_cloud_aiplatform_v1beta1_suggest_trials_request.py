# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_aiplatform_v1beta1_trial_context import GoogleCloudAiplatformV1beta1TrialContext
from openapi_server import util


class GoogleCloudAiplatformV1beta1SuggestTrialsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, client_id: str=None, contexts: List[GoogleCloudAiplatformV1beta1TrialContext]=None, suggestion_count: int=None):
        """GoogleCloudAiplatformV1beta1SuggestTrialsRequest - a model defined in OpenAPI

        :param client_id: The client_id of this GoogleCloudAiplatformV1beta1SuggestTrialsRequest.
        :param contexts: The contexts of this GoogleCloudAiplatformV1beta1SuggestTrialsRequest.
        :param suggestion_count: The suggestion_count of this GoogleCloudAiplatformV1beta1SuggestTrialsRequest.
        """
        self.openapi_types = {
            'client_id': str,
            'contexts': List[GoogleCloudAiplatformV1beta1TrialContext],
            'suggestion_count': int
        }

        self.attribute_map = {
            'client_id': 'clientId',
            'contexts': 'contexts',
            'suggestion_count': 'suggestionCount'
        }

        self._client_id = client_id
        self._contexts = contexts
        self._suggestion_count = suggestion_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudAiplatformV1beta1SuggestTrialsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudAiplatformV1beta1SuggestTrialsRequest of this GoogleCloudAiplatformV1beta1SuggestTrialsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def client_id(self):
        """Gets the client_id of this GoogleCloudAiplatformV1beta1SuggestTrialsRequest.

        Required. The identifier of the client that is requesting the suggestion. If multiple SuggestTrialsRequests have the same `client_id`, the service will return the identical suggested Trial if the Trial is pending, and provide a new Trial if the last suggested Trial was completed.

        :return: The client_id of this GoogleCloudAiplatformV1beta1SuggestTrialsRequest.
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this GoogleCloudAiplatformV1beta1SuggestTrialsRequest.

        Required. The identifier of the client that is requesting the suggestion. If multiple SuggestTrialsRequests have the same `client_id`, the service will return the identical suggested Trial if the Trial is pending, and provide a new Trial if the last suggested Trial was completed.

        :param client_id: The client_id of this GoogleCloudAiplatformV1beta1SuggestTrialsRequest.
        :type client_id: str
        """

        self._client_id = client_id

    @property
    def contexts(self):
        """Gets the contexts of this GoogleCloudAiplatformV1beta1SuggestTrialsRequest.

        Optional. This allows you to specify the \"context\" for a Trial; a context is a slice (a subspace) of the search space. Typical uses for contexts: 1) You are using Vizier to tune a server for best performance, but there's a strong weekly cycle. The context specifies the day-of-week. This allows Tuesday to generalize from Wednesday without assuming that everything is identical. 2) Imagine you're optimizing some medical treatment for people. As they walk in the door, you know certain facts about them (e.g. sex, weight, height, blood-pressure). Put that information in the context, and Vizier will adapt its suggestions to the patient. 3) You want to do a fair A/B test efficiently. Specify the \"A\" and \"B\" conditions as contexts, and Vizier will generalize between \"A\" and \"B\" conditions. If they are similar, this will allow Vizier to converge to the optimum faster than if \"A\" and \"B\" were separate Studies. NOTE: You can also enter contexts as REQUESTED Trials, e.g. via the CreateTrial() RPC; that's the asynchronous option where you don't need a close association between contexts and suggestions. NOTE: All the Parameters you set in a context MUST be defined in the Study. NOTE: You must supply 0 or $suggestion_count contexts. If you don't supply any contexts, Vizier will make suggestions from the full search space specified in the StudySpec; if you supply a full set of context, each suggestion will match the corresponding context. NOTE: A Context with no features set matches anything, and allows suggestions from the full search space. NOTE: Contexts MUST lie within the search space specified in the StudySpec. It's an error if they don't. NOTE: Contexts preferentially match ACTIVE then REQUESTED trials before new suggestions are generated. NOTE: Generation of suggestions involves a match between a Context and (optionally) a REQUESTED trial; if that match is not fully specified, a suggestion will be geneated in the merged subspace.

        :return: The contexts of this GoogleCloudAiplatformV1beta1SuggestTrialsRequest.
        :rtype: List[GoogleCloudAiplatformV1beta1TrialContext]
        """
        return self._contexts

    @contexts.setter
    def contexts(self, contexts):
        """Sets the contexts of this GoogleCloudAiplatformV1beta1SuggestTrialsRequest.

        Optional. This allows you to specify the \"context\" for a Trial; a context is a slice (a subspace) of the search space. Typical uses for contexts: 1) You are using Vizier to tune a server for best performance, but there's a strong weekly cycle. The context specifies the day-of-week. This allows Tuesday to generalize from Wednesday without assuming that everything is identical. 2) Imagine you're optimizing some medical treatment for people. As they walk in the door, you know certain facts about them (e.g. sex, weight, height, blood-pressure). Put that information in the context, and Vizier will adapt its suggestions to the patient. 3) You want to do a fair A/B test efficiently. Specify the \"A\" and \"B\" conditions as contexts, and Vizier will generalize between \"A\" and \"B\" conditions. If they are similar, this will allow Vizier to converge to the optimum faster than if \"A\" and \"B\" were separate Studies. NOTE: You can also enter contexts as REQUESTED Trials, e.g. via the CreateTrial() RPC; that's the asynchronous option where you don't need a close association between contexts and suggestions. NOTE: All the Parameters you set in a context MUST be defined in the Study. NOTE: You must supply 0 or $suggestion_count contexts. If you don't supply any contexts, Vizier will make suggestions from the full search space specified in the StudySpec; if you supply a full set of context, each suggestion will match the corresponding context. NOTE: A Context with no features set matches anything, and allows suggestions from the full search space. NOTE: Contexts MUST lie within the search space specified in the StudySpec. It's an error if they don't. NOTE: Contexts preferentially match ACTIVE then REQUESTED trials before new suggestions are generated. NOTE: Generation of suggestions involves a match between a Context and (optionally) a REQUESTED trial; if that match is not fully specified, a suggestion will be geneated in the merged subspace.

        :param contexts: The contexts of this GoogleCloudAiplatformV1beta1SuggestTrialsRequest.
        :type contexts: List[GoogleCloudAiplatformV1beta1TrialContext]
        """

        self._contexts = contexts

    @property
    def suggestion_count(self):
        """Gets the suggestion_count of this GoogleCloudAiplatformV1beta1SuggestTrialsRequest.

        Required. The number of suggestions requested. It must be positive.

        :return: The suggestion_count of this GoogleCloudAiplatformV1beta1SuggestTrialsRequest.
        :rtype: int
        """
        return self._suggestion_count

    @suggestion_count.setter
    def suggestion_count(self, suggestion_count):
        """Sets the suggestion_count of this GoogleCloudAiplatformV1beta1SuggestTrialsRequest.

        Required. The number of suggestions requested. It must be positive.

        :param suggestion_count: The suggestion_count of this GoogleCloudAiplatformV1beta1SuggestTrialsRequest.
        :type suggestion_count: int
        """

        self._suggestion_count = suggestion_count
