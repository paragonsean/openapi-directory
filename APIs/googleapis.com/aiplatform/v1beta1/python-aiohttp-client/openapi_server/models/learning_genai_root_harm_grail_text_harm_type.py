# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LearningGenaiRootHarmGrailTextHarmType(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, harm_type: List[str]=None):
        """LearningGenaiRootHarmGrailTextHarmType - a model defined in OpenAPI

        :param harm_type: The harm_type of this LearningGenaiRootHarmGrailTextHarmType.
        """
        self.openapi_types = {
            'harm_type': List[str]
        }

        self.attribute_map = {
            'harm_type': 'harmType'
        }

        self._harm_type = harm_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LearningGenaiRootHarmGrailTextHarmType':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LearningGenaiRootHarmGrailTextHarmType of this LearningGenaiRootHarmGrailTextHarmType.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def harm_type(self):
        """Gets the harm_type of this LearningGenaiRootHarmGrailTextHarmType.


        :return: The harm_type of this LearningGenaiRootHarmGrailTextHarmType.
        :rtype: List[str]
        """
        return self._harm_type

    @harm_type.setter
    def harm_type(self, harm_type):
        """Sets the harm_type of this LearningGenaiRootHarmGrailTextHarmType.


        :param harm_type: The harm_type of this LearningGenaiRootHarmGrailTextHarmType.
        :type harm_type: List[str]
        """
        allowed_values = ["HARM_TYPE_UNSPECIFIED", "HARM_TYPE_HATE", "HARM_TYPE_TOXICITY", "HARM_TYPE_VIOLENCE", "HARM_TYPE_CSAI", "HARM_TYPE_SEXUAL", "HARM_TYPE_FRINGE", "HARM_TYPE_POLITICAL", "HARM_TYPE_MEMORIZATION", "HARM_TYPE_SPII", "HARM_TYPE_NEW_DANGEROUS", "HARM_TYPE_MEDICAL", "HARM_TYPE_HARASSMENT"]  # noqa: E501
        if not set(harm_type).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `harm_type` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(harm_type) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._harm_type = harm_type
