# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleCloudAiplatformV1beta1Context(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, create_time: str=None, description: str=None, display_name: str=None, etag: str=None, labels: Dict[str, str]=None, metadata: Dict[str, object]=None, name: str=None, parent_contexts: List[str]=None, schema_title: str=None, schema_version: str=None, update_time: str=None):
        """GoogleCloudAiplatformV1beta1Context - a model defined in OpenAPI

        :param create_time: The create_time of this GoogleCloudAiplatformV1beta1Context.
        :param description: The description of this GoogleCloudAiplatformV1beta1Context.
        :param display_name: The display_name of this GoogleCloudAiplatformV1beta1Context.
        :param etag: The etag of this GoogleCloudAiplatformV1beta1Context.
        :param labels: The labels of this GoogleCloudAiplatformV1beta1Context.
        :param metadata: The metadata of this GoogleCloudAiplatformV1beta1Context.
        :param name: The name of this GoogleCloudAiplatformV1beta1Context.
        :param parent_contexts: The parent_contexts of this GoogleCloudAiplatformV1beta1Context.
        :param schema_title: The schema_title of this GoogleCloudAiplatformV1beta1Context.
        :param schema_version: The schema_version of this GoogleCloudAiplatformV1beta1Context.
        :param update_time: The update_time of this GoogleCloudAiplatformV1beta1Context.
        """
        self.openapi_types = {
            'create_time': str,
            'description': str,
            'display_name': str,
            'etag': str,
            'labels': Dict[str, str],
            'metadata': Dict[str, object],
            'name': str,
            'parent_contexts': List[str],
            'schema_title': str,
            'schema_version': str,
            'update_time': str
        }

        self.attribute_map = {
            'create_time': 'createTime',
            'description': 'description',
            'display_name': 'displayName',
            'etag': 'etag',
            'labels': 'labels',
            'metadata': 'metadata',
            'name': 'name',
            'parent_contexts': 'parentContexts',
            'schema_title': 'schemaTitle',
            'schema_version': 'schemaVersion',
            'update_time': 'updateTime'
        }

        self._create_time = create_time
        self._description = description
        self._display_name = display_name
        self._etag = etag
        self._labels = labels
        self._metadata = metadata
        self._name = name
        self._parent_contexts = parent_contexts
        self._schema_title = schema_title
        self._schema_version = schema_version
        self._update_time = update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudAiplatformV1beta1Context':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudAiplatformV1beta1Context of this GoogleCloudAiplatformV1beta1Context.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def create_time(self):
        """Gets the create_time of this GoogleCloudAiplatformV1beta1Context.

        Output only. Timestamp when this Context was created.

        :return: The create_time of this GoogleCloudAiplatformV1beta1Context.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this GoogleCloudAiplatformV1beta1Context.

        Output only. Timestamp when this Context was created.

        :param create_time: The create_time of this GoogleCloudAiplatformV1beta1Context.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def description(self):
        """Gets the description of this GoogleCloudAiplatformV1beta1Context.

        Description of the Context

        :return: The description of this GoogleCloudAiplatformV1beta1Context.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this GoogleCloudAiplatformV1beta1Context.

        Description of the Context

        :param description: The description of this GoogleCloudAiplatformV1beta1Context.
        :type description: str
        """

        self._description = description

    @property
    def display_name(self):
        """Gets the display_name of this GoogleCloudAiplatformV1beta1Context.

        User provided display name of the Context. May be up to 128 Unicode characters.

        :return: The display_name of this GoogleCloudAiplatformV1beta1Context.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this GoogleCloudAiplatformV1beta1Context.

        User provided display name of the Context. May be up to 128 Unicode characters.

        :param display_name: The display_name of this GoogleCloudAiplatformV1beta1Context.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def etag(self):
        """Gets the etag of this GoogleCloudAiplatformV1beta1Context.

        An eTag used to perform consistent read-modify-write updates. If not set, a blind \"overwrite\" update happens.

        :return: The etag of this GoogleCloudAiplatformV1beta1Context.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this GoogleCloudAiplatformV1beta1Context.

        An eTag used to perform consistent read-modify-write updates. If not set, a blind \"overwrite\" update happens.

        :param etag: The etag of this GoogleCloudAiplatformV1beta1Context.
        :type etag: str
        """

        self._etag = etag

    @property
    def labels(self):
        """Gets the labels of this GoogleCloudAiplatformV1beta1Context.

        The labels with user-defined metadata to organize your Contexts. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. No more than 64 user labels can be associated with one Context (System labels are excluded).

        :return: The labels of this GoogleCloudAiplatformV1beta1Context.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this GoogleCloudAiplatformV1beta1Context.

        The labels with user-defined metadata to organize your Contexts. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. No more than 64 user labels can be associated with one Context (System labels are excluded).

        :param labels: The labels of this GoogleCloudAiplatformV1beta1Context.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def metadata(self):
        """Gets the metadata of this GoogleCloudAiplatformV1beta1Context.

        Properties of the Context. Top level metadata keys' heading and trailing spaces will be trimmed. The size of this field should not exceed 200KB.

        :return: The metadata of this GoogleCloudAiplatformV1beta1Context.
        :rtype: Dict[str, object]
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this GoogleCloudAiplatformV1beta1Context.

        Properties of the Context. Top level metadata keys' heading and trailing spaces will be trimmed. The size of this field should not exceed 200KB.

        :param metadata: The metadata of this GoogleCloudAiplatformV1beta1Context.
        :type metadata: Dict[str, object]
        """

        self._metadata = metadata

    @property
    def name(self):
        """Gets the name of this GoogleCloudAiplatformV1beta1Context.

        Immutable. The resource name of the Context.

        :return: The name of this GoogleCloudAiplatformV1beta1Context.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GoogleCloudAiplatformV1beta1Context.

        Immutable. The resource name of the Context.

        :param name: The name of this GoogleCloudAiplatformV1beta1Context.
        :type name: str
        """

        self._name = name

    @property
    def parent_contexts(self):
        """Gets the parent_contexts of this GoogleCloudAiplatformV1beta1Context.

        Output only. A list of resource names of Contexts that are parents of this Context. A Context may have at most 10 parent_contexts.

        :return: The parent_contexts of this GoogleCloudAiplatformV1beta1Context.
        :rtype: List[str]
        """
        return self._parent_contexts

    @parent_contexts.setter
    def parent_contexts(self, parent_contexts):
        """Sets the parent_contexts of this GoogleCloudAiplatformV1beta1Context.

        Output only. A list of resource names of Contexts that are parents of this Context. A Context may have at most 10 parent_contexts.

        :param parent_contexts: The parent_contexts of this GoogleCloudAiplatformV1beta1Context.
        :type parent_contexts: List[str]
        """

        self._parent_contexts = parent_contexts

    @property
    def schema_title(self):
        """Gets the schema_title of this GoogleCloudAiplatformV1beta1Context.

        The title of the schema describing the metadata. Schema title and version is expected to be registered in earlier Create Schema calls. And both are used together as unique identifiers to identify schemas within the local metadata store.

        :return: The schema_title of this GoogleCloudAiplatformV1beta1Context.
        :rtype: str
        """
        return self._schema_title

    @schema_title.setter
    def schema_title(self, schema_title):
        """Sets the schema_title of this GoogleCloudAiplatformV1beta1Context.

        The title of the schema describing the metadata. Schema title and version is expected to be registered in earlier Create Schema calls. And both are used together as unique identifiers to identify schemas within the local metadata store.

        :param schema_title: The schema_title of this GoogleCloudAiplatformV1beta1Context.
        :type schema_title: str
        """

        self._schema_title = schema_title

    @property
    def schema_version(self):
        """Gets the schema_version of this GoogleCloudAiplatformV1beta1Context.

        The version of the schema in schema_name to use. Schema title and version is expected to be registered in earlier Create Schema calls. And both are used together as unique identifiers to identify schemas within the local metadata store.

        :return: The schema_version of this GoogleCloudAiplatformV1beta1Context.
        :rtype: str
        """
        return self._schema_version

    @schema_version.setter
    def schema_version(self, schema_version):
        """Sets the schema_version of this GoogleCloudAiplatformV1beta1Context.

        The version of the schema in schema_name to use. Schema title and version is expected to be registered in earlier Create Schema calls. And both are used together as unique identifiers to identify schemas within the local metadata store.

        :param schema_version: The schema_version of this GoogleCloudAiplatformV1beta1Context.
        :type schema_version: str
        """

        self._schema_version = schema_version

    @property
    def update_time(self):
        """Gets the update_time of this GoogleCloudAiplatformV1beta1Context.

        Output only. Timestamp when this Context was last updated.

        :return: The update_time of this GoogleCloudAiplatformV1beta1Context.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this GoogleCloudAiplatformV1beta1Context.

        Output only. Timestamp when this Context was last updated.

        :param update_time: The update_time of this GoogleCloudAiplatformV1beta1Context.
        :type update_time: str
        """

        self._update_time = update_time
