# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LearningGenaiRootCodeyChatMetadata(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, code_language: str=None):
        """LearningGenaiRootCodeyChatMetadata - a model defined in OpenAPI

        :param code_language: The code_language of this LearningGenaiRootCodeyChatMetadata.
        """
        self.openapi_types = {
            'code_language': str
        }

        self.attribute_map = {
            'code_language': 'codeLanguage'
        }

        self._code_language = code_language

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LearningGenaiRootCodeyChatMetadata':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LearningGenaiRootCodeyChatMetadata of this LearningGenaiRootCodeyChatMetadata.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def code_language(self):
        """Gets the code_language of this LearningGenaiRootCodeyChatMetadata.

        Indicates the programming language of the code if the message is a code chunk.

        :return: The code_language of this LearningGenaiRootCodeyChatMetadata.
        :rtype: str
        """
        return self._code_language

    @code_language.setter
    def code_language(self, code_language):
        """Sets the code_language of this LearningGenaiRootCodeyChatMetadata.

        Indicates the programming language of the code if the message is a code chunk.

        :param code_language: The code_language of this LearningGenaiRootCodeyChatMetadata.
        :type code_language: str
        """
        allowed_values = ["UNSPECIFIED", "ALL", "TEXT", "CPP", "PYTHON", "KOTLIN", "JAVA", "JAVASCRIPT", "GO", "R", "JUPYTER_NOTEBOOK", "TYPESCRIPT", "HTML", "SQL", "BASH", "C", "DART", "GRADLE", "JAVADOC", "JSON", "MAKEFILE", "MARKDOWN", "PROTO", "XML", "YAML"]  # noqa: E501
        if code_language not in allowed_values:
            raise ValueError(
                "Invalid value for `code_language` ({0}), must be one of {1}"
                .format(code_language, allowed_values)
            )

        self._code_language = code_language
