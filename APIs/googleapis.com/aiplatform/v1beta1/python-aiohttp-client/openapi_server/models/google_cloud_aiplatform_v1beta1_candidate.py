# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_aiplatform_v1beta1_citation_metadata import GoogleCloudAiplatformV1beta1CitationMetadata
from openapi_server.models.google_cloud_aiplatform_v1beta1_content import GoogleCloudAiplatformV1beta1Content
from openapi_server.models.google_cloud_aiplatform_v1beta1_grounding_metadata import GoogleCloudAiplatformV1beta1GroundingMetadata
from openapi_server.models.google_cloud_aiplatform_v1beta1_safety_rating import GoogleCloudAiplatformV1beta1SafetyRating
from openapi_server import util


class GoogleCloudAiplatformV1beta1Candidate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, citation_metadata: GoogleCloudAiplatformV1beta1CitationMetadata=None, content: GoogleCloudAiplatformV1beta1Content=None, finish_message: str=None, finish_reason: str=None, grounding_metadata: GoogleCloudAiplatformV1beta1GroundingMetadata=None, index: int=None, safety_ratings: List[GoogleCloudAiplatformV1beta1SafetyRating]=None):
        """GoogleCloudAiplatformV1beta1Candidate - a model defined in OpenAPI

        :param citation_metadata: The citation_metadata of this GoogleCloudAiplatformV1beta1Candidate.
        :param content: The content of this GoogleCloudAiplatformV1beta1Candidate.
        :param finish_message: The finish_message of this GoogleCloudAiplatformV1beta1Candidate.
        :param finish_reason: The finish_reason of this GoogleCloudAiplatformV1beta1Candidate.
        :param grounding_metadata: The grounding_metadata of this GoogleCloudAiplatformV1beta1Candidate.
        :param index: The index of this GoogleCloudAiplatformV1beta1Candidate.
        :param safety_ratings: The safety_ratings of this GoogleCloudAiplatformV1beta1Candidate.
        """
        self.openapi_types = {
            'citation_metadata': GoogleCloudAiplatformV1beta1CitationMetadata,
            'content': GoogleCloudAiplatformV1beta1Content,
            'finish_message': str,
            'finish_reason': str,
            'grounding_metadata': GoogleCloudAiplatformV1beta1GroundingMetadata,
            'index': int,
            'safety_ratings': List[GoogleCloudAiplatformV1beta1SafetyRating]
        }

        self.attribute_map = {
            'citation_metadata': 'citationMetadata',
            'content': 'content',
            'finish_message': 'finishMessage',
            'finish_reason': 'finishReason',
            'grounding_metadata': 'groundingMetadata',
            'index': 'index',
            'safety_ratings': 'safetyRatings'
        }

        self._citation_metadata = citation_metadata
        self._content = content
        self._finish_message = finish_message
        self._finish_reason = finish_reason
        self._grounding_metadata = grounding_metadata
        self._index = index
        self._safety_ratings = safety_ratings

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudAiplatformV1beta1Candidate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudAiplatformV1beta1Candidate of this GoogleCloudAiplatformV1beta1Candidate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def citation_metadata(self):
        """Gets the citation_metadata of this GoogleCloudAiplatformV1beta1Candidate.


        :return: The citation_metadata of this GoogleCloudAiplatformV1beta1Candidate.
        :rtype: GoogleCloudAiplatformV1beta1CitationMetadata
        """
        return self._citation_metadata

    @citation_metadata.setter
    def citation_metadata(self, citation_metadata):
        """Sets the citation_metadata of this GoogleCloudAiplatformV1beta1Candidate.


        :param citation_metadata: The citation_metadata of this GoogleCloudAiplatformV1beta1Candidate.
        :type citation_metadata: GoogleCloudAiplatformV1beta1CitationMetadata
        """

        self._citation_metadata = citation_metadata

    @property
    def content(self):
        """Gets the content of this GoogleCloudAiplatformV1beta1Candidate.


        :return: The content of this GoogleCloudAiplatformV1beta1Candidate.
        :rtype: GoogleCloudAiplatformV1beta1Content
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this GoogleCloudAiplatformV1beta1Candidate.


        :param content: The content of this GoogleCloudAiplatformV1beta1Candidate.
        :type content: GoogleCloudAiplatformV1beta1Content
        """

        self._content = content

    @property
    def finish_message(self):
        """Gets the finish_message of this GoogleCloudAiplatformV1beta1Candidate.

        Output only. Describes the reason the mode stopped generating tokens in more detail. This is only filled when `finish_reason` is set.

        :return: The finish_message of this GoogleCloudAiplatformV1beta1Candidate.
        :rtype: str
        """
        return self._finish_message

    @finish_message.setter
    def finish_message(self, finish_message):
        """Sets the finish_message of this GoogleCloudAiplatformV1beta1Candidate.

        Output only. Describes the reason the mode stopped generating tokens in more detail. This is only filled when `finish_reason` is set.

        :param finish_message: The finish_message of this GoogleCloudAiplatformV1beta1Candidate.
        :type finish_message: str
        """

        self._finish_message = finish_message

    @property
    def finish_reason(self):
        """Gets the finish_reason of this GoogleCloudAiplatformV1beta1Candidate.

        Output only. The reason why the model stopped generating tokens. If empty, the model has not stopped generating the tokens.

        :return: The finish_reason of this GoogleCloudAiplatformV1beta1Candidate.
        :rtype: str
        """
        return self._finish_reason

    @finish_reason.setter
    def finish_reason(self, finish_reason):
        """Sets the finish_reason of this GoogleCloudAiplatformV1beta1Candidate.

        Output only. The reason why the model stopped generating tokens. If empty, the model has not stopped generating the tokens.

        :param finish_reason: The finish_reason of this GoogleCloudAiplatformV1beta1Candidate.
        :type finish_reason: str
        """
        allowed_values = ["FINISH_REASON_UNSPECIFIED", "STOP", "MAX_TOKENS", "SAFETY", "RECITATION", "OTHER"]  # noqa: E501
        if finish_reason not in allowed_values:
            raise ValueError(
                "Invalid value for `finish_reason` ({0}), must be one of {1}"
                .format(finish_reason, allowed_values)
            )

        self._finish_reason = finish_reason

    @property
    def grounding_metadata(self):
        """Gets the grounding_metadata of this GoogleCloudAiplatformV1beta1Candidate.


        :return: The grounding_metadata of this GoogleCloudAiplatformV1beta1Candidate.
        :rtype: GoogleCloudAiplatformV1beta1GroundingMetadata
        """
        return self._grounding_metadata

    @grounding_metadata.setter
    def grounding_metadata(self, grounding_metadata):
        """Sets the grounding_metadata of this GoogleCloudAiplatformV1beta1Candidate.


        :param grounding_metadata: The grounding_metadata of this GoogleCloudAiplatformV1beta1Candidate.
        :type grounding_metadata: GoogleCloudAiplatformV1beta1GroundingMetadata
        """

        self._grounding_metadata = grounding_metadata

    @property
    def index(self):
        """Gets the index of this GoogleCloudAiplatformV1beta1Candidate.

        Output only. Index of the candidate.

        :return: The index of this GoogleCloudAiplatformV1beta1Candidate.
        :rtype: int
        """
        return self._index

    @index.setter
    def index(self, index):
        """Sets the index of this GoogleCloudAiplatformV1beta1Candidate.

        Output only. Index of the candidate.

        :param index: The index of this GoogleCloudAiplatformV1beta1Candidate.
        :type index: int
        """

        self._index = index

    @property
    def safety_ratings(self):
        """Gets the safety_ratings of this GoogleCloudAiplatformV1beta1Candidate.

        Output only. List of ratings for the safety of a response candidate. There is at most one rating per category.

        :return: The safety_ratings of this GoogleCloudAiplatformV1beta1Candidate.
        :rtype: List[GoogleCloudAiplatformV1beta1SafetyRating]
        """
        return self._safety_ratings

    @safety_ratings.setter
    def safety_ratings(self, safety_ratings):
        """Sets the safety_ratings of this GoogleCloudAiplatformV1beta1Candidate.

        Output only. List of ratings for the safety of a response candidate. There is at most one rating per category.

        :param safety_ratings: The safety_ratings of this GoogleCloudAiplatformV1beta1Candidate.
        :type safety_ratings: List[GoogleCloudAiplatformV1beta1SafetyRating]
        """

        self._safety_ratings = safety_ratings
