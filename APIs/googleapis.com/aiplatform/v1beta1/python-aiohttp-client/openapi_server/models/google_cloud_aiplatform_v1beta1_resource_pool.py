# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_aiplatform_v1beta1_disk_spec import GoogleCloudAiplatformV1beta1DiskSpec
from openapi_server.models.google_cloud_aiplatform_v1beta1_machine_spec import GoogleCloudAiplatformV1beta1MachineSpec
from openapi_server.models.google_cloud_aiplatform_v1beta1_resource_pool_autoscaling_spec import GoogleCloudAiplatformV1beta1ResourcePoolAutoscalingSpec
from openapi_server import util


class GoogleCloudAiplatformV1beta1ResourcePool(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, autoscaling_spec: GoogleCloudAiplatformV1beta1ResourcePoolAutoscalingSpec=None, disk_spec: GoogleCloudAiplatformV1beta1DiskSpec=None, id: str=None, machine_spec: GoogleCloudAiplatformV1beta1MachineSpec=None, replica_count: str=None, used_replica_count: str=None):
        """GoogleCloudAiplatformV1beta1ResourcePool - a model defined in OpenAPI

        :param autoscaling_spec: The autoscaling_spec of this GoogleCloudAiplatformV1beta1ResourcePool.
        :param disk_spec: The disk_spec of this GoogleCloudAiplatformV1beta1ResourcePool.
        :param id: The id of this GoogleCloudAiplatformV1beta1ResourcePool.
        :param machine_spec: The machine_spec of this GoogleCloudAiplatformV1beta1ResourcePool.
        :param replica_count: The replica_count of this GoogleCloudAiplatformV1beta1ResourcePool.
        :param used_replica_count: The used_replica_count of this GoogleCloudAiplatformV1beta1ResourcePool.
        """
        self.openapi_types = {
            'autoscaling_spec': GoogleCloudAiplatformV1beta1ResourcePoolAutoscalingSpec,
            'disk_spec': GoogleCloudAiplatformV1beta1DiskSpec,
            'id': str,
            'machine_spec': GoogleCloudAiplatformV1beta1MachineSpec,
            'replica_count': str,
            'used_replica_count': str
        }

        self.attribute_map = {
            'autoscaling_spec': 'autoscalingSpec',
            'disk_spec': 'diskSpec',
            'id': 'id',
            'machine_spec': 'machineSpec',
            'replica_count': 'replicaCount',
            'used_replica_count': 'usedReplicaCount'
        }

        self._autoscaling_spec = autoscaling_spec
        self._disk_spec = disk_spec
        self._id = id
        self._machine_spec = machine_spec
        self._replica_count = replica_count
        self._used_replica_count = used_replica_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudAiplatformV1beta1ResourcePool':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudAiplatformV1beta1ResourcePool of this GoogleCloudAiplatformV1beta1ResourcePool.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def autoscaling_spec(self):
        """Gets the autoscaling_spec of this GoogleCloudAiplatformV1beta1ResourcePool.


        :return: The autoscaling_spec of this GoogleCloudAiplatformV1beta1ResourcePool.
        :rtype: GoogleCloudAiplatformV1beta1ResourcePoolAutoscalingSpec
        """
        return self._autoscaling_spec

    @autoscaling_spec.setter
    def autoscaling_spec(self, autoscaling_spec):
        """Sets the autoscaling_spec of this GoogleCloudAiplatformV1beta1ResourcePool.


        :param autoscaling_spec: The autoscaling_spec of this GoogleCloudAiplatformV1beta1ResourcePool.
        :type autoscaling_spec: GoogleCloudAiplatformV1beta1ResourcePoolAutoscalingSpec
        """

        self._autoscaling_spec = autoscaling_spec

    @property
    def disk_spec(self):
        """Gets the disk_spec of this GoogleCloudAiplatformV1beta1ResourcePool.


        :return: The disk_spec of this GoogleCloudAiplatformV1beta1ResourcePool.
        :rtype: GoogleCloudAiplatformV1beta1DiskSpec
        """
        return self._disk_spec

    @disk_spec.setter
    def disk_spec(self, disk_spec):
        """Sets the disk_spec of this GoogleCloudAiplatformV1beta1ResourcePool.


        :param disk_spec: The disk_spec of this GoogleCloudAiplatformV1beta1ResourcePool.
        :type disk_spec: GoogleCloudAiplatformV1beta1DiskSpec
        """

        self._disk_spec = disk_spec

    @property
    def id(self):
        """Gets the id of this GoogleCloudAiplatformV1beta1ResourcePool.

        Immutable. The unique ID in a PersistentResource for referring to this resource pool. User can specify it if necessary. Otherwise, it's generated automatically.

        :return: The id of this GoogleCloudAiplatformV1beta1ResourcePool.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GoogleCloudAiplatformV1beta1ResourcePool.

        Immutable. The unique ID in a PersistentResource for referring to this resource pool. User can specify it if necessary. Otherwise, it's generated automatically.

        :param id: The id of this GoogleCloudAiplatformV1beta1ResourcePool.
        :type id: str
        """

        self._id = id

    @property
    def machine_spec(self):
        """Gets the machine_spec of this GoogleCloudAiplatformV1beta1ResourcePool.


        :return: The machine_spec of this GoogleCloudAiplatformV1beta1ResourcePool.
        :rtype: GoogleCloudAiplatformV1beta1MachineSpec
        """
        return self._machine_spec

    @machine_spec.setter
    def machine_spec(self, machine_spec):
        """Sets the machine_spec of this GoogleCloudAiplatformV1beta1ResourcePool.


        :param machine_spec: The machine_spec of this GoogleCloudAiplatformV1beta1ResourcePool.
        :type machine_spec: GoogleCloudAiplatformV1beta1MachineSpec
        """

        self._machine_spec = machine_spec

    @property
    def replica_count(self):
        """Gets the replica_count of this GoogleCloudAiplatformV1beta1ResourcePool.

        Optional. The total number of machines to use for this resource pool.

        :return: The replica_count of this GoogleCloudAiplatformV1beta1ResourcePool.
        :rtype: str
        """
        return self._replica_count

    @replica_count.setter
    def replica_count(self, replica_count):
        """Sets the replica_count of this GoogleCloudAiplatformV1beta1ResourcePool.

        Optional. The total number of machines to use for this resource pool.

        :param replica_count: The replica_count of this GoogleCloudAiplatformV1beta1ResourcePool.
        :type replica_count: str
        """

        self._replica_count = replica_count

    @property
    def used_replica_count(self):
        """Gets the used_replica_count of this GoogleCloudAiplatformV1beta1ResourcePool.

        Output only. The number of machines currently in use by training jobs for this resource pool. Will replace idle_replica_count.

        :return: The used_replica_count of this GoogleCloudAiplatformV1beta1ResourcePool.
        :rtype: str
        """
        return self._used_replica_count

    @used_replica_count.setter
    def used_replica_count(self, used_replica_count):
        """Sets the used_replica_count of this GoogleCloudAiplatformV1beta1ResourcePool.

        Output only. The number of machines currently in use by training jobs for this resource pool. Will replace idle_replica_count.

        :param used_replica_count: The used_replica_count of this GoogleCloudAiplatformV1beta1ResourcePool.
        :type used_replica_count: str
        """

        self._used_replica_count = used_replica_count
