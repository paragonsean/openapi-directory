# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleCloudAiplatformV1beta1InternalOsServiceStateInstance(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, service_name: str=None, service_state: str=None):
        """GoogleCloudAiplatformV1beta1InternalOsServiceStateInstance - a model defined in OpenAPI

        :param service_name: The service_name of this GoogleCloudAiplatformV1beta1InternalOsServiceStateInstance.
        :param service_state: The service_state of this GoogleCloudAiplatformV1beta1InternalOsServiceStateInstance.
        """
        self.openapi_types = {
            'service_name': str,
            'service_state': str
        }

        self.attribute_map = {
            'service_name': 'serviceName',
            'service_state': 'serviceState'
        }

        self._service_name = service_name
        self._service_state = service_state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudAiplatformV1beta1InternalOsServiceStateInstance':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudAiplatformV1beta1InternalOsServiceStateInstance of this GoogleCloudAiplatformV1beta1InternalOsServiceStateInstance.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def service_name(self):
        """Gets the service_name of this GoogleCloudAiplatformV1beta1InternalOsServiceStateInstance.

        Required. internal service name.

        :return: The service_name of this GoogleCloudAiplatformV1beta1InternalOsServiceStateInstance.
        :rtype: str
        """
        return self._service_name

    @service_name.setter
    def service_name(self, service_name):
        """Sets the service_name of this GoogleCloudAiplatformV1beta1InternalOsServiceStateInstance.

        Required. internal service name.

        :param service_name: The service_name of this GoogleCloudAiplatformV1beta1InternalOsServiceStateInstance.
        :type service_name: str
        """
        allowed_values = ["INTERNAL_OS_SERVICE_ENUM_UNSPECIFIED", "DOCKER_SERVICE_STATE", "CONTROL_PLANE_API_DNS_STATE", "PROXY_REGISTRATION_DNS_STATE", "JUPYTER_STATE", "JUPYTER_API_STATE", "EUC_METADATA_API_STATE", "EUC_AGENT_API_STATE", "IDLE_SHUTDOWN_AGENT_STATE", "PROXY_AGENT_STATE"]  # noqa: E501
        if service_name not in allowed_values:
            raise ValueError(
                "Invalid value for `service_name` ({0}), must be one of {1}"
                .format(service_name, allowed_values)
            )

        self._service_name = service_name

    @property
    def service_state(self):
        """Gets the service_state of this GoogleCloudAiplatformV1beta1InternalOsServiceStateInstance.

        Required. internal service state.

        :return: The service_state of this GoogleCloudAiplatformV1beta1InternalOsServiceStateInstance.
        :rtype: str
        """
        return self._service_state

    @service_state.setter
    def service_state(self, service_state):
        """Sets the service_state of this GoogleCloudAiplatformV1beta1InternalOsServiceStateInstance.

        Required. internal service state.

        :param service_state: The service_state of this GoogleCloudAiplatformV1beta1InternalOsServiceStateInstance.
        :type service_state: str
        """
        allowed_values = ["UNKNOWN", "HEALTHY", "UNHEALTHY"]  # noqa: E501
        if service_state not in allowed_values:
            raise ValueError(
                "Invalid value for `service_state` ({0}), must be one of {1}"
                .format(service_state, allowed_values)
            )

        self._service_state = service_state
