# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleCloudAiplatformV1beta1SafetySetting(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, category: str=None, threshold: str=None):
        """GoogleCloudAiplatformV1beta1SafetySetting - a model defined in OpenAPI

        :param category: The category of this GoogleCloudAiplatformV1beta1SafetySetting.
        :param threshold: The threshold of this GoogleCloudAiplatformV1beta1SafetySetting.
        """
        self.openapi_types = {
            'category': str,
            'threshold': str
        }

        self.attribute_map = {
            'category': 'category',
            'threshold': 'threshold'
        }

        self._category = category
        self._threshold = threshold

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudAiplatformV1beta1SafetySetting':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudAiplatformV1beta1SafetySetting of this GoogleCloudAiplatformV1beta1SafetySetting.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def category(self):
        """Gets the category of this GoogleCloudAiplatformV1beta1SafetySetting.

        Required. Harm category.

        :return: The category of this GoogleCloudAiplatformV1beta1SafetySetting.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this GoogleCloudAiplatformV1beta1SafetySetting.

        Required. Harm category.

        :param category: The category of this GoogleCloudAiplatformV1beta1SafetySetting.
        :type category: str
        """
        allowed_values = ["HARM_CATEGORY_UNSPECIFIED", "HARM_CATEGORY_HATE_SPEECH", "HARM_CATEGORY_DANGEROUS_CONTENT", "HARM_CATEGORY_HARASSMENT", "HARM_CATEGORY_SEXUALLY_EXPLICIT"]  # noqa: E501
        if category not in allowed_values:
            raise ValueError(
                "Invalid value for `category` ({0}), must be one of {1}"
                .format(category, allowed_values)
            )

        self._category = category

    @property
    def threshold(self):
        """Gets the threshold of this GoogleCloudAiplatformV1beta1SafetySetting.

        Required. The harm block threshold.

        :return: The threshold of this GoogleCloudAiplatformV1beta1SafetySetting.
        :rtype: str
        """
        return self._threshold

    @threshold.setter
    def threshold(self, threshold):
        """Sets the threshold of this GoogleCloudAiplatformV1beta1SafetySetting.

        Required. The harm block threshold.

        :param threshold: The threshold of this GoogleCloudAiplatformV1beta1SafetySetting.
        :type threshold: str
        """
        allowed_values = ["HARM_BLOCK_THRESHOLD_UNSPECIFIED", "BLOCK_LOW_AND_ABOVE", "BLOCK_MEDIUM_AND_ABOVE", "BLOCK_ONLY_HIGH", "BLOCK_NONE"]  # noqa: E501
        if threshold not in allowed_values:
            raise ValueError(
                "Invalid value for `threshold` ({0}), must be one of {1}"
                .format(threshold, allowed_values)
            )

        self._threshold = threshold
