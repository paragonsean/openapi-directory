# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_aiplatform_v1beta1_explanation_metadata_input_metadata import GoogleCloudAiplatformV1beta1ExplanationMetadataInputMetadata
from openapi_server.models.google_cloud_aiplatform_v1beta1_explanation_metadata_output_metadata import GoogleCloudAiplatformV1beta1ExplanationMetadataOutputMetadata
from openapi_server import util


class GoogleCloudAiplatformV1beta1ExplanationMetadata(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, feature_attributions_schema_uri: str=None, inputs: Dict[str, GoogleCloudAiplatformV1beta1ExplanationMetadataInputMetadata]=None, latent_space_source: str=None, outputs: Dict[str, GoogleCloudAiplatformV1beta1ExplanationMetadataOutputMetadata]=None):
        """GoogleCloudAiplatformV1beta1ExplanationMetadata - a model defined in OpenAPI

        :param feature_attributions_schema_uri: The feature_attributions_schema_uri of this GoogleCloudAiplatformV1beta1ExplanationMetadata.
        :param inputs: The inputs of this GoogleCloudAiplatformV1beta1ExplanationMetadata.
        :param latent_space_source: The latent_space_source of this GoogleCloudAiplatformV1beta1ExplanationMetadata.
        :param outputs: The outputs of this GoogleCloudAiplatformV1beta1ExplanationMetadata.
        """
        self.openapi_types = {
            'feature_attributions_schema_uri': str,
            'inputs': Dict[str, GoogleCloudAiplatformV1beta1ExplanationMetadataInputMetadata],
            'latent_space_source': str,
            'outputs': Dict[str, GoogleCloudAiplatformV1beta1ExplanationMetadataOutputMetadata]
        }

        self.attribute_map = {
            'feature_attributions_schema_uri': 'featureAttributionsSchemaUri',
            'inputs': 'inputs',
            'latent_space_source': 'latentSpaceSource',
            'outputs': 'outputs'
        }

        self._feature_attributions_schema_uri = feature_attributions_schema_uri
        self._inputs = inputs
        self._latent_space_source = latent_space_source
        self._outputs = outputs

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudAiplatformV1beta1ExplanationMetadata':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudAiplatformV1beta1ExplanationMetadata of this GoogleCloudAiplatformV1beta1ExplanationMetadata.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def feature_attributions_schema_uri(self):
        """Gets the feature_attributions_schema_uri of this GoogleCloudAiplatformV1beta1ExplanationMetadata.

        Points to a YAML file stored on Google Cloud Storage describing the format of the feature attributions. The schema is defined as an OpenAPI 3.0.2 [Schema Object](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.2.md#schemaObject). AutoML tabular Models always have this field populated by Vertex AI. Note: The URI given on output may be different, including the URI scheme, than the one given on input. The output URI will point to a location where the user only has a read access.

        :return: The feature_attributions_schema_uri of this GoogleCloudAiplatformV1beta1ExplanationMetadata.
        :rtype: str
        """
        return self._feature_attributions_schema_uri

    @feature_attributions_schema_uri.setter
    def feature_attributions_schema_uri(self, feature_attributions_schema_uri):
        """Sets the feature_attributions_schema_uri of this GoogleCloudAiplatformV1beta1ExplanationMetadata.

        Points to a YAML file stored on Google Cloud Storage describing the format of the feature attributions. The schema is defined as an OpenAPI 3.0.2 [Schema Object](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.2.md#schemaObject). AutoML tabular Models always have this field populated by Vertex AI. Note: The URI given on output may be different, including the URI scheme, than the one given on input. The output URI will point to a location where the user only has a read access.

        :param feature_attributions_schema_uri: The feature_attributions_schema_uri of this GoogleCloudAiplatformV1beta1ExplanationMetadata.
        :type feature_attributions_schema_uri: str
        """

        self._feature_attributions_schema_uri = feature_attributions_schema_uri

    @property
    def inputs(self):
        """Gets the inputs of this GoogleCloudAiplatformV1beta1ExplanationMetadata.

        Required. Map from feature names to feature input metadata. Keys are the name of the features. Values are the specification of the feature. An empty InputMetadata is valid. It describes a text feature which has the name specified as the key in ExplanationMetadata.inputs. The baseline of the empty feature is chosen by Vertex AI. For Vertex AI-provided Tensorflow images, the key can be any friendly name of the feature. Once specified, featureAttributions are keyed by this key (if not grouped with another feature). For custom images, the key must match with the key in instance.

        :return: The inputs of this GoogleCloudAiplatformV1beta1ExplanationMetadata.
        :rtype: Dict[str, GoogleCloudAiplatformV1beta1ExplanationMetadataInputMetadata]
        """
        return self._inputs

    @inputs.setter
    def inputs(self, inputs):
        """Sets the inputs of this GoogleCloudAiplatformV1beta1ExplanationMetadata.

        Required. Map from feature names to feature input metadata. Keys are the name of the features. Values are the specification of the feature. An empty InputMetadata is valid. It describes a text feature which has the name specified as the key in ExplanationMetadata.inputs. The baseline of the empty feature is chosen by Vertex AI. For Vertex AI-provided Tensorflow images, the key can be any friendly name of the feature. Once specified, featureAttributions are keyed by this key (if not grouped with another feature). For custom images, the key must match with the key in instance.

        :param inputs: The inputs of this GoogleCloudAiplatformV1beta1ExplanationMetadata.
        :type inputs: Dict[str, GoogleCloudAiplatformV1beta1ExplanationMetadataInputMetadata]
        """

        self._inputs = inputs

    @property
    def latent_space_source(self):
        """Gets the latent_space_source of this GoogleCloudAiplatformV1beta1ExplanationMetadata.

        Name of the source to generate embeddings for example based explanations.

        :return: The latent_space_source of this GoogleCloudAiplatformV1beta1ExplanationMetadata.
        :rtype: str
        """
        return self._latent_space_source

    @latent_space_source.setter
    def latent_space_source(self, latent_space_source):
        """Sets the latent_space_source of this GoogleCloudAiplatformV1beta1ExplanationMetadata.

        Name of the source to generate embeddings for example based explanations.

        :param latent_space_source: The latent_space_source of this GoogleCloudAiplatformV1beta1ExplanationMetadata.
        :type latent_space_source: str
        """

        self._latent_space_source = latent_space_source

    @property
    def outputs(self):
        """Gets the outputs of this GoogleCloudAiplatformV1beta1ExplanationMetadata.

        Required. Map from output names to output metadata. For Vertex AI-provided Tensorflow images, keys can be any user defined string that consists of any UTF-8 characters. For custom images, keys are the name of the output field in the prediction to be explained. Currently only one key is allowed.

        :return: The outputs of this GoogleCloudAiplatformV1beta1ExplanationMetadata.
        :rtype: Dict[str, GoogleCloudAiplatformV1beta1ExplanationMetadataOutputMetadata]
        """
        return self._outputs

    @outputs.setter
    def outputs(self, outputs):
        """Sets the outputs of this GoogleCloudAiplatformV1beta1ExplanationMetadata.

        Required. Map from output names to output metadata. For Vertex AI-provided Tensorflow images, keys can be any user defined string that consists of any UTF-8 characters. For custom images, keys are the name of the output field in the prediction to be explained. Currently only one key is allowed.

        :param outputs: The outputs of this GoogleCloudAiplatformV1beta1ExplanationMetadata.
        :type outputs: Dict[str, GoogleCloudAiplatformV1beta1ExplanationMetadataOutputMetadata]
        """

        self._outputs = outputs
