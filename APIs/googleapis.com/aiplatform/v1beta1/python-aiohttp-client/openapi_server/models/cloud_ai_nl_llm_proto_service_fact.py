# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CloudAiNlLlmProtoServiceFact(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, query: str=None, summary: str=None, title: str=None, url: str=None):
        """CloudAiNlLlmProtoServiceFact - a model defined in OpenAPI

        :param query: The query of this CloudAiNlLlmProtoServiceFact.
        :param summary: The summary of this CloudAiNlLlmProtoServiceFact.
        :param title: The title of this CloudAiNlLlmProtoServiceFact.
        :param url: The url of this CloudAiNlLlmProtoServiceFact.
        """
        self.openapi_types = {
            'query': str,
            'summary': str,
            'title': str,
            'url': str
        }

        self.attribute_map = {
            'query': 'query',
            'summary': 'summary',
            'title': 'title',
            'url': 'url'
        }

        self._query = query
        self._summary = summary
        self._title = title
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CloudAiNlLlmProtoServiceFact':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CloudAiNlLlmProtoServiceFact of this CloudAiNlLlmProtoServiceFact.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def query(self):
        """Gets the query of this CloudAiNlLlmProtoServiceFact.

        Query that is used to retrieve this fact.

        :return: The query of this CloudAiNlLlmProtoServiceFact.
        :rtype: str
        """
        return self._query

    @query.setter
    def query(self, query):
        """Sets the query of this CloudAiNlLlmProtoServiceFact.

        Query that is used to retrieve this fact.

        :param query: The query of this CloudAiNlLlmProtoServiceFact.
        :type query: str
        """

        self._query = query

    @property
    def summary(self):
        """Gets the summary of this CloudAiNlLlmProtoServiceFact.

        If present, the summary/snippet of the fact.

        :return: The summary of this CloudAiNlLlmProtoServiceFact.
        :rtype: str
        """
        return self._summary

    @summary.setter
    def summary(self, summary):
        """Sets the summary of this CloudAiNlLlmProtoServiceFact.

        If present, the summary/snippet of the fact.

        :param summary: The summary of this CloudAiNlLlmProtoServiceFact.
        :type summary: str
        """

        self._summary = summary

    @property
    def title(self):
        """Gets the title of this CloudAiNlLlmProtoServiceFact.

        If present, it refers to the title of this fact.

        :return: The title of this CloudAiNlLlmProtoServiceFact.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this CloudAiNlLlmProtoServiceFact.

        If present, it refers to the title of this fact.

        :param title: The title of this CloudAiNlLlmProtoServiceFact.
        :type title: str
        """

        self._title = title

    @property
    def url(self):
        """Gets the url of this CloudAiNlLlmProtoServiceFact.

        If present, this URL links to the webpage of the fact.

        :return: The url of this CloudAiNlLlmProtoServiceFact.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this CloudAiNlLlmProtoServiceFact.

        If present, this URL links to the webpage of the fact.

        :param url: The url of this CloudAiNlLlmProtoServiceFact.
        :type url: str
        """

        self._url = url
