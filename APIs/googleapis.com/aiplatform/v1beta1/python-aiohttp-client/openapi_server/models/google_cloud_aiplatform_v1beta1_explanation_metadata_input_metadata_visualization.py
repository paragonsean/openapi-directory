# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleCloudAiplatformV1beta1ExplanationMetadataInputMetadataVisualization(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, clip_percent_lowerbound: float=None, clip_percent_upperbound: float=None, color_map: str=None, overlay_type: str=None, polarity: str=None, type: str=None):
        """GoogleCloudAiplatformV1beta1ExplanationMetadataInputMetadataVisualization - a model defined in OpenAPI

        :param clip_percent_lowerbound: The clip_percent_lowerbound of this GoogleCloudAiplatformV1beta1ExplanationMetadataInputMetadataVisualization.
        :param clip_percent_upperbound: The clip_percent_upperbound of this GoogleCloudAiplatformV1beta1ExplanationMetadataInputMetadataVisualization.
        :param color_map: The color_map of this GoogleCloudAiplatformV1beta1ExplanationMetadataInputMetadataVisualization.
        :param overlay_type: The overlay_type of this GoogleCloudAiplatformV1beta1ExplanationMetadataInputMetadataVisualization.
        :param polarity: The polarity of this GoogleCloudAiplatformV1beta1ExplanationMetadataInputMetadataVisualization.
        :param type: The type of this GoogleCloudAiplatformV1beta1ExplanationMetadataInputMetadataVisualization.
        """
        self.openapi_types = {
            'clip_percent_lowerbound': float,
            'clip_percent_upperbound': float,
            'color_map': str,
            'overlay_type': str,
            'polarity': str,
            'type': str
        }

        self.attribute_map = {
            'clip_percent_lowerbound': 'clipPercentLowerbound',
            'clip_percent_upperbound': 'clipPercentUpperbound',
            'color_map': 'colorMap',
            'overlay_type': 'overlayType',
            'polarity': 'polarity',
            'type': 'type'
        }

        self._clip_percent_lowerbound = clip_percent_lowerbound
        self._clip_percent_upperbound = clip_percent_upperbound
        self._color_map = color_map
        self._overlay_type = overlay_type
        self._polarity = polarity
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudAiplatformV1beta1ExplanationMetadataInputMetadataVisualization':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudAiplatformV1beta1ExplanationMetadataInputMetadataVisualization of this GoogleCloudAiplatformV1beta1ExplanationMetadataInputMetadataVisualization.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def clip_percent_lowerbound(self):
        """Gets the clip_percent_lowerbound of this GoogleCloudAiplatformV1beta1ExplanationMetadataInputMetadataVisualization.

        Excludes attributions below the specified percentile, from the highlighted areas. Defaults to 62.

        :return: The clip_percent_lowerbound of this GoogleCloudAiplatformV1beta1ExplanationMetadataInputMetadataVisualization.
        :rtype: float
        """
        return self._clip_percent_lowerbound

    @clip_percent_lowerbound.setter
    def clip_percent_lowerbound(self, clip_percent_lowerbound):
        """Sets the clip_percent_lowerbound of this GoogleCloudAiplatformV1beta1ExplanationMetadataInputMetadataVisualization.

        Excludes attributions below the specified percentile, from the highlighted areas. Defaults to 62.

        :param clip_percent_lowerbound: The clip_percent_lowerbound of this GoogleCloudAiplatformV1beta1ExplanationMetadataInputMetadataVisualization.
        :type clip_percent_lowerbound: float
        """

        self._clip_percent_lowerbound = clip_percent_lowerbound

    @property
    def clip_percent_upperbound(self):
        """Gets the clip_percent_upperbound of this GoogleCloudAiplatformV1beta1ExplanationMetadataInputMetadataVisualization.

        Excludes attributions above the specified percentile from the highlighted areas. Using the clip_percent_upperbound and clip_percent_lowerbound together can be useful for filtering out noise and making it easier to see areas of strong attribution. Defaults to 99.9.

        :return: The clip_percent_upperbound of this GoogleCloudAiplatformV1beta1ExplanationMetadataInputMetadataVisualization.
        :rtype: float
        """
        return self._clip_percent_upperbound

    @clip_percent_upperbound.setter
    def clip_percent_upperbound(self, clip_percent_upperbound):
        """Sets the clip_percent_upperbound of this GoogleCloudAiplatformV1beta1ExplanationMetadataInputMetadataVisualization.

        Excludes attributions above the specified percentile from the highlighted areas. Using the clip_percent_upperbound and clip_percent_lowerbound together can be useful for filtering out noise and making it easier to see areas of strong attribution. Defaults to 99.9.

        :param clip_percent_upperbound: The clip_percent_upperbound of this GoogleCloudAiplatformV1beta1ExplanationMetadataInputMetadataVisualization.
        :type clip_percent_upperbound: float
        """

        self._clip_percent_upperbound = clip_percent_upperbound

    @property
    def color_map(self):
        """Gets the color_map of this GoogleCloudAiplatformV1beta1ExplanationMetadataInputMetadataVisualization.

        The color scheme used for the highlighted areas. Defaults to PINK_GREEN for Integrated Gradients attribution, which shows positive attributions in green and negative in pink. Defaults to VIRIDIS for XRAI attribution, which highlights the most influential regions in yellow and the least influential in blue.

        :return: The color_map of this GoogleCloudAiplatformV1beta1ExplanationMetadataInputMetadataVisualization.
        :rtype: str
        """
        return self._color_map

    @color_map.setter
    def color_map(self, color_map):
        """Sets the color_map of this GoogleCloudAiplatformV1beta1ExplanationMetadataInputMetadataVisualization.

        The color scheme used for the highlighted areas. Defaults to PINK_GREEN for Integrated Gradients attribution, which shows positive attributions in green and negative in pink. Defaults to VIRIDIS for XRAI attribution, which highlights the most influential regions in yellow and the least influential in blue.

        :param color_map: The color_map of this GoogleCloudAiplatformV1beta1ExplanationMetadataInputMetadataVisualization.
        :type color_map: str
        """
        allowed_values = ["COLOR_MAP_UNSPECIFIED", "PINK_GREEN", "VIRIDIS", "RED", "GREEN", "RED_GREEN", "PINK_WHITE_GREEN"]  # noqa: E501
        if color_map not in allowed_values:
            raise ValueError(
                "Invalid value for `color_map` ({0}), must be one of {1}"
                .format(color_map, allowed_values)
            )

        self._color_map = color_map

    @property
    def overlay_type(self):
        """Gets the overlay_type of this GoogleCloudAiplatformV1beta1ExplanationMetadataInputMetadataVisualization.

        How the original image is displayed in the visualization. Adjusting the overlay can help increase visual clarity if the original image makes it difficult to view the visualization. Defaults to NONE.

        :return: The overlay_type of this GoogleCloudAiplatformV1beta1ExplanationMetadataInputMetadataVisualization.
        :rtype: str
        """
        return self._overlay_type

    @overlay_type.setter
    def overlay_type(self, overlay_type):
        """Sets the overlay_type of this GoogleCloudAiplatformV1beta1ExplanationMetadataInputMetadataVisualization.

        How the original image is displayed in the visualization. Adjusting the overlay can help increase visual clarity if the original image makes it difficult to view the visualization. Defaults to NONE.

        :param overlay_type: The overlay_type of this GoogleCloudAiplatformV1beta1ExplanationMetadataInputMetadataVisualization.
        :type overlay_type: str
        """
        allowed_values = ["OVERLAY_TYPE_UNSPECIFIED", "NONE", "ORIGINAL", "GRAYSCALE", "MASK_BLACK"]  # noqa: E501
        if overlay_type not in allowed_values:
            raise ValueError(
                "Invalid value for `overlay_type` ({0}), must be one of {1}"
                .format(overlay_type, allowed_values)
            )

        self._overlay_type = overlay_type

    @property
    def polarity(self):
        """Gets the polarity of this GoogleCloudAiplatformV1beta1ExplanationMetadataInputMetadataVisualization.

        Whether to only highlight pixels with positive contributions, negative or both. Defaults to POSITIVE.

        :return: The polarity of this GoogleCloudAiplatformV1beta1ExplanationMetadataInputMetadataVisualization.
        :rtype: str
        """
        return self._polarity

    @polarity.setter
    def polarity(self, polarity):
        """Sets the polarity of this GoogleCloudAiplatformV1beta1ExplanationMetadataInputMetadataVisualization.

        Whether to only highlight pixels with positive contributions, negative or both. Defaults to POSITIVE.

        :param polarity: The polarity of this GoogleCloudAiplatformV1beta1ExplanationMetadataInputMetadataVisualization.
        :type polarity: str
        """
        allowed_values = ["POLARITY_UNSPECIFIED", "POSITIVE", "NEGATIVE", "BOTH"]  # noqa: E501
        if polarity not in allowed_values:
            raise ValueError(
                "Invalid value for `polarity` ({0}), must be one of {1}"
                .format(polarity, allowed_values)
            )

        self._polarity = polarity

    @property
    def type(self):
        """Gets the type of this GoogleCloudAiplatformV1beta1ExplanationMetadataInputMetadataVisualization.

        Type of the image visualization. Only applicable to Integrated Gradients attribution. OUTLINES shows regions of attribution, while PIXELS shows per-pixel attribution. Defaults to OUTLINES.

        :return: The type of this GoogleCloudAiplatformV1beta1ExplanationMetadataInputMetadataVisualization.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this GoogleCloudAiplatformV1beta1ExplanationMetadataInputMetadataVisualization.

        Type of the image visualization. Only applicable to Integrated Gradients attribution. OUTLINES shows regions of attribution, while PIXELS shows per-pixel attribution. Defaults to OUTLINES.

        :param type: The type of this GoogleCloudAiplatformV1beta1ExplanationMetadataInputMetadataVisualization.
        :type type: str
        """
        allowed_values = ["TYPE_UNSPECIFIED", "PIXELS", "OUTLINES"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
