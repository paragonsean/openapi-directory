# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_aiplatform_v1beta1_gcs_source import GoogleCloudAiplatformV1beta1GcsSource
from openapi_server import util


class GoogleCloudAiplatformV1beta1ImportDataConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, annotation_labels: Dict[str, str]=None, data_item_labels: Dict[str, str]=None, gcs_source: GoogleCloudAiplatformV1beta1GcsSource=None, import_schema_uri: str=None):
        """GoogleCloudAiplatformV1beta1ImportDataConfig - a model defined in OpenAPI

        :param annotation_labels: The annotation_labels of this GoogleCloudAiplatformV1beta1ImportDataConfig.
        :param data_item_labels: The data_item_labels of this GoogleCloudAiplatformV1beta1ImportDataConfig.
        :param gcs_source: The gcs_source of this GoogleCloudAiplatformV1beta1ImportDataConfig.
        :param import_schema_uri: The import_schema_uri of this GoogleCloudAiplatformV1beta1ImportDataConfig.
        """
        self.openapi_types = {
            'annotation_labels': Dict[str, str],
            'data_item_labels': Dict[str, str],
            'gcs_source': GoogleCloudAiplatformV1beta1GcsSource,
            'import_schema_uri': str
        }

        self.attribute_map = {
            'annotation_labels': 'annotationLabels',
            'data_item_labels': 'dataItemLabels',
            'gcs_source': 'gcsSource',
            'import_schema_uri': 'importSchemaUri'
        }

        self._annotation_labels = annotation_labels
        self._data_item_labels = data_item_labels
        self._gcs_source = gcs_source
        self._import_schema_uri = import_schema_uri

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudAiplatformV1beta1ImportDataConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudAiplatformV1beta1ImportDataConfig of this GoogleCloudAiplatformV1beta1ImportDataConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def annotation_labels(self):
        """Gets the annotation_labels of this GoogleCloudAiplatformV1beta1ImportDataConfig.

        Labels that will be applied to newly imported Annotations. If two Annotations are identical, one of them will be deduped. Two Annotations are considered identical if their payload, payload_schema_uri and all of their labels are the same. These labels will be overridden by Annotation labels specified inside index file referenced by import_schema_uri, e.g. jsonl file.

        :return: The annotation_labels of this GoogleCloudAiplatformV1beta1ImportDataConfig.
        :rtype: Dict[str, str]
        """
        return self._annotation_labels

    @annotation_labels.setter
    def annotation_labels(self, annotation_labels):
        """Sets the annotation_labels of this GoogleCloudAiplatformV1beta1ImportDataConfig.

        Labels that will be applied to newly imported Annotations. If two Annotations are identical, one of them will be deduped. Two Annotations are considered identical if their payload, payload_schema_uri and all of their labels are the same. These labels will be overridden by Annotation labels specified inside index file referenced by import_schema_uri, e.g. jsonl file.

        :param annotation_labels: The annotation_labels of this GoogleCloudAiplatformV1beta1ImportDataConfig.
        :type annotation_labels: Dict[str, str]
        """

        self._annotation_labels = annotation_labels

    @property
    def data_item_labels(self):
        """Gets the data_item_labels of this GoogleCloudAiplatformV1beta1ImportDataConfig.

        Labels that will be applied to newly imported DataItems. If an identical DataItem as one being imported already exists in the Dataset, then these labels will be appended to these of the already existing one, and if labels with identical key is imported before, the old label value will be overwritten. If two DataItems are identical in the same import data operation, the labels will be combined and if key collision happens in this case, one of the values will be picked randomly. Two DataItems are considered identical if their content bytes are identical (e.g. image bytes or pdf bytes). These labels will be overridden by Annotation labels specified inside index file referenced by import_schema_uri, e.g. jsonl file.

        :return: The data_item_labels of this GoogleCloudAiplatformV1beta1ImportDataConfig.
        :rtype: Dict[str, str]
        """
        return self._data_item_labels

    @data_item_labels.setter
    def data_item_labels(self, data_item_labels):
        """Sets the data_item_labels of this GoogleCloudAiplatformV1beta1ImportDataConfig.

        Labels that will be applied to newly imported DataItems. If an identical DataItem as one being imported already exists in the Dataset, then these labels will be appended to these of the already existing one, and if labels with identical key is imported before, the old label value will be overwritten. If two DataItems are identical in the same import data operation, the labels will be combined and if key collision happens in this case, one of the values will be picked randomly. Two DataItems are considered identical if their content bytes are identical (e.g. image bytes or pdf bytes). These labels will be overridden by Annotation labels specified inside index file referenced by import_schema_uri, e.g. jsonl file.

        :param data_item_labels: The data_item_labels of this GoogleCloudAiplatformV1beta1ImportDataConfig.
        :type data_item_labels: Dict[str, str]
        """

        self._data_item_labels = data_item_labels

    @property
    def gcs_source(self):
        """Gets the gcs_source of this GoogleCloudAiplatformV1beta1ImportDataConfig.


        :return: The gcs_source of this GoogleCloudAiplatformV1beta1ImportDataConfig.
        :rtype: GoogleCloudAiplatformV1beta1GcsSource
        """
        return self._gcs_source

    @gcs_source.setter
    def gcs_source(self, gcs_source):
        """Sets the gcs_source of this GoogleCloudAiplatformV1beta1ImportDataConfig.


        :param gcs_source: The gcs_source of this GoogleCloudAiplatformV1beta1ImportDataConfig.
        :type gcs_source: GoogleCloudAiplatformV1beta1GcsSource
        """

        self._gcs_source = gcs_source

    @property
    def import_schema_uri(self):
        """Gets the import_schema_uri of this GoogleCloudAiplatformV1beta1ImportDataConfig.

        Required. Points to a YAML file stored on Google Cloud Storage describing the import format. Validation will be done against the schema. The schema is defined as an [OpenAPI 3.0.2 Schema Object](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.2.md#schemaObject).

        :return: The import_schema_uri of this GoogleCloudAiplatformV1beta1ImportDataConfig.
        :rtype: str
        """
        return self._import_schema_uri

    @import_schema_uri.setter
    def import_schema_uri(self, import_schema_uri):
        """Sets the import_schema_uri of this GoogleCloudAiplatformV1beta1ImportDataConfig.

        Required. Points to a YAML file stored on Google Cloud Storage describing the import format. Validation will be done against the schema. The schema is defined as an [OpenAPI 3.0.2 Schema Object](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.2.md#schemaObject).

        :param import_schema_uri: The import_schema_uri of this GoogleCloudAiplatformV1beta1ImportDataConfig.
        :type import_schema_uri: str
        """

        self._import_schema_uri = import_schema_uri
