# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleCloudAiplatformV1beta1AddContextArtifactsAndExecutionsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, artifacts: List[str]=None, executions: List[str]=None):
        """GoogleCloudAiplatformV1beta1AddContextArtifactsAndExecutionsRequest - a model defined in OpenAPI

        :param artifacts: The artifacts of this GoogleCloudAiplatformV1beta1AddContextArtifactsAndExecutionsRequest.
        :param executions: The executions of this GoogleCloudAiplatformV1beta1AddContextArtifactsAndExecutionsRequest.
        """
        self.openapi_types = {
            'artifacts': List[str],
            'executions': List[str]
        }

        self.attribute_map = {
            'artifacts': 'artifacts',
            'executions': 'executions'
        }

        self._artifacts = artifacts
        self._executions = executions

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudAiplatformV1beta1AddContextArtifactsAndExecutionsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudAiplatformV1beta1AddContextArtifactsAndExecutionsRequest of this GoogleCloudAiplatformV1beta1AddContextArtifactsAndExecutionsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def artifacts(self):
        """Gets the artifacts of this GoogleCloudAiplatformV1beta1AddContextArtifactsAndExecutionsRequest.

        The resource names of the Artifacts to attribute to the Context. Format: `projects/{project}/locations/{location}/metadataStores/{metadatastore}/artifacts/{artifact}`

        :return: The artifacts of this GoogleCloudAiplatformV1beta1AddContextArtifactsAndExecutionsRequest.
        :rtype: List[str]
        """
        return self._artifacts

    @artifacts.setter
    def artifacts(self, artifacts):
        """Sets the artifacts of this GoogleCloudAiplatformV1beta1AddContextArtifactsAndExecutionsRequest.

        The resource names of the Artifacts to attribute to the Context. Format: `projects/{project}/locations/{location}/metadataStores/{metadatastore}/artifacts/{artifact}`

        :param artifacts: The artifacts of this GoogleCloudAiplatformV1beta1AddContextArtifactsAndExecutionsRequest.
        :type artifacts: List[str]
        """

        self._artifacts = artifacts

    @property
    def executions(self):
        """Gets the executions of this GoogleCloudAiplatformV1beta1AddContextArtifactsAndExecutionsRequest.

        The resource names of the Executions to associate with the Context. Format: `projects/{project}/locations/{location}/metadataStores/{metadatastore}/executions/{execution}`

        :return: The executions of this GoogleCloudAiplatformV1beta1AddContextArtifactsAndExecutionsRequest.
        :rtype: List[str]
        """
        return self._executions

    @executions.setter
    def executions(self, executions):
        """Sets the executions of this GoogleCloudAiplatformV1beta1AddContextArtifactsAndExecutionsRequest.

        The resource names of the Executions to associate with the Context. Format: `projects/{project}/locations/{location}/metadataStores/{metadatastore}/executions/{execution}`

        :param executions: The executions of this GoogleCloudAiplatformV1beta1AddContextArtifactsAndExecutionsRequest.
        :type executions: List[str]
        """

        self._executions = executions
