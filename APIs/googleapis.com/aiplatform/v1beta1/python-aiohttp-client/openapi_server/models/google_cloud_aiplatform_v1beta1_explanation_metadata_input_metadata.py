# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_aiplatform_v1beta1_explanation_metadata_input_metadata_feature_value_domain import GoogleCloudAiplatformV1beta1ExplanationMetadataInputMetadataFeatureValueDomain
from openapi_server.models.google_cloud_aiplatform_v1beta1_explanation_metadata_input_metadata_visualization import GoogleCloudAiplatformV1beta1ExplanationMetadataInputMetadataVisualization
from openapi_server import util


class GoogleCloudAiplatformV1beta1ExplanationMetadataInputMetadata(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dense_shape_tensor_name: str=None, encoded_baselines: List[object]=None, encoded_tensor_name: str=None, encoding: str=None, feature_value_domain: GoogleCloudAiplatformV1beta1ExplanationMetadataInputMetadataFeatureValueDomain=None, group_name: str=None, index_feature_mapping: List[str]=None, indices_tensor_name: str=None, input_baselines: List[object]=None, input_tensor_name: str=None, modality: str=None, visualization: GoogleCloudAiplatformV1beta1ExplanationMetadataInputMetadataVisualization=None):
        """GoogleCloudAiplatformV1beta1ExplanationMetadataInputMetadata - a model defined in OpenAPI

        :param dense_shape_tensor_name: The dense_shape_tensor_name of this GoogleCloudAiplatformV1beta1ExplanationMetadataInputMetadata.
        :param encoded_baselines: The encoded_baselines of this GoogleCloudAiplatformV1beta1ExplanationMetadataInputMetadata.
        :param encoded_tensor_name: The encoded_tensor_name of this GoogleCloudAiplatformV1beta1ExplanationMetadataInputMetadata.
        :param encoding: The encoding of this GoogleCloudAiplatformV1beta1ExplanationMetadataInputMetadata.
        :param feature_value_domain: The feature_value_domain of this GoogleCloudAiplatformV1beta1ExplanationMetadataInputMetadata.
        :param group_name: The group_name of this GoogleCloudAiplatformV1beta1ExplanationMetadataInputMetadata.
        :param index_feature_mapping: The index_feature_mapping of this GoogleCloudAiplatformV1beta1ExplanationMetadataInputMetadata.
        :param indices_tensor_name: The indices_tensor_name of this GoogleCloudAiplatformV1beta1ExplanationMetadataInputMetadata.
        :param input_baselines: The input_baselines of this GoogleCloudAiplatformV1beta1ExplanationMetadataInputMetadata.
        :param input_tensor_name: The input_tensor_name of this GoogleCloudAiplatformV1beta1ExplanationMetadataInputMetadata.
        :param modality: The modality of this GoogleCloudAiplatformV1beta1ExplanationMetadataInputMetadata.
        :param visualization: The visualization of this GoogleCloudAiplatformV1beta1ExplanationMetadataInputMetadata.
        """
        self.openapi_types = {
            'dense_shape_tensor_name': str,
            'encoded_baselines': List[object],
            'encoded_tensor_name': str,
            'encoding': str,
            'feature_value_domain': GoogleCloudAiplatformV1beta1ExplanationMetadataInputMetadataFeatureValueDomain,
            'group_name': str,
            'index_feature_mapping': List[str],
            'indices_tensor_name': str,
            'input_baselines': List[object],
            'input_tensor_name': str,
            'modality': str,
            'visualization': GoogleCloudAiplatformV1beta1ExplanationMetadataInputMetadataVisualization
        }

        self.attribute_map = {
            'dense_shape_tensor_name': 'denseShapeTensorName',
            'encoded_baselines': 'encodedBaselines',
            'encoded_tensor_name': 'encodedTensorName',
            'encoding': 'encoding',
            'feature_value_domain': 'featureValueDomain',
            'group_name': 'groupName',
            'index_feature_mapping': 'indexFeatureMapping',
            'indices_tensor_name': 'indicesTensorName',
            'input_baselines': 'inputBaselines',
            'input_tensor_name': 'inputTensorName',
            'modality': 'modality',
            'visualization': 'visualization'
        }

        self._dense_shape_tensor_name = dense_shape_tensor_name
        self._encoded_baselines = encoded_baselines
        self._encoded_tensor_name = encoded_tensor_name
        self._encoding = encoding
        self._feature_value_domain = feature_value_domain
        self._group_name = group_name
        self._index_feature_mapping = index_feature_mapping
        self._indices_tensor_name = indices_tensor_name
        self._input_baselines = input_baselines
        self._input_tensor_name = input_tensor_name
        self._modality = modality
        self._visualization = visualization

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudAiplatformV1beta1ExplanationMetadataInputMetadata':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudAiplatformV1beta1ExplanationMetadataInputMetadata of this GoogleCloudAiplatformV1beta1ExplanationMetadataInputMetadata.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dense_shape_tensor_name(self):
        """Gets the dense_shape_tensor_name of this GoogleCloudAiplatformV1beta1ExplanationMetadataInputMetadata.

        Specifies the shape of the values of the input if the input is a sparse representation. Refer to Tensorflow documentation for more details: https://www.tensorflow.org/api_docs/python/tf/sparse/SparseTensor.

        :return: The dense_shape_tensor_name of this GoogleCloudAiplatformV1beta1ExplanationMetadataInputMetadata.
        :rtype: str
        """
        return self._dense_shape_tensor_name

    @dense_shape_tensor_name.setter
    def dense_shape_tensor_name(self, dense_shape_tensor_name):
        """Sets the dense_shape_tensor_name of this GoogleCloudAiplatformV1beta1ExplanationMetadataInputMetadata.

        Specifies the shape of the values of the input if the input is a sparse representation. Refer to Tensorflow documentation for more details: https://www.tensorflow.org/api_docs/python/tf/sparse/SparseTensor.

        :param dense_shape_tensor_name: The dense_shape_tensor_name of this GoogleCloudAiplatformV1beta1ExplanationMetadataInputMetadata.
        :type dense_shape_tensor_name: str
        """

        self._dense_shape_tensor_name = dense_shape_tensor_name

    @property
    def encoded_baselines(self):
        """Gets the encoded_baselines of this GoogleCloudAiplatformV1beta1ExplanationMetadataInputMetadata.

        A list of baselines for the encoded tensor. The shape of each baseline should match the shape of the encoded tensor. If a scalar is provided, Vertex AI broadcasts to the same shape as the encoded tensor.

        :return: The encoded_baselines of this GoogleCloudAiplatformV1beta1ExplanationMetadataInputMetadata.
        :rtype: List[object]
        """
        return self._encoded_baselines

    @encoded_baselines.setter
    def encoded_baselines(self, encoded_baselines):
        """Sets the encoded_baselines of this GoogleCloudAiplatformV1beta1ExplanationMetadataInputMetadata.

        A list of baselines for the encoded tensor. The shape of each baseline should match the shape of the encoded tensor. If a scalar is provided, Vertex AI broadcasts to the same shape as the encoded tensor.

        :param encoded_baselines: The encoded_baselines of this GoogleCloudAiplatformV1beta1ExplanationMetadataInputMetadata.
        :type encoded_baselines: List[object]
        """

        self._encoded_baselines = encoded_baselines

    @property
    def encoded_tensor_name(self):
        """Gets the encoded_tensor_name of this GoogleCloudAiplatformV1beta1ExplanationMetadataInputMetadata.

        Encoded tensor is a transformation of the input tensor. Must be provided if choosing Integrated Gradients attribution or XRAI attribution and the input tensor is not differentiable. An encoded tensor is generated if the input tensor is encoded by a lookup table.

        :return: The encoded_tensor_name of this GoogleCloudAiplatformV1beta1ExplanationMetadataInputMetadata.
        :rtype: str
        """
        return self._encoded_tensor_name

    @encoded_tensor_name.setter
    def encoded_tensor_name(self, encoded_tensor_name):
        """Sets the encoded_tensor_name of this GoogleCloudAiplatformV1beta1ExplanationMetadataInputMetadata.

        Encoded tensor is a transformation of the input tensor. Must be provided if choosing Integrated Gradients attribution or XRAI attribution and the input tensor is not differentiable. An encoded tensor is generated if the input tensor is encoded by a lookup table.

        :param encoded_tensor_name: The encoded_tensor_name of this GoogleCloudAiplatformV1beta1ExplanationMetadataInputMetadata.
        :type encoded_tensor_name: str
        """

        self._encoded_tensor_name = encoded_tensor_name

    @property
    def encoding(self):
        """Gets the encoding of this GoogleCloudAiplatformV1beta1ExplanationMetadataInputMetadata.

        Defines how the feature is encoded into the input tensor. Defaults to IDENTITY.

        :return: The encoding of this GoogleCloudAiplatformV1beta1ExplanationMetadataInputMetadata.
        :rtype: str
        """
        return self._encoding

    @encoding.setter
    def encoding(self, encoding):
        """Sets the encoding of this GoogleCloudAiplatformV1beta1ExplanationMetadataInputMetadata.

        Defines how the feature is encoded into the input tensor. Defaults to IDENTITY.

        :param encoding: The encoding of this GoogleCloudAiplatformV1beta1ExplanationMetadataInputMetadata.
        :type encoding: str
        """
        allowed_values = ["ENCODING_UNSPECIFIED", "IDENTITY", "BAG_OF_FEATURES", "BAG_OF_FEATURES_SPARSE", "INDICATOR", "COMBINED_EMBEDDING", "CONCAT_EMBEDDING"]  # noqa: E501
        if encoding not in allowed_values:
            raise ValueError(
                "Invalid value for `encoding` ({0}), must be one of {1}"
                .format(encoding, allowed_values)
            )

        self._encoding = encoding

    @property
    def feature_value_domain(self):
        """Gets the feature_value_domain of this GoogleCloudAiplatformV1beta1ExplanationMetadataInputMetadata.


        :return: The feature_value_domain of this GoogleCloudAiplatformV1beta1ExplanationMetadataInputMetadata.
        :rtype: GoogleCloudAiplatformV1beta1ExplanationMetadataInputMetadataFeatureValueDomain
        """
        return self._feature_value_domain

    @feature_value_domain.setter
    def feature_value_domain(self, feature_value_domain):
        """Sets the feature_value_domain of this GoogleCloudAiplatformV1beta1ExplanationMetadataInputMetadata.


        :param feature_value_domain: The feature_value_domain of this GoogleCloudAiplatformV1beta1ExplanationMetadataInputMetadata.
        :type feature_value_domain: GoogleCloudAiplatformV1beta1ExplanationMetadataInputMetadataFeatureValueDomain
        """

        self._feature_value_domain = feature_value_domain

    @property
    def group_name(self):
        """Gets the group_name of this GoogleCloudAiplatformV1beta1ExplanationMetadataInputMetadata.

        Name of the group that the input belongs to. Features with the same group name will be treated as one feature when computing attributions. Features grouped together can have different shapes in value. If provided, there will be one single attribution generated in Attribution.feature_attributions, keyed by the group name.

        :return: The group_name of this GoogleCloudAiplatformV1beta1ExplanationMetadataInputMetadata.
        :rtype: str
        """
        return self._group_name

    @group_name.setter
    def group_name(self, group_name):
        """Sets the group_name of this GoogleCloudAiplatformV1beta1ExplanationMetadataInputMetadata.

        Name of the group that the input belongs to. Features with the same group name will be treated as one feature when computing attributions. Features grouped together can have different shapes in value. If provided, there will be one single attribution generated in Attribution.feature_attributions, keyed by the group name.

        :param group_name: The group_name of this GoogleCloudAiplatformV1beta1ExplanationMetadataInputMetadata.
        :type group_name: str
        """

        self._group_name = group_name

    @property
    def index_feature_mapping(self):
        """Gets the index_feature_mapping of this GoogleCloudAiplatformV1beta1ExplanationMetadataInputMetadata.

        A list of feature names for each index in the input tensor. Required when the input InputMetadata.encoding is BAG_OF_FEATURES, BAG_OF_FEATURES_SPARSE, INDICATOR.

        :return: The index_feature_mapping of this GoogleCloudAiplatformV1beta1ExplanationMetadataInputMetadata.
        :rtype: List[str]
        """
        return self._index_feature_mapping

    @index_feature_mapping.setter
    def index_feature_mapping(self, index_feature_mapping):
        """Sets the index_feature_mapping of this GoogleCloudAiplatformV1beta1ExplanationMetadataInputMetadata.

        A list of feature names for each index in the input tensor. Required when the input InputMetadata.encoding is BAG_OF_FEATURES, BAG_OF_FEATURES_SPARSE, INDICATOR.

        :param index_feature_mapping: The index_feature_mapping of this GoogleCloudAiplatformV1beta1ExplanationMetadataInputMetadata.
        :type index_feature_mapping: List[str]
        """

        self._index_feature_mapping = index_feature_mapping

    @property
    def indices_tensor_name(self):
        """Gets the indices_tensor_name of this GoogleCloudAiplatformV1beta1ExplanationMetadataInputMetadata.

        Specifies the index of the values of the input tensor. Required when the input tensor is a sparse representation. Refer to Tensorflow documentation for more details: https://www.tensorflow.org/api_docs/python/tf/sparse/SparseTensor.

        :return: The indices_tensor_name of this GoogleCloudAiplatformV1beta1ExplanationMetadataInputMetadata.
        :rtype: str
        """
        return self._indices_tensor_name

    @indices_tensor_name.setter
    def indices_tensor_name(self, indices_tensor_name):
        """Sets the indices_tensor_name of this GoogleCloudAiplatformV1beta1ExplanationMetadataInputMetadata.

        Specifies the index of the values of the input tensor. Required when the input tensor is a sparse representation. Refer to Tensorflow documentation for more details: https://www.tensorflow.org/api_docs/python/tf/sparse/SparseTensor.

        :param indices_tensor_name: The indices_tensor_name of this GoogleCloudAiplatformV1beta1ExplanationMetadataInputMetadata.
        :type indices_tensor_name: str
        """

        self._indices_tensor_name = indices_tensor_name

    @property
    def input_baselines(self):
        """Gets the input_baselines of this GoogleCloudAiplatformV1beta1ExplanationMetadataInputMetadata.

        Baseline inputs for this feature. If no baseline is specified, Vertex AI chooses the baseline for this feature. If multiple baselines are specified, Vertex AI returns the average attributions across them in Attribution.feature_attributions. For Vertex AI-provided Tensorflow images (both 1.x and 2.x), the shape of each baseline must match the shape of the input tensor. If a scalar is provided, we broadcast to the same shape as the input tensor. For custom images, the element of the baselines must be in the same format as the feature's input in the instance[]. The schema of any single instance may be specified via Endpoint's DeployedModels' Model's PredictSchemata's instance_schema_uri.

        :return: The input_baselines of this GoogleCloudAiplatformV1beta1ExplanationMetadataInputMetadata.
        :rtype: List[object]
        """
        return self._input_baselines

    @input_baselines.setter
    def input_baselines(self, input_baselines):
        """Sets the input_baselines of this GoogleCloudAiplatformV1beta1ExplanationMetadataInputMetadata.

        Baseline inputs for this feature. If no baseline is specified, Vertex AI chooses the baseline for this feature. If multiple baselines are specified, Vertex AI returns the average attributions across them in Attribution.feature_attributions. For Vertex AI-provided Tensorflow images (both 1.x and 2.x), the shape of each baseline must match the shape of the input tensor. If a scalar is provided, we broadcast to the same shape as the input tensor. For custom images, the element of the baselines must be in the same format as the feature's input in the instance[]. The schema of any single instance may be specified via Endpoint's DeployedModels' Model's PredictSchemata's instance_schema_uri.

        :param input_baselines: The input_baselines of this GoogleCloudAiplatformV1beta1ExplanationMetadataInputMetadata.
        :type input_baselines: List[object]
        """

        self._input_baselines = input_baselines

    @property
    def input_tensor_name(self):
        """Gets the input_tensor_name of this GoogleCloudAiplatformV1beta1ExplanationMetadataInputMetadata.

        Name of the input tensor for this feature. Required and is only applicable to Vertex AI-provided images for Tensorflow.

        :return: The input_tensor_name of this GoogleCloudAiplatformV1beta1ExplanationMetadataInputMetadata.
        :rtype: str
        """
        return self._input_tensor_name

    @input_tensor_name.setter
    def input_tensor_name(self, input_tensor_name):
        """Sets the input_tensor_name of this GoogleCloudAiplatformV1beta1ExplanationMetadataInputMetadata.

        Name of the input tensor for this feature. Required and is only applicable to Vertex AI-provided images for Tensorflow.

        :param input_tensor_name: The input_tensor_name of this GoogleCloudAiplatformV1beta1ExplanationMetadataInputMetadata.
        :type input_tensor_name: str
        """

        self._input_tensor_name = input_tensor_name

    @property
    def modality(self):
        """Gets the modality of this GoogleCloudAiplatformV1beta1ExplanationMetadataInputMetadata.

        Modality of the feature. Valid values are: numeric, image. Defaults to numeric.

        :return: The modality of this GoogleCloudAiplatformV1beta1ExplanationMetadataInputMetadata.
        :rtype: str
        """
        return self._modality

    @modality.setter
    def modality(self, modality):
        """Sets the modality of this GoogleCloudAiplatformV1beta1ExplanationMetadataInputMetadata.

        Modality of the feature. Valid values are: numeric, image. Defaults to numeric.

        :param modality: The modality of this GoogleCloudAiplatformV1beta1ExplanationMetadataInputMetadata.
        :type modality: str
        """

        self._modality = modality

    @property
    def visualization(self):
        """Gets the visualization of this GoogleCloudAiplatformV1beta1ExplanationMetadataInputMetadata.


        :return: The visualization of this GoogleCloudAiplatformV1beta1ExplanationMetadataInputMetadata.
        :rtype: GoogleCloudAiplatformV1beta1ExplanationMetadataInputMetadataVisualization
        """
        return self._visualization

    @visualization.setter
    def visualization(self, visualization):
        """Sets the visualization of this GoogleCloudAiplatformV1beta1ExplanationMetadataInputMetadata.


        :param visualization: The visualization of this GoogleCloudAiplatformV1beta1ExplanationMetadataInputMetadata.
        :type visualization: GoogleCloudAiplatformV1beta1ExplanationMetadataInputMetadataVisualization
        """

        self._visualization = visualization
