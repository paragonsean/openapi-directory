# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CloudAiNlLlmProtoServiceRaiSignal(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, confidence: str=None, flagged: bool=None, rai_category: str=None, score: float=None):
        """CloudAiNlLlmProtoServiceRaiSignal - a model defined in OpenAPI

        :param confidence: The confidence of this CloudAiNlLlmProtoServiceRaiSignal.
        :param flagged: The flagged of this CloudAiNlLlmProtoServiceRaiSignal.
        :param rai_category: The rai_category of this CloudAiNlLlmProtoServiceRaiSignal.
        :param score: The score of this CloudAiNlLlmProtoServiceRaiSignal.
        """
        self.openapi_types = {
            'confidence': str,
            'flagged': bool,
            'rai_category': str,
            'score': float
        }

        self.attribute_map = {
            'confidence': 'confidence',
            'flagged': 'flagged',
            'rai_category': 'raiCategory',
            'score': 'score'
        }

        self._confidence = confidence
        self._flagged = flagged
        self._rai_category = rai_category
        self._score = score

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CloudAiNlLlmProtoServiceRaiSignal':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CloudAiNlLlmProtoServiceRaiSignal of this CloudAiNlLlmProtoServiceRaiSignal.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def confidence(self):
        """Gets the confidence of this CloudAiNlLlmProtoServiceRaiSignal.

        The confidence level for the RAI category.

        :return: The confidence of this CloudAiNlLlmProtoServiceRaiSignal.
        :rtype: str
        """
        return self._confidence

    @confidence.setter
    def confidence(self, confidence):
        """Sets the confidence of this CloudAiNlLlmProtoServiceRaiSignal.

        The confidence level for the RAI category.

        :param confidence: The confidence of this CloudAiNlLlmProtoServiceRaiSignal.
        :type confidence: str
        """
        allowed_values = ["CONFIDENCE_UNSPECIFIED", "CONFIDENCE_NONE", "CONFIDENCE_LOW", "CONFIDENCE_MEDIUM", "CONFIDENCE_HIGH"]  # noqa: E501
        if confidence not in allowed_values:
            raise ValueError(
                "Invalid value for `confidence` ({0}), must be one of {1}"
                .format(confidence, allowed_values)
            )

        self._confidence = confidence

    @property
    def flagged(self):
        """Gets the flagged of this CloudAiNlLlmProtoServiceRaiSignal.

        Whether the category is flagged as being present. Currently, this is set to true if score >= 0.5.

        :return: The flagged of this CloudAiNlLlmProtoServiceRaiSignal.
        :rtype: bool
        """
        return self._flagged

    @flagged.setter
    def flagged(self, flagged):
        """Sets the flagged of this CloudAiNlLlmProtoServiceRaiSignal.

        Whether the category is flagged as being present. Currently, this is set to true if score >= 0.5.

        :param flagged: The flagged of this CloudAiNlLlmProtoServiceRaiSignal.
        :type flagged: bool
        """

        self._flagged = flagged

    @property
    def rai_category(self):
        """Gets the rai_category of this CloudAiNlLlmProtoServiceRaiSignal.

        The RAI category.

        :return: The rai_category of this CloudAiNlLlmProtoServiceRaiSignal.
        :rtype: str
        """
        return self._rai_category

    @rai_category.setter
    def rai_category(self, rai_category):
        """Sets the rai_category of this CloudAiNlLlmProtoServiceRaiSignal.

        The RAI category.

        :param rai_category: The rai_category of this CloudAiNlLlmProtoServiceRaiSignal.
        :type rai_category: str
        """
        allowed_values = ["RAI_CATEGORY_UNSPECIFIED", "TOXIC", "SEXUALLY_EXPLICIT", "HATE_SPEECH", "VIOLENT", "PROFANITY", "HARASSMENT", "DEATH_HARM_TRAGEDY", "FIREARMS_WEAPONS", "PUBLIC_SAFETY", "HEALTH", "RELIGIOUS_BELIEF", "ILLICIT_DRUGS", "WAR_CONFLICT", "POLITICS", "FINANCE", "LEGAL", "CSAI", "FRINGE", "THREAT", "SEVERE_TOXICITY", "TOXICITY", "SEXUAL", "INSULT", "DEROGATORY", "IDENTITY_ATTACK", "VIOLENCE_ABUSE", "OBSCENE", "DRUGS", "CSAM", "SPII", "DANGEROUS_CONTENT", "DANGEROUS_CONTENT_SEVERITY", "INSULT_SEVERITY", "DEROGATORY_SEVERITY", "SEXUAL_SEVERITY"]  # noqa: E501
        if rai_category not in allowed_values:
            raise ValueError(
                "Invalid value for `rai_category` ({0}), must be one of {1}"
                .format(rai_category, allowed_values)
            )

        self._rai_category = rai_category

    @property
    def score(self):
        """Gets the score of this CloudAiNlLlmProtoServiceRaiSignal.

        The score for the category, in the range [0.0, 1.0].

        :return: The score of this CloudAiNlLlmProtoServiceRaiSignal.
        :rtype: float
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this CloudAiNlLlmProtoServiceRaiSignal.

        The score for the category, in the range [0.0, 1.0].

        :param score: The score of this CloudAiNlLlmProtoServiceRaiSignal.
        :type score: float
        """

        self._score = score
