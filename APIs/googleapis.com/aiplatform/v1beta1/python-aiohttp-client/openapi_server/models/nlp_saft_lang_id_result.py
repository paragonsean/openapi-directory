# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.nlp_saft_language_span import NlpSaftLanguageSpan
from openapi_server.models.nlp_saft_language_span_sequence import NlpSaftLanguageSpanSequence
from openapi_server import util


class NlpSaftLangIdResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, model_version: str=None, predictions: List[NlpSaftLanguageSpan]=None, span_predictions: List[NlpSaftLanguageSpanSequence]=None):
        """NlpSaftLangIdResult - a model defined in OpenAPI

        :param model_version: The model_version of this NlpSaftLangIdResult.
        :param predictions: The predictions of this NlpSaftLangIdResult.
        :param span_predictions: The span_predictions of this NlpSaftLangIdResult.
        """
        self.openapi_types = {
            'model_version': str,
            'predictions': List[NlpSaftLanguageSpan],
            'span_predictions': List[NlpSaftLanguageSpanSequence]
        }

        self.attribute_map = {
            'model_version': 'modelVersion',
            'predictions': 'predictions',
            'span_predictions': 'spanPredictions'
        }

        self._model_version = model_version
        self._predictions = predictions
        self._span_predictions = span_predictions

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NlpSaftLangIdResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NlpSaftLangIdResult of this NlpSaftLangIdResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def model_version(self):
        """Gets the model_version of this NlpSaftLangIdResult.

        The version of the model used to create these annotations.

        :return: The model_version of this NlpSaftLangIdResult.
        :rtype: str
        """
        return self._model_version

    @model_version.setter
    def model_version(self, model_version):
        """Sets the model_version of this NlpSaftLangIdResult.

        The version of the model used to create these annotations.

        :param model_version: The model_version of this NlpSaftLangIdResult.
        :type model_version: str
        """
        allowed_values = ["VERSION_UNSPECIFIED", "INDEXING_20181017", "INDEXING_20191206", "INDEXING_20200313", "INDEXING_20210618", "STANDARD_20220516"]  # noqa: E501
        if model_version not in allowed_values:
            raise ValueError(
                "Invalid value for `model_version` ({0}), must be one of {1}"
                .format(model_version, allowed_values)
            )

        self._model_version = model_version

    @property
    def predictions(self):
        """Gets the predictions of this NlpSaftLangIdResult.

        This field stores the n-best list of possible BCP 47 language code strings for a given input sorted in descending order according to each code's respective probability.

        :return: The predictions of this NlpSaftLangIdResult.
        :rtype: List[NlpSaftLanguageSpan]
        """
        return self._predictions

    @predictions.setter
    def predictions(self, predictions):
        """Sets the predictions of this NlpSaftLangIdResult.

        This field stores the n-best list of possible BCP 47 language code strings for a given input sorted in descending order according to each code's respective probability.

        :param predictions: The predictions of this NlpSaftLangIdResult.
        :type predictions: List[NlpSaftLanguageSpan]
        """

        self._predictions = predictions

    @property
    def span_predictions(self):
        """Gets the span_predictions of this NlpSaftLangIdResult.

        This field stores language predictions of subspans of the input, when available. Each LanguageSpanSequence is a sequence of LanguageSpans. A particular sequence of LanguageSpans has an associated probability, and need not necessarily cover the entire input. If no language could be predicted for any span, then this field may be empty.

        :return: The span_predictions of this NlpSaftLangIdResult.
        :rtype: List[NlpSaftLanguageSpanSequence]
        """
        return self._span_predictions

    @span_predictions.setter
    def span_predictions(self, span_predictions):
        """Sets the span_predictions of this NlpSaftLangIdResult.

        This field stores language predictions of subspans of the input, when available. Each LanguageSpanSequence is a sequence of LanguageSpans. A particular sequence of LanguageSpans has an associated probability, and need not necessarily cover the entire input. If no language could be predicted for any span, then this field may be empty.

        :param span_predictions: The span_predictions of this NlpSaftLangIdResult.
        :type span_predictions: List[NlpSaftLanguageSpanSequence]
        """

        self._span_predictions = span_predictions
