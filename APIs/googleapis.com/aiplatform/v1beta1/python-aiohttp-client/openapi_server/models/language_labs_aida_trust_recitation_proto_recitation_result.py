# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.language_labs_aida_trust_recitation_proto_segment_result import LanguageLabsAidaTrustRecitationProtoSegmentResult
from openapi_server import util


class LanguageLabsAidaTrustRecitationProtoRecitationResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dynamic_segment_results: List[LanguageLabsAidaTrustRecitationProtoSegmentResult]=None, recitation_action: str=None, training_segment_results: List[LanguageLabsAidaTrustRecitationProtoSegmentResult]=None):
        """LanguageLabsAidaTrustRecitationProtoRecitationResult - a model defined in OpenAPI

        :param dynamic_segment_results: The dynamic_segment_results of this LanguageLabsAidaTrustRecitationProtoRecitationResult.
        :param recitation_action: The recitation_action of this LanguageLabsAidaTrustRecitationProtoRecitationResult.
        :param training_segment_results: The training_segment_results of this LanguageLabsAidaTrustRecitationProtoRecitationResult.
        """
        self.openapi_types = {
            'dynamic_segment_results': List[LanguageLabsAidaTrustRecitationProtoSegmentResult],
            'recitation_action': str,
            'training_segment_results': List[LanguageLabsAidaTrustRecitationProtoSegmentResult]
        }

        self.attribute_map = {
            'dynamic_segment_results': 'dynamicSegmentResults',
            'recitation_action': 'recitationAction',
            'training_segment_results': 'trainingSegmentResults'
        }

        self._dynamic_segment_results = dynamic_segment_results
        self._recitation_action = recitation_action
        self._training_segment_results = training_segment_results

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LanguageLabsAidaTrustRecitationProtoRecitationResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LanguageLabsAidaTrustRecitationProtoRecitationResult of this LanguageLabsAidaTrustRecitationProtoRecitationResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dynamic_segment_results(self):
        """Gets the dynamic_segment_results of this LanguageLabsAidaTrustRecitationProtoRecitationResult.


        :return: The dynamic_segment_results of this LanguageLabsAidaTrustRecitationProtoRecitationResult.
        :rtype: List[LanguageLabsAidaTrustRecitationProtoSegmentResult]
        """
        return self._dynamic_segment_results

    @dynamic_segment_results.setter
    def dynamic_segment_results(self, dynamic_segment_results):
        """Sets the dynamic_segment_results of this LanguageLabsAidaTrustRecitationProtoRecitationResult.


        :param dynamic_segment_results: The dynamic_segment_results of this LanguageLabsAidaTrustRecitationProtoRecitationResult.
        :type dynamic_segment_results: List[LanguageLabsAidaTrustRecitationProtoSegmentResult]
        """

        self._dynamic_segment_results = dynamic_segment_results

    @property
    def recitation_action(self):
        """Gets the recitation_action of this LanguageLabsAidaTrustRecitationProtoRecitationResult.

        The recitation action for one given input. When its segments contain different actions, the overall action will be returned in the precedence of BLOCK > CITE > NO_ACTION. When the given input is not found in any source, the recitation action will not be specified.

        :return: The recitation_action of this LanguageLabsAidaTrustRecitationProtoRecitationResult.
        :rtype: str
        """
        return self._recitation_action

    @recitation_action.setter
    def recitation_action(self, recitation_action):
        """Sets the recitation_action of this LanguageLabsAidaTrustRecitationProtoRecitationResult.

        The recitation action for one given input. When its segments contain different actions, the overall action will be returned in the precedence of BLOCK > CITE > NO_ACTION. When the given input is not found in any source, the recitation action will not be specified.

        :param recitation_action: The recitation_action of this LanguageLabsAidaTrustRecitationProtoRecitationResult.
        :type recitation_action: str
        """
        allowed_values = ["ACTION_UNSPECIFIED", "CITE", "BLOCK", "NO_ACTION", "EXEMPT_FOUND_IN_PROMPT"]  # noqa: E501
        if recitation_action not in allowed_values:
            raise ValueError(
                "Invalid value for `recitation_action` ({0}), must be one of {1}"
                .format(recitation_action, allowed_values)
            )

        self._recitation_action = recitation_action

    @property
    def training_segment_results(self):
        """Gets the training_segment_results of this LanguageLabsAidaTrustRecitationProtoRecitationResult.


        :return: The training_segment_results of this LanguageLabsAidaTrustRecitationProtoRecitationResult.
        :rtype: List[LanguageLabsAidaTrustRecitationProtoSegmentResult]
        """
        return self._training_segment_results

    @training_segment_results.setter
    def training_segment_results(self, training_segment_results):
        """Sets the training_segment_results of this LanguageLabsAidaTrustRecitationProtoRecitationResult.


        :param training_segment_results: The training_segment_results of this LanguageLabsAidaTrustRecitationProtoRecitationResult.
        :type training_segment_results: List[LanguageLabsAidaTrustRecitationProtoSegmentResult]
        """

        self._training_segment_results = training_segment_results
