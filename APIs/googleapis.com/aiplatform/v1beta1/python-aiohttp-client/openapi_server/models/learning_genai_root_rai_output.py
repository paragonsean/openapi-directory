# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.learning_genai_root_harm import LearningGenaiRootHarm
from openapi_server import util


class LearningGenaiRootRAIOutput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allowed: bool=None, harm: LearningGenaiRootHarm=None, name: str=None, score: float=None):
        """LearningGenaiRootRAIOutput - a model defined in OpenAPI

        :param allowed: The allowed of this LearningGenaiRootRAIOutput.
        :param harm: The harm of this LearningGenaiRootRAIOutput.
        :param name: The name of this LearningGenaiRootRAIOutput.
        :param score: The score of this LearningGenaiRootRAIOutput.
        """
        self.openapi_types = {
            'allowed': bool,
            'harm': LearningGenaiRootHarm,
            'name': str,
            'score': float
        }

        self.attribute_map = {
            'allowed': 'allowed',
            'harm': 'harm',
            'name': 'name',
            'score': 'score'
        }

        self._allowed = allowed
        self._harm = harm
        self._name = name
        self._score = score

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LearningGenaiRootRAIOutput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LearningGenaiRootRAIOutput of this LearningGenaiRootRAIOutput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allowed(self):
        """Gets the allowed of this LearningGenaiRootRAIOutput.


        :return: The allowed of this LearningGenaiRootRAIOutput.
        :rtype: bool
        """
        return self._allowed

    @allowed.setter
    def allowed(self, allowed):
        """Sets the allowed of this LearningGenaiRootRAIOutput.


        :param allowed: The allowed of this LearningGenaiRootRAIOutput.
        :type allowed: bool
        """

        self._allowed = allowed

    @property
    def harm(self):
        """Gets the harm of this LearningGenaiRootRAIOutput.


        :return: The harm of this LearningGenaiRootRAIOutput.
        :rtype: LearningGenaiRootHarm
        """
        return self._harm

    @harm.setter
    def harm(self, harm):
        """Sets the harm of this LearningGenaiRootRAIOutput.


        :param harm: The harm of this LearningGenaiRootRAIOutput.
        :type harm: LearningGenaiRootHarm
        """

        self._harm = harm

    @property
    def name(self):
        """Gets the name of this LearningGenaiRootRAIOutput.


        :return: The name of this LearningGenaiRootRAIOutput.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this LearningGenaiRootRAIOutput.


        :param name: The name of this LearningGenaiRootRAIOutput.
        :type name: str
        """

        self._name = name

    @property
    def score(self):
        """Gets the score of this LearningGenaiRootRAIOutput.


        :return: The score of this LearningGenaiRootRAIOutput.
        :rtype: float
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this LearningGenaiRootRAIOutput.


        :param score: The score of this LearningGenaiRootRAIOutput.
        :type score: float
        """

        self._score = score
