/**
 * Vertex AI API
 * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudAiplatformV1NasTrial.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudAiplatformV1NasTrial::OAIGoogleCloudAiplatformV1NasTrial(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudAiplatformV1NasTrial::OAIGoogleCloudAiplatformV1NasTrial() {
    this->initializeModel();
}

OAIGoogleCloudAiplatformV1NasTrial::~OAIGoogleCloudAiplatformV1NasTrial() {}

void OAIGoogleCloudAiplatformV1NasTrial::initializeModel() {

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_final_measurement_isSet = false;
    m_final_measurement_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;
}

void OAIGoogleCloudAiplatformV1NasTrial::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudAiplatformV1NasTrial::fromJsonObject(QJsonObject json) {

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("endTime")]);
    m_end_time_isSet = !json[QString("endTime")].isNull() && m_end_time_isValid;

    m_final_measurement_isValid = ::OpenAPI::fromJsonValue(m_final_measurement, json[QString("finalMeasurement")]);
    m_final_measurement_isSet = !json[QString("finalMeasurement")].isNull() && m_final_measurement_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;
}

QString OAIGoogleCloudAiplatformV1NasTrial::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudAiplatformV1NasTrial::asJsonObject() const {
    QJsonObject obj;
    if (m_end_time_isSet) {
        obj.insert(QString("endTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_final_measurement.isSet()) {
        obj.insert(QString("finalMeasurement"), ::OpenAPI::toJsonValue(m_final_measurement));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    return obj;
}

QString OAIGoogleCloudAiplatformV1NasTrial::getEndTime() const {
    return m_end_time;
}
void OAIGoogleCloudAiplatformV1NasTrial::setEndTime(const QString &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIGoogleCloudAiplatformV1NasTrial::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIGoogleCloudAiplatformV1NasTrial::is_end_time_Valid() const{
    return m_end_time_isValid;
}

OAIGoogleCloudAiplatformV1Measurement OAIGoogleCloudAiplatformV1NasTrial::getFinalMeasurement() const {
    return m_final_measurement;
}
void OAIGoogleCloudAiplatformV1NasTrial::setFinalMeasurement(const OAIGoogleCloudAiplatformV1Measurement &final_measurement) {
    m_final_measurement = final_measurement;
    m_final_measurement_isSet = true;
}

bool OAIGoogleCloudAiplatformV1NasTrial::is_final_measurement_Set() const{
    return m_final_measurement_isSet;
}

bool OAIGoogleCloudAiplatformV1NasTrial::is_final_measurement_Valid() const{
    return m_final_measurement_isValid;
}

QString OAIGoogleCloudAiplatformV1NasTrial::getId() const {
    return m_id;
}
void OAIGoogleCloudAiplatformV1NasTrial::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIGoogleCloudAiplatformV1NasTrial::is_id_Set() const{
    return m_id_isSet;
}

bool OAIGoogleCloudAiplatformV1NasTrial::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIGoogleCloudAiplatformV1NasTrial::getStartTime() const {
    return m_start_time;
}
void OAIGoogleCloudAiplatformV1NasTrial::setStartTime(const QString &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIGoogleCloudAiplatformV1NasTrial::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIGoogleCloudAiplatformV1NasTrial::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QString OAIGoogleCloudAiplatformV1NasTrial::getState() const {
    return m_state;
}
void OAIGoogleCloudAiplatformV1NasTrial::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIGoogleCloudAiplatformV1NasTrial::is_state_Set() const{
    return m_state_isSet;
}

bool OAIGoogleCloudAiplatformV1NasTrial::is_state_Valid() const{
    return m_state_isValid;
}

bool OAIGoogleCloudAiplatformV1NasTrial::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_final_measurement.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudAiplatformV1NasTrial::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
