/**
 * Vertex AI API
 * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILearningGenaiRootCodeyCheckpoint.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILearningGenaiRootCodeyCheckpoint::OAILearningGenaiRootCodeyCheckpoint(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILearningGenaiRootCodeyCheckpoint::OAILearningGenaiRootCodeyCheckpoint() {
    this->initializeModel();
}

OAILearningGenaiRootCodeyCheckpoint::~OAILearningGenaiRootCodeyCheckpoint() {}

void OAILearningGenaiRootCodeyCheckpoint::initializeModel() {

    m_codey_truncator_metadata_isSet = false;
    m_codey_truncator_metadata_isValid = false;

    m_current_sample_isSet = false;
    m_current_sample_isValid = false;

    m_post_inference_step_isSet = false;
    m_post_inference_step_isValid = false;
}

void OAILearningGenaiRootCodeyCheckpoint::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILearningGenaiRootCodeyCheckpoint::fromJsonObject(QJsonObject json) {

    m_codey_truncator_metadata_isValid = ::OpenAPI::fromJsonValue(m_codey_truncator_metadata, json[QString("codeyTruncatorMetadata")]);
    m_codey_truncator_metadata_isSet = !json[QString("codeyTruncatorMetadata")].isNull() && m_codey_truncator_metadata_isValid;

    m_current_sample_isValid = ::OpenAPI::fromJsonValue(m_current_sample, json[QString("currentSample")]);
    m_current_sample_isSet = !json[QString("currentSample")].isNull() && m_current_sample_isValid;

    m_post_inference_step_isValid = ::OpenAPI::fromJsonValue(m_post_inference_step, json[QString("postInferenceStep")]);
    m_post_inference_step_isSet = !json[QString("postInferenceStep")].isNull() && m_post_inference_step_isValid;
}

QString OAILearningGenaiRootCodeyCheckpoint::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILearningGenaiRootCodeyCheckpoint::asJsonObject() const {
    QJsonObject obj;
    if (m_codey_truncator_metadata.isSet()) {
        obj.insert(QString("codeyTruncatorMetadata"), ::OpenAPI::toJsonValue(m_codey_truncator_metadata));
    }
    if (m_current_sample_isSet) {
        obj.insert(QString("currentSample"), ::OpenAPI::toJsonValue(m_current_sample));
    }
    if (m_post_inference_step_isSet) {
        obj.insert(QString("postInferenceStep"), ::OpenAPI::toJsonValue(m_post_inference_step));
    }
    return obj;
}

OAILearningGenaiRootCodeyTruncatorMetadata OAILearningGenaiRootCodeyCheckpoint::getCodeyTruncatorMetadata() const {
    return m_codey_truncator_metadata;
}
void OAILearningGenaiRootCodeyCheckpoint::setCodeyTruncatorMetadata(const OAILearningGenaiRootCodeyTruncatorMetadata &codey_truncator_metadata) {
    m_codey_truncator_metadata = codey_truncator_metadata;
    m_codey_truncator_metadata_isSet = true;
}

bool OAILearningGenaiRootCodeyCheckpoint::is_codey_truncator_metadata_Set() const{
    return m_codey_truncator_metadata_isSet;
}

bool OAILearningGenaiRootCodeyCheckpoint::is_codey_truncator_metadata_Valid() const{
    return m_codey_truncator_metadata_isValid;
}

QString OAILearningGenaiRootCodeyCheckpoint::getCurrentSample() const {
    return m_current_sample;
}
void OAILearningGenaiRootCodeyCheckpoint::setCurrentSample(const QString &current_sample) {
    m_current_sample = current_sample;
    m_current_sample_isSet = true;
}

bool OAILearningGenaiRootCodeyCheckpoint::is_current_sample_Set() const{
    return m_current_sample_isSet;
}

bool OAILearningGenaiRootCodeyCheckpoint::is_current_sample_Valid() const{
    return m_current_sample_isValid;
}

QString OAILearningGenaiRootCodeyCheckpoint::getPostInferenceStep() const {
    return m_post_inference_step;
}
void OAILearningGenaiRootCodeyCheckpoint::setPostInferenceStep(const QString &post_inference_step) {
    m_post_inference_step = post_inference_step;
    m_post_inference_step_isSet = true;
}

bool OAILearningGenaiRootCodeyCheckpoint::is_post_inference_step_Set() const{
    return m_post_inference_step_isSet;
}

bool OAILearningGenaiRootCodeyCheckpoint::is_post_inference_step_Valid() const{
    return m_post_inference_step_isValid;
}

bool OAILearningGenaiRootCodeyCheckpoint::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_codey_truncator_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_sample_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_post_inference_step_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILearningGenaiRootCodeyCheckpoint::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
