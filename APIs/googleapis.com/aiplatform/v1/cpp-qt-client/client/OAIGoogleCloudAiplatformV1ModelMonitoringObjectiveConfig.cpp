/**
 * Vertex AI API
 * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudAiplatformV1ModelMonitoringObjectiveConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudAiplatformV1ModelMonitoringObjectiveConfig::OAIGoogleCloudAiplatformV1ModelMonitoringObjectiveConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudAiplatformV1ModelMonitoringObjectiveConfig::OAIGoogleCloudAiplatformV1ModelMonitoringObjectiveConfig() {
    this->initializeModel();
}

OAIGoogleCloudAiplatformV1ModelMonitoringObjectiveConfig::~OAIGoogleCloudAiplatformV1ModelMonitoringObjectiveConfig() {}

void OAIGoogleCloudAiplatformV1ModelMonitoringObjectiveConfig::initializeModel() {

    m_explanation_config_isSet = false;
    m_explanation_config_isValid = false;

    m_prediction_drift_detection_config_isSet = false;
    m_prediction_drift_detection_config_isValid = false;

    m_training_dataset_isSet = false;
    m_training_dataset_isValid = false;

    m_training_prediction_skew_detection_config_isSet = false;
    m_training_prediction_skew_detection_config_isValid = false;
}

void OAIGoogleCloudAiplatformV1ModelMonitoringObjectiveConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudAiplatformV1ModelMonitoringObjectiveConfig::fromJsonObject(QJsonObject json) {

    m_explanation_config_isValid = ::OpenAPI::fromJsonValue(m_explanation_config, json[QString("explanationConfig")]);
    m_explanation_config_isSet = !json[QString("explanationConfig")].isNull() && m_explanation_config_isValid;

    m_prediction_drift_detection_config_isValid = ::OpenAPI::fromJsonValue(m_prediction_drift_detection_config, json[QString("predictionDriftDetectionConfig")]);
    m_prediction_drift_detection_config_isSet = !json[QString("predictionDriftDetectionConfig")].isNull() && m_prediction_drift_detection_config_isValid;

    m_training_dataset_isValid = ::OpenAPI::fromJsonValue(m_training_dataset, json[QString("trainingDataset")]);
    m_training_dataset_isSet = !json[QString("trainingDataset")].isNull() && m_training_dataset_isValid;

    m_training_prediction_skew_detection_config_isValid = ::OpenAPI::fromJsonValue(m_training_prediction_skew_detection_config, json[QString("trainingPredictionSkewDetectionConfig")]);
    m_training_prediction_skew_detection_config_isSet = !json[QString("trainingPredictionSkewDetectionConfig")].isNull() && m_training_prediction_skew_detection_config_isValid;
}

QString OAIGoogleCloudAiplatformV1ModelMonitoringObjectiveConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudAiplatformV1ModelMonitoringObjectiveConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_explanation_config.isSet()) {
        obj.insert(QString("explanationConfig"), ::OpenAPI::toJsonValue(m_explanation_config));
    }
    if (m_prediction_drift_detection_config.isSet()) {
        obj.insert(QString("predictionDriftDetectionConfig"), ::OpenAPI::toJsonValue(m_prediction_drift_detection_config));
    }
    if (m_training_dataset.isSet()) {
        obj.insert(QString("trainingDataset"), ::OpenAPI::toJsonValue(m_training_dataset));
    }
    if (m_training_prediction_skew_detection_config.isSet()) {
        obj.insert(QString("trainingPredictionSkewDetectionConfig"), ::OpenAPI::toJsonValue(m_training_prediction_skew_detection_config));
    }
    return obj;
}

OAIGoogleCloudAiplatformV1ModelMonitoringObjectiveConfigExplanationConfig OAIGoogleCloudAiplatformV1ModelMonitoringObjectiveConfig::getExplanationConfig() const {
    return m_explanation_config;
}
void OAIGoogleCloudAiplatformV1ModelMonitoringObjectiveConfig::setExplanationConfig(const OAIGoogleCloudAiplatformV1ModelMonitoringObjectiveConfigExplanationConfig &explanation_config) {
    m_explanation_config = explanation_config;
    m_explanation_config_isSet = true;
}

bool OAIGoogleCloudAiplatformV1ModelMonitoringObjectiveConfig::is_explanation_config_Set() const{
    return m_explanation_config_isSet;
}

bool OAIGoogleCloudAiplatformV1ModelMonitoringObjectiveConfig::is_explanation_config_Valid() const{
    return m_explanation_config_isValid;
}

OAIGoogleCloudAiplatformV1ModelMonitoringObjectiveConfigPredictionDriftDetectionConfig OAIGoogleCloudAiplatformV1ModelMonitoringObjectiveConfig::getPredictionDriftDetectionConfig() const {
    return m_prediction_drift_detection_config;
}
void OAIGoogleCloudAiplatformV1ModelMonitoringObjectiveConfig::setPredictionDriftDetectionConfig(const OAIGoogleCloudAiplatformV1ModelMonitoringObjectiveConfigPredictionDriftDetectionConfig &prediction_drift_detection_config) {
    m_prediction_drift_detection_config = prediction_drift_detection_config;
    m_prediction_drift_detection_config_isSet = true;
}

bool OAIGoogleCloudAiplatformV1ModelMonitoringObjectiveConfig::is_prediction_drift_detection_config_Set() const{
    return m_prediction_drift_detection_config_isSet;
}

bool OAIGoogleCloudAiplatformV1ModelMonitoringObjectiveConfig::is_prediction_drift_detection_config_Valid() const{
    return m_prediction_drift_detection_config_isValid;
}

OAIGoogleCloudAiplatformV1ModelMonitoringObjectiveConfigTrainingDataset OAIGoogleCloudAiplatformV1ModelMonitoringObjectiveConfig::getTrainingDataset() const {
    return m_training_dataset;
}
void OAIGoogleCloudAiplatformV1ModelMonitoringObjectiveConfig::setTrainingDataset(const OAIGoogleCloudAiplatformV1ModelMonitoringObjectiveConfigTrainingDataset &training_dataset) {
    m_training_dataset = training_dataset;
    m_training_dataset_isSet = true;
}

bool OAIGoogleCloudAiplatformV1ModelMonitoringObjectiveConfig::is_training_dataset_Set() const{
    return m_training_dataset_isSet;
}

bool OAIGoogleCloudAiplatformV1ModelMonitoringObjectiveConfig::is_training_dataset_Valid() const{
    return m_training_dataset_isValid;
}

OAIGoogleCloudAiplatformV1ModelMonitoringObjectiveConfigTrainingPredictionSkewDetectionConfig OAIGoogleCloudAiplatformV1ModelMonitoringObjectiveConfig::getTrainingPredictionSkewDetectionConfig() const {
    return m_training_prediction_skew_detection_config;
}
void OAIGoogleCloudAiplatformV1ModelMonitoringObjectiveConfig::setTrainingPredictionSkewDetectionConfig(const OAIGoogleCloudAiplatformV1ModelMonitoringObjectiveConfigTrainingPredictionSkewDetectionConfig &training_prediction_skew_detection_config) {
    m_training_prediction_skew_detection_config = training_prediction_skew_detection_config;
    m_training_prediction_skew_detection_config_isSet = true;
}

bool OAIGoogleCloudAiplatformV1ModelMonitoringObjectiveConfig::is_training_prediction_skew_detection_config_Set() const{
    return m_training_prediction_skew_detection_config_isSet;
}

bool OAIGoogleCloudAiplatformV1ModelMonitoringObjectiveConfig::is_training_prediction_skew_detection_config_Valid() const{
    return m_training_prediction_skew_detection_config_isValid;
}

bool OAIGoogleCloudAiplatformV1ModelMonitoringObjectiveConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_explanation_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_prediction_drift_detection_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_training_dataset.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_training_prediction_skew_detection_config.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudAiplatformV1ModelMonitoringObjectiveConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
