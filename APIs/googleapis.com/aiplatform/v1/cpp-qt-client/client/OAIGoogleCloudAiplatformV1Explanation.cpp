/**
 * Vertex AI API
 * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudAiplatformV1Explanation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudAiplatformV1Explanation::OAIGoogleCloudAiplatformV1Explanation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudAiplatformV1Explanation::OAIGoogleCloudAiplatformV1Explanation() {
    this->initializeModel();
}

OAIGoogleCloudAiplatformV1Explanation::~OAIGoogleCloudAiplatformV1Explanation() {}

void OAIGoogleCloudAiplatformV1Explanation::initializeModel() {

    m_attributions_isSet = false;
    m_attributions_isValid = false;

    m_neighbors_isSet = false;
    m_neighbors_isValid = false;
}

void OAIGoogleCloudAiplatformV1Explanation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudAiplatformV1Explanation::fromJsonObject(QJsonObject json) {

    m_attributions_isValid = ::OpenAPI::fromJsonValue(m_attributions, json[QString("attributions")]);
    m_attributions_isSet = !json[QString("attributions")].isNull() && m_attributions_isValid;

    m_neighbors_isValid = ::OpenAPI::fromJsonValue(m_neighbors, json[QString("neighbors")]);
    m_neighbors_isSet = !json[QString("neighbors")].isNull() && m_neighbors_isValid;
}

QString OAIGoogleCloudAiplatformV1Explanation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudAiplatformV1Explanation::asJsonObject() const {
    QJsonObject obj;
    if (m_attributions.size() > 0) {
        obj.insert(QString("attributions"), ::OpenAPI::toJsonValue(m_attributions));
    }
    if (m_neighbors.size() > 0) {
        obj.insert(QString("neighbors"), ::OpenAPI::toJsonValue(m_neighbors));
    }
    return obj;
}

QList<OAIGoogleCloudAiplatformV1Attribution> OAIGoogleCloudAiplatformV1Explanation::getAttributions() const {
    return m_attributions;
}
void OAIGoogleCloudAiplatformV1Explanation::setAttributions(const QList<OAIGoogleCloudAiplatformV1Attribution> &attributions) {
    m_attributions = attributions;
    m_attributions_isSet = true;
}

bool OAIGoogleCloudAiplatformV1Explanation::is_attributions_Set() const{
    return m_attributions_isSet;
}

bool OAIGoogleCloudAiplatformV1Explanation::is_attributions_Valid() const{
    return m_attributions_isValid;
}

QList<OAIGoogleCloudAiplatformV1Neighbor> OAIGoogleCloudAiplatformV1Explanation::getNeighbors() const {
    return m_neighbors;
}
void OAIGoogleCloudAiplatformV1Explanation::setNeighbors(const QList<OAIGoogleCloudAiplatformV1Neighbor> &neighbors) {
    m_neighbors = neighbors;
    m_neighbors_isSet = true;
}

bool OAIGoogleCloudAiplatformV1Explanation::is_neighbors_Set() const{
    return m_neighbors_isSet;
}

bool OAIGoogleCloudAiplatformV1Explanation::is_neighbors_Valid() const{
    return m_neighbors_isValid;
}

bool OAIGoogleCloudAiplatformV1Explanation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attributions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_neighbors.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudAiplatformV1Explanation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
