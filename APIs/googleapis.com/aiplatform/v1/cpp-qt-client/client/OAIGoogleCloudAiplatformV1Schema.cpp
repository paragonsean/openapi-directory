/**
 * Vertex AI API
 * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudAiplatformV1Schema.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudAiplatformV1Schema::OAIGoogleCloudAiplatformV1Schema(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudAiplatformV1Schema::OAIGoogleCloudAiplatformV1Schema() {
    this->initializeModel();
}

OAIGoogleCloudAiplatformV1Schema::~OAIGoogleCloudAiplatformV1Schema() {}

void OAIGoogleCloudAiplatformV1Schema::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_r_enum_isSet = false;
    m_r_enum_isValid = false;

    m_example_isSet = false;
    m_example_isValid = false;

    m_format_isSet = false;
    m_format_isValid = false;

    m_items_isSet = false;
    m_items_isValid = false;

    m_nullable_isSet = false;
    m_nullable_isValid = false;

    m_properties_isSet = false;
    m_properties_isValid = false;

    m_required_isSet = false;
    m_required_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIGoogleCloudAiplatformV1Schema::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudAiplatformV1Schema::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_r_enum_isValid = ::OpenAPI::fromJsonValue(m_r_enum, json[QString("enum")]);
    m_r_enum_isSet = !json[QString("enum")].isNull() && m_r_enum_isValid;

    m_example_isValid = ::OpenAPI::fromJsonValue(m_example, json[QString("example")]);
    m_example_isSet = !json[QString("example")].isNull() && m_example_isValid;

    m_format_isValid = ::OpenAPI::fromJsonValue(m_format, json[QString("format")]);
    m_format_isSet = !json[QString("format")].isNull() && m_format_isValid;

    m_items_isValid = ::OpenAPI::fromJsonValue(m_items, json[QString("items")]);
    m_items_isSet = !json[QString("items")].isNull() && m_items_isValid;

    m_nullable_isValid = ::OpenAPI::fromJsonValue(m_nullable, json[QString("nullable")]);
    m_nullable_isSet = !json[QString("nullable")].isNull() && m_nullable_isValid;

    m_properties_isValid = ::OpenAPI::fromJsonValue(m_properties, json[QString("properties")]);
    m_properties_isSet = !json[QString("properties")].isNull() && m_properties_isValid;

    m_required_isValid = ::OpenAPI::fromJsonValue(m_required, json[QString("required")]);
    m_required_isSet = !json[QString("required")].isNull() && m_required_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIGoogleCloudAiplatformV1Schema::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudAiplatformV1Schema::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_r_enum.size() > 0) {
        obj.insert(QString("enum"), ::OpenAPI::toJsonValue(m_r_enum));
    }
    if (m_example_isSet) {
        obj.insert(QString("example"), ::OpenAPI::toJsonValue(m_example));
    }
    if (m_format_isSet) {
        obj.insert(QString("format"), ::OpenAPI::toJsonValue(m_format));
    }
    if (m_items.isSet()) {
        obj.insert(QString("items"), ::OpenAPI::toJsonValue(m_items));
    }
    if (m_nullable_isSet) {
        obj.insert(QString("nullable"), ::OpenAPI::toJsonValue(m_nullable));
    }
    if (m_properties.size() > 0) {
        obj.insert(QString("properties"), ::OpenAPI::toJsonValue(m_properties));
    }
    if (m_required.size() > 0) {
        obj.insert(QString("required"), ::OpenAPI::toJsonValue(m_required));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIGoogleCloudAiplatformV1Schema::getDescription() const {
    return m_description;
}
void OAIGoogleCloudAiplatformV1Schema::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIGoogleCloudAiplatformV1Schema::is_description_Set() const{
    return m_description_isSet;
}

bool OAIGoogleCloudAiplatformV1Schema::is_description_Valid() const{
    return m_description_isValid;
}

QList<QString> OAIGoogleCloudAiplatformV1Schema::getREnum() const {
    return m_r_enum;
}
void OAIGoogleCloudAiplatformV1Schema::setREnum(const QList<QString> &r_enum) {
    m_r_enum = r_enum;
    m_r_enum_isSet = true;
}

bool OAIGoogleCloudAiplatformV1Schema::is_r_enum_Set() const{
    return m_r_enum_isSet;
}

bool OAIGoogleCloudAiplatformV1Schema::is_r_enum_Valid() const{
    return m_r_enum_isValid;
}

QJsonValue OAIGoogleCloudAiplatformV1Schema::getExample() const {
    return m_example;
}
void OAIGoogleCloudAiplatformV1Schema::setExample(const QJsonValue &example) {
    m_example = example;
    m_example_isSet = true;
}

bool OAIGoogleCloudAiplatformV1Schema::is_example_Set() const{
    return m_example_isSet;
}

bool OAIGoogleCloudAiplatformV1Schema::is_example_Valid() const{
    return m_example_isValid;
}

QString OAIGoogleCloudAiplatformV1Schema::getFormat() const {
    return m_format;
}
void OAIGoogleCloudAiplatformV1Schema::setFormat(const QString &format) {
    m_format = format;
    m_format_isSet = true;
}

bool OAIGoogleCloudAiplatformV1Schema::is_format_Set() const{
    return m_format_isSet;
}

bool OAIGoogleCloudAiplatformV1Schema::is_format_Valid() const{
    return m_format_isValid;
}

OAIGoogleCloudAiplatformV1Schema OAIGoogleCloudAiplatformV1Schema::getItems() const {
    return m_items;
}
void OAIGoogleCloudAiplatformV1Schema::setItems(const OAIGoogleCloudAiplatformV1Schema &items) {
    m_items = items;
    m_items_isSet = true;
}

bool OAIGoogleCloudAiplatformV1Schema::is_items_Set() const{
    return m_items_isSet;
}

bool OAIGoogleCloudAiplatformV1Schema::is_items_Valid() const{
    return m_items_isValid;
}

bool OAIGoogleCloudAiplatformV1Schema::isNullable() const {
    return m_nullable;
}
void OAIGoogleCloudAiplatformV1Schema::setNullable(const bool &nullable) {
    m_nullable = nullable;
    m_nullable_isSet = true;
}

bool OAIGoogleCloudAiplatformV1Schema::is_nullable_Set() const{
    return m_nullable_isSet;
}

bool OAIGoogleCloudAiplatformV1Schema::is_nullable_Valid() const{
    return m_nullable_isValid;
}

QMap<QString, OAIGoogleCloudAiplatformV1Schema> OAIGoogleCloudAiplatformV1Schema::getProperties() const {
    return m_properties;
}
void OAIGoogleCloudAiplatformV1Schema::setProperties(const QMap<QString, OAIGoogleCloudAiplatformV1Schema> &properties) {
    m_properties = properties;
    m_properties_isSet = true;
}

bool OAIGoogleCloudAiplatformV1Schema::is_properties_Set() const{
    return m_properties_isSet;
}

bool OAIGoogleCloudAiplatformV1Schema::is_properties_Valid() const{
    return m_properties_isValid;
}

QList<QString> OAIGoogleCloudAiplatformV1Schema::getRequired() const {
    return m_required;
}
void OAIGoogleCloudAiplatformV1Schema::setRequired(const QList<QString> &required) {
    m_required = required;
    m_required_isSet = true;
}

bool OAIGoogleCloudAiplatformV1Schema::is_required_Set() const{
    return m_required_isSet;
}

bool OAIGoogleCloudAiplatformV1Schema::is_required_Valid() const{
    return m_required_isValid;
}

QString OAIGoogleCloudAiplatformV1Schema::getType() const {
    return m_type;
}
void OAIGoogleCloudAiplatformV1Schema::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIGoogleCloudAiplatformV1Schema::is_type_Set() const{
    return m_type_isSet;
}

bool OAIGoogleCloudAiplatformV1Schema::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIGoogleCloudAiplatformV1Schema::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_enum.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_example_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_items.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_nullable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_properties.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_required.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudAiplatformV1Schema::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
