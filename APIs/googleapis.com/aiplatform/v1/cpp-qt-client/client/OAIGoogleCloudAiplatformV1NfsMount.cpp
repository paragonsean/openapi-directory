/**
 * Vertex AI API
 * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudAiplatformV1NfsMount.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudAiplatformV1NfsMount::OAIGoogleCloudAiplatformV1NfsMount(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudAiplatformV1NfsMount::OAIGoogleCloudAiplatformV1NfsMount() {
    this->initializeModel();
}

OAIGoogleCloudAiplatformV1NfsMount::~OAIGoogleCloudAiplatformV1NfsMount() {}

void OAIGoogleCloudAiplatformV1NfsMount::initializeModel() {

    m_mount_point_isSet = false;
    m_mount_point_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;

    m_server_isSet = false;
    m_server_isValid = false;
}

void OAIGoogleCloudAiplatformV1NfsMount::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudAiplatformV1NfsMount::fromJsonObject(QJsonObject json) {

    m_mount_point_isValid = ::OpenAPI::fromJsonValue(m_mount_point, json[QString("mountPoint")]);
    m_mount_point_isSet = !json[QString("mountPoint")].isNull() && m_mount_point_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("path")]);
    m_path_isSet = !json[QString("path")].isNull() && m_path_isValid;

    m_server_isValid = ::OpenAPI::fromJsonValue(m_server, json[QString("server")]);
    m_server_isSet = !json[QString("server")].isNull() && m_server_isValid;
}

QString OAIGoogleCloudAiplatformV1NfsMount::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudAiplatformV1NfsMount::asJsonObject() const {
    QJsonObject obj;
    if (m_mount_point_isSet) {
        obj.insert(QString("mountPoint"), ::OpenAPI::toJsonValue(m_mount_point));
    }
    if (m_path_isSet) {
        obj.insert(QString("path"), ::OpenAPI::toJsonValue(m_path));
    }
    if (m_server_isSet) {
        obj.insert(QString("server"), ::OpenAPI::toJsonValue(m_server));
    }
    return obj;
}

QString OAIGoogleCloudAiplatformV1NfsMount::getMountPoint() const {
    return m_mount_point;
}
void OAIGoogleCloudAiplatformV1NfsMount::setMountPoint(const QString &mount_point) {
    m_mount_point = mount_point;
    m_mount_point_isSet = true;
}

bool OAIGoogleCloudAiplatformV1NfsMount::is_mount_point_Set() const{
    return m_mount_point_isSet;
}

bool OAIGoogleCloudAiplatformV1NfsMount::is_mount_point_Valid() const{
    return m_mount_point_isValid;
}

QString OAIGoogleCloudAiplatformV1NfsMount::getPath() const {
    return m_path;
}
void OAIGoogleCloudAiplatformV1NfsMount::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAIGoogleCloudAiplatformV1NfsMount::is_path_Set() const{
    return m_path_isSet;
}

bool OAIGoogleCloudAiplatformV1NfsMount::is_path_Valid() const{
    return m_path_isValid;
}

QString OAIGoogleCloudAiplatformV1NfsMount::getServer() const {
    return m_server;
}
void OAIGoogleCloudAiplatformV1NfsMount::setServer(const QString &server) {
    m_server = server;
    m_server_isSet = true;
}

bool OAIGoogleCloudAiplatformV1NfsMount::is_server_Set() const{
    return m_server_isSet;
}

bool OAIGoogleCloudAiplatformV1NfsMount::is_server_Valid() const{
    return m_server_isValid;
}

bool OAIGoogleCloudAiplatformV1NfsMount::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_mount_point_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudAiplatformV1NfsMount::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
