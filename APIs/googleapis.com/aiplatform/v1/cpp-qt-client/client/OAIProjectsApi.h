/**
 * Vertex AI API
 * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIProjectsApi_H
#define OAI_OAIProjectsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIGoogleApiHttpBody.h"
#include "OAIGoogleCloudAiplatformV1AddContextArtifactsAndExecutionsRequest.h"
#include "OAIGoogleCloudAiplatformV1AddContextChildrenRequest.h"
#include "OAIGoogleCloudAiplatformV1AddExecutionEventsRequest.h"
#include "OAIGoogleCloudAiplatformV1AddTrialMeasurementRequest.h"
#include "OAIGoogleCloudAiplatformV1Artifact.h"
#include "OAIGoogleCloudAiplatformV1AssignNotebookRuntimeRequest.h"
#include "OAIGoogleCloudAiplatformV1BatchCreateFeaturesRequest.h"
#include "OAIGoogleCloudAiplatformV1BatchCreateTensorboardRunsRequest.h"
#include "OAIGoogleCloudAiplatformV1BatchCreateTensorboardRunsResponse.h"
#include "OAIGoogleCloudAiplatformV1BatchCreateTensorboardTimeSeriesRequest.h"
#include "OAIGoogleCloudAiplatformV1BatchCreateTensorboardTimeSeriesResponse.h"
#include "OAIGoogleCloudAiplatformV1BatchImportEvaluatedAnnotationsRequest.h"
#include "OAIGoogleCloudAiplatformV1BatchImportEvaluatedAnnotationsResponse.h"
#include "OAIGoogleCloudAiplatformV1BatchMigrateResourcesRequest.h"
#include "OAIGoogleCloudAiplatformV1BatchPredictionJob.h"
#include "OAIGoogleCloudAiplatformV1BatchReadFeatureValuesRequest.h"
#include "OAIGoogleCloudAiplatformV1BatchReadTensorboardTimeSeriesDataResponse.h"
#include "OAIGoogleCloudAiplatformV1CompleteTrialRequest.h"
#include "OAIGoogleCloudAiplatformV1ComputeTokensRequest.h"
#include "OAIGoogleCloudAiplatformV1ComputeTokensResponse.h"
#include "OAIGoogleCloudAiplatformV1Context.h"
#include "OAIGoogleCloudAiplatformV1CopyModelRequest.h"
#include "OAIGoogleCloudAiplatformV1CountTokensRequest.h"
#include "OAIGoogleCloudAiplatformV1CountTokensResponse.h"
#include "OAIGoogleCloudAiplatformV1CreateDeploymentResourcePoolRequest.h"
#include "OAIGoogleCloudAiplatformV1CustomJob.h"
#include "OAIGoogleCloudAiplatformV1DataLabelingJob.h"
#include "OAIGoogleCloudAiplatformV1Dataset.h"
#include "OAIGoogleCloudAiplatformV1DatasetVersion.h"
#include "OAIGoogleCloudAiplatformV1DeleteFeatureValuesRequest.h"
#include "OAIGoogleCloudAiplatformV1DeployIndexRequest.h"
#include "OAIGoogleCloudAiplatformV1DeployModelRequest.h"
#include "OAIGoogleCloudAiplatformV1DeployedIndex.h"
#include "OAIGoogleCloudAiplatformV1DirectPredictRequest.h"
#include "OAIGoogleCloudAiplatformV1DirectPredictResponse.h"
#include "OAIGoogleCloudAiplatformV1DirectRawPredictRequest.h"
#include "OAIGoogleCloudAiplatformV1DirectRawPredictResponse.h"
#include "OAIGoogleCloudAiplatformV1Endpoint.h"
#include "OAIGoogleCloudAiplatformV1EntityType.h"
#include "OAIGoogleCloudAiplatformV1Execution.h"
#include "OAIGoogleCloudAiplatformV1ExplainRequest.h"
#include "OAIGoogleCloudAiplatformV1ExplainResponse.h"
#include "OAIGoogleCloudAiplatformV1ExportFeatureValuesRequest.h"
#include "OAIGoogleCloudAiplatformV1ExportModelRequest.h"
#include "OAIGoogleCloudAiplatformV1ExportTensorboardTimeSeriesDataRequest.h"
#include "OAIGoogleCloudAiplatformV1ExportTensorboardTimeSeriesDataResponse.h"
#include "OAIGoogleCloudAiplatformV1Feature.h"
#include "OAIGoogleCloudAiplatformV1FeatureGroup.h"
#include "OAIGoogleCloudAiplatformV1FeatureOnlineStore.h"
#include "OAIGoogleCloudAiplatformV1FeatureView.h"
#include "OAIGoogleCloudAiplatformV1Featurestore.h"
#include "OAIGoogleCloudAiplatformV1FetchFeatureValuesRequest.h"
#include "OAIGoogleCloudAiplatformV1FetchFeatureValuesResponse.h"
#include "OAIGoogleCloudAiplatformV1FindNeighborsRequest.h"
#include "OAIGoogleCloudAiplatformV1FindNeighborsResponse.h"
#include "OAIGoogleCloudAiplatformV1GenerateContentRequest.h"
#include "OAIGoogleCloudAiplatformV1GenerateContentResponse.h"
#include "OAIGoogleCloudAiplatformV1HyperparameterTuningJob.h"
#include "OAIGoogleCloudAiplatformV1ImportDataRequest.h"
#include "OAIGoogleCloudAiplatformV1ImportFeatureValuesRequest.h"
#include "OAIGoogleCloudAiplatformV1ImportModelEvaluationRequest.h"
#include "OAIGoogleCloudAiplatformV1Index.h"
#include "OAIGoogleCloudAiplatformV1IndexEndpoint.h"
#include "OAIGoogleCloudAiplatformV1LineageSubgraph.h"
#include "OAIGoogleCloudAiplatformV1ListAnnotationsResponse.h"
#include "OAIGoogleCloudAiplatformV1ListArtifactsResponse.h"
#include "OAIGoogleCloudAiplatformV1ListBatchPredictionJobsResponse.h"
#include "OAIGoogleCloudAiplatformV1ListContextsResponse.h"
#include "OAIGoogleCloudAiplatformV1ListCustomJobsResponse.h"
#include "OAIGoogleCloudAiplatformV1ListDataItemsResponse.h"
#include "OAIGoogleCloudAiplatformV1ListDataLabelingJobsResponse.h"
#include "OAIGoogleCloudAiplatformV1ListDatasetVersionsResponse.h"
#include "OAIGoogleCloudAiplatformV1ListDatasetsResponse.h"
#include "OAIGoogleCloudAiplatformV1ListDeploymentResourcePoolsResponse.h"
#include "OAIGoogleCloudAiplatformV1ListEndpointsResponse.h"
#include "OAIGoogleCloudAiplatformV1ListEntityTypesResponse.h"
#include "OAIGoogleCloudAiplatformV1ListExecutionsResponse.h"
#include "OAIGoogleCloudAiplatformV1ListFeatureGroupsResponse.h"
#include "OAIGoogleCloudAiplatformV1ListFeatureOnlineStoresResponse.h"
#include "OAIGoogleCloudAiplatformV1ListFeatureViewSyncsResponse.h"
#include "OAIGoogleCloudAiplatformV1ListFeatureViewsResponse.h"
#include "OAIGoogleCloudAiplatformV1ListFeaturesResponse.h"
#include "OAIGoogleCloudAiplatformV1ListFeaturestoresResponse.h"
#include "OAIGoogleCloudAiplatformV1ListHyperparameterTuningJobsResponse.h"
#include "OAIGoogleCloudAiplatformV1ListIndexEndpointsResponse.h"
#include "OAIGoogleCloudAiplatformV1ListIndexesResponse.h"
#include "OAIGoogleCloudAiplatformV1ListMetadataSchemasResponse.h"
#include "OAIGoogleCloudAiplatformV1ListMetadataStoresResponse.h"
#include "OAIGoogleCloudAiplatformV1ListModelDeploymentMonitoringJobsResponse.h"
#include "OAIGoogleCloudAiplatformV1ListModelEvaluationSlicesResponse.h"
#include "OAIGoogleCloudAiplatformV1ListModelEvaluationsResponse.h"
#include "OAIGoogleCloudAiplatformV1ListModelVersionsResponse.h"
#include "OAIGoogleCloudAiplatformV1ListModelsResponse.h"
#include "OAIGoogleCloudAiplatformV1ListNasJobsResponse.h"
#include "OAIGoogleCloudAiplatformV1ListNasTrialDetailsResponse.h"
#include "OAIGoogleCloudAiplatformV1ListNotebookRuntimeTemplatesResponse.h"
#include "OAIGoogleCloudAiplatformV1ListNotebookRuntimesResponse.h"
#include "OAIGoogleCloudAiplatformV1ListOptimalTrialsResponse.h"
#include "OAIGoogleCloudAiplatformV1ListPipelineJobsResponse.h"
#include "OAIGoogleCloudAiplatformV1ListSavedQueriesResponse.h"
#include "OAIGoogleCloudAiplatformV1ListSchedulesResponse.h"
#include "OAIGoogleCloudAiplatformV1ListSpecialistPoolsResponse.h"
#include "OAIGoogleCloudAiplatformV1ListStudiesResponse.h"
#include "OAIGoogleCloudAiplatformV1ListTensorboardExperimentsResponse.h"
#include "OAIGoogleCloudAiplatformV1ListTensorboardRunsResponse.h"
#include "OAIGoogleCloudAiplatformV1ListTensorboardTimeSeriesResponse.h"
#include "OAIGoogleCloudAiplatformV1ListTensorboardsResponse.h"
#include "OAIGoogleCloudAiplatformV1ListTrainingPipelinesResponse.h"
#include "OAIGoogleCloudAiplatformV1ListTrialsResponse.h"
#include "OAIGoogleCloudAiplatformV1LookupStudyRequest.h"
#include "OAIGoogleCloudAiplatformV1MergeVersionAliasesRequest.h"
#include "OAIGoogleCloudAiplatformV1MetadataSchema.h"
#include "OAIGoogleCloudAiplatformV1MetadataStore.h"
#include "OAIGoogleCloudAiplatformV1Model.h"
#include "OAIGoogleCloudAiplatformV1ModelDeploymentMonitoringJob.h"
#include "OAIGoogleCloudAiplatformV1ModelEvaluation.h"
#include "OAIGoogleCloudAiplatformV1MutateDeployedModelRequest.h"
#include "OAIGoogleCloudAiplatformV1NasJob.h"
#include "OAIGoogleCloudAiplatformV1NotebookRuntimeTemplate.h"
#include "OAIGoogleCloudAiplatformV1PipelineJob.h"
#include "OAIGoogleCloudAiplatformV1PredictRequest.h"
#include "OAIGoogleCloudAiplatformV1PredictResponse.h"
#include "OAIGoogleCloudAiplatformV1PurgeArtifactsRequest.h"
#include "OAIGoogleCloudAiplatformV1PurgeContextsRequest.h"
#include "OAIGoogleCloudAiplatformV1PurgeExecutionsRequest.h"
#include "OAIGoogleCloudAiplatformV1QueryDeployedModelsResponse.h"
#include "OAIGoogleCloudAiplatformV1RawPredictRequest.h"
#include "OAIGoogleCloudAiplatformV1ReadFeatureValuesRequest.h"
#include "OAIGoogleCloudAiplatformV1ReadFeatureValuesResponse.h"
#include "OAIGoogleCloudAiplatformV1ReadIndexDatapointsRequest.h"
#include "OAIGoogleCloudAiplatformV1ReadIndexDatapointsResponse.h"
#include "OAIGoogleCloudAiplatformV1ReadTensorboardBlobDataResponse.h"
#include "OAIGoogleCloudAiplatformV1ReadTensorboardSizeResponse.h"
#include "OAIGoogleCloudAiplatformV1ReadTensorboardTimeSeriesDataResponse.h"
#include "OAIGoogleCloudAiplatformV1ReadTensorboardUsageResponse.h"
#include "OAIGoogleCloudAiplatformV1RemoveContextChildrenRequest.h"
#include "OAIGoogleCloudAiplatformV1RemoveDatapointsRequest.h"
#include "OAIGoogleCloudAiplatformV1ResumeScheduleRequest.h"
#include "OAIGoogleCloudAiplatformV1Schedule.h"
#include "OAIGoogleCloudAiplatformV1SearchDataItemsResponse.h"
#include "OAIGoogleCloudAiplatformV1SearchFeaturesResponse.h"
#include "OAIGoogleCloudAiplatformV1SearchMigratableResourcesRequest.h"
#include "OAIGoogleCloudAiplatformV1SearchMigratableResourcesResponse.h"
#include "OAIGoogleCloudAiplatformV1SearchModelDeploymentMonitoringStatsAnomaliesRequest.h"
#include "OAIGoogleCloudAiplatformV1SearchModelDeploymentMonitoringStatsAnomaliesResponse.h"
#include "OAIGoogleCloudAiplatformV1SearchNearestEntitiesRequest.h"
#include "OAIGoogleCloudAiplatformV1SearchNearestEntitiesResponse.h"
#include "OAIGoogleCloudAiplatformV1SpecialistPool.h"
#include "OAIGoogleCloudAiplatformV1StreamRawPredictRequest.h"
#include "OAIGoogleCloudAiplatformV1StreamingPredictRequest.h"
#include "OAIGoogleCloudAiplatformV1StreamingPredictResponse.h"
#include "OAIGoogleCloudAiplatformV1StreamingReadFeatureValuesRequest.h"
#include "OAIGoogleCloudAiplatformV1Study.h"
#include "OAIGoogleCloudAiplatformV1SuggestTrialsRequest.h"
#include "OAIGoogleCloudAiplatformV1SyncFeatureViewResponse.h"
#include "OAIGoogleCloudAiplatformV1Tensorboard.h"
#include "OAIGoogleCloudAiplatformV1TensorboardExperiment.h"
#include "OAIGoogleCloudAiplatformV1TensorboardRun.h"
#include "OAIGoogleCloudAiplatformV1TensorboardTimeSeries.h"
#include "OAIGoogleCloudAiplatformV1TrainingPipeline.h"
#include "OAIGoogleCloudAiplatformV1Trial.h"
#include "OAIGoogleCloudAiplatformV1UndeployIndexRequest.h"
#include "OAIGoogleCloudAiplatformV1UndeployModelRequest.h"
#include "OAIGoogleCloudAiplatformV1UpdateExplanationDatasetRequest.h"
#include "OAIGoogleCloudAiplatformV1UploadModelRequest.h"
#include "OAIGoogleCloudAiplatformV1UpsertDatapointsRequest.h"
#include "OAIGoogleCloudAiplatformV1WriteFeatureValuesRequest.h"
#include "OAIGoogleCloudAiplatformV1WriteTensorboardExperimentDataRequest.h"
#include "OAIGoogleCloudAiplatformV1WriteTensorboardRunDataRequest.h"
#include "OAIGoogleCloudLocationListLocationsResponse.h"
#include "OAIGoogleIamV1Policy.h"
#include "OAIGoogleIamV1SetIamPolicyRequest.h"
#include "OAIGoogleIamV1TestIamPermissionsResponse.h"
#include "OAIGoogleLongrunningListOperationsResponse.h"
#include "OAIGoogleLongrunningOperation.h"
#include "OAIObject.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIProjectsApi : public QObject {
    Q_OBJECT

public:
    OAIProjectsApi(const int timeOut = 0);
    ~OAIProjectsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_aiplatform_v1_batch_prediction_job OAIGoogleCloudAiplatformV1BatchPredictionJob [optional]
    */
    virtual void aiplatform_projects_locations_batchPredictionJobs_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1BatchPredictionJob> &oai_google_cloud_aiplatform_v1_batch_prediction_job = ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1BatchPredictionJob>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    * @param[in]  read_mask QString [optional]
    */
    virtual void aiplatform_projects_locations_batchPredictionJobs_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &read_mask = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_aiplatform_v1_custom_job OAIGoogleCloudAiplatformV1CustomJob [optional]
    */
    virtual void aiplatform_projects_locations_customJobs_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1CustomJob> &oai_google_cloud_aiplatform_v1_custom_job = ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1CustomJob>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    * @param[in]  read_mask QString [optional]
    */
    virtual void aiplatform_projects_locations_customJobs_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &read_mask = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_aiplatform_v1_data_labeling_job OAIGoogleCloudAiplatformV1DataLabelingJob [optional]
    */
    virtual void aiplatform_projects_locations_dataLabelingJobs_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1DataLabelingJob> &oai_google_cloud_aiplatform_v1_data_labeling_job = ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1DataLabelingJob>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  order_by QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    * @param[in]  read_mask QString [optional]
    */
    virtual void aiplatform_projects_locations_dataLabelingJobs_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &read_mask = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_aiplatform_v1_dataset OAIGoogleCloudAiplatformV1Dataset [optional]
    */
    virtual void aiplatform_projects_locations_datasets_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1Dataset> &oai_google_cloud_aiplatform_v1_dataset = ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1Dataset>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  order_by QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    * @param[in]  read_mask QString [optional]
    */
    virtual void aiplatform_projects_locations_datasets_dataItems_annotations_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &read_mask = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  order_by QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    * @param[in]  read_mask QString [optional]
    */
    virtual void aiplatform_projects_locations_datasets_dataItems_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &read_mask = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_aiplatform_v1_dataset_version OAIGoogleCloudAiplatformV1DatasetVersion [optional]
    */
    virtual void aiplatform_projects_locations_datasets_datasetVersions_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1DatasetVersion> &oai_google_cloud_aiplatform_v1_dataset_version = ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1DatasetVersion>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  order_by QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    * @param[in]  read_mask QString [optional]
    */
    virtual void aiplatform_projects_locations_datasets_datasetVersions_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &read_mask = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    */
    virtual void aiplatform_projects_locations_datasets_datasetVersions_restore(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_aiplatform_v1_import_data_request OAIGoogleCloudAiplatformV1ImportDataRequest [optional]
    */
    virtual void aiplatform_projects_locations_datasets_import(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1ImportDataRequest> &oai_google_cloud_aiplatform_v1_import_data_request = ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1ImportDataRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  order_by QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    * @param[in]  read_mask QString [optional]
    */
    virtual void aiplatform_projects_locations_datasets_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &read_mask = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  order_by QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    * @param[in]  read_mask QString [optional]
    */
    virtual void aiplatform_projects_locations_datasets_savedQueries_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &read_mask = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  dataset QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  annotation_filters QList<QString> [optional]
    * @param[in]  annotations_filter QString [optional]
    * @param[in]  annotations_limit qint32 [optional]
    * @param[in]  data_item_filter QString [optional]
    * @param[in]  data_labeling_job QString [optional]
    * @param[in]  field_mask QString [optional]
    * @param[in]  order_by QString [optional]
    * @param[in]  order_by_annotation_order_by QString [optional]
    * @param[in]  order_by_annotation_saved_query QString [optional]
    * @param[in]  order_by_data_item QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    * @param[in]  saved_query QString [optional]
    */
    virtual void aiplatform_projects_locations_datasets_searchDataItems(const QString &dataset, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &annotation_filters = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &annotations_filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &annotations_limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &data_item_filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &data_labeling_job = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &field_mask = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order_by_annotation_order_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order_by_annotation_saved_query = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order_by_data_item = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &saved_query = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_aiplatform_v1_create_deployment_resource_pool_request OAIGoogleCloudAiplatformV1CreateDeploymentResourcePoolRequest [optional]
    */
    virtual void aiplatform_projects_locations_deploymentResourcePools_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1CreateDeploymentResourcePoolRequest> &oai_google_cloud_aiplatform_v1_create_deployment_resource_pool_request = ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1CreateDeploymentResourcePoolRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void aiplatform_projects_locations_deploymentResourcePools_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  deployment_resource_pool QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void aiplatform_projects_locations_deploymentResourcePools_queryDeployedModels(const QString &deployment_resource_pool, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  endpoint_id QString [optional]
    * @param[in]  oai_google_cloud_aiplatform_v1_endpoint OAIGoogleCloudAiplatformV1Endpoint [optional]
    */
    virtual void aiplatform_projects_locations_endpoints_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &endpoint_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1Endpoint> &oai_google_cloud_aiplatform_v1_endpoint = ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1Endpoint>());

    /**
    * @param[in]  endpoint QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_aiplatform_v1_deploy_model_request OAIGoogleCloudAiplatformV1DeployModelRequest [optional]
    */
    virtual void aiplatform_projects_locations_endpoints_deployModel(const QString &endpoint, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1DeployModelRequest> &oai_google_cloud_aiplatform_v1_deploy_model_request = ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1DeployModelRequest>());

    /**
    * @param[in]  endpoint QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_aiplatform_v1_direct_predict_request OAIGoogleCloudAiplatformV1DirectPredictRequest [optional]
    */
    virtual void aiplatform_projects_locations_endpoints_directPredict(const QString &endpoint, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1DirectPredictRequest> &oai_google_cloud_aiplatform_v1_direct_predict_request = ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1DirectPredictRequest>());

    /**
    * @param[in]  endpoint QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_aiplatform_v1_direct_raw_predict_request OAIGoogleCloudAiplatformV1DirectRawPredictRequest [optional]
    */
    virtual void aiplatform_projects_locations_endpoints_directRawPredict(const QString &endpoint, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1DirectRawPredictRequest> &oai_google_cloud_aiplatform_v1_direct_raw_predict_request = ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1DirectRawPredictRequest>());

    /**
    * @param[in]  endpoint QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_aiplatform_v1_explain_request OAIGoogleCloudAiplatformV1ExplainRequest [optional]
    */
    virtual void aiplatform_projects_locations_endpoints_explain(const QString &endpoint, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1ExplainRequest> &oai_google_cloud_aiplatform_v1_explain_request = ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1ExplainRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  order_by QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    * @param[in]  read_mask QString [optional]
    */
    virtual void aiplatform_projects_locations_endpoints_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &read_mask = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  endpoint QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_aiplatform_v1_mutate_deployed_model_request OAIGoogleCloudAiplatformV1MutateDeployedModelRequest [optional]
    */
    virtual void aiplatform_projects_locations_endpoints_mutateDeployedModel(const QString &endpoint, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1MutateDeployedModelRequest> &oai_google_cloud_aiplatform_v1_mutate_deployed_model_request = ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1MutateDeployedModelRequest>());

    /**
    * @param[in]  endpoint QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_aiplatform_v1_undeploy_model_request OAIGoogleCloudAiplatformV1UndeployModelRequest [optional]
    */
    virtual void aiplatform_projects_locations_endpoints_undeployModel(const QString &endpoint, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1UndeployModelRequest> &oai_google_cloud_aiplatform_v1_undeploy_model_request = ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1UndeployModelRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  feature_group_id QString [optional]
    * @param[in]  oai_google_cloud_aiplatform_v1_feature_group OAIGoogleCloudAiplatformV1FeatureGroup [optional]
    */
    virtual void aiplatform_projects_locations_featureGroups_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &feature_group_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1FeatureGroup> &oai_google_cloud_aiplatform_v1_feature_group = ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1FeatureGroup>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  order_by QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void aiplatform_projects_locations_featureGroups_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  feature_online_store_id QString [optional]
    * @param[in]  oai_google_cloud_aiplatform_v1_feature_online_store OAIGoogleCloudAiplatformV1FeatureOnlineStore [optional]
    */
    virtual void aiplatform_projects_locations_featureOnlineStores_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &feature_online_store_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1FeatureOnlineStore> &oai_google_cloud_aiplatform_v1_feature_online_store = ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1FeatureOnlineStore>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  feature_view_id QString [optional]
    * @param[in]  run_sync_immediately bool [optional]
    * @param[in]  oai_google_cloud_aiplatform_v1_feature_view OAIGoogleCloudAiplatformV1FeatureView [optional]
    */
    virtual void aiplatform_projects_locations_featureOnlineStores_featureViews_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &feature_view_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &run_sync_immediately = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1FeatureView> &oai_google_cloud_aiplatform_v1_feature_view = ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1FeatureView>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  order_by QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void aiplatform_projects_locations_featureOnlineStores_featureViews_featureViewSyncs_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  feature_view QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_aiplatform_v1_fetch_feature_values_request OAIGoogleCloudAiplatformV1FetchFeatureValuesRequest [optional]
    */
    virtual void aiplatform_projects_locations_featureOnlineStores_featureViews_fetchFeatureValues(const QString &feature_view, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1FetchFeatureValuesRequest> &oai_google_cloud_aiplatform_v1_fetch_feature_values_request = ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1FetchFeatureValuesRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  order_by QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void aiplatform_projects_locations_featureOnlineStores_featureViews_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  feature_view QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_aiplatform_v1_search_nearest_entities_request OAIGoogleCloudAiplatformV1SearchNearestEntitiesRequest [optional]
    */
    virtual void aiplatform_projects_locations_featureOnlineStores_featureViews_searchNearestEntities(const QString &feature_view, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1SearchNearestEntitiesRequest> &oai_google_cloud_aiplatform_v1_search_nearest_entities_request = ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1SearchNearestEntitiesRequest>());

    /**
    * @param[in]  feature_view QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  body OAIObject [optional]
    */
    virtual void aiplatform_projects_locations_featureOnlineStores_featureViews_sync(const QString &feature_view, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIObject> &body = ::OpenAPI::OptionalParam<OAIObject>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  order_by QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void aiplatform_projects_locations_featureOnlineStores_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void aiplatform_projects_locations_featureOnlineStores_operations_listWait(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  featurestore QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_aiplatform_v1_batch_read_feature_values_request OAIGoogleCloudAiplatformV1BatchReadFeatureValuesRequest [optional]
    */
    virtual void aiplatform_projects_locations_featurestores_batchReadFeatureValues(const QString &featurestore, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1BatchReadFeatureValuesRequest> &oai_google_cloud_aiplatform_v1_batch_read_feature_values_request = ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1BatchReadFeatureValuesRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  featurestore_id QString [optional]
    * @param[in]  oai_google_cloud_aiplatform_v1_featurestore OAIGoogleCloudAiplatformV1Featurestore [optional]
    */
    virtual void aiplatform_projects_locations_featurestores_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &featurestore_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1Featurestore> &oai_google_cloud_aiplatform_v1_featurestore = ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1Featurestore>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  entity_type_id QString [optional]
    * @param[in]  oai_google_cloud_aiplatform_v1_entity_type OAIGoogleCloudAiplatformV1EntityType [optional]
    */
    virtual void aiplatform_projects_locations_featurestores_entityTypes_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &entity_type_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1EntityType> &oai_google_cloud_aiplatform_v1_entity_type = ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1EntityType>());

    /**
    * @param[in]  entity_type QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_aiplatform_v1_delete_feature_values_request OAIGoogleCloudAiplatformV1DeleteFeatureValuesRequest [optional]
    */
    virtual void aiplatform_projects_locations_featurestores_entityTypes_deleteFeatureValues(const QString &entity_type, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1DeleteFeatureValuesRequest> &oai_google_cloud_aiplatform_v1_delete_feature_values_request = ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1DeleteFeatureValuesRequest>());

    /**
    * @param[in]  entity_type QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_aiplatform_v1_export_feature_values_request OAIGoogleCloudAiplatformV1ExportFeatureValuesRequest [optional]
    */
    virtual void aiplatform_projects_locations_featurestores_entityTypes_exportFeatureValues(const QString &entity_type, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1ExportFeatureValuesRequest> &oai_google_cloud_aiplatform_v1_export_feature_values_request = ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1ExportFeatureValuesRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_aiplatform_v1_batch_create_features_request OAIGoogleCloudAiplatformV1BatchCreateFeaturesRequest [optional]
    */
    virtual void aiplatform_projects_locations_featurestores_entityTypes_features_batchCreate(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1BatchCreateFeaturesRequest> &oai_google_cloud_aiplatform_v1_batch_create_features_request = ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1BatchCreateFeaturesRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  feature_id QString [optional]
    * @param[in]  oai_google_cloud_aiplatform_v1_feature OAIGoogleCloudAiplatformV1Feature [optional]
    */
    virtual void aiplatform_projects_locations_featurestores_entityTypes_features_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &feature_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1Feature> &oai_google_cloud_aiplatform_v1_feature = ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1Feature>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  latest_stats_count qint32 [optional]
    * @param[in]  order_by QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    * @param[in]  read_mask QString [optional]
    */
    virtual void aiplatform_projects_locations_featurestores_entityTypes_features_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &latest_stats_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &read_mask = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  entity_type QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_aiplatform_v1_import_feature_values_request OAIGoogleCloudAiplatformV1ImportFeatureValuesRequest [optional]
    */
    virtual void aiplatform_projects_locations_featurestores_entityTypes_importFeatureValues(const QString &entity_type, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1ImportFeatureValuesRequest> &oai_google_cloud_aiplatform_v1_import_feature_values_request = ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1ImportFeatureValuesRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  order_by QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    * @param[in]  read_mask QString [optional]
    */
    virtual void aiplatform_projects_locations_featurestores_entityTypes_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &read_mask = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  entity_type QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_aiplatform_v1_read_feature_values_request OAIGoogleCloudAiplatformV1ReadFeatureValuesRequest [optional]
    */
    virtual void aiplatform_projects_locations_featurestores_entityTypes_readFeatureValues(const QString &entity_type, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1ReadFeatureValuesRequest> &oai_google_cloud_aiplatform_v1_read_feature_values_request = ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1ReadFeatureValuesRequest>());

    /**
    * @param[in]  entity_type QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_aiplatform_v1_streaming_read_feature_values_request OAIGoogleCloudAiplatformV1StreamingReadFeatureValuesRequest [optional]
    */
    virtual void aiplatform_projects_locations_featurestores_entityTypes_streamingReadFeatureValues(const QString &entity_type, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1StreamingReadFeatureValuesRequest> &oai_google_cloud_aiplatform_v1_streaming_read_feature_values_request = ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1StreamingReadFeatureValuesRequest>());

    /**
    * @param[in]  entity_type QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_aiplatform_v1_write_feature_values_request OAIGoogleCloudAiplatformV1WriteFeatureValuesRequest [optional]
    */
    virtual void aiplatform_projects_locations_featurestores_entityTypes_writeFeatureValues(const QString &entity_type, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1WriteFeatureValuesRequest> &oai_google_cloud_aiplatform_v1_write_feature_values_request = ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1WriteFeatureValuesRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  order_by QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    * @param[in]  read_mask QString [optional]
    */
    virtual void aiplatform_projects_locations_featurestores_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &read_mask = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  location QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    * @param[in]  query QString [optional]
    */
    virtual void aiplatform_projects_locations_featurestores_searchFeatures(const QString &location, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &query = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_aiplatform_v1_hyperparameter_tuning_job OAIGoogleCloudAiplatformV1HyperparameterTuningJob [optional]
    */
    virtual void aiplatform_projects_locations_hyperparameterTuningJobs_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1HyperparameterTuningJob> &oai_google_cloud_aiplatform_v1_hyperparameter_tuning_job = ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1HyperparameterTuningJob>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    * @param[in]  read_mask QString [optional]
    */
    virtual void aiplatform_projects_locations_hyperparameterTuningJobs_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &read_mask = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_aiplatform_v1_index_endpoint OAIGoogleCloudAiplatformV1IndexEndpoint [optional]
    */
    virtual void aiplatform_projects_locations_indexEndpoints_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1IndexEndpoint> &oai_google_cloud_aiplatform_v1_index_endpoint = ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1IndexEndpoint>());

    /**
    * @param[in]  index_endpoint QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_aiplatform_v1_deploy_index_request OAIGoogleCloudAiplatformV1DeployIndexRequest [optional]
    */
    virtual void aiplatform_projects_locations_indexEndpoints_deployIndex(const QString &index_endpoint, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1DeployIndexRequest> &oai_google_cloud_aiplatform_v1_deploy_index_request = ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1DeployIndexRequest>());

    /**
    * @param[in]  index_endpoint QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_aiplatform_v1_find_neighbors_request OAIGoogleCloudAiplatformV1FindNeighborsRequest [optional]
    */
    virtual void aiplatform_projects_locations_indexEndpoints_findNeighbors(const QString &index_endpoint, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1FindNeighborsRequest> &oai_google_cloud_aiplatform_v1_find_neighbors_request = ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1FindNeighborsRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    * @param[in]  read_mask QString [optional]
    */
    virtual void aiplatform_projects_locations_indexEndpoints_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &read_mask = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  index_endpoint QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_aiplatform_v1_deployed_index OAIGoogleCloudAiplatformV1DeployedIndex [optional]
    */
    virtual void aiplatform_projects_locations_indexEndpoints_mutateDeployedIndex(const QString &index_endpoint, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1DeployedIndex> &oai_google_cloud_aiplatform_v1_deployed_index = ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1DeployedIndex>());

    /**
    * @param[in]  index_endpoint QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_aiplatform_v1_read_index_datapoints_request OAIGoogleCloudAiplatformV1ReadIndexDatapointsRequest [optional]
    */
    virtual void aiplatform_projects_locations_indexEndpoints_readIndexDatapoints(const QString &index_endpoint, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1ReadIndexDatapointsRequest> &oai_google_cloud_aiplatform_v1_read_index_datapoints_request = ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1ReadIndexDatapointsRequest>());

    /**
    * @param[in]  index_endpoint QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_aiplatform_v1_undeploy_index_request OAIGoogleCloudAiplatformV1UndeployIndexRequest [optional]
    */
    virtual void aiplatform_projects_locations_indexEndpoints_undeployIndex(const QString &index_endpoint, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1UndeployIndexRequest> &oai_google_cloud_aiplatform_v1_undeploy_index_request = ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1UndeployIndexRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_aiplatform_v1_index OAIGoogleCloudAiplatformV1Index [optional]
    */
    virtual void aiplatform_projects_locations_indexes_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1Index> &oai_google_cloud_aiplatform_v1_index = ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1Index>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    * @param[in]  read_mask QString [optional]
    */
    virtual void aiplatform_projects_locations_indexes_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &read_mask = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  index QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_aiplatform_v1_remove_datapoints_request OAIGoogleCloudAiplatformV1RemoveDatapointsRequest [optional]
    */
    virtual void aiplatform_projects_locations_indexes_removeDatapoints(const QString &index, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1RemoveDatapointsRequest> &oai_google_cloud_aiplatform_v1_remove_datapoints_request = ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1RemoveDatapointsRequest>());

    /**
    * @param[in]  index QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_aiplatform_v1_upsert_datapoints_request OAIGoogleCloudAiplatformV1UpsertDatapointsRequest [optional]
    */
    virtual void aiplatform_projects_locations_indexes_upsertDatapoints(const QString &index, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1UpsertDatapointsRequest> &oai_google_cloud_aiplatform_v1_upsert_datapoints_request = ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1UpsertDatapointsRequest>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void aiplatform_projects_locations_list(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  artifact_id QString [optional]
    * @param[in]  oai_google_cloud_aiplatform_v1_artifact OAIGoogleCloudAiplatformV1Artifact [optional]
    */
    virtual void aiplatform_projects_locations_metadataStores_artifacts_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &artifact_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1Artifact> &oai_google_cloud_aiplatform_v1_artifact = ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1Artifact>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  order_by QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void aiplatform_projects_locations_metadataStores_artifacts_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_aiplatform_v1_purge_artifacts_request OAIGoogleCloudAiplatformV1PurgeArtifactsRequest [optional]
    */
    virtual void aiplatform_projects_locations_metadataStores_artifacts_purge(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1PurgeArtifactsRequest> &oai_google_cloud_aiplatform_v1_purge_artifacts_request = ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1PurgeArtifactsRequest>());

    /**
    * @param[in]  artifact QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  max_hops qint32 [optional]
    */
    virtual void aiplatform_projects_locations_metadataStores_artifacts_queryArtifactLineageSubgraph(const QString &artifact, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_hops = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  context QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_aiplatform_v1_add_context_artifacts_and_executions_request OAIGoogleCloudAiplatformV1AddContextArtifactsAndExecutionsRequest [optional]
    */
    virtual void aiplatform_projects_locations_metadataStores_contexts_addContextArtifactsAndExecutions(const QString &context, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1AddContextArtifactsAndExecutionsRequest> &oai_google_cloud_aiplatform_v1_add_context_artifacts_and_executions_request = ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1AddContextArtifactsAndExecutionsRequest>());

    /**
    * @param[in]  context QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_aiplatform_v1_add_context_children_request OAIGoogleCloudAiplatformV1AddContextChildrenRequest [optional]
    */
    virtual void aiplatform_projects_locations_metadataStores_contexts_addContextChildren(const QString &context, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1AddContextChildrenRequest> &oai_google_cloud_aiplatform_v1_add_context_children_request = ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1AddContextChildrenRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  context_id QString [optional]
    * @param[in]  oai_google_cloud_aiplatform_v1_context OAIGoogleCloudAiplatformV1Context [optional]
    */
    virtual void aiplatform_projects_locations_metadataStores_contexts_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &context_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1Context> &oai_google_cloud_aiplatform_v1_context = ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1Context>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  order_by QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void aiplatform_projects_locations_metadataStores_contexts_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_aiplatform_v1_purge_contexts_request OAIGoogleCloudAiplatformV1PurgeContextsRequest [optional]
    */
    virtual void aiplatform_projects_locations_metadataStores_contexts_purge(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1PurgeContextsRequest> &oai_google_cloud_aiplatform_v1_purge_contexts_request = ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1PurgeContextsRequest>());

    /**
    * @param[in]  context QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    */
    virtual void aiplatform_projects_locations_metadataStores_contexts_queryContextLineageSubgraph(const QString &context, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  context QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_aiplatform_v1_remove_context_children_request OAIGoogleCloudAiplatformV1RemoveContextChildrenRequest [optional]
    */
    virtual void aiplatform_projects_locations_metadataStores_contexts_removeContextChildren(const QString &context, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1RemoveContextChildrenRequest> &oai_google_cloud_aiplatform_v1_remove_context_children_request = ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1RemoveContextChildrenRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  metadata_store_id QString [optional]
    * @param[in]  oai_google_cloud_aiplatform_v1_metadata_store OAIGoogleCloudAiplatformV1MetadataStore [optional]
    */
    virtual void aiplatform_projects_locations_metadataStores_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &metadata_store_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1MetadataStore> &oai_google_cloud_aiplatform_v1_metadata_store = ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1MetadataStore>());

    /**
    * @param[in]  execution QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_aiplatform_v1_add_execution_events_request OAIGoogleCloudAiplatformV1AddExecutionEventsRequest [optional]
    */
    virtual void aiplatform_projects_locations_metadataStores_executions_addExecutionEvents(const QString &execution, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1AddExecutionEventsRequest> &oai_google_cloud_aiplatform_v1_add_execution_events_request = ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1AddExecutionEventsRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  execution_id QString [optional]
    * @param[in]  oai_google_cloud_aiplatform_v1_execution OAIGoogleCloudAiplatformV1Execution [optional]
    */
    virtual void aiplatform_projects_locations_metadataStores_executions_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &execution_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1Execution> &oai_google_cloud_aiplatform_v1_execution = ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1Execution>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  order_by QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void aiplatform_projects_locations_metadataStores_executions_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_aiplatform_v1_purge_executions_request OAIGoogleCloudAiplatformV1PurgeExecutionsRequest [optional]
    */
    virtual void aiplatform_projects_locations_metadataStores_executions_purge(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1PurgeExecutionsRequest> &oai_google_cloud_aiplatform_v1_purge_executions_request = ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1PurgeExecutionsRequest>());

    /**
    * @param[in]  execution QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    */
    virtual void aiplatform_projects_locations_metadataStores_executions_queryExecutionInputsAndOutputs(const QString &execution, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void aiplatform_projects_locations_metadataStores_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  metadata_schema_id QString [optional]
    * @param[in]  oai_google_cloud_aiplatform_v1_metadata_schema OAIGoogleCloudAiplatformV1MetadataSchema [optional]
    */
    virtual void aiplatform_projects_locations_metadataStores_metadataSchemas_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &metadata_schema_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1MetadataSchema> &oai_google_cloud_aiplatform_v1_metadata_schema = ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1MetadataSchema>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void aiplatform_projects_locations_metadataStores_metadataSchemas_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_aiplatform_v1_batch_migrate_resources_request OAIGoogleCloudAiplatformV1BatchMigrateResourcesRequest [optional]
    */
    virtual void aiplatform_projects_locations_migratableResources_batchMigrate(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1BatchMigrateResourcesRequest> &oai_google_cloud_aiplatform_v1_batch_migrate_resources_request = ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1BatchMigrateResourcesRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_aiplatform_v1_search_migratable_resources_request OAIGoogleCloudAiplatformV1SearchMigratableResourcesRequest [optional]
    */
    virtual void aiplatform_projects_locations_migratableResources_search(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1SearchMigratableResourcesRequest> &oai_google_cloud_aiplatform_v1_search_migratable_resources_request = ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1SearchMigratableResourcesRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_aiplatform_v1_model_deployment_monitoring_job OAIGoogleCloudAiplatformV1ModelDeploymentMonitoringJob [optional]
    */
    virtual void aiplatform_projects_locations_modelDeploymentMonitoringJobs_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1ModelDeploymentMonitoringJob> &oai_google_cloud_aiplatform_v1_model_deployment_monitoring_job = ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1ModelDeploymentMonitoringJob>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    * @param[in]  read_mask QString [optional]
    */
    virtual void aiplatform_projects_locations_modelDeploymentMonitoringJobs_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &read_mask = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  model_deployment_monitoring_job QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_aiplatform_v1_search_model_deployment_monitoring_stats_anomalies_request OAIGoogleCloudAiplatformV1SearchModelDeploymentMonitoringStatsAnomaliesRequest [optional]
    */
    virtual void aiplatform_projects_locations_modelDeploymentMonitoringJobs_searchModelDeploymentMonitoringStatsAnomalies(const QString &model_deployment_monitoring_job, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1SearchModelDeploymentMonitoringStatsAnomaliesRequest> &oai_google_cloud_aiplatform_v1_search_model_deployment_monitoring_stats_anomalies_request = ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1SearchModelDeploymentMonitoringStatsAnomaliesRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_aiplatform_v1_copy_model_request OAIGoogleCloudAiplatformV1CopyModelRequest [optional]
    */
    virtual void aiplatform_projects_locations_models_copy(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1CopyModelRequest> &oai_google_cloud_aiplatform_v1_copy_model_request = ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1CopyModelRequest>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    */
    virtual void aiplatform_projects_locations_models_deleteVersion(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_aiplatform_v1_import_model_evaluation_request OAIGoogleCloudAiplatformV1ImportModelEvaluationRequest [optional]
    */
    virtual void aiplatform_projects_locations_models_evaluations_import(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1ImportModelEvaluationRequest> &oai_google_cloud_aiplatform_v1_import_model_evaluation_request = ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1ImportModelEvaluationRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    * @param[in]  read_mask QString [optional]
    */
    virtual void aiplatform_projects_locations_models_evaluations_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &read_mask = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_aiplatform_v1_batch_import_evaluated_annotations_request OAIGoogleCloudAiplatformV1BatchImportEvaluatedAnnotationsRequest [optional]
    */
    virtual void aiplatform_projects_locations_models_evaluations_slices_batchImport(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1BatchImportEvaluatedAnnotationsRequest> &oai_google_cloud_aiplatform_v1_batch_import_evaluated_annotations_request = ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1BatchImportEvaluatedAnnotationsRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    * @param[in]  read_mask QString [optional]
    */
    virtual void aiplatform_projects_locations_models_evaluations_slices_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &read_mask = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_aiplatform_v1_export_model_request OAIGoogleCloudAiplatformV1ExportModelRequest [optional]
    */
    virtual void aiplatform_projects_locations_models_export(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1ExportModelRequest> &oai_google_cloud_aiplatform_v1_export_model_request = ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1ExportModelRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  order_by QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    * @param[in]  read_mask QString [optional]
    */
    virtual void aiplatform_projects_locations_models_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &read_mask = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  order_by QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    * @param[in]  read_mask QString [optional]
    */
    virtual void aiplatform_projects_locations_models_listVersions(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &read_mask = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_aiplatform_v1_merge_version_aliases_request OAIGoogleCloudAiplatformV1MergeVersionAliasesRequest [optional]
    */
    virtual void aiplatform_projects_locations_models_mergeVersionAliases(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1MergeVersionAliasesRequest> &oai_google_cloud_aiplatform_v1_merge_version_aliases_request = ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1MergeVersionAliasesRequest>());

    /**
    * @param[in]  model QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_aiplatform_v1_update_explanation_dataset_request OAIGoogleCloudAiplatformV1UpdateExplanationDatasetRequest [optional]
    */
    virtual void aiplatform_projects_locations_models_updateExplanationDataset(const QString &model, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1UpdateExplanationDatasetRequest> &oai_google_cloud_aiplatform_v1_update_explanation_dataset_request = ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1UpdateExplanationDatasetRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_aiplatform_v1_upload_model_request OAIGoogleCloudAiplatformV1UploadModelRequest [optional]
    */
    virtual void aiplatform_projects_locations_models_upload(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1UploadModelRequest> &oai_google_cloud_aiplatform_v1_upload_model_request = ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1UploadModelRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_aiplatform_v1_nas_job OAIGoogleCloudAiplatformV1NasJob [optional]
    */
    virtual void aiplatform_projects_locations_nasJobs_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1NasJob> &oai_google_cloud_aiplatform_v1_nas_job = ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1NasJob>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    * @param[in]  read_mask QString [optional]
    */
    virtual void aiplatform_projects_locations_nasJobs_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &read_mask = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void aiplatform_projects_locations_nasJobs_nasTrialDetails_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  notebook_runtime_template_id QString [optional]
    * @param[in]  oai_google_cloud_aiplatform_v1_notebook_runtime_template OAIGoogleCloudAiplatformV1NotebookRuntimeTemplate [optional]
    */
    virtual void aiplatform_projects_locations_notebookRuntimeTemplates_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &notebook_runtime_template_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1NotebookRuntimeTemplate> &oai_google_cloud_aiplatform_v1_notebook_runtime_template = ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1NotebookRuntimeTemplate>());

    /**
    * @param[in]  resource QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  options_requested_policy_version qint32 [optional]
    */
    virtual void aiplatform_projects_locations_notebookRuntimeTemplates_getIamPolicy(const QString &resource, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &options_requested_policy_version = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  order_by QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    * @param[in]  read_mask QString [optional]
    */
    virtual void aiplatform_projects_locations_notebookRuntimeTemplates_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &read_mask = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_iam_v1_set_iam_policy_request OAIGoogleIamV1SetIamPolicyRequest [optional]
    */
    virtual void aiplatform_projects_locations_notebookRuntimeTemplates_setIamPolicy(const QString &resource, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleIamV1SetIamPolicyRequest> &oai_google_iam_v1_set_iam_policy_request = ::OpenAPI::OptionalParam<OAIGoogleIamV1SetIamPolicyRequest>());

    /**
    * @param[in]  resource QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  permissions QList<QString> [optional]
    */
    virtual void aiplatform_projects_locations_notebookRuntimeTemplates_testIamPermissions(const QString &resource, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &permissions = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_aiplatform_v1_assign_notebook_runtime_request OAIGoogleCloudAiplatformV1AssignNotebookRuntimeRequest [optional]
    */
    virtual void aiplatform_projects_locations_notebookRuntimes_assign(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1AssignNotebookRuntimeRequest> &oai_google_cloud_aiplatform_v1_assign_notebook_runtime_request = ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1AssignNotebookRuntimeRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  order_by QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    * @param[in]  read_mask QString [optional]
    */
    virtual void aiplatform_projects_locations_notebookRuntimes_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &read_mask = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  body OAIObject [optional]
    */
    virtual void aiplatform_projects_locations_notebookRuntimes_start(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIObject> &body = ::OpenAPI::OptionalParam<OAIObject>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  body OAIObject [optional]
    */
    virtual void aiplatform_projects_locations_notebookRuntimes_upgrade(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIObject> &body = ::OpenAPI::OptionalParam<OAIObject>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  pipeline_job_id QString [optional]
    * @param[in]  oai_google_cloud_aiplatform_v1_pipeline_job OAIGoogleCloudAiplatformV1PipelineJob [optional]
    */
    virtual void aiplatform_projects_locations_pipelineJobs_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &pipeline_job_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1PipelineJob> &oai_google_cloud_aiplatform_v1_pipeline_job = ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1PipelineJob>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  order_by QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    * @param[in]  read_mask QString [optional]
    */
    virtual void aiplatform_projects_locations_pipelineJobs_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &read_mask = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  endpoint QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_aiplatform_v1_compute_tokens_request OAIGoogleCloudAiplatformV1ComputeTokensRequest [optional]
    */
    virtual void aiplatform_projects_locations_publishers_models_computeTokens(const QString &endpoint, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1ComputeTokensRequest> &oai_google_cloud_aiplatform_v1_compute_tokens_request = ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1ComputeTokensRequest>());

    /**
    * @param[in]  endpoint QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_aiplatform_v1_count_tokens_request OAIGoogleCloudAiplatformV1CountTokensRequest [optional]
    */
    virtual void aiplatform_projects_locations_publishers_models_countTokens(const QString &endpoint, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1CountTokensRequest> &oai_google_cloud_aiplatform_v1_count_tokens_request = ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1CountTokensRequest>());

    /**
    * @param[in]  model QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_aiplatform_v1_generate_content_request OAIGoogleCloudAiplatformV1GenerateContentRequest [optional]
    */
    virtual void aiplatform_projects_locations_publishers_models_generateContent(const QString &model, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1GenerateContentRequest> &oai_google_cloud_aiplatform_v1_generate_content_request = ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1GenerateContentRequest>());

    /**
    * @param[in]  endpoint QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_aiplatform_v1_predict_request OAIGoogleCloudAiplatformV1PredictRequest [optional]
    */
    virtual void aiplatform_projects_locations_publishers_models_predict(const QString &endpoint, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1PredictRequest> &oai_google_cloud_aiplatform_v1_predict_request = ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1PredictRequest>());

    /**
    * @param[in]  endpoint QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_aiplatform_v1_raw_predict_request OAIGoogleCloudAiplatformV1RawPredictRequest [optional]
    */
    virtual void aiplatform_projects_locations_publishers_models_rawPredict(const QString &endpoint, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1RawPredictRequest> &oai_google_cloud_aiplatform_v1_raw_predict_request = ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1RawPredictRequest>());

    /**
    * @param[in]  endpoint QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_aiplatform_v1_streaming_predict_request OAIGoogleCloudAiplatformV1StreamingPredictRequest [optional]
    */
    virtual void aiplatform_projects_locations_publishers_models_serverStreamingPredict(const QString &endpoint, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1StreamingPredictRequest> &oai_google_cloud_aiplatform_v1_streaming_predict_request = ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1StreamingPredictRequest>());

    /**
    * @param[in]  model QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_aiplatform_v1_generate_content_request OAIGoogleCloudAiplatformV1GenerateContentRequest [optional]
    */
    virtual void aiplatform_projects_locations_publishers_models_streamGenerateContent(const QString &model, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1GenerateContentRequest> &oai_google_cloud_aiplatform_v1_generate_content_request = ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1GenerateContentRequest>());

    /**
    * @param[in]  endpoint QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_aiplatform_v1_stream_raw_predict_request OAIGoogleCloudAiplatformV1StreamRawPredictRequest [optional]
    */
    virtual void aiplatform_projects_locations_publishers_models_streamRawPredict(const QString &endpoint, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1StreamRawPredictRequest> &oai_google_cloud_aiplatform_v1_stream_raw_predict_request = ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1StreamRawPredictRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_aiplatform_v1_schedule OAIGoogleCloudAiplatformV1Schedule [optional]
    */
    virtual void aiplatform_projects_locations_schedules_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1Schedule> &oai_google_cloud_aiplatform_v1_schedule = ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1Schedule>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  order_by QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void aiplatform_projects_locations_schedules_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  body OAIObject [optional]
    */
    virtual void aiplatform_projects_locations_schedules_pause(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIObject> &body = ::OpenAPI::OptionalParam<OAIObject>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_aiplatform_v1_resume_schedule_request OAIGoogleCloudAiplatformV1ResumeScheduleRequest [optional]
    */
    virtual void aiplatform_projects_locations_schedules_resume(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1ResumeScheduleRequest> &oai_google_cloud_aiplatform_v1_resume_schedule_request = ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1ResumeScheduleRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_aiplatform_v1_specialist_pool OAIGoogleCloudAiplatformV1SpecialistPool [optional]
    */
    virtual void aiplatform_projects_locations_specialistPools_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1SpecialistPool> &oai_google_cloud_aiplatform_v1_specialist_pool = ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1SpecialistPool>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    * @param[in]  read_mask QString [optional]
    */
    virtual void aiplatform_projects_locations_specialistPools_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &read_mask = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_aiplatform_v1_study OAIGoogleCloudAiplatformV1Study [optional]
    */
    virtual void aiplatform_projects_locations_studies_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1Study> &oai_google_cloud_aiplatform_v1_study = ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1Study>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void aiplatform_projects_locations_studies_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_aiplatform_v1_lookup_study_request OAIGoogleCloudAiplatformV1LookupStudyRequest [optional]
    */
    virtual void aiplatform_projects_locations_studies_lookup(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1LookupStudyRequest> &oai_google_cloud_aiplatform_v1_lookup_study_request = ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1LookupStudyRequest>());

    /**
    * @param[in]  trial_name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_aiplatform_v1_add_trial_measurement_request OAIGoogleCloudAiplatformV1AddTrialMeasurementRequest [optional]
    */
    virtual void aiplatform_projects_locations_studies_trials_addTrialMeasurement(const QString &trial_name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1AddTrialMeasurementRequest> &oai_google_cloud_aiplatform_v1_add_trial_measurement_request = ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1AddTrialMeasurementRequest>());

    /**
    * @param[in]  trial_name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  body OAIObject [optional]
    */
    virtual void aiplatform_projects_locations_studies_trials_checkTrialEarlyStoppingState(const QString &trial_name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIObject> &body = ::OpenAPI::OptionalParam<OAIObject>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_aiplatform_v1_complete_trial_request OAIGoogleCloudAiplatformV1CompleteTrialRequest [optional]
    */
    virtual void aiplatform_projects_locations_studies_trials_complete(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1CompleteTrialRequest> &oai_google_cloud_aiplatform_v1_complete_trial_request = ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1CompleteTrialRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_aiplatform_v1_trial OAIGoogleCloudAiplatformV1Trial [optional]
    */
    virtual void aiplatform_projects_locations_studies_trials_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1Trial> &oai_google_cloud_aiplatform_v1_trial = ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1Trial>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void aiplatform_projects_locations_studies_trials_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  body OAIObject [optional]
    */
    virtual void aiplatform_projects_locations_studies_trials_listOptimalTrials(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIObject> &body = ::OpenAPI::OptionalParam<OAIObject>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  body OAIObject [optional]
    */
    virtual void aiplatform_projects_locations_studies_trials_stop(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIObject> &body = ::OpenAPI::OptionalParam<OAIObject>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_aiplatform_v1_suggest_trials_request OAIGoogleCloudAiplatformV1SuggestTrialsRequest [optional]
    */
    virtual void aiplatform_projects_locations_studies_trials_suggest(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1SuggestTrialsRequest> &oai_google_cloud_aiplatform_v1_suggest_trials_request = ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1SuggestTrialsRequest>());

    /**
    * @param[in]  tensorboard QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  time_series QList<QString> [optional]
    */
    virtual void aiplatform_projects_locations_tensorboards_batchRead(const QString &tensorboard, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &time_series = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_aiplatform_v1_tensorboard OAIGoogleCloudAiplatformV1Tensorboard [optional]
    */
    virtual void aiplatform_projects_locations_tensorboards_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1Tensorboard> &oai_google_cloud_aiplatform_v1_tensorboard = ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1Tensorboard>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_aiplatform_v1_batch_create_tensorboard_time_series_request OAIGoogleCloudAiplatformV1BatchCreateTensorboardTimeSeriesRequest [optional]
    */
    virtual void aiplatform_projects_locations_tensorboards_experiments_batchCreate(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1BatchCreateTensorboardTimeSeriesRequest> &oai_google_cloud_aiplatform_v1_batch_create_tensorboard_time_series_request = ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1BatchCreateTensorboardTimeSeriesRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  tensorboard_experiment_id QString [optional]
    * @param[in]  oai_google_cloud_aiplatform_v1_tensorboard_experiment OAIGoogleCloudAiplatformV1TensorboardExperiment [optional]
    */
    virtual void aiplatform_projects_locations_tensorboards_experiments_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tensorboard_experiment_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1TensorboardExperiment> &oai_google_cloud_aiplatform_v1_tensorboard_experiment = ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1TensorboardExperiment>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  order_by QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    * @param[in]  read_mask QString [optional]
    */
    virtual void aiplatform_projects_locations_tensorboards_experiments_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &read_mask = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_aiplatform_v1_batch_create_tensorboard_runs_request OAIGoogleCloudAiplatformV1BatchCreateTensorboardRunsRequest [optional]
    */
    virtual void aiplatform_projects_locations_tensorboards_experiments_runs_batchCreate(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1BatchCreateTensorboardRunsRequest> &oai_google_cloud_aiplatform_v1_batch_create_tensorboard_runs_request = ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1BatchCreateTensorboardRunsRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  tensorboard_run_id QString [optional]
    * @param[in]  oai_google_cloud_aiplatform_v1_tensorboard_run OAIGoogleCloudAiplatformV1TensorboardRun [optional]
    */
    virtual void aiplatform_projects_locations_tensorboards_experiments_runs_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tensorboard_run_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1TensorboardRun> &oai_google_cloud_aiplatform_v1_tensorboard_run = ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1TensorboardRun>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  order_by QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    * @param[in]  read_mask QString [optional]
    */
    virtual void aiplatform_projects_locations_tensorboards_experiments_runs_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &read_mask = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  tensorboard_time_series_id QString [optional]
    * @param[in]  oai_google_cloud_aiplatform_v1_tensorboard_time_series OAIGoogleCloudAiplatformV1TensorboardTimeSeries [optional]
    */
    virtual void aiplatform_projects_locations_tensorboards_experiments_runs_timeSeries_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tensorboard_time_series_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1TensorboardTimeSeries> &oai_google_cloud_aiplatform_v1_tensorboard_time_series = ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1TensorboardTimeSeries>());

    /**
    * @param[in]  tensorboard_time_series QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_aiplatform_v1_export_tensorboard_time_series_data_request OAIGoogleCloudAiplatformV1ExportTensorboardTimeSeriesDataRequest [optional]
    */
    virtual void aiplatform_projects_locations_tensorboards_experiments_runs_timeSeries_exportTensorboardTimeSeries(const QString &tensorboard_time_series, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1ExportTensorboardTimeSeriesDataRequest> &oai_google_cloud_aiplatform_v1_export_tensorboard_time_series_data_request = ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1ExportTensorboardTimeSeriesDataRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  order_by QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    * @param[in]  read_mask QString [optional]
    */
    virtual void aiplatform_projects_locations_tensorboards_experiments_runs_timeSeries_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &read_mask = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  update_mask QString [optional]
    * @param[in]  oai_google_cloud_aiplatform_v1_tensorboard_time_series OAIGoogleCloudAiplatformV1TensorboardTimeSeries [optional]
    */
    virtual void aiplatform_projects_locations_tensorboards_experiments_runs_timeSeries_patch(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &update_mask = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1TensorboardTimeSeries> &oai_google_cloud_aiplatform_v1_tensorboard_time_series = ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1TensorboardTimeSeries>());

    /**
    * @param[in]  tensorboard_time_series QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  max_data_points qint32 [optional]
    */
    virtual void aiplatform_projects_locations_tensorboards_experiments_runs_timeSeries_read(const QString &tensorboard_time_series, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_data_points = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  time_series QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  blob_ids QList<QString> [optional]
    */
    virtual void aiplatform_projects_locations_tensorboards_experiments_runs_timeSeries_readBlobData(const QString &time_series, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &blob_ids = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  tensorboard_run QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_aiplatform_v1_write_tensorboard_run_data_request OAIGoogleCloudAiplatformV1WriteTensorboardRunDataRequest [optional]
    */
    virtual void aiplatform_projects_locations_tensorboards_experiments_runs_write(const QString &tensorboard_run, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1WriteTensorboardRunDataRequest> &oai_google_cloud_aiplatform_v1_write_tensorboard_run_data_request = ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1WriteTensorboardRunDataRequest>());

    /**
    * @param[in]  tensorboard_experiment QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_aiplatform_v1_write_tensorboard_experiment_data_request OAIGoogleCloudAiplatformV1WriteTensorboardExperimentDataRequest [optional]
    */
    virtual void aiplatform_projects_locations_tensorboards_experiments_write(const QString &tensorboard_experiment, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1WriteTensorboardExperimentDataRequest> &oai_google_cloud_aiplatform_v1_write_tensorboard_experiment_data_request = ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1WriteTensorboardExperimentDataRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  order_by QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    * @param[in]  read_mask QString [optional]
    */
    virtual void aiplatform_projects_locations_tensorboards_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &read_mask = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  tensorboard QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    */
    virtual void aiplatform_projects_locations_tensorboards_readSize(const QString &tensorboard, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  tensorboard QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    */
    virtual void aiplatform_projects_locations_tensorboards_readUsage(const QString &tensorboard, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_aiplatform_v1_training_pipeline OAIGoogleCloudAiplatformV1TrainingPipeline [optional]
    */
    virtual void aiplatform_projects_locations_trainingPipelines_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1TrainingPipeline> &oai_google_cloud_aiplatform_v1_training_pipeline = ::OpenAPI::OptionalParam<OAIGoogleCloudAiplatformV1TrainingPipeline>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    * @param[in]  read_mask QString [optional]
    */
    virtual void aiplatform_projects_locations_trainingPipelines_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &read_mask = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  body OAIObject [optional]
    */
    virtual void aiplatform_projects_locations_trainingPipelines_operations_cancel(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIObject> &body = ::OpenAPI::OptionalParam<OAIObject>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  force bool [optional]
    */
    virtual void aiplatform_projects_locations_trainingPipelines_operations_delete(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &force = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void aiplatform_projects_locations_trainingPipelines_operations_list(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  timeout QString [optional]
    */
    virtual void aiplatform_projects_locations_trainingPipelines_operations_wait(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &timeout = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void aiplatform_projects_locations_batchPredictionJobs_createCallback(OAIHttpRequestWorker *worker);
    void aiplatform_projects_locations_batchPredictionJobs_listCallback(OAIHttpRequestWorker *worker);
    void aiplatform_projects_locations_customJobs_createCallback(OAIHttpRequestWorker *worker);
    void aiplatform_projects_locations_customJobs_listCallback(OAIHttpRequestWorker *worker);
    void aiplatform_projects_locations_dataLabelingJobs_createCallback(OAIHttpRequestWorker *worker);
    void aiplatform_projects_locations_dataLabelingJobs_listCallback(OAIHttpRequestWorker *worker);
    void aiplatform_projects_locations_datasets_createCallback(OAIHttpRequestWorker *worker);
    void aiplatform_projects_locations_datasets_dataItems_annotations_listCallback(OAIHttpRequestWorker *worker);
    void aiplatform_projects_locations_datasets_dataItems_listCallback(OAIHttpRequestWorker *worker);
    void aiplatform_projects_locations_datasets_datasetVersions_createCallback(OAIHttpRequestWorker *worker);
    void aiplatform_projects_locations_datasets_datasetVersions_listCallback(OAIHttpRequestWorker *worker);
    void aiplatform_projects_locations_datasets_datasetVersions_restoreCallback(OAIHttpRequestWorker *worker);
    void aiplatform_projects_locations_datasets_importCallback(OAIHttpRequestWorker *worker);
    void aiplatform_projects_locations_datasets_listCallback(OAIHttpRequestWorker *worker);
    void aiplatform_projects_locations_datasets_savedQueries_listCallback(OAIHttpRequestWorker *worker);
    void aiplatform_projects_locations_datasets_searchDataItemsCallback(OAIHttpRequestWorker *worker);
    void aiplatform_projects_locations_deploymentResourcePools_createCallback(OAIHttpRequestWorker *worker);
    void aiplatform_projects_locations_deploymentResourcePools_listCallback(OAIHttpRequestWorker *worker);
    void aiplatform_projects_locations_deploymentResourcePools_queryDeployedModelsCallback(OAIHttpRequestWorker *worker);
    void aiplatform_projects_locations_endpoints_createCallback(OAIHttpRequestWorker *worker);
    void aiplatform_projects_locations_endpoints_deployModelCallback(OAIHttpRequestWorker *worker);
    void aiplatform_projects_locations_endpoints_directPredictCallback(OAIHttpRequestWorker *worker);
    void aiplatform_projects_locations_endpoints_directRawPredictCallback(OAIHttpRequestWorker *worker);
    void aiplatform_projects_locations_endpoints_explainCallback(OAIHttpRequestWorker *worker);
    void aiplatform_projects_locations_endpoints_listCallback(OAIHttpRequestWorker *worker);
    void aiplatform_projects_locations_endpoints_mutateDeployedModelCallback(OAIHttpRequestWorker *worker);
    void aiplatform_projects_locations_endpoints_undeployModelCallback(OAIHttpRequestWorker *worker);
    void aiplatform_projects_locations_featureGroups_createCallback(OAIHttpRequestWorker *worker);
    void aiplatform_projects_locations_featureGroups_listCallback(OAIHttpRequestWorker *worker);
    void aiplatform_projects_locations_featureOnlineStores_createCallback(OAIHttpRequestWorker *worker);
    void aiplatform_projects_locations_featureOnlineStores_featureViews_createCallback(OAIHttpRequestWorker *worker);
    void aiplatform_projects_locations_featureOnlineStores_featureViews_featureViewSyncs_listCallback(OAIHttpRequestWorker *worker);
    void aiplatform_projects_locations_featureOnlineStores_featureViews_fetchFeatureValuesCallback(OAIHttpRequestWorker *worker);
    void aiplatform_projects_locations_featureOnlineStores_featureViews_listCallback(OAIHttpRequestWorker *worker);
    void aiplatform_projects_locations_featureOnlineStores_featureViews_searchNearestEntitiesCallback(OAIHttpRequestWorker *worker);
    void aiplatform_projects_locations_featureOnlineStores_featureViews_syncCallback(OAIHttpRequestWorker *worker);
    void aiplatform_projects_locations_featureOnlineStores_listCallback(OAIHttpRequestWorker *worker);
    void aiplatform_projects_locations_featureOnlineStores_operations_listWaitCallback(OAIHttpRequestWorker *worker);
    void aiplatform_projects_locations_featurestores_batchReadFeatureValuesCallback(OAIHttpRequestWorker *worker);
    void aiplatform_projects_locations_featurestores_createCallback(OAIHttpRequestWorker *worker);
    void aiplatform_projects_locations_featurestores_entityTypes_createCallback(OAIHttpRequestWorker *worker);
    void aiplatform_projects_locations_featurestores_entityTypes_deleteFeatureValuesCallback(OAIHttpRequestWorker *worker);
    void aiplatform_projects_locations_featurestores_entityTypes_exportFeatureValuesCallback(OAIHttpRequestWorker *worker);
    void aiplatform_projects_locations_featurestores_entityTypes_features_batchCreateCallback(OAIHttpRequestWorker *worker);
    void aiplatform_projects_locations_featurestores_entityTypes_features_createCallback(OAIHttpRequestWorker *worker);
    void aiplatform_projects_locations_featurestores_entityTypes_features_listCallback(OAIHttpRequestWorker *worker);
    void aiplatform_projects_locations_featurestores_entityTypes_importFeatureValuesCallback(OAIHttpRequestWorker *worker);
    void aiplatform_projects_locations_featurestores_entityTypes_listCallback(OAIHttpRequestWorker *worker);
    void aiplatform_projects_locations_featurestores_entityTypes_readFeatureValuesCallback(OAIHttpRequestWorker *worker);
    void aiplatform_projects_locations_featurestores_entityTypes_streamingReadFeatureValuesCallback(OAIHttpRequestWorker *worker);
    void aiplatform_projects_locations_featurestores_entityTypes_writeFeatureValuesCallback(OAIHttpRequestWorker *worker);
    void aiplatform_projects_locations_featurestores_listCallback(OAIHttpRequestWorker *worker);
    void aiplatform_projects_locations_featurestores_searchFeaturesCallback(OAIHttpRequestWorker *worker);
    void aiplatform_projects_locations_hyperparameterTuningJobs_createCallback(OAIHttpRequestWorker *worker);
    void aiplatform_projects_locations_hyperparameterTuningJobs_listCallback(OAIHttpRequestWorker *worker);
    void aiplatform_projects_locations_indexEndpoints_createCallback(OAIHttpRequestWorker *worker);
    void aiplatform_projects_locations_indexEndpoints_deployIndexCallback(OAIHttpRequestWorker *worker);
    void aiplatform_projects_locations_indexEndpoints_findNeighborsCallback(OAIHttpRequestWorker *worker);
    void aiplatform_projects_locations_indexEndpoints_listCallback(OAIHttpRequestWorker *worker);
    void aiplatform_projects_locations_indexEndpoints_mutateDeployedIndexCallback(OAIHttpRequestWorker *worker);
    void aiplatform_projects_locations_indexEndpoints_readIndexDatapointsCallback(OAIHttpRequestWorker *worker);
    void aiplatform_projects_locations_indexEndpoints_undeployIndexCallback(OAIHttpRequestWorker *worker);
    void aiplatform_projects_locations_indexes_createCallback(OAIHttpRequestWorker *worker);
    void aiplatform_projects_locations_indexes_listCallback(OAIHttpRequestWorker *worker);
    void aiplatform_projects_locations_indexes_removeDatapointsCallback(OAIHttpRequestWorker *worker);
    void aiplatform_projects_locations_indexes_upsertDatapointsCallback(OAIHttpRequestWorker *worker);
    void aiplatform_projects_locations_listCallback(OAIHttpRequestWorker *worker);
    void aiplatform_projects_locations_metadataStores_artifacts_createCallback(OAIHttpRequestWorker *worker);
    void aiplatform_projects_locations_metadataStores_artifacts_listCallback(OAIHttpRequestWorker *worker);
    void aiplatform_projects_locations_metadataStores_artifacts_purgeCallback(OAIHttpRequestWorker *worker);
    void aiplatform_projects_locations_metadataStores_artifacts_queryArtifactLineageSubgraphCallback(OAIHttpRequestWorker *worker);
    void aiplatform_projects_locations_metadataStores_contexts_addContextArtifactsAndExecutionsCallback(OAIHttpRequestWorker *worker);
    void aiplatform_projects_locations_metadataStores_contexts_addContextChildrenCallback(OAIHttpRequestWorker *worker);
    void aiplatform_projects_locations_metadataStores_contexts_createCallback(OAIHttpRequestWorker *worker);
    void aiplatform_projects_locations_metadataStores_contexts_listCallback(OAIHttpRequestWorker *worker);
    void aiplatform_projects_locations_metadataStores_contexts_purgeCallback(OAIHttpRequestWorker *worker);
    void aiplatform_projects_locations_metadataStores_contexts_queryContextLineageSubgraphCallback(OAIHttpRequestWorker *worker);
    void aiplatform_projects_locations_metadataStores_contexts_removeContextChildrenCallback(OAIHttpRequestWorker *worker);
    void aiplatform_projects_locations_metadataStores_createCallback(OAIHttpRequestWorker *worker);
    void aiplatform_projects_locations_metadataStores_executions_addExecutionEventsCallback(OAIHttpRequestWorker *worker);
    void aiplatform_projects_locations_metadataStores_executions_createCallback(OAIHttpRequestWorker *worker);
    void aiplatform_projects_locations_metadataStores_executions_listCallback(OAIHttpRequestWorker *worker);
    void aiplatform_projects_locations_metadataStores_executions_purgeCallback(OAIHttpRequestWorker *worker);
    void aiplatform_projects_locations_metadataStores_executions_queryExecutionInputsAndOutputsCallback(OAIHttpRequestWorker *worker);
    void aiplatform_projects_locations_metadataStores_listCallback(OAIHttpRequestWorker *worker);
    void aiplatform_projects_locations_metadataStores_metadataSchemas_createCallback(OAIHttpRequestWorker *worker);
    void aiplatform_projects_locations_metadataStores_metadataSchemas_listCallback(OAIHttpRequestWorker *worker);
    void aiplatform_projects_locations_migratableResources_batchMigrateCallback(OAIHttpRequestWorker *worker);
    void aiplatform_projects_locations_migratableResources_searchCallback(OAIHttpRequestWorker *worker);
    void aiplatform_projects_locations_modelDeploymentMonitoringJobs_createCallback(OAIHttpRequestWorker *worker);
    void aiplatform_projects_locations_modelDeploymentMonitoringJobs_listCallback(OAIHttpRequestWorker *worker);
    void aiplatform_projects_locations_modelDeploymentMonitoringJobs_searchModelDeploymentMonitoringStatsAnomaliesCallback(OAIHttpRequestWorker *worker);
    void aiplatform_projects_locations_models_copyCallback(OAIHttpRequestWorker *worker);
    void aiplatform_projects_locations_models_deleteVersionCallback(OAIHttpRequestWorker *worker);
    void aiplatform_projects_locations_models_evaluations_importCallback(OAIHttpRequestWorker *worker);
    void aiplatform_projects_locations_models_evaluations_listCallback(OAIHttpRequestWorker *worker);
    void aiplatform_projects_locations_models_evaluations_slices_batchImportCallback(OAIHttpRequestWorker *worker);
    void aiplatform_projects_locations_models_evaluations_slices_listCallback(OAIHttpRequestWorker *worker);
    void aiplatform_projects_locations_models_exportCallback(OAIHttpRequestWorker *worker);
    void aiplatform_projects_locations_models_listCallback(OAIHttpRequestWorker *worker);
    void aiplatform_projects_locations_models_listVersionsCallback(OAIHttpRequestWorker *worker);
    void aiplatform_projects_locations_models_mergeVersionAliasesCallback(OAIHttpRequestWorker *worker);
    void aiplatform_projects_locations_models_updateExplanationDatasetCallback(OAIHttpRequestWorker *worker);
    void aiplatform_projects_locations_models_uploadCallback(OAIHttpRequestWorker *worker);
    void aiplatform_projects_locations_nasJobs_createCallback(OAIHttpRequestWorker *worker);
    void aiplatform_projects_locations_nasJobs_listCallback(OAIHttpRequestWorker *worker);
    void aiplatform_projects_locations_nasJobs_nasTrialDetails_listCallback(OAIHttpRequestWorker *worker);
    void aiplatform_projects_locations_notebookRuntimeTemplates_createCallback(OAIHttpRequestWorker *worker);
    void aiplatform_projects_locations_notebookRuntimeTemplates_getIamPolicyCallback(OAIHttpRequestWorker *worker);
    void aiplatform_projects_locations_notebookRuntimeTemplates_listCallback(OAIHttpRequestWorker *worker);
    void aiplatform_projects_locations_notebookRuntimeTemplates_setIamPolicyCallback(OAIHttpRequestWorker *worker);
    void aiplatform_projects_locations_notebookRuntimeTemplates_testIamPermissionsCallback(OAIHttpRequestWorker *worker);
    void aiplatform_projects_locations_notebookRuntimes_assignCallback(OAIHttpRequestWorker *worker);
    void aiplatform_projects_locations_notebookRuntimes_listCallback(OAIHttpRequestWorker *worker);
    void aiplatform_projects_locations_notebookRuntimes_startCallback(OAIHttpRequestWorker *worker);
    void aiplatform_projects_locations_notebookRuntimes_upgradeCallback(OAIHttpRequestWorker *worker);
    void aiplatform_projects_locations_pipelineJobs_createCallback(OAIHttpRequestWorker *worker);
    void aiplatform_projects_locations_pipelineJobs_listCallback(OAIHttpRequestWorker *worker);
    void aiplatform_projects_locations_publishers_models_computeTokensCallback(OAIHttpRequestWorker *worker);
    void aiplatform_projects_locations_publishers_models_countTokensCallback(OAIHttpRequestWorker *worker);
    void aiplatform_projects_locations_publishers_models_generateContentCallback(OAIHttpRequestWorker *worker);
    void aiplatform_projects_locations_publishers_models_predictCallback(OAIHttpRequestWorker *worker);
    void aiplatform_projects_locations_publishers_models_rawPredictCallback(OAIHttpRequestWorker *worker);
    void aiplatform_projects_locations_publishers_models_serverStreamingPredictCallback(OAIHttpRequestWorker *worker);
    void aiplatform_projects_locations_publishers_models_streamGenerateContentCallback(OAIHttpRequestWorker *worker);
    void aiplatform_projects_locations_publishers_models_streamRawPredictCallback(OAIHttpRequestWorker *worker);
    void aiplatform_projects_locations_schedules_createCallback(OAIHttpRequestWorker *worker);
    void aiplatform_projects_locations_schedules_listCallback(OAIHttpRequestWorker *worker);
    void aiplatform_projects_locations_schedules_pauseCallback(OAIHttpRequestWorker *worker);
    void aiplatform_projects_locations_schedules_resumeCallback(OAIHttpRequestWorker *worker);
    void aiplatform_projects_locations_specialistPools_createCallback(OAIHttpRequestWorker *worker);
    void aiplatform_projects_locations_specialistPools_listCallback(OAIHttpRequestWorker *worker);
    void aiplatform_projects_locations_studies_createCallback(OAIHttpRequestWorker *worker);
    void aiplatform_projects_locations_studies_listCallback(OAIHttpRequestWorker *worker);
    void aiplatform_projects_locations_studies_lookupCallback(OAIHttpRequestWorker *worker);
    void aiplatform_projects_locations_studies_trials_addTrialMeasurementCallback(OAIHttpRequestWorker *worker);
    void aiplatform_projects_locations_studies_trials_checkTrialEarlyStoppingStateCallback(OAIHttpRequestWorker *worker);
    void aiplatform_projects_locations_studies_trials_completeCallback(OAIHttpRequestWorker *worker);
    void aiplatform_projects_locations_studies_trials_createCallback(OAIHttpRequestWorker *worker);
    void aiplatform_projects_locations_studies_trials_listCallback(OAIHttpRequestWorker *worker);
    void aiplatform_projects_locations_studies_trials_listOptimalTrialsCallback(OAIHttpRequestWorker *worker);
    void aiplatform_projects_locations_studies_trials_stopCallback(OAIHttpRequestWorker *worker);
    void aiplatform_projects_locations_studies_trials_suggestCallback(OAIHttpRequestWorker *worker);
    void aiplatform_projects_locations_tensorboards_batchReadCallback(OAIHttpRequestWorker *worker);
    void aiplatform_projects_locations_tensorboards_createCallback(OAIHttpRequestWorker *worker);
    void aiplatform_projects_locations_tensorboards_experiments_batchCreateCallback(OAIHttpRequestWorker *worker);
    void aiplatform_projects_locations_tensorboards_experiments_createCallback(OAIHttpRequestWorker *worker);
    void aiplatform_projects_locations_tensorboards_experiments_listCallback(OAIHttpRequestWorker *worker);
    void aiplatform_projects_locations_tensorboards_experiments_runs_batchCreateCallback(OAIHttpRequestWorker *worker);
    void aiplatform_projects_locations_tensorboards_experiments_runs_createCallback(OAIHttpRequestWorker *worker);
    void aiplatform_projects_locations_tensorboards_experiments_runs_listCallback(OAIHttpRequestWorker *worker);
    void aiplatform_projects_locations_tensorboards_experiments_runs_timeSeries_createCallback(OAIHttpRequestWorker *worker);
    void aiplatform_projects_locations_tensorboards_experiments_runs_timeSeries_exportTensorboardTimeSeriesCallback(OAIHttpRequestWorker *worker);
    void aiplatform_projects_locations_tensorboards_experiments_runs_timeSeries_listCallback(OAIHttpRequestWorker *worker);
    void aiplatform_projects_locations_tensorboards_experiments_runs_timeSeries_patchCallback(OAIHttpRequestWorker *worker);
    void aiplatform_projects_locations_tensorboards_experiments_runs_timeSeries_readCallback(OAIHttpRequestWorker *worker);
    void aiplatform_projects_locations_tensorboards_experiments_runs_timeSeries_readBlobDataCallback(OAIHttpRequestWorker *worker);
    void aiplatform_projects_locations_tensorboards_experiments_runs_writeCallback(OAIHttpRequestWorker *worker);
    void aiplatform_projects_locations_tensorboards_experiments_writeCallback(OAIHttpRequestWorker *worker);
    void aiplatform_projects_locations_tensorboards_listCallback(OAIHttpRequestWorker *worker);
    void aiplatform_projects_locations_tensorboards_readSizeCallback(OAIHttpRequestWorker *worker);
    void aiplatform_projects_locations_tensorboards_readUsageCallback(OAIHttpRequestWorker *worker);
    void aiplatform_projects_locations_trainingPipelines_createCallback(OAIHttpRequestWorker *worker);
    void aiplatform_projects_locations_trainingPipelines_listCallback(OAIHttpRequestWorker *worker);
    void aiplatform_projects_locations_trainingPipelines_operations_cancelCallback(OAIHttpRequestWorker *worker);
    void aiplatform_projects_locations_trainingPipelines_operations_deleteCallback(OAIHttpRequestWorker *worker);
    void aiplatform_projects_locations_trainingPipelines_operations_listCallback(OAIHttpRequestWorker *worker);
    void aiplatform_projects_locations_trainingPipelines_operations_waitCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void aiplatform_projects_locations_batchPredictionJobs_createSignal(OAIGoogleCloudAiplatformV1BatchPredictionJob summary);
    void aiplatform_projects_locations_batchPredictionJobs_listSignal(OAIGoogleCloudAiplatformV1ListBatchPredictionJobsResponse summary);
    void aiplatform_projects_locations_customJobs_createSignal(OAIGoogleCloudAiplatformV1CustomJob summary);
    void aiplatform_projects_locations_customJobs_listSignal(OAIGoogleCloudAiplatformV1ListCustomJobsResponse summary);
    void aiplatform_projects_locations_dataLabelingJobs_createSignal(OAIGoogleCloudAiplatformV1DataLabelingJob summary);
    void aiplatform_projects_locations_dataLabelingJobs_listSignal(OAIGoogleCloudAiplatformV1ListDataLabelingJobsResponse summary);
    void aiplatform_projects_locations_datasets_createSignal(OAIGoogleLongrunningOperation summary);
    void aiplatform_projects_locations_datasets_dataItems_annotations_listSignal(OAIGoogleCloudAiplatformV1ListAnnotationsResponse summary);
    void aiplatform_projects_locations_datasets_dataItems_listSignal(OAIGoogleCloudAiplatformV1ListDataItemsResponse summary);
    void aiplatform_projects_locations_datasets_datasetVersions_createSignal(OAIGoogleLongrunningOperation summary);
    void aiplatform_projects_locations_datasets_datasetVersions_listSignal(OAIGoogleCloudAiplatformV1ListDatasetVersionsResponse summary);
    void aiplatform_projects_locations_datasets_datasetVersions_restoreSignal(OAIGoogleLongrunningOperation summary);
    void aiplatform_projects_locations_datasets_importSignal(OAIGoogleLongrunningOperation summary);
    void aiplatform_projects_locations_datasets_listSignal(OAIGoogleCloudAiplatformV1ListDatasetsResponse summary);
    void aiplatform_projects_locations_datasets_savedQueries_listSignal(OAIGoogleCloudAiplatformV1ListSavedQueriesResponse summary);
    void aiplatform_projects_locations_datasets_searchDataItemsSignal(OAIGoogleCloudAiplatformV1SearchDataItemsResponse summary);
    void aiplatform_projects_locations_deploymentResourcePools_createSignal(OAIGoogleLongrunningOperation summary);
    void aiplatform_projects_locations_deploymentResourcePools_listSignal(OAIGoogleCloudAiplatformV1ListDeploymentResourcePoolsResponse summary);
    void aiplatform_projects_locations_deploymentResourcePools_queryDeployedModelsSignal(OAIGoogleCloudAiplatformV1QueryDeployedModelsResponse summary);
    void aiplatform_projects_locations_endpoints_createSignal(OAIGoogleLongrunningOperation summary);
    void aiplatform_projects_locations_endpoints_deployModelSignal(OAIGoogleLongrunningOperation summary);
    void aiplatform_projects_locations_endpoints_directPredictSignal(OAIGoogleCloudAiplatformV1DirectPredictResponse summary);
    void aiplatform_projects_locations_endpoints_directRawPredictSignal(OAIGoogleCloudAiplatformV1DirectRawPredictResponse summary);
    void aiplatform_projects_locations_endpoints_explainSignal(OAIGoogleCloudAiplatformV1ExplainResponse summary);
    void aiplatform_projects_locations_endpoints_listSignal(OAIGoogleCloudAiplatformV1ListEndpointsResponse summary);
    void aiplatform_projects_locations_endpoints_mutateDeployedModelSignal(OAIGoogleLongrunningOperation summary);
    void aiplatform_projects_locations_endpoints_undeployModelSignal(OAIGoogleLongrunningOperation summary);
    void aiplatform_projects_locations_featureGroups_createSignal(OAIGoogleLongrunningOperation summary);
    void aiplatform_projects_locations_featureGroups_listSignal(OAIGoogleCloudAiplatformV1ListFeatureGroupsResponse summary);
    void aiplatform_projects_locations_featureOnlineStores_createSignal(OAIGoogleLongrunningOperation summary);
    void aiplatform_projects_locations_featureOnlineStores_featureViews_createSignal(OAIGoogleLongrunningOperation summary);
    void aiplatform_projects_locations_featureOnlineStores_featureViews_featureViewSyncs_listSignal(OAIGoogleCloudAiplatformV1ListFeatureViewSyncsResponse summary);
    void aiplatform_projects_locations_featureOnlineStores_featureViews_fetchFeatureValuesSignal(OAIGoogleCloudAiplatformV1FetchFeatureValuesResponse summary);
    void aiplatform_projects_locations_featureOnlineStores_featureViews_listSignal(OAIGoogleCloudAiplatformV1ListFeatureViewsResponse summary);
    void aiplatform_projects_locations_featureOnlineStores_featureViews_searchNearestEntitiesSignal(OAIGoogleCloudAiplatformV1SearchNearestEntitiesResponse summary);
    void aiplatform_projects_locations_featureOnlineStores_featureViews_syncSignal(OAIGoogleCloudAiplatformV1SyncFeatureViewResponse summary);
    void aiplatform_projects_locations_featureOnlineStores_listSignal(OAIGoogleCloudAiplatformV1ListFeatureOnlineStoresResponse summary);
    void aiplatform_projects_locations_featureOnlineStores_operations_listWaitSignal(OAIGoogleLongrunningListOperationsResponse summary);
    void aiplatform_projects_locations_featurestores_batchReadFeatureValuesSignal(OAIGoogleLongrunningOperation summary);
    void aiplatform_projects_locations_featurestores_createSignal(OAIGoogleLongrunningOperation summary);
    void aiplatform_projects_locations_featurestores_entityTypes_createSignal(OAIGoogleLongrunningOperation summary);
    void aiplatform_projects_locations_featurestores_entityTypes_deleteFeatureValuesSignal(OAIGoogleLongrunningOperation summary);
    void aiplatform_projects_locations_featurestores_entityTypes_exportFeatureValuesSignal(OAIGoogleLongrunningOperation summary);
    void aiplatform_projects_locations_featurestores_entityTypes_features_batchCreateSignal(OAIGoogleLongrunningOperation summary);
    void aiplatform_projects_locations_featurestores_entityTypes_features_createSignal(OAIGoogleLongrunningOperation summary);
    void aiplatform_projects_locations_featurestores_entityTypes_features_listSignal(OAIGoogleCloudAiplatformV1ListFeaturesResponse summary);
    void aiplatform_projects_locations_featurestores_entityTypes_importFeatureValuesSignal(OAIGoogleLongrunningOperation summary);
    void aiplatform_projects_locations_featurestores_entityTypes_listSignal(OAIGoogleCloudAiplatformV1ListEntityTypesResponse summary);
    void aiplatform_projects_locations_featurestores_entityTypes_readFeatureValuesSignal(OAIGoogleCloudAiplatformV1ReadFeatureValuesResponse summary);
    void aiplatform_projects_locations_featurestores_entityTypes_streamingReadFeatureValuesSignal(OAIGoogleCloudAiplatformV1ReadFeatureValuesResponse summary);
    void aiplatform_projects_locations_featurestores_entityTypes_writeFeatureValuesSignal(OAIObject summary);
    void aiplatform_projects_locations_featurestores_listSignal(OAIGoogleCloudAiplatformV1ListFeaturestoresResponse summary);
    void aiplatform_projects_locations_featurestores_searchFeaturesSignal(OAIGoogleCloudAiplatformV1SearchFeaturesResponse summary);
    void aiplatform_projects_locations_hyperparameterTuningJobs_createSignal(OAIGoogleCloudAiplatformV1HyperparameterTuningJob summary);
    void aiplatform_projects_locations_hyperparameterTuningJobs_listSignal(OAIGoogleCloudAiplatformV1ListHyperparameterTuningJobsResponse summary);
    void aiplatform_projects_locations_indexEndpoints_createSignal(OAIGoogleLongrunningOperation summary);
    void aiplatform_projects_locations_indexEndpoints_deployIndexSignal(OAIGoogleLongrunningOperation summary);
    void aiplatform_projects_locations_indexEndpoints_findNeighborsSignal(OAIGoogleCloudAiplatformV1FindNeighborsResponse summary);
    void aiplatform_projects_locations_indexEndpoints_listSignal(OAIGoogleCloudAiplatformV1ListIndexEndpointsResponse summary);
    void aiplatform_projects_locations_indexEndpoints_mutateDeployedIndexSignal(OAIGoogleLongrunningOperation summary);
    void aiplatform_projects_locations_indexEndpoints_readIndexDatapointsSignal(OAIGoogleCloudAiplatformV1ReadIndexDatapointsResponse summary);
    void aiplatform_projects_locations_indexEndpoints_undeployIndexSignal(OAIGoogleLongrunningOperation summary);
    void aiplatform_projects_locations_indexes_createSignal(OAIGoogleLongrunningOperation summary);
    void aiplatform_projects_locations_indexes_listSignal(OAIGoogleCloudAiplatformV1ListIndexesResponse summary);
    void aiplatform_projects_locations_indexes_removeDatapointsSignal(OAIObject summary);
    void aiplatform_projects_locations_indexes_upsertDatapointsSignal(OAIObject summary);
    void aiplatform_projects_locations_listSignal(OAIGoogleCloudLocationListLocationsResponse summary);
    void aiplatform_projects_locations_metadataStores_artifacts_createSignal(OAIGoogleCloudAiplatformV1Artifact summary);
    void aiplatform_projects_locations_metadataStores_artifacts_listSignal(OAIGoogleCloudAiplatformV1ListArtifactsResponse summary);
    void aiplatform_projects_locations_metadataStores_artifacts_purgeSignal(OAIGoogleLongrunningOperation summary);
    void aiplatform_projects_locations_metadataStores_artifacts_queryArtifactLineageSubgraphSignal(OAIGoogleCloudAiplatformV1LineageSubgraph summary);
    void aiplatform_projects_locations_metadataStores_contexts_addContextArtifactsAndExecutionsSignal(OAIObject summary);
    void aiplatform_projects_locations_metadataStores_contexts_addContextChildrenSignal(OAIObject summary);
    void aiplatform_projects_locations_metadataStores_contexts_createSignal(OAIGoogleCloudAiplatformV1Context summary);
    void aiplatform_projects_locations_metadataStores_contexts_listSignal(OAIGoogleCloudAiplatformV1ListContextsResponse summary);
    void aiplatform_projects_locations_metadataStores_contexts_purgeSignal(OAIGoogleLongrunningOperation summary);
    void aiplatform_projects_locations_metadataStores_contexts_queryContextLineageSubgraphSignal(OAIGoogleCloudAiplatformV1LineageSubgraph summary);
    void aiplatform_projects_locations_metadataStores_contexts_removeContextChildrenSignal(OAIObject summary);
    void aiplatform_projects_locations_metadataStores_createSignal(OAIGoogleLongrunningOperation summary);
    void aiplatform_projects_locations_metadataStores_executions_addExecutionEventsSignal(OAIObject summary);
    void aiplatform_projects_locations_metadataStores_executions_createSignal(OAIGoogleCloudAiplatformV1Execution summary);
    void aiplatform_projects_locations_metadataStores_executions_listSignal(OAIGoogleCloudAiplatformV1ListExecutionsResponse summary);
    void aiplatform_projects_locations_metadataStores_executions_purgeSignal(OAIGoogleLongrunningOperation summary);
    void aiplatform_projects_locations_metadataStores_executions_queryExecutionInputsAndOutputsSignal(OAIGoogleCloudAiplatformV1LineageSubgraph summary);
    void aiplatform_projects_locations_metadataStores_listSignal(OAIGoogleCloudAiplatformV1ListMetadataStoresResponse summary);
    void aiplatform_projects_locations_metadataStores_metadataSchemas_createSignal(OAIGoogleCloudAiplatformV1MetadataSchema summary);
    void aiplatform_projects_locations_metadataStores_metadataSchemas_listSignal(OAIGoogleCloudAiplatformV1ListMetadataSchemasResponse summary);
    void aiplatform_projects_locations_migratableResources_batchMigrateSignal(OAIGoogleLongrunningOperation summary);
    void aiplatform_projects_locations_migratableResources_searchSignal(OAIGoogleCloudAiplatformV1SearchMigratableResourcesResponse summary);
    void aiplatform_projects_locations_modelDeploymentMonitoringJobs_createSignal(OAIGoogleCloudAiplatformV1ModelDeploymentMonitoringJob summary);
    void aiplatform_projects_locations_modelDeploymentMonitoringJobs_listSignal(OAIGoogleCloudAiplatformV1ListModelDeploymentMonitoringJobsResponse summary);
    void aiplatform_projects_locations_modelDeploymentMonitoringJobs_searchModelDeploymentMonitoringStatsAnomaliesSignal(OAIGoogleCloudAiplatformV1SearchModelDeploymentMonitoringStatsAnomaliesResponse summary);
    void aiplatform_projects_locations_models_copySignal(OAIGoogleLongrunningOperation summary);
    void aiplatform_projects_locations_models_deleteVersionSignal(OAIGoogleLongrunningOperation summary);
    void aiplatform_projects_locations_models_evaluations_importSignal(OAIGoogleCloudAiplatformV1ModelEvaluation summary);
    void aiplatform_projects_locations_models_evaluations_listSignal(OAIGoogleCloudAiplatformV1ListModelEvaluationsResponse summary);
    void aiplatform_projects_locations_models_evaluations_slices_batchImportSignal(OAIGoogleCloudAiplatformV1BatchImportEvaluatedAnnotationsResponse summary);
    void aiplatform_projects_locations_models_evaluations_slices_listSignal(OAIGoogleCloudAiplatformV1ListModelEvaluationSlicesResponse summary);
    void aiplatform_projects_locations_models_exportSignal(OAIGoogleLongrunningOperation summary);
    void aiplatform_projects_locations_models_listSignal(OAIGoogleCloudAiplatformV1ListModelsResponse summary);
    void aiplatform_projects_locations_models_listVersionsSignal(OAIGoogleCloudAiplatformV1ListModelVersionsResponse summary);
    void aiplatform_projects_locations_models_mergeVersionAliasesSignal(OAIGoogleCloudAiplatformV1Model summary);
    void aiplatform_projects_locations_models_updateExplanationDatasetSignal(OAIGoogleLongrunningOperation summary);
    void aiplatform_projects_locations_models_uploadSignal(OAIGoogleLongrunningOperation summary);
    void aiplatform_projects_locations_nasJobs_createSignal(OAIGoogleCloudAiplatformV1NasJob summary);
    void aiplatform_projects_locations_nasJobs_listSignal(OAIGoogleCloudAiplatformV1ListNasJobsResponse summary);
    void aiplatform_projects_locations_nasJobs_nasTrialDetails_listSignal(OAIGoogleCloudAiplatformV1ListNasTrialDetailsResponse summary);
    void aiplatform_projects_locations_notebookRuntimeTemplates_createSignal(OAIGoogleLongrunningOperation summary);
    void aiplatform_projects_locations_notebookRuntimeTemplates_getIamPolicySignal(OAIGoogleIamV1Policy summary);
    void aiplatform_projects_locations_notebookRuntimeTemplates_listSignal(OAIGoogleCloudAiplatformV1ListNotebookRuntimeTemplatesResponse summary);
    void aiplatform_projects_locations_notebookRuntimeTemplates_setIamPolicySignal(OAIGoogleIamV1Policy summary);
    void aiplatform_projects_locations_notebookRuntimeTemplates_testIamPermissionsSignal(OAIGoogleIamV1TestIamPermissionsResponse summary);
    void aiplatform_projects_locations_notebookRuntimes_assignSignal(OAIGoogleLongrunningOperation summary);
    void aiplatform_projects_locations_notebookRuntimes_listSignal(OAIGoogleCloudAiplatformV1ListNotebookRuntimesResponse summary);
    void aiplatform_projects_locations_notebookRuntimes_startSignal(OAIGoogleLongrunningOperation summary);
    void aiplatform_projects_locations_notebookRuntimes_upgradeSignal(OAIGoogleLongrunningOperation summary);
    void aiplatform_projects_locations_pipelineJobs_createSignal(OAIGoogleCloudAiplatformV1PipelineJob summary);
    void aiplatform_projects_locations_pipelineJobs_listSignal(OAIGoogleCloudAiplatformV1ListPipelineJobsResponse summary);
    void aiplatform_projects_locations_publishers_models_computeTokensSignal(OAIGoogleCloudAiplatformV1ComputeTokensResponse summary);
    void aiplatform_projects_locations_publishers_models_countTokensSignal(OAIGoogleCloudAiplatformV1CountTokensResponse summary);
    void aiplatform_projects_locations_publishers_models_generateContentSignal(OAIGoogleCloudAiplatformV1GenerateContentResponse summary);
    void aiplatform_projects_locations_publishers_models_predictSignal(OAIGoogleCloudAiplatformV1PredictResponse summary);
    void aiplatform_projects_locations_publishers_models_rawPredictSignal(OAIGoogleApiHttpBody summary);
    void aiplatform_projects_locations_publishers_models_serverStreamingPredictSignal(OAIGoogleCloudAiplatformV1StreamingPredictResponse summary);
    void aiplatform_projects_locations_publishers_models_streamGenerateContentSignal(OAIGoogleCloudAiplatformV1GenerateContentResponse summary);
    void aiplatform_projects_locations_publishers_models_streamRawPredictSignal(OAIGoogleApiHttpBody summary);
    void aiplatform_projects_locations_schedules_createSignal(OAIGoogleCloudAiplatformV1Schedule summary);
    void aiplatform_projects_locations_schedules_listSignal(OAIGoogleCloudAiplatformV1ListSchedulesResponse summary);
    void aiplatform_projects_locations_schedules_pauseSignal(OAIObject summary);
    void aiplatform_projects_locations_schedules_resumeSignal(OAIObject summary);
    void aiplatform_projects_locations_specialistPools_createSignal(OAIGoogleLongrunningOperation summary);
    void aiplatform_projects_locations_specialistPools_listSignal(OAIGoogleCloudAiplatformV1ListSpecialistPoolsResponse summary);
    void aiplatform_projects_locations_studies_createSignal(OAIGoogleCloudAiplatformV1Study summary);
    void aiplatform_projects_locations_studies_listSignal(OAIGoogleCloudAiplatformV1ListStudiesResponse summary);
    void aiplatform_projects_locations_studies_lookupSignal(OAIGoogleCloudAiplatformV1Study summary);
    void aiplatform_projects_locations_studies_trials_addTrialMeasurementSignal(OAIGoogleCloudAiplatformV1Trial summary);
    void aiplatform_projects_locations_studies_trials_checkTrialEarlyStoppingStateSignal(OAIGoogleLongrunningOperation summary);
    void aiplatform_projects_locations_studies_trials_completeSignal(OAIGoogleCloudAiplatformV1Trial summary);
    void aiplatform_projects_locations_studies_trials_createSignal(OAIGoogleCloudAiplatformV1Trial summary);
    void aiplatform_projects_locations_studies_trials_listSignal(OAIGoogleCloudAiplatformV1ListTrialsResponse summary);
    void aiplatform_projects_locations_studies_trials_listOptimalTrialsSignal(OAIGoogleCloudAiplatformV1ListOptimalTrialsResponse summary);
    void aiplatform_projects_locations_studies_trials_stopSignal(OAIGoogleCloudAiplatformV1Trial summary);
    void aiplatform_projects_locations_studies_trials_suggestSignal(OAIGoogleLongrunningOperation summary);
    void aiplatform_projects_locations_tensorboards_batchReadSignal(OAIGoogleCloudAiplatformV1BatchReadTensorboardTimeSeriesDataResponse summary);
    void aiplatform_projects_locations_tensorboards_createSignal(OAIGoogleLongrunningOperation summary);
    void aiplatform_projects_locations_tensorboards_experiments_batchCreateSignal(OAIGoogleCloudAiplatformV1BatchCreateTensorboardTimeSeriesResponse summary);
    void aiplatform_projects_locations_tensorboards_experiments_createSignal(OAIGoogleCloudAiplatformV1TensorboardExperiment summary);
    void aiplatform_projects_locations_tensorboards_experiments_listSignal(OAIGoogleCloudAiplatformV1ListTensorboardExperimentsResponse summary);
    void aiplatform_projects_locations_tensorboards_experiments_runs_batchCreateSignal(OAIGoogleCloudAiplatformV1BatchCreateTensorboardRunsResponse summary);
    void aiplatform_projects_locations_tensorboards_experiments_runs_createSignal(OAIGoogleCloudAiplatformV1TensorboardRun summary);
    void aiplatform_projects_locations_tensorboards_experiments_runs_listSignal(OAIGoogleCloudAiplatformV1ListTensorboardRunsResponse summary);
    void aiplatform_projects_locations_tensorboards_experiments_runs_timeSeries_createSignal(OAIGoogleCloudAiplatformV1TensorboardTimeSeries summary);
    void aiplatform_projects_locations_tensorboards_experiments_runs_timeSeries_exportTensorboardTimeSeriesSignal(OAIGoogleCloudAiplatformV1ExportTensorboardTimeSeriesDataResponse summary);
    void aiplatform_projects_locations_tensorboards_experiments_runs_timeSeries_listSignal(OAIGoogleCloudAiplatformV1ListTensorboardTimeSeriesResponse summary);
    void aiplatform_projects_locations_tensorboards_experiments_runs_timeSeries_patchSignal(OAIGoogleCloudAiplatformV1TensorboardTimeSeries summary);
    void aiplatform_projects_locations_tensorboards_experiments_runs_timeSeries_readSignal(OAIGoogleCloudAiplatformV1ReadTensorboardTimeSeriesDataResponse summary);
    void aiplatform_projects_locations_tensorboards_experiments_runs_timeSeries_readBlobDataSignal(OAIGoogleCloudAiplatformV1ReadTensorboardBlobDataResponse summary);
    void aiplatform_projects_locations_tensorboards_experiments_runs_writeSignal(OAIObject summary);
    void aiplatform_projects_locations_tensorboards_experiments_writeSignal(OAIObject summary);
    void aiplatform_projects_locations_tensorboards_listSignal(OAIGoogleCloudAiplatformV1ListTensorboardsResponse summary);
    void aiplatform_projects_locations_tensorboards_readSizeSignal(OAIGoogleCloudAiplatformV1ReadTensorboardSizeResponse summary);
    void aiplatform_projects_locations_tensorboards_readUsageSignal(OAIGoogleCloudAiplatformV1ReadTensorboardUsageResponse summary);
    void aiplatform_projects_locations_trainingPipelines_createSignal(OAIGoogleCloudAiplatformV1TrainingPipeline summary);
    void aiplatform_projects_locations_trainingPipelines_listSignal(OAIGoogleCloudAiplatformV1ListTrainingPipelinesResponse summary);
    void aiplatform_projects_locations_trainingPipelines_operations_cancelSignal(OAIObject summary);
    void aiplatform_projects_locations_trainingPipelines_operations_deleteSignal(OAIObject summary);
    void aiplatform_projects_locations_trainingPipelines_operations_listSignal(OAIGoogleLongrunningListOperationsResponse summary);
    void aiplatform_projects_locations_trainingPipelines_operations_waitSignal(OAIGoogleLongrunningOperation summary);


    void aiplatform_projects_locations_batchPredictionJobs_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudAiplatformV1BatchPredictionJob summary);
    void aiplatform_projects_locations_batchPredictionJobs_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudAiplatformV1ListBatchPredictionJobsResponse summary);
    void aiplatform_projects_locations_customJobs_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudAiplatformV1CustomJob summary);
    void aiplatform_projects_locations_customJobs_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudAiplatformV1ListCustomJobsResponse summary);
    void aiplatform_projects_locations_dataLabelingJobs_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudAiplatformV1DataLabelingJob summary);
    void aiplatform_projects_locations_dataLabelingJobs_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudAiplatformV1ListDataLabelingJobsResponse summary);
    void aiplatform_projects_locations_datasets_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void aiplatform_projects_locations_datasets_dataItems_annotations_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudAiplatformV1ListAnnotationsResponse summary);
    void aiplatform_projects_locations_datasets_dataItems_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudAiplatformV1ListDataItemsResponse summary);
    void aiplatform_projects_locations_datasets_datasetVersions_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void aiplatform_projects_locations_datasets_datasetVersions_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudAiplatformV1ListDatasetVersionsResponse summary);
    void aiplatform_projects_locations_datasets_datasetVersions_restoreSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void aiplatform_projects_locations_datasets_importSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void aiplatform_projects_locations_datasets_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudAiplatformV1ListDatasetsResponse summary);
    void aiplatform_projects_locations_datasets_savedQueries_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudAiplatformV1ListSavedQueriesResponse summary);
    void aiplatform_projects_locations_datasets_searchDataItemsSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudAiplatformV1SearchDataItemsResponse summary);
    void aiplatform_projects_locations_deploymentResourcePools_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void aiplatform_projects_locations_deploymentResourcePools_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudAiplatformV1ListDeploymentResourcePoolsResponse summary);
    void aiplatform_projects_locations_deploymentResourcePools_queryDeployedModelsSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudAiplatformV1QueryDeployedModelsResponse summary);
    void aiplatform_projects_locations_endpoints_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void aiplatform_projects_locations_endpoints_deployModelSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void aiplatform_projects_locations_endpoints_directPredictSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudAiplatformV1DirectPredictResponse summary);
    void aiplatform_projects_locations_endpoints_directRawPredictSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudAiplatformV1DirectRawPredictResponse summary);
    void aiplatform_projects_locations_endpoints_explainSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudAiplatformV1ExplainResponse summary);
    void aiplatform_projects_locations_endpoints_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudAiplatformV1ListEndpointsResponse summary);
    void aiplatform_projects_locations_endpoints_mutateDeployedModelSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void aiplatform_projects_locations_endpoints_undeployModelSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void aiplatform_projects_locations_featureGroups_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void aiplatform_projects_locations_featureGroups_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudAiplatformV1ListFeatureGroupsResponse summary);
    void aiplatform_projects_locations_featureOnlineStores_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void aiplatform_projects_locations_featureOnlineStores_featureViews_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void aiplatform_projects_locations_featureOnlineStores_featureViews_featureViewSyncs_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudAiplatformV1ListFeatureViewSyncsResponse summary);
    void aiplatform_projects_locations_featureOnlineStores_featureViews_fetchFeatureValuesSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudAiplatformV1FetchFeatureValuesResponse summary);
    void aiplatform_projects_locations_featureOnlineStores_featureViews_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudAiplatformV1ListFeatureViewsResponse summary);
    void aiplatform_projects_locations_featureOnlineStores_featureViews_searchNearestEntitiesSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudAiplatformV1SearchNearestEntitiesResponse summary);
    void aiplatform_projects_locations_featureOnlineStores_featureViews_syncSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudAiplatformV1SyncFeatureViewResponse summary);
    void aiplatform_projects_locations_featureOnlineStores_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudAiplatformV1ListFeatureOnlineStoresResponse summary);
    void aiplatform_projects_locations_featureOnlineStores_operations_listWaitSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningListOperationsResponse summary);
    void aiplatform_projects_locations_featurestores_batchReadFeatureValuesSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void aiplatform_projects_locations_featurestores_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void aiplatform_projects_locations_featurestores_entityTypes_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void aiplatform_projects_locations_featurestores_entityTypes_deleteFeatureValuesSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void aiplatform_projects_locations_featurestores_entityTypes_exportFeatureValuesSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void aiplatform_projects_locations_featurestores_entityTypes_features_batchCreateSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void aiplatform_projects_locations_featurestores_entityTypes_features_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void aiplatform_projects_locations_featurestores_entityTypes_features_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudAiplatformV1ListFeaturesResponse summary);
    void aiplatform_projects_locations_featurestores_entityTypes_importFeatureValuesSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void aiplatform_projects_locations_featurestores_entityTypes_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudAiplatformV1ListEntityTypesResponse summary);
    void aiplatform_projects_locations_featurestores_entityTypes_readFeatureValuesSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudAiplatformV1ReadFeatureValuesResponse summary);
    void aiplatform_projects_locations_featurestores_entityTypes_streamingReadFeatureValuesSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudAiplatformV1ReadFeatureValuesResponse summary);
    void aiplatform_projects_locations_featurestores_entityTypes_writeFeatureValuesSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void aiplatform_projects_locations_featurestores_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudAiplatformV1ListFeaturestoresResponse summary);
    void aiplatform_projects_locations_featurestores_searchFeaturesSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudAiplatformV1SearchFeaturesResponse summary);
    void aiplatform_projects_locations_hyperparameterTuningJobs_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudAiplatformV1HyperparameterTuningJob summary);
    void aiplatform_projects_locations_hyperparameterTuningJobs_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudAiplatformV1ListHyperparameterTuningJobsResponse summary);
    void aiplatform_projects_locations_indexEndpoints_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void aiplatform_projects_locations_indexEndpoints_deployIndexSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void aiplatform_projects_locations_indexEndpoints_findNeighborsSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudAiplatformV1FindNeighborsResponse summary);
    void aiplatform_projects_locations_indexEndpoints_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudAiplatformV1ListIndexEndpointsResponse summary);
    void aiplatform_projects_locations_indexEndpoints_mutateDeployedIndexSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void aiplatform_projects_locations_indexEndpoints_readIndexDatapointsSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudAiplatformV1ReadIndexDatapointsResponse summary);
    void aiplatform_projects_locations_indexEndpoints_undeployIndexSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void aiplatform_projects_locations_indexes_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void aiplatform_projects_locations_indexes_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudAiplatformV1ListIndexesResponse summary);
    void aiplatform_projects_locations_indexes_removeDatapointsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void aiplatform_projects_locations_indexes_upsertDatapointsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void aiplatform_projects_locations_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudLocationListLocationsResponse summary);
    void aiplatform_projects_locations_metadataStores_artifacts_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudAiplatformV1Artifact summary);
    void aiplatform_projects_locations_metadataStores_artifacts_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudAiplatformV1ListArtifactsResponse summary);
    void aiplatform_projects_locations_metadataStores_artifacts_purgeSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void aiplatform_projects_locations_metadataStores_artifacts_queryArtifactLineageSubgraphSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudAiplatformV1LineageSubgraph summary);
    void aiplatform_projects_locations_metadataStores_contexts_addContextArtifactsAndExecutionsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void aiplatform_projects_locations_metadataStores_contexts_addContextChildrenSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void aiplatform_projects_locations_metadataStores_contexts_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudAiplatformV1Context summary);
    void aiplatform_projects_locations_metadataStores_contexts_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudAiplatformV1ListContextsResponse summary);
    void aiplatform_projects_locations_metadataStores_contexts_purgeSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void aiplatform_projects_locations_metadataStores_contexts_queryContextLineageSubgraphSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudAiplatformV1LineageSubgraph summary);
    void aiplatform_projects_locations_metadataStores_contexts_removeContextChildrenSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void aiplatform_projects_locations_metadataStores_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void aiplatform_projects_locations_metadataStores_executions_addExecutionEventsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void aiplatform_projects_locations_metadataStores_executions_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudAiplatformV1Execution summary);
    void aiplatform_projects_locations_metadataStores_executions_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudAiplatformV1ListExecutionsResponse summary);
    void aiplatform_projects_locations_metadataStores_executions_purgeSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void aiplatform_projects_locations_metadataStores_executions_queryExecutionInputsAndOutputsSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudAiplatformV1LineageSubgraph summary);
    void aiplatform_projects_locations_metadataStores_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudAiplatformV1ListMetadataStoresResponse summary);
    void aiplatform_projects_locations_metadataStores_metadataSchemas_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudAiplatformV1MetadataSchema summary);
    void aiplatform_projects_locations_metadataStores_metadataSchemas_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudAiplatformV1ListMetadataSchemasResponse summary);
    void aiplatform_projects_locations_migratableResources_batchMigrateSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void aiplatform_projects_locations_migratableResources_searchSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudAiplatformV1SearchMigratableResourcesResponse summary);
    void aiplatform_projects_locations_modelDeploymentMonitoringJobs_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudAiplatformV1ModelDeploymentMonitoringJob summary);
    void aiplatform_projects_locations_modelDeploymentMonitoringJobs_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudAiplatformV1ListModelDeploymentMonitoringJobsResponse summary);
    void aiplatform_projects_locations_modelDeploymentMonitoringJobs_searchModelDeploymentMonitoringStatsAnomaliesSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudAiplatformV1SearchModelDeploymentMonitoringStatsAnomaliesResponse summary);
    void aiplatform_projects_locations_models_copySignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void aiplatform_projects_locations_models_deleteVersionSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void aiplatform_projects_locations_models_evaluations_importSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudAiplatformV1ModelEvaluation summary);
    void aiplatform_projects_locations_models_evaluations_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudAiplatformV1ListModelEvaluationsResponse summary);
    void aiplatform_projects_locations_models_evaluations_slices_batchImportSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudAiplatformV1BatchImportEvaluatedAnnotationsResponse summary);
    void aiplatform_projects_locations_models_evaluations_slices_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudAiplatformV1ListModelEvaluationSlicesResponse summary);
    void aiplatform_projects_locations_models_exportSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void aiplatform_projects_locations_models_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudAiplatformV1ListModelsResponse summary);
    void aiplatform_projects_locations_models_listVersionsSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudAiplatformV1ListModelVersionsResponse summary);
    void aiplatform_projects_locations_models_mergeVersionAliasesSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudAiplatformV1Model summary);
    void aiplatform_projects_locations_models_updateExplanationDatasetSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void aiplatform_projects_locations_models_uploadSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void aiplatform_projects_locations_nasJobs_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudAiplatformV1NasJob summary);
    void aiplatform_projects_locations_nasJobs_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudAiplatformV1ListNasJobsResponse summary);
    void aiplatform_projects_locations_nasJobs_nasTrialDetails_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudAiplatformV1ListNasTrialDetailsResponse summary);
    void aiplatform_projects_locations_notebookRuntimeTemplates_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void aiplatform_projects_locations_notebookRuntimeTemplates_getIamPolicySignalFull(OAIHttpRequestWorker *worker, OAIGoogleIamV1Policy summary);
    void aiplatform_projects_locations_notebookRuntimeTemplates_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudAiplatformV1ListNotebookRuntimeTemplatesResponse summary);
    void aiplatform_projects_locations_notebookRuntimeTemplates_setIamPolicySignalFull(OAIHttpRequestWorker *worker, OAIGoogleIamV1Policy summary);
    void aiplatform_projects_locations_notebookRuntimeTemplates_testIamPermissionsSignalFull(OAIHttpRequestWorker *worker, OAIGoogleIamV1TestIamPermissionsResponse summary);
    void aiplatform_projects_locations_notebookRuntimes_assignSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void aiplatform_projects_locations_notebookRuntimes_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudAiplatformV1ListNotebookRuntimesResponse summary);
    void aiplatform_projects_locations_notebookRuntimes_startSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void aiplatform_projects_locations_notebookRuntimes_upgradeSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void aiplatform_projects_locations_pipelineJobs_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudAiplatformV1PipelineJob summary);
    void aiplatform_projects_locations_pipelineJobs_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudAiplatformV1ListPipelineJobsResponse summary);
    void aiplatform_projects_locations_publishers_models_computeTokensSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudAiplatformV1ComputeTokensResponse summary);
    void aiplatform_projects_locations_publishers_models_countTokensSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudAiplatformV1CountTokensResponse summary);
    void aiplatform_projects_locations_publishers_models_generateContentSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudAiplatformV1GenerateContentResponse summary);
    void aiplatform_projects_locations_publishers_models_predictSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudAiplatformV1PredictResponse summary);
    void aiplatform_projects_locations_publishers_models_rawPredictSignalFull(OAIHttpRequestWorker *worker, OAIGoogleApiHttpBody summary);
    void aiplatform_projects_locations_publishers_models_serverStreamingPredictSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudAiplatformV1StreamingPredictResponse summary);
    void aiplatform_projects_locations_publishers_models_streamGenerateContentSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudAiplatformV1GenerateContentResponse summary);
    void aiplatform_projects_locations_publishers_models_streamRawPredictSignalFull(OAIHttpRequestWorker *worker, OAIGoogleApiHttpBody summary);
    void aiplatform_projects_locations_schedules_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudAiplatformV1Schedule summary);
    void aiplatform_projects_locations_schedules_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudAiplatformV1ListSchedulesResponse summary);
    void aiplatform_projects_locations_schedules_pauseSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void aiplatform_projects_locations_schedules_resumeSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void aiplatform_projects_locations_specialistPools_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void aiplatform_projects_locations_specialistPools_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudAiplatformV1ListSpecialistPoolsResponse summary);
    void aiplatform_projects_locations_studies_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudAiplatformV1Study summary);
    void aiplatform_projects_locations_studies_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudAiplatformV1ListStudiesResponse summary);
    void aiplatform_projects_locations_studies_lookupSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudAiplatformV1Study summary);
    void aiplatform_projects_locations_studies_trials_addTrialMeasurementSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudAiplatformV1Trial summary);
    void aiplatform_projects_locations_studies_trials_checkTrialEarlyStoppingStateSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void aiplatform_projects_locations_studies_trials_completeSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudAiplatformV1Trial summary);
    void aiplatform_projects_locations_studies_trials_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudAiplatformV1Trial summary);
    void aiplatform_projects_locations_studies_trials_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudAiplatformV1ListTrialsResponse summary);
    void aiplatform_projects_locations_studies_trials_listOptimalTrialsSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudAiplatformV1ListOptimalTrialsResponse summary);
    void aiplatform_projects_locations_studies_trials_stopSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudAiplatformV1Trial summary);
    void aiplatform_projects_locations_studies_trials_suggestSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void aiplatform_projects_locations_tensorboards_batchReadSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudAiplatformV1BatchReadTensorboardTimeSeriesDataResponse summary);
    void aiplatform_projects_locations_tensorboards_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void aiplatform_projects_locations_tensorboards_experiments_batchCreateSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudAiplatformV1BatchCreateTensorboardTimeSeriesResponse summary);
    void aiplatform_projects_locations_tensorboards_experiments_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudAiplatformV1TensorboardExperiment summary);
    void aiplatform_projects_locations_tensorboards_experiments_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudAiplatformV1ListTensorboardExperimentsResponse summary);
    void aiplatform_projects_locations_tensorboards_experiments_runs_batchCreateSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudAiplatformV1BatchCreateTensorboardRunsResponse summary);
    void aiplatform_projects_locations_tensorboards_experiments_runs_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudAiplatformV1TensorboardRun summary);
    void aiplatform_projects_locations_tensorboards_experiments_runs_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudAiplatformV1ListTensorboardRunsResponse summary);
    void aiplatform_projects_locations_tensorboards_experiments_runs_timeSeries_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudAiplatformV1TensorboardTimeSeries summary);
    void aiplatform_projects_locations_tensorboards_experiments_runs_timeSeries_exportTensorboardTimeSeriesSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudAiplatformV1ExportTensorboardTimeSeriesDataResponse summary);
    void aiplatform_projects_locations_tensorboards_experiments_runs_timeSeries_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudAiplatformV1ListTensorboardTimeSeriesResponse summary);
    void aiplatform_projects_locations_tensorboards_experiments_runs_timeSeries_patchSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudAiplatformV1TensorboardTimeSeries summary);
    void aiplatform_projects_locations_tensorboards_experiments_runs_timeSeries_readSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudAiplatformV1ReadTensorboardTimeSeriesDataResponse summary);
    void aiplatform_projects_locations_tensorboards_experiments_runs_timeSeries_readBlobDataSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudAiplatformV1ReadTensorboardBlobDataResponse summary);
    void aiplatform_projects_locations_tensorboards_experiments_runs_writeSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void aiplatform_projects_locations_tensorboards_experiments_writeSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void aiplatform_projects_locations_tensorboards_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudAiplatformV1ListTensorboardsResponse summary);
    void aiplatform_projects_locations_tensorboards_readSizeSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudAiplatformV1ReadTensorboardSizeResponse summary);
    void aiplatform_projects_locations_tensorboards_readUsageSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudAiplatformV1ReadTensorboardUsageResponse summary);
    void aiplatform_projects_locations_trainingPipelines_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudAiplatformV1TrainingPipeline summary);
    void aiplatform_projects_locations_trainingPipelines_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudAiplatformV1ListTrainingPipelinesResponse summary);
    void aiplatform_projects_locations_trainingPipelines_operations_cancelSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void aiplatform_projects_locations_trainingPipelines_operations_deleteSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void aiplatform_projects_locations_trainingPipelines_operations_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningListOperationsResponse summary);
    void aiplatform_projects_locations_trainingPipelines_operations_waitSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);

    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_batchPredictionJobs_createSignalError() instead")
    void aiplatform_projects_locations_batchPredictionJobs_createSignalE(OAIGoogleCloudAiplatformV1BatchPredictionJob summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_batchPredictionJobs_createSignalError(OAIGoogleCloudAiplatformV1BatchPredictionJob summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_batchPredictionJobs_listSignalError() instead")
    void aiplatform_projects_locations_batchPredictionJobs_listSignalE(OAIGoogleCloudAiplatformV1ListBatchPredictionJobsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_batchPredictionJobs_listSignalError(OAIGoogleCloudAiplatformV1ListBatchPredictionJobsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_customJobs_createSignalError() instead")
    void aiplatform_projects_locations_customJobs_createSignalE(OAIGoogleCloudAiplatformV1CustomJob summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_customJobs_createSignalError(OAIGoogleCloudAiplatformV1CustomJob summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_customJobs_listSignalError() instead")
    void aiplatform_projects_locations_customJobs_listSignalE(OAIGoogleCloudAiplatformV1ListCustomJobsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_customJobs_listSignalError(OAIGoogleCloudAiplatformV1ListCustomJobsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_dataLabelingJobs_createSignalError() instead")
    void aiplatform_projects_locations_dataLabelingJobs_createSignalE(OAIGoogleCloudAiplatformV1DataLabelingJob summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_dataLabelingJobs_createSignalError(OAIGoogleCloudAiplatformV1DataLabelingJob summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_dataLabelingJobs_listSignalError() instead")
    void aiplatform_projects_locations_dataLabelingJobs_listSignalE(OAIGoogleCloudAiplatformV1ListDataLabelingJobsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_dataLabelingJobs_listSignalError(OAIGoogleCloudAiplatformV1ListDataLabelingJobsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_datasets_createSignalError() instead")
    void aiplatform_projects_locations_datasets_createSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_datasets_createSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_datasets_dataItems_annotations_listSignalError() instead")
    void aiplatform_projects_locations_datasets_dataItems_annotations_listSignalE(OAIGoogleCloudAiplatformV1ListAnnotationsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_datasets_dataItems_annotations_listSignalError(OAIGoogleCloudAiplatformV1ListAnnotationsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_datasets_dataItems_listSignalError() instead")
    void aiplatform_projects_locations_datasets_dataItems_listSignalE(OAIGoogleCloudAiplatformV1ListDataItemsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_datasets_dataItems_listSignalError(OAIGoogleCloudAiplatformV1ListDataItemsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_datasets_datasetVersions_createSignalError() instead")
    void aiplatform_projects_locations_datasets_datasetVersions_createSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_datasets_datasetVersions_createSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_datasets_datasetVersions_listSignalError() instead")
    void aiplatform_projects_locations_datasets_datasetVersions_listSignalE(OAIGoogleCloudAiplatformV1ListDatasetVersionsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_datasets_datasetVersions_listSignalError(OAIGoogleCloudAiplatformV1ListDatasetVersionsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_datasets_datasetVersions_restoreSignalError() instead")
    void aiplatform_projects_locations_datasets_datasetVersions_restoreSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_datasets_datasetVersions_restoreSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_datasets_importSignalError() instead")
    void aiplatform_projects_locations_datasets_importSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_datasets_importSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_datasets_listSignalError() instead")
    void aiplatform_projects_locations_datasets_listSignalE(OAIGoogleCloudAiplatformV1ListDatasetsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_datasets_listSignalError(OAIGoogleCloudAiplatformV1ListDatasetsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_datasets_savedQueries_listSignalError() instead")
    void aiplatform_projects_locations_datasets_savedQueries_listSignalE(OAIGoogleCloudAiplatformV1ListSavedQueriesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_datasets_savedQueries_listSignalError(OAIGoogleCloudAiplatformV1ListSavedQueriesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_datasets_searchDataItemsSignalError() instead")
    void aiplatform_projects_locations_datasets_searchDataItemsSignalE(OAIGoogleCloudAiplatformV1SearchDataItemsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_datasets_searchDataItemsSignalError(OAIGoogleCloudAiplatformV1SearchDataItemsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_deploymentResourcePools_createSignalError() instead")
    void aiplatform_projects_locations_deploymentResourcePools_createSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_deploymentResourcePools_createSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_deploymentResourcePools_listSignalError() instead")
    void aiplatform_projects_locations_deploymentResourcePools_listSignalE(OAIGoogleCloudAiplatformV1ListDeploymentResourcePoolsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_deploymentResourcePools_listSignalError(OAIGoogleCloudAiplatformV1ListDeploymentResourcePoolsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_deploymentResourcePools_queryDeployedModelsSignalError() instead")
    void aiplatform_projects_locations_deploymentResourcePools_queryDeployedModelsSignalE(OAIGoogleCloudAiplatformV1QueryDeployedModelsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_deploymentResourcePools_queryDeployedModelsSignalError(OAIGoogleCloudAiplatformV1QueryDeployedModelsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_endpoints_createSignalError() instead")
    void aiplatform_projects_locations_endpoints_createSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_endpoints_createSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_endpoints_deployModelSignalError() instead")
    void aiplatform_projects_locations_endpoints_deployModelSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_endpoints_deployModelSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_endpoints_directPredictSignalError() instead")
    void aiplatform_projects_locations_endpoints_directPredictSignalE(OAIGoogleCloudAiplatformV1DirectPredictResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_endpoints_directPredictSignalError(OAIGoogleCloudAiplatformV1DirectPredictResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_endpoints_directRawPredictSignalError() instead")
    void aiplatform_projects_locations_endpoints_directRawPredictSignalE(OAIGoogleCloudAiplatformV1DirectRawPredictResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_endpoints_directRawPredictSignalError(OAIGoogleCloudAiplatformV1DirectRawPredictResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_endpoints_explainSignalError() instead")
    void aiplatform_projects_locations_endpoints_explainSignalE(OAIGoogleCloudAiplatformV1ExplainResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_endpoints_explainSignalError(OAIGoogleCloudAiplatformV1ExplainResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_endpoints_listSignalError() instead")
    void aiplatform_projects_locations_endpoints_listSignalE(OAIGoogleCloudAiplatformV1ListEndpointsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_endpoints_listSignalError(OAIGoogleCloudAiplatformV1ListEndpointsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_endpoints_mutateDeployedModelSignalError() instead")
    void aiplatform_projects_locations_endpoints_mutateDeployedModelSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_endpoints_mutateDeployedModelSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_endpoints_undeployModelSignalError() instead")
    void aiplatform_projects_locations_endpoints_undeployModelSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_endpoints_undeployModelSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_featureGroups_createSignalError() instead")
    void aiplatform_projects_locations_featureGroups_createSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_featureGroups_createSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_featureGroups_listSignalError() instead")
    void aiplatform_projects_locations_featureGroups_listSignalE(OAIGoogleCloudAiplatformV1ListFeatureGroupsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_featureGroups_listSignalError(OAIGoogleCloudAiplatformV1ListFeatureGroupsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_featureOnlineStores_createSignalError() instead")
    void aiplatform_projects_locations_featureOnlineStores_createSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_featureOnlineStores_createSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_featureOnlineStores_featureViews_createSignalError() instead")
    void aiplatform_projects_locations_featureOnlineStores_featureViews_createSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_featureOnlineStores_featureViews_createSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_featureOnlineStores_featureViews_featureViewSyncs_listSignalError() instead")
    void aiplatform_projects_locations_featureOnlineStores_featureViews_featureViewSyncs_listSignalE(OAIGoogleCloudAiplatformV1ListFeatureViewSyncsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_featureOnlineStores_featureViews_featureViewSyncs_listSignalError(OAIGoogleCloudAiplatformV1ListFeatureViewSyncsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_featureOnlineStores_featureViews_fetchFeatureValuesSignalError() instead")
    void aiplatform_projects_locations_featureOnlineStores_featureViews_fetchFeatureValuesSignalE(OAIGoogleCloudAiplatformV1FetchFeatureValuesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_featureOnlineStores_featureViews_fetchFeatureValuesSignalError(OAIGoogleCloudAiplatformV1FetchFeatureValuesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_featureOnlineStores_featureViews_listSignalError() instead")
    void aiplatform_projects_locations_featureOnlineStores_featureViews_listSignalE(OAIGoogleCloudAiplatformV1ListFeatureViewsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_featureOnlineStores_featureViews_listSignalError(OAIGoogleCloudAiplatformV1ListFeatureViewsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_featureOnlineStores_featureViews_searchNearestEntitiesSignalError() instead")
    void aiplatform_projects_locations_featureOnlineStores_featureViews_searchNearestEntitiesSignalE(OAIGoogleCloudAiplatformV1SearchNearestEntitiesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_featureOnlineStores_featureViews_searchNearestEntitiesSignalError(OAIGoogleCloudAiplatformV1SearchNearestEntitiesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_featureOnlineStores_featureViews_syncSignalError() instead")
    void aiplatform_projects_locations_featureOnlineStores_featureViews_syncSignalE(OAIGoogleCloudAiplatformV1SyncFeatureViewResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_featureOnlineStores_featureViews_syncSignalError(OAIGoogleCloudAiplatformV1SyncFeatureViewResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_featureOnlineStores_listSignalError() instead")
    void aiplatform_projects_locations_featureOnlineStores_listSignalE(OAIGoogleCloudAiplatformV1ListFeatureOnlineStoresResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_featureOnlineStores_listSignalError(OAIGoogleCloudAiplatformV1ListFeatureOnlineStoresResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_featureOnlineStores_operations_listWaitSignalError() instead")
    void aiplatform_projects_locations_featureOnlineStores_operations_listWaitSignalE(OAIGoogleLongrunningListOperationsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_featureOnlineStores_operations_listWaitSignalError(OAIGoogleLongrunningListOperationsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_featurestores_batchReadFeatureValuesSignalError() instead")
    void aiplatform_projects_locations_featurestores_batchReadFeatureValuesSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_featurestores_batchReadFeatureValuesSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_featurestores_createSignalError() instead")
    void aiplatform_projects_locations_featurestores_createSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_featurestores_createSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_featurestores_entityTypes_createSignalError() instead")
    void aiplatform_projects_locations_featurestores_entityTypes_createSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_featurestores_entityTypes_createSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_featurestores_entityTypes_deleteFeatureValuesSignalError() instead")
    void aiplatform_projects_locations_featurestores_entityTypes_deleteFeatureValuesSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_featurestores_entityTypes_deleteFeatureValuesSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_featurestores_entityTypes_exportFeatureValuesSignalError() instead")
    void aiplatform_projects_locations_featurestores_entityTypes_exportFeatureValuesSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_featurestores_entityTypes_exportFeatureValuesSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_featurestores_entityTypes_features_batchCreateSignalError() instead")
    void aiplatform_projects_locations_featurestores_entityTypes_features_batchCreateSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_featurestores_entityTypes_features_batchCreateSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_featurestores_entityTypes_features_createSignalError() instead")
    void aiplatform_projects_locations_featurestores_entityTypes_features_createSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_featurestores_entityTypes_features_createSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_featurestores_entityTypes_features_listSignalError() instead")
    void aiplatform_projects_locations_featurestores_entityTypes_features_listSignalE(OAIGoogleCloudAiplatformV1ListFeaturesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_featurestores_entityTypes_features_listSignalError(OAIGoogleCloudAiplatformV1ListFeaturesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_featurestores_entityTypes_importFeatureValuesSignalError() instead")
    void aiplatform_projects_locations_featurestores_entityTypes_importFeatureValuesSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_featurestores_entityTypes_importFeatureValuesSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_featurestores_entityTypes_listSignalError() instead")
    void aiplatform_projects_locations_featurestores_entityTypes_listSignalE(OAIGoogleCloudAiplatformV1ListEntityTypesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_featurestores_entityTypes_listSignalError(OAIGoogleCloudAiplatformV1ListEntityTypesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_featurestores_entityTypes_readFeatureValuesSignalError() instead")
    void aiplatform_projects_locations_featurestores_entityTypes_readFeatureValuesSignalE(OAIGoogleCloudAiplatformV1ReadFeatureValuesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_featurestores_entityTypes_readFeatureValuesSignalError(OAIGoogleCloudAiplatformV1ReadFeatureValuesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_featurestores_entityTypes_streamingReadFeatureValuesSignalError() instead")
    void aiplatform_projects_locations_featurestores_entityTypes_streamingReadFeatureValuesSignalE(OAIGoogleCloudAiplatformV1ReadFeatureValuesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_featurestores_entityTypes_streamingReadFeatureValuesSignalError(OAIGoogleCloudAiplatformV1ReadFeatureValuesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_featurestores_entityTypes_writeFeatureValuesSignalError() instead")
    void aiplatform_projects_locations_featurestores_entityTypes_writeFeatureValuesSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_featurestores_entityTypes_writeFeatureValuesSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_featurestores_listSignalError() instead")
    void aiplatform_projects_locations_featurestores_listSignalE(OAIGoogleCloudAiplatformV1ListFeaturestoresResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_featurestores_listSignalError(OAIGoogleCloudAiplatformV1ListFeaturestoresResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_featurestores_searchFeaturesSignalError() instead")
    void aiplatform_projects_locations_featurestores_searchFeaturesSignalE(OAIGoogleCloudAiplatformV1SearchFeaturesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_featurestores_searchFeaturesSignalError(OAIGoogleCloudAiplatformV1SearchFeaturesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_hyperparameterTuningJobs_createSignalError() instead")
    void aiplatform_projects_locations_hyperparameterTuningJobs_createSignalE(OAIGoogleCloudAiplatformV1HyperparameterTuningJob summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_hyperparameterTuningJobs_createSignalError(OAIGoogleCloudAiplatformV1HyperparameterTuningJob summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_hyperparameterTuningJobs_listSignalError() instead")
    void aiplatform_projects_locations_hyperparameterTuningJobs_listSignalE(OAIGoogleCloudAiplatformV1ListHyperparameterTuningJobsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_hyperparameterTuningJobs_listSignalError(OAIGoogleCloudAiplatformV1ListHyperparameterTuningJobsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_indexEndpoints_createSignalError() instead")
    void aiplatform_projects_locations_indexEndpoints_createSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_indexEndpoints_createSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_indexEndpoints_deployIndexSignalError() instead")
    void aiplatform_projects_locations_indexEndpoints_deployIndexSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_indexEndpoints_deployIndexSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_indexEndpoints_findNeighborsSignalError() instead")
    void aiplatform_projects_locations_indexEndpoints_findNeighborsSignalE(OAIGoogleCloudAiplatformV1FindNeighborsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_indexEndpoints_findNeighborsSignalError(OAIGoogleCloudAiplatformV1FindNeighborsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_indexEndpoints_listSignalError() instead")
    void aiplatform_projects_locations_indexEndpoints_listSignalE(OAIGoogleCloudAiplatformV1ListIndexEndpointsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_indexEndpoints_listSignalError(OAIGoogleCloudAiplatformV1ListIndexEndpointsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_indexEndpoints_mutateDeployedIndexSignalError() instead")
    void aiplatform_projects_locations_indexEndpoints_mutateDeployedIndexSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_indexEndpoints_mutateDeployedIndexSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_indexEndpoints_readIndexDatapointsSignalError() instead")
    void aiplatform_projects_locations_indexEndpoints_readIndexDatapointsSignalE(OAIGoogleCloudAiplatformV1ReadIndexDatapointsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_indexEndpoints_readIndexDatapointsSignalError(OAIGoogleCloudAiplatformV1ReadIndexDatapointsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_indexEndpoints_undeployIndexSignalError() instead")
    void aiplatform_projects_locations_indexEndpoints_undeployIndexSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_indexEndpoints_undeployIndexSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_indexes_createSignalError() instead")
    void aiplatform_projects_locations_indexes_createSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_indexes_createSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_indexes_listSignalError() instead")
    void aiplatform_projects_locations_indexes_listSignalE(OAIGoogleCloudAiplatformV1ListIndexesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_indexes_listSignalError(OAIGoogleCloudAiplatformV1ListIndexesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_indexes_removeDatapointsSignalError() instead")
    void aiplatform_projects_locations_indexes_removeDatapointsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_indexes_removeDatapointsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_indexes_upsertDatapointsSignalError() instead")
    void aiplatform_projects_locations_indexes_upsertDatapointsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_indexes_upsertDatapointsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_listSignalError() instead")
    void aiplatform_projects_locations_listSignalE(OAIGoogleCloudLocationListLocationsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_listSignalError(OAIGoogleCloudLocationListLocationsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_metadataStores_artifacts_createSignalError() instead")
    void aiplatform_projects_locations_metadataStores_artifacts_createSignalE(OAIGoogleCloudAiplatformV1Artifact summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_metadataStores_artifacts_createSignalError(OAIGoogleCloudAiplatformV1Artifact summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_metadataStores_artifacts_listSignalError() instead")
    void aiplatform_projects_locations_metadataStores_artifacts_listSignalE(OAIGoogleCloudAiplatformV1ListArtifactsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_metadataStores_artifacts_listSignalError(OAIGoogleCloudAiplatformV1ListArtifactsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_metadataStores_artifacts_purgeSignalError() instead")
    void aiplatform_projects_locations_metadataStores_artifacts_purgeSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_metadataStores_artifacts_purgeSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_metadataStores_artifacts_queryArtifactLineageSubgraphSignalError() instead")
    void aiplatform_projects_locations_metadataStores_artifacts_queryArtifactLineageSubgraphSignalE(OAIGoogleCloudAiplatformV1LineageSubgraph summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_metadataStores_artifacts_queryArtifactLineageSubgraphSignalError(OAIGoogleCloudAiplatformV1LineageSubgraph summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_metadataStores_contexts_addContextArtifactsAndExecutionsSignalError() instead")
    void aiplatform_projects_locations_metadataStores_contexts_addContextArtifactsAndExecutionsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_metadataStores_contexts_addContextArtifactsAndExecutionsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_metadataStores_contexts_addContextChildrenSignalError() instead")
    void aiplatform_projects_locations_metadataStores_contexts_addContextChildrenSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_metadataStores_contexts_addContextChildrenSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_metadataStores_contexts_createSignalError() instead")
    void aiplatform_projects_locations_metadataStores_contexts_createSignalE(OAIGoogleCloudAiplatformV1Context summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_metadataStores_contexts_createSignalError(OAIGoogleCloudAiplatformV1Context summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_metadataStores_contexts_listSignalError() instead")
    void aiplatform_projects_locations_metadataStores_contexts_listSignalE(OAIGoogleCloudAiplatformV1ListContextsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_metadataStores_contexts_listSignalError(OAIGoogleCloudAiplatformV1ListContextsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_metadataStores_contexts_purgeSignalError() instead")
    void aiplatform_projects_locations_metadataStores_contexts_purgeSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_metadataStores_contexts_purgeSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_metadataStores_contexts_queryContextLineageSubgraphSignalError() instead")
    void aiplatform_projects_locations_metadataStores_contexts_queryContextLineageSubgraphSignalE(OAIGoogleCloudAiplatformV1LineageSubgraph summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_metadataStores_contexts_queryContextLineageSubgraphSignalError(OAIGoogleCloudAiplatformV1LineageSubgraph summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_metadataStores_contexts_removeContextChildrenSignalError() instead")
    void aiplatform_projects_locations_metadataStores_contexts_removeContextChildrenSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_metadataStores_contexts_removeContextChildrenSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_metadataStores_createSignalError() instead")
    void aiplatform_projects_locations_metadataStores_createSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_metadataStores_createSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_metadataStores_executions_addExecutionEventsSignalError() instead")
    void aiplatform_projects_locations_metadataStores_executions_addExecutionEventsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_metadataStores_executions_addExecutionEventsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_metadataStores_executions_createSignalError() instead")
    void aiplatform_projects_locations_metadataStores_executions_createSignalE(OAIGoogleCloudAiplatformV1Execution summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_metadataStores_executions_createSignalError(OAIGoogleCloudAiplatformV1Execution summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_metadataStores_executions_listSignalError() instead")
    void aiplatform_projects_locations_metadataStores_executions_listSignalE(OAIGoogleCloudAiplatformV1ListExecutionsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_metadataStores_executions_listSignalError(OAIGoogleCloudAiplatformV1ListExecutionsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_metadataStores_executions_purgeSignalError() instead")
    void aiplatform_projects_locations_metadataStores_executions_purgeSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_metadataStores_executions_purgeSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_metadataStores_executions_queryExecutionInputsAndOutputsSignalError() instead")
    void aiplatform_projects_locations_metadataStores_executions_queryExecutionInputsAndOutputsSignalE(OAIGoogleCloudAiplatformV1LineageSubgraph summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_metadataStores_executions_queryExecutionInputsAndOutputsSignalError(OAIGoogleCloudAiplatformV1LineageSubgraph summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_metadataStores_listSignalError() instead")
    void aiplatform_projects_locations_metadataStores_listSignalE(OAIGoogleCloudAiplatformV1ListMetadataStoresResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_metadataStores_listSignalError(OAIGoogleCloudAiplatformV1ListMetadataStoresResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_metadataStores_metadataSchemas_createSignalError() instead")
    void aiplatform_projects_locations_metadataStores_metadataSchemas_createSignalE(OAIGoogleCloudAiplatformV1MetadataSchema summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_metadataStores_metadataSchemas_createSignalError(OAIGoogleCloudAiplatformV1MetadataSchema summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_metadataStores_metadataSchemas_listSignalError() instead")
    void aiplatform_projects_locations_metadataStores_metadataSchemas_listSignalE(OAIGoogleCloudAiplatformV1ListMetadataSchemasResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_metadataStores_metadataSchemas_listSignalError(OAIGoogleCloudAiplatformV1ListMetadataSchemasResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_migratableResources_batchMigrateSignalError() instead")
    void aiplatform_projects_locations_migratableResources_batchMigrateSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_migratableResources_batchMigrateSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_migratableResources_searchSignalError() instead")
    void aiplatform_projects_locations_migratableResources_searchSignalE(OAIGoogleCloudAiplatformV1SearchMigratableResourcesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_migratableResources_searchSignalError(OAIGoogleCloudAiplatformV1SearchMigratableResourcesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_modelDeploymentMonitoringJobs_createSignalError() instead")
    void aiplatform_projects_locations_modelDeploymentMonitoringJobs_createSignalE(OAIGoogleCloudAiplatformV1ModelDeploymentMonitoringJob summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_modelDeploymentMonitoringJobs_createSignalError(OAIGoogleCloudAiplatformV1ModelDeploymentMonitoringJob summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_modelDeploymentMonitoringJobs_listSignalError() instead")
    void aiplatform_projects_locations_modelDeploymentMonitoringJobs_listSignalE(OAIGoogleCloudAiplatformV1ListModelDeploymentMonitoringJobsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_modelDeploymentMonitoringJobs_listSignalError(OAIGoogleCloudAiplatformV1ListModelDeploymentMonitoringJobsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_modelDeploymentMonitoringJobs_searchModelDeploymentMonitoringStatsAnomaliesSignalError() instead")
    void aiplatform_projects_locations_modelDeploymentMonitoringJobs_searchModelDeploymentMonitoringStatsAnomaliesSignalE(OAIGoogleCloudAiplatformV1SearchModelDeploymentMonitoringStatsAnomaliesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_modelDeploymentMonitoringJobs_searchModelDeploymentMonitoringStatsAnomaliesSignalError(OAIGoogleCloudAiplatformV1SearchModelDeploymentMonitoringStatsAnomaliesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_models_copySignalError() instead")
    void aiplatform_projects_locations_models_copySignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_models_copySignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_models_deleteVersionSignalError() instead")
    void aiplatform_projects_locations_models_deleteVersionSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_models_deleteVersionSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_models_evaluations_importSignalError() instead")
    void aiplatform_projects_locations_models_evaluations_importSignalE(OAIGoogleCloudAiplatformV1ModelEvaluation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_models_evaluations_importSignalError(OAIGoogleCloudAiplatformV1ModelEvaluation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_models_evaluations_listSignalError() instead")
    void aiplatform_projects_locations_models_evaluations_listSignalE(OAIGoogleCloudAiplatformV1ListModelEvaluationsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_models_evaluations_listSignalError(OAIGoogleCloudAiplatformV1ListModelEvaluationsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_models_evaluations_slices_batchImportSignalError() instead")
    void aiplatform_projects_locations_models_evaluations_slices_batchImportSignalE(OAIGoogleCloudAiplatformV1BatchImportEvaluatedAnnotationsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_models_evaluations_slices_batchImportSignalError(OAIGoogleCloudAiplatformV1BatchImportEvaluatedAnnotationsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_models_evaluations_slices_listSignalError() instead")
    void aiplatform_projects_locations_models_evaluations_slices_listSignalE(OAIGoogleCloudAiplatformV1ListModelEvaluationSlicesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_models_evaluations_slices_listSignalError(OAIGoogleCloudAiplatformV1ListModelEvaluationSlicesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_models_exportSignalError() instead")
    void aiplatform_projects_locations_models_exportSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_models_exportSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_models_listSignalError() instead")
    void aiplatform_projects_locations_models_listSignalE(OAIGoogleCloudAiplatformV1ListModelsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_models_listSignalError(OAIGoogleCloudAiplatformV1ListModelsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_models_listVersionsSignalError() instead")
    void aiplatform_projects_locations_models_listVersionsSignalE(OAIGoogleCloudAiplatformV1ListModelVersionsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_models_listVersionsSignalError(OAIGoogleCloudAiplatformV1ListModelVersionsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_models_mergeVersionAliasesSignalError() instead")
    void aiplatform_projects_locations_models_mergeVersionAliasesSignalE(OAIGoogleCloudAiplatformV1Model summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_models_mergeVersionAliasesSignalError(OAIGoogleCloudAiplatformV1Model summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_models_updateExplanationDatasetSignalError() instead")
    void aiplatform_projects_locations_models_updateExplanationDatasetSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_models_updateExplanationDatasetSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_models_uploadSignalError() instead")
    void aiplatform_projects_locations_models_uploadSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_models_uploadSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_nasJobs_createSignalError() instead")
    void aiplatform_projects_locations_nasJobs_createSignalE(OAIGoogleCloudAiplatformV1NasJob summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_nasJobs_createSignalError(OAIGoogleCloudAiplatformV1NasJob summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_nasJobs_listSignalError() instead")
    void aiplatform_projects_locations_nasJobs_listSignalE(OAIGoogleCloudAiplatformV1ListNasJobsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_nasJobs_listSignalError(OAIGoogleCloudAiplatformV1ListNasJobsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_nasJobs_nasTrialDetails_listSignalError() instead")
    void aiplatform_projects_locations_nasJobs_nasTrialDetails_listSignalE(OAIGoogleCloudAiplatformV1ListNasTrialDetailsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_nasJobs_nasTrialDetails_listSignalError(OAIGoogleCloudAiplatformV1ListNasTrialDetailsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_notebookRuntimeTemplates_createSignalError() instead")
    void aiplatform_projects_locations_notebookRuntimeTemplates_createSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_notebookRuntimeTemplates_createSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_notebookRuntimeTemplates_getIamPolicySignalError() instead")
    void aiplatform_projects_locations_notebookRuntimeTemplates_getIamPolicySignalE(OAIGoogleIamV1Policy summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_notebookRuntimeTemplates_getIamPolicySignalError(OAIGoogleIamV1Policy summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_notebookRuntimeTemplates_listSignalError() instead")
    void aiplatform_projects_locations_notebookRuntimeTemplates_listSignalE(OAIGoogleCloudAiplatformV1ListNotebookRuntimeTemplatesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_notebookRuntimeTemplates_listSignalError(OAIGoogleCloudAiplatformV1ListNotebookRuntimeTemplatesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_notebookRuntimeTemplates_setIamPolicySignalError() instead")
    void aiplatform_projects_locations_notebookRuntimeTemplates_setIamPolicySignalE(OAIGoogleIamV1Policy summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_notebookRuntimeTemplates_setIamPolicySignalError(OAIGoogleIamV1Policy summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_notebookRuntimeTemplates_testIamPermissionsSignalError() instead")
    void aiplatform_projects_locations_notebookRuntimeTemplates_testIamPermissionsSignalE(OAIGoogleIamV1TestIamPermissionsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_notebookRuntimeTemplates_testIamPermissionsSignalError(OAIGoogleIamV1TestIamPermissionsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_notebookRuntimes_assignSignalError() instead")
    void aiplatform_projects_locations_notebookRuntimes_assignSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_notebookRuntimes_assignSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_notebookRuntimes_listSignalError() instead")
    void aiplatform_projects_locations_notebookRuntimes_listSignalE(OAIGoogleCloudAiplatformV1ListNotebookRuntimesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_notebookRuntimes_listSignalError(OAIGoogleCloudAiplatformV1ListNotebookRuntimesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_notebookRuntimes_startSignalError() instead")
    void aiplatform_projects_locations_notebookRuntimes_startSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_notebookRuntimes_startSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_notebookRuntimes_upgradeSignalError() instead")
    void aiplatform_projects_locations_notebookRuntimes_upgradeSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_notebookRuntimes_upgradeSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_pipelineJobs_createSignalError() instead")
    void aiplatform_projects_locations_pipelineJobs_createSignalE(OAIGoogleCloudAiplatformV1PipelineJob summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_pipelineJobs_createSignalError(OAIGoogleCloudAiplatformV1PipelineJob summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_pipelineJobs_listSignalError() instead")
    void aiplatform_projects_locations_pipelineJobs_listSignalE(OAIGoogleCloudAiplatformV1ListPipelineJobsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_pipelineJobs_listSignalError(OAIGoogleCloudAiplatformV1ListPipelineJobsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_publishers_models_computeTokensSignalError() instead")
    void aiplatform_projects_locations_publishers_models_computeTokensSignalE(OAIGoogleCloudAiplatformV1ComputeTokensResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_publishers_models_computeTokensSignalError(OAIGoogleCloudAiplatformV1ComputeTokensResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_publishers_models_countTokensSignalError() instead")
    void aiplatform_projects_locations_publishers_models_countTokensSignalE(OAIGoogleCloudAiplatformV1CountTokensResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_publishers_models_countTokensSignalError(OAIGoogleCloudAiplatformV1CountTokensResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_publishers_models_generateContentSignalError() instead")
    void aiplatform_projects_locations_publishers_models_generateContentSignalE(OAIGoogleCloudAiplatformV1GenerateContentResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_publishers_models_generateContentSignalError(OAIGoogleCloudAiplatformV1GenerateContentResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_publishers_models_predictSignalError() instead")
    void aiplatform_projects_locations_publishers_models_predictSignalE(OAIGoogleCloudAiplatformV1PredictResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_publishers_models_predictSignalError(OAIGoogleCloudAiplatformV1PredictResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_publishers_models_rawPredictSignalError() instead")
    void aiplatform_projects_locations_publishers_models_rawPredictSignalE(OAIGoogleApiHttpBody summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_publishers_models_rawPredictSignalError(OAIGoogleApiHttpBody summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_publishers_models_serverStreamingPredictSignalError() instead")
    void aiplatform_projects_locations_publishers_models_serverStreamingPredictSignalE(OAIGoogleCloudAiplatformV1StreamingPredictResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_publishers_models_serverStreamingPredictSignalError(OAIGoogleCloudAiplatformV1StreamingPredictResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_publishers_models_streamGenerateContentSignalError() instead")
    void aiplatform_projects_locations_publishers_models_streamGenerateContentSignalE(OAIGoogleCloudAiplatformV1GenerateContentResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_publishers_models_streamGenerateContentSignalError(OAIGoogleCloudAiplatformV1GenerateContentResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_publishers_models_streamRawPredictSignalError() instead")
    void aiplatform_projects_locations_publishers_models_streamRawPredictSignalE(OAIGoogleApiHttpBody summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_publishers_models_streamRawPredictSignalError(OAIGoogleApiHttpBody summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_schedules_createSignalError() instead")
    void aiplatform_projects_locations_schedules_createSignalE(OAIGoogleCloudAiplatformV1Schedule summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_schedules_createSignalError(OAIGoogleCloudAiplatformV1Schedule summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_schedules_listSignalError() instead")
    void aiplatform_projects_locations_schedules_listSignalE(OAIGoogleCloudAiplatformV1ListSchedulesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_schedules_listSignalError(OAIGoogleCloudAiplatformV1ListSchedulesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_schedules_pauseSignalError() instead")
    void aiplatform_projects_locations_schedules_pauseSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_schedules_pauseSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_schedules_resumeSignalError() instead")
    void aiplatform_projects_locations_schedules_resumeSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_schedules_resumeSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_specialistPools_createSignalError() instead")
    void aiplatform_projects_locations_specialistPools_createSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_specialistPools_createSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_specialistPools_listSignalError() instead")
    void aiplatform_projects_locations_specialistPools_listSignalE(OAIGoogleCloudAiplatformV1ListSpecialistPoolsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_specialistPools_listSignalError(OAIGoogleCloudAiplatformV1ListSpecialistPoolsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_studies_createSignalError() instead")
    void aiplatform_projects_locations_studies_createSignalE(OAIGoogleCloudAiplatformV1Study summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_studies_createSignalError(OAIGoogleCloudAiplatformV1Study summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_studies_listSignalError() instead")
    void aiplatform_projects_locations_studies_listSignalE(OAIGoogleCloudAiplatformV1ListStudiesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_studies_listSignalError(OAIGoogleCloudAiplatformV1ListStudiesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_studies_lookupSignalError() instead")
    void aiplatform_projects_locations_studies_lookupSignalE(OAIGoogleCloudAiplatformV1Study summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_studies_lookupSignalError(OAIGoogleCloudAiplatformV1Study summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_studies_trials_addTrialMeasurementSignalError() instead")
    void aiplatform_projects_locations_studies_trials_addTrialMeasurementSignalE(OAIGoogleCloudAiplatformV1Trial summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_studies_trials_addTrialMeasurementSignalError(OAIGoogleCloudAiplatformV1Trial summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_studies_trials_checkTrialEarlyStoppingStateSignalError() instead")
    void aiplatform_projects_locations_studies_trials_checkTrialEarlyStoppingStateSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_studies_trials_checkTrialEarlyStoppingStateSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_studies_trials_completeSignalError() instead")
    void aiplatform_projects_locations_studies_trials_completeSignalE(OAIGoogleCloudAiplatformV1Trial summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_studies_trials_completeSignalError(OAIGoogleCloudAiplatformV1Trial summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_studies_trials_createSignalError() instead")
    void aiplatform_projects_locations_studies_trials_createSignalE(OAIGoogleCloudAiplatformV1Trial summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_studies_trials_createSignalError(OAIGoogleCloudAiplatformV1Trial summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_studies_trials_listSignalError() instead")
    void aiplatform_projects_locations_studies_trials_listSignalE(OAIGoogleCloudAiplatformV1ListTrialsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_studies_trials_listSignalError(OAIGoogleCloudAiplatformV1ListTrialsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_studies_trials_listOptimalTrialsSignalError() instead")
    void aiplatform_projects_locations_studies_trials_listOptimalTrialsSignalE(OAIGoogleCloudAiplatformV1ListOptimalTrialsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_studies_trials_listOptimalTrialsSignalError(OAIGoogleCloudAiplatformV1ListOptimalTrialsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_studies_trials_stopSignalError() instead")
    void aiplatform_projects_locations_studies_trials_stopSignalE(OAIGoogleCloudAiplatformV1Trial summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_studies_trials_stopSignalError(OAIGoogleCloudAiplatformV1Trial summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_studies_trials_suggestSignalError() instead")
    void aiplatform_projects_locations_studies_trials_suggestSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_studies_trials_suggestSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_tensorboards_batchReadSignalError() instead")
    void aiplatform_projects_locations_tensorboards_batchReadSignalE(OAIGoogleCloudAiplatformV1BatchReadTensorboardTimeSeriesDataResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_tensorboards_batchReadSignalError(OAIGoogleCloudAiplatformV1BatchReadTensorboardTimeSeriesDataResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_tensorboards_createSignalError() instead")
    void aiplatform_projects_locations_tensorboards_createSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_tensorboards_createSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_tensorboards_experiments_batchCreateSignalError() instead")
    void aiplatform_projects_locations_tensorboards_experiments_batchCreateSignalE(OAIGoogleCloudAiplatformV1BatchCreateTensorboardTimeSeriesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_tensorboards_experiments_batchCreateSignalError(OAIGoogleCloudAiplatformV1BatchCreateTensorboardTimeSeriesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_tensorboards_experiments_createSignalError() instead")
    void aiplatform_projects_locations_tensorboards_experiments_createSignalE(OAIGoogleCloudAiplatformV1TensorboardExperiment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_tensorboards_experiments_createSignalError(OAIGoogleCloudAiplatformV1TensorboardExperiment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_tensorboards_experiments_listSignalError() instead")
    void aiplatform_projects_locations_tensorboards_experiments_listSignalE(OAIGoogleCloudAiplatformV1ListTensorboardExperimentsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_tensorboards_experiments_listSignalError(OAIGoogleCloudAiplatformV1ListTensorboardExperimentsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_tensorboards_experiments_runs_batchCreateSignalError() instead")
    void aiplatform_projects_locations_tensorboards_experiments_runs_batchCreateSignalE(OAIGoogleCloudAiplatformV1BatchCreateTensorboardRunsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_tensorboards_experiments_runs_batchCreateSignalError(OAIGoogleCloudAiplatformV1BatchCreateTensorboardRunsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_tensorboards_experiments_runs_createSignalError() instead")
    void aiplatform_projects_locations_tensorboards_experiments_runs_createSignalE(OAIGoogleCloudAiplatformV1TensorboardRun summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_tensorboards_experiments_runs_createSignalError(OAIGoogleCloudAiplatformV1TensorboardRun summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_tensorboards_experiments_runs_listSignalError() instead")
    void aiplatform_projects_locations_tensorboards_experiments_runs_listSignalE(OAIGoogleCloudAiplatformV1ListTensorboardRunsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_tensorboards_experiments_runs_listSignalError(OAIGoogleCloudAiplatformV1ListTensorboardRunsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_tensorboards_experiments_runs_timeSeries_createSignalError() instead")
    void aiplatform_projects_locations_tensorboards_experiments_runs_timeSeries_createSignalE(OAIGoogleCloudAiplatformV1TensorboardTimeSeries summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_tensorboards_experiments_runs_timeSeries_createSignalError(OAIGoogleCloudAiplatformV1TensorboardTimeSeries summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_tensorboards_experiments_runs_timeSeries_exportTensorboardTimeSeriesSignalError() instead")
    void aiplatform_projects_locations_tensorboards_experiments_runs_timeSeries_exportTensorboardTimeSeriesSignalE(OAIGoogleCloudAiplatformV1ExportTensorboardTimeSeriesDataResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_tensorboards_experiments_runs_timeSeries_exportTensorboardTimeSeriesSignalError(OAIGoogleCloudAiplatformV1ExportTensorboardTimeSeriesDataResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_tensorboards_experiments_runs_timeSeries_listSignalError() instead")
    void aiplatform_projects_locations_tensorboards_experiments_runs_timeSeries_listSignalE(OAIGoogleCloudAiplatformV1ListTensorboardTimeSeriesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_tensorboards_experiments_runs_timeSeries_listSignalError(OAIGoogleCloudAiplatformV1ListTensorboardTimeSeriesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_tensorboards_experiments_runs_timeSeries_patchSignalError() instead")
    void aiplatform_projects_locations_tensorboards_experiments_runs_timeSeries_patchSignalE(OAIGoogleCloudAiplatformV1TensorboardTimeSeries summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_tensorboards_experiments_runs_timeSeries_patchSignalError(OAIGoogleCloudAiplatformV1TensorboardTimeSeries summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_tensorboards_experiments_runs_timeSeries_readSignalError() instead")
    void aiplatform_projects_locations_tensorboards_experiments_runs_timeSeries_readSignalE(OAIGoogleCloudAiplatformV1ReadTensorboardTimeSeriesDataResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_tensorboards_experiments_runs_timeSeries_readSignalError(OAIGoogleCloudAiplatformV1ReadTensorboardTimeSeriesDataResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_tensorboards_experiments_runs_timeSeries_readBlobDataSignalError() instead")
    void aiplatform_projects_locations_tensorboards_experiments_runs_timeSeries_readBlobDataSignalE(OAIGoogleCloudAiplatformV1ReadTensorboardBlobDataResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_tensorboards_experiments_runs_timeSeries_readBlobDataSignalError(OAIGoogleCloudAiplatformV1ReadTensorboardBlobDataResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_tensorboards_experiments_runs_writeSignalError() instead")
    void aiplatform_projects_locations_tensorboards_experiments_runs_writeSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_tensorboards_experiments_runs_writeSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_tensorboards_experiments_writeSignalError() instead")
    void aiplatform_projects_locations_tensorboards_experiments_writeSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_tensorboards_experiments_writeSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_tensorboards_listSignalError() instead")
    void aiplatform_projects_locations_tensorboards_listSignalE(OAIGoogleCloudAiplatformV1ListTensorboardsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_tensorboards_listSignalError(OAIGoogleCloudAiplatformV1ListTensorboardsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_tensorboards_readSizeSignalError() instead")
    void aiplatform_projects_locations_tensorboards_readSizeSignalE(OAIGoogleCloudAiplatformV1ReadTensorboardSizeResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_tensorboards_readSizeSignalError(OAIGoogleCloudAiplatformV1ReadTensorboardSizeResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_tensorboards_readUsageSignalError() instead")
    void aiplatform_projects_locations_tensorboards_readUsageSignalE(OAIGoogleCloudAiplatformV1ReadTensorboardUsageResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_tensorboards_readUsageSignalError(OAIGoogleCloudAiplatformV1ReadTensorboardUsageResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_trainingPipelines_createSignalError() instead")
    void aiplatform_projects_locations_trainingPipelines_createSignalE(OAIGoogleCloudAiplatformV1TrainingPipeline summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_trainingPipelines_createSignalError(OAIGoogleCloudAiplatformV1TrainingPipeline summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_trainingPipelines_listSignalError() instead")
    void aiplatform_projects_locations_trainingPipelines_listSignalE(OAIGoogleCloudAiplatformV1ListTrainingPipelinesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_trainingPipelines_listSignalError(OAIGoogleCloudAiplatformV1ListTrainingPipelinesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_trainingPipelines_operations_cancelSignalError() instead")
    void aiplatform_projects_locations_trainingPipelines_operations_cancelSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_trainingPipelines_operations_cancelSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_trainingPipelines_operations_deleteSignalError() instead")
    void aiplatform_projects_locations_trainingPipelines_operations_deleteSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_trainingPipelines_operations_deleteSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_trainingPipelines_operations_listSignalError() instead")
    void aiplatform_projects_locations_trainingPipelines_operations_listSignalE(OAIGoogleLongrunningListOperationsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_trainingPipelines_operations_listSignalError(OAIGoogleLongrunningListOperationsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_trainingPipelines_operations_waitSignalError() instead")
    void aiplatform_projects_locations_trainingPipelines_operations_waitSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_trainingPipelines_operations_waitSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_batchPredictionJobs_createSignalErrorFull() instead")
    void aiplatform_projects_locations_batchPredictionJobs_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_batchPredictionJobs_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_batchPredictionJobs_listSignalErrorFull() instead")
    void aiplatform_projects_locations_batchPredictionJobs_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_batchPredictionJobs_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_customJobs_createSignalErrorFull() instead")
    void aiplatform_projects_locations_customJobs_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_customJobs_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_customJobs_listSignalErrorFull() instead")
    void aiplatform_projects_locations_customJobs_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_customJobs_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_dataLabelingJobs_createSignalErrorFull() instead")
    void aiplatform_projects_locations_dataLabelingJobs_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_dataLabelingJobs_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_dataLabelingJobs_listSignalErrorFull() instead")
    void aiplatform_projects_locations_dataLabelingJobs_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_dataLabelingJobs_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_datasets_createSignalErrorFull() instead")
    void aiplatform_projects_locations_datasets_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_datasets_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_datasets_dataItems_annotations_listSignalErrorFull() instead")
    void aiplatform_projects_locations_datasets_dataItems_annotations_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_datasets_dataItems_annotations_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_datasets_dataItems_listSignalErrorFull() instead")
    void aiplatform_projects_locations_datasets_dataItems_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_datasets_dataItems_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_datasets_datasetVersions_createSignalErrorFull() instead")
    void aiplatform_projects_locations_datasets_datasetVersions_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_datasets_datasetVersions_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_datasets_datasetVersions_listSignalErrorFull() instead")
    void aiplatform_projects_locations_datasets_datasetVersions_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_datasets_datasetVersions_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_datasets_datasetVersions_restoreSignalErrorFull() instead")
    void aiplatform_projects_locations_datasets_datasetVersions_restoreSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_datasets_datasetVersions_restoreSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_datasets_importSignalErrorFull() instead")
    void aiplatform_projects_locations_datasets_importSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_datasets_importSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_datasets_listSignalErrorFull() instead")
    void aiplatform_projects_locations_datasets_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_datasets_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_datasets_savedQueries_listSignalErrorFull() instead")
    void aiplatform_projects_locations_datasets_savedQueries_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_datasets_savedQueries_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_datasets_searchDataItemsSignalErrorFull() instead")
    void aiplatform_projects_locations_datasets_searchDataItemsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_datasets_searchDataItemsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_deploymentResourcePools_createSignalErrorFull() instead")
    void aiplatform_projects_locations_deploymentResourcePools_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_deploymentResourcePools_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_deploymentResourcePools_listSignalErrorFull() instead")
    void aiplatform_projects_locations_deploymentResourcePools_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_deploymentResourcePools_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_deploymentResourcePools_queryDeployedModelsSignalErrorFull() instead")
    void aiplatform_projects_locations_deploymentResourcePools_queryDeployedModelsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_deploymentResourcePools_queryDeployedModelsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_endpoints_createSignalErrorFull() instead")
    void aiplatform_projects_locations_endpoints_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_endpoints_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_endpoints_deployModelSignalErrorFull() instead")
    void aiplatform_projects_locations_endpoints_deployModelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_endpoints_deployModelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_endpoints_directPredictSignalErrorFull() instead")
    void aiplatform_projects_locations_endpoints_directPredictSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_endpoints_directPredictSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_endpoints_directRawPredictSignalErrorFull() instead")
    void aiplatform_projects_locations_endpoints_directRawPredictSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_endpoints_directRawPredictSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_endpoints_explainSignalErrorFull() instead")
    void aiplatform_projects_locations_endpoints_explainSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_endpoints_explainSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_endpoints_listSignalErrorFull() instead")
    void aiplatform_projects_locations_endpoints_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_endpoints_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_endpoints_mutateDeployedModelSignalErrorFull() instead")
    void aiplatform_projects_locations_endpoints_mutateDeployedModelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_endpoints_mutateDeployedModelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_endpoints_undeployModelSignalErrorFull() instead")
    void aiplatform_projects_locations_endpoints_undeployModelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_endpoints_undeployModelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_featureGroups_createSignalErrorFull() instead")
    void aiplatform_projects_locations_featureGroups_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_featureGroups_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_featureGroups_listSignalErrorFull() instead")
    void aiplatform_projects_locations_featureGroups_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_featureGroups_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_featureOnlineStores_createSignalErrorFull() instead")
    void aiplatform_projects_locations_featureOnlineStores_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_featureOnlineStores_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_featureOnlineStores_featureViews_createSignalErrorFull() instead")
    void aiplatform_projects_locations_featureOnlineStores_featureViews_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_featureOnlineStores_featureViews_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_featureOnlineStores_featureViews_featureViewSyncs_listSignalErrorFull() instead")
    void aiplatform_projects_locations_featureOnlineStores_featureViews_featureViewSyncs_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_featureOnlineStores_featureViews_featureViewSyncs_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_featureOnlineStores_featureViews_fetchFeatureValuesSignalErrorFull() instead")
    void aiplatform_projects_locations_featureOnlineStores_featureViews_fetchFeatureValuesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_featureOnlineStores_featureViews_fetchFeatureValuesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_featureOnlineStores_featureViews_listSignalErrorFull() instead")
    void aiplatform_projects_locations_featureOnlineStores_featureViews_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_featureOnlineStores_featureViews_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_featureOnlineStores_featureViews_searchNearestEntitiesSignalErrorFull() instead")
    void aiplatform_projects_locations_featureOnlineStores_featureViews_searchNearestEntitiesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_featureOnlineStores_featureViews_searchNearestEntitiesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_featureOnlineStores_featureViews_syncSignalErrorFull() instead")
    void aiplatform_projects_locations_featureOnlineStores_featureViews_syncSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_featureOnlineStores_featureViews_syncSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_featureOnlineStores_listSignalErrorFull() instead")
    void aiplatform_projects_locations_featureOnlineStores_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_featureOnlineStores_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_featureOnlineStores_operations_listWaitSignalErrorFull() instead")
    void aiplatform_projects_locations_featureOnlineStores_operations_listWaitSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_featureOnlineStores_operations_listWaitSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_featurestores_batchReadFeatureValuesSignalErrorFull() instead")
    void aiplatform_projects_locations_featurestores_batchReadFeatureValuesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_featurestores_batchReadFeatureValuesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_featurestores_createSignalErrorFull() instead")
    void aiplatform_projects_locations_featurestores_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_featurestores_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_featurestores_entityTypes_createSignalErrorFull() instead")
    void aiplatform_projects_locations_featurestores_entityTypes_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_featurestores_entityTypes_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_featurestores_entityTypes_deleteFeatureValuesSignalErrorFull() instead")
    void aiplatform_projects_locations_featurestores_entityTypes_deleteFeatureValuesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_featurestores_entityTypes_deleteFeatureValuesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_featurestores_entityTypes_exportFeatureValuesSignalErrorFull() instead")
    void aiplatform_projects_locations_featurestores_entityTypes_exportFeatureValuesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_featurestores_entityTypes_exportFeatureValuesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_featurestores_entityTypes_features_batchCreateSignalErrorFull() instead")
    void aiplatform_projects_locations_featurestores_entityTypes_features_batchCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_featurestores_entityTypes_features_batchCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_featurestores_entityTypes_features_createSignalErrorFull() instead")
    void aiplatform_projects_locations_featurestores_entityTypes_features_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_featurestores_entityTypes_features_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_featurestores_entityTypes_features_listSignalErrorFull() instead")
    void aiplatform_projects_locations_featurestores_entityTypes_features_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_featurestores_entityTypes_features_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_featurestores_entityTypes_importFeatureValuesSignalErrorFull() instead")
    void aiplatform_projects_locations_featurestores_entityTypes_importFeatureValuesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_featurestores_entityTypes_importFeatureValuesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_featurestores_entityTypes_listSignalErrorFull() instead")
    void aiplatform_projects_locations_featurestores_entityTypes_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_featurestores_entityTypes_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_featurestores_entityTypes_readFeatureValuesSignalErrorFull() instead")
    void aiplatform_projects_locations_featurestores_entityTypes_readFeatureValuesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_featurestores_entityTypes_readFeatureValuesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_featurestores_entityTypes_streamingReadFeatureValuesSignalErrorFull() instead")
    void aiplatform_projects_locations_featurestores_entityTypes_streamingReadFeatureValuesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_featurestores_entityTypes_streamingReadFeatureValuesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_featurestores_entityTypes_writeFeatureValuesSignalErrorFull() instead")
    void aiplatform_projects_locations_featurestores_entityTypes_writeFeatureValuesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_featurestores_entityTypes_writeFeatureValuesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_featurestores_listSignalErrorFull() instead")
    void aiplatform_projects_locations_featurestores_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_featurestores_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_featurestores_searchFeaturesSignalErrorFull() instead")
    void aiplatform_projects_locations_featurestores_searchFeaturesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_featurestores_searchFeaturesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_hyperparameterTuningJobs_createSignalErrorFull() instead")
    void aiplatform_projects_locations_hyperparameterTuningJobs_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_hyperparameterTuningJobs_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_hyperparameterTuningJobs_listSignalErrorFull() instead")
    void aiplatform_projects_locations_hyperparameterTuningJobs_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_hyperparameterTuningJobs_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_indexEndpoints_createSignalErrorFull() instead")
    void aiplatform_projects_locations_indexEndpoints_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_indexEndpoints_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_indexEndpoints_deployIndexSignalErrorFull() instead")
    void aiplatform_projects_locations_indexEndpoints_deployIndexSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_indexEndpoints_deployIndexSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_indexEndpoints_findNeighborsSignalErrorFull() instead")
    void aiplatform_projects_locations_indexEndpoints_findNeighborsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_indexEndpoints_findNeighborsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_indexEndpoints_listSignalErrorFull() instead")
    void aiplatform_projects_locations_indexEndpoints_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_indexEndpoints_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_indexEndpoints_mutateDeployedIndexSignalErrorFull() instead")
    void aiplatform_projects_locations_indexEndpoints_mutateDeployedIndexSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_indexEndpoints_mutateDeployedIndexSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_indexEndpoints_readIndexDatapointsSignalErrorFull() instead")
    void aiplatform_projects_locations_indexEndpoints_readIndexDatapointsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_indexEndpoints_readIndexDatapointsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_indexEndpoints_undeployIndexSignalErrorFull() instead")
    void aiplatform_projects_locations_indexEndpoints_undeployIndexSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_indexEndpoints_undeployIndexSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_indexes_createSignalErrorFull() instead")
    void aiplatform_projects_locations_indexes_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_indexes_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_indexes_listSignalErrorFull() instead")
    void aiplatform_projects_locations_indexes_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_indexes_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_indexes_removeDatapointsSignalErrorFull() instead")
    void aiplatform_projects_locations_indexes_removeDatapointsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_indexes_removeDatapointsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_indexes_upsertDatapointsSignalErrorFull() instead")
    void aiplatform_projects_locations_indexes_upsertDatapointsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_indexes_upsertDatapointsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_listSignalErrorFull() instead")
    void aiplatform_projects_locations_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_metadataStores_artifacts_createSignalErrorFull() instead")
    void aiplatform_projects_locations_metadataStores_artifacts_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_metadataStores_artifacts_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_metadataStores_artifacts_listSignalErrorFull() instead")
    void aiplatform_projects_locations_metadataStores_artifacts_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_metadataStores_artifacts_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_metadataStores_artifacts_purgeSignalErrorFull() instead")
    void aiplatform_projects_locations_metadataStores_artifacts_purgeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_metadataStores_artifacts_purgeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_metadataStores_artifacts_queryArtifactLineageSubgraphSignalErrorFull() instead")
    void aiplatform_projects_locations_metadataStores_artifacts_queryArtifactLineageSubgraphSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_metadataStores_artifacts_queryArtifactLineageSubgraphSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_metadataStores_contexts_addContextArtifactsAndExecutionsSignalErrorFull() instead")
    void aiplatform_projects_locations_metadataStores_contexts_addContextArtifactsAndExecutionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_metadataStores_contexts_addContextArtifactsAndExecutionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_metadataStores_contexts_addContextChildrenSignalErrorFull() instead")
    void aiplatform_projects_locations_metadataStores_contexts_addContextChildrenSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_metadataStores_contexts_addContextChildrenSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_metadataStores_contexts_createSignalErrorFull() instead")
    void aiplatform_projects_locations_metadataStores_contexts_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_metadataStores_contexts_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_metadataStores_contexts_listSignalErrorFull() instead")
    void aiplatform_projects_locations_metadataStores_contexts_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_metadataStores_contexts_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_metadataStores_contexts_purgeSignalErrorFull() instead")
    void aiplatform_projects_locations_metadataStores_contexts_purgeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_metadataStores_contexts_purgeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_metadataStores_contexts_queryContextLineageSubgraphSignalErrorFull() instead")
    void aiplatform_projects_locations_metadataStores_contexts_queryContextLineageSubgraphSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_metadataStores_contexts_queryContextLineageSubgraphSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_metadataStores_contexts_removeContextChildrenSignalErrorFull() instead")
    void aiplatform_projects_locations_metadataStores_contexts_removeContextChildrenSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_metadataStores_contexts_removeContextChildrenSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_metadataStores_createSignalErrorFull() instead")
    void aiplatform_projects_locations_metadataStores_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_metadataStores_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_metadataStores_executions_addExecutionEventsSignalErrorFull() instead")
    void aiplatform_projects_locations_metadataStores_executions_addExecutionEventsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_metadataStores_executions_addExecutionEventsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_metadataStores_executions_createSignalErrorFull() instead")
    void aiplatform_projects_locations_metadataStores_executions_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_metadataStores_executions_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_metadataStores_executions_listSignalErrorFull() instead")
    void aiplatform_projects_locations_metadataStores_executions_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_metadataStores_executions_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_metadataStores_executions_purgeSignalErrorFull() instead")
    void aiplatform_projects_locations_metadataStores_executions_purgeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_metadataStores_executions_purgeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_metadataStores_executions_queryExecutionInputsAndOutputsSignalErrorFull() instead")
    void aiplatform_projects_locations_metadataStores_executions_queryExecutionInputsAndOutputsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_metadataStores_executions_queryExecutionInputsAndOutputsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_metadataStores_listSignalErrorFull() instead")
    void aiplatform_projects_locations_metadataStores_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_metadataStores_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_metadataStores_metadataSchemas_createSignalErrorFull() instead")
    void aiplatform_projects_locations_metadataStores_metadataSchemas_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_metadataStores_metadataSchemas_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_metadataStores_metadataSchemas_listSignalErrorFull() instead")
    void aiplatform_projects_locations_metadataStores_metadataSchemas_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_metadataStores_metadataSchemas_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_migratableResources_batchMigrateSignalErrorFull() instead")
    void aiplatform_projects_locations_migratableResources_batchMigrateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_migratableResources_batchMigrateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_migratableResources_searchSignalErrorFull() instead")
    void aiplatform_projects_locations_migratableResources_searchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_migratableResources_searchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_modelDeploymentMonitoringJobs_createSignalErrorFull() instead")
    void aiplatform_projects_locations_modelDeploymentMonitoringJobs_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_modelDeploymentMonitoringJobs_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_modelDeploymentMonitoringJobs_listSignalErrorFull() instead")
    void aiplatform_projects_locations_modelDeploymentMonitoringJobs_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_modelDeploymentMonitoringJobs_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_modelDeploymentMonitoringJobs_searchModelDeploymentMonitoringStatsAnomaliesSignalErrorFull() instead")
    void aiplatform_projects_locations_modelDeploymentMonitoringJobs_searchModelDeploymentMonitoringStatsAnomaliesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_modelDeploymentMonitoringJobs_searchModelDeploymentMonitoringStatsAnomaliesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_models_copySignalErrorFull() instead")
    void aiplatform_projects_locations_models_copySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_models_copySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_models_deleteVersionSignalErrorFull() instead")
    void aiplatform_projects_locations_models_deleteVersionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_models_deleteVersionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_models_evaluations_importSignalErrorFull() instead")
    void aiplatform_projects_locations_models_evaluations_importSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_models_evaluations_importSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_models_evaluations_listSignalErrorFull() instead")
    void aiplatform_projects_locations_models_evaluations_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_models_evaluations_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_models_evaluations_slices_batchImportSignalErrorFull() instead")
    void aiplatform_projects_locations_models_evaluations_slices_batchImportSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_models_evaluations_slices_batchImportSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_models_evaluations_slices_listSignalErrorFull() instead")
    void aiplatform_projects_locations_models_evaluations_slices_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_models_evaluations_slices_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_models_exportSignalErrorFull() instead")
    void aiplatform_projects_locations_models_exportSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_models_exportSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_models_listSignalErrorFull() instead")
    void aiplatform_projects_locations_models_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_models_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_models_listVersionsSignalErrorFull() instead")
    void aiplatform_projects_locations_models_listVersionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_models_listVersionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_models_mergeVersionAliasesSignalErrorFull() instead")
    void aiplatform_projects_locations_models_mergeVersionAliasesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_models_mergeVersionAliasesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_models_updateExplanationDatasetSignalErrorFull() instead")
    void aiplatform_projects_locations_models_updateExplanationDatasetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_models_updateExplanationDatasetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_models_uploadSignalErrorFull() instead")
    void aiplatform_projects_locations_models_uploadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_models_uploadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_nasJobs_createSignalErrorFull() instead")
    void aiplatform_projects_locations_nasJobs_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_nasJobs_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_nasJobs_listSignalErrorFull() instead")
    void aiplatform_projects_locations_nasJobs_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_nasJobs_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_nasJobs_nasTrialDetails_listSignalErrorFull() instead")
    void aiplatform_projects_locations_nasJobs_nasTrialDetails_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_nasJobs_nasTrialDetails_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_notebookRuntimeTemplates_createSignalErrorFull() instead")
    void aiplatform_projects_locations_notebookRuntimeTemplates_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_notebookRuntimeTemplates_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_notebookRuntimeTemplates_getIamPolicySignalErrorFull() instead")
    void aiplatform_projects_locations_notebookRuntimeTemplates_getIamPolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_notebookRuntimeTemplates_getIamPolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_notebookRuntimeTemplates_listSignalErrorFull() instead")
    void aiplatform_projects_locations_notebookRuntimeTemplates_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_notebookRuntimeTemplates_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_notebookRuntimeTemplates_setIamPolicySignalErrorFull() instead")
    void aiplatform_projects_locations_notebookRuntimeTemplates_setIamPolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_notebookRuntimeTemplates_setIamPolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_notebookRuntimeTemplates_testIamPermissionsSignalErrorFull() instead")
    void aiplatform_projects_locations_notebookRuntimeTemplates_testIamPermissionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_notebookRuntimeTemplates_testIamPermissionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_notebookRuntimes_assignSignalErrorFull() instead")
    void aiplatform_projects_locations_notebookRuntimes_assignSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_notebookRuntimes_assignSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_notebookRuntimes_listSignalErrorFull() instead")
    void aiplatform_projects_locations_notebookRuntimes_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_notebookRuntimes_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_notebookRuntimes_startSignalErrorFull() instead")
    void aiplatform_projects_locations_notebookRuntimes_startSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_notebookRuntimes_startSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_notebookRuntimes_upgradeSignalErrorFull() instead")
    void aiplatform_projects_locations_notebookRuntimes_upgradeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_notebookRuntimes_upgradeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_pipelineJobs_createSignalErrorFull() instead")
    void aiplatform_projects_locations_pipelineJobs_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_pipelineJobs_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_pipelineJobs_listSignalErrorFull() instead")
    void aiplatform_projects_locations_pipelineJobs_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_pipelineJobs_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_publishers_models_computeTokensSignalErrorFull() instead")
    void aiplatform_projects_locations_publishers_models_computeTokensSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_publishers_models_computeTokensSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_publishers_models_countTokensSignalErrorFull() instead")
    void aiplatform_projects_locations_publishers_models_countTokensSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_publishers_models_countTokensSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_publishers_models_generateContentSignalErrorFull() instead")
    void aiplatform_projects_locations_publishers_models_generateContentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_publishers_models_generateContentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_publishers_models_predictSignalErrorFull() instead")
    void aiplatform_projects_locations_publishers_models_predictSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_publishers_models_predictSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_publishers_models_rawPredictSignalErrorFull() instead")
    void aiplatform_projects_locations_publishers_models_rawPredictSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_publishers_models_rawPredictSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_publishers_models_serverStreamingPredictSignalErrorFull() instead")
    void aiplatform_projects_locations_publishers_models_serverStreamingPredictSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_publishers_models_serverStreamingPredictSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_publishers_models_streamGenerateContentSignalErrorFull() instead")
    void aiplatform_projects_locations_publishers_models_streamGenerateContentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_publishers_models_streamGenerateContentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_publishers_models_streamRawPredictSignalErrorFull() instead")
    void aiplatform_projects_locations_publishers_models_streamRawPredictSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_publishers_models_streamRawPredictSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_schedules_createSignalErrorFull() instead")
    void aiplatform_projects_locations_schedules_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_schedules_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_schedules_listSignalErrorFull() instead")
    void aiplatform_projects_locations_schedules_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_schedules_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_schedules_pauseSignalErrorFull() instead")
    void aiplatform_projects_locations_schedules_pauseSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_schedules_pauseSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_schedules_resumeSignalErrorFull() instead")
    void aiplatform_projects_locations_schedules_resumeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_schedules_resumeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_specialistPools_createSignalErrorFull() instead")
    void aiplatform_projects_locations_specialistPools_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_specialistPools_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_specialistPools_listSignalErrorFull() instead")
    void aiplatform_projects_locations_specialistPools_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_specialistPools_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_studies_createSignalErrorFull() instead")
    void aiplatform_projects_locations_studies_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_studies_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_studies_listSignalErrorFull() instead")
    void aiplatform_projects_locations_studies_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_studies_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_studies_lookupSignalErrorFull() instead")
    void aiplatform_projects_locations_studies_lookupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_studies_lookupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_studies_trials_addTrialMeasurementSignalErrorFull() instead")
    void aiplatform_projects_locations_studies_trials_addTrialMeasurementSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_studies_trials_addTrialMeasurementSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_studies_trials_checkTrialEarlyStoppingStateSignalErrorFull() instead")
    void aiplatform_projects_locations_studies_trials_checkTrialEarlyStoppingStateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_studies_trials_checkTrialEarlyStoppingStateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_studies_trials_completeSignalErrorFull() instead")
    void aiplatform_projects_locations_studies_trials_completeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_studies_trials_completeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_studies_trials_createSignalErrorFull() instead")
    void aiplatform_projects_locations_studies_trials_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_studies_trials_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_studies_trials_listSignalErrorFull() instead")
    void aiplatform_projects_locations_studies_trials_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_studies_trials_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_studies_trials_listOptimalTrialsSignalErrorFull() instead")
    void aiplatform_projects_locations_studies_trials_listOptimalTrialsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_studies_trials_listOptimalTrialsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_studies_trials_stopSignalErrorFull() instead")
    void aiplatform_projects_locations_studies_trials_stopSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_studies_trials_stopSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_studies_trials_suggestSignalErrorFull() instead")
    void aiplatform_projects_locations_studies_trials_suggestSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_studies_trials_suggestSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_tensorboards_batchReadSignalErrorFull() instead")
    void aiplatform_projects_locations_tensorboards_batchReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_tensorboards_batchReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_tensorboards_createSignalErrorFull() instead")
    void aiplatform_projects_locations_tensorboards_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_tensorboards_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_tensorboards_experiments_batchCreateSignalErrorFull() instead")
    void aiplatform_projects_locations_tensorboards_experiments_batchCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_tensorboards_experiments_batchCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_tensorboards_experiments_createSignalErrorFull() instead")
    void aiplatform_projects_locations_tensorboards_experiments_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_tensorboards_experiments_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_tensorboards_experiments_listSignalErrorFull() instead")
    void aiplatform_projects_locations_tensorboards_experiments_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_tensorboards_experiments_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_tensorboards_experiments_runs_batchCreateSignalErrorFull() instead")
    void aiplatform_projects_locations_tensorboards_experiments_runs_batchCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_tensorboards_experiments_runs_batchCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_tensorboards_experiments_runs_createSignalErrorFull() instead")
    void aiplatform_projects_locations_tensorboards_experiments_runs_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_tensorboards_experiments_runs_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_tensorboards_experiments_runs_listSignalErrorFull() instead")
    void aiplatform_projects_locations_tensorboards_experiments_runs_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_tensorboards_experiments_runs_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_tensorboards_experiments_runs_timeSeries_createSignalErrorFull() instead")
    void aiplatform_projects_locations_tensorboards_experiments_runs_timeSeries_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_tensorboards_experiments_runs_timeSeries_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_tensorboards_experiments_runs_timeSeries_exportTensorboardTimeSeriesSignalErrorFull() instead")
    void aiplatform_projects_locations_tensorboards_experiments_runs_timeSeries_exportTensorboardTimeSeriesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_tensorboards_experiments_runs_timeSeries_exportTensorboardTimeSeriesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_tensorboards_experiments_runs_timeSeries_listSignalErrorFull() instead")
    void aiplatform_projects_locations_tensorboards_experiments_runs_timeSeries_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_tensorboards_experiments_runs_timeSeries_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_tensorboards_experiments_runs_timeSeries_patchSignalErrorFull() instead")
    void aiplatform_projects_locations_tensorboards_experiments_runs_timeSeries_patchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_tensorboards_experiments_runs_timeSeries_patchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_tensorboards_experiments_runs_timeSeries_readSignalErrorFull() instead")
    void aiplatform_projects_locations_tensorboards_experiments_runs_timeSeries_readSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_tensorboards_experiments_runs_timeSeries_readSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_tensorboards_experiments_runs_timeSeries_readBlobDataSignalErrorFull() instead")
    void aiplatform_projects_locations_tensorboards_experiments_runs_timeSeries_readBlobDataSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_tensorboards_experiments_runs_timeSeries_readBlobDataSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_tensorboards_experiments_runs_writeSignalErrorFull() instead")
    void aiplatform_projects_locations_tensorboards_experiments_runs_writeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_tensorboards_experiments_runs_writeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_tensorboards_experiments_writeSignalErrorFull() instead")
    void aiplatform_projects_locations_tensorboards_experiments_writeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_tensorboards_experiments_writeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_tensorboards_listSignalErrorFull() instead")
    void aiplatform_projects_locations_tensorboards_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_tensorboards_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_tensorboards_readSizeSignalErrorFull() instead")
    void aiplatform_projects_locations_tensorboards_readSizeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_tensorboards_readSizeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_tensorboards_readUsageSignalErrorFull() instead")
    void aiplatform_projects_locations_tensorboards_readUsageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_tensorboards_readUsageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_trainingPipelines_createSignalErrorFull() instead")
    void aiplatform_projects_locations_trainingPipelines_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_trainingPipelines_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_trainingPipelines_listSignalErrorFull() instead")
    void aiplatform_projects_locations_trainingPipelines_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_trainingPipelines_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_trainingPipelines_operations_cancelSignalErrorFull() instead")
    void aiplatform_projects_locations_trainingPipelines_operations_cancelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_trainingPipelines_operations_cancelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_trainingPipelines_operations_deleteSignalErrorFull() instead")
    void aiplatform_projects_locations_trainingPipelines_operations_deleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_trainingPipelines_operations_deleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_trainingPipelines_operations_listSignalErrorFull() instead")
    void aiplatform_projects_locations_trainingPipelines_operations_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_trainingPipelines_operations_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aiplatform_projects_locations_trainingPipelines_operations_waitSignalErrorFull() instead")
    void aiplatform_projects_locations_trainingPipelines_operations_waitSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aiplatform_projects_locations_trainingPipelines_operations_waitSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
