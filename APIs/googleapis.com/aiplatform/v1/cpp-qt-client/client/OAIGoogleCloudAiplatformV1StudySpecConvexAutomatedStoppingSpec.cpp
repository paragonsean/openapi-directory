/**
 * Vertex AI API
 * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudAiplatformV1StudySpecConvexAutomatedStoppingSpec.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudAiplatformV1StudySpecConvexAutomatedStoppingSpec::OAIGoogleCloudAiplatformV1StudySpecConvexAutomatedStoppingSpec(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudAiplatformV1StudySpecConvexAutomatedStoppingSpec::OAIGoogleCloudAiplatformV1StudySpecConvexAutomatedStoppingSpec() {
    this->initializeModel();
}

OAIGoogleCloudAiplatformV1StudySpecConvexAutomatedStoppingSpec::~OAIGoogleCloudAiplatformV1StudySpecConvexAutomatedStoppingSpec() {}

void OAIGoogleCloudAiplatformV1StudySpecConvexAutomatedStoppingSpec::initializeModel() {

    m_learning_rate_parameter_name_isSet = false;
    m_learning_rate_parameter_name_isValid = false;

    m_max_step_count_isSet = false;
    m_max_step_count_isValid = false;

    m_min_measurement_count_isSet = false;
    m_min_measurement_count_isValid = false;

    m_min_step_count_isSet = false;
    m_min_step_count_isValid = false;

    m_update_all_stopped_trials_isSet = false;
    m_update_all_stopped_trials_isValid = false;

    m_use_elapsed_duration_isSet = false;
    m_use_elapsed_duration_isValid = false;
}

void OAIGoogleCloudAiplatformV1StudySpecConvexAutomatedStoppingSpec::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudAiplatformV1StudySpecConvexAutomatedStoppingSpec::fromJsonObject(QJsonObject json) {

    m_learning_rate_parameter_name_isValid = ::OpenAPI::fromJsonValue(m_learning_rate_parameter_name, json[QString("learningRateParameterName")]);
    m_learning_rate_parameter_name_isSet = !json[QString("learningRateParameterName")].isNull() && m_learning_rate_parameter_name_isValid;

    m_max_step_count_isValid = ::OpenAPI::fromJsonValue(m_max_step_count, json[QString("maxStepCount")]);
    m_max_step_count_isSet = !json[QString("maxStepCount")].isNull() && m_max_step_count_isValid;

    m_min_measurement_count_isValid = ::OpenAPI::fromJsonValue(m_min_measurement_count, json[QString("minMeasurementCount")]);
    m_min_measurement_count_isSet = !json[QString("minMeasurementCount")].isNull() && m_min_measurement_count_isValid;

    m_min_step_count_isValid = ::OpenAPI::fromJsonValue(m_min_step_count, json[QString("minStepCount")]);
    m_min_step_count_isSet = !json[QString("minStepCount")].isNull() && m_min_step_count_isValid;

    m_update_all_stopped_trials_isValid = ::OpenAPI::fromJsonValue(m_update_all_stopped_trials, json[QString("updateAllStoppedTrials")]);
    m_update_all_stopped_trials_isSet = !json[QString("updateAllStoppedTrials")].isNull() && m_update_all_stopped_trials_isValid;

    m_use_elapsed_duration_isValid = ::OpenAPI::fromJsonValue(m_use_elapsed_duration, json[QString("useElapsedDuration")]);
    m_use_elapsed_duration_isSet = !json[QString("useElapsedDuration")].isNull() && m_use_elapsed_duration_isValid;
}

QString OAIGoogleCloudAiplatformV1StudySpecConvexAutomatedStoppingSpec::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudAiplatformV1StudySpecConvexAutomatedStoppingSpec::asJsonObject() const {
    QJsonObject obj;
    if (m_learning_rate_parameter_name_isSet) {
        obj.insert(QString("learningRateParameterName"), ::OpenAPI::toJsonValue(m_learning_rate_parameter_name));
    }
    if (m_max_step_count_isSet) {
        obj.insert(QString("maxStepCount"), ::OpenAPI::toJsonValue(m_max_step_count));
    }
    if (m_min_measurement_count_isSet) {
        obj.insert(QString("minMeasurementCount"), ::OpenAPI::toJsonValue(m_min_measurement_count));
    }
    if (m_min_step_count_isSet) {
        obj.insert(QString("minStepCount"), ::OpenAPI::toJsonValue(m_min_step_count));
    }
    if (m_update_all_stopped_trials_isSet) {
        obj.insert(QString("updateAllStoppedTrials"), ::OpenAPI::toJsonValue(m_update_all_stopped_trials));
    }
    if (m_use_elapsed_duration_isSet) {
        obj.insert(QString("useElapsedDuration"), ::OpenAPI::toJsonValue(m_use_elapsed_duration));
    }
    return obj;
}

QString OAIGoogleCloudAiplatformV1StudySpecConvexAutomatedStoppingSpec::getLearningRateParameterName() const {
    return m_learning_rate_parameter_name;
}
void OAIGoogleCloudAiplatformV1StudySpecConvexAutomatedStoppingSpec::setLearningRateParameterName(const QString &learning_rate_parameter_name) {
    m_learning_rate_parameter_name = learning_rate_parameter_name;
    m_learning_rate_parameter_name_isSet = true;
}

bool OAIGoogleCloudAiplatformV1StudySpecConvexAutomatedStoppingSpec::is_learning_rate_parameter_name_Set() const{
    return m_learning_rate_parameter_name_isSet;
}

bool OAIGoogleCloudAiplatformV1StudySpecConvexAutomatedStoppingSpec::is_learning_rate_parameter_name_Valid() const{
    return m_learning_rate_parameter_name_isValid;
}

QString OAIGoogleCloudAiplatformV1StudySpecConvexAutomatedStoppingSpec::getMaxStepCount() const {
    return m_max_step_count;
}
void OAIGoogleCloudAiplatformV1StudySpecConvexAutomatedStoppingSpec::setMaxStepCount(const QString &max_step_count) {
    m_max_step_count = max_step_count;
    m_max_step_count_isSet = true;
}

bool OAIGoogleCloudAiplatformV1StudySpecConvexAutomatedStoppingSpec::is_max_step_count_Set() const{
    return m_max_step_count_isSet;
}

bool OAIGoogleCloudAiplatformV1StudySpecConvexAutomatedStoppingSpec::is_max_step_count_Valid() const{
    return m_max_step_count_isValid;
}

QString OAIGoogleCloudAiplatformV1StudySpecConvexAutomatedStoppingSpec::getMinMeasurementCount() const {
    return m_min_measurement_count;
}
void OAIGoogleCloudAiplatformV1StudySpecConvexAutomatedStoppingSpec::setMinMeasurementCount(const QString &min_measurement_count) {
    m_min_measurement_count = min_measurement_count;
    m_min_measurement_count_isSet = true;
}

bool OAIGoogleCloudAiplatformV1StudySpecConvexAutomatedStoppingSpec::is_min_measurement_count_Set() const{
    return m_min_measurement_count_isSet;
}

bool OAIGoogleCloudAiplatformV1StudySpecConvexAutomatedStoppingSpec::is_min_measurement_count_Valid() const{
    return m_min_measurement_count_isValid;
}

QString OAIGoogleCloudAiplatformV1StudySpecConvexAutomatedStoppingSpec::getMinStepCount() const {
    return m_min_step_count;
}
void OAIGoogleCloudAiplatformV1StudySpecConvexAutomatedStoppingSpec::setMinStepCount(const QString &min_step_count) {
    m_min_step_count = min_step_count;
    m_min_step_count_isSet = true;
}

bool OAIGoogleCloudAiplatformV1StudySpecConvexAutomatedStoppingSpec::is_min_step_count_Set() const{
    return m_min_step_count_isSet;
}

bool OAIGoogleCloudAiplatformV1StudySpecConvexAutomatedStoppingSpec::is_min_step_count_Valid() const{
    return m_min_step_count_isValid;
}

bool OAIGoogleCloudAiplatformV1StudySpecConvexAutomatedStoppingSpec::isUpdateAllStoppedTrials() const {
    return m_update_all_stopped_trials;
}
void OAIGoogleCloudAiplatformV1StudySpecConvexAutomatedStoppingSpec::setUpdateAllStoppedTrials(const bool &update_all_stopped_trials) {
    m_update_all_stopped_trials = update_all_stopped_trials;
    m_update_all_stopped_trials_isSet = true;
}

bool OAIGoogleCloudAiplatformV1StudySpecConvexAutomatedStoppingSpec::is_update_all_stopped_trials_Set() const{
    return m_update_all_stopped_trials_isSet;
}

bool OAIGoogleCloudAiplatformV1StudySpecConvexAutomatedStoppingSpec::is_update_all_stopped_trials_Valid() const{
    return m_update_all_stopped_trials_isValid;
}

bool OAIGoogleCloudAiplatformV1StudySpecConvexAutomatedStoppingSpec::isUseElapsedDuration() const {
    return m_use_elapsed_duration;
}
void OAIGoogleCloudAiplatformV1StudySpecConvexAutomatedStoppingSpec::setUseElapsedDuration(const bool &use_elapsed_duration) {
    m_use_elapsed_duration = use_elapsed_duration;
    m_use_elapsed_duration_isSet = true;
}

bool OAIGoogleCloudAiplatformV1StudySpecConvexAutomatedStoppingSpec::is_use_elapsed_duration_Set() const{
    return m_use_elapsed_duration_isSet;
}

bool OAIGoogleCloudAiplatformV1StudySpecConvexAutomatedStoppingSpec::is_use_elapsed_duration_Valid() const{
    return m_use_elapsed_duration_isValid;
}

bool OAIGoogleCloudAiplatformV1StudySpecConvexAutomatedStoppingSpec::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_learning_rate_parameter_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_step_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_measurement_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_step_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_all_stopped_trials_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_elapsed_duration_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudAiplatformV1StudySpecConvexAutomatedStoppingSpec::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
