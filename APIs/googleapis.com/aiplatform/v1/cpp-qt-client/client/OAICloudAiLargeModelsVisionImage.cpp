/**
 * Vertex AI API
 * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICloudAiLargeModelsVisionImage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICloudAiLargeModelsVisionImage::OAICloudAiLargeModelsVisionImage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICloudAiLargeModelsVisionImage::OAICloudAiLargeModelsVisionImage() {
    this->initializeModel();
}

OAICloudAiLargeModelsVisionImage::~OAICloudAiLargeModelsVisionImage() {}

void OAICloudAiLargeModelsVisionImage::initializeModel() {

    m_encoding_isSet = false;
    m_encoding_isValid = false;

    m_image_isSet = false;
    m_image_isValid = false;

    m_image_rai_scores_isSet = false;
    m_image_rai_scores_isValid = false;

    m_rai_info_isSet = false;
    m_rai_info_isValid = false;

    m_semantic_filter_response_isSet = false;
    m_semantic_filter_response_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;

    m_uri_isSet = false;
    m_uri_isValid = false;
}

void OAICloudAiLargeModelsVisionImage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICloudAiLargeModelsVisionImage::fromJsonObject(QJsonObject json) {

    m_encoding_isValid = ::OpenAPI::fromJsonValue(m_encoding, json[QString("encoding")]);
    m_encoding_isSet = !json[QString("encoding")].isNull() && m_encoding_isValid;

    m_image_isValid = ::OpenAPI::fromJsonValue(m_image, json[QString("image")]);
    m_image_isSet = !json[QString("image")].isNull() && m_image_isValid;

    m_image_rai_scores_isValid = ::OpenAPI::fromJsonValue(m_image_rai_scores, json[QString("imageRaiScores")]);
    m_image_rai_scores_isSet = !json[QString("imageRaiScores")].isNull() && m_image_rai_scores_isValid;

    m_rai_info_isValid = ::OpenAPI::fromJsonValue(m_rai_info, json[QString("raiInfo")]);
    m_rai_info_isSet = !json[QString("raiInfo")].isNull() && m_rai_info_isValid;

    m_semantic_filter_response_isValid = ::OpenAPI::fromJsonValue(m_semantic_filter_response, json[QString("semanticFilterResponse")]);
    m_semantic_filter_response_isSet = !json[QString("semanticFilterResponse")].isNull() && m_semantic_filter_response_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("text")]);
    m_text_isSet = !json[QString("text")].isNull() && m_text_isValid;

    m_uri_isValid = ::OpenAPI::fromJsonValue(m_uri, json[QString("uri")]);
    m_uri_isSet = !json[QString("uri")].isNull() && m_uri_isValid;
}

QString OAICloudAiLargeModelsVisionImage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICloudAiLargeModelsVisionImage::asJsonObject() const {
    QJsonObject obj;
    if (m_encoding_isSet) {
        obj.insert(QString("encoding"), ::OpenAPI::toJsonValue(m_encoding));
    }
    if (m_image_isSet) {
        obj.insert(QString("image"), ::OpenAPI::toJsonValue(m_image));
    }
    if (m_image_rai_scores.isSet()) {
        obj.insert(QString("imageRaiScores"), ::OpenAPI::toJsonValue(m_image_rai_scores));
    }
    if (m_rai_info.isSet()) {
        obj.insert(QString("raiInfo"), ::OpenAPI::toJsonValue(m_rai_info));
    }
    if (m_semantic_filter_response.isSet()) {
        obj.insert(QString("semanticFilterResponse"), ::OpenAPI::toJsonValue(m_semantic_filter_response));
    }
    if (m_text_isSet) {
        obj.insert(QString("text"), ::OpenAPI::toJsonValue(m_text));
    }
    if (m_uri_isSet) {
        obj.insert(QString("uri"), ::OpenAPI::toJsonValue(m_uri));
    }
    return obj;
}

QString OAICloudAiLargeModelsVisionImage::getEncoding() const {
    return m_encoding;
}
void OAICloudAiLargeModelsVisionImage::setEncoding(const QString &encoding) {
    m_encoding = encoding;
    m_encoding_isSet = true;
}

bool OAICloudAiLargeModelsVisionImage::is_encoding_Set() const{
    return m_encoding_isSet;
}

bool OAICloudAiLargeModelsVisionImage::is_encoding_Valid() const{
    return m_encoding_isValid;
}

QByteArray OAICloudAiLargeModelsVisionImage::getImage() const {
    return m_image;
}
void OAICloudAiLargeModelsVisionImage::setImage(const QByteArray &image) {
    m_image = image;
    m_image_isSet = true;
}

bool OAICloudAiLargeModelsVisionImage::is_image_Set() const{
    return m_image_isSet;
}

bool OAICloudAiLargeModelsVisionImage::is_image_Valid() const{
    return m_image_isValid;
}

OAICloudAiLargeModelsVisionImageRAIScores OAICloudAiLargeModelsVisionImage::getImageRaiScores() const {
    return m_image_rai_scores;
}
void OAICloudAiLargeModelsVisionImage::setImageRaiScores(const OAICloudAiLargeModelsVisionImageRAIScores &image_rai_scores) {
    m_image_rai_scores = image_rai_scores;
    m_image_rai_scores_isSet = true;
}

bool OAICloudAiLargeModelsVisionImage::is_image_rai_scores_Set() const{
    return m_image_rai_scores_isSet;
}

bool OAICloudAiLargeModelsVisionImage::is_image_rai_scores_Valid() const{
    return m_image_rai_scores_isValid;
}

OAICloudAiLargeModelsVisionRaiInfo OAICloudAiLargeModelsVisionImage::getRaiInfo() const {
    return m_rai_info;
}
void OAICloudAiLargeModelsVisionImage::setRaiInfo(const OAICloudAiLargeModelsVisionRaiInfo &rai_info) {
    m_rai_info = rai_info;
    m_rai_info_isSet = true;
}

bool OAICloudAiLargeModelsVisionImage::is_rai_info_Set() const{
    return m_rai_info_isSet;
}

bool OAICloudAiLargeModelsVisionImage::is_rai_info_Valid() const{
    return m_rai_info_isValid;
}

OAICloudAiLargeModelsVisionSemanticFilterResponse OAICloudAiLargeModelsVisionImage::getSemanticFilterResponse() const {
    return m_semantic_filter_response;
}
void OAICloudAiLargeModelsVisionImage::setSemanticFilterResponse(const OAICloudAiLargeModelsVisionSemanticFilterResponse &semantic_filter_response) {
    m_semantic_filter_response = semantic_filter_response;
    m_semantic_filter_response_isSet = true;
}

bool OAICloudAiLargeModelsVisionImage::is_semantic_filter_response_Set() const{
    return m_semantic_filter_response_isSet;
}

bool OAICloudAiLargeModelsVisionImage::is_semantic_filter_response_Valid() const{
    return m_semantic_filter_response_isValid;
}

QString OAICloudAiLargeModelsVisionImage::getText() const {
    return m_text;
}
void OAICloudAiLargeModelsVisionImage::setText(const QString &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAICloudAiLargeModelsVisionImage::is_text_Set() const{
    return m_text_isSet;
}

bool OAICloudAiLargeModelsVisionImage::is_text_Valid() const{
    return m_text_isValid;
}

QString OAICloudAiLargeModelsVisionImage::getUri() const {
    return m_uri;
}
void OAICloudAiLargeModelsVisionImage::setUri(const QString &uri) {
    m_uri = uri;
    m_uri_isSet = true;
}

bool OAICloudAiLargeModelsVisionImage::is_uri_Set() const{
    return m_uri_isSet;
}

bool OAICloudAiLargeModelsVisionImage::is_uri_Valid() const{
    return m_uri_isValid;
}

bool OAICloudAiLargeModelsVisionImage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_encoding_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_rai_scores.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_rai_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_semantic_filter_response.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uri_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICloudAiLargeModelsVisionImage::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
