/**
 * Vertex AI API
 * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudAiplatformV1ContainerSpec.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudAiplatformV1ContainerSpec::OAIGoogleCloudAiplatformV1ContainerSpec(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudAiplatformV1ContainerSpec::OAIGoogleCloudAiplatformV1ContainerSpec() {
    this->initializeModel();
}

OAIGoogleCloudAiplatformV1ContainerSpec::~OAIGoogleCloudAiplatformV1ContainerSpec() {}

void OAIGoogleCloudAiplatformV1ContainerSpec::initializeModel() {

    m_args_isSet = false;
    m_args_isValid = false;

    m_command_isSet = false;
    m_command_isValid = false;

    m_env_isSet = false;
    m_env_isValid = false;

    m_image_uri_isSet = false;
    m_image_uri_isValid = false;
}

void OAIGoogleCloudAiplatformV1ContainerSpec::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudAiplatformV1ContainerSpec::fromJsonObject(QJsonObject json) {

    m_args_isValid = ::OpenAPI::fromJsonValue(m_args, json[QString("args")]);
    m_args_isSet = !json[QString("args")].isNull() && m_args_isValid;

    m_command_isValid = ::OpenAPI::fromJsonValue(m_command, json[QString("command")]);
    m_command_isSet = !json[QString("command")].isNull() && m_command_isValid;

    m_env_isValid = ::OpenAPI::fromJsonValue(m_env, json[QString("env")]);
    m_env_isSet = !json[QString("env")].isNull() && m_env_isValid;

    m_image_uri_isValid = ::OpenAPI::fromJsonValue(m_image_uri, json[QString("imageUri")]);
    m_image_uri_isSet = !json[QString("imageUri")].isNull() && m_image_uri_isValid;
}

QString OAIGoogleCloudAiplatformV1ContainerSpec::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudAiplatformV1ContainerSpec::asJsonObject() const {
    QJsonObject obj;
    if (m_args.size() > 0) {
        obj.insert(QString("args"), ::OpenAPI::toJsonValue(m_args));
    }
    if (m_command.size() > 0) {
        obj.insert(QString("command"), ::OpenAPI::toJsonValue(m_command));
    }
    if (m_env.size() > 0) {
        obj.insert(QString("env"), ::OpenAPI::toJsonValue(m_env));
    }
    if (m_image_uri_isSet) {
        obj.insert(QString("imageUri"), ::OpenAPI::toJsonValue(m_image_uri));
    }
    return obj;
}

QList<QString> OAIGoogleCloudAiplatformV1ContainerSpec::getArgs() const {
    return m_args;
}
void OAIGoogleCloudAiplatformV1ContainerSpec::setArgs(const QList<QString> &args) {
    m_args = args;
    m_args_isSet = true;
}

bool OAIGoogleCloudAiplatformV1ContainerSpec::is_args_Set() const{
    return m_args_isSet;
}

bool OAIGoogleCloudAiplatformV1ContainerSpec::is_args_Valid() const{
    return m_args_isValid;
}

QList<QString> OAIGoogleCloudAiplatformV1ContainerSpec::getCommand() const {
    return m_command;
}
void OAIGoogleCloudAiplatformV1ContainerSpec::setCommand(const QList<QString> &command) {
    m_command = command;
    m_command_isSet = true;
}

bool OAIGoogleCloudAiplatformV1ContainerSpec::is_command_Set() const{
    return m_command_isSet;
}

bool OAIGoogleCloudAiplatformV1ContainerSpec::is_command_Valid() const{
    return m_command_isValid;
}

QList<OAIGoogleCloudAiplatformV1EnvVar> OAIGoogleCloudAiplatformV1ContainerSpec::getEnv() const {
    return m_env;
}
void OAIGoogleCloudAiplatformV1ContainerSpec::setEnv(const QList<OAIGoogleCloudAiplatformV1EnvVar> &env) {
    m_env = env;
    m_env_isSet = true;
}

bool OAIGoogleCloudAiplatformV1ContainerSpec::is_env_Set() const{
    return m_env_isSet;
}

bool OAIGoogleCloudAiplatformV1ContainerSpec::is_env_Valid() const{
    return m_env_isValid;
}

QString OAIGoogleCloudAiplatformV1ContainerSpec::getImageUri() const {
    return m_image_uri;
}
void OAIGoogleCloudAiplatformV1ContainerSpec::setImageUri(const QString &image_uri) {
    m_image_uri = image_uri;
    m_image_uri_isSet = true;
}

bool OAIGoogleCloudAiplatformV1ContainerSpec::is_image_uri_Set() const{
    return m_image_uri_isSet;
}

bool OAIGoogleCloudAiplatformV1ContainerSpec::is_image_uri_Valid() const{
    return m_image_uri_isValid;
}

bool OAIGoogleCloudAiplatformV1ContainerSpec::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_args.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_command.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_env.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_uri_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudAiplatformV1ContainerSpec::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
