/**
 * Vertex AI API
 * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudAiplatformV1BatchPredictionJob.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudAiplatformV1BatchPredictionJob::OAIGoogleCloudAiplatformV1BatchPredictionJob(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudAiplatformV1BatchPredictionJob::OAIGoogleCloudAiplatformV1BatchPredictionJob() {
    this->initializeModel();
}

OAIGoogleCloudAiplatformV1BatchPredictionJob::~OAIGoogleCloudAiplatformV1BatchPredictionJob() {}

void OAIGoogleCloudAiplatformV1BatchPredictionJob::initializeModel() {

    m_completion_stats_isSet = false;
    m_completion_stats_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_dedicated_resources_isSet = false;
    m_dedicated_resources_isValid = false;

    m_disable_container_logging_isSet = false;
    m_disable_container_logging_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_encryption_spec_isSet = false;
    m_encryption_spec_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_error_isSet = false;
    m_error_isValid = false;

    m_explanation_spec_isSet = false;
    m_explanation_spec_isValid = false;

    m_generate_explanation_isSet = false;
    m_generate_explanation_isValid = false;

    m_input_config_isSet = false;
    m_input_config_isValid = false;

    m_instance_config_isSet = false;
    m_instance_config_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_manual_batch_tuning_parameters_isSet = false;
    m_manual_batch_tuning_parameters_isValid = false;

    m_model_isSet = false;
    m_model_isValid = false;

    m_model_parameters_isSet = false;
    m_model_parameters_isValid = false;

    m_model_version_id_isSet = false;
    m_model_version_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_output_config_isSet = false;
    m_output_config_isValid = false;

    m_output_info_isSet = false;
    m_output_info_isValid = false;

    m_partial_failures_isSet = false;
    m_partial_failures_isValid = false;

    m_resources_consumed_isSet = false;
    m_resources_consumed_isValid = false;

    m_service_account_isSet = false;
    m_service_account_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_unmanaged_container_model_isSet = false;
    m_unmanaged_container_model_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;
}

void OAIGoogleCloudAiplatformV1BatchPredictionJob::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudAiplatformV1BatchPredictionJob::fromJsonObject(QJsonObject json) {

    m_completion_stats_isValid = ::OpenAPI::fromJsonValue(m_completion_stats, json[QString("completionStats")]);
    m_completion_stats_isSet = !json[QString("completionStats")].isNull() && m_completion_stats_isValid;

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_dedicated_resources_isValid = ::OpenAPI::fromJsonValue(m_dedicated_resources, json[QString("dedicatedResources")]);
    m_dedicated_resources_isSet = !json[QString("dedicatedResources")].isNull() && m_dedicated_resources_isValid;

    m_disable_container_logging_isValid = ::OpenAPI::fromJsonValue(m_disable_container_logging, json[QString("disableContainerLogging")]);
    m_disable_container_logging_isSet = !json[QString("disableContainerLogging")].isNull() && m_disable_container_logging_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_encryption_spec_isValid = ::OpenAPI::fromJsonValue(m_encryption_spec, json[QString("encryptionSpec")]);
    m_encryption_spec_isSet = !json[QString("encryptionSpec")].isNull() && m_encryption_spec_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("endTime")]);
    m_end_time_isSet = !json[QString("endTime")].isNull() && m_end_time_isValid;

    m_error_isValid = ::OpenAPI::fromJsonValue(m_error, json[QString("error")]);
    m_error_isSet = !json[QString("error")].isNull() && m_error_isValid;

    m_explanation_spec_isValid = ::OpenAPI::fromJsonValue(m_explanation_spec, json[QString("explanationSpec")]);
    m_explanation_spec_isSet = !json[QString("explanationSpec")].isNull() && m_explanation_spec_isValid;

    m_generate_explanation_isValid = ::OpenAPI::fromJsonValue(m_generate_explanation, json[QString("generateExplanation")]);
    m_generate_explanation_isSet = !json[QString("generateExplanation")].isNull() && m_generate_explanation_isValid;

    m_input_config_isValid = ::OpenAPI::fromJsonValue(m_input_config, json[QString("inputConfig")]);
    m_input_config_isSet = !json[QString("inputConfig")].isNull() && m_input_config_isValid;

    m_instance_config_isValid = ::OpenAPI::fromJsonValue(m_instance_config, json[QString("instanceConfig")]);
    m_instance_config_isSet = !json[QString("instanceConfig")].isNull() && m_instance_config_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_manual_batch_tuning_parameters_isValid = ::OpenAPI::fromJsonValue(m_manual_batch_tuning_parameters, json[QString("manualBatchTuningParameters")]);
    m_manual_batch_tuning_parameters_isSet = !json[QString("manualBatchTuningParameters")].isNull() && m_manual_batch_tuning_parameters_isValid;

    m_model_isValid = ::OpenAPI::fromJsonValue(m_model, json[QString("model")]);
    m_model_isSet = !json[QString("model")].isNull() && m_model_isValid;

    m_model_parameters_isValid = ::OpenAPI::fromJsonValue(m_model_parameters, json[QString("modelParameters")]);
    m_model_parameters_isSet = !json[QString("modelParameters")].isNull() && m_model_parameters_isValid;

    m_model_version_id_isValid = ::OpenAPI::fromJsonValue(m_model_version_id, json[QString("modelVersionId")]);
    m_model_version_id_isSet = !json[QString("modelVersionId")].isNull() && m_model_version_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_output_config_isValid = ::OpenAPI::fromJsonValue(m_output_config, json[QString("outputConfig")]);
    m_output_config_isSet = !json[QString("outputConfig")].isNull() && m_output_config_isValid;

    m_output_info_isValid = ::OpenAPI::fromJsonValue(m_output_info, json[QString("outputInfo")]);
    m_output_info_isSet = !json[QString("outputInfo")].isNull() && m_output_info_isValid;

    m_partial_failures_isValid = ::OpenAPI::fromJsonValue(m_partial_failures, json[QString("partialFailures")]);
    m_partial_failures_isSet = !json[QString("partialFailures")].isNull() && m_partial_failures_isValid;

    m_resources_consumed_isValid = ::OpenAPI::fromJsonValue(m_resources_consumed, json[QString("resourcesConsumed")]);
    m_resources_consumed_isSet = !json[QString("resourcesConsumed")].isNull() && m_resources_consumed_isValid;

    m_service_account_isValid = ::OpenAPI::fromJsonValue(m_service_account, json[QString("serviceAccount")]);
    m_service_account_isSet = !json[QString("serviceAccount")].isNull() && m_service_account_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_unmanaged_container_model_isValid = ::OpenAPI::fromJsonValue(m_unmanaged_container_model, json[QString("unmanagedContainerModel")]);
    m_unmanaged_container_model_isSet = !json[QString("unmanagedContainerModel")].isNull() && m_unmanaged_container_model_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;
}

QString OAIGoogleCloudAiplatformV1BatchPredictionJob::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudAiplatformV1BatchPredictionJob::asJsonObject() const {
    QJsonObject obj;
    if (m_completion_stats.isSet()) {
        obj.insert(QString("completionStats"), ::OpenAPI::toJsonValue(m_completion_stats));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_dedicated_resources.isSet()) {
        obj.insert(QString("dedicatedResources"), ::OpenAPI::toJsonValue(m_dedicated_resources));
    }
    if (m_disable_container_logging_isSet) {
        obj.insert(QString("disableContainerLogging"), ::OpenAPI::toJsonValue(m_disable_container_logging));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_encryption_spec.isSet()) {
        obj.insert(QString("encryptionSpec"), ::OpenAPI::toJsonValue(m_encryption_spec));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("endTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_error.isSet()) {
        obj.insert(QString("error"), ::OpenAPI::toJsonValue(m_error));
    }
    if (m_explanation_spec.isSet()) {
        obj.insert(QString("explanationSpec"), ::OpenAPI::toJsonValue(m_explanation_spec));
    }
    if (m_generate_explanation_isSet) {
        obj.insert(QString("generateExplanation"), ::OpenAPI::toJsonValue(m_generate_explanation));
    }
    if (m_input_config.isSet()) {
        obj.insert(QString("inputConfig"), ::OpenAPI::toJsonValue(m_input_config));
    }
    if (m_instance_config.isSet()) {
        obj.insert(QString("instanceConfig"), ::OpenAPI::toJsonValue(m_instance_config));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_manual_batch_tuning_parameters.isSet()) {
        obj.insert(QString("manualBatchTuningParameters"), ::OpenAPI::toJsonValue(m_manual_batch_tuning_parameters));
    }
    if (m_model_isSet) {
        obj.insert(QString("model"), ::OpenAPI::toJsonValue(m_model));
    }
    if (m_model_parameters_isSet) {
        obj.insert(QString("modelParameters"), ::OpenAPI::toJsonValue(m_model_parameters));
    }
    if (m_model_version_id_isSet) {
        obj.insert(QString("modelVersionId"), ::OpenAPI::toJsonValue(m_model_version_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_output_config.isSet()) {
        obj.insert(QString("outputConfig"), ::OpenAPI::toJsonValue(m_output_config));
    }
    if (m_output_info.isSet()) {
        obj.insert(QString("outputInfo"), ::OpenAPI::toJsonValue(m_output_info));
    }
    if (m_partial_failures.size() > 0) {
        obj.insert(QString("partialFailures"), ::OpenAPI::toJsonValue(m_partial_failures));
    }
    if (m_resources_consumed.isSet()) {
        obj.insert(QString("resourcesConsumed"), ::OpenAPI::toJsonValue(m_resources_consumed));
    }
    if (m_service_account_isSet) {
        obj.insert(QString("serviceAccount"), ::OpenAPI::toJsonValue(m_service_account));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_unmanaged_container_model.isSet()) {
        obj.insert(QString("unmanagedContainerModel"), ::OpenAPI::toJsonValue(m_unmanaged_container_model));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    return obj;
}

OAIGoogleCloudAiplatformV1CompletionStats OAIGoogleCloudAiplatformV1BatchPredictionJob::getCompletionStats() const {
    return m_completion_stats;
}
void OAIGoogleCloudAiplatformV1BatchPredictionJob::setCompletionStats(const OAIGoogleCloudAiplatformV1CompletionStats &completion_stats) {
    m_completion_stats = completion_stats;
    m_completion_stats_isSet = true;
}

bool OAIGoogleCloudAiplatformV1BatchPredictionJob::is_completion_stats_Set() const{
    return m_completion_stats_isSet;
}

bool OAIGoogleCloudAiplatformV1BatchPredictionJob::is_completion_stats_Valid() const{
    return m_completion_stats_isValid;
}

QString OAIGoogleCloudAiplatformV1BatchPredictionJob::getCreateTime() const {
    return m_create_time;
}
void OAIGoogleCloudAiplatformV1BatchPredictionJob::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIGoogleCloudAiplatformV1BatchPredictionJob::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIGoogleCloudAiplatformV1BatchPredictionJob::is_create_time_Valid() const{
    return m_create_time_isValid;
}

OAIGoogleCloudAiplatformV1BatchDedicatedResources OAIGoogleCloudAiplatformV1BatchPredictionJob::getDedicatedResources() const {
    return m_dedicated_resources;
}
void OAIGoogleCloudAiplatformV1BatchPredictionJob::setDedicatedResources(const OAIGoogleCloudAiplatformV1BatchDedicatedResources &dedicated_resources) {
    m_dedicated_resources = dedicated_resources;
    m_dedicated_resources_isSet = true;
}

bool OAIGoogleCloudAiplatformV1BatchPredictionJob::is_dedicated_resources_Set() const{
    return m_dedicated_resources_isSet;
}

bool OAIGoogleCloudAiplatformV1BatchPredictionJob::is_dedicated_resources_Valid() const{
    return m_dedicated_resources_isValid;
}

bool OAIGoogleCloudAiplatformV1BatchPredictionJob::isDisableContainerLogging() const {
    return m_disable_container_logging;
}
void OAIGoogleCloudAiplatformV1BatchPredictionJob::setDisableContainerLogging(const bool &disable_container_logging) {
    m_disable_container_logging = disable_container_logging;
    m_disable_container_logging_isSet = true;
}

bool OAIGoogleCloudAiplatformV1BatchPredictionJob::is_disable_container_logging_Set() const{
    return m_disable_container_logging_isSet;
}

bool OAIGoogleCloudAiplatformV1BatchPredictionJob::is_disable_container_logging_Valid() const{
    return m_disable_container_logging_isValid;
}

QString OAIGoogleCloudAiplatformV1BatchPredictionJob::getDisplayName() const {
    return m_display_name;
}
void OAIGoogleCloudAiplatformV1BatchPredictionJob::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIGoogleCloudAiplatformV1BatchPredictionJob::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIGoogleCloudAiplatformV1BatchPredictionJob::is_display_name_Valid() const{
    return m_display_name_isValid;
}

OAIGoogleCloudAiplatformV1EncryptionSpec OAIGoogleCloudAiplatformV1BatchPredictionJob::getEncryptionSpec() const {
    return m_encryption_spec;
}
void OAIGoogleCloudAiplatformV1BatchPredictionJob::setEncryptionSpec(const OAIGoogleCloudAiplatformV1EncryptionSpec &encryption_spec) {
    m_encryption_spec = encryption_spec;
    m_encryption_spec_isSet = true;
}

bool OAIGoogleCloudAiplatformV1BatchPredictionJob::is_encryption_spec_Set() const{
    return m_encryption_spec_isSet;
}

bool OAIGoogleCloudAiplatformV1BatchPredictionJob::is_encryption_spec_Valid() const{
    return m_encryption_spec_isValid;
}

QString OAIGoogleCloudAiplatformV1BatchPredictionJob::getEndTime() const {
    return m_end_time;
}
void OAIGoogleCloudAiplatformV1BatchPredictionJob::setEndTime(const QString &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIGoogleCloudAiplatformV1BatchPredictionJob::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIGoogleCloudAiplatformV1BatchPredictionJob::is_end_time_Valid() const{
    return m_end_time_isValid;
}

OAIGoogleRpcStatus OAIGoogleCloudAiplatformV1BatchPredictionJob::getError() const {
    return m_error;
}
void OAIGoogleCloudAiplatformV1BatchPredictionJob::setError(const OAIGoogleRpcStatus &error) {
    m_error = error;
    m_error_isSet = true;
}

bool OAIGoogleCloudAiplatformV1BatchPredictionJob::is_error_Set() const{
    return m_error_isSet;
}

bool OAIGoogleCloudAiplatformV1BatchPredictionJob::is_error_Valid() const{
    return m_error_isValid;
}

OAIGoogleCloudAiplatformV1ExplanationSpec OAIGoogleCloudAiplatformV1BatchPredictionJob::getExplanationSpec() const {
    return m_explanation_spec;
}
void OAIGoogleCloudAiplatformV1BatchPredictionJob::setExplanationSpec(const OAIGoogleCloudAiplatformV1ExplanationSpec &explanation_spec) {
    m_explanation_spec = explanation_spec;
    m_explanation_spec_isSet = true;
}

bool OAIGoogleCloudAiplatformV1BatchPredictionJob::is_explanation_spec_Set() const{
    return m_explanation_spec_isSet;
}

bool OAIGoogleCloudAiplatformV1BatchPredictionJob::is_explanation_spec_Valid() const{
    return m_explanation_spec_isValid;
}

bool OAIGoogleCloudAiplatformV1BatchPredictionJob::isGenerateExplanation() const {
    return m_generate_explanation;
}
void OAIGoogleCloudAiplatformV1BatchPredictionJob::setGenerateExplanation(const bool &generate_explanation) {
    m_generate_explanation = generate_explanation;
    m_generate_explanation_isSet = true;
}

bool OAIGoogleCloudAiplatformV1BatchPredictionJob::is_generate_explanation_Set() const{
    return m_generate_explanation_isSet;
}

bool OAIGoogleCloudAiplatformV1BatchPredictionJob::is_generate_explanation_Valid() const{
    return m_generate_explanation_isValid;
}

OAIGoogleCloudAiplatformV1BatchPredictionJobInputConfig OAIGoogleCloudAiplatformV1BatchPredictionJob::getInputConfig() const {
    return m_input_config;
}
void OAIGoogleCloudAiplatformV1BatchPredictionJob::setInputConfig(const OAIGoogleCloudAiplatformV1BatchPredictionJobInputConfig &input_config) {
    m_input_config = input_config;
    m_input_config_isSet = true;
}

bool OAIGoogleCloudAiplatformV1BatchPredictionJob::is_input_config_Set() const{
    return m_input_config_isSet;
}

bool OAIGoogleCloudAiplatformV1BatchPredictionJob::is_input_config_Valid() const{
    return m_input_config_isValid;
}

OAIGoogleCloudAiplatformV1BatchPredictionJobInstanceConfig OAIGoogleCloudAiplatformV1BatchPredictionJob::getInstanceConfig() const {
    return m_instance_config;
}
void OAIGoogleCloudAiplatformV1BatchPredictionJob::setInstanceConfig(const OAIGoogleCloudAiplatformV1BatchPredictionJobInstanceConfig &instance_config) {
    m_instance_config = instance_config;
    m_instance_config_isSet = true;
}

bool OAIGoogleCloudAiplatformV1BatchPredictionJob::is_instance_config_Set() const{
    return m_instance_config_isSet;
}

bool OAIGoogleCloudAiplatformV1BatchPredictionJob::is_instance_config_Valid() const{
    return m_instance_config_isValid;
}

QMap<QString, QString> OAIGoogleCloudAiplatformV1BatchPredictionJob::getLabels() const {
    return m_labels;
}
void OAIGoogleCloudAiplatformV1BatchPredictionJob::setLabels(const QMap<QString, QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIGoogleCloudAiplatformV1BatchPredictionJob::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIGoogleCloudAiplatformV1BatchPredictionJob::is_labels_Valid() const{
    return m_labels_isValid;
}

OAIGoogleCloudAiplatformV1ManualBatchTuningParameters OAIGoogleCloudAiplatformV1BatchPredictionJob::getManualBatchTuningParameters() const {
    return m_manual_batch_tuning_parameters;
}
void OAIGoogleCloudAiplatformV1BatchPredictionJob::setManualBatchTuningParameters(const OAIGoogleCloudAiplatformV1ManualBatchTuningParameters &manual_batch_tuning_parameters) {
    m_manual_batch_tuning_parameters = manual_batch_tuning_parameters;
    m_manual_batch_tuning_parameters_isSet = true;
}

bool OAIGoogleCloudAiplatformV1BatchPredictionJob::is_manual_batch_tuning_parameters_Set() const{
    return m_manual_batch_tuning_parameters_isSet;
}

bool OAIGoogleCloudAiplatformV1BatchPredictionJob::is_manual_batch_tuning_parameters_Valid() const{
    return m_manual_batch_tuning_parameters_isValid;
}

QString OAIGoogleCloudAiplatformV1BatchPredictionJob::getModel() const {
    return m_model;
}
void OAIGoogleCloudAiplatformV1BatchPredictionJob::setModel(const QString &model) {
    m_model = model;
    m_model_isSet = true;
}

bool OAIGoogleCloudAiplatformV1BatchPredictionJob::is_model_Set() const{
    return m_model_isSet;
}

bool OAIGoogleCloudAiplatformV1BatchPredictionJob::is_model_Valid() const{
    return m_model_isValid;
}

QJsonValue OAIGoogleCloudAiplatformV1BatchPredictionJob::getModelParameters() const {
    return m_model_parameters;
}
void OAIGoogleCloudAiplatformV1BatchPredictionJob::setModelParameters(const QJsonValue &model_parameters) {
    m_model_parameters = model_parameters;
    m_model_parameters_isSet = true;
}

bool OAIGoogleCloudAiplatformV1BatchPredictionJob::is_model_parameters_Set() const{
    return m_model_parameters_isSet;
}

bool OAIGoogleCloudAiplatformV1BatchPredictionJob::is_model_parameters_Valid() const{
    return m_model_parameters_isValid;
}

QString OAIGoogleCloudAiplatformV1BatchPredictionJob::getModelVersionId() const {
    return m_model_version_id;
}
void OAIGoogleCloudAiplatformV1BatchPredictionJob::setModelVersionId(const QString &model_version_id) {
    m_model_version_id = model_version_id;
    m_model_version_id_isSet = true;
}

bool OAIGoogleCloudAiplatformV1BatchPredictionJob::is_model_version_id_Set() const{
    return m_model_version_id_isSet;
}

bool OAIGoogleCloudAiplatformV1BatchPredictionJob::is_model_version_id_Valid() const{
    return m_model_version_id_isValid;
}

QString OAIGoogleCloudAiplatformV1BatchPredictionJob::getName() const {
    return m_name;
}
void OAIGoogleCloudAiplatformV1BatchPredictionJob::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGoogleCloudAiplatformV1BatchPredictionJob::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGoogleCloudAiplatformV1BatchPredictionJob::is_name_Valid() const{
    return m_name_isValid;
}

OAIGoogleCloudAiplatformV1BatchPredictionJobOutputConfig OAIGoogleCloudAiplatformV1BatchPredictionJob::getOutputConfig() const {
    return m_output_config;
}
void OAIGoogleCloudAiplatformV1BatchPredictionJob::setOutputConfig(const OAIGoogleCloudAiplatformV1BatchPredictionJobOutputConfig &output_config) {
    m_output_config = output_config;
    m_output_config_isSet = true;
}

bool OAIGoogleCloudAiplatformV1BatchPredictionJob::is_output_config_Set() const{
    return m_output_config_isSet;
}

bool OAIGoogleCloudAiplatformV1BatchPredictionJob::is_output_config_Valid() const{
    return m_output_config_isValid;
}

OAIGoogleCloudAiplatformV1BatchPredictionJobOutputInfo OAIGoogleCloudAiplatformV1BatchPredictionJob::getOutputInfo() const {
    return m_output_info;
}
void OAIGoogleCloudAiplatformV1BatchPredictionJob::setOutputInfo(const OAIGoogleCloudAiplatformV1BatchPredictionJobOutputInfo &output_info) {
    m_output_info = output_info;
    m_output_info_isSet = true;
}

bool OAIGoogleCloudAiplatformV1BatchPredictionJob::is_output_info_Set() const{
    return m_output_info_isSet;
}

bool OAIGoogleCloudAiplatformV1BatchPredictionJob::is_output_info_Valid() const{
    return m_output_info_isValid;
}

QList<OAIGoogleRpcStatus> OAIGoogleCloudAiplatformV1BatchPredictionJob::getPartialFailures() const {
    return m_partial_failures;
}
void OAIGoogleCloudAiplatformV1BatchPredictionJob::setPartialFailures(const QList<OAIGoogleRpcStatus> &partial_failures) {
    m_partial_failures = partial_failures;
    m_partial_failures_isSet = true;
}

bool OAIGoogleCloudAiplatformV1BatchPredictionJob::is_partial_failures_Set() const{
    return m_partial_failures_isSet;
}

bool OAIGoogleCloudAiplatformV1BatchPredictionJob::is_partial_failures_Valid() const{
    return m_partial_failures_isValid;
}

OAIGoogleCloudAiplatformV1ResourcesConsumed OAIGoogleCloudAiplatformV1BatchPredictionJob::getResourcesConsumed() const {
    return m_resources_consumed;
}
void OAIGoogleCloudAiplatformV1BatchPredictionJob::setResourcesConsumed(const OAIGoogleCloudAiplatformV1ResourcesConsumed &resources_consumed) {
    m_resources_consumed = resources_consumed;
    m_resources_consumed_isSet = true;
}

bool OAIGoogleCloudAiplatformV1BatchPredictionJob::is_resources_consumed_Set() const{
    return m_resources_consumed_isSet;
}

bool OAIGoogleCloudAiplatformV1BatchPredictionJob::is_resources_consumed_Valid() const{
    return m_resources_consumed_isValid;
}

QString OAIGoogleCloudAiplatformV1BatchPredictionJob::getServiceAccount() const {
    return m_service_account;
}
void OAIGoogleCloudAiplatformV1BatchPredictionJob::setServiceAccount(const QString &service_account) {
    m_service_account = service_account;
    m_service_account_isSet = true;
}

bool OAIGoogleCloudAiplatformV1BatchPredictionJob::is_service_account_Set() const{
    return m_service_account_isSet;
}

bool OAIGoogleCloudAiplatformV1BatchPredictionJob::is_service_account_Valid() const{
    return m_service_account_isValid;
}

QString OAIGoogleCloudAiplatformV1BatchPredictionJob::getStartTime() const {
    return m_start_time;
}
void OAIGoogleCloudAiplatformV1BatchPredictionJob::setStartTime(const QString &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIGoogleCloudAiplatformV1BatchPredictionJob::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIGoogleCloudAiplatformV1BatchPredictionJob::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QString OAIGoogleCloudAiplatformV1BatchPredictionJob::getState() const {
    return m_state;
}
void OAIGoogleCloudAiplatformV1BatchPredictionJob::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIGoogleCloudAiplatformV1BatchPredictionJob::is_state_Set() const{
    return m_state_isSet;
}

bool OAIGoogleCloudAiplatformV1BatchPredictionJob::is_state_Valid() const{
    return m_state_isValid;
}

OAIGoogleCloudAiplatformV1UnmanagedContainerModel OAIGoogleCloudAiplatformV1BatchPredictionJob::getUnmanagedContainerModel() const {
    return m_unmanaged_container_model;
}
void OAIGoogleCloudAiplatformV1BatchPredictionJob::setUnmanagedContainerModel(const OAIGoogleCloudAiplatformV1UnmanagedContainerModel &unmanaged_container_model) {
    m_unmanaged_container_model = unmanaged_container_model;
    m_unmanaged_container_model_isSet = true;
}

bool OAIGoogleCloudAiplatformV1BatchPredictionJob::is_unmanaged_container_model_Set() const{
    return m_unmanaged_container_model_isSet;
}

bool OAIGoogleCloudAiplatformV1BatchPredictionJob::is_unmanaged_container_model_Valid() const{
    return m_unmanaged_container_model_isValid;
}

QString OAIGoogleCloudAiplatformV1BatchPredictionJob::getUpdateTime() const {
    return m_update_time;
}
void OAIGoogleCloudAiplatformV1BatchPredictionJob::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAIGoogleCloudAiplatformV1BatchPredictionJob::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAIGoogleCloudAiplatformV1BatchPredictionJob::is_update_time_Valid() const{
    return m_update_time_isValid;
}

bool OAIGoogleCloudAiplatformV1BatchPredictionJob::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_completion_stats.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dedicated_resources.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_disable_container_logging_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_encryption_spec.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_explanation_spec.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_generate_explanation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_manual_batch_tuning_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_parameters_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_version_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_output_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_output_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_partial_failures.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_resources_consumed.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_account_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unmanaged_container_model.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudAiplatformV1BatchPredictionJob::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
