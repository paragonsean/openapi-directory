/**
 * Vertex AI API
 * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILearningGenaiRootFilterMetadata.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILearningGenaiRootFilterMetadata::OAILearningGenaiRootFilterMetadata(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILearningGenaiRootFilterMetadata::OAILearningGenaiRootFilterMetadata() {
    this->initializeModel();
}

OAILearningGenaiRootFilterMetadata::~OAILearningGenaiRootFilterMetadata() {}

void OAILearningGenaiRootFilterMetadata::initializeModel() {

    m_confidence_isSet = false;
    m_confidence_isValid = false;

    m_debug_info_isSet = false;
    m_debug_info_isValid = false;

    m_fallback_isSet = false;
    m_fallback_isValid = false;

    m_info_isSet = false;
    m_info_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_reason_isSet = false;
    m_reason_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;
}

void OAILearningGenaiRootFilterMetadata::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILearningGenaiRootFilterMetadata::fromJsonObject(QJsonObject json) {

    m_confidence_isValid = ::OpenAPI::fromJsonValue(m_confidence, json[QString("confidence")]);
    m_confidence_isSet = !json[QString("confidence")].isNull() && m_confidence_isValid;

    m_debug_info_isValid = ::OpenAPI::fromJsonValue(m_debug_info, json[QString("debugInfo")]);
    m_debug_info_isSet = !json[QString("debugInfo")].isNull() && m_debug_info_isValid;

    m_fallback_isValid = ::OpenAPI::fromJsonValue(m_fallback, json[QString("fallback")]);
    m_fallback_isSet = !json[QString("fallback")].isNull() && m_fallback_isValid;

    m_info_isValid = ::OpenAPI::fromJsonValue(m_info, json[QString("info")]);
    m_info_isSet = !json[QString("info")].isNull() && m_info_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_reason_isValid = ::OpenAPI::fromJsonValue(m_reason, json[QString("reason")]);
    m_reason_isSet = !json[QString("reason")].isNull() && m_reason_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("text")]);
    m_text_isSet = !json[QString("text")].isNull() && m_text_isValid;
}

QString OAILearningGenaiRootFilterMetadata::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILearningGenaiRootFilterMetadata::asJsonObject() const {
    QJsonObject obj;
    if (m_confidence_isSet) {
        obj.insert(QString("confidence"), ::OpenAPI::toJsonValue(m_confidence));
    }
    if (m_debug_info.isSet()) {
        obj.insert(QString("debugInfo"), ::OpenAPI::toJsonValue(m_debug_info));
    }
    if (m_fallback_isSet) {
        obj.insert(QString("fallback"), ::OpenAPI::toJsonValue(m_fallback));
    }
    if (m_info_isSet) {
        obj.insert(QString("info"), ::OpenAPI::toJsonValue(m_info));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_reason_isSet) {
        obj.insert(QString("reason"), ::OpenAPI::toJsonValue(m_reason));
    }
    if (m_text_isSet) {
        obj.insert(QString("text"), ::OpenAPI::toJsonValue(m_text));
    }
    return obj;
}

QString OAILearningGenaiRootFilterMetadata::getConfidence() const {
    return m_confidence;
}
void OAILearningGenaiRootFilterMetadata::setConfidence(const QString &confidence) {
    m_confidence = confidence;
    m_confidence_isSet = true;
}

bool OAILearningGenaiRootFilterMetadata::is_confidence_Set() const{
    return m_confidence_isSet;
}

bool OAILearningGenaiRootFilterMetadata::is_confidence_Valid() const{
    return m_confidence_isValid;
}

OAILearningGenaiRootFilterMetadataFilterDebugInfo OAILearningGenaiRootFilterMetadata::getDebugInfo() const {
    return m_debug_info;
}
void OAILearningGenaiRootFilterMetadata::setDebugInfo(const OAILearningGenaiRootFilterMetadataFilterDebugInfo &debug_info) {
    m_debug_info = debug_info;
    m_debug_info_isSet = true;
}

bool OAILearningGenaiRootFilterMetadata::is_debug_info_Set() const{
    return m_debug_info_isSet;
}

bool OAILearningGenaiRootFilterMetadata::is_debug_info_Valid() const{
    return m_debug_info_isValid;
}

QString OAILearningGenaiRootFilterMetadata::getFallback() const {
    return m_fallback;
}
void OAILearningGenaiRootFilterMetadata::setFallback(const QString &fallback) {
    m_fallback = fallback;
    m_fallback_isSet = true;
}

bool OAILearningGenaiRootFilterMetadata::is_fallback_Set() const{
    return m_fallback_isSet;
}

bool OAILearningGenaiRootFilterMetadata::is_fallback_Valid() const{
    return m_fallback_isValid;
}

QString OAILearningGenaiRootFilterMetadata::getInfo() const {
    return m_info;
}
void OAILearningGenaiRootFilterMetadata::setInfo(const QString &info) {
    m_info = info;
    m_info_isSet = true;
}

bool OAILearningGenaiRootFilterMetadata::is_info_Set() const{
    return m_info_isSet;
}

bool OAILearningGenaiRootFilterMetadata::is_info_Valid() const{
    return m_info_isValid;
}

QString OAILearningGenaiRootFilterMetadata::getName() const {
    return m_name;
}
void OAILearningGenaiRootFilterMetadata::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAILearningGenaiRootFilterMetadata::is_name_Set() const{
    return m_name_isSet;
}

bool OAILearningGenaiRootFilterMetadata::is_name_Valid() const{
    return m_name_isValid;
}

QString OAILearningGenaiRootFilterMetadata::getReason() const {
    return m_reason;
}
void OAILearningGenaiRootFilterMetadata::setReason(const QString &reason) {
    m_reason = reason;
    m_reason_isSet = true;
}

bool OAILearningGenaiRootFilterMetadata::is_reason_Set() const{
    return m_reason_isSet;
}

bool OAILearningGenaiRootFilterMetadata::is_reason_Valid() const{
    return m_reason_isValid;
}

QString OAILearningGenaiRootFilterMetadata::getText() const {
    return m_text;
}
void OAILearningGenaiRootFilterMetadata::setText(const QString &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAILearningGenaiRootFilterMetadata::is_text_Set() const{
    return m_text_isSet;
}

bool OAILearningGenaiRootFilterMetadata::is_text_Valid() const{
    return m_text_isValid;
}

bool OAILearningGenaiRootFilterMetadata::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_confidence_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_debug_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_fallback_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_info_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILearningGenaiRootFilterMetadata::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
