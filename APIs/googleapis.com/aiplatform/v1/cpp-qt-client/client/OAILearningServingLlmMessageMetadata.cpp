/**
 * Vertex AI API
 * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILearningServingLlmMessageMetadata.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILearningServingLlmMessageMetadata::OAILearningServingLlmMessageMetadata(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILearningServingLlmMessageMetadata::OAILearningServingLlmMessageMetadata() {
    this->initializeModel();
}

OAILearningServingLlmMessageMetadata::~OAILearningServingLlmMessageMetadata() {}

void OAILearningServingLlmMessageMetadata::initializeModel() {

    m_classifier_summary_isSet = false;
    m_classifier_summary_isValid = false;

    m_codey_output_isSet = false;
    m_codey_output_isValid = false;

    m_current_stream_text_length_isSet = false;
    m_current_stream_text_length_isValid = false;

    m_deleted_isSet = false;
    m_deleted_isValid = false;

    m_filter_meta_isSet = false;
    m_filter_meta_isValid = false;

    m_final_message_score_isSet = false;
    m_final_message_score_isValid = false;

    m_finish_reason_isSet = false;
    m_finish_reason_isValid = false;

    m_grounding_metadata_isSet = false;
    m_grounding_metadata_isValid = false;

    m_is_code_isSet = false;
    m_is_code_isValid = false;

    m_is_fallback_isSet = false;
    m_is_fallback_isValid = false;

    m_langid_result_isSet = false;
    m_langid_result_isValid = false;

    m_language_isSet = false;
    m_language_isValid = false;

    m_lm_prefix_isSet = false;
    m_lm_prefix_isValid = false;

    m_original_text_isSet = false;
    m_original_text_isValid = false;

    m_per_stream_decoded_token_count_isSet = false;
    m_per_stream_decoded_token_count_isValid = false;

    m_rai_outputs_isSet = false;
    m_rai_outputs_isValid = false;

    m_recitation_result_isSet = false;
    m_recitation_result_isValid = false;

    m_return_token_count_isSet = false;
    m_return_token_count_isValid = false;

    m_scores_isSet = false;
    m_scores_isValid = false;

    m_stream_terminated_isSet = false;
    m_stream_terminated_isValid = false;

    m_total_decoded_token_count_isSet = false;
    m_total_decoded_token_count_isValid = false;

    m_translated_user_prompts_isSet = false;
    m_translated_user_prompts_isValid = false;

    m_vertex_rai_result_isSet = false;
    m_vertex_rai_result_isValid = false;
}

void OAILearningServingLlmMessageMetadata::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILearningServingLlmMessageMetadata::fromJsonObject(QJsonObject json) {

    m_classifier_summary_isValid = ::OpenAPI::fromJsonValue(m_classifier_summary, json[QString("classifierSummary")]);
    m_classifier_summary_isSet = !json[QString("classifierSummary")].isNull() && m_classifier_summary_isValid;

    m_codey_output_isValid = ::OpenAPI::fromJsonValue(m_codey_output, json[QString("codeyOutput")]);
    m_codey_output_isSet = !json[QString("codeyOutput")].isNull() && m_codey_output_isValid;

    m_current_stream_text_length_isValid = ::OpenAPI::fromJsonValue(m_current_stream_text_length, json[QString("currentStreamTextLength")]);
    m_current_stream_text_length_isSet = !json[QString("currentStreamTextLength")].isNull() && m_current_stream_text_length_isValid;

    m_deleted_isValid = ::OpenAPI::fromJsonValue(m_deleted, json[QString("deleted")]);
    m_deleted_isSet = !json[QString("deleted")].isNull() && m_deleted_isValid;

    m_filter_meta_isValid = ::OpenAPI::fromJsonValue(m_filter_meta, json[QString("filterMeta")]);
    m_filter_meta_isSet = !json[QString("filterMeta")].isNull() && m_filter_meta_isValid;

    m_final_message_score_isValid = ::OpenAPI::fromJsonValue(m_final_message_score, json[QString("finalMessageScore")]);
    m_final_message_score_isSet = !json[QString("finalMessageScore")].isNull() && m_final_message_score_isValid;

    m_finish_reason_isValid = ::OpenAPI::fromJsonValue(m_finish_reason, json[QString("finishReason")]);
    m_finish_reason_isSet = !json[QString("finishReason")].isNull() && m_finish_reason_isValid;

    m_grounding_metadata_isValid = ::OpenAPI::fromJsonValue(m_grounding_metadata, json[QString("groundingMetadata")]);
    m_grounding_metadata_isSet = !json[QString("groundingMetadata")].isNull() && m_grounding_metadata_isValid;

    m_is_code_isValid = ::OpenAPI::fromJsonValue(m_is_code, json[QString("isCode")]);
    m_is_code_isSet = !json[QString("isCode")].isNull() && m_is_code_isValid;

    m_is_fallback_isValid = ::OpenAPI::fromJsonValue(m_is_fallback, json[QString("isFallback")]);
    m_is_fallback_isSet = !json[QString("isFallback")].isNull() && m_is_fallback_isValid;

    m_langid_result_isValid = ::OpenAPI::fromJsonValue(m_langid_result, json[QString("langidResult")]);
    m_langid_result_isSet = !json[QString("langidResult")].isNull() && m_langid_result_isValid;

    m_language_isValid = ::OpenAPI::fromJsonValue(m_language, json[QString("language")]);
    m_language_isSet = !json[QString("language")].isNull() && m_language_isValid;

    m_lm_prefix_isValid = ::OpenAPI::fromJsonValue(m_lm_prefix, json[QString("lmPrefix")]);
    m_lm_prefix_isSet = !json[QString("lmPrefix")].isNull() && m_lm_prefix_isValid;

    m_original_text_isValid = ::OpenAPI::fromJsonValue(m_original_text, json[QString("originalText")]);
    m_original_text_isSet = !json[QString("originalText")].isNull() && m_original_text_isValid;

    m_per_stream_decoded_token_count_isValid = ::OpenAPI::fromJsonValue(m_per_stream_decoded_token_count, json[QString("perStreamDecodedTokenCount")]);
    m_per_stream_decoded_token_count_isSet = !json[QString("perStreamDecodedTokenCount")].isNull() && m_per_stream_decoded_token_count_isValid;

    m_rai_outputs_isValid = ::OpenAPI::fromJsonValue(m_rai_outputs, json[QString("raiOutputs")]);
    m_rai_outputs_isSet = !json[QString("raiOutputs")].isNull() && m_rai_outputs_isValid;

    m_recitation_result_isValid = ::OpenAPI::fromJsonValue(m_recitation_result, json[QString("recitationResult")]);
    m_recitation_result_isSet = !json[QString("recitationResult")].isNull() && m_recitation_result_isValid;

    m_return_token_count_isValid = ::OpenAPI::fromJsonValue(m_return_token_count, json[QString("returnTokenCount")]);
    m_return_token_count_isSet = !json[QString("returnTokenCount")].isNull() && m_return_token_count_isValid;

    m_scores_isValid = ::OpenAPI::fromJsonValue(m_scores, json[QString("scores")]);
    m_scores_isSet = !json[QString("scores")].isNull() && m_scores_isValid;

    m_stream_terminated_isValid = ::OpenAPI::fromJsonValue(m_stream_terminated, json[QString("streamTerminated")]);
    m_stream_terminated_isSet = !json[QString("streamTerminated")].isNull() && m_stream_terminated_isValid;

    m_total_decoded_token_count_isValid = ::OpenAPI::fromJsonValue(m_total_decoded_token_count, json[QString("totalDecodedTokenCount")]);
    m_total_decoded_token_count_isSet = !json[QString("totalDecodedTokenCount")].isNull() && m_total_decoded_token_count_isValid;

    m_translated_user_prompts_isValid = ::OpenAPI::fromJsonValue(m_translated_user_prompts, json[QString("translatedUserPrompts")]);
    m_translated_user_prompts_isSet = !json[QString("translatedUserPrompts")].isNull() && m_translated_user_prompts_isValid;

    m_vertex_rai_result_isValid = ::OpenAPI::fromJsonValue(m_vertex_rai_result, json[QString("vertexRaiResult")]);
    m_vertex_rai_result_isSet = !json[QString("vertexRaiResult")].isNull() && m_vertex_rai_result_isValid;
}

QString OAILearningServingLlmMessageMetadata::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILearningServingLlmMessageMetadata::asJsonObject() const {
    QJsonObject obj;
    if (m_classifier_summary.isSet()) {
        obj.insert(QString("classifierSummary"), ::OpenAPI::toJsonValue(m_classifier_summary));
    }
    if (m_codey_output.isSet()) {
        obj.insert(QString("codeyOutput"), ::OpenAPI::toJsonValue(m_codey_output));
    }
    if (m_current_stream_text_length_isSet) {
        obj.insert(QString("currentStreamTextLength"), ::OpenAPI::toJsonValue(m_current_stream_text_length));
    }
    if (m_deleted_isSet) {
        obj.insert(QString("deleted"), ::OpenAPI::toJsonValue(m_deleted));
    }
    if (m_filter_meta.size() > 0) {
        obj.insert(QString("filterMeta"), ::OpenAPI::toJsonValue(m_filter_meta));
    }
    if (m_final_message_score.isSet()) {
        obj.insert(QString("finalMessageScore"), ::OpenAPI::toJsonValue(m_final_message_score));
    }
    if (m_finish_reason_isSet) {
        obj.insert(QString("finishReason"), ::OpenAPI::toJsonValue(m_finish_reason));
    }
    if (m_grounding_metadata.isSet()) {
        obj.insert(QString("groundingMetadata"), ::OpenAPI::toJsonValue(m_grounding_metadata));
    }
    if (m_is_code_isSet) {
        obj.insert(QString("isCode"), ::OpenAPI::toJsonValue(m_is_code));
    }
    if (m_is_fallback_isSet) {
        obj.insert(QString("isFallback"), ::OpenAPI::toJsonValue(m_is_fallback));
    }
    if (m_langid_result.isSet()) {
        obj.insert(QString("langidResult"), ::OpenAPI::toJsonValue(m_langid_result));
    }
    if (m_language_isSet) {
        obj.insert(QString("language"), ::OpenAPI::toJsonValue(m_language));
    }
    if (m_lm_prefix_isSet) {
        obj.insert(QString("lmPrefix"), ::OpenAPI::toJsonValue(m_lm_prefix));
    }
    if (m_original_text_isSet) {
        obj.insert(QString("originalText"), ::OpenAPI::toJsonValue(m_original_text));
    }
    if (m_per_stream_decoded_token_count_isSet) {
        obj.insert(QString("perStreamDecodedTokenCount"), ::OpenAPI::toJsonValue(m_per_stream_decoded_token_count));
    }
    if (m_rai_outputs.size() > 0) {
        obj.insert(QString("raiOutputs"), ::OpenAPI::toJsonValue(m_rai_outputs));
    }
    if (m_recitation_result.isSet()) {
        obj.insert(QString("recitationResult"), ::OpenAPI::toJsonValue(m_recitation_result));
    }
    if (m_return_token_count_isSet) {
        obj.insert(QString("returnTokenCount"), ::OpenAPI::toJsonValue(m_return_token_count));
    }
    if (m_scores.size() > 0) {
        obj.insert(QString("scores"), ::OpenAPI::toJsonValue(m_scores));
    }
    if (m_stream_terminated_isSet) {
        obj.insert(QString("streamTerminated"), ::OpenAPI::toJsonValue(m_stream_terminated));
    }
    if (m_total_decoded_token_count_isSet) {
        obj.insert(QString("totalDecodedTokenCount"), ::OpenAPI::toJsonValue(m_total_decoded_token_count));
    }
    if (m_translated_user_prompts.size() > 0) {
        obj.insert(QString("translatedUserPrompts"), ::OpenAPI::toJsonValue(m_translated_user_prompts));
    }
    if (m_vertex_rai_result.isSet()) {
        obj.insert(QString("vertexRaiResult"), ::OpenAPI::toJsonValue(m_vertex_rai_result));
    }
    return obj;
}

OAILearningGenaiRootClassifierOutputSummary OAILearningServingLlmMessageMetadata::getClassifierSummary() const {
    return m_classifier_summary;
}
void OAILearningServingLlmMessageMetadata::setClassifierSummary(const OAILearningGenaiRootClassifierOutputSummary &classifier_summary) {
    m_classifier_summary = classifier_summary;
    m_classifier_summary_isSet = true;
}

bool OAILearningServingLlmMessageMetadata::is_classifier_summary_Set() const{
    return m_classifier_summary_isSet;
}

bool OAILearningServingLlmMessageMetadata::is_classifier_summary_Valid() const{
    return m_classifier_summary_isValid;
}

OAILearningGenaiRootCodeyOutput OAILearningServingLlmMessageMetadata::getCodeyOutput() const {
    return m_codey_output;
}
void OAILearningServingLlmMessageMetadata::setCodeyOutput(const OAILearningGenaiRootCodeyOutput &codey_output) {
    m_codey_output = codey_output;
    m_codey_output_isSet = true;
}

bool OAILearningServingLlmMessageMetadata::is_codey_output_Set() const{
    return m_codey_output_isSet;
}

bool OAILearningServingLlmMessageMetadata::is_codey_output_Valid() const{
    return m_codey_output_isValid;
}

qint32 OAILearningServingLlmMessageMetadata::getCurrentStreamTextLength() const {
    return m_current_stream_text_length;
}
void OAILearningServingLlmMessageMetadata::setCurrentStreamTextLength(const qint32 &current_stream_text_length) {
    m_current_stream_text_length = current_stream_text_length;
    m_current_stream_text_length_isSet = true;
}

bool OAILearningServingLlmMessageMetadata::is_current_stream_text_length_Set() const{
    return m_current_stream_text_length_isSet;
}

bool OAILearningServingLlmMessageMetadata::is_current_stream_text_length_Valid() const{
    return m_current_stream_text_length_isValid;
}

bool OAILearningServingLlmMessageMetadata::isDeleted() const {
    return m_deleted;
}
void OAILearningServingLlmMessageMetadata::setDeleted(const bool &deleted) {
    m_deleted = deleted;
    m_deleted_isSet = true;
}

bool OAILearningServingLlmMessageMetadata::is_deleted_Set() const{
    return m_deleted_isSet;
}

bool OAILearningServingLlmMessageMetadata::is_deleted_Valid() const{
    return m_deleted_isValid;
}

QList<OAILearningGenaiRootFilterMetadata> OAILearningServingLlmMessageMetadata::getFilterMeta() const {
    return m_filter_meta;
}
void OAILearningServingLlmMessageMetadata::setFilterMeta(const QList<OAILearningGenaiRootFilterMetadata> &filter_meta) {
    m_filter_meta = filter_meta;
    m_filter_meta_isSet = true;
}

bool OAILearningServingLlmMessageMetadata::is_filter_meta_Set() const{
    return m_filter_meta_isSet;
}

bool OAILearningServingLlmMessageMetadata::is_filter_meta_Valid() const{
    return m_filter_meta_isValid;
}

OAILearningGenaiRootScore OAILearningServingLlmMessageMetadata::getFinalMessageScore() const {
    return m_final_message_score;
}
void OAILearningServingLlmMessageMetadata::setFinalMessageScore(const OAILearningGenaiRootScore &final_message_score) {
    m_final_message_score = final_message_score;
    m_final_message_score_isSet = true;
}

bool OAILearningServingLlmMessageMetadata::is_final_message_score_Set() const{
    return m_final_message_score_isSet;
}

bool OAILearningServingLlmMessageMetadata::is_final_message_score_Valid() const{
    return m_final_message_score_isValid;
}

QString OAILearningServingLlmMessageMetadata::getFinishReason() const {
    return m_finish_reason;
}
void OAILearningServingLlmMessageMetadata::setFinishReason(const QString &finish_reason) {
    m_finish_reason = finish_reason;
    m_finish_reason_isSet = true;
}

bool OAILearningServingLlmMessageMetadata::is_finish_reason_Set() const{
    return m_finish_reason_isSet;
}

bool OAILearningServingLlmMessageMetadata::is_finish_reason_Valid() const{
    return m_finish_reason_isValid;
}

OAILearningGenaiRootGroundingMetadata OAILearningServingLlmMessageMetadata::getGroundingMetadata() const {
    return m_grounding_metadata;
}
void OAILearningServingLlmMessageMetadata::setGroundingMetadata(const OAILearningGenaiRootGroundingMetadata &grounding_metadata) {
    m_grounding_metadata = grounding_metadata;
    m_grounding_metadata_isSet = true;
}

bool OAILearningServingLlmMessageMetadata::is_grounding_metadata_Set() const{
    return m_grounding_metadata_isSet;
}

bool OAILearningServingLlmMessageMetadata::is_grounding_metadata_Valid() const{
    return m_grounding_metadata_isValid;
}

bool OAILearningServingLlmMessageMetadata::isIsCode() const {
    return m_is_code;
}
void OAILearningServingLlmMessageMetadata::setIsCode(const bool &is_code) {
    m_is_code = is_code;
    m_is_code_isSet = true;
}

bool OAILearningServingLlmMessageMetadata::is_is_code_Set() const{
    return m_is_code_isSet;
}

bool OAILearningServingLlmMessageMetadata::is_is_code_Valid() const{
    return m_is_code_isValid;
}

bool OAILearningServingLlmMessageMetadata::isIsFallback() const {
    return m_is_fallback;
}
void OAILearningServingLlmMessageMetadata::setIsFallback(const bool &is_fallback) {
    m_is_fallback = is_fallback;
    m_is_fallback_isSet = true;
}

bool OAILearningServingLlmMessageMetadata::is_is_fallback_Set() const{
    return m_is_fallback_isSet;
}

bool OAILearningServingLlmMessageMetadata::is_is_fallback_Valid() const{
    return m_is_fallback_isValid;
}

OAINlpSaftLangIdResult OAILearningServingLlmMessageMetadata::getLangidResult() const {
    return m_langid_result;
}
void OAILearningServingLlmMessageMetadata::setLangidResult(const OAINlpSaftLangIdResult &langid_result) {
    m_langid_result = langid_result;
    m_langid_result_isSet = true;
}

bool OAILearningServingLlmMessageMetadata::is_langid_result_Set() const{
    return m_langid_result_isSet;
}

bool OAILearningServingLlmMessageMetadata::is_langid_result_Valid() const{
    return m_langid_result_isValid;
}

QString OAILearningServingLlmMessageMetadata::getLanguage() const {
    return m_language;
}
void OAILearningServingLlmMessageMetadata::setLanguage(const QString &language) {
    m_language = language;
    m_language_isSet = true;
}

bool OAILearningServingLlmMessageMetadata::is_language_Set() const{
    return m_language_isSet;
}

bool OAILearningServingLlmMessageMetadata::is_language_Valid() const{
    return m_language_isValid;
}

QString OAILearningServingLlmMessageMetadata::getLmPrefix() const {
    return m_lm_prefix;
}
void OAILearningServingLlmMessageMetadata::setLmPrefix(const QString &lm_prefix) {
    m_lm_prefix = lm_prefix;
    m_lm_prefix_isSet = true;
}

bool OAILearningServingLlmMessageMetadata::is_lm_prefix_Set() const{
    return m_lm_prefix_isSet;
}

bool OAILearningServingLlmMessageMetadata::is_lm_prefix_Valid() const{
    return m_lm_prefix_isValid;
}

QString OAILearningServingLlmMessageMetadata::getOriginalText() const {
    return m_original_text;
}
void OAILearningServingLlmMessageMetadata::setOriginalText(const QString &original_text) {
    m_original_text = original_text;
    m_original_text_isSet = true;
}

bool OAILearningServingLlmMessageMetadata::is_original_text_Set() const{
    return m_original_text_isSet;
}

bool OAILearningServingLlmMessageMetadata::is_original_text_Valid() const{
    return m_original_text_isValid;
}

qint32 OAILearningServingLlmMessageMetadata::getPerStreamDecodedTokenCount() const {
    return m_per_stream_decoded_token_count;
}
void OAILearningServingLlmMessageMetadata::setPerStreamDecodedTokenCount(const qint32 &per_stream_decoded_token_count) {
    m_per_stream_decoded_token_count = per_stream_decoded_token_count;
    m_per_stream_decoded_token_count_isSet = true;
}

bool OAILearningServingLlmMessageMetadata::is_per_stream_decoded_token_count_Set() const{
    return m_per_stream_decoded_token_count_isSet;
}

bool OAILearningServingLlmMessageMetadata::is_per_stream_decoded_token_count_Valid() const{
    return m_per_stream_decoded_token_count_isValid;
}

QList<OAILearningGenaiRootRAIOutput> OAILearningServingLlmMessageMetadata::getRaiOutputs() const {
    return m_rai_outputs;
}
void OAILearningServingLlmMessageMetadata::setRaiOutputs(const QList<OAILearningGenaiRootRAIOutput> &rai_outputs) {
    m_rai_outputs = rai_outputs;
    m_rai_outputs_isSet = true;
}

bool OAILearningServingLlmMessageMetadata::is_rai_outputs_Set() const{
    return m_rai_outputs_isSet;
}

bool OAILearningServingLlmMessageMetadata::is_rai_outputs_Valid() const{
    return m_rai_outputs_isValid;
}

OAILearningGenaiRecitationRecitationResult OAILearningServingLlmMessageMetadata::getRecitationResult() const {
    return m_recitation_result;
}
void OAILearningServingLlmMessageMetadata::setRecitationResult(const OAILearningGenaiRecitationRecitationResult &recitation_result) {
    m_recitation_result = recitation_result;
    m_recitation_result_isSet = true;
}

bool OAILearningServingLlmMessageMetadata::is_recitation_result_Set() const{
    return m_recitation_result_isSet;
}

bool OAILearningServingLlmMessageMetadata::is_recitation_result_Valid() const{
    return m_recitation_result_isValid;
}

qint32 OAILearningServingLlmMessageMetadata::getReturnTokenCount() const {
    return m_return_token_count;
}
void OAILearningServingLlmMessageMetadata::setReturnTokenCount(const qint32 &return_token_count) {
    m_return_token_count = return_token_count;
    m_return_token_count_isSet = true;
}

bool OAILearningServingLlmMessageMetadata::is_return_token_count_Set() const{
    return m_return_token_count_isSet;
}

bool OAILearningServingLlmMessageMetadata::is_return_token_count_Valid() const{
    return m_return_token_count_isValid;
}

QList<OAILearningGenaiRootScore> OAILearningServingLlmMessageMetadata::getScores() const {
    return m_scores;
}
void OAILearningServingLlmMessageMetadata::setScores(const QList<OAILearningGenaiRootScore> &scores) {
    m_scores = scores;
    m_scores_isSet = true;
}

bool OAILearningServingLlmMessageMetadata::is_scores_Set() const{
    return m_scores_isSet;
}

bool OAILearningServingLlmMessageMetadata::is_scores_Valid() const{
    return m_scores_isValid;
}

bool OAILearningServingLlmMessageMetadata::isStreamTerminated() const {
    return m_stream_terminated;
}
void OAILearningServingLlmMessageMetadata::setStreamTerminated(const bool &stream_terminated) {
    m_stream_terminated = stream_terminated;
    m_stream_terminated_isSet = true;
}

bool OAILearningServingLlmMessageMetadata::is_stream_terminated_Set() const{
    return m_stream_terminated_isSet;
}

bool OAILearningServingLlmMessageMetadata::is_stream_terminated_Valid() const{
    return m_stream_terminated_isValid;
}

qint32 OAILearningServingLlmMessageMetadata::getTotalDecodedTokenCount() const {
    return m_total_decoded_token_count;
}
void OAILearningServingLlmMessageMetadata::setTotalDecodedTokenCount(const qint32 &total_decoded_token_count) {
    m_total_decoded_token_count = total_decoded_token_count;
    m_total_decoded_token_count_isSet = true;
}

bool OAILearningServingLlmMessageMetadata::is_total_decoded_token_count_Set() const{
    return m_total_decoded_token_count_isSet;
}

bool OAILearningServingLlmMessageMetadata::is_total_decoded_token_count_Valid() const{
    return m_total_decoded_token_count_isValid;
}

QList<QString> OAILearningServingLlmMessageMetadata::getTranslatedUserPrompts() const {
    return m_translated_user_prompts;
}
void OAILearningServingLlmMessageMetadata::setTranslatedUserPrompts(const QList<QString> &translated_user_prompts) {
    m_translated_user_prompts = translated_user_prompts;
    m_translated_user_prompts_isSet = true;
}

bool OAILearningServingLlmMessageMetadata::is_translated_user_prompts_Set() const{
    return m_translated_user_prompts_isSet;
}

bool OAILearningServingLlmMessageMetadata::is_translated_user_prompts_Valid() const{
    return m_translated_user_prompts_isValid;
}

OAICloudAiNlLlmProtoServiceRaiResult OAILearningServingLlmMessageMetadata::getVertexRaiResult() const {
    return m_vertex_rai_result;
}
void OAILearningServingLlmMessageMetadata::setVertexRaiResult(const OAICloudAiNlLlmProtoServiceRaiResult &vertex_rai_result) {
    m_vertex_rai_result = vertex_rai_result;
    m_vertex_rai_result_isSet = true;
}

bool OAILearningServingLlmMessageMetadata::is_vertex_rai_result_Set() const{
    return m_vertex_rai_result_isSet;
}

bool OAILearningServingLlmMessageMetadata::is_vertex_rai_result_Valid() const{
    return m_vertex_rai_result_isValid;
}

bool OAILearningServingLlmMessageMetadata::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_classifier_summary.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_codey_output.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_stream_text_length_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deleted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filter_meta.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_final_message_score.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_finish_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_grounding_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_fallback_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_langid_result.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lm_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_original_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_per_stream_decoded_token_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rai_outputs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_recitation_result.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_return_token_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scores.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_stream_terminated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_decoded_token_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_translated_user_prompts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_vertex_rai_result.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILearningServingLlmMessageMetadata::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
