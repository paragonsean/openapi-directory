/**
 * Vertex AI API
 * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudAiplatformV1SchemaImageSegmentationAnnotationMaskAnnotation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudAiplatformV1SchemaImageSegmentationAnnotationMaskAnnotation::OAIGoogleCloudAiplatformV1SchemaImageSegmentationAnnotationMaskAnnotation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudAiplatformV1SchemaImageSegmentationAnnotationMaskAnnotation::OAIGoogleCloudAiplatformV1SchemaImageSegmentationAnnotationMaskAnnotation() {
    this->initializeModel();
}

OAIGoogleCloudAiplatformV1SchemaImageSegmentationAnnotationMaskAnnotation::~OAIGoogleCloudAiplatformV1SchemaImageSegmentationAnnotationMaskAnnotation() {}

void OAIGoogleCloudAiplatformV1SchemaImageSegmentationAnnotationMaskAnnotation::initializeModel() {

    m_annotation_spec_colors_isSet = false;
    m_annotation_spec_colors_isValid = false;

    m_mask_gcs_uri_isSet = false;
    m_mask_gcs_uri_isValid = false;
}

void OAIGoogleCloudAiplatformV1SchemaImageSegmentationAnnotationMaskAnnotation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudAiplatformV1SchemaImageSegmentationAnnotationMaskAnnotation::fromJsonObject(QJsonObject json) {

    m_annotation_spec_colors_isValid = ::OpenAPI::fromJsonValue(m_annotation_spec_colors, json[QString("annotationSpecColors")]);
    m_annotation_spec_colors_isSet = !json[QString("annotationSpecColors")].isNull() && m_annotation_spec_colors_isValid;

    m_mask_gcs_uri_isValid = ::OpenAPI::fromJsonValue(m_mask_gcs_uri, json[QString("maskGcsUri")]);
    m_mask_gcs_uri_isSet = !json[QString("maskGcsUri")].isNull() && m_mask_gcs_uri_isValid;
}

QString OAIGoogleCloudAiplatformV1SchemaImageSegmentationAnnotationMaskAnnotation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudAiplatformV1SchemaImageSegmentationAnnotationMaskAnnotation::asJsonObject() const {
    QJsonObject obj;
    if (m_annotation_spec_colors.size() > 0) {
        obj.insert(QString("annotationSpecColors"), ::OpenAPI::toJsonValue(m_annotation_spec_colors));
    }
    if (m_mask_gcs_uri_isSet) {
        obj.insert(QString("maskGcsUri"), ::OpenAPI::toJsonValue(m_mask_gcs_uri));
    }
    return obj;
}

QList<OAIGoogleCloudAiplatformV1SchemaAnnotationSpecColor> OAIGoogleCloudAiplatformV1SchemaImageSegmentationAnnotationMaskAnnotation::getAnnotationSpecColors() const {
    return m_annotation_spec_colors;
}
void OAIGoogleCloudAiplatformV1SchemaImageSegmentationAnnotationMaskAnnotation::setAnnotationSpecColors(const QList<OAIGoogleCloudAiplatformV1SchemaAnnotationSpecColor> &annotation_spec_colors) {
    m_annotation_spec_colors = annotation_spec_colors;
    m_annotation_spec_colors_isSet = true;
}

bool OAIGoogleCloudAiplatformV1SchemaImageSegmentationAnnotationMaskAnnotation::is_annotation_spec_colors_Set() const{
    return m_annotation_spec_colors_isSet;
}

bool OAIGoogleCloudAiplatformV1SchemaImageSegmentationAnnotationMaskAnnotation::is_annotation_spec_colors_Valid() const{
    return m_annotation_spec_colors_isValid;
}

QString OAIGoogleCloudAiplatformV1SchemaImageSegmentationAnnotationMaskAnnotation::getMaskGcsUri() const {
    return m_mask_gcs_uri;
}
void OAIGoogleCloudAiplatformV1SchemaImageSegmentationAnnotationMaskAnnotation::setMaskGcsUri(const QString &mask_gcs_uri) {
    m_mask_gcs_uri = mask_gcs_uri;
    m_mask_gcs_uri_isSet = true;
}

bool OAIGoogleCloudAiplatformV1SchemaImageSegmentationAnnotationMaskAnnotation::is_mask_gcs_uri_Set() const{
    return m_mask_gcs_uri_isSet;
}

bool OAIGoogleCloudAiplatformV1SchemaImageSegmentationAnnotationMaskAnnotation::is_mask_gcs_uri_Valid() const{
    return m_mask_gcs_uri_isValid;
}

bool OAIGoogleCloudAiplatformV1SchemaImageSegmentationAnnotationMaskAnnotation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_annotation_spec_colors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_mask_gcs_uri_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudAiplatformV1SchemaImageSegmentationAnnotationMaskAnnotation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
