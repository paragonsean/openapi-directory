/**
 * Vertex AI API
 * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICloudAiLargeModelsVisionFilteredText.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICloudAiLargeModelsVisionFilteredText::OAICloudAiLargeModelsVisionFilteredText(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICloudAiLargeModelsVisionFilteredText::OAICloudAiLargeModelsVisionFilteredText() {
    this->initializeModel();
}

OAICloudAiLargeModelsVisionFilteredText::~OAICloudAiLargeModelsVisionFilteredText() {}

void OAICloudAiLargeModelsVisionFilteredText::initializeModel() {

    m_category_isSet = false;
    m_category_isValid = false;

    m_confidence_isSet = false;
    m_confidence_isValid = false;

    m_prompt_isSet = false;
    m_prompt_isValid = false;

    m_score_isSet = false;
    m_score_isValid = false;
}

void OAICloudAiLargeModelsVisionFilteredText::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICloudAiLargeModelsVisionFilteredText::fromJsonObject(QJsonObject json) {

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("category")]);
    m_category_isSet = !json[QString("category")].isNull() && m_category_isValid;

    m_confidence_isValid = ::OpenAPI::fromJsonValue(m_confidence, json[QString("confidence")]);
    m_confidence_isSet = !json[QString("confidence")].isNull() && m_confidence_isValid;

    m_prompt_isValid = ::OpenAPI::fromJsonValue(m_prompt, json[QString("prompt")]);
    m_prompt_isSet = !json[QString("prompt")].isNull() && m_prompt_isValid;

    m_score_isValid = ::OpenAPI::fromJsonValue(m_score, json[QString("score")]);
    m_score_isSet = !json[QString("score")].isNull() && m_score_isValid;
}

QString OAICloudAiLargeModelsVisionFilteredText::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICloudAiLargeModelsVisionFilteredText::asJsonObject() const {
    QJsonObject obj;
    if (m_category_isSet) {
        obj.insert(QString("category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_confidence_isSet) {
        obj.insert(QString("confidence"), ::OpenAPI::toJsonValue(m_confidence));
    }
    if (m_prompt_isSet) {
        obj.insert(QString("prompt"), ::OpenAPI::toJsonValue(m_prompt));
    }
    if (m_score_isSet) {
        obj.insert(QString("score"), ::OpenAPI::toJsonValue(m_score));
    }
    return obj;
}

QString OAICloudAiLargeModelsVisionFilteredText::getCategory() const {
    return m_category;
}
void OAICloudAiLargeModelsVisionFilteredText::setCategory(const QString &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAICloudAiLargeModelsVisionFilteredText::is_category_Set() const{
    return m_category_isSet;
}

bool OAICloudAiLargeModelsVisionFilteredText::is_category_Valid() const{
    return m_category_isValid;
}

QString OAICloudAiLargeModelsVisionFilteredText::getConfidence() const {
    return m_confidence;
}
void OAICloudAiLargeModelsVisionFilteredText::setConfidence(const QString &confidence) {
    m_confidence = confidence;
    m_confidence_isSet = true;
}

bool OAICloudAiLargeModelsVisionFilteredText::is_confidence_Set() const{
    return m_confidence_isSet;
}

bool OAICloudAiLargeModelsVisionFilteredText::is_confidence_Valid() const{
    return m_confidence_isValid;
}

QString OAICloudAiLargeModelsVisionFilteredText::getPrompt() const {
    return m_prompt;
}
void OAICloudAiLargeModelsVisionFilteredText::setPrompt(const QString &prompt) {
    m_prompt = prompt;
    m_prompt_isSet = true;
}

bool OAICloudAiLargeModelsVisionFilteredText::is_prompt_Set() const{
    return m_prompt_isSet;
}

bool OAICloudAiLargeModelsVisionFilteredText::is_prompt_Valid() const{
    return m_prompt_isValid;
}

double OAICloudAiLargeModelsVisionFilteredText::getScore() const {
    return m_score;
}
void OAICloudAiLargeModelsVisionFilteredText::setScore(const double &score) {
    m_score = score;
    m_score_isSet = true;
}

bool OAICloudAiLargeModelsVisionFilteredText::is_score_Set() const{
    return m_score_isSet;
}

bool OAICloudAiLargeModelsVisionFilteredText::is_score_Valid() const{
    return m_score_isValid;
}

bool OAICloudAiLargeModelsVisionFilteredText::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_confidence_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_prompt_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_score_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICloudAiLargeModelsVisionFilteredText::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
