/**
 * Vertex AI API
 * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudAiplatformV1Scheduling.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudAiplatformV1Scheduling::OAIGoogleCloudAiplatformV1Scheduling(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudAiplatformV1Scheduling::OAIGoogleCloudAiplatformV1Scheduling() {
    this->initializeModel();
}

OAIGoogleCloudAiplatformV1Scheduling::~OAIGoogleCloudAiplatformV1Scheduling() {}

void OAIGoogleCloudAiplatformV1Scheduling::initializeModel() {

    m_disable_retries_isSet = false;
    m_disable_retries_isValid = false;

    m_restart_job_on_worker_restart_isSet = false;
    m_restart_job_on_worker_restart_isValid = false;

    m_timeout_isSet = false;
    m_timeout_isValid = false;
}

void OAIGoogleCloudAiplatformV1Scheduling::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudAiplatformV1Scheduling::fromJsonObject(QJsonObject json) {

    m_disable_retries_isValid = ::OpenAPI::fromJsonValue(m_disable_retries, json[QString("disableRetries")]);
    m_disable_retries_isSet = !json[QString("disableRetries")].isNull() && m_disable_retries_isValid;

    m_restart_job_on_worker_restart_isValid = ::OpenAPI::fromJsonValue(m_restart_job_on_worker_restart, json[QString("restartJobOnWorkerRestart")]);
    m_restart_job_on_worker_restart_isSet = !json[QString("restartJobOnWorkerRestart")].isNull() && m_restart_job_on_worker_restart_isValid;

    m_timeout_isValid = ::OpenAPI::fromJsonValue(m_timeout, json[QString("timeout")]);
    m_timeout_isSet = !json[QString("timeout")].isNull() && m_timeout_isValid;
}

QString OAIGoogleCloudAiplatformV1Scheduling::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudAiplatformV1Scheduling::asJsonObject() const {
    QJsonObject obj;
    if (m_disable_retries_isSet) {
        obj.insert(QString("disableRetries"), ::OpenAPI::toJsonValue(m_disable_retries));
    }
    if (m_restart_job_on_worker_restart_isSet) {
        obj.insert(QString("restartJobOnWorkerRestart"), ::OpenAPI::toJsonValue(m_restart_job_on_worker_restart));
    }
    if (m_timeout_isSet) {
        obj.insert(QString("timeout"), ::OpenAPI::toJsonValue(m_timeout));
    }
    return obj;
}

bool OAIGoogleCloudAiplatformV1Scheduling::isDisableRetries() const {
    return m_disable_retries;
}
void OAIGoogleCloudAiplatformV1Scheduling::setDisableRetries(const bool &disable_retries) {
    m_disable_retries = disable_retries;
    m_disable_retries_isSet = true;
}

bool OAIGoogleCloudAiplatformV1Scheduling::is_disable_retries_Set() const{
    return m_disable_retries_isSet;
}

bool OAIGoogleCloudAiplatformV1Scheduling::is_disable_retries_Valid() const{
    return m_disable_retries_isValid;
}

bool OAIGoogleCloudAiplatformV1Scheduling::isRestartJobOnWorkerRestart() const {
    return m_restart_job_on_worker_restart;
}
void OAIGoogleCloudAiplatformV1Scheduling::setRestartJobOnWorkerRestart(const bool &restart_job_on_worker_restart) {
    m_restart_job_on_worker_restart = restart_job_on_worker_restart;
    m_restart_job_on_worker_restart_isSet = true;
}

bool OAIGoogleCloudAiplatformV1Scheduling::is_restart_job_on_worker_restart_Set() const{
    return m_restart_job_on_worker_restart_isSet;
}

bool OAIGoogleCloudAiplatformV1Scheduling::is_restart_job_on_worker_restart_Valid() const{
    return m_restart_job_on_worker_restart_isValid;
}

QString OAIGoogleCloudAiplatformV1Scheduling::getTimeout() const {
    return m_timeout;
}
void OAIGoogleCloudAiplatformV1Scheduling::setTimeout(const QString &timeout) {
    m_timeout = timeout;
    m_timeout_isSet = true;
}

bool OAIGoogleCloudAiplatformV1Scheduling::is_timeout_Set() const{
    return m_timeout_isSet;
}

bool OAIGoogleCloudAiplatformV1Scheduling::is_timeout_Valid() const{
    return m_timeout_isValid;
}

bool OAIGoogleCloudAiplatformV1Scheduling::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_disable_retries_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_restart_job_on_worker_restart_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timeout_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudAiplatformV1Scheduling::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
