/**
 * Vertex AI API
 * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudAiplatformV1ExamplesOverride.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudAiplatformV1ExamplesOverride::OAIGoogleCloudAiplatformV1ExamplesOverride(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudAiplatformV1ExamplesOverride::OAIGoogleCloudAiplatformV1ExamplesOverride() {
    this->initializeModel();
}

OAIGoogleCloudAiplatformV1ExamplesOverride::~OAIGoogleCloudAiplatformV1ExamplesOverride() {}

void OAIGoogleCloudAiplatformV1ExamplesOverride::initializeModel() {

    m_crowding_count_isSet = false;
    m_crowding_count_isValid = false;

    m_data_format_isSet = false;
    m_data_format_isValid = false;

    m_neighbor_count_isSet = false;
    m_neighbor_count_isValid = false;

    m_restrictions_isSet = false;
    m_restrictions_isValid = false;

    m_return_embeddings_isSet = false;
    m_return_embeddings_isValid = false;
}

void OAIGoogleCloudAiplatformV1ExamplesOverride::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudAiplatformV1ExamplesOverride::fromJsonObject(QJsonObject json) {

    m_crowding_count_isValid = ::OpenAPI::fromJsonValue(m_crowding_count, json[QString("crowdingCount")]);
    m_crowding_count_isSet = !json[QString("crowdingCount")].isNull() && m_crowding_count_isValid;

    m_data_format_isValid = ::OpenAPI::fromJsonValue(m_data_format, json[QString("dataFormat")]);
    m_data_format_isSet = !json[QString("dataFormat")].isNull() && m_data_format_isValid;

    m_neighbor_count_isValid = ::OpenAPI::fromJsonValue(m_neighbor_count, json[QString("neighborCount")]);
    m_neighbor_count_isSet = !json[QString("neighborCount")].isNull() && m_neighbor_count_isValid;

    m_restrictions_isValid = ::OpenAPI::fromJsonValue(m_restrictions, json[QString("restrictions")]);
    m_restrictions_isSet = !json[QString("restrictions")].isNull() && m_restrictions_isValid;

    m_return_embeddings_isValid = ::OpenAPI::fromJsonValue(m_return_embeddings, json[QString("returnEmbeddings")]);
    m_return_embeddings_isSet = !json[QString("returnEmbeddings")].isNull() && m_return_embeddings_isValid;
}

QString OAIGoogleCloudAiplatformV1ExamplesOverride::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudAiplatformV1ExamplesOverride::asJsonObject() const {
    QJsonObject obj;
    if (m_crowding_count_isSet) {
        obj.insert(QString("crowdingCount"), ::OpenAPI::toJsonValue(m_crowding_count));
    }
    if (m_data_format_isSet) {
        obj.insert(QString("dataFormat"), ::OpenAPI::toJsonValue(m_data_format));
    }
    if (m_neighbor_count_isSet) {
        obj.insert(QString("neighborCount"), ::OpenAPI::toJsonValue(m_neighbor_count));
    }
    if (m_restrictions.size() > 0) {
        obj.insert(QString("restrictions"), ::OpenAPI::toJsonValue(m_restrictions));
    }
    if (m_return_embeddings_isSet) {
        obj.insert(QString("returnEmbeddings"), ::OpenAPI::toJsonValue(m_return_embeddings));
    }
    return obj;
}

qint32 OAIGoogleCloudAiplatformV1ExamplesOverride::getCrowdingCount() const {
    return m_crowding_count;
}
void OAIGoogleCloudAiplatformV1ExamplesOverride::setCrowdingCount(const qint32 &crowding_count) {
    m_crowding_count = crowding_count;
    m_crowding_count_isSet = true;
}

bool OAIGoogleCloudAiplatformV1ExamplesOverride::is_crowding_count_Set() const{
    return m_crowding_count_isSet;
}

bool OAIGoogleCloudAiplatformV1ExamplesOverride::is_crowding_count_Valid() const{
    return m_crowding_count_isValid;
}

QString OAIGoogleCloudAiplatformV1ExamplesOverride::getDataFormat() const {
    return m_data_format;
}
void OAIGoogleCloudAiplatformV1ExamplesOverride::setDataFormat(const QString &data_format) {
    m_data_format = data_format;
    m_data_format_isSet = true;
}

bool OAIGoogleCloudAiplatformV1ExamplesOverride::is_data_format_Set() const{
    return m_data_format_isSet;
}

bool OAIGoogleCloudAiplatformV1ExamplesOverride::is_data_format_Valid() const{
    return m_data_format_isValid;
}

qint32 OAIGoogleCloudAiplatformV1ExamplesOverride::getNeighborCount() const {
    return m_neighbor_count;
}
void OAIGoogleCloudAiplatformV1ExamplesOverride::setNeighborCount(const qint32 &neighbor_count) {
    m_neighbor_count = neighbor_count;
    m_neighbor_count_isSet = true;
}

bool OAIGoogleCloudAiplatformV1ExamplesOverride::is_neighbor_count_Set() const{
    return m_neighbor_count_isSet;
}

bool OAIGoogleCloudAiplatformV1ExamplesOverride::is_neighbor_count_Valid() const{
    return m_neighbor_count_isValid;
}

QList<OAIGoogleCloudAiplatformV1ExamplesRestrictionsNamespace> OAIGoogleCloudAiplatformV1ExamplesOverride::getRestrictions() const {
    return m_restrictions;
}
void OAIGoogleCloudAiplatformV1ExamplesOverride::setRestrictions(const QList<OAIGoogleCloudAiplatformV1ExamplesRestrictionsNamespace> &restrictions) {
    m_restrictions = restrictions;
    m_restrictions_isSet = true;
}

bool OAIGoogleCloudAiplatformV1ExamplesOverride::is_restrictions_Set() const{
    return m_restrictions_isSet;
}

bool OAIGoogleCloudAiplatformV1ExamplesOverride::is_restrictions_Valid() const{
    return m_restrictions_isValid;
}

bool OAIGoogleCloudAiplatformV1ExamplesOverride::isReturnEmbeddings() const {
    return m_return_embeddings;
}
void OAIGoogleCloudAiplatformV1ExamplesOverride::setReturnEmbeddings(const bool &return_embeddings) {
    m_return_embeddings = return_embeddings;
    m_return_embeddings_isSet = true;
}

bool OAIGoogleCloudAiplatformV1ExamplesOverride::is_return_embeddings_Set() const{
    return m_return_embeddings_isSet;
}

bool OAIGoogleCloudAiplatformV1ExamplesOverride::is_return_embeddings_Valid() const{
    return m_return_embeddings_isValid;
}

bool OAIGoogleCloudAiplatformV1ExamplesOverride::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_crowding_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_neighbor_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_restrictions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_return_embeddings_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudAiplatformV1ExamplesOverride::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
