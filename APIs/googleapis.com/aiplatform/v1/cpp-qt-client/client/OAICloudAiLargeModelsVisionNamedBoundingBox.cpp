/**
 * Vertex AI API
 * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICloudAiLargeModelsVisionNamedBoundingBox.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICloudAiLargeModelsVisionNamedBoundingBox::OAICloudAiLargeModelsVisionNamedBoundingBox(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICloudAiLargeModelsVisionNamedBoundingBox::OAICloudAiLargeModelsVisionNamedBoundingBox() {
    this->initializeModel();
}

OAICloudAiLargeModelsVisionNamedBoundingBox::~OAICloudAiLargeModelsVisionNamedBoundingBox() {}

void OAICloudAiLargeModelsVisionNamedBoundingBox::initializeModel() {

    m_classes_isSet = false;
    m_classes_isValid = false;

    m_entities_isSet = false;
    m_entities_isValid = false;

    m_scores_isSet = false;
    m_scores_isValid = false;

    m_x1_isSet = false;
    m_x1_isValid = false;

    m_x2_isSet = false;
    m_x2_isValid = false;

    m_y1_isSet = false;
    m_y1_isValid = false;

    m_y2_isSet = false;
    m_y2_isValid = false;
}

void OAICloudAiLargeModelsVisionNamedBoundingBox::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICloudAiLargeModelsVisionNamedBoundingBox::fromJsonObject(QJsonObject json) {

    m_classes_isValid = ::OpenAPI::fromJsonValue(m_classes, json[QString("classes")]);
    m_classes_isSet = !json[QString("classes")].isNull() && m_classes_isValid;

    m_entities_isValid = ::OpenAPI::fromJsonValue(m_entities, json[QString("entities")]);
    m_entities_isSet = !json[QString("entities")].isNull() && m_entities_isValid;

    m_scores_isValid = ::OpenAPI::fromJsonValue(m_scores, json[QString("scores")]);
    m_scores_isSet = !json[QString("scores")].isNull() && m_scores_isValid;

    m_x1_isValid = ::OpenAPI::fromJsonValue(m_x1, json[QString("x1")]);
    m_x1_isSet = !json[QString("x1")].isNull() && m_x1_isValid;

    m_x2_isValid = ::OpenAPI::fromJsonValue(m_x2, json[QString("x2")]);
    m_x2_isSet = !json[QString("x2")].isNull() && m_x2_isValid;

    m_y1_isValid = ::OpenAPI::fromJsonValue(m_y1, json[QString("y1")]);
    m_y1_isSet = !json[QString("y1")].isNull() && m_y1_isValid;

    m_y2_isValid = ::OpenAPI::fromJsonValue(m_y2, json[QString("y2")]);
    m_y2_isSet = !json[QString("y2")].isNull() && m_y2_isValid;
}

QString OAICloudAiLargeModelsVisionNamedBoundingBox::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICloudAiLargeModelsVisionNamedBoundingBox::asJsonObject() const {
    QJsonObject obj;
    if (m_classes.size() > 0) {
        obj.insert(QString("classes"), ::OpenAPI::toJsonValue(m_classes));
    }
    if (m_entities.size() > 0) {
        obj.insert(QString("entities"), ::OpenAPI::toJsonValue(m_entities));
    }
    if (m_scores.size() > 0) {
        obj.insert(QString("scores"), ::OpenAPI::toJsonValue(m_scores));
    }
    if (m_x1_isSet) {
        obj.insert(QString("x1"), ::OpenAPI::toJsonValue(m_x1));
    }
    if (m_x2_isSet) {
        obj.insert(QString("x2"), ::OpenAPI::toJsonValue(m_x2));
    }
    if (m_y1_isSet) {
        obj.insert(QString("y1"), ::OpenAPI::toJsonValue(m_y1));
    }
    if (m_y2_isSet) {
        obj.insert(QString("y2"), ::OpenAPI::toJsonValue(m_y2));
    }
    return obj;
}

QList<QString> OAICloudAiLargeModelsVisionNamedBoundingBox::getClasses() const {
    return m_classes;
}
void OAICloudAiLargeModelsVisionNamedBoundingBox::setClasses(const QList<QString> &classes) {
    m_classes = classes;
    m_classes_isSet = true;
}

bool OAICloudAiLargeModelsVisionNamedBoundingBox::is_classes_Set() const{
    return m_classes_isSet;
}

bool OAICloudAiLargeModelsVisionNamedBoundingBox::is_classes_Valid() const{
    return m_classes_isValid;
}

QList<QString> OAICloudAiLargeModelsVisionNamedBoundingBox::getEntities() const {
    return m_entities;
}
void OAICloudAiLargeModelsVisionNamedBoundingBox::setEntities(const QList<QString> &entities) {
    m_entities = entities;
    m_entities_isSet = true;
}

bool OAICloudAiLargeModelsVisionNamedBoundingBox::is_entities_Set() const{
    return m_entities_isSet;
}

bool OAICloudAiLargeModelsVisionNamedBoundingBox::is_entities_Valid() const{
    return m_entities_isValid;
}

QList<float> OAICloudAiLargeModelsVisionNamedBoundingBox::getScores() const {
    return m_scores;
}
void OAICloudAiLargeModelsVisionNamedBoundingBox::setScores(const QList<float> &scores) {
    m_scores = scores;
    m_scores_isSet = true;
}

bool OAICloudAiLargeModelsVisionNamedBoundingBox::is_scores_Set() const{
    return m_scores_isSet;
}

bool OAICloudAiLargeModelsVisionNamedBoundingBox::is_scores_Valid() const{
    return m_scores_isValid;
}

float OAICloudAiLargeModelsVisionNamedBoundingBox::getX1() const {
    return m_x1;
}
void OAICloudAiLargeModelsVisionNamedBoundingBox::setX1(const float &x1) {
    m_x1 = x1;
    m_x1_isSet = true;
}

bool OAICloudAiLargeModelsVisionNamedBoundingBox::is_x1_Set() const{
    return m_x1_isSet;
}

bool OAICloudAiLargeModelsVisionNamedBoundingBox::is_x1_Valid() const{
    return m_x1_isValid;
}

float OAICloudAiLargeModelsVisionNamedBoundingBox::getX2() const {
    return m_x2;
}
void OAICloudAiLargeModelsVisionNamedBoundingBox::setX2(const float &x2) {
    m_x2 = x2;
    m_x2_isSet = true;
}

bool OAICloudAiLargeModelsVisionNamedBoundingBox::is_x2_Set() const{
    return m_x2_isSet;
}

bool OAICloudAiLargeModelsVisionNamedBoundingBox::is_x2_Valid() const{
    return m_x2_isValid;
}

float OAICloudAiLargeModelsVisionNamedBoundingBox::getY1() const {
    return m_y1;
}
void OAICloudAiLargeModelsVisionNamedBoundingBox::setY1(const float &y1) {
    m_y1 = y1;
    m_y1_isSet = true;
}

bool OAICloudAiLargeModelsVisionNamedBoundingBox::is_y1_Set() const{
    return m_y1_isSet;
}

bool OAICloudAiLargeModelsVisionNamedBoundingBox::is_y1_Valid() const{
    return m_y1_isValid;
}

float OAICloudAiLargeModelsVisionNamedBoundingBox::getY2() const {
    return m_y2;
}
void OAICloudAiLargeModelsVisionNamedBoundingBox::setY2(const float &y2) {
    m_y2 = y2;
    m_y2_isSet = true;
}

bool OAICloudAiLargeModelsVisionNamedBoundingBox::is_y2_Set() const{
    return m_y2_isSet;
}

bool OAICloudAiLargeModelsVisionNamedBoundingBox::is_y2_Valid() const{
    return m_y2_isValid;
}

bool OAICloudAiLargeModelsVisionNamedBoundingBox::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_classes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_entities.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_scores.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_x1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_x2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_y1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_y2_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICloudAiLargeModelsVisionNamedBoundingBox::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
