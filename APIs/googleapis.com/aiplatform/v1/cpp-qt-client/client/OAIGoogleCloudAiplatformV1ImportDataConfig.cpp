/**
 * Vertex AI API
 * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudAiplatformV1ImportDataConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudAiplatformV1ImportDataConfig::OAIGoogleCloudAiplatformV1ImportDataConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudAiplatformV1ImportDataConfig::OAIGoogleCloudAiplatformV1ImportDataConfig() {
    this->initializeModel();
}

OAIGoogleCloudAiplatformV1ImportDataConfig::~OAIGoogleCloudAiplatformV1ImportDataConfig() {}

void OAIGoogleCloudAiplatformV1ImportDataConfig::initializeModel() {

    m_annotation_labels_isSet = false;
    m_annotation_labels_isValid = false;

    m_data_item_labels_isSet = false;
    m_data_item_labels_isValid = false;

    m_gcs_source_isSet = false;
    m_gcs_source_isValid = false;

    m_import_schema_uri_isSet = false;
    m_import_schema_uri_isValid = false;
}

void OAIGoogleCloudAiplatformV1ImportDataConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudAiplatformV1ImportDataConfig::fromJsonObject(QJsonObject json) {

    m_annotation_labels_isValid = ::OpenAPI::fromJsonValue(m_annotation_labels, json[QString("annotationLabels")]);
    m_annotation_labels_isSet = !json[QString("annotationLabels")].isNull() && m_annotation_labels_isValid;

    m_data_item_labels_isValid = ::OpenAPI::fromJsonValue(m_data_item_labels, json[QString("dataItemLabels")]);
    m_data_item_labels_isSet = !json[QString("dataItemLabels")].isNull() && m_data_item_labels_isValid;

    m_gcs_source_isValid = ::OpenAPI::fromJsonValue(m_gcs_source, json[QString("gcsSource")]);
    m_gcs_source_isSet = !json[QString("gcsSource")].isNull() && m_gcs_source_isValid;

    m_import_schema_uri_isValid = ::OpenAPI::fromJsonValue(m_import_schema_uri, json[QString("importSchemaUri")]);
    m_import_schema_uri_isSet = !json[QString("importSchemaUri")].isNull() && m_import_schema_uri_isValid;
}

QString OAIGoogleCloudAiplatformV1ImportDataConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudAiplatformV1ImportDataConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_annotation_labels.size() > 0) {
        obj.insert(QString("annotationLabels"), ::OpenAPI::toJsonValue(m_annotation_labels));
    }
    if (m_data_item_labels.size() > 0) {
        obj.insert(QString("dataItemLabels"), ::OpenAPI::toJsonValue(m_data_item_labels));
    }
    if (m_gcs_source.isSet()) {
        obj.insert(QString("gcsSource"), ::OpenAPI::toJsonValue(m_gcs_source));
    }
    if (m_import_schema_uri_isSet) {
        obj.insert(QString("importSchemaUri"), ::OpenAPI::toJsonValue(m_import_schema_uri));
    }
    return obj;
}

QMap<QString, QString> OAIGoogleCloudAiplatformV1ImportDataConfig::getAnnotationLabels() const {
    return m_annotation_labels;
}
void OAIGoogleCloudAiplatformV1ImportDataConfig::setAnnotationLabels(const QMap<QString, QString> &annotation_labels) {
    m_annotation_labels = annotation_labels;
    m_annotation_labels_isSet = true;
}

bool OAIGoogleCloudAiplatformV1ImportDataConfig::is_annotation_labels_Set() const{
    return m_annotation_labels_isSet;
}

bool OAIGoogleCloudAiplatformV1ImportDataConfig::is_annotation_labels_Valid() const{
    return m_annotation_labels_isValid;
}

QMap<QString, QString> OAIGoogleCloudAiplatformV1ImportDataConfig::getDataItemLabels() const {
    return m_data_item_labels;
}
void OAIGoogleCloudAiplatformV1ImportDataConfig::setDataItemLabels(const QMap<QString, QString> &data_item_labels) {
    m_data_item_labels = data_item_labels;
    m_data_item_labels_isSet = true;
}

bool OAIGoogleCloudAiplatformV1ImportDataConfig::is_data_item_labels_Set() const{
    return m_data_item_labels_isSet;
}

bool OAIGoogleCloudAiplatformV1ImportDataConfig::is_data_item_labels_Valid() const{
    return m_data_item_labels_isValid;
}

OAIGoogleCloudAiplatformV1GcsSource OAIGoogleCloudAiplatformV1ImportDataConfig::getGcsSource() const {
    return m_gcs_source;
}
void OAIGoogleCloudAiplatformV1ImportDataConfig::setGcsSource(const OAIGoogleCloudAiplatformV1GcsSource &gcs_source) {
    m_gcs_source = gcs_source;
    m_gcs_source_isSet = true;
}

bool OAIGoogleCloudAiplatformV1ImportDataConfig::is_gcs_source_Set() const{
    return m_gcs_source_isSet;
}

bool OAIGoogleCloudAiplatformV1ImportDataConfig::is_gcs_source_Valid() const{
    return m_gcs_source_isValid;
}

QString OAIGoogleCloudAiplatformV1ImportDataConfig::getImportSchemaUri() const {
    return m_import_schema_uri;
}
void OAIGoogleCloudAiplatformV1ImportDataConfig::setImportSchemaUri(const QString &import_schema_uri) {
    m_import_schema_uri = import_schema_uri;
    m_import_schema_uri_isSet = true;
}

bool OAIGoogleCloudAiplatformV1ImportDataConfig::is_import_schema_uri_Set() const{
    return m_import_schema_uri_isSet;
}

bool OAIGoogleCloudAiplatformV1ImportDataConfig::is_import_schema_uri_Valid() const{
    return m_import_schema_uri_isValid;
}

bool OAIGoogleCloudAiplatformV1ImportDataConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_annotation_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_item_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_gcs_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_import_schema_uri_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudAiplatformV1ImportDataConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
