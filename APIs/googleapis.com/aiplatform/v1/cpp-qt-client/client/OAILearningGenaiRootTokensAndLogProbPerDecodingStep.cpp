/**
 * Vertex AI API
 * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILearningGenaiRootTokensAndLogProbPerDecodingStep.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILearningGenaiRootTokensAndLogProbPerDecodingStep::OAILearningGenaiRootTokensAndLogProbPerDecodingStep(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILearningGenaiRootTokensAndLogProbPerDecodingStep::OAILearningGenaiRootTokensAndLogProbPerDecodingStep() {
    this->initializeModel();
}

OAILearningGenaiRootTokensAndLogProbPerDecodingStep::~OAILearningGenaiRootTokensAndLogProbPerDecodingStep() {}

void OAILearningGenaiRootTokensAndLogProbPerDecodingStep::initializeModel() {

    m_chosen_candidates_isSet = false;
    m_chosen_candidates_isValid = false;

    m_top_candidates_isSet = false;
    m_top_candidates_isValid = false;
}

void OAILearningGenaiRootTokensAndLogProbPerDecodingStep::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILearningGenaiRootTokensAndLogProbPerDecodingStep::fromJsonObject(QJsonObject json) {

    m_chosen_candidates_isValid = ::OpenAPI::fromJsonValue(m_chosen_candidates, json[QString("chosenCandidates")]);
    m_chosen_candidates_isSet = !json[QString("chosenCandidates")].isNull() && m_chosen_candidates_isValid;

    m_top_candidates_isValid = ::OpenAPI::fromJsonValue(m_top_candidates, json[QString("topCandidates")]);
    m_top_candidates_isSet = !json[QString("topCandidates")].isNull() && m_top_candidates_isValid;
}

QString OAILearningGenaiRootTokensAndLogProbPerDecodingStep::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILearningGenaiRootTokensAndLogProbPerDecodingStep::asJsonObject() const {
    QJsonObject obj;
    if (m_chosen_candidates.size() > 0) {
        obj.insert(QString("chosenCandidates"), ::OpenAPI::toJsonValue(m_chosen_candidates));
    }
    if (m_top_candidates.size() > 0) {
        obj.insert(QString("topCandidates"), ::OpenAPI::toJsonValue(m_top_candidates));
    }
    return obj;
}

QList<OAILearningGenaiRootTokensAndLogProbPerDecodingStepCandidate> OAILearningGenaiRootTokensAndLogProbPerDecodingStep::getChosenCandidates() const {
    return m_chosen_candidates;
}
void OAILearningGenaiRootTokensAndLogProbPerDecodingStep::setChosenCandidates(const QList<OAILearningGenaiRootTokensAndLogProbPerDecodingStepCandidate> &chosen_candidates) {
    m_chosen_candidates = chosen_candidates;
    m_chosen_candidates_isSet = true;
}

bool OAILearningGenaiRootTokensAndLogProbPerDecodingStep::is_chosen_candidates_Set() const{
    return m_chosen_candidates_isSet;
}

bool OAILearningGenaiRootTokensAndLogProbPerDecodingStep::is_chosen_candidates_Valid() const{
    return m_chosen_candidates_isValid;
}

QList<OAILearningGenaiRootTokensAndLogProbPerDecodingStepTopCandidates> OAILearningGenaiRootTokensAndLogProbPerDecodingStep::getTopCandidates() const {
    return m_top_candidates;
}
void OAILearningGenaiRootTokensAndLogProbPerDecodingStep::setTopCandidates(const QList<OAILearningGenaiRootTokensAndLogProbPerDecodingStepTopCandidates> &top_candidates) {
    m_top_candidates = top_candidates;
    m_top_candidates_isSet = true;
}

bool OAILearningGenaiRootTokensAndLogProbPerDecodingStep::is_top_candidates_Set() const{
    return m_top_candidates_isSet;
}

bool OAILearningGenaiRootTokensAndLogProbPerDecodingStep::is_top_candidates_Valid() const{
    return m_top_candidates_isValid;
}

bool OAILearningGenaiRootTokensAndLogProbPerDecodingStep::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_chosen_candidates.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_top_candidates.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILearningGenaiRootTokensAndLogProbPerDecodingStep::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
