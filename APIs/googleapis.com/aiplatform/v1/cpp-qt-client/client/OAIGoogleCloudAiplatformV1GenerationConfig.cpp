/**
 * Vertex AI API
 * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudAiplatformV1GenerationConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudAiplatformV1GenerationConfig::OAIGoogleCloudAiplatformV1GenerationConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudAiplatformV1GenerationConfig::OAIGoogleCloudAiplatformV1GenerationConfig() {
    this->initializeModel();
}

OAIGoogleCloudAiplatformV1GenerationConfig::~OAIGoogleCloudAiplatformV1GenerationConfig() {}

void OAIGoogleCloudAiplatformV1GenerationConfig::initializeModel() {

    m_candidate_count_isSet = false;
    m_candidate_count_isValid = false;

    m_max_output_tokens_isSet = false;
    m_max_output_tokens_isValid = false;

    m_stop_sequences_isSet = false;
    m_stop_sequences_isValid = false;

    m_temperature_isSet = false;
    m_temperature_isValid = false;

    m_top_k_isSet = false;
    m_top_k_isValid = false;

    m_top_p_isSet = false;
    m_top_p_isValid = false;
}

void OAIGoogleCloudAiplatformV1GenerationConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudAiplatformV1GenerationConfig::fromJsonObject(QJsonObject json) {

    m_candidate_count_isValid = ::OpenAPI::fromJsonValue(m_candidate_count, json[QString("candidateCount")]);
    m_candidate_count_isSet = !json[QString("candidateCount")].isNull() && m_candidate_count_isValid;

    m_max_output_tokens_isValid = ::OpenAPI::fromJsonValue(m_max_output_tokens, json[QString("maxOutputTokens")]);
    m_max_output_tokens_isSet = !json[QString("maxOutputTokens")].isNull() && m_max_output_tokens_isValid;

    m_stop_sequences_isValid = ::OpenAPI::fromJsonValue(m_stop_sequences, json[QString("stopSequences")]);
    m_stop_sequences_isSet = !json[QString("stopSequences")].isNull() && m_stop_sequences_isValid;

    m_temperature_isValid = ::OpenAPI::fromJsonValue(m_temperature, json[QString("temperature")]);
    m_temperature_isSet = !json[QString("temperature")].isNull() && m_temperature_isValid;

    m_top_k_isValid = ::OpenAPI::fromJsonValue(m_top_k, json[QString("topK")]);
    m_top_k_isSet = !json[QString("topK")].isNull() && m_top_k_isValid;

    m_top_p_isValid = ::OpenAPI::fromJsonValue(m_top_p, json[QString("topP")]);
    m_top_p_isSet = !json[QString("topP")].isNull() && m_top_p_isValid;
}

QString OAIGoogleCloudAiplatformV1GenerationConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudAiplatformV1GenerationConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_candidate_count_isSet) {
        obj.insert(QString("candidateCount"), ::OpenAPI::toJsonValue(m_candidate_count));
    }
    if (m_max_output_tokens_isSet) {
        obj.insert(QString("maxOutputTokens"), ::OpenAPI::toJsonValue(m_max_output_tokens));
    }
    if (m_stop_sequences.size() > 0) {
        obj.insert(QString("stopSequences"), ::OpenAPI::toJsonValue(m_stop_sequences));
    }
    if (m_temperature_isSet) {
        obj.insert(QString("temperature"), ::OpenAPI::toJsonValue(m_temperature));
    }
    if (m_top_k_isSet) {
        obj.insert(QString("topK"), ::OpenAPI::toJsonValue(m_top_k));
    }
    if (m_top_p_isSet) {
        obj.insert(QString("topP"), ::OpenAPI::toJsonValue(m_top_p));
    }
    return obj;
}

qint32 OAIGoogleCloudAiplatformV1GenerationConfig::getCandidateCount() const {
    return m_candidate_count;
}
void OAIGoogleCloudAiplatformV1GenerationConfig::setCandidateCount(const qint32 &candidate_count) {
    m_candidate_count = candidate_count;
    m_candidate_count_isSet = true;
}

bool OAIGoogleCloudAiplatformV1GenerationConfig::is_candidate_count_Set() const{
    return m_candidate_count_isSet;
}

bool OAIGoogleCloudAiplatformV1GenerationConfig::is_candidate_count_Valid() const{
    return m_candidate_count_isValid;
}

qint32 OAIGoogleCloudAiplatformV1GenerationConfig::getMaxOutputTokens() const {
    return m_max_output_tokens;
}
void OAIGoogleCloudAiplatformV1GenerationConfig::setMaxOutputTokens(const qint32 &max_output_tokens) {
    m_max_output_tokens = max_output_tokens;
    m_max_output_tokens_isSet = true;
}

bool OAIGoogleCloudAiplatformV1GenerationConfig::is_max_output_tokens_Set() const{
    return m_max_output_tokens_isSet;
}

bool OAIGoogleCloudAiplatformV1GenerationConfig::is_max_output_tokens_Valid() const{
    return m_max_output_tokens_isValid;
}

QList<QString> OAIGoogleCloudAiplatformV1GenerationConfig::getStopSequences() const {
    return m_stop_sequences;
}
void OAIGoogleCloudAiplatformV1GenerationConfig::setStopSequences(const QList<QString> &stop_sequences) {
    m_stop_sequences = stop_sequences;
    m_stop_sequences_isSet = true;
}

bool OAIGoogleCloudAiplatformV1GenerationConfig::is_stop_sequences_Set() const{
    return m_stop_sequences_isSet;
}

bool OAIGoogleCloudAiplatformV1GenerationConfig::is_stop_sequences_Valid() const{
    return m_stop_sequences_isValid;
}

float OAIGoogleCloudAiplatformV1GenerationConfig::getTemperature() const {
    return m_temperature;
}
void OAIGoogleCloudAiplatformV1GenerationConfig::setTemperature(const float &temperature) {
    m_temperature = temperature;
    m_temperature_isSet = true;
}

bool OAIGoogleCloudAiplatformV1GenerationConfig::is_temperature_Set() const{
    return m_temperature_isSet;
}

bool OAIGoogleCloudAiplatformV1GenerationConfig::is_temperature_Valid() const{
    return m_temperature_isValid;
}

float OAIGoogleCloudAiplatformV1GenerationConfig::getTopK() const {
    return m_top_k;
}
void OAIGoogleCloudAiplatformV1GenerationConfig::setTopK(const float &top_k) {
    m_top_k = top_k;
    m_top_k_isSet = true;
}

bool OAIGoogleCloudAiplatformV1GenerationConfig::is_top_k_Set() const{
    return m_top_k_isSet;
}

bool OAIGoogleCloudAiplatformV1GenerationConfig::is_top_k_Valid() const{
    return m_top_k_isValid;
}

float OAIGoogleCloudAiplatformV1GenerationConfig::getTopP() const {
    return m_top_p;
}
void OAIGoogleCloudAiplatformV1GenerationConfig::setTopP(const float &top_p) {
    m_top_p = top_p;
    m_top_p_isSet = true;
}

bool OAIGoogleCloudAiplatformV1GenerationConfig::is_top_p_Set() const{
    return m_top_p_isSet;
}

bool OAIGoogleCloudAiplatformV1GenerationConfig::is_top_p_Valid() const{
    return m_top_p_isValid;
}

bool OAIGoogleCloudAiplatformV1GenerationConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_candidate_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_output_tokens_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stop_sequences.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_temperature_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_top_k_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_top_p_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudAiplatformV1GenerationConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
