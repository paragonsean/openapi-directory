/**
 * Vertex AI API
 * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICloudAiLargeModelsVisionSemanticFilterResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICloudAiLargeModelsVisionSemanticFilterResponse::OAICloudAiLargeModelsVisionSemanticFilterResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICloudAiLargeModelsVisionSemanticFilterResponse::OAICloudAiLargeModelsVisionSemanticFilterResponse() {
    this->initializeModel();
}

OAICloudAiLargeModelsVisionSemanticFilterResponse::~OAICloudAiLargeModelsVisionSemanticFilterResponse() {}

void OAICloudAiLargeModelsVisionSemanticFilterResponse::initializeModel() {

    m_named_bounding_boxes_isSet = false;
    m_named_bounding_boxes_isValid = false;

    m_passed_semantic_filter_isSet = false;
    m_passed_semantic_filter_isValid = false;
}

void OAICloudAiLargeModelsVisionSemanticFilterResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICloudAiLargeModelsVisionSemanticFilterResponse::fromJsonObject(QJsonObject json) {

    m_named_bounding_boxes_isValid = ::OpenAPI::fromJsonValue(m_named_bounding_boxes, json[QString("namedBoundingBoxes")]);
    m_named_bounding_boxes_isSet = !json[QString("namedBoundingBoxes")].isNull() && m_named_bounding_boxes_isValid;

    m_passed_semantic_filter_isValid = ::OpenAPI::fromJsonValue(m_passed_semantic_filter, json[QString("passedSemanticFilter")]);
    m_passed_semantic_filter_isSet = !json[QString("passedSemanticFilter")].isNull() && m_passed_semantic_filter_isValid;
}

QString OAICloudAiLargeModelsVisionSemanticFilterResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICloudAiLargeModelsVisionSemanticFilterResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_named_bounding_boxes.size() > 0) {
        obj.insert(QString("namedBoundingBoxes"), ::OpenAPI::toJsonValue(m_named_bounding_boxes));
    }
    if (m_passed_semantic_filter_isSet) {
        obj.insert(QString("passedSemanticFilter"), ::OpenAPI::toJsonValue(m_passed_semantic_filter));
    }
    return obj;
}

QList<OAICloudAiLargeModelsVisionNamedBoundingBox> OAICloudAiLargeModelsVisionSemanticFilterResponse::getNamedBoundingBoxes() const {
    return m_named_bounding_boxes;
}
void OAICloudAiLargeModelsVisionSemanticFilterResponse::setNamedBoundingBoxes(const QList<OAICloudAiLargeModelsVisionNamedBoundingBox> &named_bounding_boxes) {
    m_named_bounding_boxes = named_bounding_boxes;
    m_named_bounding_boxes_isSet = true;
}

bool OAICloudAiLargeModelsVisionSemanticFilterResponse::is_named_bounding_boxes_Set() const{
    return m_named_bounding_boxes_isSet;
}

bool OAICloudAiLargeModelsVisionSemanticFilterResponse::is_named_bounding_boxes_Valid() const{
    return m_named_bounding_boxes_isValid;
}

bool OAICloudAiLargeModelsVisionSemanticFilterResponse::isPassedSemanticFilter() const {
    return m_passed_semantic_filter;
}
void OAICloudAiLargeModelsVisionSemanticFilterResponse::setPassedSemanticFilter(const bool &passed_semantic_filter) {
    m_passed_semantic_filter = passed_semantic_filter;
    m_passed_semantic_filter_isSet = true;
}

bool OAICloudAiLargeModelsVisionSemanticFilterResponse::is_passed_semantic_filter_Set() const{
    return m_passed_semantic_filter_isSet;
}

bool OAICloudAiLargeModelsVisionSemanticFilterResponse::is_passed_semantic_filter_Valid() const{
    return m_passed_semantic_filter_isValid;
}

bool OAICloudAiLargeModelsVisionSemanticFilterResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_named_bounding_boxes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_passed_semantic_filter_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICloudAiLargeModelsVisionSemanticFilterResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
