/**
 * Vertex AI API
 * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGoogleApiHttpBody.h
 *
 * Message that represents an arbitrary HTTP body. It should only be used for payload formats that can&#39;t be represented as JSON, such as raw binary or an HTML page. This message can be used both in streaming and non-streaming API methods in the request as well as the response. It can be used as a top-level request field, which is convenient if one wants to extract parameters from either the URL or HTTP template into the request fields and also want access to the raw HTTP body. Example: message GetResourceRequest { // A unique request id. string request_id &#x3D; 1; // The raw HTTP body is bound to this field. google.api.HttpBody http_body &#x3D; 2; } service ResourceService { rpc GetResource(GetResourceRequest) returns (google.api.HttpBody); rpc UpdateResource(google.api.HttpBody) returns (google.protobuf.Empty); } Example with streaming methods: service CaldavService { rpc GetCalendar(stream google.api.HttpBody) returns (stream google.api.HttpBody); rpc UpdateCalendar(stream google.api.HttpBody) returns (stream google.api.HttpBody); } Use of this type only changes how the request and response bodies are handled, all other features will continue to work unchanged.
 */

#ifndef OAIGoogleApiHttpBody_H
#define OAIGoogleApiHttpBody_H

#include <QJsonObject>

#include <QByteArray>
#include <QJsonValue>
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIGoogleApiHttpBody : public OAIObject {
public:
    OAIGoogleApiHttpBody();
    OAIGoogleApiHttpBody(QString json);
    ~OAIGoogleApiHttpBody() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getContentType() const;
    void setContentType(const QString &content_type);
    bool is_content_type_Set() const;
    bool is_content_type_Valid() const;

    QByteArray getData() const;
    void setData(const QByteArray &data);
    bool is_data_Set() const;
    bool is_data_Valid() const;

    QList<QMap<QString, QJsonValue>> getExtensions() const;
    void setExtensions(const QList<QMap<QString, QJsonValue>> &extensions);
    bool is_extensions_Set() const;
    bool is_extensions_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_content_type;
    bool m_content_type_isSet;
    bool m_content_type_isValid;

    QByteArray m_data;
    bool m_data_isSet;
    bool m_data_isValid;

    QList<QMap<QString, QJsonValue>> m_extensions;
    bool m_extensions_isSet;
    bool m_extensions_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGoogleApiHttpBody)

#endif // OAIGoogleApiHttpBody_H
