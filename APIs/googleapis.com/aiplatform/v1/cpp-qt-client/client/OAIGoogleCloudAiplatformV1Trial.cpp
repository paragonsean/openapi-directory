/**
 * Vertex AI API
 * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudAiplatformV1Trial.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudAiplatformV1Trial::OAIGoogleCloudAiplatformV1Trial(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudAiplatformV1Trial::OAIGoogleCloudAiplatformV1Trial() {
    this->initializeModel();
}

OAIGoogleCloudAiplatformV1Trial::~OAIGoogleCloudAiplatformV1Trial() {}

void OAIGoogleCloudAiplatformV1Trial::initializeModel() {

    m_client_id_isSet = false;
    m_client_id_isValid = false;

    m_custom_job_isSet = false;
    m_custom_job_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_final_measurement_isSet = false;
    m_final_measurement_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_infeasible_reason_isSet = false;
    m_infeasible_reason_isValid = false;

    m_measurements_isSet = false;
    m_measurements_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_parameters_isSet = false;
    m_parameters_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_web_access_uris_isSet = false;
    m_web_access_uris_isValid = false;
}

void OAIGoogleCloudAiplatformV1Trial::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudAiplatformV1Trial::fromJsonObject(QJsonObject json) {

    m_client_id_isValid = ::OpenAPI::fromJsonValue(m_client_id, json[QString("clientId")]);
    m_client_id_isSet = !json[QString("clientId")].isNull() && m_client_id_isValid;

    m_custom_job_isValid = ::OpenAPI::fromJsonValue(m_custom_job, json[QString("customJob")]);
    m_custom_job_isSet = !json[QString("customJob")].isNull() && m_custom_job_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("endTime")]);
    m_end_time_isSet = !json[QString("endTime")].isNull() && m_end_time_isValid;

    m_final_measurement_isValid = ::OpenAPI::fromJsonValue(m_final_measurement, json[QString("finalMeasurement")]);
    m_final_measurement_isSet = !json[QString("finalMeasurement")].isNull() && m_final_measurement_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_infeasible_reason_isValid = ::OpenAPI::fromJsonValue(m_infeasible_reason, json[QString("infeasibleReason")]);
    m_infeasible_reason_isSet = !json[QString("infeasibleReason")].isNull() && m_infeasible_reason_isValid;

    m_measurements_isValid = ::OpenAPI::fromJsonValue(m_measurements, json[QString("measurements")]);
    m_measurements_isSet = !json[QString("measurements")].isNull() && m_measurements_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_parameters_isValid = ::OpenAPI::fromJsonValue(m_parameters, json[QString("parameters")]);
    m_parameters_isSet = !json[QString("parameters")].isNull() && m_parameters_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_web_access_uris_isValid = ::OpenAPI::fromJsonValue(m_web_access_uris, json[QString("webAccessUris")]);
    m_web_access_uris_isSet = !json[QString("webAccessUris")].isNull() && m_web_access_uris_isValid;
}

QString OAIGoogleCloudAiplatformV1Trial::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudAiplatformV1Trial::asJsonObject() const {
    QJsonObject obj;
    if (m_client_id_isSet) {
        obj.insert(QString("clientId"), ::OpenAPI::toJsonValue(m_client_id));
    }
    if (m_custom_job_isSet) {
        obj.insert(QString("customJob"), ::OpenAPI::toJsonValue(m_custom_job));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("endTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_final_measurement.isSet()) {
        obj.insert(QString("finalMeasurement"), ::OpenAPI::toJsonValue(m_final_measurement));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_infeasible_reason_isSet) {
        obj.insert(QString("infeasibleReason"), ::OpenAPI::toJsonValue(m_infeasible_reason));
    }
    if (m_measurements.size() > 0) {
        obj.insert(QString("measurements"), ::OpenAPI::toJsonValue(m_measurements));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_parameters.size() > 0) {
        obj.insert(QString("parameters"), ::OpenAPI::toJsonValue(m_parameters));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_web_access_uris.size() > 0) {
        obj.insert(QString("webAccessUris"), ::OpenAPI::toJsonValue(m_web_access_uris));
    }
    return obj;
}

QString OAIGoogleCloudAiplatformV1Trial::getClientId() const {
    return m_client_id;
}
void OAIGoogleCloudAiplatformV1Trial::setClientId(const QString &client_id) {
    m_client_id = client_id;
    m_client_id_isSet = true;
}

bool OAIGoogleCloudAiplatformV1Trial::is_client_id_Set() const{
    return m_client_id_isSet;
}

bool OAIGoogleCloudAiplatformV1Trial::is_client_id_Valid() const{
    return m_client_id_isValid;
}

QString OAIGoogleCloudAiplatformV1Trial::getCustomJob() const {
    return m_custom_job;
}
void OAIGoogleCloudAiplatformV1Trial::setCustomJob(const QString &custom_job) {
    m_custom_job = custom_job;
    m_custom_job_isSet = true;
}

bool OAIGoogleCloudAiplatformV1Trial::is_custom_job_Set() const{
    return m_custom_job_isSet;
}

bool OAIGoogleCloudAiplatformV1Trial::is_custom_job_Valid() const{
    return m_custom_job_isValid;
}

QString OAIGoogleCloudAiplatformV1Trial::getEndTime() const {
    return m_end_time;
}
void OAIGoogleCloudAiplatformV1Trial::setEndTime(const QString &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIGoogleCloudAiplatformV1Trial::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIGoogleCloudAiplatformV1Trial::is_end_time_Valid() const{
    return m_end_time_isValid;
}

OAIGoogleCloudAiplatformV1Measurement OAIGoogleCloudAiplatformV1Trial::getFinalMeasurement() const {
    return m_final_measurement;
}
void OAIGoogleCloudAiplatformV1Trial::setFinalMeasurement(const OAIGoogleCloudAiplatformV1Measurement &final_measurement) {
    m_final_measurement = final_measurement;
    m_final_measurement_isSet = true;
}

bool OAIGoogleCloudAiplatformV1Trial::is_final_measurement_Set() const{
    return m_final_measurement_isSet;
}

bool OAIGoogleCloudAiplatformV1Trial::is_final_measurement_Valid() const{
    return m_final_measurement_isValid;
}

QString OAIGoogleCloudAiplatformV1Trial::getId() const {
    return m_id;
}
void OAIGoogleCloudAiplatformV1Trial::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIGoogleCloudAiplatformV1Trial::is_id_Set() const{
    return m_id_isSet;
}

bool OAIGoogleCloudAiplatformV1Trial::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIGoogleCloudAiplatformV1Trial::getInfeasibleReason() const {
    return m_infeasible_reason;
}
void OAIGoogleCloudAiplatformV1Trial::setInfeasibleReason(const QString &infeasible_reason) {
    m_infeasible_reason = infeasible_reason;
    m_infeasible_reason_isSet = true;
}

bool OAIGoogleCloudAiplatformV1Trial::is_infeasible_reason_Set() const{
    return m_infeasible_reason_isSet;
}

bool OAIGoogleCloudAiplatformV1Trial::is_infeasible_reason_Valid() const{
    return m_infeasible_reason_isValid;
}

QList<OAIGoogleCloudAiplatformV1Measurement> OAIGoogleCloudAiplatformV1Trial::getMeasurements() const {
    return m_measurements;
}
void OAIGoogleCloudAiplatformV1Trial::setMeasurements(const QList<OAIGoogleCloudAiplatformV1Measurement> &measurements) {
    m_measurements = measurements;
    m_measurements_isSet = true;
}

bool OAIGoogleCloudAiplatformV1Trial::is_measurements_Set() const{
    return m_measurements_isSet;
}

bool OAIGoogleCloudAiplatformV1Trial::is_measurements_Valid() const{
    return m_measurements_isValid;
}

QString OAIGoogleCloudAiplatformV1Trial::getName() const {
    return m_name;
}
void OAIGoogleCloudAiplatformV1Trial::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGoogleCloudAiplatformV1Trial::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGoogleCloudAiplatformV1Trial::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAIGoogleCloudAiplatformV1TrialParameter> OAIGoogleCloudAiplatformV1Trial::getParameters() const {
    return m_parameters;
}
void OAIGoogleCloudAiplatformV1Trial::setParameters(const QList<OAIGoogleCloudAiplatformV1TrialParameter> &parameters) {
    m_parameters = parameters;
    m_parameters_isSet = true;
}

bool OAIGoogleCloudAiplatformV1Trial::is_parameters_Set() const{
    return m_parameters_isSet;
}

bool OAIGoogleCloudAiplatformV1Trial::is_parameters_Valid() const{
    return m_parameters_isValid;
}

QString OAIGoogleCloudAiplatformV1Trial::getStartTime() const {
    return m_start_time;
}
void OAIGoogleCloudAiplatformV1Trial::setStartTime(const QString &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIGoogleCloudAiplatformV1Trial::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIGoogleCloudAiplatformV1Trial::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QString OAIGoogleCloudAiplatformV1Trial::getState() const {
    return m_state;
}
void OAIGoogleCloudAiplatformV1Trial::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIGoogleCloudAiplatformV1Trial::is_state_Set() const{
    return m_state_isSet;
}

bool OAIGoogleCloudAiplatformV1Trial::is_state_Valid() const{
    return m_state_isValid;
}

QMap<QString, QString> OAIGoogleCloudAiplatformV1Trial::getWebAccessUris() const {
    return m_web_access_uris;
}
void OAIGoogleCloudAiplatformV1Trial::setWebAccessUris(const QMap<QString, QString> &web_access_uris) {
    m_web_access_uris = web_access_uris;
    m_web_access_uris_isSet = true;
}

bool OAIGoogleCloudAiplatformV1Trial::is_web_access_uris_Set() const{
    return m_web_access_uris_isSet;
}

bool OAIGoogleCloudAiplatformV1Trial::is_web_access_uris_Valid() const{
    return m_web_access_uris_isValid;
}

bool OAIGoogleCloudAiplatformV1Trial::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_job_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_final_measurement.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_infeasible_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_measurements.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_access_uris.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudAiplatformV1Trial::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
