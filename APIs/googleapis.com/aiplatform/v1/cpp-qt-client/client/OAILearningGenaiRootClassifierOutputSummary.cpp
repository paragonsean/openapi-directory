/**
 * Vertex AI API
 * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILearningGenaiRootClassifierOutputSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILearningGenaiRootClassifierOutputSummary::OAILearningGenaiRootClassifierOutputSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILearningGenaiRootClassifierOutputSummary::OAILearningGenaiRootClassifierOutputSummary() {
    this->initializeModel();
}

OAILearningGenaiRootClassifierOutputSummary::~OAILearningGenaiRootClassifierOutputSummary() {}

void OAILearningGenaiRootClassifierOutputSummary::initializeModel() {

    m_metrics_isSet = false;
    m_metrics_isValid = false;

    m_rule_output_isSet = false;
    m_rule_output_isValid = false;

    m_rule_outputs_isSet = false;
    m_rule_outputs_isValid = false;
}

void OAILearningGenaiRootClassifierOutputSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILearningGenaiRootClassifierOutputSummary::fromJsonObject(QJsonObject json) {

    m_metrics_isValid = ::OpenAPI::fromJsonValue(m_metrics, json[QString("metrics")]);
    m_metrics_isSet = !json[QString("metrics")].isNull() && m_metrics_isValid;

    m_rule_output_isValid = ::OpenAPI::fromJsonValue(m_rule_output, json[QString("ruleOutput")]);
    m_rule_output_isSet = !json[QString("ruleOutput")].isNull() && m_rule_output_isValid;

    m_rule_outputs_isValid = ::OpenAPI::fromJsonValue(m_rule_outputs, json[QString("ruleOutputs")]);
    m_rule_outputs_isSet = !json[QString("ruleOutputs")].isNull() && m_rule_outputs_isValid;
}

QString OAILearningGenaiRootClassifierOutputSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILearningGenaiRootClassifierOutputSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_metrics.size() > 0) {
        obj.insert(QString("metrics"), ::OpenAPI::toJsonValue(m_metrics));
    }
    if (m_rule_output.isSet()) {
        obj.insert(QString("ruleOutput"), ::OpenAPI::toJsonValue(m_rule_output));
    }
    if (m_rule_outputs.size() > 0) {
        obj.insert(QString("ruleOutputs"), ::OpenAPI::toJsonValue(m_rule_outputs));
    }
    return obj;
}

QList<OAILearningGenaiRootMetricOutput> OAILearningGenaiRootClassifierOutputSummary::getMetrics() const {
    return m_metrics;
}
void OAILearningGenaiRootClassifierOutputSummary::setMetrics(const QList<OAILearningGenaiRootMetricOutput> &metrics) {
    m_metrics = metrics;
    m_metrics_isSet = true;
}

bool OAILearningGenaiRootClassifierOutputSummary::is_metrics_Set() const{
    return m_metrics_isSet;
}

bool OAILearningGenaiRootClassifierOutputSummary::is_metrics_Valid() const{
    return m_metrics_isValid;
}

OAILearningGenaiRootRuleOutput OAILearningGenaiRootClassifierOutputSummary::getRuleOutput() const {
    return m_rule_output;
}
void OAILearningGenaiRootClassifierOutputSummary::setRuleOutput(const OAILearningGenaiRootRuleOutput &rule_output) {
    m_rule_output = rule_output;
    m_rule_output_isSet = true;
}

bool OAILearningGenaiRootClassifierOutputSummary::is_rule_output_Set() const{
    return m_rule_output_isSet;
}

bool OAILearningGenaiRootClassifierOutputSummary::is_rule_output_Valid() const{
    return m_rule_output_isValid;
}

QList<OAILearningGenaiRootRuleOutput> OAILearningGenaiRootClassifierOutputSummary::getRuleOutputs() const {
    return m_rule_outputs;
}
void OAILearningGenaiRootClassifierOutputSummary::setRuleOutputs(const QList<OAILearningGenaiRootRuleOutput> &rule_outputs) {
    m_rule_outputs = rule_outputs;
    m_rule_outputs_isSet = true;
}

bool OAILearningGenaiRootClassifierOutputSummary::is_rule_outputs_Set() const{
    return m_rule_outputs_isSet;
}

bool OAILearningGenaiRootClassifierOutputSummary::is_rule_outputs_Valid() const{
    return m_rule_outputs_isValid;
}

bool OAILearningGenaiRootClassifierOutputSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_metrics.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_rule_output.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_rule_outputs.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILearningGenaiRootClassifierOutputSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
