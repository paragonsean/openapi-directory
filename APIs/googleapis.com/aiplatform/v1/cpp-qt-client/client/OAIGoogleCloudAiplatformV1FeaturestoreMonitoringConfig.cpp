/**
 * Vertex AI API
 * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudAiplatformV1FeaturestoreMonitoringConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudAiplatformV1FeaturestoreMonitoringConfig::OAIGoogleCloudAiplatformV1FeaturestoreMonitoringConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudAiplatformV1FeaturestoreMonitoringConfig::OAIGoogleCloudAiplatformV1FeaturestoreMonitoringConfig() {
    this->initializeModel();
}

OAIGoogleCloudAiplatformV1FeaturestoreMonitoringConfig::~OAIGoogleCloudAiplatformV1FeaturestoreMonitoringConfig() {}

void OAIGoogleCloudAiplatformV1FeaturestoreMonitoringConfig::initializeModel() {

    m_categorical_threshold_config_isSet = false;
    m_categorical_threshold_config_isValid = false;

    m_import_features_analysis_isSet = false;
    m_import_features_analysis_isValid = false;

    m_numerical_threshold_config_isSet = false;
    m_numerical_threshold_config_isValid = false;

    m_snapshot_analysis_isSet = false;
    m_snapshot_analysis_isValid = false;
}

void OAIGoogleCloudAiplatformV1FeaturestoreMonitoringConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudAiplatformV1FeaturestoreMonitoringConfig::fromJsonObject(QJsonObject json) {

    m_categorical_threshold_config_isValid = ::OpenAPI::fromJsonValue(m_categorical_threshold_config, json[QString("categoricalThresholdConfig")]);
    m_categorical_threshold_config_isSet = !json[QString("categoricalThresholdConfig")].isNull() && m_categorical_threshold_config_isValid;

    m_import_features_analysis_isValid = ::OpenAPI::fromJsonValue(m_import_features_analysis, json[QString("importFeaturesAnalysis")]);
    m_import_features_analysis_isSet = !json[QString("importFeaturesAnalysis")].isNull() && m_import_features_analysis_isValid;

    m_numerical_threshold_config_isValid = ::OpenAPI::fromJsonValue(m_numerical_threshold_config, json[QString("numericalThresholdConfig")]);
    m_numerical_threshold_config_isSet = !json[QString("numericalThresholdConfig")].isNull() && m_numerical_threshold_config_isValid;

    m_snapshot_analysis_isValid = ::OpenAPI::fromJsonValue(m_snapshot_analysis, json[QString("snapshotAnalysis")]);
    m_snapshot_analysis_isSet = !json[QString("snapshotAnalysis")].isNull() && m_snapshot_analysis_isValid;
}

QString OAIGoogleCloudAiplatformV1FeaturestoreMonitoringConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudAiplatformV1FeaturestoreMonitoringConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_categorical_threshold_config.isSet()) {
        obj.insert(QString("categoricalThresholdConfig"), ::OpenAPI::toJsonValue(m_categorical_threshold_config));
    }
    if (m_import_features_analysis.isSet()) {
        obj.insert(QString("importFeaturesAnalysis"), ::OpenAPI::toJsonValue(m_import_features_analysis));
    }
    if (m_numerical_threshold_config.isSet()) {
        obj.insert(QString("numericalThresholdConfig"), ::OpenAPI::toJsonValue(m_numerical_threshold_config));
    }
    if (m_snapshot_analysis.isSet()) {
        obj.insert(QString("snapshotAnalysis"), ::OpenAPI::toJsonValue(m_snapshot_analysis));
    }
    return obj;
}

OAIGoogleCloudAiplatformV1FeaturestoreMonitoringConfigThresholdConfig OAIGoogleCloudAiplatformV1FeaturestoreMonitoringConfig::getCategoricalThresholdConfig() const {
    return m_categorical_threshold_config;
}
void OAIGoogleCloudAiplatformV1FeaturestoreMonitoringConfig::setCategoricalThresholdConfig(const OAIGoogleCloudAiplatformV1FeaturestoreMonitoringConfigThresholdConfig &categorical_threshold_config) {
    m_categorical_threshold_config = categorical_threshold_config;
    m_categorical_threshold_config_isSet = true;
}

bool OAIGoogleCloudAiplatformV1FeaturestoreMonitoringConfig::is_categorical_threshold_config_Set() const{
    return m_categorical_threshold_config_isSet;
}

bool OAIGoogleCloudAiplatformV1FeaturestoreMonitoringConfig::is_categorical_threshold_config_Valid() const{
    return m_categorical_threshold_config_isValid;
}

OAIGoogleCloudAiplatformV1FeaturestoreMonitoringConfigImportFeaturesAnalysis OAIGoogleCloudAiplatformV1FeaturestoreMonitoringConfig::getImportFeaturesAnalysis() const {
    return m_import_features_analysis;
}
void OAIGoogleCloudAiplatformV1FeaturestoreMonitoringConfig::setImportFeaturesAnalysis(const OAIGoogleCloudAiplatformV1FeaturestoreMonitoringConfigImportFeaturesAnalysis &import_features_analysis) {
    m_import_features_analysis = import_features_analysis;
    m_import_features_analysis_isSet = true;
}

bool OAIGoogleCloudAiplatformV1FeaturestoreMonitoringConfig::is_import_features_analysis_Set() const{
    return m_import_features_analysis_isSet;
}

bool OAIGoogleCloudAiplatformV1FeaturestoreMonitoringConfig::is_import_features_analysis_Valid() const{
    return m_import_features_analysis_isValid;
}

OAIGoogleCloudAiplatformV1FeaturestoreMonitoringConfigThresholdConfig OAIGoogleCloudAiplatformV1FeaturestoreMonitoringConfig::getNumericalThresholdConfig() const {
    return m_numerical_threshold_config;
}
void OAIGoogleCloudAiplatformV1FeaturestoreMonitoringConfig::setNumericalThresholdConfig(const OAIGoogleCloudAiplatformV1FeaturestoreMonitoringConfigThresholdConfig &numerical_threshold_config) {
    m_numerical_threshold_config = numerical_threshold_config;
    m_numerical_threshold_config_isSet = true;
}

bool OAIGoogleCloudAiplatformV1FeaturestoreMonitoringConfig::is_numerical_threshold_config_Set() const{
    return m_numerical_threshold_config_isSet;
}

bool OAIGoogleCloudAiplatformV1FeaturestoreMonitoringConfig::is_numerical_threshold_config_Valid() const{
    return m_numerical_threshold_config_isValid;
}

OAIGoogleCloudAiplatformV1FeaturestoreMonitoringConfigSnapshotAnalysis OAIGoogleCloudAiplatformV1FeaturestoreMonitoringConfig::getSnapshotAnalysis() const {
    return m_snapshot_analysis;
}
void OAIGoogleCloudAiplatformV1FeaturestoreMonitoringConfig::setSnapshotAnalysis(const OAIGoogleCloudAiplatformV1FeaturestoreMonitoringConfigSnapshotAnalysis &snapshot_analysis) {
    m_snapshot_analysis = snapshot_analysis;
    m_snapshot_analysis_isSet = true;
}

bool OAIGoogleCloudAiplatformV1FeaturestoreMonitoringConfig::is_snapshot_analysis_Set() const{
    return m_snapshot_analysis_isSet;
}

bool OAIGoogleCloudAiplatformV1FeaturestoreMonitoringConfig::is_snapshot_analysis_Valid() const{
    return m_snapshot_analysis_isValid;
}

bool OAIGoogleCloudAiplatformV1FeaturestoreMonitoringConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_categorical_threshold_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_import_features_analysis.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_numerical_threshold_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_snapshot_analysis.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudAiplatformV1FeaturestoreMonitoringConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
