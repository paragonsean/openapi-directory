/**
 * Vertex AI API
 * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudAiplatformV1ModelEvaluationSlice.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudAiplatformV1ModelEvaluationSlice::OAIGoogleCloudAiplatformV1ModelEvaluationSlice(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudAiplatformV1ModelEvaluationSlice::OAIGoogleCloudAiplatformV1ModelEvaluationSlice() {
    this->initializeModel();
}

OAIGoogleCloudAiplatformV1ModelEvaluationSlice::~OAIGoogleCloudAiplatformV1ModelEvaluationSlice() {}

void OAIGoogleCloudAiplatformV1ModelEvaluationSlice::initializeModel() {

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_metrics_isSet = false;
    m_metrics_isValid = false;

    m_metrics_schema_uri_isSet = false;
    m_metrics_schema_uri_isValid = false;

    m_model_explanation_isSet = false;
    m_model_explanation_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_slice_isSet = false;
    m_slice_isValid = false;
}

void OAIGoogleCloudAiplatformV1ModelEvaluationSlice::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudAiplatformV1ModelEvaluationSlice::fromJsonObject(QJsonObject json) {

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_metrics_isValid = ::OpenAPI::fromJsonValue(m_metrics, json[QString("metrics")]);
    m_metrics_isSet = !json[QString("metrics")].isNull() && m_metrics_isValid;

    m_metrics_schema_uri_isValid = ::OpenAPI::fromJsonValue(m_metrics_schema_uri, json[QString("metricsSchemaUri")]);
    m_metrics_schema_uri_isSet = !json[QString("metricsSchemaUri")].isNull() && m_metrics_schema_uri_isValid;

    m_model_explanation_isValid = ::OpenAPI::fromJsonValue(m_model_explanation, json[QString("modelExplanation")]);
    m_model_explanation_isSet = !json[QString("modelExplanation")].isNull() && m_model_explanation_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_slice_isValid = ::OpenAPI::fromJsonValue(m_slice, json[QString("slice")]);
    m_slice_isSet = !json[QString("slice")].isNull() && m_slice_isValid;
}

QString OAIGoogleCloudAiplatformV1ModelEvaluationSlice::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudAiplatformV1ModelEvaluationSlice::asJsonObject() const {
    QJsonObject obj;
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_metrics_isSet) {
        obj.insert(QString("metrics"), ::OpenAPI::toJsonValue(m_metrics));
    }
    if (m_metrics_schema_uri_isSet) {
        obj.insert(QString("metricsSchemaUri"), ::OpenAPI::toJsonValue(m_metrics_schema_uri));
    }
    if (m_model_explanation.isSet()) {
        obj.insert(QString("modelExplanation"), ::OpenAPI::toJsonValue(m_model_explanation));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_slice.isSet()) {
        obj.insert(QString("slice"), ::OpenAPI::toJsonValue(m_slice));
    }
    return obj;
}

QString OAIGoogleCloudAiplatformV1ModelEvaluationSlice::getCreateTime() const {
    return m_create_time;
}
void OAIGoogleCloudAiplatformV1ModelEvaluationSlice::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIGoogleCloudAiplatformV1ModelEvaluationSlice::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIGoogleCloudAiplatformV1ModelEvaluationSlice::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QJsonValue OAIGoogleCloudAiplatformV1ModelEvaluationSlice::getMetrics() const {
    return m_metrics;
}
void OAIGoogleCloudAiplatformV1ModelEvaluationSlice::setMetrics(const QJsonValue &metrics) {
    m_metrics = metrics;
    m_metrics_isSet = true;
}

bool OAIGoogleCloudAiplatformV1ModelEvaluationSlice::is_metrics_Set() const{
    return m_metrics_isSet;
}

bool OAIGoogleCloudAiplatformV1ModelEvaluationSlice::is_metrics_Valid() const{
    return m_metrics_isValid;
}

QString OAIGoogleCloudAiplatformV1ModelEvaluationSlice::getMetricsSchemaUri() const {
    return m_metrics_schema_uri;
}
void OAIGoogleCloudAiplatformV1ModelEvaluationSlice::setMetricsSchemaUri(const QString &metrics_schema_uri) {
    m_metrics_schema_uri = metrics_schema_uri;
    m_metrics_schema_uri_isSet = true;
}

bool OAIGoogleCloudAiplatformV1ModelEvaluationSlice::is_metrics_schema_uri_Set() const{
    return m_metrics_schema_uri_isSet;
}

bool OAIGoogleCloudAiplatformV1ModelEvaluationSlice::is_metrics_schema_uri_Valid() const{
    return m_metrics_schema_uri_isValid;
}

OAIGoogleCloudAiplatformV1ModelExplanation OAIGoogleCloudAiplatformV1ModelEvaluationSlice::getModelExplanation() const {
    return m_model_explanation;
}
void OAIGoogleCloudAiplatformV1ModelEvaluationSlice::setModelExplanation(const OAIGoogleCloudAiplatformV1ModelExplanation &model_explanation) {
    m_model_explanation = model_explanation;
    m_model_explanation_isSet = true;
}

bool OAIGoogleCloudAiplatformV1ModelEvaluationSlice::is_model_explanation_Set() const{
    return m_model_explanation_isSet;
}

bool OAIGoogleCloudAiplatformV1ModelEvaluationSlice::is_model_explanation_Valid() const{
    return m_model_explanation_isValid;
}

QString OAIGoogleCloudAiplatformV1ModelEvaluationSlice::getName() const {
    return m_name;
}
void OAIGoogleCloudAiplatformV1ModelEvaluationSlice::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGoogleCloudAiplatformV1ModelEvaluationSlice::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGoogleCloudAiplatformV1ModelEvaluationSlice::is_name_Valid() const{
    return m_name_isValid;
}

OAIGoogleCloudAiplatformV1ModelEvaluationSliceSlice OAIGoogleCloudAiplatformV1ModelEvaluationSlice::getSlice() const {
    return m_slice;
}
void OAIGoogleCloudAiplatformV1ModelEvaluationSlice::setSlice(const OAIGoogleCloudAiplatformV1ModelEvaluationSliceSlice &slice) {
    m_slice = slice;
    m_slice_isSet = true;
}

bool OAIGoogleCloudAiplatformV1ModelEvaluationSlice::is_slice_Set() const{
    return m_slice_isSet;
}

bool OAIGoogleCloudAiplatformV1ModelEvaluationSlice::is_slice_Valid() const{
    return m_slice_isValid;
}

bool OAIGoogleCloudAiplatformV1ModelEvaluationSlice::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metrics_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metrics_schema_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_explanation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_slice.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudAiplatformV1ModelEvaluationSlice::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
