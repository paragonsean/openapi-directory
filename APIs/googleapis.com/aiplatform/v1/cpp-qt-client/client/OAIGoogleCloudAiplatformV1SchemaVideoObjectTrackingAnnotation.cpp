/**
 * Vertex AI API
 * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudAiplatformV1SchemaVideoObjectTrackingAnnotation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudAiplatformV1SchemaVideoObjectTrackingAnnotation::OAIGoogleCloudAiplatformV1SchemaVideoObjectTrackingAnnotation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudAiplatformV1SchemaVideoObjectTrackingAnnotation::OAIGoogleCloudAiplatformV1SchemaVideoObjectTrackingAnnotation() {
    this->initializeModel();
}

OAIGoogleCloudAiplatformV1SchemaVideoObjectTrackingAnnotation::~OAIGoogleCloudAiplatformV1SchemaVideoObjectTrackingAnnotation() {}

void OAIGoogleCloudAiplatformV1SchemaVideoObjectTrackingAnnotation::initializeModel() {

    m_annotation_spec_id_isSet = false;
    m_annotation_spec_id_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_instance_id_isSet = false;
    m_instance_id_isValid = false;

    m_time_offset_isSet = false;
    m_time_offset_isValid = false;

    m_x_max_isSet = false;
    m_x_max_isValid = false;

    m_x_min_isSet = false;
    m_x_min_isValid = false;

    m_y_max_isSet = false;
    m_y_max_isValid = false;

    m_y_min_isSet = false;
    m_y_min_isValid = false;
}

void OAIGoogleCloudAiplatformV1SchemaVideoObjectTrackingAnnotation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudAiplatformV1SchemaVideoObjectTrackingAnnotation::fromJsonObject(QJsonObject json) {

    m_annotation_spec_id_isValid = ::OpenAPI::fromJsonValue(m_annotation_spec_id, json[QString("annotationSpecId")]);
    m_annotation_spec_id_isSet = !json[QString("annotationSpecId")].isNull() && m_annotation_spec_id_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_instance_id_isValid = ::OpenAPI::fromJsonValue(m_instance_id, json[QString("instanceId")]);
    m_instance_id_isSet = !json[QString("instanceId")].isNull() && m_instance_id_isValid;

    m_time_offset_isValid = ::OpenAPI::fromJsonValue(m_time_offset, json[QString("timeOffset")]);
    m_time_offset_isSet = !json[QString("timeOffset")].isNull() && m_time_offset_isValid;

    m_x_max_isValid = ::OpenAPI::fromJsonValue(m_x_max, json[QString("xMax")]);
    m_x_max_isSet = !json[QString("xMax")].isNull() && m_x_max_isValid;

    m_x_min_isValid = ::OpenAPI::fromJsonValue(m_x_min, json[QString("xMin")]);
    m_x_min_isSet = !json[QString("xMin")].isNull() && m_x_min_isValid;

    m_y_max_isValid = ::OpenAPI::fromJsonValue(m_y_max, json[QString("yMax")]);
    m_y_max_isSet = !json[QString("yMax")].isNull() && m_y_max_isValid;

    m_y_min_isValid = ::OpenAPI::fromJsonValue(m_y_min, json[QString("yMin")]);
    m_y_min_isSet = !json[QString("yMin")].isNull() && m_y_min_isValid;
}

QString OAIGoogleCloudAiplatformV1SchemaVideoObjectTrackingAnnotation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudAiplatformV1SchemaVideoObjectTrackingAnnotation::asJsonObject() const {
    QJsonObject obj;
    if (m_annotation_spec_id_isSet) {
        obj.insert(QString("annotationSpecId"), ::OpenAPI::toJsonValue(m_annotation_spec_id));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_instance_id_isSet) {
        obj.insert(QString("instanceId"), ::OpenAPI::toJsonValue(m_instance_id));
    }
    if (m_time_offset_isSet) {
        obj.insert(QString("timeOffset"), ::OpenAPI::toJsonValue(m_time_offset));
    }
    if (m_x_max_isSet) {
        obj.insert(QString("xMax"), ::OpenAPI::toJsonValue(m_x_max));
    }
    if (m_x_min_isSet) {
        obj.insert(QString("xMin"), ::OpenAPI::toJsonValue(m_x_min));
    }
    if (m_y_max_isSet) {
        obj.insert(QString("yMax"), ::OpenAPI::toJsonValue(m_y_max));
    }
    if (m_y_min_isSet) {
        obj.insert(QString("yMin"), ::OpenAPI::toJsonValue(m_y_min));
    }
    return obj;
}

QString OAIGoogleCloudAiplatformV1SchemaVideoObjectTrackingAnnotation::getAnnotationSpecId() const {
    return m_annotation_spec_id;
}
void OAIGoogleCloudAiplatformV1SchemaVideoObjectTrackingAnnotation::setAnnotationSpecId(const QString &annotation_spec_id) {
    m_annotation_spec_id = annotation_spec_id;
    m_annotation_spec_id_isSet = true;
}

bool OAIGoogleCloudAiplatformV1SchemaVideoObjectTrackingAnnotation::is_annotation_spec_id_Set() const{
    return m_annotation_spec_id_isSet;
}

bool OAIGoogleCloudAiplatformV1SchemaVideoObjectTrackingAnnotation::is_annotation_spec_id_Valid() const{
    return m_annotation_spec_id_isValid;
}

QString OAIGoogleCloudAiplatformV1SchemaVideoObjectTrackingAnnotation::getDisplayName() const {
    return m_display_name;
}
void OAIGoogleCloudAiplatformV1SchemaVideoObjectTrackingAnnotation::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIGoogleCloudAiplatformV1SchemaVideoObjectTrackingAnnotation::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIGoogleCloudAiplatformV1SchemaVideoObjectTrackingAnnotation::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIGoogleCloudAiplatformV1SchemaVideoObjectTrackingAnnotation::getInstanceId() const {
    return m_instance_id;
}
void OAIGoogleCloudAiplatformV1SchemaVideoObjectTrackingAnnotation::setInstanceId(const QString &instance_id) {
    m_instance_id = instance_id;
    m_instance_id_isSet = true;
}

bool OAIGoogleCloudAiplatformV1SchemaVideoObjectTrackingAnnotation::is_instance_id_Set() const{
    return m_instance_id_isSet;
}

bool OAIGoogleCloudAiplatformV1SchemaVideoObjectTrackingAnnotation::is_instance_id_Valid() const{
    return m_instance_id_isValid;
}

QString OAIGoogleCloudAiplatformV1SchemaVideoObjectTrackingAnnotation::getTimeOffset() const {
    return m_time_offset;
}
void OAIGoogleCloudAiplatformV1SchemaVideoObjectTrackingAnnotation::setTimeOffset(const QString &time_offset) {
    m_time_offset = time_offset;
    m_time_offset_isSet = true;
}

bool OAIGoogleCloudAiplatformV1SchemaVideoObjectTrackingAnnotation::is_time_offset_Set() const{
    return m_time_offset_isSet;
}

bool OAIGoogleCloudAiplatformV1SchemaVideoObjectTrackingAnnotation::is_time_offset_Valid() const{
    return m_time_offset_isValid;
}

double OAIGoogleCloudAiplatformV1SchemaVideoObjectTrackingAnnotation::getXMax() const {
    return m_x_max;
}
void OAIGoogleCloudAiplatformV1SchemaVideoObjectTrackingAnnotation::setXMax(const double &x_max) {
    m_x_max = x_max;
    m_x_max_isSet = true;
}

bool OAIGoogleCloudAiplatformV1SchemaVideoObjectTrackingAnnotation::is_x_max_Set() const{
    return m_x_max_isSet;
}

bool OAIGoogleCloudAiplatformV1SchemaVideoObjectTrackingAnnotation::is_x_max_Valid() const{
    return m_x_max_isValid;
}

double OAIGoogleCloudAiplatformV1SchemaVideoObjectTrackingAnnotation::getXMin() const {
    return m_x_min;
}
void OAIGoogleCloudAiplatformV1SchemaVideoObjectTrackingAnnotation::setXMin(const double &x_min) {
    m_x_min = x_min;
    m_x_min_isSet = true;
}

bool OAIGoogleCloudAiplatformV1SchemaVideoObjectTrackingAnnotation::is_x_min_Set() const{
    return m_x_min_isSet;
}

bool OAIGoogleCloudAiplatformV1SchemaVideoObjectTrackingAnnotation::is_x_min_Valid() const{
    return m_x_min_isValid;
}

double OAIGoogleCloudAiplatformV1SchemaVideoObjectTrackingAnnotation::getYMax() const {
    return m_y_max;
}
void OAIGoogleCloudAiplatformV1SchemaVideoObjectTrackingAnnotation::setYMax(const double &y_max) {
    m_y_max = y_max;
    m_y_max_isSet = true;
}

bool OAIGoogleCloudAiplatformV1SchemaVideoObjectTrackingAnnotation::is_y_max_Set() const{
    return m_y_max_isSet;
}

bool OAIGoogleCloudAiplatformV1SchemaVideoObjectTrackingAnnotation::is_y_max_Valid() const{
    return m_y_max_isValid;
}

double OAIGoogleCloudAiplatformV1SchemaVideoObjectTrackingAnnotation::getYMin() const {
    return m_y_min;
}
void OAIGoogleCloudAiplatformV1SchemaVideoObjectTrackingAnnotation::setYMin(const double &y_min) {
    m_y_min = y_min;
    m_y_min_isSet = true;
}

bool OAIGoogleCloudAiplatformV1SchemaVideoObjectTrackingAnnotation::is_y_min_Set() const{
    return m_y_min_isSet;
}

bool OAIGoogleCloudAiplatformV1SchemaVideoObjectTrackingAnnotation::is_y_min_Valid() const{
    return m_y_min_isValid;
}

bool OAIGoogleCloudAiplatformV1SchemaVideoObjectTrackingAnnotation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_annotation_spec_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_offset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_x_max_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_x_min_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_y_max_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_y_min_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudAiplatformV1SchemaVideoObjectTrackingAnnotation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
