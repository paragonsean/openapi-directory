/**
 * Vertex AI API
 * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudAiplatformV1GenerateContentResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudAiplatformV1GenerateContentResponse::OAIGoogleCloudAiplatformV1GenerateContentResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudAiplatformV1GenerateContentResponse::OAIGoogleCloudAiplatformV1GenerateContentResponse() {
    this->initializeModel();
}

OAIGoogleCloudAiplatformV1GenerateContentResponse::~OAIGoogleCloudAiplatformV1GenerateContentResponse() {}

void OAIGoogleCloudAiplatformV1GenerateContentResponse::initializeModel() {

    m_candidates_isSet = false;
    m_candidates_isValid = false;

    m_prompt_feedback_isSet = false;
    m_prompt_feedback_isValid = false;

    m_usage_metadata_isSet = false;
    m_usage_metadata_isValid = false;
}

void OAIGoogleCloudAiplatformV1GenerateContentResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudAiplatformV1GenerateContentResponse::fromJsonObject(QJsonObject json) {

    m_candidates_isValid = ::OpenAPI::fromJsonValue(m_candidates, json[QString("candidates")]);
    m_candidates_isSet = !json[QString("candidates")].isNull() && m_candidates_isValid;

    m_prompt_feedback_isValid = ::OpenAPI::fromJsonValue(m_prompt_feedback, json[QString("promptFeedback")]);
    m_prompt_feedback_isSet = !json[QString("promptFeedback")].isNull() && m_prompt_feedback_isValid;

    m_usage_metadata_isValid = ::OpenAPI::fromJsonValue(m_usage_metadata, json[QString("usageMetadata")]);
    m_usage_metadata_isSet = !json[QString("usageMetadata")].isNull() && m_usage_metadata_isValid;
}

QString OAIGoogleCloudAiplatformV1GenerateContentResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudAiplatformV1GenerateContentResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_candidates.size() > 0) {
        obj.insert(QString("candidates"), ::OpenAPI::toJsonValue(m_candidates));
    }
    if (m_prompt_feedback.isSet()) {
        obj.insert(QString("promptFeedback"), ::OpenAPI::toJsonValue(m_prompt_feedback));
    }
    if (m_usage_metadata.isSet()) {
        obj.insert(QString("usageMetadata"), ::OpenAPI::toJsonValue(m_usage_metadata));
    }
    return obj;
}

QList<OAIGoogleCloudAiplatformV1Candidate> OAIGoogleCloudAiplatformV1GenerateContentResponse::getCandidates() const {
    return m_candidates;
}
void OAIGoogleCloudAiplatformV1GenerateContentResponse::setCandidates(const QList<OAIGoogleCloudAiplatformV1Candidate> &candidates) {
    m_candidates = candidates;
    m_candidates_isSet = true;
}

bool OAIGoogleCloudAiplatformV1GenerateContentResponse::is_candidates_Set() const{
    return m_candidates_isSet;
}

bool OAIGoogleCloudAiplatformV1GenerateContentResponse::is_candidates_Valid() const{
    return m_candidates_isValid;
}

OAIGoogleCloudAiplatformV1GenerateContentResponsePromptFeedback OAIGoogleCloudAiplatformV1GenerateContentResponse::getPromptFeedback() const {
    return m_prompt_feedback;
}
void OAIGoogleCloudAiplatformV1GenerateContentResponse::setPromptFeedback(const OAIGoogleCloudAiplatformV1GenerateContentResponsePromptFeedback &prompt_feedback) {
    m_prompt_feedback = prompt_feedback;
    m_prompt_feedback_isSet = true;
}

bool OAIGoogleCloudAiplatformV1GenerateContentResponse::is_prompt_feedback_Set() const{
    return m_prompt_feedback_isSet;
}

bool OAIGoogleCloudAiplatformV1GenerateContentResponse::is_prompt_feedback_Valid() const{
    return m_prompt_feedback_isValid;
}

OAIGoogleCloudAiplatformV1GenerateContentResponseUsageMetadata OAIGoogleCloudAiplatformV1GenerateContentResponse::getUsageMetadata() const {
    return m_usage_metadata;
}
void OAIGoogleCloudAiplatformV1GenerateContentResponse::setUsageMetadata(const OAIGoogleCloudAiplatformV1GenerateContentResponseUsageMetadata &usage_metadata) {
    m_usage_metadata = usage_metadata;
    m_usage_metadata_isSet = true;
}

bool OAIGoogleCloudAiplatformV1GenerateContentResponse::is_usage_metadata_Set() const{
    return m_usage_metadata_isSet;
}

bool OAIGoogleCloudAiplatformV1GenerateContentResponse::is_usage_metadata_Valid() const{
    return m_usage_metadata_isValid;
}

bool OAIGoogleCloudAiplatformV1GenerateContentResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_candidates.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_prompt_feedback.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_usage_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudAiplatformV1GenerateContentResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
