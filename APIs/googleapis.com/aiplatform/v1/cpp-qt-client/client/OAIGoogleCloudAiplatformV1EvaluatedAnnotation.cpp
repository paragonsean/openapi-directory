/**
 * Vertex AI API
 * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudAiplatformV1EvaluatedAnnotation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudAiplatformV1EvaluatedAnnotation::OAIGoogleCloudAiplatformV1EvaluatedAnnotation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudAiplatformV1EvaluatedAnnotation::OAIGoogleCloudAiplatformV1EvaluatedAnnotation() {
    this->initializeModel();
}

OAIGoogleCloudAiplatformV1EvaluatedAnnotation::~OAIGoogleCloudAiplatformV1EvaluatedAnnotation() {}

void OAIGoogleCloudAiplatformV1EvaluatedAnnotation::initializeModel() {

    m_data_item_payload_isSet = false;
    m_data_item_payload_isValid = false;

    m_error_analysis_annotations_isSet = false;
    m_error_analysis_annotations_isValid = false;

    m_evaluated_data_item_view_id_isSet = false;
    m_evaluated_data_item_view_id_isValid = false;

    m_explanations_isSet = false;
    m_explanations_isValid = false;

    m_ground_truths_isSet = false;
    m_ground_truths_isValid = false;

    m_predictions_isSet = false;
    m_predictions_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIGoogleCloudAiplatformV1EvaluatedAnnotation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudAiplatformV1EvaluatedAnnotation::fromJsonObject(QJsonObject json) {

    m_data_item_payload_isValid = ::OpenAPI::fromJsonValue(m_data_item_payload, json[QString("dataItemPayload")]);
    m_data_item_payload_isSet = !json[QString("dataItemPayload")].isNull() && m_data_item_payload_isValid;

    m_error_analysis_annotations_isValid = ::OpenAPI::fromJsonValue(m_error_analysis_annotations, json[QString("errorAnalysisAnnotations")]);
    m_error_analysis_annotations_isSet = !json[QString("errorAnalysisAnnotations")].isNull() && m_error_analysis_annotations_isValid;

    m_evaluated_data_item_view_id_isValid = ::OpenAPI::fromJsonValue(m_evaluated_data_item_view_id, json[QString("evaluatedDataItemViewId")]);
    m_evaluated_data_item_view_id_isSet = !json[QString("evaluatedDataItemViewId")].isNull() && m_evaluated_data_item_view_id_isValid;

    m_explanations_isValid = ::OpenAPI::fromJsonValue(m_explanations, json[QString("explanations")]);
    m_explanations_isSet = !json[QString("explanations")].isNull() && m_explanations_isValid;

    m_ground_truths_isValid = ::OpenAPI::fromJsonValue(m_ground_truths, json[QString("groundTruths")]);
    m_ground_truths_isSet = !json[QString("groundTruths")].isNull() && m_ground_truths_isValid;

    m_predictions_isValid = ::OpenAPI::fromJsonValue(m_predictions, json[QString("predictions")]);
    m_predictions_isSet = !json[QString("predictions")].isNull() && m_predictions_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIGoogleCloudAiplatformV1EvaluatedAnnotation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudAiplatformV1EvaluatedAnnotation::asJsonObject() const {
    QJsonObject obj;
    if (m_data_item_payload_isSet) {
        obj.insert(QString("dataItemPayload"), ::OpenAPI::toJsonValue(m_data_item_payload));
    }
    if (m_error_analysis_annotations.size() > 0) {
        obj.insert(QString("errorAnalysisAnnotations"), ::OpenAPI::toJsonValue(m_error_analysis_annotations));
    }
    if (m_evaluated_data_item_view_id_isSet) {
        obj.insert(QString("evaluatedDataItemViewId"), ::OpenAPI::toJsonValue(m_evaluated_data_item_view_id));
    }
    if (m_explanations.size() > 0) {
        obj.insert(QString("explanations"), ::OpenAPI::toJsonValue(m_explanations));
    }
    if (m_ground_truths.size() > 0) {
        obj.insert(QString("groundTruths"), ::OpenAPI::toJsonValue(m_ground_truths));
    }
    if (m_predictions.size() > 0) {
        obj.insert(QString("predictions"), ::OpenAPI::toJsonValue(m_predictions));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QJsonValue OAIGoogleCloudAiplatformV1EvaluatedAnnotation::getDataItemPayload() const {
    return m_data_item_payload;
}
void OAIGoogleCloudAiplatformV1EvaluatedAnnotation::setDataItemPayload(const QJsonValue &data_item_payload) {
    m_data_item_payload = data_item_payload;
    m_data_item_payload_isSet = true;
}

bool OAIGoogleCloudAiplatformV1EvaluatedAnnotation::is_data_item_payload_Set() const{
    return m_data_item_payload_isSet;
}

bool OAIGoogleCloudAiplatformV1EvaluatedAnnotation::is_data_item_payload_Valid() const{
    return m_data_item_payload_isValid;
}

QList<OAIGoogleCloudAiplatformV1ErrorAnalysisAnnotation> OAIGoogleCloudAiplatformV1EvaluatedAnnotation::getErrorAnalysisAnnotations() const {
    return m_error_analysis_annotations;
}
void OAIGoogleCloudAiplatformV1EvaluatedAnnotation::setErrorAnalysisAnnotations(const QList<OAIGoogleCloudAiplatformV1ErrorAnalysisAnnotation> &error_analysis_annotations) {
    m_error_analysis_annotations = error_analysis_annotations;
    m_error_analysis_annotations_isSet = true;
}

bool OAIGoogleCloudAiplatformV1EvaluatedAnnotation::is_error_analysis_annotations_Set() const{
    return m_error_analysis_annotations_isSet;
}

bool OAIGoogleCloudAiplatformV1EvaluatedAnnotation::is_error_analysis_annotations_Valid() const{
    return m_error_analysis_annotations_isValid;
}

QString OAIGoogleCloudAiplatformV1EvaluatedAnnotation::getEvaluatedDataItemViewId() const {
    return m_evaluated_data_item_view_id;
}
void OAIGoogleCloudAiplatformV1EvaluatedAnnotation::setEvaluatedDataItemViewId(const QString &evaluated_data_item_view_id) {
    m_evaluated_data_item_view_id = evaluated_data_item_view_id;
    m_evaluated_data_item_view_id_isSet = true;
}

bool OAIGoogleCloudAiplatformV1EvaluatedAnnotation::is_evaluated_data_item_view_id_Set() const{
    return m_evaluated_data_item_view_id_isSet;
}

bool OAIGoogleCloudAiplatformV1EvaluatedAnnotation::is_evaluated_data_item_view_id_Valid() const{
    return m_evaluated_data_item_view_id_isValid;
}

QList<OAIGoogleCloudAiplatformV1EvaluatedAnnotationExplanation> OAIGoogleCloudAiplatformV1EvaluatedAnnotation::getExplanations() const {
    return m_explanations;
}
void OAIGoogleCloudAiplatformV1EvaluatedAnnotation::setExplanations(const QList<OAIGoogleCloudAiplatformV1EvaluatedAnnotationExplanation> &explanations) {
    m_explanations = explanations;
    m_explanations_isSet = true;
}

bool OAIGoogleCloudAiplatformV1EvaluatedAnnotation::is_explanations_Set() const{
    return m_explanations_isSet;
}

bool OAIGoogleCloudAiplatformV1EvaluatedAnnotation::is_explanations_Valid() const{
    return m_explanations_isValid;
}

QList<QJsonValue> OAIGoogleCloudAiplatformV1EvaluatedAnnotation::getGroundTruths() const {
    return m_ground_truths;
}
void OAIGoogleCloudAiplatformV1EvaluatedAnnotation::setGroundTruths(const QList<QJsonValue> &ground_truths) {
    m_ground_truths = ground_truths;
    m_ground_truths_isSet = true;
}

bool OAIGoogleCloudAiplatformV1EvaluatedAnnotation::is_ground_truths_Set() const{
    return m_ground_truths_isSet;
}

bool OAIGoogleCloudAiplatformV1EvaluatedAnnotation::is_ground_truths_Valid() const{
    return m_ground_truths_isValid;
}

QList<QJsonValue> OAIGoogleCloudAiplatformV1EvaluatedAnnotation::getPredictions() const {
    return m_predictions;
}
void OAIGoogleCloudAiplatformV1EvaluatedAnnotation::setPredictions(const QList<QJsonValue> &predictions) {
    m_predictions = predictions;
    m_predictions_isSet = true;
}

bool OAIGoogleCloudAiplatformV1EvaluatedAnnotation::is_predictions_Set() const{
    return m_predictions_isSet;
}

bool OAIGoogleCloudAiplatformV1EvaluatedAnnotation::is_predictions_Valid() const{
    return m_predictions_isValid;
}

QString OAIGoogleCloudAiplatformV1EvaluatedAnnotation::getType() const {
    return m_type;
}
void OAIGoogleCloudAiplatformV1EvaluatedAnnotation::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIGoogleCloudAiplatformV1EvaluatedAnnotation::is_type_Set() const{
    return m_type_isSet;
}

bool OAIGoogleCloudAiplatformV1EvaluatedAnnotation::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIGoogleCloudAiplatformV1EvaluatedAnnotation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_item_payload_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_analysis_annotations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_evaluated_data_item_view_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_explanations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_ground_truths.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_predictions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudAiplatformV1EvaluatedAnnotation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
