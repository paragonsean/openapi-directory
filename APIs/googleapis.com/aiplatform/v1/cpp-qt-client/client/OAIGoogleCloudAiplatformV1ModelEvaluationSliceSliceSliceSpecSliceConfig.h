/**
 * Vertex AI API
 * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGoogleCloudAiplatformV1ModelEvaluationSliceSliceSliceSpecSliceConfig.h
 *
 * Specification message containing the config for this SliceSpec. When &#x60;kind&#x60; is selected as &#x60;value&#x60; and/or &#x60;range&#x60;, only a single slice will be computed. When &#x60;all_values&#x60; is present, a separate slice will be computed for each possible label/value for the corresponding key in &#x60;config&#x60;. Examples, with feature zip_code with values 12345, 23334, 88888 and feature country with values \&quot;US\&quot;, \&quot;Canada\&quot;, \&quot;Mexico\&quot; in the dataset: Example 1: { \&quot;zip_code\&quot;: { \&quot;value\&quot;: { \&quot;float_value\&quot;: 12345.0 } } } A single slice for any data with zip_code 12345 in the dataset. Example 2: { \&quot;zip_code\&quot;: { \&quot;range\&quot;: { \&quot;low\&quot;: 12345, \&quot;high\&quot;: 20000 } } } A single slice containing data where the zip_codes between 12345 and 20000 For this example, data with the zip_code of 12345 will be in this slice. Example 3: { \&quot;zip_code\&quot;: { \&quot;range\&quot;: { \&quot;low\&quot;: 10000, \&quot;high\&quot;: 20000 } }, \&quot;country\&quot;: { \&quot;value\&quot;: { \&quot;string_value\&quot;: \&quot;US\&quot; } } } A single slice containing data where the zip_codes between 10000 and 20000 has the country \&quot;US\&quot;. For this example, data with the zip_code of 12345 and country \&quot;US\&quot; will be in this slice. Example 4: { \&quot;country\&quot;: {\&quot;all_values\&quot;: { \&quot;value\&quot;: true } } } Three slices are computed, one for each unique country in the dataset. Example 5: { \&quot;country\&quot;: { \&quot;all_values\&quot;: { \&quot;value\&quot;: true } }, \&quot;zip_code\&quot;: { \&quot;value\&quot;: { \&quot;float_value\&quot;: 12345.0 } } } Three slices are computed, one for each unique country in the dataset where the zip_code is also 12345. For this example, data with zip_code 12345 and country \&quot;US\&quot; will be in one slice, zip_code 12345 and country \&quot;Canada\&quot; in another slice, and zip_code 12345 and country \&quot;Mexico\&quot; in another slice, totaling 3 slices.
 */

#ifndef OAIGoogleCloudAiplatformV1ModelEvaluationSliceSliceSliceSpecSliceConfig_H
#define OAIGoogleCloudAiplatformV1ModelEvaluationSliceSliceSliceSpecSliceConfig_H

#include <QJsonObject>

#include "OAIGoogleCloudAiplatformV1ModelEvaluationSliceSliceSliceSpecRange.h"
#include "OAIGoogleCloudAiplatformV1ModelEvaluationSliceSliceSliceSpecValue.h"

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIGoogleCloudAiplatformV1ModelEvaluationSliceSliceSliceSpecRange;
class OAIGoogleCloudAiplatformV1ModelEvaluationSliceSliceSliceSpecValue;

class OAIGoogleCloudAiplatformV1ModelEvaluationSliceSliceSliceSpecSliceConfig : public OAIObject {
public:
    OAIGoogleCloudAiplatformV1ModelEvaluationSliceSliceSliceSpecSliceConfig();
    OAIGoogleCloudAiplatformV1ModelEvaluationSliceSliceSliceSpecSliceConfig(QString json);
    ~OAIGoogleCloudAiplatformV1ModelEvaluationSliceSliceSliceSpecSliceConfig() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isAllValues() const;
    void setAllValues(const bool &all_values);
    bool is_all_values_Set() const;
    bool is_all_values_Valid() const;

    OAIGoogleCloudAiplatformV1ModelEvaluationSliceSliceSliceSpecRange getRange() const;
    void setRange(const OAIGoogleCloudAiplatformV1ModelEvaluationSliceSliceSliceSpecRange &range);
    bool is_range_Set() const;
    bool is_range_Valid() const;

    OAIGoogleCloudAiplatformV1ModelEvaluationSliceSliceSliceSpecValue getValue() const;
    void setValue(const OAIGoogleCloudAiplatformV1ModelEvaluationSliceSliceSliceSpecValue &value);
    bool is_value_Set() const;
    bool is_value_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_all_values;
    bool m_all_values_isSet;
    bool m_all_values_isValid;

    OAIGoogleCloudAiplatformV1ModelEvaluationSliceSliceSliceSpecRange m_range;
    bool m_range_isSet;
    bool m_range_isValid;

    OAIGoogleCloudAiplatformV1ModelEvaluationSliceSliceSliceSpecValue m_value;
    bool m_value_isSet;
    bool m_value_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGoogleCloudAiplatformV1ModelEvaluationSliceSliceSliceSpecSliceConfig)

#endif // OAIGoogleCloudAiplatformV1ModelEvaluationSliceSliceSliceSpecSliceConfig_H
