/**
 * Vertex AI API
 * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudAiplatformV1HyperparameterTuningJob.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudAiplatformV1HyperparameterTuningJob::OAIGoogleCloudAiplatformV1HyperparameterTuningJob(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudAiplatformV1HyperparameterTuningJob::OAIGoogleCloudAiplatformV1HyperparameterTuningJob() {
    this->initializeModel();
}

OAIGoogleCloudAiplatformV1HyperparameterTuningJob::~OAIGoogleCloudAiplatformV1HyperparameterTuningJob() {}

void OAIGoogleCloudAiplatformV1HyperparameterTuningJob::initializeModel() {

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_encryption_spec_isSet = false;
    m_encryption_spec_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_error_isSet = false;
    m_error_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_max_failed_trial_count_isSet = false;
    m_max_failed_trial_count_isValid = false;

    m_max_trial_count_isSet = false;
    m_max_trial_count_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_parallel_trial_count_isSet = false;
    m_parallel_trial_count_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_study_spec_isSet = false;
    m_study_spec_isValid = false;

    m_trial_job_spec_isSet = false;
    m_trial_job_spec_isValid = false;

    m_trials_isSet = false;
    m_trials_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;
}

void OAIGoogleCloudAiplatformV1HyperparameterTuningJob::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudAiplatformV1HyperparameterTuningJob::fromJsonObject(QJsonObject json) {

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_encryption_spec_isValid = ::OpenAPI::fromJsonValue(m_encryption_spec, json[QString("encryptionSpec")]);
    m_encryption_spec_isSet = !json[QString("encryptionSpec")].isNull() && m_encryption_spec_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("endTime")]);
    m_end_time_isSet = !json[QString("endTime")].isNull() && m_end_time_isValid;

    m_error_isValid = ::OpenAPI::fromJsonValue(m_error, json[QString("error")]);
    m_error_isSet = !json[QString("error")].isNull() && m_error_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_max_failed_trial_count_isValid = ::OpenAPI::fromJsonValue(m_max_failed_trial_count, json[QString("maxFailedTrialCount")]);
    m_max_failed_trial_count_isSet = !json[QString("maxFailedTrialCount")].isNull() && m_max_failed_trial_count_isValid;

    m_max_trial_count_isValid = ::OpenAPI::fromJsonValue(m_max_trial_count, json[QString("maxTrialCount")]);
    m_max_trial_count_isSet = !json[QString("maxTrialCount")].isNull() && m_max_trial_count_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_parallel_trial_count_isValid = ::OpenAPI::fromJsonValue(m_parallel_trial_count, json[QString("parallelTrialCount")]);
    m_parallel_trial_count_isSet = !json[QString("parallelTrialCount")].isNull() && m_parallel_trial_count_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_study_spec_isValid = ::OpenAPI::fromJsonValue(m_study_spec, json[QString("studySpec")]);
    m_study_spec_isSet = !json[QString("studySpec")].isNull() && m_study_spec_isValid;

    m_trial_job_spec_isValid = ::OpenAPI::fromJsonValue(m_trial_job_spec, json[QString("trialJobSpec")]);
    m_trial_job_spec_isSet = !json[QString("trialJobSpec")].isNull() && m_trial_job_spec_isValid;

    m_trials_isValid = ::OpenAPI::fromJsonValue(m_trials, json[QString("trials")]);
    m_trials_isSet = !json[QString("trials")].isNull() && m_trials_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;
}

QString OAIGoogleCloudAiplatformV1HyperparameterTuningJob::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudAiplatformV1HyperparameterTuningJob::asJsonObject() const {
    QJsonObject obj;
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_encryption_spec.isSet()) {
        obj.insert(QString("encryptionSpec"), ::OpenAPI::toJsonValue(m_encryption_spec));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("endTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_error.isSet()) {
        obj.insert(QString("error"), ::OpenAPI::toJsonValue(m_error));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_max_failed_trial_count_isSet) {
        obj.insert(QString("maxFailedTrialCount"), ::OpenAPI::toJsonValue(m_max_failed_trial_count));
    }
    if (m_max_trial_count_isSet) {
        obj.insert(QString("maxTrialCount"), ::OpenAPI::toJsonValue(m_max_trial_count));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_parallel_trial_count_isSet) {
        obj.insert(QString("parallelTrialCount"), ::OpenAPI::toJsonValue(m_parallel_trial_count));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_study_spec.isSet()) {
        obj.insert(QString("studySpec"), ::OpenAPI::toJsonValue(m_study_spec));
    }
    if (m_trial_job_spec.isSet()) {
        obj.insert(QString("trialJobSpec"), ::OpenAPI::toJsonValue(m_trial_job_spec));
    }
    if (m_trials.size() > 0) {
        obj.insert(QString("trials"), ::OpenAPI::toJsonValue(m_trials));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    return obj;
}

QString OAIGoogleCloudAiplatformV1HyperparameterTuningJob::getCreateTime() const {
    return m_create_time;
}
void OAIGoogleCloudAiplatformV1HyperparameterTuningJob::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIGoogleCloudAiplatformV1HyperparameterTuningJob::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIGoogleCloudAiplatformV1HyperparameterTuningJob::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAIGoogleCloudAiplatformV1HyperparameterTuningJob::getDisplayName() const {
    return m_display_name;
}
void OAIGoogleCloudAiplatformV1HyperparameterTuningJob::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIGoogleCloudAiplatformV1HyperparameterTuningJob::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIGoogleCloudAiplatformV1HyperparameterTuningJob::is_display_name_Valid() const{
    return m_display_name_isValid;
}

OAIGoogleCloudAiplatformV1EncryptionSpec OAIGoogleCloudAiplatformV1HyperparameterTuningJob::getEncryptionSpec() const {
    return m_encryption_spec;
}
void OAIGoogleCloudAiplatformV1HyperparameterTuningJob::setEncryptionSpec(const OAIGoogleCloudAiplatformV1EncryptionSpec &encryption_spec) {
    m_encryption_spec = encryption_spec;
    m_encryption_spec_isSet = true;
}

bool OAIGoogleCloudAiplatformV1HyperparameterTuningJob::is_encryption_spec_Set() const{
    return m_encryption_spec_isSet;
}

bool OAIGoogleCloudAiplatformV1HyperparameterTuningJob::is_encryption_spec_Valid() const{
    return m_encryption_spec_isValid;
}

QString OAIGoogleCloudAiplatformV1HyperparameterTuningJob::getEndTime() const {
    return m_end_time;
}
void OAIGoogleCloudAiplatformV1HyperparameterTuningJob::setEndTime(const QString &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIGoogleCloudAiplatformV1HyperparameterTuningJob::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIGoogleCloudAiplatformV1HyperparameterTuningJob::is_end_time_Valid() const{
    return m_end_time_isValid;
}

OAIGoogleRpcStatus OAIGoogleCloudAiplatformV1HyperparameterTuningJob::getError() const {
    return m_error;
}
void OAIGoogleCloudAiplatformV1HyperparameterTuningJob::setError(const OAIGoogleRpcStatus &error) {
    m_error = error;
    m_error_isSet = true;
}

bool OAIGoogleCloudAiplatformV1HyperparameterTuningJob::is_error_Set() const{
    return m_error_isSet;
}

bool OAIGoogleCloudAiplatformV1HyperparameterTuningJob::is_error_Valid() const{
    return m_error_isValid;
}

QMap<QString, QString> OAIGoogleCloudAiplatformV1HyperparameterTuningJob::getLabels() const {
    return m_labels;
}
void OAIGoogleCloudAiplatformV1HyperparameterTuningJob::setLabels(const QMap<QString, QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIGoogleCloudAiplatformV1HyperparameterTuningJob::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIGoogleCloudAiplatformV1HyperparameterTuningJob::is_labels_Valid() const{
    return m_labels_isValid;
}

qint32 OAIGoogleCloudAiplatformV1HyperparameterTuningJob::getMaxFailedTrialCount() const {
    return m_max_failed_trial_count;
}
void OAIGoogleCloudAiplatformV1HyperparameterTuningJob::setMaxFailedTrialCount(const qint32 &max_failed_trial_count) {
    m_max_failed_trial_count = max_failed_trial_count;
    m_max_failed_trial_count_isSet = true;
}

bool OAIGoogleCloudAiplatformV1HyperparameterTuningJob::is_max_failed_trial_count_Set() const{
    return m_max_failed_trial_count_isSet;
}

bool OAIGoogleCloudAiplatformV1HyperparameterTuningJob::is_max_failed_trial_count_Valid() const{
    return m_max_failed_trial_count_isValid;
}

qint32 OAIGoogleCloudAiplatformV1HyperparameterTuningJob::getMaxTrialCount() const {
    return m_max_trial_count;
}
void OAIGoogleCloudAiplatformV1HyperparameterTuningJob::setMaxTrialCount(const qint32 &max_trial_count) {
    m_max_trial_count = max_trial_count;
    m_max_trial_count_isSet = true;
}

bool OAIGoogleCloudAiplatformV1HyperparameterTuningJob::is_max_trial_count_Set() const{
    return m_max_trial_count_isSet;
}

bool OAIGoogleCloudAiplatformV1HyperparameterTuningJob::is_max_trial_count_Valid() const{
    return m_max_trial_count_isValid;
}

QString OAIGoogleCloudAiplatformV1HyperparameterTuningJob::getName() const {
    return m_name;
}
void OAIGoogleCloudAiplatformV1HyperparameterTuningJob::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGoogleCloudAiplatformV1HyperparameterTuningJob::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGoogleCloudAiplatformV1HyperparameterTuningJob::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAIGoogleCloudAiplatformV1HyperparameterTuningJob::getParallelTrialCount() const {
    return m_parallel_trial_count;
}
void OAIGoogleCloudAiplatformV1HyperparameterTuningJob::setParallelTrialCount(const qint32 &parallel_trial_count) {
    m_parallel_trial_count = parallel_trial_count;
    m_parallel_trial_count_isSet = true;
}

bool OAIGoogleCloudAiplatformV1HyperparameterTuningJob::is_parallel_trial_count_Set() const{
    return m_parallel_trial_count_isSet;
}

bool OAIGoogleCloudAiplatformV1HyperparameterTuningJob::is_parallel_trial_count_Valid() const{
    return m_parallel_trial_count_isValid;
}

QString OAIGoogleCloudAiplatformV1HyperparameterTuningJob::getStartTime() const {
    return m_start_time;
}
void OAIGoogleCloudAiplatformV1HyperparameterTuningJob::setStartTime(const QString &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIGoogleCloudAiplatformV1HyperparameterTuningJob::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIGoogleCloudAiplatformV1HyperparameterTuningJob::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QString OAIGoogleCloudAiplatformV1HyperparameterTuningJob::getState() const {
    return m_state;
}
void OAIGoogleCloudAiplatformV1HyperparameterTuningJob::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIGoogleCloudAiplatformV1HyperparameterTuningJob::is_state_Set() const{
    return m_state_isSet;
}

bool OAIGoogleCloudAiplatformV1HyperparameterTuningJob::is_state_Valid() const{
    return m_state_isValid;
}

OAIGoogleCloudAiplatformV1StudySpec OAIGoogleCloudAiplatformV1HyperparameterTuningJob::getStudySpec() const {
    return m_study_spec;
}
void OAIGoogleCloudAiplatformV1HyperparameterTuningJob::setStudySpec(const OAIGoogleCloudAiplatformV1StudySpec &study_spec) {
    m_study_spec = study_spec;
    m_study_spec_isSet = true;
}

bool OAIGoogleCloudAiplatformV1HyperparameterTuningJob::is_study_spec_Set() const{
    return m_study_spec_isSet;
}

bool OAIGoogleCloudAiplatformV1HyperparameterTuningJob::is_study_spec_Valid() const{
    return m_study_spec_isValid;
}

OAIGoogleCloudAiplatformV1CustomJobSpec OAIGoogleCloudAiplatformV1HyperparameterTuningJob::getTrialJobSpec() const {
    return m_trial_job_spec;
}
void OAIGoogleCloudAiplatformV1HyperparameterTuningJob::setTrialJobSpec(const OAIGoogleCloudAiplatformV1CustomJobSpec &trial_job_spec) {
    m_trial_job_spec = trial_job_spec;
    m_trial_job_spec_isSet = true;
}

bool OAIGoogleCloudAiplatformV1HyperparameterTuningJob::is_trial_job_spec_Set() const{
    return m_trial_job_spec_isSet;
}

bool OAIGoogleCloudAiplatformV1HyperparameterTuningJob::is_trial_job_spec_Valid() const{
    return m_trial_job_spec_isValid;
}

QList<OAIGoogleCloudAiplatformV1Trial> OAIGoogleCloudAiplatformV1HyperparameterTuningJob::getTrials() const {
    return m_trials;
}
void OAIGoogleCloudAiplatformV1HyperparameterTuningJob::setTrials(const QList<OAIGoogleCloudAiplatformV1Trial> &trials) {
    m_trials = trials;
    m_trials_isSet = true;
}

bool OAIGoogleCloudAiplatformV1HyperparameterTuningJob::is_trials_Set() const{
    return m_trials_isSet;
}

bool OAIGoogleCloudAiplatformV1HyperparameterTuningJob::is_trials_Valid() const{
    return m_trials_isValid;
}

QString OAIGoogleCloudAiplatformV1HyperparameterTuningJob::getUpdateTime() const {
    return m_update_time;
}
void OAIGoogleCloudAiplatformV1HyperparameterTuningJob::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAIGoogleCloudAiplatformV1HyperparameterTuningJob::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAIGoogleCloudAiplatformV1HyperparameterTuningJob::is_update_time_Valid() const{
    return m_update_time_isValid;
}

bool OAIGoogleCloudAiplatformV1HyperparameterTuningJob::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_encryption_spec.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_failed_trial_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_trial_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parallel_trial_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_study_spec.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_trial_job_spec.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_trials.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudAiplatformV1HyperparameterTuningJob::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
