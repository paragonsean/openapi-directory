/**
 * Vertex AI API
 * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudAiplatformV1ExportDataConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudAiplatformV1ExportDataConfig::OAIGoogleCloudAiplatformV1ExportDataConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudAiplatformV1ExportDataConfig::OAIGoogleCloudAiplatformV1ExportDataConfig() {
    this->initializeModel();
}

OAIGoogleCloudAiplatformV1ExportDataConfig::~OAIGoogleCloudAiplatformV1ExportDataConfig() {}

void OAIGoogleCloudAiplatformV1ExportDataConfig::initializeModel() {

    m_annotation_schema_uri_isSet = false;
    m_annotation_schema_uri_isValid = false;

    m_annotations_filter_isSet = false;
    m_annotations_filter_isValid = false;

    m_export_use_isSet = false;
    m_export_use_isValid = false;

    m_filter_split_isSet = false;
    m_filter_split_isValid = false;

    m_fraction_split_isSet = false;
    m_fraction_split_isValid = false;

    m_gcs_destination_isSet = false;
    m_gcs_destination_isValid = false;

    m_saved_query_id_isSet = false;
    m_saved_query_id_isValid = false;
}

void OAIGoogleCloudAiplatformV1ExportDataConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudAiplatformV1ExportDataConfig::fromJsonObject(QJsonObject json) {

    m_annotation_schema_uri_isValid = ::OpenAPI::fromJsonValue(m_annotation_schema_uri, json[QString("annotationSchemaUri")]);
    m_annotation_schema_uri_isSet = !json[QString("annotationSchemaUri")].isNull() && m_annotation_schema_uri_isValid;

    m_annotations_filter_isValid = ::OpenAPI::fromJsonValue(m_annotations_filter, json[QString("annotationsFilter")]);
    m_annotations_filter_isSet = !json[QString("annotationsFilter")].isNull() && m_annotations_filter_isValid;

    m_export_use_isValid = ::OpenAPI::fromJsonValue(m_export_use, json[QString("exportUse")]);
    m_export_use_isSet = !json[QString("exportUse")].isNull() && m_export_use_isValid;

    m_filter_split_isValid = ::OpenAPI::fromJsonValue(m_filter_split, json[QString("filterSplit")]);
    m_filter_split_isSet = !json[QString("filterSplit")].isNull() && m_filter_split_isValid;

    m_fraction_split_isValid = ::OpenAPI::fromJsonValue(m_fraction_split, json[QString("fractionSplit")]);
    m_fraction_split_isSet = !json[QString("fractionSplit")].isNull() && m_fraction_split_isValid;

    m_gcs_destination_isValid = ::OpenAPI::fromJsonValue(m_gcs_destination, json[QString("gcsDestination")]);
    m_gcs_destination_isSet = !json[QString("gcsDestination")].isNull() && m_gcs_destination_isValid;

    m_saved_query_id_isValid = ::OpenAPI::fromJsonValue(m_saved_query_id, json[QString("savedQueryId")]);
    m_saved_query_id_isSet = !json[QString("savedQueryId")].isNull() && m_saved_query_id_isValid;
}

QString OAIGoogleCloudAiplatformV1ExportDataConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudAiplatformV1ExportDataConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_annotation_schema_uri_isSet) {
        obj.insert(QString("annotationSchemaUri"), ::OpenAPI::toJsonValue(m_annotation_schema_uri));
    }
    if (m_annotations_filter_isSet) {
        obj.insert(QString("annotationsFilter"), ::OpenAPI::toJsonValue(m_annotations_filter));
    }
    if (m_export_use_isSet) {
        obj.insert(QString("exportUse"), ::OpenAPI::toJsonValue(m_export_use));
    }
    if (m_filter_split.isSet()) {
        obj.insert(QString("filterSplit"), ::OpenAPI::toJsonValue(m_filter_split));
    }
    if (m_fraction_split.isSet()) {
        obj.insert(QString("fractionSplit"), ::OpenAPI::toJsonValue(m_fraction_split));
    }
    if (m_gcs_destination.isSet()) {
        obj.insert(QString("gcsDestination"), ::OpenAPI::toJsonValue(m_gcs_destination));
    }
    if (m_saved_query_id_isSet) {
        obj.insert(QString("savedQueryId"), ::OpenAPI::toJsonValue(m_saved_query_id));
    }
    return obj;
}

QString OAIGoogleCloudAiplatformV1ExportDataConfig::getAnnotationSchemaUri() const {
    return m_annotation_schema_uri;
}
void OAIGoogleCloudAiplatformV1ExportDataConfig::setAnnotationSchemaUri(const QString &annotation_schema_uri) {
    m_annotation_schema_uri = annotation_schema_uri;
    m_annotation_schema_uri_isSet = true;
}

bool OAIGoogleCloudAiplatformV1ExportDataConfig::is_annotation_schema_uri_Set() const{
    return m_annotation_schema_uri_isSet;
}

bool OAIGoogleCloudAiplatformV1ExportDataConfig::is_annotation_schema_uri_Valid() const{
    return m_annotation_schema_uri_isValid;
}

QString OAIGoogleCloudAiplatformV1ExportDataConfig::getAnnotationsFilter() const {
    return m_annotations_filter;
}
void OAIGoogleCloudAiplatformV1ExportDataConfig::setAnnotationsFilter(const QString &annotations_filter) {
    m_annotations_filter = annotations_filter;
    m_annotations_filter_isSet = true;
}

bool OAIGoogleCloudAiplatformV1ExportDataConfig::is_annotations_filter_Set() const{
    return m_annotations_filter_isSet;
}

bool OAIGoogleCloudAiplatformV1ExportDataConfig::is_annotations_filter_Valid() const{
    return m_annotations_filter_isValid;
}

QString OAIGoogleCloudAiplatformV1ExportDataConfig::getExportUse() const {
    return m_export_use;
}
void OAIGoogleCloudAiplatformV1ExportDataConfig::setExportUse(const QString &export_use) {
    m_export_use = export_use;
    m_export_use_isSet = true;
}

bool OAIGoogleCloudAiplatformV1ExportDataConfig::is_export_use_Set() const{
    return m_export_use_isSet;
}

bool OAIGoogleCloudAiplatformV1ExportDataConfig::is_export_use_Valid() const{
    return m_export_use_isValid;
}

OAIGoogleCloudAiplatformV1ExportFilterSplit OAIGoogleCloudAiplatformV1ExportDataConfig::getFilterSplit() const {
    return m_filter_split;
}
void OAIGoogleCloudAiplatformV1ExportDataConfig::setFilterSplit(const OAIGoogleCloudAiplatformV1ExportFilterSplit &filter_split) {
    m_filter_split = filter_split;
    m_filter_split_isSet = true;
}

bool OAIGoogleCloudAiplatformV1ExportDataConfig::is_filter_split_Set() const{
    return m_filter_split_isSet;
}

bool OAIGoogleCloudAiplatformV1ExportDataConfig::is_filter_split_Valid() const{
    return m_filter_split_isValid;
}

OAIGoogleCloudAiplatformV1ExportFractionSplit OAIGoogleCloudAiplatformV1ExportDataConfig::getFractionSplit() const {
    return m_fraction_split;
}
void OAIGoogleCloudAiplatformV1ExportDataConfig::setFractionSplit(const OAIGoogleCloudAiplatformV1ExportFractionSplit &fraction_split) {
    m_fraction_split = fraction_split;
    m_fraction_split_isSet = true;
}

bool OAIGoogleCloudAiplatformV1ExportDataConfig::is_fraction_split_Set() const{
    return m_fraction_split_isSet;
}

bool OAIGoogleCloudAiplatformV1ExportDataConfig::is_fraction_split_Valid() const{
    return m_fraction_split_isValid;
}

OAIGoogleCloudAiplatformV1GcsDestination OAIGoogleCloudAiplatformV1ExportDataConfig::getGcsDestination() const {
    return m_gcs_destination;
}
void OAIGoogleCloudAiplatformV1ExportDataConfig::setGcsDestination(const OAIGoogleCloudAiplatformV1GcsDestination &gcs_destination) {
    m_gcs_destination = gcs_destination;
    m_gcs_destination_isSet = true;
}

bool OAIGoogleCloudAiplatformV1ExportDataConfig::is_gcs_destination_Set() const{
    return m_gcs_destination_isSet;
}

bool OAIGoogleCloudAiplatformV1ExportDataConfig::is_gcs_destination_Valid() const{
    return m_gcs_destination_isValid;
}

QString OAIGoogleCloudAiplatformV1ExportDataConfig::getSavedQueryId() const {
    return m_saved_query_id;
}
void OAIGoogleCloudAiplatformV1ExportDataConfig::setSavedQueryId(const QString &saved_query_id) {
    m_saved_query_id = saved_query_id;
    m_saved_query_id_isSet = true;
}

bool OAIGoogleCloudAiplatformV1ExportDataConfig::is_saved_query_id_Set() const{
    return m_saved_query_id_isSet;
}

bool OAIGoogleCloudAiplatformV1ExportDataConfig::is_saved_query_id_Valid() const{
    return m_saved_query_id_isValid;
}

bool OAIGoogleCloudAiplatformV1ExportDataConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_annotation_schema_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_annotations_filter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_export_use_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filter_split.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_fraction_split.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_gcs_destination.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_saved_query_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudAiplatformV1ExportDataConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
