/**
 * Vertex AI API
 * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIntelligenceCloudAutomlXpsMetricEntry.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIntelligenceCloudAutomlXpsMetricEntry::OAIIntelligenceCloudAutomlXpsMetricEntry(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIntelligenceCloudAutomlXpsMetricEntry::OAIIntelligenceCloudAutomlXpsMetricEntry() {
    this->initializeModel();
}

OAIIntelligenceCloudAutomlXpsMetricEntry::~OAIIntelligenceCloudAutomlXpsMetricEntry() {}

void OAIIntelligenceCloudAutomlXpsMetricEntry::initializeModel() {

    m_argentum_metric_id_isSet = false;
    m_argentum_metric_id_isValid = false;

    m_double_value_isSet = false;
    m_double_value_isValid = false;

    m_int64_value_isSet = false;
    m_int64_value_isValid = false;

    m_metric_name_isSet = false;
    m_metric_name_isValid = false;

    m_system_labels_isSet = false;
    m_system_labels_isValid = false;
}

void OAIIntelligenceCloudAutomlXpsMetricEntry::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIntelligenceCloudAutomlXpsMetricEntry::fromJsonObject(QJsonObject json) {

    m_argentum_metric_id_isValid = ::OpenAPI::fromJsonValue(m_argentum_metric_id, json[QString("argentumMetricId")]);
    m_argentum_metric_id_isSet = !json[QString("argentumMetricId")].isNull() && m_argentum_metric_id_isValid;

    m_double_value_isValid = ::OpenAPI::fromJsonValue(m_double_value, json[QString("doubleValue")]);
    m_double_value_isSet = !json[QString("doubleValue")].isNull() && m_double_value_isValid;

    m_int64_value_isValid = ::OpenAPI::fromJsonValue(m_int64_value, json[QString("int64Value")]);
    m_int64_value_isSet = !json[QString("int64Value")].isNull() && m_int64_value_isValid;

    m_metric_name_isValid = ::OpenAPI::fromJsonValue(m_metric_name, json[QString("metricName")]);
    m_metric_name_isSet = !json[QString("metricName")].isNull() && m_metric_name_isValid;

    m_system_labels_isValid = ::OpenAPI::fromJsonValue(m_system_labels, json[QString("systemLabels")]);
    m_system_labels_isSet = !json[QString("systemLabels")].isNull() && m_system_labels_isValid;
}

QString OAIIntelligenceCloudAutomlXpsMetricEntry::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIntelligenceCloudAutomlXpsMetricEntry::asJsonObject() const {
    QJsonObject obj;
    if (m_argentum_metric_id_isSet) {
        obj.insert(QString("argentumMetricId"), ::OpenAPI::toJsonValue(m_argentum_metric_id));
    }
    if (m_double_value_isSet) {
        obj.insert(QString("doubleValue"), ::OpenAPI::toJsonValue(m_double_value));
    }
    if (m_int64_value_isSet) {
        obj.insert(QString("int64Value"), ::OpenAPI::toJsonValue(m_int64_value));
    }
    if (m_metric_name_isSet) {
        obj.insert(QString("metricName"), ::OpenAPI::toJsonValue(m_metric_name));
    }
    if (m_system_labels.size() > 0) {
        obj.insert(QString("systemLabels"), ::OpenAPI::toJsonValue(m_system_labels));
    }
    return obj;
}

QString OAIIntelligenceCloudAutomlXpsMetricEntry::getArgentumMetricId() const {
    return m_argentum_metric_id;
}
void OAIIntelligenceCloudAutomlXpsMetricEntry::setArgentumMetricId(const QString &argentum_metric_id) {
    m_argentum_metric_id = argentum_metric_id;
    m_argentum_metric_id_isSet = true;
}

bool OAIIntelligenceCloudAutomlXpsMetricEntry::is_argentum_metric_id_Set() const{
    return m_argentum_metric_id_isSet;
}

bool OAIIntelligenceCloudAutomlXpsMetricEntry::is_argentum_metric_id_Valid() const{
    return m_argentum_metric_id_isValid;
}

double OAIIntelligenceCloudAutomlXpsMetricEntry::getDoubleValue() const {
    return m_double_value;
}
void OAIIntelligenceCloudAutomlXpsMetricEntry::setDoubleValue(const double &double_value) {
    m_double_value = double_value;
    m_double_value_isSet = true;
}

bool OAIIntelligenceCloudAutomlXpsMetricEntry::is_double_value_Set() const{
    return m_double_value_isSet;
}

bool OAIIntelligenceCloudAutomlXpsMetricEntry::is_double_value_Valid() const{
    return m_double_value_isValid;
}

QString OAIIntelligenceCloudAutomlXpsMetricEntry::getInt64Value() const {
    return m_int64_value;
}
void OAIIntelligenceCloudAutomlXpsMetricEntry::setInt64Value(const QString &int64_value) {
    m_int64_value = int64_value;
    m_int64_value_isSet = true;
}

bool OAIIntelligenceCloudAutomlXpsMetricEntry::is_int64_value_Set() const{
    return m_int64_value_isSet;
}

bool OAIIntelligenceCloudAutomlXpsMetricEntry::is_int64_value_Valid() const{
    return m_int64_value_isValid;
}

QString OAIIntelligenceCloudAutomlXpsMetricEntry::getMetricName() const {
    return m_metric_name;
}
void OAIIntelligenceCloudAutomlXpsMetricEntry::setMetricName(const QString &metric_name) {
    m_metric_name = metric_name;
    m_metric_name_isSet = true;
}

bool OAIIntelligenceCloudAutomlXpsMetricEntry::is_metric_name_Set() const{
    return m_metric_name_isSet;
}

bool OAIIntelligenceCloudAutomlXpsMetricEntry::is_metric_name_Valid() const{
    return m_metric_name_isValid;
}

QList<OAIIntelligenceCloudAutomlXpsMetricEntryLabel> OAIIntelligenceCloudAutomlXpsMetricEntry::getSystemLabels() const {
    return m_system_labels;
}
void OAIIntelligenceCloudAutomlXpsMetricEntry::setSystemLabels(const QList<OAIIntelligenceCloudAutomlXpsMetricEntryLabel> &system_labels) {
    m_system_labels = system_labels;
    m_system_labels_isSet = true;
}

bool OAIIntelligenceCloudAutomlXpsMetricEntry::is_system_labels_Set() const{
    return m_system_labels_isSet;
}

bool OAIIntelligenceCloudAutomlXpsMetricEntry::is_system_labels_Valid() const{
    return m_system_labels_isValid;
}

bool OAIIntelligenceCloudAutomlXpsMetricEntry::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_argentum_metric_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_double_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_int64_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metric_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_system_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIntelligenceCloudAutomlXpsMetricEntry::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
