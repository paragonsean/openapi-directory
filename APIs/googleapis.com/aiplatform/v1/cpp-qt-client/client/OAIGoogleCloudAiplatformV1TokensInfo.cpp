/**
 * Vertex AI API
 * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudAiplatformV1TokensInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudAiplatformV1TokensInfo::OAIGoogleCloudAiplatformV1TokensInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudAiplatformV1TokensInfo::OAIGoogleCloudAiplatformV1TokensInfo() {
    this->initializeModel();
}

OAIGoogleCloudAiplatformV1TokensInfo::~OAIGoogleCloudAiplatformV1TokensInfo() {}

void OAIGoogleCloudAiplatformV1TokensInfo::initializeModel() {

    m_token_ids_isSet = false;
    m_token_ids_isValid = false;

    m_tokens_isSet = false;
    m_tokens_isValid = false;
}

void OAIGoogleCloudAiplatformV1TokensInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudAiplatformV1TokensInfo::fromJsonObject(QJsonObject json) {

    m_token_ids_isValid = ::OpenAPI::fromJsonValue(m_token_ids, json[QString("tokenIds")]);
    m_token_ids_isSet = !json[QString("tokenIds")].isNull() && m_token_ids_isValid;

    m_tokens_isValid = ::OpenAPI::fromJsonValue(m_tokens, json[QString("tokens")]);
    m_tokens_isSet = !json[QString("tokens")].isNull() && m_tokens_isValid;
}

QString OAIGoogleCloudAiplatformV1TokensInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudAiplatformV1TokensInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_token_ids.size() > 0) {
        obj.insert(QString("tokenIds"), ::OpenAPI::toJsonValue(m_token_ids));
    }
    if (m_tokens.size() > 0) {
        obj.insert(QString("tokens"), ::OpenAPI::toJsonValue(m_tokens));
    }
    return obj;
}

QList<QString> OAIGoogleCloudAiplatformV1TokensInfo::getTokenIds() const {
    return m_token_ids;
}
void OAIGoogleCloudAiplatformV1TokensInfo::setTokenIds(const QList<QString> &token_ids) {
    m_token_ids = token_ids;
    m_token_ids_isSet = true;
}

bool OAIGoogleCloudAiplatformV1TokensInfo::is_token_ids_Set() const{
    return m_token_ids_isSet;
}

bool OAIGoogleCloudAiplatformV1TokensInfo::is_token_ids_Valid() const{
    return m_token_ids_isValid;
}

QList<QByteArray> OAIGoogleCloudAiplatformV1TokensInfo::getTokens() const {
    return m_tokens;
}
void OAIGoogleCloudAiplatformV1TokensInfo::setTokens(const QList<QByteArray> &tokens) {
    m_tokens = tokens;
    m_tokens_isSet = true;
}

bool OAIGoogleCloudAiplatformV1TokensInfo::is_tokens_Set() const{
    return m_tokens_isSet;
}

bool OAIGoogleCloudAiplatformV1TokensInfo::is_tokens_Valid() const{
    return m_tokens_isValid;
}

bool OAIGoogleCloudAiplatformV1TokensInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_token_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_tokens.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudAiplatformV1TokensInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
