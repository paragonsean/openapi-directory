/**
 * Vertex AI API
 * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINlpSaftLangIdResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINlpSaftLangIdResult::OAINlpSaftLangIdResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINlpSaftLangIdResult::OAINlpSaftLangIdResult() {
    this->initializeModel();
}

OAINlpSaftLangIdResult::~OAINlpSaftLangIdResult() {}

void OAINlpSaftLangIdResult::initializeModel() {

    m_model_version_isSet = false;
    m_model_version_isValid = false;

    m_predictions_isSet = false;
    m_predictions_isValid = false;

    m_span_predictions_isSet = false;
    m_span_predictions_isValid = false;
}

void OAINlpSaftLangIdResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINlpSaftLangIdResult::fromJsonObject(QJsonObject json) {

    m_model_version_isValid = ::OpenAPI::fromJsonValue(m_model_version, json[QString("modelVersion")]);
    m_model_version_isSet = !json[QString("modelVersion")].isNull() && m_model_version_isValid;

    m_predictions_isValid = ::OpenAPI::fromJsonValue(m_predictions, json[QString("predictions")]);
    m_predictions_isSet = !json[QString("predictions")].isNull() && m_predictions_isValid;

    m_span_predictions_isValid = ::OpenAPI::fromJsonValue(m_span_predictions, json[QString("spanPredictions")]);
    m_span_predictions_isSet = !json[QString("spanPredictions")].isNull() && m_span_predictions_isValid;
}

QString OAINlpSaftLangIdResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINlpSaftLangIdResult::asJsonObject() const {
    QJsonObject obj;
    if (m_model_version_isSet) {
        obj.insert(QString("modelVersion"), ::OpenAPI::toJsonValue(m_model_version));
    }
    if (m_predictions.size() > 0) {
        obj.insert(QString("predictions"), ::OpenAPI::toJsonValue(m_predictions));
    }
    if (m_span_predictions.size() > 0) {
        obj.insert(QString("spanPredictions"), ::OpenAPI::toJsonValue(m_span_predictions));
    }
    return obj;
}

QString OAINlpSaftLangIdResult::getModelVersion() const {
    return m_model_version;
}
void OAINlpSaftLangIdResult::setModelVersion(const QString &model_version) {
    m_model_version = model_version;
    m_model_version_isSet = true;
}

bool OAINlpSaftLangIdResult::is_model_version_Set() const{
    return m_model_version_isSet;
}

bool OAINlpSaftLangIdResult::is_model_version_Valid() const{
    return m_model_version_isValid;
}

QList<OAINlpSaftLanguageSpan> OAINlpSaftLangIdResult::getPredictions() const {
    return m_predictions;
}
void OAINlpSaftLangIdResult::setPredictions(const QList<OAINlpSaftLanguageSpan> &predictions) {
    m_predictions = predictions;
    m_predictions_isSet = true;
}

bool OAINlpSaftLangIdResult::is_predictions_Set() const{
    return m_predictions_isSet;
}

bool OAINlpSaftLangIdResult::is_predictions_Valid() const{
    return m_predictions_isValid;
}

QList<OAINlpSaftLanguageSpanSequence> OAINlpSaftLangIdResult::getSpanPredictions() const {
    return m_span_predictions;
}
void OAINlpSaftLangIdResult::setSpanPredictions(const QList<OAINlpSaftLanguageSpanSequence> &span_predictions) {
    m_span_predictions = span_predictions;
    m_span_predictions_isSet = true;
}

bool OAINlpSaftLangIdResult::is_span_predictions_Set() const{
    return m_span_predictions_isSet;
}

bool OAINlpSaftLangIdResult::is_span_predictions_Valid() const{
    return m_span_predictions_isValid;
}

bool OAINlpSaftLangIdResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_model_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_predictions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_span_predictions.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINlpSaftLangIdResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
