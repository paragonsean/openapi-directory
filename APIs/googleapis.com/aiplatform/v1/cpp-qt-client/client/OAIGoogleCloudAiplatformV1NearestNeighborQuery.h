/**
 * Vertex AI API
 * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGoogleCloudAiplatformV1NearestNeighborQuery.h
 *
 * A query to find a number of similar entities.
 */

#ifndef OAIGoogleCloudAiplatformV1NearestNeighborQuery_H
#define OAIGoogleCloudAiplatformV1NearestNeighborQuery_H

#include <QJsonObject>

#include "OAIGoogleCloudAiplatformV1NearestNeighborQueryEmbedding.h"
#include "OAIGoogleCloudAiplatformV1NearestNeighborQueryParameters.h"
#include "OAIGoogleCloudAiplatformV1NearestNeighborQueryStringFilter.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIGoogleCloudAiplatformV1NearestNeighborQueryEmbedding;
class OAIGoogleCloudAiplatformV1NearestNeighborQueryParameters;
class OAIGoogleCloudAiplatformV1NearestNeighborQueryStringFilter;

class OAIGoogleCloudAiplatformV1NearestNeighborQuery : public OAIObject {
public:
    OAIGoogleCloudAiplatformV1NearestNeighborQuery();
    OAIGoogleCloudAiplatformV1NearestNeighborQuery(QString json);
    ~OAIGoogleCloudAiplatformV1NearestNeighborQuery() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIGoogleCloudAiplatformV1NearestNeighborQueryEmbedding getEmbedding() const;
    void setEmbedding(const OAIGoogleCloudAiplatformV1NearestNeighborQueryEmbedding &embedding);
    bool is_embedding_Set() const;
    bool is_embedding_Valid() const;

    QString getEntityId() const;
    void setEntityId(const QString &entity_id);
    bool is_entity_id_Set() const;
    bool is_entity_id_Valid() const;

    qint32 getNeighborCount() const;
    void setNeighborCount(const qint32 &neighbor_count);
    bool is_neighbor_count_Set() const;
    bool is_neighbor_count_Valid() const;

    OAIGoogleCloudAiplatformV1NearestNeighborQueryParameters getParameters() const;
    void setParameters(const OAIGoogleCloudAiplatformV1NearestNeighborQueryParameters &parameters);
    bool is_parameters_Set() const;
    bool is_parameters_Valid() const;

    qint32 getPerCrowdingAttributeNeighborCount() const;
    void setPerCrowdingAttributeNeighborCount(const qint32 &per_crowding_attribute_neighbor_count);
    bool is_per_crowding_attribute_neighbor_count_Set() const;
    bool is_per_crowding_attribute_neighbor_count_Valid() const;

    QList<OAIGoogleCloudAiplatformV1NearestNeighborQueryStringFilter> getStringFilters() const;
    void setStringFilters(const QList<OAIGoogleCloudAiplatformV1NearestNeighborQueryStringFilter> &string_filters);
    bool is_string_filters_Set() const;
    bool is_string_filters_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIGoogleCloudAiplatformV1NearestNeighborQueryEmbedding m_embedding;
    bool m_embedding_isSet;
    bool m_embedding_isValid;

    QString m_entity_id;
    bool m_entity_id_isSet;
    bool m_entity_id_isValid;

    qint32 m_neighbor_count;
    bool m_neighbor_count_isSet;
    bool m_neighbor_count_isValid;

    OAIGoogleCloudAiplatformV1NearestNeighborQueryParameters m_parameters;
    bool m_parameters_isSet;
    bool m_parameters_isValid;

    qint32 m_per_crowding_attribute_neighbor_count;
    bool m_per_crowding_attribute_neighbor_count_isSet;
    bool m_per_crowding_attribute_neighbor_count_isValid;

    QList<OAIGoogleCloudAiplatformV1NearestNeighborQueryStringFilter> m_string_filters;
    bool m_string_filters_isSet;
    bool m_string_filters_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGoogleCloudAiplatformV1NearestNeighborQuery)

#endif // OAIGoogleCloudAiplatformV1NearestNeighborQuery_H
