/**
 * Vertex AI API
 * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudAiplatformV1CreateFeatureRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudAiplatformV1CreateFeatureRequest::OAIGoogleCloudAiplatformV1CreateFeatureRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudAiplatformV1CreateFeatureRequest::OAIGoogleCloudAiplatformV1CreateFeatureRequest() {
    this->initializeModel();
}

OAIGoogleCloudAiplatformV1CreateFeatureRequest::~OAIGoogleCloudAiplatformV1CreateFeatureRequest() {}

void OAIGoogleCloudAiplatformV1CreateFeatureRequest::initializeModel() {

    m_feature_isSet = false;
    m_feature_isValid = false;

    m_feature_id_isSet = false;
    m_feature_id_isValid = false;

    m_parent_isSet = false;
    m_parent_isValid = false;
}

void OAIGoogleCloudAiplatformV1CreateFeatureRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudAiplatformV1CreateFeatureRequest::fromJsonObject(QJsonObject json) {

    m_feature_isValid = ::OpenAPI::fromJsonValue(m_feature, json[QString("feature")]);
    m_feature_isSet = !json[QString("feature")].isNull() && m_feature_isValid;

    m_feature_id_isValid = ::OpenAPI::fromJsonValue(m_feature_id, json[QString("featureId")]);
    m_feature_id_isSet = !json[QString("featureId")].isNull() && m_feature_id_isValid;

    m_parent_isValid = ::OpenAPI::fromJsonValue(m_parent, json[QString("parent")]);
    m_parent_isSet = !json[QString("parent")].isNull() && m_parent_isValid;
}

QString OAIGoogleCloudAiplatformV1CreateFeatureRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudAiplatformV1CreateFeatureRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_feature.isSet()) {
        obj.insert(QString("feature"), ::OpenAPI::toJsonValue(m_feature));
    }
    if (m_feature_id_isSet) {
        obj.insert(QString("featureId"), ::OpenAPI::toJsonValue(m_feature_id));
    }
    if (m_parent_isSet) {
        obj.insert(QString("parent"), ::OpenAPI::toJsonValue(m_parent));
    }
    return obj;
}

OAIGoogleCloudAiplatformV1Feature OAIGoogleCloudAiplatformV1CreateFeatureRequest::getFeature() const {
    return m_feature;
}
void OAIGoogleCloudAiplatformV1CreateFeatureRequest::setFeature(const OAIGoogleCloudAiplatformV1Feature &feature) {
    m_feature = feature;
    m_feature_isSet = true;
}

bool OAIGoogleCloudAiplatformV1CreateFeatureRequest::is_feature_Set() const{
    return m_feature_isSet;
}

bool OAIGoogleCloudAiplatformV1CreateFeatureRequest::is_feature_Valid() const{
    return m_feature_isValid;
}

QString OAIGoogleCloudAiplatformV1CreateFeatureRequest::getFeatureId() const {
    return m_feature_id;
}
void OAIGoogleCloudAiplatformV1CreateFeatureRequest::setFeatureId(const QString &feature_id) {
    m_feature_id = feature_id;
    m_feature_id_isSet = true;
}

bool OAIGoogleCloudAiplatformV1CreateFeatureRequest::is_feature_id_Set() const{
    return m_feature_id_isSet;
}

bool OAIGoogleCloudAiplatformV1CreateFeatureRequest::is_feature_id_Valid() const{
    return m_feature_id_isValid;
}

QString OAIGoogleCloudAiplatformV1CreateFeatureRequest::getParent() const {
    return m_parent;
}
void OAIGoogleCloudAiplatformV1CreateFeatureRequest::setParent(const QString &parent) {
    m_parent = parent;
    m_parent_isSet = true;
}

bool OAIGoogleCloudAiplatformV1CreateFeatureRequest::is_parent_Set() const{
    return m_parent_isSet;
}

bool OAIGoogleCloudAiplatformV1CreateFeatureRequest::is_parent_Valid() const{
    return m_parent_isValid;
}

bool OAIGoogleCloudAiplatformV1CreateFeatureRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_feature.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_feature_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudAiplatformV1CreateFeatureRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
