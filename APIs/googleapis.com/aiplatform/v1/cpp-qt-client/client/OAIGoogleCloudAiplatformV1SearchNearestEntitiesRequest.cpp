/**
 * Vertex AI API
 * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudAiplatformV1SearchNearestEntitiesRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudAiplatformV1SearchNearestEntitiesRequest::OAIGoogleCloudAiplatformV1SearchNearestEntitiesRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudAiplatformV1SearchNearestEntitiesRequest::OAIGoogleCloudAiplatformV1SearchNearestEntitiesRequest() {
    this->initializeModel();
}

OAIGoogleCloudAiplatformV1SearchNearestEntitiesRequest::~OAIGoogleCloudAiplatformV1SearchNearestEntitiesRequest() {}

void OAIGoogleCloudAiplatformV1SearchNearestEntitiesRequest::initializeModel() {

    m_query_isSet = false;
    m_query_isValid = false;

    m_return_full_entity_isSet = false;
    m_return_full_entity_isValid = false;
}

void OAIGoogleCloudAiplatformV1SearchNearestEntitiesRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudAiplatformV1SearchNearestEntitiesRequest::fromJsonObject(QJsonObject json) {

    m_query_isValid = ::OpenAPI::fromJsonValue(m_query, json[QString("query")]);
    m_query_isSet = !json[QString("query")].isNull() && m_query_isValid;

    m_return_full_entity_isValid = ::OpenAPI::fromJsonValue(m_return_full_entity, json[QString("returnFullEntity")]);
    m_return_full_entity_isSet = !json[QString("returnFullEntity")].isNull() && m_return_full_entity_isValid;
}

QString OAIGoogleCloudAiplatformV1SearchNearestEntitiesRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudAiplatformV1SearchNearestEntitiesRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_query.isSet()) {
        obj.insert(QString("query"), ::OpenAPI::toJsonValue(m_query));
    }
    if (m_return_full_entity_isSet) {
        obj.insert(QString("returnFullEntity"), ::OpenAPI::toJsonValue(m_return_full_entity));
    }
    return obj;
}

OAIGoogleCloudAiplatformV1NearestNeighborQuery OAIGoogleCloudAiplatformV1SearchNearestEntitiesRequest::getQuery() const {
    return m_query;
}
void OAIGoogleCloudAiplatformV1SearchNearestEntitiesRequest::setQuery(const OAIGoogleCloudAiplatformV1NearestNeighborQuery &query) {
    m_query = query;
    m_query_isSet = true;
}

bool OAIGoogleCloudAiplatformV1SearchNearestEntitiesRequest::is_query_Set() const{
    return m_query_isSet;
}

bool OAIGoogleCloudAiplatformV1SearchNearestEntitiesRequest::is_query_Valid() const{
    return m_query_isValid;
}

bool OAIGoogleCloudAiplatformV1SearchNearestEntitiesRequest::isReturnFullEntity() const {
    return m_return_full_entity;
}
void OAIGoogleCloudAiplatformV1SearchNearestEntitiesRequest::setReturnFullEntity(const bool &return_full_entity) {
    m_return_full_entity = return_full_entity;
    m_return_full_entity_isSet = true;
}

bool OAIGoogleCloudAiplatformV1SearchNearestEntitiesRequest::is_return_full_entity_Set() const{
    return m_return_full_entity_isSet;
}

bool OAIGoogleCloudAiplatformV1SearchNearestEntitiesRequest::is_return_full_entity_Valid() const{
    return m_return_full_entity_isValid;
}

bool OAIGoogleCloudAiplatformV1SearchNearestEntitiesRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_query.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_return_full_entity_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudAiplatformV1SearchNearestEntitiesRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
