/**
 * Vertex AI API
 * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudAiplatformV1UploadModelRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudAiplatformV1UploadModelRequest::OAIGoogleCloudAiplatformV1UploadModelRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudAiplatformV1UploadModelRequest::OAIGoogleCloudAiplatformV1UploadModelRequest() {
    this->initializeModel();
}

OAIGoogleCloudAiplatformV1UploadModelRequest::~OAIGoogleCloudAiplatformV1UploadModelRequest() {}

void OAIGoogleCloudAiplatformV1UploadModelRequest::initializeModel() {

    m_model_isSet = false;
    m_model_isValid = false;

    m_model_id_isSet = false;
    m_model_id_isValid = false;

    m_parent_model_isSet = false;
    m_parent_model_isValid = false;

    m_service_account_isSet = false;
    m_service_account_isValid = false;
}

void OAIGoogleCloudAiplatformV1UploadModelRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudAiplatformV1UploadModelRequest::fromJsonObject(QJsonObject json) {

    m_model_isValid = ::OpenAPI::fromJsonValue(m_model, json[QString("model")]);
    m_model_isSet = !json[QString("model")].isNull() && m_model_isValid;

    m_model_id_isValid = ::OpenAPI::fromJsonValue(m_model_id, json[QString("modelId")]);
    m_model_id_isSet = !json[QString("modelId")].isNull() && m_model_id_isValid;

    m_parent_model_isValid = ::OpenAPI::fromJsonValue(m_parent_model, json[QString("parentModel")]);
    m_parent_model_isSet = !json[QString("parentModel")].isNull() && m_parent_model_isValid;

    m_service_account_isValid = ::OpenAPI::fromJsonValue(m_service_account, json[QString("serviceAccount")]);
    m_service_account_isSet = !json[QString("serviceAccount")].isNull() && m_service_account_isValid;
}

QString OAIGoogleCloudAiplatformV1UploadModelRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudAiplatformV1UploadModelRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_model.isSet()) {
        obj.insert(QString("model"), ::OpenAPI::toJsonValue(m_model));
    }
    if (m_model_id_isSet) {
        obj.insert(QString("modelId"), ::OpenAPI::toJsonValue(m_model_id));
    }
    if (m_parent_model_isSet) {
        obj.insert(QString("parentModel"), ::OpenAPI::toJsonValue(m_parent_model));
    }
    if (m_service_account_isSet) {
        obj.insert(QString("serviceAccount"), ::OpenAPI::toJsonValue(m_service_account));
    }
    return obj;
}

OAIGoogleCloudAiplatformV1Model OAIGoogleCloudAiplatformV1UploadModelRequest::getModel() const {
    return m_model;
}
void OAIGoogleCloudAiplatformV1UploadModelRequest::setModel(const OAIGoogleCloudAiplatformV1Model &model) {
    m_model = model;
    m_model_isSet = true;
}

bool OAIGoogleCloudAiplatformV1UploadModelRequest::is_model_Set() const{
    return m_model_isSet;
}

bool OAIGoogleCloudAiplatformV1UploadModelRequest::is_model_Valid() const{
    return m_model_isValid;
}

QString OAIGoogleCloudAiplatformV1UploadModelRequest::getModelId() const {
    return m_model_id;
}
void OAIGoogleCloudAiplatformV1UploadModelRequest::setModelId(const QString &model_id) {
    m_model_id = model_id;
    m_model_id_isSet = true;
}

bool OAIGoogleCloudAiplatformV1UploadModelRequest::is_model_id_Set() const{
    return m_model_id_isSet;
}

bool OAIGoogleCloudAiplatformV1UploadModelRequest::is_model_id_Valid() const{
    return m_model_id_isValid;
}

QString OAIGoogleCloudAiplatformV1UploadModelRequest::getParentModel() const {
    return m_parent_model;
}
void OAIGoogleCloudAiplatformV1UploadModelRequest::setParentModel(const QString &parent_model) {
    m_parent_model = parent_model;
    m_parent_model_isSet = true;
}

bool OAIGoogleCloudAiplatformV1UploadModelRequest::is_parent_model_Set() const{
    return m_parent_model_isSet;
}

bool OAIGoogleCloudAiplatformV1UploadModelRequest::is_parent_model_Valid() const{
    return m_parent_model_isValid;
}

QString OAIGoogleCloudAiplatformV1UploadModelRequest::getServiceAccount() const {
    return m_service_account;
}
void OAIGoogleCloudAiplatformV1UploadModelRequest::setServiceAccount(const QString &service_account) {
    m_service_account = service_account;
    m_service_account_isSet = true;
}

bool OAIGoogleCloudAiplatformV1UploadModelRequest::is_service_account_Set() const{
    return m_service_account_isSet;
}

bool OAIGoogleCloudAiplatformV1UploadModelRequest::is_service_account_Valid() const{
    return m_service_account_isValid;
}

bool OAIGoogleCloudAiplatformV1UploadModelRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_model.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_model_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_account_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudAiplatformV1UploadModelRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
