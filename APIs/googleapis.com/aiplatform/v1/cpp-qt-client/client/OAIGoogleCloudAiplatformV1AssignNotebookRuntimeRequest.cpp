/**
 * Vertex AI API
 * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudAiplatformV1AssignNotebookRuntimeRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudAiplatformV1AssignNotebookRuntimeRequest::OAIGoogleCloudAiplatformV1AssignNotebookRuntimeRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudAiplatformV1AssignNotebookRuntimeRequest::OAIGoogleCloudAiplatformV1AssignNotebookRuntimeRequest() {
    this->initializeModel();
}

OAIGoogleCloudAiplatformV1AssignNotebookRuntimeRequest::~OAIGoogleCloudAiplatformV1AssignNotebookRuntimeRequest() {}

void OAIGoogleCloudAiplatformV1AssignNotebookRuntimeRequest::initializeModel() {

    m_notebook_runtime_isSet = false;
    m_notebook_runtime_isValid = false;

    m_notebook_runtime_id_isSet = false;
    m_notebook_runtime_id_isValid = false;

    m_notebook_runtime_template_isSet = false;
    m_notebook_runtime_template_isValid = false;
}

void OAIGoogleCloudAiplatformV1AssignNotebookRuntimeRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudAiplatformV1AssignNotebookRuntimeRequest::fromJsonObject(QJsonObject json) {

    m_notebook_runtime_isValid = ::OpenAPI::fromJsonValue(m_notebook_runtime, json[QString("notebookRuntime")]);
    m_notebook_runtime_isSet = !json[QString("notebookRuntime")].isNull() && m_notebook_runtime_isValid;

    m_notebook_runtime_id_isValid = ::OpenAPI::fromJsonValue(m_notebook_runtime_id, json[QString("notebookRuntimeId")]);
    m_notebook_runtime_id_isSet = !json[QString("notebookRuntimeId")].isNull() && m_notebook_runtime_id_isValid;

    m_notebook_runtime_template_isValid = ::OpenAPI::fromJsonValue(m_notebook_runtime_template, json[QString("notebookRuntimeTemplate")]);
    m_notebook_runtime_template_isSet = !json[QString("notebookRuntimeTemplate")].isNull() && m_notebook_runtime_template_isValid;
}

QString OAIGoogleCloudAiplatformV1AssignNotebookRuntimeRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudAiplatformV1AssignNotebookRuntimeRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_notebook_runtime.isSet()) {
        obj.insert(QString("notebookRuntime"), ::OpenAPI::toJsonValue(m_notebook_runtime));
    }
    if (m_notebook_runtime_id_isSet) {
        obj.insert(QString("notebookRuntimeId"), ::OpenAPI::toJsonValue(m_notebook_runtime_id));
    }
    if (m_notebook_runtime_template_isSet) {
        obj.insert(QString("notebookRuntimeTemplate"), ::OpenAPI::toJsonValue(m_notebook_runtime_template));
    }
    return obj;
}

OAIGoogleCloudAiplatformV1NotebookRuntime OAIGoogleCloudAiplatformV1AssignNotebookRuntimeRequest::getNotebookRuntime() const {
    return m_notebook_runtime;
}
void OAIGoogleCloudAiplatformV1AssignNotebookRuntimeRequest::setNotebookRuntime(const OAIGoogleCloudAiplatformV1NotebookRuntime &notebook_runtime) {
    m_notebook_runtime = notebook_runtime;
    m_notebook_runtime_isSet = true;
}

bool OAIGoogleCloudAiplatformV1AssignNotebookRuntimeRequest::is_notebook_runtime_Set() const{
    return m_notebook_runtime_isSet;
}

bool OAIGoogleCloudAiplatformV1AssignNotebookRuntimeRequest::is_notebook_runtime_Valid() const{
    return m_notebook_runtime_isValid;
}

QString OAIGoogleCloudAiplatformV1AssignNotebookRuntimeRequest::getNotebookRuntimeId() const {
    return m_notebook_runtime_id;
}
void OAIGoogleCloudAiplatformV1AssignNotebookRuntimeRequest::setNotebookRuntimeId(const QString &notebook_runtime_id) {
    m_notebook_runtime_id = notebook_runtime_id;
    m_notebook_runtime_id_isSet = true;
}

bool OAIGoogleCloudAiplatformV1AssignNotebookRuntimeRequest::is_notebook_runtime_id_Set() const{
    return m_notebook_runtime_id_isSet;
}

bool OAIGoogleCloudAiplatformV1AssignNotebookRuntimeRequest::is_notebook_runtime_id_Valid() const{
    return m_notebook_runtime_id_isValid;
}

QString OAIGoogleCloudAiplatformV1AssignNotebookRuntimeRequest::getNotebookRuntimeTemplate() const {
    return m_notebook_runtime_template;
}
void OAIGoogleCloudAiplatformV1AssignNotebookRuntimeRequest::setNotebookRuntimeTemplate(const QString &notebook_runtime_template) {
    m_notebook_runtime_template = notebook_runtime_template;
    m_notebook_runtime_template_isSet = true;
}

bool OAIGoogleCloudAiplatformV1AssignNotebookRuntimeRequest::is_notebook_runtime_template_Set() const{
    return m_notebook_runtime_template_isSet;
}

bool OAIGoogleCloudAiplatformV1AssignNotebookRuntimeRequest::is_notebook_runtime_template_Valid() const{
    return m_notebook_runtime_template_isValid;
}

bool OAIGoogleCloudAiplatformV1AssignNotebookRuntimeRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_notebook_runtime.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_notebook_runtime_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notebook_runtime_template_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudAiplatformV1AssignNotebookRuntimeRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
