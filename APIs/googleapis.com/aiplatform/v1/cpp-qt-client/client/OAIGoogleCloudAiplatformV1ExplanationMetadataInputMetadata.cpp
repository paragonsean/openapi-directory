/**
 * Vertex AI API
 * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudAiplatformV1ExplanationMetadataInputMetadata.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudAiplatformV1ExplanationMetadataInputMetadata::OAIGoogleCloudAiplatformV1ExplanationMetadataInputMetadata(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudAiplatformV1ExplanationMetadataInputMetadata::OAIGoogleCloudAiplatformV1ExplanationMetadataInputMetadata() {
    this->initializeModel();
}

OAIGoogleCloudAiplatformV1ExplanationMetadataInputMetadata::~OAIGoogleCloudAiplatformV1ExplanationMetadataInputMetadata() {}

void OAIGoogleCloudAiplatformV1ExplanationMetadataInputMetadata::initializeModel() {

    m_dense_shape_tensor_name_isSet = false;
    m_dense_shape_tensor_name_isValid = false;

    m_encoded_baselines_isSet = false;
    m_encoded_baselines_isValid = false;

    m_encoded_tensor_name_isSet = false;
    m_encoded_tensor_name_isValid = false;

    m_encoding_isSet = false;
    m_encoding_isValid = false;

    m_feature_value_domain_isSet = false;
    m_feature_value_domain_isValid = false;

    m_group_name_isSet = false;
    m_group_name_isValid = false;

    m_index_feature_mapping_isSet = false;
    m_index_feature_mapping_isValid = false;

    m_indices_tensor_name_isSet = false;
    m_indices_tensor_name_isValid = false;

    m_input_baselines_isSet = false;
    m_input_baselines_isValid = false;

    m_input_tensor_name_isSet = false;
    m_input_tensor_name_isValid = false;

    m_modality_isSet = false;
    m_modality_isValid = false;

    m_visualization_isSet = false;
    m_visualization_isValid = false;
}

void OAIGoogleCloudAiplatformV1ExplanationMetadataInputMetadata::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudAiplatformV1ExplanationMetadataInputMetadata::fromJsonObject(QJsonObject json) {

    m_dense_shape_tensor_name_isValid = ::OpenAPI::fromJsonValue(m_dense_shape_tensor_name, json[QString("denseShapeTensorName")]);
    m_dense_shape_tensor_name_isSet = !json[QString("denseShapeTensorName")].isNull() && m_dense_shape_tensor_name_isValid;

    m_encoded_baselines_isValid = ::OpenAPI::fromJsonValue(m_encoded_baselines, json[QString("encodedBaselines")]);
    m_encoded_baselines_isSet = !json[QString("encodedBaselines")].isNull() && m_encoded_baselines_isValid;

    m_encoded_tensor_name_isValid = ::OpenAPI::fromJsonValue(m_encoded_tensor_name, json[QString("encodedTensorName")]);
    m_encoded_tensor_name_isSet = !json[QString("encodedTensorName")].isNull() && m_encoded_tensor_name_isValid;

    m_encoding_isValid = ::OpenAPI::fromJsonValue(m_encoding, json[QString("encoding")]);
    m_encoding_isSet = !json[QString("encoding")].isNull() && m_encoding_isValid;

    m_feature_value_domain_isValid = ::OpenAPI::fromJsonValue(m_feature_value_domain, json[QString("featureValueDomain")]);
    m_feature_value_domain_isSet = !json[QString("featureValueDomain")].isNull() && m_feature_value_domain_isValid;

    m_group_name_isValid = ::OpenAPI::fromJsonValue(m_group_name, json[QString("groupName")]);
    m_group_name_isSet = !json[QString("groupName")].isNull() && m_group_name_isValid;

    m_index_feature_mapping_isValid = ::OpenAPI::fromJsonValue(m_index_feature_mapping, json[QString("indexFeatureMapping")]);
    m_index_feature_mapping_isSet = !json[QString("indexFeatureMapping")].isNull() && m_index_feature_mapping_isValid;

    m_indices_tensor_name_isValid = ::OpenAPI::fromJsonValue(m_indices_tensor_name, json[QString("indicesTensorName")]);
    m_indices_tensor_name_isSet = !json[QString("indicesTensorName")].isNull() && m_indices_tensor_name_isValid;

    m_input_baselines_isValid = ::OpenAPI::fromJsonValue(m_input_baselines, json[QString("inputBaselines")]);
    m_input_baselines_isSet = !json[QString("inputBaselines")].isNull() && m_input_baselines_isValid;

    m_input_tensor_name_isValid = ::OpenAPI::fromJsonValue(m_input_tensor_name, json[QString("inputTensorName")]);
    m_input_tensor_name_isSet = !json[QString("inputTensorName")].isNull() && m_input_tensor_name_isValid;

    m_modality_isValid = ::OpenAPI::fromJsonValue(m_modality, json[QString("modality")]);
    m_modality_isSet = !json[QString("modality")].isNull() && m_modality_isValid;

    m_visualization_isValid = ::OpenAPI::fromJsonValue(m_visualization, json[QString("visualization")]);
    m_visualization_isSet = !json[QString("visualization")].isNull() && m_visualization_isValid;
}

QString OAIGoogleCloudAiplatformV1ExplanationMetadataInputMetadata::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudAiplatformV1ExplanationMetadataInputMetadata::asJsonObject() const {
    QJsonObject obj;
    if (m_dense_shape_tensor_name_isSet) {
        obj.insert(QString("denseShapeTensorName"), ::OpenAPI::toJsonValue(m_dense_shape_tensor_name));
    }
    if (m_encoded_baselines.size() > 0) {
        obj.insert(QString("encodedBaselines"), ::OpenAPI::toJsonValue(m_encoded_baselines));
    }
    if (m_encoded_tensor_name_isSet) {
        obj.insert(QString("encodedTensorName"), ::OpenAPI::toJsonValue(m_encoded_tensor_name));
    }
    if (m_encoding_isSet) {
        obj.insert(QString("encoding"), ::OpenAPI::toJsonValue(m_encoding));
    }
    if (m_feature_value_domain.isSet()) {
        obj.insert(QString("featureValueDomain"), ::OpenAPI::toJsonValue(m_feature_value_domain));
    }
    if (m_group_name_isSet) {
        obj.insert(QString("groupName"), ::OpenAPI::toJsonValue(m_group_name));
    }
    if (m_index_feature_mapping.size() > 0) {
        obj.insert(QString("indexFeatureMapping"), ::OpenAPI::toJsonValue(m_index_feature_mapping));
    }
    if (m_indices_tensor_name_isSet) {
        obj.insert(QString("indicesTensorName"), ::OpenAPI::toJsonValue(m_indices_tensor_name));
    }
    if (m_input_baselines.size() > 0) {
        obj.insert(QString("inputBaselines"), ::OpenAPI::toJsonValue(m_input_baselines));
    }
    if (m_input_tensor_name_isSet) {
        obj.insert(QString("inputTensorName"), ::OpenAPI::toJsonValue(m_input_tensor_name));
    }
    if (m_modality_isSet) {
        obj.insert(QString("modality"), ::OpenAPI::toJsonValue(m_modality));
    }
    if (m_visualization.isSet()) {
        obj.insert(QString("visualization"), ::OpenAPI::toJsonValue(m_visualization));
    }
    return obj;
}

QString OAIGoogleCloudAiplatformV1ExplanationMetadataInputMetadata::getDenseShapeTensorName() const {
    return m_dense_shape_tensor_name;
}
void OAIGoogleCloudAiplatformV1ExplanationMetadataInputMetadata::setDenseShapeTensorName(const QString &dense_shape_tensor_name) {
    m_dense_shape_tensor_name = dense_shape_tensor_name;
    m_dense_shape_tensor_name_isSet = true;
}

bool OAIGoogleCloudAiplatformV1ExplanationMetadataInputMetadata::is_dense_shape_tensor_name_Set() const{
    return m_dense_shape_tensor_name_isSet;
}

bool OAIGoogleCloudAiplatformV1ExplanationMetadataInputMetadata::is_dense_shape_tensor_name_Valid() const{
    return m_dense_shape_tensor_name_isValid;
}

QList<QJsonValue> OAIGoogleCloudAiplatformV1ExplanationMetadataInputMetadata::getEncodedBaselines() const {
    return m_encoded_baselines;
}
void OAIGoogleCloudAiplatformV1ExplanationMetadataInputMetadata::setEncodedBaselines(const QList<QJsonValue> &encoded_baselines) {
    m_encoded_baselines = encoded_baselines;
    m_encoded_baselines_isSet = true;
}

bool OAIGoogleCloudAiplatformV1ExplanationMetadataInputMetadata::is_encoded_baselines_Set() const{
    return m_encoded_baselines_isSet;
}

bool OAIGoogleCloudAiplatformV1ExplanationMetadataInputMetadata::is_encoded_baselines_Valid() const{
    return m_encoded_baselines_isValid;
}

QString OAIGoogleCloudAiplatformV1ExplanationMetadataInputMetadata::getEncodedTensorName() const {
    return m_encoded_tensor_name;
}
void OAIGoogleCloudAiplatformV1ExplanationMetadataInputMetadata::setEncodedTensorName(const QString &encoded_tensor_name) {
    m_encoded_tensor_name = encoded_tensor_name;
    m_encoded_tensor_name_isSet = true;
}

bool OAIGoogleCloudAiplatformV1ExplanationMetadataInputMetadata::is_encoded_tensor_name_Set() const{
    return m_encoded_tensor_name_isSet;
}

bool OAIGoogleCloudAiplatformV1ExplanationMetadataInputMetadata::is_encoded_tensor_name_Valid() const{
    return m_encoded_tensor_name_isValid;
}

QString OAIGoogleCloudAiplatformV1ExplanationMetadataInputMetadata::getEncoding() const {
    return m_encoding;
}
void OAIGoogleCloudAiplatformV1ExplanationMetadataInputMetadata::setEncoding(const QString &encoding) {
    m_encoding = encoding;
    m_encoding_isSet = true;
}

bool OAIGoogleCloudAiplatformV1ExplanationMetadataInputMetadata::is_encoding_Set() const{
    return m_encoding_isSet;
}

bool OAIGoogleCloudAiplatformV1ExplanationMetadataInputMetadata::is_encoding_Valid() const{
    return m_encoding_isValid;
}

OAIGoogleCloudAiplatformV1ExplanationMetadataInputMetadataFeatureValueDomain OAIGoogleCloudAiplatformV1ExplanationMetadataInputMetadata::getFeatureValueDomain() const {
    return m_feature_value_domain;
}
void OAIGoogleCloudAiplatformV1ExplanationMetadataInputMetadata::setFeatureValueDomain(const OAIGoogleCloudAiplatformV1ExplanationMetadataInputMetadataFeatureValueDomain &feature_value_domain) {
    m_feature_value_domain = feature_value_domain;
    m_feature_value_domain_isSet = true;
}

bool OAIGoogleCloudAiplatformV1ExplanationMetadataInputMetadata::is_feature_value_domain_Set() const{
    return m_feature_value_domain_isSet;
}

bool OAIGoogleCloudAiplatformV1ExplanationMetadataInputMetadata::is_feature_value_domain_Valid() const{
    return m_feature_value_domain_isValid;
}

QString OAIGoogleCloudAiplatformV1ExplanationMetadataInputMetadata::getGroupName() const {
    return m_group_name;
}
void OAIGoogleCloudAiplatformV1ExplanationMetadataInputMetadata::setGroupName(const QString &group_name) {
    m_group_name = group_name;
    m_group_name_isSet = true;
}

bool OAIGoogleCloudAiplatformV1ExplanationMetadataInputMetadata::is_group_name_Set() const{
    return m_group_name_isSet;
}

bool OAIGoogleCloudAiplatformV1ExplanationMetadataInputMetadata::is_group_name_Valid() const{
    return m_group_name_isValid;
}

QList<QString> OAIGoogleCloudAiplatformV1ExplanationMetadataInputMetadata::getIndexFeatureMapping() const {
    return m_index_feature_mapping;
}
void OAIGoogleCloudAiplatformV1ExplanationMetadataInputMetadata::setIndexFeatureMapping(const QList<QString> &index_feature_mapping) {
    m_index_feature_mapping = index_feature_mapping;
    m_index_feature_mapping_isSet = true;
}

bool OAIGoogleCloudAiplatformV1ExplanationMetadataInputMetadata::is_index_feature_mapping_Set() const{
    return m_index_feature_mapping_isSet;
}

bool OAIGoogleCloudAiplatformV1ExplanationMetadataInputMetadata::is_index_feature_mapping_Valid() const{
    return m_index_feature_mapping_isValid;
}

QString OAIGoogleCloudAiplatformV1ExplanationMetadataInputMetadata::getIndicesTensorName() const {
    return m_indices_tensor_name;
}
void OAIGoogleCloudAiplatformV1ExplanationMetadataInputMetadata::setIndicesTensorName(const QString &indices_tensor_name) {
    m_indices_tensor_name = indices_tensor_name;
    m_indices_tensor_name_isSet = true;
}

bool OAIGoogleCloudAiplatformV1ExplanationMetadataInputMetadata::is_indices_tensor_name_Set() const{
    return m_indices_tensor_name_isSet;
}

bool OAIGoogleCloudAiplatformV1ExplanationMetadataInputMetadata::is_indices_tensor_name_Valid() const{
    return m_indices_tensor_name_isValid;
}

QList<QJsonValue> OAIGoogleCloudAiplatformV1ExplanationMetadataInputMetadata::getInputBaselines() const {
    return m_input_baselines;
}
void OAIGoogleCloudAiplatformV1ExplanationMetadataInputMetadata::setInputBaselines(const QList<QJsonValue> &input_baselines) {
    m_input_baselines = input_baselines;
    m_input_baselines_isSet = true;
}

bool OAIGoogleCloudAiplatformV1ExplanationMetadataInputMetadata::is_input_baselines_Set() const{
    return m_input_baselines_isSet;
}

bool OAIGoogleCloudAiplatformV1ExplanationMetadataInputMetadata::is_input_baselines_Valid() const{
    return m_input_baselines_isValid;
}

QString OAIGoogleCloudAiplatformV1ExplanationMetadataInputMetadata::getInputTensorName() const {
    return m_input_tensor_name;
}
void OAIGoogleCloudAiplatformV1ExplanationMetadataInputMetadata::setInputTensorName(const QString &input_tensor_name) {
    m_input_tensor_name = input_tensor_name;
    m_input_tensor_name_isSet = true;
}

bool OAIGoogleCloudAiplatformV1ExplanationMetadataInputMetadata::is_input_tensor_name_Set() const{
    return m_input_tensor_name_isSet;
}

bool OAIGoogleCloudAiplatformV1ExplanationMetadataInputMetadata::is_input_tensor_name_Valid() const{
    return m_input_tensor_name_isValid;
}

QString OAIGoogleCloudAiplatformV1ExplanationMetadataInputMetadata::getModality() const {
    return m_modality;
}
void OAIGoogleCloudAiplatformV1ExplanationMetadataInputMetadata::setModality(const QString &modality) {
    m_modality = modality;
    m_modality_isSet = true;
}

bool OAIGoogleCloudAiplatformV1ExplanationMetadataInputMetadata::is_modality_Set() const{
    return m_modality_isSet;
}

bool OAIGoogleCloudAiplatformV1ExplanationMetadataInputMetadata::is_modality_Valid() const{
    return m_modality_isValid;
}

OAIGoogleCloudAiplatformV1ExplanationMetadataInputMetadataVisualization OAIGoogleCloudAiplatformV1ExplanationMetadataInputMetadata::getVisualization() const {
    return m_visualization;
}
void OAIGoogleCloudAiplatformV1ExplanationMetadataInputMetadata::setVisualization(const OAIGoogleCloudAiplatformV1ExplanationMetadataInputMetadataVisualization &visualization) {
    m_visualization = visualization;
    m_visualization_isSet = true;
}

bool OAIGoogleCloudAiplatformV1ExplanationMetadataInputMetadata::is_visualization_Set() const{
    return m_visualization_isSet;
}

bool OAIGoogleCloudAiplatformV1ExplanationMetadataInputMetadata::is_visualization_Valid() const{
    return m_visualization_isValid;
}

bool OAIGoogleCloudAiplatformV1ExplanationMetadataInputMetadata::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dense_shape_tensor_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_encoded_baselines.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_encoded_tensor_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_encoding_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_feature_value_domain.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_index_feature_mapping.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_indices_tensor_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_baselines.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_tensor_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_modality_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_visualization.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudAiplatformV1ExplanationMetadataInputMetadata::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
