/**
 * Vertex AI API
 * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudAiplatformV1SuggestTrialsRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudAiplatformV1SuggestTrialsRequest::OAIGoogleCloudAiplatformV1SuggestTrialsRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudAiplatformV1SuggestTrialsRequest::OAIGoogleCloudAiplatformV1SuggestTrialsRequest() {
    this->initializeModel();
}

OAIGoogleCloudAiplatformV1SuggestTrialsRequest::~OAIGoogleCloudAiplatformV1SuggestTrialsRequest() {}

void OAIGoogleCloudAiplatformV1SuggestTrialsRequest::initializeModel() {

    m_client_id_isSet = false;
    m_client_id_isValid = false;

    m_contexts_isSet = false;
    m_contexts_isValid = false;

    m_suggestion_count_isSet = false;
    m_suggestion_count_isValid = false;
}

void OAIGoogleCloudAiplatformV1SuggestTrialsRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudAiplatformV1SuggestTrialsRequest::fromJsonObject(QJsonObject json) {

    m_client_id_isValid = ::OpenAPI::fromJsonValue(m_client_id, json[QString("clientId")]);
    m_client_id_isSet = !json[QString("clientId")].isNull() && m_client_id_isValid;

    m_contexts_isValid = ::OpenAPI::fromJsonValue(m_contexts, json[QString("contexts")]);
    m_contexts_isSet = !json[QString("contexts")].isNull() && m_contexts_isValid;

    m_suggestion_count_isValid = ::OpenAPI::fromJsonValue(m_suggestion_count, json[QString("suggestionCount")]);
    m_suggestion_count_isSet = !json[QString("suggestionCount")].isNull() && m_suggestion_count_isValid;
}

QString OAIGoogleCloudAiplatformV1SuggestTrialsRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudAiplatformV1SuggestTrialsRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_client_id_isSet) {
        obj.insert(QString("clientId"), ::OpenAPI::toJsonValue(m_client_id));
    }
    if (m_contexts.size() > 0) {
        obj.insert(QString("contexts"), ::OpenAPI::toJsonValue(m_contexts));
    }
    if (m_suggestion_count_isSet) {
        obj.insert(QString("suggestionCount"), ::OpenAPI::toJsonValue(m_suggestion_count));
    }
    return obj;
}

QString OAIGoogleCloudAiplatformV1SuggestTrialsRequest::getClientId() const {
    return m_client_id;
}
void OAIGoogleCloudAiplatformV1SuggestTrialsRequest::setClientId(const QString &client_id) {
    m_client_id = client_id;
    m_client_id_isSet = true;
}

bool OAIGoogleCloudAiplatformV1SuggestTrialsRequest::is_client_id_Set() const{
    return m_client_id_isSet;
}

bool OAIGoogleCloudAiplatformV1SuggestTrialsRequest::is_client_id_Valid() const{
    return m_client_id_isValid;
}

QList<OAIGoogleCloudAiplatformV1TrialContext> OAIGoogleCloudAiplatformV1SuggestTrialsRequest::getContexts() const {
    return m_contexts;
}
void OAIGoogleCloudAiplatformV1SuggestTrialsRequest::setContexts(const QList<OAIGoogleCloudAiplatformV1TrialContext> &contexts) {
    m_contexts = contexts;
    m_contexts_isSet = true;
}

bool OAIGoogleCloudAiplatformV1SuggestTrialsRequest::is_contexts_Set() const{
    return m_contexts_isSet;
}

bool OAIGoogleCloudAiplatformV1SuggestTrialsRequest::is_contexts_Valid() const{
    return m_contexts_isValid;
}

qint32 OAIGoogleCloudAiplatformV1SuggestTrialsRequest::getSuggestionCount() const {
    return m_suggestion_count;
}
void OAIGoogleCloudAiplatformV1SuggestTrialsRequest::setSuggestionCount(const qint32 &suggestion_count) {
    m_suggestion_count = suggestion_count;
    m_suggestion_count_isSet = true;
}

bool OAIGoogleCloudAiplatformV1SuggestTrialsRequest::is_suggestion_count_Set() const{
    return m_suggestion_count_isSet;
}

bool OAIGoogleCloudAiplatformV1SuggestTrialsRequest::is_suggestion_count_Valid() const{
    return m_suggestion_count_isValid;
}

bool OAIGoogleCloudAiplatformV1SuggestTrialsRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contexts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_suggestion_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudAiplatformV1SuggestTrialsRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
