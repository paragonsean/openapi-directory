/**
 * Vertex AI API
 * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudAiplatformV1CompleteTrialRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudAiplatformV1CompleteTrialRequest::OAIGoogleCloudAiplatformV1CompleteTrialRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudAiplatformV1CompleteTrialRequest::OAIGoogleCloudAiplatformV1CompleteTrialRequest() {
    this->initializeModel();
}

OAIGoogleCloudAiplatformV1CompleteTrialRequest::~OAIGoogleCloudAiplatformV1CompleteTrialRequest() {}

void OAIGoogleCloudAiplatformV1CompleteTrialRequest::initializeModel() {

    m_final_measurement_isSet = false;
    m_final_measurement_isValid = false;

    m_infeasible_reason_isSet = false;
    m_infeasible_reason_isValid = false;

    m_trial_infeasible_isSet = false;
    m_trial_infeasible_isValid = false;
}

void OAIGoogleCloudAiplatformV1CompleteTrialRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudAiplatformV1CompleteTrialRequest::fromJsonObject(QJsonObject json) {

    m_final_measurement_isValid = ::OpenAPI::fromJsonValue(m_final_measurement, json[QString("finalMeasurement")]);
    m_final_measurement_isSet = !json[QString("finalMeasurement")].isNull() && m_final_measurement_isValid;

    m_infeasible_reason_isValid = ::OpenAPI::fromJsonValue(m_infeasible_reason, json[QString("infeasibleReason")]);
    m_infeasible_reason_isSet = !json[QString("infeasibleReason")].isNull() && m_infeasible_reason_isValid;

    m_trial_infeasible_isValid = ::OpenAPI::fromJsonValue(m_trial_infeasible, json[QString("trialInfeasible")]);
    m_trial_infeasible_isSet = !json[QString("trialInfeasible")].isNull() && m_trial_infeasible_isValid;
}

QString OAIGoogleCloudAiplatformV1CompleteTrialRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudAiplatformV1CompleteTrialRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_final_measurement.isSet()) {
        obj.insert(QString("finalMeasurement"), ::OpenAPI::toJsonValue(m_final_measurement));
    }
    if (m_infeasible_reason_isSet) {
        obj.insert(QString("infeasibleReason"), ::OpenAPI::toJsonValue(m_infeasible_reason));
    }
    if (m_trial_infeasible_isSet) {
        obj.insert(QString("trialInfeasible"), ::OpenAPI::toJsonValue(m_trial_infeasible));
    }
    return obj;
}

OAIGoogleCloudAiplatformV1Measurement OAIGoogleCloudAiplatformV1CompleteTrialRequest::getFinalMeasurement() const {
    return m_final_measurement;
}
void OAIGoogleCloudAiplatformV1CompleteTrialRequest::setFinalMeasurement(const OAIGoogleCloudAiplatformV1Measurement &final_measurement) {
    m_final_measurement = final_measurement;
    m_final_measurement_isSet = true;
}

bool OAIGoogleCloudAiplatformV1CompleteTrialRequest::is_final_measurement_Set() const{
    return m_final_measurement_isSet;
}

bool OAIGoogleCloudAiplatformV1CompleteTrialRequest::is_final_measurement_Valid() const{
    return m_final_measurement_isValid;
}

QString OAIGoogleCloudAiplatformV1CompleteTrialRequest::getInfeasibleReason() const {
    return m_infeasible_reason;
}
void OAIGoogleCloudAiplatformV1CompleteTrialRequest::setInfeasibleReason(const QString &infeasible_reason) {
    m_infeasible_reason = infeasible_reason;
    m_infeasible_reason_isSet = true;
}

bool OAIGoogleCloudAiplatformV1CompleteTrialRequest::is_infeasible_reason_Set() const{
    return m_infeasible_reason_isSet;
}

bool OAIGoogleCloudAiplatformV1CompleteTrialRequest::is_infeasible_reason_Valid() const{
    return m_infeasible_reason_isValid;
}

bool OAIGoogleCloudAiplatformV1CompleteTrialRequest::isTrialInfeasible() const {
    return m_trial_infeasible;
}
void OAIGoogleCloudAiplatformV1CompleteTrialRequest::setTrialInfeasible(const bool &trial_infeasible) {
    m_trial_infeasible = trial_infeasible;
    m_trial_infeasible_isSet = true;
}

bool OAIGoogleCloudAiplatformV1CompleteTrialRequest::is_trial_infeasible_Set() const{
    return m_trial_infeasible_isSet;
}

bool OAIGoogleCloudAiplatformV1CompleteTrialRequest::is_trial_infeasible_Valid() const{
    return m_trial_infeasible_isValid;
}

bool OAIGoogleCloudAiplatformV1CompleteTrialRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_final_measurement.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_infeasible_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trial_infeasible_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudAiplatformV1CompleteTrialRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
