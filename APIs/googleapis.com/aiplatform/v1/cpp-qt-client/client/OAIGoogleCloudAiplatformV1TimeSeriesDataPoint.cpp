/**
 * Vertex AI API
 * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudAiplatformV1TimeSeriesDataPoint.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudAiplatformV1TimeSeriesDataPoint::OAIGoogleCloudAiplatformV1TimeSeriesDataPoint(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudAiplatformV1TimeSeriesDataPoint::OAIGoogleCloudAiplatformV1TimeSeriesDataPoint() {
    this->initializeModel();
}

OAIGoogleCloudAiplatformV1TimeSeriesDataPoint::~OAIGoogleCloudAiplatformV1TimeSeriesDataPoint() {}

void OAIGoogleCloudAiplatformV1TimeSeriesDataPoint::initializeModel() {

    m_blobs_isSet = false;
    m_blobs_isValid = false;

    m_scalar_isSet = false;
    m_scalar_isValid = false;

    m_step_isSet = false;
    m_step_isValid = false;

    m_tensor_isSet = false;
    m_tensor_isValid = false;

    m_wall_time_isSet = false;
    m_wall_time_isValid = false;
}

void OAIGoogleCloudAiplatformV1TimeSeriesDataPoint::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudAiplatformV1TimeSeriesDataPoint::fromJsonObject(QJsonObject json) {

    m_blobs_isValid = ::OpenAPI::fromJsonValue(m_blobs, json[QString("blobs")]);
    m_blobs_isSet = !json[QString("blobs")].isNull() && m_blobs_isValid;

    m_scalar_isValid = ::OpenAPI::fromJsonValue(m_scalar, json[QString("scalar")]);
    m_scalar_isSet = !json[QString("scalar")].isNull() && m_scalar_isValid;

    m_step_isValid = ::OpenAPI::fromJsonValue(m_step, json[QString("step")]);
    m_step_isSet = !json[QString("step")].isNull() && m_step_isValid;

    m_tensor_isValid = ::OpenAPI::fromJsonValue(m_tensor, json[QString("tensor")]);
    m_tensor_isSet = !json[QString("tensor")].isNull() && m_tensor_isValid;

    m_wall_time_isValid = ::OpenAPI::fromJsonValue(m_wall_time, json[QString("wallTime")]);
    m_wall_time_isSet = !json[QString("wallTime")].isNull() && m_wall_time_isValid;
}

QString OAIGoogleCloudAiplatformV1TimeSeriesDataPoint::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudAiplatformV1TimeSeriesDataPoint::asJsonObject() const {
    QJsonObject obj;
    if (m_blobs.isSet()) {
        obj.insert(QString("blobs"), ::OpenAPI::toJsonValue(m_blobs));
    }
    if (m_scalar.isSet()) {
        obj.insert(QString("scalar"), ::OpenAPI::toJsonValue(m_scalar));
    }
    if (m_step_isSet) {
        obj.insert(QString("step"), ::OpenAPI::toJsonValue(m_step));
    }
    if (m_tensor.isSet()) {
        obj.insert(QString("tensor"), ::OpenAPI::toJsonValue(m_tensor));
    }
    if (m_wall_time_isSet) {
        obj.insert(QString("wallTime"), ::OpenAPI::toJsonValue(m_wall_time));
    }
    return obj;
}

OAIGoogleCloudAiplatformV1TensorboardBlobSequence OAIGoogleCloudAiplatformV1TimeSeriesDataPoint::getBlobs() const {
    return m_blobs;
}
void OAIGoogleCloudAiplatformV1TimeSeriesDataPoint::setBlobs(const OAIGoogleCloudAiplatformV1TensorboardBlobSequence &blobs) {
    m_blobs = blobs;
    m_blobs_isSet = true;
}

bool OAIGoogleCloudAiplatformV1TimeSeriesDataPoint::is_blobs_Set() const{
    return m_blobs_isSet;
}

bool OAIGoogleCloudAiplatformV1TimeSeriesDataPoint::is_blobs_Valid() const{
    return m_blobs_isValid;
}

OAIGoogleCloudAiplatformV1Scalar OAIGoogleCloudAiplatformV1TimeSeriesDataPoint::getScalar() const {
    return m_scalar;
}
void OAIGoogleCloudAiplatformV1TimeSeriesDataPoint::setScalar(const OAIGoogleCloudAiplatformV1Scalar &scalar) {
    m_scalar = scalar;
    m_scalar_isSet = true;
}

bool OAIGoogleCloudAiplatformV1TimeSeriesDataPoint::is_scalar_Set() const{
    return m_scalar_isSet;
}

bool OAIGoogleCloudAiplatformV1TimeSeriesDataPoint::is_scalar_Valid() const{
    return m_scalar_isValid;
}

QString OAIGoogleCloudAiplatformV1TimeSeriesDataPoint::getStep() const {
    return m_step;
}
void OAIGoogleCloudAiplatformV1TimeSeriesDataPoint::setStep(const QString &step) {
    m_step = step;
    m_step_isSet = true;
}

bool OAIGoogleCloudAiplatformV1TimeSeriesDataPoint::is_step_Set() const{
    return m_step_isSet;
}

bool OAIGoogleCloudAiplatformV1TimeSeriesDataPoint::is_step_Valid() const{
    return m_step_isValid;
}

OAIGoogleCloudAiplatformV1TensorboardTensor OAIGoogleCloudAiplatformV1TimeSeriesDataPoint::getTensor() const {
    return m_tensor;
}
void OAIGoogleCloudAiplatformV1TimeSeriesDataPoint::setTensor(const OAIGoogleCloudAiplatformV1TensorboardTensor &tensor) {
    m_tensor = tensor;
    m_tensor_isSet = true;
}

bool OAIGoogleCloudAiplatformV1TimeSeriesDataPoint::is_tensor_Set() const{
    return m_tensor_isSet;
}

bool OAIGoogleCloudAiplatformV1TimeSeriesDataPoint::is_tensor_Valid() const{
    return m_tensor_isValid;
}

QString OAIGoogleCloudAiplatformV1TimeSeriesDataPoint::getWallTime() const {
    return m_wall_time;
}
void OAIGoogleCloudAiplatformV1TimeSeriesDataPoint::setWallTime(const QString &wall_time) {
    m_wall_time = wall_time;
    m_wall_time_isSet = true;
}

bool OAIGoogleCloudAiplatformV1TimeSeriesDataPoint::is_wall_time_Set() const{
    return m_wall_time_isSet;
}

bool OAIGoogleCloudAiplatformV1TimeSeriesDataPoint::is_wall_time_Valid() const{
    return m_wall_time_isValid;
}

bool OAIGoogleCloudAiplatformV1TimeSeriesDataPoint::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_blobs.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_scalar.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_step_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tensor.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_wall_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudAiplatformV1TimeSeriesDataPoint::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
