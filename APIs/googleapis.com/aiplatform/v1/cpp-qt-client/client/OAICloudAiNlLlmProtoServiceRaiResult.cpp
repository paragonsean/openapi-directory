/**
 * Vertex AI API
 * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICloudAiNlLlmProtoServiceRaiResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICloudAiNlLlmProtoServiceRaiResult::OAICloudAiNlLlmProtoServiceRaiResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICloudAiNlLlmProtoServiceRaiResult::OAICloudAiNlLlmProtoServiceRaiResult() {
    this->initializeModel();
}

OAICloudAiNlLlmProtoServiceRaiResult::~OAICloudAiNlLlmProtoServiceRaiResult() {}

void OAICloudAiNlLlmProtoServiceRaiResult::initializeModel() {

    m_aida_recitation_result_isSet = false;
    m_aida_recitation_result_isValid = false;

    m_blocked_isSet = false;
    m_blocked_isValid = false;

    m_error_codes_isSet = false;
    m_error_codes_isValid = false;

    m_filtered_isSet = false;
    m_filtered_isValid = false;

    m_language_filter_result_isSet = false;
    m_language_filter_result_isValid = false;

    m_rai_signals_isSet = false;
    m_rai_signals_isValid = false;

    m_triggered_blocklist_isSet = false;
    m_triggered_blocklist_isValid = false;

    m_triggered_recitation_isSet = false;
    m_triggered_recitation_isValid = false;

    m_triggered_safety_filter_isSet = false;
    m_triggered_safety_filter_isValid = false;
}

void OAICloudAiNlLlmProtoServiceRaiResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICloudAiNlLlmProtoServiceRaiResult::fromJsonObject(QJsonObject json) {

    m_aida_recitation_result_isValid = ::OpenAPI::fromJsonValue(m_aida_recitation_result, json[QString("aidaRecitationResult")]);
    m_aida_recitation_result_isSet = !json[QString("aidaRecitationResult")].isNull() && m_aida_recitation_result_isValid;

    m_blocked_isValid = ::OpenAPI::fromJsonValue(m_blocked, json[QString("blocked")]);
    m_blocked_isSet = !json[QString("blocked")].isNull() && m_blocked_isValid;

    m_error_codes_isValid = ::OpenAPI::fromJsonValue(m_error_codes, json[QString("errorCodes")]);
    m_error_codes_isSet = !json[QString("errorCodes")].isNull() && m_error_codes_isValid;

    m_filtered_isValid = ::OpenAPI::fromJsonValue(m_filtered, json[QString("filtered")]);
    m_filtered_isSet = !json[QString("filtered")].isNull() && m_filtered_isValid;

    m_language_filter_result_isValid = ::OpenAPI::fromJsonValue(m_language_filter_result, json[QString("languageFilterResult")]);
    m_language_filter_result_isSet = !json[QString("languageFilterResult")].isNull() && m_language_filter_result_isValid;

    m_rai_signals_isValid = ::OpenAPI::fromJsonValue(m_rai_signals, json[QString("raiSignals")]);
    m_rai_signals_isSet = !json[QString("raiSignals")].isNull() && m_rai_signals_isValid;

    m_triggered_blocklist_isValid = ::OpenAPI::fromJsonValue(m_triggered_blocklist, json[QString("triggeredBlocklist")]);
    m_triggered_blocklist_isSet = !json[QString("triggeredBlocklist")].isNull() && m_triggered_blocklist_isValid;

    m_triggered_recitation_isValid = ::OpenAPI::fromJsonValue(m_triggered_recitation, json[QString("triggeredRecitation")]);
    m_triggered_recitation_isSet = !json[QString("triggeredRecitation")].isNull() && m_triggered_recitation_isValid;

    m_triggered_safety_filter_isValid = ::OpenAPI::fromJsonValue(m_triggered_safety_filter, json[QString("triggeredSafetyFilter")]);
    m_triggered_safety_filter_isSet = !json[QString("triggeredSafetyFilter")].isNull() && m_triggered_safety_filter_isValid;
}

QString OAICloudAiNlLlmProtoServiceRaiResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICloudAiNlLlmProtoServiceRaiResult::asJsonObject() const {
    QJsonObject obj;
    if (m_aida_recitation_result.isSet()) {
        obj.insert(QString("aidaRecitationResult"), ::OpenAPI::toJsonValue(m_aida_recitation_result));
    }
    if (m_blocked_isSet) {
        obj.insert(QString("blocked"), ::OpenAPI::toJsonValue(m_blocked));
    }
    if (m_error_codes.size() > 0) {
        obj.insert(QString("errorCodes"), ::OpenAPI::toJsonValue(m_error_codes));
    }
    if (m_filtered_isSet) {
        obj.insert(QString("filtered"), ::OpenAPI::toJsonValue(m_filtered));
    }
    if (m_language_filter_result.isSet()) {
        obj.insert(QString("languageFilterResult"), ::OpenAPI::toJsonValue(m_language_filter_result));
    }
    if (m_rai_signals.size() > 0) {
        obj.insert(QString("raiSignals"), ::OpenAPI::toJsonValue(m_rai_signals));
    }
    if (m_triggered_blocklist_isSet) {
        obj.insert(QString("triggeredBlocklist"), ::OpenAPI::toJsonValue(m_triggered_blocklist));
    }
    if (m_triggered_recitation_isSet) {
        obj.insert(QString("triggeredRecitation"), ::OpenAPI::toJsonValue(m_triggered_recitation));
    }
    if (m_triggered_safety_filter_isSet) {
        obj.insert(QString("triggeredSafetyFilter"), ::OpenAPI::toJsonValue(m_triggered_safety_filter));
    }
    return obj;
}

OAILanguageLabsAidaTrustRecitationProtoRecitationResult OAICloudAiNlLlmProtoServiceRaiResult::getAidaRecitationResult() const {
    return m_aida_recitation_result;
}
void OAICloudAiNlLlmProtoServiceRaiResult::setAidaRecitationResult(const OAILanguageLabsAidaTrustRecitationProtoRecitationResult &aida_recitation_result) {
    m_aida_recitation_result = aida_recitation_result;
    m_aida_recitation_result_isSet = true;
}

bool OAICloudAiNlLlmProtoServiceRaiResult::is_aida_recitation_result_Set() const{
    return m_aida_recitation_result_isSet;
}

bool OAICloudAiNlLlmProtoServiceRaiResult::is_aida_recitation_result_Valid() const{
    return m_aida_recitation_result_isValid;
}

bool OAICloudAiNlLlmProtoServiceRaiResult::isBlocked() const {
    return m_blocked;
}
void OAICloudAiNlLlmProtoServiceRaiResult::setBlocked(const bool &blocked) {
    m_blocked = blocked;
    m_blocked_isSet = true;
}

bool OAICloudAiNlLlmProtoServiceRaiResult::is_blocked_Set() const{
    return m_blocked_isSet;
}

bool OAICloudAiNlLlmProtoServiceRaiResult::is_blocked_Valid() const{
    return m_blocked_isValid;
}

QList<qint32> OAICloudAiNlLlmProtoServiceRaiResult::getErrorCodes() const {
    return m_error_codes;
}
void OAICloudAiNlLlmProtoServiceRaiResult::setErrorCodes(const QList<qint32> &error_codes) {
    m_error_codes = error_codes;
    m_error_codes_isSet = true;
}

bool OAICloudAiNlLlmProtoServiceRaiResult::is_error_codes_Set() const{
    return m_error_codes_isSet;
}

bool OAICloudAiNlLlmProtoServiceRaiResult::is_error_codes_Valid() const{
    return m_error_codes_isValid;
}

bool OAICloudAiNlLlmProtoServiceRaiResult::isFiltered() const {
    return m_filtered;
}
void OAICloudAiNlLlmProtoServiceRaiResult::setFiltered(const bool &filtered) {
    m_filtered = filtered;
    m_filtered_isSet = true;
}

bool OAICloudAiNlLlmProtoServiceRaiResult::is_filtered_Set() const{
    return m_filtered_isSet;
}

bool OAICloudAiNlLlmProtoServiceRaiResult::is_filtered_Valid() const{
    return m_filtered_isValid;
}

OAILearningGenaiRootLanguageFilterResult OAICloudAiNlLlmProtoServiceRaiResult::getLanguageFilterResult() const {
    return m_language_filter_result;
}
void OAICloudAiNlLlmProtoServiceRaiResult::setLanguageFilterResult(const OAILearningGenaiRootLanguageFilterResult &language_filter_result) {
    m_language_filter_result = language_filter_result;
    m_language_filter_result_isSet = true;
}

bool OAICloudAiNlLlmProtoServiceRaiResult::is_language_filter_result_Set() const{
    return m_language_filter_result_isSet;
}

bool OAICloudAiNlLlmProtoServiceRaiResult::is_language_filter_result_Valid() const{
    return m_language_filter_result_isValid;
}

QList<OAICloudAiNlLlmProtoServiceRaiSignal> OAICloudAiNlLlmProtoServiceRaiResult::getRaiSignals() const {
    return m_rai_signals;
}
void OAICloudAiNlLlmProtoServiceRaiResult::setRaiSignals(const QList<OAICloudAiNlLlmProtoServiceRaiSignal> &rai_signals) {
    m_rai_signals = rai_signals;
    m_rai_signals_isSet = true;
}

bool OAICloudAiNlLlmProtoServiceRaiResult::is_rai_signals_Set() const{
    return m_rai_signals_isSet;
}

bool OAICloudAiNlLlmProtoServiceRaiResult::is_rai_signals_Valid() const{
    return m_rai_signals_isValid;
}

bool OAICloudAiNlLlmProtoServiceRaiResult::isTriggeredBlocklist() const {
    return m_triggered_blocklist;
}
void OAICloudAiNlLlmProtoServiceRaiResult::setTriggeredBlocklist(const bool &triggered_blocklist) {
    m_triggered_blocklist = triggered_blocklist;
    m_triggered_blocklist_isSet = true;
}

bool OAICloudAiNlLlmProtoServiceRaiResult::is_triggered_blocklist_Set() const{
    return m_triggered_blocklist_isSet;
}

bool OAICloudAiNlLlmProtoServiceRaiResult::is_triggered_blocklist_Valid() const{
    return m_triggered_blocklist_isValid;
}

bool OAICloudAiNlLlmProtoServiceRaiResult::isTriggeredRecitation() const {
    return m_triggered_recitation;
}
void OAICloudAiNlLlmProtoServiceRaiResult::setTriggeredRecitation(const bool &triggered_recitation) {
    m_triggered_recitation = triggered_recitation;
    m_triggered_recitation_isSet = true;
}

bool OAICloudAiNlLlmProtoServiceRaiResult::is_triggered_recitation_Set() const{
    return m_triggered_recitation_isSet;
}

bool OAICloudAiNlLlmProtoServiceRaiResult::is_triggered_recitation_Valid() const{
    return m_triggered_recitation_isValid;
}

bool OAICloudAiNlLlmProtoServiceRaiResult::isTriggeredSafetyFilter() const {
    return m_triggered_safety_filter;
}
void OAICloudAiNlLlmProtoServiceRaiResult::setTriggeredSafetyFilter(const bool &triggered_safety_filter) {
    m_triggered_safety_filter = triggered_safety_filter;
    m_triggered_safety_filter_isSet = true;
}

bool OAICloudAiNlLlmProtoServiceRaiResult::is_triggered_safety_filter_Set() const{
    return m_triggered_safety_filter_isSet;
}

bool OAICloudAiNlLlmProtoServiceRaiResult::is_triggered_safety_filter_Valid() const{
    return m_triggered_safety_filter_isValid;
}

bool OAICloudAiNlLlmProtoServiceRaiResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_aida_recitation_result.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_blocked_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_codes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_filtered_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_filter_result.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_rai_signals.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_triggered_blocklist_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_triggered_recitation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_triggered_safety_filter_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICloudAiNlLlmProtoServiceRaiResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
