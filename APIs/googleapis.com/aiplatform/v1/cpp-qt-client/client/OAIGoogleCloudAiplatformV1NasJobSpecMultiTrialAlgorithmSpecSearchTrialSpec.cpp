/**
 * Vertex AI API
 * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudAiplatformV1NasJobSpecMultiTrialAlgorithmSpecSearchTrialSpec.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudAiplatformV1NasJobSpecMultiTrialAlgorithmSpecSearchTrialSpec::OAIGoogleCloudAiplatformV1NasJobSpecMultiTrialAlgorithmSpecSearchTrialSpec(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudAiplatformV1NasJobSpecMultiTrialAlgorithmSpecSearchTrialSpec::OAIGoogleCloudAiplatformV1NasJobSpecMultiTrialAlgorithmSpecSearchTrialSpec() {
    this->initializeModel();
}

OAIGoogleCloudAiplatformV1NasJobSpecMultiTrialAlgorithmSpecSearchTrialSpec::~OAIGoogleCloudAiplatformV1NasJobSpecMultiTrialAlgorithmSpecSearchTrialSpec() {}

void OAIGoogleCloudAiplatformV1NasJobSpecMultiTrialAlgorithmSpecSearchTrialSpec::initializeModel() {

    m_max_failed_trial_count_isSet = false;
    m_max_failed_trial_count_isValid = false;

    m_max_parallel_trial_count_isSet = false;
    m_max_parallel_trial_count_isValid = false;

    m_max_trial_count_isSet = false;
    m_max_trial_count_isValid = false;

    m_search_trial_job_spec_isSet = false;
    m_search_trial_job_spec_isValid = false;
}

void OAIGoogleCloudAiplatformV1NasJobSpecMultiTrialAlgorithmSpecSearchTrialSpec::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudAiplatformV1NasJobSpecMultiTrialAlgorithmSpecSearchTrialSpec::fromJsonObject(QJsonObject json) {

    m_max_failed_trial_count_isValid = ::OpenAPI::fromJsonValue(m_max_failed_trial_count, json[QString("maxFailedTrialCount")]);
    m_max_failed_trial_count_isSet = !json[QString("maxFailedTrialCount")].isNull() && m_max_failed_trial_count_isValid;

    m_max_parallel_trial_count_isValid = ::OpenAPI::fromJsonValue(m_max_parallel_trial_count, json[QString("maxParallelTrialCount")]);
    m_max_parallel_trial_count_isSet = !json[QString("maxParallelTrialCount")].isNull() && m_max_parallel_trial_count_isValid;

    m_max_trial_count_isValid = ::OpenAPI::fromJsonValue(m_max_trial_count, json[QString("maxTrialCount")]);
    m_max_trial_count_isSet = !json[QString("maxTrialCount")].isNull() && m_max_trial_count_isValid;

    m_search_trial_job_spec_isValid = ::OpenAPI::fromJsonValue(m_search_trial_job_spec, json[QString("searchTrialJobSpec")]);
    m_search_trial_job_spec_isSet = !json[QString("searchTrialJobSpec")].isNull() && m_search_trial_job_spec_isValid;
}

QString OAIGoogleCloudAiplatformV1NasJobSpecMultiTrialAlgorithmSpecSearchTrialSpec::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudAiplatformV1NasJobSpecMultiTrialAlgorithmSpecSearchTrialSpec::asJsonObject() const {
    QJsonObject obj;
    if (m_max_failed_trial_count_isSet) {
        obj.insert(QString("maxFailedTrialCount"), ::OpenAPI::toJsonValue(m_max_failed_trial_count));
    }
    if (m_max_parallel_trial_count_isSet) {
        obj.insert(QString("maxParallelTrialCount"), ::OpenAPI::toJsonValue(m_max_parallel_trial_count));
    }
    if (m_max_trial_count_isSet) {
        obj.insert(QString("maxTrialCount"), ::OpenAPI::toJsonValue(m_max_trial_count));
    }
    if (m_search_trial_job_spec.isSet()) {
        obj.insert(QString("searchTrialJobSpec"), ::OpenAPI::toJsonValue(m_search_trial_job_spec));
    }
    return obj;
}

qint32 OAIGoogleCloudAiplatformV1NasJobSpecMultiTrialAlgorithmSpecSearchTrialSpec::getMaxFailedTrialCount() const {
    return m_max_failed_trial_count;
}
void OAIGoogleCloudAiplatformV1NasJobSpecMultiTrialAlgorithmSpecSearchTrialSpec::setMaxFailedTrialCount(const qint32 &max_failed_trial_count) {
    m_max_failed_trial_count = max_failed_trial_count;
    m_max_failed_trial_count_isSet = true;
}

bool OAIGoogleCloudAiplatformV1NasJobSpecMultiTrialAlgorithmSpecSearchTrialSpec::is_max_failed_trial_count_Set() const{
    return m_max_failed_trial_count_isSet;
}

bool OAIGoogleCloudAiplatformV1NasJobSpecMultiTrialAlgorithmSpecSearchTrialSpec::is_max_failed_trial_count_Valid() const{
    return m_max_failed_trial_count_isValid;
}

qint32 OAIGoogleCloudAiplatformV1NasJobSpecMultiTrialAlgorithmSpecSearchTrialSpec::getMaxParallelTrialCount() const {
    return m_max_parallel_trial_count;
}
void OAIGoogleCloudAiplatformV1NasJobSpecMultiTrialAlgorithmSpecSearchTrialSpec::setMaxParallelTrialCount(const qint32 &max_parallel_trial_count) {
    m_max_parallel_trial_count = max_parallel_trial_count;
    m_max_parallel_trial_count_isSet = true;
}

bool OAIGoogleCloudAiplatformV1NasJobSpecMultiTrialAlgorithmSpecSearchTrialSpec::is_max_parallel_trial_count_Set() const{
    return m_max_parallel_trial_count_isSet;
}

bool OAIGoogleCloudAiplatformV1NasJobSpecMultiTrialAlgorithmSpecSearchTrialSpec::is_max_parallel_trial_count_Valid() const{
    return m_max_parallel_trial_count_isValid;
}

qint32 OAIGoogleCloudAiplatformV1NasJobSpecMultiTrialAlgorithmSpecSearchTrialSpec::getMaxTrialCount() const {
    return m_max_trial_count;
}
void OAIGoogleCloudAiplatformV1NasJobSpecMultiTrialAlgorithmSpecSearchTrialSpec::setMaxTrialCount(const qint32 &max_trial_count) {
    m_max_trial_count = max_trial_count;
    m_max_trial_count_isSet = true;
}

bool OAIGoogleCloudAiplatformV1NasJobSpecMultiTrialAlgorithmSpecSearchTrialSpec::is_max_trial_count_Set() const{
    return m_max_trial_count_isSet;
}

bool OAIGoogleCloudAiplatformV1NasJobSpecMultiTrialAlgorithmSpecSearchTrialSpec::is_max_trial_count_Valid() const{
    return m_max_trial_count_isValid;
}

OAIGoogleCloudAiplatformV1CustomJobSpec OAIGoogleCloudAiplatformV1NasJobSpecMultiTrialAlgorithmSpecSearchTrialSpec::getSearchTrialJobSpec() const {
    return m_search_trial_job_spec;
}
void OAIGoogleCloudAiplatformV1NasJobSpecMultiTrialAlgorithmSpecSearchTrialSpec::setSearchTrialJobSpec(const OAIGoogleCloudAiplatformV1CustomJobSpec &search_trial_job_spec) {
    m_search_trial_job_spec = search_trial_job_spec;
    m_search_trial_job_spec_isSet = true;
}

bool OAIGoogleCloudAiplatformV1NasJobSpecMultiTrialAlgorithmSpecSearchTrialSpec::is_search_trial_job_spec_Set() const{
    return m_search_trial_job_spec_isSet;
}

bool OAIGoogleCloudAiplatformV1NasJobSpecMultiTrialAlgorithmSpecSearchTrialSpec::is_search_trial_job_spec_Valid() const{
    return m_search_trial_job_spec_isValid;
}

bool OAIGoogleCloudAiplatformV1NasJobSpecMultiTrialAlgorithmSpecSearchTrialSpec::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_max_failed_trial_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_parallel_trial_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_trial_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_search_trial_job_spec.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudAiplatformV1NasJobSpecMultiTrialAlgorithmSpecSearchTrialSpec::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
