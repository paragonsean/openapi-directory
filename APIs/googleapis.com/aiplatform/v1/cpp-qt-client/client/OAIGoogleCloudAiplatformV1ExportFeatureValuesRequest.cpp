/**
 * Vertex AI API
 * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudAiplatformV1ExportFeatureValuesRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudAiplatformV1ExportFeatureValuesRequest::OAIGoogleCloudAiplatformV1ExportFeatureValuesRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudAiplatformV1ExportFeatureValuesRequest::OAIGoogleCloudAiplatformV1ExportFeatureValuesRequest() {
    this->initializeModel();
}

OAIGoogleCloudAiplatformV1ExportFeatureValuesRequest::~OAIGoogleCloudAiplatformV1ExportFeatureValuesRequest() {}

void OAIGoogleCloudAiplatformV1ExportFeatureValuesRequest::initializeModel() {

    m_destination_isSet = false;
    m_destination_isValid = false;

    m_feature_selector_isSet = false;
    m_feature_selector_isValid = false;

    m_full_export_isSet = false;
    m_full_export_isValid = false;

    m_settings_isSet = false;
    m_settings_isValid = false;

    m_snapshot_export_isSet = false;
    m_snapshot_export_isValid = false;
}

void OAIGoogleCloudAiplatformV1ExportFeatureValuesRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudAiplatformV1ExportFeatureValuesRequest::fromJsonObject(QJsonObject json) {

    m_destination_isValid = ::OpenAPI::fromJsonValue(m_destination, json[QString("destination")]);
    m_destination_isSet = !json[QString("destination")].isNull() && m_destination_isValid;

    m_feature_selector_isValid = ::OpenAPI::fromJsonValue(m_feature_selector, json[QString("featureSelector")]);
    m_feature_selector_isSet = !json[QString("featureSelector")].isNull() && m_feature_selector_isValid;

    m_full_export_isValid = ::OpenAPI::fromJsonValue(m_full_export, json[QString("fullExport")]);
    m_full_export_isSet = !json[QString("fullExport")].isNull() && m_full_export_isValid;

    m_settings_isValid = ::OpenAPI::fromJsonValue(m_settings, json[QString("settings")]);
    m_settings_isSet = !json[QString("settings")].isNull() && m_settings_isValid;

    m_snapshot_export_isValid = ::OpenAPI::fromJsonValue(m_snapshot_export, json[QString("snapshotExport")]);
    m_snapshot_export_isSet = !json[QString("snapshotExport")].isNull() && m_snapshot_export_isValid;
}

QString OAIGoogleCloudAiplatformV1ExportFeatureValuesRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudAiplatformV1ExportFeatureValuesRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_destination.isSet()) {
        obj.insert(QString("destination"), ::OpenAPI::toJsonValue(m_destination));
    }
    if (m_feature_selector.isSet()) {
        obj.insert(QString("featureSelector"), ::OpenAPI::toJsonValue(m_feature_selector));
    }
    if (m_full_export.isSet()) {
        obj.insert(QString("fullExport"), ::OpenAPI::toJsonValue(m_full_export));
    }
    if (m_settings.size() > 0) {
        obj.insert(QString("settings"), ::OpenAPI::toJsonValue(m_settings));
    }
    if (m_snapshot_export.isSet()) {
        obj.insert(QString("snapshotExport"), ::OpenAPI::toJsonValue(m_snapshot_export));
    }
    return obj;
}

OAIGoogleCloudAiplatformV1FeatureValueDestination OAIGoogleCloudAiplatformV1ExportFeatureValuesRequest::getDestination() const {
    return m_destination;
}
void OAIGoogleCloudAiplatformV1ExportFeatureValuesRequest::setDestination(const OAIGoogleCloudAiplatformV1FeatureValueDestination &destination) {
    m_destination = destination;
    m_destination_isSet = true;
}

bool OAIGoogleCloudAiplatformV1ExportFeatureValuesRequest::is_destination_Set() const{
    return m_destination_isSet;
}

bool OAIGoogleCloudAiplatformV1ExportFeatureValuesRequest::is_destination_Valid() const{
    return m_destination_isValid;
}

OAIGoogleCloudAiplatformV1FeatureSelector OAIGoogleCloudAiplatformV1ExportFeatureValuesRequest::getFeatureSelector() const {
    return m_feature_selector;
}
void OAIGoogleCloudAiplatformV1ExportFeatureValuesRequest::setFeatureSelector(const OAIGoogleCloudAiplatformV1FeatureSelector &feature_selector) {
    m_feature_selector = feature_selector;
    m_feature_selector_isSet = true;
}

bool OAIGoogleCloudAiplatformV1ExportFeatureValuesRequest::is_feature_selector_Set() const{
    return m_feature_selector_isSet;
}

bool OAIGoogleCloudAiplatformV1ExportFeatureValuesRequest::is_feature_selector_Valid() const{
    return m_feature_selector_isValid;
}

OAIGoogleCloudAiplatformV1ExportFeatureValuesRequestFullExport OAIGoogleCloudAiplatformV1ExportFeatureValuesRequest::getFullExport() const {
    return m_full_export;
}
void OAIGoogleCloudAiplatformV1ExportFeatureValuesRequest::setFullExport(const OAIGoogleCloudAiplatformV1ExportFeatureValuesRequestFullExport &full_export) {
    m_full_export = full_export;
    m_full_export_isSet = true;
}

bool OAIGoogleCloudAiplatformV1ExportFeatureValuesRequest::is_full_export_Set() const{
    return m_full_export_isSet;
}

bool OAIGoogleCloudAiplatformV1ExportFeatureValuesRequest::is_full_export_Valid() const{
    return m_full_export_isValid;
}

QList<OAIGoogleCloudAiplatformV1DestinationFeatureSetting> OAIGoogleCloudAiplatformV1ExportFeatureValuesRequest::getSettings() const {
    return m_settings;
}
void OAIGoogleCloudAiplatformV1ExportFeatureValuesRequest::setSettings(const QList<OAIGoogleCloudAiplatformV1DestinationFeatureSetting> &settings) {
    m_settings = settings;
    m_settings_isSet = true;
}

bool OAIGoogleCloudAiplatformV1ExportFeatureValuesRequest::is_settings_Set() const{
    return m_settings_isSet;
}

bool OAIGoogleCloudAiplatformV1ExportFeatureValuesRequest::is_settings_Valid() const{
    return m_settings_isValid;
}

OAIGoogleCloudAiplatformV1ExportFeatureValuesRequestSnapshotExport OAIGoogleCloudAiplatformV1ExportFeatureValuesRequest::getSnapshotExport() const {
    return m_snapshot_export;
}
void OAIGoogleCloudAiplatformV1ExportFeatureValuesRequest::setSnapshotExport(const OAIGoogleCloudAiplatformV1ExportFeatureValuesRequestSnapshotExport &snapshot_export) {
    m_snapshot_export = snapshot_export;
    m_snapshot_export_isSet = true;
}

bool OAIGoogleCloudAiplatformV1ExportFeatureValuesRequest::is_snapshot_export_Set() const{
    return m_snapshot_export_isSet;
}

bool OAIGoogleCloudAiplatformV1ExportFeatureValuesRequest::is_snapshot_export_Valid() const{
    return m_snapshot_export_isValid;
}

bool OAIGoogleCloudAiplatformV1ExportFeatureValuesRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_destination.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_feature_selector.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_full_export.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_settings.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_snapshot_export.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudAiplatformV1ExportFeatureValuesRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
