/**
 * Vertex AI API
 * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILearningGenaiRootScore.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILearningGenaiRootScore::OAILearningGenaiRootScore(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILearningGenaiRootScore::OAILearningGenaiRootScore() {
    this->initializeModel();
}

OAILearningGenaiRootScore::~OAILearningGenaiRootScore() {}

void OAILearningGenaiRootScore::initializeModel() {

    m_calculation_type_isSet = false;
    m_calculation_type_isValid = false;

    m_internal_metadata_isSet = false;
    m_internal_metadata_isValid = false;

    m_threshold_type_isSet = false;
    m_threshold_type_isValid = false;

    m_tokens_and_logprob_per_decoding_step_isSet = false;
    m_tokens_and_logprob_per_decoding_step_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAILearningGenaiRootScore::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILearningGenaiRootScore::fromJsonObject(QJsonObject json) {

    m_calculation_type_isValid = ::OpenAPI::fromJsonValue(m_calculation_type, json[QString("calculationType")]);
    m_calculation_type_isSet = !json[QString("calculationType")].isNull() && m_calculation_type_isValid;

    m_internal_metadata_isValid = ::OpenAPI::fromJsonValue(m_internal_metadata, json[QString("internalMetadata")]);
    m_internal_metadata_isSet = !json[QString("internalMetadata")].isNull() && m_internal_metadata_isValid;

    m_threshold_type_isValid = ::OpenAPI::fromJsonValue(m_threshold_type, json[QString("thresholdType")]);
    m_threshold_type_isSet = !json[QString("thresholdType")].isNull() && m_threshold_type_isValid;

    m_tokens_and_logprob_per_decoding_step_isValid = ::OpenAPI::fromJsonValue(m_tokens_and_logprob_per_decoding_step, json[QString("tokensAndLogprobPerDecodingStep")]);
    m_tokens_and_logprob_per_decoding_step_isSet = !json[QString("tokensAndLogprobPerDecodingStep")].isNull() && m_tokens_and_logprob_per_decoding_step_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAILearningGenaiRootScore::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILearningGenaiRootScore::asJsonObject() const {
    QJsonObject obj;
    if (m_calculation_type.isSet()) {
        obj.insert(QString("calculationType"), ::OpenAPI::toJsonValue(m_calculation_type));
    }
    if (m_internal_metadata.isSet()) {
        obj.insert(QString("internalMetadata"), ::OpenAPI::toJsonValue(m_internal_metadata));
    }
    if (m_threshold_type.isSet()) {
        obj.insert(QString("thresholdType"), ::OpenAPI::toJsonValue(m_threshold_type));
    }
    if (m_tokens_and_logprob_per_decoding_step.isSet()) {
        obj.insert(QString("tokensAndLogprobPerDecodingStep"), ::OpenAPI::toJsonValue(m_tokens_and_logprob_per_decoding_step));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

OAILearningGenaiRootCalculationType OAILearningGenaiRootScore::getCalculationType() const {
    return m_calculation_type;
}
void OAILearningGenaiRootScore::setCalculationType(const OAILearningGenaiRootCalculationType &calculation_type) {
    m_calculation_type = calculation_type;
    m_calculation_type_isSet = true;
}

bool OAILearningGenaiRootScore::is_calculation_type_Set() const{
    return m_calculation_type_isSet;
}

bool OAILearningGenaiRootScore::is_calculation_type_Valid() const{
    return m_calculation_type_isValid;
}

OAILearningGenaiRootInternalMetadata OAILearningGenaiRootScore::getInternalMetadata() const {
    return m_internal_metadata;
}
void OAILearningGenaiRootScore::setInternalMetadata(const OAILearningGenaiRootInternalMetadata &internal_metadata) {
    m_internal_metadata = internal_metadata;
    m_internal_metadata_isSet = true;
}

bool OAILearningGenaiRootScore::is_internal_metadata_Set() const{
    return m_internal_metadata_isSet;
}

bool OAILearningGenaiRootScore::is_internal_metadata_Valid() const{
    return m_internal_metadata_isValid;
}

OAILearningGenaiRootThresholdType OAILearningGenaiRootScore::getThresholdType() const {
    return m_threshold_type;
}
void OAILearningGenaiRootScore::setThresholdType(const OAILearningGenaiRootThresholdType &threshold_type) {
    m_threshold_type = threshold_type;
    m_threshold_type_isSet = true;
}

bool OAILearningGenaiRootScore::is_threshold_type_Set() const{
    return m_threshold_type_isSet;
}

bool OAILearningGenaiRootScore::is_threshold_type_Valid() const{
    return m_threshold_type_isValid;
}

OAILearningGenaiRootTokensAndLogProbPerDecodingStep OAILearningGenaiRootScore::getTokensAndLogprobPerDecodingStep() const {
    return m_tokens_and_logprob_per_decoding_step;
}
void OAILearningGenaiRootScore::setTokensAndLogprobPerDecodingStep(const OAILearningGenaiRootTokensAndLogProbPerDecodingStep &tokens_and_logprob_per_decoding_step) {
    m_tokens_and_logprob_per_decoding_step = tokens_and_logprob_per_decoding_step;
    m_tokens_and_logprob_per_decoding_step_isSet = true;
}

bool OAILearningGenaiRootScore::is_tokens_and_logprob_per_decoding_step_Set() const{
    return m_tokens_and_logprob_per_decoding_step_isSet;
}

bool OAILearningGenaiRootScore::is_tokens_and_logprob_per_decoding_step_Valid() const{
    return m_tokens_and_logprob_per_decoding_step_isValid;
}

double OAILearningGenaiRootScore::getValue() const {
    return m_value;
}
void OAILearningGenaiRootScore::setValue(const double &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAILearningGenaiRootScore::is_value_Set() const{
    return m_value_isSet;
}

bool OAILearningGenaiRootScore::is_value_Valid() const{
    return m_value_isValid;
}

bool OAILearningGenaiRootScore::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_calculation_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_internal_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_threshold_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tokens_and_logprob_per_decoding_step.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILearningGenaiRootScore::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
