/**
 * Vertex AI API
 * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudAiplatformV1NearestNeighborSearchOperationMetadataContentValidationStats.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudAiplatformV1NearestNeighborSearchOperationMetadataContentValidationStats::OAIGoogleCloudAiplatformV1NearestNeighborSearchOperationMetadataContentValidationStats(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudAiplatformV1NearestNeighborSearchOperationMetadataContentValidationStats::OAIGoogleCloudAiplatformV1NearestNeighborSearchOperationMetadataContentValidationStats() {
    this->initializeModel();
}

OAIGoogleCloudAiplatformV1NearestNeighborSearchOperationMetadataContentValidationStats::~OAIGoogleCloudAiplatformV1NearestNeighborSearchOperationMetadataContentValidationStats() {}

void OAIGoogleCloudAiplatformV1NearestNeighborSearchOperationMetadataContentValidationStats::initializeModel() {

    m_invalid_record_count_isSet = false;
    m_invalid_record_count_isValid = false;

    m_partial_errors_isSet = false;
    m_partial_errors_isValid = false;

    m_source_gcs_uri_isSet = false;
    m_source_gcs_uri_isValid = false;

    m_valid_record_count_isSet = false;
    m_valid_record_count_isValid = false;
}

void OAIGoogleCloudAiplatformV1NearestNeighborSearchOperationMetadataContentValidationStats::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudAiplatformV1NearestNeighborSearchOperationMetadataContentValidationStats::fromJsonObject(QJsonObject json) {

    m_invalid_record_count_isValid = ::OpenAPI::fromJsonValue(m_invalid_record_count, json[QString("invalidRecordCount")]);
    m_invalid_record_count_isSet = !json[QString("invalidRecordCount")].isNull() && m_invalid_record_count_isValid;

    m_partial_errors_isValid = ::OpenAPI::fromJsonValue(m_partial_errors, json[QString("partialErrors")]);
    m_partial_errors_isSet = !json[QString("partialErrors")].isNull() && m_partial_errors_isValid;

    m_source_gcs_uri_isValid = ::OpenAPI::fromJsonValue(m_source_gcs_uri, json[QString("sourceGcsUri")]);
    m_source_gcs_uri_isSet = !json[QString("sourceGcsUri")].isNull() && m_source_gcs_uri_isValid;

    m_valid_record_count_isValid = ::OpenAPI::fromJsonValue(m_valid_record_count, json[QString("validRecordCount")]);
    m_valid_record_count_isSet = !json[QString("validRecordCount")].isNull() && m_valid_record_count_isValid;
}

QString OAIGoogleCloudAiplatformV1NearestNeighborSearchOperationMetadataContentValidationStats::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudAiplatformV1NearestNeighborSearchOperationMetadataContentValidationStats::asJsonObject() const {
    QJsonObject obj;
    if (m_invalid_record_count_isSet) {
        obj.insert(QString("invalidRecordCount"), ::OpenAPI::toJsonValue(m_invalid_record_count));
    }
    if (m_partial_errors.size() > 0) {
        obj.insert(QString("partialErrors"), ::OpenAPI::toJsonValue(m_partial_errors));
    }
    if (m_source_gcs_uri_isSet) {
        obj.insert(QString("sourceGcsUri"), ::OpenAPI::toJsonValue(m_source_gcs_uri));
    }
    if (m_valid_record_count_isSet) {
        obj.insert(QString("validRecordCount"), ::OpenAPI::toJsonValue(m_valid_record_count));
    }
    return obj;
}

QString OAIGoogleCloudAiplatformV1NearestNeighborSearchOperationMetadataContentValidationStats::getInvalidRecordCount() const {
    return m_invalid_record_count;
}
void OAIGoogleCloudAiplatformV1NearestNeighborSearchOperationMetadataContentValidationStats::setInvalidRecordCount(const QString &invalid_record_count) {
    m_invalid_record_count = invalid_record_count;
    m_invalid_record_count_isSet = true;
}

bool OAIGoogleCloudAiplatformV1NearestNeighborSearchOperationMetadataContentValidationStats::is_invalid_record_count_Set() const{
    return m_invalid_record_count_isSet;
}

bool OAIGoogleCloudAiplatformV1NearestNeighborSearchOperationMetadataContentValidationStats::is_invalid_record_count_Valid() const{
    return m_invalid_record_count_isValid;
}

QList<OAIGoogleCloudAiplatformV1NearestNeighborSearchOperationMetadataRecordError> OAIGoogleCloudAiplatformV1NearestNeighborSearchOperationMetadataContentValidationStats::getPartialErrors() const {
    return m_partial_errors;
}
void OAIGoogleCloudAiplatformV1NearestNeighborSearchOperationMetadataContentValidationStats::setPartialErrors(const QList<OAIGoogleCloudAiplatformV1NearestNeighborSearchOperationMetadataRecordError> &partial_errors) {
    m_partial_errors = partial_errors;
    m_partial_errors_isSet = true;
}

bool OAIGoogleCloudAiplatformV1NearestNeighborSearchOperationMetadataContentValidationStats::is_partial_errors_Set() const{
    return m_partial_errors_isSet;
}

bool OAIGoogleCloudAiplatformV1NearestNeighborSearchOperationMetadataContentValidationStats::is_partial_errors_Valid() const{
    return m_partial_errors_isValid;
}

QString OAIGoogleCloudAiplatformV1NearestNeighborSearchOperationMetadataContentValidationStats::getSourceGcsUri() const {
    return m_source_gcs_uri;
}
void OAIGoogleCloudAiplatformV1NearestNeighborSearchOperationMetadataContentValidationStats::setSourceGcsUri(const QString &source_gcs_uri) {
    m_source_gcs_uri = source_gcs_uri;
    m_source_gcs_uri_isSet = true;
}

bool OAIGoogleCloudAiplatformV1NearestNeighborSearchOperationMetadataContentValidationStats::is_source_gcs_uri_Set() const{
    return m_source_gcs_uri_isSet;
}

bool OAIGoogleCloudAiplatformV1NearestNeighborSearchOperationMetadataContentValidationStats::is_source_gcs_uri_Valid() const{
    return m_source_gcs_uri_isValid;
}

QString OAIGoogleCloudAiplatformV1NearestNeighborSearchOperationMetadataContentValidationStats::getValidRecordCount() const {
    return m_valid_record_count;
}
void OAIGoogleCloudAiplatformV1NearestNeighborSearchOperationMetadataContentValidationStats::setValidRecordCount(const QString &valid_record_count) {
    m_valid_record_count = valid_record_count;
    m_valid_record_count_isSet = true;
}

bool OAIGoogleCloudAiplatformV1NearestNeighborSearchOperationMetadataContentValidationStats::is_valid_record_count_Set() const{
    return m_valid_record_count_isSet;
}

bool OAIGoogleCloudAiplatformV1NearestNeighborSearchOperationMetadataContentValidationStats::is_valid_record_count_Valid() const{
    return m_valid_record_count_isValid;
}

bool OAIGoogleCloudAiplatformV1NearestNeighborSearchOperationMetadataContentValidationStats::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_invalid_record_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_partial_errors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_gcs_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_valid_record_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudAiplatformV1NearestNeighborSearchOperationMetadataContentValidationStats::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
