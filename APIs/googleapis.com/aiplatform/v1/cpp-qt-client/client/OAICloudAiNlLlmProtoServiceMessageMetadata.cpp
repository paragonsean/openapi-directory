/**
 * Vertex AI API
 * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICloudAiNlLlmProtoServiceMessageMetadata.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICloudAiNlLlmProtoServiceMessageMetadata::OAICloudAiNlLlmProtoServiceMessageMetadata(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICloudAiNlLlmProtoServiceMessageMetadata::OAICloudAiNlLlmProtoServiceMessageMetadata() {
    this->initializeModel();
}

OAICloudAiNlLlmProtoServiceMessageMetadata::~OAICloudAiNlLlmProtoServiceMessageMetadata() {}

void OAICloudAiNlLlmProtoServiceMessageMetadata::initializeModel() {

    m_input_filter_info_isSet = false;
    m_input_filter_info_isValid = false;

    m_model_routing_decision_isSet = false;
    m_model_routing_decision_isValid = false;

    m_output_filter_info_isSet = false;
    m_output_filter_info_isValid = false;
}

void OAICloudAiNlLlmProtoServiceMessageMetadata::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICloudAiNlLlmProtoServiceMessageMetadata::fromJsonObject(QJsonObject json) {

    m_input_filter_info_isValid = ::OpenAPI::fromJsonValue(m_input_filter_info, json[QString("inputFilterInfo")]);
    m_input_filter_info_isSet = !json[QString("inputFilterInfo")].isNull() && m_input_filter_info_isValid;

    m_model_routing_decision_isValid = ::OpenAPI::fromJsonValue(m_model_routing_decision, json[QString("modelRoutingDecision")]);
    m_model_routing_decision_isSet = !json[QString("modelRoutingDecision")].isNull() && m_model_routing_decision_isValid;

    m_output_filter_info_isValid = ::OpenAPI::fromJsonValue(m_output_filter_info, json[QString("outputFilterInfo")]);
    m_output_filter_info_isSet = !json[QString("outputFilterInfo")].isNull() && m_output_filter_info_isValid;
}

QString OAICloudAiNlLlmProtoServiceMessageMetadata::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICloudAiNlLlmProtoServiceMessageMetadata::asJsonObject() const {
    QJsonObject obj;
    if (m_input_filter_info.isSet()) {
        obj.insert(QString("inputFilterInfo"), ::OpenAPI::toJsonValue(m_input_filter_info));
    }
    if (m_model_routing_decision.isSet()) {
        obj.insert(QString("modelRoutingDecision"), ::OpenAPI::toJsonValue(m_model_routing_decision));
    }
    if (m_output_filter_info.size() > 0) {
        obj.insert(QString("outputFilterInfo"), ::OpenAPI::toJsonValue(m_output_filter_info));
    }
    return obj;
}

OAILearningServingLlmMessageMetadata OAICloudAiNlLlmProtoServiceMessageMetadata::getInputFilterInfo() const {
    return m_input_filter_info;
}
void OAICloudAiNlLlmProtoServiceMessageMetadata::setInputFilterInfo(const OAILearningServingLlmMessageMetadata &input_filter_info) {
    m_input_filter_info = input_filter_info;
    m_input_filter_info_isSet = true;
}

bool OAICloudAiNlLlmProtoServiceMessageMetadata::is_input_filter_info_Set() const{
    return m_input_filter_info_isSet;
}

bool OAICloudAiNlLlmProtoServiceMessageMetadata::is_input_filter_info_Valid() const{
    return m_input_filter_info_isValid;
}

OAILearningGenaiRootRoutingDecision OAICloudAiNlLlmProtoServiceMessageMetadata::getModelRoutingDecision() const {
    return m_model_routing_decision;
}
void OAICloudAiNlLlmProtoServiceMessageMetadata::setModelRoutingDecision(const OAILearningGenaiRootRoutingDecision &model_routing_decision) {
    m_model_routing_decision = model_routing_decision;
    m_model_routing_decision_isSet = true;
}

bool OAICloudAiNlLlmProtoServiceMessageMetadata::is_model_routing_decision_Set() const{
    return m_model_routing_decision_isSet;
}

bool OAICloudAiNlLlmProtoServiceMessageMetadata::is_model_routing_decision_Valid() const{
    return m_model_routing_decision_isValid;
}

QList<OAILearningServingLlmMessageMetadata> OAICloudAiNlLlmProtoServiceMessageMetadata::getOutputFilterInfo() const {
    return m_output_filter_info;
}
void OAICloudAiNlLlmProtoServiceMessageMetadata::setOutputFilterInfo(const QList<OAILearningServingLlmMessageMetadata> &output_filter_info) {
    m_output_filter_info = output_filter_info;
    m_output_filter_info_isSet = true;
}

bool OAICloudAiNlLlmProtoServiceMessageMetadata::is_output_filter_info_Set() const{
    return m_output_filter_info_isSet;
}

bool OAICloudAiNlLlmProtoServiceMessageMetadata::is_output_filter_info_Valid() const{
    return m_output_filter_info_isValid;
}

bool OAICloudAiNlLlmProtoServiceMessageMetadata::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_input_filter_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_routing_decision.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_output_filter_info.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICloudAiNlLlmProtoServiceMessageMetadata::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
