/**
 * Vertex AI API
 * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILearningGenaiRootCodeyTruncatorMetadata.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILearningGenaiRootCodeyTruncatorMetadata::OAILearningGenaiRootCodeyTruncatorMetadata(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILearningGenaiRootCodeyTruncatorMetadata::OAILearningGenaiRootCodeyTruncatorMetadata() {
    this->initializeModel();
}

OAILearningGenaiRootCodeyTruncatorMetadata::~OAILearningGenaiRootCodeyTruncatorMetadata() {}

void OAILearningGenaiRootCodeyTruncatorMetadata::initializeModel() {

    m_cutoff_index_isSet = false;
    m_cutoff_index_isValid = false;

    m_truncated_text_isSet = false;
    m_truncated_text_isValid = false;
}

void OAILearningGenaiRootCodeyTruncatorMetadata::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILearningGenaiRootCodeyTruncatorMetadata::fromJsonObject(QJsonObject json) {

    m_cutoff_index_isValid = ::OpenAPI::fromJsonValue(m_cutoff_index, json[QString("cutoffIndex")]);
    m_cutoff_index_isSet = !json[QString("cutoffIndex")].isNull() && m_cutoff_index_isValid;

    m_truncated_text_isValid = ::OpenAPI::fromJsonValue(m_truncated_text, json[QString("truncatedText")]);
    m_truncated_text_isSet = !json[QString("truncatedText")].isNull() && m_truncated_text_isValid;
}

QString OAILearningGenaiRootCodeyTruncatorMetadata::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILearningGenaiRootCodeyTruncatorMetadata::asJsonObject() const {
    QJsonObject obj;
    if (m_cutoff_index_isSet) {
        obj.insert(QString("cutoffIndex"), ::OpenAPI::toJsonValue(m_cutoff_index));
    }
    if (m_truncated_text_isSet) {
        obj.insert(QString("truncatedText"), ::OpenAPI::toJsonValue(m_truncated_text));
    }
    return obj;
}

qint32 OAILearningGenaiRootCodeyTruncatorMetadata::getCutoffIndex() const {
    return m_cutoff_index;
}
void OAILearningGenaiRootCodeyTruncatorMetadata::setCutoffIndex(const qint32 &cutoff_index) {
    m_cutoff_index = cutoff_index;
    m_cutoff_index_isSet = true;
}

bool OAILearningGenaiRootCodeyTruncatorMetadata::is_cutoff_index_Set() const{
    return m_cutoff_index_isSet;
}

bool OAILearningGenaiRootCodeyTruncatorMetadata::is_cutoff_index_Valid() const{
    return m_cutoff_index_isValid;
}

QString OAILearningGenaiRootCodeyTruncatorMetadata::getTruncatedText() const {
    return m_truncated_text;
}
void OAILearningGenaiRootCodeyTruncatorMetadata::setTruncatedText(const QString &truncated_text) {
    m_truncated_text = truncated_text;
    m_truncated_text_isSet = true;
}

bool OAILearningGenaiRootCodeyTruncatorMetadata::is_truncated_text_Set() const{
    return m_truncated_text_isSet;
}

bool OAILearningGenaiRootCodeyTruncatorMetadata::is_truncated_text_Valid() const{
    return m_truncated_text_isValid;
}

bool OAILearningGenaiRootCodeyTruncatorMetadata::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cutoff_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_truncated_text_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILearningGenaiRootCodeyTruncatorMetadata::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
