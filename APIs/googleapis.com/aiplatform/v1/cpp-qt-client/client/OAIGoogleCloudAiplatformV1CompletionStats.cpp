/**
 * Vertex AI API
 * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudAiplatformV1CompletionStats.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudAiplatformV1CompletionStats::OAIGoogleCloudAiplatformV1CompletionStats(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudAiplatformV1CompletionStats::OAIGoogleCloudAiplatformV1CompletionStats() {
    this->initializeModel();
}

OAIGoogleCloudAiplatformV1CompletionStats::~OAIGoogleCloudAiplatformV1CompletionStats() {}

void OAIGoogleCloudAiplatformV1CompletionStats::initializeModel() {

    m_failed_count_isSet = false;
    m_failed_count_isValid = false;

    m_incomplete_count_isSet = false;
    m_incomplete_count_isValid = false;

    m_successful_count_isSet = false;
    m_successful_count_isValid = false;

    m_successful_forecast_point_count_isSet = false;
    m_successful_forecast_point_count_isValid = false;
}

void OAIGoogleCloudAiplatformV1CompletionStats::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudAiplatformV1CompletionStats::fromJsonObject(QJsonObject json) {

    m_failed_count_isValid = ::OpenAPI::fromJsonValue(m_failed_count, json[QString("failedCount")]);
    m_failed_count_isSet = !json[QString("failedCount")].isNull() && m_failed_count_isValid;

    m_incomplete_count_isValid = ::OpenAPI::fromJsonValue(m_incomplete_count, json[QString("incompleteCount")]);
    m_incomplete_count_isSet = !json[QString("incompleteCount")].isNull() && m_incomplete_count_isValid;

    m_successful_count_isValid = ::OpenAPI::fromJsonValue(m_successful_count, json[QString("successfulCount")]);
    m_successful_count_isSet = !json[QString("successfulCount")].isNull() && m_successful_count_isValid;

    m_successful_forecast_point_count_isValid = ::OpenAPI::fromJsonValue(m_successful_forecast_point_count, json[QString("successfulForecastPointCount")]);
    m_successful_forecast_point_count_isSet = !json[QString("successfulForecastPointCount")].isNull() && m_successful_forecast_point_count_isValid;
}

QString OAIGoogleCloudAiplatformV1CompletionStats::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudAiplatformV1CompletionStats::asJsonObject() const {
    QJsonObject obj;
    if (m_failed_count_isSet) {
        obj.insert(QString("failedCount"), ::OpenAPI::toJsonValue(m_failed_count));
    }
    if (m_incomplete_count_isSet) {
        obj.insert(QString("incompleteCount"), ::OpenAPI::toJsonValue(m_incomplete_count));
    }
    if (m_successful_count_isSet) {
        obj.insert(QString("successfulCount"), ::OpenAPI::toJsonValue(m_successful_count));
    }
    if (m_successful_forecast_point_count_isSet) {
        obj.insert(QString("successfulForecastPointCount"), ::OpenAPI::toJsonValue(m_successful_forecast_point_count));
    }
    return obj;
}

QString OAIGoogleCloudAiplatformV1CompletionStats::getFailedCount() const {
    return m_failed_count;
}
void OAIGoogleCloudAiplatformV1CompletionStats::setFailedCount(const QString &failed_count) {
    m_failed_count = failed_count;
    m_failed_count_isSet = true;
}

bool OAIGoogleCloudAiplatformV1CompletionStats::is_failed_count_Set() const{
    return m_failed_count_isSet;
}

bool OAIGoogleCloudAiplatformV1CompletionStats::is_failed_count_Valid() const{
    return m_failed_count_isValid;
}

QString OAIGoogleCloudAiplatformV1CompletionStats::getIncompleteCount() const {
    return m_incomplete_count;
}
void OAIGoogleCloudAiplatformV1CompletionStats::setIncompleteCount(const QString &incomplete_count) {
    m_incomplete_count = incomplete_count;
    m_incomplete_count_isSet = true;
}

bool OAIGoogleCloudAiplatformV1CompletionStats::is_incomplete_count_Set() const{
    return m_incomplete_count_isSet;
}

bool OAIGoogleCloudAiplatformV1CompletionStats::is_incomplete_count_Valid() const{
    return m_incomplete_count_isValid;
}

QString OAIGoogleCloudAiplatformV1CompletionStats::getSuccessfulCount() const {
    return m_successful_count;
}
void OAIGoogleCloudAiplatformV1CompletionStats::setSuccessfulCount(const QString &successful_count) {
    m_successful_count = successful_count;
    m_successful_count_isSet = true;
}

bool OAIGoogleCloudAiplatformV1CompletionStats::is_successful_count_Set() const{
    return m_successful_count_isSet;
}

bool OAIGoogleCloudAiplatformV1CompletionStats::is_successful_count_Valid() const{
    return m_successful_count_isValid;
}

QString OAIGoogleCloudAiplatformV1CompletionStats::getSuccessfulForecastPointCount() const {
    return m_successful_forecast_point_count;
}
void OAIGoogleCloudAiplatformV1CompletionStats::setSuccessfulForecastPointCount(const QString &successful_forecast_point_count) {
    m_successful_forecast_point_count = successful_forecast_point_count;
    m_successful_forecast_point_count_isSet = true;
}

bool OAIGoogleCloudAiplatformV1CompletionStats::is_successful_forecast_point_count_Set() const{
    return m_successful_forecast_point_count_isSet;
}

bool OAIGoogleCloudAiplatformV1CompletionStats::is_successful_forecast_point_count_Valid() const{
    return m_successful_forecast_point_count_isValid;
}

bool OAIGoogleCloudAiplatformV1CompletionStats::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_failed_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_incomplete_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_successful_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_successful_forecast_point_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudAiplatformV1CompletionStats::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
