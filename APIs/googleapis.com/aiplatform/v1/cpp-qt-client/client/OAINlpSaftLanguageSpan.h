/**
 * Vertex AI API
 * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAINlpSaftLanguageSpan.h
 *
 * 
 */

#ifndef OAINlpSaftLanguageSpan_H
#define OAINlpSaftLanguageSpan_H

#include <QJsonObject>

#include "OAINlpSaftLangIdLocalesResult.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAINlpSaftLangIdLocalesResult;

class OAINlpSaftLanguageSpan : public OAIObject {
public:
    OAINlpSaftLanguageSpan();
    OAINlpSaftLanguageSpan(QString json);
    ~OAINlpSaftLanguageSpan() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getEnd() const;
    void setEnd(const qint32 &end);
    bool is_end_Set() const;
    bool is_end_Valid() const;

    QString getLanguageCode() const;
    void setLanguageCode(const QString &language_code);
    bool is_language_code_Set() const;
    bool is_language_code_Valid() const;

    OAINlpSaftLangIdLocalesResult getLocales() const;
    void setLocales(const OAINlpSaftLangIdLocalesResult &locales);
    bool is_locales_Set() const;
    bool is_locales_Valid() const;

    float getProbability() const;
    void setProbability(const float &probability);
    bool is_probability_Set() const;
    bool is_probability_Valid() const;

    qint32 getStart() const;
    void setStart(const qint32 &start);
    bool is_start_Set() const;
    bool is_start_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_end;
    bool m_end_isSet;
    bool m_end_isValid;

    QString m_language_code;
    bool m_language_code_isSet;
    bool m_language_code_isValid;

    OAINlpSaftLangIdLocalesResult m_locales;
    bool m_locales_isSet;
    bool m_locales_isValid;

    float m_probability;
    bool m_probability_isSet;
    bool m_probability_isValid;

    qint32 m_start;
    bool m_start_isSet;
    bool m_start_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAINlpSaftLanguageSpan)

#endif // OAINlpSaftLanguageSpan_H
