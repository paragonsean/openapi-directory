/**
 * Vertex AI API
 * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICloudAiNlLlmProtoServiceSafetyRating.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICloudAiNlLlmProtoServiceSafetyRating::OAICloudAiNlLlmProtoServiceSafetyRating(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICloudAiNlLlmProtoServiceSafetyRating::OAICloudAiNlLlmProtoServiceSafetyRating() {
    this->initializeModel();
}

OAICloudAiNlLlmProtoServiceSafetyRating::~OAICloudAiNlLlmProtoServiceSafetyRating() {}

void OAICloudAiNlLlmProtoServiceSafetyRating::initializeModel() {

    m_blocked_isSet = false;
    m_blocked_isValid = false;

    m_category_isSet = false;
    m_category_isValid = false;

    m_influential_terms_isSet = false;
    m_influential_terms_isValid = false;

    m_probability_isSet = false;
    m_probability_isValid = false;

    m_probability_score_isSet = false;
    m_probability_score_isValid = false;

    m_severity_isSet = false;
    m_severity_isValid = false;

    m_severity_score_isSet = false;
    m_severity_score_isValid = false;
}

void OAICloudAiNlLlmProtoServiceSafetyRating::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICloudAiNlLlmProtoServiceSafetyRating::fromJsonObject(QJsonObject json) {

    m_blocked_isValid = ::OpenAPI::fromJsonValue(m_blocked, json[QString("blocked")]);
    m_blocked_isSet = !json[QString("blocked")].isNull() && m_blocked_isValid;

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("category")]);
    m_category_isSet = !json[QString("category")].isNull() && m_category_isValid;

    m_influential_terms_isValid = ::OpenAPI::fromJsonValue(m_influential_terms, json[QString("influentialTerms")]);
    m_influential_terms_isSet = !json[QString("influentialTerms")].isNull() && m_influential_terms_isValid;

    m_probability_isValid = ::OpenAPI::fromJsonValue(m_probability, json[QString("probability")]);
    m_probability_isSet = !json[QString("probability")].isNull() && m_probability_isValid;

    m_probability_score_isValid = ::OpenAPI::fromJsonValue(m_probability_score, json[QString("probabilityScore")]);
    m_probability_score_isSet = !json[QString("probabilityScore")].isNull() && m_probability_score_isValid;

    m_severity_isValid = ::OpenAPI::fromJsonValue(m_severity, json[QString("severity")]);
    m_severity_isSet = !json[QString("severity")].isNull() && m_severity_isValid;

    m_severity_score_isValid = ::OpenAPI::fromJsonValue(m_severity_score, json[QString("severityScore")]);
    m_severity_score_isSet = !json[QString("severityScore")].isNull() && m_severity_score_isValid;
}

QString OAICloudAiNlLlmProtoServiceSafetyRating::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICloudAiNlLlmProtoServiceSafetyRating::asJsonObject() const {
    QJsonObject obj;
    if (m_blocked_isSet) {
        obj.insert(QString("blocked"), ::OpenAPI::toJsonValue(m_blocked));
    }
    if (m_category_isSet) {
        obj.insert(QString("category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_influential_terms.size() > 0) {
        obj.insert(QString("influentialTerms"), ::OpenAPI::toJsonValue(m_influential_terms));
    }
    if (m_probability_isSet) {
        obj.insert(QString("probability"), ::OpenAPI::toJsonValue(m_probability));
    }
    if (m_probability_score_isSet) {
        obj.insert(QString("probabilityScore"), ::OpenAPI::toJsonValue(m_probability_score));
    }
    if (m_severity_isSet) {
        obj.insert(QString("severity"), ::OpenAPI::toJsonValue(m_severity));
    }
    if (m_severity_score_isSet) {
        obj.insert(QString("severityScore"), ::OpenAPI::toJsonValue(m_severity_score));
    }
    return obj;
}

bool OAICloudAiNlLlmProtoServiceSafetyRating::isBlocked() const {
    return m_blocked;
}
void OAICloudAiNlLlmProtoServiceSafetyRating::setBlocked(const bool &blocked) {
    m_blocked = blocked;
    m_blocked_isSet = true;
}

bool OAICloudAiNlLlmProtoServiceSafetyRating::is_blocked_Set() const{
    return m_blocked_isSet;
}

bool OAICloudAiNlLlmProtoServiceSafetyRating::is_blocked_Valid() const{
    return m_blocked_isValid;
}

QString OAICloudAiNlLlmProtoServiceSafetyRating::getCategory() const {
    return m_category;
}
void OAICloudAiNlLlmProtoServiceSafetyRating::setCategory(const QString &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAICloudAiNlLlmProtoServiceSafetyRating::is_category_Set() const{
    return m_category_isSet;
}

bool OAICloudAiNlLlmProtoServiceSafetyRating::is_category_Valid() const{
    return m_category_isValid;
}

QList<OAICloudAiNlLlmProtoServiceSafetyRatingInfluentialTerm> OAICloudAiNlLlmProtoServiceSafetyRating::getInfluentialTerms() const {
    return m_influential_terms;
}
void OAICloudAiNlLlmProtoServiceSafetyRating::setInfluentialTerms(const QList<OAICloudAiNlLlmProtoServiceSafetyRatingInfluentialTerm> &influential_terms) {
    m_influential_terms = influential_terms;
    m_influential_terms_isSet = true;
}

bool OAICloudAiNlLlmProtoServiceSafetyRating::is_influential_terms_Set() const{
    return m_influential_terms_isSet;
}

bool OAICloudAiNlLlmProtoServiceSafetyRating::is_influential_terms_Valid() const{
    return m_influential_terms_isValid;
}

QString OAICloudAiNlLlmProtoServiceSafetyRating::getProbability() const {
    return m_probability;
}
void OAICloudAiNlLlmProtoServiceSafetyRating::setProbability(const QString &probability) {
    m_probability = probability;
    m_probability_isSet = true;
}

bool OAICloudAiNlLlmProtoServiceSafetyRating::is_probability_Set() const{
    return m_probability_isSet;
}

bool OAICloudAiNlLlmProtoServiceSafetyRating::is_probability_Valid() const{
    return m_probability_isValid;
}

float OAICloudAiNlLlmProtoServiceSafetyRating::getProbabilityScore() const {
    return m_probability_score;
}
void OAICloudAiNlLlmProtoServiceSafetyRating::setProbabilityScore(const float &probability_score) {
    m_probability_score = probability_score;
    m_probability_score_isSet = true;
}

bool OAICloudAiNlLlmProtoServiceSafetyRating::is_probability_score_Set() const{
    return m_probability_score_isSet;
}

bool OAICloudAiNlLlmProtoServiceSafetyRating::is_probability_score_Valid() const{
    return m_probability_score_isValid;
}

QString OAICloudAiNlLlmProtoServiceSafetyRating::getSeverity() const {
    return m_severity;
}
void OAICloudAiNlLlmProtoServiceSafetyRating::setSeverity(const QString &severity) {
    m_severity = severity;
    m_severity_isSet = true;
}

bool OAICloudAiNlLlmProtoServiceSafetyRating::is_severity_Set() const{
    return m_severity_isSet;
}

bool OAICloudAiNlLlmProtoServiceSafetyRating::is_severity_Valid() const{
    return m_severity_isValid;
}

float OAICloudAiNlLlmProtoServiceSafetyRating::getSeverityScore() const {
    return m_severity_score;
}
void OAICloudAiNlLlmProtoServiceSafetyRating::setSeverityScore(const float &severity_score) {
    m_severity_score = severity_score;
    m_severity_score_isSet = true;
}

bool OAICloudAiNlLlmProtoServiceSafetyRating::is_severity_score_Set() const{
    return m_severity_score_isSet;
}

bool OAICloudAiNlLlmProtoServiceSafetyRating::is_severity_score_Valid() const{
    return m_severity_score_isValid;
}

bool OAICloudAiNlLlmProtoServiceSafetyRating::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_blocked_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_influential_terms.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_probability_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_probability_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_severity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_severity_score_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICloudAiNlLlmProtoServiceSafetyRating::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
