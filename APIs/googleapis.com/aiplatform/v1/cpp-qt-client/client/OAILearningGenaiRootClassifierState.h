/**
 * Vertex AI API
 * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAILearningGenaiRootClassifierState.h
 *
 * DataProviderOutput and MetricOutput can be saved between calls to the Classifier framework. For instance, you can run the query classifier, get outputs from those metrics, then use them in a result classifier as well. Example rule based on this idea: and_rules { rule { metric_name: &#39;query_safesearch_v2&#39; ... } rule { metric_name: &#39;response_safesearch_v2&#39; ... } }
 */

#ifndef OAILearningGenaiRootClassifierState_H
#define OAILearningGenaiRootClassifierState_H

#include <QJsonObject>

#include "OAILearningGenaiRootDataProviderOutput.h"
#include "OAILearningGenaiRootMetricOutput.h"
#include <QList>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAILearningGenaiRootDataProviderOutput;
class OAILearningGenaiRootMetricOutput;

class OAILearningGenaiRootClassifierState : public OAIObject {
public:
    OAILearningGenaiRootClassifierState();
    OAILearningGenaiRootClassifierState(QString json);
    ~OAILearningGenaiRootClassifierState() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<OAILearningGenaiRootDataProviderOutput> getDataProviderOutput() const;
    void setDataProviderOutput(const QList<OAILearningGenaiRootDataProviderOutput> &data_provider_output);
    bool is_data_provider_output_Set() const;
    bool is_data_provider_output_Valid() const;

    QList<OAILearningGenaiRootMetricOutput> getMetricOutput() const;
    void setMetricOutput(const QList<OAILearningGenaiRootMetricOutput> &metric_output);
    bool is_metric_output_Set() const;
    bool is_metric_output_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<OAILearningGenaiRootDataProviderOutput> m_data_provider_output;
    bool m_data_provider_output_isSet;
    bool m_data_provider_output_isValid;

    QList<OAILearningGenaiRootMetricOutput> m_metric_output;
    bool m_metric_output_isSet;
    bool m_metric_output_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAILearningGenaiRootClassifierState)

#endif // OAILearningGenaiRootClassifierState_H
