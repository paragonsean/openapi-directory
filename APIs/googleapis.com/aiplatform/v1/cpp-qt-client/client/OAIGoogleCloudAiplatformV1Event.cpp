/**
 * Vertex AI API
 * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudAiplatformV1Event.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudAiplatformV1Event::OAIGoogleCloudAiplatformV1Event(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudAiplatformV1Event::OAIGoogleCloudAiplatformV1Event() {
    this->initializeModel();
}

OAIGoogleCloudAiplatformV1Event::~OAIGoogleCloudAiplatformV1Event() {}

void OAIGoogleCloudAiplatformV1Event::initializeModel() {

    m_artifact_isSet = false;
    m_artifact_isValid = false;

    m_event_time_isSet = false;
    m_event_time_isValid = false;

    m_execution_isSet = false;
    m_execution_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIGoogleCloudAiplatformV1Event::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudAiplatformV1Event::fromJsonObject(QJsonObject json) {

    m_artifact_isValid = ::OpenAPI::fromJsonValue(m_artifact, json[QString("artifact")]);
    m_artifact_isSet = !json[QString("artifact")].isNull() && m_artifact_isValid;

    m_event_time_isValid = ::OpenAPI::fromJsonValue(m_event_time, json[QString("eventTime")]);
    m_event_time_isSet = !json[QString("eventTime")].isNull() && m_event_time_isValid;

    m_execution_isValid = ::OpenAPI::fromJsonValue(m_execution, json[QString("execution")]);
    m_execution_isSet = !json[QString("execution")].isNull() && m_execution_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIGoogleCloudAiplatformV1Event::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudAiplatformV1Event::asJsonObject() const {
    QJsonObject obj;
    if (m_artifact_isSet) {
        obj.insert(QString("artifact"), ::OpenAPI::toJsonValue(m_artifact));
    }
    if (m_event_time_isSet) {
        obj.insert(QString("eventTime"), ::OpenAPI::toJsonValue(m_event_time));
    }
    if (m_execution_isSet) {
        obj.insert(QString("execution"), ::OpenAPI::toJsonValue(m_execution));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIGoogleCloudAiplatformV1Event::getArtifact() const {
    return m_artifact;
}
void OAIGoogleCloudAiplatformV1Event::setArtifact(const QString &artifact) {
    m_artifact = artifact;
    m_artifact_isSet = true;
}

bool OAIGoogleCloudAiplatformV1Event::is_artifact_Set() const{
    return m_artifact_isSet;
}

bool OAIGoogleCloudAiplatformV1Event::is_artifact_Valid() const{
    return m_artifact_isValid;
}

QString OAIGoogleCloudAiplatformV1Event::getEventTime() const {
    return m_event_time;
}
void OAIGoogleCloudAiplatformV1Event::setEventTime(const QString &event_time) {
    m_event_time = event_time;
    m_event_time_isSet = true;
}

bool OAIGoogleCloudAiplatformV1Event::is_event_time_Set() const{
    return m_event_time_isSet;
}

bool OAIGoogleCloudAiplatformV1Event::is_event_time_Valid() const{
    return m_event_time_isValid;
}

QString OAIGoogleCloudAiplatformV1Event::getExecution() const {
    return m_execution;
}
void OAIGoogleCloudAiplatformV1Event::setExecution(const QString &execution) {
    m_execution = execution;
    m_execution_isSet = true;
}

bool OAIGoogleCloudAiplatformV1Event::is_execution_Set() const{
    return m_execution_isSet;
}

bool OAIGoogleCloudAiplatformV1Event::is_execution_Valid() const{
    return m_execution_isValid;
}

QMap<QString, QString> OAIGoogleCloudAiplatformV1Event::getLabels() const {
    return m_labels;
}
void OAIGoogleCloudAiplatformV1Event::setLabels(const QMap<QString, QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIGoogleCloudAiplatformV1Event::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIGoogleCloudAiplatformV1Event::is_labels_Valid() const{
    return m_labels_isValid;
}

QString OAIGoogleCloudAiplatformV1Event::getType() const {
    return m_type;
}
void OAIGoogleCloudAiplatformV1Event::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIGoogleCloudAiplatformV1Event::is_type_Set() const{
    return m_type_isSet;
}

bool OAIGoogleCloudAiplatformV1Event::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIGoogleCloudAiplatformV1Event::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_artifact_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_execution_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudAiplatformV1Event::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
