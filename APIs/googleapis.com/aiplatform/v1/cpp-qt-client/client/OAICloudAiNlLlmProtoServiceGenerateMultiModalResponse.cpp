/**
 * Vertex AI API
 * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICloudAiNlLlmProtoServiceGenerateMultiModalResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICloudAiNlLlmProtoServiceGenerateMultiModalResponse::OAICloudAiNlLlmProtoServiceGenerateMultiModalResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICloudAiNlLlmProtoServiceGenerateMultiModalResponse::OAICloudAiNlLlmProtoServiceGenerateMultiModalResponse() {
    this->initializeModel();
}

OAICloudAiNlLlmProtoServiceGenerateMultiModalResponse::~OAICloudAiNlLlmProtoServiceGenerateMultiModalResponse() {}

void OAICloudAiNlLlmProtoServiceGenerateMultiModalResponse::initializeModel() {

    m_candidates_isSet = false;
    m_candidates_isValid = false;

    m_debug_metadata_isSet = false;
    m_debug_metadata_isValid = false;

    m_facts_isSet = false;
    m_facts_isValid = false;

    m_prompt_feedback_isSet = false;
    m_prompt_feedback_isValid = false;

    m_reporting_metrics_isSet = false;
    m_reporting_metrics_isValid = false;

    m_usage_metadata_isSet = false;
    m_usage_metadata_isValid = false;
}

void OAICloudAiNlLlmProtoServiceGenerateMultiModalResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICloudAiNlLlmProtoServiceGenerateMultiModalResponse::fromJsonObject(QJsonObject json) {

    m_candidates_isValid = ::OpenAPI::fromJsonValue(m_candidates, json[QString("candidates")]);
    m_candidates_isSet = !json[QString("candidates")].isNull() && m_candidates_isValid;

    m_debug_metadata_isValid = ::OpenAPI::fromJsonValue(m_debug_metadata, json[QString("debugMetadata")]);
    m_debug_metadata_isSet = !json[QString("debugMetadata")].isNull() && m_debug_metadata_isValid;

    m_facts_isValid = ::OpenAPI::fromJsonValue(m_facts, json[QString("facts")]);
    m_facts_isSet = !json[QString("facts")].isNull() && m_facts_isValid;

    m_prompt_feedback_isValid = ::OpenAPI::fromJsonValue(m_prompt_feedback, json[QString("promptFeedback")]);
    m_prompt_feedback_isSet = !json[QString("promptFeedback")].isNull() && m_prompt_feedback_isValid;

    m_reporting_metrics_isValid = ::OpenAPI::fromJsonValue(m_reporting_metrics, json[QString("reportingMetrics")]);
    m_reporting_metrics_isSet = !json[QString("reportingMetrics")].isNull() && m_reporting_metrics_isValid;

    m_usage_metadata_isValid = ::OpenAPI::fromJsonValue(m_usage_metadata, json[QString("usageMetadata")]);
    m_usage_metadata_isSet = !json[QString("usageMetadata")].isNull() && m_usage_metadata_isValid;
}

QString OAICloudAiNlLlmProtoServiceGenerateMultiModalResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICloudAiNlLlmProtoServiceGenerateMultiModalResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_candidates.size() > 0) {
        obj.insert(QString("candidates"), ::OpenAPI::toJsonValue(m_candidates));
    }
    if (m_debug_metadata.isSet()) {
        obj.insert(QString("debugMetadata"), ::OpenAPI::toJsonValue(m_debug_metadata));
    }
    if (m_facts.size() > 0) {
        obj.insert(QString("facts"), ::OpenAPI::toJsonValue(m_facts));
    }
    if (m_prompt_feedback.isSet()) {
        obj.insert(QString("promptFeedback"), ::OpenAPI::toJsonValue(m_prompt_feedback));
    }
    if (m_reporting_metrics.isSet()) {
        obj.insert(QString("reportingMetrics"), ::OpenAPI::toJsonValue(m_reporting_metrics));
    }
    if (m_usage_metadata.isSet()) {
        obj.insert(QString("usageMetadata"), ::OpenAPI::toJsonValue(m_usage_metadata));
    }
    return obj;
}

QList<OAICloudAiNlLlmProtoServiceCandidate> OAICloudAiNlLlmProtoServiceGenerateMultiModalResponse::getCandidates() const {
    return m_candidates;
}
void OAICloudAiNlLlmProtoServiceGenerateMultiModalResponse::setCandidates(const QList<OAICloudAiNlLlmProtoServiceCandidate> &candidates) {
    m_candidates = candidates;
    m_candidates_isSet = true;
}

bool OAICloudAiNlLlmProtoServiceGenerateMultiModalResponse::is_candidates_Set() const{
    return m_candidates_isSet;
}

bool OAICloudAiNlLlmProtoServiceGenerateMultiModalResponse::is_candidates_Valid() const{
    return m_candidates_isValid;
}

OAICloudAiNlLlmProtoServiceMessageMetadata OAICloudAiNlLlmProtoServiceGenerateMultiModalResponse::getDebugMetadata() const {
    return m_debug_metadata;
}
void OAICloudAiNlLlmProtoServiceGenerateMultiModalResponse::setDebugMetadata(const OAICloudAiNlLlmProtoServiceMessageMetadata &debug_metadata) {
    m_debug_metadata = debug_metadata;
    m_debug_metadata_isSet = true;
}

bool OAICloudAiNlLlmProtoServiceGenerateMultiModalResponse::is_debug_metadata_Set() const{
    return m_debug_metadata_isSet;
}

bool OAICloudAiNlLlmProtoServiceGenerateMultiModalResponse::is_debug_metadata_Valid() const{
    return m_debug_metadata_isValid;
}

QList<OAICloudAiNlLlmProtoServiceFact> OAICloudAiNlLlmProtoServiceGenerateMultiModalResponse::getFacts() const {
    return m_facts;
}
void OAICloudAiNlLlmProtoServiceGenerateMultiModalResponse::setFacts(const QList<OAICloudAiNlLlmProtoServiceFact> &facts) {
    m_facts = facts;
    m_facts_isSet = true;
}

bool OAICloudAiNlLlmProtoServiceGenerateMultiModalResponse::is_facts_Set() const{
    return m_facts_isSet;
}

bool OAICloudAiNlLlmProtoServiceGenerateMultiModalResponse::is_facts_Valid() const{
    return m_facts_isValid;
}

OAICloudAiNlLlmProtoServicePromptFeedback OAICloudAiNlLlmProtoServiceGenerateMultiModalResponse::getPromptFeedback() const {
    return m_prompt_feedback;
}
void OAICloudAiNlLlmProtoServiceGenerateMultiModalResponse::setPromptFeedback(const OAICloudAiNlLlmProtoServicePromptFeedback &prompt_feedback) {
    m_prompt_feedback = prompt_feedback;
    m_prompt_feedback_isSet = true;
}

bool OAICloudAiNlLlmProtoServiceGenerateMultiModalResponse::is_prompt_feedback_Set() const{
    return m_prompt_feedback_isSet;
}

bool OAICloudAiNlLlmProtoServiceGenerateMultiModalResponse::is_prompt_feedback_Valid() const{
    return m_prompt_feedback_isValid;
}

OAIIntelligenceCloudAutomlXpsReportingMetrics OAICloudAiNlLlmProtoServiceGenerateMultiModalResponse::getReportingMetrics() const {
    return m_reporting_metrics;
}
void OAICloudAiNlLlmProtoServiceGenerateMultiModalResponse::setReportingMetrics(const OAIIntelligenceCloudAutomlXpsReportingMetrics &reporting_metrics) {
    m_reporting_metrics = reporting_metrics;
    m_reporting_metrics_isSet = true;
}

bool OAICloudAiNlLlmProtoServiceGenerateMultiModalResponse::is_reporting_metrics_Set() const{
    return m_reporting_metrics_isSet;
}

bool OAICloudAiNlLlmProtoServiceGenerateMultiModalResponse::is_reporting_metrics_Valid() const{
    return m_reporting_metrics_isValid;
}

OAICloudAiNlLlmProtoServiceUsageMetadata OAICloudAiNlLlmProtoServiceGenerateMultiModalResponse::getUsageMetadata() const {
    return m_usage_metadata;
}
void OAICloudAiNlLlmProtoServiceGenerateMultiModalResponse::setUsageMetadata(const OAICloudAiNlLlmProtoServiceUsageMetadata &usage_metadata) {
    m_usage_metadata = usage_metadata;
    m_usage_metadata_isSet = true;
}

bool OAICloudAiNlLlmProtoServiceGenerateMultiModalResponse::is_usage_metadata_Set() const{
    return m_usage_metadata_isSet;
}

bool OAICloudAiNlLlmProtoServiceGenerateMultiModalResponse::is_usage_metadata_Valid() const{
    return m_usage_metadata_isValid;
}

bool OAICloudAiNlLlmProtoServiceGenerateMultiModalResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_candidates.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_debug_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_facts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_prompt_feedback.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_reporting_metrics.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_usage_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICloudAiNlLlmProtoServiceGenerateMultiModalResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
