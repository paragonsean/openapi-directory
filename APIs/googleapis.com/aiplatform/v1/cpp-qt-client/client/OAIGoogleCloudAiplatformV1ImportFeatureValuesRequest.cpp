/**
 * Vertex AI API
 * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudAiplatformV1ImportFeatureValuesRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudAiplatformV1ImportFeatureValuesRequest::OAIGoogleCloudAiplatformV1ImportFeatureValuesRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudAiplatformV1ImportFeatureValuesRequest::OAIGoogleCloudAiplatformV1ImportFeatureValuesRequest() {
    this->initializeModel();
}

OAIGoogleCloudAiplatformV1ImportFeatureValuesRequest::~OAIGoogleCloudAiplatformV1ImportFeatureValuesRequest() {}

void OAIGoogleCloudAiplatformV1ImportFeatureValuesRequest::initializeModel() {

    m_avro_source_isSet = false;
    m_avro_source_isValid = false;

    m_bigquery_source_isSet = false;
    m_bigquery_source_isValid = false;

    m_csv_source_isSet = false;
    m_csv_source_isValid = false;

    m_disable_ingestion_analysis_isSet = false;
    m_disable_ingestion_analysis_isValid = false;

    m_disable_online_serving_isSet = false;
    m_disable_online_serving_isValid = false;

    m_entity_id_field_isSet = false;
    m_entity_id_field_isValid = false;

    m_feature_specs_isSet = false;
    m_feature_specs_isValid = false;

    m_feature_time_isSet = false;
    m_feature_time_isValid = false;

    m_feature_time_field_isSet = false;
    m_feature_time_field_isValid = false;

    m_worker_count_isSet = false;
    m_worker_count_isValid = false;
}

void OAIGoogleCloudAiplatformV1ImportFeatureValuesRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudAiplatformV1ImportFeatureValuesRequest::fromJsonObject(QJsonObject json) {

    m_avro_source_isValid = ::OpenAPI::fromJsonValue(m_avro_source, json[QString("avroSource")]);
    m_avro_source_isSet = !json[QString("avroSource")].isNull() && m_avro_source_isValid;

    m_bigquery_source_isValid = ::OpenAPI::fromJsonValue(m_bigquery_source, json[QString("bigquerySource")]);
    m_bigquery_source_isSet = !json[QString("bigquerySource")].isNull() && m_bigquery_source_isValid;

    m_csv_source_isValid = ::OpenAPI::fromJsonValue(m_csv_source, json[QString("csvSource")]);
    m_csv_source_isSet = !json[QString("csvSource")].isNull() && m_csv_source_isValid;

    m_disable_ingestion_analysis_isValid = ::OpenAPI::fromJsonValue(m_disable_ingestion_analysis, json[QString("disableIngestionAnalysis")]);
    m_disable_ingestion_analysis_isSet = !json[QString("disableIngestionAnalysis")].isNull() && m_disable_ingestion_analysis_isValid;

    m_disable_online_serving_isValid = ::OpenAPI::fromJsonValue(m_disable_online_serving, json[QString("disableOnlineServing")]);
    m_disable_online_serving_isSet = !json[QString("disableOnlineServing")].isNull() && m_disable_online_serving_isValid;

    m_entity_id_field_isValid = ::OpenAPI::fromJsonValue(m_entity_id_field, json[QString("entityIdField")]);
    m_entity_id_field_isSet = !json[QString("entityIdField")].isNull() && m_entity_id_field_isValid;

    m_feature_specs_isValid = ::OpenAPI::fromJsonValue(m_feature_specs, json[QString("featureSpecs")]);
    m_feature_specs_isSet = !json[QString("featureSpecs")].isNull() && m_feature_specs_isValid;

    m_feature_time_isValid = ::OpenAPI::fromJsonValue(m_feature_time, json[QString("featureTime")]);
    m_feature_time_isSet = !json[QString("featureTime")].isNull() && m_feature_time_isValid;

    m_feature_time_field_isValid = ::OpenAPI::fromJsonValue(m_feature_time_field, json[QString("featureTimeField")]);
    m_feature_time_field_isSet = !json[QString("featureTimeField")].isNull() && m_feature_time_field_isValid;

    m_worker_count_isValid = ::OpenAPI::fromJsonValue(m_worker_count, json[QString("workerCount")]);
    m_worker_count_isSet = !json[QString("workerCount")].isNull() && m_worker_count_isValid;
}

QString OAIGoogleCloudAiplatformV1ImportFeatureValuesRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudAiplatformV1ImportFeatureValuesRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_avro_source.isSet()) {
        obj.insert(QString("avroSource"), ::OpenAPI::toJsonValue(m_avro_source));
    }
    if (m_bigquery_source.isSet()) {
        obj.insert(QString("bigquerySource"), ::OpenAPI::toJsonValue(m_bigquery_source));
    }
    if (m_csv_source.isSet()) {
        obj.insert(QString("csvSource"), ::OpenAPI::toJsonValue(m_csv_source));
    }
    if (m_disable_ingestion_analysis_isSet) {
        obj.insert(QString("disableIngestionAnalysis"), ::OpenAPI::toJsonValue(m_disable_ingestion_analysis));
    }
    if (m_disable_online_serving_isSet) {
        obj.insert(QString("disableOnlineServing"), ::OpenAPI::toJsonValue(m_disable_online_serving));
    }
    if (m_entity_id_field_isSet) {
        obj.insert(QString("entityIdField"), ::OpenAPI::toJsonValue(m_entity_id_field));
    }
    if (m_feature_specs.size() > 0) {
        obj.insert(QString("featureSpecs"), ::OpenAPI::toJsonValue(m_feature_specs));
    }
    if (m_feature_time_isSet) {
        obj.insert(QString("featureTime"), ::OpenAPI::toJsonValue(m_feature_time));
    }
    if (m_feature_time_field_isSet) {
        obj.insert(QString("featureTimeField"), ::OpenAPI::toJsonValue(m_feature_time_field));
    }
    if (m_worker_count_isSet) {
        obj.insert(QString("workerCount"), ::OpenAPI::toJsonValue(m_worker_count));
    }
    return obj;
}

OAIGoogleCloudAiplatformV1AvroSource OAIGoogleCloudAiplatformV1ImportFeatureValuesRequest::getAvroSource() const {
    return m_avro_source;
}
void OAIGoogleCloudAiplatformV1ImportFeatureValuesRequest::setAvroSource(const OAIGoogleCloudAiplatformV1AvroSource &avro_source) {
    m_avro_source = avro_source;
    m_avro_source_isSet = true;
}

bool OAIGoogleCloudAiplatformV1ImportFeatureValuesRequest::is_avro_source_Set() const{
    return m_avro_source_isSet;
}

bool OAIGoogleCloudAiplatformV1ImportFeatureValuesRequest::is_avro_source_Valid() const{
    return m_avro_source_isValid;
}

OAIGoogleCloudAiplatformV1BigQuerySource OAIGoogleCloudAiplatformV1ImportFeatureValuesRequest::getBigquerySource() const {
    return m_bigquery_source;
}
void OAIGoogleCloudAiplatformV1ImportFeatureValuesRequest::setBigquerySource(const OAIGoogleCloudAiplatformV1BigQuerySource &bigquery_source) {
    m_bigquery_source = bigquery_source;
    m_bigquery_source_isSet = true;
}

bool OAIGoogleCloudAiplatformV1ImportFeatureValuesRequest::is_bigquery_source_Set() const{
    return m_bigquery_source_isSet;
}

bool OAIGoogleCloudAiplatformV1ImportFeatureValuesRequest::is_bigquery_source_Valid() const{
    return m_bigquery_source_isValid;
}

OAIGoogleCloudAiplatformV1CsvSource OAIGoogleCloudAiplatformV1ImportFeatureValuesRequest::getCsvSource() const {
    return m_csv_source;
}
void OAIGoogleCloudAiplatformV1ImportFeatureValuesRequest::setCsvSource(const OAIGoogleCloudAiplatformV1CsvSource &csv_source) {
    m_csv_source = csv_source;
    m_csv_source_isSet = true;
}

bool OAIGoogleCloudAiplatformV1ImportFeatureValuesRequest::is_csv_source_Set() const{
    return m_csv_source_isSet;
}

bool OAIGoogleCloudAiplatformV1ImportFeatureValuesRequest::is_csv_source_Valid() const{
    return m_csv_source_isValid;
}

bool OAIGoogleCloudAiplatformV1ImportFeatureValuesRequest::isDisableIngestionAnalysis() const {
    return m_disable_ingestion_analysis;
}
void OAIGoogleCloudAiplatformV1ImportFeatureValuesRequest::setDisableIngestionAnalysis(const bool &disable_ingestion_analysis) {
    m_disable_ingestion_analysis = disable_ingestion_analysis;
    m_disable_ingestion_analysis_isSet = true;
}

bool OAIGoogleCloudAiplatformV1ImportFeatureValuesRequest::is_disable_ingestion_analysis_Set() const{
    return m_disable_ingestion_analysis_isSet;
}

bool OAIGoogleCloudAiplatformV1ImportFeatureValuesRequest::is_disable_ingestion_analysis_Valid() const{
    return m_disable_ingestion_analysis_isValid;
}

bool OAIGoogleCloudAiplatformV1ImportFeatureValuesRequest::isDisableOnlineServing() const {
    return m_disable_online_serving;
}
void OAIGoogleCloudAiplatformV1ImportFeatureValuesRequest::setDisableOnlineServing(const bool &disable_online_serving) {
    m_disable_online_serving = disable_online_serving;
    m_disable_online_serving_isSet = true;
}

bool OAIGoogleCloudAiplatformV1ImportFeatureValuesRequest::is_disable_online_serving_Set() const{
    return m_disable_online_serving_isSet;
}

bool OAIGoogleCloudAiplatformV1ImportFeatureValuesRequest::is_disable_online_serving_Valid() const{
    return m_disable_online_serving_isValid;
}

QString OAIGoogleCloudAiplatformV1ImportFeatureValuesRequest::getEntityIdField() const {
    return m_entity_id_field;
}
void OAIGoogleCloudAiplatformV1ImportFeatureValuesRequest::setEntityIdField(const QString &entity_id_field) {
    m_entity_id_field = entity_id_field;
    m_entity_id_field_isSet = true;
}

bool OAIGoogleCloudAiplatformV1ImportFeatureValuesRequest::is_entity_id_field_Set() const{
    return m_entity_id_field_isSet;
}

bool OAIGoogleCloudAiplatformV1ImportFeatureValuesRequest::is_entity_id_field_Valid() const{
    return m_entity_id_field_isValid;
}

QList<OAIGoogleCloudAiplatformV1ImportFeatureValuesRequestFeatureSpec> OAIGoogleCloudAiplatformV1ImportFeatureValuesRequest::getFeatureSpecs() const {
    return m_feature_specs;
}
void OAIGoogleCloudAiplatformV1ImportFeatureValuesRequest::setFeatureSpecs(const QList<OAIGoogleCloudAiplatformV1ImportFeatureValuesRequestFeatureSpec> &feature_specs) {
    m_feature_specs = feature_specs;
    m_feature_specs_isSet = true;
}

bool OAIGoogleCloudAiplatformV1ImportFeatureValuesRequest::is_feature_specs_Set() const{
    return m_feature_specs_isSet;
}

bool OAIGoogleCloudAiplatformV1ImportFeatureValuesRequest::is_feature_specs_Valid() const{
    return m_feature_specs_isValid;
}

QString OAIGoogleCloudAiplatformV1ImportFeatureValuesRequest::getFeatureTime() const {
    return m_feature_time;
}
void OAIGoogleCloudAiplatformV1ImportFeatureValuesRequest::setFeatureTime(const QString &feature_time) {
    m_feature_time = feature_time;
    m_feature_time_isSet = true;
}

bool OAIGoogleCloudAiplatformV1ImportFeatureValuesRequest::is_feature_time_Set() const{
    return m_feature_time_isSet;
}

bool OAIGoogleCloudAiplatformV1ImportFeatureValuesRequest::is_feature_time_Valid() const{
    return m_feature_time_isValid;
}

QString OAIGoogleCloudAiplatformV1ImportFeatureValuesRequest::getFeatureTimeField() const {
    return m_feature_time_field;
}
void OAIGoogleCloudAiplatformV1ImportFeatureValuesRequest::setFeatureTimeField(const QString &feature_time_field) {
    m_feature_time_field = feature_time_field;
    m_feature_time_field_isSet = true;
}

bool OAIGoogleCloudAiplatformV1ImportFeatureValuesRequest::is_feature_time_field_Set() const{
    return m_feature_time_field_isSet;
}

bool OAIGoogleCloudAiplatformV1ImportFeatureValuesRequest::is_feature_time_field_Valid() const{
    return m_feature_time_field_isValid;
}

qint32 OAIGoogleCloudAiplatformV1ImportFeatureValuesRequest::getWorkerCount() const {
    return m_worker_count;
}
void OAIGoogleCloudAiplatformV1ImportFeatureValuesRequest::setWorkerCount(const qint32 &worker_count) {
    m_worker_count = worker_count;
    m_worker_count_isSet = true;
}

bool OAIGoogleCloudAiplatformV1ImportFeatureValuesRequest::is_worker_count_Set() const{
    return m_worker_count_isSet;
}

bool OAIGoogleCloudAiplatformV1ImportFeatureValuesRequest::is_worker_count_Valid() const{
    return m_worker_count_isValid;
}

bool OAIGoogleCloudAiplatformV1ImportFeatureValuesRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_avro_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_bigquery_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_csv_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_disable_ingestion_analysis_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disable_online_serving_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_id_field_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_feature_specs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_feature_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_feature_time_field_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_worker_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudAiplatformV1ImportFeatureValuesRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
