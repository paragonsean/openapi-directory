/**
 * Vertex AI API
 * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudAiplatformV1ModelContainerSpec.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudAiplatformV1ModelContainerSpec::OAIGoogleCloudAiplatformV1ModelContainerSpec(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudAiplatformV1ModelContainerSpec::OAIGoogleCloudAiplatformV1ModelContainerSpec() {
    this->initializeModel();
}

OAIGoogleCloudAiplatformV1ModelContainerSpec::~OAIGoogleCloudAiplatformV1ModelContainerSpec() {}

void OAIGoogleCloudAiplatformV1ModelContainerSpec::initializeModel() {

    m_args_isSet = false;
    m_args_isValid = false;

    m_command_isSet = false;
    m_command_isValid = false;

    m_deployment_timeout_isSet = false;
    m_deployment_timeout_isValid = false;

    m_env_isSet = false;
    m_env_isValid = false;

    m_grpc_ports_isSet = false;
    m_grpc_ports_isValid = false;

    m_health_probe_isSet = false;
    m_health_probe_isValid = false;

    m_health_route_isSet = false;
    m_health_route_isValid = false;

    m_image_uri_isSet = false;
    m_image_uri_isValid = false;

    m_ports_isSet = false;
    m_ports_isValid = false;

    m_predict_route_isSet = false;
    m_predict_route_isValid = false;

    m_shared_memory_size_mb_isSet = false;
    m_shared_memory_size_mb_isValid = false;

    m_startup_probe_isSet = false;
    m_startup_probe_isValid = false;
}

void OAIGoogleCloudAiplatformV1ModelContainerSpec::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudAiplatformV1ModelContainerSpec::fromJsonObject(QJsonObject json) {

    m_args_isValid = ::OpenAPI::fromJsonValue(m_args, json[QString("args")]);
    m_args_isSet = !json[QString("args")].isNull() && m_args_isValid;

    m_command_isValid = ::OpenAPI::fromJsonValue(m_command, json[QString("command")]);
    m_command_isSet = !json[QString("command")].isNull() && m_command_isValid;

    m_deployment_timeout_isValid = ::OpenAPI::fromJsonValue(m_deployment_timeout, json[QString("deploymentTimeout")]);
    m_deployment_timeout_isSet = !json[QString("deploymentTimeout")].isNull() && m_deployment_timeout_isValid;

    m_env_isValid = ::OpenAPI::fromJsonValue(m_env, json[QString("env")]);
    m_env_isSet = !json[QString("env")].isNull() && m_env_isValid;

    m_grpc_ports_isValid = ::OpenAPI::fromJsonValue(m_grpc_ports, json[QString("grpcPorts")]);
    m_grpc_ports_isSet = !json[QString("grpcPorts")].isNull() && m_grpc_ports_isValid;

    m_health_probe_isValid = ::OpenAPI::fromJsonValue(m_health_probe, json[QString("healthProbe")]);
    m_health_probe_isSet = !json[QString("healthProbe")].isNull() && m_health_probe_isValid;

    m_health_route_isValid = ::OpenAPI::fromJsonValue(m_health_route, json[QString("healthRoute")]);
    m_health_route_isSet = !json[QString("healthRoute")].isNull() && m_health_route_isValid;

    m_image_uri_isValid = ::OpenAPI::fromJsonValue(m_image_uri, json[QString("imageUri")]);
    m_image_uri_isSet = !json[QString("imageUri")].isNull() && m_image_uri_isValid;

    m_ports_isValid = ::OpenAPI::fromJsonValue(m_ports, json[QString("ports")]);
    m_ports_isSet = !json[QString("ports")].isNull() && m_ports_isValid;

    m_predict_route_isValid = ::OpenAPI::fromJsonValue(m_predict_route, json[QString("predictRoute")]);
    m_predict_route_isSet = !json[QString("predictRoute")].isNull() && m_predict_route_isValid;

    m_shared_memory_size_mb_isValid = ::OpenAPI::fromJsonValue(m_shared_memory_size_mb, json[QString("sharedMemorySizeMb")]);
    m_shared_memory_size_mb_isSet = !json[QString("sharedMemorySizeMb")].isNull() && m_shared_memory_size_mb_isValid;

    m_startup_probe_isValid = ::OpenAPI::fromJsonValue(m_startup_probe, json[QString("startupProbe")]);
    m_startup_probe_isSet = !json[QString("startupProbe")].isNull() && m_startup_probe_isValid;
}

QString OAIGoogleCloudAiplatformV1ModelContainerSpec::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudAiplatformV1ModelContainerSpec::asJsonObject() const {
    QJsonObject obj;
    if (m_args.size() > 0) {
        obj.insert(QString("args"), ::OpenAPI::toJsonValue(m_args));
    }
    if (m_command.size() > 0) {
        obj.insert(QString("command"), ::OpenAPI::toJsonValue(m_command));
    }
    if (m_deployment_timeout_isSet) {
        obj.insert(QString("deploymentTimeout"), ::OpenAPI::toJsonValue(m_deployment_timeout));
    }
    if (m_env.size() > 0) {
        obj.insert(QString("env"), ::OpenAPI::toJsonValue(m_env));
    }
    if (m_grpc_ports.size() > 0) {
        obj.insert(QString("grpcPorts"), ::OpenAPI::toJsonValue(m_grpc_ports));
    }
    if (m_health_probe.isSet()) {
        obj.insert(QString("healthProbe"), ::OpenAPI::toJsonValue(m_health_probe));
    }
    if (m_health_route_isSet) {
        obj.insert(QString("healthRoute"), ::OpenAPI::toJsonValue(m_health_route));
    }
    if (m_image_uri_isSet) {
        obj.insert(QString("imageUri"), ::OpenAPI::toJsonValue(m_image_uri));
    }
    if (m_ports.size() > 0) {
        obj.insert(QString("ports"), ::OpenAPI::toJsonValue(m_ports));
    }
    if (m_predict_route_isSet) {
        obj.insert(QString("predictRoute"), ::OpenAPI::toJsonValue(m_predict_route));
    }
    if (m_shared_memory_size_mb_isSet) {
        obj.insert(QString("sharedMemorySizeMb"), ::OpenAPI::toJsonValue(m_shared_memory_size_mb));
    }
    if (m_startup_probe.isSet()) {
        obj.insert(QString("startupProbe"), ::OpenAPI::toJsonValue(m_startup_probe));
    }
    return obj;
}

QList<QString> OAIGoogleCloudAiplatformV1ModelContainerSpec::getArgs() const {
    return m_args;
}
void OAIGoogleCloudAiplatformV1ModelContainerSpec::setArgs(const QList<QString> &args) {
    m_args = args;
    m_args_isSet = true;
}

bool OAIGoogleCloudAiplatformV1ModelContainerSpec::is_args_Set() const{
    return m_args_isSet;
}

bool OAIGoogleCloudAiplatformV1ModelContainerSpec::is_args_Valid() const{
    return m_args_isValid;
}

QList<QString> OAIGoogleCloudAiplatformV1ModelContainerSpec::getCommand() const {
    return m_command;
}
void OAIGoogleCloudAiplatformV1ModelContainerSpec::setCommand(const QList<QString> &command) {
    m_command = command;
    m_command_isSet = true;
}

bool OAIGoogleCloudAiplatformV1ModelContainerSpec::is_command_Set() const{
    return m_command_isSet;
}

bool OAIGoogleCloudAiplatformV1ModelContainerSpec::is_command_Valid() const{
    return m_command_isValid;
}

QString OAIGoogleCloudAiplatformV1ModelContainerSpec::getDeploymentTimeout() const {
    return m_deployment_timeout;
}
void OAIGoogleCloudAiplatformV1ModelContainerSpec::setDeploymentTimeout(const QString &deployment_timeout) {
    m_deployment_timeout = deployment_timeout;
    m_deployment_timeout_isSet = true;
}

bool OAIGoogleCloudAiplatformV1ModelContainerSpec::is_deployment_timeout_Set() const{
    return m_deployment_timeout_isSet;
}

bool OAIGoogleCloudAiplatformV1ModelContainerSpec::is_deployment_timeout_Valid() const{
    return m_deployment_timeout_isValid;
}

QList<OAIGoogleCloudAiplatformV1EnvVar> OAIGoogleCloudAiplatformV1ModelContainerSpec::getEnv() const {
    return m_env;
}
void OAIGoogleCloudAiplatformV1ModelContainerSpec::setEnv(const QList<OAIGoogleCloudAiplatformV1EnvVar> &env) {
    m_env = env;
    m_env_isSet = true;
}

bool OAIGoogleCloudAiplatformV1ModelContainerSpec::is_env_Set() const{
    return m_env_isSet;
}

bool OAIGoogleCloudAiplatformV1ModelContainerSpec::is_env_Valid() const{
    return m_env_isValid;
}

QList<OAIGoogleCloudAiplatformV1Port> OAIGoogleCloudAiplatformV1ModelContainerSpec::getGrpcPorts() const {
    return m_grpc_ports;
}
void OAIGoogleCloudAiplatformV1ModelContainerSpec::setGrpcPorts(const QList<OAIGoogleCloudAiplatformV1Port> &grpc_ports) {
    m_grpc_ports = grpc_ports;
    m_grpc_ports_isSet = true;
}

bool OAIGoogleCloudAiplatformV1ModelContainerSpec::is_grpc_ports_Set() const{
    return m_grpc_ports_isSet;
}

bool OAIGoogleCloudAiplatformV1ModelContainerSpec::is_grpc_ports_Valid() const{
    return m_grpc_ports_isValid;
}

OAIGoogleCloudAiplatformV1Probe OAIGoogleCloudAiplatformV1ModelContainerSpec::getHealthProbe() const {
    return m_health_probe;
}
void OAIGoogleCloudAiplatformV1ModelContainerSpec::setHealthProbe(const OAIGoogleCloudAiplatformV1Probe &health_probe) {
    m_health_probe = health_probe;
    m_health_probe_isSet = true;
}

bool OAIGoogleCloudAiplatformV1ModelContainerSpec::is_health_probe_Set() const{
    return m_health_probe_isSet;
}

bool OAIGoogleCloudAiplatformV1ModelContainerSpec::is_health_probe_Valid() const{
    return m_health_probe_isValid;
}

QString OAIGoogleCloudAiplatformV1ModelContainerSpec::getHealthRoute() const {
    return m_health_route;
}
void OAIGoogleCloudAiplatformV1ModelContainerSpec::setHealthRoute(const QString &health_route) {
    m_health_route = health_route;
    m_health_route_isSet = true;
}

bool OAIGoogleCloudAiplatformV1ModelContainerSpec::is_health_route_Set() const{
    return m_health_route_isSet;
}

bool OAIGoogleCloudAiplatformV1ModelContainerSpec::is_health_route_Valid() const{
    return m_health_route_isValid;
}

QString OAIGoogleCloudAiplatformV1ModelContainerSpec::getImageUri() const {
    return m_image_uri;
}
void OAIGoogleCloudAiplatformV1ModelContainerSpec::setImageUri(const QString &image_uri) {
    m_image_uri = image_uri;
    m_image_uri_isSet = true;
}

bool OAIGoogleCloudAiplatformV1ModelContainerSpec::is_image_uri_Set() const{
    return m_image_uri_isSet;
}

bool OAIGoogleCloudAiplatformV1ModelContainerSpec::is_image_uri_Valid() const{
    return m_image_uri_isValid;
}

QList<OAIGoogleCloudAiplatformV1Port> OAIGoogleCloudAiplatformV1ModelContainerSpec::getPorts() const {
    return m_ports;
}
void OAIGoogleCloudAiplatformV1ModelContainerSpec::setPorts(const QList<OAIGoogleCloudAiplatformV1Port> &ports) {
    m_ports = ports;
    m_ports_isSet = true;
}

bool OAIGoogleCloudAiplatformV1ModelContainerSpec::is_ports_Set() const{
    return m_ports_isSet;
}

bool OAIGoogleCloudAiplatformV1ModelContainerSpec::is_ports_Valid() const{
    return m_ports_isValid;
}

QString OAIGoogleCloudAiplatformV1ModelContainerSpec::getPredictRoute() const {
    return m_predict_route;
}
void OAIGoogleCloudAiplatformV1ModelContainerSpec::setPredictRoute(const QString &predict_route) {
    m_predict_route = predict_route;
    m_predict_route_isSet = true;
}

bool OAIGoogleCloudAiplatformV1ModelContainerSpec::is_predict_route_Set() const{
    return m_predict_route_isSet;
}

bool OAIGoogleCloudAiplatformV1ModelContainerSpec::is_predict_route_Valid() const{
    return m_predict_route_isValid;
}

QString OAIGoogleCloudAiplatformV1ModelContainerSpec::getSharedMemorySizeMb() const {
    return m_shared_memory_size_mb;
}
void OAIGoogleCloudAiplatformV1ModelContainerSpec::setSharedMemorySizeMb(const QString &shared_memory_size_mb) {
    m_shared_memory_size_mb = shared_memory_size_mb;
    m_shared_memory_size_mb_isSet = true;
}

bool OAIGoogleCloudAiplatformV1ModelContainerSpec::is_shared_memory_size_mb_Set() const{
    return m_shared_memory_size_mb_isSet;
}

bool OAIGoogleCloudAiplatformV1ModelContainerSpec::is_shared_memory_size_mb_Valid() const{
    return m_shared_memory_size_mb_isValid;
}

OAIGoogleCloudAiplatformV1Probe OAIGoogleCloudAiplatformV1ModelContainerSpec::getStartupProbe() const {
    return m_startup_probe;
}
void OAIGoogleCloudAiplatformV1ModelContainerSpec::setStartupProbe(const OAIGoogleCloudAiplatformV1Probe &startup_probe) {
    m_startup_probe = startup_probe;
    m_startup_probe_isSet = true;
}

bool OAIGoogleCloudAiplatformV1ModelContainerSpec::is_startup_probe_Set() const{
    return m_startup_probe_isSet;
}

bool OAIGoogleCloudAiplatformV1ModelContainerSpec::is_startup_probe_Valid() const{
    return m_startup_probe_isValid;
}

bool OAIGoogleCloudAiplatformV1ModelContainerSpec::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_args.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_command.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_deployment_timeout_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_env.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_grpc_ports.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_health_probe.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_health_route_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ports.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_predict_route_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shared_memory_size_mb_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_startup_probe.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudAiplatformV1ModelContainerSpec::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
