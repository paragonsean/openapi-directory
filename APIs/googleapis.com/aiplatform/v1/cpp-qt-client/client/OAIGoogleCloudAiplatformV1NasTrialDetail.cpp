/**
 * Vertex AI API
 * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudAiplatformV1NasTrialDetail.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudAiplatformV1NasTrialDetail::OAIGoogleCloudAiplatformV1NasTrialDetail(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudAiplatformV1NasTrialDetail::OAIGoogleCloudAiplatformV1NasTrialDetail() {
    this->initializeModel();
}

OAIGoogleCloudAiplatformV1NasTrialDetail::~OAIGoogleCloudAiplatformV1NasTrialDetail() {}

void OAIGoogleCloudAiplatformV1NasTrialDetail::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_parameters_isSet = false;
    m_parameters_isValid = false;

    m_search_trial_isSet = false;
    m_search_trial_isValid = false;

    m_train_trial_isSet = false;
    m_train_trial_isValid = false;
}

void OAIGoogleCloudAiplatformV1NasTrialDetail::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudAiplatformV1NasTrialDetail::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_parameters_isValid = ::OpenAPI::fromJsonValue(m_parameters, json[QString("parameters")]);
    m_parameters_isSet = !json[QString("parameters")].isNull() && m_parameters_isValid;

    m_search_trial_isValid = ::OpenAPI::fromJsonValue(m_search_trial, json[QString("searchTrial")]);
    m_search_trial_isSet = !json[QString("searchTrial")].isNull() && m_search_trial_isValid;

    m_train_trial_isValid = ::OpenAPI::fromJsonValue(m_train_trial, json[QString("trainTrial")]);
    m_train_trial_isSet = !json[QString("trainTrial")].isNull() && m_train_trial_isValid;
}

QString OAIGoogleCloudAiplatformV1NasTrialDetail::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudAiplatformV1NasTrialDetail::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_parameters_isSet) {
        obj.insert(QString("parameters"), ::OpenAPI::toJsonValue(m_parameters));
    }
    if (m_search_trial.isSet()) {
        obj.insert(QString("searchTrial"), ::OpenAPI::toJsonValue(m_search_trial));
    }
    if (m_train_trial.isSet()) {
        obj.insert(QString("trainTrial"), ::OpenAPI::toJsonValue(m_train_trial));
    }
    return obj;
}

QString OAIGoogleCloudAiplatformV1NasTrialDetail::getName() const {
    return m_name;
}
void OAIGoogleCloudAiplatformV1NasTrialDetail::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGoogleCloudAiplatformV1NasTrialDetail::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGoogleCloudAiplatformV1NasTrialDetail::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIGoogleCloudAiplatformV1NasTrialDetail::getParameters() const {
    return m_parameters;
}
void OAIGoogleCloudAiplatformV1NasTrialDetail::setParameters(const QString &parameters) {
    m_parameters = parameters;
    m_parameters_isSet = true;
}

bool OAIGoogleCloudAiplatformV1NasTrialDetail::is_parameters_Set() const{
    return m_parameters_isSet;
}

bool OAIGoogleCloudAiplatformV1NasTrialDetail::is_parameters_Valid() const{
    return m_parameters_isValid;
}

OAIGoogleCloudAiplatformV1NasTrial OAIGoogleCloudAiplatformV1NasTrialDetail::getSearchTrial() const {
    return m_search_trial;
}
void OAIGoogleCloudAiplatformV1NasTrialDetail::setSearchTrial(const OAIGoogleCloudAiplatformV1NasTrial &search_trial) {
    m_search_trial = search_trial;
    m_search_trial_isSet = true;
}

bool OAIGoogleCloudAiplatformV1NasTrialDetail::is_search_trial_Set() const{
    return m_search_trial_isSet;
}

bool OAIGoogleCloudAiplatformV1NasTrialDetail::is_search_trial_Valid() const{
    return m_search_trial_isValid;
}

OAIGoogleCloudAiplatformV1NasTrial OAIGoogleCloudAiplatformV1NasTrialDetail::getTrainTrial() const {
    return m_train_trial;
}
void OAIGoogleCloudAiplatformV1NasTrialDetail::setTrainTrial(const OAIGoogleCloudAiplatformV1NasTrial &train_trial) {
    m_train_trial = train_trial;
    m_train_trial_isSet = true;
}

bool OAIGoogleCloudAiplatformV1NasTrialDetail::is_train_trial_Set() const{
    return m_train_trial_isSet;
}

bool OAIGoogleCloudAiplatformV1NasTrialDetail::is_train_trial_Valid() const{
    return m_train_trial_isValid;
}

bool OAIGoogleCloudAiplatformV1NasTrialDetail::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameters_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_search_trial.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_train_trial.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudAiplatformV1NasTrialDetail::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
