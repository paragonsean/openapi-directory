/**
 * Vertex AI API
 * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICloudAiNlLlmProtoServicePartFileData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICloudAiNlLlmProtoServicePartFileData::OAICloudAiNlLlmProtoServicePartFileData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICloudAiNlLlmProtoServicePartFileData::OAICloudAiNlLlmProtoServicePartFileData() {
    this->initializeModel();
}

OAICloudAiNlLlmProtoServicePartFileData::~OAICloudAiNlLlmProtoServicePartFileData() {}

void OAICloudAiNlLlmProtoServicePartFileData::initializeModel() {

    m_file_uri_isSet = false;
    m_file_uri_isValid = false;

    m_mime_type_isSet = false;
    m_mime_type_isValid = false;
}

void OAICloudAiNlLlmProtoServicePartFileData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICloudAiNlLlmProtoServicePartFileData::fromJsonObject(QJsonObject json) {

    m_file_uri_isValid = ::OpenAPI::fromJsonValue(m_file_uri, json[QString("fileUri")]);
    m_file_uri_isSet = !json[QString("fileUri")].isNull() && m_file_uri_isValid;

    m_mime_type_isValid = ::OpenAPI::fromJsonValue(m_mime_type, json[QString("mimeType")]);
    m_mime_type_isSet = !json[QString("mimeType")].isNull() && m_mime_type_isValid;
}

QString OAICloudAiNlLlmProtoServicePartFileData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICloudAiNlLlmProtoServicePartFileData::asJsonObject() const {
    QJsonObject obj;
    if (m_file_uri_isSet) {
        obj.insert(QString("fileUri"), ::OpenAPI::toJsonValue(m_file_uri));
    }
    if (m_mime_type_isSet) {
        obj.insert(QString("mimeType"), ::OpenAPI::toJsonValue(m_mime_type));
    }
    return obj;
}

QString OAICloudAiNlLlmProtoServicePartFileData::getFileUri() const {
    return m_file_uri;
}
void OAICloudAiNlLlmProtoServicePartFileData::setFileUri(const QString &file_uri) {
    m_file_uri = file_uri;
    m_file_uri_isSet = true;
}

bool OAICloudAiNlLlmProtoServicePartFileData::is_file_uri_Set() const{
    return m_file_uri_isSet;
}

bool OAICloudAiNlLlmProtoServicePartFileData::is_file_uri_Valid() const{
    return m_file_uri_isValid;
}

QString OAICloudAiNlLlmProtoServicePartFileData::getMimeType() const {
    return m_mime_type;
}
void OAICloudAiNlLlmProtoServicePartFileData::setMimeType(const QString &mime_type) {
    m_mime_type = mime_type;
    m_mime_type_isSet = true;
}

bool OAICloudAiNlLlmProtoServicePartFileData::is_mime_type_Set() const{
    return m_mime_type_isSet;
}

bool OAICloudAiNlLlmProtoServicePartFileData::is_mime_type_Valid() const{
    return m_mime_type_isValid;
}

bool OAICloudAiNlLlmProtoServicePartFileData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_file_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mime_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICloudAiNlLlmProtoServicePartFileData::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
