/**
 * Vertex AI API
 * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGoogleCloudAiplatformV1ExportDataConfig.h
 *
 * Describes what part of the Dataset is to be exported, the destination of the export and how to export.
 */

#ifndef OAIGoogleCloudAiplatformV1ExportDataConfig_H
#define OAIGoogleCloudAiplatformV1ExportDataConfig_H

#include <QJsonObject>

#include "OAIGoogleCloudAiplatformV1ExportFilterSplit.h"
#include "OAIGoogleCloudAiplatformV1ExportFractionSplit.h"
#include "OAIGoogleCloudAiplatformV1GcsDestination.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIGoogleCloudAiplatformV1ExportFilterSplit;
class OAIGoogleCloudAiplatformV1ExportFractionSplit;
class OAIGoogleCloudAiplatformV1GcsDestination;

class OAIGoogleCloudAiplatformV1ExportDataConfig : public OAIObject {
public:
    OAIGoogleCloudAiplatformV1ExportDataConfig();
    OAIGoogleCloudAiplatformV1ExportDataConfig(QString json);
    ~OAIGoogleCloudAiplatformV1ExportDataConfig() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAnnotationSchemaUri() const;
    void setAnnotationSchemaUri(const QString &annotation_schema_uri);
    bool is_annotation_schema_uri_Set() const;
    bool is_annotation_schema_uri_Valid() const;

    QString getAnnotationsFilter() const;
    void setAnnotationsFilter(const QString &annotations_filter);
    bool is_annotations_filter_Set() const;
    bool is_annotations_filter_Valid() const;

    QString getExportUse() const;
    void setExportUse(const QString &export_use);
    bool is_export_use_Set() const;
    bool is_export_use_Valid() const;

    OAIGoogleCloudAiplatformV1ExportFilterSplit getFilterSplit() const;
    void setFilterSplit(const OAIGoogleCloudAiplatformV1ExportFilterSplit &filter_split);
    bool is_filter_split_Set() const;
    bool is_filter_split_Valid() const;

    OAIGoogleCloudAiplatformV1ExportFractionSplit getFractionSplit() const;
    void setFractionSplit(const OAIGoogleCloudAiplatformV1ExportFractionSplit &fraction_split);
    bool is_fraction_split_Set() const;
    bool is_fraction_split_Valid() const;

    OAIGoogleCloudAiplatformV1GcsDestination getGcsDestination() const;
    void setGcsDestination(const OAIGoogleCloudAiplatformV1GcsDestination &gcs_destination);
    bool is_gcs_destination_Set() const;
    bool is_gcs_destination_Valid() const;

    QString getSavedQueryId() const;
    void setSavedQueryId(const QString &saved_query_id);
    bool is_saved_query_id_Set() const;
    bool is_saved_query_id_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_annotation_schema_uri;
    bool m_annotation_schema_uri_isSet;
    bool m_annotation_schema_uri_isValid;

    QString m_annotations_filter;
    bool m_annotations_filter_isSet;
    bool m_annotations_filter_isValid;

    QString m_export_use;
    bool m_export_use_isSet;
    bool m_export_use_isValid;

    OAIGoogleCloudAiplatformV1ExportFilterSplit m_filter_split;
    bool m_filter_split_isSet;
    bool m_filter_split_isValid;

    OAIGoogleCloudAiplatformV1ExportFractionSplit m_fraction_split;
    bool m_fraction_split_isSet;
    bool m_fraction_split_isValid;

    OAIGoogleCloudAiplatformV1GcsDestination m_gcs_destination;
    bool m_gcs_destination_isSet;
    bool m_gcs_destination_isValid;

    QString m_saved_query_id;
    bool m_saved_query_id_isSet;
    bool m_saved_query_id_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGoogleCloudAiplatformV1ExportDataConfig)

#endif // OAIGoogleCloudAiplatformV1ExportDataConfig_H
