/**
 * Vertex AI API
 * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudAiplatformV1IndexDatapoint.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudAiplatformV1IndexDatapoint::OAIGoogleCloudAiplatformV1IndexDatapoint(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudAiplatformV1IndexDatapoint::OAIGoogleCloudAiplatformV1IndexDatapoint() {
    this->initializeModel();
}

OAIGoogleCloudAiplatformV1IndexDatapoint::~OAIGoogleCloudAiplatformV1IndexDatapoint() {}

void OAIGoogleCloudAiplatformV1IndexDatapoint::initializeModel() {

    m_crowding_tag_isSet = false;
    m_crowding_tag_isValid = false;

    m_datapoint_id_isSet = false;
    m_datapoint_id_isValid = false;

    m_feature_vector_isSet = false;
    m_feature_vector_isValid = false;

    m_numeric_restricts_isSet = false;
    m_numeric_restricts_isValid = false;

    m_restricts_isSet = false;
    m_restricts_isValid = false;
}

void OAIGoogleCloudAiplatformV1IndexDatapoint::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudAiplatformV1IndexDatapoint::fromJsonObject(QJsonObject json) {

    m_crowding_tag_isValid = ::OpenAPI::fromJsonValue(m_crowding_tag, json[QString("crowdingTag")]);
    m_crowding_tag_isSet = !json[QString("crowdingTag")].isNull() && m_crowding_tag_isValid;

    m_datapoint_id_isValid = ::OpenAPI::fromJsonValue(m_datapoint_id, json[QString("datapointId")]);
    m_datapoint_id_isSet = !json[QString("datapointId")].isNull() && m_datapoint_id_isValid;

    m_feature_vector_isValid = ::OpenAPI::fromJsonValue(m_feature_vector, json[QString("featureVector")]);
    m_feature_vector_isSet = !json[QString("featureVector")].isNull() && m_feature_vector_isValid;

    m_numeric_restricts_isValid = ::OpenAPI::fromJsonValue(m_numeric_restricts, json[QString("numericRestricts")]);
    m_numeric_restricts_isSet = !json[QString("numericRestricts")].isNull() && m_numeric_restricts_isValid;

    m_restricts_isValid = ::OpenAPI::fromJsonValue(m_restricts, json[QString("restricts")]);
    m_restricts_isSet = !json[QString("restricts")].isNull() && m_restricts_isValid;
}

QString OAIGoogleCloudAiplatformV1IndexDatapoint::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudAiplatformV1IndexDatapoint::asJsonObject() const {
    QJsonObject obj;
    if (m_crowding_tag.isSet()) {
        obj.insert(QString("crowdingTag"), ::OpenAPI::toJsonValue(m_crowding_tag));
    }
    if (m_datapoint_id_isSet) {
        obj.insert(QString("datapointId"), ::OpenAPI::toJsonValue(m_datapoint_id));
    }
    if (m_feature_vector.size() > 0) {
        obj.insert(QString("featureVector"), ::OpenAPI::toJsonValue(m_feature_vector));
    }
    if (m_numeric_restricts.size() > 0) {
        obj.insert(QString("numericRestricts"), ::OpenAPI::toJsonValue(m_numeric_restricts));
    }
    if (m_restricts.size() > 0) {
        obj.insert(QString("restricts"), ::OpenAPI::toJsonValue(m_restricts));
    }
    return obj;
}

OAIGoogleCloudAiplatformV1IndexDatapointCrowdingTag OAIGoogleCloudAiplatformV1IndexDatapoint::getCrowdingTag() const {
    return m_crowding_tag;
}
void OAIGoogleCloudAiplatformV1IndexDatapoint::setCrowdingTag(const OAIGoogleCloudAiplatformV1IndexDatapointCrowdingTag &crowding_tag) {
    m_crowding_tag = crowding_tag;
    m_crowding_tag_isSet = true;
}

bool OAIGoogleCloudAiplatformV1IndexDatapoint::is_crowding_tag_Set() const{
    return m_crowding_tag_isSet;
}

bool OAIGoogleCloudAiplatformV1IndexDatapoint::is_crowding_tag_Valid() const{
    return m_crowding_tag_isValid;
}

QString OAIGoogleCloudAiplatformV1IndexDatapoint::getDatapointId() const {
    return m_datapoint_id;
}
void OAIGoogleCloudAiplatformV1IndexDatapoint::setDatapointId(const QString &datapoint_id) {
    m_datapoint_id = datapoint_id;
    m_datapoint_id_isSet = true;
}

bool OAIGoogleCloudAiplatformV1IndexDatapoint::is_datapoint_id_Set() const{
    return m_datapoint_id_isSet;
}

bool OAIGoogleCloudAiplatformV1IndexDatapoint::is_datapoint_id_Valid() const{
    return m_datapoint_id_isValid;
}

QList<float> OAIGoogleCloudAiplatformV1IndexDatapoint::getFeatureVector() const {
    return m_feature_vector;
}
void OAIGoogleCloudAiplatformV1IndexDatapoint::setFeatureVector(const QList<float> &feature_vector) {
    m_feature_vector = feature_vector;
    m_feature_vector_isSet = true;
}

bool OAIGoogleCloudAiplatformV1IndexDatapoint::is_feature_vector_Set() const{
    return m_feature_vector_isSet;
}

bool OAIGoogleCloudAiplatformV1IndexDatapoint::is_feature_vector_Valid() const{
    return m_feature_vector_isValid;
}

QList<OAIGoogleCloudAiplatformV1IndexDatapointNumericRestriction> OAIGoogleCloudAiplatformV1IndexDatapoint::getNumericRestricts() const {
    return m_numeric_restricts;
}
void OAIGoogleCloudAiplatformV1IndexDatapoint::setNumericRestricts(const QList<OAIGoogleCloudAiplatformV1IndexDatapointNumericRestriction> &numeric_restricts) {
    m_numeric_restricts = numeric_restricts;
    m_numeric_restricts_isSet = true;
}

bool OAIGoogleCloudAiplatformV1IndexDatapoint::is_numeric_restricts_Set() const{
    return m_numeric_restricts_isSet;
}

bool OAIGoogleCloudAiplatformV1IndexDatapoint::is_numeric_restricts_Valid() const{
    return m_numeric_restricts_isValid;
}

QList<OAIGoogleCloudAiplatformV1IndexDatapointRestriction> OAIGoogleCloudAiplatformV1IndexDatapoint::getRestricts() const {
    return m_restricts;
}
void OAIGoogleCloudAiplatformV1IndexDatapoint::setRestricts(const QList<OAIGoogleCloudAiplatformV1IndexDatapointRestriction> &restricts) {
    m_restricts = restricts;
    m_restricts_isSet = true;
}

bool OAIGoogleCloudAiplatformV1IndexDatapoint::is_restricts_Set() const{
    return m_restricts_isSet;
}

bool OAIGoogleCloudAiplatformV1IndexDatapoint::is_restricts_Valid() const{
    return m_restricts_isValid;
}

bool OAIGoogleCloudAiplatformV1IndexDatapoint::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_crowding_tag.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_datapoint_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_feature_vector.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_numeric_restricts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_restricts.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudAiplatformV1IndexDatapoint::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
