/**
 * Vertex AI API
 * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudAiplatformV1Schedule.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudAiplatformV1Schedule::OAIGoogleCloudAiplatformV1Schedule(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudAiplatformV1Schedule::OAIGoogleCloudAiplatformV1Schedule() {
    this->initializeModel();
}

OAIGoogleCloudAiplatformV1Schedule::~OAIGoogleCloudAiplatformV1Schedule() {}

void OAIGoogleCloudAiplatformV1Schedule::initializeModel() {

    m_allow_queueing_isSet = false;
    m_allow_queueing_isValid = false;

    m_catch_up_isSet = false;
    m_catch_up_isValid = false;

    m_create_pipeline_job_request_isSet = false;
    m_create_pipeline_job_request_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_cron_isSet = false;
    m_cron_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_last_pause_time_isSet = false;
    m_last_pause_time_isValid = false;

    m_last_resume_time_isSet = false;
    m_last_resume_time_isValid = false;

    m_last_scheduled_run_response_isSet = false;
    m_last_scheduled_run_response_isValid = false;

    m_max_concurrent_run_count_isSet = false;
    m_max_concurrent_run_count_isValid = false;

    m_max_run_count_isSet = false;
    m_max_run_count_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_next_run_time_isSet = false;
    m_next_run_time_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_started_run_count_isSet = false;
    m_started_run_count_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;
}

void OAIGoogleCloudAiplatformV1Schedule::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudAiplatformV1Schedule::fromJsonObject(QJsonObject json) {

    m_allow_queueing_isValid = ::OpenAPI::fromJsonValue(m_allow_queueing, json[QString("allowQueueing")]);
    m_allow_queueing_isSet = !json[QString("allowQueueing")].isNull() && m_allow_queueing_isValid;

    m_catch_up_isValid = ::OpenAPI::fromJsonValue(m_catch_up, json[QString("catchUp")]);
    m_catch_up_isSet = !json[QString("catchUp")].isNull() && m_catch_up_isValid;

    m_create_pipeline_job_request_isValid = ::OpenAPI::fromJsonValue(m_create_pipeline_job_request, json[QString("createPipelineJobRequest")]);
    m_create_pipeline_job_request_isSet = !json[QString("createPipelineJobRequest")].isNull() && m_create_pipeline_job_request_isValid;

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_cron_isValid = ::OpenAPI::fromJsonValue(m_cron, json[QString("cron")]);
    m_cron_isSet = !json[QString("cron")].isNull() && m_cron_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("endTime")]);
    m_end_time_isSet = !json[QString("endTime")].isNull() && m_end_time_isValid;

    m_last_pause_time_isValid = ::OpenAPI::fromJsonValue(m_last_pause_time, json[QString("lastPauseTime")]);
    m_last_pause_time_isSet = !json[QString("lastPauseTime")].isNull() && m_last_pause_time_isValid;

    m_last_resume_time_isValid = ::OpenAPI::fromJsonValue(m_last_resume_time, json[QString("lastResumeTime")]);
    m_last_resume_time_isSet = !json[QString("lastResumeTime")].isNull() && m_last_resume_time_isValid;

    m_last_scheduled_run_response_isValid = ::OpenAPI::fromJsonValue(m_last_scheduled_run_response, json[QString("lastScheduledRunResponse")]);
    m_last_scheduled_run_response_isSet = !json[QString("lastScheduledRunResponse")].isNull() && m_last_scheduled_run_response_isValid;

    m_max_concurrent_run_count_isValid = ::OpenAPI::fromJsonValue(m_max_concurrent_run_count, json[QString("maxConcurrentRunCount")]);
    m_max_concurrent_run_count_isSet = !json[QString("maxConcurrentRunCount")].isNull() && m_max_concurrent_run_count_isValid;

    m_max_run_count_isValid = ::OpenAPI::fromJsonValue(m_max_run_count, json[QString("maxRunCount")]);
    m_max_run_count_isSet = !json[QString("maxRunCount")].isNull() && m_max_run_count_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_next_run_time_isValid = ::OpenAPI::fromJsonValue(m_next_run_time, json[QString("nextRunTime")]);
    m_next_run_time_isSet = !json[QString("nextRunTime")].isNull() && m_next_run_time_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;

    m_started_run_count_isValid = ::OpenAPI::fromJsonValue(m_started_run_count, json[QString("startedRunCount")]);
    m_started_run_count_isSet = !json[QString("startedRunCount")].isNull() && m_started_run_count_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;
}

QString OAIGoogleCloudAiplatformV1Schedule::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudAiplatformV1Schedule::asJsonObject() const {
    QJsonObject obj;
    if (m_allow_queueing_isSet) {
        obj.insert(QString("allowQueueing"), ::OpenAPI::toJsonValue(m_allow_queueing));
    }
    if (m_catch_up_isSet) {
        obj.insert(QString("catchUp"), ::OpenAPI::toJsonValue(m_catch_up));
    }
    if (m_create_pipeline_job_request.isSet()) {
        obj.insert(QString("createPipelineJobRequest"), ::OpenAPI::toJsonValue(m_create_pipeline_job_request));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_cron_isSet) {
        obj.insert(QString("cron"), ::OpenAPI::toJsonValue(m_cron));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("endTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_last_pause_time_isSet) {
        obj.insert(QString("lastPauseTime"), ::OpenAPI::toJsonValue(m_last_pause_time));
    }
    if (m_last_resume_time_isSet) {
        obj.insert(QString("lastResumeTime"), ::OpenAPI::toJsonValue(m_last_resume_time));
    }
    if (m_last_scheduled_run_response.isSet()) {
        obj.insert(QString("lastScheduledRunResponse"), ::OpenAPI::toJsonValue(m_last_scheduled_run_response));
    }
    if (m_max_concurrent_run_count_isSet) {
        obj.insert(QString("maxConcurrentRunCount"), ::OpenAPI::toJsonValue(m_max_concurrent_run_count));
    }
    if (m_max_run_count_isSet) {
        obj.insert(QString("maxRunCount"), ::OpenAPI::toJsonValue(m_max_run_count));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_next_run_time_isSet) {
        obj.insert(QString("nextRunTime"), ::OpenAPI::toJsonValue(m_next_run_time));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_started_run_count_isSet) {
        obj.insert(QString("startedRunCount"), ::OpenAPI::toJsonValue(m_started_run_count));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    return obj;
}

bool OAIGoogleCloudAiplatformV1Schedule::isAllowQueueing() const {
    return m_allow_queueing;
}
void OAIGoogleCloudAiplatformV1Schedule::setAllowQueueing(const bool &allow_queueing) {
    m_allow_queueing = allow_queueing;
    m_allow_queueing_isSet = true;
}

bool OAIGoogleCloudAiplatformV1Schedule::is_allow_queueing_Set() const{
    return m_allow_queueing_isSet;
}

bool OAIGoogleCloudAiplatformV1Schedule::is_allow_queueing_Valid() const{
    return m_allow_queueing_isValid;
}

bool OAIGoogleCloudAiplatformV1Schedule::isCatchUp() const {
    return m_catch_up;
}
void OAIGoogleCloudAiplatformV1Schedule::setCatchUp(const bool &catch_up) {
    m_catch_up = catch_up;
    m_catch_up_isSet = true;
}

bool OAIGoogleCloudAiplatformV1Schedule::is_catch_up_Set() const{
    return m_catch_up_isSet;
}

bool OAIGoogleCloudAiplatformV1Schedule::is_catch_up_Valid() const{
    return m_catch_up_isValid;
}

OAIGoogleCloudAiplatformV1CreatePipelineJobRequest OAIGoogleCloudAiplatformV1Schedule::getCreatePipelineJobRequest() const {
    return m_create_pipeline_job_request;
}
void OAIGoogleCloudAiplatformV1Schedule::setCreatePipelineJobRequest(const OAIGoogleCloudAiplatformV1CreatePipelineJobRequest &create_pipeline_job_request) {
    m_create_pipeline_job_request = create_pipeline_job_request;
    m_create_pipeline_job_request_isSet = true;
}

bool OAIGoogleCloudAiplatformV1Schedule::is_create_pipeline_job_request_Set() const{
    return m_create_pipeline_job_request_isSet;
}

bool OAIGoogleCloudAiplatformV1Schedule::is_create_pipeline_job_request_Valid() const{
    return m_create_pipeline_job_request_isValid;
}

QString OAIGoogleCloudAiplatformV1Schedule::getCreateTime() const {
    return m_create_time;
}
void OAIGoogleCloudAiplatformV1Schedule::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIGoogleCloudAiplatformV1Schedule::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIGoogleCloudAiplatformV1Schedule::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAIGoogleCloudAiplatformV1Schedule::getCron() const {
    return m_cron;
}
void OAIGoogleCloudAiplatformV1Schedule::setCron(const QString &cron) {
    m_cron = cron;
    m_cron_isSet = true;
}

bool OAIGoogleCloudAiplatformV1Schedule::is_cron_Set() const{
    return m_cron_isSet;
}

bool OAIGoogleCloudAiplatformV1Schedule::is_cron_Valid() const{
    return m_cron_isValid;
}

QString OAIGoogleCloudAiplatformV1Schedule::getDisplayName() const {
    return m_display_name;
}
void OAIGoogleCloudAiplatformV1Schedule::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIGoogleCloudAiplatformV1Schedule::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIGoogleCloudAiplatformV1Schedule::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIGoogleCloudAiplatformV1Schedule::getEndTime() const {
    return m_end_time;
}
void OAIGoogleCloudAiplatformV1Schedule::setEndTime(const QString &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIGoogleCloudAiplatformV1Schedule::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIGoogleCloudAiplatformV1Schedule::is_end_time_Valid() const{
    return m_end_time_isValid;
}

QString OAIGoogleCloudAiplatformV1Schedule::getLastPauseTime() const {
    return m_last_pause_time;
}
void OAIGoogleCloudAiplatformV1Schedule::setLastPauseTime(const QString &last_pause_time) {
    m_last_pause_time = last_pause_time;
    m_last_pause_time_isSet = true;
}

bool OAIGoogleCloudAiplatformV1Schedule::is_last_pause_time_Set() const{
    return m_last_pause_time_isSet;
}

bool OAIGoogleCloudAiplatformV1Schedule::is_last_pause_time_Valid() const{
    return m_last_pause_time_isValid;
}

QString OAIGoogleCloudAiplatformV1Schedule::getLastResumeTime() const {
    return m_last_resume_time;
}
void OAIGoogleCloudAiplatformV1Schedule::setLastResumeTime(const QString &last_resume_time) {
    m_last_resume_time = last_resume_time;
    m_last_resume_time_isSet = true;
}

bool OAIGoogleCloudAiplatformV1Schedule::is_last_resume_time_Set() const{
    return m_last_resume_time_isSet;
}

bool OAIGoogleCloudAiplatformV1Schedule::is_last_resume_time_Valid() const{
    return m_last_resume_time_isValid;
}

OAIGoogleCloudAiplatformV1ScheduleRunResponse OAIGoogleCloudAiplatformV1Schedule::getLastScheduledRunResponse() const {
    return m_last_scheduled_run_response;
}
void OAIGoogleCloudAiplatformV1Schedule::setLastScheduledRunResponse(const OAIGoogleCloudAiplatformV1ScheduleRunResponse &last_scheduled_run_response) {
    m_last_scheduled_run_response = last_scheduled_run_response;
    m_last_scheduled_run_response_isSet = true;
}

bool OAIGoogleCloudAiplatformV1Schedule::is_last_scheduled_run_response_Set() const{
    return m_last_scheduled_run_response_isSet;
}

bool OAIGoogleCloudAiplatformV1Schedule::is_last_scheduled_run_response_Valid() const{
    return m_last_scheduled_run_response_isValid;
}

QString OAIGoogleCloudAiplatformV1Schedule::getMaxConcurrentRunCount() const {
    return m_max_concurrent_run_count;
}
void OAIGoogleCloudAiplatformV1Schedule::setMaxConcurrentRunCount(const QString &max_concurrent_run_count) {
    m_max_concurrent_run_count = max_concurrent_run_count;
    m_max_concurrent_run_count_isSet = true;
}

bool OAIGoogleCloudAiplatformV1Schedule::is_max_concurrent_run_count_Set() const{
    return m_max_concurrent_run_count_isSet;
}

bool OAIGoogleCloudAiplatformV1Schedule::is_max_concurrent_run_count_Valid() const{
    return m_max_concurrent_run_count_isValid;
}

QString OAIGoogleCloudAiplatformV1Schedule::getMaxRunCount() const {
    return m_max_run_count;
}
void OAIGoogleCloudAiplatformV1Schedule::setMaxRunCount(const QString &max_run_count) {
    m_max_run_count = max_run_count;
    m_max_run_count_isSet = true;
}

bool OAIGoogleCloudAiplatformV1Schedule::is_max_run_count_Set() const{
    return m_max_run_count_isSet;
}

bool OAIGoogleCloudAiplatformV1Schedule::is_max_run_count_Valid() const{
    return m_max_run_count_isValid;
}

QString OAIGoogleCloudAiplatformV1Schedule::getName() const {
    return m_name;
}
void OAIGoogleCloudAiplatformV1Schedule::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGoogleCloudAiplatformV1Schedule::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGoogleCloudAiplatformV1Schedule::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIGoogleCloudAiplatformV1Schedule::getNextRunTime() const {
    return m_next_run_time;
}
void OAIGoogleCloudAiplatformV1Schedule::setNextRunTime(const QString &next_run_time) {
    m_next_run_time = next_run_time;
    m_next_run_time_isSet = true;
}

bool OAIGoogleCloudAiplatformV1Schedule::is_next_run_time_Set() const{
    return m_next_run_time_isSet;
}

bool OAIGoogleCloudAiplatformV1Schedule::is_next_run_time_Valid() const{
    return m_next_run_time_isValid;
}

QString OAIGoogleCloudAiplatformV1Schedule::getStartTime() const {
    return m_start_time;
}
void OAIGoogleCloudAiplatformV1Schedule::setStartTime(const QString &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIGoogleCloudAiplatformV1Schedule::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIGoogleCloudAiplatformV1Schedule::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QString OAIGoogleCloudAiplatformV1Schedule::getStartedRunCount() const {
    return m_started_run_count;
}
void OAIGoogleCloudAiplatformV1Schedule::setStartedRunCount(const QString &started_run_count) {
    m_started_run_count = started_run_count;
    m_started_run_count_isSet = true;
}

bool OAIGoogleCloudAiplatformV1Schedule::is_started_run_count_Set() const{
    return m_started_run_count_isSet;
}

bool OAIGoogleCloudAiplatformV1Schedule::is_started_run_count_Valid() const{
    return m_started_run_count_isValid;
}

QString OAIGoogleCloudAiplatformV1Schedule::getState() const {
    return m_state;
}
void OAIGoogleCloudAiplatformV1Schedule::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIGoogleCloudAiplatformV1Schedule::is_state_Set() const{
    return m_state_isSet;
}

bool OAIGoogleCloudAiplatformV1Schedule::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIGoogleCloudAiplatformV1Schedule::getUpdateTime() const {
    return m_update_time;
}
void OAIGoogleCloudAiplatformV1Schedule::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAIGoogleCloudAiplatformV1Schedule::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAIGoogleCloudAiplatformV1Schedule::is_update_time_Valid() const{
    return m_update_time_isValid;
}

bool OAIGoogleCloudAiplatformV1Schedule::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allow_queueing_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_catch_up_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_pipeline_job_request.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cron_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_pause_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_resume_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_scheduled_run_response.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_concurrent_run_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_run_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_run_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_started_run_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudAiplatformV1Schedule::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
