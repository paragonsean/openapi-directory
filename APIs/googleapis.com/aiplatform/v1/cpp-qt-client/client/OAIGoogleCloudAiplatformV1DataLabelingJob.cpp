/**
 * Vertex AI API
 * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudAiplatformV1DataLabelingJob.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudAiplatformV1DataLabelingJob::OAIGoogleCloudAiplatformV1DataLabelingJob(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudAiplatformV1DataLabelingJob::OAIGoogleCloudAiplatformV1DataLabelingJob() {
    this->initializeModel();
}

OAIGoogleCloudAiplatformV1DataLabelingJob::~OAIGoogleCloudAiplatformV1DataLabelingJob() {}

void OAIGoogleCloudAiplatformV1DataLabelingJob::initializeModel() {

    m_active_learning_config_isSet = false;
    m_active_learning_config_isValid = false;

    m_annotation_labels_isSet = false;
    m_annotation_labels_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_current_spend_isSet = false;
    m_current_spend_isValid = false;

    m_datasets_isSet = false;
    m_datasets_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_encryption_spec_isSet = false;
    m_encryption_spec_isValid = false;

    m_error_isSet = false;
    m_error_isValid = false;

    m_inputs_isSet = false;
    m_inputs_isValid = false;

    m_inputs_schema_uri_isSet = false;
    m_inputs_schema_uri_isValid = false;

    m_instruction_uri_isSet = false;
    m_instruction_uri_isValid = false;

    m_labeler_count_isSet = false;
    m_labeler_count_isValid = false;

    m_labeling_progress_isSet = false;
    m_labeling_progress_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_specialist_pools_isSet = false;
    m_specialist_pools_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;
}

void OAIGoogleCloudAiplatformV1DataLabelingJob::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudAiplatformV1DataLabelingJob::fromJsonObject(QJsonObject json) {

    m_active_learning_config_isValid = ::OpenAPI::fromJsonValue(m_active_learning_config, json[QString("activeLearningConfig")]);
    m_active_learning_config_isSet = !json[QString("activeLearningConfig")].isNull() && m_active_learning_config_isValid;

    m_annotation_labels_isValid = ::OpenAPI::fromJsonValue(m_annotation_labels, json[QString("annotationLabels")]);
    m_annotation_labels_isSet = !json[QString("annotationLabels")].isNull() && m_annotation_labels_isValid;

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_current_spend_isValid = ::OpenAPI::fromJsonValue(m_current_spend, json[QString("currentSpend")]);
    m_current_spend_isSet = !json[QString("currentSpend")].isNull() && m_current_spend_isValid;

    m_datasets_isValid = ::OpenAPI::fromJsonValue(m_datasets, json[QString("datasets")]);
    m_datasets_isSet = !json[QString("datasets")].isNull() && m_datasets_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_encryption_spec_isValid = ::OpenAPI::fromJsonValue(m_encryption_spec, json[QString("encryptionSpec")]);
    m_encryption_spec_isSet = !json[QString("encryptionSpec")].isNull() && m_encryption_spec_isValid;

    m_error_isValid = ::OpenAPI::fromJsonValue(m_error, json[QString("error")]);
    m_error_isSet = !json[QString("error")].isNull() && m_error_isValid;

    m_inputs_isValid = ::OpenAPI::fromJsonValue(m_inputs, json[QString("inputs")]);
    m_inputs_isSet = !json[QString("inputs")].isNull() && m_inputs_isValid;

    m_inputs_schema_uri_isValid = ::OpenAPI::fromJsonValue(m_inputs_schema_uri, json[QString("inputsSchemaUri")]);
    m_inputs_schema_uri_isSet = !json[QString("inputsSchemaUri")].isNull() && m_inputs_schema_uri_isValid;

    m_instruction_uri_isValid = ::OpenAPI::fromJsonValue(m_instruction_uri, json[QString("instructionUri")]);
    m_instruction_uri_isSet = !json[QString("instructionUri")].isNull() && m_instruction_uri_isValid;

    m_labeler_count_isValid = ::OpenAPI::fromJsonValue(m_labeler_count, json[QString("labelerCount")]);
    m_labeler_count_isSet = !json[QString("labelerCount")].isNull() && m_labeler_count_isValid;

    m_labeling_progress_isValid = ::OpenAPI::fromJsonValue(m_labeling_progress, json[QString("labelingProgress")]);
    m_labeling_progress_isSet = !json[QString("labelingProgress")].isNull() && m_labeling_progress_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_specialist_pools_isValid = ::OpenAPI::fromJsonValue(m_specialist_pools, json[QString("specialistPools")]);
    m_specialist_pools_isSet = !json[QString("specialistPools")].isNull() && m_specialist_pools_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;
}

QString OAIGoogleCloudAiplatformV1DataLabelingJob::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudAiplatformV1DataLabelingJob::asJsonObject() const {
    QJsonObject obj;
    if (m_active_learning_config.isSet()) {
        obj.insert(QString("activeLearningConfig"), ::OpenAPI::toJsonValue(m_active_learning_config));
    }
    if (m_annotation_labels.size() > 0) {
        obj.insert(QString("annotationLabels"), ::OpenAPI::toJsonValue(m_annotation_labels));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_current_spend.isSet()) {
        obj.insert(QString("currentSpend"), ::OpenAPI::toJsonValue(m_current_spend));
    }
    if (m_datasets.size() > 0) {
        obj.insert(QString("datasets"), ::OpenAPI::toJsonValue(m_datasets));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_encryption_spec.isSet()) {
        obj.insert(QString("encryptionSpec"), ::OpenAPI::toJsonValue(m_encryption_spec));
    }
    if (m_error.isSet()) {
        obj.insert(QString("error"), ::OpenAPI::toJsonValue(m_error));
    }
    if (m_inputs_isSet) {
        obj.insert(QString("inputs"), ::OpenAPI::toJsonValue(m_inputs));
    }
    if (m_inputs_schema_uri_isSet) {
        obj.insert(QString("inputsSchemaUri"), ::OpenAPI::toJsonValue(m_inputs_schema_uri));
    }
    if (m_instruction_uri_isSet) {
        obj.insert(QString("instructionUri"), ::OpenAPI::toJsonValue(m_instruction_uri));
    }
    if (m_labeler_count_isSet) {
        obj.insert(QString("labelerCount"), ::OpenAPI::toJsonValue(m_labeler_count));
    }
    if (m_labeling_progress_isSet) {
        obj.insert(QString("labelingProgress"), ::OpenAPI::toJsonValue(m_labeling_progress));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_specialist_pools.size() > 0) {
        obj.insert(QString("specialistPools"), ::OpenAPI::toJsonValue(m_specialist_pools));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    return obj;
}

OAIGoogleCloudAiplatformV1ActiveLearningConfig OAIGoogleCloudAiplatformV1DataLabelingJob::getActiveLearningConfig() const {
    return m_active_learning_config;
}
void OAIGoogleCloudAiplatformV1DataLabelingJob::setActiveLearningConfig(const OAIGoogleCloudAiplatformV1ActiveLearningConfig &active_learning_config) {
    m_active_learning_config = active_learning_config;
    m_active_learning_config_isSet = true;
}

bool OAIGoogleCloudAiplatformV1DataLabelingJob::is_active_learning_config_Set() const{
    return m_active_learning_config_isSet;
}

bool OAIGoogleCloudAiplatformV1DataLabelingJob::is_active_learning_config_Valid() const{
    return m_active_learning_config_isValid;
}

QMap<QString, QString> OAIGoogleCloudAiplatformV1DataLabelingJob::getAnnotationLabels() const {
    return m_annotation_labels;
}
void OAIGoogleCloudAiplatformV1DataLabelingJob::setAnnotationLabels(const QMap<QString, QString> &annotation_labels) {
    m_annotation_labels = annotation_labels;
    m_annotation_labels_isSet = true;
}

bool OAIGoogleCloudAiplatformV1DataLabelingJob::is_annotation_labels_Set() const{
    return m_annotation_labels_isSet;
}

bool OAIGoogleCloudAiplatformV1DataLabelingJob::is_annotation_labels_Valid() const{
    return m_annotation_labels_isValid;
}

QString OAIGoogleCloudAiplatformV1DataLabelingJob::getCreateTime() const {
    return m_create_time;
}
void OAIGoogleCloudAiplatformV1DataLabelingJob::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIGoogleCloudAiplatformV1DataLabelingJob::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIGoogleCloudAiplatformV1DataLabelingJob::is_create_time_Valid() const{
    return m_create_time_isValid;
}

OAIGoogleTypeMoney OAIGoogleCloudAiplatformV1DataLabelingJob::getCurrentSpend() const {
    return m_current_spend;
}
void OAIGoogleCloudAiplatformV1DataLabelingJob::setCurrentSpend(const OAIGoogleTypeMoney &current_spend) {
    m_current_spend = current_spend;
    m_current_spend_isSet = true;
}

bool OAIGoogleCloudAiplatformV1DataLabelingJob::is_current_spend_Set() const{
    return m_current_spend_isSet;
}

bool OAIGoogleCloudAiplatformV1DataLabelingJob::is_current_spend_Valid() const{
    return m_current_spend_isValid;
}

QList<QString> OAIGoogleCloudAiplatformV1DataLabelingJob::getDatasets() const {
    return m_datasets;
}
void OAIGoogleCloudAiplatformV1DataLabelingJob::setDatasets(const QList<QString> &datasets) {
    m_datasets = datasets;
    m_datasets_isSet = true;
}

bool OAIGoogleCloudAiplatformV1DataLabelingJob::is_datasets_Set() const{
    return m_datasets_isSet;
}

bool OAIGoogleCloudAiplatformV1DataLabelingJob::is_datasets_Valid() const{
    return m_datasets_isValid;
}

QString OAIGoogleCloudAiplatformV1DataLabelingJob::getDisplayName() const {
    return m_display_name;
}
void OAIGoogleCloudAiplatformV1DataLabelingJob::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIGoogleCloudAiplatformV1DataLabelingJob::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIGoogleCloudAiplatformV1DataLabelingJob::is_display_name_Valid() const{
    return m_display_name_isValid;
}

OAIGoogleCloudAiplatformV1EncryptionSpec OAIGoogleCloudAiplatformV1DataLabelingJob::getEncryptionSpec() const {
    return m_encryption_spec;
}
void OAIGoogleCloudAiplatformV1DataLabelingJob::setEncryptionSpec(const OAIGoogleCloudAiplatformV1EncryptionSpec &encryption_spec) {
    m_encryption_spec = encryption_spec;
    m_encryption_spec_isSet = true;
}

bool OAIGoogleCloudAiplatformV1DataLabelingJob::is_encryption_spec_Set() const{
    return m_encryption_spec_isSet;
}

bool OAIGoogleCloudAiplatformV1DataLabelingJob::is_encryption_spec_Valid() const{
    return m_encryption_spec_isValid;
}

OAIGoogleRpcStatus OAIGoogleCloudAiplatformV1DataLabelingJob::getError() const {
    return m_error;
}
void OAIGoogleCloudAiplatformV1DataLabelingJob::setError(const OAIGoogleRpcStatus &error) {
    m_error = error;
    m_error_isSet = true;
}

bool OAIGoogleCloudAiplatformV1DataLabelingJob::is_error_Set() const{
    return m_error_isSet;
}

bool OAIGoogleCloudAiplatformV1DataLabelingJob::is_error_Valid() const{
    return m_error_isValid;
}

QJsonValue OAIGoogleCloudAiplatformV1DataLabelingJob::getInputs() const {
    return m_inputs;
}
void OAIGoogleCloudAiplatformV1DataLabelingJob::setInputs(const QJsonValue &inputs) {
    m_inputs = inputs;
    m_inputs_isSet = true;
}

bool OAIGoogleCloudAiplatformV1DataLabelingJob::is_inputs_Set() const{
    return m_inputs_isSet;
}

bool OAIGoogleCloudAiplatformV1DataLabelingJob::is_inputs_Valid() const{
    return m_inputs_isValid;
}

QString OAIGoogleCloudAiplatformV1DataLabelingJob::getInputsSchemaUri() const {
    return m_inputs_schema_uri;
}
void OAIGoogleCloudAiplatformV1DataLabelingJob::setInputsSchemaUri(const QString &inputs_schema_uri) {
    m_inputs_schema_uri = inputs_schema_uri;
    m_inputs_schema_uri_isSet = true;
}

bool OAIGoogleCloudAiplatformV1DataLabelingJob::is_inputs_schema_uri_Set() const{
    return m_inputs_schema_uri_isSet;
}

bool OAIGoogleCloudAiplatformV1DataLabelingJob::is_inputs_schema_uri_Valid() const{
    return m_inputs_schema_uri_isValid;
}

QString OAIGoogleCloudAiplatformV1DataLabelingJob::getInstructionUri() const {
    return m_instruction_uri;
}
void OAIGoogleCloudAiplatformV1DataLabelingJob::setInstructionUri(const QString &instruction_uri) {
    m_instruction_uri = instruction_uri;
    m_instruction_uri_isSet = true;
}

bool OAIGoogleCloudAiplatformV1DataLabelingJob::is_instruction_uri_Set() const{
    return m_instruction_uri_isSet;
}

bool OAIGoogleCloudAiplatformV1DataLabelingJob::is_instruction_uri_Valid() const{
    return m_instruction_uri_isValid;
}

qint32 OAIGoogleCloudAiplatformV1DataLabelingJob::getLabelerCount() const {
    return m_labeler_count;
}
void OAIGoogleCloudAiplatformV1DataLabelingJob::setLabelerCount(const qint32 &labeler_count) {
    m_labeler_count = labeler_count;
    m_labeler_count_isSet = true;
}

bool OAIGoogleCloudAiplatformV1DataLabelingJob::is_labeler_count_Set() const{
    return m_labeler_count_isSet;
}

bool OAIGoogleCloudAiplatformV1DataLabelingJob::is_labeler_count_Valid() const{
    return m_labeler_count_isValid;
}

qint32 OAIGoogleCloudAiplatformV1DataLabelingJob::getLabelingProgress() const {
    return m_labeling_progress;
}
void OAIGoogleCloudAiplatformV1DataLabelingJob::setLabelingProgress(const qint32 &labeling_progress) {
    m_labeling_progress = labeling_progress;
    m_labeling_progress_isSet = true;
}

bool OAIGoogleCloudAiplatformV1DataLabelingJob::is_labeling_progress_Set() const{
    return m_labeling_progress_isSet;
}

bool OAIGoogleCloudAiplatformV1DataLabelingJob::is_labeling_progress_Valid() const{
    return m_labeling_progress_isValid;
}

QMap<QString, QString> OAIGoogleCloudAiplatformV1DataLabelingJob::getLabels() const {
    return m_labels;
}
void OAIGoogleCloudAiplatformV1DataLabelingJob::setLabels(const QMap<QString, QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIGoogleCloudAiplatformV1DataLabelingJob::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIGoogleCloudAiplatformV1DataLabelingJob::is_labels_Valid() const{
    return m_labels_isValid;
}

QString OAIGoogleCloudAiplatformV1DataLabelingJob::getName() const {
    return m_name;
}
void OAIGoogleCloudAiplatformV1DataLabelingJob::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGoogleCloudAiplatformV1DataLabelingJob::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGoogleCloudAiplatformV1DataLabelingJob::is_name_Valid() const{
    return m_name_isValid;
}

QList<QString> OAIGoogleCloudAiplatformV1DataLabelingJob::getSpecialistPools() const {
    return m_specialist_pools;
}
void OAIGoogleCloudAiplatformV1DataLabelingJob::setSpecialistPools(const QList<QString> &specialist_pools) {
    m_specialist_pools = specialist_pools;
    m_specialist_pools_isSet = true;
}

bool OAIGoogleCloudAiplatformV1DataLabelingJob::is_specialist_pools_Set() const{
    return m_specialist_pools_isSet;
}

bool OAIGoogleCloudAiplatformV1DataLabelingJob::is_specialist_pools_Valid() const{
    return m_specialist_pools_isValid;
}

QString OAIGoogleCloudAiplatformV1DataLabelingJob::getState() const {
    return m_state;
}
void OAIGoogleCloudAiplatformV1DataLabelingJob::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIGoogleCloudAiplatformV1DataLabelingJob::is_state_Set() const{
    return m_state_isSet;
}

bool OAIGoogleCloudAiplatformV1DataLabelingJob::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIGoogleCloudAiplatformV1DataLabelingJob::getUpdateTime() const {
    return m_update_time;
}
void OAIGoogleCloudAiplatformV1DataLabelingJob::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAIGoogleCloudAiplatformV1DataLabelingJob::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAIGoogleCloudAiplatformV1DataLabelingJob::is_update_time_Valid() const{
    return m_update_time_isValid;
}

bool OAIGoogleCloudAiplatformV1DataLabelingJob::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active_learning_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_annotation_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_spend.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_datasets.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_encryption_spec.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_error.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_inputs_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inputs_schema_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instruction_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labeler_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labeling_progress_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_specialist_pools.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudAiplatformV1DataLabelingJob::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
