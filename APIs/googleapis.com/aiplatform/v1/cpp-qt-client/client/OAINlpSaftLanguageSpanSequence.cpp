/**
 * Vertex AI API
 * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINlpSaftLanguageSpanSequence.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINlpSaftLanguageSpanSequence::OAINlpSaftLanguageSpanSequence(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINlpSaftLanguageSpanSequence::OAINlpSaftLanguageSpanSequence() {
    this->initializeModel();
}

OAINlpSaftLanguageSpanSequence::~OAINlpSaftLanguageSpanSequence() {}

void OAINlpSaftLanguageSpanSequence::initializeModel() {

    m_language_spans_isSet = false;
    m_language_spans_isValid = false;

    m_probability_isSet = false;
    m_probability_isValid = false;
}

void OAINlpSaftLanguageSpanSequence::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINlpSaftLanguageSpanSequence::fromJsonObject(QJsonObject json) {

    m_language_spans_isValid = ::OpenAPI::fromJsonValue(m_language_spans, json[QString("languageSpans")]);
    m_language_spans_isSet = !json[QString("languageSpans")].isNull() && m_language_spans_isValid;

    m_probability_isValid = ::OpenAPI::fromJsonValue(m_probability, json[QString("probability")]);
    m_probability_isSet = !json[QString("probability")].isNull() && m_probability_isValid;
}

QString OAINlpSaftLanguageSpanSequence::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINlpSaftLanguageSpanSequence::asJsonObject() const {
    QJsonObject obj;
    if (m_language_spans.size() > 0) {
        obj.insert(QString("languageSpans"), ::OpenAPI::toJsonValue(m_language_spans));
    }
    if (m_probability_isSet) {
        obj.insert(QString("probability"), ::OpenAPI::toJsonValue(m_probability));
    }
    return obj;
}

QList<OAINlpSaftLanguageSpan> OAINlpSaftLanguageSpanSequence::getLanguageSpans() const {
    return m_language_spans;
}
void OAINlpSaftLanguageSpanSequence::setLanguageSpans(const QList<OAINlpSaftLanguageSpan> &language_spans) {
    m_language_spans = language_spans;
    m_language_spans_isSet = true;
}

bool OAINlpSaftLanguageSpanSequence::is_language_spans_Set() const{
    return m_language_spans_isSet;
}

bool OAINlpSaftLanguageSpanSequence::is_language_spans_Valid() const{
    return m_language_spans_isValid;
}

float OAINlpSaftLanguageSpanSequence::getProbability() const {
    return m_probability;
}
void OAINlpSaftLanguageSpanSequence::setProbability(const float &probability) {
    m_probability = probability;
    m_probability_isSet = true;
}

bool OAINlpSaftLanguageSpanSequence::is_probability_Set() const{
    return m_probability_isSet;
}

bool OAINlpSaftLanguageSpanSequence::is_probability_Valid() const{
    return m_probability_isValid;
}

bool OAINlpSaftLanguageSpanSequence::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_language_spans.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_probability_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINlpSaftLanguageSpanSequence::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
