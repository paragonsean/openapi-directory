/**
 * Vertex AI API
 * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudAiplatformV1ModelDeploymentMonitoringBigQueryTable.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudAiplatformV1ModelDeploymentMonitoringBigQueryTable::OAIGoogleCloudAiplatformV1ModelDeploymentMonitoringBigQueryTable(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudAiplatformV1ModelDeploymentMonitoringBigQueryTable::OAIGoogleCloudAiplatformV1ModelDeploymentMonitoringBigQueryTable() {
    this->initializeModel();
}

OAIGoogleCloudAiplatformV1ModelDeploymentMonitoringBigQueryTable::~OAIGoogleCloudAiplatformV1ModelDeploymentMonitoringBigQueryTable() {}

void OAIGoogleCloudAiplatformV1ModelDeploymentMonitoringBigQueryTable::initializeModel() {

    m_bigquery_table_path_isSet = false;
    m_bigquery_table_path_isValid = false;

    m_log_source_isSet = false;
    m_log_source_isValid = false;

    m_log_type_isSet = false;
    m_log_type_isValid = false;

    m_request_response_logging_schema_version_isSet = false;
    m_request_response_logging_schema_version_isValid = false;
}

void OAIGoogleCloudAiplatformV1ModelDeploymentMonitoringBigQueryTable::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudAiplatformV1ModelDeploymentMonitoringBigQueryTable::fromJsonObject(QJsonObject json) {

    m_bigquery_table_path_isValid = ::OpenAPI::fromJsonValue(m_bigquery_table_path, json[QString("bigqueryTablePath")]);
    m_bigquery_table_path_isSet = !json[QString("bigqueryTablePath")].isNull() && m_bigquery_table_path_isValid;

    m_log_source_isValid = ::OpenAPI::fromJsonValue(m_log_source, json[QString("logSource")]);
    m_log_source_isSet = !json[QString("logSource")].isNull() && m_log_source_isValid;

    m_log_type_isValid = ::OpenAPI::fromJsonValue(m_log_type, json[QString("logType")]);
    m_log_type_isSet = !json[QString("logType")].isNull() && m_log_type_isValid;

    m_request_response_logging_schema_version_isValid = ::OpenAPI::fromJsonValue(m_request_response_logging_schema_version, json[QString("requestResponseLoggingSchemaVersion")]);
    m_request_response_logging_schema_version_isSet = !json[QString("requestResponseLoggingSchemaVersion")].isNull() && m_request_response_logging_schema_version_isValid;
}

QString OAIGoogleCloudAiplatformV1ModelDeploymentMonitoringBigQueryTable::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudAiplatformV1ModelDeploymentMonitoringBigQueryTable::asJsonObject() const {
    QJsonObject obj;
    if (m_bigquery_table_path_isSet) {
        obj.insert(QString("bigqueryTablePath"), ::OpenAPI::toJsonValue(m_bigquery_table_path));
    }
    if (m_log_source_isSet) {
        obj.insert(QString("logSource"), ::OpenAPI::toJsonValue(m_log_source));
    }
    if (m_log_type_isSet) {
        obj.insert(QString("logType"), ::OpenAPI::toJsonValue(m_log_type));
    }
    if (m_request_response_logging_schema_version_isSet) {
        obj.insert(QString("requestResponseLoggingSchemaVersion"), ::OpenAPI::toJsonValue(m_request_response_logging_schema_version));
    }
    return obj;
}

QString OAIGoogleCloudAiplatformV1ModelDeploymentMonitoringBigQueryTable::getBigqueryTablePath() const {
    return m_bigquery_table_path;
}
void OAIGoogleCloudAiplatformV1ModelDeploymentMonitoringBigQueryTable::setBigqueryTablePath(const QString &bigquery_table_path) {
    m_bigquery_table_path = bigquery_table_path;
    m_bigquery_table_path_isSet = true;
}

bool OAIGoogleCloudAiplatformV1ModelDeploymentMonitoringBigQueryTable::is_bigquery_table_path_Set() const{
    return m_bigquery_table_path_isSet;
}

bool OAIGoogleCloudAiplatformV1ModelDeploymentMonitoringBigQueryTable::is_bigquery_table_path_Valid() const{
    return m_bigquery_table_path_isValid;
}

QString OAIGoogleCloudAiplatformV1ModelDeploymentMonitoringBigQueryTable::getLogSource() const {
    return m_log_source;
}
void OAIGoogleCloudAiplatformV1ModelDeploymentMonitoringBigQueryTable::setLogSource(const QString &log_source) {
    m_log_source = log_source;
    m_log_source_isSet = true;
}

bool OAIGoogleCloudAiplatformV1ModelDeploymentMonitoringBigQueryTable::is_log_source_Set() const{
    return m_log_source_isSet;
}

bool OAIGoogleCloudAiplatformV1ModelDeploymentMonitoringBigQueryTable::is_log_source_Valid() const{
    return m_log_source_isValid;
}

QString OAIGoogleCloudAiplatformV1ModelDeploymentMonitoringBigQueryTable::getLogType() const {
    return m_log_type;
}
void OAIGoogleCloudAiplatformV1ModelDeploymentMonitoringBigQueryTable::setLogType(const QString &log_type) {
    m_log_type = log_type;
    m_log_type_isSet = true;
}

bool OAIGoogleCloudAiplatformV1ModelDeploymentMonitoringBigQueryTable::is_log_type_Set() const{
    return m_log_type_isSet;
}

bool OAIGoogleCloudAiplatformV1ModelDeploymentMonitoringBigQueryTable::is_log_type_Valid() const{
    return m_log_type_isValid;
}

QString OAIGoogleCloudAiplatformV1ModelDeploymentMonitoringBigQueryTable::getRequestResponseLoggingSchemaVersion() const {
    return m_request_response_logging_schema_version;
}
void OAIGoogleCloudAiplatformV1ModelDeploymentMonitoringBigQueryTable::setRequestResponseLoggingSchemaVersion(const QString &request_response_logging_schema_version) {
    m_request_response_logging_schema_version = request_response_logging_schema_version;
    m_request_response_logging_schema_version_isSet = true;
}

bool OAIGoogleCloudAiplatformV1ModelDeploymentMonitoringBigQueryTable::is_request_response_logging_schema_version_Set() const{
    return m_request_response_logging_schema_version_isSet;
}

bool OAIGoogleCloudAiplatformV1ModelDeploymentMonitoringBigQueryTable::is_request_response_logging_schema_version_Valid() const{
    return m_request_response_logging_schema_version_isValid;
}

bool OAIGoogleCloudAiplatformV1ModelDeploymentMonitoringBigQueryTable::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bigquery_table_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_log_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_log_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_response_logging_schema_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudAiplatformV1ModelDeploymentMonitoringBigQueryTable::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
