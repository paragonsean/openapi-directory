/**
 * Vertex AI API
 * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudAiplatformV1ReadTensorboardUsageResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudAiplatformV1ReadTensorboardUsageResponse::OAIGoogleCloudAiplatformV1ReadTensorboardUsageResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudAiplatformV1ReadTensorboardUsageResponse::OAIGoogleCloudAiplatformV1ReadTensorboardUsageResponse() {
    this->initializeModel();
}

OAIGoogleCloudAiplatformV1ReadTensorboardUsageResponse::~OAIGoogleCloudAiplatformV1ReadTensorboardUsageResponse() {}

void OAIGoogleCloudAiplatformV1ReadTensorboardUsageResponse::initializeModel() {

    m_monthly_usage_data_isSet = false;
    m_monthly_usage_data_isValid = false;
}

void OAIGoogleCloudAiplatformV1ReadTensorboardUsageResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudAiplatformV1ReadTensorboardUsageResponse::fromJsonObject(QJsonObject json) {

    m_monthly_usage_data_isValid = ::OpenAPI::fromJsonValue(m_monthly_usage_data, json[QString("monthlyUsageData")]);
    m_monthly_usage_data_isSet = !json[QString("monthlyUsageData")].isNull() && m_monthly_usage_data_isValid;
}

QString OAIGoogleCloudAiplatformV1ReadTensorboardUsageResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudAiplatformV1ReadTensorboardUsageResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_monthly_usage_data.size() > 0) {
        obj.insert(QString("monthlyUsageData"), ::OpenAPI::toJsonValue(m_monthly_usage_data));
    }
    return obj;
}

QMap<QString, OAIGoogleCloudAiplatformV1ReadTensorboardUsageResponsePerMonthUsageData> OAIGoogleCloudAiplatformV1ReadTensorboardUsageResponse::getMonthlyUsageData() const {
    return m_monthly_usage_data;
}
void OAIGoogleCloudAiplatformV1ReadTensorboardUsageResponse::setMonthlyUsageData(const QMap<QString, OAIGoogleCloudAiplatformV1ReadTensorboardUsageResponsePerMonthUsageData> &monthly_usage_data) {
    m_monthly_usage_data = monthly_usage_data;
    m_monthly_usage_data_isSet = true;
}

bool OAIGoogleCloudAiplatformV1ReadTensorboardUsageResponse::is_monthly_usage_data_Set() const{
    return m_monthly_usage_data_isSet;
}

bool OAIGoogleCloudAiplatformV1ReadTensorboardUsageResponse::is_monthly_usage_data_Valid() const{
    return m_monthly_usage_data_isValid;
}

bool OAIGoogleCloudAiplatformV1ReadTensorboardUsageResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_monthly_usage_data.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudAiplatformV1ReadTensorboardUsageResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
