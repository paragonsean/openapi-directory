/**
 * Vertex AI API
 * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudAiplatformV1ExportFilterSplit.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudAiplatformV1ExportFilterSplit::OAIGoogleCloudAiplatformV1ExportFilterSplit(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudAiplatformV1ExportFilterSplit::OAIGoogleCloudAiplatformV1ExportFilterSplit() {
    this->initializeModel();
}

OAIGoogleCloudAiplatformV1ExportFilterSplit::~OAIGoogleCloudAiplatformV1ExportFilterSplit() {}

void OAIGoogleCloudAiplatformV1ExportFilterSplit::initializeModel() {

    m_test_filter_isSet = false;
    m_test_filter_isValid = false;

    m_training_filter_isSet = false;
    m_training_filter_isValid = false;

    m_validation_filter_isSet = false;
    m_validation_filter_isValid = false;
}

void OAIGoogleCloudAiplatformV1ExportFilterSplit::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudAiplatformV1ExportFilterSplit::fromJsonObject(QJsonObject json) {

    m_test_filter_isValid = ::OpenAPI::fromJsonValue(m_test_filter, json[QString("testFilter")]);
    m_test_filter_isSet = !json[QString("testFilter")].isNull() && m_test_filter_isValid;

    m_training_filter_isValid = ::OpenAPI::fromJsonValue(m_training_filter, json[QString("trainingFilter")]);
    m_training_filter_isSet = !json[QString("trainingFilter")].isNull() && m_training_filter_isValid;

    m_validation_filter_isValid = ::OpenAPI::fromJsonValue(m_validation_filter, json[QString("validationFilter")]);
    m_validation_filter_isSet = !json[QString("validationFilter")].isNull() && m_validation_filter_isValid;
}

QString OAIGoogleCloudAiplatformV1ExportFilterSplit::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudAiplatformV1ExportFilterSplit::asJsonObject() const {
    QJsonObject obj;
    if (m_test_filter_isSet) {
        obj.insert(QString("testFilter"), ::OpenAPI::toJsonValue(m_test_filter));
    }
    if (m_training_filter_isSet) {
        obj.insert(QString("trainingFilter"), ::OpenAPI::toJsonValue(m_training_filter));
    }
    if (m_validation_filter_isSet) {
        obj.insert(QString("validationFilter"), ::OpenAPI::toJsonValue(m_validation_filter));
    }
    return obj;
}

QString OAIGoogleCloudAiplatformV1ExportFilterSplit::getTestFilter() const {
    return m_test_filter;
}
void OAIGoogleCloudAiplatformV1ExportFilterSplit::setTestFilter(const QString &test_filter) {
    m_test_filter = test_filter;
    m_test_filter_isSet = true;
}

bool OAIGoogleCloudAiplatformV1ExportFilterSplit::is_test_filter_Set() const{
    return m_test_filter_isSet;
}

bool OAIGoogleCloudAiplatformV1ExportFilterSplit::is_test_filter_Valid() const{
    return m_test_filter_isValid;
}

QString OAIGoogleCloudAiplatformV1ExportFilterSplit::getTrainingFilter() const {
    return m_training_filter;
}
void OAIGoogleCloudAiplatformV1ExportFilterSplit::setTrainingFilter(const QString &training_filter) {
    m_training_filter = training_filter;
    m_training_filter_isSet = true;
}

bool OAIGoogleCloudAiplatformV1ExportFilterSplit::is_training_filter_Set() const{
    return m_training_filter_isSet;
}

bool OAIGoogleCloudAiplatformV1ExportFilterSplit::is_training_filter_Valid() const{
    return m_training_filter_isValid;
}

QString OAIGoogleCloudAiplatformV1ExportFilterSplit::getValidationFilter() const {
    return m_validation_filter;
}
void OAIGoogleCloudAiplatformV1ExportFilterSplit::setValidationFilter(const QString &validation_filter) {
    m_validation_filter = validation_filter;
    m_validation_filter_isSet = true;
}

bool OAIGoogleCloudAiplatformV1ExportFilterSplit::is_validation_filter_Set() const{
    return m_validation_filter_isSet;
}

bool OAIGoogleCloudAiplatformV1ExportFilterSplit::is_validation_filter_Valid() const{
    return m_validation_filter_isValid;
}

bool OAIGoogleCloudAiplatformV1ExportFilterSplit::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_test_filter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_training_filter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_validation_filter_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudAiplatformV1ExportFilterSplit::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
