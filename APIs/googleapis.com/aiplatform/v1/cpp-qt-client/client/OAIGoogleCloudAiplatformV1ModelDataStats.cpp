/**
 * Vertex AI API
 * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudAiplatformV1ModelDataStats.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudAiplatformV1ModelDataStats::OAIGoogleCloudAiplatformV1ModelDataStats(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudAiplatformV1ModelDataStats::OAIGoogleCloudAiplatformV1ModelDataStats() {
    this->initializeModel();
}

OAIGoogleCloudAiplatformV1ModelDataStats::~OAIGoogleCloudAiplatformV1ModelDataStats() {}

void OAIGoogleCloudAiplatformV1ModelDataStats::initializeModel() {

    m_test_annotations_count_isSet = false;
    m_test_annotations_count_isValid = false;

    m_test_data_items_count_isSet = false;
    m_test_data_items_count_isValid = false;

    m_training_annotations_count_isSet = false;
    m_training_annotations_count_isValid = false;

    m_training_data_items_count_isSet = false;
    m_training_data_items_count_isValid = false;

    m_validation_annotations_count_isSet = false;
    m_validation_annotations_count_isValid = false;

    m_validation_data_items_count_isSet = false;
    m_validation_data_items_count_isValid = false;
}

void OAIGoogleCloudAiplatformV1ModelDataStats::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudAiplatformV1ModelDataStats::fromJsonObject(QJsonObject json) {

    m_test_annotations_count_isValid = ::OpenAPI::fromJsonValue(m_test_annotations_count, json[QString("testAnnotationsCount")]);
    m_test_annotations_count_isSet = !json[QString("testAnnotationsCount")].isNull() && m_test_annotations_count_isValid;

    m_test_data_items_count_isValid = ::OpenAPI::fromJsonValue(m_test_data_items_count, json[QString("testDataItemsCount")]);
    m_test_data_items_count_isSet = !json[QString("testDataItemsCount")].isNull() && m_test_data_items_count_isValid;

    m_training_annotations_count_isValid = ::OpenAPI::fromJsonValue(m_training_annotations_count, json[QString("trainingAnnotationsCount")]);
    m_training_annotations_count_isSet = !json[QString("trainingAnnotationsCount")].isNull() && m_training_annotations_count_isValid;

    m_training_data_items_count_isValid = ::OpenAPI::fromJsonValue(m_training_data_items_count, json[QString("trainingDataItemsCount")]);
    m_training_data_items_count_isSet = !json[QString("trainingDataItemsCount")].isNull() && m_training_data_items_count_isValid;

    m_validation_annotations_count_isValid = ::OpenAPI::fromJsonValue(m_validation_annotations_count, json[QString("validationAnnotationsCount")]);
    m_validation_annotations_count_isSet = !json[QString("validationAnnotationsCount")].isNull() && m_validation_annotations_count_isValid;

    m_validation_data_items_count_isValid = ::OpenAPI::fromJsonValue(m_validation_data_items_count, json[QString("validationDataItemsCount")]);
    m_validation_data_items_count_isSet = !json[QString("validationDataItemsCount")].isNull() && m_validation_data_items_count_isValid;
}

QString OAIGoogleCloudAiplatformV1ModelDataStats::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudAiplatformV1ModelDataStats::asJsonObject() const {
    QJsonObject obj;
    if (m_test_annotations_count_isSet) {
        obj.insert(QString("testAnnotationsCount"), ::OpenAPI::toJsonValue(m_test_annotations_count));
    }
    if (m_test_data_items_count_isSet) {
        obj.insert(QString("testDataItemsCount"), ::OpenAPI::toJsonValue(m_test_data_items_count));
    }
    if (m_training_annotations_count_isSet) {
        obj.insert(QString("trainingAnnotationsCount"), ::OpenAPI::toJsonValue(m_training_annotations_count));
    }
    if (m_training_data_items_count_isSet) {
        obj.insert(QString("trainingDataItemsCount"), ::OpenAPI::toJsonValue(m_training_data_items_count));
    }
    if (m_validation_annotations_count_isSet) {
        obj.insert(QString("validationAnnotationsCount"), ::OpenAPI::toJsonValue(m_validation_annotations_count));
    }
    if (m_validation_data_items_count_isSet) {
        obj.insert(QString("validationDataItemsCount"), ::OpenAPI::toJsonValue(m_validation_data_items_count));
    }
    return obj;
}

QString OAIGoogleCloudAiplatformV1ModelDataStats::getTestAnnotationsCount() const {
    return m_test_annotations_count;
}
void OAIGoogleCloudAiplatformV1ModelDataStats::setTestAnnotationsCount(const QString &test_annotations_count) {
    m_test_annotations_count = test_annotations_count;
    m_test_annotations_count_isSet = true;
}

bool OAIGoogleCloudAiplatformV1ModelDataStats::is_test_annotations_count_Set() const{
    return m_test_annotations_count_isSet;
}

bool OAIGoogleCloudAiplatformV1ModelDataStats::is_test_annotations_count_Valid() const{
    return m_test_annotations_count_isValid;
}

QString OAIGoogleCloudAiplatformV1ModelDataStats::getTestDataItemsCount() const {
    return m_test_data_items_count;
}
void OAIGoogleCloudAiplatformV1ModelDataStats::setTestDataItemsCount(const QString &test_data_items_count) {
    m_test_data_items_count = test_data_items_count;
    m_test_data_items_count_isSet = true;
}

bool OAIGoogleCloudAiplatformV1ModelDataStats::is_test_data_items_count_Set() const{
    return m_test_data_items_count_isSet;
}

bool OAIGoogleCloudAiplatformV1ModelDataStats::is_test_data_items_count_Valid() const{
    return m_test_data_items_count_isValid;
}

QString OAIGoogleCloudAiplatformV1ModelDataStats::getTrainingAnnotationsCount() const {
    return m_training_annotations_count;
}
void OAIGoogleCloudAiplatformV1ModelDataStats::setTrainingAnnotationsCount(const QString &training_annotations_count) {
    m_training_annotations_count = training_annotations_count;
    m_training_annotations_count_isSet = true;
}

bool OAIGoogleCloudAiplatformV1ModelDataStats::is_training_annotations_count_Set() const{
    return m_training_annotations_count_isSet;
}

bool OAIGoogleCloudAiplatformV1ModelDataStats::is_training_annotations_count_Valid() const{
    return m_training_annotations_count_isValid;
}

QString OAIGoogleCloudAiplatformV1ModelDataStats::getTrainingDataItemsCount() const {
    return m_training_data_items_count;
}
void OAIGoogleCloudAiplatformV1ModelDataStats::setTrainingDataItemsCount(const QString &training_data_items_count) {
    m_training_data_items_count = training_data_items_count;
    m_training_data_items_count_isSet = true;
}

bool OAIGoogleCloudAiplatformV1ModelDataStats::is_training_data_items_count_Set() const{
    return m_training_data_items_count_isSet;
}

bool OAIGoogleCloudAiplatformV1ModelDataStats::is_training_data_items_count_Valid() const{
    return m_training_data_items_count_isValid;
}

QString OAIGoogleCloudAiplatformV1ModelDataStats::getValidationAnnotationsCount() const {
    return m_validation_annotations_count;
}
void OAIGoogleCloudAiplatformV1ModelDataStats::setValidationAnnotationsCount(const QString &validation_annotations_count) {
    m_validation_annotations_count = validation_annotations_count;
    m_validation_annotations_count_isSet = true;
}

bool OAIGoogleCloudAiplatformV1ModelDataStats::is_validation_annotations_count_Set() const{
    return m_validation_annotations_count_isSet;
}

bool OAIGoogleCloudAiplatformV1ModelDataStats::is_validation_annotations_count_Valid() const{
    return m_validation_annotations_count_isValid;
}

QString OAIGoogleCloudAiplatformV1ModelDataStats::getValidationDataItemsCount() const {
    return m_validation_data_items_count;
}
void OAIGoogleCloudAiplatformV1ModelDataStats::setValidationDataItemsCount(const QString &validation_data_items_count) {
    m_validation_data_items_count = validation_data_items_count;
    m_validation_data_items_count_isSet = true;
}

bool OAIGoogleCloudAiplatformV1ModelDataStats::is_validation_data_items_count_Set() const{
    return m_validation_data_items_count_isSet;
}

bool OAIGoogleCloudAiplatformV1ModelDataStats::is_validation_data_items_count_Valid() const{
    return m_validation_data_items_count_isValid;
}

bool OAIGoogleCloudAiplatformV1ModelDataStats::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_test_annotations_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_test_data_items_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_training_annotations_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_training_data_items_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_validation_annotations_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_validation_data_items_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudAiplatformV1ModelDataStats::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
