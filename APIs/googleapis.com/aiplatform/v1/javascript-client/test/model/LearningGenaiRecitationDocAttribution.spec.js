/**
 * Vertex AI API
 * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.VertexAiApi);
  }
}(this, function(expect, VertexAiApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new VertexAiApi.LearningGenaiRecitationDocAttribution();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('LearningGenaiRecitationDocAttribution', function() {
    it('should create an instance of LearningGenaiRecitationDocAttribution', function() {
      // uncomment below and update the code to test LearningGenaiRecitationDocAttribution
      //var instance = new VertexAiApi.LearningGenaiRecitationDocAttribution();
      //expect(instance).to.be.a(VertexAiApi.LearningGenaiRecitationDocAttribution);
    });

    it('should have the property amarnaId (base name: "amarnaId")', function() {
      // uncomment below and update the code to test the property amarnaId
      //var instance = new VertexAiApi.LearningGenaiRecitationDocAttribution();
      //expect(instance).to.be();
    });

    it('should have the property arxivId (base name: "arxivId")', function() {
      // uncomment below and update the code to test the property arxivId
      //var instance = new VertexAiApi.LearningGenaiRecitationDocAttribution();
      //expect(instance).to.be();
    });

    it('should have the property author (base name: "author")', function() {
      // uncomment below and update the code to test the property author
      //var instance = new VertexAiApi.LearningGenaiRecitationDocAttribution();
      //expect(instance).to.be();
    });

    it('should have the property bibkey (base name: "bibkey")', function() {
      // uncomment below and update the code to test the property bibkey
      //var instance = new VertexAiApi.LearningGenaiRecitationDocAttribution();
      //expect(instance).to.be();
    });

    it('should have the property biorxivId (base name: "biorxivId")', function() {
      // uncomment below and update the code to test the property biorxivId
      //var instance = new VertexAiApi.LearningGenaiRecitationDocAttribution();
      //expect(instance).to.be();
    });

    it('should have the property bookTitle (base name: "bookTitle")', function() {
      // uncomment below and update the code to test the property bookTitle
      //var instance = new VertexAiApi.LearningGenaiRecitationDocAttribution();
      //expect(instance).to.be();
    });

    it('should have the property bookVolumeId (base name: "bookVolumeId")', function() {
      // uncomment below and update the code to test the property bookVolumeId
      //var instance = new VertexAiApi.LearningGenaiRecitationDocAttribution();
      //expect(instance).to.be();
    });

    it('should have the property conversationId (base name: "conversationId")', function() {
      // uncomment below and update the code to test the property conversationId
      //var instance = new VertexAiApi.LearningGenaiRecitationDocAttribution();
      //expect(instance).to.be();
    });

    it('should have the property dataset (base name: "dataset")', function() {
      // uncomment below and update the code to test the property dataset
      //var instance = new VertexAiApi.LearningGenaiRecitationDocAttribution();
      //expect(instance).to.be();
    });

    it('should have the property filepath (base name: "filepath")', function() {
      // uncomment below and update the code to test the property filepath
      //var instance = new VertexAiApi.LearningGenaiRecitationDocAttribution();
      //expect(instance).to.be();
    });

    it('should have the property geminiId (base name: "geminiId")', function() {
      // uncomment below and update the code to test the property geminiId
      //var instance = new VertexAiApi.LearningGenaiRecitationDocAttribution();
      //expect(instance).to.be();
    });

    it('should have the property gnewsArticleTitle (base name: "gnewsArticleTitle")', function() {
      // uncomment below and update the code to test the property gnewsArticleTitle
      //var instance = new VertexAiApi.LearningGenaiRecitationDocAttribution();
      //expect(instance).to.be();
    });

    it('should have the property goodallExampleId (base name: "goodallExampleId")', function() {
      // uncomment below and update the code to test the property goodallExampleId
      //var instance = new VertexAiApi.LearningGenaiRecitationDocAttribution();
      //expect(instance).to.be();
    });

    it('should have the property isOptOut (base name: "isOptOut")', function() {
      // uncomment below and update the code to test the property isOptOut
      //var instance = new VertexAiApi.LearningGenaiRecitationDocAttribution();
      //expect(instance).to.be();
    });

    it('should have the property isPrompt (base name: "isPrompt")', function() {
      // uncomment below and update the code to test the property isPrompt
      //var instance = new VertexAiApi.LearningGenaiRecitationDocAttribution();
      //expect(instance).to.be();
    });

    it('should have the property lamdaExampleId (base name: "lamdaExampleId")', function() {
      // uncomment below and update the code to test the property lamdaExampleId
      //var instance = new VertexAiApi.LearningGenaiRecitationDocAttribution();
      //expect(instance).to.be();
    });

    it('should have the property license (base name: "license")', function() {
      // uncomment below and update the code to test the property license
      //var instance = new VertexAiApi.LearningGenaiRecitationDocAttribution();
      //expect(instance).to.be();
    });

    it('should have the property meenaConversationId (base name: "meenaConversationId")', function() {
      // uncomment below and update the code to test the property meenaConversationId
      //var instance = new VertexAiApi.LearningGenaiRecitationDocAttribution();
      //expect(instance).to.be();
    });

    it('should have the property naturalLanguageCode (base name: "naturalLanguageCode")', function() {
      // uncomment below and update the code to test the property naturalLanguageCode
      //var instance = new VertexAiApi.LearningGenaiRecitationDocAttribution();
      //expect(instance).to.be();
    });

    it('should have the property noAttribution (base name: "noAttribution")', function() {
      // uncomment below and update the code to test the property noAttribution
      //var instance = new VertexAiApi.LearningGenaiRecitationDocAttribution();
      //expect(instance).to.be();
    });

    it('should have the property podcastUtteranceId (base name: "podcastUtteranceId")', function() {
      // uncomment below and update the code to test the property podcastUtteranceId
      //var instance = new VertexAiApi.LearningGenaiRecitationDocAttribution();
      //expect(instance).to.be();
    });

    it('should have the property publicationDate (base name: "publicationDate")', function() {
      // uncomment below and update the code to test the property publicationDate
      //var instance = new VertexAiApi.LearningGenaiRecitationDocAttribution();
      //expect(instance).to.be();
    });

    it('should have the property qualityScoreExperimentOnly (base name: "qualityScoreExperimentOnly")', function() {
      // uncomment below and update the code to test the property qualityScoreExperimentOnly
      //var instance = new VertexAiApi.LearningGenaiRecitationDocAttribution();
      //expect(instance).to.be();
    });

    it('should have the property repo (base name: "repo")', function() {
      // uncomment below and update the code to test the property repo
      //var instance = new VertexAiApi.LearningGenaiRecitationDocAttribution();
      //expect(instance).to.be();
    });

    it('should have the property url (base name: "url")', function() {
      // uncomment below and update the code to test the property url
      //var instance = new VertexAiApi.LearningGenaiRecitationDocAttribution();
      //expect(instance).to.be();
    });

    it('should have the property volumeId (base name: "volumeId")', function() {
      // uncomment below and update the code to test the property volumeId
      //var instance = new VertexAiApi.LearningGenaiRecitationDocAttribution();
      //expect(instance).to.be();
    });

    it('should have the property wikipediaArticleTitle (base name: "wikipediaArticleTitle")', function() {
      // uncomment below and update the code to test the property wikipediaArticleTitle
      //var instance = new VertexAiApi.LearningGenaiRecitationDocAttribution();
      //expect(instance).to.be();
    });

    it('should have the property youtubeVideoId (base name: "youtubeVideoId")', function() {
      // uncomment below and update the code to test the property youtubeVideoId
      //var instance = new VertexAiApi.LearningGenaiRecitationDocAttribution();
      //expect(instance).to.be();
    });

  });

}));
