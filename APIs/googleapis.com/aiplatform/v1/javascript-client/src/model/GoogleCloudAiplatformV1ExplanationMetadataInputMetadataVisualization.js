/**
 * Vertex AI API
 * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The GoogleCloudAiplatformV1ExplanationMetadataInputMetadataVisualization model module.
 * @module model/GoogleCloudAiplatformV1ExplanationMetadataInputMetadataVisualization
 * @version v1
 */
class GoogleCloudAiplatformV1ExplanationMetadataInputMetadataVisualization {
    /**
     * Constructs a new <code>GoogleCloudAiplatformV1ExplanationMetadataInputMetadataVisualization</code>.
     * Visualization configurations for image explanation.
     * @alias module:model/GoogleCloudAiplatformV1ExplanationMetadataInputMetadataVisualization
     */
    constructor() { 
        
        GoogleCloudAiplatformV1ExplanationMetadataInputMetadataVisualization.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleCloudAiplatformV1ExplanationMetadataInputMetadataVisualization</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleCloudAiplatformV1ExplanationMetadataInputMetadataVisualization} obj Optional instance to populate.
     * @return {module:model/GoogleCloudAiplatformV1ExplanationMetadataInputMetadataVisualization} The populated <code>GoogleCloudAiplatformV1ExplanationMetadataInputMetadataVisualization</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleCloudAiplatformV1ExplanationMetadataInputMetadataVisualization();

            if (data.hasOwnProperty('clipPercentLowerbound')) {
                obj['clipPercentLowerbound'] = ApiClient.convertToType(data['clipPercentLowerbound'], 'Number');
            }
            if (data.hasOwnProperty('clipPercentUpperbound')) {
                obj['clipPercentUpperbound'] = ApiClient.convertToType(data['clipPercentUpperbound'], 'Number');
            }
            if (data.hasOwnProperty('colorMap')) {
                obj['colorMap'] = ApiClient.convertToType(data['colorMap'], 'String');
            }
            if (data.hasOwnProperty('overlayType')) {
                obj['overlayType'] = ApiClient.convertToType(data['overlayType'], 'String');
            }
            if (data.hasOwnProperty('polarity')) {
                obj['polarity'] = ApiClient.convertToType(data['polarity'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleCloudAiplatformV1ExplanationMetadataInputMetadataVisualization</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleCloudAiplatformV1ExplanationMetadataInputMetadataVisualization</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['colorMap'] && !(typeof data['colorMap'] === 'string' || data['colorMap'] instanceof String)) {
            throw new Error("Expected the field `colorMap` to be a primitive type in the JSON string but got " + data['colorMap']);
        }
        // ensure the json data is a string
        if (data['overlayType'] && !(typeof data['overlayType'] === 'string' || data['overlayType'] instanceof String)) {
            throw new Error("Expected the field `overlayType` to be a primitive type in the JSON string but got " + data['overlayType']);
        }
        // ensure the json data is a string
        if (data['polarity'] && !(typeof data['polarity'] === 'string' || data['polarity'] instanceof String)) {
            throw new Error("Expected the field `polarity` to be a primitive type in the JSON string but got " + data['polarity']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * Excludes attributions below the specified percentile, from the highlighted areas. Defaults to 62.
 * @member {Number} clipPercentLowerbound
 */
GoogleCloudAiplatformV1ExplanationMetadataInputMetadataVisualization.prototype['clipPercentLowerbound'] = undefined;

/**
 * Excludes attributions above the specified percentile from the highlighted areas. Using the clip_percent_upperbound and clip_percent_lowerbound together can be useful for filtering out noise and making it easier to see areas of strong attribution. Defaults to 99.9.
 * @member {Number} clipPercentUpperbound
 */
GoogleCloudAiplatformV1ExplanationMetadataInputMetadataVisualization.prototype['clipPercentUpperbound'] = undefined;

/**
 * The color scheme used for the highlighted areas. Defaults to PINK_GREEN for Integrated Gradients attribution, which shows positive attributions in green and negative in pink. Defaults to VIRIDIS for XRAI attribution, which highlights the most influential regions in yellow and the least influential in blue.
 * @member {module:model/GoogleCloudAiplatformV1ExplanationMetadataInputMetadataVisualization.ColorMapEnum} colorMap
 */
GoogleCloudAiplatformV1ExplanationMetadataInputMetadataVisualization.prototype['colorMap'] = undefined;

/**
 * How the original image is displayed in the visualization. Adjusting the overlay can help increase visual clarity if the original image makes it difficult to view the visualization. Defaults to NONE.
 * @member {module:model/GoogleCloudAiplatformV1ExplanationMetadataInputMetadataVisualization.OverlayTypeEnum} overlayType
 */
GoogleCloudAiplatformV1ExplanationMetadataInputMetadataVisualization.prototype['overlayType'] = undefined;

/**
 * Whether to only highlight pixels with positive contributions, negative or both. Defaults to POSITIVE.
 * @member {module:model/GoogleCloudAiplatformV1ExplanationMetadataInputMetadataVisualization.PolarityEnum} polarity
 */
GoogleCloudAiplatformV1ExplanationMetadataInputMetadataVisualization.prototype['polarity'] = undefined;

/**
 * Type of the image visualization. Only applicable to Integrated Gradients attribution. OUTLINES shows regions of attribution, while PIXELS shows per-pixel attribution. Defaults to OUTLINES.
 * @member {module:model/GoogleCloudAiplatformV1ExplanationMetadataInputMetadataVisualization.TypeEnum} type
 */
GoogleCloudAiplatformV1ExplanationMetadataInputMetadataVisualization.prototype['type'] = undefined;





/**
 * Allowed values for the <code>colorMap</code> property.
 * @enum {String}
 * @readonly
 */
GoogleCloudAiplatformV1ExplanationMetadataInputMetadataVisualization['ColorMapEnum'] = {

    /**
     * value: "COLOR_MAP_UNSPECIFIED"
     * @const
     */
    "COLOR_MAP_UNSPECIFIED": "COLOR_MAP_UNSPECIFIED",

    /**
     * value: "PINK_GREEN"
     * @const
     */
    "PINK_GREEN": "PINK_GREEN",

    /**
     * value: "VIRIDIS"
     * @const
     */
    "VIRIDIS": "VIRIDIS",

    /**
     * value: "RED"
     * @const
     */
    "RED": "RED",

    /**
     * value: "GREEN"
     * @const
     */
    "GREEN": "GREEN",

    /**
     * value: "RED_GREEN"
     * @const
     */
    "RED_GREEN": "RED_GREEN",

    /**
     * value: "PINK_WHITE_GREEN"
     * @const
     */
    "PINK_WHITE_GREEN": "PINK_WHITE_GREEN"
};


/**
 * Allowed values for the <code>overlayType</code> property.
 * @enum {String}
 * @readonly
 */
GoogleCloudAiplatformV1ExplanationMetadataInputMetadataVisualization['OverlayTypeEnum'] = {

    /**
     * value: "OVERLAY_TYPE_UNSPECIFIED"
     * @const
     */
    "OVERLAY_TYPE_UNSPECIFIED": "OVERLAY_TYPE_UNSPECIFIED",

    /**
     * value: "NONE"
     * @const
     */
    "NONE": "NONE",

    /**
     * value: "ORIGINAL"
     * @const
     */
    "ORIGINAL": "ORIGINAL",

    /**
     * value: "GRAYSCALE"
     * @const
     */
    "GRAYSCALE": "GRAYSCALE",

    /**
     * value: "MASK_BLACK"
     * @const
     */
    "MASK_BLACK": "MASK_BLACK"
};


/**
 * Allowed values for the <code>polarity</code> property.
 * @enum {String}
 * @readonly
 */
GoogleCloudAiplatformV1ExplanationMetadataInputMetadataVisualization['PolarityEnum'] = {

    /**
     * value: "POLARITY_UNSPECIFIED"
     * @const
     */
    "POLARITY_UNSPECIFIED": "POLARITY_UNSPECIFIED",

    /**
     * value: "POSITIVE"
     * @const
     */
    "POSITIVE": "POSITIVE",

    /**
     * value: "NEGATIVE"
     * @const
     */
    "NEGATIVE": "NEGATIVE",

    /**
     * value: "BOTH"
     * @const
     */
    "BOTH": "BOTH"
};


/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
GoogleCloudAiplatformV1ExplanationMetadataInputMetadataVisualization['TypeEnum'] = {

    /**
     * value: "TYPE_UNSPECIFIED"
     * @const
     */
    "TYPE_UNSPECIFIED": "TYPE_UNSPECIFIED",

    /**
     * value: "PIXELS"
     * @const
     */
    "PIXELS": "PIXELS",

    /**
     * value: "OUTLINES"
     * @const
     */
    "OUTLINES": "OUTLINES"
};



export default GoogleCloudAiplatformV1ExplanationMetadataInputMetadataVisualization;

