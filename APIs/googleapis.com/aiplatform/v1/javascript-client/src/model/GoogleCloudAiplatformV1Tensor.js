/**
 * Vertex AI API
 * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The GoogleCloudAiplatformV1Tensor model module.
 * @module model/GoogleCloudAiplatformV1Tensor
 * @version v1
 */
class GoogleCloudAiplatformV1Tensor {
    /**
     * Constructs a new <code>GoogleCloudAiplatformV1Tensor</code>.
     * A tensor value type.
     * @alias module:model/GoogleCloudAiplatformV1Tensor
     */
    constructor() { 
        
        GoogleCloudAiplatformV1Tensor.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleCloudAiplatformV1Tensor</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleCloudAiplatformV1Tensor} obj Optional instance to populate.
     * @return {module:model/GoogleCloudAiplatformV1Tensor} The populated <code>GoogleCloudAiplatformV1Tensor</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleCloudAiplatformV1Tensor();

            if (data.hasOwnProperty('boolVal')) {
                obj['boolVal'] = ApiClient.convertToType(data['boolVal'], ['Boolean']);
            }
            if (data.hasOwnProperty('bytesVal')) {
                obj['bytesVal'] = ApiClient.convertToType(data['bytesVal'], ['Blob']);
            }
            if (data.hasOwnProperty('doubleVal')) {
                obj['doubleVal'] = ApiClient.convertToType(data['doubleVal'], ['Number']);
            }
            if (data.hasOwnProperty('dtype')) {
                obj['dtype'] = ApiClient.convertToType(data['dtype'], 'String');
            }
            if (data.hasOwnProperty('floatVal')) {
                obj['floatVal'] = ApiClient.convertToType(data['floatVal'], ['Number']);
            }
            if (data.hasOwnProperty('int64Val')) {
                obj['int64Val'] = ApiClient.convertToType(data['int64Val'], ['String']);
            }
            if (data.hasOwnProperty('intVal')) {
                obj['intVal'] = ApiClient.convertToType(data['intVal'], ['Number']);
            }
            if (data.hasOwnProperty('listVal')) {
                obj['listVal'] = ApiClient.convertToType(data['listVal'], [GoogleCloudAiplatformV1Tensor]);
            }
            if (data.hasOwnProperty('shape')) {
                obj['shape'] = ApiClient.convertToType(data['shape'], ['String']);
            }
            if (data.hasOwnProperty('stringVal')) {
                obj['stringVal'] = ApiClient.convertToType(data['stringVal'], ['String']);
            }
            if (data.hasOwnProperty('structVal')) {
                obj['structVal'] = ApiClient.convertToType(data['structVal'], {'String': GoogleCloudAiplatformV1Tensor});
            }
            if (data.hasOwnProperty('tensorVal')) {
                obj['tensorVal'] = ApiClient.convertToType(data['tensorVal'], 'Blob');
            }
            if (data.hasOwnProperty('uint64Val')) {
                obj['uint64Val'] = ApiClient.convertToType(data['uint64Val'], ['String']);
            }
            if (data.hasOwnProperty('uintVal')) {
                obj['uintVal'] = ApiClient.convertToType(data['uintVal'], ['Number']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleCloudAiplatformV1Tensor</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleCloudAiplatformV1Tensor</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['boolVal'])) {
            throw new Error("Expected the field `boolVal` to be an array in the JSON data but got " + data['boolVal']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['bytesVal'])) {
            throw new Error("Expected the field `bytesVal` to be an array in the JSON data but got " + data['bytesVal']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['doubleVal'])) {
            throw new Error("Expected the field `doubleVal` to be an array in the JSON data but got " + data['doubleVal']);
        }
        // ensure the json data is a string
        if (data['dtype'] && !(typeof data['dtype'] === 'string' || data['dtype'] instanceof String)) {
            throw new Error("Expected the field `dtype` to be a primitive type in the JSON string but got " + data['dtype']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['floatVal'])) {
            throw new Error("Expected the field `floatVal` to be an array in the JSON data but got " + data['floatVal']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['int64Val'])) {
            throw new Error("Expected the field `int64Val` to be an array in the JSON data but got " + data['int64Val']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['intVal'])) {
            throw new Error("Expected the field `intVal` to be an array in the JSON data but got " + data['intVal']);
        }
        if (data['listVal']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['listVal'])) {
                throw new Error("Expected the field `listVal` to be an array in the JSON data but got " + data['listVal']);
            }
            // validate the optional field `listVal` (array)
            for (const item of data['listVal']) {
                GoogleCloudAiplatformV1Tensor.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['shape'])) {
            throw new Error("Expected the field `shape` to be an array in the JSON data but got " + data['shape']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['stringVal'])) {
            throw new Error("Expected the field `stringVal` to be an array in the JSON data but got " + data['stringVal']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['uint64Val'])) {
            throw new Error("Expected the field `uint64Val` to be an array in the JSON data but got " + data['uint64Val']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['uintVal'])) {
            throw new Error("Expected the field `uintVal` to be an array in the JSON data but got " + data['uintVal']);
        }

        return true;
    }


}



/**
 * Type specific representations that make it easy to create tensor protos in all languages. Only the representation corresponding to \"dtype\" can be set. The values hold the flattened representation of the tensor in row major order. BOOL
 * @member {Array.<Boolean>} boolVal
 */
GoogleCloudAiplatformV1Tensor.prototype['boolVal'] = undefined;

/**
 * STRING
 * @member {Array.<Blob>} bytesVal
 */
GoogleCloudAiplatformV1Tensor.prototype['bytesVal'] = undefined;

/**
 * DOUBLE
 * @member {Array.<Number>} doubleVal
 */
GoogleCloudAiplatformV1Tensor.prototype['doubleVal'] = undefined;

/**
 * The data type of tensor.
 * @member {module:model/GoogleCloudAiplatformV1Tensor.DtypeEnum} dtype
 */
GoogleCloudAiplatformV1Tensor.prototype['dtype'] = undefined;

/**
 * FLOAT
 * @member {Array.<Number>} floatVal
 */
GoogleCloudAiplatformV1Tensor.prototype['floatVal'] = undefined;

/**
 * INT64
 * @member {Array.<String>} int64Val
 */
GoogleCloudAiplatformV1Tensor.prototype['int64Val'] = undefined;

/**
 * INT_8 INT_16 INT_32
 * @member {Array.<Number>} intVal
 */
GoogleCloudAiplatformV1Tensor.prototype['intVal'] = undefined;

/**
 * A list of tensor values.
 * @member {Array.<module:model/GoogleCloudAiplatformV1Tensor>} listVal
 */
GoogleCloudAiplatformV1Tensor.prototype['listVal'] = undefined;

/**
 * Shape of the tensor.
 * @member {Array.<String>} shape
 */
GoogleCloudAiplatformV1Tensor.prototype['shape'] = undefined;

/**
 * STRING
 * @member {Array.<String>} stringVal
 */
GoogleCloudAiplatformV1Tensor.prototype['stringVal'] = undefined;

/**
 * A map of string to tensor.
 * @member {Object.<String, module:model/GoogleCloudAiplatformV1Tensor>} structVal
 */
GoogleCloudAiplatformV1Tensor.prototype['structVal'] = undefined;

/**
 * Serialized raw tensor content.
 * @member {Blob} tensorVal
 */
GoogleCloudAiplatformV1Tensor.prototype['tensorVal'] = undefined;

/**
 * UINT64
 * @member {Array.<String>} uint64Val
 */
GoogleCloudAiplatformV1Tensor.prototype['uint64Val'] = undefined;

/**
 * UINT8 UINT16 UINT32
 * @member {Array.<Number>} uintVal
 */
GoogleCloudAiplatformV1Tensor.prototype['uintVal'] = undefined;





/**
 * Allowed values for the <code>dtype</code> property.
 * @enum {String}
 * @readonly
 */
GoogleCloudAiplatformV1Tensor['DtypeEnum'] = {

    /**
     * value: "DATA_TYPE_UNSPECIFIED"
     * @const
     */
    "DATA_TYPE_UNSPECIFIED": "DATA_TYPE_UNSPECIFIED",

    /**
     * value: "BOOL"
     * @const
     */
    "BOOL": "BOOL",

    /**
     * value: "STRING"
     * @const
     */
    "STRING": "STRING",

    /**
     * value: "FLOAT"
     * @const
     */
    "FLOAT": "FLOAT",

    /**
     * value: "DOUBLE"
     * @const
     */
    "DOUBLE": "DOUBLE",

    /**
     * value: "INT8"
     * @const
     */
    "INT8": "INT8",

    /**
     * value: "INT16"
     * @const
     */
    "INT16": "INT16",

    /**
     * value: "INT32"
     * @const
     */
    "INT32": "INT32",

    /**
     * value: "INT64"
     * @const
     */
    "INT64": "INT64",

    /**
     * value: "UINT8"
     * @const
     */
    "UINT8": "UINT8",

    /**
     * value: "UINT16"
     * @const
     */
    "UINT16": "UINT16",

    /**
     * value: "UINT32"
     * @const
     */
    "UINT32": "UINT32",

    /**
     * value: "UINT64"
     * @const
     */
    "UINT64": "UINT64"
};



export default GoogleCloudAiplatformV1Tensor;

