/**
 * Vertex AI API
 * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GoogleCloudAiplatformV1Attribution from './GoogleCloudAiplatformV1Attribution';
import GoogleCloudAiplatformV1Neighbor from './GoogleCloudAiplatformV1Neighbor';

/**
 * The GoogleCloudAiplatformV1Explanation model module.
 * @module model/GoogleCloudAiplatformV1Explanation
 * @version v1
 */
class GoogleCloudAiplatformV1Explanation {
    /**
     * Constructs a new <code>GoogleCloudAiplatformV1Explanation</code>.
     * Explanation of a prediction (provided in PredictResponse.predictions) produced by the Model on a given instance.
     * @alias module:model/GoogleCloudAiplatformV1Explanation
     */
    constructor() { 
        
        GoogleCloudAiplatformV1Explanation.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleCloudAiplatformV1Explanation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleCloudAiplatformV1Explanation} obj Optional instance to populate.
     * @return {module:model/GoogleCloudAiplatformV1Explanation} The populated <code>GoogleCloudAiplatformV1Explanation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleCloudAiplatformV1Explanation();

            if (data.hasOwnProperty('attributions')) {
                obj['attributions'] = ApiClient.convertToType(data['attributions'], [GoogleCloudAiplatformV1Attribution]);
            }
            if (data.hasOwnProperty('neighbors')) {
                obj['neighbors'] = ApiClient.convertToType(data['neighbors'], [GoogleCloudAiplatformV1Neighbor]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleCloudAiplatformV1Explanation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleCloudAiplatformV1Explanation</code>.
     */
    static validateJSON(data) {
        if (data['attributions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['attributions'])) {
                throw new Error("Expected the field `attributions` to be an array in the JSON data but got " + data['attributions']);
            }
            // validate the optional field `attributions` (array)
            for (const item of data['attributions']) {
                GoogleCloudAiplatformV1Attribution.validateJSON(item);
            };
        }
        if (data['neighbors']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['neighbors'])) {
                throw new Error("Expected the field `neighbors` to be an array in the JSON data but got " + data['neighbors']);
            }
            // validate the optional field `neighbors` (array)
            for (const item of data['neighbors']) {
                GoogleCloudAiplatformV1Neighbor.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Output only. Feature attributions grouped by predicted outputs. For Models that predict only one output, such as regression Models that predict only one score, there is only one attibution that explains the predicted output. For Models that predict multiple outputs, such as multiclass Models that predict multiple classes, each element explains one specific item. Attribution.output_index can be used to identify which output this attribution is explaining. By default, we provide Shapley values for the predicted class. However, you can configure the explanation request to generate Shapley values for any other classes too. For example, if a model predicts a probability of `0.4` for approving a loan application, the model's decision is to reject the application since `p(reject) = 0.6 > p(approve) = 0.4`, and the default Shapley values would be computed for rejection decision and not approval, even though the latter might be the positive class. If users set ExplanationParameters.top_k, the attributions are sorted by instance_output_value in descending order. If ExplanationParameters.output_indices is specified, the attributions are stored by Attribution.output_index in the same order as they appear in the output_indices.
 * @member {Array.<module:model/GoogleCloudAiplatformV1Attribution>} attributions
 */
GoogleCloudAiplatformV1Explanation.prototype['attributions'] = undefined;

/**
 * Output only. List of the nearest neighbors for example-based explanations. For models deployed with the examples explanations feature enabled, the attributions field is empty and instead the neighbors field is populated.
 * @member {Array.<module:model/GoogleCloudAiplatformV1Neighbor>} neighbors
 */
GoogleCloudAiplatformV1Explanation.prototype['neighbors'] = undefined;






export default GoogleCloudAiplatformV1Explanation;

