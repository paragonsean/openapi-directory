/**
 * Vertex AI API
 * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GoogleCloudAiplatformV1SchemaPredictParamsGroundingConfig from './GoogleCloudAiplatformV1SchemaPredictParamsGroundingConfig';

/**
 * The GoogleCloudAiplatformV1SchemaTextPromptDatasetMetadata model module.
 * @module model/GoogleCloudAiplatformV1SchemaTextPromptDatasetMetadata
 * @version v1
 */
class GoogleCloudAiplatformV1SchemaTextPromptDatasetMetadata {
    /**
     * Constructs a new <code>GoogleCloudAiplatformV1SchemaTextPromptDatasetMetadata</code>.
     * The metadata of Datasets that contain Text Prompt data.
     * @alias module:model/GoogleCloudAiplatformV1SchemaTextPromptDatasetMetadata
     */
    constructor() { 
        
        GoogleCloudAiplatformV1SchemaTextPromptDatasetMetadata.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleCloudAiplatformV1SchemaTextPromptDatasetMetadata</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleCloudAiplatformV1SchemaTextPromptDatasetMetadata} obj Optional instance to populate.
     * @return {module:model/GoogleCloudAiplatformV1SchemaTextPromptDatasetMetadata} The populated <code>GoogleCloudAiplatformV1SchemaTextPromptDatasetMetadata</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleCloudAiplatformV1SchemaTextPromptDatasetMetadata();

            if (data.hasOwnProperty('candidateCount')) {
                obj['candidateCount'] = ApiClient.convertToType(data['candidateCount'], 'String');
            }
            if (data.hasOwnProperty('gcsUri')) {
                obj['gcsUri'] = ApiClient.convertToType(data['gcsUri'], 'String');
            }
            if (data.hasOwnProperty('groundingConfig')) {
                obj['groundingConfig'] = GoogleCloudAiplatformV1SchemaPredictParamsGroundingConfig.constructFromObject(data['groundingConfig']);
            }
            if (data.hasOwnProperty('maxOutputTokens')) {
                obj['maxOutputTokens'] = ApiClient.convertToType(data['maxOutputTokens'], 'String');
            }
            if (data.hasOwnProperty('note')) {
                obj['note'] = ApiClient.convertToType(data['note'], 'String');
            }
            if (data.hasOwnProperty('promptType')) {
                obj['promptType'] = ApiClient.convertToType(data['promptType'], 'String');
            }
            if (data.hasOwnProperty('stopSequences')) {
                obj['stopSequences'] = ApiClient.convertToType(data['stopSequences'], ['String']);
            }
            if (data.hasOwnProperty('temperature')) {
                obj['temperature'] = ApiClient.convertToType(data['temperature'], 'Number');
            }
            if (data.hasOwnProperty('text')) {
                obj['text'] = ApiClient.convertToType(data['text'], 'String');
            }
            if (data.hasOwnProperty('topK')) {
                obj['topK'] = ApiClient.convertToType(data['topK'], 'String');
            }
            if (data.hasOwnProperty('topP')) {
                obj['topP'] = ApiClient.convertToType(data['topP'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleCloudAiplatformV1SchemaTextPromptDatasetMetadata</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleCloudAiplatformV1SchemaTextPromptDatasetMetadata</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['candidateCount'] && !(typeof data['candidateCount'] === 'string' || data['candidateCount'] instanceof String)) {
            throw new Error("Expected the field `candidateCount` to be a primitive type in the JSON string but got " + data['candidateCount']);
        }
        // ensure the json data is a string
        if (data['gcsUri'] && !(typeof data['gcsUri'] === 'string' || data['gcsUri'] instanceof String)) {
            throw new Error("Expected the field `gcsUri` to be a primitive type in the JSON string but got " + data['gcsUri']);
        }
        // validate the optional field `groundingConfig`
        if (data['groundingConfig']) { // data not null
          GoogleCloudAiplatformV1SchemaPredictParamsGroundingConfig.validateJSON(data['groundingConfig']);
        }
        // ensure the json data is a string
        if (data['maxOutputTokens'] && !(typeof data['maxOutputTokens'] === 'string' || data['maxOutputTokens'] instanceof String)) {
            throw new Error("Expected the field `maxOutputTokens` to be a primitive type in the JSON string but got " + data['maxOutputTokens']);
        }
        // ensure the json data is a string
        if (data['note'] && !(typeof data['note'] === 'string' || data['note'] instanceof String)) {
            throw new Error("Expected the field `note` to be a primitive type in the JSON string but got " + data['note']);
        }
        // ensure the json data is a string
        if (data['promptType'] && !(typeof data['promptType'] === 'string' || data['promptType'] instanceof String)) {
            throw new Error("Expected the field `promptType` to be a primitive type in the JSON string but got " + data['promptType']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['stopSequences'])) {
            throw new Error("Expected the field `stopSequences` to be an array in the JSON data but got " + data['stopSequences']);
        }
        // ensure the json data is a string
        if (data['text'] && !(typeof data['text'] === 'string' || data['text'] instanceof String)) {
            throw new Error("Expected the field `text` to be a primitive type in the JSON string but got " + data['text']);
        }
        // ensure the json data is a string
        if (data['topK'] && !(typeof data['topK'] === 'string' || data['topK'] instanceof String)) {
            throw new Error("Expected the field `topK` to be a primitive type in the JSON string but got " + data['topK']);
        }

        return true;
    }


}



/**
 * Number of candidates.
 * @member {String} candidateCount
 */
GoogleCloudAiplatformV1SchemaTextPromptDatasetMetadata.prototype['candidateCount'] = undefined;

/**
 * The Google Cloud Storage URI that stores the prompt data.
 * @member {String} gcsUri
 */
GoogleCloudAiplatformV1SchemaTextPromptDatasetMetadata.prototype['gcsUri'] = undefined;

/**
 * @member {module:model/GoogleCloudAiplatformV1SchemaPredictParamsGroundingConfig} groundingConfig
 */
GoogleCloudAiplatformV1SchemaTextPromptDatasetMetadata.prototype['groundingConfig'] = undefined;

/**
 * Value of the maximum number of tokens generated set when the dataset was saved.
 * @member {String} maxOutputTokens
 */
GoogleCloudAiplatformV1SchemaTextPromptDatasetMetadata.prototype['maxOutputTokens'] = undefined;

/**
 * User-created prompt note. Note size limit is 2KB.
 * @member {String} note
 */
GoogleCloudAiplatformV1SchemaTextPromptDatasetMetadata.prototype['note'] = undefined;

/**
 * Type of the prompt dataset.
 * @member {String} promptType
 */
GoogleCloudAiplatformV1SchemaTextPromptDatasetMetadata.prototype['promptType'] = undefined;

/**
 * Customized stop sequences.
 * @member {Array.<String>} stopSequences
 */
GoogleCloudAiplatformV1SchemaTextPromptDatasetMetadata.prototype['stopSequences'] = undefined;

/**
 * Temperature value used for sampling set when the dataset was saved. This value is used to tune the degree of randomness.
 * @member {Number} temperature
 */
GoogleCloudAiplatformV1SchemaTextPromptDatasetMetadata.prototype['temperature'] = undefined;

/**
 * The content of the prompt dataset.
 * @member {String} text
 */
GoogleCloudAiplatformV1SchemaTextPromptDatasetMetadata.prototype['text'] = undefined;

/**
 * Top K value set when the dataset was saved. This value determines how many candidates with highest probability from the vocab would be selected for each decoding step.
 * @member {String} topK
 */
GoogleCloudAiplatformV1SchemaTextPromptDatasetMetadata.prototype['topK'] = undefined;

/**
 * Top P value set when the dataset was saved. Given topK tokens for decoding, top candidates will be selected until the sum of their probabilities is topP.
 * @member {Number} topP
 */
GoogleCloudAiplatformV1SchemaTextPromptDatasetMetadata.prototype['topP'] = undefined;






export default GoogleCloudAiplatformV1SchemaTextPromptDatasetMetadata;

