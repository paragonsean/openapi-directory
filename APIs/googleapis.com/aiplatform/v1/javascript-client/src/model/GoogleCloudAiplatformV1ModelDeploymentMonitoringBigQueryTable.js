/**
 * Vertex AI API
 * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The GoogleCloudAiplatformV1ModelDeploymentMonitoringBigQueryTable model module.
 * @module model/GoogleCloudAiplatformV1ModelDeploymentMonitoringBigQueryTable
 * @version v1
 */
class GoogleCloudAiplatformV1ModelDeploymentMonitoringBigQueryTable {
    /**
     * Constructs a new <code>GoogleCloudAiplatformV1ModelDeploymentMonitoringBigQueryTable</code>.
     * ModelDeploymentMonitoringBigQueryTable specifies the BigQuery table name as well as some information of the logs stored in this table.
     * @alias module:model/GoogleCloudAiplatformV1ModelDeploymentMonitoringBigQueryTable
     */
    constructor() { 
        
        GoogleCloudAiplatformV1ModelDeploymentMonitoringBigQueryTable.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleCloudAiplatformV1ModelDeploymentMonitoringBigQueryTable</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleCloudAiplatformV1ModelDeploymentMonitoringBigQueryTable} obj Optional instance to populate.
     * @return {module:model/GoogleCloudAiplatformV1ModelDeploymentMonitoringBigQueryTable} The populated <code>GoogleCloudAiplatformV1ModelDeploymentMonitoringBigQueryTable</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleCloudAiplatformV1ModelDeploymentMonitoringBigQueryTable();

            if (data.hasOwnProperty('bigqueryTablePath')) {
                obj['bigqueryTablePath'] = ApiClient.convertToType(data['bigqueryTablePath'], 'String');
            }
            if (data.hasOwnProperty('logSource')) {
                obj['logSource'] = ApiClient.convertToType(data['logSource'], 'String');
            }
            if (data.hasOwnProperty('logType')) {
                obj['logType'] = ApiClient.convertToType(data['logType'], 'String');
            }
            if (data.hasOwnProperty('requestResponseLoggingSchemaVersion')) {
                obj['requestResponseLoggingSchemaVersion'] = ApiClient.convertToType(data['requestResponseLoggingSchemaVersion'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleCloudAiplatformV1ModelDeploymentMonitoringBigQueryTable</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleCloudAiplatformV1ModelDeploymentMonitoringBigQueryTable</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['bigqueryTablePath'] && !(typeof data['bigqueryTablePath'] === 'string' || data['bigqueryTablePath'] instanceof String)) {
            throw new Error("Expected the field `bigqueryTablePath` to be a primitive type in the JSON string but got " + data['bigqueryTablePath']);
        }
        // ensure the json data is a string
        if (data['logSource'] && !(typeof data['logSource'] === 'string' || data['logSource'] instanceof String)) {
            throw new Error("Expected the field `logSource` to be a primitive type in the JSON string but got " + data['logSource']);
        }
        // ensure the json data is a string
        if (data['logType'] && !(typeof data['logType'] === 'string' || data['logType'] instanceof String)) {
            throw new Error("Expected the field `logType` to be a primitive type in the JSON string but got " + data['logType']);
        }
        // ensure the json data is a string
        if (data['requestResponseLoggingSchemaVersion'] && !(typeof data['requestResponseLoggingSchemaVersion'] === 'string' || data['requestResponseLoggingSchemaVersion'] instanceof String)) {
            throw new Error("Expected the field `requestResponseLoggingSchemaVersion` to be a primitive type in the JSON string but got " + data['requestResponseLoggingSchemaVersion']);
        }

        return true;
    }


}



/**
 * The created BigQuery table to store logs. Customer could do their own query & analysis. Format: `bq://.model_deployment_monitoring_._`
 * @member {String} bigqueryTablePath
 */
GoogleCloudAiplatformV1ModelDeploymentMonitoringBigQueryTable.prototype['bigqueryTablePath'] = undefined;

/**
 * The source of log.
 * @member {module:model/GoogleCloudAiplatformV1ModelDeploymentMonitoringBigQueryTable.LogSourceEnum} logSource
 */
GoogleCloudAiplatformV1ModelDeploymentMonitoringBigQueryTable.prototype['logSource'] = undefined;

/**
 * The type of log.
 * @member {module:model/GoogleCloudAiplatformV1ModelDeploymentMonitoringBigQueryTable.LogTypeEnum} logType
 */
GoogleCloudAiplatformV1ModelDeploymentMonitoringBigQueryTable.prototype['logType'] = undefined;

/**
 * Output only. The schema version of the request/response logging BigQuery table. Default to v1 if unset.
 * @member {String} requestResponseLoggingSchemaVersion
 */
GoogleCloudAiplatformV1ModelDeploymentMonitoringBigQueryTable.prototype['requestResponseLoggingSchemaVersion'] = undefined;





/**
 * Allowed values for the <code>logSource</code> property.
 * @enum {String}
 * @readonly
 */
GoogleCloudAiplatformV1ModelDeploymentMonitoringBigQueryTable['LogSourceEnum'] = {

    /**
     * value: "LOG_SOURCE_UNSPECIFIED"
     * @const
     */
    "LOG_SOURCE_UNSPECIFIED": "LOG_SOURCE_UNSPECIFIED",

    /**
     * value: "TRAINING"
     * @const
     */
    "TRAINING": "TRAINING",

    /**
     * value: "SERVING"
     * @const
     */
    "SERVING": "SERVING"
};


/**
 * Allowed values for the <code>logType</code> property.
 * @enum {String}
 * @readonly
 */
GoogleCloudAiplatformV1ModelDeploymentMonitoringBigQueryTable['LogTypeEnum'] = {

    /**
     * value: "LOG_TYPE_UNSPECIFIED"
     * @const
     */
    "LOG_TYPE_UNSPECIFIED": "LOG_TYPE_UNSPECIFIED",

    /**
     * value: "PREDICT"
     * @const
     */
    "PREDICT": "PREDICT",

    /**
     * value: "EXPLAIN"
     * @const
     */
    "EXPLAIN": "EXPLAIN"
};



export default GoogleCloudAiplatformV1ModelDeploymentMonitoringBigQueryTable;

