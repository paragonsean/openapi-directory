/**
 * Vertex AI API
 * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GoogleCloudAiplatformV1ErrorAnalysisAnnotation from './GoogleCloudAiplatformV1ErrorAnalysisAnnotation';
import GoogleCloudAiplatformV1EvaluatedAnnotationExplanation from './GoogleCloudAiplatformV1EvaluatedAnnotationExplanation';

/**
 * The GoogleCloudAiplatformV1EvaluatedAnnotation model module.
 * @module model/GoogleCloudAiplatformV1EvaluatedAnnotation
 * @version v1
 */
class GoogleCloudAiplatformV1EvaluatedAnnotation {
    /**
     * Constructs a new <code>GoogleCloudAiplatformV1EvaluatedAnnotation</code>.
     * True positive, false positive, or false negative. EvaluatedAnnotation is only available under ModelEvaluationSlice with slice of &#x60;annotationSpec&#x60; dimension.
     * @alias module:model/GoogleCloudAiplatformV1EvaluatedAnnotation
     */
    constructor() { 
        
        GoogleCloudAiplatformV1EvaluatedAnnotation.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleCloudAiplatformV1EvaluatedAnnotation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleCloudAiplatformV1EvaluatedAnnotation} obj Optional instance to populate.
     * @return {module:model/GoogleCloudAiplatformV1EvaluatedAnnotation} The populated <code>GoogleCloudAiplatformV1EvaluatedAnnotation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleCloudAiplatformV1EvaluatedAnnotation();

            if (data.hasOwnProperty('dataItemPayload')) {
                obj['dataItemPayload'] = ApiClient.convertToType(data['dataItemPayload'], Object);
            }
            if (data.hasOwnProperty('errorAnalysisAnnotations')) {
                obj['errorAnalysisAnnotations'] = ApiClient.convertToType(data['errorAnalysisAnnotations'], [GoogleCloudAiplatformV1ErrorAnalysisAnnotation]);
            }
            if (data.hasOwnProperty('evaluatedDataItemViewId')) {
                obj['evaluatedDataItemViewId'] = ApiClient.convertToType(data['evaluatedDataItemViewId'], 'String');
            }
            if (data.hasOwnProperty('explanations')) {
                obj['explanations'] = ApiClient.convertToType(data['explanations'], [GoogleCloudAiplatformV1EvaluatedAnnotationExplanation]);
            }
            if (data.hasOwnProperty('groundTruths')) {
                obj['groundTruths'] = ApiClient.convertToType(data['groundTruths'], [Object]);
            }
            if (data.hasOwnProperty('predictions')) {
                obj['predictions'] = ApiClient.convertToType(data['predictions'], [Object]);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleCloudAiplatformV1EvaluatedAnnotation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleCloudAiplatformV1EvaluatedAnnotation</code>.
     */
    static validateJSON(data) {
        if (data['errorAnalysisAnnotations']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['errorAnalysisAnnotations'])) {
                throw new Error("Expected the field `errorAnalysisAnnotations` to be an array in the JSON data but got " + data['errorAnalysisAnnotations']);
            }
            // validate the optional field `errorAnalysisAnnotations` (array)
            for (const item of data['errorAnalysisAnnotations']) {
                GoogleCloudAiplatformV1ErrorAnalysisAnnotation.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['evaluatedDataItemViewId'] && !(typeof data['evaluatedDataItemViewId'] === 'string' || data['evaluatedDataItemViewId'] instanceof String)) {
            throw new Error("Expected the field `evaluatedDataItemViewId` to be a primitive type in the JSON string but got " + data['evaluatedDataItemViewId']);
        }
        if (data['explanations']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['explanations'])) {
                throw new Error("Expected the field `explanations` to be an array in the JSON data but got " + data['explanations']);
            }
            // validate the optional field `explanations` (array)
            for (const item of data['explanations']) {
                GoogleCloudAiplatformV1EvaluatedAnnotationExplanation.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['groundTruths'])) {
            throw new Error("Expected the field `groundTruths` to be an array in the JSON data but got " + data['groundTruths']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['predictions'])) {
            throw new Error("Expected the field `predictions` to be an array in the JSON data but got " + data['predictions']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * Output only. The data item payload that the Model predicted this EvaluatedAnnotation on.
 * @member {Object} dataItemPayload
 */
GoogleCloudAiplatformV1EvaluatedAnnotation.prototype['dataItemPayload'] = undefined;

/**
 * Annotations of model error analysis results.
 * @member {Array.<module:model/GoogleCloudAiplatformV1ErrorAnalysisAnnotation>} errorAnalysisAnnotations
 */
GoogleCloudAiplatformV1EvaluatedAnnotation.prototype['errorAnalysisAnnotations'] = undefined;

/**
 * Output only. ID of the EvaluatedDataItemView under the same ancestor ModelEvaluation. The EvaluatedDataItemView consists of all ground truths and predictions on data_item_payload.
 * @member {String} evaluatedDataItemViewId
 */
GoogleCloudAiplatformV1EvaluatedAnnotation.prototype['evaluatedDataItemViewId'] = undefined;

/**
 * Explanations of predictions. Each element of the explanations indicates the explanation for one explanation Method. The attributions list in the EvaluatedAnnotationExplanation.explanation object corresponds to the predictions list. For example, the second element in the attributions list explains the second element in the predictions list.
 * @member {Array.<module:model/GoogleCloudAiplatformV1EvaluatedAnnotationExplanation>} explanations
 */
GoogleCloudAiplatformV1EvaluatedAnnotation.prototype['explanations'] = undefined;

/**
 * Output only. The ground truth Annotations, i.e. the Annotations that exist in the test data the Model is evaluated on. For true positive, there is one and only one ground truth annotation, which matches the only prediction in predictions. For false positive, there are zero or more ground truth annotations that are similar to the only prediction in predictions, but not enough for a match. For false negative, there is one and only one ground truth annotation, which doesn't match any predictions created by the model. The schema of the ground truth is stored in ModelEvaluation.annotation_schema_uri
 * @member {Array.<Object>} groundTruths
 */
GoogleCloudAiplatformV1EvaluatedAnnotation.prototype['groundTruths'] = undefined;

/**
 * Output only. The model predicted annotations. For true positive, there is one and only one prediction, which matches the only one ground truth annotation in ground_truths. For false positive, there is one and only one prediction, which doesn't match any ground truth annotation of the corresponding data_item_view_id. For false negative, there are zero or more predictions which are similar to the only ground truth annotation in ground_truths but not enough for a match. The schema of the prediction is stored in ModelEvaluation.annotation_schema_uri
 * @member {Array.<Object>} predictions
 */
GoogleCloudAiplatformV1EvaluatedAnnotation.prototype['predictions'] = undefined;

/**
 * Output only. Type of the EvaluatedAnnotation.
 * @member {module:model/GoogleCloudAiplatformV1EvaluatedAnnotation.TypeEnum} type
 */
GoogleCloudAiplatformV1EvaluatedAnnotation.prototype['type'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
GoogleCloudAiplatformV1EvaluatedAnnotation['TypeEnum'] = {

    /**
     * value: "EVALUATED_ANNOTATION_TYPE_UNSPECIFIED"
     * @const
     */
    "EVALUATED_ANNOTATION_TYPE_UNSPECIFIED": "EVALUATED_ANNOTATION_TYPE_UNSPECIFIED",

    /**
     * value: "TRUE_POSITIVE"
     * @const
     */
    "TRUE_POSITIVE": "TRUE_POSITIVE",

    /**
     * value: "FALSE_POSITIVE"
     * @const
     */
    "FALSE_POSITIVE": "FALSE_POSITIVE",

    /**
     * value: "FALSE_NEGATIVE"
     * @const
     */
    "FALSE_NEGATIVE": "FALSE_NEGATIVE"
};



export default GoogleCloudAiplatformV1EvaluatedAnnotation;

