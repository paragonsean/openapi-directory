/**
 * Vertex AI API
 * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GoogleCloudAiplatformV1DeployedModelRef from './GoogleCloudAiplatformV1DeployedModelRef';
import GoogleCloudAiplatformV1EncryptionSpec from './GoogleCloudAiplatformV1EncryptionSpec';
import GoogleCloudAiplatformV1ExplanationSpec from './GoogleCloudAiplatformV1ExplanationSpec';
import GoogleCloudAiplatformV1ModelContainerSpec from './GoogleCloudAiplatformV1ModelContainerSpec';
import GoogleCloudAiplatformV1ModelDataStats from './GoogleCloudAiplatformV1ModelDataStats';
import GoogleCloudAiplatformV1ModelExportFormat from './GoogleCloudAiplatformV1ModelExportFormat';
import GoogleCloudAiplatformV1ModelOriginalModelInfo from './GoogleCloudAiplatformV1ModelOriginalModelInfo';
import GoogleCloudAiplatformV1ModelSourceInfo from './GoogleCloudAiplatformV1ModelSourceInfo';
import GoogleCloudAiplatformV1PredictSchemata from './GoogleCloudAiplatformV1PredictSchemata';

/**
 * The GoogleCloudAiplatformV1Model model module.
 * @module model/GoogleCloudAiplatformV1Model
 * @version v1
 */
class GoogleCloudAiplatformV1Model {
    /**
     * Constructs a new <code>GoogleCloudAiplatformV1Model</code>.
     * A trained machine learning Model.
     * @alias module:model/GoogleCloudAiplatformV1Model
     */
    constructor() { 
        
        GoogleCloudAiplatformV1Model.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleCloudAiplatformV1Model</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleCloudAiplatformV1Model} obj Optional instance to populate.
     * @return {module:model/GoogleCloudAiplatformV1Model} The populated <code>GoogleCloudAiplatformV1Model</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleCloudAiplatformV1Model();

            if (data.hasOwnProperty('artifactUri')) {
                obj['artifactUri'] = ApiClient.convertToType(data['artifactUri'], 'String');
            }
            if (data.hasOwnProperty('containerSpec')) {
                obj['containerSpec'] = GoogleCloudAiplatformV1ModelContainerSpec.constructFromObject(data['containerSpec']);
            }
            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'String');
            }
            if (data.hasOwnProperty('dataStats')) {
                obj['dataStats'] = GoogleCloudAiplatformV1ModelDataStats.constructFromObject(data['dataStats']);
            }
            if (data.hasOwnProperty('deployedModels')) {
                obj['deployedModels'] = ApiClient.convertToType(data['deployedModels'], [GoogleCloudAiplatformV1DeployedModelRef]);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('encryptionSpec')) {
                obj['encryptionSpec'] = GoogleCloudAiplatformV1EncryptionSpec.constructFromObject(data['encryptionSpec']);
            }
            if (data.hasOwnProperty('etag')) {
                obj['etag'] = ApiClient.convertToType(data['etag'], 'String');
            }
            if (data.hasOwnProperty('explanationSpec')) {
                obj['explanationSpec'] = GoogleCloudAiplatformV1ExplanationSpec.constructFromObject(data['explanationSpec']);
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], {'String': 'String'});
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ApiClient.convertToType(data['metadata'], Object);
            }
            if (data.hasOwnProperty('metadataArtifact')) {
                obj['metadataArtifact'] = ApiClient.convertToType(data['metadataArtifact'], 'String');
            }
            if (data.hasOwnProperty('metadataSchemaUri')) {
                obj['metadataSchemaUri'] = ApiClient.convertToType(data['metadataSchemaUri'], 'String');
            }
            if (data.hasOwnProperty('modelSourceInfo')) {
                obj['modelSourceInfo'] = GoogleCloudAiplatformV1ModelSourceInfo.constructFromObject(data['modelSourceInfo']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('originalModelInfo')) {
                obj['originalModelInfo'] = GoogleCloudAiplatformV1ModelOriginalModelInfo.constructFromObject(data['originalModelInfo']);
            }
            if (data.hasOwnProperty('pipelineJob')) {
                obj['pipelineJob'] = ApiClient.convertToType(data['pipelineJob'], 'String');
            }
            if (data.hasOwnProperty('predictSchemata')) {
                obj['predictSchemata'] = GoogleCloudAiplatformV1PredictSchemata.constructFromObject(data['predictSchemata']);
            }
            if (data.hasOwnProperty('supportedDeploymentResourcesTypes')) {
                obj['supportedDeploymentResourcesTypes'] = ApiClient.convertToType(data['supportedDeploymentResourcesTypes'], ['String']);
            }
            if (data.hasOwnProperty('supportedExportFormats')) {
                obj['supportedExportFormats'] = ApiClient.convertToType(data['supportedExportFormats'], [GoogleCloudAiplatformV1ModelExportFormat]);
            }
            if (data.hasOwnProperty('supportedInputStorageFormats')) {
                obj['supportedInputStorageFormats'] = ApiClient.convertToType(data['supportedInputStorageFormats'], ['String']);
            }
            if (data.hasOwnProperty('supportedOutputStorageFormats')) {
                obj['supportedOutputStorageFormats'] = ApiClient.convertToType(data['supportedOutputStorageFormats'], ['String']);
            }
            if (data.hasOwnProperty('trainingPipeline')) {
                obj['trainingPipeline'] = ApiClient.convertToType(data['trainingPipeline'], 'String');
            }
            if (data.hasOwnProperty('updateTime')) {
                obj['updateTime'] = ApiClient.convertToType(data['updateTime'], 'String');
            }
            if (data.hasOwnProperty('versionAliases')) {
                obj['versionAliases'] = ApiClient.convertToType(data['versionAliases'], ['String']);
            }
            if (data.hasOwnProperty('versionCreateTime')) {
                obj['versionCreateTime'] = ApiClient.convertToType(data['versionCreateTime'], 'String');
            }
            if (data.hasOwnProperty('versionDescription')) {
                obj['versionDescription'] = ApiClient.convertToType(data['versionDescription'], 'String');
            }
            if (data.hasOwnProperty('versionId')) {
                obj['versionId'] = ApiClient.convertToType(data['versionId'], 'String');
            }
            if (data.hasOwnProperty('versionUpdateTime')) {
                obj['versionUpdateTime'] = ApiClient.convertToType(data['versionUpdateTime'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleCloudAiplatformV1Model</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleCloudAiplatformV1Model</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['artifactUri'] && !(typeof data['artifactUri'] === 'string' || data['artifactUri'] instanceof String)) {
            throw new Error("Expected the field `artifactUri` to be a primitive type in the JSON string but got " + data['artifactUri']);
        }
        // validate the optional field `containerSpec`
        if (data['containerSpec']) { // data not null
          GoogleCloudAiplatformV1ModelContainerSpec.validateJSON(data['containerSpec']);
        }
        // ensure the json data is a string
        if (data['createTime'] && !(typeof data['createTime'] === 'string' || data['createTime'] instanceof String)) {
            throw new Error("Expected the field `createTime` to be a primitive type in the JSON string but got " + data['createTime']);
        }
        // validate the optional field `dataStats`
        if (data['dataStats']) { // data not null
          GoogleCloudAiplatformV1ModelDataStats.validateJSON(data['dataStats']);
        }
        if (data['deployedModels']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['deployedModels'])) {
                throw new Error("Expected the field `deployedModels` to be an array in the JSON data but got " + data['deployedModels']);
            }
            // validate the optional field `deployedModels` (array)
            for (const item of data['deployedModels']) {
                GoogleCloudAiplatformV1DeployedModelRef.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // validate the optional field `encryptionSpec`
        if (data['encryptionSpec']) { // data not null
          GoogleCloudAiplatformV1EncryptionSpec.validateJSON(data['encryptionSpec']);
        }
        // ensure the json data is a string
        if (data['etag'] && !(typeof data['etag'] === 'string' || data['etag'] instanceof String)) {
            throw new Error("Expected the field `etag` to be a primitive type in the JSON string but got " + data['etag']);
        }
        // validate the optional field `explanationSpec`
        if (data['explanationSpec']) { // data not null
          GoogleCloudAiplatformV1ExplanationSpec.validateJSON(data['explanationSpec']);
        }
        // ensure the json data is a string
        if (data['metadataArtifact'] && !(typeof data['metadataArtifact'] === 'string' || data['metadataArtifact'] instanceof String)) {
            throw new Error("Expected the field `metadataArtifact` to be a primitive type in the JSON string but got " + data['metadataArtifact']);
        }
        // ensure the json data is a string
        if (data['metadataSchemaUri'] && !(typeof data['metadataSchemaUri'] === 'string' || data['metadataSchemaUri'] instanceof String)) {
            throw new Error("Expected the field `metadataSchemaUri` to be a primitive type in the JSON string but got " + data['metadataSchemaUri']);
        }
        // validate the optional field `modelSourceInfo`
        if (data['modelSourceInfo']) { // data not null
          GoogleCloudAiplatformV1ModelSourceInfo.validateJSON(data['modelSourceInfo']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `originalModelInfo`
        if (data['originalModelInfo']) { // data not null
          GoogleCloudAiplatformV1ModelOriginalModelInfo.validateJSON(data['originalModelInfo']);
        }
        // ensure the json data is a string
        if (data['pipelineJob'] && !(typeof data['pipelineJob'] === 'string' || data['pipelineJob'] instanceof String)) {
            throw new Error("Expected the field `pipelineJob` to be a primitive type in the JSON string but got " + data['pipelineJob']);
        }
        // validate the optional field `predictSchemata`
        if (data['predictSchemata']) { // data not null
          GoogleCloudAiplatformV1PredictSchemata.validateJSON(data['predictSchemata']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['supportedDeploymentResourcesTypes'])) {
            throw new Error("Expected the field `supportedDeploymentResourcesTypes` to be an array in the JSON data but got " + data['supportedDeploymentResourcesTypes']);
        }
        if (data['supportedExportFormats']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['supportedExportFormats'])) {
                throw new Error("Expected the field `supportedExportFormats` to be an array in the JSON data but got " + data['supportedExportFormats']);
            }
            // validate the optional field `supportedExportFormats` (array)
            for (const item of data['supportedExportFormats']) {
                GoogleCloudAiplatformV1ModelExportFormat.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['supportedInputStorageFormats'])) {
            throw new Error("Expected the field `supportedInputStorageFormats` to be an array in the JSON data but got " + data['supportedInputStorageFormats']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['supportedOutputStorageFormats'])) {
            throw new Error("Expected the field `supportedOutputStorageFormats` to be an array in the JSON data but got " + data['supportedOutputStorageFormats']);
        }
        // ensure the json data is a string
        if (data['trainingPipeline'] && !(typeof data['trainingPipeline'] === 'string' || data['trainingPipeline'] instanceof String)) {
            throw new Error("Expected the field `trainingPipeline` to be a primitive type in the JSON string but got " + data['trainingPipeline']);
        }
        // ensure the json data is a string
        if (data['updateTime'] && !(typeof data['updateTime'] === 'string' || data['updateTime'] instanceof String)) {
            throw new Error("Expected the field `updateTime` to be a primitive type in the JSON string but got " + data['updateTime']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['versionAliases'])) {
            throw new Error("Expected the field `versionAliases` to be an array in the JSON data but got " + data['versionAliases']);
        }
        // ensure the json data is a string
        if (data['versionCreateTime'] && !(typeof data['versionCreateTime'] === 'string' || data['versionCreateTime'] instanceof String)) {
            throw new Error("Expected the field `versionCreateTime` to be a primitive type in the JSON string but got " + data['versionCreateTime']);
        }
        // ensure the json data is a string
        if (data['versionDescription'] && !(typeof data['versionDescription'] === 'string' || data['versionDescription'] instanceof String)) {
            throw new Error("Expected the field `versionDescription` to be a primitive type in the JSON string but got " + data['versionDescription']);
        }
        // ensure the json data is a string
        if (data['versionId'] && !(typeof data['versionId'] === 'string' || data['versionId'] instanceof String)) {
            throw new Error("Expected the field `versionId` to be a primitive type in the JSON string but got " + data['versionId']);
        }
        // ensure the json data is a string
        if (data['versionUpdateTime'] && !(typeof data['versionUpdateTime'] === 'string' || data['versionUpdateTime'] instanceof String)) {
            throw new Error("Expected the field `versionUpdateTime` to be a primitive type in the JSON string but got " + data['versionUpdateTime']);
        }

        return true;
    }


}



/**
 * Immutable. The path to the directory containing the Model artifact and any of its supporting files. Not required for AutoML Models.
 * @member {String} artifactUri
 */
GoogleCloudAiplatformV1Model.prototype['artifactUri'] = undefined;

/**
 * @member {module:model/GoogleCloudAiplatformV1ModelContainerSpec} containerSpec
 */
GoogleCloudAiplatformV1Model.prototype['containerSpec'] = undefined;

/**
 * Output only. Timestamp when this Model was uploaded into Vertex AI.
 * @member {String} createTime
 */
GoogleCloudAiplatformV1Model.prototype['createTime'] = undefined;

/**
 * @member {module:model/GoogleCloudAiplatformV1ModelDataStats} dataStats
 */
GoogleCloudAiplatformV1Model.prototype['dataStats'] = undefined;

/**
 * Output only. The pointers to DeployedModels created from this Model. Note that Model could have been deployed to Endpoints in different Locations.
 * @member {Array.<module:model/GoogleCloudAiplatformV1DeployedModelRef>} deployedModels
 */
GoogleCloudAiplatformV1Model.prototype['deployedModels'] = undefined;

/**
 * The description of the Model.
 * @member {String} description
 */
GoogleCloudAiplatformV1Model.prototype['description'] = undefined;

/**
 * Required. The display name of the Model. The name can be up to 128 characters long and can consist of any UTF-8 characters.
 * @member {String} displayName
 */
GoogleCloudAiplatformV1Model.prototype['displayName'] = undefined;

/**
 * @member {module:model/GoogleCloudAiplatformV1EncryptionSpec} encryptionSpec
 */
GoogleCloudAiplatformV1Model.prototype['encryptionSpec'] = undefined;

/**
 * Used to perform consistent read-modify-write updates. If not set, a blind \"overwrite\" update happens.
 * @member {String} etag
 */
GoogleCloudAiplatformV1Model.prototype['etag'] = undefined;

/**
 * @member {module:model/GoogleCloudAiplatformV1ExplanationSpec} explanationSpec
 */
GoogleCloudAiplatformV1Model.prototype['explanationSpec'] = undefined;

/**
 * The labels with user-defined metadata to organize your Models. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. See https://goo.gl/xmQnxf for more information and examples of labels.
 * @member {Object.<String, String>} labels
 */
GoogleCloudAiplatformV1Model.prototype['labels'] = undefined;

/**
 * Immutable. An additional information about the Model; the schema of the metadata can be found in metadata_schema. Unset if the Model does not have any additional information.
 * @member {Object} metadata
 */
GoogleCloudAiplatformV1Model.prototype['metadata'] = undefined;

/**
 * Output only. The resource name of the Artifact that was created in MetadataStore when creating the Model. The Artifact resource name pattern is `projects/{project}/locations/{location}/metadataStores/{metadata_store}/artifacts/{artifact}`.
 * @member {String} metadataArtifact
 */
GoogleCloudAiplatformV1Model.prototype['metadataArtifact'] = undefined;

/**
 * Immutable. Points to a YAML file stored on Google Cloud Storage describing additional information about the Model, that is specific to it. Unset if the Model does not have any additional information. The schema is defined as an OpenAPI 3.0.2 [Schema Object](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.2.md#schemaObject). AutoML Models always have this field populated by Vertex AI, if no additional metadata is needed, this field is set to an empty string. Note: The URI given on output will be immutable and probably different, including the URI scheme, than the one given on input. The output URI will point to a location where the user only has a read access.
 * @member {String} metadataSchemaUri
 */
GoogleCloudAiplatformV1Model.prototype['metadataSchemaUri'] = undefined;

/**
 * @member {module:model/GoogleCloudAiplatformV1ModelSourceInfo} modelSourceInfo
 */
GoogleCloudAiplatformV1Model.prototype['modelSourceInfo'] = undefined;

/**
 * The resource name of the Model.
 * @member {String} name
 */
GoogleCloudAiplatformV1Model.prototype['name'] = undefined;

/**
 * @member {module:model/GoogleCloudAiplatformV1ModelOriginalModelInfo} originalModelInfo
 */
GoogleCloudAiplatformV1Model.prototype['originalModelInfo'] = undefined;

/**
 * Optional. This field is populated if the model is produced by a pipeline job.
 * @member {String} pipelineJob
 */
GoogleCloudAiplatformV1Model.prototype['pipelineJob'] = undefined;

/**
 * @member {module:model/GoogleCloudAiplatformV1PredictSchemata} predictSchemata
 */
GoogleCloudAiplatformV1Model.prototype['predictSchemata'] = undefined;

/**
 * Output only. When this Model is deployed, its prediction resources are described by the `prediction_resources` field of the Endpoint.deployed_models object. Because not all Models support all resource configuration types, the configuration types this Model supports are listed here. If no configuration types are listed, the Model cannot be deployed to an Endpoint and does not support online predictions (PredictionService.Predict or PredictionService.Explain). Such a Model can serve predictions by using a BatchPredictionJob, if it has at least one entry each in supported_input_storage_formats and supported_output_storage_formats.
 * @member {Array.<module:model/GoogleCloudAiplatformV1Model.SupportedDeploymentResourcesTypesEnum>} supportedDeploymentResourcesTypes
 */
GoogleCloudAiplatformV1Model.prototype['supportedDeploymentResourcesTypes'] = undefined;

/**
 * Output only. The formats in which this Model may be exported. If empty, this Model is not available for export.
 * @member {Array.<module:model/GoogleCloudAiplatformV1ModelExportFormat>} supportedExportFormats
 */
GoogleCloudAiplatformV1Model.prototype['supportedExportFormats'] = undefined;

/**
 * Output only. The formats this Model supports in BatchPredictionJob.input_config. If PredictSchemata.instance_schema_uri exists, the instances should be given as per that schema. The possible formats are: * `jsonl` The JSON Lines format, where each instance is a single line. Uses GcsSource. * `csv` The CSV format, where each instance is a single comma-separated line. The first line in the file is the header, containing comma-separated field names. Uses GcsSource. * `tf-record` The TFRecord format, where each instance is a single record in tfrecord syntax. Uses GcsSource. * `tf-record-gzip` Similar to `tf-record`, but the file is gzipped. Uses GcsSource. * `bigquery` Each instance is a single row in BigQuery. Uses BigQuerySource. * `file-list` Each line of the file is the location of an instance to process, uses `gcs_source` field of the InputConfig object. If this Model doesn't support any of these formats it means it cannot be used with a BatchPredictionJob. However, if it has supported_deployment_resources_types, it could serve online predictions by using PredictionService.Predict or PredictionService.Explain.
 * @member {Array.<String>} supportedInputStorageFormats
 */
GoogleCloudAiplatformV1Model.prototype['supportedInputStorageFormats'] = undefined;

/**
 * Output only. The formats this Model supports in BatchPredictionJob.output_config. If both PredictSchemata.instance_schema_uri and PredictSchemata.prediction_schema_uri exist, the predictions are returned together with their instances. In other words, the prediction has the original instance data first, followed by the actual prediction content (as per the schema). The possible formats are: * `jsonl` The JSON Lines format, where each prediction is a single line. Uses GcsDestination. * `csv` The CSV format, where each prediction is a single comma-separated line. The first line in the file is the header, containing comma-separated field names. Uses GcsDestination. * `bigquery` Each prediction is a single row in a BigQuery table, uses BigQueryDestination . If this Model doesn't support any of these formats it means it cannot be used with a BatchPredictionJob. However, if it has supported_deployment_resources_types, it could serve online predictions by using PredictionService.Predict or PredictionService.Explain.
 * @member {Array.<String>} supportedOutputStorageFormats
 */
GoogleCloudAiplatformV1Model.prototype['supportedOutputStorageFormats'] = undefined;

/**
 * Output only. The resource name of the TrainingPipeline that uploaded this Model, if any.
 * @member {String} trainingPipeline
 */
GoogleCloudAiplatformV1Model.prototype['trainingPipeline'] = undefined;

/**
 * Output only. Timestamp when this Model was most recently updated.
 * @member {String} updateTime
 */
GoogleCloudAiplatformV1Model.prototype['updateTime'] = undefined;

/**
 * User provided version aliases so that a model version can be referenced via alias (i.e. `projects/{project}/locations/{location}/models/{model_id}@{version_alias}` instead of auto-generated version id (i.e. `projects/{project}/locations/{location}/models/{model_id}@{version_id})`. The format is a-z{0,126}[a-z0-9] to distinguish from version_id. A default version alias will be created for the first version of the model, and there must be exactly one default version alias for a model.
 * @member {Array.<String>} versionAliases
 */
GoogleCloudAiplatformV1Model.prototype['versionAliases'] = undefined;

/**
 * Output only. Timestamp when this version was created.
 * @member {String} versionCreateTime
 */
GoogleCloudAiplatformV1Model.prototype['versionCreateTime'] = undefined;

/**
 * The description of this version.
 * @member {String} versionDescription
 */
GoogleCloudAiplatformV1Model.prototype['versionDescription'] = undefined;

/**
 * Output only. Immutable. The version ID of the model. A new version is committed when a new model version is uploaded or trained under an existing model id. It is an auto-incrementing decimal number in string representation.
 * @member {String} versionId
 */
GoogleCloudAiplatformV1Model.prototype['versionId'] = undefined;

/**
 * Output only. Timestamp when this version was most recently updated.
 * @member {String} versionUpdateTime
 */
GoogleCloudAiplatformV1Model.prototype['versionUpdateTime'] = undefined;





/**
 * Allowed values for the <code>supportedDeploymentResourcesTypes</code> property.
 * @enum {String}
 * @readonly
 */
GoogleCloudAiplatformV1Model['SupportedDeploymentResourcesTypesEnum'] = {

    /**
     * value: "DEPLOYMENT_RESOURCES_TYPE_UNSPECIFIED"
     * @const
     */
    "DEPLOYMENT_RESOURCES_TYPE_UNSPECIFIED": "DEPLOYMENT_RESOURCES_TYPE_UNSPECIFIED",

    /**
     * value: "DEDICATED_RESOURCES"
     * @const
     */
    "DEDICATED_RESOURCES": "DEDICATED_RESOURCES",

    /**
     * value: "AUTOMATIC_RESOURCES"
     * @const
     */
    "AUTOMATIC_RESOURCES": "AUTOMATIC_RESOURCES",

    /**
     * value: "SHARED_RESOURCES"
     * @const
     */
    "SHARED_RESOURCES": "SHARED_RESOURCES"
};



export default GoogleCloudAiplatformV1Model;

