/**
 * Vertex AI API
 * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GoogleCloudAiplatformV1EncryptionSpec from './GoogleCloudAiplatformV1EncryptionSpec';
import GoogleCloudAiplatformV1GcsDestination from './GoogleCloudAiplatformV1GcsDestination';
import GoogleCloudAiplatformV1ModelDeploymentMonitoringBigQueryTable from './GoogleCloudAiplatformV1ModelDeploymentMonitoringBigQueryTable';
import GoogleCloudAiplatformV1ModelDeploymentMonitoringJobLatestMonitoringPipelineMetadata from './GoogleCloudAiplatformV1ModelDeploymentMonitoringJobLatestMonitoringPipelineMetadata';
import GoogleCloudAiplatformV1ModelDeploymentMonitoringObjectiveConfig from './GoogleCloudAiplatformV1ModelDeploymentMonitoringObjectiveConfig';
import GoogleCloudAiplatformV1ModelDeploymentMonitoringScheduleConfig from './GoogleCloudAiplatformV1ModelDeploymentMonitoringScheduleConfig';
import GoogleCloudAiplatformV1ModelMonitoringAlertConfig from './GoogleCloudAiplatformV1ModelMonitoringAlertConfig';
import GoogleCloudAiplatformV1SamplingStrategy from './GoogleCloudAiplatformV1SamplingStrategy';
import GoogleRpcStatus from './GoogleRpcStatus';

/**
 * The GoogleCloudAiplatformV1ModelDeploymentMonitoringJob model module.
 * @module model/GoogleCloudAiplatformV1ModelDeploymentMonitoringJob
 * @version v1
 */
class GoogleCloudAiplatformV1ModelDeploymentMonitoringJob {
    /**
     * Constructs a new <code>GoogleCloudAiplatformV1ModelDeploymentMonitoringJob</code>.
     * Represents a job that runs periodically to monitor the deployed models in an endpoint. It will analyze the logged training &amp; prediction data to detect any abnormal behaviors.
     * @alias module:model/GoogleCloudAiplatformV1ModelDeploymentMonitoringJob
     */
    constructor() { 
        
        GoogleCloudAiplatformV1ModelDeploymentMonitoringJob.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleCloudAiplatformV1ModelDeploymentMonitoringJob</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleCloudAiplatformV1ModelDeploymentMonitoringJob} obj Optional instance to populate.
     * @return {module:model/GoogleCloudAiplatformV1ModelDeploymentMonitoringJob} The populated <code>GoogleCloudAiplatformV1ModelDeploymentMonitoringJob</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleCloudAiplatformV1ModelDeploymentMonitoringJob();

            if (data.hasOwnProperty('analysisInstanceSchemaUri')) {
                obj['analysisInstanceSchemaUri'] = ApiClient.convertToType(data['analysisInstanceSchemaUri'], 'String');
            }
            if (data.hasOwnProperty('bigqueryTables')) {
                obj['bigqueryTables'] = ApiClient.convertToType(data['bigqueryTables'], [GoogleCloudAiplatformV1ModelDeploymentMonitoringBigQueryTable]);
            }
            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'String');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('enableMonitoringPipelineLogs')) {
                obj['enableMonitoringPipelineLogs'] = ApiClient.convertToType(data['enableMonitoringPipelineLogs'], 'Boolean');
            }
            if (data.hasOwnProperty('encryptionSpec')) {
                obj['encryptionSpec'] = GoogleCloudAiplatformV1EncryptionSpec.constructFromObject(data['encryptionSpec']);
            }
            if (data.hasOwnProperty('endpoint')) {
                obj['endpoint'] = ApiClient.convertToType(data['endpoint'], 'String');
            }
            if (data.hasOwnProperty('error')) {
                obj['error'] = GoogleRpcStatus.constructFromObject(data['error']);
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], {'String': 'String'});
            }
            if (data.hasOwnProperty('latestMonitoringPipelineMetadata')) {
                obj['latestMonitoringPipelineMetadata'] = GoogleCloudAiplatformV1ModelDeploymentMonitoringJobLatestMonitoringPipelineMetadata.constructFromObject(data['latestMonitoringPipelineMetadata']);
            }
            if (data.hasOwnProperty('logTtl')) {
                obj['logTtl'] = ApiClient.convertToType(data['logTtl'], 'String');
            }
            if (data.hasOwnProperty('loggingSamplingStrategy')) {
                obj['loggingSamplingStrategy'] = GoogleCloudAiplatformV1SamplingStrategy.constructFromObject(data['loggingSamplingStrategy']);
            }
            if (data.hasOwnProperty('modelDeploymentMonitoringObjectiveConfigs')) {
                obj['modelDeploymentMonitoringObjectiveConfigs'] = ApiClient.convertToType(data['modelDeploymentMonitoringObjectiveConfigs'], [GoogleCloudAiplatformV1ModelDeploymentMonitoringObjectiveConfig]);
            }
            if (data.hasOwnProperty('modelDeploymentMonitoringScheduleConfig')) {
                obj['modelDeploymentMonitoringScheduleConfig'] = GoogleCloudAiplatformV1ModelDeploymentMonitoringScheduleConfig.constructFromObject(data['modelDeploymentMonitoringScheduleConfig']);
            }
            if (data.hasOwnProperty('modelMonitoringAlertConfig')) {
                obj['modelMonitoringAlertConfig'] = GoogleCloudAiplatformV1ModelMonitoringAlertConfig.constructFromObject(data['modelMonitoringAlertConfig']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('nextScheduleTime')) {
                obj['nextScheduleTime'] = ApiClient.convertToType(data['nextScheduleTime'], 'String');
            }
            if (data.hasOwnProperty('predictInstanceSchemaUri')) {
                obj['predictInstanceSchemaUri'] = ApiClient.convertToType(data['predictInstanceSchemaUri'], 'String');
            }
            if (data.hasOwnProperty('samplePredictInstance')) {
                obj['samplePredictInstance'] = ApiClient.convertToType(data['samplePredictInstance'], Object);
            }
            if (data.hasOwnProperty('scheduleState')) {
                obj['scheduleState'] = ApiClient.convertToType(data['scheduleState'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('statsAnomaliesBaseDirectory')) {
                obj['statsAnomaliesBaseDirectory'] = GoogleCloudAiplatformV1GcsDestination.constructFromObject(data['statsAnomaliesBaseDirectory']);
            }
            if (data.hasOwnProperty('updateTime')) {
                obj['updateTime'] = ApiClient.convertToType(data['updateTime'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleCloudAiplatformV1ModelDeploymentMonitoringJob</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleCloudAiplatformV1ModelDeploymentMonitoringJob</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['analysisInstanceSchemaUri'] && !(typeof data['analysisInstanceSchemaUri'] === 'string' || data['analysisInstanceSchemaUri'] instanceof String)) {
            throw new Error("Expected the field `analysisInstanceSchemaUri` to be a primitive type in the JSON string but got " + data['analysisInstanceSchemaUri']);
        }
        if (data['bigqueryTables']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['bigqueryTables'])) {
                throw new Error("Expected the field `bigqueryTables` to be an array in the JSON data but got " + data['bigqueryTables']);
            }
            // validate the optional field `bigqueryTables` (array)
            for (const item of data['bigqueryTables']) {
                GoogleCloudAiplatformV1ModelDeploymentMonitoringBigQueryTable.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['createTime'] && !(typeof data['createTime'] === 'string' || data['createTime'] instanceof String)) {
            throw new Error("Expected the field `createTime` to be a primitive type in the JSON string but got " + data['createTime']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // validate the optional field `encryptionSpec`
        if (data['encryptionSpec']) { // data not null
          GoogleCloudAiplatformV1EncryptionSpec.validateJSON(data['encryptionSpec']);
        }
        // ensure the json data is a string
        if (data['endpoint'] && !(typeof data['endpoint'] === 'string' || data['endpoint'] instanceof String)) {
            throw new Error("Expected the field `endpoint` to be a primitive type in the JSON string but got " + data['endpoint']);
        }
        // validate the optional field `error`
        if (data['error']) { // data not null
          GoogleRpcStatus.validateJSON(data['error']);
        }
        // validate the optional field `latestMonitoringPipelineMetadata`
        if (data['latestMonitoringPipelineMetadata']) { // data not null
          GoogleCloudAiplatformV1ModelDeploymentMonitoringJobLatestMonitoringPipelineMetadata.validateJSON(data['latestMonitoringPipelineMetadata']);
        }
        // ensure the json data is a string
        if (data['logTtl'] && !(typeof data['logTtl'] === 'string' || data['logTtl'] instanceof String)) {
            throw new Error("Expected the field `logTtl` to be a primitive type in the JSON string but got " + data['logTtl']);
        }
        // validate the optional field `loggingSamplingStrategy`
        if (data['loggingSamplingStrategy']) { // data not null
          GoogleCloudAiplatformV1SamplingStrategy.validateJSON(data['loggingSamplingStrategy']);
        }
        if (data['modelDeploymentMonitoringObjectiveConfigs']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['modelDeploymentMonitoringObjectiveConfigs'])) {
                throw new Error("Expected the field `modelDeploymentMonitoringObjectiveConfigs` to be an array in the JSON data but got " + data['modelDeploymentMonitoringObjectiveConfigs']);
            }
            // validate the optional field `modelDeploymentMonitoringObjectiveConfigs` (array)
            for (const item of data['modelDeploymentMonitoringObjectiveConfigs']) {
                GoogleCloudAiplatformV1ModelDeploymentMonitoringObjectiveConfig.validateJSON(item);
            };
        }
        // validate the optional field `modelDeploymentMonitoringScheduleConfig`
        if (data['modelDeploymentMonitoringScheduleConfig']) { // data not null
          GoogleCloudAiplatformV1ModelDeploymentMonitoringScheduleConfig.validateJSON(data['modelDeploymentMonitoringScheduleConfig']);
        }
        // validate the optional field `modelMonitoringAlertConfig`
        if (data['modelMonitoringAlertConfig']) { // data not null
          GoogleCloudAiplatformV1ModelMonitoringAlertConfig.validateJSON(data['modelMonitoringAlertConfig']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['nextScheduleTime'] && !(typeof data['nextScheduleTime'] === 'string' || data['nextScheduleTime'] instanceof String)) {
            throw new Error("Expected the field `nextScheduleTime` to be a primitive type in the JSON string but got " + data['nextScheduleTime']);
        }
        // ensure the json data is a string
        if (data['predictInstanceSchemaUri'] && !(typeof data['predictInstanceSchemaUri'] === 'string' || data['predictInstanceSchemaUri'] instanceof String)) {
            throw new Error("Expected the field `predictInstanceSchemaUri` to be a primitive type in the JSON string but got " + data['predictInstanceSchemaUri']);
        }
        // ensure the json data is a string
        if (data['scheduleState'] && !(typeof data['scheduleState'] === 'string' || data['scheduleState'] instanceof String)) {
            throw new Error("Expected the field `scheduleState` to be a primitive type in the JSON string but got " + data['scheduleState']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // validate the optional field `statsAnomaliesBaseDirectory`
        if (data['statsAnomaliesBaseDirectory']) { // data not null
          GoogleCloudAiplatformV1GcsDestination.validateJSON(data['statsAnomaliesBaseDirectory']);
        }
        // ensure the json data is a string
        if (data['updateTime'] && !(typeof data['updateTime'] === 'string' || data['updateTime'] instanceof String)) {
            throw new Error("Expected the field `updateTime` to be a primitive type in the JSON string but got " + data['updateTime']);
        }

        return true;
    }


}



/**
 * YAML schema file uri describing the format of a single instance that you want Tensorflow Data Validation (TFDV) to analyze. If this field is empty, all the feature data types are inferred from predict_instance_schema_uri, meaning that TFDV will use the data in the exact format(data type) as prediction request/response. If there are any data type differences between predict instance and TFDV instance, this field can be used to override the schema. For models trained with Vertex AI, this field must be set as all the fields in predict instance formatted as string.
 * @member {String} analysisInstanceSchemaUri
 */
GoogleCloudAiplatformV1ModelDeploymentMonitoringJob.prototype['analysisInstanceSchemaUri'] = undefined;

/**
 * Output only. The created bigquery tables for the job under customer project. Customer could do their own query & analysis. There could be 4 log tables in maximum: 1. Training data logging predict request/response 2. Serving data logging predict request/response
 * @member {Array.<module:model/GoogleCloudAiplatformV1ModelDeploymentMonitoringBigQueryTable>} bigqueryTables
 */
GoogleCloudAiplatformV1ModelDeploymentMonitoringJob.prototype['bigqueryTables'] = undefined;

/**
 * Output only. Timestamp when this ModelDeploymentMonitoringJob was created.
 * @member {String} createTime
 */
GoogleCloudAiplatformV1ModelDeploymentMonitoringJob.prototype['createTime'] = undefined;

/**
 * Required. The user-defined name of the ModelDeploymentMonitoringJob. The name can be up to 128 characters long and can consist of any UTF-8 characters. Display name of a ModelDeploymentMonitoringJob.
 * @member {String} displayName
 */
GoogleCloudAiplatformV1ModelDeploymentMonitoringJob.prototype['displayName'] = undefined;

/**
 * If true, the scheduled monitoring pipeline logs are sent to Google Cloud Logging, including pipeline status and anomalies detected. Please note the logs incur cost, which are subject to [Cloud Logging pricing](https://cloud.google.com/logging#pricing).
 * @member {Boolean} enableMonitoringPipelineLogs
 */
GoogleCloudAiplatformV1ModelDeploymentMonitoringJob.prototype['enableMonitoringPipelineLogs'] = undefined;

/**
 * @member {module:model/GoogleCloudAiplatformV1EncryptionSpec} encryptionSpec
 */
GoogleCloudAiplatformV1ModelDeploymentMonitoringJob.prototype['encryptionSpec'] = undefined;

/**
 * Required. Endpoint resource name. Format: `projects/{project}/locations/{location}/endpoints/{endpoint}`
 * @member {String} endpoint
 */
GoogleCloudAiplatformV1ModelDeploymentMonitoringJob.prototype['endpoint'] = undefined;

/**
 * @member {module:model/GoogleRpcStatus} error
 */
GoogleCloudAiplatformV1ModelDeploymentMonitoringJob.prototype['error'] = undefined;

/**
 * The labels with user-defined metadata to organize your ModelDeploymentMonitoringJob. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. See https://goo.gl/xmQnxf for more information and examples of labels.
 * @member {Object.<String, String>} labels
 */
GoogleCloudAiplatformV1ModelDeploymentMonitoringJob.prototype['labels'] = undefined;

/**
 * @member {module:model/GoogleCloudAiplatformV1ModelDeploymentMonitoringJobLatestMonitoringPipelineMetadata} latestMonitoringPipelineMetadata
 */
GoogleCloudAiplatformV1ModelDeploymentMonitoringJob.prototype['latestMonitoringPipelineMetadata'] = undefined;

/**
 * The TTL of BigQuery tables in user projects which stores logs. A day is the basic unit of the TTL and we take the ceil of TTL/86400(a day). e.g. { second: 3600} indicates ttl = 1 day.
 * @member {String} logTtl
 */
GoogleCloudAiplatformV1ModelDeploymentMonitoringJob.prototype['logTtl'] = undefined;

/**
 * @member {module:model/GoogleCloudAiplatformV1SamplingStrategy} loggingSamplingStrategy
 */
GoogleCloudAiplatformV1ModelDeploymentMonitoringJob.prototype['loggingSamplingStrategy'] = undefined;

/**
 * Required. The config for monitoring objectives. This is a per DeployedModel config. Each DeployedModel needs to be configured separately.
 * @member {Array.<module:model/GoogleCloudAiplatformV1ModelDeploymentMonitoringObjectiveConfig>} modelDeploymentMonitoringObjectiveConfigs
 */
GoogleCloudAiplatformV1ModelDeploymentMonitoringJob.prototype['modelDeploymentMonitoringObjectiveConfigs'] = undefined;

/**
 * @member {module:model/GoogleCloudAiplatformV1ModelDeploymentMonitoringScheduleConfig} modelDeploymentMonitoringScheduleConfig
 */
GoogleCloudAiplatformV1ModelDeploymentMonitoringJob.prototype['modelDeploymentMonitoringScheduleConfig'] = undefined;

/**
 * @member {module:model/GoogleCloudAiplatformV1ModelMonitoringAlertConfig} modelMonitoringAlertConfig
 */
GoogleCloudAiplatformV1ModelDeploymentMonitoringJob.prototype['modelMonitoringAlertConfig'] = undefined;

/**
 * Output only. Resource name of a ModelDeploymentMonitoringJob.
 * @member {String} name
 */
GoogleCloudAiplatformV1ModelDeploymentMonitoringJob.prototype['name'] = undefined;

/**
 * Output only. Timestamp when this monitoring pipeline will be scheduled to run for the next round.
 * @member {String} nextScheduleTime
 */
GoogleCloudAiplatformV1ModelDeploymentMonitoringJob.prototype['nextScheduleTime'] = undefined;

/**
 * YAML schema file uri describing the format of a single instance, which are given to format this Endpoint's prediction (and explanation). If not set, we will generate predict schema from collected predict requests.
 * @member {String} predictInstanceSchemaUri
 */
GoogleCloudAiplatformV1ModelDeploymentMonitoringJob.prototype['predictInstanceSchemaUri'] = undefined;

/**
 * Sample Predict instance, same format as PredictRequest.instances, this can be set as a replacement of ModelDeploymentMonitoringJob.predict_instance_schema_uri. If not set, we will generate predict schema from collected predict requests.
 * @member {Object} samplePredictInstance
 */
GoogleCloudAiplatformV1ModelDeploymentMonitoringJob.prototype['samplePredictInstance'] = undefined;

/**
 * Output only. Schedule state when the monitoring job is in Running state.
 * @member {module:model/GoogleCloudAiplatformV1ModelDeploymentMonitoringJob.ScheduleStateEnum} scheduleState
 */
GoogleCloudAiplatformV1ModelDeploymentMonitoringJob.prototype['scheduleState'] = undefined;

/**
 * Output only. The detailed state of the monitoring job. When the job is still creating, the state will be 'PENDING'. Once the job is successfully created, the state will be 'RUNNING'. Pause the job, the state will be 'PAUSED'. Resume the job, the state will return to 'RUNNING'.
 * @member {module:model/GoogleCloudAiplatformV1ModelDeploymentMonitoringJob.StateEnum} state
 */
GoogleCloudAiplatformV1ModelDeploymentMonitoringJob.prototype['state'] = undefined;

/**
 * @member {module:model/GoogleCloudAiplatformV1GcsDestination} statsAnomaliesBaseDirectory
 */
GoogleCloudAiplatformV1ModelDeploymentMonitoringJob.prototype['statsAnomaliesBaseDirectory'] = undefined;

/**
 * Output only. Timestamp when this ModelDeploymentMonitoringJob was updated most recently.
 * @member {String} updateTime
 */
GoogleCloudAiplatformV1ModelDeploymentMonitoringJob.prototype['updateTime'] = undefined;





/**
 * Allowed values for the <code>scheduleState</code> property.
 * @enum {String}
 * @readonly
 */
GoogleCloudAiplatformV1ModelDeploymentMonitoringJob['ScheduleStateEnum'] = {

    /**
     * value: "MONITORING_SCHEDULE_STATE_UNSPECIFIED"
     * @const
     */
    "MONITORING_SCHEDULE_STATE_UNSPECIFIED": "MONITORING_SCHEDULE_STATE_UNSPECIFIED",

    /**
     * value: "PENDING"
     * @const
     */
    "PENDING": "PENDING",

    /**
     * value: "OFFLINE"
     * @const
     */
    "OFFLINE": "OFFLINE",

    /**
     * value: "RUNNING"
     * @const
     */
    "RUNNING": "RUNNING"
};


/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
GoogleCloudAiplatformV1ModelDeploymentMonitoringJob['StateEnum'] = {

    /**
     * value: "JOB_STATE_UNSPECIFIED"
     * @const
     */
    "UNSPECIFIED": "JOB_STATE_UNSPECIFIED",

    /**
     * value: "JOB_STATE_QUEUED"
     * @const
     */
    "QUEUED": "JOB_STATE_QUEUED",

    /**
     * value: "JOB_STATE_PENDING"
     * @const
     */
    "PENDING": "JOB_STATE_PENDING",

    /**
     * value: "JOB_STATE_RUNNING"
     * @const
     */
    "RUNNING": "JOB_STATE_RUNNING",

    /**
     * value: "JOB_STATE_SUCCEEDED"
     * @const
     */
    "SUCCEEDED": "JOB_STATE_SUCCEEDED",

    /**
     * value: "JOB_STATE_FAILED"
     * @const
     */
    "FAILED": "JOB_STATE_FAILED",

    /**
     * value: "JOB_STATE_CANCELLING"
     * @const
     */
    "CANCELLING": "JOB_STATE_CANCELLING",

    /**
     * value: "JOB_STATE_CANCELLED"
     * @const
     */
    "CANCELLED": "JOB_STATE_CANCELLED",

    /**
     * value: "JOB_STATE_PAUSED"
     * @const
     */
    "PAUSED": "JOB_STATE_PAUSED",

    /**
     * value: "JOB_STATE_EXPIRED"
     * @const
     */
    "EXPIRED": "JOB_STATE_EXPIRED",

    /**
     * value: "JOB_STATE_UPDATING"
     * @const
     */
    "UPDATING": "JOB_STATE_UPDATING",

    /**
     * value: "JOB_STATE_PARTIALLY_SUCCEEDED"
     * @const
     */
    "PARTIALLY_SUCCEEDED": "JOB_STATE_PARTIALLY_SUCCEEDED"
};



export default GoogleCloudAiplatformV1ModelDeploymentMonitoringJob;

