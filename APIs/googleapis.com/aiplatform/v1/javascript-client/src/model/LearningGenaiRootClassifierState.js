/**
 * Vertex AI API
 * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import LearningGenaiRootDataProviderOutput from './LearningGenaiRootDataProviderOutput';
import LearningGenaiRootMetricOutput from './LearningGenaiRootMetricOutput';

/**
 * The LearningGenaiRootClassifierState model module.
 * @module model/LearningGenaiRootClassifierState
 * @version v1
 */
class LearningGenaiRootClassifierState {
    /**
     * Constructs a new <code>LearningGenaiRootClassifierState</code>.
     * DataProviderOutput and MetricOutput can be saved between calls to the Classifier framework. For instance, you can run the query classifier, get outputs from those metrics, then use them in a result classifier as well. Example rule based on this idea: and_rules { rule { metric_name: &#39;query_safesearch_v2&#39; ... } rule { metric_name: &#39;response_safesearch_v2&#39; ... } }
     * @alias module:model/LearningGenaiRootClassifierState
     */
    constructor() { 
        
        LearningGenaiRootClassifierState.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LearningGenaiRootClassifierState</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LearningGenaiRootClassifierState} obj Optional instance to populate.
     * @return {module:model/LearningGenaiRootClassifierState} The populated <code>LearningGenaiRootClassifierState</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LearningGenaiRootClassifierState();

            if (data.hasOwnProperty('dataProviderOutput')) {
                obj['dataProviderOutput'] = ApiClient.convertToType(data['dataProviderOutput'], [LearningGenaiRootDataProviderOutput]);
            }
            if (data.hasOwnProperty('metricOutput')) {
                obj['metricOutput'] = ApiClient.convertToType(data['metricOutput'], [LearningGenaiRootMetricOutput]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LearningGenaiRootClassifierState</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LearningGenaiRootClassifierState</code>.
     */
    static validateJSON(data) {
        if (data['dataProviderOutput']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['dataProviderOutput'])) {
                throw new Error("Expected the field `dataProviderOutput` to be an array in the JSON data but got " + data['dataProviderOutput']);
            }
            // validate the optional field `dataProviderOutput` (array)
            for (const item of data['dataProviderOutput']) {
                LearningGenaiRootDataProviderOutput.validateJSON(item);
            };
        }
        if (data['metricOutput']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['metricOutput'])) {
                throw new Error("Expected the field `metricOutput` to be an array in the JSON data but got " + data['metricOutput']);
            }
            // validate the optional field `metricOutput` (array)
            for (const item of data['metricOutput']) {
                LearningGenaiRootMetricOutput.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {Array.<module:model/LearningGenaiRootDataProviderOutput>} dataProviderOutput
 */
LearningGenaiRootClassifierState.prototype['dataProviderOutput'] = undefined;

/**
 * @member {Array.<module:model/LearningGenaiRootMetricOutput>} metricOutput
 */
LearningGenaiRootClassifierState.prototype['metricOutput'] = undefined;






export default LearningGenaiRootClassifierState;

