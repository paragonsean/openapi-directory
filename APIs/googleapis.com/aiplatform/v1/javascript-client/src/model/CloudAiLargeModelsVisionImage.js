/**
 * Vertex AI API
 * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CloudAiLargeModelsVisionImageRAIScores from './CloudAiLargeModelsVisionImageRAIScores';
import CloudAiLargeModelsVisionRaiInfo from './CloudAiLargeModelsVisionRaiInfo';
import CloudAiLargeModelsVisionSemanticFilterResponse from './CloudAiLargeModelsVisionSemanticFilterResponse';

/**
 * The CloudAiLargeModelsVisionImage model module.
 * @module model/CloudAiLargeModelsVisionImage
 * @version v1
 */
class CloudAiLargeModelsVisionImage {
    /**
     * Constructs a new <code>CloudAiLargeModelsVisionImage</code>.
     * Image.
     * @alias module:model/CloudAiLargeModelsVisionImage
     */
    constructor() { 
        
        CloudAiLargeModelsVisionImage.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CloudAiLargeModelsVisionImage</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CloudAiLargeModelsVisionImage} obj Optional instance to populate.
     * @return {module:model/CloudAiLargeModelsVisionImage} The populated <code>CloudAiLargeModelsVisionImage</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CloudAiLargeModelsVisionImage();

            if (data.hasOwnProperty('encoding')) {
                obj['encoding'] = ApiClient.convertToType(data['encoding'], 'String');
            }
            if (data.hasOwnProperty('image')) {
                obj['image'] = ApiClient.convertToType(data['image'], 'Blob');
            }
            if (data.hasOwnProperty('imageRaiScores')) {
                obj['imageRaiScores'] = CloudAiLargeModelsVisionImageRAIScores.constructFromObject(data['imageRaiScores']);
            }
            if (data.hasOwnProperty('raiInfo')) {
                obj['raiInfo'] = CloudAiLargeModelsVisionRaiInfo.constructFromObject(data['raiInfo']);
            }
            if (data.hasOwnProperty('semanticFilterResponse')) {
                obj['semanticFilterResponse'] = CloudAiLargeModelsVisionSemanticFilterResponse.constructFromObject(data['semanticFilterResponse']);
            }
            if (data.hasOwnProperty('text')) {
                obj['text'] = ApiClient.convertToType(data['text'], 'String');
            }
            if (data.hasOwnProperty('uri')) {
                obj['uri'] = ApiClient.convertToType(data['uri'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CloudAiLargeModelsVisionImage</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CloudAiLargeModelsVisionImage</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['encoding'] && !(typeof data['encoding'] === 'string' || data['encoding'] instanceof String)) {
            throw new Error("Expected the field `encoding` to be a primitive type in the JSON string but got " + data['encoding']);
        }
        // validate the optional field `imageRaiScores`
        if (data['imageRaiScores']) { // data not null
          CloudAiLargeModelsVisionImageRAIScores.validateJSON(data['imageRaiScores']);
        }
        // validate the optional field `raiInfo`
        if (data['raiInfo']) { // data not null
          CloudAiLargeModelsVisionRaiInfo.validateJSON(data['raiInfo']);
        }
        // validate the optional field `semanticFilterResponse`
        if (data['semanticFilterResponse']) { // data not null
          CloudAiLargeModelsVisionSemanticFilterResponse.validateJSON(data['semanticFilterResponse']);
        }
        // ensure the json data is a string
        if (data['text'] && !(typeof data['text'] === 'string' || data['text'] instanceof String)) {
            throw new Error("Expected the field `text` to be a primitive type in the JSON string but got " + data['text']);
        }
        // ensure the json data is a string
        if (data['uri'] && !(typeof data['uri'] === 'string' || data['uri'] instanceof String)) {
            throw new Error("Expected the field `uri` to be a primitive type in the JSON string but got " + data['uri']);
        }

        return true;
    }


}



/**
 * Image encoding, encoded as \"image/png\" or \"image/jpg\".
 * @member {String} encoding
 */
CloudAiLargeModelsVisionImage.prototype['encoding'] = undefined;

/**
 * Raw bytes.
 * @member {Blob} image
 */
CloudAiLargeModelsVisionImage.prototype['image'] = undefined;

/**
 * @member {module:model/CloudAiLargeModelsVisionImageRAIScores} imageRaiScores
 */
CloudAiLargeModelsVisionImage.prototype['imageRaiScores'] = undefined;

/**
 * @member {module:model/CloudAiLargeModelsVisionRaiInfo} raiInfo
 */
CloudAiLargeModelsVisionImage.prototype['raiInfo'] = undefined;

/**
 * @member {module:model/CloudAiLargeModelsVisionSemanticFilterResponse} semanticFilterResponse
 */
CloudAiLargeModelsVisionImage.prototype['semanticFilterResponse'] = undefined;

/**
 * Text/Expanded text input for imagen.
 * @member {String} text
 */
CloudAiLargeModelsVisionImage.prototype['text'] = undefined;

/**
 * Path to another storage (typically Google Cloud Storage).
 * @member {String} uri
 */
CloudAiLargeModelsVisionImage.prototype['uri'] = undefined;






export default CloudAiLargeModelsVisionImage;

