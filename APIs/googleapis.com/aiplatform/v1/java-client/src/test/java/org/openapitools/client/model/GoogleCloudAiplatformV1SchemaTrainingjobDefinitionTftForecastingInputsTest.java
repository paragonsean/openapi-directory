/*
 * Vertex AI API
 * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GoogleCloudAiplatformV1SchemaTrainingjobDefinitionExportEvaluatedDataItemsConfig;
import org.openapitools.client.model.GoogleCloudAiplatformV1SchemaTrainingjobDefinitionHierarchyConfig;
import org.openapitools.client.model.GoogleCloudAiplatformV1SchemaTrainingjobDefinitionTftForecastingInputsGranularity;
import org.openapitools.client.model.GoogleCloudAiplatformV1SchemaTrainingjobDefinitionTftForecastingInputsTransformation;
import org.openapitools.client.model.GoogleCloudAiplatformV1SchemaTrainingjobDefinitionWindowConfig;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for GoogleCloudAiplatformV1SchemaTrainingjobDefinitionTftForecastingInputs
 */
public class GoogleCloudAiplatformV1SchemaTrainingjobDefinitionTftForecastingInputsTest {
    private final GoogleCloudAiplatformV1SchemaTrainingjobDefinitionTftForecastingInputs model = new GoogleCloudAiplatformV1SchemaTrainingjobDefinitionTftForecastingInputs();

    /**
     * Model tests for GoogleCloudAiplatformV1SchemaTrainingjobDefinitionTftForecastingInputs
     */
    @Test
    public void testGoogleCloudAiplatformV1SchemaTrainingjobDefinitionTftForecastingInputs() {
        // TODO: test GoogleCloudAiplatformV1SchemaTrainingjobDefinitionTftForecastingInputs
    }

    /**
     * Test the property 'additionalExperiments'
     */
    @Test
    public void additionalExperimentsTest() {
        // TODO: test additionalExperiments
    }

    /**
     * Test the property 'availableAtForecastColumns'
     */
    @Test
    public void availableAtForecastColumnsTest() {
        // TODO: test availableAtForecastColumns
    }

    /**
     * Test the property 'contextWindow'
     */
    @Test
    public void contextWindowTest() {
        // TODO: test contextWindow
    }

    /**
     * Test the property 'dataGranularity'
     */
    @Test
    public void dataGranularityTest() {
        // TODO: test dataGranularity
    }

    /**
     * Test the property 'exportEvaluatedDataItemsConfig'
     */
    @Test
    public void exportEvaluatedDataItemsConfigTest() {
        // TODO: test exportEvaluatedDataItemsConfig
    }

    /**
     * Test the property 'forecastHorizon'
     */
    @Test
    public void forecastHorizonTest() {
        // TODO: test forecastHorizon
    }

    /**
     * Test the property 'hierarchyConfig'
     */
    @Test
    public void hierarchyConfigTest() {
        // TODO: test hierarchyConfig
    }

    /**
     * Test the property 'holidayRegions'
     */
    @Test
    public void holidayRegionsTest() {
        // TODO: test holidayRegions
    }

    /**
     * Test the property 'optimizationObjective'
     */
    @Test
    public void optimizationObjectiveTest() {
        // TODO: test optimizationObjective
    }

    /**
     * Test the property 'quantiles'
     */
    @Test
    public void quantilesTest() {
        // TODO: test quantiles
    }

    /**
     * Test the property 'targetColumn'
     */
    @Test
    public void targetColumnTest() {
        // TODO: test targetColumn
    }

    /**
     * Test the property 'timeColumn'
     */
    @Test
    public void timeColumnTest() {
        // TODO: test timeColumn
    }

    /**
     * Test the property 'timeSeriesAttributeColumns'
     */
    @Test
    public void timeSeriesAttributeColumnsTest() {
        // TODO: test timeSeriesAttributeColumns
    }

    /**
     * Test the property 'timeSeriesIdentifierColumn'
     */
    @Test
    public void timeSeriesIdentifierColumnTest() {
        // TODO: test timeSeriesIdentifierColumn
    }

    /**
     * Test the property 'trainBudgetMilliNodeHours'
     */
    @Test
    public void trainBudgetMilliNodeHoursTest() {
        // TODO: test trainBudgetMilliNodeHours
    }

    /**
     * Test the property 'transformations'
     */
    @Test
    public void transformationsTest() {
        // TODO: test transformations
    }

    /**
     * Test the property 'unavailableAtForecastColumns'
     */
    @Test
    public void unavailableAtForecastColumnsTest() {
        // TODO: test unavailableAtForecastColumns
    }

    /**
     * Test the property 'validationOptions'
     */
    @Test
    public void validationOptionsTest() {
        // TODO: test validationOptions
    }

    /**
     * Test the property 'weightColumn'
     */
    @Test
    public void weightColumnTest() {
        // TODO: test weightColumn
    }

    /**
     * Test the property 'windowConfig'
     */
    @Test
    public void windowConfigTest() {
        // TODO: test windowConfig
    }

}
