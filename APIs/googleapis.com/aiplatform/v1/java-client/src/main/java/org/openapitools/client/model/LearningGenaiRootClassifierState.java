/*
 * Vertex AI API
 * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.LearningGenaiRootDataProviderOutput;
import org.openapitools.client.model.LearningGenaiRootMetricOutput;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DataProviderOutput and MetricOutput can be saved between calls to the Classifier framework. For instance, you can run the query classifier, get outputs from those metrics, then use them in a result classifier as well. Example rule based on this idea: and_rules { rule { metric_name: &#39;query_safesearch_v2&#39; ... } rule { metric_name: &#39;response_safesearch_v2&#39; ... } }
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:33:33.164817-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LearningGenaiRootClassifierState {
  public static final String SERIALIZED_NAME_DATA_PROVIDER_OUTPUT = "dataProviderOutput";
  @SerializedName(SERIALIZED_NAME_DATA_PROVIDER_OUTPUT)
  private List<LearningGenaiRootDataProviderOutput> dataProviderOutput = new ArrayList<>();

  public static final String SERIALIZED_NAME_METRIC_OUTPUT = "metricOutput";
  @SerializedName(SERIALIZED_NAME_METRIC_OUTPUT)
  private List<LearningGenaiRootMetricOutput> metricOutput = new ArrayList<>();

  public LearningGenaiRootClassifierState() {
  }

  public LearningGenaiRootClassifierState dataProviderOutput(List<LearningGenaiRootDataProviderOutput> dataProviderOutput) {
    this.dataProviderOutput = dataProviderOutput;
    return this;
  }

  public LearningGenaiRootClassifierState addDataProviderOutputItem(LearningGenaiRootDataProviderOutput dataProviderOutputItem) {
    if (this.dataProviderOutput == null) {
      this.dataProviderOutput = new ArrayList<>();
    }
    this.dataProviderOutput.add(dataProviderOutputItem);
    return this;
  }

  /**
   * Get dataProviderOutput
   * @return dataProviderOutput
   */
  @javax.annotation.Nullable
  public List<LearningGenaiRootDataProviderOutput> getDataProviderOutput() {
    return dataProviderOutput;
  }

  public void setDataProviderOutput(List<LearningGenaiRootDataProviderOutput> dataProviderOutput) {
    this.dataProviderOutput = dataProviderOutput;
  }


  public LearningGenaiRootClassifierState metricOutput(List<LearningGenaiRootMetricOutput> metricOutput) {
    this.metricOutput = metricOutput;
    return this;
  }

  public LearningGenaiRootClassifierState addMetricOutputItem(LearningGenaiRootMetricOutput metricOutputItem) {
    if (this.metricOutput == null) {
      this.metricOutput = new ArrayList<>();
    }
    this.metricOutput.add(metricOutputItem);
    return this;
  }

  /**
   * Get metricOutput
   * @return metricOutput
   */
  @javax.annotation.Nullable
  public List<LearningGenaiRootMetricOutput> getMetricOutput() {
    return metricOutput;
  }

  public void setMetricOutput(List<LearningGenaiRootMetricOutput> metricOutput) {
    this.metricOutput = metricOutput;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LearningGenaiRootClassifierState learningGenaiRootClassifierState = (LearningGenaiRootClassifierState) o;
    return Objects.equals(this.dataProviderOutput, learningGenaiRootClassifierState.dataProviderOutput) &&
        Objects.equals(this.metricOutput, learningGenaiRootClassifierState.metricOutput);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dataProviderOutput, metricOutput);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LearningGenaiRootClassifierState {\n");
    sb.append("    dataProviderOutput: ").append(toIndentedString(dataProviderOutput)).append("\n");
    sb.append("    metricOutput: ").append(toIndentedString(metricOutput)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dataProviderOutput");
    openapiFields.add("metricOutput");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LearningGenaiRootClassifierState
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LearningGenaiRootClassifierState.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LearningGenaiRootClassifierState is not found in the empty JSON string", LearningGenaiRootClassifierState.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LearningGenaiRootClassifierState.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LearningGenaiRootClassifierState` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("dataProviderOutput") != null && !jsonObj.get("dataProviderOutput").isJsonNull()) {
        JsonArray jsonArraydataProviderOutput = jsonObj.getAsJsonArray("dataProviderOutput");
        if (jsonArraydataProviderOutput != null) {
          // ensure the json data is an array
          if (!jsonObj.get("dataProviderOutput").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `dataProviderOutput` to be an array in the JSON string but got `%s`", jsonObj.get("dataProviderOutput").toString()));
          }

          // validate the optional field `dataProviderOutput` (array)
          for (int i = 0; i < jsonArraydataProviderOutput.size(); i++) {
            LearningGenaiRootDataProviderOutput.validateJsonElement(jsonArraydataProviderOutput.get(i));
          };
        }
      }
      if (jsonObj.get("metricOutput") != null && !jsonObj.get("metricOutput").isJsonNull()) {
        JsonArray jsonArraymetricOutput = jsonObj.getAsJsonArray("metricOutput");
        if (jsonArraymetricOutput != null) {
          // ensure the json data is an array
          if (!jsonObj.get("metricOutput").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `metricOutput` to be an array in the JSON string but got `%s`", jsonObj.get("metricOutput").toString()));
          }

          // validate the optional field `metricOutput` (array)
          for (int i = 0; i < jsonArraymetricOutput.size(); i++) {
            LearningGenaiRootMetricOutput.validateJsonElement(jsonArraymetricOutput.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LearningGenaiRootClassifierState.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LearningGenaiRootClassifierState' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LearningGenaiRootClassifierState> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LearningGenaiRootClassifierState.class));

       return (TypeAdapter<T>) new TypeAdapter<LearningGenaiRootClassifierState>() {
           @Override
           public void write(JsonWriter out, LearningGenaiRootClassifierState value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LearningGenaiRootClassifierState read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LearningGenaiRootClassifierState given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LearningGenaiRootClassifierState
   * @throws IOException if the JSON string is invalid with respect to LearningGenaiRootClassifierState
   */
  public static LearningGenaiRootClassifierState fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LearningGenaiRootClassifierState.class);
  }

  /**
   * Convert an instance of LearningGenaiRootClassifierState to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

