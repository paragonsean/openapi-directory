/*
 * Vertex AI API
 * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Assigns input data to training, validation, and test sets based on the given filters, data pieces not matched by any filter are ignored. Currently only supported for Datasets containing DataItems. If any of the filters in this message are to match nothing, then they can be set as &#39;-&#39; (the minus sign). Supported only for unstructured Datasets.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:33:33.164817-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudAiplatformV1ExportFilterSplit {
  public static final String SERIALIZED_NAME_TEST_FILTER = "testFilter";
  @SerializedName(SERIALIZED_NAME_TEST_FILTER)
  private String testFilter;

  public static final String SERIALIZED_NAME_TRAINING_FILTER = "trainingFilter";
  @SerializedName(SERIALIZED_NAME_TRAINING_FILTER)
  private String trainingFilter;

  public static final String SERIALIZED_NAME_VALIDATION_FILTER = "validationFilter";
  @SerializedName(SERIALIZED_NAME_VALIDATION_FILTER)
  private String validationFilter;

  public GoogleCloudAiplatformV1ExportFilterSplit() {
  }

  public GoogleCloudAiplatformV1ExportFilterSplit testFilter(String testFilter) {
    this.testFilter = testFilter;
    return this;
  }

  /**
   * Required. A filter on DataItems of the Dataset. DataItems that match this filter are used to test the Model. A filter with same syntax as the one used in DatasetService.ListDataItems may be used. If a single DataItem is matched by more than one of the FilterSplit filters, then it is assigned to the first set that applies to it in the training, validation, test order.
   * @return testFilter
   */
  @javax.annotation.Nullable
  public String getTestFilter() {
    return testFilter;
  }

  public void setTestFilter(String testFilter) {
    this.testFilter = testFilter;
  }


  public GoogleCloudAiplatformV1ExportFilterSplit trainingFilter(String trainingFilter) {
    this.trainingFilter = trainingFilter;
    return this;
  }

  /**
   * Required. A filter on DataItems of the Dataset. DataItems that match this filter are used to train the Model. A filter with same syntax as the one used in DatasetService.ListDataItems may be used. If a single DataItem is matched by more than one of the FilterSplit filters, then it is assigned to the first set that applies to it in the training, validation, test order.
   * @return trainingFilter
   */
  @javax.annotation.Nullable
  public String getTrainingFilter() {
    return trainingFilter;
  }

  public void setTrainingFilter(String trainingFilter) {
    this.trainingFilter = trainingFilter;
  }


  public GoogleCloudAiplatformV1ExportFilterSplit validationFilter(String validationFilter) {
    this.validationFilter = validationFilter;
    return this;
  }

  /**
   * Required. A filter on DataItems of the Dataset. DataItems that match this filter are used to validate the Model. A filter with same syntax as the one used in DatasetService.ListDataItems may be used. If a single DataItem is matched by more than one of the FilterSplit filters, then it is assigned to the first set that applies to it in the training, validation, test order.
   * @return validationFilter
   */
  @javax.annotation.Nullable
  public String getValidationFilter() {
    return validationFilter;
  }

  public void setValidationFilter(String validationFilter) {
    this.validationFilter = validationFilter;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudAiplatformV1ExportFilterSplit googleCloudAiplatformV1ExportFilterSplit = (GoogleCloudAiplatformV1ExportFilterSplit) o;
    return Objects.equals(this.testFilter, googleCloudAiplatformV1ExportFilterSplit.testFilter) &&
        Objects.equals(this.trainingFilter, googleCloudAiplatformV1ExportFilterSplit.trainingFilter) &&
        Objects.equals(this.validationFilter, googleCloudAiplatformV1ExportFilterSplit.validationFilter);
  }

  @Override
  public int hashCode() {
    return Objects.hash(testFilter, trainingFilter, validationFilter);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudAiplatformV1ExportFilterSplit {\n");
    sb.append("    testFilter: ").append(toIndentedString(testFilter)).append("\n");
    sb.append("    trainingFilter: ").append(toIndentedString(trainingFilter)).append("\n");
    sb.append("    validationFilter: ").append(toIndentedString(validationFilter)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("testFilter");
    openapiFields.add("trainingFilter");
    openapiFields.add("validationFilter");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudAiplatformV1ExportFilterSplit
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudAiplatformV1ExportFilterSplit.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudAiplatformV1ExportFilterSplit is not found in the empty JSON string", GoogleCloudAiplatformV1ExportFilterSplit.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudAiplatformV1ExportFilterSplit.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudAiplatformV1ExportFilterSplit` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("testFilter") != null && !jsonObj.get("testFilter").isJsonNull()) && !jsonObj.get("testFilter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `testFilter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("testFilter").toString()));
      }
      if ((jsonObj.get("trainingFilter") != null && !jsonObj.get("trainingFilter").isJsonNull()) && !jsonObj.get("trainingFilter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `trainingFilter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("trainingFilter").toString()));
      }
      if ((jsonObj.get("validationFilter") != null && !jsonObj.get("validationFilter").isJsonNull()) && !jsonObj.get("validationFilter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `validationFilter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("validationFilter").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudAiplatformV1ExportFilterSplit.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudAiplatformV1ExportFilterSplit' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudAiplatformV1ExportFilterSplit> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudAiplatformV1ExportFilterSplit.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudAiplatformV1ExportFilterSplit>() {
           @Override
           public void write(JsonWriter out, GoogleCloudAiplatformV1ExportFilterSplit value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudAiplatformV1ExportFilterSplit read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudAiplatformV1ExportFilterSplit given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudAiplatformV1ExportFilterSplit
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudAiplatformV1ExportFilterSplit
   */
  public static GoogleCloudAiplatformV1ExportFilterSplit fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudAiplatformV1ExportFilterSplit.class);
  }

  /**
   * Convert an instance of GoogleCloudAiplatformV1ExportFilterSplit to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

