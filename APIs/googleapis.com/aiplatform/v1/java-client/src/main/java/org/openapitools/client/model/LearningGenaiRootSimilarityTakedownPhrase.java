/*
 * Vertex AI API
 * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Each SimilarityTakedownPhrase treats a logical group of blocked and allowed phrases together along with a corresponding punt If the closest matching response is of the allowed type, we allow the response If the closest matching response is of the blocked type, we block the response. eg: Blocked phrase - \&quot;All lives matter\&quot;
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:33:33.164817-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LearningGenaiRootSimilarityTakedownPhrase {
  public static final String SERIALIZED_NAME_BLOCKED_PHRASE = "blockedPhrase";
  @SerializedName(SERIALIZED_NAME_BLOCKED_PHRASE)
  private String blockedPhrase;

  public LearningGenaiRootSimilarityTakedownPhrase() {
  }

  public LearningGenaiRootSimilarityTakedownPhrase blockedPhrase(String blockedPhrase) {
    this.blockedPhrase = blockedPhrase;
    return this;
  }

  /**
   * Get blockedPhrase
   * @return blockedPhrase
   */
  @javax.annotation.Nullable
  public String getBlockedPhrase() {
    return blockedPhrase;
  }

  public void setBlockedPhrase(String blockedPhrase) {
    this.blockedPhrase = blockedPhrase;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LearningGenaiRootSimilarityTakedownPhrase learningGenaiRootSimilarityTakedownPhrase = (LearningGenaiRootSimilarityTakedownPhrase) o;
    return Objects.equals(this.blockedPhrase, learningGenaiRootSimilarityTakedownPhrase.blockedPhrase);
  }

  @Override
  public int hashCode() {
    return Objects.hash(blockedPhrase);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LearningGenaiRootSimilarityTakedownPhrase {\n");
    sb.append("    blockedPhrase: ").append(toIndentedString(blockedPhrase)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("blockedPhrase");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LearningGenaiRootSimilarityTakedownPhrase
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LearningGenaiRootSimilarityTakedownPhrase.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LearningGenaiRootSimilarityTakedownPhrase is not found in the empty JSON string", LearningGenaiRootSimilarityTakedownPhrase.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LearningGenaiRootSimilarityTakedownPhrase.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LearningGenaiRootSimilarityTakedownPhrase` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("blockedPhrase") != null && !jsonObj.get("blockedPhrase").isJsonNull()) && !jsonObj.get("blockedPhrase").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `blockedPhrase` to be a primitive type in the JSON string but got `%s`", jsonObj.get("blockedPhrase").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LearningGenaiRootSimilarityTakedownPhrase.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LearningGenaiRootSimilarityTakedownPhrase' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LearningGenaiRootSimilarityTakedownPhrase> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LearningGenaiRootSimilarityTakedownPhrase.class));

       return (TypeAdapter<T>) new TypeAdapter<LearningGenaiRootSimilarityTakedownPhrase>() {
           @Override
           public void write(JsonWriter out, LearningGenaiRootSimilarityTakedownPhrase value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LearningGenaiRootSimilarityTakedownPhrase read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LearningGenaiRootSimilarityTakedownPhrase given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LearningGenaiRootSimilarityTakedownPhrase
   * @throws IOException if the JSON string is invalid with respect to LearningGenaiRootSimilarityTakedownPhrase
   */
  public static LearningGenaiRootSimilarityTakedownPhrase fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LearningGenaiRootSimilarityTakedownPhrase.class);
  }

  /**
   * Convert an instance of LearningGenaiRootSimilarityTakedownPhrase to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

