/*
 * Vertex AI API
 * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Harm type for text
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:33:33.164817-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LearningGenaiRootHarmGrailTextHarmType {
  /**
   * Gets or Sets harmType
   */
  @JsonAdapter(HarmTypeEnum.Adapter.class)
  public enum HarmTypeEnum {
    UNSPECIFIED("HARM_TYPE_UNSPECIFIED"),
    
    HATE("HARM_TYPE_HATE"),
    
    TOXICITY("HARM_TYPE_TOXICITY"),
    
    VIOLENCE("HARM_TYPE_VIOLENCE"),
    
    CSAI("HARM_TYPE_CSAI"),
    
    SEXUAL("HARM_TYPE_SEXUAL"),
    
    FRINGE("HARM_TYPE_FRINGE"),
    
    POLITICAL("HARM_TYPE_POLITICAL"),
    
    MEMORIZATION("HARM_TYPE_MEMORIZATION"),
    
    SPII("HARM_TYPE_SPII"),
    
    NEW_DANGEROUS("HARM_TYPE_NEW_DANGEROUS"),
    
    MEDICAL("HARM_TYPE_MEDICAL"),
    
    HARASSMENT("HARM_TYPE_HARASSMENT");

    private String value;

    HarmTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static HarmTypeEnum fromValue(String value) {
      for (HarmTypeEnum b : HarmTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<HarmTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final HarmTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public HarmTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return HarmTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      HarmTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_HARM_TYPE = "harmType";
  @SerializedName(SERIALIZED_NAME_HARM_TYPE)
  private List<HarmTypeEnum> harmType = new ArrayList<>();

  public LearningGenaiRootHarmGrailTextHarmType() {
  }

  public LearningGenaiRootHarmGrailTextHarmType harmType(List<HarmTypeEnum> harmType) {
    this.harmType = harmType;
    return this;
  }

  public LearningGenaiRootHarmGrailTextHarmType addHarmTypeItem(HarmTypeEnum harmTypeItem) {
    if (this.harmType == null) {
      this.harmType = new ArrayList<>();
    }
    this.harmType.add(harmTypeItem);
    return this;
  }

  /**
   * Get harmType
   * @return harmType
   */
  @javax.annotation.Nullable
  public List<HarmTypeEnum> getHarmType() {
    return harmType;
  }

  public void setHarmType(List<HarmTypeEnum> harmType) {
    this.harmType = harmType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LearningGenaiRootHarmGrailTextHarmType learningGenaiRootHarmGrailTextHarmType = (LearningGenaiRootHarmGrailTextHarmType) o;
    return Objects.equals(this.harmType, learningGenaiRootHarmGrailTextHarmType.harmType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(harmType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LearningGenaiRootHarmGrailTextHarmType {\n");
    sb.append("    harmType: ").append(toIndentedString(harmType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("harmType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LearningGenaiRootHarmGrailTextHarmType
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LearningGenaiRootHarmGrailTextHarmType.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LearningGenaiRootHarmGrailTextHarmType is not found in the empty JSON string", LearningGenaiRootHarmGrailTextHarmType.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LearningGenaiRootHarmGrailTextHarmType.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LearningGenaiRootHarmGrailTextHarmType` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("harmType") != null && !jsonObj.get("harmType").isJsonNull() && !jsonObj.get("harmType").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `harmType` to be an array in the JSON string but got `%s`", jsonObj.get("harmType").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LearningGenaiRootHarmGrailTextHarmType.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LearningGenaiRootHarmGrailTextHarmType' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LearningGenaiRootHarmGrailTextHarmType> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LearningGenaiRootHarmGrailTextHarmType.class));

       return (TypeAdapter<T>) new TypeAdapter<LearningGenaiRootHarmGrailTextHarmType>() {
           @Override
           public void write(JsonWriter out, LearningGenaiRootHarmGrailTextHarmType value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LearningGenaiRootHarmGrailTextHarmType read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LearningGenaiRootHarmGrailTextHarmType given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LearningGenaiRootHarmGrailTextHarmType
   * @throws IOException if the JSON string is invalid with respect to LearningGenaiRootHarmGrailTextHarmType
   */
  public static LearningGenaiRootHarmGrailTextHarmType fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LearningGenaiRootHarmGrailTextHarmType.class);
  }

  /**
   * Convert an instance of LearningGenaiRootHarmGrailTextHarmType to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

