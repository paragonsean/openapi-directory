/*
 * Vertex AI API
 * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.LearningGenaiRecitationSegmentResult;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The recitation result for one input
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:33:33.164817-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LearningGenaiRecitationRecitationResult {
  public static final String SERIALIZED_NAME_DYNAMIC_SEGMENT_RESULTS = "dynamicSegmentResults";
  @SerializedName(SERIALIZED_NAME_DYNAMIC_SEGMENT_RESULTS)
  private List<LearningGenaiRecitationSegmentResult> dynamicSegmentResults = new ArrayList<>();

  /**
   * The recitation action for one given input. When its segments contain different actions, the overall action will be returned in the precedence of BLOCK &gt; CITE &gt; NO_ACTION. When the given input is not found in any source, the recitation action will be NO_ACTION.
   */
  @JsonAdapter(RecitationActionEnum.Adapter.class)
  public enum RecitationActionEnum {
    ACTION_UNSPECIFIED("ACTION_UNSPECIFIED"),
    
    CITE("CITE"),
    
    BLOCK("BLOCK"),
    
    NO_ACTION("NO_ACTION"),
    
    EXEMPT_FOUND_IN_PROMPT("EXEMPT_FOUND_IN_PROMPT");

    private String value;

    RecitationActionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RecitationActionEnum fromValue(String value) {
      for (RecitationActionEnum b : RecitationActionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RecitationActionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RecitationActionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RecitationActionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RecitationActionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RecitationActionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RECITATION_ACTION = "recitationAction";
  @SerializedName(SERIALIZED_NAME_RECITATION_ACTION)
  private RecitationActionEnum recitationAction;

  public static final String SERIALIZED_NAME_TRAINING_SEGMENT_RESULTS = "trainingSegmentResults";
  @SerializedName(SERIALIZED_NAME_TRAINING_SEGMENT_RESULTS)
  private List<LearningGenaiRecitationSegmentResult> trainingSegmentResults = new ArrayList<>();

  public LearningGenaiRecitationRecitationResult() {
  }

  public LearningGenaiRecitationRecitationResult dynamicSegmentResults(List<LearningGenaiRecitationSegmentResult> dynamicSegmentResults) {
    this.dynamicSegmentResults = dynamicSegmentResults;
    return this;
  }

  public LearningGenaiRecitationRecitationResult addDynamicSegmentResultsItem(LearningGenaiRecitationSegmentResult dynamicSegmentResultsItem) {
    if (this.dynamicSegmentResults == null) {
      this.dynamicSegmentResults = new ArrayList<>();
    }
    this.dynamicSegmentResults.add(dynamicSegmentResultsItem);
    return this;
  }

  /**
   * Get dynamicSegmentResults
   * @return dynamicSegmentResults
   */
  @javax.annotation.Nullable
  public List<LearningGenaiRecitationSegmentResult> getDynamicSegmentResults() {
    return dynamicSegmentResults;
  }

  public void setDynamicSegmentResults(List<LearningGenaiRecitationSegmentResult> dynamicSegmentResults) {
    this.dynamicSegmentResults = dynamicSegmentResults;
  }


  public LearningGenaiRecitationRecitationResult recitationAction(RecitationActionEnum recitationAction) {
    this.recitationAction = recitationAction;
    return this;
  }

  /**
   * The recitation action for one given input. When its segments contain different actions, the overall action will be returned in the precedence of BLOCK &gt; CITE &gt; NO_ACTION. When the given input is not found in any source, the recitation action will be NO_ACTION.
   * @return recitationAction
   */
  @javax.annotation.Nullable
  public RecitationActionEnum getRecitationAction() {
    return recitationAction;
  }

  public void setRecitationAction(RecitationActionEnum recitationAction) {
    this.recitationAction = recitationAction;
  }


  public LearningGenaiRecitationRecitationResult trainingSegmentResults(List<LearningGenaiRecitationSegmentResult> trainingSegmentResults) {
    this.trainingSegmentResults = trainingSegmentResults;
    return this;
  }

  public LearningGenaiRecitationRecitationResult addTrainingSegmentResultsItem(LearningGenaiRecitationSegmentResult trainingSegmentResultsItem) {
    if (this.trainingSegmentResults == null) {
      this.trainingSegmentResults = new ArrayList<>();
    }
    this.trainingSegmentResults.add(trainingSegmentResultsItem);
    return this;
  }

  /**
   * Get trainingSegmentResults
   * @return trainingSegmentResults
   */
  @javax.annotation.Nullable
  public List<LearningGenaiRecitationSegmentResult> getTrainingSegmentResults() {
    return trainingSegmentResults;
  }

  public void setTrainingSegmentResults(List<LearningGenaiRecitationSegmentResult> trainingSegmentResults) {
    this.trainingSegmentResults = trainingSegmentResults;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LearningGenaiRecitationRecitationResult learningGenaiRecitationRecitationResult = (LearningGenaiRecitationRecitationResult) o;
    return Objects.equals(this.dynamicSegmentResults, learningGenaiRecitationRecitationResult.dynamicSegmentResults) &&
        Objects.equals(this.recitationAction, learningGenaiRecitationRecitationResult.recitationAction) &&
        Objects.equals(this.trainingSegmentResults, learningGenaiRecitationRecitationResult.trainingSegmentResults);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dynamicSegmentResults, recitationAction, trainingSegmentResults);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LearningGenaiRecitationRecitationResult {\n");
    sb.append("    dynamicSegmentResults: ").append(toIndentedString(dynamicSegmentResults)).append("\n");
    sb.append("    recitationAction: ").append(toIndentedString(recitationAction)).append("\n");
    sb.append("    trainingSegmentResults: ").append(toIndentedString(trainingSegmentResults)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dynamicSegmentResults");
    openapiFields.add("recitationAction");
    openapiFields.add("trainingSegmentResults");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LearningGenaiRecitationRecitationResult
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LearningGenaiRecitationRecitationResult.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LearningGenaiRecitationRecitationResult is not found in the empty JSON string", LearningGenaiRecitationRecitationResult.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LearningGenaiRecitationRecitationResult.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LearningGenaiRecitationRecitationResult` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("dynamicSegmentResults") != null && !jsonObj.get("dynamicSegmentResults").isJsonNull()) {
        JsonArray jsonArraydynamicSegmentResults = jsonObj.getAsJsonArray("dynamicSegmentResults");
        if (jsonArraydynamicSegmentResults != null) {
          // ensure the json data is an array
          if (!jsonObj.get("dynamicSegmentResults").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `dynamicSegmentResults` to be an array in the JSON string but got `%s`", jsonObj.get("dynamicSegmentResults").toString()));
          }

          // validate the optional field `dynamicSegmentResults` (array)
          for (int i = 0; i < jsonArraydynamicSegmentResults.size(); i++) {
            LearningGenaiRecitationSegmentResult.validateJsonElement(jsonArraydynamicSegmentResults.get(i));
          };
        }
      }
      if ((jsonObj.get("recitationAction") != null && !jsonObj.get("recitationAction").isJsonNull()) && !jsonObj.get("recitationAction").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recitationAction` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recitationAction").toString()));
      }
      // validate the optional field `recitationAction`
      if (jsonObj.get("recitationAction") != null && !jsonObj.get("recitationAction").isJsonNull()) {
        RecitationActionEnum.validateJsonElement(jsonObj.get("recitationAction"));
      }
      if (jsonObj.get("trainingSegmentResults") != null && !jsonObj.get("trainingSegmentResults").isJsonNull()) {
        JsonArray jsonArraytrainingSegmentResults = jsonObj.getAsJsonArray("trainingSegmentResults");
        if (jsonArraytrainingSegmentResults != null) {
          // ensure the json data is an array
          if (!jsonObj.get("trainingSegmentResults").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `trainingSegmentResults` to be an array in the JSON string but got `%s`", jsonObj.get("trainingSegmentResults").toString()));
          }

          // validate the optional field `trainingSegmentResults` (array)
          for (int i = 0; i < jsonArraytrainingSegmentResults.size(); i++) {
            LearningGenaiRecitationSegmentResult.validateJsonElement(jsonArraytrainingSegmentResults.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LearningGenaiRecitationRecitationResult.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LearningGenaiRecitationRecitationResult' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LearningGenaiRecitationRecitationResult> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LearningGenaiRecitationRecitationResult.class));

       return (TypeAdapter<T>) new TypeAdapter<LearningGenaiRecitationRecitationResult>() {
           @Override
           public void write(JsonWriter out, LearningGenaiRecitationRecitationResult value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LearningGenaiRecitationRecitationResult read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LearningGenaiRecitationRecitationResult given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LearningGenaiRecitationRecitationResult
   * @throws IOException if the JSON string is invalid with respect to LearningGenaiRecitationRecitationResult
   */
  public static LearningGenaiRecitationRecitationResult fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LearningGenaiRecitationRecitationResult.class);
  }

  /**
   * Convert an instance of LearningGenaiRecitationRecitationResult to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

