/*
 * Vertex AI API
 * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An RAI signal for a single category.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:33:33.164817-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CloudAiNlLlmProtoServiceRaiSignal {
  /**
   * The confidence level for the RAI category.
   */
  @JsonAdapter(ConfidenceEnum.Adapter.class)
  public enum ConfidenceEnum {
    UNSPECIFIED("CONFIDENCE_UNSPECIFIED"),
    
    NONE("CONFIDENCE_NONE"),
    
    LOW("CONFIDENCE_LOW"),
    
    MEDIUM("CONFIDENCE_MEDIUM"),
    
    HIGH("CONFIDENCE_HIGH");

    private String value;

    ConfidenceEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ConfidenceEnum fromValue(String value) {
      for (ConfidenceEnum b : ConfidenceEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ConfidenceEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ConfidenceEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ConfidenceEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ConfidenceEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ConfidenceEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CONFIDENCE = "confidence";
  @SerializedName(SERIALIZED_NAME_CONFIDENCE)
  private ConfidenceEnum confidence;

  public static final String SERIALIZED_NAME_FLAGGED = "flagged";
  @SerializedName(SERIALIZED_NAME_FLAGGED)
  private Boolean flagged;

  /**
   * The RAI category.
   */
  @JsonAdapter(RaiCategoryEnum.Adapter.class)
  public enum RaiCategoryEnum {
    RAI_CATEGORY_UNSPECIFIED("RAI_CATEGORY_UNSPECIFIED"),
    
    TOXIC("TOXIC"),
    
    SEXUALLY_EXPLICIT("SEXUALLY_EXPLICIT"),
    
    HATE_SPEECH("HATE_SPEECH"),
    
    VIOLENT("VIOLENT"),
    
    PROFANITY("PROFANITY"),
    
    HARASSMENT("HARASSMENT"),
    
    DEATH_HARM_TRAGEDY("DEATH_HARM_TRAGEDY"),
    
    FIREARMS_WEAPONS("FIREARMS_WEAPONS"),
    
    PUBLIC_SAFETY("PUBLIC_SAFETY"),
    
    HEALTH("HEALTH"),
    
    RELIGIOUS_BELIEF("RELIGIOUS_BELIEF"),
    
    ILLICIT_DRUGS("ILLICIT_DRUGS"),
    
    WAR_CONFLICT("WAR_CONFLICT"),
    
    POLITICS("POLITICS"),
    
    FINANCE("FINANCE"),
    
    LEGAL("LEGAL"),
    
    CSAI("CSAI"),
    
    FRINGE("FRINGE"),
    
    THREAT("THREAT"),
    
    SEVERE_TOXICITY("SEVERE_TOXICITY"),
    
    TOXICITY("TOXICITY"),
    
    SEXUAL("SEXUAL"),
    
    INSULT("INSULT"),
    
    DEROGATORY("DEROGATORY"),
    
    IDENTITY_ATTACK("IDENTITY_ATTACK"),
    
    VIOLENCE_ABUSE("VIOLENCE_ABUSE"),
    
    OBSCENE("OBSCENE"),
    
    DRUGS("DRUGS"),
    
    CSAM("CSAM"),
    
    SPII("SPII"),
    
    DANGEROUS_CONTENT("DANGEROUS_CONTENT"),
    
    DANGEROUS_CONTENT_SEVERITY("DANGEROUS_CONTENT_SEVERITY"),
    
    INSULT_SEVERITY("INSULT_SEVERITY"),
    
    DEROGATORY_SEVERITY("DEROGATORY_SEVERITY"),
    
    SEXUAL_SEVERITY("SEXUAL_SEVERITY");

    private String value;

    RaiCategoryEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RaiCategoryEnum fromValue(String value) {
      for (RaiCategoryEnum b : RaiCategoryEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RaiCategoryEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RaiCategoryEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RaiCategoryEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RaiCategoryEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RaiCategoryEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RAI_CATEGORY = "raiCategory";
  @SerializedName(SERIALIZED_NAME_RAI_CATEGORY)
  private RaiCategoryEnum raiCategory;

  public static final String SERIALIZED_NAME_SCORE = "score";
  @SerializedName(SERIALIZED_NAME_SCORE)
  private Float score;

  public CloudAiNlLlmProtoServiceRaiSignal() {
  }

  public CloudAiNlLlmProtoServiceRaiSignal confidence(ConfidenceEnum confidence) {
    this.confidence = confidence;
    return this;
  }

  /**
   * The confidence level for the RAI category.
   * @return confidence
   */
  @javax.annotation.Nullable
  public ConfidenceEnum getConfidence() {
    return confidence;
  }

  public void setConfidence(ConfidenceEnum confidence) {
    this.confidence = confidence;
  }


  public CloudAiNlLlmProtoServiceRaiSignal flagged(Boolean flagged) {
    this.flagged = flagged;
    return this;
  }

  /**
   * Whether the category is flagged as being present. Currently, this is set to true if score &gt;&#x3D; 0.5.
   * @return flagged
   */
  @javax.annotation.Nullable
  public Boolean getFlagged() {
    return flagged;
  }

  public void setFlagged(Boolean flagged) {
    this.flagged = flagged;
  }


  public CloudAiNlLlmProtoServiceRaiSignal raiCategory(RaiCategoryEnum raiCategory) {
    this.raiCategory = raiCategory;
    return this;
  }

  /**
   * The RAI category.
   * @return raiCategory
   */
  @javax.annotation.Nullable
  public RaiCategoryEnum getRaiCategory() {
    return raiCategory;
  }

  public void setRaiCategory(RaiCategoryEnum raiCategory) {
    this.raiCategory = raiCategory;
  }


  public CloudAiNlLlmProtoServiceRaiSignal score(Float score) {
    this.score = score;
    return this;
  }

  /**
   * The score for the category, in the range [0.0, 1.0].
   * @return score
   */
  @javax.annotation.Nullable
  public Float getScore() {
    return score;
  }

  public void setScore(Float score) {
    this.score = score;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CloudAiNlLlmProtoServiceRaiSignal cloudAiNlLlmProtoServiceRaiSignal = (CloudAiNlLlmProtoServiceRaiSignal) o;
    return Objects.equals(this.confidence, cloudAiNlLlmProtoServiceRaiSignal.confidence) &&
        Objects.equals(this.flagged, cloudAiNlLlmProtoServiceRaiSignal.flagged) &&
        Objects.equals(this.raiCategory, cloudAiNlLlmProtoServiceRaiSignal.raiCategory) &&
        Objects.equals(this.score, cloudAiNlLlmProtoServiceRaiSignal.score);
  }

  @Override
  public int hashCode() {
    return Objects.hash(confidence, flagged, raiCategory, score);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CloudAiNlLlmProtoServiceRaiSignal {\n");
    sb.append("    confidence: ").append(toIndentedString(confidence)).append("\n");
    sb.append("    flagged: ").append(toIndentedString(flagged)).append("\n");
    sb.append("    raiCategory: ").append(toIndentedString(raiCategory)).append("\n");
    sb.append("    score: ").append(toIndentedString(score)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("confidence");
    openapiFields.add("flagged");
    openapiFields.add("raiCategory");
    openapiFields.add("score");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CloudAiNlLlmProtoServiceRaiSignal
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CloudAiNlLlmProtoServiceRaiSignal.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CloudAiNlLlmProtoServiceRaiSignal is not found in the empty JSON string", CloudAiNlLlmProtoServiceRaiSignal.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CloudAiNlLlmProtoServiceRaiSignal.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CloudAiNlLlmProtoServiceRaiSignal` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("confidence") != null && !jsonObj.get("confidence").isJsonNull()) && !jsonObj.get("confidence").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `confidence` to be a primitive type in the JSON string but got `%s`", jsonObj.get("confidence").toString()));
      }
      // validate the optional field `confidence`
      if (jsonObj.get("confidence") != null && !jsonObj.get("confidence").isJsonNull()) {
        ConfidenceEnum.validateJsonElement(jsonObj.get("confidence"));
      }
      if ((jsonObj.get("raiCategory") != null && !jsonObj.get("raiCategory").isJsonNull()) && !jsonObj.get("raiCategory").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `raiCategory` to be a primitive type in the JSON string but got `%s`", jsonObj.get("raiCategory").toString()));
      }
      // validate the optional field `raiCategory`
      if (jsonObj.get("raiCategory") != null && !jsonObj.get("raiCategory").isJsonNull()) {
        RaiCategoryEnum.validateJsonElement(jsonObj.get("raiCategory"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CloudAiNlLlmProtoServiceRaiSignal.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CloudAiNlLlmProtoServiceRaiSignal' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CloudAiNlLlmProtoServiceRaiSignal> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CloudAiNlLlmProtoServiceRaiSignal.class));

       return (TypeAdapter<T>) new TypeAdapter<CloudAiNlLlmProtoServiceRaiSignal>() {
           @Override
           public void write(JsonWriter out, CloudAiNlLlmProtoServiceRaiSignal value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CloudAiNlLlmProtoServiceRaiSignal read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CloudAiNlLlmProtoServiceRaiSignal given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CloudAiNlLlmProtoServiceRaiSignal
   * @throws IOException if the JSON string is invalid with respect to CloudAiNlLlmProtoServiceRaiSignal
   */
  public static CloudAiNlLlmProtoServiceRaiSignal fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CloudAiNlLlmProtoServiceRaiSignal.class);
  }

  /**
   * Convert an instance of CloudAiNlLlmProtoServiceRaiSignal to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

