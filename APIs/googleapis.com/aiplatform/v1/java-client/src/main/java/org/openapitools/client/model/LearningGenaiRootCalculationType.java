/*
 * Vertex AI API
 * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The type used for final weights calculation.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:33:33.164817-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LearningGenaiRootCalculationType {
  /**
   * Gets or Sets scoreType
   */
  @JsonAdapter(ScoreTypeEnum.Adapter.class)
  public enum ScoreTypeEnum {
    UNKNOWN("TYPE_UNKNOWN"),
    
    SAFE("TYPE_SAFE"),
    
    POLICY("TYPE_POLICY"),
    
    GENERATION("TYPE_GENERATION");

    private String value;

    ScoreTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ScoreTypeEnum fromValue(String value) {
      for (ScoreTypeEnum b : ScoreTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ScoreTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ScoreTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ScoreTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ScoreTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ScoreTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SCORE_TYPE = "scoreType";
  @SerializedName(SERIALIZED_NAME_SCORE_TYPE)
  private ScoreTypeEnum scoreType;

  public static final String SERIALIZED_NAME_WEIGHTS = "weights";
  @SerializedName(SERIALIZED_NAME_WEIGHTS)
  private Double weights;

  public LearningGenaiRootCalculationType() {
  }

  public LearningGenaiRootCalculationType scoreType(ScoreTypeEnum scoreType) {
    this.scoreType = scoreType;
    return this;
  }

  /**
   * Get scoreType
   * @return scoreType
   */
  @javax.annotation.Nullable
  public ScoreTypeEnum getScoreType() {
    return scoreType;
  }

  public void setScoreType(ScoreTypeEnum scoreType) {
    this.scoreType = scoreType;
  }


  public LearningGenaiRootCalculationType weights(Double weights) {
    this.weights = weights;
    return this;
  }

  /**
   * Get weights
   * @return weights
   */
  @javax.annotation.Nullable
  public Double getWeights() {
    return weights;
  }

  public void setWeights(Double weights) {
    this.weights = weights;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LearningGenaiRootCalculationType learningGenaiRootCalculationType = (LearningGenaiRootCalculationType) o;
    return Objects.equals(this.scoreType, learningGenaiRootCalculationType.scoreType) &&
        Objects.equals(this.weights, learningGenaiRootCalculationType.weights);
  }

  @Override
  public int hashCode() {
    return Objects.hash(scoreType, weights);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LearningGenaiRootCalculationType {\n");
    sb.append("    scoreType: ").append(toIndentedString(scoreType)).append("\n");
    sb.append("    weights: ").append(toIndentedString(weights)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("scoreType");
    openapiFields.add("weights");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LearningGenaiRootCalculationType
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LearningGenaiRootCalculationType.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LearningGenaiRootCalculationType is not found in the empty JSON string", LearningGenaiRootCalculationType.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LearningGenaiRootCalculationType.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LearningGenaiRootCalculationType` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("scoreType") != null && !jsonObj.get("scoreType").isJsonNull()) && !jsonObj.get("scoreType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scoreType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scoreType").toString()));
      }
      // validate the optional field `scoreType`
      if (jsonObj.get("scoreType") != null && !jsonObj.get("scoreType").isJsonNull()) {
        ScoreTypeEnum.validateJsonElement(jsonObj.get("scoreType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LearningGenaiRootCalculationType.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LearningGenaiRootCalculationType' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LearningGenaiRootCalculationType> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LearningGenaiRootCalculationType.class));

       return (TypeAdapter<T>) new TypeAdapter<LearningGenaiRootCalculationType>() {
           @Override
           public void write(JsonWriter out, LearningGenaiRootCalculationType value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LearningGenaiRootCalculationType read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LearningGenaiRootCalculationType given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LearningGenaiRootCalculationType
   * @throws IOException if the JSON string is invalid with respect to LearningGenaiRootCalculationType
   */
  public static LearningGenaiRootCalculationType fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LearningGenaiRootCalculationType.class);
  }

  /**
   * Convert an instance of LearningGenaiRootCalculationType to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

