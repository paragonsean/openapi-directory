/*
 * Vertex AI API
 * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Instance of a general MetadataSchema.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:33:33.164817-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudAiplatformV1MetadataSchema {
  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private String createTime;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_SCHEMA = "schema";
  @SerializedName(SERIALIZED_NAME_SCHEMA)
  private String schema;

  /**
   * The type of the MetadataSchema. This is a property that identifies which metadata types will use the MetadataSchema.
   */
  @JsonAdapter(SchemaTypeEnum.Adapter.class)
  public enum SchemaTypeEnum {
    METADATA_SCHEMA_TYPE_UNSPECIFIED("METADATA_SCHEMA_TYPE_UNSPECIFIED"),
    
    ARTIFACT_TYPE("ARTIFACT_TYPE"),
    
    EXECUTION_TYPE("EXECUTION_TYPE"),
    
    CONTEXT_TYPE("CONTEXT_TYPE");

    private String value;

    SchemaTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SchemaTypeEnum fromValue(String value) {
      for (SchemaTypeEnum b : SchemaTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SchemaTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SchemaTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SchemaTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SchemaTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SchemaTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SCHEMA_TYPE = "schemaType";
  @SerializedName(SERIALIZED_NAME_SCHEMA_TYPE)
  private SchemaTypeEnum schemaType;

  public static final String SERIALIZED_NAME_SCHEMA_VERSION = "schemaVersion";
  @SerializedName(SERIALIZED_NAME_SCHEMA_VERSION)
  private String schemaVersion;

  public GoogleCloudAiplatformV1MetadataSchema() {
  }

  public GoogleCloudAiplatformV1MetadataSchema(
     String createTime, 
     String name
  ) {
    this();
    this.createTime = createTime;
    this.name = name;
  }

  /**
   * Output only. Timestamp when this MetadataSchema was created.
   * @return createTime
   */
  @javax.annotation.Nullable
  public String getCreateTime() {
    return createTime;
  }



  public GoogleCloudAiplatformV1MetadataSchema description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Description of the Metadata Schema
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  /**
   * Output only. The resource name of the MetadataSchema.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }



  public GoogleCloudAiplatformV1MetadataSchema schema(String schema) {
    this.schema = schema;
    return this;
  }

  /**
   * Required. The raw YAML string representation of the MetadataSchema. The combination of [MetadataSchema.version] and the schema name given by &#x60;title&#x60; in [MetadataSchema.schema] must be unique within a MetadataStore. The schema is defined as an OpenAPI 3.0.2 [MetadataSchema Object](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.2.md#schemaObject)
   * @return schema
   */
  @javax.annotation.Nullable
  public String getSchema() {
    return schema;
  }

  public void setSchema(String schema) {
    this.schema = schema;
  }


  public GoogleCloudAiplatformV1MetadataSchema schemaType(SchemaTypeEnum schemaType) {
    this.schemaType = schemaType;
    return this;
  }

  /**
   * The type of the MetadataSchema. This is a property that identifies which metadata types will use the MetadataSchema.
   * @return schemaType
   */
  @javax.annotation.Nullable
  public SchemaTypeEnum getSchemaType() {
    return schemaType;
  }

  public void setSchemaType(SchemaTypeEnum schemaType) {
    this.schemaType = schemaType;
  }


  public GoogleCloudAiplatformV1MetadataSchema schemaVersion(String schemaVersion) {
    this.schemaVersion = schemaVersion;
    return this;
  }

  /**
   * The version of the MetadataSchema. The version&#39;s format must match the following regular expression: &#x60;^[0-9]+.+.+$&#x60;, which would allow to order/compare different versions. Example: 1.0.0, 1.0.1, etc.
   * @return schemaVersion
   */
  @javax.annotation.Nullable
  public String getSchemaVersion() {
    return schemaVersion;
  }

  public void setSchemaVersion(String schemaVersion) {
    this.schemaVersion = schemaVersion;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudAiplatformV1MetadataSchema googleCloudAiplatformV1MetadataSchema = (GoogleCloudAiplatformV1MetadataSchema) o;
    return Objects.equals(this.createTime, googleCloudAiplatformV1MetadataSchema.createTime) &&
        Objects.equals(this.description, googleCloudAiplatformV1MetadataSchema.description) &&
        Objects.equals(this.name, googleCloudAiplatformV1MetadataSchema.name) &&
        Objects.equals(this.schema, googleCloudAiplatformV1MetadataSchema.schema) &&
        Objects.equals(this.schemaType, googleCloudAiplatformV1MetadataSchema.schemaType) &&
        Objects.equals(this.schemaVersion, googleCloudAiplatformV1MetadataSchema.schemaVersion);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createTime, description, name, schema, schemaType, schemaVersion);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudAiplatformV1MetadataSchema {\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    schema: ").append(toIndentedString(schema)).append("\n");
    sb.append("    schemaType: ").append(toIndentedString(schemaType)).append("\n");
    sb.append("    schemaVersion: ").append(toIndentedString(schemaVersion)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("createTime");
    openapiFields.add("description");
    openapiFields.add("name");
    openapiFields.add("schema");
    openapiFields.add("schemaType");
    openapiFields.add("schemaVersion");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudAiplatformV1MetadataSchema
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudAiplatformV1MetadataSchema.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudAiplatformV1MetadataSchema is not found in the empty JSON string", GoogleCloudAiplatformV1MetadataSchema.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudAiplatformV1MetadataSchema.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudAiplatformV1MetadataSchema` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("createTime") != null && !jsonObj.get("createTime").isJsonNull()) && !jsonObj.get("createTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createTime").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("schema") != null && !jsonObj.get("schema").isJsonNull()) && !jsonObj.get("schema").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `schema` to be a primitive type in the JSON string but got `%s`", jsonObj.get("schema").toString()));
      }
      if ((jsonObj.get("schemaType") != null && !jsonObj.get("schemaType").isJsonNull()) && !jsonObj.get("schemaType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `schemaType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("schemaType").toString()));
      }
      // validate the optional field `schemaType`
      if (jsonObj.get("schemaType") != null && !jsonObj.get("schemaType").isJsonNull()) {
        SchemaTypeEnum.validateJsonElement(jsonObj.get("schemaType"));
      }
      if ((jsonObj.get("schemaVersion") != null && !jsonObj.get("schemaVersion").isJsonNull()) && !jsonObj.get("schemaVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `schemaVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("schemaVersion").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudAiplatformV1MetadataSchema.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudAiplatformV1MetadataSchema' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudAiplatformV1MetadataSchema> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudAiplatformV1MetadataSchema.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudAiplatformV1MetadataSchema>() {
           @Override
           public void write(JsonWriter out, GoogleCloudAiplatformV1MetadataSchema value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudAiplatformV1MetadataSchema read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudAiplatformV1MetadataSchema given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudAiplatformV1MetadataSchema
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudAiplatformV1MetadataSchema
   */
  public static GoogleCloudAiplatformV1MetadataSchema fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudAiplatformV1MetadataSchema.class);
  }

  /**
   * Convert an instance of GoogleCloudAiplatformV1MetadataSchema to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

