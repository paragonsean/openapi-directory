/*
 * Vertex AI API
 * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GoogleCloudAiplatformV1EnvVar;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The spec of a Python packaged code.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:33:33.164817-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudAiplatformV1PythonPackageSpec {
  public static final String SERIALIZED_NAME_ARGS = "args";
  @SerializedName(SERIALIZED_NAME_ARGS)
  private List<String> args = new ArrayList<>();

  public static final String SERIALIZED_NAME_ENV = "env";
  @SerializedName(SERIALIZED_NAME_ENV)
  private List<GoogleCloudAiplatformV1EnvVar> env = new ArrayList<>();

  public static final String SERIALIZED_NAME_EXECUTOR_IMAGE_URI = "executorImageUri";
  @SerializedName(SERIALIZED_NAME_EXECUTOR_IMAGE_URI)
  private String executorImageUri;

  public static final String SERIALIZED_NAME_PACKAGE_URIS = "packageUris";
  @SerializedName(SERIALIZED_NAME_PACKAGE_URIS)
  private List<String> packageUris = new ArrayList<>();

  public static final String SERIALIZED_NAME_PYTHON_MODULE = "pythonModule";
  @SerializedName(SERIALIZED_NAME_PYTHON_MODULE)
  private String pythonModule;

  public GoogleCloudAiplatformV1PythonPackageSpec() {
  }

  public GoogleCloudAiplatformV1PythonPackageSpec args(List<String> args) {
    this.args = args;
    return this;
  }

  public GoogleCloudAiplatformV1PythonPackageSpec addArgsItem(String argsItem) {
    if (this.args == null) {
      this.args = new ArrayList<>();
    }
    this.args.add(argsItem);
    return this;
  }

  /**
   * Command line arguments to be passed to the Python task.
   * @return args
   */
  @javax.annotation.Nullable
  public List<String> getArgs() {
    return args;
  }

  public void setArgs(List<String> args) {
    this.args = args;
  }


  public GoogleCloudAiplatformV1PythonPackageSpec env(List<GoogleCloudAiplatformV1EnvVar> env) {
    this.env = env;
    return this;
  }

  public GoogleCloudAiplatformV1PythonPackageSpec addEnvItem(GoogleCloudAiplatformV1EnvVar envItem) {
    if (this.env == null) {
      this.env = new ArrayList<>();
    }
    this.env.add(envItem);
    return this;
  }

  /**
   * Environment variables to be passed to the python module. Maximum limit is 100.
   * @return env
   */
  @javax.annotation.Nullable
  public List<GoogleCloudAiplatformV1EnvVar> getEnv() {
    return env;
  }

  public void setEnv(List<GoogleCloudAiplatformV1EnvVar> env) {
    this.env = env;
  }


  public GoogleCloudAiplatformV1PythonPackageSpec executorImageUri(String executorImageUri) {
    this.executorImageUri = executorImageUri;
    return this;
  }

  /**
   * Required. The URI of a container image in Artifact Registry that will run the provided Python package. Vertex AI provides a wide range of executor images with pre-installed packages to meet users&#39; various use cases. See the list of [pre-built containers for training](https://cloud.google.com/vertex-ai/docs/training/pre-built-containers). You must use an image from this list.
   * @return executorImageUri
   */
  @javax.annotation.Nullable
  public String getExecutorImageUri() {
    return executorImageUri;
  }

  public void setExecutorImageUri(String executorImageUri) {
    this.executorImageUri = executorImageUri;
  }


  public GoogleCloudAiplatformV1PythonPackageSpec packageUris(List<String> packageUris) {
    this.packageUris = packageUris;
    return this;
  }

  public GoogleCloudAiplatformV1PythonPackageSpec addPackageUrisItem(String packageUrisItem) {
    if (this.packageUris == null) {
      this.packageUris = new ArrayList<>();
    }
    this.packageUris.add(packageUrisItem);
    return this;
  }

  /**
   * Required. The Google Cloud Storage location of the Python package files which are the training program and its dependent packages. The maximum number of package URIs is 100.
   * @return packageUris
   */
  @javax.annotation.Nullable
  public List<String> getPackageUris() {
    return packageUris;
  }

  public void setPackageUris(List<String> packageUris) {
    this.packageUris = packageUris;
  }


  public GoogleCloudAiplatformV1PythonPackageSpec pythonModule(String pythonModule) {
    this.pythonModule = pythonModule;
    return this;
  }

  /**
   * Required. The Python module name to run after installing the packages.
   * @return pythonModule
   */
  @javax.annotation.Nullable
  public String getPythonModule() {
    return pythonModule;
  }

  public void setPythonModule(String pythonModule) {
    this.pythonModule = pythonModule;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudAiplatformV1PythonPackageSpec googleCloudAiplatformV1PythonPackageSpec = (GoogleCloudAiplatformV1PythonPackageSpec) o;
    return Objects.equals(this.args, googleCloudAiplatformV1PythonPackageSpec.args) &&
        Objects.equals(this.env, googleCloudAiplatformV1PythonPackageSpec.env) &&
        Objects.equals(this.executorImageUri, googleCloudAiplatformV1PythonPackageSpec.executorImageUri) &&
        Objects.equals(this.packageUris, googleCloudAiplatformV1PythonPackageSpec.packageUris) &&
        Objects.equals(this.pythonModule, googleCloudAiplatformV1PythonPackageSpec.pythonModule);
  }

  @Override
  public int hashCode() {
    return Objects.hash(args, env, executorImageUri, packageUris, pythonModule);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudAiplatformV1PythonPackageSpec {\n");
    sb.append("    args: ").append(toIndentedString(args)).append("\n");
    sb.append("    env: ").append(toIndentedString(env)).append("\n");
    sb.append("    executorImageUri: ").append(toIndentedString(executorImageUri)).append("\n");
    sb.append("    packageUris: ").append(toIndentedString(packageUris)).append("\n");
    sb.append("    pythonModule: ").append(toIndentedString(pythonModule)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("args");
    openapiFields.add("env");
    openapiFields.add("executorImageUri");
    openapiFields.add("packageUris");
    openapiFields.add("pythonModule");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudAiplatformV1PythonPackageSpec
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudAiplatformV1PythonPackageSpec.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudAiplatformV1PythonPackageSpec is not found in the empty JSON string", GoogleCloudAiplatformV1PythonPackageSpec.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudAiplatformV1PythonPackageSpec.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudAiplatformV1PythonPackageSpec` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("args") != null && !jsonObj.get("args").isJsonNull() && !jsonObj.get("args").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `args` to be an array in the JSON string but got `%s`", jsonObj.get("args").toString()));
      }
      if (jsonObj.get("env") != null && !jsonObj.get("env").isJsonNull()) {
        JsonArray jsonArrayenv = jsonObj.getAsJsonArray("env");
        if (jsonArrayenv != null) {
          // ensure the json data is an array
          if (!jsonObj.get("env").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `env` to be an array in the JSON string but got `%s`", jsonObj.get("env").toString()));
          }

          // validate the optional field `env` (array)
          for (int i = 0; i < jsonArrayenv.size(); i++) {
            GoogleCloudAiplatformV1EnvVar.validateJsonElement(jsonArrayenv.get(i));
          };
        }
      }
      if ((jsonObj.get("executorImageUri") != null && !jsonObj.get("executorImageUri").isJsonNull()) && !jsonObj.get("executorImageUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `executorImageUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("executorImageUri").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("packageUris") != null && !jsonObj.get("packageUris").isJsonNull() && !jsonObj.get("packageUris").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `packageUris` to be an array in the JSON string but got `%s`", jsonObj.get("packageUris").toString()));
      }
      if ((jsonObj.get("pythonModule") != null && !jsonObj.get("pythonModule").isJsonNull()) && !jsonObj.get("pythonModule").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pythonModule` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pythonModule").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudAiplatformV1PythonPackageSpec.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudAiplatformV1PythonPackageSpec' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudAiplatformV1PythonPackageSpec> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudAiplatformV1PythonPackageSpec.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudAiplatformV1PythonPackageSpec>() {
           @Override
           public void write(JsonWriter out, GoogleCloudAiplatformV1PythonPackageSpec value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudAiplatformV1PythonPackageSpec read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudAiplatformV1PythonPackageSpec given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudAiplatformV1PythonPackageSpec
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudAiplatformV1PythonPackageSpec
   */
  public static GoogleCloudAiplatformV1PythonPackageSpec fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudAiplatformV1PythonPackageSpec.class);
  }

  /**
   * Convert an instance of GoogleCloudAiplatformV1PythonPackageSpec to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

