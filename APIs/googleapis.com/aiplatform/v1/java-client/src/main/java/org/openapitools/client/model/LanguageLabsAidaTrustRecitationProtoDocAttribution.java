/*
 * Vertex AI API
 * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.GoogleTypeDate;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The proto defines the attribution information for a document using whatever fields are most applicable for that document&#39;s datasource. For example, a Wikipedia article&#39;s attribution is in the form of its article title, a website is in the form of a URL, and a Github repo is in the form of a repo name. Next id: 30
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:33:33.164817-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LanguageLabsAidaTrustRecitationProtoDocAttribution {
  public static final String SERIALIZED_NAME_AMARNA_ID = "amarnaId";
  @SerializedName(SERIALIZED_NAME_AMARNA_ID)
  private String amarnaId;

  public static final String SERIALIZED_NAME_ARXIV_ID = "arxivId";
  @SerializedName(SERIALIZED_NAME_ARXIV_ID)
  private String arxivId;

  public static final String SERIALIZED_NAME_AUTHOR = "author";
  @SerializedName(SERIALIZED_NAME_AUTHOR)
  private String author;

  public static final String SERIALIZED_NAME_BIBKEY = "bibkey";
  @SerializedName(SERIALIZED_NAME_BIBKEY)
  private String bibkey;

  public static final String SERIALIZED_NAME_BIORXIV_ID = "biorxivId";
  @SerializedName(SERIALIZED_NAME_BIORXIV_ID)
  private String biorxivId;

  public static final String SERIALIZED_NAME_BOOK_TITLE = "bookTitle";
  @SerializedName(SERIALIZED_NAME_BOOK_TITLE)
  private String bookTitle;

  public static final String SERIALIZED_NAME_BOOK_VOLUME_ID = "bookVolumeId";
  @SerializedName(SERIALIZED_NAME_BOOK_VOLUME_ID)
  private String bookVolumeId;

  /**
   * Gets or Sets category
   */
  @JsonAdapter(CategoryEnum.Adapter.class)
  public enum CategoryEnum {
    UNSPECIFIED("CATEGORY_UNSPECIFIED"),
    
    NEWS("CATEGORY_NEWS"),
    
    NON_NEWS_WEBDOC("CATEGORY_NON_NEWS_WEBDOC"),
    
    UNKNOWN_MISSING_SIGNAL("CATEGORY_UNKNOWN_MISSING_SIGNAL");

    private String value;

    CategoryEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CategoryEnum fromValue(String value) {
      for (CategoryEnum b : CategoryEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CategoryEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CategoryEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CategoryEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CategoryEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CategoryEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CATEGORY = "category";
  @SerializedName(SERIALIZED_NAME_CATEGORY)
  private CategoryEnum category;

  public static final String SERIALIZED_NAME_CONVERSATION_ID = "conversationId";
  @SerializedName(SERIALIZED_NAME_CONVERSATION_ID)
  private String conversationId;

  /**
   * The dataset this document comes from.
   */
  @JsonAdapter(DatasetEnum.Adapter.class)
  public enum DatasetEnum {
    DATASET_UNSPECIFIED("DATASET_UNSPECIFIED"),
    
    WIKIPEDIA("WIKIPEDIA"),
    
    WEBDOCS("WEBDOCS"),
    
    WEBDOCS_FINETUNE("WEBDOCS_FINETUNE"),
    
    GITHUB_MIRROR("GITHUB_MIRROR"),
    
    BOOKS_FULL_VIEW("BOOKS_FULL_VIEW"),
    
    BOOKS_PRIVATE("BOOKS_PRIVATE"),
    
    GNEWS("GNEWS"),
    
    ULM_DOCJOINS("ULM_DOCJOINS"),
    
    ULM_DOCJOINS_DEDUPED("ULM_DOCJOINS_DEDUPED"),
    
    MEENA_FC("MEENA_FC"),
    
    PODCAST("PODCAST"),
    
    AQUA("AQUA"),
    
    WEB_ASR("WEB_ASR"),
    
    BARD_GOLDEN("BARD_GOLDEN"),
    
    COMMON_SENSE_REASONING("COMMON_SENSE_REASONING"),
    
    MATH("MATH"),
    
    MATH_REASONING("MATH_REASONING"),
    
    CLEAN_ARXIV("CLEAN_ARXIV"),
    
    LAMDA_FACTUALITY_E2_E_QUERY_GENERATION("LAMDA_FACTUALITY_E2E_QUERY_GENERATION"),
    
    LAMDA_FACTUALITY_E2_E_RESPONSE_GENERATION("LAMDA_FACTUALITY_E2E_RESPONSE_GENERATION"),
    
    MASSIVE_FORUM_THREAD_SCORED_BARD("MASSIVE_FORUM_THREAD_SCORED_BARD"),
    
    MASSIVE_FORUM_THREAD_SCORED_LONG_200("MASSIVE_FORUM_THREAD_SCORED_LONG_200"),
    
    MASSIVE_FORUM_THREAD_SCORED_LONG_500("MASSIVE_FORUM_THREAD_SCORED_LONG_500"),
    
    DOCUMENT_CHUNKS("DOCUMENT_CHUNKS"),
    
    MEENA_RESEARCH_PHASE_GOLDEN_MARKDOWN("MEENA_RESEARCH_PHASE_GOLDEN_MARKDOWN"),
    
    MEENA_RESEARCH_PHASE_GOOGLERS("MEENA_RESEARCH_PHASE_GOOGLERS"),
    
    MEENA_RESPONSE_SAFETY_HUMAN_GEN("MEENA_RESPONSE_SAFETY_HUMAN_GEN"),
    
    MEENA_RESPONSE_SAFETY_SCHEMA_NO_BROADCAST("MEENA_RESPONSE_SAFETY_SCHEMA_NO_BROADCAST"),
    
    MEENA_RESPONSE_SAFETY_V3_HUMAN_GEN2("MEENA_RESPONSE_SAFETY_V3_HUMAN_GEN2"),
    
    MEENA_RESPONSE_SAFETY_V3_SCHEMA_NO_BROADCAST("MEENA_RESPONSE_SAFETY_V3_SCHEMA_NO_BROADCAST"),
    
    LAMDA_FACTUALITY_TRIGGER("LAMDA_FACTUALITY_TRIGGER"),
    
    LAMDA_SAFETY_V2_SCHEMA_NO_BROADCAST("LAMDA_SAFETY_V2_SCHEMA_NO_BROADCAST"),
    
    LAMDA_SSI_DISCRIMINATIVE("LAMDA_SSI_DISCRIMINATIVE"),
    
    ASSISTANT_PERSONALITY_SAFETY("ASSISTANT_PERSONALITY_SAFETY"),
    
    PODCAST_FINETUNE_DIALOG("PODCAST_FINETUNE_DIALOG"),
    
    WORLD_QUERY_GENERATOR("WORLD_QUERY_GENERATOR"),
    
    C4_JOINED_DOCJOINS("C4_JOINED_DOCJOINS"),
    
    HOL4_THEORIES("HOL4_THEORIES"),
    
    HOL_LIGHT_THEORIES("HOL_LIGHT_THEORIES"),
    
    HOLSTEPS("HOLSTEPS"),
    
    ISABELLE_STEP("ISABELLE_STEP"),
    
    ISABELLE_THEORIES("ISABELLE_THEORIES"),
    
    LEAN_MATHLIB_THEORIES("LEAN_MATHLIB_THEORIES"),
    
    LEAN_STEP("LEAN_STEP"),
    
    MIZAR_THEORIES("MIZAR_THEORIES"),
    
    COQ_STEP("COQ_STEP"),
    
    COQ_THEORIES("COQ_THEORIES"),
    
    AMPS_KHAN("AMPS_KHAN"),
    
    AMPS_MATHEMATICA("AMPS_MATHEMATICA"),
    
    CODEY_CODE("CODEY_CODE"),
    
    CODE_QA_SE("CODE_QA_SE"),
    
    CODE_QA_SO("CODE_QA_SO"),
    
    CODE_QA_FT_FORMAT("CODE_QA_FT_FORMAT"),
    
    CODE_QA_FT_KNOWLEDGE("CODE_QA_FT_KNOWLEDGE"),
    
    CODE_QA_GITHUB_FILTERED_CODE("CODE_QA_GITHUB_FILTERED_CODE"),
    
    BARD_PERSONALITY_GOLDEN("BARD_PERSONALITY_GOLDEN"),
    
    ULM_DOCJOINS_WITH_URLS_EN("ULM_DOCJOINS_WITH_URLS_EN"),
    
    ULM_DOCJOINS_WITH_URLS_I18_N("ULM_DOCJOINS_WITH_URLS_I18N"),
    
    GOODALL_MTV5_GITHUB("GOODALL_MTV5_GITHUB"),
    
    GOODALL_MTV5_BOOKS("GOODALL_MTV5_BOOKS"),
    
    GOODALL_MTV5_C4("GOODALL_MTV5_C4"),
    
    GOODALL_MTV5_WIKIPEDIA("GOODALL_MTV5_WIKIPEDIA"),
    
    GOODALL_MW_TOP_100_B("GOODALL_MW_TOP_100B"),
    
    GOODALL_MW_STACK_EXCHANGE("GOODALL_MW_STACK_EXCHANGE"),
    
    GOODALL_MW_TOP_0_10_B("GOODALL_MW_TOP_0_10B"),
    
    GOODALL_MW_TOP_10_B_20_B("GOODALL_MW_TOP_10B_20B"),
    
    CODEY_NOTEBOOK_LM_PRETRAINING("CODEY_NOTEBOOK_LM_PRETRAINING"),
    
    VERTEX_SAFE_FLAN("VERTEX_SAFE_FLAN"),
    
    GITHUB_MIRROR_V1_0_1("GITHUB_MIRROR_V1_0_1"),
    
    GITHUB_MIRROR_V2_1_0("GITHUB_MIRROR_V2_1_0"),
    
    CMS_WIKIPEDIA_LANG_FILTERED("CMS_WIKIPEDIA_LANG_FILTERED"),
    
    CMS_STACKOVERFLOW_MULTILINGUAL("CMS_STACKOVERFLOW_MULTILINGUAL"),
    
    CMS_STACKEXCHANGE("CMS_STACKEXCHANGE"),
    
    PUBMED("PUBMED"),
    
    GEMINI_DOCJOINS_EN_TOP10_B_GCC("GEMINI_DOCJOINS_EN_TOP10B_GCC"),
    
    GEMINI_DOCJOINS_EN_TOP10_B_TOP20_B_GCC("GEMINI_DOCJOINS_EN_TOP10B_TOP20B_GCC"),
    
    GEMINI_DOCJOINS_EN_TOP20_B_TOP100_B_GCC("GEMINI_DOCJOINS_EN_TOP20B_TOP100B_GCC"),
    
    GEMINI_DOCJOINS_EN_TOP100_B_ALL_INDEXED_GCC("GEMINI_DOCJOINS_EN_TOP100B_ALL_INDEXED_GCC"),
    
    GEMINI_DOCJOINS_I18_N_TOP10_B_GCC("GEMINI_DOCJOINS_I18N_TOP10B_GCC"),
    
    GEMINI_DOCJOINS_I18_N_TOP10_B_TOP20_B_GCC("GEMINI_DOCJOINS_I18N_TOP10B_TOP20B_GCC"),
    
    GEMINI_DOCJOINS_I18_N_TOP20_B_TOP100_B_GCC("GEMINI_DOCJOINS_I18N_TOP20B_TOP100B_GCC"),
    
    SIMPLIFIED_HTML_V1_GCC("SIMPLIFIED_HTML_V1_GCC"),
    
    GEMINI_DOCJOINS_TOXICITY_TAGGED_GCC("GEMINI_DOCJOINS_TOXICITY_TAGGED_GCC"),
    
    CMS_GITHUB_V4("CMS_GITHUB_V4"),
    
    GITHUB_HTML_V4("GITHUB_HTML_V4"),
    
    GITHUB_OTHER_V4("GITHUB_OTHER_V4"),
    
    GITHUB_LONG_TAIL_V4("GITHUB_LONG_TAIL_V4"),
    
    CMS_GITHUB_MULTIFILE_V4("CMS_GITHUB_MULTIFILE_V4"),
    
    GITHUB_DIFFS_WITH_COMMIT_MESSAGE("GITHUB_DIFFS_WITH_COMMIT_MESSAGE"),
    
    ULM_ARXIV("ULM_ARXIV"),
    
    NONPUB_COPYRIGHT_BOOKS_V2_70_CONF_040623_LONG_DEDUP_ENONLY("NONPUB_COPYRIGHT_BOOKS_V2_70_CONF_040623_LONG_DEDUP_ENONLY"),
    
    NONPUB_COPYRIGHT_BOOKS_V2_70_CONF_040623_LONG_DEDUP_NONENONLY("NONPUB_COPYRIGHT_BOOKS_V2_70_CONF_040623_LONG_DEDUP_NONENONLY"),
    
    QUORA("QUORA"),
    
    PODCASTS_ROBOTSTXT("PODCASTS_ROBOTSTXT"),
    
    COMBINED_REDDIT("COMBINED_REDDIT"),
    
    CANARIES_SHUFFLED("CANARIES_SHUFFLED"),
    
    CLM_TRANSLATE_DATAV2_ALLTIERS_GCC_MIX("CLM_TRANSLATE_DATAV2_ALLTIERS_GCC_MIX"),
    
    TECHDOCS_DATA_SOURCE("TECHDOCS_DATA_SOURCE"),
    
    SCIENCE_PDF_70_M_DOCS_FILTERED("SCIENCE_PDF_70M_DOCS_FILTERED"),
    
    GEMINI_V1_CMS_WIKIPEDIA_LANG_FILTERED("GEMINI_V1_CMS_WIKIPEDIA_LANG_FILTERED"),
    
    GEMINI_V1_WIKIPEDIA_DIFFS("GEMINI_V1_WIKIPEDIA_DIFFS"),
    
    GEMINI_V1_DOCJOINS_EN_TOP10_B_GCC_NODEDUP_050523("GEMINI_V1_DOCJOINS_EN_TOP10B_GCC_NODEDUP_050523"),
    
    GEMINI_V1_DOCJOINS_EN_TOP10_B_TOP20_B_GCC_NODEDUP_050523("GEMINI_V1_DOCJOINS_EN_TOP10B_TOP20B_GCC_NODEDUP_050523"),
    
    GEMINI_V1_DOCJOINS_EN_TOP20_B_TOP100_B_GCC_NODEDUP_050523("GEMINI_V1_DOCJOINS_EN_TOP20B_TOP100B_GCC_NODEDUP_050523"),
    
    GEMINI_V1_DOCJOINS_EN_TOP100_B_ALL_INDEXED_GCC_NODEDUP_050523("GEMINI_V1_DOCJOINS_EN_TOP100B_ALL_INDEXED_GCC_NODEDUP_050523"),
    
    GEMINI_V1_DOCJOINS_I18_N_TOP10_B_GCC_050523("GEMINI_V1_DOCJOINS_I18N_TOP10B_GCC_050523"),
    
    GEMINI_V1_DOCJOINS_I18_N_TOP10_B_TOP20_B_GCC_050523("GEMINI_V1_DOCJOINS_I18N_TOP10B_TOP20B_GCC_050523"),
    
    GEMINI_V1_DOCJOINS_I18_N_TOP20_B_TOP100_B_GCC_050523("GEMINI_V1_DOCJOINS_I18N_TOP20B_TOP100B_GCC_050523"),
    
    GEMINI_V1_SIMPLIFIED_HTML_V2_GCC("GEMINI_V1_SIMPLIFIED_HTML_V2_GCC"),
    
    GEMINI_V1_CMS_STACKOVERFLOW_MULTILINGUAL_V2("GEMINI_V1_CMS_STACKOVERFLOW_MULTILINGUAL_V2"),
    
    GEMINI_V1_CMS_STACKEXCHANGE_DECONT("GEMINI_V1_CMS_STACKEXCHANGE_DECONT"),
    
    GEMINI_V1_QUORA("GEMINI_V1_QUORA"),
    
    GEMINI_V1_COMBINED_REDDIT("GEMINI_V1_COMBINED_REDDIT"),
    
    GEMINI_V1_DOCJOIN_100_B_EN_TOXICITY_TAGGED_GCC_FIXED_TAGS("GEMINI_V1_DOCJOIN_100B_EN_TOXICITY_TAGGED_GCC_FIXED_TAGS"),
    
    GEMINI_V1_PUBMED("GEMINI_V1_PUBMED"),
    
    GEMINI_V1_WEB_MATH_V2("GEMINI_V1_WEB_MATH_V2"),
    
    GEMINI_V1_CMS_GITHUB_V7("GEMINI_V1_CMS_GITHUB_V7"),
    
    GEMINI_V1_CMS_GITHUB_DECONTAMINATED_V_7("GEMINI_V1_CMS_GITHUB_DECONTAMINATED_V_7"),
    
    GEMINI_V1_GITHUB_DIFF_WITH_COMMIT_MESSAGE_V2("GEMINI_V1_GITHUB_DIFF_WITH_COMMIT_MESSAGE_V2"),
    
    GEMINI_V1_GITHUB_HTML_CSS_XML_V4("GEMINI_V1_GITHUB_HTML_CSS_XML_V4"),
    
    GEMINI_V1_GITHUB_OTHER_V4("GEMINI_V1_GITHUB_OTHER_V4"),
    
    GEMINI_V1_GITHUB_LONG_TAIL_V4("GEMINI_V1_GITHUB_LONG_TAIL_V4"),
    
    GEMINI_V1_GITHUB_JUPTYER_NOTEBOOKS_SSTABLE("GEMINI_V1_GITHUB_JUPTYER_NOTEBOOKS_SSTABLE"),
    
    GEMINI_V1_ULM_ARXIV_SSTABLE("GEMINI_V1_ULM_ARXIV_SSTABLE"),
    
    GEMINI_V1_PODCASTS_ROBOTSTXT("GEMINI_V1_PODCASTS_ROBOTSTXT"),
    
    GEMINI_V1_SCIENCE_PDF_68_M_HQ_DOCS_GCC("GEMINI_V1_SCIENCE_PDF_68M_HQ_DOCS_GCC"),
    
    GEMINI_V1_GITHUB_TECHDOCS_V2("GEMINI_V1_GITHUB_TECHDOCS_V2"),
    
    GEMINI_V1_NONPUB_COPYRIGHT_BOOKS_V2_70_CONF_LONG_DEDUP_EN("GEMINI_V1_NONPUB_COPYRIGHT_BOOKS_V2_70_CONF_LONG_DEDUP_EN"),
    
    GEMINI_V1_NONPUB_COPYRIGHT_BOOKS_V2_70_CONF_LONG_DEDUP_NONEN("GEMINI_V1_NONPUB_COPYRIGHT_BOOKS_V2_70_CONF_LONG_DEDUP_NONEN"),
    
    GEMINI_V1_STEM_BOOKS_650_K_TEXT("GEMINI_V1_STEM_BOOKS_650K_TEXT"),
    
    GEMINI_V1_VQCOCA_1_B_MULTIRES_M3_W_V2_FILTERED("GEMINI_V1_VQCOCA_1B_MULTIRES_M3W_V2_FILTERED"),
    
    GEMINI_V1_VQCOCA_1_B_MULTIRES_WEBLI_EN_V4_350_M_PREFIXED_FILTERED_IMAGE2_TEXT("GEMINI_V1_VQCOCA_1B_MULTIRES_WEBLI_EN_V4_350M_PREFIXED_FILTERED_IMAGE2TEXT"),
    
    GEMINI_V1_VQCOCA_1_B_MULTIRES_SCREENAI_PREFIXED_FILTERED_IMAGE2_TEXT("GEMINI_V1_VQCOCA_1B_MULTIRES_SCREENAI_PREFIXED_FILTERED_IMAGE2TEXT"),
    
    GEMINI_V1_VQCOCA_1_B_MULTIRES_CULTURE_PREFIXED_FILTERED_IMAGE2_TEXT("GEMINI_V1_VQCOCA_1B_MULTIRES_CULTURE_PREFIXED_FILTERED_IMAGE2TEXT"),
    
    GEMINI_V1_VQCOCA_1_B_MULTIRES_CC3_M_EN_PREFIXED_IMAGE2_TEXT("GEMINI_V1_VQCOCA_1B_MULTIRES_CC3M_EN_PREFIXED_IMAGE2TEXT"),
    
    GEMINI_V1_VQCOCA_1_B_MULTIRES_CC3_M_I18_N_PREFIXED_IMAGE2_TEXT("GEMINI_V1_VQCOCA_1B_MULTIRES_CC3M_I18N_PREFIXED_IMAGE2TEXT"),
    
    GEMINI_V1_VQCOCA_1_B_MULTIRES_OCR_EN_PREFIXED_FILTERED_IMAGE2_TEXT("GEMINI_V1_VQCOCA_1B_MULTIRES_OCR_EN_PREFIXED_FILTERED_IMAGE2TEXT"),
    
    GEMINI_V1_VQCOCA_1_B_MULTIRES_OCR_NON_EN_PREFIXED_FILTERED_IMAGE2_TEXT("GEMINI_V1_VQCOCA_1B_MULTIRES_OCR_NON_EN_PREFIXED_FILTERED_IMAGE2TEXT"),
    
    GEMINI_V1_VQCOCA_1_B_MULTIRES_VTP_4_F_VIDEO2_TEXT_PREFIX("GEMINI_V1_VQCOCA_1B_MULTIRES_VTP_4F_VIDEO2TEXT_PREFIX"),
    
    GEMINI_V1_FORMAL_MATH_WITHOUT_HOLSTEPS_AND_MIZAR("GEMINI_V1_FORMAL_MATH_WITHOUT_HOLSTEPS_AND_MIZAR"),
    
    GEMINI_V1_TRANSLATE_DATAV2_ALLTIERS_GCC_MIX("GEMINI_V1_TRANSLATE_DATAV2_ALLTIERS_GCC_MIX"),
    
    GEMINI_V1_CANARIES_SHUFFLED_DOCJOIN_EN_NONEN_CODE_ARXIV_TRANSLATE("GEMINI_V1_CANARIES_SHUFFLED_DOCJOIN_EN_NONEN_CODE_ARXIV_TRANSLATE"),
    
    DUET_CLOUD_SECURITY_DOCS("DUET_CLOUD_SECURITY_DOCS"),
    
    DUET_GITHUB_CODE_SNIPPETS("DUET_GITHUB_CODE_SNIPPETS"),
    
    DUET_GITHUB_FILES("DUET_GITHUB_FILES"),
    
    DUET_GOBYEXAMPLE("DUET_GOBYEXAMPLE"),
    
    DUET_GOLANG_DOCS("DUET_GOLANG_DOCS"),
    
    DUET_CLOUD_DOCS_TROUBLESHOOTING_TABLES("DUET_CLOUD_DOCS_TROUBLESHOOTING_TABLES"),
    
    DUET_DEVSITE_DOCS("DUET_DEVSITE_DOCS"),
    
    DUET_CLOUD_BLOG_POSTS("DUET_CLOUD_BLOG_POSTS"),
    
    DUET_CLOUD_PODCAST_EPISODES("DUET_CLOUD_PODCAST_EPISODES"),
    
    DUET_YOUTUBE_VIDEOS("DUET_YOUTUBE_VIDEOS"),
    
    DUET_CLOUD_SKILLS_BOOST("DUET_CLOUD_SKILLS_BOOST"),
    
    DUET_CLOUD_DOCS("DUET_CLOUD_DOCS"),
    
    DUET_CLOUD_GITHUB_CODE_SNIPPETS_GENERATED("DUET_CLOUD_GITHUB_CODE_SNIPPETS_GENERATED"),
    
    DUET_CLOUD_GITHUB_CODE_SNIPPETS_HANDWRITTEN("DUET_CLOUD_GITHUB_CODE_SNIPPETS_HANDWRITTEN"),
    
    DUET_GOOGLESQL_GENERATION("DUET_GOOGLESQL_GENERATION"),
    
    DUET_CLOUD_IX_PROMPTS("DUET_CLOUD_IX_PROMPTS"),
    
    DUET_RAD("DUET_RAD"),
    
    BARD_ARCADE_GITHUB("BARD_ARCADE_GITHUB"),
    
    MOBILE_ASSISTANT_MAGI_FILTERED_0825_373_K("MOBILE_ASSISTANT_MAGI_FILTERED_0825_373K"),
    
    MOBILE_ASSISTANT_PALM24_B_FILTERED_400_K("MOBILE_ASSISTANT_PALM24B_FILTERED_400K"),
    
    GENESIS_NEWS_INSIGHTS("GENESIS_NEWS_INSIGHTS"),
    
    CLOUD_SECURITY_PRETRAINING("CLOUD_SECURITY_PRETRAINING"),
    
    CLOUD_SECURITY_FINETUNING("CLOUD_SECURITY_FINETUNING"),
    
    CLOUD_SECURITY_RAG_CISA("CLOUD_SECURITY_RAG_CISA"),
    
    LABS_AQA_DSCOUT("LABS_AQA_DSCOUT"),
    
    LABS_AQA_TAILWIND("LABS_AQA_TAILWIND"),
    
    LABS_AQA_DELEWARE("LABS_AQA_DELEWARE"),
    
    GEMINI_MULTIMODAL_FT_URL("GEMINI_MULTIMODAL_FT_URL"),
    
    GEMINI_MULTIMODAL_FT_YT("GEMINI_MULTIMODAL_FT_YT"),
    
    GEMINI_MULTIMODAL_FT_SHUTTERSTOCK("GEMINI_MULTIMODAL_FT_SHUTTERSTOCK"),
    
    GEMINI_MULTIMODAL_FT_NONE("GEMINI_MULTIMODAL_FT_NONE"),
    
    GEMINI_MULTIMODAL_FT_OTHER("GEMINI_MULTIMODAL_FT_OTHER"),
    
    GEMINI_MULTIMODAL_FT_INK("GEMINI_MULTIMODAL_FT_INK"),
    
    GEMINI_MULTIMODAL_IT("GEMINI_MULTIMODAL_IT"),
    
    GEMINI_IT_SHUTTERSTOCK("GEMINI_IT_SHUTTERSTOCK"),
    
    GEMINI_IT_M3_W("GEMINI_IT_M3W"),
    
    GEMINI_IT_HEDGING("GEMINI_IT_HEDGING"),
    
    GEMINI_IT_DSCOUT_FACTUALITY("GEMINI_IT_DSCOUT_FACTUALITY"),
    
    GEMINI_IT_AQUAMUSE("GEMINI_IT_AQUAMUSE"),
    
    GEMINI_IT_SHOTGUN("GEMINI_IT_SHOTGUN"),
    
    GEMINI_IT_ACI_BENCH("GEMINI_IT_ACI_BENCH"),
    
    GEMINI_IT_SPIDER_FILTERED("GEMINI_IT_SPIDER_FILTERED"),
    
    GEMINI_IT_TAB_SUM_BQ("GEMINI_IT_TAB_SUM_BQ"),
    
    GEMINI_IT_QA_WITH_URL("GEMINI_IT_QA_WITH_URL"),
    
    GEMINI_IT_CODE_INSTRUCT("GEMINI_IT_CODE_INSTRUCT"),
    
    GEMINI_IT_MED_PALM("GEMINI_IT_MED_PALM"),
    
    GEMINI_IT_TASK_ORIENTED_DIALOG("GEMINI_IT_TASK_ORIENTED_DIALOG"),
    
    GEMINI_IT_NIMBUS_GROUNDING_TO_PROMPT("GEMINI_IT_NIMBUS_GROUNDING_TO_PROMPT"),
    
    GEMINI_IT_EITL_GEN("GEMINI_IT_EITL_GEN"),
    
    GEMINI_IT_HITL_GEN("GEMINI_IT_HITL_GEN"),
    
    GEMINI_IT_MECH("GEMINI_IT_MECH"),
    
    GEMINI_IT_TABLE_GEN("GEMINI_IT_TABLE_GEN"),
    
    GEMINI_IT_NIMBUS_DECIBEL("GEMINI_IT_NIMBUS_DECIBEL"),
    
    GEMINI_IT_CLOUD_CODE_IF("GEMINI_IT_CLOUD_CODE_IF"),
    
    GEMINI_IT_CLOUD_EUR_LEX_JSON("GEMINI_IT_CLOUD_EUR_LEX_JSON"),
    
    GEMINI_IT_CLOUD_OASST("GEMINI_IT_CLOUD_OASST"),
    
    GEMINI_IT_CLOUD_SELF_INSTRUCT("GEMINI_IT_CLOUD_SELF_INSTRUCT"),
    
    GEMINI_IT_CLOUD_UCS_AQUAMUSE("GEMINI_IT_CLOUD_UCS_AQUAMUSE"),
    
    GEMIT_BRIDGE_SUFFIX_FT("GEMIT_BRIDGE_SUFFIX_FT"),
    
    GEMINI_GOOSE_PUBLIC("GEMINI_GOOSE_PUBLIC"),
    
    GEMINI_GOOSE_SILOED("GEMINI_GOOSE_SILOED"),
    
    GEMINI_V2_CMS_WIKIPEDIA_LANG_FILTERED_GCC_PII("GEMINI_V2_CMS_WIKIPEDIA_LANG_FILTERED_GCC_PII"),
    
    GEMINI_V2_WIKIPEDIA_DIFFS_COMPLIANT("GEMINI_V2_WIKIPEDIA_DIFFS_COMPLIANT"),
    
    GEMINI_V2_ENGLISH_ARTICLES_TOP10_B_211123_PII_FILTERED("GEMINI_V2_ENGLISH_ARTICLES_TOP10B_211123_PII_FILTERED"),
    
    GEMINI_V2_ENGLISH_NONARTICLES_TOP10_B_211123_PII_FILTERED("GEMINI_V2_ENGLISH_NONARTICLES_TOP10B_211123_PII_FILTERED"),
    
    GEMINI_V2_GEMINI_DOCJOINS_NONEN_TOP10_B_111323_WITHOUT_CJKT_STOP_NONARTICLES_COMPLIANT("GEMINI_V2_GEMINI_DOCJOINS_NONEN_TOP10B_111323_WITHOUT_CJKT_STOP_NONARTICLES_COMPLIANT"),
    
    GEMINI_V2_GEMINI_DOCJOINS_NONEN_TOP10_B_111323_WITHOUT_CJKT_STOP_ARTICLES_COMPLIANT("GEMINI_V2_GEMINI_DOCJOINS_NONEN_TOP10B_111323_WITHOUT_CJKT_STOP_ARTICLES_COMPLIANT"),
    
    GEMINI_V2_ENGLISH_ARTICLES_TOP20_B_211123_PII_FILTERED("GEMINI_V2_ENGLISH_ARTICLES_TOP20B_211123_PII_FILTERED"),
    
    GEMINI_V2_ENGLISH_NONARTICLES_TOP20_B_211123_PII_FILTERED("GEMINI_V2_ENGLISH_NONARTICLES_TOP20B_211123_PII_FILTERED"),
    
    GEMINI_V2_GEMINI_DOCJOINS_NONEN_TOP20_B_111323_WITHOUT_CJKT_STOP_NONARTICLES_COMPLIANT("GEMINI_V2_GEMINI_DOCJOINS_NONEN_TOP20B_111323_WITHOUT_CJKT_STOP_NONARTICLES_COMPLIANT"),
    
    GEMINI_V2_GEMINI_DOCJOINS_NONEN_TOP20_B_111323_WITHOUT_CJKT_STOP_ARTICLES_COMPLIANT("GEMINI_V2_GEMINI_DOCJOINS_NONEN_TOP20B_111323_WITHOUT_CJKT_STOP_ARTICLES_COMPLIANT"),
    
    GEMINI_V2_ENGLISH_ARTICLES_TOP100_B_211123_PII_FILTERED("GEMINI_V2_ENGLISH_ARTICLES_TOP100B_211123_PII_FILTERED"),
    
    GEMINI_V2_ENGLISH_NONARTICLES_TOP100_B_211123_PII_FILTERED("GEMINI_V2_ENGLISH_NONARTICLES_TOP100B_211123_PII_FILTERED"),
    
    GEMINI_V2_GEMINI_DOCJOINS_NONEN_TOP100_B_111323_WITHOUT_CJKT_STOP_NONARTICLES_COMPLIANT("GEMINI_V2_GEMINI_DOCJOINS_NONEN_TOP100B_111323_WITHOUT_CJKT_STOP_NONARTICLES_COMPLIANT"),
    
    GEMINI_V2_GEMINI_DOCJOINS_NONEN_TOP100_B_111323_WITHOUT_CJKT_STOP_ARTICLES_COMPLIANT("GEMINI_V2_GEMINI_DOCJOINS_NONEN_TOP100B_111323_WITHOUT_CJKT_STOP_ARTICLES_COMPLIANT"),
    
    GEMINI_V2_ENGLISH_ARTICLES_TOP500_B_211123_PII_FILTERED("GEMINI_V2_ENGLISH_ARTICLES_TOP500B_211123_PII_FILTERED"),
    
    GEMINI_V2_ENGLISH_NONARTICLES_TOP500_B_211123_PII_FILTERED("GEMINI_V2_ENGLISH_NONARTICLES_TOP500B_211123_PII_FILTERED"),
    
    GEMINI_V2_QUORA_COMPLIANT("GEMINI_V2_QUORA_COMPLIANT"),
    
    GEMINI_V2_FORUMS_V2_COMPLIANT("GEMINI_V2_FORUMS_V2_COMPLIANT"),
    
    GEMINI_V2_CMS_STACKOVERFLOW_MULTILINGUAL_V2_COMPLIANT("GEMINI_V2_CMS_STACKOVERFLOW_MULTILINGUAL_V2_COMPLIANT"),
    
    GEMINI_V2_SIMPLIFIED_HTML_V2_CORRECT_FORMAT_COMPLIANT("GEMINI_V2_SIMPLIFIED_HTML_V2_CORRECT_FORMAT_COMPLIANT"),
    
    GEMINI_V2_GEMINI_DOCJOINS_TOXICITY_TAGGED_FIXED_TAGS_COMPLIANT("GEMINI_V2_GEMINI_DOCJOINS_TOXICITY_TAGGED_FIXED_TAGS_COMPLIANT"),
    
    GEMINI_V2_CODEWEB_V1_COMPLIANT("GEMINI_V2_CODEWEB_V1_COMPLIANT"),
    
    GEMINI_V2_LEETCODE_GCC_PII("GEMINI_V2_LEETCODE_GCC_PII"),
    
    GEMINI_V2_CODE_CONTESTS_COMPLIANT("GEMINI_V2_CODE_CONTESTS_COMPLIANT"),
    
    GEMINI_V2_CMS_GITHUB_MULTI_FILE_FOR_FIM_GEMBAGZ_FIXED_BYTES_LENGTHS("GEMINI_V2_CMS_GITHUB_MULTI_FILE_FOR_FIM_GEMBAGZ_FIXED_BYTES_LENGTHS"),
    
    GEMINI_V2_GITHUB_EVALED_LANGUAGES_COMPLIANT("GEMINI_V2_GITHUB_EVALED_LANGUAGES_COMPLIANT"),
    
    GEMINI_V2_GITHUB_NON_EVAL_HIGH_PRI_LANGUAGES_COMPLIANT("GEMINI_V2_GITHUB_NON_EVAL_HIGH_PRI_LANGUAGES_COMPLIANT"),
    
    GEMINI_V2_GITHUB_LOW_PRI_LANGUAGES_AND_CONFIGS_COMPLIANT("GEMINI_V2_GITHUB_LOW_PRI_LANGUAGES_AND_CONFIGS_COMPLIANT"),
    
    GEMINI_V2_GITHUB_LONG_TAIL_AND_STRUCTURED_DATA_COMPLIANT("GEMINI_V2_GITHUB_LONG_TAIL_AND_STRUCTURED_DATA_COMPLIANT"),
    
    GEMINI_V2_GITHUB_PYTHON_NOTEBOOKS_COMPLIANT("GEMINI_V2_GITHUB_PYTHON_NOTEBOOKS_COMPLIANT"),
    
    GEMINI_V2_GITHUB_DIFFS_COMPLIANT("GEMINI_V2_GITHUB_DIFFS_COMPLIANT"),
    
    GEMINI_V2_GITHUB_TECHDOCS_COMPLIANT("GEMINI_V2_GITHUB_TECHDOCS_COMPLIANT"),
    
    GEMINI_V2_HIGH_QUALITY_CODE_TARGETED_DATA_COMPLIANT2("GEMINI_V2_HIGH_QUALITY_CODE_TARGETED_DATA_COMPLIANT2"),
    
    GEMINI_V2_SCIENCE_PDF_68_M_HQ_DOCS_DEDUP_COMPLIANT_CLEAN_TEX("GEMINI_V2_SCIENCE_PDF_68M_HQ_DOCS_DEDUP_COMPLIANT_CLEAN_TEX"),
    
    GEMINI_V2_ARXIV_2023_COMPLIANT("GEMINI_V2_ARXIV_2023_COMPLIANT"),
    
    GEMINI_V2_FORMAL_COMPLIANT("GEMINI_V2_FORMAL_COMPLIANT"),
    
    GEMINI_V2_CMS_STACKEXCHANGE_COMPLIANT("GEMINI_V2_CMS_STACKEXCHANGE_COMPLIANT"),
    
    GEMINI_V2_PUBMED_COMPLIANT("GEMINI_V2_PUBMED_COMPLIANT"),
    
    GEMINI_V2_WEB_MATH_V3_COMPLIANT("GEMINI_V2_WEB_MATH_V3_COMPLIANT"),
    
    GEMINI_V2_SCIENCEWEB_V0_GCC_PII("GEMINI_V2_SCIENCEWEB_V0_GCC_PII"),
    
    GEMINI_V2_WEB_POLYMATH_V1_COMPLIANT("GEMINI_V2_WEB_POLYMATH_V1_COMPLIANT"),
    
    GEMINI_V2_MATH_TARGETED_DATA_COMPLIANT2("GEMINI_V2_MATH_TARGETED_DATA_COMPLIANT2"),
    
    GEMINI_V2_BIOLOGY_TARGETED_DATA_COMPLIANT2("GEMINI_V2_BIOLOGY_TARGETED_DATA_COMPLIANT2"),
    
    GEMINI_V2_PHYSICS_V2_TARGETED_DATA_COMPLIANT2("GEMINI_V2_PHYSICS_V2_TARGETED_DATA_COMPLIANT2"),
    
    GEMINI_V2_CHEMISTRY_TARGETED_DATA_COMPLIANT2("GEMINI_V2_CHEMISTRY_TARGETED_DATA_COMPLIANT2"),
    
    GEMINI_V2_MACHINE_LEARNING_TARGETED_DATA_COMPLIANT2("GEMINI_V2_MACHINE_LEARNING_TARGETED_DATA_COMPLIANT2"),
    
    GEMINI_V2_QA_TARGETED_DATA_COMPLIANT2("GEMINI_V2_QA_TARGETED_DATA_COMPLIANT2"),
    
    GEMINI_V2_ECONOMICS_V2_TARGETED_DATA_COMPLIANT2("GEMINI_V2_ECONOMICS_V2_TARGETED_DATA_COMPLIANT2"),
    
    GEMINI_V2_MEDICAL_TARGETED_DATA_COMPLIANT2("GEMINI_V2_MEDICAL_TARGETED_DATA_COMPLIANT2"),
    
    GEMINI_V2_CHESS_COMPLIANT("GEMINI_V2_CHESS_COMPLIANT"),
    
    GEMINI_V2_YOUTUBE_SCIENCE_V4_FILTERED_COMPLIANT("GEMINI_V2_YOUTUBE_SCIENCE_V4_FILTERED_COMPLIANT"),
    
    GEMINI_V2_GOALDMINE_XL_GENERATED_PLUS_GT_NO_DM_MATH_COMPLIANT("GEMINI_V2_GOALDMINE_XL_GENERATED_PLUS_GT_NO_DM_MATH_COMPLIANT"),
    
    GEMINI_V2_FIRSTTIMES_SCIENCE_PDF_DEDUP_HQ_LENGTH_FILTERED_COMPLIANT("GEMINI_V2_FIRSTTIMES_SCIENCE_PDF_DEDUP_HQ_LENGTH_FILTERED_COMPLIANT"),
    
    GEMINI_V2_PODCASTS_COMPLIANT("GEMINI_V2_PODCASTS_COMPLIANT"),
    
    GEMINI_V2_EN_NONSCIENCE_PDF_DEDUP_46_M_DOCS_COMPLIANT("GEMINI_V2_EN_NONSCIENCE_PDF_DEDUP_46M_DOCS_COMPLIANT"),
    
    GEMINI_V2_NONPUB_COPYRIGHT_BOOKS_V3_70_CONF_082323_LONG_DEDUP_ENONLY_COMPLIANT("GEMINI_V2_NONPUB_COPYRIGHT_BOOKS_V3_70_CONF_082323_LONG_DEDUP_ENONLY_COMPLIANT"),
    
    GEMINI_V2_STEM_COPYRIGHT_BOOKS_V3_111823_LONG_DEDUP_ENONLY_COMPLIANT("GEMINI_V2_STEM_COPYRIGHT_BOOKS_V3_111823_LONG_DEDUP_ENONLY_COMPLIANT"),
    
    GEMINI_V2_STEM_BOOKS_318_K_TEXT_COMPLIANT("GEMINI_V2_STEM_BOOKS_318K_TEXT_COMPLIANT"),
    
    GEMINI_V2_CACHED_VQCOCA_MMFT_17_T_M3_W_WITH_IMAGE_TOKENS_INSERTED_INTERLEAVED_COMPLIANT_PII_FILTERED("GEMINI_V2_CACHED_VQCOCA_MMFT_17T_M3W_WITH_IMAGE_TOKENS_INSERTED_INTERLEAVED_COMPLIANT_PII_FILTERED"),
    
    GEMINI_V2_CACHED_VQCOCA_MMFT_17_T_M3_W_WITH_IMAGE_TOKENS_INSERTED_INTERLEAVED_COMPLIANT_PII_FILTERED_SOFT("GEMINI_V2_CACHED_VQCOCA_MMFT_17T_M3W_WITH_IMAGE_TOKENS_INSERTED_INTERLEAVED_COMPLIANT_PII_FILTERED_SOFT"),
    
    GEMINI_V2_CACHED_VQCOCA_MMFT_17_T_WEBLI_EN_V4_350_M_T2_I_TEXT_TO_IMAGE_COMPLIANT_PII_FILTERED("GEMINI_V2_CACHED_VQCOCA_MMFT_17T_WEBLI_EN_V4_350M_T2I_TEXT_TO_IMAGE_COMPLIANT_PII_FILTERED"),
    
    GEMINI_V2_CACHED_VQCOCA_MMFT_17_T_SHUTTERSTOCK_IMAGE_TO_TEXT_COMPLIANT_PII_FILTERED("GEMINI_V2_CACHED_VQCOCA_MMFT_17T_SHUTTERSTOCK_IMAGE_TO_TEXT_COMPLIANT_PII_FILTERED"),
    
    GEMINI_V2_CACHED_VQCOCA_MMFT_17_T_WEBLI_EN_V4_350_M_IMAGE_TO_TEXT_COMPLIANT_PII_FILTERED("GEMINI_V2_CACHED_VQCOCA_MMFT_17T_WEBLI_EN_V4_350M_IMAGE_TO_TEXT_COMPLIANT_PII_FILTERED"),
    
    GEMINI_V2_CACHED_VQCOCA_MMFT_17_T_WEBLI_OCR_I18_N_680_M_IMAGE_TO_TEXT_COMPLIANT_PII_FILTERED("GEMINI_V2_CACHED_VQCOCA_MMFT_17T_WEBLI_OCR_I18N_680M_IMAGE_TO_TEXT_COMPLIANT_PII_FILTERED"),
    
    GEMINI_V2_CACHED_VQCOCA_MMFT_17_T_CLOUDAI_DOC_IMAGE_TO_TEXT_COMPLIANT_PII_FILTERED("GEMINI_V2_CACHED_VQCOCA_MMFT_17T_CLOUDAI_DOC_IMAGE_TO_TEXT_COMPLIANT_PII_FILTERED"),
    
    GEMINI_V2_CACHED_VQCOCA_MMFT_17_T_SCREENAI_FULL_HTML_75_M_IMAGE_TO_TEXT_COMPLIANT_PII_FILTERED("GEMINI_V2_CACHED_VQCOCA_MMFT_17T_SCREENAI_FULL_HTML_75M_IMAGE_TO_TEXT_COMPLIANT_PII_FILTERED"),
    
    GEMINI_V2_CACHED_VQCOCA_MMFT_17_T_SCREENAI_V1_1_IMAGE_TO_TEXT_COMPLIANT_PII_FILTERED("GEMINI_V2_CACHED_VQCOCA_MMFT_17T_SCREENAI_V1_1_IMAGE_TO_TEXT_COMPLIANT_PII_FILTERED"),
    
    GEMINI_V2_CACHED_VQCOCA_MMFT_17_T_WEBLI_OCR_DOC_240_M_IMAGE_TO_TEXT_COMPLIANT_PII_FILTERED("GEMINI_V2_CACHED_VQCOCA_MMFT_17T_WEBLI_OCR_DOC_240M_IMAGE_TO_TEXT_COMPLIANT_PII_FILTERED"),
    
    GEMINI_V2_CACHED_VQCOCA_MMFT_17_T_SHUTTERSTOCK_VIDEO_VIDEO_TO_TEXT_COMPLIANT_PII_FILTERED("GEMINI_V2_CACHED_VQCOCA_MMFT_17T_SHUTTERSTOCK_VIDEO_VIDEO_TO_TEXT_COMPLIANT_PII_FILTERED"),
    
    GEMINI_V2_CACHED_VQCOCA_MMFT_17_T_M4_W_INTERLEAVED_COMPLIANT_PII_FILTERED_SOFT("GEMINI_V2_CACHED_VQCOCA_MMFT_17T_M4W_INTERLEAVED_COMPLIANT_PII_FILTERED_SOFT"),
    
    GEMINI_V2_CACHED_VQCOCA_MMFT_17_T_CULTURE_IMAGE_TO_TEXT_COMPLIANT_PII_FILTERED("GEMINI_V2_CACHED_VQCOCA_MMFT_17T_CULTURE_IMAGE_TO_TEXT_COMPLIANT_PII_FILTERED"),
    
    GEMINI_V2_CACHED_VQCOCA_MMFT_17_T_WEBLI_DETECTION_IMAGE_TO_TEXT_COMPLIANT_PII_FILTERED("GEMINI_V2_CACHED_VQCOCA_MMFT_17T_WEBLI_DETECTION_IMAGE_TO_TEXT_COMPLIANT_PII_FILTERED"),
    
    GEMINI_V2_CACHED_VQCOCA_MMFT_17_T_WEBLI_ALT_TEXT_NONEN_500_M_IMAGE_TO_TEXT_COMPLIANT_PII_FILTERED("GEMINI_V2_CACHED_VQCOCA_MMFT_17T_WEBLI_ALT_TEXT_NONEN_500M_IMAGE_TO_TEXT_COMPLIANT_PII_FILTERED"),
    
    GEMINI_V2_CACHED_VQCOCA_MMFT_17_T_SPATIAL_AWARE_PALI_IMAGE_TO_TEXT_COMPLIANT_PII_FILTERED("GEMINI_V2_CACHED_VQCOCA_MMFT_17T_SPATIAL_AWARE_PALI_IMAGE_TO_TEXT_COMPLIANT_PII_FILTERED"),
    
    GEMINI_V2_CACHED_VQCOCA_MMFT_17_T_CLOUDAI_TABLE2_HTML_3_D_IMAGE_TO_TEXT_COMPLIANT_PII_FILTERED("GEMINI_V2_CACHED_VQCOCA_MMFT_17T_CLOUDAI_TABLE2HTML_3D_IMAGE_TO_TEXT_COMPLIANT_PII_FILTERED"),
    
    GEMINI_V2_CACHED_VQCOCA_MMFT_17_T_TABLE2_MD_V2_EN_IMAGE_TO_TEXT_COMPLIANT_PII_FILTERED("GEMINI_V2_CACHED_VQCOCA_MMFT_17T_TABLE2MD_V2_EN_IMAGE_TO_TEXT_COMPLIANT_PII_FILTERED"),
    
    GEMINI_V2_CACHED_VQCOCA_MMFT_17_T_TABLE2_MD_V2_NON_EN_IMAGE_TO_TEXT_COMPLIANT_PII_FILTERED("GEMINI_V2_CACHED_VQCOCA_MMFT_17T_TABLE2MD_V2_NON_EN_IMAGE_TO_TEXT_COMPLIANT_PII_FILTERED"),
    
    GEMINI_V2_CACHED_VQCOCA_MMFT_17_T_CLOUDAI_3_D_DOC_IMAGE_TO_TEXT_COMPLIANT_PII_FILTERED("GEMINI_V2_CACHED_VQCOCA_MMFT_17T_CLOUDAI_3D_DOC_IMAGE_TO_TEXT_COMPLIANT_PII_FILTERED"),
    
    GEMINI_V2_CACHED_VQCOCA_MMFT_17_T_CC3_M_IMAGE_TO_TEXT_COMPLIANT_PII_FILTERED("GEMINI_V2_CACHED_VQCOCA_MMFT_17T_CC3M_IMAGE_TO_TEXT_COMPLIANT_PII_FILTERED"),
    
    GEMINI_V2_CACHED_VQCOCA_MMFT_17_T_INFOGRAPHICS_LARGE_WEB_IMAGE_TO_TEXT_COMPLIANT_PII_FILTERED("GEMINI_V2_CACHED_VQCOCA_MMFT_17T_INFOGRAPHICS_LARGE_WEB_IMAGE_TO_TEXT_COMPLIANT_PII_FILTERED"),
    
    GEMINI_V2_CACHED_VQCOCA_MMFT_17_T_BIORXIV_IMAGE_TO_TEXT_COMPLIANT_PII_FILTERED("GEMINI_V2_CACHED_VQCOCA_MMFT_17T_BIORXIV_IMAGE_TO_TEXT_COMPLIANT_PII_FILTERED"),
    
    GEMINI_V2_CACHED_VQCOCA_MMFT_17_T_PHOTOMATH_IM2_SOL_PROBLEM_AND_SOLUTION_IMAGE_TO_TEXT_COMPLIANT_PII_FILTERED("GEMINI_V2_CACHED_VQCOCA_MMFT_17T_PHOTOMATH_IM2SOL_PROBLEM_AND_SOLUTION_IMAGE_TO_TEXT_COMPLIANT_PII_FILTERED"),
    
    GEMINI_V2_CACHED_VQCOCA_MMFT_17_T_PLOT2_TABLE_V2_IMAGE_TO_TEXT_COMPLIANT_PII_FILTERED("GEMINI_V2_CACHED_VQCOCA_MMFT_17T_PLOT2TABLE_V2_IMAGE_TO_TEXT_COMPLIANT_PII_FILTERED"),
    
    GEMINI_V2_CACHED_VQCOCA_MMFT_17_T_TIKZ_DERENDERING_MERGED_IMAGE_TO_TEXT_COMPLIANT_PII_FILTERED("GEMINI_V2_CACHED_VQCOCA_MMFT_17T_TIKZ_DERENDERING_MERGED_IMAGE_TO_TEXT_COMPLIANT_PII_FILTERED"),
    
    GEMINI_V2_CACHED_VQCOCA_MMFT_17_T_CLOUDAI_TABLE2_HTML_2_D_IMAGE_TO_TEXT_COMPLIANT_PII_FILTERED("GEMINI_V2_CACHED_VQCOCA_MMFT_17T_CLOUDAI_TABLE2HTML_2D_IMAGE_TO_TEXT_COMPLIANT_PII_FILTERED"),
    
    GEMINI_V2_CACHED_VQCOCA_MMFT_17_T_WIKIPEDIA_EQUATIONS_IMAGE_TO_TEXT_COMPLIANT_PII_FILTERED("GEMINI_V2_CACHED_VQCOCA_MMFT_17T_WIKIPEDIA_EQUATIONS_IMAGE_TO_TEXT_COMPLIANT_PII_FILTERED"),
    
    GEMINI_V2_CACHED_VQCOCA_MMFT_17_T_PHOTOMATH_EQ2_LATEX_IMAGE_TO_TEXT_COMPLIANT_PII_FILTERED("GEMINI_V2_CACHED_VQCOCA_MMFT_17T_PHOTOMATH_EQ2LATEX_IMAGE_TO_TEXT_COMPLIANT_PII_FILTERED"),
    
    GEMINI_V2_CACHED_VQCOCA_MMFT_17_T_ARXIV_EQUATIONS_V2_IMAGE_TO_TEXT_COMPLIANT_PII_FILTERED("GEMINI_V2_CACHED_VQCOCA_MMFT_17T_ARXIV_EQUATIONS_V2_IMAGE_TO_TEXT_COMPLIANT_PII_FILTERED"),
    
    GEMINI_V2_USM2_B_MLPV5_YT_ASR_SUP_GEMBAGZ_V2_COMPLIANT("GEMINI_V2_USM2B_MLPV5_YT_ASR_SUP_GEMBAGZ_V2_COMPLIANT"),
    
    GEMINI_V2_USM2_B_MLPV5_YT_ASR_1_P5_M_GEMBAGZ_V2_COMPLIANT("GEMINI_V2_USM2B_MLPV5_YT_ASR_1P5M_GEMBAGZ_V2_COMPLIANT"),
    
    GEMINI_V2_USM2_B_MLPV5_YT_ASR_4_M_GEMBAGZ_V2_COMPLIANT("GEMINI_V2_USM2B_MLPV5_YT_ASR_4M_GEMBAGZ_V2_COMPLIANT"),
    
    GEMINI_V2_USM2_B_MLPV5_YT_TTS_SUP_GEMBAGZ_V2_COMPLIANT("GEMINI_V2_USM2B_MLPV5_YT_TTS_SUP_GEMBAGZ_V2_COMPLIANT"),
    
    GEMINI_V2_USM2_B_MLPV5_YT_TTS_1_P5_M_GEMBAGZ_V2_COMPLIANT("GEMINI_V2_USM2B_MLPV5_YT_TTS_1P5M_GEMBAGZ_V2_COMPLIANT"),
    
    GEMINI_V2_USM2_B_MLPV5_YT_TTS_4_M_GEMBAGZ_V2_COMPLIANT("GEMINI_V2_USM2B_MLPV5_YT_TTS_4M_GEMBAGZ_V2_COMPLIANT"),
    
    GEMINI_V2_USM2_B_MLPV5_PODIOSET_INTERLEAVE_ENUS_GEMBAGZ_V2_COMPLIANT("GEMINI_V2_USM2B_MLPV5_PODIOSET_INTERLEAVE_ENUS_GEMBAGZ_V2_COMPLIANT"),
    
    GEMINI_V2_USM2_B_MLPV5_PODIOSET_INTERLEAVE_I18_N_GEMBAGZ_V2_COMPLIANT("GEMINI_V2_USM2B_MLPV5_PODIOSET_INTERLEAVE_I18N_GEMBAGZ_V2_COMPLIANT"),
    
    GEMINI_V2_USM2_B_MLPV5_YT_INTERLEAVE_SCIENCE_ENUS_GEMBAGZ_V2_COMPLIANT("GEMINI_V2_USM2B_MLPV5_YT_INTERLEAVE_SCIENCE_ENUS_GEMBAGZ_V2_COMPLIANT"),
    
    GEMINI_V2_USM2_B_MLPV5_YT_INTERLEAVE_SCIENCE_I18_N_GEMBAGZ_V2_COMPLIANT("GEMINI_V2_USM2B_MLPV5_YT_INTERLEAVE_SCIENCE_I18N_GEMBAGZ_V2_COMPLIANT"),
    
    GEMINI_V2_USM2_B_MLPV5_YT_INTERLEAVE_1_P5_M_GEMBAGZ_V2_COMPLIANT("GEMINI_V2_USM2B_MLPV5_YT_INTERLEAVE_1P5M_GEMBAGZ_V2_COMPLIANT"),
    
    GEMINI_V2_USM2_B_MLPV5_YT_INTERLEAVE_HEAD_4_M_GEMBAGZ_V2_COMPLIANT("GEMINI_V2_USM2B_MLPV5_YT_INTERLEAVE_HEAD_4M_GEMBAGZ_V2_COMPLIANT"),
    
    GEMINI_V2_CLM_TRANSLATE_DATAV3_WEB_UNWMT_INCR_MIX("GEMINI_V2_CLM_TRANSLATE_DATAV3_WEB_UNWMT_INCR_MIX"),
    
    GEMINI_V2_NTL_NTLV4_A_MONOLINGUAL_DEDUP_N5("GEMINI_V2_NTL_NTLV4A_MONOLINGUAL_DEDUP_N5"),
    
    GEMINI_V2_NTL_STT_TRANSLATE_DEDUP_N5("GEMINI_V2_NTL_STT_TRANSLATE_DEDUP_N5"),
    
    GEMINI_V2_NTL_TRANSLIT_BILEX_TRANSLATE_DEDUP_N5("GEMINI_V2_NTL_TRANSLIT_BILEX_TRANSLATE_DEDUP_N5"),
    
    GEMINI_V2_NTL_SYN_BT_TRANSLATE_DEDUP_N5("GEMINI_V2_NTL_SYN_BT_TRANSLATE_DEDUP_N5"),
    
    GEMINI_V2_NTL_SYN_FT_FIXED_TRANSLATE_DEDUP_N5("GEMINI_V2_NTL_SYN_FT_FIXED_TRANSLATE_DEDUP_N5"),
    
    GEMINI_V2_CANARIES_SHUFFLED_COMPLIANT("GEMINI_V2_CANARIES_SHUFFLED_COMPLIANT"),
    
    CLOUD_GEMIT_CLOUD_FACTUALITY_GROUNDING_MAGI("CLOUD_GEMIT_CLOUD_FACTUALITY_GROUNDING_MAGI"),
    
    CLOUD_GEMIT_MT_DIALGUE_LMSYS("CLOUD_GEMIT_MT_DIALGUE_LMSYS"),
    
    CLOUD_GEMIT_MTS_DIALOGUE_V3("CLOUD_GEMIT_MTS_DIALOGUE_V3"),
    
    CLOUD_GEMIT_COMMIT_MSG_GEN_V3("CLOUD_GEMIT_COMMIT_MSG_GEN_V3"),
    
    CLOUD_GEMIT_CODE_IF_V1("CLOUD_GEMIT_CODE_IF_V1"),
    
    CLOUD_GEMIT_CODE_SELF_REPAIR("CLOUD_GEMIT_CODE_SELF_REPAIR"),
    
    CLOUD_GEMIT_IDENTITY("CLOUD_GEMIT_IDENTITY"),
    
    CLOUD_GEMIT_SEARCH_AUGMENTED_RESPONSE_GENERATION("CLOUD_GEMIT_SEARCH_AUGMENTED_RESPONSE_GENERATION"),
    
    CLOUD_GEMIT_AMPS("CLOUD_GEMIT_AMPS"),
    
    CLOUD_GEMIT_AQUA("CLOUD_GEMIT_AQUA"),
    
    CLOUD_GEMIT_COMMON_SENSE_REASONING_SCHEMA("CLOUD_GEMIT_COMMON_SENSE_REASONING_SCHEMA"),
    
    CLOUD_GEMIT_GSM8_K_SCHEMA("CLOUD_GEMIT_GSM8K_SCHEMA");

    private String value;

    DatasetEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DatasetEnum fromValue(String value) {
      for (DatasetEnum b : DatasetEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DatasetEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DatasetEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DatasetEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DatasetEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DatasetEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DATASET = "dataset";
  @SerializedName(SERIALIZED_NAME_DATASET)
  private DatasetEnum dataset;

  public static final String SERIALIZED_NAME_FILEPATH = "filepath";
  @SerializedName(SERIALIZED_NAME_FILEPATH)
  private String filepath;

  public static final String SERIALIZED_NAME_GEMINI_ID = "geminiId";
  @SerializedName(SERIALIZED_NAME_GEMINI_ID)
  private String geminiId;

  public static final String SERIALIZED_NAME_GNEWS_ARTICLE_TITLE = "gnewsArticleTitle";
  @SerializedName(SERIALIZED_NAME_GNEWS_ARTICLE_TITLE)
  private String gnewsArticleTitle;

  public static final String SERIALIZED_NAME_GOODALL_EXAMPLE_ID = "goodallExampleId";
  @SerializedName(SERIALIZED_NAME_GOODALL_EXAMPLE_ID)
  private String goodallExampleId;

  public static final String SERIALIZED_NAME_IS_OPT_OUT = "isOptOut";
  @SerializedName(SERIALIZED_NAME_IS_OPT_OUT)
  private Boolean isOptOut;

  public static final String SERIALIZED_NAME_IS_PROMPT = "isPrompt";
  @SerializedName(SERIALIZED_NAME_IS_PROMPT)
  private Boolean isPrompt;

  public static final String SERIALIZED_NAME_LAMDA_EXAMPLE_ID = "lamdaExampleId";
  @SerializedName(SERIALIZED_NAME_LAMDA_EXAMPLE_ID)
  private String lamdaExampleId;

  public static final String SERIALIZED_NAME_LICENSE = "license";
  @SerializedName(SERIALIZED_NAME_LICENSE)
  private String license;

  public static final String SERIALIZED_NAME_MEENA_CONVERSATION_ID = "meenaConversationId";
  @SerializedName(SERIALIZED_NAME_MEENA_CONVERSATION_ID)
  private String meenaConversationId;

  public static final String SERIALIZED_NAME_NATURAL_LANGUAGE_CODE = "naturalLanguageCode";
  @SerializedName(SERIALIZED_NAME_NATURAL_LANGUAGE_CODE)
  private String naturalLanguageCode;

  public static final String SERIALIZED_NAME_NO_ATTRIBUTION = "noAttribution";
  @SerializedName(SERIALIZED_NAME_NO_ATTRIBUTION)
  private Boolean noAttribution;

  public static final String SERIALIZED_NAME_PODCAST_UTTERANCE_ID = "podcastUtteranceId";
  @SerializedName(SERIALIZED_NAME_PODCAST_UTTERANCE_ID)
  private String podcastUtteranceId;

  public static final String SERIALIZED_NAME_PUBLICATION_DATE = "publicationDate";
  @SerializedName(SERIALIZED_NAME_PUBLICATION_DATE)
  private GoogleTypeDate publicationDate;

  public static final String SERIALIZED_NAME_QUALITY_SCORE_EXPERIMENT_ONLY = "qualityScoreExperimentOnly";
  @SerializedName(SERIALIZED_NAME_QUALITY_SCORE_EXPERIMENT_ONLY)
  private Double qualityScoreExperimentOnly;

  public static final String SERIALIZED_NAME_REPO = "repo";
  @SerializedName(SERIALIZED_NAME_REPO)
  private String repo;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public static final String SERIALIZED_NAME_VOLUME_ID = "volumeId";
  @SerializedName(SERIALIZED_NAME_VOLUME_ID)
  private String volumeId;

  public static final String SERIALIZED_NAME_WIKIPEDIA_ARTICLE_TITLE = "wikipediaArticleTitle";
  @SerializedName(SERIALIZED_NAME_WIKIPEDIA_ARTICLE_TITLE)
  private String wikipediaArticleTitle;

  public static final String SERIALIZED_NAME_YOUTUBE_VIDEO_ID = "youtubeVideoId";
  @SerializedName(SERIALIZED_NAME_YOUTUBE_VIDEO_ID)
  private String youtubeVideoId;

  public LanguageLabsAidaTrustRecitationProtoDocAttribution() {
  }

  public LanguageLabsAidaTrustRecitationProtoDocAttribution amarnaId(String amarnaId) {
    this.amarnaId = amarnaId;
    return this;
  }

  /**
   * Get amarnaId
   * @return amarnaId
   */
  @javax.annotation.Nullable
  public String getAmarnaId() {
    return amarnaId;
  }

  public void setAmarnaId(String amarnaId) {
    this.amarnaId = amarnaId;
  }


  public LanguageLabsAidaTrustRecitationProtoDocAttribution arxivId(String arxivId) {
    this.arxivId = arxivId;
    return this;
  }

  /**
   * Get arxivId
   * @return arxivId
   */
  @javax.annotation.Nullable
  public String getArxivId() {
    return arxivId;
  }

  public void setArxivId(String arxivId) {
    this.arxivId = arxivId;
  }


  public LanguageLabsAidaTrustRecitationProtoDocAttribution author(String author) {
    this.author = author;
    return this;
  }

  /**
   * Get author
   * @return author
   */
  @javax.annotation.Nullable
  public String getAuthor() {
    return author;
  }

  public void setAuthor(String author) {
    this.author = author;
  }


  public LanguageLabsAidaTrustRecitationProtoDocAttribution bibkey(String bibkey) {
    this.bibkey = bibkey;
    return this;
  }

  /**
   * Get bibkey
   * @return bibkey
   */
  @javax.annotation.Nullable
  public String getBibkey() {
    return bibkey;
  }

  public void setBibkey(String bibkey) {
    this.bibkey = bibkey;
  }


  public LanguageLabsAidaTrustRecitationProtoDocAttribution biorxivId(String biorxivId) {
    this.biorxivId = biorxivId;
    return this;
  }

  /**
   * ID of the paper in bioarxiv like ddoi.org/{biorxiv_id} eg: https://doi.org/10.1101/343517
   * @return biorxivId
   */
  @javax.annotation.Nullable
  public String getBiorxivId() {
    return biorxivId;
  }

  public void setBiorxivId(String biorxivId) {
    this.biorxivId = biorxivId;
  }


  public LanguageLabsAidaTrustRecitationProtoDocAttribution bookTitle(String bookTitle) {
    this.bookTitle = bookTitle;
    return this;
  }

  /**
   * Get bookTitle
   * @return bookTitle
   */
  @javax.annotation.Nullable
  public String getBookTitle() {
    return bookTitle;
  }

  public void setBookTitle(String bookTitle) {
    this.bookTitle = bookTitle;
  }


  public LanguageLabsAidaTrustRecitationProtoDocAttribution bookVolumeId(String bookVolumeId) {
    this.bookVolumeId = bookVolumeId;
    return this;
  }

  /**
   * The Oceanographers full-view books dataset uses a &#39;volume id&#39; as the unique ID of a book. There is a deterministic function from a volume id to a URL under the books.google.com domain. Marked as &#39;optional&#39; since a volume ID of zero is potentially possible and we want to distinguish that from the volume ID not being set.
   * @return bookVolumeId
   */
  @javax.annotation.Nullable
  public String getBookVolumeId() {
    return bookVolumeId;
  }

  public void setBookVolumeId(String bookVolumeId) {
    this.bookVolumeId = bookVolumeId;
  }


  public LanguageLabsAidaTrustRecitationProtoDocAttribution category(CategoryEnum category) {
    this.category = category;
    return this;
  }

  /**
   * Get category
   * @return category
   */
  @javax.annotation.Nullable
  public CategoryEnum getCategory() {
    return category;
  }

  public void setCategory(CategoryEnum category) {
    this.category = category;
  }


  public LanguageLabsAidaTrustRecitationProtoDocAttribution conversationId(String conversationId) {
    this.conversationId = conversationId;
    return this;
  }

  /**
   * Get conversationId
   * @return conversationId
   */
  @javax.annotation.Nullable
  public String getConversationId() {
    return conversationId;
  }

  public void setConversationId(String conversationId) {
    this.conversationId = conversationId;
  }


  public LanguageLabsAidaTrustRecitationProtoDocAttribution dataset(DatasetEnum dataset) {
    this.dataset = dataset;
    return this;
  }

  /**
   * The dataset this document comes from.
   * @return dataset
   */
  @javax.annotation.Nullable
  public DatasetEnum getDataset() {
    return dataset;
  }

  public void setDataset(DatasetEnum dataset) {
    this.dataset = dataset;
  }


  public LanguageLabsAidaTrustRecitationProtoDocAttribution filepath(String filepath) {
    this.filepath = filepath;
    return this;
  }

  /**
   * Get filepath
   * @return filepath
   */
  @javax.annotation.Nullable
  public String getFilepath() {
    return filepath;
  }

  public void setFilepath(String filepath) {
    this.filepath = filepath;
  }


  public LanguageLabsAidaTrustRecitationProtoDocAttribution geminiId(String geminiId) {
    this.geminiId = geminiId;
    return this;
  }

  /**
   * Get geminiId
   * @return geminiId
   */
  @javax.annotation.Nullable
  public String getGeminiId() {
    return geminiId;
  }

  public void setGeminiId(String geminiId) {
    this.geminiId = geminiId;
  }


  public LanguageLabsAidaTrustRecitationProtoDocAttribution gnewsArticleTitle(String gnewsArticleTitle) {
    this.gnewsArticleTitle = gnewsArticleTitle;
    return this;
  }

  /**
   * Get gnewsArticleTitle
   * @return gnewsArticleTitle
   */
  @javax.annotation.Nullable
  public String getGnewsArticleTitle() {
    return gnewsArticleTitle;
  }

  public void setGnewsArticleTitle(String gnewsArticleTitle) {
    this.gnewsArticleTitle = gnewsArticleTitle;
  }


  public LanguageLabsAidaTrustRecitationProtoDocAttribution goodallExampleId(String goodallExampleId) {
    this.goodallExampleId = goodallExampleId;
    return this;
  }

  /**
   * Get goodallExampleId
   * @return goodallExampleId
   */
  @javax.annotation.Nullable
  public String getGoodallExampleId() {
    return goodallExampleId;
  }

  public void setGoodallExampleId(String goodallExampleId) {
    this.goodallExampleId = goodallExampleId;
  }


  public LanguageLabsAidaTrustRecitationProtoDocAttribution isOptOut(Boolean isOptOut) {
    this.isOptOut = isOptOut;
    return this;
  }

  /**
   * Whether the document is opted out.
   * @return isOptOut
   */
  @javax.annotation.Nullable
  public Boolean getIsOptOut() {
    return isOptOut;
  }

  public void setIsOptOut(Boolean isOptOut) {
    this.isOptOut = isOptOut;
  }


  public LanguageLabsAidaTrustRecitationProtoDocAttribution isPrompt(Boolean isPrompt) {
    this.isPrompt = isPrompt;
    return this;
  }

  /**
   * Get isPrompt
   * @return isPrompt
   */
  @javax.annotation.Nullable
  public Boolean getIsPrompt() {
    return isPrompt;
  }

  public void setIsPrompt(Boolean isPrompt) {
    this.isPrompt = isPrompt;
  }


  public LanguageLabsAidaTrustRecitationProtoDocAttribution lamdaExampleId(String lamdaExampleId) {
    this.lamdaExampleId = lamdaExampleId;
    return this;
  }

  /**
   * Get lamdaExampleId
   * @return lamdaExampleId
   */
  @javax.annotation.Nullable
  public String getLamdaExampleId() {
    return lamdaExampleId;
  }

  public void setLamdaExampleId(String lamdaExampleId) {
    this.lamdaExampleId = lamdaExampleId;
  }


  public LanguageLabsAidaTrustRecitationProtoDocAttribution license(String license) {
    this.license = license;
    return this;
  }

  /**
   * Get license
   * @return license
   */
  @javax.annotation.Nullable
  public String getLicense() {
    return license;
  }

  public void setLicense(String license) {
    this.license = license;
  }


  public LanguageLabsAidaTrustRecitationProtoDocAttribution meenaConversationId(String meenaConversationId) {
    this.meenaConversationId = meenaConversationId;
    return this;
  }

  /**
   * Get meenaConversationId
   * @return meenaConversationId
   */
  @javax.annotation.Nullable
  public String getMeenaConversationId() {
    return meenaConversationId;
  }

  public void setMeenaConversationId(String meenaConversationId) {
    this.meenaConversationId = meenaConversationId;
  }


  public LanguageLabsAidaTrustRecitationProtoDocAttribution naturalLanguageCode(String naturalLanguageCode) {
    this.naturalLanguageCode = naturalLanguageCode;
    return this;
  }

  /**
   * Natural (not programming) language of the document. Language code as defined by http://www.unicode.org/reports/tr35/#Identifiers and https://tools.ietf.org/html/bcp47. Currently applicable to full-view books. Use docinfo-util.h to set &amp; read language fields. See go/iii.
   * @return naturalLanguageCode
   */
  @javax.annotation.Nullable
  public String getNaturalLanguageCode() {
    return naturalLanguageCode;
  }

  public void setNaturalLanguageCode(String naturalLanguageCode) {
    this.naturalLanguageCode = naturalLanguageCode;
  }


  public LanguageLabsAidaTrustRecitationProtoDocAttribution noAttribution(Boolean noAttribution) {
    this.noAttribution = noAttribution;
    return this;
  }

  /**
   * True if this doc has no attribution information available. We use an explicit field for this instead of just implicitly leaving all the DocAttribution fields blank to distinguish a case where a bug/oversight has left the attribution information empty vs when we really have no attribution information available.
   * @return noAttribution
   */
  @javax.annotation.Nullable
  public Boolean getNoAttribution() {
    return noAttribution;
  }

  public void setNoAttribution(Boolean noAttribution) {
    this.noAttribution = noAttribution;
  }


  public LanguageLabsAidaTrustRecitationProtoDocAttribution podcastUtteranceId(String podcastUtteranceId) {
    this.podcastUtteranceId = podcastUtteranceId;
    return this;
  }

  /**
   * Get podcastUtteranceId
   * @return podcastUtteranceId
   */
  @javax.annotation.Nullable
  public String getPodcastUtteranceId() {
    return podcastUtteranceId;
  }

  public void setPodcastUtteranceId(String podcastUtteranceId) {
    this.podcastUtteranceId = podcastUtteranceId;
  }


  public LanguageLabsAidaTrustRecitationProtoDocAttribution publicationDate(GoogleTypeDate publicationDate) {
    this.publicationDate = publicationDate;
    return this;
  }

  /**
   * Get publicationDate
   * @return publicationDate
   */
  @javax.annotation.Nullable
  public GoogleTypeDate getPublicationDate() {
    return publicationDate;
  }

  public void setPublicationDate(GoogleTypeDate publicationDate) {
    this.publicationDate = publicationDate;
  }


  public LanguageLabsAidaTrustRecitationProtoDocAttribution qualityScoreExperimentOnly(Double qualityScoreExperimentOnly) {
    this.qualityScoreExperimentOnly = qualityScoreExperimentOnly;
    return this;
  }

  /**
   * This field is for opt-out experiment only, MUST never be used during actual production/serving. 
   * @return qualityScoreExperimentOnly
   */
  @javax.annotation.Nullable
  public Double getQualityScoreExperimentOnly() {
    return qualityScoreExperimentOnly;
  }

  public void setQualityScoreExperimentOnly(Double qualityScoreExperimentOnly) {
    this.qualityScoreExperimentOnly = qualityScoreExperimentOnly;
  }


  public LanguageLabsAidaTrustRecitationProtoDocAttribution repo(String repo) {
    this.repo = repo;
    return this;
  }

  /**
   * Github repository
   * @return repo
   */
  @javax.annotation.Nullable
  public String getRepo() {
    return repo;
  }

  public void setRepo(String repo) {
    this.repo = repo;
  }


  public LanguageLabsAidaTrustRecitationProtoDocAttribution url(String url) {
    this.url = url;
    return this;
  }

  /**
   * URL of a webdoc
   * @return url
   */
  @javax.annotation.Nullable
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }


  public LanguageLabsAidaTrustRecitationProtoDocAttribution volumeId(String volumeId) {
    this.volumeId = volumeId;
    return this;
  }

  /**
   * Get volumeId
   * @return volumeId
   */
  @javax.annotation.Nullable
  public String getVolumeId() {
    return volumeId;
  }

  public void setVolumeId(String volumeId) {
    this.volumeId = volumeId;
  }


  public LanguageLabsAidaTrustRecitationProtoDocAttribution wikipediaArticleTitle(String wikipediaArticleTitle) {
    this.wikipediaArticleTitle = wikipediaArticleTitle;
    return this;
  }

  /**
   * Wikipedia article title. The Wikipedia TFDS dataset includes article titles but not URLs. While a URL is to the best of our knowledge a deterministic function of the title, we store the original title to reflect the information in the original dataset.
   * @return wikipediaArticleTitle
   */
  @javax.annotation.Nullable
  public String getWikipediaArticleTitle() {
    return wikipediaArticleTitle;
  }

  public void setWikipediaArticleTitle(String wikipediaArticleTitle) {
    this.wikipediaArticleTitle = wikipediaArticleTitle;
  }


  public LanguageLabsAidaTrustRecitationProtoDocAttribution youtubeVideoId(String youtubeVideoId) {
    this.youtubeVideoId = youtubeVideoId;
    return this;
  }

  /**
   * The unique video id from Youtube. Example: AkoGsW52Ir0
   * @return youtubeVideoId
   */
  @javax.annotation.Nullable
  public String getYoutubeVideoId() {
    return youtubeVideoId;
  }

  public void setYoutubeVideoId(String youtubeVideoId) {
    this.youtubeVideoId = youtubeVideoId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LanguageLabsAidaTrustRecitationProtoDocAttribution languageLabsAidaTrustRecitationProtoDocAttribution = (LanguageLabsAidaTrustRecitationProtoDocAttribution) o;
    return Objects.equals(this.amarnaId, languageLabsAidaTrustRecitationProtoDocAttribution.amarnaId) &&
        Objects.equals(this.arxivId, languageLabsAidaTrustRecitationProtoDocAttribution.arxivId) &&
        Objects.equals(this.author, languageLabsAidaTrustRecitationProtoDocAttribution.author) &&
        Objects.equals(this.bibkey, languageLabsAidaTrustRecitationProtoDocAttribution.bibkey) &&
        Objects.equals(this.biorxivId, languageLabsAidaTrustRecitationProtoDocAttribution.biorxivId) &&
        Objects.equals(this.bookTitle, languageLabsAidaTrustRecitationProtoDocAttribution.bookTitle) &&
        Objects.equals(this.bookVolumeId, languageLabsAidaTrustRecitationProtoDocAttribution.bookVolumeId) &&
        Objects.equals(this.category, languageLabsAidaTrustRecitationProtoDocAttribution.category) &&
        Objects.equals(this.conversationId, languageLabsAidaTrustRecitationProtoDocAttribution.conversationId) &&
        Objects.equals(this.dataset, languageLabsAidaTrustRecitationProtoDocAttribution.dataset) &&
        Objects.equals(this.filepath, languageLabsAidaTrustRecitationProtoDocAttribution.filepath) &&
        Objects.equals(this.geminiId, languageLabsAidaTrustRecitationProtoDocAttribution.geminiId) &&
        Objects.equals(this.gnewsArticleTitle, languageLabsAidaTrustRecitationProtoDocAttribution.gnewsArticleTitle) &&
        Objects.equals(this.goodallExampleId, languageLabsAidaTrustRecitationProtoDocAttribution.goodallExampleId) &&
        Objects.equals(this.isOptOut, languageLabsAidaTrustRecitationProtoDocAttribution.isOptOut) &&
        Objects.equals(this.isPrompt, languageLabsAidaTrustRecitationProtoDocAttribution.isPrompt) &&
        Objects.equals(this.lamdaExampleId, languageLabsAidaTrustRecitationProtoDocAttribution.lamdaExampleId) &&
        Objects.equals(this.license, languageLabsAidaTrustRecitationProtoDocAttribution.license) &&
        Objects.equals(this.meenaConversationId, languageLabsAidaTrustRecitationProtoDocAttribution.meenaConversationId) &&
        Objects.equals(this.naturalLanguageCode, languageLabsAidaTrustRecitationProtoDocAttribution.naturalLanguageCode) &&
        Objects.equals(this.noAttribution, languageLabsAidaTrustRecitationProtoDocAttribution.noAttribution) &&
        Objects.equals(this.podcastUtteranceId, languageLabsAidaTrustRecitationProtoDocAttribution.podcastUtteranceId) &&
        Objects.equals(this.publicationDate, languageLabsAidaTrustRecitationProtoDocAttribution.publicationDate) &&
        Objects.equals(this.qualityScoreExperimentOnly, languageLabsAidaTrustRecitationProtoDocAttribution.qualityScoreExperimentOnly) &&
        Objects.equals(this.repo, languageLabsAidaTrustRecitationProtoDocAttribution.repo) &&
        Objects.equals(this.url, languageLabsAidaTrustRecitationProtoDocAttribution.url) &&
        Objects.equals(this.volumeId, languageLabsAidaTrustRecitationProtoDocAttribution.volumeId) &&
        Objects.equals(this.wikipediaArticleTitle, languageLabsAidaTrustRecitationProtoDocAttribution.wikipediaArticleTitle) &&
        Objects.equals(this.youtubeVideoId, languageLabsAidaTrustRecitationProtoDocAttribution.youtubeVideoId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(amarnaId, arxivId, author, bibkey, biorxivId, bookTitle, bookVolumeId, category, conversationId, dataset, filepath, geminiId, gnewsArticleTitle, goodallExampleId, isOptOut, isPrompt, lamdaExampleId, license, meenaConversationId, naturalLanguageCode, noAttribution, podcastUtteranceId, publicationDate, qualityScoreExperimentOnly, repo, url, volumeId, wikipediaArticleTitle, youtubeVideoId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LanguageLabsAidaTrustRecitationProtoDocAttribution {\n");
    sb.append("    amarnaId: ").append(toIndentedString(amarnaId)).append("\n");
    sb.append("    arxivId: ").append(toIndentedString(arxivId)).append("\n");
    sb.append("    author: ").append(toIndentedString(author)).append("\n");
    sb.append("    bibkey: ").append(toIndentedString(bibkey)).append("\n");
    sb.append("    biorxivId: ").append(toIndentedString(biorxivId)).append("\n");
    sb.append("    bookTitle: ").append(toIndentedString(bookTitle)).append("\n");
    sb.append("    bookVolumeId: ").append(toIndentedString(bookVolumeId)).append("\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    conversationId: ").append(toIndentedString(conversationId)).append("\n");
    sb.append("    dataset: ").append(toIndentedString(dataset)).append("\n");
    sb.append("    filepath: ").append(toIndentedString(filepath)).append("\n");
    sb.append("    geminiId: ").append(toIndentedString(geminiId)).append("\n");
    sb.append("    gnewsArticleTitle: ").append(toIndentedString(gnewsArticleTitle)).append("\n");
    sb.append("    goodallExampleId: ").append(toIndentedString(goodallExampleId)).append("\n");
    sb.append("    isOptOut: ").append(toIndentedString(isOptOut)).append("\n");
    sb.append("    isPrompt: ").append(toIndentedString(isPrompt)).append("\n");
    sb.append("    lamdaExampleId: ").append(toIndentedString(lamdaExampleId)).append("\n");
    sb.append("    license: ").append(toIndentedString(license)).append("\n");
    sb.append("    meenaConversationId: ").append(toIndentedString(meenaConversationId)).append("\n");
    sb.append("    naturalLanguageCode: ").append(toIndentedString(naturalLanguageCode)).append("\n");
    sb.append("    noAttribution: ").append(toIndentedString(noAttribution)).append("\n");
    sb.append("    podcastUtteranceId: ").append(toIndentedString(podcastUtteranceId)).append("\n");
    sb.append("    publicationDate: ").append(toIndentedString(publicationDate)).append("\n");
    sb.append("    qualityScoreExperimentOnly: ").append(toIndentedString(qualityScoreExperimentOnly)).append("\n");
    sb.append("    repo: ").append(toIndentedString(repo)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    volumeId: ").append(toIndentedString(volumeId)).append("\n");
    sb.append("    wikipediaArticleTitle: ").append(toIndentedString(wikipediaArticleTitle)).append("\n");
    sb.append("    youtubeVideoId: ").append(toIndentedString(youtubeVideoId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("amarnaId");
    openapiFields.add("arxivId");
    openapiFields.add("author");
    openapiFields.add("bibkey");
    openapiFields.add("biorxivId");
    openapiFields.add("bookTitle");
    openapiFields.add("bookVolumeId");
    openapiFields.add("category");
    openapiFields.add("conversationId");
    openapiFields.add("dataset");
    openapiFields.add("filepath");
    openapiFields.add("geminiId");
    openapiFields.add("gnewsArticleTitle");
    openapiFields.add("goodallExampleId");
    openapiFields.add("isOptOut");
    openapiFields.add("isPrompt");
    openapiFields.add("lamdaExampleId");
    openapiFields.add("license");
    openapiFields.add("meenaConversationId");
    openapiFields.add("naturalLanguageCode");
    openapiFields.add("noAttribution");
    openapiFields.add("podcastUtteranceId");
    openapiFields.add("publicationDate");
    openapiFields.add("qualityScoreExperimentOnly");
    openapiFields.add("repo");
    openapiFields.add("url");
    openapiFields.add("volumeId");
    openapiFields.add("wikipediaArticleTitle");
    openapiFields.add("youtubeVideoId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LanguageLabsAidaTrustRecitationProtoDocAttribution
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LanguageLabsAidaTrustRecitationProtoDocAttribution.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LanguageLabsAidaTrustRecitationProtoDocAttribution is not found in the empty JSON string", LanguageLabsAidaTrustRecitationProtoDocAttribution.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LanguageLabsAidaTrustRecitationProtoDocAttribution.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LanguageLabsAidaTrustRecitationProtoDocAttribution` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("amarnaId") != null && !jsonObj.get("amarnaId").isJsonNull()) && !jsonObj.get("amarnaId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `amarnaId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("amarnaId").toString()));
      }
      if ((jsonObj.get("arxivId") != null && !jsonObj.get("arxivId").isJsonNull()) && !jsonObj.get("arxivId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `arxivId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("arxivId").toString()));
      }
      if ((jsonObj.get("author") != null && !jsonObj.get("author").isJsonNull()) && !jsonObj.get("author").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `author` to be a primitive type in the JSON string but got `%s`", jsonObj.get("author").toString()));
      }
      if ((jsonObj.get("bibkey") != null && !jsonObj.get("bibkey").isJsonNull()) && !jsonObj.get("bibkey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bibkey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bibkey").toString()));
      }
      if ((jsonObj.get("biorxivId") != null && !jsonObj.get("biorxivId").isJsonNull()) && !jsonObj.get("biorxivId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `biorxivId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("biorxivId").toString()));
      }
      if ((jsonObj.get("bookTitle") != null && !jsonObj.get("bookTitle").isJsonNull()) && !jsonObj.get("bookTitle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bookTitle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bookTitle").toString()));
      }
      if ((jsonObj.get("bookVolumeId") != null && !jsonObj.get("bookVolumeId").isJsonNull()) && !jsonObj.get("bookVolumeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bookVolumeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bookVolumeId").toString()));
      }
      if ((jsonObj.get("category") != null && !jsonObj.get("category").isJsonNull()) && !jsonObj.get("category").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `category` to be a primitive type in the JSON string but got `%s`", jsonObj.get("category").toString()));
      }
      // validate the optional field `category`
      if (jsonObj.get("category") != null && !jsonObj.get("category").isJsonNull()) {
        CategoryEnum.validateJsonElement(jsonObj.get("category"));
      }
      if ((jsonObj.get("conversationId") != null && !jsonObj.get("conversationId").isJsonNull()) && !jsonObj.get("conversationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `conversationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("conversationId").toString()));
      }
      if ((jsonObj.get("dataset") != null && !jsonObj.get("dataset").isJsonNull()) && !jsonObj.get("dataset").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dataset` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dataset").toString()));
      }
      // validate the optional field `dataset`
      if (jsonObj.get("dataset") != null && !jsonObj.get("dataset").isJsonNull()) {
        DatasetEnum.validateJsonElement(jsonObj.get("dataset"));
      }
      if ((jsonObj.get("filepath") != null && !jsonObj.get("filepath").isJsonNull()) && !jsonObj.get("filepath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `filepath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("filepath").toString()));
      }
      if ((jsonObj.get("geminiId") != null && !jsonObj.get("geminiId").isJsonNull()) && !jsonObj.get("geminiId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `geminiId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("geminiId").toString()));
      }
      if ((jsonObj.get("gnewsArticleTitle") != null && !jsonObj.get("gnewsArticleTitle").isJsonNull()) && !jsonObj.get("gnewsArticleTitle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gnewsArticleTitle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gnewsArticleTitle").toString()));
      }
      if ((jsonObj.get("goodallExampleId") != null && !jsonObj.get("goodallExampleId").isJsonNull()) && !jsonObj.get("goodallExampleId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `goodallExampleId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("goodallExampleId").toString()));
      }
      if ((jsonObj.get("lamdaExampleId") != null && !jsonObj.get("lamdaExampleId").isJsonNull()) && !jsonObj.get("lamdaExampleId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lamdaExampleId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lamdaExampleId").toString()));
      }
      if ((jsonObj.get("license") != null && !jsonObj.get("license").isJsonNull()) && !jsonObj.get("license").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `license` to be a primitive type in the JSON string but got `%s`", jsonObj.get("license").toString()));
      }
      if ((jsonObj.get("meenaConversationId") != null && !jsonObj.get("meenaConversationId").isJsonNull()) && !jsonObj.get("meenaConversationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `meenaConversationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("meenaConversationId").toString()));
      }
      if ((jsonObj.get("naturalLanguageCode") != null && !jsonObj.get("naturalLanguageCode").isJsonNull()) && !jsonObj.get("naturalLanguageCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `naturalLanguageCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("naturalLanguageCode").toString()));
      }
      if ((jsonObj.get("podcastUtteranceId") != null && !jsonObj.get("podcastUtteranceId").isJsonNull()) && !jsonObj.get("podcastUtteranceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `podcastUtteranceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("podcastUtteranceId").toString()));
      }
      // validate the optional field `publicationDate`
      if (jsonObj.get("publicationDate") != null && !jsonObj.get("publicationDate").isJsonNull()) {
        GoogleTypeDate.validateJsonElement(jsonObj.get("publicationDate"));
      }
      if ((jsonObj.get("repo") != null && !jsonObj.get("repo").isJsonNull()) && !jsonObj.get("repo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `repo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("repo").toString()));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      if ((jsonObj.get("volumeId") != null && !jsonObj.get("volumeId").isJsonNull()) && !jsonObj.get("volumeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `volumeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("volumeId").toString()));
      }
      if ((jsonObj.get("wikipediaArticleTitle") != null && !jsonObj.get("wikipediaArticleTitle").isJsonNull()) && !jsonObj.get("wikipediaArticleTitle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `wikipediaArticleTitle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("wikipediaArticleTitle").toString()));
      }
      if ((jsonObj.get("youtubeVideoId") != null && !jsonObj.get("youtubeVideoId").isJsonNull()) && !jsonObj.get("youtubeVideoId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `youtubeVideoId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("youtubeVideoId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LanguageLabsAidaTrustRecitationProtoDocAttribution.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LanguageLabsAidaTrustRecitationProtoDocAttribution' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LanguageLabsAidaTrustRecitationProtoDocAttribution> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LanguageLabsAidaTrustRecitationProtoDocAttribution.class));

       return (TypeAdapter<T>) new TypeAdapter<LanguageLabsAidaTrustRecitationProtoDocAttribution>() {
           @Override
           public void write(JsonWriter out, LanguageLabsAidaTrustRecitationProtoDocAttribution value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LanguageLabsAidaTrustRecitationProtoDocAttribution read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LanguageLabsAidaTrustRecitationProtoDocAttribution given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LanguageLabsAidaTrustRecitationProtoDocAttribution
   * @throws IOException if the JSON string is invalid with respect to LanguageLabsAidaTrustRecitationProtoDocAttribution
   */
  public static LanguageLabsAidaTrustRecitationProtoDocAttribution fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LanguageLabsAidaTrustRecitationProtoDocAttribution.class);
  }

  /**
   * Convert an instance of LanguageLabsAidaTrustRecitationProtoDocAttribution to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

