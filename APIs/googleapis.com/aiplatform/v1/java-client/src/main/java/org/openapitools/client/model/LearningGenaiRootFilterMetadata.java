/*
 * Vertex AI API
 * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.LearningGenaiRootFilterMetadataFilterDebugInfo;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * LearningGenaiRootFilterMetadata
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:33:33.164817-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LearningGenaiRootFilterMetadata {
  /**
   * Filter confidence.
   */
  @JsonAdapter(ConfidenceEnum.Adapter.class)
  public enum ConfidenceEnum {
    UNKNOWN("FILTER_CONFIDENCE_UNKNOWN"),
    
    VERY_LOW("FILTER_CONFIDENCE_VERY_LOW"),
    
    LOW("FILTER_CONFIDENCE_LOW"),
    
    MEDIUM("FILTER_CONFIDENCE_MEDIUM"),
    
    HIGH("FILTER_CONFIDENCE_HIGH"),
    
    VERY_HIGH("FILTER_CONFIDENCE_VERY_HIGH");

    private String value;

    ConfidenceEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ConfidenceEnum fromValue(String value) {
      for (ConfidenceEnum b : ConfidenceEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ConfidenceEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ConfidenceEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ConfidenceEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ConfidenceEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ConfidenceEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CONFIDENCE = "confidence";
  @SerializedName(SERIALIZED_NAME_CONFIDENCE)
  private ConfidenceEnum confidence;

  public static final String SERIALIZED_NAME_DEBUG_INFO = "debugInfo";
  @SerializedName(SERIALIZED_NAME_DEBUG_INFO)
  private LearningGenaiRootFilterMetadataFilterDebugInfo debugInfo;

  public static final String SERIALIZED_NAME_FALLBACK = "fallback";
  @SerializedName(SERIALIZED_NAME_FALLBACK)
  private String fallback;

  public static final String SERIALIZED_NAME_INFO = "info";
  @SerializedName(SERIALIZED_NAME_INFO)
  private String info;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  /**
   * Filter reason.
   */
  @JsonAdapter(ReasonEnum.Adapter.class)
  public enum ReasonEnum {
    UNKNOWN("FILTER_REASON_UNKNOWN"),
    
    NOT_FILTERED("FILTER_REASON_NOT_FILTERED"),
    
    SENSITIVE("FILTER_REASON_SENSITIVE"),
    
    RECITATION("FILTER_REASON_RECITATION"),
    
    LANGUAGE("FILTER_REASON_LANGUAGE"),
    
    TAKEDOWN("FILTER_REASON_TAKEDOWN"),
    
    CLASSIFIER("FILTER_REASON_CLASSIFIER"),
    
    EMPTY_RESPONSE("FILTER_REASON_EMPTY_RESPONSE"),
    
    SIMILARITY_TAKEDOWN("FILTER_REASON_SIMILARITY_TAKEDOWN"),
    
    UNSAFE("FILTER_REASON_UNSAFE"),
    
    PAIRWISE_CLASSIFIER("FILTER_REASON_PAIRWISE_CLASSIFIER"),
    
    CODEY("FILTER_REASON_CODEY"),
    
    URL("FILTER_REASON_URL"),
    
    EMAIL("FILTER_REASON_EMAIL"),
    
    SAFETY_CAT("FILTER_REASON_SAFETY_CAT"),
    
    REQUEST_RESPONSE_TAKEDOWN("FILTER_REASON_REQUEST_RESPONSE_TAKEDOWN"),
    
    RAI_PQC("FILTER_REASON_RAI_PQC"),
    
    ATLAS("FILTER_REASON_ATLAS"),
    
    RAI_CSAM("FILTER_REASON_RAI_CSAM"),
    
    RAI_FRINGE("FILTER_REASON_RAI_FRINGE"),
    
    RAI_SPII("FILTER_REASON_RAI_SPII"),
    
    RAI_IMAGE_VIOLENCE("FILTER_REASON_RAI_IMAGE_VIOLENCE"),
    
    RAI_IMAGE_PORN("FILTER_REASON_RAI_IMAGE_PORN"),
    
    RAI_IMAGE_CSAM("FILTER_REASON_RAI_IMAGE_CSAM"),
    
    RAI_IMAGE_PEDO("FILTER_REASON_RAI_IMAGE_PEDO"),
    
    RAI_VIDEO_FRAME_VIOLENCE("FILTER_REASON_RAI_VIDEO_FRAME_VIOLENCE"),
    
    RAI_VIDEO_FRAME_PORN("FILTER_REASON_RAI_VIDEO_FRAME_PORN"),
    
    RAI_VIDEO_FRAME_CSAM("FILTER_REASON_RAI_VIDEO_FRAME_CSAM"),
    
    RAI_VIDEO_FRAME_PEDO("FILTER_REASON_RAI_VIDEO_FRAME_PEDO"),
    
    RAI_CONTEXTUAL_DANGEROUS("FILTER_REASON_RAI_CONTEXTUAL_DANGEROUS"),
    
    RAI_GRAIL_TEXT("FILTER_REASON_RAI_GRAIL_TEXT"),
    
    RAI_GRAIL_IMAGE("FILTER_REASON_RAI_GRAIL_IMAGE"),
    
    RAI_SAFETYCAT("FILTER_REASON_RAI_SAFETYCAT"),
    
    TOXICITY("FILTER_REASON_TOXICITY"),
    
    ATLAS_PRICING("FILTER_REASON_ATLAS_PRICING"),
    
    ATLAS_BILLING("FILTER_REASON_ATLAS_BILLING"),
    
    ATLAS_NON_ENGLISH_QUESTION("FILTER_REASON_ATLAS_NON_ENGLISH_QUESTION"),
    
    ATLAS_NOT_RELATED_TO_GCP("FILTER_REASON_ATLAS_NOT_RELATED_TO_GCP"),
    
    ATLAS_AWS_AZURE_RELATED("FILTER_REASON_ATLAS_AWS_AZURE_RELATED");

    private String value;

    ReasonEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ReasonEnum fromValue(String value) {
      for (ReasonEnum b : ReasonEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ReasonEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ReasonEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ReasonEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ReasonEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ReasonEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_REASON = "reason";
  @SerializedName(SERIALIZED_NAME_REASON)
  private ReasonEnum reason;

  public static final String SERIALIZED_NAME_TEXT = "text";
  @SerializedName(SERIALIZED_NAME_TEXT)
  private String text;

  public LearningGenaiRootFilterMetadata() {
  }

  public LearningGenaiRootFilterMetadata confidence(ConfidenceEnum confidence) {
    this.confidence = confidence;
    return this;
  }

  /**
   * Filter confidence.
   * @return confidence
   */
  @javax.annotation.Nullable
  public ConfidenceEnum getConfidence() {
    return confidence;
  }

  public void setConfidence(ConfidenceEnum confidence) {
    this.confidence = confidence;
  }


  public LearningGenaiRootFilterMetadata debugInfo(LearningGenaiRootFilterMetadataFilterDebugInfo debugInfo) {
    this.debugInfo = debugInfo;
    return this;
  }

  /**
   * Get debugInfo
   * @return debugInfo
   */
  @javax.annotation.Nullable
  public LearningGenaiRootFilterMetadataFilterDebugInfo getDebugInfo() {
    return debugInfo;
  }

  public void setDebugInfo(LearningGenaiRootFilterMetadataFilterDebugInfo debugInfo) {
    this.debugInfo = debugInfo;
  }


  public LearningGenaiRootFilterMetadata fallback(String fallback) {
    this.fallback = fallback;
    return this;
  }

  /**
   * A fallback message chosen by the applied filter.
   * @return fallback
   */
  @javax.annotation.Nullable
  public String getFallback() {
    return fallback;
  }

  public void setFallback(String fallback) {
    this.fallback = fallback;
  }


  public LearningGenaiRootFilterMetadata info(String info) {
    this.info = info;
    return this;
  }

  /**
   * Additional info for the filter.
   * @return info
   */
  @javax.annotation.Nullable
  public String getInfo() {
    return info;
  }

  public void setInfo(String info) {
    this.info = info;
  }


  public LearningGenaiRootFilterMetadata name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Name of the filter that triggered.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public LearningGenaiRootFilterMetadata reason(ReasonEnum reason) {
    this.reason = reason;
    return this;
  }

  /**
   * Filter reason.
   * @return reason
   */
  @javax.annotation.Nullable
  public ReasonEnum getReason() {
    return reason;
  }

  public void setReason(ReasonEnum reason) {
    this.reason = reason;
  }


  public LearningGenaiRootFilterMetadata text(String text) {
    this.text = text;
    return this;
  }

  /**
   * The input query or generated response that is getting filtered.
   * @return text
   */
  @javax.annotation.Nullable
  public String getText() {
    return text;
  }

  public void setText(String text) {
    this.text = text;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LearningGenaiRootFilterMetadata learningGenaiRootFilterMetadata = (LearningGenaiRootFilterMetadata) o;
    return Objects.equals(this.confidence, learningGenaiRootFilterMetadata.confidence) &&
        Objects.equals(this.debugInfo, learningGenaiRootFilterMetadata.debugInfo) &&
        Objects.equals(this.fallback, learningGenaiRootFilterMetadata.fallback) &&
        Objects.equals(this.info, learningGenaiRootFilterMetadata.info) &&
        Objects.equals(this.name, learningGenaiRootFilterMetadata.name) &&
        Objects.equals(this.reason, learningGenaiRootFilterMetadata.reason) &&
        Objects.equals(this.text, learningGenaiRootFilterMetadata.text);
  }

  @Override
  public int hashCode() {
    return Objects.hash(confidence, debugInfo, fallback, info, name, reason, text);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LearningGenaiRootFilterMetadata {\n");
    sb.append("    confidence: ").append(toIndentedString(confidence)).append("\n");
    sb.append("    debugInfo: ").append(toIndentedString(debugInfo)).append("\n");
    sb.append("    fallback: ").append(toIndentedString(fallback)).append("\n");
    sb.append("    info: ").append(toIndentedString(info)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    reason: ").append(toIndentedString(reason)).append("\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("confidence");
    openapiFields.add("debugInfo");
    openapiFields.add("fallback");
    openapiFields.add("info");
    openapiFields.add("name");
    openapiFields.add("reason");
    openapiFields.add("text");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LearningGenaiRootFilterMetadata
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LearningGenaiRootFilterMetadata.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LearningGenaiRootFilterMetadata is not found in the empty JSON string", LearningGenaiRootFilterMetadata.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LearningGenaiRootFilterMetadata.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LearningGenaiRootFilterMetadata` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("confidence") != null && !jsonObj.get("confidence").isJsonNull()) && !jsonObj.get("confidence").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `confidence` to be a primitive type in the JSON string but got `%s`", jsonObj.get("confidence").toString()));
      }
      // validate the optional field `confidence`
      if (jsonObj.get("confidence") != null && !jsonObj.get("confidence").isJsonNull()) {
        ConfidenceEnum.validateJsonElement(jsonObj.get("confidence"));
      }
      // validate the optional field `debugInfo`
      if (jsonObj.get("debugInfo") != null && !jsonObj.get("debugInfo").isJsonNull()) {
        LearningGenaiRootFilterMetadataFilterDebugInfo.validateJsonElement(jsonObj.get("debugInfo"));
      }
      if ((jsonObj.get("fallback") != null && !jsonObj.get("fallback").isJsonNull()) && !jsonObj.get("fallback").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fallback` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fallback").toString()));
      }
      if ((jsonObj.get("info") != null && !jsonObj.get("info").isJsonNull()) && !jsonObj.get("info").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `info` to be a primitive type in the JSON string but got `%s`", jsonObj.get("info").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("reason") != null && !jsonObj.get("reason").isJsonNull()) && !jsonObj.get("reason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reason").toString()));
      }
      // validate the optional field `reason`
      if (jsonObj.get("reason") != null && !jsonObj.get("reason").isJsonNull()) {
        ReasonEnum.validateJsonElement(jsonObj.get("reason"));
      }
      if ((jsonObj.get("text") != null && !jsonObj.get("text").isJsonNull()) && !jsonObj.get("text").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `text` to be a primitive type in the JSON string but got `%s`", jsonObj.get("text").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LearningGenaiRootFilterMetadata.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LearningGenaiRootFilterMetadata' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LearningGenaiRootFilterMetadata> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LearningGenaiRootFilterMetadata.class));

       return (TypeAdapter<T>) new TypeAdapter<LearningGenaiRootFilterMetadata>() {
           @Override
           public void write(JsonWriter out, LearningGenaiRootFilterMetadata value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LearningGenaiRootFilterMetadata read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LearningGenaiRootFilterMetadata given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LearningGenaiRootFilterMetadata
   * @throws IOException if the JSON string is invalid with respect to LearningGenaiRootFilterMetadata
   */
  public static LearningGenaiRootFilterMetadata fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LearningGenaiRootFilterMetadata.class);
  }

  /**
   * Convert an instance of LearningGenaiRootFilterMetadata to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

