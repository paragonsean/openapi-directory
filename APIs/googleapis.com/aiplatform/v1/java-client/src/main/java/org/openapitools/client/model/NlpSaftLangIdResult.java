/*
 * Vertex AI API
 * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.NlpSaftLanguageSpan;
import org.openapitools.client.model.NlpSaftLanguageSpanSequence;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * NlpSaftLangIdResult
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:33:33.164817-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class NlpSaftLangIdResult {
  /**
   * The version of the model used to create these annotations.
   */
  @JsonAdapter(ModelVersionEnum.Adapter.class)
  public enum ModelVersionEnum {
    VERSION_UNSPECIFIED("VERSION_UNSPECIFIED"),
    
    INDEXING_20181017("INDEXING_20181017"),
    
    INDEXING_20191206("INDEXING_20191206"),
    
    INDEXING_20200313("INDEXING_20200313"),
    
    INDEXING_20210618("INDEXING_20210618"),
    
    STANDARD_20220516("STANDARD_20220516");

    private String value;

    ModelVersionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ModelVersionEnum fromValue(String value) {
      for (ModelVersionEnum b : ModelVersionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ModelVersionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ModelVersionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ModelVersionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ModelVersionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ModelVersionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MODEL_VERSION = "modelVersion";
  @SerializedName(SERIALIZED_NAME_MODEL_VERSION)
  private ModelVersionEnum modelVersion;

  public static final String SERIALIZED_NAME_PREDICTIONS = "predictions";
  @SerializedName(SERIALIZED_NAME_PREDICTIONS)
  private List<NlpSaftLanguageSpan> predictions = new ArrayList<>();

  public static final String SERIALIZED_NAME_SPAN_PREDICTIONS = "spanPredictions";
  @SerializedName(SERIALIZED_NAME_SPAN_PREDICTIONS)
  private List<NlpSaftLanguageSpanSequence> spanPredictions = new ArrayList<>();

  public NlpSaftLangIdResult() {
  }

  public NlpSaftLangIdResult modelVersion(ModelVersionEnum modelVersion) {
    this.modelVersion = modelVersion;
    return this;
  }

  /**
   * The version of the model used to create these annotations.
   * @return modelVersion
   */
  @javax.annotation.Nullable
  public ModelVersionEnum getModelVersion() {
    return modelVersion;
  }

  public void setModelVersion(ModelVersionEnum modelVersion) {
    this.modelVersion = modelVersion;
  }


  public NlpSaftLangIdResult predictions(List<NlpSaftLanguageSpan> predictions) {
    this.predictions = predictions;
    return this;
  }

  public NlpSaftLangIdResult addPredictionsItem(NlpSaftLanguageSpan predictionsItem) {
    if (this.predictions == null) {
      this.predictions = new ArrayList<>();
    }
    this.predictions.add(predictionsItem);
    return this;
  }

  /**
   * This field stores the n-best list of possible BCP 47 language code strings for a given input sorted in descending order according to each code&#39;s respective probability.
   * @return predictions
   */
  @javax.annotation.Nullable
  public List<NlpSaftLanguageSpan> getPredictions() {
    return predictions;
  }

  public void setPredictions(List<NlpSaftLanguageSpan> predictions) {
    this.predictions = predictions;
  }


  public NlpSaftLangIdResult spanPredictions(List<NlpSaftLanguageSpanSequence> spanPredictions) {
    this.spanPredictions = spanPredictions;
    return this;
  }

  public NlpSaftLangIdResult addSpanPredictionsItem(NlpSaftLanguageSpanSequence spanPredictionsItem) {
    if (this.spanPredictions == null) {
      this.spanPredictions = new ArrayList<>();
    }
    this.spanPredictions.add(spanPredictionsItem);
    return this;
  }

  /**
   * This field stores language predictions of subspans of the input, when available. Each LanguageSpanSequence is a sequence of LanguageSpans. A particular sequence of LanguageSpans has an associated probability, and need not necessarily cover the entire input. If no language could be predicted for any span, then this field may be empty.
   * @return spanPredictions
   */
  @javax.annotation.Nullable
  public List<NlpSaftLanguageSpanSequence> getSpanPredictions() {
    return spanPredictions;
  }

  public void setSpanPredictions(List<NlpSaftLanguageSpanSequence> spanPredictions) {
    this.spanPredictions = spanPredictions;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NlpSaftLangIdResult nlpSaftLangIdResult = (NlpSaftLangIdResult) o;
    return Objects.equals(this.modelVersion, nlpSaftLangIdResult.modelVersion) &&
        Objects.equals(this.predictions, nlpSaftLangIdResult.predictions) &&
        Objects.equals(this.spanPredictions, nlpSaftLangIdResult.spanPredictions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(modelVersion, predictions, spanPredictions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NlpSaftLangIdResult {\n");
    sb.append("    modelVersion: ").append(toIndentedString(modelVersion)).append("\n");
    sb.append("    predictions: ").append(toIndentedString(predictions)).append("\n");
    sb.append("    spanPredictions: ").append(toIndentedString(spanPredictions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("modelVersion");
    openapiFields.add("predictions");
    openapiFields.add("spanPredictions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NlpSaftLangIdResult
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NlpSaftLangIdResult.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NlpSaftLangIdResult is not found in the empty JSON string", NlpSaftLangIdResult.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NlpSaftLangIdResult.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NlpSaftLangIdResult` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("modelVersion") != null && !jsonObj.get("modelVersion").isJsonNull()) && !jsonObj.get("modelVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `modelVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("modelVersion").toString()));
      }
      // validate the optional field `modelVersion`
      if (jsonObj.get("modelVersion") != null && !jsonObj.get("modelVersion").isJsonNull()) {
        ModelVersionEnum.validateJsonElement(jsonObj.get("modelVersion"));
      }
      if (jsonObj.get("predictions") != null && !jsonObj.get("predictions").isJsonNull()) {
        JsonArray jsonArraypredictions = jsonObj.getAsJsonArray("predictions");
        if (jsonArraypredictions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("predictions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `predictions` to be an array in the JSON string but got `%s`", jsonObj.get("predictions").toString()));
          }

          // validate the optional field `predictions` (array)
          for (int i = 0; i < jsonArraypredictions.size(); i++) {
            NlpSaftLanguageSpan.validateJsonElement(jsonArraypredictions.get(i));
          };
        }
      }
      if (jsonObj.get("spanPredictions") != null && !jsonObj.get("spanPredictions").isJsonNull()) {
        JsonArray jsonArrayspanPredictions = jsonObj.getAsJsonArray("spanPredictions");
        if (jsonArrayspanPredictions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("spanPredictions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `spanPredictions` to be an array in the JSON string but got `%s`", jsonObj.get("spanPredictions").toString()));
          }

          // validate the optional field `spanPredictions` (array)
          for (int i = 0; i < jsonArrayspanPredictions.size(); i++) {
            NlpSaftLanguageSpanSequence.validateJsonElement(jsonArrayspanPredictions.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NlpSaftLangIdResult.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NlpSaftLangIdResult' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NlpSaftLangIdResult> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NlpSaftLangIdResult.class));

       return (TypeAdapter<T>) new TypeAdapter<NlpSaftLangIdResult>() {
           @Override
           public void write(JsonWriter out, NlpSaftLangIdResult value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NlpSaftLangIdResult read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NlpSaftLangIdResult given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NlpSaftLangIdResult
   * @throws IOException if the JSON string is invalid with respect to NlpSaftLangIdResult
   */
  public static NlpSaftLangIdResult fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NlpSaftLangIdResult.class);
  }

  /**
   * Convert an instance of NlpSaftLangIdResult to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

