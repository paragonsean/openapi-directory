/*
 * Vertex AI API
 * Train high-quality custom machine learning models with minimal machine learning expertise and effort.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.LearningGenaiRootCalculationType;
import org.openapitools.client.model.LearningGenaiRootInternalMetadata;
import org.openapitools.client.model.LearningGenaiRootThresholdType;
import org.openapitools.client.model.LearningGenaiRootTokensAndLogProbPerDecodingStep;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * LearningGenaiRootScore
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:33:33.164817-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LearningGenaiRootScore {
  public static final String SERIALIZED_NAME_CALCULATION_TYPE = "calculationType";
  @SerializedName(SERIALIZED_NAME_CALCULATION_TYPE)
  private LearningGenaiRootCalculationType calculationType;

  public static final String SERIALIZED_NAME_INTERNAL_METADATA = "internalMetadata";
  @SerializedName(SERIALIZED_NAME_INTERNAL_METADATA)
  private LearningGenaiRootInternalMetadata internalMetadata;

  public static final String SERIALIZED_NAME_THRESHOLD_TYPE = "thresholdType";
  @SerializedName(SERIALIZED_NAME_THRESHOLD_TYPE)
  private LearningGenaiRootThresholdType thresholdType;

  public static final String SERIALIZED_NAME_TOKENS_AND_LOGPROB_PER_DECODING_STEP = "tokensAndLogprobPerDecodingStep";
  @SerializedName(SERIALIZED_NAME_TOKENS_AND_LOGPROB_PER_DECODING_STEP)
  private LearningGenaiRootTokensAndLogProbPerDecodingStep tokensAndLogprobPerDecodingStep;

  public static final String SERIALIZED_NAME_VALUE = "value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  private Double value;

  public LearningGenaiRootScore() {
  }

  public LearningGenaiRootScore calculationType(LearningGenaiRootCalculationType calculationType) {
    this.calculationType = calculationType;
    return this;
  }

  /**
   * Get calculationType
   * @return calculationType
   */
  @javax.annotation.Nullable
  public LearningGenaiRootCalculationType getCalculationType() {
    return calculationType;
  }

  public void setCalculationType(LearningGenaiRootCalculationType calculationType) {
    this.calculationType = calculationType;
  }


  public LearningGenaiRootScore internalMetadata(LearningGenaiRootInternalMetadata internalMetadata) {
    this.internalMetadata = internalMetadata;
    return this;
  }

  /**
   * Get internalMetadata
   * @return internalMetadata
   */
  @javax.annotation.Nullable
  public LearningGenaiRootInternalMetadata getInternalMetadata() {
    return internalMetadata;
  }

  public void setInternalMetadata(LearningGenaiRootInternalMetadata internalMetadata) {
    this.internalMetadata = internalMetadata;
  }


  public LearningGenaiRootScore thresholdType(LearningGenaiRootThresholdType thresholdType) {
    this.thresholdType = thresholdType;
    return this;
  }

  /**
   * Get thresholdType
   * @return thresholdType
   */
  @javax.annotation.Nullable
  public LearningGenaiRootThresholdType getThresholdType() {
    return thresholdType;
  }

  public void setThresholdType(LearningGenaiRootThresholdType thresholdType) {
    this.thresholdType = thresholdType;
  }


  public LearningGenaiRootScore tokensAndLogprobPerDecodingStep(LearningGenaiRootTokensAndLogProbPerDecodingStep tokensAndLogprobPerDecodingStep) {
    this.tokensAndLogprobPerDecodingStep = tokensAndLogprobPerDecodingStep;
    return this;
  }

  /**
   * Get tokensAndLogprobPerDecodingStep
   * @return tokensAndLogprobPerDecodingStep
   */
  @javax.annotation.Nullable
  public LearningGenaiRootTokensAndLogProbPerDecodingStep getTokensAndLogprobPerDecodingStep() {
    return tokensAndLogprobPerDecodingStep;
  }

  public void setTokensAndLogprobPerDecodingStep(LearningGenaiRootTokensAndLogProbPerDecodingStep tokensAndLogprobPerDecodingStep) {
    this.tokensAndLogprobPerDecodingStep = tokensAndLogprobPerDecodingStep;
  }


  public LearningGenaiRootScore value(Double value) {
    this.value = value;
    return this;
  }

  /**
   * Get value
   * @return value
   */
  @javax.annotation.Nullable
  public Double getValue() {
    return value;
  }

  public void setValue(Double value) {
    this.value = value;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LearningGenaiRootScore learningGenaiRootScore = (LearningGenaiRootScore) o;
    return Objects.equals(this.calculationType, learningGenaiRootScore.calculationType) &&
        Objects.equals(this.internalMetadata, learningGenaiRootScore.internalMetadata) &&
        Objects.equals(this.thresholdType, learningGenaiRootScore.thresholdType) &&
        Objects.equals(this.tokensAndLogprobPerDecodingStep, learningGenaiRootScore.tokensAndLogprobPerDecodingStep) &&
        Objects.equals(this.value, learningGenaiRootScore.value);
  }

  @Override
  public int hashCode() {
    return Objects.hash(calculationType, internalMetadata, thresholdType, tokensAndLogprobPerDecodingStep, value);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LearningGenaiRootScore {\n");
    sb.append("    calculationType: ").append(toIndentedString(calculationType)).append("\n");
    sb.append("    internalMetadata: ").append(toIndentedString(internalMetadata)).append("\n");
    sb.append("    thresholdType: ").append(toIndentedString(thresholdType)).append("\n");
    sb.append("    tokensAndLogprobPerDecodingStep: ").append(toIndentedString(tokensAndLogprobPerDecodingStep)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("calculationType");
    openapiFields.add("internalMetadata");
    openapiFields.add("thresholdType");
    openapiFields.add("tokensAndLogprobPerDecodingStep");
    openapiFields.add("value");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LearningGenaiRootScore
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LearningGenaiRootScore.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LearningGenaiRootScore is not found in the empty JSON string", LearningGenaiRootScore.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LearningGenaiRootScore.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LearningGenaiRootScore` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `calculationType`
      if (jsonObj.get("calculationType") != null && !jsonObj.get("calculationType").isJsonNull()) {
        LearningGenaiRootCalculationType.validateJsonElement(jsonObj.get("calculationType"));
      }
      // validate the optional field `internalMetadata`
      if (jsonObj.get("internalMetadata") != null && !jsonObj.get("internalMetadata").isJsonNull()) {
        LearningGenaiRootInternalMetadata.validateJsonElement(jsonObj.get("internalMetadata"));
      }
      // validate the optional field `thresholdType`
      if (jsonObj.get("thresholdType") != null && !jsonObj.get("thresholdType").isJsonNull()) {
        LearningGenaiRootThresholdType.validateJsonElement(jsonObj.get("thresholdType"));
      }
      // validate the optional field `tokensAndLogprobPerDecodingStep`
      if (jsonObj.get("tokensAndLogprobPerDecodingStep") != null && !jsonObj.get("tokensAndLogprobPerDecodingStep").isJsonNull()) {
        LearningGenaiRootTokensAndLogProbPerDecodingStep.validateJsonElement(jsonObj.get("tokensAndLogprobPerDecodingStep"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LearningGenaiRootScore.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LearningGenaiRootScore' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LearningGenaiRootScore> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LearningGenaiRootScore.class));

       return (TypeAdapter<T>) new TypeAdapter<LearningGenaiRootScore>() {
           @Override
           public void write(JsonWriter out, LearningGenaiRootScore value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LearningGenaiRootScore read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LearningGenaiRootScore given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LearningGenaiRootScore
   * @throws IOException if the JSON string is invalid with respect to LearningGenaiRootScore
   */
  public static LearningGenaiRootScore fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LearningGenaiRootScore.class);
  }

  /**
   * Convert an instance of LearningGenaiRootScore to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

