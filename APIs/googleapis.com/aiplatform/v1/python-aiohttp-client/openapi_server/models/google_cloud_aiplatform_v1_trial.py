# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_aiplatform_v1_measurement import GoogleCloudAiplatformV1Measurement
from openapi_server.models.google_cloud_aiplatform_v1_trial_parameter import GoogleCloudAiplatformV1TrialParameter
from openapi_server import util


class GoogleCloudAiplatformV1Trial(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, client_id: str=None, custom_job: str=None, end_time: str=None, final_measurement: GoogleCloudAiplatformV1Measurement=None, id: str=None, infeasible_reason: str=None, measurements: List[GoogleCloudAiplatformV1Measurement]=None, name: str=None, parameters: List[GoogleCloudAiplatformV1TrialParameter]=None, start_time: str=None, state: str=None, web_access_uris: Dict[str, str]=None):
        """GoogleCloudAiplatformV1Trial - a model defined in OpenAPI

        :param client_id: The client_id of this GoogleCloudAiplatformV1Trial.
        :param custom_job: The custom_job of this GoogleCloudAiplatformV1Trial.
        :param end_time: The end_time of this GoogleCloudAiplatformV1Trial.
        :param final_measurement: The final_measurement of this GoogleCloudAiplatformV1Trial.
        :param id: The id of this GoogleCloudAiplatformV1Trial.
        :param infeasible_reason: The infeasible_reason of this GoogleCloudAiplatformV1Trial.
        :param measurements: The measurements of this GoogleCloudAiplatformV1Trial.
        :param name: The name of this GoogleCloudAiplatformV1Trial.
        :param parameters: The parameters of this GoogleCloudAiplatformV1Trial.
        :param start_time: The start_time of this GoogleCloudAiplatformV1Trial.
        :param state: The state of this GoogleCloudAiplatformV1Trial.
        :param web_access_uris: The web_access_uris of this GoogleCloudAiplatformV1Trial.
        """
        self.openapi_types = {
            'client_id': str,
            'custom_job': str,
            'end_time': str,
            'final_measurement': GoogleCloudAiplatformV1Measurement,
            'id': str,
            'infeasible_reason': str,
            'measurements': List[GoogleCloudAiplatformV1Measurement],
            'name': str,
            'parameters': List[GoogleCloudAiplatformV1TrialParameter],
            'start_time': str,
            'state': str,
            'web_access_uris': Dict[str, str]
        }

        self.attribute_map = {
            'client_id': 'clientId',
            'custom_job': 'customJob',
            'end_time': 'endTime',
            'final_measurement': 'finalMeasurement',
            'id': 'id',
            'infeasible_reason': 'infeasibleReason',
            'measurements': 'measurements',
            'name': 'name',
            'parameters': 'parameters',
            'start_time': 'startTime',
            'state': 'state',
            'web_access_uris': 'webAccessUris'
        }

        self._client_id = client_id
        self._custom_job = custom_job
        self._end_time = end_time
        self._final_measurement = final_measurement
        self._id = id
        self._infeasible_reason = infeasible_reason
        self._measurements = measurements
        self._name = name
        self._parameters = parameters
        self._start_time = start_time
        self._state = state
        self._web_access_uris = web_access_uris

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudAiplatformV1Trial':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudAiplatformV1Trial of this GoogleCloudAiplatformV1Trial.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def client_id(self):
        """Gets the client_id of this GoogleCloudAiplatformV1Trial.

        Output only. The identifier of the client that originally requested this Trial. Each client is identified by a unique client_id. When a client asks for a suggestion, Vertex AI Vizier will assign it a Trial. The client should evaluate the Trial, complete it, and report back to Vertex AI Vizier. If suggestion is asked again by same client_id before the Trial is completed, the same Trial will be returned. Multiple clients with different client_ids can ask for suggestions simultaneously, each of them will get their own Trial.

        :return: The client_id of this GoogleCloudAiplatformV1Trial.
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this GoogleCloudAiplatformV1Trial.

        Output only. The identifier of the client that originally requested this Trial. Each client is identified by a unique client_id. When a client asks for a suggestion, Vertex AI Vizier will assign it a Trial. The client should evaluate the Trial, complete it, and report back to Vertex AI Vizier. If suggestion is asked again by same client_id before the Trial is completed, the same Trial will be returned. Multiple clients with different client_ids can ask for suggestions simultaneously, each of them will get their own Trial.

        :param client_id: The client_id of this GoogleCloudAiplatformV1Trial.
        :type client_id: str
        """

        self._client_id = client_id

    @property
    def custom_job(self):
        """Gets the custom_job of this GoogleCloudAiplatformV1Trial.

        Output only. The CustomJob name linked to the Trial. It's set for a HyperparameterTuningJob's Trial.

        :return: The custom_job of this GoogleCloudAiplatformV1Trial.
        :rtype: str
        """
        return self._custom_job

    @custom_job.setter
    def custom_job(self, custom_job):
        """Sets the custom_job of this GoogleCloudAiplatformV1Trial.

        Output only. The CustomJob name linked to the Trial. It's set for a HyperparameterTuningJob's Trial.

        :param custom_job: The custom_job of this GoogleCloudAiplatformV1Trial.
        :type custom_job: str
        """

        self._custom_job = custom_job

    @property
    def end_time(self):
        """Gets the end_time of this GoogleCloudAiplatformV1Trial.

        Output only. Time when the Trial's status changed to `SUCCEEDED` or `INFEASIBLE`.

        :return: The end_time of this GoogleCloudAiplatformV1Trial.
        :rtype: str
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this GoogleCloudAiplatformV1Trial.

        Output only. Time when the Trial's status changed to `SUCCEEDED` or `INFEASIBLE`.

        :param end_time: The end_time of this GoogleCloudAiplatformV1Trial.
        :type end_time: str
        """

        self._end_time = end_time

    @property
    def final_measurement(self):
        """Gets the final_measurement of this GoogleCloudAiplatformV1Trial.


        :return: The final_measurement of this GoogleCloudAiplatformV1Trial.
        :rtype: GoogleCloudAiplatformV1Measurement
        """
        return self._final_measurement

    @final_measurement.setter
    def final_measurement(self, final_measurement):
        """Sets the final_measurement of this GoogleCloudAiplatformV1Trial.


        :param final_measurement: The final_measurement of this GoogleCloudAiplatformV1Trial.
        :type final_measurement: GoogleCloudAiplatformV1Measurement
        """

        self._final_measurement = final_measurement

    @property
    def id(self):
        """Gets the id of this GoogleCloudAiplatformV1Trial.

        Output only. The identifier of the Trial assigned by the service.

        :return: The id of this GoogleCloudAiplatformV1Trial.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GoogleCloudAiplatformV1Trial.

        Output only. The identifier of the Trial assigned by the service.

        :param id: The id of this GoogleCloudAiplatformV1Trial.
        :type id: str
        """

        self._id = id

    @property
    def infeasible_reason(self):
        """Gets the infeasible_reason of this GoogleCloudAiplatformV1Trial.

        Output only. A human readable string describing why the Trial is infeasible. This is set only if Trial state is `INFEASIBLE`.

        :return: The infeasible_reason of this GoogleCloudAiplatformV1Trial.
        :rtype: str
        """
        return self._infeasible_reason

    @infeasible_reason.setter
    def infeasible_reason(self, infeasible_reason):
        """Sets the infeasible_reason of this GoogleCloudAiplatformV1Trial.

        Output only. A human readable string describing why the Trial is infeasible. This is set only if Trial state is `INFEASIBLE`.

        :param infeasible_reason: The infeasible_reason of this GoogleCloudAiplatformV1Trial.
        :type infeasible_reason: str
        """

        self._infeasible_reason = infeasible_reason

    @property
    def measurements(self):
        """Gets the measurements of this GoogleCloudAiplatformV1Trial.

        Output only. A list of measurements that are strictly lexicographically ordered by their induced tuples (steps, elapsed_duration). These are used for early stopping computations.

        :return: The measurements of this GoogleCloudAiplatformV1Trial.
        :rtype: List[GoogleCloudAiplatformV1Measurement]
        """
        return self._measurements

    @measurements.setter
    def measurements(self, measurements):
        """Sets the measurements of this GoogleCloudAiplatformV1Trial.

        Output only. A list of measurements that are strictly lexicographically ordered by their induced tuples (steps, elapsed_duration). These are used for early stopping computations.

        :param measurements: The measurements of this GoogleCloudAiplatformV1Trial.
        :type measurements: List[GoogleCloudAiplatformV1Measurement]
        """

        self._measurements = measurements

    @property
    def name(self):
        """Gets the name of this GoogleCloudAiplatformV1Trial.

        Output only. Resource name of the Trial assigned by the service.

        :return: The name of this GoogleCloudAiplatformV1Trial.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GoogleCloudAiplatformV1Trial.

        Output only. Resource name of the Trial assigned by the service.

        :param name: The name of this GoogleCloudAiplatformV1Trial.
        :type name: str
        """

        self._name = name

    @property
    def parameters(self):
        """Gets the parameters of this GoogleCloudAiplatformV1Trial.

        Output only. The parameters of the Trial.

        :return: The parameters of this GoogleCloudAiplatformV1Trial.
        :rtype: List[GoogleCloudAiplatformV1TrialParameter]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this GoogleCloudAiplatformV1Trial.

        Output only. The parameters of the Trial.

        :param parameters: The parameters of this GoogleCloudAiplatformV1Trial.
        :type parameters: List[GoogleCloudAiplatformV1TrialParameter]
        """

        self._parameters = parameters

    @property
    def start_time(self):
        """Gets the start_time of this GoogleCloudAiplatformV1Trial.

        Output only. Time when the Trial was started.

        :return: The start_time of this GoogleCloudAiplatformV1Trial.
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this GoogleCloudAiplatformV1Trial.

        Output only. Time when the Trial was started.

        :param start_time: The start_time of this GoogleCloudAiplatformV1Trial.
        :type start_time: str
        """

        self._start_time = start_time

    @property
    def state(self):
        """Gets the state of this GoogleCloudAiplatformV1Trial.

        Output only. The detailed state of the Trial.

        :return: The state of this GoogleCloudAiplatformV1Trial.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this GoogleCloudAiplatformV1Trial.

        Output only. The detailed state of the Trial.

        :param state: The state of this GoogleCloudAiplatformV1Trial.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "REQUESTED", "ACTIVE", "STOPPING", "SUCCEEDED", "INFEASIBLE"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def web_access_uris(self):
        """Gets the web_access_uris of this GoogleCloudAiplatformV1Trial.

        Output only. URIs for accessing [interactive shells](https://cloud.google.com/vertex-ai/docs/training/monitor-debug-interactive-shell) (one URI for each training node). Only available if this trial is part of a HyperparameterTuningJob and the job's trial_job_spec.enable_web_access field is `true`. The keys are names of each node used for the trial; for example, `workerpool0-0` for the primary node, `workerpool1-0` for the first node in the second worker pool, and `workerpool1-1` for the second node in the second worker pool. The values are the URIs for each node's interactive shell.

        :return: The web_access_uris of this GoogleCloudAiplatformV1Trial.
        :rtype: Dict[str, str]
        """
        return self._web_access_uris

    @web_access_uris.setter
    def web_access_uris(self, web_access_uris):
        """Sets the web_access_uris of this GoogleCloudAiplatformV1Trial.

        Output only. URIs for accessing [interactive shells](https://cloud.google.com/vertex-ai/docs/training/monitor-debug-interactive-shell) (one URI for each training node). Only available if this trial is part of a HyperparameterTuningJob and the job's trial_job_spec.enable_web_access field is `true`. The keys are names of each node used for the trial; for example, `workerpool0-0` for the primary node, `workerpool1-0` for the first node in the second worker pool, and `workerpool1-1` for the second node in the second worker pool. The values are the URIs for each node's interactive shell.

        :param web_access_uris: The web_access_uris of this GoogleCloudAiplatformV1Trial.
        :type web_access_uris: Dict[str, str]
        """

        self._web_access_uris = web_access_uris
