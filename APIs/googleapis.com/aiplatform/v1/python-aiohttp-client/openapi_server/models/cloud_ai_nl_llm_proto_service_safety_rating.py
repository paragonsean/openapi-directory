# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.cloud_ai_nl_llm_proto_service_safety_rating_influential_term import CloudAiNlLlmProtoServiceSafetyRatingInfluentialTerm
from openapi_server import util


class CloudAiNlLlmProtoServiceSafetyRating(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, blocked: bool=None, category: str=None, influential_terms: List[CloudAiNlLlmProtoServiceSafetyRatingInfluentialTerm]=None, probability: str=None, probability_score: float=None, severity: str=None, severity_score: float=None):
        """CloudAiNlLlmProtoServiceSafetyRating - a model defined in OpenAPI

        :param blocked: The blocked of this CloudAiNlLlmProtoServiceSafetyRating.
        :param category: The category of this CloudAiNlLlmProtoServiceSafetyRating.
        :param influential_terms: The influential_terms of this CloudAiNlLlmProtoServiceSafetyRating.
        :param probability: The probability of this CloudAiNlLlmProtoServiceSafetyRating.
        :param probability_score: The probability_score of this CloudAiNlLlmProtoServiceSafetyRating.
        :param severity: The severity of this CloudAiNlLlmProtoServiceSafetyRating.
        :param severity_score: The severity_score of this CloudAiNlLlmProtoServiceSafetyRating.
        """
        self.openapi_types = {
            'blocked': bool,
            'category': str,
            'influential_terms': List[CloudAiNlLlmProtoServiceSafetyRatingInfluentialTerm],
            'probability': str,
            'probability_score': float,
            'severity': str,
            'severity_score': float
        }

        self.attribute_map = {
            'blocked': 'blocked',
            'category': 'category',
            'influential_terms': 'influentialTerms',
            'probability': 'probability',
            'probability_score': 'probabilityScore',
            'severity': 'severity',
            'severity_score': 'severityScore'
        }

        self._blocked = blocked
        self._category = category
        self._influential_terms = influential_terms
        self._probability = probability
        self._probability_score = probability_score
        self._severity = severity
        self._severity_score = severity_score

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CloudAiNlLlmProtoServiceSafetyRating':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CloudAiNlLlmProtoServiceSafetyRating of this CloudAiNlLlmProtoServiceSafetyRating.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def blocked(self):
        """Gets the blocked of this CloudAiNlLlmProtoServiceSafetyRating.

        Indicates whether the content was filtered out because of this rating.

        :return: The blocked of this CloudAiNlLlmProtoServiceSafetyRating.
        :rtype: bool
        """
        return self._blocked

    @blocked.setter
    def blocked(self, blocked):
        """Sets the blocked of this CloudAiNlLlmProtoServiceSafetyRating.

        Indicates whether the content was filtered out because of this rating.

        :param blocked: The blocked of this CloudAiNlLlmProtoServiceSafetyRating.
        :type blocked: bool
        """

        self._blocked = blocked

    @property
    def category(self):
        """Gets the category of this CloudAiNlLlmProtoServiceSafetyRating.

        Harm category.

        :return: The category of this CloudAiNlLlmProtoServiceSafetyRating.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this CloudAiNlLlmProtoServiceSafetyRating.

        Harm category.

        :param category: The category of this CloudAiNlLlmProtoServiceSafetyRating.
        :type category: str
        """
        allowed_values = ["HARM_CATEGORY_UNSPECIFIED", "HARM_CATEGORY_HATE_SPEECH", "HARM_CATEGORY_DANGEROUS_CONTENT", "HARM_CATEGORY_HARASSMENT", "HARM_CATEGORY_SEXUALLY_EXPLICIT"]  # noqa: E501
        if category not in allowed_values:
            raise ValueError(
                "Invalid value for `category` ({0}), must be one of {1}"
                .format(category, allowed_values)
            )

        self._category = category

    @property
    def influential_terms(self):
        """Gets the influential_terms of this CloudAiNlLlmProtoServiceSafetyRating.

        The influential terms that could potentially block the response.

        :return: The influential_terms of this CloudAiNlLlmProtoServiceSafetyRating.
        :rtype: List[CloudAiNlLlmProtoServiceSafetyRatingInfluentialTerm]
        """
        return self._influential_terms

    @influential_terms.setter
    def influential_terms(self, influential_terms):
        """Sets the influential_terms of this CloudAiNlLlmProtoServiceSafetyRating.

        The influential terms that could potentially block the response.

        :param influential_terms: The influential_terms of this CloudAiNlLlmProtoServiceSafetyRating.
        :type influential_terms: List[CloudAiNlLlmProtoServiceSafetyRatingInfluentialTerm]
        """

        self._influential_terms = influential_terms

    @property
    def probability(self):
        """Gets the probability of this CloudAiNlLlmProtoServiceSafetyRating.

        Harm probability levels in the content.

        :return: The probability of this CloudAiNlLlmProtoServiceSafetyRating.
        :rtype: str
        """
        return self._probability

    @probability.setter
    def probability(self, probability):
        """Sets the probability of this CloudAiNlLlmProtoServiceSafetyRating.

        Harm probability levels in the content.

        :param probability: The probability of this CloudAiNlLlmProtoServiceSafetyRating.
        :type probability: str
        """
        allowed_values = ["HARM_PROBABILITY_UNSPECIFIED", "NEGLIGIBLE", "LOW", "MEDIUM", "HIGH"]  # noqa: E501
        if probability not in allowed_values:
            raise ValueError(
                "Invalid value for `probability` ({0}), must be one of {1}"
                .format(probability, allowed_values)
            )

        self._probability = probability

    @property
    def probability_score(self):
        """Gets the probability_score of this CloudAiNlLlmProtoServiceSafetyRating.

        Harm probability score.

        :return: The probability_score of this CloudAiNlLlmProtoServiceSafetyRating.
        :rtype: float
        """
        return self._probability_score

    @probability_score.setter
    def probability_score(self, probability_score):
        """Sets the probability_score of this CloudAiNlLlmProtoServiceSafetyRating.

        Harm probability score.

        :param probability_score: The probability_score of this CloudAiNlLlmProtoServiceSafetyRating.
        :type probability_score: float
        """

        self._probability_score = probability_score

    @property
    def severity(self):
        """Gets the severity of this CloudAiNlLlmProtoServiceSafetyRating.

        Harm severity levels in the content.

        :return: The severity of this CloudAiNlLlmProtoServiceSafetyRating.
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this CloudAiNlLlmProtoServiceSafetyRating.

        Harm severity levels in the content.

        :param severity: The severity of this CloudAiNlLlmProtoServiceSafetyRating.
        :type severity: str
        """
        allowed_values = ["HARM_SEVERITY_UNSPECIFIED", "HARM_SEVERITY_NEGLIGIBLE", "HARM_SEVERITY_LOW", "HARM_SEVERITY_MEDIUM", "HARM_SEVERITY_HIGH"]  # noqa: E501
        if severity not in allowed_values:
            raise ValueError(
                "Invalid value for `severity` ({0}), must be one of {1}"
                .format(severity, allowed_values)
            )

        self._severity = severity

    @property
    def severity_score(self):
        """Gets the severity_score of this CloudAiNlLlmProtoServiceSafetyRating.

        Harm severity score.

        :return: The severity_score of this CloudAiNlLlmProtoServiceSafetyRating.
        :rtype: float
        """
        return self._severity_score

    @severity_score.setter
    def severity_score(self, severity_score):
        """Sets the severity_score of this CloudAiNlLlmProtoServiceSafetyRating.

        Harm severity score.

        :param severity_score: The severity_score of this CloudAiNlLlmProtoServiceSafetyRating.
        :type severity_score: float
        """

        self._severity_score = severity_score
