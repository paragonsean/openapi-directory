# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleCloudAiplatformV1Event(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, artifact: str=None, event_time: str=None, execution: str=None, labels: Dict[str, str]=None, type: str=None):
        """GoogleCloudAiplatformV1Event - a model defined in OpenAPI

        :param artifact: The artifact of this GoogleCloudAiplatformV1Event.
        :param event_time: The event_time of this GoogleCloudAiplatformV1Event.
        :param execution: The execution of this GoogleCloudAiplatformV1Event.
        :param labels: The labels of this GoogleCloudAiplatformV1Event.
        :param type: The type of this GoogleCloudAiplatformV1Event.
        """
        self.openapi_types = {
            'artifact': str,
            'event_time': str,
            'execution': str,
            'labels': Dict[str, str],
            'type': str
        }

        self.attribute_map = {
            'artifact': 'artifact',
            'event_time': 'eventTime',
            'execution': 'execution',
            'labels': 'labels',
            'type': 'type'
        }

        self._artifact = artifact
        self._event_time = event_time
        self._execution = execution
        self._labels = labels
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudAiplatformV1Event':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudAiplatformV1Event of this GoogleCloudAiplatformV1Event.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def artifact(self):
        """Gets the artifact of this GoogleCloudAiplatformV1Event.

        Required. The relative resource name of the Artifact in the Event.

        :return: The artifact of this GoogleCloudAiplatformV1Event.
        :rtype: str
        """
        return self._artifact

    @artifact.setter
    def artifact(self, artifact):
        """Sets the artifact of this GoogleCloudAiplatformV1Event.

        Required. The relative resource name of the Artifact in the Event.

        :param artifact: The artifact of this GoogleCloudAiplatformV1Event.
        :type artifact: str
        """

        self._artifact = artifact

    @property
    def event_time(self):
        """Gets the event_time of this GoogleCloudAiplatformV1Event.

        Output only. Time the Event occurred.

        :return: The event_time of this GoogleCloudAiplatformV1Event.
        :rtype: str
        """
        return self._event_time

    @event_time.setter
    def event_time(self, event_time):
        """Sets the event_time of this GoogleCloudAiplatformV1Event.

        Output only. Time the Event occurred.

        :param event_time: The event_time of this GoogleCloudAiplatformV1Event.
        :type event_time: str
        """

        self._event_time = event_time

    @property
    def execution(self):
        """Gets the execution of this GoogleCloudAiplatformV1Event.

        Output only. The relative resource name of the Execution in the Event.

        :return: The execution of this GoogleCloudAiplatformV1Event.
        :rtype: str
        """
        return self._execution

    @execution.setter
    def execution(self, execution):
        """Sets the execution of this GoogleCloudAiplatformV1Event.

        Output only. The relative resource name of the Execution in the Event.

        :param execution: The execution of this GoogleCloudAiplatformV1Event.
        :type execution: str
        """

        self._execution = execution

    @property
    def labels(self):
        """Gets the labels of this GoogleCloudAiplatformV1Event.

        The labels with user-defined metadata to annotate Events. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. No more than 64 user labels can be associated with one Event (System labels are excluded). See https://goo.gl/xmQnxf for more information and examples of labels. System reserved label keys are prefixed with \"aiplatform.googleapis.com/\" and are immutable.

        :return: The labels of this GoogleCloudAiplatformV1Event.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this GoogleCloudAiplatformV1Event.

        The labels with user-defined metadata to annotate Events. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. No more than 64 user labels can be associated with one Event (System labels are excluded). See https://goo.gl/xmQnxf for more information and examples of labels. System reserved label keys are prefixed with \"aiplatform.googleapis.com/\" and are immutable.

        :param labels: The labels of this GoogleCloudAiplatformV1Event.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def type(self):
        """Gets the type of this GoogleCloudAiplatformV1Event.

        Required. The type of the Event.

        :return: The type of this GoogleCloudAiplatformV1Event.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this GoogleCloudAiplatformV1Event.

        Required. The type of the Event.

        :param type: The type of this GoogleCloudAiplatformV1Event.
        :type type: str
        """
        allowed_values = ["TYPE_UNSPECIFIED", "INPUT", "OUTPUT"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
