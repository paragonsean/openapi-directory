# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_aiplatform_v1_schema_trainingjob_definition_export_evaluated_data_items_config import GoogleCloudAiplatformV1SchemaTrainingjobDefinitionExportEvaluatedDataItemsConfig
from openapi_server.models.google_cloud_aiplatform_v1_schema_trainingjob_definition_hierarchy_config import GoogleCloudAiplatformV1SchemaTrainingjobDefinitionHierarchyConfig
from openapi_server.models.google_cloud_aiplatform_v1_schema_trainingjob_definition_tft_forecasting_inputs_granularity import GoogleCloudAiplatformV1SchemaTrainingjobDefinitionTftForecastingInputsGranularity
from openapi_server.models.google_cloud_aiplatform_v1_schema_trainingjob_definition_tft_forecasting_inputs_transformation import GoogleCloudAiplatformV1SchemaTrainingjobDefinitionTftForecastingInputsTransformation
from openapi_server.models.google_cloud_aiplatform_v1_schema_trainingjob_definition_window_config import GoogleCloudAiplatformV1SchemaTrainingjobDefinitionWindowConfig
from openapi_server import util


class GoogleCloudAiplatformV1SchemaTrainingjobDefinitionTftForecastingInputs(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, additional_experiments: List[str]=None, available_at_forecast_columns: List[str]=None, context_window: str=None, data_granularity: GoogleCloudAiplatformV1SchemaTrainingjobDefinitionTftForecastingInputsGranularity=None, export_evaluated_data_items_config: GoogleCloudAiplatformV1SchemaTrainingjobDefinitionExportEvaluatedDataItemsConfig=None, forecast_horizon: str=None, hierarchy_config: GoogleCloudAiplatformV1SchemaTrainingjobDefinitionHierarchyConfig=None, holiday_regions: List[str]=None, optimization_objective: str=None, quantiles: List[float]=None, target_column: str=None, time_column: str=None, time_series_attribute_columns: List[str]=None, time_series_identifier_column: str=None, train_budget_milli_node_hours: str=None, transformations: List[GoogleCloudAiplatformV1SchemaTrainingjobDefinitionTftForecastingInputsTransformation]=None, unavailable_at_forecast_columns: List[str]=None, validation_options: str=None, weight_column: str=None, window_config: GoogleCloudAiplatformV1SchemaTrainingjobDefinitionWindowConfig=None):
        """GoogleCloudAiplatformV1SchemaTrainingjobDefinitionTftForecastingInputs - a model defined in OpenAPI

        :param additional_experiments: The additional_experiments of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionTftForecastingInputs.
        :param available_at_forecast_columns: The available_at_forecast_columns of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionTftForecastingInputs.
        :param context_window: The context_window of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionTftForecastingInputs.
        :param data_granularity: The data_granularity of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionTftForecastingInputs.
        :param export_evaluated_data_items_config: The export_evaluated_data_items_config of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionTftForecastingInputs.
        :param forecast_horizon: The forecast_horizon of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionTftForecastingInputs.
        :param hierarchy_config: The hierarchy_config of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionTftForecastingInputs.
        :param holiday_regions: The holiday_regions of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionTftForecastingInputs.
        :param optimization_objective: The optimization_objective of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionTftForecastingInputs.
        :param quantiles: The quantiles of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionTftForecastingInputs.
        :param target_column: The target_column of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionTftForecastingInputs.
        :param time_column: The time_column of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionTftForecastingInputs.
        :param time_series_attribute_columns: The time_series_attribute_columns of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionTftForecastingInputs.
        :param time_series_identifier_column: The time_series_identifier_column of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionTftForecastingInputs.
        :param train_budget_milli_node_hours: The train_budget_milli_node_hours of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionTftForecastingInputs.
        :param transformations: The transformations of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionTftForecastingInputs.
        :param unavailable_at_forecast_columns: The unavailable_at_forecast_columns of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionTftForecastingInputs.
        :param validation_options: The validation_options of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionTftForecastingInputs.
        :param weight_column: The weight_column of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionTftForecastingInputs.
        :param window_config: The window_config of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionTftForecastingInputs.
        """
        self.openapi_types = {
            'additional_experiments': List[str],
            'available_at_forecast_columns': List[str],
            'context_window': str,
            'data_granularity': GoogleCloudAiplatformV1SchemaTrainingjobDefinitionTftForecastingInputsGranularity,
            'export_evaluated_data_items_config': GoogleCloudAiplatformV1SchemaTrainingjobDefinitionExportEvaluatedDataItemsConfig,
            'forecast_horizon': str,
            'hierarchy_config': GoogleCloudAiplatformV1SchemaTrainingjobDefinitionHierarchyConfig,
            'holiday_regions': List[str],
            'optimization_objective': str,
            'quantiles': List[float],
            'target_column': str,
            'time_column': str,
            'time_series_attribute_columns': List[str],
            'time_series_identifier_column': str,
            'train_budget_milli_node_hours': str,
            'transformations': List[GoogleCloudAiplatformV1SchemaTrainingjobDefinitionTftForecastingInputsTransformation],
            'unavailable_at_forecast_columns': List[str],
            'validation_options': str,
            'weight_column': str,
            'window_config': GoogleCloudAiplatformV1SchemaTrainingjobDefinitionWindowConfig
        }

        self.attribute_map = {
            'additional_experiments': 'additionalExperiments',
            'available_at_forecast_columns': 'availableAtForecastColumns',
            'context_window': 'contextWindow',
            'data_granularity': 'dataGranularity',
            'export_evaluated_data_items_config': 'exportEvaluatedDataItemsConfig',
            'forecast_horizon': 'forecastHorizon',
            'hierarchy_config': 'hierarchyConfig',
            'holiday_regions': 'holidayRegions',
            'optimization_objective': 'optimizationObjective',
            'quantiles': 'quantiles',
            'target_column': 'targetColumn',
            'time_column': 'timeColumn',
            'time_series_attribute_columns': 'timeSeriesAttributeColumns',
            'time_series_identifier_column': 'timeSeriesIdentifierColumn',
            'train_budget_milli_node_hours': 'trainBudgetMilliNodeHours',
            'transformations': 'transformations',
            'unavailable_at_forecast_columns': 'unavailableAtForecastColumns',
            'validation_options': 'validationOptions',
            'weight_column': 'weightColumn',
            'window_config': 'windowConfig'
        }

        self._additional_experiments = additional_experiments
        self._available_at_forecast_columns = available_at_forecast_columns
        self._context_window = context_window
        self._data_granularity = data_granularity
        self._export_evaluated_data_items_config = export_evaluated_data_items_config
        self._forecast_horizon = forecast_horizon
        self._hierarchy_config = hierarchy_config
        self._holiday_regions = holiday_regions
        self._optimization_objective = optimization_objective
        self._quantiles = quantiles
        self._target_column = target_column
        self._time_column = time_column
        self._time_series_attribute_columns = time_series_attribute_columns
        self._time_series_identifier_column = time_series_identifier_column
        self._train_budget_milli_node_hours = train_budget_milli_node_hours
        self._transformations = transformations
        self._unavailable_at_forecast_columns = unavailable_at_forecast_columns
        self._validation_options = validation_options
        self._weight_column = weight_column
        self._window_config = window_config

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudAiplatformV1SchemaTrainingjobDefinitionTftForecastingInputs':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudAiplatformV1SchemaTrainingjobDefinitionTftForecastingInputs of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionTftForecastingInputs.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def additional_experiments(self):
        """Gets the additional_experiments of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionTftForecastingInputs.

        Additional experiment flags for the time series forcasting training.

        :return: The additional_experiments of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionTftForecastingInputs.
        :rtype: List[str]
        """
        return self._additional_experiments

    @additional_experiments.setter
    def additional_experiments(self, additional_experiments):
        """Sets the additional_experiments of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionTftForecastingInputs.

        Additional experiment flags for the time series forcasting training.

        :param additional_experiments: The additional_experiments of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionTftForecastingInputs.
        :type additional_experiments: List[str]
        """

        self._additional_experiments = additional_experiments

    @property
    def available_at_forecast_columns(self):
        """Gets the available_at_forecast_columns of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionTftForecastingInputs.

        Names of columns that are available and provided when a forecast is requested. These columns contain information for the given entity (identified by the time_series_identifier_column column) that is known at forecast. For example, predicted weather for a specific day.

        :return: The available_at_forecast_columns of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionTftForecastingInputs.
        :rtype: List[str]
        """
        return self._available_at_forecast_columns

    @available_at_forecast_columns.setter
    def available_at_forecast_columns(self, available_at_forecast_columns):
        """Sets the available_at_forecast_columns of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionTftForecastingInputs.

        Names of columns that are available and provided when a forecast is requested. These columns contain information for the given entity (identified by the time_series_identifier_column column) that is known at forecast. For example, predicted weather for a specific day.

        :param available_at_forecast_columns: The available_at_forecast_columns of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionTftForecastingInputs.
        :type available_at_forecast_columns: List[str]
        """

        self._available_at_forecast_columns = available_at_forecast_columns

    @property
    def context_window(self):
        """Gets the context_window of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionTftForecastingInputs.

        The amount of time into the past training and prediction data is used for model training and prediction respectively. Expressed in number of units defined by the `data_granularity` field.

        :return: The context_window of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionTftForecastingInputs.
        :rtype: str
        """
        return self._context_window

    @context_window.setter
    def context_window(self, context_window):
        """Sets the context_window of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionTftForecastingInputs.

        The amount of time into the past training and prediction data is used for model training and prediction respectively. Expressed in number of units defined by the `data_granularity` field.

        :param context_window: The context_window of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionTftForecastingInputs.
        :type context_window: str
        """

        self._context_window = context_window

    @property
    def data_granularity(self):
        """Gets the data_granularity of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionTftForecastingInputs.


        :return: The data_granularity of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionTftForecastingInputs.
        :rtype: GoogleCloudAiplatformV1SchemaTrainingjobDefinitionTftForecastingInputsGranularity
        """
        return self._data_granularity

    @data_granularity.setter
    def data_granularity(self, data_granularity):
        """Sets the data_granularity of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionTftForecastingInputs.


        :param data_granularity: The data_granularity of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionTftForecastingInputs.
        :type data_granularity: GoogleCloudAiplatformV1SchemaTrainingjobDefinitionTftForecastingInputsGranularity
        """

        self._data_granularity = data_granularity

    @property
    def export_evaluated_data_items_config(self):
        """Gets the export_evaluated_data_items_config of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionTftForecastingInputs.


        :return: The export_evaluated_data_items_config of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionTftForecastingInputs.
        :rtype: GoogleCloudAiplatformV1SchemaTrainingjobDefinitionExportEvaluatedDataItemsConfig
        """
        return self._export_evaluated_data_items_config

    @export_evaluated_data_items_config.setter
    def export_evaluated_data_items_config(self, export_evaluated_data_items_config):
        """Sets the export_evaluated_data_items_config of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionTftForecastingInputs.


        :param export_evaluated_data_items_config: The export_evaluated_data_items_config of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionTftForecastingInputs.
        :type export_evaluated_data_items_config: GoogleCloudAiplatformV1SchemaTrainingjobDefinitionExportEvaluatedDataItemsConfig
        """

        self._export_evaluated_data_items_config = export_evaluated_data_items_config

    @property
    def forecast_horizon(self):
        """Gets the forecast_horizon of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionTftForecastingInputs.

        The amount of time into the future for which forecasted values for the target are returned. Expressed in number of units defined by the `data_granularity` field.

        :return: The forecast_horizon of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionTftForecastingInputs.
        :rtype: str
        """
        return self._forecast_horizon

    @forecast_horizon.setter
    def forecast_horizon(self, forecast_horizon):
        """Sets the forecast_horizon of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionTftForecastingInputs.

        The amount of time into the future for which forecasted values for the target are returned. Expressed in number of units defined by the `data_granularity` field.

        :param forecast_horizon: The forecast_horizon of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionTftForecastingInputs.
        :type forecast_horizon: str
        """

        self._forecast_horizon = forecast_horizon

    @property
    def hierarchy_config(self):
        """Gets the hierarchy_config of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionTftForecastingInputs.


        :return: The hierarchy_config of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionTftForecastingInputs.
        :rtype: GoogleCloudAiplatformV1SchemaTrainingjobDefinitionHierarchyConfig
        """
        return self._hierarchy_config

    @hierarchy_config.setter
    def hierarchy_config(self, hierarchy_config):
        """Sets the hierarchy_config of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionTftForecastingInputs.


        :param hierarchy_config: The hierarchy_config of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionTftForecastingInputs.
        :type hierarchy_config: GoogleCloudAiplatformV1SchemaTrainingjobDefinitionHierarchyConfig
        """

        self._hierarchy_config = hierarchy_config

    @property
    def holiday_regions(self):
        """Gets the holiday_regions of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionTftForecastingInputs.

        The geographical region based on which the holiday effect is applied in modeling by adding holiday categorical array feature that include all holidays matching the date. This option only allowed when data_granularity is day. By default, holiday effect modeling is disabled. To turn it on, specify the holiday region using this option.

        :return: The holiday_regions of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionTftForecastingInputs.
        :rtype: List[str]
        """
        return self._holiday_regions

    @holiday_regions.setter
    def holiday_regions(self, holiday_regions):
        """Sets the holiday_regions of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionTftForecastingInputs.

        The geographical region based on which the holiday effect is applied in modeling by adding holiday categorical array feature that include all holidays matching the date. This option only allowed when data_granularity is day. By default, holiday effect modeling is disabled. To turn it on, specify the holiday region using this option.

        :param holiday_regions: The holiday_regions of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionTftForecastingInputs.
        :type holiday_regions: List[str]
        """

        self._holiday_regions = holiday_regions

    @property
    def optimization_objective(self):
        """Gets the optimization_objective of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionTftForecastingInputs.

        Objective function the model is optimizing towards. The training process creates a model that optimizes the value of the objective function over the validation set. The supported optimization objectives: * \"minimize-rmse\" (default) - Minimize root-mean-squared error (RMSE). * \"minimize-mae\" - Minimize mean-absolute error (MAE). * \"minimize-rmsle\" - Minimize root-mean-squared log error (RMSLE). * \"minimize-rmspe\" - Minimize root-mean-squared percentage error (RMSPE). * \"minimize-wape-mae\" - Minimize the combination of weighted absolute percentage error (WAPE) and mean-absolute-error (MAE). * \"minimize-quantile-loss\" - Minimize the quantile loss at the quantiles defined in `quantiles`. * \"minimize-mape\" - Minimize the mean absolute percentage error.

        :return: The optimization_objective of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionTftForecastingInputs.
        :rtype: str
        """
        return self._optimization_objective

    @optimization_objective.setter
    def optimization_objective(self, optimization_objective):
        """Sets the optimization_objective of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionTftForecastingInputs.

        Objective function the model is optimizing towards. The training process creates a model that optimizes the value of the objective function over the validation set. The supported optimization objectives: * \"minimize-rmse\" (default) - Minimize root-mean-squared error (RMSE). * \"minimize-mae\" - Minimize mean-absolute error (MAE). * \"minimize-rmsle\" - Minimize root-mean-squared log error (RMSLE). * \"minimize-rmspe\" - Minimize root-mean-squared percentage error (RMSPE). * \"minimize-wape-mae\" - Minimize the combination of weighted absolute percentage error (WAPE) and mean-absolute-error (MAE). * \"minimize-quantile-loss\" - Minimize the quantile loss at the quantiles defined in `quantiles`. * \"minimize-mape\" - Minimize the mean absolute percentage error.

        :param optimization_objective: The optimization_objective of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionTftForecastingInputs.
        :type optimization_objective: str
        """

        self._optimization_objective = optimization_objective

    @property
    def quantiles(self):
        """Gets the quantiles of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionTftForecastingInputs.

        Quantiles to use for minimize-quantile-loss `optimization_objective`. Up to 5 quantiles are allowed of values between 0 and 1, exclusive. Required if the value of optimization_objective is minimize-quantile-loss. Represents the percent quantiles to use for that objective. Quantiles must be unique.

        :return: The quantiles of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionTftForecastingInputs.
        :rtype: List[float]
        """
        return self._quantiles

    @quantiles.setter
    def quantiles(self, quantiles):
        """Sets the quantiles of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionTftForecastingInputs.

        Quantiles to use for minimize-quantile-loss `optimization_objective`. Up to 5 quantiles are allowed of values between 0 and 1, exclusive. Required if the value of optimization_objective is minimize-quantile-loss. Represents the percent quantiles to use for that objective. Quantiles must be unique.

        :param quantiles: The quantiles of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionTftForecastingInputs.
        :type quantiles: List[float]
        """

        self._quantiles = quantiles

    @property
    def target_column(self):
        """Gets the target_column of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionTftForecastingInputs.

        The name of the column that the Model is to predict values for. This column must be unavailable at forecast.

        :return: The target_column of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionTftForecastingInputs.
        :rtype: str
        """
        return self._target_column

    @target_column.setter
    def target_column(self, target_column):
        """Sets the target_column of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionTftForecastingInputs.

        The name of the column that the Model is to predict values for. This column must be unavailable at forecast.

        :param target_column: The target_column of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionTftForecastingInputs.
        :type target_column: str
        """

        self._target_column = target_column

    @property
    def time_column(self):
        """Gets the time_column of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionTftForecastingInputs.

        The name of the column that identifies time order in the time series. This column must be available at forecast.

        :return: The time_column of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionTftForecastingInputs.
        :rtype: str
        """
        return self._time_column

    @time_column.setter
    def time_column(self, time_column):
        """Sets the time_column of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionTftForecastingInputs.

        The name of the column that identifies time order in the time series. This column must be available at forecast.

        :param time_column: The time_column of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionTftForecastingInputs.
        :type time_column: str
        """

        self._time_column = time_column

    @property
    def time_series_attribute_columns(self):
        """Gets the time_series_attribute_columns of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionTftForecastingInputs.

        Column names that should be used as attribute columns. The value of these columns does not vary as a function of time. For example, store ID or item color.

        :return: The time_series_attribute_columns of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionTftForecastingInputs.
        :rtype: List[str]
        """
        return self._time_series_attribute_columns

    @time_series_attribute_columns.setter
    def time_series_attribute_columns(self, time_series_attribute_columns):
        """Sets the time_series_attribute_columns of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionTftForecastingInputs.

        Column names that should be used as attribute columns. The value of these columns does not vary as a function of time. For example, store ID or item color.

        :param time_series_attribute_columns: The time_series_attribute_columns of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionTftForecastingInputs.
        :type time_series_attribute_columns: List[str]
        """

        self._time_series_attribute_columns = time_series_attribute_columns

    @property
    def time_series_identifier_column(self):
        """Gets the time_series_identifier_column of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionTftForecastingInputs.

        The name of the column that identifies the time series.

        :return: The time_series_identifier_column of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionTftForecastingInputs.
        :rtype: str
        """
        return self._time_series_identifier_column

    @time_series_identifier_column.setter
    def time_series_identifier_column(self, time_series_identifier_column):
        """Sets the time_series_identifier_column of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionTftForecastingInputs.

        The name of the column that identifies the time series.

        :param time_series_identifier_column: The time_series_identifier_column of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionTftForecastingInputs.
        :type time_series_identifier_column: str
        """

        self._time_series_identifier_column = time_series_identifier_column

    @property
    def train_budget_milli_node_hours(self):
        """Gets the train_budget_milli_node_hours of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionTftForecastingInputs.

        Required. The train budget of creating this model, expressed in milli node hours i.e. 1,000 value in this field means 1 node hour. The training cost of the model will not exceed this budget. The final cost will be attempted to be close to the budget, though may end up being (even) noticeably smaller - at the backend's discretion. This especially may happen when further model training ceases to provide any improvements. If the budget is set to a value known to be insufficient to train a model for the given dataset, the training won't be attempted and will error. The train budget must be between 1,000 and 72,000 milli node hours, inclusive.

        :return: The train_budget_milli_node_hours of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionTftForecastingInputs.
        :rtype: str
        """
        return self._train_budget_milli_node_hours

    @train_budget_milli_node_hours.setter
    def train_budget_milli_node_hours(self, train_budget_milli_node_hours):
        """Sets the train_budget_milli_node_hours of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionTftForecastingInputs.

        Required. The train budget of creating this model, expressed in milli node hours i.e. 1,000 value in this field means 1 node hour. The training cost of the model will not exceed this budget. The final cost will be attempted to be close to the budget, though may end up being (even) noticeably smaller - at the backend's discretion. This especially may happen when further model training ceases to provide any improvements. If the budget is set to a value known to be insufficient to train a model for the given dataset, the training won't be attempted and will error. The train budget must be between 1,000 and 72,000 milli node hours, inclusive.

        :param train_budget_milli_node_hours: The train_budget_milli_node_hours of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionTftForecastingInputs.
        :type train_budget_milli_node_hours: str
        """

        self._train_budget_milli_node_hours = train_budget_milli_node_hours

    @property
    def transformations(self):
        """Gets the transformations of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionTftForecastingInputs.

        Each transformation will apply transform function to given input column. And the result will be used for training. When creating transformation for BigQuery Struct column, the column should be flattened using \".\" as the delimiter.

        :return: The transformations of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionTftForecastingInputs.
        :rtype: List[GoogleCloudAiplatformV1SchemaTrainingjobDefinitionTftForecastingInputsTransformation]
        """
        return self._transformations

    @transformations.setter
    def transformations(self, transformations):
        """Sets the transformations of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionTftForecastingInputs.

        Each transformation will apply transform function to given input column. And the result will be used for training. When creating transformation for BigQuery Struct column, the column should be flattened using \".\" as the delimiter.

        :param transformations: The transformations of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionTftForecastingInputs.
        :type transformations: List[GoogleCloudAiplatformV1SchemaTrainingjobDefinitionTftForecastingInputsTransformation]
        """

        self._transformations = transformations

    @property
    def unavailable_at_forecast_columns(self):
        """Gets the unavailable_at_forecast_columns of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionTftForecastingInputs.

        Names of columns that are unavailable when a forecast is requested. This column contains information for the given entity (identified by the time_series_identifier_column) that is unknown before the forecast For example, actual weather on a given day.

        :return: The unavailable_at_forecast_columns of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionTftForecastingInputs.
        :rtype: List[str]
        """
        return self._unavailable_at_forecast_columns

    @unavailable_at_forecast_columns.setter
    def unavailable_at_forecast_columns(self, unavailable_at_forecast_columns):
        """Sets the unavailable_at_forecast_columns of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionTftForecastingInputs.

        Names of columns that are unavailable when a forecast is requested. This column contains information for the given entity (identified by the time_series_identifier_column) that is unknown before the forecast For example, actual weather on a given day.

        :param unavailable_at_forecast_columns: The unavailable_at_forecast_columns of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionTftForecastingInputs.
        :type unavailable_at_forecast_columns: List[str]
        """

        self._unavailable_at_forecast_columns = unavailable_at_forecast_columns

    @property
    def validation_options(self):
        """Gets the validation_options of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionTftForecastingInputs.

        Validation options for the data validation component. The available options are: * \"fail-pipeline\" - default, will validate against the validation and fail the pipeline if it fails. * \"ignore-validation\" - ignore the results of the validation and continue

        :return: The validation_options of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionTftForecastingInputs.
        :rtype: str
        """
        return self._validation_options

    @validation_options.setter
    def validation_options(self, validation_options):
        """Sets the validation_options of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionTftForecastingInputs.

        Validation options for the data validation component. The available options are: * \"fail-pipeline\" - default, will validate against the validation and fail the pipeline if it fails. * \"ignore-validation\" - ignore the results of the validation and continue

        :param validation_options: The validation_options of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionTftForecastingInputs.
        :type validation_options: str
        """

        self._validation_options = validation_options

    @property
    def weight_column(self):
        """Gets the weight_column of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionTftForecastingInputs.

        Column name that should be used as the weight column. Higher values in this column give more importance to the row during model training. The column must have numeric values between 0 and 10000 inclusively; 0 means the row is ignored for training. If weight column field is not set, then all rows are assumed to have equal weight of 1. This column must be available at forecast.

        :return: The weight_column of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionTftForecastingInputs.
        :rtype: str
        """
        return self._weight_column

    @weight_column.setter
    def weight_column(self, weight_column):
        """Sets the weight_column of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionTftForecastingInputs.

        Column name that should be used as the weight column. Higher values in this column give more importance to the row during model training. The column must have numeric values between 0 and 10000 inclusively; 0 means the row is ignored for training. If weight column field is not set, then all rows are assumed to have equal weight of 1. This column must be available at forecast.

        :param weight_column: The weight_column of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionTftForecastingInputs.
        :type weight_column: str
        """

        self._weight_column = weight_column

    @property
    def window_config(self):
        """Gets the window_config of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionTftForecastingInputs.


        :return: The window_config of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionTftForecastingInputs.
        :rtype: GoogleCloudAiplatformV1SchemaTrainingjobDefinitionWindowConfig
        """
        return self._window_config

    @window_config.setter
    def window_config(self, window_config):
        """Sets the window_config of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionTftForecastingInputs.


        :param window_config: The window_config of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionTftForecastingInputs.
        :type window_config: GoogleCloudAiplatformV1SchemaTrainingjobDefinitionWindowConfig
        """

        self._window_config = window_config
