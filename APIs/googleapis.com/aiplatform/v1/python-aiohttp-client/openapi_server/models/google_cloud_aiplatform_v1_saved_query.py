# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleCloudAiplatformV1SavedQuery(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, annotation_filter: str=None, annotation_spec_count: int=None, create_time: str=None, display_name: str=None, etag: str=None, metadata: object=None, name: str=None, problem_type: str=None, support_automl_training: bool=None, update_time: str=None):
        """GoogleCloudAiplatformV1SavedQuery - a model defined in OpenAPI

        :param annotation_filter: The annotation_filter of this GoogleCloudAiplatformV1SavedQuery.
        :param annotation_spec_count: The annotation_spec_count of this GoogleCloudAiplatformV1SavedQuery.
        :param create_time: The create_time of this GoogleCloudAiplatformV1SavedQuery.
        :param display_name: The display_name of this GoogleCloudAiplatformV1SavedQuery.
        :param etag: The etag of this GoogleCloudAiplatformV1SavedQuery.
        :param metadata: The metadata of this GoogleCloudAiplatformV1SavedQuery.
        :param name: The name of this GoogleCloudAiplatformV1SavedQuery.
        :param problem_type: The problem_type of this GoogleCloudAiplatformV1SavedQuery.
        :param support_automl_training: The support_automl_training of this GoogleCloudAiplatformV1SavedQuery.
        :param update_time: The update_time of this GoogleCloudAiplatformV1SavedQuery.
        """
        self.openapi_types = {
            'annotation_filter': str,
            'annotation_spec_count': int,
            'create_time': str,
            'display_name': str,
            'etag': str,
            'metadata': object,
            'name': str,
            'problem_type': str,
            'support_automl_training': bool,
            'update_time': str
        }

        self.attribute_map = {
            'annotation_filter': 'annotationFilter',
            'annotation_spec_count': 'annotationSpecCount',
            'create_time': 'createTime',
            'display_name': 'displayName',
            'etag': 'etag',
            'metadata': 'metadata',
            'name': 'name',
            'problem_type': 'problemType',
            'support_automl_training': 'supportAutomlTraining',
            'update_time': 'updateTime'
        }

        self._annotation_filter = annotation_filter
        self._annotation_spec_count = annotation_spec_count
        self._create_time = create_time
        self._display_name = display_name
        self._etag = etag
        self._metadata = metadata
        self._name = name
        self._problem_type = problem_type
        self._support_automl_training = support_automl_training
        self._update_time = update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudAiplatformV1SavedQuery':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudAiplatformV1SavedQuery of this GoogleCloudAiplatformV1SavedQuery.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def annotation_filter(self):
        """Gets the annotation_filter of this GoogleCloudAiplatformV1SavedQuery.

        Output only. Filters on the Annotations in the dataset.

        :return: The annotation_filter of this GoogleCloudAiplatformV1SavedQuery.
        :rtype: str
        """
        return self._annotation_filter

    @annotation_filter.setter
    def annotation_filter(self, annotation_filter):
        """Sets the annotation_filter of this GoogleCloudAiplatformV1SavedQuery.

        Output only. Filters on the Annotations in the dataset.

        :param annotation_filter: The annotation_filter of this GoogleCloudAiplatformV1SavedQuery.
        :type annotation_filter: str
        """

        self._annotation_filter = annotation_filter

    @property
    def annotation_spec_count(self):
        """Gets the annotation_spec_count of this GoogleCloudAiplatformV1SavedQuery.

        Output only. Number of AnnotationSpecs in the context of the SavedQuery.

        :return: The annotation_spec_count of this GoogleCloudAiplatformV1SavedQuery.
        :rtype: int
        """
        return self._annotation_spec_count

    @annotation_spec_count.setter
    def annotation_spec_count(self, annotation_spec_count):
        """Sets the annotation_spec_count of this GoogleCloudAiplatformV1SavedQuery.

        Output only. Number of AnnotationSpecs in the context of the SavedQuery.

        :param annotation_spec_count: The annotation_spec_count of this GoogleCloudAiplatformV1SavedQuery.
        :type annotation_spec_count: int
        """

        self._annotation_spec_count = annotation_spec_count

    @property
    def create_time(self):
        """Gets the create_time of this GoogleCloudAiplatformV1SavedQuery.

        Output only. Timestamp when this SavedQuery was created.

        :return: The create_time of this GoogleCloudAiplatformV1SavedQuery.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this GoogleCloudAiplatformV1SavedQuery.

        Output only. Timestamp when this SavedQuery was created.

        :param create_time: The create_time of this GoogleCloudAiplatformV1SavedQuery.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def display_name(self):
        """Gets the display_name of this GoogleCloudAiplatformV1SavedQuery.

        Required. The user-defined name of the SavedQuery. The name can be up to 128 characters long and can consist of any UTF-8 characters.

        :return: The display_name of this GoogleCloudAiplatformV1SavedQuery.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this GoogleCloudAiplatformV1SavedQuery.

        Required. The user-defined name of the SavedQuery. The name can be up to 128 characters long and can consist of any UTF-8 characters.

        :param display_name: The display_name of this GoogleCloudAiplatformV1SavedQuery.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def etag(self):
        """Gets the etag of this GoogleCloudAiplatformV1SavedQuery.

        Used to perform a consistent read-modify-write update. If not set, a blind \"overwrite\" update happens.

        :return: The etag of this GoogleCloudAiplatformV1SavedQuery.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this GoogleCloudAiplatformV1SavedQuery.

        Used to perform a consistent read-modify-write update. If not set, a blind \"overwrite\" update happens.

        :param etag: The etag of this GoogleCloudAiplatformV1SavedQuery.
        :type etag: str
        """

        self._etag = etag

    @property
    def metadata(self):
        """Gets the metadata of this GoogleCloudAiplatformV1SavedQuery.

        Some additional information about the SavedQuery.

        :return: The metadata of this GoogleCloudAiplatformV1SavedQuery.
        :rtype: object
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this GoogleCloudAiplatformV1SavedQuery.

        Some additional information about the SavedQuery.

        :param metadata: The metadata of this GoogleCloudAiplatformV1SavedQuery.
        :type metadata: object
        """

        self._metadata = metadata

    @property
    def name(self):
        """Gets the name of this GoogleCloudAiplatformV1SavedQuery.

        Output only. Resource name of the SavedQuery.

        :return: The name of this GoogleCloudAiplatformV1SavedQuery.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GoogleCloudAiplatformV1SavedQuery.

        Output only. Resource name of the SavedQuery.

        :param name: The name of this GoogleCloudAiplatformV1SavedQuery.
        :type name: str
        """

        self._name = name

    @property
    def problem_type(self):
        """Gets the problem_type of this GoogleCloudAiplatformV1SavedQuery.

        Required. Problem type of the SavedQuery. Allowed values: * IMAGE_CLASSIFICATION_SINGLE_LABEL * IMAGE_CLASSIFICATION_MULTI_LABEL * IMAGE_BOUNDING_POLY * IMAGE_BOUNDING_BOX * TEXT_CLASSIFICATION_SINGLE_LABEL * TEXT_CLASSIFICATION_MULTI_LABEL * TEXT_EXTRACTION * TEXT_SENTIMENT * VIDEO_CLASSIFICATION * VIDEO_OBJECT_TRACKING

        :return: The problem_type of this GoogleCloudAiplatformV1SavedQuery.
        :rtype: str
        """
        return self._problem_type

    @problem_type.setter
    def problem_type(self, problem_type):
        """Sets the problem_type of this GoogleCloudAiplatformV1SavedQuery.

        Required. Problem type of the SavedQuery. Allowed values: * IMAGE_CLASSIFICATION_SINGLE_LABEL * IMAGE_CLASSIFICATION_MULTI_LABEL * IMAGE_BOUNDING_POLY * IMAGE_BOUNDING_BOX * TEXT_CLASSIFICATION_SINGLE_LABEL * TEXT_CLASSIFICATION_MULTI_LABEL * TEXT_EXTRACTION * TEXT_SENTIMENT * VIDEO_CLASSIFICATION * VIDEO_OBJECT_TRACKING

        :param problem_type: The problem_type of this GoogleCloudAiplatformV1SavedQuery.
        :type problem_type: str
        """

        self._problem_type = problem_type

    @property
    def support_automl_training(self):
        """Gets the support_automl_training of this GoogleCloudAiplatformV1SavedQuery.

        Output only. If the Annotations belonging to the SavedQuery can be used for AutoML training.

        :return: The support_automl_training of this GoogleCloudAiplatformV1SavedQuery.
        :rtype: bool
        """
        return self._support_automl_training

    @support_automl_training.setter
    def support_automl_training(self, support_automl_training):
        """Sets the support_automl_training of this GoogleCloudAiplatformV1SavedQuery.

        Output only. If the Annotations belonging to the SavedQuery can be used for AutoML training.

        :param support_automl_training: The support_automl_training of this GoogleCloudAiplatformV1SavedQuery.
        :type support_automl_training: bool
        """

        self._support_automl_training = support_automl_training

    @property
    def update_time(self):
        """Gets the update_time of this GoogleCloudAiplatformV1SavedQuery.

        Output only. Timestamp when SavedQuery was last updated.

        :return: The update_time of this GoogleCloudAiplatformV1SavedQuery.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this GoogleCloudAiplatformV1SavedQuery.

        Output only. Timestamp when SavedQuery was last updated.

        :param update_time: The update_time of this GoogleCloudAiplatformV1SavedQuery.
        :type update_time: str
        """

        self._update_time = update_time
