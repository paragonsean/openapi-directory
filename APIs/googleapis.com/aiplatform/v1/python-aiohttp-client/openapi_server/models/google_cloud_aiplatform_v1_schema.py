# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleCloudAiplatformV1Schema(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, enum: List[str]=None, example: object=None, format: str=None, items: GoogleCloudAiplatformV1Schema=None, nullable: bool=None, properties: Dict[str, GoogleCloudAiplatformV1Schema]=None, required: List[str]=None, type: str=None):
        """GoogleCloudAiplatformV1Schema - a model defined in OpenAPI

        :param description: The description of this GoogleCloudAiplatformV1Schema.
        :param enum: The enum of this GoogleCloudAiplatformV1Schema.
        :param example: The example of this GoogleCloudAiplatformV1Schema.
        :param format: The format of this GoogleCloudAiplatformV1Schema.
        :param items: The items of this GoogleCloudAiplatformV1Schema.
        :param nullable: The nullable of this GoogleCloudAiplatformV1Schema.
        :param properties: The properties of this GoogleCloudAiplatformV1Schema.
        :param required: The required of this GoogleCloudAiplatformV1Schema.
        :param type: The type of this GoogleCloudAiplatformV1Schema.
        """
        self.openapi_types = {
            'description': str,
            'enum': List[str],
            'example': object,
            'format': str,
            'items': GoogleCloudAiplatformV1Schema,
            'nullable': bool,
            'properties': Dict[str, GoogleCloudAiplatformV1Schema],
            'required': List[str],
            'type': str
        }

        self.attribute_map = {
            'description': 'description',
            'enum': 'enum',
            'example': 'example',
            'format': 'format',
            'items': 'items',
            'nullable': 'nullable',
            'properties': 'properties',
            'required': 'required',
            'type': 'type'
        }

        self._description = description
        self._enum = enum
        self._example = example
        self._format = format
        self._items = items
        self._nullable = nullable
        self._properties = properties
        self._required = required
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudAiplatformV1Schema':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudAiplatformV1Schema of this GoogleCloudAiplatformV1Schema.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this GoogleCloudAiplatformV1Schema.

        Optional. The description of the data.

        :return: The description of this GoogleCloudAiplatformV1Schema.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this GoogleCloudAiplatformV1Schema.

        Optional. The description of the data.

        :param description: The description of this GoogleCloudAiplatformV1Schema.
        :type description: str
        """

        self._description = description

    @property
    def enum(self):
        """Gets the enum of this GoogleCloudAiplatformV1Schema.

        Optional. Possible values of the element of Type.STRING with enum format. For example we can define an Enum Direction as : {type:STRING, format:enum, enum:[\"EAST\", NORTH\", \"SOUTH\", \"WEST\"]}

        :return: The enum of this GoogleCloudAiplatformV1Schema.
        :rtype: List[str]
        """
        return self._enum

    @enum.setter
    def enum(self, enum):
        """Sets the enum of this GoogleCloudAiplatformV1Schema.

        Optional. Possible values of the element of Type.STRING with enum format. For example we can define an Enum Direction as : {type:STRING, format:enum, enum:[\"EAST\", NORTH\", \"SOUTH\", \"WEST\"]}

        :param enum: The enum of this GoogleCloudAiplatformV1Schema.
        :type enum: List[str]
        """

        self._enum = enum

    @property
    def example(self):
        """Gets the example of this GoogleCloudAiplatformV1Schema.

        Optional. Example of the object. Will only populated when the object is the root.

        :return: The example of this GoogleCloudAiplatformV1Schema.
        :rtype: object
        """
        return self._example

    @example.setter
    def example(self, example):
        """Sets the example of this GoogleCloudAiplatformV1Schema.

        Optional. Example of the object. Will only populated when the object is the root.

        :param example: The example of this GoogleCloudAiplatformV1Schema.
        :type example: object
        """

        self._example = example

    @property
    def format(self):
        """Gets the format of this GoogleCloudAiplatformV1Schema.

        Optional. The format of the data. Supported formats: for NUMBER type: float, double for INTEGER type: int32, int64

        :return: The format of this GoogleCloudAiplatformV1Schema.
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this GoogleCloudAiplatformV1Schema.

        Optional. The format of the data. Supported formats: for NUMBER type: float, double for INTEGER type: int32, int64

        :param format: The format of this GoogleCloudAiplatformV1Schema.
        :type format: str
        """

        self._format = format

    @property
    def items(self):
        """Gets the items of this GoogleCloudAiplatformV1Schema.


        :return: The items of this GoogleCloudAiplatformV1Schema.
        :rtype: GoogleCloudAiplatformV1Schema
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this GoogleCloudAiplatformV1Schema.


        :param items: The items of this GoogleCloudAiplatformV1Schema.
        :type items: GoogleCloudAiplatformV1Schema
        """

        self._items = items

    @property
    def nullable(self):
        """Gets the nullable of this GoogleCloudAiplatformV1Schema.

        Optional. Indicates if the value may be null.

        :return: The nullable of this GoogleCloudAiplatformV1Schema.
        :rtype: bool
        """
        return self._nullable

    @nullable.setter
    def nullable(self, nullable):
        """Sets the nullable of this GoogleCloudAiplatformV1Schema.

        Optional. Indicates if the value may be null.

        :param nullable: The nullable of this GoogleCloudAiplatformV1Schema.
        :type nullable: bool
        """

        self._nullable = nullable

    @property
    def properties(self):
        """Gets the properties of this GoogleCloudAiplatformV1Schema.

        Optional. Properties of Type.OBJECT.

        :return: The properties of this GoogleCloudAiplatformV1Schema.
        :rtype: Dict[str, GoogleCloudAiplatformV1Schema]
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this GoogleCloudAiplatformV1Schema.

        Optional. Properties of Type.OBJECT.

        :param properties: The properties of this GoogleCloudAiplatformV1Schema.
        :type properties: Dict[str, GoogleCloudAiplatformV1Schema]
        """

        self._properties = properties

    @property
    def required(self):
        """Gets the required of this GoogleCloudAiplatformV1Schema.

        Optional. Required properties of Type.OBJECT.

        :return: The required of this GoogleCloudAiplatformV1Schema.
        :rtype: List[str]
        """
        return self._required

    @required.setter
    def required(self, required):
        """Sets the required of this GoogleCloudAiplatformV1Schema.

        Optional. Required properties of Type.OBJECT.

        :param required: The required of this GoogleCloudAiplatformV1Schema.
        :type required: List[str]
        """

        self._required = required

    @property
    def type(self):
        """Gets the type of this GoogleCloudAiplatformV1Schema.

        Optional. The type of the data.

        :return: The type of this GoogleCloudAiplatformV1Schema.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this GoogleCloudAiplatformV1Schema.

        Optional. The type of the data.

        :param type: The type of this GoogleCloudAiplatformV1Schema.
        :type type: str
        """
        allowed_values = ["TYPE_UNSPECIFIED", "STRING", "NUMBER", "INTEGER", "BOOLEAN", "ARRAY", "OBJECT"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
