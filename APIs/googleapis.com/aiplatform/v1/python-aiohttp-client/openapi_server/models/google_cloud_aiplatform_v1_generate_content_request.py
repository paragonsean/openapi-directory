# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_aiplatform_v1_content import GoogleCloudAiplatformV1Content
from openapi_server.models.google_cloud_aiplatform_v1_generation_config import GoogleCloudAiplatformV1GenerationConfig
from openapi_server.models.google_cloud_aiplatform_v1_safety_setting import GoogleCloudAiplatformV1SafetySetting
from openapi_server.models.google_cloud_aiplatform_v1_tool import GoogleCloudAiplatformV1Tool
from openapi_server import util


class GoogleCloudAiplatformV1GenerateContentRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, contents: List[GoogleCloudAiplatformV1Content]=None, generation_config: GoogleCloudAiplatformV1GenerationConfig=None, safety_settings: List[GoogleCloudAiplatformV1SafetySetting]=None, tools: List[GoogleCloudAiplatformV1Tool]=None):
        """GoogleCloudAiplatformV1GenerateContentRequest - a model defined in OpenAPI

        :param contents: The contents of this GoogleCloudAiplatformV1GenerateContentRequest.
        :param generation_config: The generation_config of this GoogleCloudAiplatformV1GenerateContentRequest.
        :param safety_settings: The safety_settings of this GoogleCloudAiplatformV1GenerateContentRequest.
        :param tools: The tools of this GoogleCloudAiplatformV1GenerateContentRequest.
        """
        self.openapi_types = {
            'contents': List[GoogleCloudAiplatformV1Content],
            'generation_config': GoogleCloudAiplatformV1GenerationConfig,
            'safety_settings': List[GoogleCloudAiplatformV1SafetySetting],
            'tools': List[GoogleCloudAiplatformV1Tool]
        }

        self.attribute_map = {
            'contents': 'contents',
            'generation_config': 'generationConfig',
            'safety_settings': 'safetySettings',
            'tools': 'tools'
        }

        self._contents = contents
        self._generation_config = generation_config
        self._safety_settings = safety_settings
        self._tools = tools

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudAiplatformV1GenerateContentRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudAiplatformV1GenerateContentRequest of this GoogleCloudAiplatformV1GenerateContentRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def contents(self):
        """Gets the contents of this GoogleCloudAiplatformV1GenerateContentRequest.

        Required. The content of the current conversation with the model. For single-turn queries, this is a single instance. For multi-turn queries, this is a repeated field that contains conversation history + latest request.

        :return: The contents of this GoogleCloudAiplatformV1GenerateContentRequest.
        :rtype: List[GoogleCloudAiplatformV1Content]
        """
        return self._contents

    @contents.setter
    def contents(self, contents):
        """Sets the contents of this GoogleCloudAiplatformV1GenerateContentRequest.

        Required. The content of the current conversation with the model. For single-turn queries, this is a single instance. For multi-turn queries, this is a repeated field that contains conversation history + latest request.

        :param contents: The contents of this GoogleCloudAiplatformV1GenerateContentRequest.
        :type contents: List[GoogleCloudAiplatformV1Content]
        """

        self._contents = contents

    @property
    def generation_config(self):
        """Gets the generation_config of this GoogleCloudAiplatformV1GenerateContentRequest.


        :return: The generation_config of this GoogleCloudAiplatformV1GenerateContentRequest.
        :rtype: GoogleCloudAiplatformV1GenerationConfig
        """
        return self._generation_config

    @generation_config.setter
    def generation_config(self, generation_config):
        """Sets the generation_config of this GoogleCloudAiplatformV1GenerateContentRequest.


        :param generation_config: The generation_config of this GoogleCloudAiplatformV1GenerateContentRequest.
        :type generation_config: GoogleCloudAiplatformV1GenerationConfig
        """

        self._generation_config = generation_config

    @property
    def safety_settings(self):
        """Gets the safety_settings of this GoogleCloudAiplatformV1GenerateContentRequest.

        Optional. Per request settings for blocking unsafe content. Enforced on GenerateContentResponse.candidates.

        :return: The safety_settings of this GoogleCloudAiplatformV1GenerateContentRequest.
        :rtype: List[GoogleCloudAiplatformV1SafetySetting]
        """
        return self._safety_settings

    @safety_settings.setter
    def safety_settings(self, safety_settings):
        """Sets the safety_settings of this GoogleCloudAiplatformV1GenerateContentRequest.

        Optional. Per request settings for blocking unsafe content. Enforced on GenerateContentResponse.candidates.

        :param safety_settings: The safety_settings of this GoogleCloudAiplatformV1GenerateContentRequest.
        :type safety_settings: List[GoogleCloudAiplatformV1SafetySetting]
        """

        self._safety_settings = safety_settings

    @property
    def tools(self):
        """Gets the tools of this GoogleCloudAiplatformV1GenerateContentRequest.

        Optional. A list of `Tools` the model may use to generate the next response. A `Tool` is a piece of code that enables the system to interact with external systems to perform an action, or set of actions, outside of knowledge and scope of the model.

        :return: The tools of this GoogleCloudAiplatformV1GenerateContentRequest.
        :rtype: List[GoogleCloudAiplatformV1Tool]
        """
        return self._tools

    @tools.setter
    def tools(self, tools):
        """Sets the tools of this GoogleCloudAiplatformV1GenerateContentRequest.

        Optional. A list of `Tools` the model may use to generate the next response. A `Tool` is a piece of code that enables the system to interact with external systems to perform an action, or set of actions, outside of knowledge and scope of the model.

        :param tools: The tools of this GoogleCloudAiplatformV1GenerateContentRequest.
        :type tools: List[GoogleCloudAiplatformV1Tool]
        """

        self._tools = tools
