# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_aiplatform_v1_feature_stats_anomaly import GoogleCloudAiplatformV1FeatureStatsAnomaly
from openapi_server import util


class GoogleCloudAiplatformV1FeatureMonitoringStatsAnomaly(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, feature_stats_anomaly: GoogleCloudAiplatformV1FeatureStatsAnomaly=None, objective: str=None):
        """GoogleCloudAiplatformV1FeatureMonitoringStatsAnomaly - a model defined in OpenAPI

        :param feature_stats_anomaly: The feature_stats_anomaly of this GoogleCloudAiplatformV1FeatureMonitoringStatsAnomaly.
        :param objective: The objective of this GoogleCloudAiplatformV1FeatureMonitoringStatsAnomaly.
        """
        self.openapi_types = {
            'feature_stats_anomaly': GoogleCloudAiplatformV1FeatureStatsAnomaly,
            'objective': str
        }

        self.attribute_map = {
            'feature_stats_anomaly': 'featureStatsAnomaly',
            'objective': 'objective'
        }

        self._feature_stats_anomaly = feature_stats_anomaly
        self._objective = objective

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudAiplatformV1FeatureMonitoringStatsAnomaly':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudAiplatformV1FeatureMonitoringStatsAnomaly of this GoogleCloudAiplatformV1FeatureMonitoringStatsAnomaly.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def feature_stats_anomaly(self):
        """Gets the feature_stats_anomaly of this GoogleCloudAiplatformV1FeatureMonitoringStatsAnomaly.


        :return: The feature_stats_anomaly of this GoogleCloudAiplatformV1FeatureMonitoringStatsAnomaly.
        :rtype: GoogleCloudAiplatformV1FeatureStatsAnomaly
        """
        return self._feature_stats_anomaly

    @feature_stats_anomaly.setter
    def feature_stats_anomaly(self, feature_stats_anomaly):
        """Sets the feature_stats_anomaly of this GoogleCloudAiplatformV1FeatureMonitoringStatsAnomaly.


        :param feature_stats_anomaly: The feature_stats_anomaly of this GoogleCloudAiplatformV1FeatureMonitoringStatsAnomaly.
        :type feature_stats_anomaly: GoogleCloudAiplatformV1FeatureStatsAnomaly
        """

        self._feature_stats_anomaly = feature_stats_anomaly

    @property
    def objective(self):
        """Gets the objective of this GoogleCloudAiplatformV1FeatureMonitoringStatsAnomaly.

        Output only. The objective for each stats.

        :return: The objective of this GoogleCloudAiplatformV1FeatureMonitoringStatsAnomaly.
        :rtype: str
        """
        return self._objective

    @objective.setter
    def objective(self, objective):
        """Sets the objective of this GoogleCloudAiplatformV1FeatureMonitoringStatsAnomaly.

        Output only. The objective for each stats.

        :param objective: The objective of this GoogleCloudAiplatformV1FeatureMonitoringStatsAnomaly.
        :type objective: str
        """
        allowed_values = ["OBJECTIVE_UNSPECIFIED", "IMPORT_FEATURE_ANALYSIS", "SNAPSHOT_ANALYSIS"]  # noqa: E501
        if objective not in allowed_values:
            raise ValueError(
                "Invalid value for `objective` ({0}), must be one of {1}"
                .format(objective, allowed_values)
            )

        self._objective = objective
