# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_aiplatform_v1_export_filter_split import GoogleCloudAiplatformV1ExportFilterSplit
from openapi_server.models.google_cloud_aiplatform_v1_export_fraction_split import GoogleCloudAiplatformV1ExportFractionSplit
from openapi_server.models.google_cloud_aiplatform_v1_gcs_destination import GoogleCloudAiplatformV1GcsDestination
from openapi_server import util


class GoogleCloudAiplatformV1ExportDataConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, annotation_schema_uri: str=None, annotations_filter: str=None, export_use: str=None, filter_split: GoogleCloudAiplatformV1ExportFilterSplit=None, fraction_split: GoogleCloudAiplatformV1ExportFractionSplit=None, gcs_destination: GoogleCloudAiplatformV1GcsDestination=None, saved_query_id: str=None):
        """GoogleCloudAiplatformV1ExportDataConfig - a model defined in OpenAPI

        :param annotation_schema_uri: The annotation_schema_uri of this GoogleCloudAiplatformV1ExportDataConfig.
        :param annotations_filter: The annotations_filter of this GoogleCloudAiplatformV1ExportDataConfig.
        :param export_use: The export_use of this GoogleCloudAiplatformV1ExportDataConfig.
        :param filter_split: The filter_split of this GoogleCloudAiplatformV1ExportDataConfig.
        :param fraction_split: The fraction_split of this GoogleCloudAiplatformV1ExportDataConfig.
        :param gcs_destination: The gcs_destination of this GoogleCloudAiplatformV1ExportDataConfig.
        :param saved_query_id: The saved_query_id of this GoogleCloudAiplatformV1ExportDataConfig.
        """
        self.openapi_types = {
            'annotation_schema_uri': str,
            'annotations_filter': str,
            'export_use': str,
            'filter_split': GoogleCloudAiplatformV1ExportFilterSplit,
            'fraction_split': GoogleCloudAiplatformV1ExportFractionSplit,
            'gcs_destination': GoogleCloudAiplatformV1GcsDestination,
            'saved_query_id': str
        }

        self.attribute_map = {
            'annotation_schema_uri': 'annotationSchemaUri',
            'annotations_filter': 'annotationsFilter',
            'export_use': 'exportUse',
            'filter_split': 'filterSplit',
            'fraction_split': 'fractionSplit',
            'gcs_destination': 'gcsDestination',
            'saved_query_id': 'savedQueryId'
        }

        self._annotation_schema_uri = annotation_schema_uri
        self._annotations_filter = annotations_filter
        self._export_use = export_use
        self._filter_split = filter_split
        self._fraction_split = fraction_split
        self._gcs_destination = gcs_destination
        self._saved_query_id = saved_query_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudAiplatformV1ExportDataConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudAiplatformV1ExportDataConfig of this GoogleCloudAiplatformV1ExportDataConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def annotation_schema_uri(self):
        """Gets the annotation_schema_uri of this GoogleCloudAiplatformV1ExportDataConfig.

        The Cloud Storage URI that points to a YAML file describing the annotation schema. The schema is defined as an OpenAPI 3.0.2 [Schema Object](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.2.md#schemaObject). The schema files that can be used here are found in gs://google-cloud-aiplatform/schema/dataset/annotation/, note that the chosen schema must be consistent with metadata of the Dataset specified by dataset_id. Only used for custom training data export use cases. Only applicable to Datasets that have DataItems and Annotations. Only Annotations that both match this schema and belong to DataItems not ignored by the split method are used in respectively training, validation or test role, depending on the role of the DataItem they are on. When used in conjunction with annotations_filter, the Annotations used for training are filtered by both annotations_filter and annotation_schema_uri.

        :return: The annotation_schema_uri of this GoogleCloudAiplatformV1ExportDataConfig.
        :rtype: str
        """
        return self._annotation_schema_uri

    @annotation_schema_uri.setter
    def annotation_schema_uri(self, annotation_schema_uri):
        """Sets the annotation_schema_uri of this GoogleCloudAiplatformV1ExportDataConfig.

        The Cloud Storage URI that points to a YAML file describing the annotation schema. The schema is defined as an OpenAPI 3.0.2 [Schema Object](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.2.md#schemaObject). The schema files that can be used here are found in gs://google-cloud-aiplatform/schema/dataset/annotation/, note that the chosen schema must be consistent with metadata of the Dataset specified by dataset_id. Only used for custom training data export use cases. Only applicable to Datasets that have DataItems and Annotations. Only Annotations that both match this schema and belong to DataItems not ignored by the split method are used in respectively training, validation or test role, depending on the role of the DataItem they are on. When used in conjunction with annotations_filter, the Annotations used for training are filtered by both annotations_filter and annotation_schema_uri.

        :param annotation_schema_uri: The annotation_schema_uri of this GoogleCloudAiplatformV1ExportDataConfig.
        :type annotation_schema_uri: str
        """

        self._annotation_schema_uri = annotation_schema_uri

    @property
    def annotations_filter(self):
        """Gets the annotations_filter of this GoogleCloudAiplatformV1ExportDataConfig.

        An expression for filtering what part of the Dataset is to be exported. Only Annotations that match this filter will be exported. The filter syntax is the same as in ListAnnotations.

        :return: The annotations_filter of this GoogleCloudAiplatformV1ExportDataConfig.
        :rtype: str
        """
        return self._annotations_filter

    @annotations_filter.setter
    def annotations_filter(self, annotations_filter):
        """Sets the annotations_filter of this GoogleCloudAiplatformV1ExportDataConfig.

        An expression for filtering what part of the Dataset is to be exported. Only Annotations that match this filter will be exported. The filter syntax is the same as in ListAnnotations.

        :param annotations_filter: The annotations_filter of this GoogleCloudAiplatformV1ExportDataConfig.
        :type annotations_filter: str
        """

        self._annotations_filter = annotations_filter

    @property
    def export_use(self):
        """Gets the export_use of this GoogleCloudAiplatformV1ExportDataConfig.

        Indicates the usage of the exported files.

        :return: The export_use of this GoogleCloudAiplatformV1ExportDataConfig.
        :rtype: str
        """
        return self._export_use

    @export_use.setter
    def export_use(self, export_use):
        """Sets the export_use of this GoogleCloudAiplatformV1ExportDataConfig.

        Indicates the usage of the exported files.

        :param export_use: The export_use of this GoogleCloudAiplatformV1ExportDataConfig.
        :type export_use: str
        """
        allowed_values = ["EXPORT_USE_UNSPECIFIED", "CUSTOM_CODE_TRAINING"]  # noqa: E501
        if export_use not in allowed_values:
            raise ValueError(
                "Invalid value for `export_use` ({0}), must be one of {1}"
                .format(export_use, allowed_values)
            )

        self._export_use = export_use

    @property
    def filter_split(self):
        """Gets the filter_split of this GoogleCloudAiplatformV1ExportDataConfig.


        :return: The filter_split of this GoogleCloudAiplatformV1ExportDataConfig.
        :rtype: GoogleCloudAiplatformV1ExportFilterSplit
        """
        return self._filter_split

    @filter_split.setter
    def filter_split(self, filter_split):
        """Sets the filter_split of this GoogleCloudAiplatformV1ExportDataConfig.


        :param filter_split: The filter_split of this GoogleCloudAiplatformV1ExportDataConfig.
        :type filter_split: GoogleCloudAiplatformV1ExportFilterSplit
        """

        self._filter_split = filter_split

    @property
    def fraction_split(self):
        """Gets the fraction_split of this GoogleCloudAiplatformV1ExportDataConfig.


        :return: The fraction_split of this GoogleCloudAiplatformV1ExportDataConfig.
        :rtype: GoogleCloudAiplatformV1ExportFractionSplit
        """
        return self._fraction_split

    @fraction_split.setter
    def fraction_split(self, fraction_split):
        """Sets the fraction_split of this GoogleCloudAiplatformV1ExportDataConfig.


        :param fraction_split: The fraction_split of this GoogleCloudAiplatformV1ExportDataConfig.
        :type fraction_split: GoogleCloudAiplatformV1ExportFractionSplit
        """

        self._fraction_split = fraction_split

    @property
    def gcs_destination(self):
        """Gets the gcs_destination of this GoogleCloudAiplatformV1ExportDataConfig.


        :return: The gcs_destination of this GoogleCloudAiplatformV1ExportDataConfig.
        :rtype: GoogleCloudAiplatformV1GcsDestination
        """
        return self._gcs_destination

    @gcs_destination.setter
    def gcs_destination(self, gcs_destination):
        """Sets the gcs_destination of this GoogleCloudAiplatformV1ExportDataConfig.


        :param gcs_destination: The gcs_destination of this GoogleCloudAiplatformV1ExportDataConfig.
        :type gcs_destination: GoogleCloudAiplatformV1GcsDestination
        """

        self._gcs_destination = gcs_destination

    @property
    def saved_query_id(self):
        """Gets the saved_query_id of this GoogleCloudAiplatformV1ExportDataConfig.

        The ID of a SavedQuery (annotation set) under the Dataset specified by dataset_id used for filtering Annotations for training. Only used for custom training data export use cases. Only applicable to Datasets that have SavedQueries. Only Annotations that are associated with this SavedQuery are used in respectively training. When used in conjunction with annotations_filter, the Annotations used for training are filtered by both saved_query_id and annotations_filter. Only one of saved_query_id and annotation_schema_uri should be specified as both of them represent the same thing: problem type.

        :return: The saved_query_id of this GoogleCloudAiplatformV1ExportDataConfig.
        :rtype: str
        """
        return self._saved_query_id

    @saved_query_id.setter
    def saved_query_id(self, saved_query_id):
        """Sets the saved_query_id of this GoogleCloudAiplatformV1ExportDataConfig.

        The ID of a SavedQuery (annotation set) under the Dataset specified by dataset_id used for filtering Annotations for training. Only used for custom training data export use cases. Only applicable to Datasets that have SavedQueries. Only Annotations that are associated with this SavedQuery are used in respectively training. When used in conjunction with annotations_filter, the Annotations used for training are filtered by both saved_query_id and annotations_filter. Only one of saved_query_id and annotation_schema_uri should be specified as both of them represent the same thing: problem type.

        :param saved_query_id: The saved_query_id of this GoogleCloudAiplatformV1ExportDataConfig.
        :type saved_query_id: str
        """

        self._saved_query_id = saved_query_id
