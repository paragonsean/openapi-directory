# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.learning_genai_root_score import LearningGenaiRootScore
from openapi_server.models.learning_genai_root_score_based_routing_config_rule import LearningGenaiRootScoreBasedRoutingConfigRule
from openapi_server import util


class LearningGenaiRootRoutingDecisionMetadataScoreBased(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, matched_rule: LearningGenaiRootScoreBasedRoutingConfigRule=None, score: LearningGenaiRootScore=None, used_default_fallback: bool=None):
        """LearningGenaiRootRoutingDecisionMetadataScoreBased - a model defined in OpenAPI

        :param matched_rule: The matched_rule of this LearningGenaiRootRoutingDecisionMetadataScoreBased.
        :param score: The score of this LearningGenaiRootRoutingDecisionMetadataScoreBased.
        :param used_default_fallback: The used_default_fallback of this LearningGenaiRootRoutingDecisionMetadataScoreBased.
        """
        self.openapi_types = {
            'matched_rule': LearningGenaiRootScoreBasedRoutingConfigRule,
            'score': LearningGenaiRootScore,
            'used_default_fallback': bool
        }

        self.attribute_map = {
            'matched_rule': 'matchedRule',
            'score': 'score',
            'used_default_fallback': 'usedDefaultFallback'
        }

        self._matched_rule = matched_rule
        self._score = score
        self._used_default_fallback = used_default_fallback

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LearningGenaiRootRoutingDecisionMetadataScoreBased':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LearningGenaiRootRoutingDecisionMetadataScoreBased of this LearningGenaiRootRoutingDecisionMetadataScoreBased.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def matched_rule(self):
        """Gets the matched_rule of this LearningGenaiRootRoutingDecisionMetadataScoreBased.


        :return: The matched_rule of this LearningGenaiRootRoutingDecisionMetadataScoreBased.
        :rtype: LearningGenaiRootScoreBasedRoutingConfigRule
        """
        return self._matched_rule

    @matched_rule.setter
    def matched_rule(self, matched_rule):
        """Sets the matched_rule of this LearningGenaiRootRoutingDecisionMetadataScoreBased.


        :param matched_rule: The matched_rule of this LearningGenaiRootRoutingDecisionMetadataScoreBased.
        :type matched_rule: LearningGenaiRootScoreBasedRoutingConfigRule
        """

        self._matched_rule = matched_rule

    @property
    def score(self):
        """Gets the score of this LearningGenaiRootRoutingDecisionMetadataScoreBased.


        :return: The score of this LearningGenaiRootRoutingDecisionMetadataScoreBased.
        :rtype: LearningGenaiRootScore
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this LearningGenaiRootRoutingDecisionMetadataScoreBased.


        :param score: The score of this LearningGenaiRootRoutingDecisionMetadataScoreBased.
        :type score: LearningGenaiRootScore
        """

        self._score = score

    @property
    def used_default_fallback(self):
        """Gets the used_default_fallback of this LearningGenaiRootRoutingDecisionMetadataScoreBased.

        No rules were matched & therefore used the default fallback.

        :return: The used_default_fallback of this LearningGenaiRootRoutingDecisionMetadataScoreBased.
        :rtype: bool
        """
        return self._used_default_fallback

    @used_default_fallback.setter
    def used_default_fallback(self, used_default_fallback):
        """Sets the used_default_fallback of this LearningGenaiRootRoutingDecisionMetadataScoreBased.

        No rules were matched & therefore used the default fallback.

        :param used_default_fallback: The used_default_fallback of this LearningGenaiRootRoutingDecisionMetadataScoreBased.
        :type used_default_fallback: bool
        """

        self._used_default_fallback = used_default_fallback
