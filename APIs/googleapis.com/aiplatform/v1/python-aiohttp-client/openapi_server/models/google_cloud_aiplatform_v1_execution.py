# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleCloudAiplatformV1Execution(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, create_time: str=None, description: str=None, display_name: str=None, etag: str=None, labels: Dict[str, str]=None, metadata: Dict[str, object]=None, name: str=None, schema_title: str=None, schema_version: str=None, state: str=None, update_time: str=None):
        """GoogleCloudAiplatformV1Execution - a model defined in OpenAPI

        :param create_time: The create_time of this GoogleCloudAiplatformV1Execution.
        :param description: The description of this GoogleCloudAiplatformV1Execution.
        :param display_name: The display_name of this GoogleCloudAiplatformV1Execution.
        :param etag: The etag of this GoogleCloudAiplatformV1Execution.
        :param labels: The labels of this GoogleCloudAiplatformV1Execution.
        :param metadata: The metadata of this GoogleCloudAiplatformV1Execution.
        :param name: The name of this GoogleCloudAiplatformV1Execution.
        :param schema_title: The schema_title of this GoogleCloudAiplatformV1Execution.
        :param schema_version: The schema_version of this GoogleCloudAiplatformV1Execution.
        :param state: The state of this GoogleCloudAiplatformV1Execution.
        :param update_time: The update_time of this GoogleCloudAiplatformV1Execution.
        """
        self.openapi_types = {
            'create_time': str,
            'description': str,
            'display_name': str,
            'etag': str,
            'labels': Dict[str, str],
            'metadata': Dict[str, object],
            'name': str,
            'schema_title': str,
            'schema_version': str,
            'state': str,
            'update_time': str
        }

        self.attribute_map = {
            'create_time': 'createTime',
            'description': 'description',
            'display_name': 'displayName',
            'etag': 'etag',
            'labels': 'labels',
            'metadata': 'metadata',
            'name': 'name',
            'schema_title': 'schemaTitle',
            'schema_version': 'schemaVersion',
            'state': 'state',
            'update_time': 'updateTime'
        }

        self._create_time = create_time
        self._description = description
        self._display_name = display_name
        self._etag = etag
        self._labels = labels
        self._metadata = metadata
        self._name = name
        self._schema_title = schema_title
        self._schema_version = schema_version
        self._state = state
        self._update_time = update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudAiplatformV1Execution':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudAiplatformV1Execution of this GoogleCloudAiplatformV1Execution.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def create_time(self):
        """Gets the create_time of this GoogleCloudAiplatformV1Execution.

        Output only. Timestamp when this Execution was created.

        :return: The create_time of this GoogleCloudAiplatformV1Execution.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this GoogleCloudAiplatformV1Execution.

        Output only. Timestamp when this Execution was created.

        :param create_time: The create_time of this GoogleCloudAiplatformV1Execution.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def description(self):
        """Gets the description of this GoogleCloudAiplatformV1Execution.

        Description of the Execution

        :return: The description of this GoogleCloudAiplatformV1Execution.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this GoogleCloudAiplatformV1Execution.

        Description of the Execution

        :param description: The description of this GoogleCloudAiplatformV1Execution.
        :type description: str
        """

        self._description = description

    @property
    def display_name(self):
        """Gets the display_name of this GoogleCloudAiplatformV1Execution.

        User provided display name of the Execution. May be up to 128 Unicode characters.

        :return: The display_name of this GoogleCloudAiplatformV1Execution.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this GoogleCloudAiplatformV1Execution.

        User provided display name of the Execution. May be up to 128 Unicode characters.

        :param display_name: The display_name of this GoogleCloudAiplatformV1Execution.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def etag(self):
        """Gets the etag of this GoogleCloudAiplatformV1Execution.

        An eTag used to perform consistent read-modify-write updates. If not set, a blind \"overwrite\" update happens.

        :return: The etag of this GoogleCloudAiplatformV1Execution.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this GoogleCloudAiplatformV1Execution.

        An eTag used to perform consistent read-modify-write updates. If not set, a blind \"overwrite\" update happens.

        :param etag: The etag of this GoogleCloudAiplatformV1Execution.
        :type etag: str
        """

        self._etag = etag

    @property
    def labels(self):
        """Gets the labels of this GoogleCloudAiplatformV1Execution.

        The labels with user-defined metadata to organize your Executions. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. No more than 64 user labels can be associated with one Execution (System labels are excluded).

        :return: The labels of this GoogleCloudAiplatformV1Execution.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this GoogleCloudAiplatformV1Execution.

        The labels with user-defined metadata to organize your Executions. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. No more than 64 user labels can be associated with one Execution (System labels are excluded).

        :param labels: The labels of this GoogleCloudAiplatformV1Execution.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def metadata(self):
        """Gets the metadata of this GoogleCloudAiplatformV1Execution.

        Properties of the Execution. Top level metadata keys' heading and trailing spaces will be trimmed. The size of this field should not exceed 200KB.

        :return: The metadata of this GoogleCloudAiplatformV1Execution.
        :rtype: Dict[str, object]
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this GoogleCloudAiplatformV1Execution.

        Properties of the Execution. Top level metadata keys' heading and trailing spaces will be trimmed. The size of this field should not exceed 200KB.

        :param metadata: The metadata of this GoogleCloudAiplatformV1Execution.
        :type metadata: Dict[str, object]
        """

        self._metadata = metadata

    @property
    def name(self):
        """Gets the name of this GoogleCloudAiplatformV1Execution.

        Output only. The resource name of the Execution.

        :return: The name of this GoogleCloudAiplatformV1Execution.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GoogleCloudAiplatformV1Execution.

        Output only. The resource name of the Execution.

        :param name: The name of this GoogleCloudAiplatformV1Execution.
        :type name: str
        """

        self._name = name

    @property
    def schema_title(self):
        """Gets the schema_title of this GoogleCloudAiplatformV1Execution.

        The title of the schema describing the metadata. Schema title and version is expected to be registered in earlier Create Schema calls. And both are used together as unique identifiers to identify schemas within the local metadata store.

        :return: The schema_title of this GoogleCloudAiplatformV1Execution.
        :rtype: str
        """
        return self._schema_title

    @schema_title.setter
    def schema_title(self, schema_title):
        """Sets the schema_title of this GoogleCloudAiplatformV1Execution.

        The title of the schema describing the metadata. Schema title and version is expected to be registered in earlier Create Schema calls. And both are used together as unique identifiers to identify schemas within the local metadata store.

        :param schema_title: The schema_title of this GoogleCloudAiplatformV1Execution.
        :type schema_title: str
        """

        self._schema_title = schema_title

    @property
    def schema_version(self):
        """Gets the schema_version of this GoogleCloudAiplatformV1Execution.

        The version of the schema in `schema_title` to use. Schema title and version is expected to be registered in earlier Create Schema calls. And both are used together as unique identifiers to identify schemas within the local metadata store.

        :return: The schema_version of this GoogleCloudAiplatformV1Execution.
        :rtype: str
        """
        return self._schema_version

    @schema_version.setter
    def schema_version(self, schema_version):
        """Sets the schema_version of this GoogleCloudAiplatformV1Execution.

        The version of the schema in `schema_title` to use. Schema title and version is expected to be registered in earlier Create Schema calls. And both are used together as unique identifiers to identify schemas within the local metadata store.

        :param schema_version: The schema_version of this GoogleCloudAiplatformV1Execution.
        :type schema_version: str
        """

        self._schema_version = schema_version

    @property
    def state(self):
        """Gets the state of this GoogleCloudAiplatformV1Execution.

        The state of this Execution. This is a property of the Execution, and does not imply or capture any ongoing process. This property is managed by clients (such as Vertex AI Pipelines) and the system does not prescribe or check the validity of state transitions.

        :return: The state of this GoogleCloudAiplatformV1Execution.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this GoogleCloudAiplatformV1Execution.

        The state of this Execution. This is a property of the Execution, and does not imply or capture any ongoing process. This property is managed by clients (such as Vertex AI Pipelines) and the system does not prescribe or check the validity of state transitions.

        :param state: The state of this GoogleCloudAiplatformV1Execution.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "NEW", "RUNNING", "COMPLETE", "FAILED", "CACHED", "CANCELLED"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def update_time(self):
        """Gets the update_time of this GoogleCloudAiplatformV1Execution.

        Output only. Timestamp when this Execution was last updated.

        :return: The update_time of this GoogleCloudAiplatformV1Execution.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this GoogleCloudAiplatformV1Execution.

        Output only. Timestamp when this Execution was last updated.

        :param update_time: The update_time of this GoogleCloudAiplatformV1Execution.
        :type update_time: str
        """

        self._update_time = update_time
