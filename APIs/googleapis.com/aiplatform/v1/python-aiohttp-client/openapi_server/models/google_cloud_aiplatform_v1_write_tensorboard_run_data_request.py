# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_aiplatform_v1_time_series_data import GoogleCloudAiplatformV1TimeSeriesData
from openapi_server import util


class GoogleCloudAiplatformV1WriteTensorboardRunDataRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, tensorboard_run: str=None, time_series_data: List[GoogleCloudAiplatformV1TimeSeriesData]=None):
        """GoogleCloudAiplatformV1WriteTensorboardRunDataRequest - a model defined in OpenAPI

        :param tensorboard_run: The tensorboard_run of this GoogleCloudAiplatformV1WriteTensorboardRunDataRequest.
        :param time_series_data: The time_series_data of this GoogleCloudAiplatformV1WriteTensorboardRunDataRequest.
        """
        self.openapi_types = {
            'tensorboard_run': str,
            'time_series_data': List[GoogleCloudAiplatformV1TimeSeriesData]
        }

        self.attribute_map = {
            'tensorboard_run': 'tensorboardRun',
            'time_series_data': 'timeSeriesData'
        }

        self._tensorboard_run = tensorboard_run
        self._time_series_data = time_series_data

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudAiplatformV1WriteTensorboardRunDataRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudAiplatformV1WriteTensorboardRunDataRequest of this GoogleCloudAiplatformV1WriteTensorboardRunDataRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def tensorboard_run(self):
        """Gets the tensorboard_run of this GoogleCloudAiplatformV1WriteTensorboardRunDataRequest.

        Required. The resource name of the TensorboardRun to write data to. Format: `projects/{project}/locations/{location}/tensorboards/{tensorboard}/experiments/{experiment}/runs/{run}`

        :return: The tensorboard_run of this GoogleCloudAiplatformV1WriteTensorboardRunDataRequest.
        :rtype: str
        """
        return self._tensorboard_run

    @tensorboard_run.setter
    def tensorboard_run(self, tensorboard_run):
        """Sets the tensorboard_run of this GoogleCloudAiplatformV1WriteTensorboardRunDataRequest.

        Required. The resource name of the TensorboardRun to write data to. Format: `projects/{project}/locations/{location}/tensorboards/{tensorboard}/experiments/{experiment}/runs/{run}`

        :param tensorboard_run: The tensorboard_run of this GoogleCloudAiplatformV1WriteTensorboardRunDataRequest.
        :type tensorboard_run: str
        """

        self._tensorboard_run = tensorboard_run

    @property
    def time_series_data(self):
        """Gets the time_series_data of this GoogleCloudAiplatformV1WriteTensorboardRunDataRequest.

        Required. The TensorboardTimeSeries data to write. Values with in a time series are indexed by their step value. Repeated writes to the same step will overwrite the existing value for that step. The upper limit of data points per write request is 5000.

        :return: The time_series_data of this GoogleCloudAiplatformV1WriteTensorboardRunDataRequest.
        :rtype: List[GoogleCloudAiplatformV1TimeSeriesData]
        """
        return self._time_series_data

    @time_series_data.setter
    def time_series_data(self, time_series_data):
        """Sets the time_series_data of this GoogleCloudAiplatformV1WriteTensorboardRunDataRequest.

        Required. The TensorboardTimeSeries data to write. Values with in a time series are indexed by their step value. Repeated writes to the same step will overwrite the existing value for that step. The upper limit of data points per write request is 5000.

        :param time_series_data: The time_series_data of this GoogleCloudAiplatformV1WriteTensorboardRunDataRequest.
        :type time_series_data: List[GoogleCloudAiplatformV1TimeSeriesData]
        """

        self._time_series_data = time_series_data
