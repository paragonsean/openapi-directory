# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleCloudAiplatformV1SchemaTrainingjobDefinitionAutoMlImageSegmentationInputs(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, base_model_id: str=None, budget_milli_node_hours: str=None, model_type: str=None):
        """GoogleCloudAiplatformV1SchemaTrainingjobDefinitionAutoMlImageSegmentationInputs - a model defined in OpenAPI

        :param base_model_id: The base_model_id of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionAutoMlImageSegmentationInputs.
        :param budget_milli_node_hours: The budget_milli_node_hours of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionAutoMlImageSegmentationInputs.
        :param model_type: The model_type of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionAutoMlImageSegmentationInputs.
        """
        self.openapi_types = {
            'base_model_id': str,
            'budget_milli_node_hours': str,
            'model_type': str
        }

        self.attribute_map = {
            'base_model_id': 'baseModelId',
            'budget_milli_node_hours': 'budgetMilliNodeHours',
            'model_type': 'modelType'
        }

        self._base_model_id = base_model_id
        self._budget_milli_node_hours = budget_milli_node_hours
        self._model_type = model_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudAiplatformV1SchemaTrainingjobDefinitionAutoMlImageSegmentationInputs':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudAiplatformV1SchemaTrainingjobDefinitionAutoMlImageSegmentationInputs of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionAutoMlImageSegmentationInputs.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def base_model_id(self):
        """Gets the base_model_id of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionAutoMlImageSegmentationInputs.

        The ID of the `base` model. If it is specified, the new model will be trained based on the `base` model. Otherwise, the new model will be trained from scratch. The `base` model must be in the same Project and Location as the new Model to train, and have the same modelType.

        :return: The base_model_id of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionAutoMlImageSegmentationInputs.
        :rtype: str
        """
        return self._base_model_id

    @base_model_id.setter
    def base_model_id(self, base_model_id):
        """Sets the base_model_id of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionAutoMlImageSegmentationInputs.

        The ID of the `base` model. If it is specified, the new model will be trained based on the `base` model. Otherwise, the new model will be trained from scratch. The `base` model must be in the same Project and Location as the new Model to train, and have the same modelType.

        :param base_model_id: The base_model_id of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionAutoMlImageSegmentationInputs.
        :type base_model_id: str
        """

        self._base_model_id = base_model_id

    @property
    def budget_milli_node_hours(self):
        """Gets the budget_milli_node_hours of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionAutoMlImageSegmentationInputs.

        The training budget of creating this model, expressed in milli node hours i.e. 1,000 value in this field means 1 node hour. The actual metadata.costMilliNodeHours will be equal or less than this value. If further model training ceases to provide any improvements, it will stop without using the full budget and the metadata.successfulStopReason will be `model-converged`. Note, node_hour = actual_hour * number_of_nodes_involved. Or actual_wall_clock_hours = train_budget_milli_node_hours / (number_of_nodes_involved * 1000) For modelType `cloud-high-accuracy-1`(default), the budget must be between 20,000 and 2,000,000 milli node hours, inclusive. The default value is 192,000 which represents one day in wall time (1000 milli * 24 hours * 8 nodes).

        :return: The budget_milli_node_hours of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionAutoMlImageSegmentationInputs.
        :rtype: str
        """
        return self._budget_milli_node_hours

    @budget_milli_node_hours.setter
    def budget_milli_node_hours(self, budget_milli_node_hours):
        """Sets the budget_milli_node_hours of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionAutoMlImageSegmentationInputs.

        The training budget of creating this model, expressed in milli node hours i.e. 1,000 value in this field means 1 node hour. The actual metadata.costMilliNodeHours will be equal or less than this value. If further model training ceases to provide any improvements, it will stop without using the full budget and the metadata.successfulStopReason will be `model-converged`. Note, node_hour = actual_hour * number_of_nodes_involved. Or actual_wall_clock_hours = train_budget_milli_node_hours / (number_of_nodes_involved * 1000) For modelType `cloud-high-accuracy-1`(default), the budget must be between 20,000 and 2,000,000 milli node hours, inclusive. The default value is 192,000 which represents one day in wall time (1000 milli * 24 hours * 8 nodes).

        :param budget_milli_node_hours: The budget_milli_node_hours of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionAutoMlImageSegmentationInputs.
        :type budget_milli_node_hours: str
        """

        self._budget_milli_node_hours = budget_milli_node_hours

    @property
    def model_type(self):
        """Gets the model_type of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionAutoMlImageSegmentationInputs.


        :return: The model_type of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionAutoMlImageSegmentationInputs.
        :rtype: str
        """
        return self._model_type

    @model_type.setter
    def model_type(self, model_type):
        """Sets the model_type of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionAutoMlImageSegmentationInputs.


        :param model_type: The model_type of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionAutoMlImageSegmentationInputs.
        :type model_type: str
        """
        allowed_values = ["MODEL_TYPE_UNSPECIFIED", "CLOUD_HIGH_ACCURACY_1", "CLOUD_LOW_ACCURACY_1", "MOBILE_TF_LOW_LATENCY_1"]  # noqa: E501
        if model_type not in allowed_values:
            raise ValueError(
                "Invalid value for `model_type` ({0}), must be one of {1}"
                .format(model_type, allowed_values)
            )

        self._model_type = model_type
