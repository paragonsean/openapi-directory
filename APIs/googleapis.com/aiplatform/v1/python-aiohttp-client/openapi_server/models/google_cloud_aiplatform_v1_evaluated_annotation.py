# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_aiplatform_v1_error_analysis_annotation import GoogleCloudAiplatformV1ErrorAnalysisAnnotation
from openapi_server.models.google_cloud_aiplatform_v1_evaluated_annotation_explanation import GoogleCloudAiplatformV1EvaluatedAnnotationExplanation
from openapi_server import util


class GoogleCloudAiplatformV1EvaluatedAnnotation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data_item_payload: object=None, error_analysis_annotations: List[GoogleCloudAiplatformV1ErrorAnalysisAnnotation]=None, evaluated_data_item_view_id: str=None, explanations: List[GoogleCloudAiplatformV1EvaluatedAnnotationExplanation]=None, ground_truths: List[object]=None, predictions: List[object]=None, type: str=None):
        """GoogleCloudAiplatformV1EvaluatedAnnotation - a model defined in OpenAPI

        :param data_item_payload: The data_item_payload of this GoogleCloudAiplatformV1EvaluatedAnnotation.
        :param error_analysis_annotations: The error_analysis_annotations of this GoogleCloudAiplatformV1EvaluatedAnnotation.
        :param evaluated_data_item_view_id: The evaluated_data_item_view_id of this GoogleCloudAiplatformV1EvaluatedAnnotation.
        :param explanations: The explanations of this GoogleCloudAiplatformV1EvaluatedAnnotation.
        :param ground_truths: The ground_truths of this GoogleCloudAiplatformV1EvaluatedAnnotation.
        :param predictions: The predictions of this GoogleCloudAiplatformV1EvaluatedAnnotation.
        :param type: The type of this GoogleCloudAiplatformV1EvaluatedAnnotation.
        """
        self.openapi_types = {
            'data_item_payload': object,
            'error_analysis_annotations': List[GoogleCloudAiplatformV1ErrorAnalysisAnnotation],
            'evaluated_data_item_view_id': str,
            'explanations': List[GoogleCloudAiplatformV1EvaluatedAnnotationExplanation],
            'ground_truths': List[object],
            'predictions': List[object],
            'type': str
        }

        self.attribute_map = {
            'data_item_payload': 'dataItemPayload',
            'error_analysis_annotations': 'errorAnalysisAnnotations',
            'evaluated_data_item_view_id': 'evaluatedDataItemViewId',
            'explanations': 'explanations',
            'ground_truths': 'groundTruths',
            'predictions': 'predictions',
            'type': 'type'
        }

        self._data_item_payload = data_item_payload
        self._error_analysis_annotations = error_analysis_annotations
        self._evaluated_data_item_view_id = evaluated_data_item_view_id
        self._explanations = explanations
        self._ground_truths = ground_truths
        self._predictions = predictions
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudAiplatformV1EvaluatedAnnotation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudAiplatformV1EvaluatedAnnotation of this GoogleCloudAiplatformV1EvaluatedAnnotation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data_item_payload(self):
        """Gets the data_item_payload of this GoogleCloudAiplatformV1EvaluatedAnnotation.

        Output only. The data item payload that the Model predicted this EvaluatedAnnotation on.

        :return: The data_item_payload of this GoogleCloudAiplatformV1EvaluatedAnnotation.
        :rtype: object
        """
        return self._data_item_payload

    @data_item_payload.setter
    def data_item_payload(self, data_item_payload):
        """Sets the data_item_payload of this GoogleCloudAiplatformV1EvaluatedAnnotation.

        Output only. The data item payload that the Model predicted this EvaluatedAnnotation on.

        :param data_item_payload: The data_item_payload of this GoogleCloudAiplatformV1EvaluatedAnnotation.
        :type data_item_payload: object
        """

        self._data_item_payload = data_item_payload

    @property
    def error_analysis_annotations(self):
        """Gets the error_analysis_annotations of this GoogleCloudAiplatformV1EvaluatedAnnotation.

        Annotations of model error analysis results.

        :return: The error_analysis_annotations of this GoogleCloudAiplatformV1EvaluatedAnnotation.
        :rtype: List[GoogleCloudAiplatformV1ErrorAnalysisAnnotation]
        """
        return self._error_analysis_annotations

    @error_analysis_annotations.setter
    def error_analysis_annotations(self, error_analysis_annotations):
        """Sets the error_analysis_annotations of this GoogleCloudAiplatformV1EvaluatedAnnotation.

        Annotations of model error analysis results.

        :param error_analysis_annotations: The error_analysis_annotations of this GoogleCloudAiplatformV1EvaluatedAnnotation.
        :type error_analysis_annotations: List[GoogleCloudAiplatformV1ErrorAnalysisAnnotation]
        """

        self._error_analysis_annotations = error_analysis_annotations

    @property
    def evaluated_data_item_view_id(self):
        """Gets the evaluated_data_item_view_id of this GoogleCloudAiplatformV1EvaluatedAnnotation.

        Output only. ID of the EvaluatedDataItemView under the same ancestor ModelEvaluation. The EvaluatedDataItemView consists of all ground truths and predictions on data_item_payload.

        :return: The evaluated_data_item_view_id of this GoogleCloudAiplatformV1EvaluatedAnnotation.
        :rtype: str
        """
        return self._evaluated_data_item_view_id

    @evaluated_data_item_view_id.setter
    def evaluated_data_item_view_id(self, evaluated_data_item_view_id):
        """Sets the evaluated_data_item_view_id of this GoogleCloudAiplatformV1EvaluatedAnnotation.

        Output only. ID of the EvaluatedDataItemView under the same ancestor ModelEvaluation. The EvaluatedDataItemView consists of all ground truths and predictions on data_item_payload.

        :param evaluated_data_item_view_id: The evaluated_data_item_view_id of this GoogleCloudAiplatformV1EvaluatedAnnotation.
        :type evaluated_data_item_view_id: str
        """

        self._evaluated_data_item_view_id = evaluated_data_item_view_id

    @property
    def explanations(self):
        """Gets the explanations of this GoogleCloudAiplatformV1EvaluatedAnnotation.

        Explanations of predictions. Each element of the explanations indicates the explanation for one explanation Method. The attributions list in the EvaluatedAnnotationExplanation.explanation object corresponds to the predictions list. For example, the second element in the attributions list explains the second element in the predictions list.

        :return: The explanations of this GoogleCloudAiplatformV1EvaluatedAnnotation.
        :rtype: List[GoogleCloudAiplatformV1EvaluatedAnnotationExplanation]
        """
        return self._explanations

    @explanations.setter
    def explanations(self, explanations):
        """Sets the explanations of this GoogleCloudAiplatformV1EvaluatedAnnotation.

        Explanations of predictions. Each element of the explanations indicates the explanation for one explanation Method. The attributions list in the EvaluatedAnnotationExplanation.explanation object corresponds to the predictions list. For example, the second element in the attributions list explains the second element in the predictions list.

        :param explanations: The explanations of this GoogleCloudAiplatformV1EvaluatedAnnotation.
        :type explanations: List[GoogleCloudAiplatformV1EvaluatedAnnotationExplanation]
        """

        self._explanations = explanations

    @property
    def ground_truths(self):
        """Gets the ground_truths of this GoogleCloudAiplatformV1EvaluatedAnnotation.

        Output only. The ground truth Annotations, i.e. the Annotations that exist in the test data the Model is evaluated on. For true positive, there is one and only one ground truth annotation, which matches the only prediction in predictions. For false positive, there are zero or more ground truth annotations that are similar to the only prediction in predictions, but not enough for a match. For false negative, there is one and only one ground truth annotation, which doesn't match any predictions created by the model. The schema of the ground truth is stored in ModelEvaluation.annotation_schema_uri

        :return: The ground_truths of this GoogleCloudAiplatformV1EvaluatedAnnotation.
        :rtype: List[object]
        """
        return self._ground_truths

    @ground_truths.setter
    def ground_truths(self, ground_truths):
        """Sets the ground_truths of this GoogleCloudAiplatformV1EvaluatedAnnotation.

        Output only. The ground truth Annotations, i.e. the Annotations that exist in the test data the Model is evaluated on. For true positive, there is one and only one ground truth annotation, which matches the only prediction in predictions. For false positive, there are zero or more ground truth annotations that are similar to the only prediction in predictions, but not enough for a match. For false negative, there is one and only one ground truth annotation, which doesn't match any predictions created by the model. The schema of the ground truth is stored in ModelEvaluation.annotation_schema_uri

        :param ground_truths: The ground_truths of this GoogleCloudAiplatformV1EvaluatedAnnotation.
        :type ground_truths: List[object]
        """

        self._ground_truths = ground_truths

    @property
    def predictions(self):
        """Gets the predictions of this GoogleCloudAiplatformV1EvaluatedAnnotation.

        Output only. The model predicted annotations. For true positive, there is one and only one prediction, which matches the only one ground truth annotation in ground_truths. For false positive, there is one and only one prediction, which doesn't match any ground truth annotation of the corresponding data_item_view_id. For false negative, there are zero or more predictions which are similar to the only ground truth annotation in ground_truths but not enough for a match. The schema of the prediction is stored in ModelEvaluation.annotation_schema_uri

        :return: The predictions of this GoogleCloudAiplatformV1EvaluatedAnnotation.
        :rtype: List[object]
        """
        return self._predictions

    @predictions.setter
    def predictions(self, predictions):
        """Sets the predictions of this GoogleCloudAiplatformV1EvaluatedAnnotation.

        Output only. The model predicted annotations. For true positive, there is one and only one prediction, which matches the only one ground truth annotation in ground_truths. For false positive, there is one and only one prediction, which doesn't match any ground truth annotation of the corresponding data_item_view_id. For false negative, there are zero or more predictions which are similar to the only ground truth annotation in ground_truths but not enough for a match. The schema of the prediction is stored in ModelEvaluation.annotation_schema_uri

        :param predictions: The predictions of this GoogleCloudAiplatformV1EvaluatedAnnotation.
        :type predictions: List[object]
        """

        self._predictions = predictions

    @property
    def type(self):
        """Gets the type of this GoogleCloudAiplatformV1EvaluatedAnnotation.

        Output only. Type of the EvaluatedAnnotation.

        :return: The type of this GoogleCloudAiplatformV1EvaluatedAnnotation.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this GoogleCloudAiplatformV1EvaluatedAnnotation.

        Output only. Type of the EvaluatedAnnotation.

        :param type: The type of this GoogleCloudAiplatformV1EvaluatedAnnotation.
        :type type: str
        """
        allowed_values = ["EVALUATED_ANNOTATION_TYPE_UNSPECIFIED", "TRUE_POSITIVE", "FALSE_POSITIVE", "FALSE_NEGATIVE"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
