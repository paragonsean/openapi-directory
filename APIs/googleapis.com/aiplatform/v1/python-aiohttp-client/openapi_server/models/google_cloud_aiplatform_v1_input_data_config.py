# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_aiplatform_v1_big_query_destination import GoogleCloudAiplatformV1BigQueryDestination
from openapi_server.models.google_cloud_aiplatform_v1_filter_split import GoogleCloudAiplatformV1FilterSplit
from openapi_server.models.google_cloud_aiplatform_v1_fraction_split import GoogleCloudAiplatformV1FractionSplit
from openapi_server.models.google_cloud_aiplatform_v1_gcs_destination import GoogleCloudAiplatformV1GcsDestination
from openapi_server.models.google_cloud_aiplatform_v1_predefined_split import GoogleCloudAiplatformV1PredefinedSplit
from openapi_server.models.google_cloud_aiplatform_v1_stratified_split import GoogleCloudAiplatformV1StratifiedSplit
from openapi_server.models.google_cloud_aiplatform_v1_timestamp_split import GoogleCloudAiplatformV1TimestampSplit
from openapi_server import util


class GoogleCloudAiplatformV1InputDataConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, annotation_schema_uri: str=None, annotations_filter: str=None, bigquery_destination: GoogleCloudAiplatformV1BigQueryDestination=None, dataset_id: str=None, filter_split: GoogleCloudAiplatformV1FilterSplit=None, fraction_split: GoogleCloudAiplatformV1FractionSplit=None, gcs_destination: GoogleCloudAiplatformV1GcsDestination=None, persist_ml_use_assignment: bool=None, predefined_split: GoogleCloudAiplatformV1PredefinedSplit=None, saved_query_id: str=None, stratified_split: GoogleCloudAiplatformV1StratifiedSplit=None, timestamp_split: GoogleCloudAiplatformV1TimestampSplit=None):
        """GoogleCloudAiplatformV1InputDataConfig - a model defined in OpenAPI

        :param annotation_schema_uri: The annotation_schema_uri of this GoogleCloudAiplatformV1InputDataConfig.
        :param annotations_filter: The annotations_filter of this GoogleCloudAiplatformV1InputDataConfig.
        :param bigquery_destination: The bigquery_destination of this GoogleCloudAiplatformV1InputDataConfig.
        :param dataset_id: The dataset_id of this GoogleCloudAiplatformV1InputDataConfig.
        :param filter_split: The filter_split of this GoogleCloudAiplatformV1InputDataConfig.
        :param fraction_split: The fraction_split of this GoogleCloudAiplatformV1InputDataConfig.
        :param gcs_destination: The gcs_destination of this GoogleCloudAiplatformV1InputDataConfig.
        :param persist_ml_use_assignment: The persist_ml_use_assignment of this GoogleCloudAiplatformV1InputDataConfig.
        :param predefined_split: The predefined_split of this GoogleCloudAiplatformV1InputDataConfig.
        :param saved_query_id: The saved_query_id of this GoogleCloudAiplatformV1InputDataConfig.
        :param stratified_split: The stratified_split of this GoogleCloudAiplatformV1InputDataConfig.
        :param timestamp_split: The timestamp_split of this GoogleCloudAiplatformV1InputDataConfig.
        """
        self.openapi_types = {
            'annotation_schema_uri': str,
            'annotations_filter': str,
            'bigquery_destination': GoogleCloudAiplatformV1BigQueryDestination,
            'dataset_id': str,
            'filter_split': GoogleCloudAiplatformV1FilterSplit,
            'fraction_split': GoogleCloudAiplatformV1FractionSplit,
            'gcs_destination': GoogleCloudAiplatformV1GcsDestination,
            'persist_ml_use_assignment': bool,
            'predefined_split': GoogleCloudAiplatformV1PredefinedSplit,
            'saved_query_id': str,
            'stratified_split': GoogleCloudAiplatformV1StratifiedSplit,
            'timestamp_split': GoogleCloudAiplatformV1TimestampSplit
        }

        self.attribute_map = {
            'annotation_schema_uri': 'annotationSchemaUri',
            'annotations_filter': 'annotationsFilter',
            'bigquery_destination': 'bigqueryDestination',
            'dataset_id': 'datasetId',
            'filter_split': 'filterSplit',
            'fraction_split': 'fractionSplit',
            'gcs_destination': 'gcsDestination',
            'persist_ml_use_assignment': 'persistMlUseAssignment',
            'predefined_split': 'predefinedSplit',
            'saved_query_id': 'savedQueryId',
            'stratified_split': 'stratifiedSplit',
            'timestamp_split': 'timestampSplit'
        }

        self._annotation_schema_uri = annotation_schema_uri
        self._annotations_filter = annotations_filter
        self._bigquery_destination = bigquery_destination
        self._dataset_id = dataset_id
        self._filter_split = filter_split
        self._fraction_split = fraction_split
        self._gcs_destination = gcs_destination
        self._persist_ml_use_assignment = persist_ml_use_assignment
        self._predefined_split = predefined_split
        self._saved_query_id = saved_query_id
        self._stratified_split = stratified_split
        self._timestamp_split = timestamp_split

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudAiplatformV1InputDataConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudAiplatformV1InputDataConfig of this GoogleCloudAiplatformV1InputDataConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def annotation_schema_uri(self):
        """Gets the annotation_schema_uri of this GoogleCloudAiplatformV1InputDataConfig.

        Applicable only to custom training with Datasets that have DataItems and Annotations. Cloud Storage URI that points to a YAML file describing the annotation schema. The schema is defined as an OpenAPI 3.0.2 [Schema Object](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.2.md#schemaObject). The schema files that can be used here are found in gs://google-cloud-aiplatform/schema/dataset/annotation/ , note that the chosen schema must be consistent with metadata of the Dataset specified by dataset_id. Only Annotations that both match this schema and belong to DataItems not ignored by the split method are used in respectively training, validation or test role, depending on the role of the DataItem they are on. When used in conjunction with annotations_filter, the Annotations used for training are filtered by both annotations_filter and annotation_schema_uri.

        :return: The annotation_schema_uri of this GoogleCloudAiplatformV1InputDataConfig.
        :rtype: str
        """
        return self._annotation_schema_uri

    @annotation_schema_uri.setter
    def annotation_schema_uri(self, annotation_schema_uri):
        """Sets the annotation_schema_uri of this GoogleCloudAiplatformV1InputDataConfig.

        Applicable only to custom training with Datasets that have DataItems and Annotations. Cloud Storage URI that points to a YAML file describing the annotation schema. The schema is defined as an OpenAPI 3.0.2 [Schema Object](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.2.md#schemaObject). The schema files that can be used here are found in gs://google-cloud-aiplatform/schema/dataset/annotation/ , note that the chosen schema must be consistent with metadata of the Dataset specified by dataset_id. Only Annotations that both match this schema and belong to DataItems not ignored by the split method are used in respectively training, validation or test role, depending on the role of the DataItem they are on. When used in conjunction with annotations_filter, the Annotations used for training are filtered by both annotations_filter and annotation_schema_uri.

        :param annotation_schema_uri: The annotation_schema_uri of this GoogleCloudAiplatformV1InputDataConfig.
        :type annotation_schema_uri: str
        """

        self._annotation_schema_uri = annotation_schema_uri

    @property
    def annotations_filter(self):
        """Gets the annotations_filter of this GoogleCloudAiplatformV1InputDataConfig.

        Applicable only to Datasets that have DataItems and Annotations. A filter on Annotations of the Dataset. Only Annotations that both match this filter and belong to DataItems not ignored by the split method are used in respectively training, validation or test role, depending on the role of the DataItem they are on (for the auto-assigned that role is decided by Vertex AI). A filter with same syntax as the one used in ListAnnotations may be used, but note here it filters across all Annotations of the Dataset, and not just within a single DataItem.

        :return: The annotations_filter of this GoogleCloudAiplatformV1InputDataConfig.
        :rtype: str
        """
        return self._annotations_filter

    @annotations_filter.setter
    def annotations_filter(self, annotations_filter):
        """Sets the annotations_filter of this GoogleCloudAiplatformV1InputDataConfig.

        Applicable only to Datasets that have DataItems and Annotations. A filter on Annotations of the Dataset. Only Annotations that both match this filter and belong to DataItems not ignored by the split method are used in respectively training, validation or test role, depending on the role of the DataItem they are on (for the auto-assigned that role is decided by Vertex AI). A filter with same syntax as the one used in ListAnnotations may be used, but note here it filters across all Annotations of the Dataset, and not just within a single DataItem.

        :param annotations_filter: The annotations_filter of this GoogleCloudAiplatformV1InputDataConfig.
        :type annotations_filter: str
        """

        self._annotations_filter = annotations_filter

    @property
    def bigquery_destination(self):
        """Gets the bigquery_destination of this GoogleCloudAiplatformV1InputDataConfig.


        :return: The bigquery_destination of this GoogleCloudAiplatformV1InputDataConfig.
        :rtype: GoogleCloudAiplatformV1BigQueryDestination
        """
        return self._bigquery_destination

    @bigquery_destination.setter
    def bigquery_destination(self, bigquery_destination):
        """Sets the bigquery_destination of this GoogleCloudAiplatformV1InputDataConfig.


        :param bigquery_destination: The bigquery_destination of this GoogleCloudAiplatformV1InputDataConfig.
        :type bigquery_destination: GoogleCloudAiplatformV1BigQueryDestination
        """

        self._bigquery_destination = bigquery_destination

    @property
    def dataset_id(self):
        """Gets the dataset_id of this GoogleCloudAiplatformV1InputDataConfig.

        Required. The ID of the Dataset in the same Project and Location which data will be used to train the Model. The Dataset must use schema compatible with Model being trained, and what is compatible should be described in the used TrainingPipeline's training_task_definition. For tabular Datasets, all their data is exported to training, to pick and choose from.

        :return: The dataset_id of this GoogleCloudAiplatformV1InputDataConfig.
        :rtype: str
        """
        return self._dataset_id

    @dataset_id.setter
    def dataset_id(self, dataset_id):
        """Sets the dataset_id of this GoogleCloudAiplatformV1InputDataConfig.

        Required. The ID of the Dataset in the same Project and Location which data will be used to train the Model. The Dataset must use schema compatible with Model being trained, and what is compatible should be described in the used TrainingPipeline's training_task_definition. For tabular Datasets, all their data is exported to training, to pick and choose from.

        :param dataset_id: The dataset_id of this GoogleCloudAiplatformV1InputDataConfig.
        :type dataset_id: str
        """

        self._dataset_id = dataset_id

    @property
    def filter_split(self):
        """Gets the filter_split of this GoogleCloudAiplatformV1InputDataConfig.


        :return: The filter_split of this GoogleCloudAiplatformV1InputDataConfig.
        :rtype: GoogleCloudAiplatformV1FilterSplit
        """
        return self._filter_split

    @filter_split.setter
    def filter_split(self, filter_split):
        """Sets the filter_split of this GoogleCloudAiplatformV1InputDataConfig.


        :param filter_split: The filter_split of this GoogleCloudAiplatformV1InputDataConfig.
        :type filter_split: GoogleCloudAiplatformV1FilterSplit
        """

        self._filter_split = filter_split

    @property
    def fraction_split(self):
        """Gets the fraction_split of this GoogleCloudAiplatformV1InputDataConfig.


        :return: The fraction_split of this GoogleCloudAiplatformV1InputDataConfig.
        :rtype: GoogleCloudAiplatformV1FractionSplit
        """
        return self._fraction_split

    @fraction_split.setter
    def fraction_split(self, fraction_split):
        """Sets the fraction_split of this GoogleCloudAiplatformV1InputDataConfig.


        :param fraction_split: The fraction_split of this GoogleCloudAiplatformV1InputDataConfig.
        :type fraction_split: GoogleCloudAiplatformV1FractionSplit
        """

        self._fraction_split = fraction_split

    @property
    def gcs_destination(self):
        """Gets the gcs_destination of this GoogleCloudAiplatformV1InputDataConfig.


        :return: The gcs_destination of this GoogleCloudAiplatformV1InputDataConfig.
        :rtype: GoogleCloudAiplatformV1GcsDestination
        """
        return self._gcs_destination

    @gcs_destination.setter
    def gcs_destination(self, gcs_destination):
        """Sets the gcs_destination of this GoogleCloudAiplatformV1InputDataConfig.


        :param gcs_destination: The gcs_destination of this GoogleCloudAiplatformV1InputDataConfig.
        :type gcs_destination: GoogleCloudAiplatformV1GcsDestination
        """

        self._gcs_destination = gcs_destination

    @property
    def persist_ml_use_assignment(self):
        """Gets the persist_ml_use_assignment of this GoogleCloudAiplatformV1InputDataConfig.

        Whether to persist the ML use assignment to data item system labels.

        :return: The persist_ml_use_assignment of this GoogleCloudAiplatformV1InputDataConfig.
        :rtype: bool
        """
        return self._persist_ml_use_assignment

    @persist_ml_use_assignment.setter
    def persist_ml_use_assignment(self, persist_ml_use_assignment):
        """Sets the persist_ml_use_assignment of this GoogleCloudAiplatformV1InputDataConfig.

        Whether to persist the ML use assignment to data item system labels.

        :param persist_ml_use_assignment: The persist_ml_use_assignment of this GoogleCloudAiplatformV1InputDataConfig.
        :type persist_ml_use_assignment: bool
        """

        self._persist_ml_use_assignment = persist_ml_use_assignment

    @property
    def predefined_split(self):
        """Gets the predefined_split of this GoogleCloudAiplatformV1InputDataConfig.


        :return: The predefined_split of this GoogleCloudAiplatformV1InputDataConfig.
        :rtype: GoogleCloudAiplatformV1PredefinedSplit
        """
        return self._predefined_split

    @predefined_split.setter
    def predefined_split(self, predefined_split):
        """Sets the predefined_split of this GoogleCloudAiplatformV1InputDataConfig.


        :param predefined_split: The predefined_split of this GoogleCloudAiplatformV1InputDataConfig.
        :type predefined_split: GoogleCloudAiplatformV1PredefinedSplit
        """

        self._predefined_split = predefined_split

    @property
    def saved_query_id(self):
        """Gets the saved_query_id of this GoogleCloudAiplatformV1InputDataConfig.

        Only applicable to Datasets that have SavedQueries. The ID of a SavedQuery (annotation set) under the Dataset specified by dataset_id used for filtering Annotations for training. Only Annotations that are associated with this SavedQuery are used in respectively training. When used in conjunction with annotations_filter, the Annotations used for training are filtered by both saved_query_id and annotations_filter. Only one of saved_query_id and annotation_schema_uri should be specified as both of them represent the same thing: problem type.

        :return: The saved_query_id of this GoogleCloudAiplatformV1InputDataConfig.
        :rtype: str
        """
        return self._saved_query_id

    @saved_query_id.setter
    def saved_query_id(self, saved_query_id):
        """Sets the saved_query_id of this GoogleCloudAiplatformV1InputDataConfig.

        Only applicable to Datasets that have SavedQueries. The ID of a SavedQuery (annotation set) under the Dataset specified by dataset_id used for filtering Annotations for training. Only Annotations that are associated with this SavedQuery are used in respectively training. When used in conjunction with annotations_filter, the Annotations used for training are filtered by both saved_query_id and annotations_filter. Only one of saved_query_id and annotation_schema_uri should be specified as both of them represent the same thing: problem type.

        :param saved_query_id: The saved_query_id of this GoogleCloudAiplatformV1InputDataConfig.
        :type saved_query_id: str
        """

        self._saved_query_id = saved_query_id

    @property
    def stratified_split(self):
        """Gets the stratified_split of this GoogleCloudAiplatformV1InputDataConfig.


        :return: The stratified_split of this GoogleCloudAiplatformV1InputDataConfig.
        :rtype: GoogleCloudAiplatformV1StratifiedSplit
        """
        return self._stratified_split

    @stratified_split.setter
    def stratified_split(self, stratified_split):
        """Sets the stratified_split of this GoogleCloudAiplatformV1InputDataConfig.


        :param stratified_split: The stratified_split of this GoogleCloudAiplatformV1InputDataConfig.
        :type stratified_split: GoogleCloudAiplatformV1StratifiedSplit
        """

        self._stratified_split = stratified_split

    @property
    def timestamp_split(self):
        """Gets the timestamp_split of this GoogleCloudAiplatformV1InputDataConfig.


        :return: The timestamp_split of this GoogleCloudAiplatformV1InputDataConfig.
        :rtype: GoogleCloudAiplatformV1TimestampSplit
        """
        return self._timestamp_split

    @timestamp_split.setter
    def timestamp_split(self, timestamp_split):
        """Sets the timestamp_split of this GoogleCloudAiplatformV1InputDataConfig.


        :param timestamp_split: The timestamp_split of this GoogleCloudAiplatformV1InputDataConfig.
        :type timestamp_split: GoogleCloudAiplatformV1TimestampSplit
        """

        self._timestamp_split = timestamp_split
