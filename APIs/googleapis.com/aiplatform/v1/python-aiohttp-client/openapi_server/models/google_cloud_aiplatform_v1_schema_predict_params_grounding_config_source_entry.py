# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleCloudAiplatformV1SchemaPredictParamsGroundingConfigSourceEntry(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, enterprise_datastore: str=None, inline_context: str=None, type: str=None, vertex_ai_search_datastore: str=None):
        """GoogleCloudAiplatformV1SchemaPredictParamsGroundingConfigSourceEntry - a model defined in OpenAPI

        :param enterprise_datastore: The enterprise_datastore of this GoogleCloudAiplatformV1SchemaPredictParamsGroundingConfigSourceEntry.
        :param inline_context: The inline_context of this GoogleCloudAiplatformV1SchemaPredictParamsGroundingConfigSourceEntry.
        :param type: The type of this GoogleCloudAiplatformV1SchemaPredictParamsGroundingConfigSourceEntry.
        :param vertex_ai_search_datastore: The vertex_ai_search_datastore of this GoogleCloudAiplatformV1SchemaPredictParamsGroundingConfigSourceEntry.
        """
        self.openapi_types = {
            'enterprise_datastore': str,
            'inline_context': str,
            'type': str,
            'vertex_ai_search_datastore': str
        }

        self.attribute_map = {
            'enterprise_datastore': 'enterpriseDatastore',
            'inline_context': 'inlineContext',
            'type': 'type',
            'vertex_ai_search_datastore': 'vertexAiSearchDatastore'
        }

        self._enterprise_datastore = enterprise_datastore
        self._inline_context = inline_context
        self._type = type
        self._vertex_ai_search_datastore = vertex_ai_search_datastore

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudAiplatformV1SchemaPredictParamsGroundingConfigSourceEntry':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudAiplatformV1SchemaPredictParamsGroundingConfigSourceEntry of this GoogleCloudAiplatformV1SchemaPredictParamsGroundingConfigSourceEntry.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def enterprise_datastore(self):
        """Gets the enterprise_datastore of this GoogleCloudAiplatformV1SchemaPredictParamsGroundingConfigSourceEntry.

        The uri of the Vertex AI Search data source. Deprecated. Use vertex_ai_search_datastore instead.

        :return: The enterprise_datastore of this GoogleCloudAiplatformV1SchemaPredictParamsGroundingConfigSourceEntry.
        :rtype: str
        """
        return self._enterprise_datastore

    @enterprise_datastore.setter
    def enterprise_datastore(self, enterprise_datastore):
        """Sets the enterprise_datastore of this GoogleCloudAiplatformV1SchemaPredictParamsGroundingConfigSourceEntry.

        The uri of the Vertex AI Search data source. Deprecated. Use vertex_ai_search_datastore instead.

        :param enterprise_datastore: The enterprise_datastore of this GoogleCloudAiplatformV1SchemaPredictParamsGroundingConfigSourceEntry.
        :type enterprise_datastore: str
        """

        self._enterprise_datastore = enterprise_datastore

    @property
    def inline_context(self):
        """Gets the inline_context of this GoogleCloudAiplatformV1SchemaPredictParamsGroundingConfigSourceEntry.

        The grounding text passed inline with the Predict API. It can support up to 1 million bytes.

        :return: The inline_context of this GoogleCloudAiplatformV1SchemaPredictParamsGroundingConfigSourceEntry.
        :rtype: str
        """
        return self._inline_context

    @inline_context.setter
    def inline_context(self, inline_context):
        """Sets the inline_context of this GoogleCloudAiplatformV1SchemaPredictParamsGroundingConfigSourceEntry.

        The grounding text passed inline with the Predict API. It can support up to 1 million bytes.

        :param inline_context: The inline_context of this GoogleCloudAiplatformV1SchemaPredictParamsGroundingConfigSourceEntry.
        :type inline_context: str
        """

        self._inline_context = inline_context

    @property
    def type(self):
        """Gets the type of this GoogleCloudAiplatformV1SchemaPredictParamsGroundingConfigSourceEntry.

        The type of the grounding checking source.

        :return: The type of this GoogleCloudAiplatformV1SchemaPredictParamsGroundingConfigSourceEntry.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this GoogleCloudAiplatformV1SchemaPredictParamsGroundingConfigSourceEntry.

        The type of the grounding checking source.

        :param type: The type of this GoogleCloudAiplatformV1SchemaPredictParamsGroundingConfigSourceEntry.
        :type type: str
        """
        allowed_values = ["UNSPECIFIED", "WEB", "ENTERPRISE", "VERTEX_AI_SEARCH", "INLINE"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def vertex_ai_search_datastore(self):
        """Gets the vertex_ai_search_datastore of this GoogleCloudAiplatformV1SchemaPredictParamsGroundingConfigSourceEntry.

        The uri of the Vertex AI Search data source.

        :return: The vertex_ai_search_datastore of this GoogleCloudAiplatformV1SchemaPredictParamsGroundingConfigSourceEntry.
        :rtype: str
        """
        return self._vertex_ai_search_datastore

    @vertex_ai_search_datastore.setter
    def vertex_ai_search_datastore(self, vertex_ai_search_datastore):
        """Sets the vertex_ai_search_datastore of this GoogleCloudAiplatformV1SchemaPredictParamsGroundingConfigSourceEntry.

        The uri of the Vertex AI Search data source.

        :param vertex_ai_search_datastore: The vertex_ai_search_datastore of this GoogleCloudAiplatformV1SchemaPredictParamsGroundingConfigSourceEntry.
        :type vertex_ai_search_datastore: str
        """

        self._vertex_ai_search_datastore = vertex_ai_search_datastore
