# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_aiplatform_v1_env_var import GoogleCloudAiplatformV1EnvVar
from openapi_server.models.google_cloud_aiplatform_v1_port import GoogleCloudAiplatformV1Port
from openapi_server.models.google_cloud_aiplatform_v1_probe import GoogleCloudAiplatformV1Probe
from openapi_server import util


class GoogleCloudAiplatformV1ModelContainerSpec(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, args: List[str]=None, command: List[str]=None, deployment_timeout: str=None, env: List[GoogleCloudAiplatformV1EnvVar]=None, grpc_ports: List[GoogleCloudAiplatformV1Port]=None, health_probe: GoogleCloudAiplatformV1Probe=None, health_route: str=None, image_uri: str=None, ports: List[GoogleCloudAiplatformV1Port]=None, predict_route: str=None, shared_memory_size_mb: str=None, startup_probe: GoogleCloudAiplatformV1Probe=None):
        """GoogleCloudAiplatformV1ModelContainerSpec - a model defined in OpenAPI

        :param args: The args of this GoogleCloudAiplatformV1ModelContainerSpec.
        :param command: The command of this GoogleCloudAiplatformV1ModelContainerSpec.
        :param deployment_timeout: The deployment_timeout of this GoogleCloudAiplatformV1ModelContainerSpec.
        :param env: The env of this GoogleCloudAiplatformV1ModelContainerSpec.
        :param grpc_ports: The grpc_ports of this GoogleCloudAiplatformV1ModelContainerSpec.
        :param health_probe: The health_probe of this GoogleCloudAiplatformV1ModelContainerSpec.
        :param health_route: The health_route of this GoogleCloudAiplatformV1ModelContainerSpec.
        :param image_uri: The image_uri of this GoogleCloudAiplatformV1ModelContainerSpec.
        :param ports: The ports of this GoogleCloudAiplatformV1ModelContainerSpec.
        :param predict_route: The predict_route of this GoogleCloudAiplatformV1ModelContainerSpec.
        :param shared_memory_size_mb: The shared_memory_size_mb of this GoogleCloudAiplatformV1ModelContainerSpec.
        :param startup_probe: The startup_probe of this GoogleCloudAiplatformV1ModelContainerSpec.
        """
        self.openapi_types = {
            'args': List[str],
            'command': List[str],
            'deployment_timeout': str,
            'env': List[GoogleCloudAiplatformV1EnvVar],
            'grpc_ports': List[GoogleCloudAiplatformV1Port],
            'health_probe': GoogleCloudAiplatformV1Probe,
            'health_route': str,
            'image_uri': str,
            'ports': List[GoogleCloudAiplatformV1Port],
            'predict_route': str,
            'shared_memory_size_mb': str,
            'startup_probe': GoogleCloudAiplatformV1Probe
        }

        self.attribute_map = {
            'args': 'args',
            'command': 'command',
            'deployment_timeout': 'deploymentTimeout',
            'env': 'env',
            'grpc_ports': 'grpcPorts',
            'health_probe': 'healthProbe',
            'health_route': 'healthRoute',
            'image_uri': 'imageUri',
            'ports': 'ports',
            'predict_route': 'predictRoute',
            'shared_memory_size_mb': 'sharedMemorySizeMb',
            'startup_probe': 'startupProbe'
        }

        self._args = args
        self._command = command
        self._deployment_timeout = deployment_timeout
        self._env = env
        self._grpc_ports = grpc_ports
        self._health_probe = health_probe
        self._health_route = health_route
        self._image_uri = image_uri
        self._ports = ports
        self._predict_route = predict_route
        self._shared_memory_size_mb = shared_memory_size_mb
        self._startup_probe = startup_probe

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudAiplatformV1ModelContainerSpec':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudAiplatformV1ModelContainerSpec of this GoogleCloudAiplatformV1ModelContainerSpec.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def args(self):
        """Gets the args of this GoogleCloudAiplatformV1ModelContainerSpec.

        Immutable. Specifies arguments for the command that runs when the container starts. This overrides the container's [`CMD`](https://docs.docker.com/engine/reference/builder/#cmd). Specify this field as an array of executable and arguments, similar to a Docker `CMD`'s \"default parameters\" form. If you don't specify this field but do specify the command field, then the command from the `command` field runs without any additional arguments. See the [Kubernetes documentation about how the `command` and `args` fields interact with a container's `ENTRYPOINT` and `CMD`](https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#notes). If you don't specify this field and don't specify the `command` field, then the container's [`ENTRYPOINT`](https://docs.docker.com/engine/reference/builder/#cmd) and `CMD` determine what runs based on their default behavior. See the Docker documentation about [how `CMD` and `ENTRYPOINT` interact](https://docs.docker.com/engine/reference/builder/#understand-how-cmd-and-entrypoint-interact). In this field, you can reference [environment variables set by Vertex AI](https://cloud.google.com/vertex-ai/docs/predictions/custom-container-requirements#aip-variables) and environment variables set in the env field. You cannot reference environment variables set in the Docker image. In order for environment variables to be expanded, reference them by using the following syntax: $( VARIABLE_NAME) Note that this differs from Bash variable expansion, which does not use parentheses. If a variable cannot be resolved, the reference in the input string is used unchanged. To avoid variable expansion, you can escape this syntax with `$$`; for example: $$(VARIABLE_NAME) This field corresponds to the `args` field of the Kubernetes Containers [v1 core API](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#container-v1-core).

        :return: The args of this GoogleCloudAiplatformV1ModelContainerSpec.
        :rtype: List[str]
        """
        return self._args

    @args.setter
    def args(self, args):
        """Sets the args of this GoogleCloudAiplatformV1ModelContainerSpec.

        Immutable. Specifies arguments for the command that runs when the container starts. This overrides the container's [`CMD`](https://docs.docker.com/engine/reference/builder/#cmd). Specify this field as an array of executable and arguments, similar to a Docker `CMD`'s \"default parameters\" form. If you don't specify this field but do specify the command field, then the command from the `command` field runs without any additional arguments. See the [Kubernetes documentation about how the `command` and `args` fields interact with a container's `ENTRYPOINT` and `CMD`](https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#notes). If you don't specify this field and don't specify the `command` field, then the container's [`ENTRYPOINT`](https://docs.docker.com/engine/reference/builder/#cmd) and `CMD` determine what runs based on their default behavior. See the Docker documentation about [how `CMD` and `ENTRYPOINT` interact](https://docs.docker.com/engine/reference/builder/#understand-how-cmd-and-entrypoint-interact). In this field, you can reference [environment variables set by Vertex AI](https://cloud.google.com/vertex-ai/docs/predictions/custom-container-requirements#aip-variables) and environment variables set in the env field. You cannot reference environment variables set in the Docker image. In order for environment variables to be expanded, reference them by using the following syntax: $( VARIABLE_NAME) Note that this differs from Bash variable expansion, which does not use parentheses. If a variable cannot be resolved, the reference in the input string is used unchanged. To avoid variable expansion, you can escape this syntax with `$$`; for example: $$(VARIABLE_NAME) This field corresponds to the `args` field of the Kubernetes Containers [v1 core API](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#container-v1-core).

        :param args: The args of this GoogleCloudAiplatformV1ModelContainerSpec.
        :type args: List[str]
        """

        self._args = args

    @property
    def command(self):
        """Gets the command of this GoogleCloudAiplatformV1ModelContainerSpec.

        Immutable. Specifies the command that runs when the container starts. This overrides the container's [ENTRYPOINT](https://docs.docker.com/engine/reference/builder/#entrypoint). Specify this field as an array of executable and arguments, similar to a Docker `ENTRYPOINT`'s \"exec\" form, not its \"shell\" form. If you do not specify this field, then the container's `ENTRYPOINT` runs, in conjunction with the args field or the container's [`CMD`](https://docs.docker.com/engine/reference/builder/#cmd), if either exists. If this field is not specified and the container does not have an `ENTRYPOINT`, then refer to the Docker documentation about [how `CMD` and `ENTRYPOINT` interact](https://docs.docker.com/engine/reference/builder/#understand-how-cmd-and-entrypoint-interact). If you specify this field, then you can also specify the `args` field to provide additional arguments for this command. However, if you specify this field, then the container's `CMD` is ignored. See the [Kubernetes documentation about how the `command` and `args` fields interact with a container's `ENTRYPOINT` and `CMD`](https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#notes). In this field, you can reference [environment variables set by Vertex AI](https://cloud.google.com/vertex-ai/docs/predictions/custom-container-requirements#aip-variables) and environment variables set in the env field. You cannot reference environment variables set in the Docker image. In order for environment variables to be expanded, reference them by using the following syntax: $( VARIABLE_NAME) Note that this differs from Bash variable expansion, which does not use parentheses. If a variable cannot be resolved, the reference in the input string is used unchanged. To avoid variable expansion, you can escape this syntax with `$$`; for example: $$(VARIABLE_NAME) This field corresponds to the `command` field of the Kubernetes Containers [v1 core API](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#container-v1-core).

        :return: The command of this GoogleCloudAiplatformV1ModelContainerSpec.
        :rtype: List[str]
        """
        return self._command

    @command.setter
    def command(self, command):
        """Sets the command of this GoogleCloudAiplatformV1ModelContainerSpec.

        Immutable. Specifies the command that runs when the container starts. This overrides the container's [ENTRYPOINT](https://docs.docker.com/engine/reference/builder/#entrypoint). Specify this field as an array of executable and arguments, similar to a Docker `ENTRYPOINT`'s \"exec\" form, not its \"shell\" form. If you do not specify this field, then the container's `ENTRYPOINT` runs, in conjunction with the args field or the container's [`CMD`](https://docs.docker.com/engine/reference/builder/#cmd), if either exists. If this field is not specified and the container does not have an `ENTRYPOINT`, then refer to the Docker documentation about [how `CMD` and `ENTRYPOINT` interact](https://docs.docker.com/engine/reference/builder/#understand-how-cmd-and-entrypoint-interact). If you specify this field, then you can also specify the `args` field to provide additional arguments for this command. However, if you specify this field, then the container's `CMD` is ignored. See the [Kubernetes documentation about how the `command` and `args` fields interact with a container's `ENTRYPOINT` and `CMD`](https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#notes). In this field, you can reference [environment variables set by Vertex AI](https://cloud.google.com/vertex-ai/docs/predictions/custom-container-requirements#aip-variables) and environment variables set in the env field. You cannot reference environment variables set in the Docker image. In order for environment variables to be expanded, reference them by using the following syntax: $( VARIABLE_NAME) Note that this differs from Bash variable expansion, which does not use parentheses. If a variable cannot be resolved, the reference in the input string is used unchanged. To avoid variable expansion, you can escape this syntax with `$$`; for example: $$(VARIABLE_NAME) This field corresponds to the `command` field of the Kubernetes Containers [v1 core API](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#container-v1-core).

        :param command: The command of this GoogleCloudAiplatformV1ModelContainerSpec.
        :type command: List[str]
        """

        self._command = command

    @property
    def deployment_timeout(self):
        """Gets the deployment_timeout of this GoogleCloudAiplatformV1ModelContainerSpec.

        Immutable. Deployment timeout. Limit for deployment timeout is 2 hours.

        :return: The deployment_timeout of this GoogleCloudAiplatformV1ModelContainerSpec.
        :rtype: str
        """
        return self._deployment_timeout

    @deployment_timeout.setter
    def deployment_timeout(self, deployment_timeout):
        """Sets the deployment_timeout of this GoogleCloudAiplatformV1ModelContainerSpec.

        Immutable. Deployment timeout. Limit for deployment timeout is 2 hours.

        :param deployment_timeout: The deployment_timeout of this GoogleCloudAiplatformV1ModelContainerSpec.
        :type deployment_timeout: str
        """

        self._deployment_timeout = deployment_timeout

    @property
    def env(self):
        """Gets the env of this GoogleCloudAiplatformV1ModelContainerSpec.

        Immutable. List of environment variables to set in the container. After the container starts running, code running in the container can read these environment variables. Additionally, the command and args fields can reference these variables. Later entries in this list can also reference earlier entries. For example, the following example sets the variable `VAR_2` to have the value `foo bar`: ```json [ { \"name\": \"VAR_1\", \"value\": \"foo\" }, { \"name\": \"VAR_2\", \"value\": \"$(VAR_1) bar\" } ] ``` If you switch the order of the variables in the example, then the expansion does not occur. This field corresponds to the `env` field of the Kubernetes Containers [v1 core API](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#container-v1-core).

        :return: The env of this GoogleCloudAiplatformV1ModelContainerSpec.
        :rtype: List[GoogleCloudAiplatformV1EnvVar]
        """
        return self._env

    @env.setter
    def env(self, env):
        """Sets the env of this GoogleCloudAiplatformV1ModelContainerSpec.

        Immutable. List of environment variables to set in the container. After the container starts running, code running in the container can read these environment variables. Additionally, the command and args fields can reference these variables. Later entries in this list can also reference earlier entries. For example, the following example sets the variable `VAR_2` to have the value `foo bar`: ```json [ { \"name\": \"VAR_1\", \"value\": \"foo\" }, { \"name\": \"VAR_2\", \"value\": \"$(VAR_1) bar\" } ] ``` If you switch the order of the variables in the example, then the expansion does not occur. This field corresponds to the `env` field of the Kubernetes Containers [v1 core API](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#container-v1-core).

        :param env: The env of this GoogleCloudAiplatformV1ModelContainerSpec.
        :type env: List[GoogleCloudAiplatformV1EnvVar]
        """

        self._env = env

    @property
    def grpc_ports(self):
        """Gets the grpc_ports of this GoogleCloudAiplatformV1ModelContainerSpec.

        Immutable. List of ports to expose from the container. Vertex AI sends gRPC prediction requests that it receives to the first port on this list. Vertex AI also sends liveness and health checks to this port. If you do not specify this field, gRPC requests to the container will be disabled. Vertex AI does not use ports other than the first one listed. This field corresponds to the `ports` field of the Kubernetes Containers v1 core API.

        :return: The grpc_ports of this GoogleCloudAiplatformV1ModelContainerSpec.
        :rtype: List[GoogleCloudAiplatformV1Port]
        """
        return self._grpc_ports

    @grpc_ports.setter
    def grpc_ports(self, grpc_ports):
        """Sets the grpc_ports of this GoogleCloudAiplatformV1ModelContainerSpec.

        Immutable. List of ports to expose from the container. Vertex AI sends gRPC prediction requests that it receives to the first port on this list. Vertex AI also sends liveness and health checks to this port. If you do not specify this field, gRPC requests to the container will be disabled. Vertex AI does not use ports other than the first one listed. This field corresponds to the `ports` field of the Kubernetes Containers v1 core API.

        :param grpc_ports: The grpc_ports of this GoogleCloudAiplatformV1ModelContainerSpec.
        :type grpc_ports: List[GoogleCloudAiplatformV1Port]
        """

        self._grpc_ports = grpc_ports

    @property
    def health_probe(self):
        """Gets the health_probe of this GoogleCloudAiplatformV1ModelContainerSpec.


        :return: The health_probe of this GoogleCloudAiplatformV1ModelContainerSpec.
        :rtype: GoogleCloudAiplatformV1Probe
        """
        return self._health_probe

    @health_probe.setter
    def health_probe(self, health_probe):
        """Sets the health_probe of this GoogleCloudAiplatformV1ModelContainerSpec.


        :param health_probe: The health_probe of this GoogleCloudAiplatformV1ModelContainerSpec.
        :type health_probe: GoogleCloudAiplatformV1Probe
        """

        self._health_probe = health_probe

    @property
    def health_route(self):
        """Gets the health_route of this GoogleCloudAiplatformV1ModelContainerSpec.

        Immutable. HTTP path on the container to send health checks to. Vertex AI intermittently sends GET requests to this path on the container's IP address and port to check that the container is healthy. Read more about [health checks](https://cloud.google.com/vertex-ai/docs/predictions/custom-container-requirements#health). For example, if you set this field to `/bar`, then Vertex AI intermittently sends a GET request to the `/bar` path on the port of your container specified by the first value of this `ModelContainerSpec`'s ports field. If you don't specify this field, it defaults to the following value when you deploy this Model to an Endpoint: /v1/endpoints/ENDPOINT/deployedModels/ DEPLOYED_MODEL:predict The placeholders in this value are replaced as follows: * ENDPOINT: The last segment (following `endpoints/`)of the Endpoint.name][] field of the Endpoint where this Model has been deployed. (Vertex AI makes this value available to your container code as the [`AIP_ENDPOINT_ID` environment variable](https://cloud.google.com/vertex-ai/docs/predictions/custom-container-requirements#aip-variables).) * DEPLOYED_MODEL: DeployedModel.id of the `DeployedModel`. (Vertex AI makes this value available to your container code as the [`AIP_DEPLOYED_MODEL_ID` environment variable](https://cloud.google.com/vertex-ai/docs/predictions/custom-container-requirements#aip-variables).)

        :return: The health_route of this GoogleCloudAiplatformV1ModelContainerSpec.
        :rtype: str
        """
        return self._health_route

    @health_route.setter
    def health_route(self, health_route):
        """Sets the health_route of this GoogleCloudAiplatformV1ModelContainerSpec.

        Immutable. HTTP path on the container to send health checks to. Vertex AI intermittently sends GET requests to this path on the container's IP address and port to check that the container is healthy. Read more about [health checks](https://cloud.google.com/vertex-ai/docs/predictions/custom-container-requirements#health). For example, if you set this field to `/bar`, then Vertex AI intermittently sends a GET request to the `/bar` path on the port of your container specified by the first value of this `ModelContainerSpec`'s ports field. If you don't specify this field, it defaults to the following value when you deploy this Model to an Endpoint: /v1/endpoints/ENDPOINT/deployedModels/ DEPLOYED_MODEL:predict The placeholders in this value are replaced as follows: * ENDPOINT: The last segment (following `endpoints/`)of the Endpoint.name][] field of the Endpoint where this Model has been deployed. (Vertex AI makes this value available to your container code as the [`AIP_ENDPOINT_ID` environment variable](https://cloud.google.com/vertex-ai/docs/predictions/custom-container-requirements#aip-variables).) * DEPLOYED_MODEL: DeployedModel.id of the `DeployedModel`. (Vertex AI makes this value available to your container code as the [`AIP_DEPLOYED_MODEL_ID` environment variable](https://cloud.google.com/vertex-ai/docs/predictions/custom-container-requirements#aip-variables).)

        :param health_route: The health_route of this GoogleCloudAiplatformV1ModelContainerSpec.
        :type health_route: str
        """

        self._health_route = health_route

    @property
    def image_uri(self):
        """Gets the image_uri of this GoogleCloudAiplatformV1ModelContainerSpec.

        Required. Immutable. URI of the Docker image to be used as the custom container for serving predictions. This URI must identify an image in Artifact Registry or Container Registry. Learn more about the [container publishing requirements](https://cloud.google.com/vertex-ai/docs/predictions/custom-container-requirements#publishing), including permissions requirements for the Vertex AI Service Agent. The container image is ingested upon ModelService.UploadModel, stored internally, and this original path is afterwards not used. To learn about the requirements for the Docker image itself, see [Custom container requirements](https://cloud.google.com/vertex-ai/docs/predictions/custom-container-requirements#). You can use the URI to one of Vertex AI's [pre-built container images for prediction](https://cloud.google.com/vertex-ai/docs/predictions/pre-built-containers) in this field.

        :return: The image_uri of this GoogleCloudAiplatformV1ModelContainerSpec.
        :rtype: str
        """
        return self._image_uri

    @image_uri.setter
    def image_uri(self, image_uri):
        """Sets the image_uri of this GoogleCloudAiplatformV1ModelContainerSpec.

        Required. Immutable. URI of the Docker image to be used as the custom container for serving predictions. This URI must identify an image in Artifact Registry or Container Registry. Learn more about the [container publishing requirements](https://cloud.google.com/vertex-ai/docs/predictions/custom-container-requirements#publishing), including permissions requirements for the Vertex AI Service Agent. The container image is ingested upon ModelService.UploadModel, stored internally, and this original path is afterwards not used. To learn about the requirements for the Docker image itself, see [Custom container requirements](https://cloud.google.com/vertex-ai/docs/predictions/custom-container-requirements#). You can use the URI to one of Vertex AI's [pre-built container images for prediction](https://cloud.google.com/vertex-ai/docs/predictions/pre-built-containers) in this field.

        :param image_uri: The image_uri of this GoogleCloudAiplatformV1ModelContainerSpec.
        :type image_uri: str
        """

        self._image_uri = image_uri

    @property
    def ports(self):
        """Gets the ports of this GoogleCloudAiplatformV1ModelContainerSpec.

        Immutable. List of ports to expose from the container. Vertex AI sends any prediction requests that it receives to the first port on this list. Vertex AI also sends [liveness and health checks](https://cloud.google.com/vertex-ai/docs/predictions/custom-container-requirements#liveness) to this port. If you do not specify this field, it defaults to following value: ```json [ { \"containerPort\": 8080 } ] ``` Vertex AI does not use ports other than the first one listed. This field corresponds to the `ports` field of the Kubernetes Containers [v1 core API](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#container-v1-core).

        :return: The ports of this GoogleCloudAiplatformV1ModelContainerSpec.
        :rtype: List[GoogleCloudAiplatformV1Port]
        """
        return self._ports

    @ports.setter
    def ports(self, ports):
        """Sets the ports of this GoogleCloudAiplatformV1ModelContainerSpec.

        Immutable. List of ports to expose from the container. Vertex AI sends any prediction requests that it receives to the first port on this list. Vertex AI also sends [liveness and health checks](https://cloud.google.com/vertex-ai/docs/predictions/custom-container-requirements#liveness) to this port. If you do not specify this field, it defaults to following value: ```json [ { \"containerPort\": 8080 } ] ``` Vertex AI does not use ports other than the first one listed. This field corresponds to the `ports` field of the Kubernetes Containers [v1 core API](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#container-v1-core).

        :param ports: The ports of this GoogleCloudAiplatformV1ModelContainerSpec.
        :type ports: List[GoogleCloudAiplatformV1Port]
        """

        self._ports = ports

    @property
    def predict_route(self):
        """Gets the predict_route of this GoogleCloudAiplatformV1ModelContainerSpec.

        Immutable. HTTP path on the container to send prediction requests to. Vertex AI forwards requests sent using projects.locations.endpoints.predict to this path on the container's IP address and port. Vertex AI then returns the container's response in the API response. For example, if you set this field to `/foo`, then when Vertex AI receives a prediction request, it forwards the request body in a POST request to the `/foo` path on the port of your container specified by the first value of this `ModelContainerSpec`'s ports field. If you don't specify this field, it defaults to the following value when you deploy this Model to an Endpoint: /v1/endpoints/ENDPOINT/deployedModels/DEPLOYED_MODEL:predict The placeholders in this value are replaced as follows: * ENDPOINT: The last segment (following `endpoints/`)of the Endpoint.name][] field of the Endpoint where this Model has been deployed. (Vertex AI makes this value available to your container code as the [`AIP_ENDPOINT_ID` environment variable](https://cloud.google.com/vertex-ai/docs/predictions/custom-container-requirements#aip-variables).) * DEPLOYED_MODEL: DeployedModel.id of the `DeployedModel`. (Vertex AI makes this value available to your container code as the [`AIP_DEPLOYED_MODEL_ID` environment variable](https://cloud.google.com/vertex-ai/docs/predictions/custom-container-requirements#aip-variables).)

        :return: The predict_route of this GoogleCloudAiplatformV1ModelContainerSpec.
        :rtype: str
        """
        return self._predict_route

    @predict_route.setter
    def predict_route(self, predict_route):
        """Sets the predict_route of this GoogleCloudAiplatformV1ModelContainerSpec.

        Immutable. HTTP path on the container to send prediction requests to. Vertex AI forwards requests sent using projects.locations.endpoints.predict to this path on the container's IP address and port. Vertex AI then returns the container's response in the API response. For example, if you set this field to `/foo`, then when Vertex AI receives a prediction request, it forwards the request body in a POST request to the `/foo` path on the port of your container specified by the first value of this `ModelContainerSpec`'s ports field. If you don't specify this field, it defaults to the following value when you deploy this Model to an Endpoint: /v1/endpoints/ENDPOINT/deployedModels/DEPLOYED_MODEL:predict The placeholders in this value are replaced as follows: * ENDPOINT: The last segment (following `endpoints/`)of the Endpoint.name][] field of the Endpoint where this Model has been deployed. (Vertex AI makes this value available to your container code as the [`AIP_ENDPOINT_ID` environment variable](https://cloud.google.com/vertex-ai/docs/predictions/custom-container-requirements#aip-variables).) * DEPLOYED_MODEL: DeployedModel.id of the `DeployedModel`. (Vertex AI makes this value available to your container code as the [`AIP_DEPLOYED_MODEL_ID` environment variable](https://cloud.google.com/vertex-ai/docs/predictions/custom-container-requirements#aip-variables).)

        :param predict_route: The predict_route of this GoogleCloudAiplatformV1ModelContainerSpec.
        :type predict_route: str
        """

        self._predict_route = predict_route

    @property
    def shared_memory_size_mb(self):
        """Gets the shared_memory_size_mb of this GoogleCloudAiplatformV1ModelContainerSpec.

        Immutable. The amount of the VM memory to reserve as the shared memory for the model in megabytes.

        :return: The shared_memory_size_mb of this GoogleCloudAiplatformV1ModelContainerSpec.
        :rtype: str
        """
        return self._shared_memory_size_mb

    @shared_memory_size_mb.setter
    def shared_memory_size_mb(self, shared_memory_size_mb):
        """Sets the shared_memory_size_mb of this GoogleCloudAiplatformV1ModelContainerSpec.

        Immutable. The amount of the VM memory to reserve as the shared memory for the model in megabytes.

        :param shared_memory_size_mb: The shared_memory_size_mb of this GoogleCloudAiplatformV1ModelContainerSpec.
        :type shared_memory_size_mb: str
        """

        self._shared_memory_size_mb = shared_memory_size_mb

    @property
    def startup_probe(self):
        """Gets the startup_probe of this GoogleCloudAiplatformV1ModelContainerSpec.


        :return: The startup_probe of this GoogleCloudAiplatformV1ModelContainerSpec.
        :rtype: GoogleCloudAiplatformV1Probe
        """
        return self._startup_probe

    @startup_probe.setter
    def startup_probe(self, startup_probe):
        """Sets the startup_probe of this GoogleCloudAiplatformV1ModelContainerSpec.


        :param startup_probe: The startup_probe of this GoogleCloudAiplatformV1ModelContainerSpec.
        :type startup_probe: GoogleCloudAiplatformV1Probe
        """

        self._startup_probe = startup_probe
