# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_aiplatform_v1_schema_trainingjob_definition_auto_ml_tables_inputs_transformation import GoogleCloudAiplatformV1SchemaTrainingjobDefinitionAutoMlTablesInputsTransformation
from openapi_server.models.google_cloud_aiplatform_v1_schema_trainingjob_definition_export_evaluated_data_items_config import GoogleCloudAiplatformV1SchemaTrainingjobDefinitionExportEvaluatedDataItemsConfig
from openapi_server import util


class GoogleCloudAiplatformV1SchemaTrainingjobDefinitionAutoMlTablesInputs(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, additional_experiments: List[str]=None, disable_early_stopping: bool=None, export_evaluated_data_items_config: GoogleCloudAiplatformV1SchemaTrainingjobDefinitionExportEvaluatedDataItemsConfig=None, optimization_objective: str=None, optimization_objective_precision_value: float=None, optimization_objective_recall_value: float=None, prediction_type: str=None, target_column: str=None, train_budget_milli_node_hours: str=None, transformations: List[GoogleCloudAiplatformV1SchemaTrainingjobDefinitionAutoMlTablesInputsTransformation]=None, weight_column_name: str=None):
        """GoogleCloudAiplatformV1SchemaTrainingjobDefinitionAutoMlTablesInputs - a model defined in OpenAPI

        :param additional_experiments: The additional_experiments of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionAutoMlTablesInputs.
        :param disable_early_stopping: The disable_early_stopping of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionAutoMlTablesInputs.
        :param export_evaluated_data_items_config: The export_evaluated_data_items_config of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionAutoMlTablesInputs.
        :param optimization_objective: The optimization_objective of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionAutoMlTablesInputs.
        :param optimization_objective_precision_value: The optimization_objective_precision_value of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionAutoMlTablesInputs.
        :param optimization_objective_recall_value: The optimization_objective_recall_value of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionAutoMlTablesInputs.
        :param prediction_type: The prediction_type of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionAutoMlTablesInputs.
        :param target_column: The target_column of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionAutoMlTablesInputs.
        :param train_budget_milli_node_hours: The train_budget_milli_node_hours of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionAutoMlTablesInputs.
        :param transformations: The transformations of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionAutoMlTablesInputs.
        :param weight_column_name: The weight_column_name of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionAutoMlTablesInputs.
        """
        self.openapi_types = {
            'additional_experiments': List[str],
            'disable_early_stopping': bool,
            'export_evaluated_data_items_config': GoogleCloudAiplatformV1SchemaTrainingjobDefinitionExportEvaluatedDataItemsConfig,
            'optimization_objective': str,
            'optimization_objective_precision_value': float,
            'optimization_objective_recall_value': float,
            'prediction_type': str,
            'target_column': str,
            'train_budget_milli_node_hours': str,
            'transformations': List[GoogleCloudAiplatformV1SchemaTrainingjobDefinitionAutoMlTablesInputsTransformation],
            'weight_column_name': str
        }

        self.attribute_map = {
            'additional_experiments': 'additionalExperiments',
            'disable_early_stopping': 'disableEarlyStopping',
            'export_evaluated_data_items_config': 'exportEvaluatedDataItemsConfig',
            'optimization_objective': 'optimizationObjective',
            'optimization_objective_precision_value': 'optimizationObjectivePrecisionValue',
            'optimization_objective_recall_value': 'optimizationObjectiveRecallValue',
            'prediction_type': 'predictionType',
            'target_column': 'targetColumn',
            'train_budget_milli_node_hours': 'trainBudgetMilliNodeHours',
            'transformations': 'transformations',
            'weight_column_name': 'weightColumnName'
        }

        self._additional_experiments = additional_experiments
        self._disable_early_stopping = disable_early_stopping
        self._export_evaluated_data_items_config = export_evaluated_data_items_config
        self._optimization_objective = optimization_objective
        self._optimization_objective_precision_value = optimization_objective_precision_value
        self._optimization_objective_recall_value = optimization_objective_recall_value
        self._prediction_type = prediction_type
        self._target_column = target_column
        self._train_budget_milli_node_hours = train_budget_milli_node_hours
        self._transformations = transformations
        self._weight_column_name = weight_column_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudAiplatformV1SchemaTrainingjobDefinitionAutoMlTablesInputs':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudAiplatformV1SchemaTrainingjobDefinitionAutoMlTablesInputs of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionAutoMlTablesInputs.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def additional_experiments(self):
        """Gets the additional_experiments of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionAutoMlTablesInputs.

        Additional experiment flags for the Tables training pipeline.

        :return: The additional_experiments of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionAutoMlTablesInputs.
        :rtype: List[str]
        """
        return self._additional_experiments

    @additional_experiments.setter
    def additional_experiments(self, additional_experiments):
        """Sets the additional_experiments of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionAutoMlTablesInputs.

        Additional experiment flags for the Tables training pipeline.

        :param additional_experiments: The additional_experiments of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionAutoMlTablesInputs.
        :type additional_experiments: List[str]
        """

        self._additional_experiments = additional_experiments

    @property
    def disable_early_stopping(self):
        """Gets the disable_early_stopping of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionAutoMlTablesInputs.

        Use the entire training budget. This disables the early stopping feature. By default, the early stopping feature is enabled, which means that AutoML Tables might stop training before the entire training budget has been used.

        :return: The disable_early_stopping of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionAutoMlTablesInputs.
        :rtype: bool
        """
        return self._disable_early_stopping

    @disable_early_stopping.setter
    def disable_early_stopping(self, disable_early_stopping):
        """Sets the disable_early_stopping of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionAutoMlTablesInputs.

        Use the entire training budget. This disables the early stopping feature. By default, the early stopping feature is enabled, which means that AutoML Tables might stop training before the entire training budget has been used.

        :param disable_early_stopping: The disable_early_stopping of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionAutoMlTablesInputs.
        :type disable_early_stopping: bool
        """

        self._disable_early_stopping = disable_early_stopping

    @property
    def export_evaluated_data_items_config(self):
        """Gets the export_evaluated_data_items_config of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionAutoMlTablesInputs.


        :return: The export_evaluated_data_items_config of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionAutoMlTablesInputs.
        :rtype: GoogleCloudAiplatformV1SchemaTrainingjobDefinitionExportEvaluatedDataItemsConfig
        """
        return self._export_evaluated_data_items_config

    @export_evaluated_data_items_config.setter
    def export_evaluated_data_items_config(self, export_evaluated_data_items_config):
        """Sets the export_evaluated_data_items_config of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionAutoMlTablesInputs.


        :param export_evaluated_data_items_config: The export_evaluated_data_items_config of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionAutoMlTablesInputs.
        :type export_evaluated_data_items_config: GoogleCloudAiplatformV1SchemaTrainingjobDefinitionExportEvaluatedDataItemsConfig
        """

        self._export_evaluated_data_items_config = export_evaluated_data_items_config

    @property
    def optimization_objective(self):
        """Gets the optimization_objective of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionAutoMlTablesInputs.

        Objective function the model is optimizing towards. The training process creates a model that maximizes/minimizes the value of the objective function over the validation set. The supported optimization objectives depend on the prediction type. If the field is not set, a default objective function is used. classification (binary): \"maximize-au-roc\" (default) - Maximize the area under the receiver operating characteristic (ROC) curve. \"minimize-log-loss\" - Minimize log loss. \"maximize-au-prc\" - Maximize the area under the precision-recall curve. \"maximize-precision-at-recall\" - Maximize precision for a specified recall value. \"maximize-recall-at-precision\" - Maximize recall for a specified precision value. classification (multi-class): \"minimize-log-loss\" (default) - Minimize log loss. regression: \"minimize-rmse\" (default) - Minimize root-mean-squared error (RMSE). \"minimize-mae\" - Minimize mean-absolute error (MAE). \"minimize-rmsle\" - Minimize root-mean-squared log error (RMSLE).

        :return: The optimization_objective of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionAutoMlTablesInputs.
        :rtype: str
        """
        return self._optimization_objective

    @optimization_objective.setter
    def optimization_objective(self, optimization_objective):
        """Sets the optimization_objective of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionAutoMlTablesInputs.

        Objective function the model is optimizing towards. The training process creates a model that maximizes/minimizes the value of the objective function over the validation set. The supported optimization objectives depend on the prediction type. If the field is not set, a default objective function is used. classification (binary): \"maximize-au-roc\" (default) - Maximize the area under the receiver operating characteristic (ROC) curve. \"minimize-log-loss\" - Minimize log loss. \"maximize-au-prc\" - Maximize the area under the precision-recall curve. \"maximize-precision-at-recall\" - Maximize precision for a specified recall value. \"maximize-recall-at-precision\" - Maximize recall for a specified precision value. classification (multi-class): \"minimize-log-loss\" (default) - Minimize log loss. regression: \"minimize-rmse\" (default) - Minimize root-mean-squared error (RMSE). \"minimize-mae\" - Minimize mean-absolute error (MAE). \"minimize-rmsle\" - Minimize root-mean-squared log error (RMSLE).

        :param optimization_objective: The optimization_objective of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionAutoMlTablesInputs.
        :type optimization_objective: str
        """

        self._optimization_objective = optimization_objective

    @property
    def optimization_objective_precision_value(self):
        """Gets the optimization_objective_precision_value of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionAutoMlTablesInputs.

        Required when optimization_objective is \"maximize-recall-at-precision\". Must be between 0 and 1, inclusive.

        :return: The optimization_objective_precision_value of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionAutoMlTablesInputs.
        :rtype: float
        """
        return self._optimization_objective_precision_value

    @optimization_objective_precision_value.setter
    def optimization_objective_precision_value(self, optimization_objective_precision_value):
        """Sets the optimization_objective_precision_value of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionAutoMlTablesInputs.

        Required when optimization_objective is \"maximize-recall-at-precision\". Must be between 0 and 1, inclusive.

        :param optimization_objective_precision_value: The optimization_objective_precision_value of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionAutoMlTablesInputs.
        :type optimization_objective_precision_value: float
        """

        self._optimization_objective_precision_value = optimization_objective_precision_value

    @property
    def optimization_objective_recall_value(self):
        """Gets the optimization_objective_recall_value of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionAutoMlTablesInputs.

        Required when optimization_objective is \"maximize-precision-at-recall\". Must be between 0 and 1, inclusive.

        :return: The optimization_objective_recall_value of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionAutoMlTablesInputs.
        :rtype: float
        """
        return self._optimization_objective_recall_value

    @optimization_objective_recall_value.setter
    def optimization_objective_recall_value(self, optimization_objective_recall_value):
        """Sets the optimization_objective_recall_value of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionAutoMlTablesInputs.

        Required when optimization_objective is \"maximize-precision-at-recall\". Must be between 0 and 1, inclusive.

        :param optimization_objective_recall_value: The optimization_objective_recall_value of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionAutoMlTablesInputs.
        :type optimization_objective_recall_value: float
        """

        self._optimization_objective_recall_value = optimization_objective_recall_value

    @property
    def prediction_type(self):
        """Gets the prediction_type of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionAutoMlTablesInputs.

        The type of prediction the Model is to produce. \"classification\" - Predict one out of multiple target values is picked for each row. \"regression\" - Predict a value based on its relation to other values. This type is available only to columns that contain semantically numeric values, i.e. integers or floating point number, even if stored as e.g. strings.

        :return: The prediction_type of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionAutoMlTablesInputs.
        :rtype: str
        """
        return self._prediction_type

    @prediction_type.setter
    def prediction_type(self, prediction_type):
        """Sets the prediction_type of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionAutoMlTablesInputs.

        The type of prediction the Model is to produce. \"classification\" - Predict one out of multiple target values is picked for each row. \"regression\" - Predict a value based on its relation to other values. This type is available only to columns that contain semantically numeric values, i.e. integers or floating point number, even if stored as e.g. strings.

        :param prediction_type: The prediction_type of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionAutoMlTablesInputs.
        :type prediction_type: str
        """

        self._prediction_type = prediction_type

    @property
    def target_column(self):
        """Gets the target_column of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionAutoMlTablesInputs.

        The column name of the target column that the model is to predict.

        :return: The target_column of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionAutoMlTablesInputs.
        :rtype: str
        """
        return self._target_column

    @target_column.setter
    def target_column(self, target_column):
        """Sets the target_column of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionAutoMlTablesInputs.

        The column name of the target column that the model is to predict.

        :param target_column: The target_column of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionAutoMlTablesInputs.
        :type target_column: str
        """

        self._target_column = target_column

    @property
    def train_budget_milli_node_hours(self):
        """Gets the train_budget_milli_node_hours of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionAutoMlTablesInputs.

        Required. The train budget of creating this model, expressed in milli node hours i.e. 1,000 value in this field means 1 node hour. The training cost of the model will not exceed this budget. The final cost will be attempted to be close to the budget, though may end up being (even) noticeably smaller - at the backend's discretion. This especially may happen when further model training ceases to provide any improvements. If the budget is set to a value known to be insufficient to train a model for the given dataset, the training won't be attempted and will error. The train budget must be between 1,000 and 72,000 milli node hours, inclusive.

        :return: The train_budget_milli_node_hours of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionAutoMlTablesInputs.
        :rtype: str
        """
        return self._train_budget_milli_node_hours

    @train_budget_milli_node_hours.setter
    def train_budget_milli_node_hours(self, train_budget_milli_node_hours):
        """Sets the train_budget_milli_node_hours of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionAutoMlTablesInputs.

        Required. The train budget of creating this model, expressed in milli node hours i.e. 1,000 value in this field means 1 node hour. The training cost of the model will not exceed this budget. The final cost will be attempted to be close to the budget, though may end up being (even) noticeably smaller - at the backend's discretion. This especially may happen when further model training ceases to provide any improvements. If the budget is set to a value known to be insufficient to train a model for the given dataset, the training won't be attempted and will error. The train budget must be between 1,000 and 72,000 milli node hours, inclusive.

        :param train_budget_milli_node_hours: The train_budget_milli_node_hours of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionAutoMlTablesInputs.
        :type train_budget_milli_node_hours: str
        """

        self._train_budget_milli_node_hours = train_budget_milli_node_hours

    @property
    def transformations(self):
        """Gets the transformations of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionAutoMlTablesInputs.

        Each transformation will apply transform function to given input column. And the result will be used for training. When creating transformation for BigQuery Struct column, the column should be flattened using \".\" as the delimiter.

        :return: The transformations of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionAutoMlTablesInputs.
        :rtype: List[GoogleCloudAiplatformV1SchemaTrainingjobDefinitionAutoMlTablesInputsTransformation]
        """
        return self._transformations

    @transformations.setter
    def transformations(self, transformations):
        """Sets the transformations of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionAutoMlTablesInputs.

        Each transformation will apply transform function to given input column. And the result will be used for training. When creating transformation for BigQuery Struct column, the column should be flattened using \".\" as the delimiter.

        :param transformations: The transformations of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionAutoMlTablesInputs.
        :type transformations: List[GoogleCloudAiplatformV1SchemaTrainingjobDefinitionAutoMlTablesInputsTransformation]
        """

        self._transformations = transformations

    @property
    def weight_column_name(self):
        """Gets the weight_column_name of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionAutoMlTablesInputs.

        Column name that should be used as the weight column. Higher values in this column give more importance to the row during model training. The column must have numeric values between 0 and 10000 inclusively; 0 means the row is ignored for training. If weight column field is not set, then all rows are assumed to have equal weight of 1.

        :return: The weight_column_name of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionAutoMlTablesInputs.
        :rtype: str
        """
        return self._weight_column_name

    @weight_column_name.setter
    def weight_column_name(self, weight_column_name):
        """Sets the weight_column_name of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionAutoMlTablesInputs.

        Column name that should be used as the weight column. Higher values in this column give more importance to the row during model training. The column must have numeric values between 0 and 10000 inclusively; 0 means the row is ignored for training. If weight column field is not set, then all rows are assumed to have equal weight of 1.

        :param weight_column_name: The weight_column_name of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionAutoMlTablesInputs.
        :type weight_column_name: str
        """

        self._weight_column_name = weight_column_name
