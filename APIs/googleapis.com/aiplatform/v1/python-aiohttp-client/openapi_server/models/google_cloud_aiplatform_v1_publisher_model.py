# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_aiplatform_v1_predict_schemata import GoogleCloudAiplatformV1PredictSchemata
from openapi_server.models.google_cloud_aiplatform_v1_publisher_model_call_to_action import GoogleCloudAiplatformV1PublisherModelCallToAction
from openapi_server import util


class GoogleCloudAiplatformV1PublisherModel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, frameworks: List[str]=None, launch_stage: str=None, name: str=None, open_source_category: str=None, predict_schemata: GoogleCloudAiplatformV1PredictSchemata=None, publisher_model_template: str=None, supported_actions: GoogleCloudAiplatformV1PublisherModelCallToAction=None, version_id: str=None, version_state: str=None):
        """GoogleCloudAiplatformV1PublisherModel - a model defined in OpenAPI

        :param frameworks: The frameworks of this GoogleCloudAiplatformV1PublisherModel.
        :param launch_stage: The launch_stage of this GoogleCloudAiplatformV1PublisherModel.
        :param name: The name of this GoogleCloudAiplatformV1PublisherModel.
        :param open_source_category: The open_source_category of this GoogleCloudAiplatformV1PublisherModel.
        :param predict_schemata: The predict_schemata of this GoogleCloudAiplatformV1PublisherModel.
        :param publisher_model_template: The publisher_model_template of this GoogleCloudAiplatformV1PublisherModel.
        :param supported_actions: The supported_actions of this GoogleCloudAiplatformV1PublisherModel.
        :param version_id: The version_id of this GoogleCloudAiplatformV1PublisherModel.
        :param version_state: The version_state of this GoogleCloudAiplatformV1PublisherModel.
        """
        self.openapi_types = {
            'frameworks': List[str],
            'launch_stage': str,
            'name': str,
            'open_source_category': str,
            'predict_schemata': GoogleCloudAiplatformV1PredictSchemata,
            'publisher_model_template': str,
            'supported_actions': GoogleCloudAiplatformV1PublisherModelCallToAction,
            'version_id': str,
            'version_state': str
        }

        self.attribute_map = {
            'frameworks': 'frameworks',
            'launch_stage': 'launchStage',
            'name': 'name',
            'open_source_category': 'openSourceCategory',
            'predict_schemata': 'predictSchemata',
            'publisher_model_template': 'publisherModelTemplate',
            'supported_actions': 'supportedActions',
            'version_id': 'versionId',
            'version_state': 'versionState'
        }

        self._frameworks = frameworks
        self._launch_stage = launch_stage
        self._name = name
        self._open_source_category = open_source_category
        self._predict_schemata = predict_schemata
        self._publisher_model_template = publisher_model_template
        self._supported_actions = supported_actions
        self._version_id = version_id
        self._version_state = version_state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudAiplatformV1PublisherModel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudAiplatformV1PublisherModel of this GoogleCloudAiplatformV1PublisherModel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def frameworks(self):
        """Gets the frameworks of this GoogleCloudAiplatformV1PublisherModel.

        Optional. Additional information about the model's Frameworks.

        :return: The frameworks of this GoogleCloudAiplatformV1PublisherModel.
        :rtype: List[str]
        """
        return self._frameworks

    @frameworks.setter
    def frameworks(self, frameworks):
        """Sets the frameworks of this GoogleCloudAiplatformV1PublisherModel.

        Optional. Additional information about the model's Frameworks.

        :param frameworks: The frameworks of this GoogleCloudAiplatformV1PublisherModel.
        :type frameworks: List[str]
        """

        self._frameworks = frameworks

    @property
    def launch_stage(self):
        """Gets the launch_stage of this GoogleCloudAiplatformV1PublisherModel.

        Optional. Indicates the launch stage of the model.

        :return: The launch_stage of this GoogleCloudAiplatformV1PublisherModel.
        :rtype: str
        """
        return self._launch_stage

    @launch_stage.setter
    def launch_stage(self, launch_stage):
        """Sets the launch_stage of this GoogleCloudAiplatformV1PublisherModel.

        Optional. Indicates the launch stage of the model.

        :param launch_stage: The launch_stage of this GoogleCloudAiplatformV1PublisherModel.
        :type launch_stage: str
        """
        allowed_values = ["LAUNCH_STAGE_UNSPECIFIED", "DOGFOOD", "EXPERIMENTAL", "PRIVATE_PREVIEW", "PUBLIC_PREVIEW", "GA"]  # noqa: E501
        if launch_stage not in allowed_values:
            raise ValueError(
                "Invalid value for `launch_stage` ({0}), must be one of {1}"
                .format(launch_stage, allowed_values)
            )

        self._launch_stage = launch_stage

    @property
    def name(self):
        """Gets the name of this GoogleCloudAiplatformV1PublisherModel.

        Output only. The resource name of the PublisherModel.

        :return: The name of this GoogleCloudAiplatformV1PublisherModel.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GoogleCloudAiplatformV1PublisherModel.

        Output only. The resource name of the PublisherModel.

        :param name: The name of this GoogleCloudAiplatformV1PublisherModel.
        :type name: str
        """

        self._name = name

    @property
    def open_source_category(self):
        """Gets the open_source_category of this GoogleCloudAiplatformV1PublisherModel.

        Required. Indicates the open source category of the publisher model.

        :return: The open_source_category of this GoogleCloudAiplatformV1PublisherModel.
        :rtype: str
        """
        return self._open_source_category

    @open_source_category.setter
    def open_source_category(self, open_source_category):
        """Sets the open_source_category of this GoogleCloudAiplatformV1PublisherModel.

        Required. Indicates the open source category of the publisher model.

        :param open_source_category: The open_source_category of this GoogleCloudAiplatformV1PublisherModel.
        :type open_source_category: str
        """
        allowed_values = ["OPEN_SOURCE_CATEGORY_UNSPECIFIED", "PROPRIETARY", "GOOGLE_OWNED_OSS_WITH_GOOGLE_CHECKPOINT", "THIRD_PARTY_OWNED_OSS_WITH_GOOGLE_CHECKPOINT", "GOOGLE_OWNED_OSS", "THIRD_PARTY_OWNED_OSS"]  # noqa: E501
        if open_source_category not in allowed_values:
            raise ValueError(
                "Invalid value for `open_source_category` ({0}), must be one of {1}"
                .format(open_source_category, allowed_values)
            )

        self._open_source_category = open_source_category

    @property
    def predict_schemata(self):
        """Gets the predict_schemata of this GoogleCloudAiplatformV1PublisherModel.


        :return: The predict_schemata of this GoogleCloudAiplatformV1PublisherModel.
        :rtype: GoogleCloudAiplatformV1PredictSchemata
        """
        return self._predict_schemata

    @predict_schemata.setter
    def predict_schemata(self, predict_schemata):
        """Sets the predict_schemata of this GoogleCloudAiplatformV1PublisherModel.


        :param predict_schemata: The predict_schemata of this GoogleCloudAiplatformV1PublisherModel.
        :type predict_schemata: GoogleCloudAiplatformV1PredictSchemata
        """

        self._predict_schemata = predict_schemata

    @property
    def publisher_model_template(self):
        """Gets the publisher_model_template of this GoogleCloudAiplatformV1PublisherModel.

        Optional. Output only. Immutable. Used to indicate this model has a publisher model and provide the template of the publisher model resource name.

        :return: The publisher_model_template of this GoogleCloudAiplatformV1PublisherModel.
        :rtype: str
        """
        return self._publisher_model_template

    @publisher_model_template.setter
    def publisher_model_template(self, publisher_model_template):
        """Sets the publisher_model_template of this GoogleCloudAiplatformV1PublisherModel.

        Optional. Output only. Immutable. Used to indicate this model has a publisher model and provide the template of the publisher model resource name.

        :param publisher_model_template: The publisher_model_template of this GoogleCloudAiplatformV1PublisherModel.
        :type publisher_model_template: str
        """

        self._publisher_model_template = publisher_model_template

    @property
    def supported_actions(self):
        """Gets the supported_actions of this GoogleCloudAiplatformV1PublisherModel.


        :return: The supported_actions of this GoogleCloudAiplatformV1PublisherModel.
        :rtype: GoogleCloudAiplatformV1PublisherModelCallToAction
        """
        return self._supported_actions

    @supported_actions.setter
    def supported_actions(self, supported_actions):
        """Sets the supported_actions of this GoogleCloudAiplatformV1PublisherModel.


        :param supported_actions: The supported_actions of this GoogleCloudAiplatformV1PublisherModel.
        :type supported_actions: GoogleCloudAiplatformV1PublisherModelCallToAction
        """

        self._supported_actions = supported_actions

    @property
    def version_id(self):
        """Gets the version_id of this GoogleCloudAiplatformV1PublisherModel.

        Output only. Immutable. The version ID of the PublisherModel. A new version is committed when a new model version is uploaded under an existing model id. It is an auto-incrementing decimal number in string representation.

        :return: The version_id of this GoogleCloudAiplatformV1PublisherModel.
        :rtype: str
        """
        return self._version_id

    @version_id.setter
    def version_id(self, version_id):
        """Sets the version_id of this GoogleCloudAiplatformV1PublisherModel.

        Output only. Immutable. The version ID of the PublisherModel. A new version is committed when a new model version is uploaded under an existing model id. It is an auto-incrementing decimal number in string representation.

        :param version_id: The version_id of this GoogleCloudAiplatformV1PublisherModel.
        :type version_id: str
        """

        self._version_id = version_id

    @property
    def version_state(self):
        """Gets the version_state of this GoogleCloudAiplatformV1PublisherModel.

        Optional. Indicates the state of the model version.

        :return: The version_state of this GoogleCloudAiplatformV1PublisherModel.
        :rtype: str
        """
        return self._version_state

    @version_state.setter
    def version_state(self, version_state):
        """Sets the version_state of this GoogleCloudAiplatformV1PublisherModel.

        Optional. Indicates the state of the model version.

        :param version_state: The version_state of this GoogleCloudAiplatformV1PublisherModel.
        :type version_state: str
        """
        allowed_values = ["VERSION_STATE_UNSPECIFIED", "VERSION_STATE_STABLE", "VERSION_STATE_UNSTABLE"]  # noqa: E501
        if version_state not in allowed_values:
            raise ValueError(
                "Invalid value for `version_state` ({0}), must be one of {1}"
                .format(version_state, allowed_values)
            )

        self._version_state = version_state
