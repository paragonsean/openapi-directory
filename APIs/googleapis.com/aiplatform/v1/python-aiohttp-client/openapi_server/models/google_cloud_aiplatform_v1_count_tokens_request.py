# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_aiplatform_v1_content import GoogleCloudAiplatformV1Content
from openapi_server import util


class GoogleCloudAiplatformV1CountTokensRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, contents: List[GoogleCloudAiplatformV1Content]=None, instances: List[object]=None, model: str=None):
        """GoogleCloudAiplatformV1CountTokensRequest - a model defined in OpenAPI

        :param contents: The contents of this GoogleCloudAiplatformV1CountTokensRequest.
        :param instances: The instances of this GoogleCloudAiplatformV1CountTokensRequest.
        :param model: The model of this GoogleCloudAiplatformV1CountTokensRequest.
        """
        self.openapi_types = {
            'contents': List[GoogleCloudAiplatformV1Content],
            'instances': List[object],
            'model': str
        }

        self.attribute_map = {
            'contents': 'contents',
            'instances': 'instances',
            'model': 'model'
        }

        self._contents = contents
        self._instances = instances
        self._model = model

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudAiplatformV1CountTokensRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudAiplatformV1CountTokensRequest of this GoogleCloudAiplatformV1CountTokensRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def contents(self):
        """Gets the contents of this GoogleCloudAiplatformV1CountTokensRequest.

        Required. Input content.

        :return: The contents of this GoogleCloudAiplatformV1CountTokensRequest.
        :rtype: List[GoogleCloudAiplatformV1Content]
        """
        return self._contents

    @contents.setter
    def contents(self, contents):
        """Sets the contents of this GoogleCloudAiplatformV1CountTokensRequest.

        Required. Input content.

        :param contents: The contents of this GoogleCloudAiplatformV1CountTokensRequest.
        :type contents: List[GoogleCloudAiplatformV1Content]
        """

        self._contents = contents

    @property
    def instances(self):
        """Gets the instances of this GoogleCloudAiplatformV1CountTokensRequest.

        Required. The instances that are the input to token counting call. Schema is identical to the prediction schema of the underlying model.

        :return: The instances of this GoogleCloudAiplatformV1CountTokensRequest.
        :rtype: List[object]
        """
        return self._instances

    @instances.setter
    def instances(self, instances):
        """Sets the instances of this GoogleCloudAiplatformV1CountTokensRequest.

        Required. The instances that are the input to token counting call. Schema is identical to the prediction schema of the underlying model.

        :param instances: The instances of this GoogleCloudAiplatformV1CountTokensRequest.
        :type instances: List[object]
        """

        self._instances = instances

    @property
    def model(self):
        """Gets the model of this GoogleCloudAiplatformV1CountTokensRequest.

        Required. The name of the publisher model requested to serve the prediction. Format: `projects/{project}/locations/{location}/publishers/*/models/*`

        :return: The model of this GoogleCloudAiplatformV1CountTokensRequest.
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this GoogleCloudAiplatformV1CountTokensRequest.

        Required. The name of the publisher model requested to serve the prediction. Format: `projects/{project}/locations/{location}/publishers/*/models/*`

        :param model: The model of this GoogleCloudAiplatformV1CountTokensRequest.
        :type model: str
        """

        self._model = model
