# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_aiplatform_v1_autoscaling_metric_spec import GoogleCloudAiplatformV1AutoscalingMetricSpec
from openapi_server.models.google_cloud_aiplatform_v1_machine_spec import GoogleCloudAiplatformV1MachineSpec
from openapi_server import util


class GoogleCloudAiplatformV1DedicatedResources(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, autoscaling_metric_specs: List[GoogleCloudAiplatformV1AutoscalingMetricSpec]=None, machine_spec: GoogleCloudAiplatformV1MachineSpec=None, max_replica_count: int=None, min_replica_count: int=None):
        """GoogleCloudAiplatformV1DedicatedResources - a model defined in OpenAPI

        :param autoscaling_metric_specs: The autoscaling_metric_specs of this GoogleCloudAiplatformV1DedicatedResources.
        :param machine_spec: The machine_spec of this GoogleCloudAiplatformV1DedicatedResources.
        :param max_replica_count: The max_replica_count of this GoogleCloudAiplatformV1DedicatedResources.
        :param min_replica_count: The min_replica_count of this GoogleCloudAiplatformV1DedicatedResources.
        """
        self.openapi_types = {
            'autoscaling_metric_specs': List[GoogleCloudAiplatformV1AutoscalingMetricSpec],
            'machine_spec': GoogleCloudAiplatformV1MachineSpec,
            'max_replica_count': int,
            'min_replica_count': int
        }

        self.attribute_map = {
            'autoscaling_metric_specs': 'autoscalingMetricSpecs',
            'machine_spec': 'machineSpec',
            'max_replica_count': 'maxReplicaCount',
            'min_replica_count': 'minReplicaCount'
        }

        self._autoscaling_metric_specs = autoscaling_metric_specs
        self._machine_spec = machine_spec
        self._max_replica_count = max_replica_count
        self._min_replica_count = min_replica_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudAiplatformV1DedicatedResources':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudAiplatformV1DedicatedResources of this GoogleCloudAiplatformV1DedicatedResources.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def autoscaling_metric_specs(self):
        """Gets the autoscaling_metric_specs of this GoogleCloudAiplatformV1DedicatedResources.

        Immutable. The metric specifications that overrides a resource utilization metric (CPU utilization, accelerator's duty cycle, and so on) target value (default to 60 if not set). At most one entry is allowed per metric. If machine_spec.accelerator_count is above 0, the autoscaling will be based on both CPU utilization and accelerator's duty cycle metrics and scale up when either metrics exceeds its target value while scale down if both metrics are under their target value. The default target value is 60 for both metrics. If machine_spec.accelerator_count is 0, the autoscaling will be based on CPU utilization metric only with default target value 60 if not explicitly set. For example, in the case of Online Prediction, if you want to override target CPU utilization to 80, you should set autoscaling_metric_specs.metric_name to `aiplatform.googleapis.com/prediction/online/cpu/utilization` and autoscaling_metric_specs.target to `80`.

        :return: The autoscaling_metric_specs of this GoogleCloudAiplatformV1DedicatedResources.
        :rtype: List[GoogleCloudAiplatformV1AutoscalingMetricSpec]
        """
        return self._autoscaling_metric_specs

    @autoscaling_metric_specs.setter
    def autoscaling_metric_specs(self, autoscaling_metric_specs):
        """Sets the autoscaling_metric_specs of this GoogleCloudAiplatformV1DedicatedResources.

        Immutable. The metric specifications that overrides a resource utilization metric (CPU utilization, accelerator's duty cycle, and so on) target value (default to 60 if not set). At most one entry is allowed per metric. If machine_spec.accelerator_count is above 0, the autoscaling will be based on both CPU utilization and accelerator's duty cycle metrics and scale up when either metrics exceeds its target value while scale down if both metrics are under their target value. The default target value is 60 for both metrics. If machine_spec.accelerator_count is 0, the autoscaling will be based on CPU utilization metric only with default target value 60 if not explicitly set. For example, in the case of Online Prediction, if you want to override target CPU utilization to 80, you should set autoscaling_metric_specs.metric_name to `aiplatform.googleapis.com/prediction/online/cpu/utilization` and autoscaling_metric_specs.target to `80`.

        :param autoscaling_metric_specs: The autoscaling_metric_specs of this GoogleCloudAiplatformV1DedicatedResources.
        :type autoscaling_metric_specs: List[GoogleCloudAiplatformV1AutoscalingMetricSpec]
        """

        self._autoscaling_metric_specs = autoscaling_metric_specs

    @property
    def machine_spec(self):
        """Gets the machine_spec of this GoogleCloudAiplatformV1DedicatedResources.


        :return: The machine_spec of this GoogleCloudAiplatformV1DedicatedResources.
        :rtype: GoogleCloudAiplatformV1MachineSpec
        """
        return self._machine_spec

    @machine_spec.setter
    def machine_spec(self, machine_spec):
        """Sets the machine_spec of this GoogleCloudAiplatformV1DedicatedResources.


        :param machine_spec: The machine_spec of this GoogleCloudAiplatformV1DedicatedResources.
        :type machine_spec: GoogleCloudAiplatformV1MachineSpec
        """

        self._machine_spec = machine_spec

    @property
    def max_replica_count(self):
        """Gets the max_replica_count of this GoogleCloudAiplatformV1DedicatedResources.

        Immutable. The maximum number of replicas this DeployedModel may be deployed on when the traffic against it increases. If the requested value is too large, the deployment will error, but if deployment succeeds then the ability to scale the model to that many replicas is guaranteed (barring service outages). If traffic against the DeployedModel increases beyond what its replicas at maximum may handle, a portion of the traffic will be dropped. If this value is not provided, will use min_replica_count as the default value. The value of this field impacts the charge against Vertex CPU and GPU quotas. Specifically, you will be charged for (max_replica_count * number of cores in the selected machine type) and (max_replica_count * number of GPUs per replica in the selected machine type).

        :return: The max_replica_count of this GoogleCloudAiplatformV1DedicatedResources.
        :rtype: int
        """
        return self._max_replica_count

    @max_replica_count.setter
    def max_replica_count(self, max_replica_count):
        """Sets the max_replica_count of this GoogleCloudAiplatformV1DedicatedResources.

        Immutable. The maximum number of replicas this DeployedModel may be deployed on when the traffic against it increases. If the requested value is too large, the deployment will error, but if deployment succeeds then the ability to scale the model to that many replicas is guaranteed (barring service outages). If traffic against the DeployedModel increases beyond what its replicas at maximum may handle, a portion of the traffic will be dropped. If this value is not provided, will use min_replica_count as the default value. The value of this field impacts the charge against Vertex CPU and GPU quotas. Specifically, you will be charged for (max_replica_count * number of cores in the selected machine type) and (max_replica_count * number of GPUs per replica in the selected machine type).

        :param max_replica_count: The max_replica_count of this GoogleCloudAiplatformV1DedicatedResources.
        :type max_replica_count: int
        """

        self._max_replica_count = max_replica_count

    @property
    def min_replica_count(self):
        """Gets the min_replica_count of this GoogleCloudAiplatformV1DedicatedResources.

        Required. Immutable. The minimum number of machine replicas this DeployedModel will be always deployed on. This value must be greater than or equal to 1. If traffic against the DeployedModel increases, it may dynamically be deployed onto more replicas, and as traffic decreases, some of these extra replicas may be freed.

        :return: The min_replica_count of this GoogleCloudAiplatformV1DedicatedResources.
        :rtype: int
        """
        return self._min_replica_count

    @min_replica_count.setter
    def min_replica_count(self, min_replica_count):
        """Sets the min_replica_count of this GoogleCloudAiplatformV1DedicatedResources.

        Required. Immutable. The minimum number of machine replicas this DeployedModel will be always deployed on. This value must be greater than or equal to 1. If traffic against the DeployedModel increases, it may dynamically be deployed onto more replicas, and as traffic decreases, some of these extra replicas may be freed.

        :param min_replica_count: The min_replica_count of this GoogleCloudAiplatformV1DedicatedResources.
        :type min_replica_count: int
        """

        self._min_replica_count = min_replica_count
