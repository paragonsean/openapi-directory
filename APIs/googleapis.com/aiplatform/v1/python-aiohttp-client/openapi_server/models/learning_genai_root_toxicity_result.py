# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.learning_genai_root_toxicity_signal import LearningGenaiRootToxicitySignal
from openapi_server import util


class LearningGenaiRootToxicityResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, signals: List[LearningGenaiRootToxicitySignal]=None):
        """LearningGenaiRootToxicityResult - a model defined in OpenAPI

        :param signals: The signals of this LearningGenaiRootToxicityResult.
        """
        self.openapi_types = {
            'signals': List[LearningGenaiRootToxicitySignal]
        }

        self.attribute_map = {
            'signals': 'signals'
        }

        self._signals = signals

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LearningGenaiRootToxicityResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LearningGenaiRootToxicityResult of this LearningGenaiRootToxicityResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def signals(self):
        """Gets the signals of this LearningGenaiRootToxicityResult.


        :return: The signals of this LearningGenaiRootToxicityResult.
        :rtype: List[LearningGenaiRootToxicitySignal]
        """
        return self._signals

    @signals.setter
    def signals(self, signals):
        """Sets the signals of this LearningGenaiRootToxicityResult.


        :param signals: The signals of this LearningGenaiRootToxicityResult.
        :type signals: List[LearningGenaiRootToxicitySignal]
        """

        self._signals = signals
