# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_aiplatform_v1_model_monitoring_alert_config_email_alert_config import GoogleCloudAiplatformV1ModelMonitoringAlertConfigEmailAlertConfig
from openapi_server import util


class GoogleCloudAiplatformV1ModelMonitoringAlertConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, email_alert_config: GoogleCloudAiplatformV1ModelMonitoringAlertConfigEmailAlertConfig=None, enable_logging: bool=None, notification_channels: List[str]=None):
        """GoogleCloudAiplatformV1ModelMonitoringAlertConfig - a model defined in OpenAPI

        :param email_alert_config: The email_alert_config of this GoogleCloudAiplatformV1ModelMonitoringAlertConfig.
        :param enable_logging: The enable_logging of this GoogleCloudAiplatformV1ModelMonitoringAlertConfig.
        :param notification_channels: The notification_channels of this GoogleCloudAiplatformV1ModelMonitoringAlertConfig.
        """
        self.openapi_types = {
            'email_alert_config': GoogleCloudAiplatformV1ModelMonitoringAlertConfigEmailAlertConfig,
            'enable_logging': bool,
            'notification_channels': List[str]
        }

        self.attribute_map = {
            'email_alert_config': 'emailAlertConfig',
            'enable_logging': 'enableLogging',
            'notification_channels': 'notificationChannels'
        }

        self._email_alert_config = email_alert_config
        self._enable_logging = enable_logging
        self._notification_channels = notification_channels

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudAiplatformV1ModelMonitoringAlertConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudAiplatformV1ModelMonitoringAlertConfig of this GoogleCloudAiplatformV1ModelMonitoringAlertConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def email_alert_config(self):
        """Gets the email_alert_config of this GoogleCloudAiplatformV1ModelMonitoringAlertConfig.


        :return: The email_alert_config of this GoogleCloudAiplatformV1ModelMonitoringAlertConfig.
        :rtype: GoogleCloudAiplatformV1ModelMonitoringAlertConfigEmailAlertConfig
        """
        return self._email_alert_config

    @email_alert_config.setter
    def email_alert_config(self, email_alert_config):
        """Sets the email_alert_config of this GoogleCloudAiplatformV1ModelMonitoringAlertConfig.


        :param email_alert_config: The email_alert_config of this GoogleCloudAiplatformV1ModelMonitoringAlertConfig.
        :type email_alert_config: GoogleCloudAiplatformV1ModelMonitoringAlertConfigEmailAlertConfig
        """

        self._email_alert_config = email_alert_config

    @property
    def enable_logging(self):
        """Gets the enable_logging of this GoogleCloudAiplatformV1ModelMonitoringAlertConfig.

        Dump the anomalies to Cloud Logging. The anomalies will be put to json payload encoded from proto google.cloud.aiplatform.logging.ModelMonitoringAnomaliesLogEntry. This can be further sinked to Pub/Sub or any other services supported by Cloud Logging.

        :return: The enable_logging of this GoogleCloudAiplatformV1ModelMonitoringAlertConfig.
        :rtype: bool
        """
        return self._enable_logging

    @enable_logging.setter
    def enable_logging(self, enable_logging):
        """Sets the enable_logging of this GoogleCloudAiplatformV1ModelMonitoringAlertConfig.

        Dump the anomalies to Cloud Logging. The anomalies will be put to json payload encoded from proto google.cloud.aiplatform.logging.ModelMonitoringAnomaliesLogEntry. This can be further sinked to Pub/Sub or any other services supported by Cloud Logging.

        :param enable_logging: The enable_logging of this GoogleCloudAiplatformV1ModelMonitoringAlertConfig.
        :type enable_logging: bool
        """

        self._enable_logging = enable_logging

    @property
    def notification_channels(self):
        """Gets the notification_channels of this GoogleCloudAiplatformV1ModelMonitoringAlertConfig.

        Resource names of the NotificationChannels to send alert. Must be of the format `projects//notificationChannels/`

        :return: The notification_channels of this GoogleCloudAiplatformV1ModelMonitoringAlertConfig.
        :rtype: List[str]
        """
        return self._notification_channels

    @notification_channels.setter
    def notification_channels(self, notification_channels):
        """Sets the notification_channels of this GoogleCloudAiplatformV1ModelMonitoringAlertConfig.

        Resource names of the NotificationChannels to send alert. Must be of the format `projects//notificationChannels/`

        :param notification_channels: The notification_channels of this GoogleCloudAiplatformV1ModelMonitoringAlertConfig.
        :type notification_channels: List[str]
        """

        self._notification_channels = notification_channels
