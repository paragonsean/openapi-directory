# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LearningGenaiRootHarmGrailImageHarmType(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, image_harm_type: List[str]=None):
        """LearningGenaiRootHarmGrailImageHarmType - a model defined in OpenAPI

        :param image_harm_type: The image_harm_type of this LearningGenaiRootHarmGrailImageHarmType.
        """
        self.openapi_types = {
            'image_harm_type': List[str]
        }

        self.attribute_map = {
            'image_harm_type': 'imageHarmType'
        }

        self._image_harm_type = image_harm_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LearningGenaiRootHarmGrailImageHarmType':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LearningGenaiRootHarmGrailImageHarmType of this LearningGenaiRootHarmGrailImageHarmType.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def image_harm_type(self):
        """Gets the image_harm_type of this LearningGenaiRootHarmGrailImageHarmType.


        :return: The image_harm_type of this LearningGenaiRootHarmGrailImageHarmType.
        :rtype: List[str]
        """
        return self._image_harm_type

    @image_harm_type.setter
    def image_harm_type(self, image_harm_type):
        """Sets the image_harm_type of this LearningGenaiRootHarmGrailImageHarmType.


        :param image_harm_type: The image_harm_type of this LearningGenaiRootHarmGrailImageHarmType.
        :type image_harm_type: List[str]
        """
        allowed_values = ["IMAGE_HARM_TYPE_UNSPECIFIED", "IMAGE_HARM_TYPE_PORN", "IMAGE_HARM_TYPE_VIOLENCE", "IMAGE_HARM_TYPE_CSAI", "IMAGE_HARM_TYPE_PEDO", "IMAGE_HARM_TYPE_MINORS", "IMAGE_HARM_TYPE_DANGEROUS", "IMAGE_HARM_TYPE_MEDICAL", "IMAGE_HARM_TYPE_RACY", "IMAGE_HARM_TYPE_OBSCENE", "IMAGE_HARM_TYPE_MINOR_PRESENCE", "IMAGE_HARM_TYPE_GENERATIVE_MINOR_PRESENCE", "IMAGE_HARM_TYPE_GENERATIVE_REALISTIC_VISIBLE_FACE"]  # noqa: E501
        if not set(image_harm_type).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `image_harm_type` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(image_harm_type) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._image_harm_type = image_harm_type
