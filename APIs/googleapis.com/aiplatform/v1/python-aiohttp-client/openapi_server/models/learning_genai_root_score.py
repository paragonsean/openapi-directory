# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.learning_genai_root_calculation_type import LearningGenaiRootCalculationType
from openapi_server.models.learning_genai_root_internal_metadata import LearningGenaiRootInternalMetadata
from openapi_server.models.learning_genai_root_threshold_type import LearningGenaiRootThresholdType
from openapi_server.models.learning_genai_root_tokens_and_log_prob_per_decoding_step import LearningGenaiRootTokensAndLogProbPerDecodingStep
from openapi_server import util


class LearningGenaiRootScore(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, calculation_type: LearningGenaiRootCalculationType=None, internal_metadata: LearningGenaiRootInternalMetadata=None, threshold_type: LearningGenaiRootThresholdType=None, tokens_and_logprob_per_decoding_step: LearningGenaiRootTokensAndLogProbPerDecodingStep=None, value: float=None):
        """LearningGenaiRootScore - a model defined in OpenAPI

        :param calculation_type: The calculation_type of this LearningGenaiRootScore.
        :param internal_metadata: The internal_metadata of this LearningGenaiRootScore.
        :param threshold_type: The threshold_type of this LearningGenaiRootScore.
        :param tokens_and_logprob_per_decoding_step: The tokens_and_logprob_per_decoding_step of this LearningGenaiRootScore.
        :param value: The value of this LearningGenaiRootScore.
        """
        self.openapi_types = {
            'calculation_type': LearningGenaiRootCalculationType,
            'internal_metadata': LearningGenaiRootInternalMetadata,
            'threshold_type': LearningGenaiRootThresholdType,
            'tokens_and_logprob_per_decoding_step': LearningGenaiRootTokensAndLogProbPerDecodingStep,
            'value': float
        }

        self.attribute_map = {
            'calculation_type': 'calculationType',
            'internal_metadata': 'internalMetadata',
            'threshold_type': 'thresholdType',
            'tokens_and_logprob_per_decoding_step': 'tokensAndLogprobPerDecodingStep',
            'value': 'value'
        }

        self._calculation_type = calculation_type
        self._internal_metadata = internal_metadata
        self._threshold_type = threshold_type
        self._tokens_and_logprob_per_decoding_step = tokens_and_logprob_per_decoding_step
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LearningGenaiRootScore':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LearningGenaiRootScore of this LearningGenaiRootScore.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def calculation_type(self):
        """Gets the calculation_type of this LearningGenaiRootScore.


        :return: The calculation_type of this LearningGenaiRootScore.
        :rtype: LearningGenaiRootCalculationType
        """
        return self._calculation_type

    @calculation_type.setter
    def calculation_type(self, calculation_type):
        """Sets the calculation_type of this LearningGenaiRootScore.


        :param calculation_type: The calculation_type of this LearningGenaiRootScore.
        :type calculation_type: LearningGenaiRootCalculationType
        """

        self._calculation_type = calculation_type

    @property
    def internal_metadata(self):
        """Gets the internal_metadata of this LearningGenaiRootScore.


        :return: The internal_metadata of this LearningGenaiRootScore.
        :rtype: LearningGenaiRootInternalMetadata
        """
        return self._internal_metadata

    @internal_metadata.setter
    def internal_metadata(self, internal_metadata):
        """Sets the internal_metadata of this LearningGenaiRootScore.


        :param internal_metadata: The internal_metadata of this LearningGenaiRootScore.
        :type internal_metadata: LearningGenaiRootInternalMetadata
        """

        self._internal_metadata = internal_metadata

    @property
    def threshold_type(self):
        """Gets the threshold_type of this LearningGenaiRootScore.


        :return: The threshold_type of this LearningGenaiRootScore.
        :rtype: LearningGenaiRootThresholdType
        """
        return self._threshold_type

    @threshold_type.setter
    def threshold_type(self, threshold_type):
        """Sets the threshold_type of this LearningGenaiRootScore.


        :param threshold_type: The threshold_type of this LearningGenaiRootScore.
        :type threshold_type: LearningGenaiRootThresholdType
        """

        self._threshold_type = threshold_type

    @property
    def tokens_and_logprob_per_decoding_step(self):
        """Gets the tokens_and_logprob_per_decoding_step of this LearningGenaiRootScore.


        :return: The tokens_and_logprob_per_decoding_step of this LearningGenaiRootScore.
        :rtype: LearningGenaiRootTokensAndLogProbPerDecodingStep
        """
        return self._tokens_and_logprob_per_decoding_step

    @tokens_and_logprob_per_decoding_step.setter
    def tokens_and_logprob_per_decoding_step(self, tokens_and_logprob_per_decoding_step):
        """Sets the tokens_and_logprob_per_decoding_step of this LearningGenaiRootScore.


        :param tokens_and_logprob_per_decoding_step: The tokens_and_logprob_per_decoding_step of this LearningGenaiRootScore.
        :type tokens_and_logprob_per_decoding_step: LearningGenaiRootTokensAndLogProbPerDecodingStep
        """

        self._tokens_and_logprob_per_decoding_step = tokens_and_logprob_per_decoding_step

    @property
    def value(self):
        """Gets the value of this LearningGenaiRootScore.


        :return: The value of this LearningGenaiRootScore.
        :rtype: float
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this LearningGenaiRootScore.


        :param value: The value of this LearningGenaiRootScore.
        :type value: float
        """

        self._value = value
