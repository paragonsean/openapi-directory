# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleCloudAiplatformV1FeatureOnlineStoreBigtableAutoScaling(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cpu_utilization_target: int=None, max_node_count: int=None, min_node_count: int=None):
        """GoogleCloudAiplatformV1FeatureOnlineStoreBigtableAutoScaling - a model defined in OpenAPI

        :param cpu_utilization_target: The cpu_utilization_target of this GoogleCloudAiplatformV1FeatureOnlineStoreBigtableAutoScaling.
        :param max_node_count: The max_node_count of this GoogleCloudAiplatformV1FeatureOnlineStoreBigtableAutoScaling.
        :param min_node_count: The min_node_count of this GoogleCloudAiplatformV1FeatureOnlineStoreBigtableAutoScaling.
        """
        self.openapi_types = {
            'cpu_utilization_target': int,
            'max_node_count': int,
            'min_node_count': int
        }

        self.attribute_map = {
            'cpu_utilization_target': 'cpuUtilizationTarget',
            'max_node_count': 'maxNodeCount',
            'min_node_count': 'minNodeCount'
        }

        self._cpu_utilization_target = cpu_utilization_target
        self._max_node_count = max_node_count
        self._min_node_count = min_node_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudAiplatformV1FeatureOnlineStoreBigtableAutoScaling':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudAiplatformV1FeatureOnlineStoreBigtableAutoScaling of this GoogleCloudAiplatformV1FeatureOnlineStoreBigtableAutoScaling.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cpu_utilization_target(self):
        """Gets the cpu_utilization_target of this GoogleCloudAiplatformV1FeatureOnlineStoreBigtableAutoScaling.

        Optional. A percentage of the cluster's CPU capacity. Can be from 10% to 80%. When a cluster's CPU utilization exceeds the target that you have set, Bigtable immediately adds nodes to the cluster. When CPU utilization is substantially lower than the target, Bigtable removes nodes. If not set will default to 50%.

        :return: The cpu_utilization_target of this GoogleCloudAiplatformV1FeatureOnlineStoreBigtableAutoScaling.
        :rtype: int
        """
        return self._cpu_utilization_target

    @cpu_utilization_target.setter
    def cpu_utilization_target(self, cpu_utilization_target):
        """Sets the cpu_utilization_target of this GoogleCloudAiplatformV1FeatureOnlineStoreBigtableAutoScaling.

        Optional. A percentage of the cluster's CPU capacity. Can be from 10% to 80%. When a cluster's CPU utilization exceeds the target that you have set, Bigtable immediately adds nodes to the cluster. When CPU utilization is substantially lower than the target, Bigtable removes nodes. If not set will default to 50%.

        :param cpu_utilization_target: The cpu_utilization_target of this GoogleCloudAiplatformV1FeatureOnlineStoreBigtableAutoScaling.
        :type cpu_utilization_target: int
        """

        self._cpu_utilization_target = cpu_utilization_target

    @property
    def max_node_count(self):
        """Gets the max_node_count of this GoogleCloudAiplatformV1FeatureOnlineStoreBigtableAutoScaling.

        Required. The maximum number of nodes to scale up to. Must be greater than or equal to min_node_count, and less than or equal to 10 times of 'min_node_count'.

        :return: The max_node_count of this GoogleCloudAiplatformV1FeatureOnlineStoreBigtableAutoScaling.
        :rtype: int
        """
        return self._max_node_count

    @max_node_count.setter
    def max_node_count(self, max_node_count):
        """Sets the max_node_count of this GoogleCloudAiplatformV1FeatureOnlineStoreBigtableAutoScaling.

        Required. The maximum number of nodes to scale up to. Must be greater than or equal to min_node_count, and less than or equal to 10 times of 'min_node_count'.

        :param max_node_count: The max_node_count of this GoogleCloudAiplatformV1FeatureOnlineStoreBigtableAutoScaling.
        :type max_node_count: int
        """

        self._max_node_count = max_node_count

    @property
    def min_node_count(self):
        """Gets the min_node_count of this GoogleCloudAiplatformV1FeatureOnlineStoreBigtableAutoScaling.

        Required. The minimum number of nodes to scale down to. Must be greater than or equal to 1.

        :return: The min_node_count of this GoogleCloudAiplatformV1FeatureOnlineStoreBigtableAutoScaling.
        :rtype: int
        """
        return self._min_node_count

    @min_node_count.setter
    def min_node_count(self, min_node_count):
        """Sets the min_node_count of this GoogleCloudAiplatformV1FeatureOnlineStoreBigtableAutoScaling.

        Required. The minimum number of nodes to scale down to. Must be greater than or equal to 1.

        :param min_node_count: The min_node_count of this GoogleCloudAiplatformV1FeatureOnlineStoreBigtableAutoScaling.
        :type min_node_count: int
        """

        self._min_node_count = min_node_count
