# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_aiplatform_v1_feature_noise_sigma import GoogleCloudAiplatformV1FeatureNoiseSigma
from openapi_server import util


class GoogleCloudAiplatformV1SmoothGradConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, feature_noise_sigma: GoogleCloudAiplatformV1FeatureNoiseSigma=None, noise_sigma: float=None, noisy_sample_count: int=None):
        """GoogleCloudAiplatformV1SmoothGradConfig - a model defined in OpenAPI

        :param feature_noise_sigma: The feature_noise_sigma of this GoogleCloudAiplatformV1SmoothGradConfig.
        :param noise_sigma: The noise_sigma of this GoogleCloudAiplatformV1SmoothGradConfig.
        :param noisy_sample_count: The noisy_sample_count of this GoogleCloudAiplatformV1SmoothGradConfig.
        """
        self.openapi_types = {
            'feature_noise_sigma': GoogleCloudAiplatformV1FeatureNoiseSigma,
            'noise_sigma': float,
            'noisy_sample_count': int
        }

        self.attribute_map = {
            'feature_noise_sigma': 'featureNoiseSigma',
            'noise_sigma': 'noiseSigma',
            'noisy_sample_count': 'noisySampleCount'
        }

        self._feature_noise_sigma = feature_noise_sigma
        self._noise_sigma = noise_sigma
        self._noisy_sample_count = noisy_sample_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudAiplatformV1SmoothGradConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudAiplatformV1SmoothGradConfig of this GoogleCloudAiplatformV1SmoothGradConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def feature_noise_sigma(self):
        """Gets the feature_noise_sigma of this GoogleCloudAiplatformV1SmoothGradConfig.


        :return: The feature_noise_sigma of this GoogleCloudAiplatformV1SmoothGradConfig.
        :rtype: GoogleCloudAiplatformV1FeatureNoiseSigma
        """
        return self._feature_noise_sigma

    @feature_noise_sigma.setter
    def feature_noise_sigma(self, feature_noise_sigma):
        """Sets the feature_noise_sigma of this GoogleCloudAiplatformV1SmoothGradConfig.


        :param feature_noise_sigma: The feature_noise_sigma of this GoogleCloudAiplatformV1SmoothGradConfig.
        :type feature_noise_sigma: GoogleCloudAiplatformV1FeatureNoiseSigma
        """

        self._feature_noise_sigma = feature_noise_sigma

    @property
    def noise_sigma(self):
        """Gets the noise_sigma of this GoogleCloudAiplatformV1SmoothGradConfig.

        This is a single float value and will be used to add noise to all the features. Use this field when all features are normalized to have the same distribution: scale to range [0, 1], [-1, 1] or z-scoring, where features are normalized to have 0-mean and 1-variance. Learn more about [normalization](https://developers.google.com/machine-learning/data-prep/transform/normalization). For best results the recommended value is about 10% - 20% of the standard deviation of the input feature. Refer to section 3.2 of the SmoothGrad paper: https://arxiv.org/pdf/1706.03825.pdf. Defaults to 0.1. If the distribution is different per feature, set feature_noise_sigma instead for each feature.

        :return: The noise_sigma of this GoogleCloudAiplatformV1SmoothGradConfig.
        :rtype: float
        """
        return self._noise_sigma

    @noise_sigma.setter
    def noise_sigma(self, noise_sigma):
        """Sets the noise_sigma of this GoogleCloudAiplatformV1SmoothGradConfig.

        This is a single float value and will be used to add noise to all the features. Use this field when all features are normalized to have the same distribution: scale to range [0, 1], [-1, 1] or z-scoring, where features are normalized to have 0-mean and 1-variance. Learn more about [normalization](https://developers.google.com/machine-learning/data-prep/transform/normalization). For best results the recommended value is about 10% - 20% of the standard deviation of the input feature. Refer to section 3.2 of the SmoothGrad paper: https://arxiv.org/pdf/1706.03825.pdf. Defaults to 0.1. If the distribution is different per feature, set feature_noise_sigma instead for each feature.

        :param noise_sigma: The noise_sigma of this GoogleCloudAiplatformV1SmoothGradConfig.
        :type noise_sigma: float
        """

        self._noise_sigma = noise_sigma

    @property
    def noisy_sample_count(self):
        """Gets the noisy_sample_count of this GoogleCloudAiplatformV1SmoothGradConfig.

        The number of gradient samples to use for approximation. The higher this number, the more accurate the gradient is, but the runtime complexity increases by this factor as well. Valid range of its value is [1, 50]. Defaults to 3.

        :return: The noisy_sample_count of this GoogleCloudAiplatformV1SmoothGradConfig.
        :rtype: int
        """
        return self._noisy_sample_count

    @noisy_sample_count.setter
    def noisy_sample_count(self, noisy_sample_count):
        """Sets the noisy_sample_count of this GoogleCloudAiplatformV1SmoothGradConfig.

        The number of gradient samples to use for approximation. The higher this number, the more accurate the gradient is, but the runtime complexity increases by this factor as well. Valid range of its value is [1, 50]. Defaults to 3.

        :param noisy_sample_count: The noisy_sample_count of this GoogleCloudAiplatformV1SmoothGradConfig.
        :type noisy_sample_count: int
        """

        self._noisy_sample_count = noisy_sample_count
