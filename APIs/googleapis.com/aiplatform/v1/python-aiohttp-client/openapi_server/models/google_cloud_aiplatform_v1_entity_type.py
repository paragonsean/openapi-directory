# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_aiplatform_v1_featurestore_monitoring_config import GoogleCloudAiplatformV1FeaturestoreMonitoringConfig
from openapi_server import util


class GoogleCloudAiplatformV1EntityType(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, create_time: str=None, description: str=None, etag: str=None, labels: Dict[str, str]=None, monitoring_config: GoogleCloudAiplatformV1FeaturestoreMonitoringConfig=None, name: str=None, offline_storage_ttl_days: int=None, update_time: str=None):
        """GoogleCloudAiplatformV1EntityType - a model defined in OpenAPI

        :param create_time: The create_time of this GoogleCloudAiplatformV1EntityType.
        :param description: The description of this GoogleCloudAiplatformV1EntityType.
        :param etag: The etag of this GoogleCloudAiplatformV1EntityType.
        :param labels: The labels of this GoogleCloudAiplatformV1EntityType.
        :param monitoring_config: The monitoring_config of this GoogleCloudAiplatformV1EntityType.
        :param name: The name of this GoogleCloudAiplatformV1EntityType.
        :param offline_storage_ttl_days: The offline_storage_ttl_days of this GoogleCloudAiplatformV1EntityType.
        :param update_time: The update_time of this GoogleCloudAiplatformV1EntityType.
        """
        self.openapi_types = {
            'create_time': str,
            'description': str,
            'etag': str,
            'labels': Dict[str, str],
            'monitoring_config': GoogleCloudAiplatformV1FeaturestoreMonitoringConfig,
            'name': str,
            'offline_storage_ttl_days': int,
            'update_time': str
        }

        self.attribute_map = {
            'create_time': 'createTime',
            'description': 'description',
            'etag': 'etag',
            'labels': 'labels',
            'monitoring_config': 'monitoringConfig',
            'name': 'name',
            'offline_storage_ttl_days': 'offlineStorageTtlDays',
            'update_time': 'updateTime'
        }

        self._create_time = create_time
        self._description = description
        self._etag = etag
        self._labels = labels
        self._monitoring_config = monitoring_config
        self._name = name
        self._offline_storage_ttl_days = offline_storage_ttl_days
        self._update_time = update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudAiplatformV1EntityType':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudAiplatformV1EntityType of this GoogleCloudAiplatformV1EntityType.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def create_time(self):
        """Gets the create_time of this GoogleCloudAiplatformV1EntityType.

        Output only. Timestamp when this EntityType was created.

        :return: The create_time of this GoogleCloudAiplatformV1EntityType.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this GoogleCloudAiplatformV1EntityType.

        Output only. Timestamp when this EntityType was created.

        :param create_time: The create_time of this GoogleCloudAiplatformV1EntityType.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def description(self):
        """Gets the description of this GoogleCloudAiplatformV1EntityType.

        Optional. Description of the EntityType.

        :return: The description of this GoogleCloudAiplatformV1EntityType.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this GoogleCloudAiplatformV1EntityType.

        Optional. Description of the EntityType.

        :param description: The description of this GoogleCloudAiplatformV1EntityType.
        :type description: str
        """

        self._description = description

    @property
    def etag(self):
        """Gets the etag of this GoogleCloudAiplatformV1EntityType.

        Optional. Used to perform a consistent read-modify-write updates. If not set, a blind \"overwrite\" update happens.

        :return: The etag of this GoogleCloudAiplatformV1EntityType.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this GoogleCloudAiplatformV1EntityType.

        Optional. Used to perform a consistent read-modify-write updates. If not set, a blind \"overwrite\" update happens.

        :param etag: The etag of this GoogleCloudAiplatformV1EntityType.
        :type etag: str
        """

        self._etag = etag

    @property
    def labels(self):
        """Gets the labels of this GoogleCloudAiplatformV1EntityType.

        Optional. The labels with user-defined metadata to organize your EntityTypes. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. See https://goo.gl/xmQnxf for more information on and examples of labels. No more than 64 user labels can be associated with one EntityType (System labels are excluded).\" System reserved label keys are prefixed with \"aiplatform.googleapis.com/\" and are immutable.

        :return: The labels of this GoogleCloudAiplatformV1EntityType.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this GoogleCloudAiplatformV1EntityType.

        Optional. The labels with user-defined metadata to organize your EntityTypes. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. See https://goo.gl/xmQnxf for more information on and examples of labels. No more than 64 user labels can be associated with one EntityType (System labels are excluded).\" System reserved label keys are prefixed with \"aiplatform.googleapis.com/\" and are immutable.

        :param labels: The labels of this GoogleCloudAiplatformV1EntityType.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def monitoring_config(self):
        """Gets the monitoring_config of this GoogleCloudAiplatformV1EntityType.


        :return: The monitoring_config of this GoogleCloudAiplatformV1EntityType.
        :rtype: GoogleCloudAiplatformV1FeaturestoreMonitoringConfig
        """
        return self._monitoring_config

    @monitoring_config.setter
    def monitoring_config(self, monitoring_config):
        """Sets the monitoring_config of this GoogleCloudAiplatformV1EntityType.


        :param monitoring_config: The monitoring_config of this GoogleCloudAiplatformV1EntityType.
        :type monitoring_config: GoogleCloudAiplatformV1FeaturestoreMonitoringConfig
        """

        self._monitoring_config = monitoring_config

    @property
    def name(self):
        """Gets the name of this GoogleCloudAiplatformV1EntityType.

        Immutable. Name of the EntityType. Format: `projects/{project}/locations/{location}/featurestores/{featurestore}/entityTypes/{entity_type}` The last part entity_type is assigned by the client. The entity_type can be up to 64 characters long and can consist only of ASCII Latin letters A-Z and a-z and underscore(_), and ASCII digits 0-9 starting with a letter. The value will be unique given a featurestore.

        :return: The name of this GoogleCloudAiplatformV1EntityType.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GoogleCloudAiplatformV1EntityType.

        Immutable. Name of the EntityType. Format: `projects/{project}/locations/{location}/featurestores/{featurestore}/entityTypes/{entity_type}` The last part entity_type is assigned by the client. The entity_type can be up to 64 characters long and can consist only of ASCII Latin letters A-Z and a-z and underscore(_), and ASCII digits 0-9 starting with a letter. The value will be unique given a featurestore.

        :param name: The name of this GoogleCloudAiplatformV1EntityType.
        :type name: str
        """

        self._name = name

    @property
    def offline_storage_ttl_days(self):
        """Gets the offline_storage_ttl_days of this GoogleCloudAiplatformV1EntityType.

        Optional. Config for data retention policy in offline storage. TTL in days for feature values that will be stored in offline storage. The Feature Store offline storage periodically removes obsolete feature values older than `offline_storage_ttl_days` since the feature generation time. If unset (or explicitly set to 0), default to 4000 days TTL.

        :return: The offline_storage_ttl_days of this GoogleCloudAiplatformV1EntityType.
        :rtype: int
        """
        return self._offline_storage_ttl_days

    @offline_storage_ttl_days.setter
    def offline_storage_ttl_days(self, offline_storage_ttl_days):
        """Sets the offline_storage_ttl_days of this GoogleCloudAiplatformV1EntityType.

        Optional. Config for data retention policy in offline storage. TTL in days for feature values that will be stored in offline storage. The Feature Store offline storage periodically removes obsolete feature values older than `offline_storage_ttl_days` since the feature generation time. If unset (or explicitly set to 0), default to 4000 days TTL.

        :param offline_storage_ttl_days: The offline_storage_ttl_days of this GoogleCloudAiplatformV1EntityType.
        :type offline_storage_ttl_days: int
        """

        self._offline_storage_ttl_days = offline_storage_ttl_days

    @property
    def update_time(self):
        """Gets the update_time of this GoogleCloudAiplatformV1EntityType.

        Output only. Timestamp when this EntityType was most recently updated.

        :return: The update_time of this GoogleCloudAiplatformV1EntityType.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this GoogleCloudAiplatformV1EntityType.

        Output only. Timestamp when this EntityType was most recently updated.

        :param update_time: The update_time of this GoogleCloudAiplatformV1EntityType.
        :type update_time: str
        """

        self._update_time = update_time
