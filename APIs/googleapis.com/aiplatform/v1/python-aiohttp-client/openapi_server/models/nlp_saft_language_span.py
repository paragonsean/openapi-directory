# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.nlp_saft_lang_id_locales_result import NlpSaftLangIdLocalesResult
from openapi_server import util


class NlpSaftLanguageSpan(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, end: int=None, language_code: str=None, locales: NlpSaftLangIdLocalesResult=None, probability: float=None, start: int=None):
        """NlpSaftLanguageSpan - a model defined in OpenAPI

        :param end: The end of this NlpSaftLanguageSpan.
        :param language_code: The language_code of this NlpSaftLanguageSpan.
        :param locales: The locales of this NlpSaftLanguageSpan.
        :param probability: The probability of this NlpSaftLanguageSpan.
        :param start: The start of this NlpSaftLanguageSpan.
        """
        self.openapi_types = {
            'end': int,
            'language_code': str,
            'locales': NlpSaftLangIdLocalesResult,
            'probability': float,
            'start': int
        }

        self.attribute_map = {
            'end': 'end',
            'language_code': 'languageCode',
            'locales': 'locales',
            'probability': 'probability',
            'start': 'start'
        }

        self._end = end
        self._language_code = language_code
        self._locales = locales
        self._probability = probability
        self._start = start

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NlpSaftLanguageSpan':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NlpSaftLanguageSpan of this NlpSaftLanguageSpan.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def end(self):
        """Gets the end of this NlpSaftLanguageSpan.


        :return: The end of this NlpSaftLanguageSpan.
        :rtype: int
        """
        return self._end

    @end.setter
    def end(self, end):
        """Sets the end of this NlpSaftLanguageSpan.


        :param end: The end of this NlpSaftLanguageSpan.
        :type end: int
        """

        self._end = end

    @property
    def language_code(self):
        """Gets the language_code of this NlpSaftLanguageSpan.

        A BCP 47 language code for this span.

        :return: The language_code of this NlpSaftLanguageSpan.
        :rtype: str
        """
        return self._language_code

    @language_code.setter
    def language_code(self, language_code):
        """Sets the language_code of this NlpSaftLanguageSpan.

        A BCP 47 language code for this span.

        :param language_code: The language_code of this NlpSaftLanguageSpan.
        :type language_code: str
        """

        self._language_code = language_code

    @property
    def locales(self):
        """Gets the locales of this NlpSaftLanguageSpan.


        :return: The locales of this NlpSaftLanguageSpan.
        :rtype: NlpSaftLangIdLocalesResult
        """
        return self._locales

    @locales.setter
    def locales(self, locales):
        """Sets the locales of this NlpSaftLanguageSpan.


        :param locales: The locales of this NlpSaftLanguageSpan.
        :type locales: NlpSaftLangIdLocalesResult
        """

        self._locales = locales

    @property
    def probability(self):
        """Gets the probability of this NlpSaftLanguageSpan.

        A probability associated with this prediction.

        :return: The probability of this NlpSaftLanguageSpan.
        :rtype: float
        """
        return self._probability

    @probability.setter
    def probability(self, probability):
        """Sets the probability of this NlpSaftLanguageSpan.

        A probability associated with this prediction.

        :param probability: The probability of this NlpSaftLanguageSpan.
        :type probability: float
        """

        self._probability = probability

    @property
    def start(self):
        """Gets the start of this NlpSaftLanguageSpan.

        Start and end byte offsets, inclusive, within the given input string. A value of -1 implies that this field is not set. Both fields must either be set with a nonnegative value or both are unset. If both are unset then this LanguageSpan applies to the entire input.

        :return: The start of this NlpSaftLanguageSpan.
        :rtype: int
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this NlpSaftLanguageSpan.

        Start and end byte offsets, inclusive, within the given input string. A value of -1 implies that this field is not set. Both fields must either be set with a nonnegative value or both are unset. If both are unset then this LanguageSpan applies to the entire input.

        :param start: The start of this NlpSaftLanguageSpan.
        :type start: int
        """

        self._start = start
