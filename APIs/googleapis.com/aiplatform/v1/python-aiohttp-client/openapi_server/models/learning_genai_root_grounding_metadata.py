# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.learning_genai_root_grounding_metadata_citation import LearningGenaiRootGroundingMetadataCitation
from openapi_server import util


class LearningGenaiRootGroundingMetadata(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, citations: List[LearningGenaiRootGroundingMetadataCitation]=None, grounding_cancelled: bool=None, search_queries: List[str]=None):
        """LearningGenaiRootGroundingMetadata - a model defined in OpenAPI

        :param citations: The citations of this LearningGenaiRootGroundingMetadata.
        :param grounding_cancelled: The grounding_cancelled of this LearningGenaiRootGroundingMetadata.
        :param search_queries: The search_queries of this LearningGenaiRootGroundingMetadata.
        """
        self.openapi_types = {
            'citations': List[LearningGenaiRootGroundingMetadataCitation],
            'grounding_cancelled': bool,
            'search_queries': List[str]
        }

        self.attribute_map = {
            'citations': 'citations',
            'grounding_cancelled': 'groundingCancelled',
            'search_queries': 'searchQueries'
        }

        self._citations = citations
        self._grounding_cancelled = grounding_cancelled
        self._search_queries = search_queries

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LearningGenaiRootGroundingMetadata':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LearningGenaiRootGroundingMetadata of this LearningGenaiRootGroundingMetadata.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def citations(self):
        """Gets the citations of this LearningGenaiRootGroundingMetadata.


        :return: The citations of this LearningGenaiRootGroundingMetadata.
        :rtype: List[LearningGenaiRootGroundingMetadataCitation]
        """
        return self._citations

    @citations.setter
    def citations(self, citations):
        """Sets the citations of this LearningGenaiRootGroundingMetadata.


        :param citations: The citations of this LearningGenaiRootGroundingMetadata.
        :type citations: List[LearningGenaiRootGroundingMetadataCitation]
        """

        self._citations = citations

    @property
    def grounding_cancelled(self):
        """Gets the grounding_cancelled of this LearningGenaiRootGroundingMetadata.

        True if grounding is cancelled, for example, no facts being retrieved.

        :return: The grounding_cancelled of this LearningGenaiRootGroundingMetadata.
        :rtype: bool
        """
        return self._grounding_cancelled

    @grounding_cancelled.setter
    def grounding_cancelled(self, grounding_cancelled):
        """Sets the grounding_cancelled of this LearningGenaiRootGroundingMetadata.

        True if grounding is cancelled, for example, no facts being retrieved.

        :param grounding_cancelled: The grounding_cancelled of this LearningGenaiRootGroundingMetadata.
        :type grounding_cancelled: bool
        """

        self._grounding_cancelled = grounding_cancelled

    @property
    def search_queries(self):
        """Gets the search_queries of this LearningGenaiRootGroundingMetadata.


        :return: The search_queries of this LearningGenaiRootGroundingMetadata.
        :rtype: List[str]
        """
        return self._search_queries

    @search_queries.setter
    def search_queries(self, search_queries):
        """Sets the search_queries of this LearningGenaiRootGroundingMetadata.


        :param search_queries: The search_queries of this LearningGenaiRootGroundingMetadata.
        :type search_queries: List[str]
        """

        self._search_queries = search_queries
