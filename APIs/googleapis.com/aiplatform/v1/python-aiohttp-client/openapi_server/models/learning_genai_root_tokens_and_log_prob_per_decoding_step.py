# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.learning_genai_root_tokens_and_log_prob_per_decoding_step_candidate import LearningGenaiRootTokensAndLogProbPerDecodingStepCandidate
from openapi_server.models.learning_genai_root_tokens_and_log_prob_per_decoding_step_top_candidates import LearningGenaiRootTokensAndLogProbPerDecodingStepTopCandidates
from openapi_server import util


class LearningGenaiRootTokensAndLogProbPerDecodingStep(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, chosen_candidates: List[LearningGenaiRootTokensAndLogProbPerDecodingStepCandidate]=None, top_candidates: List[LearningGenaiRootTokensAndLogProbPerDecodingStepTopCandidates]=None):
        """LearningGenaiRootTokensAndLogProbPerDecodingStep - a model defined in OpenAPI

        :param chosen_candidates: The chosen_candidates of this LearningGenaiRootTokensAndLogProbPerDecodingStep.
        :param top_candidates: The top_candidates of this LearningGenaiRootTokensAndLogProbPerDecodingStep.
        """
        self.openapi_types = {
            'chosen_candidates': List[LearningGenaiRootTokensAndLogProbPerDecodingStepCandidate],
            'top_candidates': List[LearningGenaiRootTokensAndLogProbPerDecodingStepTopCandidates]
        }

        self.attribute_map = {
            'chosen_candidates': 'chosenCandidates',
            'top_candidates': 'topCandidates'
        }

        self._chosen_candidates = chosen_candidates
        self._top_candidates = top_candidates

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LearningGenaiRootTokensAndLogProbPerDecodingStep':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LearningGenaiRootTokensAndLogProbPerDecodingStep of this LearningGenaiRootTokensAndLogProbPerDecodingStep.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def chosen_candidates(self):
        """Gets the chosen_candidates of this LearningGenaiRootTokensAndLogProbPerDecodingStep.

        Length = total number of decoding steps. The chosen candidates may or may not be in top_candidates.

        :return: The chosen_candidates of this LearningGenaiRootTokensAndLogProbPerDecodingStep.
        :rtype: List[LearningGenaiRootTokensAndLogProbPerDecodingStepCandidate]
        """
        return self._chosen_candidates

    @chosen_candidates.setter
    def chosen_candidates(self, chosen_candidates):
        """Sets the chosen_candidates of this LearningGenaiRootTokensAndLogProbPerDecodingStep.

        Length = total number of decoding steps. The chosen candidates may or may not be in top_candidates.

        :param chosen_candidates: The chosen_candidates of this LearningGenaiRootTokensAndLogProbPerDecodingStep.
        :type chosen_candidates: List[LearningGenaiRootTokensAndLogProbPerDecodingStepCandidate]
        """

        self._chosen_candidates = chosen_candidates

    @property
    def top_candidates(self):
        """Gets the top_candidates of this LearningGenaiRootTokensAndLogProbPerDecodingStep.

        Length = total number of decoding steps.

        :return: The top_candidates of this LearningGenaiRootTokensAndLogProbPerDecodingStep.
        :rtype: List[LearningGenaiRootTokensAndLogProbPerDecodingStepTopCandidates]
        """
        return self._top_candidates

    @top_candidates.setter
    def top_candidates(self, top_candidates):
        """Sets the top_candidates of this LearningGenaiRootTokensAndLogProbPerDecodingStep.

        Length = total number of decoding steps.

        :param top_candidates: The top_candidates of this LearningGenaiRootTokensAndLogProbPerDecodingStep.
        :type top_candidates: List[LearningGenaiRootTokensAndLogProbPerDecodingStepTopCandidates]
        """

        self._top_candidates = top_candidates
