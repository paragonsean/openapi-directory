# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleCloudAiplatformV1CompletionStats(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, failed_count: str=None, incomplete_count: str=None, successful_count: str=None, successful_forecast_point_count: str=None):
        """GoogleCloudAiplatformV1CompletionStats - a model defined in OpenAPI

        :param failed_count: The failed_count of this GoogleCloudAiplatformV1CompletionStats.
        :param incomplete_count: The incomplete_count of this GoogleCloudAiplatformV1CompletionStats.
        :param successful_count: The successful_count of this GoogleCloudAiplatformV1CompletionStats.
        :param successful_forecast_point_count: The successful_forecast_point_count of this GoogleCloudAiplatformV1CompletionStats.
        """
        self.openapi_types = {
            'failed_count': str,
            'incomplete_count': str,
            'successful_count': str,
            'successful_forecast_point_count': str
        }

        self.attribute_map = {
            'failed_count': 'failedCount',
            'incomplete_count': 'incompleteCount',
            'successful_count': 'successfulCount',
            'successful_forecast_point_count': 'successfulForecastPointCount'
        }

        self._failed_count = failed_count
        self._incomplete_count = incomplete_count
        self._successful_count = successful_count
        self._successful_forecast_point_count = successful_forecast_point_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudAiplatformV1CompletionStats':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudAiplatformV1CompletionStats of this GoogleCloudAiplatformV1CompletionStats.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def failed_count(self):
        """Gets the failed_count of this GoogleCloudAiplatformV1CompletionStats.

        Output only. The number of entities for which any error was encountered.

        :return: The failed_count of this GoogleCloudAiplatformV1CompletionStats.
        :rtype: str
        """
        return self._failed_count

    @failed_count.setter
    def failed_count(self, failed_count):
        """Sets the failed_count of this GoogleCloudAiplatformV1CompletionStats.

        Output only. The number of entities for which any error was encountered.

        :param failed_count: The failed_count of this GoogleCloudAiplatformV1CompletionStats.
        :type failed_count: str
        """

        self._failed_count = failed_count

    @property
    def incomplete_count(self):
        """Gets the incomplete_count of this GoogleCloudAiplatformV1CompletionStats.

        Output only. In cases when enough errors are encountered a job, pipeline, or operation may be failed as a whole. Below is the number of entities for which the processing had not been finished (either in successful or failed state). Set to -1 if the number is unknown (for example, the operation failed before the total entity number could be collected).

        :return: The incomplete_count of this GoogleCloudAiplatformV1CompletionStats.
        :rtype: str
        """
        return self._incomplete_count

    @incomplete_count.setter
    def incomplete_count(self, incomplete_count):
        """Sets the incomplete_count of this GoogleCloudAiplatformV1CompletionStats.

        Output only. In cases when enough errors are encountered a job, pipeline, or operation may be failed as a whole. Below is the number of entities for which the processing had not been finished (either in successful or failed state). Set to -1 if the number is unknown (for example, the operation failed before the total entity number could be collected).

        :param incomplete_count: The incomplete_count of this GoogleCloudAiplatformV1CompletionStats.
        :type incomplete_count: str
        """

        self._incomplete_count = incomplete_count

    @property
    def successful_count(self):
        """Gets the successful_count of this GoogleCloudAiplatformV1CompletionStats.

        Output only. The number of entities that had been processed successfully.

        :return: The successful_count of this GoogleCloudAiplatformV1CompletionStats.
        :rtype: str
        """
        return self._successful_count

    @successful_count.setter
    def successful_count(self, successful_count):
        """Sets the successful_count of this GoogleCloudAiplatformV1CompletionStats.

        Output only. The number of entities that had been processed successfully.

        :param successful_count: The successful_count of this GoogleCloudAiplatformV1CompletionStats.
        :type successful_count: str
        """

        self._successful_count = successful_count

    @property
    def successful_forecast_point_count(self):
        """Gets the successful_forecast_point_count of this GoogleCloudAiplatformV1CompletionStats.

        Output only. The number of the successful forecast points that are generated by the forecasting model. This is ONLY used by the forecasting batch prediction.

        :return: The successful_forecast_point_count of this GoogleCloudAiplatformV1CompletionStats.
        :rtype: str
        """
        return self._successful_forecast_point_count

    @successful_forecast_point_count.setter
    def successful_forecast_point_count(self, successful_forecast_point_count):
        """Sets the successful_forecast_point_count of this GoogleCloudAiplatformV1CompletionStats.

        Output only. The number of the successful forecast points that are generated by the forecasting model. This is ONLY used by the forecasting batch prediction.

        :param successful_forecast_point_count: The successful_forecast_point_count of this GoogleCloudAiplatformV1CompletionStats.
        :type successful_forecast_point_count: str
        """

        self._successful_forecast_point_count = successful_forecast_point_count
