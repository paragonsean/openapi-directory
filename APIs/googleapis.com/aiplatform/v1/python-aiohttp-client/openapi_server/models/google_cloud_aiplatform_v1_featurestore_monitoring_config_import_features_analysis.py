# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleCloudAiplatformV1FeaturestoreMonitoringConfigImportFeaturesAnalysis(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, anomaly_detection_baseline: str=None, state: str=None):
        """GoogleCloudAiplatformV1FeaturestoreMonitoringConfigImportFeaturesAnalysis - a model defined in OpenAPI

        :param anomaly_detection_baseline: The anomaly_detection_baseline of this GoogleCloudAiplatformV1FeaturestoreMonitoringConfigImportFeaturesAnalysis.
        :param state: The state of this GoogleCloudAiplatformV1FeaturestoreMonitoringConfigImportFeaturesAnalysis.
        """
        self.openapi_types = {
            'anomaly_detection_baseline': str,
            'state': str
        }

        self.attribute_map = {
            'anomaly_detection_baseline': 'anomalyDetectionBaseline',
            'state': 'state'
        }

        self._anomaly_detection_baseline = anomaly_detection_baseline
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudAiplatformV1FeaturestoreMonitoringConfigImportFeaturesAnalysis':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudAiplatformV1FeaturestoreMonitoringConfigImportFeaturesAnalysis of this GoogleCloudAiplatformV1FeaturestoreMonitoringConfigImportFeaturesAnalysis.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def anomaly_detection_baseline(self):
        """Gets the anomaly_detection_baseline of this GoogleCloudAiplatformV1FeaturestoreMonitoringConfigImportFeaturesAnalysis.

        The baseline used to do anomaly detection for the statistics generated by import features analysis.

        :return: The anomaly_detection_baseline of this GoogleCloudAiplatformV1FeaturestoreMonitoringConfigImportFeaturesAnalysis.
        :rtype: str
        """
        return self._anomaly_detection_baseline

    @anomaly_detection_baseline.setter
    def anomaly_detection_baseline(self, anomaly_detection_baseline):
        """Sets the anomaly_detection_baseline of this GoogleCloudAiplatformV1FeaturestoreMonitoringConfigImportFeaturesAnalysis.

        The baseline used to do anomaly detection for the statistics generated by import features analysis.

        :param anomaly_detection_baseline: The anomaly_detection_baseline of this GoogleCloudAiplatformV1FeaturestoreMonitoringConfigImportFeaturesAnalysis.
        :type anomaly_detection_baseline: str
        """
        allowed_values = ["BASELINE_UNSPECIFIED", "LATEST_STATS", "MOST_RECENT_SNAPSHOT_STATS", "PREVIOUS_IMPORT_FEATURES_STATS"]  # noqa: E501
        if anomaly_detection_baseline not in allowed_values:
            raise ValueError(
                "Invalid value for `anomaly_detection_baseline` ({0}), must be one of {1}"
                .format(anomaly_detection_baseline, allowed_values)
            )

        self._anomaly_detection_baseline = anomaly_detection_baseline

    @property
    def state(self):
        """Gets the state of this GoogleCloudAiplatformV1FeaturestoreMonitoringConfigImportFeaturesAnalysis.

        Whether to enable / disable / inherite default hebavior for import features analysis.

        :return: The state of this GoogleCloudAiplatformV1FeaturestoreMonitoringConfigImportFeaturesAnalysis.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this GoogleCloudAiplatformV1FeaturestoreMonitoringConfigImportFeaturesAnalysis.

        Whether to enable / disable / inherite default hebavior for import features analysis.

        :param state: The state of this GoogleCloudAiplatformV1FeaturestoreMonitoringConfigImportFeaturesAnalysis.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "DEFAULT", "ENABLED", "DISABLED"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state
