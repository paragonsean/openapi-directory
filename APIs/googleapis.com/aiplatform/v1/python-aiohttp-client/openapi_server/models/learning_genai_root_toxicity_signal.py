# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LearningGenaiRootToxicitySignal(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allowed: bool=None, label: str=None, score: float=None):
        """LearningGenaiRootToxicitySignal - a model defined in OpenAPI

        :param allowed: The allowed of this LearningGenaiRootToxicitySignal.
        :param label: The label of this LearningGenaiRootToxicitySignal.
        :param score: The score of this LearningGenaiRootToxicitySignal.
        """
        self.openapi_types = {
            'allowed': bool,
            'label': str,
            'score': float
        }

        self.attribute_map = {
            'allowed': 'allowed',
            'label': 'label',
            'score': 'score'
        }

        self._allowed = allowed
        self._label = label
        self._score = score

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LearningGenaiRootToxicitySignal':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LearningGenaiRootToxicitySignal of this LearningGenaiRootToxicitySignal.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allowed(self):
        """Gets the allowed of this LearningGenaiRootToxicitySignal.


        :return: The allowed of this LearningGenaiRootToxicitySignal.
        :rtype: bool
        """
        return self._allowed

    @allowed.setter
    def allowed(self, allowed):
        """Sets the allowed of this LearningGenaiRootToxicitySignal.


        :param allowed: The allowed of this LearningGenaiRootToxicitySignal.
        :type allowed: bool
        """

        self._allowed = allowed

    @property
    def label(self):
        """Gets the label of this LearningGenaiRootToxicitySignal.


        :return: The label of this LearningGenaiRootToxicitySignal.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this LearningGenaiRootToxicitySignal.


        :param label: The label of this LearningGenaiRootToxicitySignal.
        :type label: str
        """
        allowed_values = ["LABEL_UNSPECIFIED", "NOT_SENSITIVE", "SENSITIVE", "ACCIDENTS_DISASTERS", "ADULT", "COMPUTER_SECURITY", "CONTROVERSIAL_SOCIAL_ISSUES", "DEATH_TRAGEDY", "DRUGS", "IDENTITY_ETHNICITY", "FINANCIAL_HARDSHIP", "FIREARMS_WEAPONS", "HEALTH", "INSULT", "LEGAL", "MENTAL_HEALTH", "POLITICS", "RELIGION_BELIEFS", "SAFETY", "SELF_HARM", "SPECIAL_NEEDS", "TERRORISM", "TOXIC", "TROUBLED_RELATIONSHIP", "VIOLENCE_ABUSE", "VULGAR", "WAR_CONFLICT"]  # noqa: E501
        if label not in allowed_values:
            raise ValueError(
                "Invalid value for `label` ({0}), must be one of {1}"
                .format(label, allowed_values)
            )

        self._label = label

    @property
    def score(self):
        """Gets the score of this LearningGenaiRootToxicitySignal.


        :return: The score of this LearningGenaiRootToxicitySignal.
        :rtype: float
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this LearningGenaiRootToxicitySignal.


        :param score: The score of this LearningGenaiRootToxicitySignal.
        :type score: float
        """

        self._score = score
