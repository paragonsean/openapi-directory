# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleCloudAiplatformV1NearestNeighborQueryStringFilter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allow_tokens: List[str]=None, deny_tokens: List[str]=None, name: str=None):
        """GoogleCloudAiplatformV1NearestNeighborQueryStringFilter - a model defined in OpenAPI

        :param allow_tokens: The allow_tokens of this GoogleCloudAiplatformV1NearestNeighborQueryStringFilter.
        :param deny_tokens: The deny_tokens of this GoogleCloudAiplatformV1NearestNeighborQueryStringFilter.
        :param name: The name of this GoogleCloudAiplatformV1NearestNeighborQueryStringFilter.
        """
        self.openapi_types = {
            'allow_tokens': List[str],
            'deny_tokens': List[str],
            'name': str
        }

        self.attribute_map = {
            'allow_tokens': 'allowTokens',
            'deny_tokens': 'denyTokens',
            'name': 'name'
        }

        self._allow_tokens = allow_tokens
        self._deny_tokens = deny_tokens
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudAiplatformV1NearestNeighborQueryStringFilter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudAiplatformV1NearestNeighborQueryStringFilter of this GoogleCloudAiplatformV1NearestNeighborQueryStringFilter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allow_tokens(self):
        """Gets the allow_tokens of this GoogleCloudAiplatformV1NearestNeighborQueryStringFilter.

        Optional. The allowed tokens.

        :return: The allow_tokens of this GoogleCloudAiplatformV1NearestNeighborQueryStringFilter.
        :rtype: List[str]
        """
        return self._allow_tokens

    @allow_tokens.setter
    def allow_tokens(self, allow_tokens):
        """Sets the allow_tokens of this GoogleCloudAiplatformV1NearestNeighborQueryStringFilter.

        Optional. The allowed tokens.

        :param allow_tokens: The allow_tokens of this GoogleCloudAiplatformV1NearestNeighborQueryStringFilter.
        :type allow_tokens: List[str]
        """

        self._allow_tokens = allow_tokens

    @property
    def deny_tokens(self):
        """Gets the deny_tokens of this GoogleCloudAiplatformV1NearestNeighborQueryStringFilter.

        Optional. The denied tokens.

        :return: The deny_tokens of this GoogleCloudAiplatformV1NearestNeighborQueryStringFilter.
        :rtype: List[str]
        """
        return self._deny_tokens

    @deny_tokens.setter
    def deny_tokens(self, deny_tokens):
        """Sets the deny_tokens of this GoogleCloudAiplatformV1NearestNeighborQueryStringFilter.

        Optional. The denied tokens.

        :param deny_tokens: The deny_tokens of this GoogleCloudAiplatformV1NearestNeighborQueryStringFilter.
        :type deny_tokens: List[str]
        """

        self._deny_tokens = deny_tokens

    @property
    def name(self):
        """Gets the name of this GoogleCloudAiplatformV1NearestNeighborQueryStringFilter.

        Required. Column names in BigQuery that used as filters.

        :return: The name of this GoogleCloudAiplatformV1NearestNeighborQueryStringFilter.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GoogleCloudAiplatformV1NearestNeighborQueryStringFilter.

        Required. Column names in BigQuery that used as filters.

        :param name: The name of this GoogleCloudAiplatformV1NearestNeighborQueryStringFilter.
        :type name: str
        """

        self._name = name
