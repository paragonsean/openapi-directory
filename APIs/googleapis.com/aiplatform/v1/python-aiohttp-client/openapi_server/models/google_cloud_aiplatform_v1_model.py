# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_aiplatform_v1_deployed_model_ref import GoogleCloudAiplatformV1DeployedModelRef
from openapi_server.models.google_cloud_aiplatform_v1_encryption_spec import GoogleCloudAiplatformV1EncryptionSpec
from openapi_server.models.google_cloud_aiplatform_v1_explanation_spec import GoogleCloudAiplatformV1ExplanationSpec
from openapi_server.models.google_cloud_aiplatform_v1_model_container_spec import GoogleCloudAiplatformV1ModelContainerSpec
from openapi_server.models.google_cloud_aiplatform_v1_model_data_stats import GoogleCloudAiplatformV1ModelDataStats
from openapi_server.models.google_cloud_aiplatform_v1_model_export_format import GoogleCloudAiplatformV1ModelExportFormat
from openapi_server.models.google_cloud_aiplatform_v1_model_original_model_info import GoogleCloudAiplatformV1ModelOriginalModelInfo
from openapi_server.models.google_cloud_aiplatform_v1_model_source_info import GoogleCloudAiplatformV1ModelSourceInfo
from openapi_server.models.google_cloud_aiplatform_v1_predict_schemata import GoogleCloudAiplatformV1PredictSchemata
from openapi_server import util


class GoogleCloudAiplatformV1Model(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, artifact_uri: str=None, container_spec: GoogleCloudAiplatformV1ModelContainerSpec=None, create_time: str=None, data_stats: GoogleCloudAiplatformV1ModelDataStats=None, deployed_models: List[GoogleCloudAiplatformV1DeployedModelRef]=None, description: str=None, display_name: str=None, encryption_spec: GoogleCloudAiplatformV1EncryptionSpec=None, etag: str=None, explanation_spec: GoogleCloudAiplatformV1ExplanationSpec=None, labels: Dict[str, str]=None, metadata: object=None, metadata_artifact: str=None, metadata_schema_uri: str=None, model_source_info: GoogleCloudAiplatformV1ModelSourceInfo=None, name: str=None, original_model_info: GoogleCloudAiplatformV1ModelOriginalModelInfo=None, pipeline_job: str=None, predict_schemata: GoogleCloudAiplatformV1PredictSchemata=None, supported_deployment_resources_types: List[str]=None, supported_export_formats: List[GoogleCloudAiplatformV1ModelExportFormat]=None, supported_input_storage_formats: List[str]=None, supported_output_storage_formats: List[str]=None, training_pipeline: str=None, update_time: str=None, version_aliases: List[str]=None, version_create_time: str=None, version_description: str=None, version_id: str=None, version_update_time: str=None):
        """GoogleCloudAiplatformV1Model - a model defined in OpenAPI

        :param artifact_uri: The artifact_uri of this GoogleCloudAiplatformV1Model.
        :param container_spec: The container_spec of this GoogleCloudAiplatformV1Model.
        :param create_time: The create_time of this GoogleCloudAiplatformV1Model.
        :param data_stats: The data_stats of this GoogleCloudAiplatformV1Model.
        :param deployed_models: The deployed_models of this GoogleCloudAiplatformV1Model.
        :param description: The description of this GoogleCloudAiplatformV1Model.
        :param display_name: The display_name of this GoogleCloudAiplatformV1Model.
        :param encryption_spec: The encryption_spec of this GoogleCloudAiplatformV1Model.
        :param etag: The etag of this GoogleCloudAiplatformV1Model.
        :param explanation_spec: The explanation_spec of this GoogleCloudAiplatformV1Model.
        :param labels: The labels of this GoogleCloudAiplatformV1Model.
        :param metadata: The metadata of this GoogleCloudAiplatformV1Model.
        :param metadata_artifact: The metadata_artifact of this GoogleCloudAiplatformV1Model.
        :param metadata_schema_uri: The metadata_schema_uri of this GoogleCloudAiplatformV1Model.
        :param model_source_info: The model_source_info of this GoogleCloudAiplatformV1Model.
        :param name: The name of this GoogleCloudAiplatformV1Model.
        :param original_model_info: The original_model_info of this GoogleCloudAiplatformV1Model.
        :param pipeline_job: The pipeline_job of this GoogleCloudAiplatformV1Model.
        :param predict_schemata: The predict_schemata of this GoogleCloudAiplatformV1Model.
        :param supported_deployment_resources_types: The supported_deployment_resources_types of this GoogleCloudAiplatformV1Model.
        :param supported_export_formats: The supported_export_formats of this GoogleCloudAiplatformV1Model.
        :param supported_input_storage_formats: The supported_input_storage_formats of this GoogleCloudAiplatformV1Model.
        :param supported_output_storage_formats: The supported_output_storage_formats of this GoogleCloudAiplatformV1Model.
        :param training_pipeline: The training_pipeline of this GoogleCloudAiplatformV1Model.
        :param update_time: The update_time of this GoogleCloudAiplatformV1Model.
        :param version_aliases: The version_aliases of this GoogleCloudAiplatformV1Model.
        :param version_create_time: The version_create_time of this GoogleCloudAiplatformV1Model.
        :param version_description: The version_description of this GoogleCloudAiplatformV1Model.
        :param version_id: The version_id of this GoogleCloudAiplatformV1Model.
        :param version_update_time: The version_update_time of this GoogleCloudAiplatformV1Model.
        """
        self.openapi_types = {
            'artifact_uri': str,
            'container_spec': GoogleCloudAiplatformV1ModelContainerSpec,
            'create_time': str,
            'data_stats': GoogleCloudAiplatformV1ModelDataStats,
            'deployed_models': List[GoogleCloudAiplatformV1DeployedModelRef],
            'description': str,
            'display_name': str,
            'encryption_spec': GoogleCloudAiplatformV1EncryptionSpec,
            'etag': str,
            'explanation_spec': GoogleCloudAiplatformV1ExplanationSpec,
            'labels': Dict[str, str],
            'metadata': object,
            'metadata_artifact': str,
            'metadata_schema_uri': str,
            'model_source_info': GoogleCloudAiplatformV1ModelSourceInfo,
            'name': str,
            'original_model_info': GoogleCloudAiplatformV1ModelOriginalModelInfo,
            'pipeline_job': str,
            'predict_schemata': GoogleCloudAiplatformV1PredictSchemata,
            'supported_deployment_resources_types': List[str],
            'supported_export_formats': List[GoogleCloudAiplatformV1ModelExportFormat],
            'supported_input_storage_formats': List[str],
            'supported_output_storage_formats': List[str],
            'training_pipeline': str,
            'update_time': str,
            'version_aliases': List[str],
            'version_create_time': str,
            'version_description': str,
            'version_id': str,
            'version_update_time': str
        }

        self.attribute_map = {
            'artifact_uri': 'artifactUri',
            'container_spec': 'containerSpec',
            'create_time': 'createTime',
            'data_stats': 'dataStats',
            'deployed_models': 'deployedModels',
            'description': 'description',
            'display_name': 'displayName',
            'encryption_spec': 'encryptionSpec',
            'etag': 'etag',
            'explanation_spec': 'explanationSpec',
            'labels': 'labels',
            'metadata': 'metadata',
            'metadata_artifact': 'metadataArtifact',
            'metadata_schema_uri': 'metadataSchemaUri',
            'model_source_info': 'modelSourceInfo',
            'name': 'name',
            'original_model_info': 'originalModelInfo',
            'pipeline_job': 'pipelineJob',
            'predict_schemata': 'predictSchemata',
            'supported_deployment_resources_types': 'supportedDeploymentResourcesTypes',
            'supported_export_formats': 'supportedExportFormats',
            'supported_input_storage_formats': 'supportedInputStorageFormats',
            'supported_output_storage_formats': 'supportedOutputStorageFormats',
            'training_pipeline': 'trainingPipeline',
            'update_time': 'updateTime',
            'version_aliases': 'versionAliases',
            'version_create_time': 'versionCreateTime',
            'version_description': 'versionDescription',
            'version_id': 'versionId',
            'version_update_time': 'versionUpdateTime'
        }

        self._artifact_uri = artifact_uri
        self._container_spec = container_spec
        self._create_time = create_time
        self._data_stats = data_stats
        self._deployed_models = deployed_models
        self._description = description
        self._display_name = display_name
        self._encryption_spec = encryption_spec
        self._etag = etag
        self._explanation_spec = explanation_spec
        self._labels = labels
        self._metadata = metadata
        self._metadata_artifact = metadata_artifact
        self._metadata_schema_uri = metadata_schema_uri
        self._model_source_info = model_source_info
        self._name = name
        self._original_model_info = original_model_info
        self._pipeline_job = pipeline_job
        self._predict_schemata = predict_schemata
        self._supported_deployment_resources_types = supported_deployment_resources_types
        self._supported_export_formats = supported_export_formats
        self._supported_input_storage_formats = supported_input_storage_formats
        self._supported_output_storage_formats = supported_output_storage_formats
        self._training_pipeline = training_pipeline
        self._update_time = update_time
        self._version_aliases = version_aliases
        self._version_create_time = version_create_time
        self._version_description = version_description
        self._version_id = version_id
        self._version_update_time = version_update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudAiplatformV1Model':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudAiplatformV1Model of this GoogleCloudAiplatformV1Model.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def artifact_uri(self):
        """Gets the artifact_uri of this GoogleCloudAiplatformV1Model.

        Immutable. The path to the directory containing the Model artifact and any of its supporting files. Not required for AutoML Models.

        :return: The artifact_uri of this GoogleCloudAiplatformV1Model.
        :rtype: str
        """
        return self._artifact_uri

    @artifact_uri.setter
    def artifact_uri(self, artifact_uri):
        """Sets the artifact_uri of this GoogleCloudAiplatformV1Model.

        Immutable. The path to the directory containing the Model artifact and any of its supporting files. Not required for AutoML Models.

        :param artifact_uri: The artifact_uri of this GoogleCloudAiplatformV1Model.
        :type artifact_uri: str
        """

        self._artifact_uri = artifact_uri

    @property
    def container_spec(self):
        """Gets the container_spec of this GoogleCloudAiplatformV1Model.


        :return: The container_spec of this GoogleCloudAiplatformV1Model.
        :rtype: GoogleCloudAiplatformV1ModelContainerSpec
        """
        return self._container_spec

    @container_spec.setter
    def container_spec(self, container_spec):
        """Sets the container_spec of this GoogleCloudAiplatformV1Model.


        :param container_spec: The container_spec of this GoogleCloudAiplatformV1Model.
        :type container_spec: GoogleCloudAiplatformV1ModelContainerSpec
        """

        self._container_spec = container_spec

    @property
    def create_time(self):
        """Gets the create_time of this GoogleCloudAiplatformV1Model.

        Output only. Timestamp when this Model was uploaded into Vertex AI.

        :return: The create_time of this GoogleCloudAiplatformV1Model.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this GoogleCloudAiplatformV1Model.

        Output only. Timestamp when this Model was uploaded into Vertex AI.

        :param create_time: The create_time of this GoogleCloudAiplatformV1Model.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def data_stats(self):
        """Gets the data_stats of this GoogleCloudAiplatformV1Model.


        :return: The data_stats of this GoogleCloudAiplatformV1Model.
        :rtype: GoogleCloudAiplatformV1ModelDataStats
        """
        return self._data_stats

    @data_stats.setter
    def data_stats(self, data_stats):
        """Sets the data_stats of this GoogleCloudAiplatformV1Model.


        :param data_stats: The data_stats of this GoogleCloudAiplatformV1Model.
        :type data_stats: GoogleCloudAiplatformV1ModelDataStats
        """

        self._data_stats = data_stats

    @property
    def deployed_models(self):
        """Gets the deployed_models of this GoogleCloudAiplatformV1Model.

        Output only. The pointers to DeployedModels created from this Model. Note that Model could have been deployed to Endpoints in different Locations.

        :return: The deployed_models of this GoogleCloudAiplatformV1Model.
        :rtype: List[GoogleCloudAiplatformV1DeployedModelRef]
        """
        return self._deployed_models

    @deployed_models.setter
    def deployed_models(self, deployed_models):
        """Sets the deployed_models of this GoogleCloudAiplatformV1Model.

        Output only. The pointers to DeployedModels created from this Model. Note that Model could have been deployed to Endpoints in different Locations.

        :param deployed_models: The deployed_models of this GoogleCloudAiplatformV1Model.
        :type deployed_models: List[GoogleCloudAiplatformV1DeployedModelRef]
        """

        self._deployed_models = deployed_models

    @property
    def description(self):
        """Gets the description of this GoogleCloudAiplatformV1Model.

        The description of the Model.

        :return: The description of this GoogleCloudAiplatformV1Model.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this GoogleCloudAiplatformV1Model.

        The description of the Model.

        :param description: The description of this GoogleCloudAiplatformV1Model.
        :type description: str
        """

        self._description = description

    @property
    def display_name(self):
        """Gets the display_name of this GoogleCloudAiplatformV1Model.

        Required. The display name of the Model. The name can be up to 128 characters long and can consist of any UTF-8 characters.

        :return: The display_name of this GoogleCloudAiplatformV1Model.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this GoogleCloudAiplatformV1Model.

        Required. The display name of the Model. The name can be up to 128 characters long and can consist of any UTF-8 characters.

        :param display_name: The display_name of this GoogleCloudAiplatformV1Model.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def encryption_spec(self):
        """Gets the encryption_spec of this GoogleCloudAiplatformV1Model.


        :return: The encryption_spec of this GoogleCloudAiplatformV1Model.
        :rtype: GoogleCloudAiplatformV1EncryptionSpec
        """
        return self._encryption_spec

    @encryption_spec.setter
    def encryption_spec(self, encryption_spec):
        """Sets the encryption_spec of this GoogleCloudAiplatformV1Model.


        :param encryption_spec: The encryption_spec of this GoogleCloudAiplatformV1Model.
        :type encryption_spec: GoogleCloudAiplatformV1EncryptionSpec
        """

        self._encryption_spec = encryption_spec

    @property
    def etag(self):
        """Gets the etag of this GoogleCloudAiplatformV1Model.

        Used to perform consistent read-modify-write updates. If not set, a blind \"overwrite\" update happens.

        :return: The etag of this GoogleCloudAiplatformV1Model.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this GoogleCloudAiplatformV1Model.

        Used to perform consistent read-modify-write updates. If not set, a blind \"overwrite\" update happens.

        :param etag: The etag of this GoogleCloudAiplatformV1Model.
        :type etag: str
        """

        self._etag = etag

    @property
    def explanation_spec(self):
        """Gets the explanation_spec of this GoogleCloudAiplatformV1Model.


        :return: The explanation_spec of this GoogleCloudAiplatformV1Model.
        :rtype: GoogleCloudAiplatformV1ExplanationSpec
        """
        return self._explanation_spec

    @explanation_spec.setter
    def explanation_spec(self, explanation_spec):
        """Sets the explanation_spec of this GoogleCloudAiplatformV1Model.


        :param explanation_spec: The explanation_spec of this GoogleCloudAiplatformV1Model.
        :type explanation_spec: GoogleCloudAiplatformV1ExplanationSpec
        """

        self._explanation_spec = explanation_spec

    @property
    def labels(self):
        """Gets the labels of this GoogleCloudAiplatformV1Model.

        The labels with user-defined metadata to organize your Models. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. See https://goo.gl/xmQnxf for more information and examples of labels.

        :return: The labels of this GoogleCloudAiplatformV1Model.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this GoogleCloudAiplatformV1Model.

        The labels with user-defined metadata to organize your Models. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. See https://goo.gl/xmQnxf for more information and examples of labels.

        :param labels: The labels of this GoogleCloudAiplatformV1Model.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def metadata(self):
        """Gets the metadata of this GoogleCloudAiplatformV1Model.

        Immutable. An additional information about the Model; the schema of the metadata can be found in metadata_schema. Unset if the Model does not have any additional information.

        :return: The metadata of this GoogleCloudAiplatformV1Model.
        :rtype: object
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this GoogleCloudAiplatformV1Model.

        Immutable. An additional information about the Model; the schema of the metadata can be found in metadata_schema. Unset if the Model does not have any additional information.

        :param metadata: The metadata of this GoogleCloudAiplatformV1Model.
        :type metadata: object
        """

        self._metadata = metadata

    @property
    def metadata_artifact(self):
        """Gets the metadata_artifact of this GoogleCloudAiplatformV1Model.

        Output only. The resource name of the Artifact that was created in MetadataStore when creating the Model. The Artifact resource name pattern is `projects/{project}/locations/{location}/metadataStores/{metadata_store}/artifacts/{artifact}`.

        :return: The metadata_artifact of this GoogleCloudAiplatformV1Model.
        :rtype: str
        """
        return self._metadata_artifact

    @metadata_artifact.setter
    def metadata_artifact(self, metadata_artifact):
        """Sets the metadata_artifact of this GoogleCloudAiplatformV1Model.

        Output only. The resource name of the Artifact that was created in MetadataStore when creating the Model. The Artifact resource name pattern is `projects/{project}/locations/{location}/metadataStores/{metadata_store}/artifacts/{artifact}`.

        :param metadata_artifact: The metadata_artifact of this GoogleCloudAiplatformV1Model.
        :type metadata_artifact: str
        """

        self._metadata_artifact = metadata_artifact

    @property
    def metadata_schema_uri(self):
        """Gets the metadata_schema_uri of this GoogleCloudAiplatformV1Model.

        Immutable. Points to a YAML file stored on Google Cloud Storage describing additional information about the Model, that is specific to it. Unset if the Model does not have any additional information. The schema is defined as an OpenAPI 3.0.2 [Schema Object](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.2.md#schemaObject). AutoML Models always have this field populated by Vertex AI, if no additional metadata is needed, this field is set to an empty string. Note: The URI given on output will be immutable and probably different, including the URI scheme, than the one given on input. The output URI will point to a location where the user only has a read access.

        :return: The metadata_schema_uri of this GoogleCloudAiplatformV1Model.
        :rtype: str
        """
        return self._metadata_schema_uri

    @metadata_schema_uri.setter
    def metadata_schema_uri(self, metadata_schema_uri):
        """Sets the metadata_schema_uri of this GoogleCloudAiplatformV1Model.

        Immutable. Points to a YAML file stored on Google Cloud Storage describing additional information about the Model, that is specific to it. Unset if the Model does not have any additional information. The schema is defined as an OpenAPI 3.0.2 [Schema Object](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.2.md#schemaObject). AutoML Models always have this field populated by Vertex AI, if no additional metadata is needed, this field is set to an empty string. Note: The URI given on output will be immutable and probably different, including the URI scheme, than the one given on input. The output URI will point to a location where the user only has a read access.

        :param metadata_schema_uri: The metadata_schema_uri of this GoogleCloudAiplatformV1Model.
        :type metadata_schema_uri: str
        """

        self._metadata_schema_uri = metadata_schema_uri

    @property
    def model_source_info(self):
        """Gets the model_source_info of this GoogleCloudAiplatformV1Model.


        :return: The model_source_info of this GoogleCloudAiplatformV1Model.
        :rtype: GoogleCloudAiplatformV1ModelSourceInfo
        """
        return self._model_source_info

    @model_source_info.setter
    def model_source_info(self, model_source_info):
        """Sets the model_source_info of this GoogleCloudAiplatformV1Model.


        :param model_source_info: The model_source_info of this GoogleCloudAiplatformV1Model.
        :type model_source_info: GoogleCloudAiplatformV1ModelSourceInfo
        """

        self._model_source_info = model_source_info

    @property
    def name(self):
        """Gets the name of this GoogleCloudAiplatformV1Model.

        The resource name of the Model.

        :return: The name of this GoogleCloudAiplatformV1Model.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GoogleCloudAiplatformV1Model.

        The resource name of the Model.

        :param name: The name of this GoogleCloudAiplatformV1Model.
        :type name: str
        """

        self._name = name

    @property
    def original_model_info(self):
        """Gets the original_model_info of this GoogleCloudAiplatformV1Model.


        :return: The original_model_info of this GoogleCloudAiplatformV1Model.
        :rtype: GoogleCloudAiplatformV1ModelOriginalModelInfo
        """
        return self._original_model_info

    @original_model_info.setter
    def original_model_info(self, original_model_info):
        """Sets the original_model_info of this GoogleCloudAiplatformV1Model.


        :param original_model_info: The original_model_info of this GoogleCloudAiplatformV1Model.
        :type original_model_info: GoogleCloudAiplatformV1ModelOriginalModelInfo
        """

        self._original_model_info = original_model_info

    @property
    def pipeline_job(self):
        """Gets the pipeline_job of this GoogleCloudAiplatformV1Model.

        Optional. This field is populated if the model is produced by a pipeline job.

        :return: The pipeline_job of this GoogleCloudAiplatformV1Model.
        :rtype: str
        """
        return self._pipeline_job

    @pipeline_job.setter
    def pipeline_job(self, pipeline_job):
        """Sets the pipeline_job of this GoogleCloudAiplatformV1Model.

        Optional. This field is populated if the model is produced by a pipeline job.

        :param pipeline_job: The pipeline_job of this GoogleCloudAiplatformV1Model.
        :type pipeline_job: str
        """

        self._pipeline_job = pipeline_job

    @property
    def predict_schemata(self):
        """Gets the predict_schemata of this GoogleCloudAiplatformV1Model.


        :return: The predict_schemata of this GoogleCloudAiplatformV1Model.
        :rtype: GoogleCloudAiplatformV1PredictSchemata
        """
        return self._predict_schemata

    @predict_schemata.setter
    def predict_schemata(self, predict_schemata):
        """Sets the predict_schemata of this GoogleCloudAiplatformV1Model.


        :param predict_schemata: The predict_schemata of this GoogleCloudAiplatformV1Model.
        :type predict_schemata: GoogleCloudAiplatformV1PredictSchemata
        """

        self._predict_schemata = predict_schemata

    @property
    def supported_deployment_resources_types(self):
        """Gets the supported_deployment_resources_types of this GoogleCloudAiplatformV1Model.

        Output only. When this Model is deployed, its prediction resources are described by the `prediction_resources` field of the Endpoint.deployed_models object. Because not all Models support all resource configuration types, the configuration types this Model supports are listed here. If no configuration types are listed, the Model cannot be deployed to an Endpoint and does not support online predictions (PredictionService.Predict or PredictionService.Explain). Such a Model can serve predictions by using a BatchPredictionJob, if it has at least one entry each in supported_input_storage_formats and supported_output_storage_formats.

        :return: The supported_deployment_resources_types of this GoogleCloudAiplatformV1Model.
        :rtype: List[str]
        """
        return self._supported_deployment_resources_types

    @supported_deployment_resources_types.setter
    def supported_deployment_resources_types(self, supported_deployment_resources_types):
        """Sets the supported_deployment_resources_types of this GoogleCloudAiplatformV1Model.

        Output only. When this Model is deployed, its prediction resources are described by the `prediction_resources` field of the Endpoint.deployed_models object. Because not all Models support all resource configuration types, the configuration types this Model supports are listed here. If no configuration types are listed, the Model cannot be deployed to an Endpoint and does not support online predictions (PredictionService.Predict or PredictionService.Explain). Such a Model can serve predictions by using a BatchPredictionJob, if it has at least one entry each in supported_input_storage_formats and supported_output_storage_formats.

        :param supported_deployment_resources_types: The supported_deployment_resources_types of this GoogleCloudAiplatformV1Model.
        :type supported_deployment_resources_types: List[str]
        """
        allowed_values = ["DEPLOYMENT_RESOURCES_TYPE_UNSPECIFIED", "DEDICATED_RESOURCES", "AUTOMATIC_RESOURCES", "SHARED_RESOURCES"]  # noqa: E501
        if not set(supported_deployment_resources_types).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `supported_deployment_resources_types` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(supported_deployment_resources_types) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._supported_deployment_resources_types = supported_deployment_resources_types

    @property
    def supported_export_formats(self):
        """Gets the supported_export_formats of this GoogleCloudAiplatformV1Model.

        Output only. The formats in which this Model may be exported. If empty, this Model is not available for export.

        :return: The supported_export_formats of this GoogleCloudAiplatformV1Model.
        :rtype: List[GoogleCloudAiplatformV1ModelExportFormat]
        """
        return self._supported_export_formats

    @supported_export_formats.setter
    def supported_export_formats(self, supported_export_formats):
        """Sets the supported_export_formats of this GoogleCloudAiplatformV1Model.

        Output only. The formats in which this Model may be exported. If empty, this Model is not available for export.

        :param supported_export_formats: The supported_export_formats of this GoogleCloudAiplatformV1Model.
        :type supported_export_formats: List[GoogleCloudAiplatformV1ModelExportFormat]
        """

        self._supported_export_formats = supported_export_formats

    @property
    def supported_input_storage_formats(self):
        """Gets the supported_input_storage_formats of this GoogleCloudAiplatformV1Model.

        Output only. The formats this Model supports in BatchPredictionJob.input_config. If PredictSchemata.instance_schema_uri exists, the instances should be given as per that schema. The possible formats are: * `jsonl` The JSON Lines format, where each instance is a single line. Uses GcsSource. * `csv` The CSV format, where each instance is a single comma-separated line. The first line in the file is the header, containing comma-separated field names. Uses GcsSource. * `tf-record` The TFRecord format, where each instance is a single record in tfrecord syntax. Uses GcsSource. * `tf-record-gzip` Similar to `tf-record`, but the file is gzipped. Uses GcsSource. * `bigquery` Each instance is a single row in BigQuery. Uses BigQuerySource. * `file-list` Each line of the file is the location of an instance to process, uses `gcs_source` field of the InputConfig object. If this Model doesn't support any of these formats it means it cannot be used with a BatchPredictionJob. However, if it has supported_deployment_resources_types, it could serve online predictions by using PredictionService.Predict or PredictionService.Explain.

        :return: The supported_input_storage_formats of this GoogleCloudAiplatformV1Model.
        :rtype: List[str]
        """
        return self._supported_input_storage_formats

    @supported_input_storage_formats.setter
    def supported_input_storage_formats(self, supported_input_storage_formats):
        """Sets the supported_input_storage_formats of this GoogleCloudAiplatformV1Model.

        Output only. The formats this Model supports in BatchPredictionJob.input_config. If PredictSchemata.instance_schema_uri exists, the instances should be given as per that schema. The possible formats are: * `jsonl` The JSON Lines format, where each instance is a single line. Uses GcsSource. * `csv` The CSV format, where each instance is a single comma-separated line. The first line in the file is the header, containing comma-separated field names. Uses GcsSource. * `tf-record` The TFRecord format, where each instance is a single record in tfrecord syntax. Uses GcsSource. * `tf-record-gzip` Similar to `tf-record`, but the file is gzipped. Uses GcsSource. * `bigquery` Each instance is a single row in BigQuery. Uses BigQuerySource. * `file-list` Each line of the file is the location of an instance to process, uses `gcs_source` field of the InputConfig object. If this Model doesn't support any of these formats it means it cannot be used with a BatchPredictionJob. However, if it has supported_deployment_resources_types, it could serve online predictions by using PredictionService.Predict or PredictionService.Explain.

        :param supported_input_storage_formats: The supported_input_storage_formats of this GoogleCloudAiplatformV1Model.
        :type supported_input_storage_formats: List[str]
        """

        self._supported_input_storage_formats = supported_input_storage_formats

    @property
    def supported_output_storage_formats(self):
        """Gets the supported_output_storage_formats of this GoogleCloudAiplatformV1Model.

        Output only. The formats this Model supports in BatchPredictionJob.output_config. If both PredictSchemata.instance_schema_uri and PredictSchemata.prediction_schema_uri exist, the predictions are returned together with their instances. In other words, the prediction has the original instance data first, followed by the actual prediction content (as per the schema). The possible formats are: * `jsonl` The JSON Lines format, where each prediction is a single line. Uses GcsDestination. * `csv` The CSV format, where each prediction is a single comma-separated line. The first line in the file is the header, containing comma-separated field names. Uses GcsDestination. * `bigquery` Each prediction is a single row in a BigQuery table, uses BigQueryDestination . If this Model doesn't support any of these formats it means it cannot be used with a BatchPredictionJob. However, if it has supported_deployment_resources_types, it could serve online predictions by using PredictionService.Predict or PredictionService.Explain.

        :return: The supported_output_storage_formats of this GoogleCloudAiplatformV1Model.
        :rtype: List[str]
        """
        return self._supported_output_storage_formats

    @supported_output_storage_formats.setter
    def supported_output_storage_formats(self, supported_output_storage_formats):
        """Sets the supported_output_storage_formats of this GoogleCloudAiplatformV1Model.

        Output only. The formats this Model supports in BatchPredictionJob.output_config. If both PredictSchemata.instance_schema_uri and PredictSchemata.prediction_schema_uri exist, the predictions are returned together with their instances. In other words, the prediction has the original instance data first, followed by the actual prediction content (as per the schema). The possible formats are: * `jsonl` The JSON Lines format, where each prediction is a single line. Uses GcsDestination. * `csv` The CSV format, where each prediction is a single comma-separated line. The first line in the file is the header, containing comma-separated field names. Uses GcsDestination. * `bigquery` Each prediction is a single row in a BigQuery table, uses BigQueryDestination . If this Model doesn't support any of these formats it means it cannot be used with a BatchPredictionJob. However, if it has supported_deployment_resources_types, it could serve online predictions by using PredictionService.Predict or PredictionService.Explain.

        :param supported_output_storage_formats: The supported_output_storage_formats of this GoogleCloudAiplatformV1Model.
        :type supported_output_storage_formats: List[str]
        """

        self._supported_output_storage_formats = supported_output_storage_formats

    @property
    def training_pipeline(self):
        """Gets the training_pipeline of this GoogleCloudAiplatformV1Model.

        Output only. The resource name of the TrainingPipeline that uploaded this Model, if any.

        :return: The training_pipeline of this GoogleCloudAiplatformV1Model.
        :rtype: str
        """
        return self._training_pipeline

    @training_pipeline.setter
    def training_pipeline(self, training_pipeline):
        """Sets the training_pipeline of this GoogleCloudAiplatformV1Model.

        Output only. The resource name of the TrainingPipeline that uploaded this Model, if any.

        :param training_pipeline: The training_pipeline of this GoogleCloudAiplatformV1Model.
        :type training_pipeline: str
        """

        self._training_pipeline = training_pipeline

    @property
    def update_time(self):
        """Gets the update_time of this GoogleCloudAiplatformV1Model.

        Output only. Timestamp when this Model was most recently updated.

        :return: The update_time of this GoogleCloudAiplatformV1Model.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this GoogleCloudAiplatformV1Model.

        Output only. Timestamp when this Model was most recently updated.

        :param update_time: The update_time of this GoogleCloudAiplatformV1Model.
        :type update_time: str
        """

        self._update_time = update_time

    @property
    def version_aliases(self):
        """Gets the version_aliases of this GoogleCloudAiplatformV1Model.

        User provided version aliases so that a model version can be referenced via alias (i.e. `projects/{project}/locations/{location}/models/{model_id}@{version_alias}` instead of auto-generated version id (i.e. `projects/{project}/locations/{location}/models/{model_id}@{version_id})`. The format is a-z{0,126}[a-z0-9] to distinguish from version_id. A default version alias will be created for the first version of the model, and there must be exactly one default version alias for a model.

        :return: The version_aliases of this GoogleCloudAiplatformV1Model.
        :rtype: List[str]
        """
        return self._version_aliases

    @version_aliases.setter
    def version_aliases(self, version_aliases):
        """Sets the version_aliases of this GoogleCloudAiplatformV1Model.

        User provided version aliases so that a model version can be referenced via alias (i.e. `projects/{project}/locations/{location}/models/{model_id}@{version_alias}` instead of auto-generated version id (i.e. `projects/{project}/locations/{location}/models/{model_id}@{version_id})`. The format is a-z{0,126}[a-z0-9] to distinguish from version_id. A default version alias will be created for the first version of the model, and there must be exactly one default version alias for a model.

        :param version_aliases: The version_aliases of this GoogleCloudAiplatformV1Model.
        :type version_aliases: List[str]
        """

        self._version_aliases = version_aliases

    @property
    def version_create_time(self):
        """Gets the version_create_time of this GoogleCloudAiplatformV1Model.

        Output only. Timestamp when this version was created.

        :return: The version_create_time of this GoogleCloudAiplatformV1Model.
        :rtype: str
        """
        return self._version_create_time

    @version_create_time.setter
    def version_create_time(self, version_create_time):
        """Sets the version_create_time of this GoogleCloudAiplatformV1Model.

        Output only. Timestamp when this version was created.

        :param version_create_time: The version_create_time of this GoogleCloudAiplatformV1Model.
        :type version_create_time: str
        """

        self._version_create_time = version_create_time

    @property
    def version_description(self):
        """Gets the version_description of this GoogleCloudAiplatformV1Model.

        The description of this version.

        :return: The version_description of this GoogleCloudAiplatformV1Model.
        :rtype: str
        """
        return self._version_description

    @version_description.setter
    def version_description(self, version_description):
        """Sets the version_description of this GoogleCloudAiplatformV1Model.

        The description of this version.

        :param version_description: The version_description of this GoogleCloudAiplatformV1Model.
        :type version_description: str
        """

        self._version_description = version_description

    @property
    def version_id(self):
        """Gets the version_id of this GoogleCloudAiplatformV1Model.

        Output only. Immutable. The version ID of the model. A new version is committed when a new model version is uploaded or trained under an existing model id. It is an auto-incrementing decimal number in string representation.

        :return: The version_id of this GoogleCloudAiplatformV1Model.
        :rtype: str
        """
        return self._version_id

    @version_id.setter
    def version_id(self, version_id):
        """Sets the version_id of this GoogleCloudAiplatformV1Model.

        Output only. Immutable. The version ID of the model. A new version is committed when a new model version is uploaded or trained under an existing model id. It is an auto-incrementing decimal number in string representation.

        :param version_id: The version_id of this GoogleCloudAiplatformV1Model.
        :type version_id: str
        """

        self._version_id = version_id

    @property
    def version_update_time(self):
        """Gets the version_update_time of this GoogleCloudAiplatformV1Model.

        Output only. Timestamp when this version was most recently updated.

        :return: The version_update_time of this GoogleCloudAiplatformV1Model.
        :rtype: str
        """
        return self._version_update_time

    @version_update_time.setter
    def version_update_time(self, version_update_time):
        """Sets the version_update_time of this GoogleCloudAiplatformV1Model.

        Output only. Timestamp when this version was most recently updated.

        :param version_update_time: The version_update_time of this GoogleCloudAiplatformV1Model.
        :type version_update_time: str
        """

        self._version_update_time = version_update_time
