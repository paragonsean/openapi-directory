# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_aiplatform_v1_model_monitoring_stats_anomalies_feature_historic_stats_anomalies import GoogleCloudAiplatformV1ModelMonitoringStatsAnomaliesFeatureHistoricStatsAnomalies
from openapi_server import util


class GoogleCloudAiplatformV1ModelMonitoringStatsAnomalies(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, anomaly_count: int=None, deployed_model_id: str=None, feature_stats: List[GoogleCloudAiplatformV1ModelMonitoringStatsAnomaliesFeatureHistoricStatsAnomalies]=None, objective: str=None):
        """GoogleCloudAiplatformV1ModelMonitoringStatsAnomalies - a model defined in OpenAPI

        :param anomaly_count: The anomaly_count of this GoogleCloudAiplatformV1ModelMonitoringStatsAnomalies.
        :param deployed_model_id: The deployed_model_id of this GoogleCloudAiplatformV1ModelMonitoringStatsAnomalies.
        :param feature_stats: The feature_stats of this GoogleCloudAiplatformV1ModelMonitoringStatsAnomalies.
        :param objective: The objective of this GoogleCloudAiplatformV1ModelMonitoringStatsAnomalies.
        """
        self.openapi_types = {
            'anomaly_count': int,
            'deployed_model_id': str,
            'feature_stats': List[GoogleCloudAiplatformV1ModelMonitoringStatsAnomaliesFeatureHistoricStatsAnomalies],
            'objective': str
        }

        self.attribute_map = {
            'anomaly_count': 'anomalyCount',
            'deployed_model_id': 'deployedModelId',
            'feature_stats': 'featureStats',
            'objective': 'objective'
        }

        self._anomaly_count = anomaly_count
        self._deployed_model_id = deployed_model_id
        self._feature_stats = feature_stats
        self._objective = objective

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudAiplatformV1ModelMonitoringStatsAnomalies':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudAiplatformV1ModelMonitoringStatsAnomalies of this GoogleCloudAiplatformV1ModelMonitoringStatsAnomalies.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def anomaly_count(self):
        """Gets the anomaly_count of this GoogleCloudAiplatformV1ModelMonitoringStatsAnomalies.

        Number of anomalies within all stats.

        :return: The anomaly_count of this GoogleCloudAiplatformV1ModelMonitoringStatsAnomalies.
        :rtype: int
        """
        return self._anomaly_count

    @anomaly_count.setter
    def anomaly_count(self, anomaly_count):
        """Sets the anomaly_count of this GoogleCloudAiplatformV1ModelMonitoringStatsAnomalies.

        Number of anomalies within all stats.

        :param anomaly_count: The anomaly_count of this GoogleCloudAiplatformV1ModelMonitoringStatsAnomalies.
        :type anomaly_count: int
        """

        self._anomaly_count = anomaly_count

    @property
    def deployed_model_id(self):
        """Gets the deployed_model_id of this GoogleCloudAiplatformV1ModelMonitoringStatsAnomalies.

        Deployed Model ID.

        :return: The deployed_model_id of this GoogleCloudAiplatformV1ModelMonitoringStatsAnomalies.
        :rtype: str
        """
        return self._deployed_model_id

    @deployed_model_id.setter
    def deployed_model_id(self, deployed_model_id):
        """Sets the deployed_model_id of this GoogleCloudAiplatformV1ModelMonitoringStatsAnomalies.

        Deployed Model ID.

        :param deployed_model_id: The deployed_model_id of this GoogleCloudAiplatformV1ModelMonitoringStatsAnomalies.
        :type deployed_model_id: str
        """

        self._deployed_model_id = deployed_model_id

    @property
    def feature_stats(self):
        """Gets the feature_stats of this GoogleCloudAiplatformV1ModelMonitoringStatsAnomalies.

        A list of historical Stats and Anomalies generated for all Features.

        :return: The feature_stats of this GoogleCloudAiplatformV1ModelMonitoringStatsAnomalies.
        :rtype: List[GoogleCloudAiplatformV1ModelMonitoringStatsAnomaliesFeatureHistoricStatsAnomalies]
        """
        return self._feature_stats

    @feature_stats.setter
    def feature_stats(self, feature_stats):
        """Sets the feature_stats of this GoogleCloudAiplatformV1ModelMonitoringStatsAnomalies.

        A list of historical Stats and Anomalies generated for all Features.

        :param feature_stats: The feature_stats of this GoogleCloudAiplatformV1ModelMonitoringStatsAnomalies.
        :type feature_stats: List[GoogleCloudAiplatformV1ModelMonitoringStatsAnomaliesFeatureHistoricStatsAnomalies]
        """

        self._feature_stats = feature_stats

    @property
    def objective(self):
        """Gets the objective of this GoogleCloudAiplatformV1ModelMonitoringStatsAnomalies.

        Model Monitoring Objective those stats and anomalies belonging to.

        :return: The objective of this GoogleCloudAiplatformV1ModelMonitoringStatsAnomalies.
        :rtype: str
        """
        return self._objective

    @objective.setter
    def objective(self, objective):
        """Sets the objective of this GoogleCloudAiplatformV1ModelMonitoringStatsAnomalies.

        Model Monitoring Objective those stats and anomalies belonging to.

        :param objective: The objective of this GoogleCloudAiplatformV1ModelMonitoringStatsAnomalies.
        :type objective: str
        """
        allowed_values = ["MODEL_DEPLOYMENT_MONITORING_OBJECTIVE_TYPE_UNSPECIFIED", "RAW_FEATURE_SKEW", "RAW_FEATURE_DRIFT", "FEATURE_ATTRIBUTION_SKEW", "FEATURE_ATTRIBUTION_DRIFT"]  # noqa: E501
        if objective not in allowed_values:
            raise ValueError(
                "Invalid value for `objective` ({0}), must be one of {1}"
                .format(objective, allowed_values)
            )

        self._objective = objective
