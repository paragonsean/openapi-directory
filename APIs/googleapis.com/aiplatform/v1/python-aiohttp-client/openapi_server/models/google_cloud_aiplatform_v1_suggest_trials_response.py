# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_aiplatform_v1_trial import GoogleCloudAiplatformV1Trial
from openapi_server import util


class GoogleCloudAiplatformV1SuggestTrialsResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, end_time: str=None, start_time: str=None, study_state: str=None, trials: List[GoogleCloudAiplatformV1Trial]=None):
        """GoogleCloudAiplatformV1SuggestTrialsResponse - a model defined in OpenAPI

        :param end_time: The end_time of this GoogleCloudAiplatformV1SuggestTrialsResponse.
        :param start_time: The start_time of this GoogleCloudAiplatformV1SuggestTrialsResponse.
        :param study_state: The study_state of this GoogleCloudAiplatformV1SuggestTrialsResponse.
        :param trials: The trials of this GoogleCloudAiplatformV1SuggestTrialsResponse.
        """
        self.openapi_types = {
            'end_time': str,
            'start_time': str,
            'study_state': str,
            'trials': List[GoogleCloudAiplatformV1Trial]
        }

        self.attribute_map = {
            'end_time': 'endTime',
            'start_time': 'startTime',
            'study_state': 'studyState',
            'trials': 'trials'
        }

        self._end_time = end_time
        self._start_time = start_time
        self._study_state = study_state
        self._trials = trials

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudAiplatformV1SuggestTrialsResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudAiplatformV1SuggestTrialsResponse of this GoogleCloudAiplatformV1SuggestTrialsResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def end_time(self):
        """Gets the end_time of this GoogleCloudAiplatformV1SuggestTrialsResponse.

        The time at which operation processing completed.

        :return: The end_time of this GoogleCloudAiplatformV1SuggestTrialsResponse.
        :rtype: str
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this GoogleCloudAiplatformV1SuggestTrialsResponse.

        The time at which operation processing completed.

        :param end_time: The end_time of this GoogleCloudAiplatformV1SuggestTrialsResponse.
        :type end_time: str
        """

        self._end_time = end_time

    @property
    def start_time(self):
        """Gets the start_time of this GoogleCloudAiplatformV1SuggestTrialsResponse.

        The time at which the operation was started.

        :return: The start_time of this GoogleCloudAiplatformV1SuggestTrialsResponse.
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this GoogleCloudAiplatformV1SuggestTrialsResponse.

        The time at which the operation was started.

        :param start_time: The start_time of this GoogleCloudAiplatformV1SuggestTrialsResponse.
        :type start_time: str
        """

        self._start_time = start_time

    @property
    def study_state(self):
        """Gets the study_state of this GoogleCloudAiplatformV1SuggestTrialsResponse.

        The state of the Study.

        :return: The study_state of this GoogleCloudAiplatformV1SuggestTrialsResponse.
        :rtype: str
        """
        return self._study_state

    @study_state.setter
    def study_state(self, study_state):
        """Sets the study_state of this GoogleCloudAiplatformV1SuggestTrialsResponse.

        The state of the Study.

        :param study_state: The study_state of this GoogleCloudAiplatformV1SuggestTrialsResponse.
        :type study_state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "ACTIVE", "INACTIVE", "COMPLETED"]  # noqa: E501
        if study_state not in allowed_values:
            raise ValueError(
                "Invalid value for `study_state` ({0}), must be one of {1}"
                .format(study_state, allowed_values)
            )

        self._study_state = study_state

    @property
    def trials(self):
        """Gets the trials of this GoogleCloudAiplatformV1SuggestTrialsResponse.

        A list of Trials.

        :return: The trials of this GoogleCloudAiplatformV1SuggestTrialsResponse.
        :rtype: List[GoogleCloudAiplatformV1Trial]
        """
        return self._trials

    @trials.setter
    def trials(self, trials):
        """Sets the trials of this GoogleCloudAiplatformV1SuggestTrialsResponse.

        A list of Trials.

        :param trials: The trials of this GoogleCloudAiplatformV1SuggestTrialsResponse.
        :type trials: List[GoogleCloudAiplatformV1Trial]
        """

        self._trials = trials
