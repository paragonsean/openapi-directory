# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleCloudAiplatformV1SchemaTrainingjobDefinitionAutoMlImageClassificationMetadata(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cost_milli_node_hours: str=None, successful_stop_reason: str=None):
        """GoogleCloudAiplatformV1SchemaTrainingjobDefinitionAutoMlImageClassificationMetadata - a model defined in OpenAPI

        :param cost_milli_node_hours: The cost_milli_node_hours of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionAutoMlImageClassificationMetadata.
        :param successful_stop_reason: The successful_stop_reason of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionAutoMlImageClassificationMetadata.
        """
        self.openapi_types = {
            'cost_milli_node_hours': str,
            'successful_stop_reason': str
        }

        self.attribute_map = {
            'cost_milli_node_hours': 'costMilliNodeHours',
            'successful_stop_reason': 'successfulStopReason'
        }

        self._cost_milli_node_hours = cost_milli_node_hours
        self._successful_stop_reason = successful_stop_reason

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudAiplatformV1SchemaTrainingjobDefinitionAutoMlImageClassificationMetadata':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudAiplatformV1SchemaTrainingjobDefinitionAutoMlImageClassificationMetadata of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionAutoMlImageClassificationMetadata.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cost_milli_node_hours(self):
        """Gets the cost_milli_node_hours of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionAutoMlImageClassificationMetadata.

        The actual training cost of creating this model, expressed in milli node hours, i.e. 1,000 value in this field means 1 node hour. Guaranteed to not exceed inputs.budgetMilliNodeHours.

        :return: The cost_milli_node_hours of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionAutoMlImageClassificationMetadata.
        :rtype: str
        """
        return self._cost_milli_node_hours

    @cost_milli_node_hours.setter
    def cost_milli_node_hours(self, cost_milli_node_hours):
        """Sets the cost_milli_node_hours of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionAutoMlImageClassificationMetadata.

        The actual training cost of creating this model, expressed in milli node hours, i.e. 1,000 value in this field means 1 node hour. Guaranteed to not exceed inputs.budgetMilliNodeHours.

        :param cost_milli_node_hours: The cost_milli_node_hours of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionAutoMlImageClassificationMetadata.
        :type cost_milli_node_hours: str
        """

        self._cost_milli_node_hours = cost_milli_node_hours

    @property
    def successful_stop_reason(self):
        """Gets the successful_stop_reason of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionAutoMlImageClassificationMetadata.

        For successful job completions, this is the reason why the job has finished.

        :return: The successful_stop_reason of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionAutoMlImageClassificationMetadata.
        :rtype: str
        """
        return self._successful_stop_reason

    @successful_stop_reason.setter
    def successful_stop_reason(self, successful_stop_reason):
        """Sets the successful_stop_reason of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionAutoMlImageClassificationMetadata.

        For successful job completions, this is the reason why the job has finished.

        :param successful_stop_reason: The successful_stop_reason of this GoogleCloudAiplatformV1SchemaTrainingjobDefinitionAutoMlImageClassificationMetadata.
        :type successful_stop_reason: str
        """
        allowed_values = ["SUCCESSFUL_STOP_REASON_UNSPECIFIED", "BUDGET_REACHED", "MODEL_CONVERGED"]  # noqa: E501
        if successful_stop_reason not in allowed_values:
            raise ValueError(
                "Invalid value for `successful_stop_reason` ({0}), must be one of {1}"
                .format(successful_stop_reason, allowed_values)
            )

        self._successful_stop_reason = successful_stop_reason
