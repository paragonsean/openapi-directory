# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_aiplatform_v1_active_learning_config import GoogleCloudAiplatformV1ActiveLearningConfig
from openapi_server.models.google_cloud_aiplatform_v1_encryption_spec import GoogleCloudAiplatformV1EncryptionSpec
from openapi_server.models.google_rpc_status import GoogleRpcStatus
from openapi_server.models.google_type_money import GoogleTypeMoney
from openapi_server import util


class GoogleCloudAiplatformV1DataLabelingJob(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, active_learning_config: GoogleCloudAiplatformV1ActiveLearningConfig=None, annotation_labels: Dict[str, str]=None, create_time: str=None, current_spend: GoogleTypeMoney=None, datasets: List[str]=None, display_name: str=None, encryption_spec: GoogleCloudAiplatformV1EncryptionSpec=None, error: GoogleRpcStatus=None, inputs: object=None, inputs_schema_uri: str=None, instruction_uri: str=None, labeler_count: int=None, labeling_progress: int=None, labels: Dict[str, str]=None, name: str=None, specialist_pools: List[str]=None, state: str=None, update_time: str=None):
        """GoogleCloudAiplatformV1DataLabelingJob - a model defined in OpenAPI

        :param active_learning_config: The active_learning_config of this GoogleCloudAiplatformV1DataLabelingJob.
        :param annotation_labels: The annotation_labels of this GoogleCloudAiplatformV1DataLabelingJob.
        :param create_time: The create_time of this GoogleCloudAiplatformV1DataLabelingJob.
        :param current_spend: The current_spend of this GoogleCloudAiplatformV1DataLabelingJob.
        :param datasets: The datasets of this GoogleCloudAiplatformV1DataLabelingJob.
        :param display_name: The display_name of this GoogleCloudAiplatformV1DataLabelingJob.
        :param encryption_spec: The encryption_spec of this GoogleCloudAiplatformV1DataLabelingJob.
        :param error: The error of this GoogleCloudAiplatformV1DataLabelingJob.
        :param inputs: The inputs of this GoogleCloudAiplatformV1DataLabelingJob.
        :param inputs_schema_uri: The inputs_schema_uri of this GoogleCloudAiplatformV1DataLabelingJob.
        :param instruction_uri: The instruction_uri of this GoogleCloudAiplatformV1DataLabelingJob.
        :param labeler_count: The labeler_count of this GoogleCloudAiplatformV1DataLabelingJob.
        :param labeling_progress: The labeling_progress of this GoogleCloudAiplatformV1DataLabelingJob.
        :param labels: The labels of this GoogleCloudAiplatformV1DataLabelingJob.
        :param name: The name of this GoogleCloudAiplatformV1DataLabelingJob.
        :param specialist_pools: The specialist_pools of this GoogleCloudAiplatformV1DataLabelingJob.
        :param state: The state of this GoogleCloudAiplatformV1DataLabelingJob.
        :param update_time: The update_time of this GoogleCloudAiplatformV1DataLabelingJob.
        """
        self.openapi_types = {
            'active_learning_config': GoogleCloudAiplatformV1ActiveLearningConfig,
            'annotation_labels': Dict[str, str],
            'create_time': str,
            'current_spend': GoogleTypeMoney,
            'datasets': List[str],
            'display_name': str,
            'encryption_spec': GoogleCloudAiplatformV1EncryptionSpec,
            'error': GoogleRpcStatus,
            'inputs': object,
            'inputs_schema_uri': str,
            'instruction_uri': str,
            'labeler_count': int,
            'labeling_progress': int,
            'labels': Dict[str, str],
            'name': str,
            'specialist_pools': List[str],
            'state': str,
            'update_time': str
        }

        self.attribute_map = {
            'active_learning_config': 'activeLearningConfig',
            'annotation_labels': 'annotationLabels',
            'create_time': 'createTime',
            'current_spend': 'currentSpend',
            'datasets': 'datasets',
            'display_name': 'displayName',
            'encryption_spec': 'encryptionSpec',
            'error': 'error',
            'inputs': 'inputs',
            'inputs_schema_uri': 'inputsSchemaUri',
            'instruction_uri': 'instructionUri',
            'labeler_count': 'labelerCount',
            'labeling_progress': 'labelingProgress',
            'labels': 'labels',
            'name': 'name',
            'specialist_pools': 'specialistPools',
            'state': 'state',
            'update_time': 'updateTime'
        }

        self._active_learning_config = active_learning_config
        self._annotation_labels = annotation_labels
        self._create_time = create_time
        self._current_spend = current_spend
        self._datasets = datasets
        self._display_name = display_name
        self._encryption_spec = encryption_spec
        self._error = error
        self._inputs = inputs
        self._inputs_schema_uri = inputs_schema_uri
        self._instruction_uri = instruction_uri
        self._labeler_count = labeler_count
        self._labeling_progress = labeling_progress
        self._labels = labels
        self._name = name
        self._specialist_pools = specialist_pools
        self._state = state
        self._update_time = update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudAiplatformV1DataLabelingJob':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudAiplatformV1DataLabelingJob of this GoogleCloudAiplatformV1DataLabelingJob.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def active_learning_config(self):
        """Gets the active_learning_config of this GoogleCloudAiplatformV1DataLabelingJob.


        :return: The active_learning_config of this GoogleCloudAiplatformV1DataLabelingJob.
        :rtype: GoogleCloudAiplatformV1ActiveLearningConfig
        """
        return self._active_learning_config

    @active_learning_config.setter
    def active_learning_config(self, active_learning_config):
        """Sets the active_learning_config of this GoogleCloudAiplatformV1DataLabelingJob.


        :param active_learning_config: The active_learning_config of this GoogleCloudAiplatformV1DataLabelingJob.
        :type active_learning_config: GoogleCloudAiplatformV1ActiveLearningConfig
        """

        self._active_learning_config = active_learning_config

    @property
    def annotation_labels(self):
        """Gets the annotation_labels of this GoogleCloudAiplatformV1DataLabelingJob.

        Labels to assign to annotations generated by this DataLabelingJob. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. See https://goo.gl/xmQnxf for more information and examples of labels. System reserved label keys are prefixed with \"aiplatform.googleapis.com/\" and are immutable.

        :return: The annotation_labels of this GoogleCloudAiplatformV1DataLabelingJob.
        :rtype: Dict[str, str]
        """
        return self._annotation_labels

    @annotation_labels.setter
    def annotation_labels(self, annotation_labels):
        """Sets the annotation_labels of this GoogleCloudAiplatformV1DataLabelingJob.

        Labels to assign to annotations generated by this DataLabelingJob. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. See https://goo.gl/xmQnxf for more information and examples of labels. System reserved label keys are prefixed with \"aiplatform.googleapis.com/\" and are immutable.

        :param annotation_labels: The annotation_labels of this GoogleCloudAiplatformV1DataLabelingJob.
        :type annotation_labels: Dict[str, str]
        """

        self._annotation_labels = annotation_labels

    @property
    def create_time(self):
        """Gets the create_time of this GoogleCloudAiplatformV1DataLabelingJob.

        Output only. Timestamp when this DataLabelingJob was created.

        :return: The create_time of this GoogleCloudAiplatformV1DataLabelingJob.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this GoogleCloudAiplatformV1DataLabelingJob.

        Output only. Timestamp when this DataLabelingJob was created.

        :param create_time: The create_time of this GoogleCloudAiplatformV1DataLabelingJob.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def current_spend(self):
        """Gets the current_spend of this GoogleCloudAiplatformV1DataLabelingJob.


        :return: The current_spend of this GoogleCloudAiplatformV1DataLabelingJob.
        :rtype: GoogleTypeMoney
        """
        return self._current_spend

    @current_spend.setter
    def current_spend(self, current_spend):
        """Sets the current_spend of this GoogleCloudAiplatformV1DataLabelingJob.


        :param current_spend: The current_spend of this GoogleCloudAiplatformV1DataLabelingJob.
        :type current_spend: GoogleTypeMoney
        """

        self._current_spend = current_spend

    @property
    def datasets(self):
        """Gets the datasets of this GoogleCloudAiplatformV1DataLabelingJob.

        Required. Dataset resource names. Right now we only support labeling from a single Dataset. Format: `projects/{project}/locations/{location}/datasets/{dataset}`

        :return: The datasets of this GoogleCloudAiplatformV1DataLabelingJob.
        :rtype: List[str]
        """
        return self._datasets

    @datasets.setter
    def datasets(self, datasets):
        """Sets the datasets of this GoogleCloudAiplatformV1DataLabelingJob.

        Required. Dataset resource names. Right now we only support labeling from a single Dataset. Format: `projects/{project}/locations/{location}/datasets/{dataset}`

        :param datasets: The datasets of this GoogleCloudAiplatformV1DataLabelingJob.
        :type datasets: List[str]
        """

        self._datasets = datasets

    @property
    def display_name(self):
        """Gets the display_name of this GoogleCloudAiplatformV1DataLabelingJob.

        Required. The user-defined name of the DataLabelingJob. The name can be up to 128 characters long and can consist of any UTF-8 characters. Display name of a DataLabelingJob.

        :return: The display_name of this GoogleCloudAiplatformV1DataLabelingJob.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this GoogleCloudAiplatformV1DataLabelingJob.

        Required. The user-defined name of the DataLabelingJob. The name can be up to 128 characters long and can consist of any UTF-8 characters. Display name of a DataLabelingJob.

        :param display_name: The display_name of this GoogleCloudAiplatformV1DataLabelingJob.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def encryption_spec(self):
        """Gets the encryption_spec of this GoogleCloudAiplatformV1DataLabelingJob.


        :return: The encryption_spec of this GoogleCloudAiplatformV1DataLabelingJob.
        :rtype: GoogleCloudAiplatformV1EncryptionSpec
        """
        return self._encryption_spec

    @encryption_spec.setter
    def encryption_spec(self, encryption_spec):
        """Sets the encryption_spec of this GoogleCloudAiplatformV1DataLabelingJob.


        :param encryption_spec: The encryption_spec of this GoogleCloudAiplatformV1DataLabelingJob.
        :type encryption_spec: GoogleCloudAiplatformV1EncryptionSpec
        """

        self._encryption_spec = encryption_spec

    @property
    def error(self):
        """Gets the error of this GoogleCloudAiplatformV1DataLabelingJob.


        :return: The error of this GoogleCloudAiplatformV1DataLabelingJob.
        :rtype: GoogleRpcStatus
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this GoogleCloudAiplatformV1DataLabelingJob.


        :param error: The error of this GoogleCloudAiplatformV1DataLabelingJob.
        :type error: GoogleRpcStatus
        """

        self._error = error

    @property
    def inputs(self):
        """Gets the inputs of this GoogleCloudAiplatformV1DataLabelingJob.

        Required. Input config parameters for the DataLabelingJob.

        :return: The inputs of this GoogleCloudAiplatformV1DataLabelingJob.
        :rtype: object
        """
        return self._inputs

    @inputs.setter
    def inputs(self, inputs):
        """Sets the inputs of this GoogleCloudAiplatformV1DataLabelingJob.

        Required. Input config parameters for the DataLabelingJob.

        :param inputs: The inputs of this GoogleCloudAiplatformV1DataLabelingJob.
        :type inputs: object
        """

        self._inputs = inputs

    @property
    def inputs_schema_uri(self):
        """Gets the inputs_schema_uri of this GoogleCloudAiplatformV1DataLabelingJob.

        Required. Points to a YAML file stored on Google Cloud Storage describing the config for a specific type of DataLabelingJob. The schema files that can be used here are found in the https://storage.googleapis.com/google-cloud-aiplatform bucket in the /schema/datalabelingjob/inputs/ folder.

        :return: The inputs_schema_uri of this GoogleCloudAiplatformV1DataLabelingJob.
        :rtype: str
        """
        return self._inputs_schema_uri

    @inputs_schema_uri.setter
    def inputs_schema_uri(self, inputs_schema_uri):
        """Sets the inputs_schema_uri of this GoogleCloudAiplatformV1DataLabelingJob.

        Required. Points to a YAML file stored on Google Cloud Storage describing the config for a specific type of DataLabelingJob. The schema files that can be used here are found in the https://storage.googleapis.com/google-cloud-aiplatform bucket in the /schema/datalabelingjob/inputs/ folder.

        :param inputs_schema_uri: The inputs_schema_uri of this GoogleCloudAiplatformV1DataLabelingJob.
        :type inputs_schema_uri: str
        """

        self._inputs_schema_uri = inputs_schema_uri

    @property
    def instruction_uri(self):
        """Gets the instruction_uri of this GoogleCloudAiplatformV1DataLabelingJob.

        Required. The Google Cloud Storage location of the instruction pdf. This pdf is shared with labelers, and provides detailed description on how to label DataItems in Datasets.

        :return: The instruction_uri of this GoogleCloudAiplatformV1DataLabelingJob.
        :rtype: str
        """
        return self._instruction_uri

    @instruction_uri.setter
    def instruction_uri(self, instruction_uri):
        """Sets the instruction_uri of this GoogleCloudAiplatformV1DataLabelingJob.

        Required. The Google Cloud Storage location of the instruction pdf. This pdf is shared with labelers, and provides detailed description on how to label DataItems in Datasets.

        :param instruction_uri: The instruction_uri of this GoogleCloudAiplatformV1DataLabelingJob.
        :type instruction_uri: str
        """

        self._instruction_uri = instruction_uri

    @property
    def labeler_count(self):
        """Gets the labeler_count of this GoogleCloudAiplatformV1DataLabelingJob.

        Required. Number of labelers to work on each DataItem.

        :return: The labeler_count of this GoogleCloudAiplatformV1DataLabelingJob.
        :rtype: int
        """
        return self._labeler_count

    @labeler_count.setter
    def labeler_count(self, labeler_count):
        """Sets the labeler_count of this GoogleCloudAiplatformV1DataLabelingJob.

        Required. Number of labelers to work on each DataItem.

        :param labeler_count: The labeler_count of this GoogleCloudAiplatformV1DataLabelingJob.
        :type labeler_count: int
        """

        self._labeler_count = labeler_count

    @property
    def labeling_progress(self):
        """Gets the labeling_progress of this GoogleCloudAiplatformV1DataLabelingJob.

        Output only. Current labeling job progress percentage scaled in interval [0, 100], indicating the percentage of DataItems that has been finished.

        :return: The labeling_progress of this GoogleCloudAiplatformV1DataLabelingJob.
        :rtype: int
        """
        return self._labeling_progress

    @labeling_progress.setter
    def labeling_progress(self, labeling_progress):
        """Sets the labeling_progress of this GoogleCloudAiplatformV1DataLabelingJob.

        Output only. Current labeling job progress percentage scaled in interval [0, 100], indicating the percentage of DataItems that has been finished.

        :param labeling_progress: The labeling_progress of this GoogleCloudAiplatformV1DataLabelingJob.
        :type labeling_progress: int
        """

        self._labeling_progress = labeling_progress

    @property
    def labels(self):
        """Gets the labels of this GoogleCloudAiplatformV1DataLabelingJob.

        The labels with user-defined metadata to organize your DataLabelingJobs. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. See https://goo.gl/xmQnxf for more information and examples of labels. System reserved label keys are prefixed with \"aiplatform.googleapis.com/\" and are immutable. Following system labels exist for each DataLabelingJob: * \"aiplatform.googleapis.com/schema\": output only, its value is the inputs_schema's title.

        :return: The labels of this GoogleCloudAiplatformV1DataLabelingJob.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this GoogleCloudAiplatformV1DataLabelingJob.

        The labels with user-defined metadata to organize your DataLabelingJobs. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. See https://goo.gl/xmQnxf for more information and examples of labels. System reserved label keys are prefixed with \"aiplatform.googleapis.com/\" and are immutable. Following system labels exist for each DataLabelingJob: * \"aiplatform.googleapis.com/schema\": output only, its value is the inputs_schema's title.

        :param labels: The labels of this GoogleCloudAiplatformV1DataLabelingJob.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def name(self):
        """Gets the name of this GoogleCloudAiplatformV1DataLabelingJob.

        Output only. Resource name of the DataLabelingJob.

        :return: The name of this GoogleCloudAiplatformV1DataLabelingJob.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GoogleCloudAiplatformV1DataLabelingJob.

        Output only. Resource name of the DataLabelingJob.

        :param name: The name of this GoogleCloudAiplatformV1DataLabelingJob.
        :type name: str
        """

        self._name = name

    @property
    def specialist_pools(self):
        """Gets the specialist_pools of this GoogleCloudAiplatformV1DataLabelingJob.

        The SpecialistPools' resource names associated with this job.

        :return: The specialist_pools of this GoogleCloudAiplatformV1DataLabelingJob.
        :rtype: List[str]
        """
        return self._specialist_pools

    @specialist_pools.setter
    def specialist_pools(self, specialist_pools):
        """Sets the specialist_pools of this GoogleCloudAiplatformV1DataLabelingJob.

        The SpecialistPools' resource names associated with this job.

        :param specialist_pools: The specialist_pools of this GoogleCloudAiplatformV1DataLabelingJob.
        :type specialist_pools: List[str]
        """

        self._specialist_pools = specialist_pools

    @property
    def state(self):
        """Gets the state of this GoogleCloudAiplatformV1DataLabelingJob.

        Output only. The detailed state of the job.

        :return: The state of this GoogleCloudAiplatformV1DataLabelingJob.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this GoogleCloudAiplatformV1DataLabelingJob.

        Output only. The detailed state of the job.

        :param state: The state of this GoogleCloudAiplatformV1DataLabelingJob.
        :type state: str
        """
        allowed_values = ["JOB_STATE_UNSPECIFIED", "JOB_STATE_QUEUED", "JOB_STATE_PENDING", "JOB_STATE_RUNNING", "JOB_STATE_SUCCEEDED", "JOB_STATE_FAILED", "JOB_STATE_CANCELLING", "JOB_STATE_CANCELLED", "JOB_STATE_PAUSED", "JOB_STATE_EXPIRED", "JOB_STATE_UPDATING", "JOB_STATE_PARTIALLY_SUCCEEDED"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def update_time(self):
        """Gets the update_time of this GoogleCloudAiplatformV1DataLabelingJob.

        Output only. Timestamp when this DataLabelingJob was updated most recently.

        :return: The update_time of this GoogleCloudAiplatformV1DataLabelingJob.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this GoogleCloudAiplatformV1DataLabelingJob.

        Output only. Timestamp when this DataLabelingJob was updated most recently.

        :param update_time: The update_time of this GoogleCloudAiplatformV1DataLabelingJob.
        :type update_time: str
        """

        self._update_time = update_time
