# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.learning_genai_root_codey_checkpoint import LearningGenaiRootCodeyCheckpoint
from openapi_server import util


class LearningGenaiRootCodeyCompletionMetadata(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, checkpoints: List[LearningGenaiRootCodeyCheckpoint]=None):
        """LearningGenaiRootCodeyCompletionMetadata - a model defined in OpenAPI

        :param checkpoints: The checkpoints of this LearningGenaiRootCodeyCompletionMetadata.
        """
        self.openapi_types = {
            'checkpoints': List[LearningGenaiRootCodeyCheckpoint]
        }

        self.attribute_map = {
            'checkpoints': 'checkpoints'
        }

        self._checkpoints = checkpoints

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LearningGenaiRootCodeyCompletionMetadata':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LearningGenaiRootCodeyCompletionMetadata of this LearningGenaiRootCodeyCompletionMetadata.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def checkpoints(self):
        """Gets the checkpoints of this LearningGenaiRootCodeyCompletionMetadata.


        :return: The checkpoints of this LearningGenaiRootCodeyCompletionMetadata.
        :rtype: List[LearningGenaiRootCodeyCheckpoint]
        """
        return self._checkpoints

    @checkpoints.setter
    def checkpoints(self, checkpoints):
        """Sets the checkpoints of this LearningGenaiRootCodeyCompletionMetadata.


        :param checkpoints: The checkpoints of this LearningGenaiRootCodeyCompletionMetadata.
        :type checkpoints: List[LearningGenaiRootCodeyCheckpoint]
        """

        self._checkpoints = checkpoints
