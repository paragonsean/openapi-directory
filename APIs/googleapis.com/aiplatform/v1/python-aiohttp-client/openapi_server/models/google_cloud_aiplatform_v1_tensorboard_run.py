# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleCloudAiplatformV1TensorboardRun(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, create_time: str=None, description: str=None, display_name: str=None, etag: str=None, labels: Dict[str, str]=None, name: str=None, update_time: str=None):
        """GoogleCloudAiplatformV1TensorboardRun - a model defined in OpenAPI

        :param create_time: The create_time of this GoogleCloudAiplatformV1TensorboardRun.
        :param description: The description of this GoogleCloudAiplatformV1TensorboardRun.
        :param display_name: The display_name of this GoogleCloudAiplatformV1TensorboardRun.
        :param etag: The etag of this GoogleCloudAiplatformV1TensorboardRun.
        :param labels: The labels of this GoogleCloudAiplatformV1TensorboardRun.
        :param name: The name of this GoogleCloudAiplatformV1TensorboardRun.
        :param update_time: The update_time of this GoogleCloudAiplatformV1TensorboardRun.
        """
        self.openapi_types = {
            'create_time': str,
            'description': str,
            'display_name': str,
            'etag': str,
            'labels': Dict[str, str],
            'name': str,
            'update_time': str
        }

        self.attribute_map = {
            'create_time': 'createTime',
            'description': 'description',
            'display_name': 'displayName',
            'etag': 'etag',
            'labels': 'labels',
            'name': 'name',
            'update_time': 'updateTime'
        }

        self._create_time = create_time
        self._description = description
        self._display_name = display_name
        self._etag = etag
        self._labels = labels
        self._name = name
        self._update_time = update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudAiplatformV1TensorboardRun':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudAiplatformV1TensorboardRun of this GoogleCloudAiplatformV1TensorboardRun.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def create_time(self):
        """Gets the create_time of this GoogleCloudAiplatformV1TensorboardRun.

        Output only. Timestamp when this TensorboardRun was created.

        :return: The create_time of this GoogleCloudAiplatformV1TensorboardRun.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this GoogleCloudAiplatformV1TensorboardRun.

        Output only. Timestamp when this TensorboardRun was created.

        :param create_time: The create_time of this GoogleCloudAiplatformV1TensorboardRun.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def description(self):
        """Gets the description of this GoogleCloudAiplatformV1TensorboardRun.

        Description of this TensorboardRun.

        :return: The description of this GoogleCloudAiplatformV1TensorboardRun.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this GoogleCloudAiplatformV1TensorboardRun.

        Description of this TensorboardRun.

        :param description: The description of this GoogleCloudAiplatformV1TensorboardRun.
        :type description: str
        """

        self._description = description

    @property
    def display_name(self):
        """Gets the display_name of this GoogleCloudAiplatformV1TensorboardRun.

        Required. User provided name of this TensorboardRun. This value must be unique among all TensorboardRuns belonging to the same parent TensorboardExperiment.

        :return: The display_name of this GoogleCloudAiplatformV1TensorboardRun.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this GoogleCloudAiplatformV1TensorboardRun.

        Required. User provided name of this TensorboardRun. This value must be unique among all TensorboardRuns belonging to the same parent TensorboardExperiment.

        :param display_name: The display_name of this GoogleCloudAiplatformV1TensorboardRun.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def etag(self):
        """Gets the etag of this GoogleCloudAiplatformV1TensorboardRun.

        Used to perform a consistent read-modify-write updates. If not set, a blind \"overwrite\" update happens.

        :return: The etag of this GoogleCloudAiplatformV1TensorboardRun.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this GoogleCloudAiplatformV1TensorboardRun.

        Used to perform a consistent read-modify-write updates. If not set, a blind \"overwrite\" update happens.

        :param etag: The etag of this GoogleCloudAiplatformV1TensorboardRun.
        :type etag: str
        """

        self._etag = etag

    @property
    def labels(self):
        """Gets the labels of this GoogleCloudAiplatformV1TensorboardRun.

        The labels with user-defined metadata to organize your TensorboardRuns. This field will be used to filter and visualize Runs in the Tensorboard UI. For example, a Vertex AI training job can set a label aiplatform.googleapis.com/training_job_id=xxxxx to all the runs created within that job. An end user can set a label experiment_id=xxxxx for all the runs produced in a Jupyter notebook. These runs can be grouped by a label value and visualized together in the Tensorboard UI. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. No more than 64 user labels can be associated with one TensorboardRun (System labels are excluded). See https://goo.gl/xmQnxf for more information and examples of labels. System reserved label keys are prefixed with \"aiplatform.googleapis.com/\" and are immutable.

        :return: The labels of this GoogleCloudAiplatformV1TensorboardRun.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this GoogleCloudAiplatformV1TensorboardRun.

        The labels with user-defined metadata to organize your TensorboardRuns. This field will be used to filter and visualize Runs in the Tensorboard UI. For example, a Vertex AI training job can set a label aiplatform.googleapis.com/training_job_id=xxxxx to all the runs created within that job. An end user can set a label experiment_id=xxxxx for all the runs produced in a Jupyter notebook. These runs can be grouped by a label value and visualized together in the Tensorboard UI. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. No more than 64 user labels can be associated with one TensorboardRun (System labels are excluded). See https://goo.gl/xmQnxf for more information and examples of labels. System reserved label keys are prefixed with \"aiplatform.googleapis.com/\" and are immutable.

        :param labels: The labels of this GoogleCloudAiplatformV1TensorboardRun.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def name(self):
        """Gets the name of this GoogleCloudAiplatformV1TensorboardRun.

        Output only. Name of the TensorboardRun. Format: `projects/{project}/locations/{location}/tensorboards/{tensorboard}/experiments/{experiment}/runs/{run}`

        :return: The name of this GoogleCloudAiplatformV1TensorboardRun.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GoogleCloudAiplatformV1TensorboardRun.

        Output only. Name of the TensorboardRun. Format: `projects/{project}/locations/{location}/tensorboards/{tensorboard}/experiments/{experiment}/runs/{run}`

        :param name: The name of this GoogleCloudAiplatformV1TensorboardRun.
        :type name: str
        """

        self._name = name

    @property
    def update_time(self):
        """Gets the update_time of this GoogleCloudAiplatformV1TensorboardRun.

        Output only. Timestamp when this TensorboardRun was last updated.

        :return: The update_time of this GoogleCloudAiplatformV1TensorboardRun.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this GoogleCloudAiplatformV1TensorboardRun.

        Output only. Timestamp when this TensorboardRun was last updated.

        :param update_time: The update_time of this GoogleCloudAiplatformV1TensorboardRun.
        :type update_time: str
        """

        self._update_time = update_time
