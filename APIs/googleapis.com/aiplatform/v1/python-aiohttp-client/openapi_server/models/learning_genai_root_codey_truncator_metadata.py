# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LearningGenaiRootCodeyTruncatorMetadata(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cutoff_index: int=None, truncated_text: str=None):
        """LearningGenaiRootCodeyTruncatorMetadata - a model defined in OpenAPI

        :param cutoff_index: The cutoff_index of this LearningGenaiRootCodeyTruncatorMetadata.
        :param truncated_text: The truncated_text of this LearningGenaiRootCodeyTruncatorMetadata.
        """
        self.openapi_types = {
            'cutoff_index': int,
            'truncated_text': str
        }

        self.attribute_map = {
            'cutoff_index': 'cutoffIndex',
            'truncated_text': 'truncatedText'
        }

        self._cutoff_index = cutoff_index
        self._truncated_text = truncated_text

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LearningGenaiRootCodeyTruncatorMetadata':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LearningGenaiRootCodeyTruncatorMetadata of this LearningGenaiRootCodeyTruncatorMetadata.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cutoff_index(self):
        """Gets the cutoff_index of this LearningGenaiRootCodeyTruncatorMetadata.

        Index of the current sample that trims off truncated text.

        :return: The cutoff_index of this LearningGenaiRootCodeyTruncatorMetadata.
        :rtype: int
        """
        return self._cutoff_index

    @cutoff_index.setter
    def cutoff_index(self, cutoff_index):
        """Sets the cutoff_index of this LearningGenaiRootCodeyTruncatorMetadata.

        Index of the current sample that trims off truncated text.

        :param cutoff_index: The cutoff_index of this LearningGenaiRootCodeyTruncatorMetadata.
        :type cutoff_index: int
        """

        self._cutoff_index = cutoff_index

    @property
    def truncated_text(self):
        """Gets the truncated_text of this LearningGenaiRootCodeyTruncatorMetadata.

        Text that was truncated at a specific checkpoint.

        :return: The truncated_text of this LearningGenaiRootCodeyTruncatorMetadata.
        :rtype: str
        """
        return self._truncated_text

    @truncated_text.setter
    def truncated_text(self, truncated_text):
        """Sets the truncated_text of this LearningGenaiRootCodeyTruncatorMetadata.

        Text that was truncated at a specific checkpoint.

        :param truncated_text: The truncated_text of this LearningGenaiRootCodeyTruncatorMetadata.
        :type truncated_text: str
        """

        self._truncated_text = truncated_text
