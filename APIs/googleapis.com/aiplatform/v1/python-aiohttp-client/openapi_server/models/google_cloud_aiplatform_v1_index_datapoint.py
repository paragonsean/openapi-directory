# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_aiplatform_v1_index_datapoint_crowding_tag import GoogleCloudAiplatformV1IndexDatapointCrowdingTag
from openapi_server.models.google_cloud_aiplatform_v1_index_datapoint_numeric_restriction import GoogleCloudAiplatformV1IndexDatapointNumericRestriction
from openapi_server.models.google_cloud_aiplatform_v1_index_datapoint_restriction import GoogleCloudAiplatformV1IndexDatapointRestriction
from openapi_server import util


class GoogleCloudAiplatformV1IndexDatapoint(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, crowding_tag: GoogleCloudAiplatformV1IndexDatapointCrowdingTag=None, datapoint_id: str=None, feature_vector: List[float]=None, numeric_restricts: List[GoogleCloudAiplatformV1IndexDatapointNumericRestriction]=None, restricts: List[GoogleCloudAiplatformV1IndexDatapointRestriction]=None):
        """GoogleCloudAiplatformV1IndexDatapoint - a model defined in OpenAPI

        :param crowding_tag: The crowding_tag of this GoogleCloudAiplatformV1IndexDatapoint.
        :param datapoint_id: The datapoint_id of this GoogleCloudAiplatformV1IndexDatapoint.
        :param feature_vector: The feature_vector of this GoogleCloudAiplatformV1IndexDatapoint.
        :param numeric_restricts: The numeric_restricts of this GoogleCloudAiplatformV1IndexDatapoint.
        :param restricts: The restricts of this GoogleCloudAiplatformV1IndexDatapoint.
        """
        self.openapi_types = {
            'crowding_tag': GoogleCloudAiplatformV1IndexDatapointCrowdingTag,
            'datapoint_id': str,
            'feature_vector': List[float],
            'numeric_restricts': List[GoogleCloudAiplatformV1IndexDatapointNumericRestriction],
            'restricts': List[GoogleCloudAiplatformV1IndexDatapointRestriction]
        }

        self.attribute_map = {
            'crowding_tag': 'crowdingTag',
            'datapoint_id': 'datapointId',
            'feature_vector': 'featureVector',
            'numeric_restricts': 'numericRestricts',
            'restricts': 'restricts'
        }

        self._crowding_tag = crowding_tag
        self._datapoint_id = datapoint_id
        self._feature_vector = feature_vector
        self._numeric_restricts = numeric_restricts
        self._restricts = restricts

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudAiplatformV1IndexDatapoint':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudAiplatformV1IndexDatapoint of this GoogleCloudAiplatformV1IndexDatapoint.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def crowding_tag(self):
        """Gets the crowding_tag of this GoogleCloudAiplatformV1IndexDatapoint.


        :return: The crowding_tag of this GoogleCloudAiplatformV1IndexDatapoint.
        :rtype: GoogleCloudAiplatformV1IndexDatapointCrowdingTag
        """
        return self._crowding_tag

    @crowding_tag.setter
    def crowding_tag(self, crowding_tag):
        """Sets the crowding_tag of this GoogleCloudAiplatformV1IndexDatapoint.


        :param crowding_tag: The crowding_tag of this GoogleCloudAiplatformV1IndexDatapoint.
        :type crowding_tag: GoogleCloudAiplatformV1IndexDatapointCrowdingTag
        """

        self._crowding_tag = crowding_tag

    @property
    def datapoint_id(self):
        """Gets the datapoint_id of this GoogleCloudAiplatformV1IndexDatapoint.

        Required. Unique identifier of the datapoint.

        :return: The datapoint_id of this GoogleCloudAiplatformV1IndexDatapoint.
        :rtype: str
        """
        return self._datapoint_id

    @datapoint_id.setter
    def datapoint_id(self, datapoint_id):
        """Sets the datapoint_id of this GoogleCloudAiplatformV1IndexDatapoint.

        Required. Unique identifier of the datapoint.

        :param datapoint_id: The datapoint_id of this GoogleCloudAiplatformV1IndexDatapoint.
        :type datapoint_id: str
        """

        self._datapoint_id = datapoint_id

    @property
    def feature_vector(self):
        """Gets the feature_vector of this GoogleCloudAiplatformV1IndexDatapoint.

        Required. Feature embedding vector. An array of numbers with the length of [NearestNeighborSearchConfig.dimensions].

        :return: The feature_vector of this GoogleCloudAiplatformV1IndexDatapoint.
        :rtype: List[float]
        """
        return self._feature_vector

    @feature_vector.setter
    def feature_vector(self, feature_vector):
        """Sets the feature_vector of this GoogleCloudAiplatformV1IndexDatapoint.

        Required. Feature embedding vector. An array of numbers with the length of [NearestNeighborSearchConfig.dimensions].

        :param feature_vector: The feature_vector of this GoogleCloudAiplatformV1IndexDatapoint.
        :type feature_vector: List[float]
        """

        self._feature_vector = feature_vector

    @property
    def numeric_restricts(self):
        """Gets the numeric_restricts of this GoogleCloudAiplatformV1IndexDatapoint.

        Optional. List of Restrict of the datapoint, used to perform \"restricted searches\" where boolean rule are used to filter the subset of the database eligible for matching. This uses numeric comparisons.

        :return: The numeric_restricts of this GoogleCloudAiplatformV1IndexDatapoint.
        :rtype: List[GoogleCloudAiplatformV1IndexDatapointNumericRestriction]
        """
        return self._numeric_restricts

    @numeric_restricts.setter
    def numeric_restricts(self, numeric_restricts):
        """Sets the numeric_restricts of this GoogleCloudAiplatformV1IndexDatapoint.

        Optional. List of Restrict of the datapoint, used to perform \"restricted searches\" where boolean rule are used to filter the subset of the database eligible for matching. This uses numeric comparisons.

        :param numeric_restricts: The numeric_restricts of this GoogleCloudAiplatformV1IndexDatapoint.
        :type numeric_restricts: List[GoogleCloudAiplatformV1IndexDatapointNumericRestriction]
        """

        self._numeric_restricts = numeric_restricts

    @property
    def restricts(self):
        """Gets the restricts of this GoogleCloudAiplatformV1IndexDatapoint.

        Optional. List of Restrict of the datapoint, used to perform \"restricted searches\" where boolean rule are used to filter the subset of the database eligible for matching. This uses categorical tokens. See: https://cloud.google.com/vertex-ai/docs/matching-engine/filtering

        :return: The restricts of this GoogleCloudAiplatformV1IndexDatapoint.
        :rtype: List[GoogleCloudAiplatformV1IndexDatapointRestriction]
        """
        return self._restricts

    @restricts.setter
    def restricts(self, restricts):
        """Sets the restricts of this GoogleCloudAiplatformV1IndexDatapoint.

        Optional. List of Restrict of the datapoint, used to perform \"restricted searches\" where boolean rule are used to filter the subset of the database eligible for matching. This uses categorical tokens. See: https://cloud.google.com/vertex-ai/docs/matching-engine/filtering

        :param restricts: The restricts of this GoogleCloudAiplatformV1IndexDatapoint.
        :type restricts: List[GoogleCloudAiplatformV1IndexDatapointRestriction]
        """

        self._restricts = restricts
