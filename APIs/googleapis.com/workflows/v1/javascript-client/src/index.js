/**
 * Workflows API
 * Manage workflow definitions. To execute workflows and manage executions, see the Workflows Executions API.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from './ApiClient';
import ListLocationsResponse from './model/ListLocationsResponse';
import ListOperationsResponse from './model/ListOperationsResponse';
import ListWorkflowRevisionsResponse from './model/ListWorkflowRevisionsResponse';
import ListWorkflowsResponse from './model/ListWorkflowsResponse';
import Location from './model/Location';
import Operation from './model/Operation';
import OperationMetadata from './model/OperationMetadata';
import StateError from './model/StateError';
import Status from './model/Status';
import Workflow from './model/Workflow';
import ProjectsApi from './api/ProjectsApi';


/**
* Manage workflow definitions. To execute workflows and manage executions, see the Workflows Executions API..<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var WorkflowsApi = require('index'); // See note below*.
* var xxxSvc = new WorkflowsApi.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new WorkflowsApi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new WorkflowsApi.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new WorkflowsApi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version v1
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The ListLocationsResponse model constructor.
     * @property {module:model/ListLocationsResponse}
     */
    ListLocationsResponse,

    /**
     * The ListOperationsResponse model constructor.
     * @property {module:model/ListOperationsResponse}
     */
    ListOperationsResponse,

    /**
     * The ListWorkflowRevisionsResponse model constructor.
     * @property {module:model/ListWorkflowRevisionsResponse}
     */
    ListWorkflowRevisionsResponse,

    /**
     * The ListWorkflowsResponse model constructor.
     * @property {module:model/ListWorkflowsResponse}
     */
    ListWorkflowsResponse,

    /**
     * The Location model constructor.
     * @property {module:model/Location}
     */
    Location,

    /**
     * The Operation model constructor.
     * @property {module:model/Operation}
     */
    Operation,

    /**
     * The OperationMetadata model constructor.
     * @property {module:model/OperationMetadata}
     */
    OperationMetadata,

    /**
     * The StateError model constructor.
     * @property {module:model/StateError}
     */
    StateError,

    /**
     * The Status model constructor.
     * @property {module:model/Status}
     */
    Status,

    /**
     * The Workflow model constructor.
     * @property {module:model/Workflow}
     */
    Workflow,

    /**
    * The ProjectsApi service constructor.
    * @property {module:api/ProjectsApi}
    */
    ProjectsApi
};
