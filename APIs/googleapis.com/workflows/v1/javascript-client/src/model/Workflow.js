/**
 * Workflows API
 * Manage workflow definitions. To execute workflows and manage executions, see the Workflows Executions API.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import StateError from './StateError';

/**
 * The Workflow model module.
 * @module model/Workflow
 * @version v1
 */
class Workflow {
    /**
     * Constructs a new <code>Workflow</code>.
     * Workflow program to be executed by Workflows.
     * @alias module:model/Workflow
     */
    constructor() { 
        
        Workflow.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Workflow</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Workflow} obj Optional instance to populate.
     * @return {module:model/Workflow} The populated <code>Workflow</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Workflow();

            if (data.hasOwnProperty('callLogLevel')) {
                obj['callLogLevel'] = ApiClient.convertToType(data['callLogLevel'], 'String');
            }
            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'String');
            }
            if (data.hasOwnProperty('cryptoKeyName')) {
                obj['cryptoKeyName'] = ApiClient.convertToType(data['cryptoKeyName'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], {'String': 'String'});
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('revisionCreateTime')) {
                obj['revisionCreateTime'] = ApiClient.convertToType(data['revisionCreateTime'], 'String');
            }
            if (data.hasOwnProperty('revisionId')) {
                obj['revisionId'] = ApiClient.convertToType(data['revisionId'], 'String');
            }
            if (data.hasOwnProperty('serviceAccount')) {
                obj['serviceAccount'] = ApiClient.convertToType(data['serviceAccount'], 'String');
            }
            if (data.hasOwnProperty('sourceContents')) {
                obj['sourceContents'] = ApiClient.convertToType(data['sourceContents'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('stateError')) {
                obj['stateError'] = StateError.constructFromObject(data['stateError']);
            }
            if (data.hasOwnProperty('updateTime')) {
                obj['updateTime'] = ApiClient.convertToType(data['updateTime'], 'String');
            }
            if (data.hasOwnProperty('userEnvVars')) {
                obj['userEnvVars'] = ApiClient.convertToType(data['userEnvVars'], {'String': 'String'});
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Workflow</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Workflow</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['callLogLevel'] && !(typeof data['callLogLevel'] === 'string' || data['callLogLevel'] instanceof String)) {
            throw new Error("Expected the field `callLogLevel` to be a primitive type in the JSON string but got " + data['callLogLevel']);
        }
        // ensure the json data is a string
        if (data['createTime'] && !(typeof data['createTime'] === 'string' || data['createTime'] instanceof String)) {
            throw new Error("Expected the field `createTime` to be a primitive type in the JSON string but got " + data['createTime']);
        }
        // ensure the json data is a string
        if (data['cryptoKeyName'] && !(typeof data['cryptoKeyName'] === 'string' || data['cryptoKeyName'] instanceof String)) {
            throw new Error("Expected the field `cryptoKeyName` to be a primitive type in the JSON string but got " + data['cryptoKeyName']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['revisionCreateTime'] && !(typeof data['revisionCreateTime'] === 'string' || data['revisionCreateTime'] instanceof String)) {
            throw new Error("Expected the field `revisionCreateTime` to be a primitive type in the JSON string but got " + data['revisionCreateTime']);
        }
        // ensure the json data is a string
        if (data['revisionId'] && !(typeof data['revisionId'] === 'string' || data['revisionId'] instanceof String)) {
            throw new Error("Expected the field `revisionId` to be a primitive type in the JSON string but got " + data['revisionId']);
        }
        // ensure the json data is a string
        if (data['serviceAccount'] && !(typeof data['serviceAccount'] === 'string' || data['serviceAccount'] instanceof String)) {
            throw new Error("Expected the field `serviceAccount` to be a primitive type in the JSON string but got " + data['serviceAccount']);
        }
        // ensure the json data is a string
        if (data['sourceContents'] && !(typeof data['sourceContents'] === 'string' || data['sourceContents'] instanceof String)) {
            throw new Error("Expected the field `sourceContents` to be a primitive type in the JSON string but got " + data['sourceContents']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // validate the optional field `stateError`
        if (data['stateError']) { // data not null
          StateError.validateJSON(data['stateError']);
        }
        // ensure the json data is a string
        if (data['updateTime'] && !(typeof data['updateTime'] === 'string' || data['updateTime'] instanceof String)) {
            throw new Error("Expected the field `updateTime` to be a primitive type in the JSON string but got " + data['updateTime']);
        }

        return true;
    }


}



/**
 * Optional. Describes the level of platform logging to apply to calls and call responses during executions of this workflow. If both the workflow and the execution specify a logging level, the execution level takes precedence.
 * @member {module:model/Workflow.CallLogLevelEnum} callLogLevel
 */
Workflow.prototype['callLogLevel'] = undefined;

/**
 * Output only. The timestamp for when the workflow was created. This is a workflow-wide field and is not tied to a specific revision.
 * @member {String} createTime
 */
Workflow.prototype['createTime'] = undefined;

/**
 * Optional. The resource name of a KMS crypto key used to encrypt or decrypt the data associated with the workflow. Format: projects/{project}/locations/{location}/keyRings/{keyRing}/cryptoKeys/{cryptoKey} Using `-` as a wildcard for the `{project}` or not providing one at all will infer the project from the account. If not provided, data associated with the workflow will not be CMEK-encrypted.
 * @member {String} cryptoKeyName
 */
Workflow.prototype['cryptoKeyName'] = undefined;

/**
 * Description of the workflow provided by the user. Must be at most 1000 Unicode characters long. This is a workflow-wide field and is not tied to a specific revision.
 * @member {String} description
 */
Workflow.prototype['description'] = undefined;

/**
 * Labels associated with this workflow. Labels can contain at most 64 entries. Keys and values can be no longer than 63 characters and can only contain lowercase letters, numeric characters, underscores, and dashes. Label keys must start with a letter. International characters are allowed. This is a workflow-wide field and is not tied to a specific revision.
 * @member {Object.<String, String>} labels
 */
Workflow.prototype['labels'] = undefined;

/**
 * The resource name of the workflow. Format: projects/{project}/locations/{location}/workflows/{workflow}. This is a workflow-wide field and is not tied to a specific revision.
 * @member {String} name
 */
Workflow.prototype['name'] = undefined;

/**
 * Output only. The timestamp for the latest revision of the workflow's creation.
 * @member {String} revisionCreateTime
 */
Workflow.prototype['revisionCreateTime'] = undefined;

/**
 * Output only. The revision of the workflow. A new revision of a workflow is created as a result of updating the following properties of a workflow: - Service account - Workflow code to be executed The format is \"000001-a4d\", where the first six characters define the zero-padded revision ordinal number. They are followed by a hyphen and three hexadecimal random characters.
 * @member {String} revisionId
 */
Workflow.prototype['revisionId'] = undefined;

/**
 * The service account associated with the latest workflow version. This service account represents the identity of the workflow and determines what permissions the workflow has. Format: projects/{project}/serviceAccounts/{account} or {account} Using `-` as a wildcard for the `{project}` or not providing one at all will infer the project from the account. The `{account}` value can be the `email` address or the `unique_id` of the service account. If not provided, workflow will use the project's default service account. Modifying this field for an existing workflow results in a new workflow revision.
 * @member {String} serviceAccount
 */
Workflow.prototype['serviceAccount'] = undefined;

/**
 * Workflow code to be executed. The size limit is 128KB.
 * @member {String} sourceContents
 */
Workflow.prototype['sourceContents'] = undefined;

/**
 * Output only. State of the workflow deployment.
 * @member {module:model/Workflow.StateEnum} state
 */
Workflow.prototype['state'] = undefined;

/**
 * @member {module:model/StateError} stateError
 */
Workflow.prototype['stateError'] = undefined;

/**
 * Output only. The timestamp for when the workflow was last updated. This is a workflow-wide field and is not tied to a specific revision.
 * @member {String} updateTime
 */
Workflow.prototype['updateTime'] = undefined;

/**
 * Optional. User-defined environment variables associated with this workflow revision. This map has a maximum length of 20. Each string can take up to 4KiB. Keys cannot be empty strings and cannot start with \"GOOGLE\" or \"WORKFLOWS\".
 * @member {Object.<String, String>} userEnvVars
 */
Workflow.prototype['userEnvVars'] = undefined;





/**
 * Allowed values for the <code>callLogLevel</code> property.
 * @enum {String}
 * @readonly
 */
Workflow['CallLogLevelEnum'] = {

    /**
     * value: "CALL_LOG_LEVEL_UNSPECIFIED"
     * @const
     */
    "CALL_LOG_LEVEL_UNSPECIFIED": "CALL_LOG_LEVEL_UNSPECIFIED",

    /**
     * value: "LOG_ALL_CALLS"
     * @const
     */
    "LOG_ALL_CALLS": "LOG_ALL_CALLS",

    /**
     * value: "LOG_ERRORS_ONLY"
     * @const
     */
    "LOG_ERRORS_ONLY": "LOG_ERRORS_ONLY",

    /**
     * value: "LOG_NONE"
     * @const
     */
    "LOG_NONE": "LOG_NONE"
};


/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
Workflow['StateEnum'] = {

    /**
     * value: "STATE_UNSPECIFIED"
     * @const
     */
    "STATE_UNSPECIFIED": "STATE_UNSPECIFIED",

    /**
     * value: "ACTIVE"
     * @const
     */
    "ACTIVE": "ACTIVE",

    /**
     * value: "UNAVAILABLE"
     * @const
     */
    "UNAVAILABLE": "UNAVAILABLE"
};



export default Workflow;

