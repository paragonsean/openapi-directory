# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.state_error import StateError
from openapi_server import util


class Workflow(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, call_log_level: str=None, create_time: str=None, crypto_key_name: str=None, description: str=None, labels: Dict[str, str]=None, name: str=None, revision_create_time: str=None, revision_id: str=None, service_account: str=None, source_contents: str=None, state: str=None, state_error: StateError=None, update_time: str=None, user_env_vars: Dict[str, str]=None):
        """Workflow - a model defined in OpenAPI

        :param call_log_level: The call_log_level of this Workflow.
        :param create_time: The create_time of this Workflow.
        :param crypto_key_name: The crypto_key_name of this Workflow.
        :param description: The description of this Workflow.
        :param labels: The labels of this Workflow.
        :param name: The name of this Workflow.
        :param revision_create_time: The revision_create_time of this Workflow.
        :param revision_id: The revision_id of this Workflow.
        :param service_account: The service_account of this Workflow.
        :param source_contents: The source_contents of this Workflow.
        :param state: The state of this Workflow.
        :param state_error: The state_error of this Workflow.
        :param update_time: The update_time of this Workflow.
        :param user_env_vars: The user_env_vars of this Workflow.
        """
        self.openapi_types = {
            'call_log_level': str,
            'create_time': str,
            'crypto_key_name': str,
            'description': str,
            'labels': Dict[str, str],
            'name': str,
            'revision_create_time': str,
            'revision_id': str,
            'service_account': str,
            'source_contents': str,
            'state': str,
            'state_error': StateError,
            'update_time': str,
            'user_env_vars': Dict[str, str]
        }

        self.attribute_map = {
            'call_log_level': 'callLogLevel',
            'create_time': 'createTime',
            'crypto_key_name': 'cryptoKeyName',
            'description': 'description',
            'labels': 'labels',
            'name': 'name',
            'revision_create_time': 'revisionCreateTime',
            'revision_id': 'revisionId',
            'service_account': 'serviceAccount',
            'source_contents': 'sourceContents',
            'state': 'state',
            'state_error': 'stateError',
            'update_time': 'updateTime',
            'user_env_vars': 'userEnvVars'
        }

        self._call_log_level = call_log_level
        self._create_time = create_time
        self._crypto_key_name = crypto_key_name
        self._description = description
        self._labels = labels
        self._name = name
        self._revision_create_time = revision_create_time
        self._revision_id = revision_id
        self._service_account = service_account
        self._source_contents = source_contents
        self._state = state
        self._state_error = state_error
        self._update_time = update_time
        self._user_env_vars = user_env_vars

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Workflow':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Workflow of this Workflow.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def call_log_level(self):
        """Gets the call_log_level of this Workflow.

        Optional. Describes the level of platform logging to apply to calls and call responses during executions of this workflow. If both the workflow and the execution specify a logging level, the execution level takes precedence.

        :return: The call_log_level of this Workflow.
        :rtype: str
        """
        return self._call_log_level

    @call_log_level.setter
    def call_log_level(self, call_log_level):
        """Sets the call_log_level of this Workflow.

        Optional. Describes the level of platform logging to apply to calls and call responses during executions of this workflow. If both the workflow and the execution specify a logging level, the execution level takes precedence.

        :param call_log_level: The call_log_level of this Workflow.
        :type call_log_level: str
        """
        allowed_values = ["CALL_LOG_LEVEL_UNSPECIFIED", "LOG_ALL_CALLS", "LOG_ERRORS_ONLY", "LOG_NONE"]  # noqa: E501
        if call_log_level not in allowed_values:
            raise ValueError(
                "Invalid value for `call_log_level` ({0}), must be one of {1}"
                .format(call_log_level, allowed_values)
            )

        self._call_log_level = call_log_level

    @property
    def create_time(self):
        """Gets the create_time of this Workflow.

        Output only. The timestamp for when the workflow was created. This is a workflow-wide field and is not tied to a specific revision.

        :return: The create_time of this Workflow.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this Workflow.

        Output only. The timestamp for when the workflow was created. This is a workflow-wide field and is not tied to a specific revision.

        :param create_time: The create_time of this Workflow.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def crypto_key_name(self):
        """Gets the crypto_key_name of this Workflow.

        Optional. The resource name of a KMS crypto key used to encrypt or decrypt the data associated with the workflow. Format: projects/{project}/locations/{location}/keyRings/{keyRing}/cryptoKeys/{cryptoKey} Using `-` as a wildcard for the `{project}` or not providing one at all will infer the project from the account. If not provided, data associated with the workflow will not be CMEK-encrypted.

        :return: The crypto_key_name of this Workflow.
        :rtype: str
        """
        return self._crypto_key_name

    @crypto_key_name.setter
    def crypto_key_name(self, crypto_key_name):
        """Sets the crypto_key_name of this Workflow.

        Optional. The resource name of a KMS crypto key used to encrypt or decrypt the data associated with the workflow. Format: projects/{project}/locations/{location}/keyRings/{keyRing}/cryptoKeys/{cryptoKey} Using `-` as a wildcard for the `{project}` or not providing one at all will infer the project from the account. If not provided, data associated with the workflow will not be CMEK-encrypted.

        :param crypto_key_name: The crypto_key_name of this Workflow.
        :type crypto_key_name: str
        """

        self._crypto_key_name = crypto_key_name

    @property
    def description(self):
        """Gets the description of this Workflow.

        Description of the workflow provided by the user. Must be at most 1000 Unicode characters long. This is a workflow-wide field and is not tied to a specific revision.

        :return: The description of this Workflow.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Workflow.

        Description of the workflow provided by the user. Must be at most 1000 Unicode characters long. This is a workflow-wide field and is not tied to a specific revision.

        :param description: The description of this Workflow.
        :type description: str
        """

        self._description = description

    @property
    def labels(self):
        """Gets the labels of this Workflow.

        Labels associated with this workflow. Labels can contain at most 64 entries. Keys and values can be no longer than 63 characters and can only contain lowercase letters, numeric characters, underscores, and dashes. Label keys must start with a letter. International characters are allowed. This is a workflow-wide field and is not tied to a specific revision.

        :return: The labels of this Workflow.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this Workflow.

        Labels associated with this workflow. Labels can contain at most 64 entries. Keys and values can be no longer than 63 characters and can only contain lowercase letters, numeric characters, underscores, and dashes. Label keys must start with a letter. International characters are allowed. This is a workflow-wide field and is not tied to a specific revision.

        :param labels: The labels of this Workflow.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def name(self):
        """Gets the name of this Workflow.

        The resource name of the workflow. Format: projects/{project}/locations/{location}/workflows/{workflow}. This is a workflow-wide field and is not tied to a specific revision.

        :return: The name of this Workflow.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Workflow.

        The resource name of the workflow. Format: projects/{project}/locations/{location}/workflows/{workflow}. This is a workflow-wide field and is not tied to a specific revision.

        :param name: The name of this Workflow.
        :type name: str
        """

        self._name = name

    @property
    def revision_create_time(self):
        """Gets the revision_create_time of this Workflow.

        Output only. The timestamp for the latest revision of the workflow's creation.

        :return: The revision_create_time of this Workflow.
        :rtype: str
        """
        return self._revision_create_time

    @revision_create_time.setter
    def revision_create_time(self, revision_create_time):
        """Sets the revision_create_time of this Workflow.

        Output only. The timestamp for the latest revision of the workflow's creation.

        :param revision_create_time: The revision_create_time of this Workflow.
        :type revision_create_time: str
        """

        self._revision_create_time = revision_create_time

    @property
    def revision_id(self):
        """Gets the revision_id of this Workflow.

        Output only. The revision of the workflow. A new revision of a workflow is created as a result of updating the following properties of a workflow: - Service account - Workflow code to be executed The format is \"000001-a4d\", where the first six characters define the zero-padded revision ordinal number. They are followed by a hyphen and three hexadecimal random characters.

        :return: The revision_id of this Workflow.
        :rtype: str
        """
        return self._revision_id

    @revision_id.setter
    def revision_id(self, revision_id):
        """Sets the revision_id of this Workflow.

        Output only. The revision of the workflow. A new revision of a workflow is created as a result of updating the following properties of a workflow: - Service account - Workflow code to be executed The format is \"000001-a4d\", where the first six characters define the zero-padded revision ordinal number. They are followed by a hyphen and three hexadecimal random characters.

        :param revision_id: The revision_id of this Workflow.
        :type revision_id: str
        """

        self._revision_id = revision_id

    @property
    def service_account(self):
        """Gets the service_account of this Workflow.

        The service account associated with the latest workflow version. This service account represents the identity of the workflow and determines what permissions the workflow has. Format: projects/{project}/serviceAccounts/{account} or {account} Using `-` as a wildcard for the `{project}` or not providing one at all will infer the project from the account. The `{account}` value can be the `email` address or the `unique_id` of the service account. If not provided, workflow will use the project's default service account. Modifying this field for an existing workflow results in a new workflow revision.

        :return: The service_account of this Workflow.
        :rtype: str
        """
        return self._service_account

    @service_account.setter
    def service_account(self, service_account):
        """Sets the service_account of this Workflow.

        The service account associated with the latest workflow version. This service account represents the identity of the workflow and determines what permissions the workflow has. Format: projects/{project}/serviceAccounts/{account} or {account} Using `-` as a wildcard for the `{project}` or not providing one at all will infer the project from the account. The `{account}` value can be the `email` address or the `unique_id` of the service account. If not provided, workflow will use the project's default service account. Modifying this field for an existing workflow results in a new workflow revision.

        :param service_account: The service_account of this Workflow.
        :type service_account: str
        """

        self._service_account = service_account

    @property
    def source_contents(self):
        """Gets the source_contents of this Workflow.

        Workflow code to be executed. The size limit is 128KB.

        :return: The source_contents of this Workflow.
        :rtype: str
        """
        return self._source_contents

    @source_contents.setter
    def source_contents(self, source_contents):
        """Sets the source_contents of this Workflow.

        Workflow code to be executed. The size limit is 128KB.

        :param source_contents: The source_contents of this Workflow.
        :type source_contents: str
        """

        self._source_contents = source_contents

    @property
    def state(self):
        """Gets the state of this Workflow.

        Output only. State of the workflow deployment.

        :return: The state of this Workflow.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Workflow.

        Output only. State of the workflow deployment.

        :param state: The state of this Workflow.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "ACTIVE", "UNAVAILABLE"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def state_error(self):
        """Gets the state_error of this Workflow.


        :return: The state_error of this Workflow.
        :rtype: StateError
        """
        return self._state_error

    @state_error.setter
    def state_error(self, state_error):
        """Sets the state_error of this Workflow.


        :param state_error: The state_error of this Workflow.
        :type state_error: StateError
        """

        self._state_error = state_error

    @property
    def update_time(self):
        """Gets the update_time of this Workflow.

        Output only. The timestamp for when the workflow was last updated. This is a workflow-wide field and is not tied to a specific revision.

        :return: The update_time of this Workflow.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this Workflow.

        Output only. The timestamp for when the workflow was last updated. This is a workflow-wide field and is not tied to a specific revision.

        :param update_time: The update_time of this Workflow.
        :type update_time: str
        """

        self._update_time = update_time

    @property
    def user_env_vars(self):
        """Gets the user_env_vars of this Workflow.

        Optional. User-defined environment variables associated with this workflow revision. This map has a maximum length of 20. Each string can take up to 4KiB. Keys cannot be empty strings and cannot start with \"GOOGLE\" or \"WORKFLOWS\".

        :return: The user_env_vars of this Workflow.
        :rtype: Dict[str, str]
        """
        return self._user_env_vars

    @user_env_vars.setter
    def user_env_vars(self, user_env_vars):
        """Sets the user_env_vars of this Workflow.

        Optional. User-defined environment variables associated with this workflow revision. This map has a maximum length of 20. Each string can take up to 4KiB. Keys cannot be empty strings and cannot start with \"GOOGLE\" or \"WORKFLOWS\".

        :param user_env_vars: The user_env_vars of this Workflow.
        :type user_env_vars: Dict[str, str]
        """

        self._user_env_vars = user_env_vars
