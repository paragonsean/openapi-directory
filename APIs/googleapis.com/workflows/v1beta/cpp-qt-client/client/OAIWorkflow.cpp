/**
 * Workflows API
 * Manage workflow definitions. To execute workflows and manage executions, see the Workflows Executions API.
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWorkflow.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWorkflow::OAIWorkflow(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWorkflow::OAIWorkflow() {
    this->initializeModel();
}

OAIWorkflow::~OAIWorkflow() {}

void OAIWorkflow::initializeModel() {

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_revision_create_time_isSet = false;
    m_revision_create_time_isValid = false;

    m_revision_id_isSet = false;
    m_revision_id_isValid = false;

    m_service_account_isSet = false;
    m_service_account_isValid = false;

    m_source_contents_isSet = false;
    m_source_contents_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;
}

void OAIWorkflow::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWorkflow::fromJsonObject(QJsonObject json) {

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_revision_create_time_isValid = ::OpenAPI::fromJsonValue(m_revision_create_time, json[QString("revisionCreateTime")]);
    m_revision_create_time_isSet = !json[QString("revisionCreateTime")].isNull() && m_revision_create_time_isValid;

    m_revision_id_isValid = ::OpenAPI::fromJsonValue(m_revision_id, json[QString("revisionId")]);
    m_revision_id_isSet = !json[QString("revisionId")].isNull() && m_revision_id_isValid;

    m_service_account_isValid = ::OpenAPI::fromJsonValue(m_service_account, json[QString("serviceAccount")]);
    m_service_account_isSet = !json[QString("serviceAccount")].isNull() && m_service_account_isValid;

    m_source_contents_isValid = ::OpenAPI::fromJsonValue(m_source_contents, json[QString("sourceContents")]);
    m_source_contents_isSet = !json[QString("sourceContents")].isNull() && m_source_contents_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;
}

QString OAIWorkflow::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWorkflow::asJsonObject() const {
    QJsonObject obj;
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_revision_create_time_isSet) {
        obj.insert(QString("revisionCreateTime"), ::OpenAPI::toJsonValue(m_revision_create_time));
    }
    if (m_revision_id_isSet) {
        obj.insert(QString("revisionId"), ::OpenAPI::toJsonValue(m_revision_id));
    }
    if (m_service_account_isSet) {
        obj.insert(QString("serviceAccount"), ::OpenAPI::toJsonValue(m_service_account));
    }
    if (m_source_contents_isSet) {
        obj.insert(QString("sourceContents"), ::OpenAPI::toJsonValue(m_source_contents));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    return obj;
}

QString OAIWorkflow::getCreateTime() const {
    return m_create_time;
}
void OAIWorkflow::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIWorkflow::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIWorkflow::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAIWorkflow::getDescription() const {
    return m_description;
}
void OAIWorkflow::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIWorkflow::is_description_Set() const{
    return m_description_isSet;
}

bool OAIWorkflow::is_description_Valid() const{
    return m_description_isValid;
}

QMap<QString, QString> OAIWorkflow::getLabels() const {
    return m_labels;
}
void OAIWorkflow::setLabels(const QMap<QString, QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIWorkflow::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIWorkflow::is_labels_Valid() const{
    return m_labels_isValid;
}

QString OAIWorkflow::getName() const {
    return m_name;
}
void OAIWorkflow::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIWorkflow::is_name_Set() const{
    return m_name_isSet;
}

bool OAIWorkflow::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIWorkflow::getRevisionCreateTime() const {
    return m_revision_create_time;
}
void OAIWorkflow::setRevisionCreateTime(const QString &revision_create_time) {
    m_revision_create_time = revision_create_time;
    m_revision_create_time_isSet = true;
}

bool OAIWorkflow::is_revision_create_time_Set() const{
    return m_revision_create_time_isSet;
}

bool OAIWorkflow::is_revision_create_time_Valid() const{
    return m_revision_create_time_isValid;
}

QString OAIWorkflow::getRevisionId() const {
    return m_revision_id;
}
void OAIWorkflow::setRevisionId(const QString &revision_id) {
    m_revision_id = revision_id;
    m_revision_id_isSet = true;
}

bool OAIWorkflow::is_revision_id_Set() const{
    return m_revision_id_isSet;
}

bool OAIWorkflow::is_revision_id_Valid() const{
    return m_revision_id_isValid;
}

QString OAIWorkflow::getServiceAccount() const {
    return m_service_account;
}
void OAIWorkflow::setServiceAccount(const QString &service_account) {
    m_service_account = service_account;
    m_service_account_isSet = true;
}

bool OAIWorkflow::is_service_account_Set() const{
    return m_service_account_isSet;
}

bool OAIWorkflow::is_service_account_Valid() const{
    return m_service_account_isValid;
}

QString OAIWorkflow::getSourceContents() const {
    return m_source_contents;
}
void OAIWorkflow::setSourceContents(const QString &source_contents) {
    m_source_contents = source_contents;
    m_source_contents_isSet = true;
}

bool OAIWorkflow::is_source_contents_Set() const{
    return m_source_contents_isSet;
}

bool OAIWorkflow::is_source_contents_Valid() const{
    return m_source_contents_isValid;
}

QString OAIWorkflow::getState() const {
    return m_state;
}
void OAIWorkflow::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIWorkflow::is_state_Set() const{
    return m_state_isSet;
}

bool OAIWorkflow::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIWorkflow::getUpdateTime() const {
    return m_update_time;
}
void OAIWorkflow::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAIWorkflow::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAIWorkflow::is_update_time_Valid() const{
    return m_update_time_isValid;
}

bool OAIWorkflow::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_revision_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_revision_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_account_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_contents_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWorkflow::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
