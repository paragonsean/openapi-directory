/**
 * Serverless VPC Access API
 * API for managing VPC access connectors.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Subnet from './Subnet';

/**
 * The Connector model module.
 * @module model/Connector
 * @version v1beta1
 */
class Connector {
    /**
     * Constructs a new <code>Connector</code>.
     * Definition of a Serverless VPC Access connector.
     * @alias module:model/Connector
     */
    constructor() { 
        
        Connector.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Connector</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Connector} obj Optional instance to populate.
     * @return {module:model/Connector} The populated <code>Connector</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Connector();

            if (data.hasOwnProperty('connectedProjects')) {
                obj['connectedProjects'] = ApiClient.convertToType(data['connectedProjects'], ['String']);
            }
            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'String');
            }
            if (data.hasOwnProperty('ipCidrRange')) {
                obj['ipCidrRange'] = ApiClient.convertToType(data['ipCidrRange'], 'String');
            }
            if (data.hasOwnProperty('lastRestartTime')) {
                obj['lastRestartTime'] = ApiClient.convertToType(data['lastRestartTime'], 'String');
            }
            if (data.hasOwnProperty('machineType')) {
                obj['machineType'] = ApiClient.convertToType(data['machineType'], 'String');
            }
            if (data.hasOwnProperty('maxInstances')) {
                obj['maxInstances'] = ApiClient.convertToType(data['maxInstances'], 'Number');
            }
            if (data.hasOwnProperty('maxThroughput')) {
                obj['maxThroughput'] = ApiClient.convertToType(data['maxThroughput'], 'Number');
            }
            if (data.hasOwnProperty('minInstances')) {
                obj['minInstances'] = ApiClient.convertToType(data['minInstances'], 'Number');
            }
            if (data.hasOwnProperty('minThroughput')) {
                obj['minThroughput'] = ApiClient.convertToType(data['minThroughput'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('network')) {
                obj['network'] = ApiClient.convertToType(data['network'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('subnet')) {
                obj['subnet'] = Subnet.constructFromObject(data['subnet']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Connector</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Connector</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['connectedProjects'])) {
            throw new Error("Expected the field `connectedProjects` to be an array in the JSON data but got " + data['connectedProjects']);
        }
        // ensure the json data is a string
        if (data['createTime'] && !(typeof data['createTime'] === 'string' || data['createTime'] instanceof String)) {
            throw new Error("Expected the field `createTime` to be a primitive type in the JSON string but got " + data['createTime']);
        }
        // ensure the json data is a string
        if (data['ipCidrRange'] && !(typeof data['ipCidrRange'] === 'string' || data['ipCidrRange'] instanceof String)) {
            throw new Error("Expected the field `ipCidrRange` to be a primitive type in the JSON string but got " + data['ipCidrRange']);
        }
        // ensure the json data is a string
        if (data['lastRestartTime'] && !(typeof data['lastRestartTime'] === 'string' || data['lastRestartTime'] instanceof String)) {
            throw new Error("Expected the field `lastRestartTime` to be a primitive type in the JSON string but got " + data['lastRestartTime']);
        }
        // ensure the json data is a string
        if (data['machineType'] && !(typeof data['machineType'] === 'string' || data['machineType'] instanceof String)) {
            throw new Error("Expected the field `machineType` to be a primitive type in the JSON string but got " + data['machineType']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['network'] && !(typeof data['network'] === 'string' || data['network'] instanceof String)) {
            throw new Error("Expected the field `network` to be a primitive type in the JSON string but got " + data['network']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // validate the optional field `subnet`
        if (data['subnet']) { // data not null
          Subnet.validateJSON(data['subnet']);
        }

        return true;
    }


}



/**
 * Output only. List of projects using the connector.
 * @member {Array.<String>} connectedProjects
 */
Connector.prototype['connectedProjects'] = undefined;

/**
 * Output only. The creation time of the connector.
 * @member {String} createTime
 */
Connector.prototype['createTime'] = undefined;

/**
 * The range of internal addresses that follows RFC 4632 notation. Example: `10.132.0.0/28`.
 * @member {String} ipCidrRange
 */
Connector.prototype['ipCidrRange'] = undefined;

/**
 * Output only. The last restart time of the connector.
 * @member {String} lastRestartTime
 */
Connector.prototype['lastRestartTime'] = undefined;

/**
 * Machine type of VM Instance underlying connector. Default is e2-micro
 * @member {String} machineType
 */
Connector.prototype['machineType'] = undefined;

/**
 * Maximum value of instances in autoscaling group underlying the connector.
 * @member {Number} maxInstances
 */
Connector.prototype['maxInstances'] = undefined;

/**
 * Maximum throughput of the connector in Mbps. Refers to the expected throughput when using an `e2-micro` machine type. Value must be a multiple of 100 from 300 through 1000. Must be higher than the value specified by --min-throughput. If both max-throughput and max-instances are provided, max-instances takes precedence over max-throughput. The use of `max-throughput` is discouraged in favor of `max-instances`.
 * @member {Number} maxThroughput
 */
Connector.prototype['maxThroughput'] = undefined;

/**
 * Minimum value of instances in autoscaling group underlying the connector.
 * @member {Number} minInstances
 */
Connector.prototype['minInstances'] = undefined;

/**
 * Minimum throughput of the connector in Mbps. Refers to the expected throughput when using an `e2-micro` machine type. Value must be a multiple of 100 from 200 through 900. Must be lower than the value specified by --max-throughput. If both min-throughput and min-instances are provided, min-instances takes precedence over min-throughput. The use of `min-throughput` is discouraged in favor of `min-instances`.
 * @member {Number} minThroughput
 */
Connector.prototype['minThroughput'] = undefined;

/**
 * The resource name in the format `projects/_*_/locations/_*_/connectors/_*`.
 * @member {String} name
 */
Connector.prototype['name'] = undefined;

/**
 * Name of a VPC network.
 * @member {String} network
 */
Connector.prototype['network'] = undefined;

/**
 * Output only. State of the VPC access connector.
 * @member {module:model/Connector.StateEnum} state
 */
Connector.prototype['state'] = undefined;

/**
 * @member {module:model/Subnet} subnet
 */
Connector.prototype['subnet'] = undefined;





/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
Connector['StateEnum'] = {

    /**
     * value: "STATE_UNSPECIFIED"
     * @const
     */
    "STATE_UNSPECIFIED": "STATE_UNSPECIFIED",

    /**
     * value: "READY"
     * @const
     */
    "READY": "READY",

    /**
     * value: "CREATING"
     * @const
     */
    "CREATING": "CREATING",

    /**
     * value: "DELETING"
     * @const
     */
    "DELETING": "DELETING",

    /**
     * value: "ERROR"
     * @const
     */
    "ERROR": "ERROR",

    /**
     * value: "UPDATING"
     * @const
     */
    "UPDATING": "UPDATING"
};



export default Connector;

