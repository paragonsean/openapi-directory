/**
 * Serverless VPC Access API
 * API for managing VPC access connectors.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConnector.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConnector::OAIConnector(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConnector::OAIConnector() {
    this->initializeModel();
}

OAIConnector::~OAIConnector() {}

void OAIConnector::initializeModel() {

    m_connected_projects_isSet = false;
    m_connected_projects_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_ip_cidr_range_isSet = false;
    m_ip_cidr_range_isValid = false;

    m_last_restart_time_isSet = false;
    m_last_restart_time_isValid = false;

    m_machine_type_isSet = false;
    m_machine_type_isValid = false;

    m_max_instances_isSet = false;
    m_max_instances_isValid = false;

    m_max_throughput_isSet = false;
    m_max_throughput_isValid = false;

    m_min_instances_isSet = false;
    m_min_instances_isValid = false;

    m_min_throughput_isSet = false;
    m_min_throughput_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_network_isSet = false;
    m_network_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_subnet_isSet = false;
    m_subnet_isValid = false;
}

void OAIConnector::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConnector::fromJsonObject(QJsonObject json) {

    m_connected_projects_isValid = ::OpenAPI::fromJsonValue(m_connected_projects, json[QString("connectedProjects")]);
    m_connected_projects_isSet = !json[QString("connectedProjects")].isNull() && m_connected_projects_isValid;

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_ip_cidr_range_isValid = ::OpenAPI::fromJsonValue(m_ip_cidr_range, json[QString("ipCidrRange")]);
    m_ip_cidr_range_isSet = !json[QString("ipCidrRange")].isNull() && m_ip_cidr_range_isValid;

    m_last_restart_time_isValid = ::OpenAPI::fromJsonValue(m_last_restart_time, json[QString("lastRestartTime")]);
    m_last_restart_time_isSet = !json[QString("lastRestartTime")].isNull() && m_last_restart_time_isValid;

    m_machine_type_isValid = ::OpenAPI::fromJsonValue(m_machine_type, json[QString("machineType")]);
    m_machine_type_isSet = !json[QString("machineType")].isNull() && m_machine_type_isValid;

    m_max_instances_isValid = ::OpenAPI::fromJsonValue(m_max_instances, json[QString("maxInstances")]);
    m_max_instances_isSet = !json[QString("maxInstances")].isNull() && m_max_instances_isValid;

    m_max_throughput_isValid = ::OpenAPI::fromJsonValue(m_max_throughput, json[QString("maxThroughput")]);
    m_max_throughput_isSet = !json[QString("maxThroughput")].isNull() && m_max_throughput_isValid;

    m_min_instances_isValid = ::OpenAPI::fromJsonValue(m_min_instances, json[QString("minInstances")]);
    m_min_instances_isSet = !json[QString("minInstances")].isNull() && m_min_instances_isValid;

    m_min_throughput_isValid = ::OpenAPI::fromJsonValue(m_min_throughput, json[QString("minThroughput")]);
    m_min_throughput_isSet = !json[QString("minThroughput")].isNull() && m_min_throughput_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_network_isValid = ::OpenAPI::fromJsonValue(m_network, json[QString("network")]);
    m_network_isSet = !json[QString("network")].isNull() && m_network_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_subnet_isValid = ::OpenAPI::fromJsonValue(m_subnet, json[QString("subnet")]);
    m_subnet_isSet = !json[QString("subnet")].isNull() && m_subnet_isValid;
}

QString OAIConnector::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConnector::asJsonObject() const {
    QJsonObject obj;
    if (m_connected_projects.size() > 0) {
        obj.insert(QString("connectedProjects"), ::OpenAPI::toJsonValue(m_connected_projects));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_ip_cidr_range_isSet) {
        obj.insert(QString("ipCidrRange"), ::OpenAPI::toJsonValue(m_ip_cidr_range));
    }
    if (m_last_restart_time_isSet) {
        obj.insert(QString("lastRestartTime"), ::OpenAPI::toJsonValue(m_last_restart_time));
    }
    if (m_machine_type_isSet) {
        obj.insert(QString("machineType"), ::OpenAPI::toJsonValue(m_machine_type));
    }
    if (m_max_instances_isSet) {
        obj.insert(QString("maxInstances"), ::OpenAPI::toJsonValue(m_max_instances));
    }
    if (m_max_throughput_isSet) {
        obj.insert(QString("maxThroughput"), ::OpenAPI::toJsonValue(m_max_throughput));
    }
    if (m_min_instances_isSet) {
        obj.insert(QString("minInstances"), ::OpenAPI::toJsonValue(m_min_instances));
    }
    if (m_min_throughput_isSet) {
        obj.insert(QString("minThroughput"), ::OpenAPI::toJsonValue(m_min_throughput));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_network_isSet) {
        obj.insert(QString("network"), ::OpenAPI::toJsonValue(m_network));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_subnet.isSet()) {
        obj.insert(QString("subnet"), ::OpenAPI::toJsonValue(m_subnet));
    }
    return obj;
}

QList<QString> OAIConnector::getConnectedProjects() const {
    return m_connected_projects;
}
void OAIConnector::setConnectedProjects(const QList<QString> &connected_projects) {
    m_connected_projects = connected_projects;
    m_connected_projects_isSet = true;
}

bool OAIConnector::is_connected_projects_Set() const{
    return m_connected_projects_isSet;
}

bool OAIConnector::is_connected_projects_Valid() const{
    return m_connected_projects_isValid;
}

QString OAIConnector::getCreateTime() const {
    return m_create_time;
}
void OAIConnector::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIConnector::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIConnector::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAIConnector::getIpCidrRange() const {
    return m_ip_cidr_range;
}
void OAIConnector::setIpCidrRange(const QString &ip_cidr_range) {
    m_ip_cidr_range = ip_cidr_range;
    m_ip_cidr_range_isSet = true;
}

bool OAIConnector::is_ip_cidr_range_Set() const{
    return m_ip_cidr_range_isSet;
}

bool OAIConnector::is_ip_cidr_range_Valid() const{
    return m_ip_cidr_range_isValid;
}

QString OAIConnector::getLastRestartTime() const {
    return m_last_restart_time;
}
void OAIConnector::setLastRestartTime(const QString &last_restart_time) {
    m_last_restart_time = last_restart_time;
    m_last_restart_time_isSet = true;
}

bool OAIConnector::is_last_restart_time_Set() const{
    return m_last_restart_time_isSet;
}

bool OAIConnector::is_last_restart_time_Valid() const{
    return m_last_restart_time_isValid;
}

QString OAIConnector::getMachineType() const {
    return m_machine_type;
}
void OAIConnector::setMachineType(const QString &machine_type) {
    m_machine_type = machine_type;
    m_machine_type_isSet = true;
}

bool OAIConnector::is_machine_type_Set() const{
    return m_machine_type_isSet;
}

bool OAIConnector::is_machine_type_Valid() const{
    return m_machine_type_isValid;
}

qint32 OAIConnector::getMaxInstances() const {
    return m_max_instances;
}
void OAIConnector::setMaxInstances(const qint32 &max_instances) {
    m_max_instances = max_instances;
    m_max_instances_isSet = true;
}

bool OAIConnector::is_max_instances_Set() const{
    return m_max_instances_isSet;
}

bool OAIConnector::is_max_instances_Valid() const{
    return m_max_instances_isValid;
}

qint32 OAIConnector::getMaxThroughput() const {
    return m_max_throughput;
}
void OAIConnector::setMaxThroughput(const qint32 &max_throughput) {
    m_max_throughput = max_throughput;
    m_max_throughput_isSet = true;
}

bool OAIConnector::is_max_throughput_Set() const{
    return m_max_throughput_isSet;
}

bool OAIConnector::is_max_throughput_Valid() const{
    return m_max_throughput_isValid;
}

qint32 OAIConnector::getMinInstances() const {
    return m_min_instances;
}
void OAIConnector::setMinInstances(const qint32 &min_instances) {
    m_min_instances = min_instances;
    m_min_instances_isSet = true;
}

bool OAIConnector::is_min_instances_Set() const{
    return m_min_instances_isSet;
}

bool OAIConnector::is_min_instances_Valid() const{
    return m_min_instances_isValid;
}

qint32 OAIConnector::getMinThroughput() const {
    return m_min_throughput;
}
void OAIConnector::setMinThroughput(const qint32 &min_throughput) {
    m_min_throughput = min_throughput;
    m_min_throughput_isSet = true;
}

bool OAIConnector::is_min_throughput_Set() const{
    return m_min_throughput_isSet;
}

bool OAIConnector::is_min_throughput_Valid() const{
    return m_min_throughput_isValid;
}

QString OAIConnector::getName() const {
    return m_name;
}
void OAIConnector::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIConnector::is_name_Set() const{
    return m_name_isSet;
}

bool OAIConnector::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIConnector::getNetwork() const {
    return m_network;
}
void OAIConnector::setNetwork(const QString &network) {
    m_network = network;
    m_network_isSet = true;
}

bool OAIConnector::is_network_Set() const{
    return m_network_isSet;
}

bool OAIConnector::is_network_Valid() const{
    return m_network_isValid;
}

QString OAIConnector::getState() const {
    return m_state;
}
void OAIConnector::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIConnector::is_state_Set() const{
    return m_state_isSet;
}

bool OAIConnector::is_state_Valid() const{
    return m_state_isValid;
}

OAISubnet OAIConnector::getSubnet() const {
    return m_subnet;
}
void OAIConnector::setSubnet(const OAISubnet &subnet) {
    m_subnet = subnet;
    m_subnet_isSet = true;
}

bool OAIConnector::is_subnet_Set() const{
    return m_subnet_isSet;
}

bool OAIConnector::is_subnet_Valid() const{
    return m_subnet_isValid;
}

bool OAIConnector::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_connected_projects.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_cidr_range_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_restart_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_machine_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_instances_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_throughput_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_instances_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_throughput_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subnet.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConnector::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
