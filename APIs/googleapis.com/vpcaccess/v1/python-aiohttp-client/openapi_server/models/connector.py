# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.subnet import Subnet
from openapi_server import util


class Connector(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, connected_projects: List[str]=None, ip_cidr_range: str=None, machine_type: str=None, max_instances: int=None, max_throughput: int=None, min_instances: int=None, min_throughput: int=None, name: str=None, network: str=None, state: str=None, subnet: Subnet=None):
        """Connector - a model defined in OpenAPI

        :param connected_projects: The connected_projects of this Connector.
        :param ip_cidr_range: The ip_cidr_range of this Connector.
        :param machine_type: The machine_type of this Connector.
        :param max_instances: The max_instances of this Connector.
        :param max_throughput: The max_throughput of this Connector.
        :param min_instances: The min_instances of this Connector.
        :param min_throughput: The min_throughput of this Connector.
        :param name: The name of this Connector.
        :param network: The network of this Connector.
        :param state: The state of this Connector.
        :param subnet: The subnet of this Connector.
        """
        self.openapi_types = {
            'connected_projects': List[str],
            'ip_cidr_range': str,
            'machine_type': str,
            'max_instances': int,
            'max_throughput': int,
            'min_instances': int,
            'min_throughput': int,
            'name': str,
            'network': str,
            'state': str,
            'subnet': Subnet
        }

        self.attribute_map = {
            'connected_projects': 'connectedProjects',
            'ip_cidr_range': 'ipCidrRange',
            'machine_type': 'machineType',
            'max_instances': 'maxInstances',
            'max_throughput': 'maxThroughput',
            'min_instances': 'minInstances',
            'min_throughput': 'minThroughput',
            'name': 'name',
            'network': 'network',
            'state': 'state',
            'subnet': 'subnet'
        }

        self._connected_projects = connected_projects
        self._ip_cidr_range = ip_cidr_range
        self._machine_type = machine_type
        self._max_instances = max_instances
        self._max_throughput = max_throughput
        self._min_instances = min_instances
        self._min_throughput = min_throughput
        self._name = name
        self._network = network
        self._state = state
        self._subnet = subnet

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Connector':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Connector of this Connector.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def connected_projects(self):
        """Gets the connected_projects of this Connector.

        Output only. List of projects using the connector.

        :return: The connected_projects of this Connector.
        :rtype: List[str]
        """
        return self._connected_projects

    @connected_projects.setter
    def connected_projects(self, connected_projects):
        """Sets the connected_projects of this Connector.

        Output only. List of projects using the connector.

        :param connected_projects: The connected_projects of this Connector.
        :type connected_projects: List[str]
        """

        self._connected_projects = connected_projects

    @property
    def ip_cidr_range(self):
        """Gets the ip_cidr_range of this Connector.

        The range of internal addresses that follows RFC 4632 notation. Example: `10.132.0.0/28`.

        :return: The ip_cidr_range of this Connector.
        :rtype: str
        """
        return self._ip_cidr_range

    @ip_cidr_range.setter
    def ip_cidr_range(self, ip_cidr_range):
        """Sets the ip_cidr_range of this Connector.

        The range of internal addresses that follows RFC 4632 notation. Example: `10.132.0.0/28`.

        :param ip_cidr_range: The ip_cidr_range of this Connector.
        :type ip_cidr_range: str
        """

        self._ip_cidr_range = ip_cidr_range

    @property
    def machine_type(self):
        """Gets the machine_type of this Connector.

        Machine type of VM Instance underlying connector. Default is e2-micro

        :return: The machine_type of this Connector.
        :rtype: str
        """
        return self._machine_type

    @machine_type.setter
    def machine_type(self, machine_type):
        """Sets the machine_type of this Connector.

        Machine type of VM Instance underlying connector. Default is e2-micro

        :param machine_type: The machine_type of this Connector.
        :type machine_type: str
        """

        self._machine_type = machine_type

    @property
    def max_instances(self):
        """Gets the max_instances of this Connector.

        Maximum value of instances in autoscaling group underlying the connector.

        :return: The max_instances of this Connector.
        :rtype: int
        """
        return self._max_instances

    @max_instances.setter
    def max_instances(self, max_instances):
        """Sets the max_instances of this Connector.

        Maximum value of instances in autoscaling group underlying the connector.

        :param max_instances: The max_instances of this Connector.
        :type max_instances: int
        """

        self._max_instances = max_instances

    @property
    def max_throughput(self):
        """Gets the max_throughput of this Connector.

        Maximum throughput of the connector in Mbps. Refers to the expected throughput when using an `e2-micro` machine type. Value must be a multiple of 100 from 300 through 1000. Must be higher than the value specified by --min-throughput. If both max-throughput and max-instances are provided, max-instances takes precedence over max-throughput. The use of `max-throughput` is discouraged in favor of `max-instances`.

        :return: The max_throughput of this Connector.
        :rtype: int
        """
        return self._max_throughput

    @max_throughput.setter
    def max_throughput(self, max_throughput):
        """Sets the max_throughput of this Connector.

        Maximum throughput of the connector in Mbps. Refers to the expected throughput when using an `e2-micro` machine type. Value must be a multiple of 100 from 300 through 1000. Must be higher than the value specified by --min-throughput. If both max-throughput and max-instances are provided, max-instances takes precedence over max-throughput. The use of `max-throughput` is discouraged in favor of `max-instances`.

        :param max_throughput: The max_throughput of this Connector.
        :type max_throughput: int
        """

        self._max_throughput = max_throughput

    @property
    def min_instances(self):
        """Gets the min_instances of this Connector.

        Minimum value of instances in autoscaling group underlying the connector.

        :return: The min_instances of this Connector.
        :rtype: int
        """
        return self._min_instances

    @min_instances.setter
    def min_instances(self, min_instances):
        """Sets the min_instances of this Connector.

        Minimum value of instances in autoscaling group underlying the connector.

        :param min_instances: The min_instances of this Connector.
        :type min_instances: int
        """

        self._min_instances = min_instances

    @property
    def min_throughput(self):
        """Gets the min_throughput of this Connector.

        Minimum throughput of the connector in Mbps. Refers to the expected throughput when using an `e2-micro` machine type. Value must be a multiple of 100 from 200 through 900. Must be lower than the value specified by --max-throughput. If both min-throughput and min-instances are provided, min-instances takes precedence over min-throughput. The use of `min-throughput` is discouraged in favor of `min-instances`.

        :return: The min_throughput of this Connector.
        :rtype: int
        """
        return self._min_throughput

    @min_throughput.setter
    def min_throughput(self, min_throughput):
        """Sets the min_throughput of this Connector.

        Minimum throughput of the connector in Mbps. Refers to the expected throughput when using an `e2-micro` machine type. Value must be a multiple of 100 from 200 through 900. Must be lower than the value specified by --max-throughput. If both min-throughput and min-instances are provided, min-instances takes precedence over min-throughput. The use of `min-throughput` is discouraged in favor of `min-instances`.

        :param min_throughput: The min_throughput of this Connector.
        :type min_throughput: int
        """

        self._min_throughput = min_throughput

    @property
    def name(self):
        """Gets the name of this Connector.

        The resource name in the format `projects/*/locations/*/connectors/*`.

        :return: The name of this Connector.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Connector.

        The resource name in the format `projects/*/locations/*/connectors/*`.

        :param name: The name of this Connector.
        :type name: str
        """

        self._name = name

    @property
    def network(self):
        """Gets the network of this Connector.

        Name of a VPC network.

        :return: The network of this Connector.
        :rtype: str
        """
        return self._network

    @network.setter
    def network(self, network):
        """Sets the network of this Connector.

        Name of a VPC network.

        :param network: The network of this Connector.
        :type network: str
        """

        self._network = network

    @property
    def state(self):
        """Gets the state of this Connector.

        Output only. State of the VPC access connector.

        :return: The state of this Connector.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Connector.

        Output only. State of the VPC access connector.

        :param state: The state of this Connector.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "READY", "CREATING", "DELETING", "ERROR", "UPDATING"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def subnet(self):
        """Gets the subnet of this Connector.


        :return: The subnet of this Connector.
        :rtype: Subnet
        """
        return self._subnet

    @subnet.setter
    def subnet(self, subnet):
        """Sets the subnet of this Connector.


        :param subnet: The subnet of this Connector.
        :type subnet: Subnet
        """

        self._subnet = subnet
