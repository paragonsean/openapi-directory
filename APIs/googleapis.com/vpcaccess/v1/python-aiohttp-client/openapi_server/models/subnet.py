# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Subnet(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, project_id: str=None):
        """Subnet - a model defined in OpenAPI

        :param name: The name of this Subnet.
        :param project_id: The project_id of this Subnet.
        """
        self.openapi_types = {
            'name': str,
            'project_id': str
        }

        self.attribute_map = {
            'name': 'name',
            'project_id': 'projectId'
        }

        self._name = name
        self._project_id = project_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Subnet':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Subnet of this Subnet.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this Subnet.

        Subnet name (relative, not fully qualified). E.g. if the full subnet selfLink is https://compute.googleapis.com/compute/v1/projects/{project}/regions/{region}/subnetworks/{subnetName} the correct input for this field would be {subnetName}

        :return: The name of this Subnet.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Subnet.

        Subnet name (relative, not fully qualified). E.g. if the full subnet selfLink is https://compute.googleapis.com/compute/v1/projects/{project}/regions/{region}/subnetworks/{subnetName} the correct input for this field would be {subnetName}

        :param name: The name of this Subnet.
        :type name: str
        """

        self._name = name

    @property
    def project_id(self):
        """Gets the project_id of this Subnet.

        Project in which the subnet exists. If not set, this project is assumed to be the project for which the connector create request was issued.

        :return: The project_id of this Subnet.
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this Subnet.

        Project in which the subnet exists. If not set, this project is assumed to be the project for which the connector create request was issued.

        :param project_id: The project_id of this Subnet.
        :type project_id: str
        """

        self._project_id = project_id
