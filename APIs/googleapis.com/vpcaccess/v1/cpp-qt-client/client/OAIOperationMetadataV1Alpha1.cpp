/**
 * Serverless VPC Access API
 * API for managing VPC access connectors.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOperationMetadataV1Alpha1.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOperationMetadataV1Alpha1::OAIOperationMetadataV1Alpha1(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOperationMetadataV1Alpha1::OAIOperationMetadataV1Alpha1() {
    this->initializeModel();
}

OAIOperationMetadataV1Alpha1::~OAIOperationMetadataV1Alpha1() {}

void OAIOperationMetadataV1Alpha1::initializeModel() {

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_insert_time_isSet = false;
    m_insert_time_isValid = false;

    m_method_isSet = false;
    m_method_isValid = false;

    m_target_isSet = false;
    m_target_isValid = false;
}

void OAIOperationMetadataV1Alpha1::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOperationMetadataV1Alpha1::fromJsonObject(QJsonObject json) {

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("endTime")]);
    m_end_time_isSet = !json[QString("endTime")].isNull() && m_end_time_isValid;

    m_insert_time_isValid = ::OpenAPI::fromJsonValue(m_insert_time, json[QString("insertTime")]);
    m_insert_time_isSet = !json[QString("insertTime")].isNull() && m_insert_time_isValid;

    m_method_isValid = ::OpenAPI::fromJsonValue(m_method, json[QString("method")]);
    m_method_isSet = !json[QString("method")].isNull() && m_method_isValid;

    m_target_isValid = ::OpenAPI::fromJsonValue(m_target, json[QString("target")]);
    m_target_isSet = !json[QString("target")].isNull() && m_target_isValid;
}

QString OAIOperationMetadataV1Alpha1::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOperationMetadataV1Alpha1::asJsonObject() const {
    QJsonObject obj;
    if (m_end_time_isSet) {
        obj.insert(QString("endTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_insert_time_isSet) {
        obj.insert(QString("insertTime"), ::OpenAPI::toJsonValue(m_insert_time));
    }
    if (m_method_isSet) {
        obj.insert(QString("method"), ::OpenAPI::toJsonValue(m_method));
    }
    if (m_target_isSet) {
        obj.insert(QString("target"), ::OpenAPI::toJsonValue(m_target));
    }
    return obj;
}

QString OAIOperationMetadataV1Alpha1::getEndTime() const {
    return m_end_time;
}
void OAIOperationMetadataV1Alpha1::setEndTime(const QString &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIOperationMetadataV1Alpha1::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIOperationMetadataV1Alpha1::is_end_time_Valid() const{
    return m_end_time_isValid;
}

QString OAIOperationMetadataV1Alpha1::getInsertTime() const {
    return m_insert_time;
}
void OAIOperationMetadataV1Alpha1::setInsertTime(const QString &insert_time) {
    m_insert_time = insert_time;
    m_insert_time_isSet = true;
}

bool OAIOperationMetadataV1Alpha1::is_insert_time_Set() const{
    return m_insert_time_isSet;
}

bool OAIOperationMetadataV1Alpha1::is_insert_time_Valid() const{
    return m_insert_time_isValid;
}

QString OAIOperationMetadataV1Alpha1::getMethod() const {
    return m_method;
}
void OAIOperationMetadataV1Alpha1::setMethod(const QString &method) {
    m_method = method;
    m_method_isSet = true;
}

bool OAIOperationMetadataV1Alpha1::is_method_Set() const{
    return m_method_isSet;
}

bool OAIOperationMetadataV1Alpha1::is_method_Valid() const{
    return m_method_isValid;
}

QString OAIOperationMetadataV1Alpha1::getTarget() const {
    return m_target;
}
void OAIOperationMetadataV1Alpha1::setTarget(const QString &target) {
    m_target = target;
    m_target_isSet = true;
}

bool OAIOperationMetadataV1Alpha1::is_target_Set() const{
    return m_target_isSet;
}

bool OAIOperationMetadataV1Alpha1::is_target_Valid() const{
    return m_target_isValid;
}

bool OAIOperationMetadataV1Alpha1::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_insert_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOperationMetadataV1Alpha1::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
