/**
 * Serverless VPC Access API
 * API for managing VPC access connectors.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIConnector.h
 *
 * Definition of a Serverless VPC Access connector.
 */

#ifndef OAIConnector_H
#define OAIConnector_H

#include <QJsonObject>

#include "OAISubnet.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAISubnet;

class OAIConnector : public OAIObject {
public:
    OAIConnector();
    OAIConnector(QString json);
    ~OAIConnector() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<QString> getConnectedProjects() const;
    void setConnectedProjects(const QList<QString> &connected_projects);
    bool is_connected_projects_Set() const;
    bool is_connected_projects_Valid() const;

    QString getIpCidrRange() const;
    void setIpCidrRange(const QString &ip_cidr_range);
    bool is_ip_cidr_range_Set() const;
    bool is_ip_cidr_range_Valid() const;

    QString getMachineType() const;
    void setMachineType(const QString &machine_type);
    bool is_machine_type_Set() const;
    bool is_machine_type_Valid() const;

    qint32 getMaxInstances() const;
    void setMaxInstances(const qint32 &max_instances);
    bool is_max_instances_Set() const;
    bool is_max_instances_Valid() const;

    qint32 getMaxThroughput() const;
    void setMaxThroughput(const qint32 &max_throughput);
    bool is_max_throughput_Set() const;
    bool is_max_throughput_Valid() const;

    qint32 getMinInstances() const;
    void setMinInstances(const qint32 &min_instances);
    bool is_min_instances_Set() const;
    bool is_min_instances_Valid() const;

    qint32 getMinThroughput() const;
    void setMinThroughput(const qint32 &min_throughput);
    bool is_min_throughput_Set() const;
    bool is_min_throughput_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getNetwork() const;
    void setNetwork(const QString &network);
    bool is_network_Set() const;
    bool is_network_Valid() const;

    QString getState() const;
    void setState(const QString &state);
    bool is_state_Set() const;
    bool is_state_Valid() const;

    OAISubnet getSubnet() const;
    void setSubnet(const OAISubnet &subnet);
    bool is_subnet_Set() const;
    bool is_subnet_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<QString> m_connected_projects;
    bool m_connected_projects_isSet;
    bool m_connected_projects_isValid;

    QString m_ip_cidr_range;
    bool m_ip_cidr_range_isSet;
    bool m_ip_cidr_range_isValid;

    QString m_machine_type;
    bool m_machine_type_isSet;
    bool m_machine_type_isValid;

    qint32 m_max_instances;
    bool m_max_instances_isSet;
    bool m_max_instances_isValid;

    qint32 m_max_throughput;
    bool m_max_throughput_isSet;
    bool m_max_throughput_isValid;

    qint32 m_min_instances;
    bool m_min_instances_isSet;
    bool m_min_instances_isValid;

    qint32 m_min_throughput;
    bool m_min_throughput_isSet;
    bool m_min_throughput_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_network;
    bool m_network_isSet;
    bool m_network_isValid;

    QString m_state;
    bool m_state_isSet;
    bool m_state_isValid;

    OAISubnet m_subnet;
    bool m_subnet_isSet;
    bool m_subnet_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIConnector)

#endif // OAIConnector_H
