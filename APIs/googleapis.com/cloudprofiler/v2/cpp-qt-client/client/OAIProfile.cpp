/**
 * Cloud Profiler API
 * Manages continuous profiling information.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProfile.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProfile::OAIProfile(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProfile::OAIProfile() {
    this->initializeModel();
}

OAIProfile::~OAIProfile() {}

void OAIProfile::initializeModel() {

    m_deployment_isSet = false;
    m_deployment_isValid = false;

    m_duration_isSet = false;
    m_duration_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_profile_bytes_isSet = false;
    m_profile_bytes_isValid = false;

    m_profile_type_isSet = false;
    m_profile_type_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;
}

void OAIProfile::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProfile::fromJsonObject(QJsonObject json) {

    m_deployment_isValid = ::OpenAPI::fromJsonValue(m_deployment, json[QString("deployment")]);
    m_deployment_isSet = !json[QString("deployment")].isNull() && m_deployment_isValid;

    m_duration_isValid = ::OpenAPI::fromJsonValue(m_duration, json[QString("duration")]);
    m_duration_isSet = !json[QString("duration")].isNull() && m_duration_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_profile_bytes_isValid = ::OpenAPI::fromJsonValue(m_profile_bytes, json[QString("profileBytes")]);
    m_profile_bytes_isSet = !json[QString("profileBytes")].isNull() && m_profile_bytes_isValid;

    m_profile_type_isValid = ::OpenAPI::fromJsonValue(m_profile_type, json[QString("profileType")]);
    m_profile_type_isSet = !json[QString("profileType")].isNull() && m_profile_type_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;
}

QString OAIProfile::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProfile::asJsonObject() const {
    QJsonObject obj;
    if (m_deployment.isSet()) {
        obj.insert(QString("deployment"), ::OpenAPI::toJsonValue(m_deployment));
    }
    if (m_duration_isSet) {
        obj.insert(QString("duration"), ::OpenAPI::toJsonValue(m_duration));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_profile_bytes_isSet) {
        obj.insert(QString("profileBytes"), ::OpenAPI::toJsonValue(m_profile_bytes));
    }
    if (m_profile_type_isSet) {
        obj.insert(QString("profileType"), ::OpenAPI::toJsonValue(m_profile_type));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    return obj;
}

OAIDeployment OAIProfile::getDeployment() const {
    return m_deployment;
}
void OAIProfile::setDeployment(const OAIDeployment &deployment) {
    m_deployment = deployment;
    m_deployment_isSet = true;
}

bool OAIProfile::is_deployment_Set() const{
    return m_deployment_isSet;
}

bool OAIProfile::is_deployment_Valid() const{
    return m_deployment_isValid;
}

QString OAIProfile::getDuration() const {
    return m_duration;
}
void OAIProfile::setDuration(const QString &duration) {
    m_duration = duration;
    m_duration_isSet = true;
}

bool OAIProfile::is_duration_Set() const{
    return m_duration_isSet;
}

bool OAIProfile::is_duration_Valid() const{
    return m_duration_isValid;
}

QMap<QString, QString> OAIProfile::getLabels() const {
    return m_labels;
}
void OAIProfile::setLabels(const QMap<QString, QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIProfile::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIProfile::is_labels_Valid() const{
    return m_labels_isValid;
}

QString OAIProfile::getName() const {
    return m_name;
}
void OAIProfile::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIProfile::is_name_Set() const{
    return m_name_isSet;
}

bool OAIProfile::is_name_Valid() const{
    return m_name_isValid;
}

QByteArray OAIProfile::getProfileBytes() const {
    return m_profile_bytes;
}
void OAIProfile::setProfileBytes(const QByteArray &profile_bytes) {
    m_profile_bytes = profile_bytes;
    m_profile_bytes_isSet = true;
}

bool OAIProfile::is_profile_bytes_Set() const{
    return m_profile_bytes_isSet;
}

bool OAIProfile::is_profile_bytes_Valid() const{
    return m_profile_bytes_isValid;
}

QString OAIProfile::getProfileType() const {
    return m_profile_type;
}
void OAIProfile::setProfileType(const QString &profile_type) {
    m_profile_type = profile_type;
    m_profile_type_isSet = true;
}

bool OAIProfile::is_profile_type_Set() const{
    return m_profile_type_isSet;
}

bool OAIProfile::is_profile_type_Valid() const{
    return m_profile_type_isValid;
}

QString OAIProfile::getStartTime() const {
    return m_start_time;
}
void OAIProfile::setStartTime(const QString &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIProfile::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIProfile::is_start_time_Valid() const{
    return m_start_time_isValid;
}

bool OAIProfile::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_deployment.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_profile_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_profile_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProfile::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
