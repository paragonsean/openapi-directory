/**
 * Cloud Profiler API
 * Manages continuous profiling information.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListProfilesResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListProfilesResponse::OAIListProfilesResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListProfilesResponse::OAIListProfilesResponse() {
    this->initializeModel();
}

OAIListProfilesResponse::~OAIListProfilesResponse() {}

void OAIListProfilesResponse::initializeModel() {

    m_next_page_token_isSet = false;
    m_next_page_token_isValid = false;

    m_profiles_isSet = false;
    m_profiles_isValid = false;

    m_skipped_profiles_isSet = false;
    m_skipped_profiles_isValid = false;
}

void OAIListProfilesResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListProfilesResponse::fromJsonObject(QJsonObject json) {

    m_next_page_token_isValid = ::OpenAPI::fromJsonValue(m_next_page_token, json[QString("nextPageToken")]);
    m_next_page_token_isSet = !json[QString("nextPageToken")].isNull() && m_next_page_token_isValid;

    m_profiles_isValid = ::OpenAPI::fromJsonValue(m_profiles, json[QString("profiles")]);
    m_profiles_isSet = !json[QString("profiles")].isNull() && m_profiles_isValid;

    m_skipped_profiles_isValid = ::OpenAPI::fromJsonValue(m_skipped_profiles, json[QString("skippedProfiles")]);
    m_skipped_profiles_isSet = !json[QString("skippedProfiles")].isNull() && m_skipped_profiles_isValid;
}

QString OAIListProfilesResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListProfilesResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_next_page_token_isSet) {
        obj.insert(QString("nextPageToken"), ::OpenAPI::toJsonValue(m_next_page_token));
    }
    if (m_profiles.size() > 0) {
        obj.insert(QString("profiles"), ::OpenAPI::toJsonValue(m_profiles));
    }
    if (m_skipped_profiles_isSet) {
        obj.insert(QString("skippedProfiles"), ::OpenAPI::toJsonValue(m_skipped_profiles));
    }
    return obj;
}

QString OAIListProfilesResponse::getNextPageToken() const {
    return m_next_page_token;
}
void OAIListProfilesResponse::setNextPageToken(const QString &next_page_token) {
    m_next_page_token = next_page_token;
    m_next_page_token_isSet = true;
}

bool OAIListProfilesResponse::is_next_page_token_Set() const{
    return m_next_page_token_isSet;
}

bool OAIListProfilesResponse::is_next_page_token_Valid() const{
    return m_next_page_token_isValid;
}

QList<OAIProfile> OAIListProfilesResponse::getProfiles() const {
    return m_profiles;
}
void OAIListProfilesResponse::setProfiles(const QList<OAIProfile> &profiles) {
    m_profiles = profiles;
    m_profiles_isSet = true;
}

bool OAIListProfilesResponse::is_profiles_Set() const{
    return m_profiles_isSet;
}

bool OAIListProfilesResponse::is_profiles_Valid() const{
    return m_profiles_isValid;
}

qint32 OAIListProfilesResponse::getSkippedProfiles() const {
    return m_skipped_profiles;
}
void OAIListProfilesResponse::setSkippedProfiles(const qint32 &skipped_profiles) {
    m_skipped_profiles = skipped_profiles;
    m_skipped_profiles_isSet = true;
}

bool OAIListProfilesResponse::is_skipped_profiles_Set() const{
    return m_skipped_profiles_isSet;
}

bool OAIListProfilesResponse::is_skipped_profiles_Valid() const{
    return m_skipped_profiles_isValid;
}

bool OAIListProfilesResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_next_page_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_profiles.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_skipped_profiles_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListProfilesResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
