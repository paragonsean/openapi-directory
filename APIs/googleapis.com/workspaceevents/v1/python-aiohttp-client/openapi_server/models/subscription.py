# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.notification_endpoint import NotificationEndpoint
from openapi_server.models.payload_options import PayloadOptions
from openapi_server import util


class Subscription(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, authority: str=None, create_time: str=None, etag: str=None, event_types: List[str]=None, expire_time: str=None, name: str=None, notification_endpoint: NotificationEndpoint=None, payload_options: PayloadOptions=None, reconciling: bool=None, state: str=None, suspension_reason: str=None, target_resource: str=None, ttl: str=None, uid: str=None, update_time: str=None):
        """Subscription - a model defined in OpenAPI

        :param authority: The authority of this Subscription.
        :param create_time: The create_time of this Subscription.
        :param etag: The etag of this Subscription.
        :param event_types: The event_types of this Subscription.
        :param expire_time: The expire_time of this Subscription.
        :param name: The name of this Subscription.
        :param notification_endpoint: The notification_endpoint of this Subscription.
        :param payload_options: The payload_options of this Subscription.
        :param reconciling: The reconciling of this Subscription.
        :param state: The state of this Subscription.
        :param suspension_reason: The suspension_reason of this Subscription.
        :param target_resource: The target_resource of this Subscription.
        :param ttl: The ttl of this Subscription.
        :param uid: The uid of this Subscription.
        :param update_time: The update_time of this Subscription.
        """
        self.openapi_types = {
            'authority': str,
            'create_time': str,
            'etag': str,
            'event_types': List[str],
            'expire_time': str,
            'name': str,
            'notification_endpoint': NotificationEndpoint,
            'payload_options': PayloadOptions,
            'reconciling': bool,
            'state': str,
            'suspension_reason': str,
            'target_resource': str,
            'ttl': str,
            'uid': str,
            'update_time': str
        }

        self.attribute_map = {
            'authority': 'authority',
            'create_time': 'createTime',
            'etag': 'etag',
            'event_types': 'eventTypes',
            'expire_time': 'expireTime',
            'name': 'name',
            'notification_endpoint': 'notificationEndpoint',
            'payload_options': 'payloadOptions',
            'reconciling': 'reconciling',
            'state': 'state',
            'suspension_reason': 'suspensionReason',
            'target_resource': 'targetResource',
            'ttl': 'ttl',
            'uid': 'uid',
            'update_time': 'updateTime'
        }

        self._authority = authority
        self._create_time = create_time
        self._etag = etag
        self._event_types = event_types
        self._expire_time = expire_time
        self._name = name
        self._notification_endpoint = notification_endpoint
        self._payload_options = payload_options
        self._reconciling = reconciling
        self._state = state
        self._suspension_reason = suspension_reason
        self._target_resource = target_resource
        self._ttl = ttl
        self._uid = uid
        self._update_time = update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Subscription':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Subscription of this Subscription.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def authority(self):
        """Gets the authority of this Subscription.

        Output only. The user who authorized the creation of the subscription. Format: `users/{user}` For Google Workspace users, the `{user}` value is the [`user.id`](https://developers.google.com/admin-sdk/directory/reference/rest/v1/users#User.FIELDS.ids) field from the Directory API.

        :return: The authority of this Subscription.
        :rtype: str
        """
        return self._authority

    @authority.setter
    def authority(self, authority):
        """Sets the authority of this Subscription.

        Output only. The user who authorized the creation of the subscription. Format: `users/{user}` For Google Workspace users, the `{user}` value is the [`user.id`](https://developers.google.com/admin-sdk/directory/reference/rest/v1/users#User.FIELDS.ids) field from the Directory API.

        :param authority: The authority of this Subscription.
        :type authority: str
        """

        self._authority = authority

    @property
    def create_time(self):
        """Gets the create_time of this Subscription.

        Output only. The time when the subscription is created.

        :return: The create_time of this Subscription.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this Subscription.

        Output only. The time when the subscription is created.

        :param create_time: The create_time of this Subscription.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def etag(self):
        """Gets the etag of this Subscription.

        Optional. This checksum is computed by the server based on the value of other fields, and might be sent on update requests to ensure the client has an up-to-date value before proceeding.

        :return: The etag of this Subscription.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this Subscription.

        Optional. This checksum is computed by the server based on the value of other fields, and might be sent on update requests to ensure the client has an up-to-date value before proceeding.

        :param etag: The etag of this Subscription.
        :type etag: str
        """

        self._etag = etag

    @property
    def event_types(self):
        """Gets the event_types of this Subscription.

        Required. Immutable. Unordered list. Input for creating a subscription. Otherwise, output only. One or more types of events to receive about the target resource. Formatted according to the CloudEvents specification. The supported event types depend on the target resource of your subscription. For details, see [Supported Google Workspace events](https://developers.google.com/workspace/events/guides#supported-events). By default, you also receive events about the [lifecycle of your subscription](https://developers.google.com/workspace/events/guides/events-lifecycle). You don't need to specify lifecycle events for this field. If you specify an event type that doesn't exist for the target resource, the request returns an HTTP `400 Bad Request` status code.

        :return: The event_types of this Subscription.
        :rtype: List[str]
        """
        return self._event_types

    @event_types.setter
    def event_types(self, event_types):
        """Sets the event_types of this Subscription.

        Required. Immutable. Unordered list. Input for creating a subscription. Otherwise, output only. One or more types of events to receive about the target resource. Formatted according to the CloudEvents specification. The supported event types depend on the target resource of your subscription. For details, see [Supported Google Workspace events](https://developers.google.com/workspace/events/guides#supported-events). By default, you also receive events about the [lifecycle of your subscription](https://developers.google.com/workspace/events/guides/events-lifecycle). You don't need to specify lifecycle events for this field. If you specify an event type that doesn't exist for the target resource, the request returns an HTTP `400 Bad Request` status code.

        :param event_types: The event_types of this Subscription.
        :type event_types: List[str]
        """

        self._event_types = event_types

    @property
    def expire_time(self):
        """Gets the expire_time of this Subscription.

        Non-empty default. The timestamp in UTC when the subscription expires. Always displayed on output, regardless of what was used on input.

        :return: The expire_time of this Subscription.
        :rtype: str
        """
        return self._expire_time

    @expire_time.setter
    def expire_time(self, expire_time):
        """Sets the expire_time of this Subscription.

        Non-empty default. The timestamp in UTC when the subscription expires. Always displayed on output, regardless of what was used on input.

        :param expire_time: The expire_time of this Subscription.
        :type expire_time: str
        """

        self._expire_time = expire_time

    @property
    def name(self):
        """Gets the name of this Subscription.

        Optional. Immutable. Identifier. Resource name of the subscription. Format: `subscriptions/{subscription}`

        :return: The name of this Subscription.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Subscription.

        Optional. Immutable. Identifier. Resource name of the subscription. Format: `subscriptions/{subscription}`

        :param name: The name of this Subscription.
        :type name: str
        """

        self._name = name

    @property
    def notification_endpoint(self):
        """Gets the notification_endpoint of this Subscription.


        :return: The notification_endpoint of this Subscription.
        :rtype: NotificationEndpoint
        """
        return self._notification_endpoint

    @notification_endpoint.setter
    def notification_endpoint(self, notification_endpoint):
        """Sets the notification_endpoint of this Subscription.


        :param notification_endpoint: The notification_endpoint of this Subscription.
        :type notification_endpoint: NotificationEndpoint
        """

        self._notification_endpoint = notification_endpoint

    @property
    def payload_options(self):
        """Gets the payload_options of this Subscription.


        :return: The payload_options of this Subscription.
        :rtype: PayloadOptions
        """
        return self._payload_options

    @payload_options.setter
    def payload_options(self, payload_options):
        """Sets the payload_options of this Subscription.


        :param payload_options: The payload_options of this Subscription.
        :type payload_options: PayloadOptions
        """

        self._payload_options = payload_options

    @property
    def reconciling(self):
        """Gets the reconciling of this Subscription.

        Output only. If `true`, the subscription is in the process of being updated.

        :return: The reconciling of this Subscription.
        :rtype: bool
        """
        return self._reconciling

    @reconciling.setter
    def reconciling(self, reconciling):
        """Sets the reconciling of this Subscription.

        Output only. If `true`, the subscription is in the process of being updated.

        :param reconciling: The reconciling of this Subscription.
        :type reconciling: bool
        """

        self._reconciling = reconciling

    @property
    def state(self):
        """Gets the state of this Subscription.

        Output only. The state of the subscription. Determines whether the subscription can receive events and deliver them to the notification endpoint.

        :return: The state of this Subscription.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Subscription.

        Output only. The state of the subscription. Determines whether the subscription can receive events and deliver them to the notification endpoint.

        :param state: The state of this Subscription.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "ACTIVE", "SUSPENDED", "DELETED"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def suspension_reason(self):
        """Gets the suspension_reason of this Subscription.

        Output only. The error that suspended the subscription. To reactivate the subscription, resolve the error and call the `ReactivateSubscription` method.

        :return: The suspension_reason of this Subscription.
        :rtype: str
        """
        return self._suspension_reason

    @suspension_reason.setter
    def suspension_reason(self, suspension_reason):
        """Sets the suspension_reason of this Subscription.

        Output only. The error that suspended the subscription. To reactivate the subscription, resolve the error and call the `ReactivateSubscription` method.

        :param suspension_reason: The suspension_reason of this Subscription.
        :type suspension_reason: str
        """
        allowed_values = ["ERROR_TYPE_UNSPECIFIED", "USER_SCOPE_REVOKED", "RESOURCE_DELETED", "USER_AUTHORIZATION_FAILURE", "ENDPOINT_PERMISSION_DENIED", "ENDPOINT_NOT_FOUND", "ENDPOINT_RESOURCE_EXHAUSTED", "OTHER"]  # noqa: E501
        if suspension_reason not in allowed_values:
            raise ValueError(
                "Invalid value for `suspension_reason` ({0}), must be one of {1}"
                .format(suspension_reason, allowed_values)
            )

        self._suspension_reason = suspension_reason

    @property
    def target_resource(self):
        """Gets the target_resource of this Subscription.

        Required. Immutable. The Google Workspace resource that's monitored for events, formatted as the [full resource name](https://google.aip.dev/122#full-resource-names). To learn about target resources and the events that they support, see [Supported Google Workspace events](https://developers.google.com/workspace/events#supported-events). A user can only authorize your app to create one subscription for a given target resource. If your app tries to create another subscription with the same user credentials, the request returns an `ALREADY_EXISTS` error.

        :return: The target_resource of this Subscription.
        :rtype: str
        """
        return self._target_resource

    @target_resource.setter
    def target_resource(self, target_resource):
        """Sets the target_resource of this Subscription.

        Required. Immutable. The Google Workspace resource that's monitored for events, formatted as the [full resource name](https://google.aip.dev/122#full-resource-names). To learn about target resources and the events that they support, see [Supported Google Workspace events](https://developers.google.com/workspace/events#supported-events). A user can only authorize your app to create one subscription for a given target resource. If your app tries to create another subscription with the same user credentials, the request returns an `ALREADY_EXISTS` error.

        :param target_resource: The target_resource of this Subscription.
        :type target_resource: str
        """

        self._target_resource = target_resource

    @property
    def ttl(self):
        """Gets the ttl of this Subscription.

        Input only. The time-to-live (TTL) or duration for the subscription. If unspecified or set to `0`, uses the maximum possible duration.

        :return: The ttl of this Subscription.
        :rtype: str
        """
        return self._ttl

    @ttl.setter
    def ttl(self, ttl):
        """Sets the ttl of this Subscription.

        Input only. The time-to-live (TTL) or duration for the subscription. If unspecified or set to `0`, uses the maximum possible duration.

        :param ttl: The ttl of this Subscription.
        :type ttl: str
        """

        self._ttl = ttl

    @property
    def uid(self):
        """Gets the uid of this Subscription.

        Output only. System-assigned unique identifier for the subscription.

        :return: The uid of this Subscription.
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this Subscription.

        Output only. System-assigned unique identifier for the subscription.

        :param uid: The uid of this Subscription.
        :type uid: str
        """

        self._uid = uid

    @property
    def update_time(self):
        """Gets the update_time of this Subscription.

        Output only. The last time that the subscription is updated.

        :return: The update_time of this Subscription.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this Subscription.

        Output only. The last time that the subscription is updated.

        :param update_time: The update_time of this Subscription.
        :type update_time: str
        """

        self._update_time = update_time
