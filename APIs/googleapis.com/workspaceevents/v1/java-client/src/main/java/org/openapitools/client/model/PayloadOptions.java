/*
 * Google Workspace Events API
 * The Google Workspace Events API lets you subscribe to events and manage change notifications across Google Workspace applications.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Options about what data to include in the event payload. Only supported for Google Chat events.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:39:52.508100-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PayloadOptions {
  public static final String SERIALIZED_NAME_FIELD_MASK = "fieldMask";
  @SerializedName(SERIALIZED_NAME_FIELD_MASK)
  private String fieldMask;

  public static final String SERIALIZED_NAME_INCLUDE_RESOURCE = "includeResource";
  @SerializedName(SERIALIZED_NAME_INCLUDE_RESOURCE)
  private Boolean includeResource;

  public PayloadOptions() {
  }

  public PayloadOptions fieldMask(String fieldMask) {
    this.fieldMask = fieldMask;
    return this;
  }

  /**
   * Optional. If &#x60;include_resource&#x60; is set to &#x60;true&#x60;, the list of fields to include in the event payload. Separate fields with a comma. For example, to include a Google Chat message&#39;s sender and create time, enter &#x60;message.sender,message.createTime&#x60;. If omitted, the payload includes all fields for the resource. If you specify a field that doesn&#39;t exist for the resource, the system ignores the field.
   * @return fieldMask
   */
  @javax.annotation.Nullable
  public String getFieldMask() {
    return fieldMask;
  }

  public void setFieldMask(String fieldMask) {
    this.fieldMask = fieldMask;
  }


  public PayloadOptions includeResource(Boolean includeResource) {
    this.includeResource = includeResource;
    return this;
  }

  /**
   * Optional. Whether the event payload includes data about the resource that changed. For example, for an event where a Google Chat message was created, whether the payload contains data about the [&#x60;Message&#x60;](https://developers.google.com/chat/api/reference/rest/v1/spaces.messages) resource. If false, the event payload only includes the name of the changed resource.
   * @return includeResource
   */
  @javax.annotation.Nullable
  public Boolean getIncludeResource() {
    return includeResource;
  }

  public void setIncludeResource(Boolean includeResource) {
    this.includeResource = includeResource;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PayloadOptions payloadOptions = (PayloadOptions) o;
    return Objects.equals(this.fieldMask, payloadOptions.fieldMask) &&
        Objects.equals(this.includeResource, payloadOptions.includeResource);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fieldMask, includeResource);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PayloadOptions {\n");
    sb.append("    fieldMask: ").append(toIndentedString(fieldMask)).append("\n");
    sb.append("    includeResource: ").append(toIndentedString(includeResource)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("fieldMask");
    openapiFields.add("includeResource");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PayloadOptions
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PayloadOptions.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PayloadOptions is not found in the empty JSON string", PayloadOptions.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PayloadOptions.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PayloadOptions` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("fieldMask") != null && !jsonObj.get("fieldMask").isJsonNull()) && !jsonObj.get("fieldMask").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fieldMask` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fieldMask").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PayloadOptions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PayloadOptions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PayloadOptions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PayloadOptions.class));

       return (TypeAdapter<T>) new TypeAdapter<PayloadOptions>() {
           @Override
           public void write(JsonWriter out, PayloadOptions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PayloadOptions read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PayloadOptions given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PayloadOptions
   * @throws IOException if the JSON string is invalid with respect to PayloadOptions
   */
  public static PayloadOptions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PayloadOptions.class);
  }

  /**
   * Convert an instance of PayloadOptions to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

