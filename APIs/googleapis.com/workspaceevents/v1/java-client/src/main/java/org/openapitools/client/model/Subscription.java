/*
 * Google Workspace Events API
 * The Google Workspace Events API lets you subscribe to events and manage change notifications across Google Workspace applications.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.NotificationEndpoint;
import org.openapitools.client.model.PayloadOptions;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * [Developer Preview](https://developers.google.com/workspace/preview). A subscription to receive events about a Google Workspace resource. To learn more about subscriptions, see the [Google Workspace Events API overview](https://developers.google.com/workspace/events).
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:39:52.508100-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Subscription {
  public static final String SERIALIZED_NAME_AUTHORITY = "authority";
  @SerializedName(SERIALIZED_NAME_AUTHORITY)
  private String authority;

  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private String createTime;

  public static final String SERIALIZED_NAME_ETAG = "etag";
  @SerializedName(SERIALIZED_NAME_ETAG)
  private String etag;

  public static final String SERIALIZED_NAME_EVENT_TYPES = "eventTypes";
  @SerializedName(SERIALIZED_NAME_EVENT_TYPES)
  private List<String> eventTypes = new ArrayList<>();

  public static final String SERIALIZED_NAME_EXPIRE_TIME = "expireTime";
  @SerializedName(SERIALIZED_NAME_EXPIRE_TIME)
  private String expireTime;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NOTIFICATION_ENDPOINT = "notificationEndpoint";
  @SerializedName(SERIALIZED_NAME_NOTIFICATION_ENDPOINT)
  private NotificationEndpoint notificationEndpoint;

  public static final String SERIALIZED_NAME_PAYLOAD_OPTIONS = "payloadOptions";
  @SerializedName(SERIALIZED_NAME_PAYLOAD_OPTIONS)
  private PayloadOptions payloadOptions;

  public static final String SERIALIZED_NAME_RECONCILING = "reconciling";
  @SerializedName(SERIALIZED_NAME_RECONCILING)
  private Boolean reconciling;

  /**
   * Output only. The state of the subscription. Determines whether the subscription can receive events and deliver them to the notification endpoint.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    STATE_UNSPECIFIED("STATE_UNSPECIFIED"),
    
    ACTIVE("ACTIVE"),
    
    SUSPENDED("SUSPENDED"),
    
    DELETED("DELETED");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  /**
   * Output only. The error that suspended the subscription. To reactivate the subscription, resolve the error and call the &#x60;ReactivateSubscription&#x60; method.
   */
  @JsonAdapter(SuspensionReasonEnum.Adapter.class)
  public enum SuspensionReasonEnum {
    ERROR_TYPE_UNSPECIFIED("ERROR_TYPE_UNSPECIFIED"),
    
    USER_SCOPE_REVOKED("USER_SCOPE_REVOKED"),
    
    RESOURCE_DELETED("RESOURCE_DELETED"),
    
    USER_AUTHORIZATION_FAILURE("USER_AUTHORIZATION_FAILURE"),
    
    ENDPOINT_PERMISSION_DENIED("ENDPOINT_PERMISSION_DENIED"),
    
    ENDPOINT_NOT_FOUND("ENDPOINT_NOT_FOUND"),
    
    ENDPOINT_RESOURCE_EXHAUSTED("ENDPOINT_RESOURCE_EXHAUSTED"),
    
    OTHER("OTHER");

    private String value;

    SuspensionReasonEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SuspensionReasonEnum fromValue(String value) {
      for (SuspensionReasonEnum b : SuspensionReasonEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SuspensionReasonEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SuspensionReasonEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SuspensionReasonEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SuspensionReasonEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SuspensionReasonEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SUSPENSION_REASON = "suspensionReason";
  @SerializedName(SERIALIZED_NAME_SUSPENSION_REASON)
  private SuspensionReasonEnum suspensionReason;

  public static final String SERIALIZED_NAME_TARGET_RESOURCE = "targetResource";
  @SerializedName(SERIALIZED_NAME_TARGET_RESOURCE)
  private String targetResource;

  public static final String SERIALIZED_NAME_TTL = "ttl";
  @SerializedName(SERIALIZED_NAME_TTL)
  private String ttl;

  public static final String SERIALIZED_NAME_UID = "uid";
  @SerializedName(SERIALIZED_NAME_UID)
  private String uid;

  public static final String SERIALIZED_NAME_UPDATE_TIME = "updateTime";
  @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
  private String updateTime;

  public Subscription() {
  }

  public Subscription(
     String authority, 
     String createTime, 
     Boolean reconciling, 
     StateEnum state, 
     SuspensionReasonEnum suspensionReason, 
     String uid, 
     String updateTime
  ) {
    this();
    this.authority = authority;
    this.createTime = createTime;
    this.reconciling = reconciling;
    this.state = state;
    this.suspensionReason = suspensionReason;
    this.uid = uid;
    this.updateTime = updateTime;
  }

  /**
   * Output only. The user who authorized the creation of the subscription. Format: &#x60;users/{user}&#x60; For Google Workspace users, the &#x60;{user}&#x60; value is the [&#x60;user.id&#x60;](https://developers.google.com/admin-sdk/directory/reference/rest/v1/users#User.FIELDS.ids) field from the Directory API.
   * @return authority
   */
  @javax.annotation.Nullable
  public String getAuthority() {
    return authority;
  }



  /**
   * Output only. The time when the subscription is created.
   * @return createTime
   */
  @javax.annotation.Nullable
  public String getCreateTime() {
    return createTime;
  }



  public Subscription etag(String etag) {
    this.etag = etag;
    return this;
  }

  /**
   * Optional. This checksum is computed by the server based on the value of other fields, and might be sent on update requests to ensure the client has an up-to-date value before proceeding.
   * @return etag
   */
  @javax.annotation.Nullable
  public String getEtag() {
    return etag;
  }

  public void setEtag(String etag) {
    this.etag = etag;
  }


  public Subscription eventTypes(List<String> eventTypes) {
    this.eventTypes = eventTypes;
    return this;
  }

  public Subscription addEventTypesItem(String eventTypesItem) {
    if (this.eventTypes == null) {
      this.eventTypes = new ArrayList<>();
    }
    this.eventTypes.add(eventTypesItem);
    return this;
  }

  /**
   * Required. Immutable. Unordered list. Input for creating a subscription. Otherwise, output only. One or more types of events to receive about the target resource. Formatted according to the CloudEvents specification. The supported event types depend on the target resource of your subscription. For details, see [Supported Google Workspace events](https://developers.google.com/workspace/events/guides#supported-events). By default, you also receive events about the [lifecycle of your subscription](https://developers.google.com/workspace/events/guides/events-lifecycle). You don&#39;t need to specify lifecycle events for this field. If you specify an event type that doesn&#39;t exist for the target resource, the request returns an HTTP &#x60;400 Bad Request&#x60; status code.
   * @return eventTypes
   */
  @javax.annotation.Nullable
  public List<String> getEventTypes() {
    return eventTypes;
  }

  public void setEventTypes(List<String> eventTypes) {
    this.eventTypes = eventTypes;
  }


  public Subscription expireTime(String expireTime) {
    this.expireTime = expireTime;
    return this;
  }

  /**
   * Non-empty default. The timestamp in UTC when the subscription expires. Always displayed on output, regardless of what was used on input.
   * @return expireTime
   */
  @javax.annotation.Nullable
  public String getExpireTime() {
    return expireTime;
  }

  public void setExpireTime(String expireTime) {
    this.expireTime = expireTime;
  }


  public Subscription name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Optional. Immutable. Identifier. Resource name of the subscription. Format: &#x60;subscriptions/{subscription}&#x60;
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Subscription notificationEndpoint(NotificationEndpoint notificationEndpoint) {
    this.notificationEndpoint = notificationEndpoint;
    return this;
  }

  /**
   * Get notificationEndpoint
   * @return notificationEndpoint
   */
  @javax.annotation.Nullable
  public NotificationEndpoint getNotificationEndpoint() {
    return notificationEndpoint;
  }

  public void setNotificationEndpoint(NotificationEndpoint notificationEndpoint) {
    this.notificationEndpoint = notificationEndpoint;
  }


  public Subscription payloadOptions(PayloadOptions payloadOptions) {
    this.payloadOptions = payloadOptions;
    return this;
  }

  /**
   * Get payloadOptions
   * @return payloadOptions
   */
  @javax.annotation.Nullable
  public PayloadOptions getPayloadOptions() {
    return payloadOptions;
  }

  public void setPayloadOptions(PayloadOptions payloadOptions) {
    this.payloadOptions = payloadOptions;
  }


  /**
   * Output only. If &#x60;true&#x60;, the subscription is in the process of being updated.
   * @return reconciling
   */
  @javax.annotation.Nullable
  public Boolean getReconciling() {
    return reconciling;
  }



  /**
   * Output only. The state of the subscription. Determines whether the subscription can receive events and deliver them to the notification endpoint.
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }



  /**
   * Output only. The error that suspended the subscription. To reactivate the subscription, resolve the error and call the &#x60;ReactivateSubscription&#x60; method.
   * @return suspensionReason
   */
  @javax.annotation.Nullable
  public SuspensionReasonEnum getSuspensionReason() {
    return suspensionReason;
  }



  public Subscription targetResource(String targetResource) {
    this.targetResource = targetResource;
    return this;
  }

  /**
   * Required. Immutable. The Google Workspace resource that&#39;s monitored for events, formatted as the [full resource name](https://google.aip.dev/122#full-resource-names). To learn about target resources and the events that they support, see [Supported Google Workspace events](https://developers.google.com/workspace/events#supported-events). A user can only authorize your app to create one subscription for a given target resource. If your app tries to create another subscription with the same user credentials, the request returns an &#x60;ALREADY_EXISTS&#x60; error.
   * @return targetResource
   */
  @javax.annotation.Nullable
  public String getTargetResource() {
    return targetResource;
  }

  public void setTargetResource(String targetResource) {
    this.targetResource = targetResource;
  }


  public Subscription ttl(String ttl) {
    this.ttl = ttl;
    return this;
  }

  /**
   * Input only. The time-to-live (TTL) or duration for the subscription. If unspecified or set to &#x60;0&#x60;, uses the maximum possible duration.
   * @return ttl
   */
  @javax.annotation.Nullable
  public String getTtl() {
    return ttl;
  }

  public void setTtl(String ttl) {
    this.ttl = ttl;
  }


  /**
   * Output only. System-assigned unique identifier for the subscription.
   * @return uid
   */
  @javax.annotation.Nullable
  public String getUid() {
    return uid;
  }



  /**
   * Output only. The last time that the subscription is updated.
   * @return updateTime
   */
  @javax.annotation.Nullable
  public String getUpdateTime() {
    return updateTime;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Subscription subscription = (Subscription) o;
    return Objects.equals(this.authority, subscription.authority) &&
        Objects.equals(this.createTime, subscription.createTime) &&
        Objects.equals(this.etag, subscription.etag) &&
        Objects.equals(this.eventTypes, subscription.eventTypes) &&
        Objects.equals(this.expireTime, subscription.expireTime) &&
        Objects.equals(this.name, subscription.name) &&
        Objects.equals(this.notificationEndpoint, subscription.notificationEndpoint) &&
        Objects.equals(this.payloadOptions, subscription.payloadOptions) &&
        Objects.equals(this.reconciling, subscription.reconciling) &&
        Objects.equals(this.state, subscription.state) &&
        Objects.equals(this.suspensionReason, subscription.suspensionReason) &&
        Objects.equals(this.targetResource, subscription.targetResource) &&
        Objects.equals(this.ttl, subscription.ttl) &&
        Objects.equals(this.uid, subscription.uid) &&
        Objects.equals(this.updateTime, subscription.updateTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(authority, createTime, etag, eventTypes, expireTime, name, notificationEndpoint, payloadOptions, reconciling, state, suspensionReason, targetResource, ttl, uid, updateTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Subscription {\n");
    sb.append("    authority: ").append(toIndentedString(authority)).append("\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    etag: ").append(toIndentedString(etag)).append("\n");
    sb.append("    eventTypes: ").append(toIndentedString(eventTypes)).append("\n");
    sb.append("    expireTime: ").append(toIndentedString(expireTime)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    notificationEndpoint: ").append(toIndentedString(notificationEndpoint)).append("\n");
    sb.append("    payloadOptions: ").append(toIndentedString(payloadOptions)).append("\n");
    sb.append("    reconciling: ").append(toIndentedString(reconciling)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    suspensionReason: ").append(toIndentedString(suspensionReason)).append("\n");
    sb.append("    targetResource: ").append(toIndentedString(targetResource)).append("\n");
    sb.append("    ttl: ").append(toIndentedString(ttl)).append("\n");
    sb.append("    uid: ").append(toIndentedString(uid)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("authority");
    openapiFields.add("createTime");
    openapiFields.add("etag");
    openapiFields.add("eventTypes");
    openapiFields.add("expireTime");
    openapiFields.add("name");
    openapiFields.add("notificationEndpoint");
    openapiFields.add("payloadOptions");
    openapiFields.add("reconciling");
    openapiFields.add("state");
    openapiFields.add("suspensionReason");
    openapiFields.add("targetResource");
    openapiFields.add("ttl");
    openapiFields.add("uid");
    openapiFields.add("updateTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Subscription
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Subscription.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Subscription is not found in the empty JSON string", Subscription.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Subscription.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Subscription` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("authority") != null && !jsonObj.get("authority").isJsonNull()) && !jsonObj.get("authority").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authority` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authority").toString()));
      }
      if ((jsonObj.get("createTime") != null && !jsonObj.get("createTime").isJsonNull()) && !jsonObj.get("createTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createTime").toString()));
      }
      if ((jsonObj.get("etag") != null && !jsonObj.get("etag").isJsonNull()) && !jsonObj.get("etag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `etag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("etag").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("eventTypes") != null && !jsonObj.get("eventTypes").isJsonNull() && !jsonObj.get("eventTypes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `eventTypes` to be an array in the JSON string but got `%s`", jsonObj.get("eventTypes").toString()));
      }
      if ((jsonObj.get("expireTime") != null && !jsonObj.get("expireTime").isJsonNull()) && !jsonObj.get("expireTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expireTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expireTime").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `notificationEndpoint`
      if (jsonObj.get("notificationEndpoint") != null && !jsonObj.get("notificationEndpoint").isJsonNull()) {
        NotificationEndpoint.validateJsonElement(jsonObj.get("notificationEndpoint"));
      }
      // validate the optional field `payloadOptions`
      if (jsonObj.get("payloadOptions") != null && !jsonObj.get("payloadOptions").isJsonNull()) {
        PayloadOptions.validateJsonElement(jsonObj.get("payloadOptions"));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
      if ((jsonObj.get("suspensionReason") != null && !jsonObj.get("suspensionReason").isJsonNull()) && !jsonObj.get("suspensionReason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `suspensionReason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("suspensionReason").toString()));
      }
      // validate the optional field `suspensionReason`
      if (jsonObj.get("suspensionReason") != null && !jsonObj.get("suspensionReason").isJsonNull()) {
        SuspensionReasonEnum.validateJsonElement(jsonObj.get("suspensionReason"));
      }
      if ((jsonObj.get("targetResource") != null && !jsonObj.get("targetResource").isJsonNull()) && !jsonObj.get("targetResource").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `targetResource` to be a primitive type in the JSON string but got `%s`", jsonObj.get("targetResource").toString()));
      }
      if ((jsonObj.get("ttl") != null && !jsonObj.get("ttl").isJsonNull()) && !jsonObj.get("ttl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ttl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ttl").toString()));
      }
      if ((jsonObj.get("uid") != null && !jsonObj.get("uid").isJsonNull()) && !jsonObj.get("uid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uid").toString()));
      }
      if ((jsonObj.get("updateTime") != null && !jsonObj.get("updateTime").isJsonNull()) && !jsonObj.get("updateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updateTime").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Subscription.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Subscription' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Subscription> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Subscription.class));

       return (TypeAdapter<T>) new TypeAdapter<Subscription>() {
           @Override
           public void write(JsonWriter out, Subscription value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Subscription read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Subscription given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Subscription
   * @throws IOException if the JSON string is invalid with respect to Subscription
   */
  public static Subscription fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Subscription.class);
  }

  /**
   * Convert an instance of Subscription to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

