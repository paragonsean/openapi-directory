/**
 * Google Workspace Events API
 * The Google Workspace Events API lets you subscribe to events and manage change notifications across Google Workspace applications.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISubscription.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISubscription::OAISubscription(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISubscription::OAISubscription() {
    this->initializeModel();
}

OAISubscription::~OAISubscription() {}

void OAISubscription::initializeModel() {

    m_authority_isSet = false;
    m_authority_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_etag_isSet = false;
    m_etag_isValid = false;

    m_event_types_isSet = false;
    m_event_types_isValid = false;

    m_expire_time_isSet = false;
    m_expire_time_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_notification_endpoint_isSet = false;
    m_notification_endpoint_isValid = false;

    m_payload_options_isSet = false;
    m_payload_options_isValid = false;

    m_reconciling_isSet = false;
    m_reconciling_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_suspension_reason_isSet = false;
    m_suspension_reason_isValid = false;

    m_target_resource_isSet = false;
    m_target_resource_isValid = false;

    m_ttl_isSet = false;
    m_ttl_isValid = false;

    m_uid_isSet = false;
    m_uid_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;
}

void OAISubscription::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISubscription::fromJsonObject(QJsonObject json) {

    m_authority_isValid = ::OpenAPI::fromJsonValue(m_authority, json[QString("authority")]);
    m_authority_isSet = !json[QString("authority")].isNull() && m_authority_isValid;

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_etag_isValid = ::OpenAPI::fromJsonValue(m_etag, json[QString("etag")]);
    m_etag_isSet = !json[QString("etag")].isNull() && m_etag_isValid;

    m_event_types_isValid = ::OpenAPI::fromJsonValue(m_event_types, json[QString("eventTypes")]);
    m_event_types_isSet = !json[QString("eventTypes")].isNull() && m_event_types_isValid;

    m_expire_time_isValid = ::OpenAPI::fromJsonValue(m_expire_time, json[QString("expireTime")]);
    m_expire_time_isSet = !json[QString("expireTime")].isNull() && m_expire_time_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_notification_endpoint_isValid = ::OpenAPI::fromJsonValue(m_notification_endpoint, json[QString("notificationEndpoint")]);
    m_notification_endpoint_isSet = !json[QString("notificationEndpoint")].isNull() && m_notification_endpoint_isValid;

    m_payload_options_isValid = ::OpenAPI::fromJsonValue(m_payload_options, json[QString("payloadOptions")]);
    m_payload_options_isSet = !json[QString("payloadOptions")].isNull() && m_payload_options_isValid;

    m_reconciling_isValid = ::OpenAPI::fromJsonValue(m_reconciling, json[QString("reconciling")]);
    m_reconciling_isSet = !json[QString("reconciling")].isNull() && m_reconciling_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_suspension_reason_isValid = ::OpenAPI::fromJsonValue(m_suspension_reason, json[QString("suspensionReason")]);
    m_suspension_reason_isSet = !json[QString("suspensionReason")].isNull() && m_suspension_reason_isValid;

    m_target_resource_isValid = ::OpenAPI::fromJsonValue(m_target_resource, json[QString("targetResource")]);
    m_target_resource_isSet = !json[QString("targetResource")].isNull() && m_target_resource_isValid;

    m_ttl_isValid = ::OpenAPI::fromJsonValue(m_ttl, json[QString("ttl")]);
    m_ttl_isSet = !json[QString("ttl")].isNull() && m_ttl_isValid;

    m_uid_isValid = ::OpenAPI::fromJsonValue(m_uid, json[QString("uid")]);
    m_uid_isSet = !json[QString("uid")].isNull() && m_uid_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;
}

QString OAISubscription::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISubscription::asJsonObject() const {
    QJsonObject obj;
    if (m_authority_isSet) {
        obj.insert(QString("authority"), ::OpenAPI::toJsonValue(m_authority));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_etag_isSet) {
        obj.insert(QString("etag"), ::OpenAPI::toJsonValue(m_etag));
    }
    if (m_event_types.size() > 0) {
        obj.insert(QString("eventTypes"), ::OpenAPI::toJsonValue(m_event_types));
    }
    if (m_expire_time_isSet) {
        obj.insert(QString("expireTime"), ::OpenAPI::toJsonValue(m_expire_time));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_notification_endpoint.isSet()) {
        obj.insert(QString("notificationEndpoint"), ::OpenAPI::toJsonValue(m_notification_endpoint));
    }
    if (m_payload_options.isSet()) {
        obj.insert(QString("payloadOptions"), ::OpenAPI::toJsonValue(m_payload_options));
    }
    if (m_reconciling_isSet) {
        obj.insert(QString("reconciling"), ::OpenAPI::toJsonValue(m_reconciling));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_suspension_reason_isSet) {
        obj.insert(QString("suspensionReason"), ::OpenAPI::toJsonValue(m_suspension_reason));
    }
    if (m_target_resource_isSet) {
        obj.insert(QString("targetResource"), ::OpenAPI::toJsonValue(m_target_resource));
    }
    if (m_ttl_isSet) {
        obj.insert(QString("ttl"), ::OpenAPI::toJsonValue(m_ttl));
    }
    if (m_uid_isSet) {
        obj.insert(QString("uid"), ::OpenAPI::toJsonValue(m_uid));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    return obj;
}

QString OAISubscription::getAuthority() const {
    return m_authority;
}
void OAISubscription::setAuthority(const QString &authority) {
    m_authority = authority;
    m_authority_isSet = true;
}

bool OAISubscription::is_authority_Set() const{
    return m_authority_isSet;
}

bool OAISubscription::is_authority_Valid() const{
    return m_authority_isValid;
}

QString OAISubscription::getCreateTime() const {
    return m_create_time;
}
void OAISubscription::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAISubscription::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAISubscription::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAISubscription::getEtag() const {
    return m_etag;
}
void OAISubscription::setEtag(const QString &etag) {
    m_etag = etag;
    m_etag_isSet = true;
}

bool OAISubscription::is_etag_Set() const{
    return m_etag_isSet;
}

bool OAISubscription::is_etag_Valid() const{
    return m_etag_isValid;
}

QList<QString> OAISubscription::getEventTypes() const {
    return m_event_types;
}
void OAISubscription::setEventTypes(const QList<QString> &event_types) {
    m_event_types = event_types;
    m_event_types_isSet = true;
}

bool OAISubscription::is_event_types_Set() const{
    return m_event_types_isSet;
}

bool OAISubscription::is_event_types_Valid() const{
    return m_event_types_isValid;
}

QString OAISubscription::getExpireTime() const {
    return m_expire_time;
}
void OAISubscription::setExpireTime(const QString &expire_time) {
    m_expire_time = expire_time;
    m_expire_time_isSet = true;
}

bool OAISubscription::is_expire_time_Set() const{
    return m_expire_time_isSet;
}

bool OAISubscription::is_expire_time_Valid() const{
    return m_expire_time_isValid;
}

QString OAISubscription::getName() const {
    return m_name;
}
void OAISubscription::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAISubscription::is_name_Set() const{
    return m_name_isSet;
}

bool OAISubscription::is_name_Valid() const{
    return m_name_isValid;
}

OAINotificationEndpoint OAISubscription::getNotificationEndpoint() const {
    return m_notification_endpoint;
}
void OAISubscription::setNotificationEndpoint(const OAINotificationEndpoint &notification_endpoint) {
    m_notification_endpoint = notification_endpoint;
    m_notification_endpoint_isSet = true;
}

bool OAISubscription::is_notification_endpoint_Set() const{
    return m_notification_endpoint_isSet;
}

bool OAISubscription::is_notification_endpoint_Valid() const{
    return m_notification_endpoint_isValid;
}

OAIPayloadOptions OAISubscription::getPayloadOptions() const {
    return m_payload_options;
}
void OAISubscription::setPayloadOptions(const OAIPayloadOptions &payload_options) {
    m_payload_options = payload_options;
    m_payload_options_isSet = true;
}

bool OAISubscription::is_payload_options_Set() const{
    return m_payload_options_isSet;
}

bool OAISubscription::is_payload_options_Valid() const{
    return m_payload_options_isValid;
}

bool OAISubscription::isReconciling() const {
    return m_reconciling;
}
void OAISubscription::setReconciling(const bool &reconciling) {
    m_reconciling = reconciling;
    m_reconciling_isSet = true;
}

bool OAISubscription::is_reconciling_Set() const{
    return m_reconciling_isSet;
}

bool OAISubscription::is_reconciling_Valid() const{
    return m_reconciling_isValid;
}

QString OAISubscription::getState() const {
    return m_state;
}
void OAISubscription::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAISubscription::is_state_Set() const{
    return m_state_isSet;
}

bool OAISubscription::is_state_Valid() const{
    return m_state_isValid;
}

QString OAISubscription::getSuspensionReason() const {
    return m_suspension_reason;
}
void OAISubscription::setSuspensionReason(const QString &suspension_reason) {
    m_suspension_reason = suspension_reason;
    m_suspension_reason_isSet = true;
}

bool OAISubscription::is_suspension_reason_Set() const{
    return m_suspension_reason_isSet;
}

bool OAISubscription::is_suspension_reason_Valid() const{
    return m_suspension_reason_isValid;
}

QString OAISubscription::getTargetResource() const {
    return m_target_resource;
}
void OAISubscription::setTargetResource(const QString &target_resource) {
    m_target_resource = target_resource;
    m_target_resource_isSet = true;
}

bool OAISubscription::is_target_resource_Set() const{
    return m_target_resource_isSet;
}

bool OAISubscription::is_target_resource_Valid() const{
    return m_target_resource_isValid;
}

QString OAISubscription::getTtl() const {
    return m_ttl;
}
void OAISubscription::setTtl(const QString &ttl) {
    m_ttl = ttl;
    m_ttl_isSet = true;
}

bool OAISubscription::is_ttl_Set() const{
    return m_ttl_isSet;
}

bool OAISubscription::is_ttl_Valid() const{
    return m_ttl_isValid;
}

QString OAISubscription::getUid() const {
    return m_uid;
}
void OAISubscription::setUid(const QString &uid) {
    m_uid = uid;
    m_uid_isSet = true;
}

bool OAISubscription::is_uid_Set() const{
    return m_uid_isSet;
}

bool OAISubscription::is_uid_Valid() const{
    return m_uid_isValid;
}

QString OAISubscription::getUpdateTime() const {
    return m_update_time;
}
void OAISubscription::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAISubscription::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAISubscription::is_update_time_Valid() const{
    return m_update_time_isValid;
}

bool OAISubscription::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_authority_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_etag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_expire_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notification_endpoint.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_payload_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_reconciling_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_suspension_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_resource_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ttl_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISubscription::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
