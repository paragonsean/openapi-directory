/**
 * Google Workspace Events API
 * The Google Workspace Events API lets you subscribe to events and manage change notifications across Google Workspace applications.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPayloadOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPayloadOptions::OAIPayloadOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPayloadOptions::OAIPayloadOptions() {
    this->initializeModel();
}

OAIPayloadOptions::~OAIPayloadOptions() {}

void OAIPayloadOptions::initializeModel() {

    m_field_mask_isSet = false;
    m_field_mask_isValid = false;

    m_include_resource_isSet = false;
    m_include_resource_isValid = false;
}

void OAIPayloadOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPayloadOptions::fromJsonObject(QJsonObject json) {

    m_field_mask_isValid = ::OpenAPI::fromJsonValue(m_field_mask, json[QString("fieldMask")]);
    m_field_mask_isSet = !json[QString("fieldMask")].isNull() && m_field_mask_isValid;

    m_include_resource_isValid = ::OpenAPI::fromJsonValue(m_include_resource, json[QString("includeResource")]);
    m_include_resource_isSet = !json[QString("includeResource")].isNull() && m_include_resource_isValid;
}

QString OAIPayloadOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPayloadOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_field_mask_isSet) {
        obj.insert(QString("fieldMask"), ::OpenAPI::toJsonValue(m_field_mask));
    }
    if (m_include_resource_isSet) {
        obj.insert(QString("includeResource"), ::OpenAPI::toJsonValue(m_include_resource));
    }
    return obj;
}

QString OAIPayloadOptions::getFieldMask() const {
    return m_field_mask;
}
void OAIPayloadOptions::setFieldMask(const QString &field_mask) {
    m_field_mask = field_mask;
    m_field_mask_isSet = true;
}

bool OAIPayloadOptions::is_field_mask_Set() const{
    return m_field_mask_isSet;
}

bool OAIPayloadOptions::is_field_mask_Valid() const{
    return m_field_mask_isValid;
}

bool OAIPayloadOptions::isIncludeResource() const {
    return m_include_resource;
}
void OAIPayloadOptions::setIncludeResource(const bool &include_resource) {
    m_include_resource = include_resource;
    m_include_resource_isSet = true;
}

bool OAIPayloadOptions::is_include_resource_Set() const{
    return m_include_resource_isSet;
}

bool OAIPayloadOptions::is_include_resource_Valid() const{
    return m_include_resource_isValid;
}

bool OAIPayloadOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_field_mask_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_include_resource_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPayloadOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
