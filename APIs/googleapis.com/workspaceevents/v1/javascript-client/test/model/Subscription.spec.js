/**
 * Google Workspace Events API
 * The Google Workspace Events API lets you subscribe to events and manage change notifications across Google Workspace applications.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.GoogleWorkspaceEventsApi);
  }
}(this, function(expect, GoogleWorkspaceEventsApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new GoogleWorkspaceEventsApi.Subscription();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Subscription', function() {
    it('should create an instance of Subscription', function() {
      // uncomment below and update the code to test Subscription
      //var instance = new GoogleWorkspaceEventsApi.Subscription();
      //expect(instance).to.be.a(GoogleWorkspaceEventsApi.Subscription);
    });

    it('should have the property authority (base name: "authority")', function() {
      // uncomment below and update the code to test the property authority
      //var instance = new GoogleWorkspaceEventsApi.Subscription();
      //expect(instance).to.be();
    });

    it('should have the property createTime (base name: "createTime")', function() {
      // uncomment below and update the code to test the property createTime
      //var instance = new GoogleWorkspaceEventsApi.Subscription();
      //expect(instance).to.be();
    });

    it('should have the property etag (base name: "etag")', function() {
      // uncomment below and update the code to test the property etag
      //var instance = new GoogleWorkspaceEventsApi.Subscription();
      //expect(instance).to.be();
    });

    it('should have the property eventTypes (base name: "eventTypes")', function() {
      // uncomment below and update the code to test the property eventTypes
      //var instance = new GoogleWorkspaceEventsApi.Subscription();
      //expect(instance).to.be();
    });

    it('should have the property expireTime (base name: "expireTime")', function() {
      // uncomment below and update the code to test the property expireTime
      //var instance = new GoogleWorkspaceEventsApi.Subscription();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new GoogleWorkspaceEventsApi.Subscription();
      //expect(instance).to.be();
    });

    it('should have the property notificationEndpoint (base name: "notificationEndpoint")', function() {
      // uncomment below and update the code to test the property notificationEndpoint
      //var instance = new GoogleWorkspaceEventsApi.Subscription();
      //expect(instance).to.be();
    });

    it('should have the property payloadOptions (base name: "payloadOptions")', function() {
      // uncomment below and update the code to test the property payloadOptions
      //var instance = new GoogleWorkspaceEventsApi.Subscription();
      //expect(instance).to.be();
    });

    it('should have the property reconciling (base name: "reconciling")', function() {
      // uncomment below and update the code to test the property reconciling
      //var instance = new GoogleWorkspaceEventsApi.Subscription();
      //expect(instance).to.be();
    });

    it('should have the property state (base name: "state")', function() {
      // uncomment below and update the code to test the property state
      //var instance = new GoogleWorkspaceEventsApi.Subscription();
      //expect(instance).to.be();
    });

    it('should have the property suspensionReason (base name: "suspensionReason")', function() {
      // uncomment below and update the code to test the property suspensionReason
      //var instance = new GoogleWorkspaceEventsApi.Subscription();
      //expect(instance).to.be();
    });

    it('should have the property targetResource (base name: "targetResource")', function() {
      // uncomment below and update the code to test the property targetResource
      //var instance = new GoogleWorkspaceEventsApi.Subscription();
      //expect(instance).to.be();
    });

    it('should have the property ttl (base name: "ttl")', function() {
      // uncomment below and update the code to test the property ttl
      //var instance = new GoogleWorkspaceEventsApi.Subscription();
      //expect(instance).to.be();
    });

    it('should have the property uid (base name: "uid")', function() {
      // uncomment below and update the code to test the property uid
      //var instance = new GoogleWorkspaceEventsApi.Subscription();
      //expect(instance).to.be();
    });

    it('should have the property updateTime (base name: "updateTime")', function() {
      // uncomment below and update the code to test the property updateTime
      //var instance = new GoogleWorkspaceEventsApi.Subscription();
      //expect(instance).to.be();
    });

  });

}));
