/**
 * Google Workspace Events API
 * The Google Workspace Events API lets you subscribe to events and manage change notifications across Google Workspace applications.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import NotificationEndpoint from './NotificationEndpoint';
import PayloadOptions from './PayloadOptions';

/**
 * The Subscription model module.
 * @module model/Subscription
 * @version v1
 */
class Subscription {
    /**
     * Constructs a new <code>Subscription</code>.
     * [Developer Preview](https://developers.google.com/workspace/preview). A subscription to receive events about a Google Workspace resource. To learn more about subscriptions, see the [Google Workspace Events API overview](https://developers.google.com/workspace/events).
     * @alias module:model/Subscription
     */
    constructor() { 
        
        Subscription.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Subscription</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Subscription} obj Optional instance to populate.
     * @return {module:model/Subscription} The populated <code>Subscription</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Subscription();

            if (data.hasOwnProperty('authority')) {
                obj['authority'] = ApiClient.convertToType(data['authority'], 'String');
            }
            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'String');
            }
            if (data.hasOwnProperty('etag')) {
                obj['etag'] = ApiClient.convertToType(data['etag'], 'String');
            }
            if (data.hasOwnProperty('eventTypes')) {
                obj['eventTypes'] = ApiClient.convertToType(data['eventTypes'], ['String']);
            }
            if (data.hasOwnProperty('expireTime')) {
                obj['expireTime'] = ApiClient.convertToType(data['expireTime'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('notificationEndpoint')) {
                obj['notificationEndpoint'] = NotificationEndpoint.constructFromObject(data['notificationEndpoint']);
            }
            if (data.hasOwnProperty('payloadOptions')) {
                obj['payloadOptions'] = PayloadOptions.constructFromObject(data['payloadOptions']);
            }
            if (data.hasOwnProperty('reconciling')) {
                obj['reconciling'] = ApiClient.convertToType(data['reconciling'], 'Boolean');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('suspensionReason')) {
                obj['suspensionReason'] = ApiClient.convertToType(data['suspensionReason'], 'String');
            }
            if (data.hasOwnProperty('targetResource')) {
                obj['targetResource'] = ApiClient.convertToType(data['targetResource'], 'String');
            }
            if (data.hasOwnProperty('ttl')) {
                obj['ttl'] = ApiClient.convertToType(data['ttl'], 'String');
            }
            if (data.hasOwnProperty('uid')) {
                obj['uid'] = ApiClient.convertToType(data['uid'], 'String');
            }
            if (data.hasOwnProperty('updateTime')) {
                obj['updateTime'] = ApiClient.convertToType(data['updateTime'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Subscription</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Subscription</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['authority'] && !(typeof data['authority'] === 'string' || data['authority'] instanceof String)) {
            throw new Error("Expected the field `authority` to be a primitive type in the JSON string but got " + data['authority']);
        }
        // ensure the json data is a string
        if (data['createTime'] && !(typeof data['createTime'] === 'string' || data['createTime'] instanceof String)) {
            throw new Error("Expected the field `createTime` to be a primitive type in the JSON string but got " + data['createTime']);
        }
        // ensure the json data is a string
        if (data['etag'] && !(typeof data['etag'] === 'string' || data['etag'] instanceof String)) {
            throw new Error("Expected the field `etag` to be a primitive type in the JSON string but got " + data['etag']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['eventTypes'])) {
            throw new Error("Expected the field `eventTypes` to be an array in the JSON data but got " + data['eventTypes']);
        }
        // ensure the json data is a string
        if (data['expireTime'] && !(typeof data['expireTime'] === 'string' || data['expireTime'] instanceof String)) {
            throw new Error("Expected the field `expireTime` to be a primitive type in the JSON string but got " + data['expireTime']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `notificationEndpoint`
        if (data['notificationEndpoint']) { // data not null
          NotificationEndpoint.validateJSON(data['notificationEndpoint']);
        }
        // validate the optional field `payloadOptions`
        if (data['payloadOptions']) { // data not null
          PayloadOptions.validateJSON(data['payloadOptions']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['suspensionReason'] && !(typeof data['suspensionReason'] === 'string' || data['suspensionReason'] instanceof String)) {
            throw new Error("Expected the field `suspensionReason` to be a primitive type in the JSON string but got " + data['suspensionReason']);
        }
        // ensure the json data is a string
        if (data['targetResource'] && !(typeof data['targetResource'] === 'string' || data['targetResource'] instanceof String)) {
            throw new Error("Expected the field `targetResource` to be a primitive type in the JSON string but got " + data['targetResource']);
        }
        // ensure the json data is a string
        if (data['ttl'] && !(typeof data['ttl'] === 'string' || data['ttl'] instanceof String)) {
            throw new Error("Expected the field `ttl` to be a primitive type in the JSON string but got " + data['ttl']);
        }
        // ensure the json data is a string
        if (data['uid'] && !(typeof data['uid'] === 'string' || data['uid'] instanceof String)) {
            throw new Error("Expected the field `uid` to be a primitive type in the JSON string but got " + data['uid']);
        }
        // ensure the json data is a string
        if (data['updateTime'] && !(typeof data['updateTime'] === 'string' || data['updateTime'] instanceof String)) {
            throw new Error("Expected the field `updateTime` to be a primitive type in the JSON string but got " + data['updateTime']);
        }

        return true;
    }


}



/**
 * Output only. The user who authorized the creation of the subscription. Format: `users/{user}` For Google Workspace users, the `{user}` value is the [`user.id`](https://developers.google.com/admin-sdk/directory/reference/rest/v1/users#User.FIELDS.ids) field from the Directory API.
 * @member {String} authority
 */
Subscription.prototype['authority'] = undefined;

/**
 * Output only. The time when the subscription is created.
 * @member {String} createTime
 */
Subscription.prototype['createTime'] = undefined;

/**
 * Optional. This checksum is computed by the server based on the value of other fields, and might be sent on update requests to ensure the client has an up-to-date value before proceeding.
 * @member {String} etag
 */
Subscription.prototype['etag'] = undefined;

/**
 * Required. Immutable. Unordered list. Input for creating a subscription. Otherwise, output only. One or more types of events to receive about the target resource. Formatted according to the CloudEvents specification. The supported event types depend on the target resource of your subscription. For details, see [Supported Google Workspace events](https://developers.google.com/workspace/events/guides#supported-events). By default, you also receive events about the [lifecycle of your subscription](https://developers.google.com/workspace/events/guides/events-lifecycle). You don't need to specify lifecycle events for this field. If you specify an event type that doesn't exist for the target resource, the request returns an HTTP `400 Bad Request` status code.
 * @member {Array.<String>} eventTypes
 */
Subscription.prototype['eventTypes'] = undefined;

/**
 * Non-empty default. The timestamp in UTC when the subscription expires. Always displayed on output, regardless of what was used on input.
 * @member {String} expireTime
 */
Subscription.prototype['expireTime'] = undefined;

/**
 * Optional. Immutable. Identifier. Resource name of the subscription. Format: `subscriptions/{subscription}`
 * @member {String} name
 */
Subscription.prototype['name'] = undefined;

/**
 * @member {module:model/NotificationEndpoint} notificationEndpoint
 */
Subscription.prototype['notificationEndpoint'] = undefined;

/**
 * @member {module:model/PayloadOptions} payloadOptions
 */
Subscription.prototype['payloadOptions'] = undefined;

/**
 * Output only. If `true`, the subscription is in the process of being updated.
 * @member {Boolean} reconciling
 */
Subscription.prototype['reconciling'] = undefined;

/**
 * Output only. The state of the subscription. Determines whether the subscription can receive events and deliver them to the notification endpoint.
 * @member {module:model/Subscription.StateEnum} state
 */
Subscription.prototype['state'] = undefined;

/**
 * Output only. The error that suspended the subscription. To reactivate the subscription, resolve the error and call the `ReactivateSubscription` method.
 * @member {module:model/Subscription.SuspensionReasonEnum} suspensionReason
 */
Subscription.prototype['suspensionReason'] = undefined;

/**
 * Required. Immutable. The Google Workspace resource that's monitored for events, formatted as the [full resource name](https://google.aip.dev/122#full-resource-names). To learn about target resources and the events that they support, see [Supported Google Workspace events](https://developers.google.com/workspace/events#supported-events). A user can only authorize your app to create one subscription for a given target resource. If your app tries to create another subscription with the same user credentials, the request returns an `ALREADY_EXISTS` error.
 * @member {String} targetResource
 */
Subscription.prototype['targetResource'] = undefined;

/**
 * Input only. The time-to-live (TTL) or duration for the subscription. If unspecified or set to `0`, uses the maximum possible duration.
 * @member {String} ttl
 */
Subscription.prototype['ttl'] = undefined;

/**
 * Output only. System-assigned unique identifier for the subscription.
 * @member {String} uid
 */
Subscription.prototype['uid'] = undefined;

/**
 * Output only. The last time that the subscription is updated.
 * @member {String} updateTime
 */
Subscription.prototype['updateTime'] = undefined;





/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
Subscription['StateEnum'] = {

    /**
     * value: "STATE_UNSPECIFIED"
     * @const
     */
    "STATE_UNSPECIFIED": "STATE_UNSPECIFIED",

    /**
     * value: "ACTIVE"
     * @const
     */
    "ACTIVE": "ACTIVE",

    /**
     * value: "SUSPENDED"
     * @const
     */
    "SUSPENDED": "SUSPENDED",

    /**
     * value: "DELETED"
     * @const
     */
    "DELETED": "DELETED"
};


/**
 * Allowed values for the <code>suspensionReason</code> property.
 * @enum {String}
 * @readonly
 */
Subscription['SuspensionReasonEnum'] = {

    /**
     * value: "ERROR_TYPE_UNSPECIFIED"
     * @const
     */
    "ERROR_TYPE_UNSPECIFIED": "ERROR_TYPE_UNSPECIFIED",

    /**
     * value: "USER_SCOPE_REVOKED"
     * @const
     */
    "USER_SCOPE_REVOKED": "USER_SCOPE_REVOKED",

    /**
     * value: "RESOURCE_DELETED"
     * @const
     */
    "RESOURCE_DELETED": "RESOURCE_DELETED",

    /**
     * value: "USER_AUTHORIZATION_FAILURE"
     * @const
     */
    "USER_AUTHORIZATION_FAILURE": "USER_AUTHORIZATION_FAILURE",

    /**
     * value: "ENDPOINT_PERMISSION_DENIED"
     * @const
     */
    "ENDPOINT_PERMISSION_DENIED": "ENDPOINT_PERMISSION_DENIED",

    /**
     * value: "ENDPOINT_NOT_FOUND"
     * @const
     */
    "ENDPOINT_NOT_FOUND": "ENDPOINT_NOT_FOUND",

    /**
     * value: "ENDPOINT_RESOURCE_EXHAUSTED"
     * @const
     */
    "ENDPOINT_RESOURCE_EXHAUSTED": "ENDPOINT_RESOURCE_EXHAUSTED",

    /**
     * value: "OTHER"
     * @const
     */
    "OTHER": "OTHER"
};



export default Subscription;

