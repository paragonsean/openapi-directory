/**
 * Google Workspace Events API
 * The Google Workspace Events API lets you subscribe to events and manage change notifications across Google Workspace applications.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from './ApiClient';
import ListSubscriptionsResponse from './model/ListSubscriptionsResponse';
import NotificationEndpoint from './model/NotificationEndpoint';
import Operation from './model/Operation';
import PayloadOptions from './model/PayloadOptions';
import Status from './model/Status';
import Subscription from './model/Subscription';
import SubscriptionsApi from './api/SubscriptionsApi';


/**
* The Google Workspace Events API lets you subscribe to events and manage change notifications across Google Workspace applications..<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var GoogleWorkspaceEventsApi = require('index'); // See note below*.
* var xxxSvc = new GoogleWorkspaceEventsApi.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new GoogleWorkspaceEventsApi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new GoogleWorkspaceEventsApi.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new GoogleWorkspaceEventsApi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version v1
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The ListSubscriptionsResponse model constructor.
     * @property {module:model/ListSubscriptionsResponse}
     */
    ListSubscriptionsResponse,

    /**
     * The NotificationEndpoint model constructor.
     * @property {module:model/NotificationEndpoint}
     */
    NotificationEndpoint,

    /**
     * The Operation model constructor.
     * @property {module:model/Operation}
     */
    Operation,

    /**
     * The PayloadOptions model constructor.
     * @property {module:model/PayloadOptions}
     */
    PayloadOptions,

    /**
     * The Status model constructor.
     * @property {module:model/Status}
     */
    Status,

    /**
     * The Subscription model constructor.
     * @property {module:model/Subscription}
     */
    Subscription,

    /**
    * The SubscriptionsApi service constructor.
    * @property {module:api/SubscriptionsApi}
    */
    SubscriptionsApi
};
