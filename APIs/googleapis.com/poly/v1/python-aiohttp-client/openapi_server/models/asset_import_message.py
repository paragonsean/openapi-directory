# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.image_error import ImageError
from openapi_server.models.obj_parse_error import ObjParseError
from openapi_server import util


class AssetImportMessage(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, code: str=None, file_path: str=None, image_error: ImageError=None, obj_parse_error: ObjParseError=None):
        """AssetImportMessage - a model defined in OpenAPI

        :param code: The code of this AssetImportMessage.
        :param file_path: The file_path of this AssetImportMessage.
        :param image_error: The image_error of this AssetImportMessage.
        :param obj_parse_error: The obj_parse_error of this AssetImportMessage.
        """
        self.openapi_types = {
            'code': str,
            'file_path': str,
            'image_error': ImageError,
            'obj_parse_error': ObjParseError
        }

        self.attribute_map = {
            'code': 'code',
            'file_path': 'filePath',
            'image_error': 'imageError',
            'obj_parse_error': 'objParseError'
        }

        self._code = code
        self._file_path = file_path
        self._image_error = image_error
        self._obj_parse_error = obj_parse_error

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AssetImportMessage':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AssetImportMessage of this AssetImportMessage.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def code(self):
        """Gets the code of this AssetImportMessage.

        The code associated with this message.

        :return: The code of this AssetImportMessage.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this AssetImportMessage.

        The code associated with this message.

        :param code: The code of this AssetImportMessage.
        :type code: str
        """
        allowed_values = ["CODE_UNSPECIFIED", "NO_IMPORTABLE_FILE", "EMPTY_MODEL", "OBJ_PARSE_ERROR", "EXPIRED", "IMAGE_ERROR", "EXTRA_FILES_WITH_ARCHIVE", "DEFAULT_MATERIALS", "FATAL_ERROR", "INVALID_ELEMENT_TYPE"]  # noqa: E501
        if code not in allowed_values:
            raise ValueError(
                "Invalid value for `code` ({0}), must be one of {1}"
                .format(code, allowed_values)
            )

        self._code = code

    @property
    def file_path(self):
        """Gets the file_path of this AssetImportMessage.

        An optional file path. Only present for those error codes that specify it.

        :return: The file_path of this AssetImportMessage.
        :rtype: str
        """
        return self._file_path

    @file_path.setter
    def file_path(self, file_path):
        """Sets the file_path of this AssetImportMessage.

        An optional file path. Only present for those error codes that specify it.

        :param file_path: The file_path of this AssetImportMessage.
        :type file_path: str
        """

        self._file_path = file_path

    @property
    def image_error(self):
        """Gets the image_error of this AssetImportMessage.


        :return: The image_error of this AssetImportMessage.
        :rtype: ImageError
        """
        return self._image_error

    @image_error.setter
    def image_error(self, image_error):
        """Sets the image_error of this AssetImportMessage.


        :param image_error: The image_error of this AssetImportMessage.
        :type image_error: ImageError
        """

        self._image_error = image_error

    @property
    def obj_parse_error(self):
        """Gets the obj_parse_error of this AssetImportMessage.


        :return: The obj_parse_error of this AssetImportMessage.
        :rtype: ObjParseError
        """
        return self._obj_parse_error

    @obj_parse_error.setter
    def obj_parse_error(self, obj_parse_error):
        """Sets the obj_parse_error of this AssetImportMessage.


        :param obj_parse_error: The obj_parse_error of this AssetImportMessage.
        :type obj_parse_error: ObjParseError
        """

        self._obj_parse_error = obj_parse_error
