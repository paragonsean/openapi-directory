# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ImageError(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, code: str=None, file_path: str=None):
        """ImageError - a model defined in OpenAPI

        :param code: The code of this ImageError.
        :param file_path: The file_path of this ImageError.
        """
        self.openapi_types = {
            'code': str,
            'file_path': str
        }

        self.attribute_map = {
            'code': 'code',
            'file_path': 'filePath'
        }

        self._code = code
        self._file_path = file_path

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ImageError':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ImageError of this ImageError.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def code(self):
        """Gets the code of this ImageError.

        The type of image error encountered. Optional for older image errors.

        :return: The code of this ImageError.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this ImageError.

        The type of image error encountered. Optional for older image errors.

        :param code: The code of this ImageError.
        :type code: str
        """
        allowed_values = ["CODE_UNSPECIFIED", "INVALID_IMAGE", "IMAGE_TOO_BIG", "WRONG_IMAGE_TYPE"]  # noqa: E501
        if code not in allowed_values:
            raise ValueError(
                "Invalid value for `code` ({0}), must be one of {1}"
                .format(code, allowed_values)
            )

        self._code = code

    @property
    def file_path(self):
        """Gets the file_path of this ImageError.

        The file path in the import of the image that was rejected.

        :return: The file_path of this ImageError.
        :rtype: str
        """
        return self._file_path

    @file_path.setter
    def file_path(self, file_path):
        """Sets the file_path of this ImageError.

        The file path in the import of the image that was rejected.

        :param file_path: The file_path of this ImageError.
        :type file_path: str
        """

        self._file_path = file_path
