# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ObjParseError(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, code: str=None, end_index: int=None, file_path: str=None, line: str=None, line_number: int=None, start_index: int=None):
        """ObjParseError - a model defined in OpenAPI

        :param code: The code of this ObjParseError.
        :param end_index: The end_index of this ObjParseError.
        :param file_path: The file_path of this ObjParseError.
        :param line: The line of this ObjParseError.
        :param line_number: The line_number of this ObjParseError.
        :param start_index: The start_index of this ObjParseError.
        """
        self.openapi_types = {
            'code': str,
            'end_index': int,
            'file_path': str,
            'line': str,
            'line_number': int,
            'start_index': int
        }

        self.attribute_map = {
            'code': 'code',
            'end_index': 'endIndex',
            'file_path': 'filePath',
            'line': 'line',
            'line_number': 'lineNumber',
            'start_index': 'startIndex'
        }

        self._code = code
        self._end_index = end_index
        self._file_path = file_path
        self._line = line
        self._line_number = line_number
        self._start_index = start_index

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ObjParseError':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ObjParseError of this ObjParseError.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def code(self):
        """Gets the code of this ObjParseError.

        The type of problem found (required).

        :return: The code of this ObjParseError.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this ObjParseError.

        The type of problem found (required).

        :param code: The code of this ObjParseError.
        :type code: str
        """
        allowed_values = ["CODE_UNSPECIFIED", "INCONSISTENT_VERTEX_REFS", "INVALID_COMMAND", "INVALID_NUMBER", "INVALID_VERTEX_REF", "MISSING_GEOMETRIC_VERTEX", "MISSING_TOKEN", "TOO_FEW_DIMENSIONS", "TOO_FEW_VERTICES", "TOO_MANY_DIMENSIONS", "UNSUPPORTED_COMMAND", "UNUSED_TOKENS", "VERTEX_NOT_FOUND", "NUMBER_OUT_OF_RANGE", "INVALID_VALUE", "INVALID_TEXTURE_OPTION", "TOO_MANY_PROBLEMS", "MISSING_FILE_NAME", "FILE_NOT_FOUND", "UNKNOWN_MATERIAL", "NO_MATERIAL_DEFINED", "INVALID_SMOOTHING_GROUP", "MISSING_VERTEX_COLORS", "FILE_SUBSTITUTION", "LINE_TOO_LONG", "INVALID_FILE_PATH"]  # noqa: E501
        if code not in allowed_values:
            raise ValueError(
                "Invalid value for `code` ({0}), must be one of {1}"
                .format(code, allowed_values)
            )

        self._code = code

    @property
    def end_index(self):
        """Gets the end_index of this ObjParseError.

        The ending character index at which the problem was found.

        :return: The end_index of this ObjParseError.
        :rtype: int
        """
        return self._end_index

    @end_index.setter
    def end_index(self, end_index):
        """Sets the end_index of this ObjParseError.

        The ending character index at which the problem was found.

        :param end_index: The end_index of this ObjParseError.
        :type end_index: int
        """

        self._end_index = end_index

    @property
    def file_path(self):
        """Gets the file_path of this ObjParseError.

        The file path in which the problem was found.

        :return: The file_path of this ObjParseError.
        :rtype: str
        """
        return self._file_path

    @file_path.setter
    def file_path(self, file_path):
        """Sets the file_path of this ObjParseError.

        The file path in which the problem was found.

        :param file_path: The file_path of this ObjParseError.
        :type file_path: str
        """

        self._file_path = file_path

    @property
    def line(self):
        """Gets the line of this ObjParseError.

        The text of the line. Note that this may be truncated if the line was very long. This may not include the error if it occurs after line truncation.

        :return: The line of this ObjParseError.
        :rtype: str
        """
        return self._line

    @line.setter
    def line(self, line):
        """Sets the line of this ObjParseError.

        The text of the line. Note that this may be truncated if the line was very long. This may not include the error if it occurs after line truncation.

        :param line: The line of this ObjParseError.
        :type line: str
        """

        self._line = line

    @property
    def line_number(self):
        """Gets the line_number of this ObjParseError.

        Line number at which the problem was found.

        :return: The line_number of this ObjParseError.
        :rtype: int
        """
        return self._line_number

    @line_number.setter
    def line_number(self, line_number):
        """Sets the line_number of this ObjParseError.

        Line number at which the problem was found.

        :param line_number: The line_number of this ObjParseError.
        :type line_number: int
        """

        self._line_number = line_number

    @property
    def start_index(self):
        """Gets the start_index of this ObjParseError.

        The starting character index at which the problem was found.

        :return: The start_index of this ObjParseError.
        :rtype: int
        """
        return self._start_index

    @start_index.setter
    def start_index(self, start_index):
        """Sets the start_index of this ObjParseError.

        The starting character index at which the problem was found.

        :param start_index: The start_index of this ObjParseError.
        :type start_index: int
        """

        self._start_index = start_index
