# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.file import File
from openapi_server.models.format_complexity import FormatComplexity
from openapi_server import util


class Format(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, format_complexity: FormatComplexity=None, format_type: str=None, resources: List[File]=None, root: File=None):
        """Format - a model defined in OpenAPI

        :param format_complexity: The format_complexity of this Format.
        :param format_type: The format_type of this Format.
        :param resources: The resources of this Format.
        :param root: The root of this Format.
        """
        self.openapi_types = {
            'format_complexity': FormatComplexity,
            'format_type': str,
            'resources': List[File],
            'root': File
        }

        self.attribute_map = {
            'format_complexity': 'formatComplexity',
            'format_type': 'formatType',
            'resources': 'resources',
            'root': 'root'
        }

        self._format_complexity = format_complexity
        self._format_type = format_type
        self._resources = resources
        self._root = root

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Format':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Format of this Format.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def format_complexity(self):
        """Gets the format_complexity of this Format.


        :return: The format_complexity of this Format.
        :rtype: FormatComplexity
        """
        return self._format_complexity

    @format_complexity.setter
    def format_complexity(self, format_complexity):
        """Sets the format_complexity of this Format.


        :param format_complexity: The format_complexity of this Format.
        :type format_complexity: FormatComplexity
        """

        self._format_complexity = format_complexity

    @property
    def format_type(self):
        """Gets the format_type of this Format.

        A short string that identifies the format type of this representation. Possible values are: `FBX`, `GLTF`, `GLTF2`, `OBJ`, and `TILT`.

        :return: The format_type of this Format.
        :rtype: str
        """
        return self._format_type

    @format_type.setter
    def format_type(self, format_type):
        """Sets the format_type of this Format.

        A short string that identifies the format type of this representation. Possible values are: `FBX`, `GLTF`, `GLTF2`, `OBJ`, and `TILT`.

        :param format_type: The format_type of this Format.
        :type format_type: str
        """

        self._format_type = format_type

    @property
    def resources(self):
        """Gets the resources of this Format.

        A list of dependencies of the root element. May include, but is not limited to, materials, textures, and shader programs.

        :return: The resources of this Format.
        :rtype: List[File]
        """
        return self._resources

    @resources.setter
    def resources(self, resources):
        """Sets the resources of this Format.

        A list of dependencies of the root element. May include, but is not limited to, materials, textures, and shader programs.

        :param resources: The resources of this Format.
        :type resources: List[File]
        """

        self._resources = resources

    @property
    def root(self):
        """Gets the root of this Format.


        :return: The root of this Format.
        :rtype: File
        """
        return self._root

    @root.setter
    def root(self, root):
        """Sets the root of this Format.


        :param root: The root of this Format.
        :type root: File
        """

        self._root = root
