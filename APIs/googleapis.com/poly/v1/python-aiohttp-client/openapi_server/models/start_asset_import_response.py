# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.asset_import_message import AssetImportMessage
from openapi_server import util


class StartAssetImportResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, asset_id: str=None, asset_import_id: str=None, asset_import_messages: List[AssetImportMessage]=None, publish_url: str=None):
        """StartAssetImportResponse - a model defined in OpenAPI

        :param asset_id: The asset_id of this StartAssetImportResponse.
        :param asset_import_id: The asset_import_id of this StartAssetImportResponse.
        :param asset_import_messages: The asset_import_messages of this StartAssetImportResponse.
        :param publish_url: The publish_url of this StartAssetImportResponse.
        """
        self.openapi_types = {
            'asset_id': str,
            'asset_import_id': str,
            'asset_import_messages': List[AssetImportMessage],
            'publish_url': str
        }

        self.attribute_map = {
            'asset_id': 'assetId',
            'asset_import_id': 'assetImportId',
            'asset_import_messages': 'assetImportMessages',
            'publish_url': 'publishUrl'
        }

        self._asset_id = asset_id
        self._asset_import_id = asset_import_id
        self._asset_import_messages = asset_import_messages
        self._publish_url = publish_url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StartAssetImportResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StartAssetImportResponse of this StartAssetImportResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def asset_id(self):
        """Gets the asset_id of this StartAssetImportResponse.

        The id of newly created asset. If this is empty when the operation is complete it means the import failed. Please refer to the assetImportMessages field to understand what went wrong.

        :return: The asset_id of this StartAssetImportResponse.
        :rtype: str
        """
        return self._asset_id

    @asset_id.setter
    def asset_id(self, asset_id):
        """Sets the asset_id of this StartAssetImportResponse.

        The id of newly created asset. If this is empty when the operation is complete it means the import failed. Please refer to the assetImportMessages field to understand what went wrong.

        :param asset_id: The asset_id of this StartAssetImportResponse.
        :type asset_id: str
        """

        self._asset_id = asset_id

    @property
    def asset_import_id(self):
        """Gets the asset_import_id of this StartAssetImportResponse.

        The id of the asset import.

        :return: The asset_import_id of this StartAssetImportResponse.
        :rtype: str
        """
        return self._asset_import_id

    @asset_import_id.setter
    def asset_import_id(self, asset_import_id):
        """Sets the asset_import_id of this StartAssetImportResponse.

        The id of the asset import.

        :param asset_import_id: The asset_import_id of this StartAssetImportResponse.
        :type asset_import_id: str
        """

        self._asset_import_id = asset_import_id

    @property
    def asset_import_messages(self):
        """Gets the asset_import_messages of this StartAssetImportResponse.

        The message from the asset import. This will contain any warnings (or - in the case of failure - errors) that occurred during import.

        :return: The asset_import_messages of this StartAssetImportResponse.
        :rtype: List[AssetImportMessage]
        """
        return self._asset_import_messages

    @asset_import_messages.setter
    def asset_import_messages(self, asset_import_messages):
        """Sets the asset_import_messages of this StartAssetImportResponse.

        The message from the asset import. This will contain any warnings (or - in the case of failure - errors) that occurred during import.

        :param asset_import_messages: The asset_import_messages of this StartAssetImportResponse.
        :type asset_import_messages: List[AssetImportMessage]
        """

        self._asset_import_messages = asset_import_messages

    @property
    def publish_url(self):
        """Gets the publish_url of this StartAssetImportResponse.

        The publish URL for the asset.

        :return: The publish_url of this StartAssetImportResponse.
        :rtype: str
        """
        return self._publish_url

    @publish_url.setter
    def publish_url(self, publish_url):
        """Sets the publish_url of this StartAssetImportResponse.

        The publish URL for the asset.

        :param publish_url: The publish_url of this StartAssetImportResponse.
        :type publish_url: str
        """

        self._publish_url = publish_url
