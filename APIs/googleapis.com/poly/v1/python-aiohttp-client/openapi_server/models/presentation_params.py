# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.quaternion import Quaternion
from openapi_server import util


class PresentationParams(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, background_color: str=None, color_space: str=None, orienting_rotation: Quaternion=None):
        """PresentationParams - a model defined in OpenAPI

        :param background_color: The background_color of this PresentationParams.
        :param color_space: The color_space of this PresentationParams.
        :param orienting_rotation: The orienting_rotation of this PresentationParams.
        """
        self.openapi_types = {
            'background_color': str,
            'color_space': str,
            'orienting_rotation': Quaternion
        }

        self.attribute_map = {
            'background_color': 'backgroundColor',
            'color_space': 'colorSpace',
            'orienting_rotation': 'orientingRotation'
        }

        self._background_color = background_color
        self._color_space = color_space
        self._orienting_rotation = orienting_rotation

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PresentationParams':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PresentationParams of this PresentationParams.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def background_color(self):
        """Gets the background_color of this PresentationParams.

        A background color which could be used for displaying the 3D asset in a 'thumbnail' or 'palette' style view. Authors have the option to set this background color when publishing or editing their asset. This is represented as a six-digit hexademical triplet specifying the RGB components of the background color, e.g. #FF0000 for Red.

        :return: The background_color of this PresentationParams.
        :rtype: str
        """
        return self._background_color

    @background_color.setter
    def background_color(self, background_color):
        """Sets the background_color of this PresentationParams.

        A background color which could be used for displaying the 3D asset in a 'thumbnail' or 'palette' style view. Authors have the option to set this background color when publishing or editing their asset. This is represented as a six-digit hexademical triplet specifying the RGB components of the background color, e.g. #FF0000 for Red.

        :param background_color: The background_color of this PresentationParams.
        :type background_color: str
        """

        self._background_color = background_color

    @property
    def color_space(self):
        """Gets the color_space of this PresentationParams.

        The materials' diffuse/albedo color. This does not apply to vertex colors or texture maps.

        :return: The color_space of this PresentationParams.
        :rtype: str
        """
        return self._color_space

    @color_space.setter
    def color_space(self, color_space):
        """Sets the color_space of this PresentationParams.

        The materials' diffuse/albedo color. This does not apply to vertex colors or texture maps.

        :param color_space: The color_space of this PresentationParams.
        :type color_space: str
        """
        allowed_values = ["UNKNOWN", "LINEAR", "GAMMA"]  # noqa: E501
        if color_space not in allowed_values:
            raise ValueError(
                "Invalid value for `color_space` ({0}), must be one of {1}"
                .format(color_space, allowed_values)
            )

        self._color_space = color_space

    @property
    def orienting_rotation(self):
        """Gets the orienting_rotation of this PresentationParams.


        :return: The orienting_rotation of this PresentationParams.
        :rtype: Quaternion
        """
        return self._orienting_rotation

    @orienting_rotation.setter
    def orienting_rotation(self, orienting_rotation):
        """Sets the orienting_rotation of this PresentationParams.


        :param orienting_rotation: The orienting_rotation of this PresentationParams.
        :type orienting_rotation: Quaternion
        """

        self._orienting_rotation = orienting_rotation
