# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.file import File
from openapi_server.models.format import Format
from openapi_server.models.presentation_params import PresentationParams
from openapi_server.models.remix_info import RemixInfo
from openapi_server import util


class Asset(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, author_name: str=None, create_time: str=None, description: str=None, display_name: str=None, formats: List[Format]=None, is_curated: bool=None, license: str=None, metadata: str=None, name: str=None, presentation_params: PresentationParams=None, remix_info: RemixInfo=None, thumbnail: File=None, update_time: str=None, visibility: str=None):
        """Asset - a model defined in OpenAPI

        :param author_name: The author_name of this Asset.
        :param create_time: The create_time of this Asset.
        :param description: The description of this Asset.
        :param display_name: The display_name of this Asset.
        :param formats: The formats of this Asset.
        :param is_curated: The is_curated of this Asset.
        :param license: The license of this Asset.
        :param metadata: The metadata of this Asset.
        :param name: The name of this Asset.
        :param presentation_params: The presentation_params of this Asset.
        :param remix_info: The remix_info of this Asset.
        :param thumbnail: The thumbnail of this Asset.
        :param update_time: The update_time of this Asset.
        :param visibility: The visibility of this Asset.
        """
        self.openapi_types = {
            'author_name': str,
            'create_time': str,
            'description': str,
            'display_name': str,
            'formats': List[Format],
            'is_curated': bool,
            'license': str,
            'metadata': str,
            'name': str,
            'presentation_params': PresentationParams,
            'remix_info': RemixInfo,
            'thumbnail': File,
            'update_time': str,
            'visibility': str
        }

        self.attribute_map = {
            'author_name': 'authorName',
            'create_time': 'createTime',
            'description': 'description',
            'display_name': 'displayName',
            'formats': 'formats',
            'is_curated': 'isCurated',
            'license': 'license',
            'metadata': 'metadata',
            'name': 'name',
            'presentation_params': 'presentationParams',
            'remix_info': 'remixInfo',
            'thumbnail': 'thumbnail',
            'update_time': 'updateTime',
            'visibility': 'visibility'
        }

        self._author_name = author_name
        self._create_time = create_time
        self._description = description
        self._display_name = display_name
        self._formats = formats
        self._is_curated = is_curated
        self._license = license
        self._metadata = metadata
        self._name = name
        self._presentation_params = presentation_params
        self._remix_info = remix_info
        self._thumbnail = thumbnail
        self._update_time = update_time
        self._visibility = visibility

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Asset':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Asset of this Asset.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def author_name(self):
        """Gets the author_name of this Asset.

        The author's publicly visible name. Use this name when giving credit to the author. For more information, see [Licensing](/poly/discover/licensing).

        :return: The author_name of this Asset.
        :rtype: str
        """
        return self._author_name

    @author_name.setter
    def author_name(self, author_name):
        """Sets the author_name of this Asset.

        The author's publicly visible name. Use this name when giving credit to the author. For more information, see [Licensing](/poly/discover/licensing).

        :param author_name: The author_name of this Asset.
        :type author_name: str
        """

        self._author_name = author_name

    @property
    def create_time(self):
        """Gets the create_time of this Asset.

        For published assets, the time when the asset was published. For unpublished assets, the time when the asset was created.

        :return: The create_time of this Asset.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this Asset.

        For published assets, the time when the asset was published. For unpublished assets, the time when the asset was created.

        :param create_time: The create_time of this Asset.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def description(self):
        """Gets the description of this Asset.

        The human-readable description, set by the asset's author.

        :return: The description of this Asset.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Asset.

        The human-readable description, set by the asset's author.

        :param description: The description of this Asset.
        :type description: str
        """

        self._description = description

    @property
    def display_name(self):
        """Gets the display_name of this Asset.

        The human-readable name, set by the asset's author.

        :return: The display_name of this Asset.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this Asset.

        The human-readable name, set by the asset's author.

        :param display_name: The display_name of this Asset.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def formats(self):
        """Gets the formats of this Asset.

        A list of Formats where each format describes one representation of the asset.

        :return: The formats of this Asset.
        :rtype: List[Format]
        """
        return self._formats

    @formats.setter
    def formats(self, formats):
        """Sets the formats of this Asset.

        A list of Formats where each format describes one representation of the asset.

        :param formats: The formats of this Asset.
        :type formats: List[Format]
        """

        self._formats = formats

    @property
    def is_curated(self):
        """Gets the is_curated of this Asset.

        Whether this asset has been curated by the Poly team.

        :return: The is_curated of this Asset.
        :rtype: bool
        """
        return self._is_curated

    @is_curated.setter
    def is_curated(self, is_curated):
        """Sets the is_curated of this Asset.

        Whether this asset has been curated by the Poly team.

        :param is_curated: The is_curated of this Asset.
        :type is_curated: bool
        """

        self._is_curated = is_curated

    @property
    def license(self):
        """Gets the license of this Asset.

        The license under which the author has made the asset available for use, if any.

        :return: The license of this Asset.
        :rtype: str
        """
        return self._license

    @license.setter
    def license(self, license):
        """Sets the license of this Asset.

        The license under which the author has made the asset available for use, if any.

        :param license: The license of this Asset.
        :type license: str
        """
        allowed_values = ["UNKNOWN", "CREATIVE_COMMONS_BY", "ALL_RIGHTS_RESERVED"]  # noqa: E501
        if license not in allowed_values:
            raise ValueError(
                "Invalid value for `license` ({0}), must be one of {1}"
                .format(license, allowed_values)
            )

        self._license = license

    @property
    def metadata(self):
        """Gets the metadata of this Asset.

        Application-defined opaque metadata for this asset. This field is only returned when querying for the signed-in user's own assets, not for public assets. This string is limited to 1K chars. It is up to the creator of the asset to define the format for this string (for example, JSON).

        :return: The metadata of this Asset.
        :rtype: str
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this Asset.

        Application-defined opaque metadata for this asset. This field is only returned when querying for the signed-in user's own assets, not for public assets. This string is limited to 1K chars. It is up to the creator of the asset to define the format for this string (for example, JSON).

        :param metadata: The metadata of this Asset.
        :type metadata: str
        """

        self._metadata = metadata

    @property
    def name(self):
        """Gets the name of this Asset.

        The unique identifier for the asset in the form: `assets/{ASSET_ID}`.

        :return: The name of this Asset.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Asset.

        The unique identifier for the asset in the form: `assets/{ASSET_ID}`.

        :param name: The name of this Asset.
        :type name: str
        """

        self._name = name

    @property
    def presentation_params(self):
        """Gets the presentation_params of this Asset.


        :return: The presentation_params of this Asset.
        :rtype: PresentationParams
        """
        return self._presentation_params

    @presentation_params.setter
    def presentation_params(self, presentation_params):
        """Sets the presentation_params of this Asset.


        :param presentation_params: The presentation_params of this Asset.
        :type presentation_params: PresentationParams
        """

        self._presentation_params = presentation_params

    @property
    def remix_info(self):
        """Gets the remix_info of this Asset.


        :return: The remix_info of this Asset.
        :rtype: RemixInfo
        """
        return self._remix_info

    @remix_info.setter
    def remix_info(self, remix_info):
        """Sets the remix_info of this Asset.


        :param remix_info: The remix_info of this Asset.
        :type remix_info: RemixInfo
        """

        self._remix_info = remix_info

    @property
    def thumbnail(self):
        """Gets the thumbnail of this Asset.


        :return: The thumbnail of this Asset.
        :rtype: File
        """
        return self._thumbnail

    @thumbnail.setter
    def thumbnail(self, thumbnail):
        """Sets the thumbnail of this Asset.


        :param thumbnail: The thumbnail of this Asset.
        :type thumbnail: File
        """

        self._thumbnail = thumbnail

    @property
    def update_time(self):
        """Gets the update_time of this Asset.

        The time when the asset was last modified. For published assets, whose contents are immutable, the update time changes only when metadata properties, such as visibility, are updated.

        :return: The update_time of this Asset.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this Asset.

        The time when the asset was last modified. For published assets, whose contents are immutable, the update time changes only when metadata properties, such as visibility, are updated.

        :param update_time: The update_time of this Asset.
        :type update_time: str
        """

        self._update_time = update_time

    @property
    def visibility(self):
        """Gets the visibility of this Asset.

        The visibility of the asset and who can access it.

        :return: The visibility of this Asset.
        :rtype: str
        """
        return self._visibility

    @visibility.setter
    def visibility(self, visibility):
        """Sets the visibility of this Asset.

        The visibility of the asset and who can access it.

        :param visibility: The visibility of this Asset.
        :type visibility: str
        """
        allowed_values = ["VISIBILITY_UNSPECIFIED", "PRIVATE", "UNLISTED", "PUBLIC"]  # noqa: E501
        if visibility not in allowed_values:
            raise ValueError(
                "Invalid value for `visibility` ({0}), must be one of {1}"
                .format(visibility, allowed_values)
            )

        self._visibility = visibility
