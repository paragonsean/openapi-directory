# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class FormatComplexity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, lod_hint: int=None, triangle_count: str=None):
        """FormatComplexity - a model defined in OpenAPI

        :param lod_hint: The lod_hint of this FormatComplexity.
        :param triangle_count: The triangle_count of this FormatComplexity.
        """
        self.openapi_types = {
            'lod_hint': int,
            'triangle_count': str
        }

        self.attribute_map = {
            'lod_hint': 'lodHint',
            'triangle_count': 'triangleCount'
        }

        self._lod_hint = lod_hint
        self._triangle_count = triangle_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FormatComplexity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FormatComplexity of this FormatComplexity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def lod_hint(self):
        """Gets the lod_hint of this FormatComplexity.

        A non-negative integer that represents the level of detail (LOD) of this format relative to other formats of the same asset with the same format_type. This hint allows you to sort formats from the most-detailed (0) to least-detailed (integers greater than 0).

        :return: The lod_hint of this FormatComplexity.
        :rtype: int
        """
        return self._lod_hint

    @lod_hint.setter
    def lod_hint(self, lod_hint):
        """Sets the lod_hint of this FormatComplexity.

        A non-negative integer that represents the level of detail (LOD) of this format relative to other formats of the same asset with the same format_type. This hint allows you to sort formats from the most-detailed (0) to least-detailed (integers greater than 0).

        :param lod_hint: The lod_hint of this FormatComplexity.
        :type lod_hint: int
        """

        self._lod_hint = lod_hint

    @property
    def triangle_count(self):
        """Gets the triangle_count of this FormatComplexity.

        The estimated number of triangles.

        :return: The triangle_count of this FormatComplexity.
        :rtype: str
        """
        return self._triangle_count

    @triangle_count.setter
    def triangle_count(self, triangle_count):
        """Sets the triangle_count of this FormatComplexity.

        The estimated number of triangles.

        :param triangle_count: The triangle_count of this FormatComplexity.
        :type triangle_count: str
        """

        self._triangle_count = triangle_count
