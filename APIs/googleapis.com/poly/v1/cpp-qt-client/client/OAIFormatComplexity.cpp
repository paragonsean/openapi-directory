/**
 * Poly API
 * The Poly API provides read access to assets hosted on poly.google.com to all, and upload access to poly.google.com for whitelisted accounts. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFormatComplexity.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFormatComplexity::OAIFormatComplexity(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFormatComplexity::OAIFormatComplexity() {
    this->initializeModel();
}

OAIFormatComplexity::~OAIFormatComplexity() {}

void OAIFormatComplexity::initializeModel() {

    m_lod_hint_isSet = false;
    m_lod_hint_isValid = false;

    m_triangle_count_isSet = false;
    m_triangle_count_isValid = false;
}

void OAIFormatComplexity::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFormatComplexity::fromJsonObject(QJsonObject json) {

    m_lod_hint_isValid = ::OpenAPI::fromJsonValue(m_lod_hint, json[QString("lodHint")]);
    m_lod_hint_isSet = !json[QString("lodHint")].isNull() && m_lod_hint_isValid;

    m_triangle_count_isValid = ::OpenAPI::fromJsonValue(m_triangle_count, json[QString("triangleCount")]);
    m_triangle_count_isSet = !json[QString("triangleCount")].isNull() && m_triangle_count_isValid;
}

QString OAIFormatComplexity::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFormatComplexity::asJsonObject() const {
    QJsonObject obj;
    if (m_lod_hint_isSet) {
        obj.insert(QString("lodHint"), ::OpenAPI::toJsonValue(m_lod_hint));
    }
    if (m_triangle_count_isSet) {
        obj.insert(QString("triangleCount"), ::OpenAPI::toJsonValue(m_triangle_count));
    }
    return obj;
}

qint32 OAIFormatComplexity::getLodHint() const {
    return m_lod_hint;
}
void OAIFormatComplexity::setLodHint(const qint32 &lod_hint) {
    m_lod_hint = lod_hint;
    m_lod_hint_isSet = true;
}

bool OAIFormatComplexity::is_lod_hint_Set() const{
    return m_lod_hint_isSet;
}

bool OAIFormatComplexity::is_lod_hint_Valid() const{
    return m_lod_hint_isValid;
}

QString OAIFormatComplexity::getTriangleCount() const {
    return m_triangle_count;
}
void OAIFormatComplexity::setTriangleCount(const QString &triangle_count) {
    m_triangle_count = triangle_count;
    m_triangle_count_isSet = true;
}

bool OAIFormatComplexity::is_triangle_count_Set() const{
    return m_triangle_count_isSet;
}

bool OAIFormatComplexity::is_triangle_count_Valid() const{
    return m_triangle_count_isValid;
}

bool OAIFormatComplexity::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_lod_hint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_triangle_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFormatComplexity::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
