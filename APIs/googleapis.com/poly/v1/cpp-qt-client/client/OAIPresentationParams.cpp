/**
 * Poly API
 * The Poly API provides read access to assets hosted on poly.google.com to all, and upload access to poly.google.com for whitelisted accounts. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPresentationParams.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPresentationParams::OAIPresentationParams(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPresentationParams::OAIPresentationParams() {
    this->initializeModel();
}

OAIPresentationParams::~OAIPresentationParams() {}

void OAIPresentationParams::initializeModel() {

    m_background_color_isSet = false;
    m_background_color_isValid = false;

    m_color_space_isSet = false;
    m_color_space_isValid = false;

    m_orienting_rotation_isSet = false;
    m_orienting_rotation_isValid = false;
}

void OAIPresentationParams::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPresentationParams::fromJsonObject(QJsonObject json) {

    m_background_color_isValid = ::OpenAPI::fromJsonValue(m_background_color, json[QString("backgroundColor")]);
    m_background_color_isSet = !json[QString("backgroundColor")].isNull() && m_background_color_isValid;

    m_color_space_isValid = ::OpenAPI::fromJsonValue(m_color_space, json[QString("colorSpace")]);
    m_color_space_isSet = !json[QString("colorSpace")].isNull() && m_color_space_isValid;

    m_orienting_rotation_isValid = ::OpenAPI::fromJsonValue(m_orienting_rotation, json[QString("orientingRotation")]);
    m_orienting_rotation_isSet = !json[QString("orientingRotation")].isNull() && m_orienting_rotation_isValid;
}

QString OAIPresentationParams::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPresentationParams::asJsonObject() const {
    QJsonObject obj;
    if (m_background_color_isSet) {
        obj.insert(QString("backgroundColor"), ::OpenAPI::toJsonValue(m_background_color));
    }
    if (m_color_space_isSet) {
        obj.insert(QString("colorSpace"), ::OpenAPI::toJsonValue(m_color_space));
    }
    if (m_orienting_rotation.isSet()) {
        obj.insert(QString("orientingRotation"), ::OpenAPI::toJsonValue(m_orienting_rotation));
    }
    return obj;
}

QString OAIPresentationParams::getBackgroundColor() const {
    return m_background_color;
}
void OAIPresentationParams::setBackgroundColor(const QString &background_color) {
    m_background_color = background_color;
    m_background_color_isSet = true;
}

bool OAIPresentationParams::is_background_color_Set() const{
    return m_background_color_isSet;
}

bool OAIPresentationParams::is_background_color_Valid() const{
    return m_background_color_isValid;
}

QString OAIPresentationParams::getColorSpace() const {
    return m_color_space;
}
void OAIPresentationParams::setColorSpace(const QString &color_space) {
    m_color_space = color_space;
    m_color_space_isSet = true;
}

bool OAIPresentationParams::is_color_space_Set() const{
    return m_color_space_isSet;
}

bool OAIPresentationParams::is_color_space_Valid() const{
    return m_color_space_isValid;
}

OAIQuaternion OAIPresentationParams::getOrientingRotation() const {
    return m_orienting_rotation;
}
void OAIPresentationParams::setOrientingRotation(const OAIQuaternion &orienting_rotation) {
    m_orienting_rotation = orienting_rotation;
    m_orienting_rotation_isSet = true;
}

bool OAIPresentationParams::is_orienting_rotation_Set() const{
    return m_orienting_rotation_isSet;
}

bool OAIPresentationParams::is_orienting_rotation_Valid() const{
    return m_orienting_rotation_isValid;
}

bool OAIPresentationParams::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_background_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_color_space_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_orienting_rotation.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPresentationParams::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
