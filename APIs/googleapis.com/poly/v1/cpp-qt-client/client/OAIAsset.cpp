/**
 * Poly API
 * The Poly API provides read access to assets hosted on poly.google.com to all, and upload access to poly.google.com for whitelisted accounts. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAsset.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAsset::OAIAsset(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAsset::OAIAsset() {
    this->initializeModel();
}

OAIAsset::~OAIAsset() {}

void OAIAsset::initializeModel() {

    m_author_name_isSet = false;
    m_author_name_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_formats_isSet = false;
    m_formats_isValid = false;

    m_is_curated_isSet = false;
    m_is_curated_isValid = false;

    m_license_isSet = false;
    m_license_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_presentation_params_isSet = false;
    m_presentation_params_isValid = false;

    m_remix_info_isSet = false;
    m_remix_info_isValid = false;

    m_thumbnail_isSet = false;
    m_thumbnail_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;

    m_visibility_isSet = false;
    m_visibility_isValid = false;
}

void OAIAsset::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAsset::fromJsonObject(QJsonObject json) {

    m_author_name_isValid = ::OpenAPI::fromJsonValue(m_author_name, json[QString("authorName")]);
    m_author_name_isSet = !json[QString("authorName")].isNull() && m_author_name_isValid;

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_formats_isValid = ::OpenAPI::fromJsonValue(m_formats, json[QString("formats")]);
    m_formats_isSet = !json[QString("formats")].isNull() && m_formats_isValid;

    m_is_curated_isValid = ::OpenAPI::fromJsonValue(m_is_curated, json[QString("isCurated")]);
    m_is_curated_isSet = !json[QString("isCurated")].isNull() && m_is_curated_isValid;

    m_license_isValid = ::OpenAPI::fromJsonValue(m_license, json[QString("license")]);
    m_license_isSet = !json[QString("license")].isNull() && m_license_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_presentation_params_isValid = ::OpenAPI::fromJsonValue(m_presentation_params, json[QString("presentationParams")]);
    m_presentation_params_isSet = !json[QString("presentationParams")].isNull() && m_presentation_params_isValid;

    m_remix_info_isValid = ::OpenAPI::fromJsonValue(m_remix_info, json[QString("remixInfo")]);
    m_remix_info_isSet = !json[QString("remixInfo")].isNull() && m_remix_info_isValid;

    m_thumbnail_isValid = ::OpenAPI::fromJsonValue(m_thumbnail, json[QString("thumbnail")]);
    m_thumbnail_isSet = !json[QString("thumbnail")].isNull() && m_thumbnail_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;

    m_visibility_isValid = ::OpenAPI::fromJsonValue(m_visibility, json[QString("visibility")]);
    m_visibility_isSet = !json[QString("visibility")].isNull() && m_visibility_isValid;
}

QString OAIAsset::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAsset::asJsonObject() const {
    QJsonObject obj;
    if (m_author_name_isSet) {
        obj.insert(QString("authorName"), ::OpenAPI::toJsonValue(m_author_name));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_formats.size() > 0) {
        obj.insert(QString("formats"), ::OpenAPI::toJsonValue(m_formats));
    }
    if (m_is_curated_isSet) {
        obj.insert(QString("isCurated"), ::OpenAPI::toJsonValue(m_is_curated));
    }
    if (m_license_isSet) {
        obj.insert(QString("license"), ::OpenAPI::toJsonValue(m_license));
    }
    if (m_metadata_isSet) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_presentation_params.isSet()) {
        obj.insert(QString("presentationParams"), ::OpenAPI::toJsonValue(m_presentation_params));
    }
    if (m_remix_info.isSet()) {
        obj.insert(QString("remixInfo"), ::OpenAPI::toJsonValue(m_remix_info));
    }
    if (m_thumbnail.isSet()) {
        obj.insert(QString("thumbnail"), ::OpenAPI::toJsonValue(m_thumbnail));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    if (m_visibility_isSet) {
        obj.insert(QString("visibility"), ::OpenAPI::toJsonValue(m_visibility));
    }
    return obj;
}

QString OAIAsset::getAuthorName() const {
    return m_author_name;
}
void OAIAsset::setAuthorName(const QString &author_name) {
    m_author_name = author_name;
    m_author_name_isSet = true;
}

bool OAIAsset::is_author_name_Set() const{
    return m_author_name_isSet;
}

bool OAIAsset::is_author_name_Valid() const{
    return m_author_name_isValid;
}

QString OAIAsset::getCreateTime() const {
    return m_create_time;
}
void OAIAsset::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIAsset::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIAsset::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAIAsset::getDescription() const {
    return m_description;
}
void OAIAsset::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIAsset::is_description_Set() const{
    return m_description_isSet;
}

bool OAIAsset::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIAsset::getDisplayName() const {
    return m_display_name;
}
void OAIAsset::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIAsset::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIAsset::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QList<OAIFormat> OAIAsset::getFormats() const {
    return m_formats;
}
void OAIAsset::setFormats(const QList<OAIFormat> &formats) {
    m_formats = formats;
    m_formats_isSet = true;
}

bool OAIAsset::is_formats_Set() const{
    return m_formats_isSet;
}

bool OAIAsset::is_formats_Valid() const{
    return m_formats_isValid;
}

bool OAIAsset::isIsCurated() const {
    return m_is_curated;
}
void OAIAsset::setIsCurated(const bool &is_curated) {
    m_is_curated = is_curated;
    m_is_curated_isSet = true;
}

bool OAIAsset::is_is_curated_Set() const{
    return m_is_curated_isSet;
}

bool OAIAsset::is_is_curated_Valid() const{
    return m_is_curated_isValid;
}

QString OAIAsset::getLicense() const {
    return m_license;
}
void OAIAsset::setLicense(const QString &license) {
    m_license = license;
    m_license_isSet = true;
}

bool OAIAsset::is_license_Set() const{
    return m_license_isSet;
}

bool OAIAsset::is_license_Valid() const{
    return m_license_isValid;
}

QString OAIAsset::getMetadata() const {
    return m_metadata;
}
void OAIAsset::setMetadata(const QString &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIAsset::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIAsset::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QString OAIAsset::getName() const {
    return m_name;
}
void OAIAsset::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAsset::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAsset::is_name_Valid() const{
    return m_name_isValid;
}

OAIPresentationParams OAIAsset::getPresentationParams() const {
    return m_presentation_params;
}
void OAIAsset::setPresentationParams(const OAIPresentationParams &presentation_params) {
    m_presentation_params = presentation_params;
    m_presentation_params_isSet = true;
}

bool OAIAsset::is_presentation_params_Set() const{
    return m_presentation_params_isSet;
}

bool OAIAsset::is_presentation_params_Valid() const{
    return m_presentation_params_isValid;
}

OAIRemixInfo OAIAsset::getRemixInfo() const {
    return m_remix_info;
}
void OAIAsset::setRemixInfo(const OAIRemixInfo &remix_info) {
    m_remix_info = remix_info;
    m_remix_info_isSet = true;
}

bool OAIAsset::is_remix_info_Set() const{
    return m_remix_info_isSet;
}

bool OAIAsset::is_remix_info_Valid() const{
    return m_remix_info_isValid;
}

OAIFile OAIAsset::getThumbnail() const {
    return m_thumbnail;
}
void OAIAsset::setThumbnail(const OAIFile &thumbnail) {
    m_thumbnail = thumbnail;
    m_thumbnail_isSet = true;
}

bool OAIAsset::is_thumbnail_Set() const{
    return m_thumbnail_isSet;
}

bool OAIAsset::is_thumbnail_Valid() const{
    return m_thumbnail_isValid;
}

QString OAIAsset::getUpdateTime() const {
    return m_update_time;
}
void OAIAsset::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAIAsset::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAIAsset::is_update_time_Valid() const{
    return m_update_time_isValid;
}

QString OAIAsset::getVisibility() const {
    return m_visibility;
}
void OAIAsset::setVisibility(const QString &visibility) {
    m_visibility = visibility;
    m_visibility_isSet = true;
}

bool OAIAsset::is_visibility_Set() const{
    return m_visibility_isSet;
}

bool OAIAsset::is_visibility_Valid() const{
    return m_visibility_isValid;
}

bool OAIAsset::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_author_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_formats.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_curated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_license_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_presentation_params.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_remix_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_thumbnail.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_visibility_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAsset::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
