/**
 * Poly API
 * The Poly API provides read access to assets hosted on poly.google.com to all, and upload access to poly.google.com for whitelisted accounts. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAssetImportMessage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAssetImportMessage::OAIAssetImportMessage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAssetImportMessage::OAIAssetImportMessage() {
    this->initializeModel();
}

OAIAssetImportMessage::~OAIAssetImportMessage() {}

void OAIAssetImportMessage::initializeModel() {

    m_code_isSet = false;
    m_code_isValid = false;

    m_file_path_isSet = false;
    m_file_path_isValid = false;

    m_image_error_isSet = false;
    m_image_error_isValid = false;

    m_obj_parse_error_isSet = false;
    m_obj_parse_error_isValid = false;
}

void OAIAssetImportMessage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAssetImportMessage::fromJsonObject(QJsonObject json) {

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_file_path_isValid = ::OpenAPI::fromJsonValue(m_file_path, json[QString("filePath")]);
    m_file_path_isSet = !json[QString("filePath")].isNull() && m_file_path_isValid;

    m_image_error_isValid = ::OpenAPI::fromJsonValue(m_image_error, json[QString("imageError")]);
    m_image_error_isSet = !json[QString("imageError")].isNull() && m_image_error_isValid;

    m_obj_parse_error_isValid = ::OpenAPI::fromJsonValue(m_obj_parse_error, json[QString("objParseError")]);
    m_obj_parse_error_isSet = !json[QString("objParseError")].isNull() && m_obj_parse_error_isValid;
}

QString OAIAssetImportMessage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAssetImportMessage::asJsonObject() const {
    QJsonObject obj;
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_file_path_isSet) {
        obj.insert(QString("filePath"), ::OpenAPI::toJsonValue(m_file_path));
    }
    if (m_image_error.isSet()) {
        obj.insert(QString("imageError"), ::OpenAPI::toJsonValue(m_image_error));
    }
    if (m_obj_parse_error.isSet()) {
        obj.insert(QString("objParseError"), ::OpenAPI::toJsonValue(m_obj_parse_error));
    }
    return obj;
}

QString OAIAssetImportMessage::getCode() const {
    return m_code;
}
void OAIAssetImportMessage::setCode(const QString &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAIAssetImportMessage::is_code_Set() const{
    return m_code_isSet;
}

bool OAIAssetImportMessage::is_code_Valid() const{
    return m_code_isValid;
}

QString OAIAssetImportMessage::getFilePath() const {
    return m_file_path;
}
void OAIAssetImportMessage::setFilePath(const QString &file_path) {
    m_file_path = file_path;
    m_file_path_isSet = true;
}

bool OAIAssetImportMessage::is_file_path_Set() const{
    return m_file_path_isSet;
}

bool OAIAssetImportMessage::is_file_path_Valid() const{
    return m_file_path_isValid;
}

OAIImageError OAIAssetImportMessage::getImageError() const {
    return m_image_error;
}
void OAIAssetImportMessage::setImageError(const OAIImageError &image_error) {
    m_image_error = image_error;
    m_image_error_isSet = true;
}

bool OAIAssetImportMessage::is_image_error_Set() const{
    return m_image_error_isSet;
}

bool OAIAssetImportMessage::is_image_error_Valid() const{
    return m_image_error_isValid;
}

OAIObjParseError OAIAssetImportMessage::getObjParseError() const {
    return m_obj_parse_error;
}
void OAIAssetImportMessage::setObjParseError(const OAIObjParseError &obj_parse_error) {
    m_obj_parse_error = obj_parse_error;
    m_obj_parse_error_isSet = true;
}

bool OAIAssetImportMessage::is_obj_parse_error_Set() const{
    return m_obj_parse_error_isSet;
}

bool OAIAssetImportMessage::is_obj_parse_error_Valid() const{
    return m_obj_parse_error_isValid;
}

bool OAIAssetImportMessage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_error.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_obj_parse_error.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAssetImportMessage::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
