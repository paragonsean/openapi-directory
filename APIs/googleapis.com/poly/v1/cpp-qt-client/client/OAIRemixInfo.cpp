/**
 * Poly API
 * The Poly API provides read access to assets hosted on poly.google.com to all, and upload access to poly.google.com for whitelisted accounts. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRemixInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRemixInfo::OAIRemixInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRemixInfo::OAIRemixInfo() {
    this->initializeModel();
}

OAIRemixInfo::~OAIRemixInfo() {}

void OAIRemixInfo::initializeModel() {

    m_source_asset_isSet = false;
    m_source_asset_isValid = false;
}

void OAIRemixInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRemixInfo::fromJsonObject(QJsonObject json) {

    m_source_asset_isValid = ::OpenAPI::fromJsonValue(m_source_asset, json[QString("sourceAsset")]);
    m_source_asset_isSet = !json[QString("sourceAsset")].isNull() && m_source_asset_isValid;
}

QString OAIRemixInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRemixInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_source_asset.size() > 0) {
        obj.insert(QString("sourceAsset"), ::OpenAPI::toJsonValue(m_source_asset));
    }
    return obj;
}

QList<QString> OAIRemixInfo::getSourceAsset() const {
    return m_source_asset;
}
void OAIRemixInfo::setSourceAsset(const QList<QString> &source_asset) {
    m_source_asset = source_asset;
    m_source_asset_isSet = true;
}

bool OAIRemixInfo::is_source_asset_Set() const{
    return m_source_asset_isSet;
}

bool OAIRemixInfo::is_source_asset_Valid() const{
    return m_source_asset_isValid;
}

bool OAIRemixInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_source_asset.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRemixInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
