/**
 * Poly API
 * The Poly API provides read access to assets hosted on poly.google.com to all, and upload access to poly.google.com for whitelisted accounts. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAsset.h
 *
 * Represents and describes an asset in the Poly library. An asset is a 3D model or scene created using [Tilt Brush](//www.tiltbrush.com), [Blocks](//vr.google.com/blocks/), or any 3D program that produces a file that can be upload to Poly.
 */

#ifndef OAIAsset_H
#define OAIAsset_H

#include <QJsonObject>

#include "OAIFile.h"
#include "OAIFormat.h"
#include "OAIPresentationParams.h"
#include "OAIRemixInfo.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIFormat;
class OAIPresentationParams;
class OAIRemixInfo;
class OAIFile;

class OAIAsset : public OAIObject {
public:
    OAIAsset();
    OAIAsset(QString json);
    ~OAIAsset() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAuthorName() const;
    void setAuthorName(const QString &author_name);
    bool is_author_name_Set() const;
    bool is_author_name_Valid() const;

    QString getCreateTime() const;
    void setCreateTime(const QString &create_time);
    bool is_create_time_Set() const;
    bool is_create_time_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    QString getDisplayName() const;
    void setDisplayName(const QString &display_name);
    bool is_display_name_Set() const;
    bool is_display_name_Valid() const;

    QList<OAIFormat> getFormats() const;
    void setFormats(const QList<OAIFormat> &formats);
    bool is_formats_Set() const;
    bool is_formats_Valid() const;

    bool isIsCurated() const;
    void setIsCurated(const bool &is_curated);
    bool is_is_curated_Set() const;
    bool is_is_curated_Valid() const;

    QString getLicense() const;
    void setLicense(const QString &license);
    bool is_license_Set() const;
    bool is_license_Valid() const;

    QString getMetadata() const;
    void setMetadata(const QString &metadata);
    bool is_metadata_Set() const;
    bool is_metadata_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    OAIPresentationParams getPresentationParams() const;
    void setPresentationParams(const OAIPresentationParams &presentation_params);
    bool is_presentation_params_Set() const;
    bool is_presentation_params_Valid() const;

    OAIRemixInfo getRemixInfo() const;
    void setRemixInfo(const OAIRemixInfo &remix_info);
    bool is_remix_info_Set() const;
    bool is_remix_info_Valid() const;

    OAIFile getThumbnail() const;
    void setThumbnail(const OAIFile &thumbnail);
    bool is_thumbnail_Set() const;
    bool is_thumbnail_Valid() const;

    QString getUpdateTime() const;
    void setUpdateTime(const QString &update_time);
    bool is_update_time_Set() const;
    bool is_update_time_Valid() const;

    QString getVisibility() const;
    void setVisibility(const QString &visibility);
    bool is_visibility_Set() const;
    bool is_visibility_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_author_name;
    bool m_author_name_isSet;
    bool m_author_name_isValid;

    QString m_create_time;
    bool m_create_time_isSet;
    bool m_create_time_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    QString m_display_name;
    bool m_display_name_isSet;
    bool m_display_name_isValid;

    QList<OAIFormat> m_formats;
    bool m_formats_isSet;
    bool m_formats_isValid;

    bool m_is_curated;
    bool m_is_curated_isSet;
    bool m_is_curated_isValid;

    QString m_license;
    bool m_license_isSet;
    bool m_license_isValid;

    QString m_metadata;
    bool m_metadata_isSet;
    bool m_metadata_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    OAIPresentationParams m_presentation_params;
    bool m_presentation_params_isSet;
    bool m_presentation_params_isValid;

    OAIRemixInfo m_remix_info;
    bool m_remix_info_isSet;
    bool m_remix_info_isValid;

    OAIFile m_thumbnail;
    bool m_thumbnail_isSet;
    bool m_thumbnail_isValid;

    QString m_update_time;
    bool m_update_time_isSet;
    bool m_update_time_isValid;

    QString m_visibility;
    bool m_visibility_isSet;
    bool m_visibility_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAsset)

#endif // OAIAsset_H
