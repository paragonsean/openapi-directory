/**
 * Poly API
 * The Poly API provides read access to assets hosted on poly.google.com to all, and upload access to poly.google.com for whitelisted accounts. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFormat.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFormat::OAIFormat(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFormat::OAIFormat() {
    this->initializeModel();
}

OAIFormat::~OAIFormat() {}

void OAIFormat::initializeModel() {

    m_format_complexity_isSet = false;
    m_format_complexity_isValid = false;

    m_format_type_isSet = false;
    m_format_type_isValid = false;

    m_resources_isSet = false;
    m_resources_isValid = false;

    m_root_isSet = false;
    m_root_isValid = false;
}

void OAIFormat::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFormat::fromJsonObject(QJsonObject json) {

    m_format_complexity_isValid = ::OpenAPI::fromJsonValue(m_format_complexity, json[QString("formatComplexity")]);
    m_format_complexity_isSet = !json[QString("formatComplexity")].isNull() && m_format_complexity_isValid;

    m_format_type_isValid = ::OpenAPI::fromJsonValue(m_format_type, json[QString("formatType")]);
    m_format_type_isSet = !json[QString("formatType")].isNull() && m_format_type_isValid;

    m_resources_isValid = ::OpenAPI::fromJsonValue(m_resources, json[QString("resources")]);
    m_resources_isSet = !json[QString("resources")].isNull() && m_resources_isValid;

    m_root_isValid = ::OpenAPI::fromJsonValue(m_root, json[QString("root")]);
    m_root_isSet = !json[QString("root")].isNull() && m_root_isValid;
}

QString OAIFormat::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFormat::asJsonObject() const {
    QJsonObject obj;
    if (m_format_complexity.isSet()) {
        obj.insert(QString("formatComplexity"), ::OpenAPI::toJsonValue(m_format_complexity));
    }
    if (m_format_type_isSet) {
        obj.insert(QString("formatType"), ::OpenAPI::toJsonValue(m_format_type));
    }
    if (m_resources.size() > 0) {
        obj.insert(QString("resources"), ::OpenAPI::toJsonValue(m_resources));
    }
    if (m_root.isSet()) {
        obj.insert(QString("root"), ::OpenAPI::toJsonValue(m_root));
    }
    return obj;
}

OAIFormatComplexity OAIFormat::getFormatComplexity() const {
    return m_format_complexity;
}
void OAIFormat::setFormatComplexity(const OAIFormatComplexity &format_complexity) {
    m_format_complexity = format_complexity;
    m_format_complexity_isSet = true;
}

bool OAIFormat::is_format_complexity_Set() const{
    return m_format_complexity_isSet;
}

bool OAIFormat::is_format_complexity_Valid() const{
    return m_format_complexity_isValid;
}

QString OAIFormat::getFormatType() const {
    return m_format_type;
}
void OAIFormat::setFormatType(const QString &format_type) {
    m_format_type = format_type;
    m_format_type_isSet = true;
}

bool OAIFormat::is_format_type_Set() const{
    return m_format_type_isSet;
}

bool OAIFormat::is_format_type_Valid() const{
    return m_format_type_isValid;
}

QList<OAIFile> OAIFormat::getResources() const {
    return m_resources;
}
void OAIFormat::setResources(const QList<OAIFile> &resources) {
    m_resources = resources;
    m_resources_isSet = true;
}

bool OAIFormat::is_resources_Set() const{
    return m_resources_isSet;
}

bool OAIFormat::is_resources_Valid() const{
    return m_resources_isValid;
}

OAIFile OAIFormat::getRoot() const {
    return m_root;
}
void OAIFormat::setRoot(const OAIFile &root) {
    m_root = root;
    m_root_isSet = true;
}

bool OAIFormat::is_root_Set() const{
    return m_root_isSet;
}

bool OAIFormat::is_root_Valid() const{
    return m_root_isValid;
}

bool OAIFormat::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_format_complexity.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_format_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resources.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_root.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFormat::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
