/**
 * Poly API
 * The Poly API provides read access to assets hosted on poly.google.com to all, and upload access to poly.google.com for whitelisted accounts. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStartAssetImportResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStartAssetImportResponse::OAIStartAssetImportResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStartAssetImportResponse::OAIStartAssetImportResponse() {
    this->initializeModel();
}

OAIStartAssetImportResponse::~OAIStartAssetImportResponse() {}

void OAIStartAssetImportResponse::initializeModel() {

    m_asset_id_isSet = false;
    m_asset_id_isValid = false;

    m_asset_import_id_isSet = false;
    m_asset_import_id_isValid = false;

    m_asset_import_messages_isSet = false;
    m_asset_import_messages_isValid = false;

    m_publish_url_isSet = false;
    m_publish_url_isValid = false;
}

void OAIStartAssetImportResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStartAssetImportResponse::fromJsonObject(QJsonObject json) {

    m_asset_id_isValid = ::OpenAPI::fromJsonValue(m_asset_id, json[QString("assetId")]);
    m_asset_id_isSet = !json[QString("assetId")].isNull() && m_asset_id_isValid;

    m_asset_import_id_isValid = ::OpenAPI::fromJsonValue(m_asset_import_id, json[QString("assetImportId")]);
    m_asset_import_id_isSet = !json[QString("assetImportId")].isNull() && m_asset_import_id_isValid;

    m_asset_import_messages_isValid = ::OpenAPI::fromJsonValue(m_asset_import_messages, json[QString("assetImportMessages")]);
    m_asset_import_messages_isSet = !json[QString("assetImportMessages")].isNull() && m_asset_import_messages_isValid;

    m_publish_url_isValid = ::OpenAPI::fromJsonValue(m_publish_url, json[QString("publishUrl")]);
    m_publish_url_isSet = !json[QString("publishUrl")].isNull() && m_publish_url_isValid;
}

QString OAIStartAssetImportResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStartAssetImportResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_asset_id_isSet) {
        obj.insert(QString("assetId"), ::OpenAPI::toJsonValue(m_asset_id));
    }
    if (m_asset_import_id_isSet) {
        obj.insert(QString("assetImportId"), ::OpenAPI::toJsonValue(m_asset_import_id));
    }
    if (m_asset_import_messages.size() > 0) {
        obj.insert(QString("assetImportMessages"), ::OpenAPI::toJsonValue(m_asset_import_messages));
    }
    if (m_publish_url_isSet) {
        obj.insert(QString("publishUrl"), ::OpenAPI::toJsonValue(m_publish_url));
    }
    return obj;
}

QString OAIStartAssetImportResponse::getAssetId() const {
    return m_asset_id;
}
void OAIStartAssetImportResponse::setAssetId(const QString &asset_id) {
    m_asset_id = asset_id;
    m_asset_id_isSet = true;
}

bool OAIStartAssetImportResponse::is_asset_id_Set() const{
    return m_asset_id_isSet;
}

bool OAIStartAssetImportResponse::is_asset_id_Valid() const{
    return m_asset_id_isValid;
}

QString OAIStartAssetImportResponse::getAssetImportId() const {
    return m_asset_import_id;
}
void OAIStartAssetImportResponse::setAssetImportId(const QString &asset_import_id) {
    m_asset_import_id = asset_import_id;
    m_asset_import_id_isSet = true;
}

bool OAIStartAssetImportResponse::is_asset_import_id_Set() const{
    return m_asset_import_id_isSet;
}

bool OAIStartAssetImportResponse::is_asset_import_id_Valid() const{
    return m_asset_import_id_isValid;
}

QList<OAIAssetImportMessage> OAIStartAssetImportResponse::getAssetImportMessages() const {
    return m_asset_import_messages;
}
void OAIStartAssetImportResponse::setAssetImportMessages(const QList<OAIAssetImportMessage> &asset_import_messages) {
    m_asset_import_messages = asset_import_messages;
    m_asset_import_messages_isSet = true;
}

bool OAIStartAssetImportResponse::is_asset_import_messages_Set() const{
    return m_asset_import_messages_isSet;
}

bool OAIStartAssetImportResponse::is_asset_import_messages_Valid() const{
    return m_asset_import_messages_isValid;
}

QString OAIStartAssetImportResponse::getPublishUrl() const {
    return m_publish_url;
}
void OAIStartAssetImportResponse::setPublishUrl(const QString &publish_url) {
    m_publish_url = publish_url;
    m_publish_url_isSet = true;
}

bool OAIStartAssetImportResponse::is_publish_url_Set() const{
    return m_publish_url_isSet;
}

bool OAIStartAssetImportResponse::is_publish_url_Valid() const{
    return m_publish_url_isValid;
}

bool OAIStartAssetImportResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_asset_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_asset_import_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_asset_import_messages.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_publish_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStartAssetImportResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
