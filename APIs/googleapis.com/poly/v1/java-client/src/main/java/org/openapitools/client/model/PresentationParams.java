/*
 * Poly API
 * The Poly API provides read access to assets hosted on poly.google.com to all, and upload access to poly.google.com for whitelisted accounts. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Quaternion;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Hints for displaying the asset, based on information available when the asset was uploaded.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:29.616284-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PresentationParams {
  public static final String SERIALIZED_NAME_BACKGROUND_COLOR = "backgroundColor";
  @SerializedName(SERIALIZED_NAME_BACKGROUND_COLOR)
  private String backgroundColor;

  /**
   * The materials&#39; diffuse/albedo color. This does not apply to vertex colors or texture maps.
   */
  @JsonAdapter(ColorSpaceEnum.Adapter.class)
  public enum ColorSpaceEnum {
    UNKNOWN("UNKNOWN"),
    
    LINEAR("LINEAR"),
    
    GAMMA("GAMMA");

    private String value;

    ColorSpaceEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ColorSpaceEnum fromValue(String value) {
      for (ColorSpaceEnum b : ColorSpaceEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ColorSpaceEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ColorSpaceEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ColorSpaceEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ColorSpaceEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ColorSpaceEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_COLOR_SPACE = "colorSpace";
  @SerializedName(SERIALIZED_NAME_COLOR_SPACE)
  private ColorSpaceEnum colorSpace;

  public static final String SERIALIZED_NAME_ORIENTING_ROTATION = "orientingRotation";
  @SerializedName(SERIALIZED_NAME_ORIENTING_ROTATION)
  private Quaternion orientingRotation;

  public PresentationParams() {
  }

  public PresentationParams backgroundColor(String backgroundColor) {
    this.backgroundColor = backgroundColor;
    return this;
  }

  /**
   * A background color which could be used for displaying the 3D asset in a &#39;thumbnail&#39; or &#39;palette&#39; style view. Authors have the option to set this background color when publishing or editing their asset. This is represented as a six-digit hexademical triplet specifying the RGB components of the background color, e.g. #FF0000 for Red.
   * @return backgroundColor
   */
  @javax.annotation.Nullable
  public String getBackgroundColor() {
    return backgroundColor;
  }

  public void setBackgroundColor(String backgroundColor) {
    this.backgroundColor = backgroundColor;
  }


  public PresentationParams colorSpace(ColorSpaceEnum colorSpace) {
    this.colorSpace = colorSpace;
    return this;
  }

  /**
   * The materials&#39; diffuse/albedo color. This does not apply to vertex colors or texture maps.
   * @return colorSpace
   */
  @javax.annotation.Nullable
  public ColorSpaceEnum getColorSpace() {
    return colorSpace;
  }

  public void setColorSpace(ColorSpaceEnum colorSpace) {
    this.colorSpace = colorSpace;
  }


  public PresentationParams orientingRotation(Quaternion orientingRotation) {
    this.orientingRotation = orientingRotation;
    return this;
  }

  /**
   * Get orientingRotation
   * @return orientingRotation
   */
  @javax.annotation.Nullable
  public Quaternion getOrientingRotation() {
    return orientingRotation;
  }

  public void setOrientingRotation(Quaternion orientingRotation) {
    this.orientingRotation = orientingRotation;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PresentationParams presentationParams = (PresentationParams) o;
    return Objects.equals(this.backgroundColor, presentationParams.backgroundColor) &&
        Objects.equals(this.colorSpace, presentationParams.colorSpace) &&
        Objects.equals(this.orientingRotation, presentationParams.orientingRotation);
  }

  @Override
  public int hashCode() {
    return Objects.hash(backgroundColor, colorSpace, orientingRotation);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PresentationParams {\n");
    sb.append("    backgroundColor: ").append(toIndentedString(backgroundColor)).append("\n");
    sb.append("    colorSpace: ").append(toIndentedString(colorSpace)).append("\n");
    sb.append("    orientingRotation: ").append(toIndentedString(orientingRotation)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("backgroundColor");
    openapiFields.add("colorSpace");
    openapiFields.add("orientingRotation");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PresentationParams
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PresentationParams.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PresentationParams is not found in the empty JSON string", PresentationParams.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PresentationParams.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PresentationParams` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("backgroundColor") != null && !jsonObj.get("backgroundColor").isJsonNull()) && !jsonObj.get("backgroundColor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `backgroundColor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("backgroundColor").toString()));
      }
      if ((jsonObj.get("colorSpace") != null && !jsonObj.get("colorSpace").isJsonNull()) && !jsonObj.get("colorSpace").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `colorSpace` to be a primitive type in the JSON string but got `%s`", jsonObj.get("colorSpace").toString()));
      }
      // validate the optional field `colorSpace`
      if (jsonObj.get("colorSpace") != null && !jsonObj.get("colorSpace").isJsonNull()) {
        ColorSpaceEnum.validateJsonElement(jsonObj.get("colorSpace"));
      }
      // validate the optional field `orientingRotation`
      if (jsonObj.get("orientingRotation") != null && !jsonObj.get("orientingRotation").isJsonNull()) {
        Quaternion.validateJsonElement(jsonObj.get("orientingRotation"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PresentationParams.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PresentationParams' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PresentationParams> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PresentationParams.class));

       return (TypeAdapter<T>) new TypeAdapter<PresentationParams>() {
           @Override
           public void write(JsonWriter out, PresentationParams value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PresentationParams read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PresentationParams given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PresentationParams
   * @throws IOException if the JSON string is invalid with respect to PresentationParams
   */
  public static PresentationParams fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PresentationParams.class);
  }

  /**
   * Convert an instance of PresentationParams to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

