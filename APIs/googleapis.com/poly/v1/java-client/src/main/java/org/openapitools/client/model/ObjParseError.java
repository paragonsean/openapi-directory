/*
 * Poly API
 * The Poly API provides read access to assets hosted on poly.google.com to all, and upload access to poly.google.com for whitelisted accounts. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Details of an error resulting from parsing an OBJ file
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:29.616284-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ObjParseError {
  /**
   * The type of problem found (required).
   */
  @JsonAdapter(CodeEnum.Adapter.class)
  public enum CodeEnum {
    CODE_UNSPECIFIED("CODE_UNSPECIFIED"),
    
    INCONSISTENT_VERTEX_REFS("INCONSISTENT_VERTEX_REFS"),
    
    INVALID_COMMAND("INVALID_COMMAND"),
    
    INVALID_NUMBER("INVALID_NUMBER"),
    
    INVALID_VERTEX_REF("INVALID_VERTEX_REF"),
    
    MISSING_GEOMETRIC_VERTEX("MISSING_GEOMETRIC_VERTEX"),
    
    MISSING_TOKEN("MISSING_TOKEN"),
    
    TOO_FEW_DIMENSIONS("TOO_FEW_DIMENSIONS"),
    
    TOO_FEW_VERTICES("TOO_FEW_VERTICES"),
    
    TOO_MANY_DIMENSIONS("TOO_MANY_DIMENSIONS"),
    
    UNSUPPORTED_COMMAND("UNSUPPORTED_COMMAND"),
    
    UNUSED_TOKENS("UNUSED_TOKENS"),
    
    VERTEX_NOT_FOUND("VERTEX_NOT_FOUND"),
    
    NUMBER_OUT_OF_RANGE("NUMBER_OUT_OF_RANGE"),
    
    INVALID_VALUE("INVALID_VALUE"),
    
    INVALID_TEXTURE_OPTION("INVALID_TEXTURE_OPTION"),
    
    TOO_MANY_PROBLEMS("TOO_MANY_PROBLEMS"),
    
    MISSING_FILE_NAME("MISSING_FILE_NAME"),
    
    FILE_NOT_FOUND("FILE_NOT_FOUND"),
    
    UNKNOWN_MATERIAL("UNKNOWN_MATERIAL"),
    
    NO_MATERIAL_DEFINED("NO_MATERIAL_DEFINED"),
    
    INVALID_SMOOTHING_GROUP("INVALID_SMOOTHING_GROUP"),
    
    MISSING_VERTEX_COLORS("MISSING_VERTEX_COLORS"),
    
    FILE_SUBSTITUTION("FILE_SUBSTITUTION"),
    
    LINE_TOO_LONG("LINE_TOO_LONG"),
    
    INVALID_FILE_PATH("INVALID_FILE_PATH");

    private String value;

    CodeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CodeEnum fromValue(String value) {
      for (CodeEnum b : CodeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CodeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CodeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CodeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CodeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CodeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CODE = "code";
  @SerializedName(SERIALIZED_NAME_CODE)
  private CodeEnum code;

  public static final String SERIALIZED_NAME_END_INDEX = "endIndex";
  @SerializedName(SERIALIZED_NAME_END_INDEX)
  private Integer endIndex;

  public static final String SERIALIZED_NAME_FILE_PATH = "filePath";
  @SerializedName(SERIALIZED_NAME_FILE_PATH)
  private String filePath;

  public static final String SERIALIZED_NAME_LINE = "line";
  @SerializedName(SERIALIZED_NAME_LINE)
  private String line;

  public static final String SERIALIZED_NAME_LINE_NUMBER = "lineNumber";
  @SerializedName(SERIALIZED_NAME_LINE_NUMBER)
  private Integer lineNumber;

  public static final String SERIALIZED_NAME_START_INDEX = "startIndex";
  @SerializedName(SERIALIZED_NAME_START_INDEX)
  private Integer startIndex;

  public ObjParseError() {
  }

  public ObjParseError code(CodeEnum code) {
    this.code = code;
    return this;
  }

  /**
   * The type of problem found (required).
   * @return code
   */
  @javax.annotation.Nullable
  public CodeEnum getCode() {
    return code;
  }

  public void setCode(CodeEnum code) {
    this.code = code;
  }


  public ObjParseError endIndex(Integer endIndex) {
    this.endIndex = endIndex;
    return this;
  }

  /**
   * The ending character index at which the problem was found.
   * @return endIndex
   */
  @javax.annotation.Nullable
  public Integer getEndIndex() {
    return endIndex;
  }

  public void setEndIndex(Integer endIndex) {
    this.endIndex = endIndex;
  }


  public ObjParseError filePath(String filePath) {
    this.filePath = filePath;
    return this;
  }

  /**
   * The file path in which the problem was found.
   * @return filePath
   */
  @javax.annotation.Nullable
  public String getFilePath() {
    return filePath;
  }

  public void setFilePath(String filePath) {
    this.filePath = filePath;
  }


  public ObjParseError line(String line) {
    this.line = line;
    return this;
  }

  /**
   * The text of the line. Note that this may be truncated if the line was very long. This may not include the error if it occurs after line truncation.
   * @return line
   */
  @javax.annotation.Nullable
  public String getLine() {
    return line;
  }

  public void setLine(String line) {
    this.line = line;
  }


  public ObjParseError lineNumber(Integer lineNumber) {
    this.lineNumber = lineNumber;
    return this;
  }

  /**
   * Line number at which the problem was found.
   * @return lineNumber
   */
  @javax.annotation.Nullable
  public Integer getLineNumber() {
    return lineNumber;
  }

  public void setLineNumber(Integer lineNumber) {
    this.lineNumber = lineNumber;
  }


  public ObjParseError startIndex(Integer startIndex) {
    this.startIndex = startIndex;
    return this;
  }

  /**
   * The starting character index at which the problem was found.
   * @return startIndex
   */
  @javax.annotation.Nullable
  public Integer getStartIndex() {
    return startIndex;
  }

  public void setStartIndex(Integer startIndex) {
    this.startIndex = startIndex;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ObjParseError objParseError = (ObjParseError) o;
    return Objects.equals(this.code, objParseError.code) &&
        Objects.equals(this.endIndex, objParseError.endIndex) &&
        Objects.equals(this.filePath, objParseError.filePath) &&
        Objects.equals(this.line, objParseError.line) &&
        Objects.equals(this.lineNumber, objParseError.lineNumber) &&
        Objects.equals(this.startIndex, objParseError.startIndex);
  }

  @Override
  public int hashCode() {
    return Objects.hash(code, endIndex, filePath, line, lineNumber, startIndex);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ObjParseError {\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    endIndex: ").append(toIndentedString(endIndex)).append("\n");
    sb.append("    filePath: ").append(toIndentedString(filePath)).append("\n");
    sb.append("    line: ").append(toIndentedString(line)).append("\n");
    sb.append("    lineNumber: ").append(toIndentedString(lineNumber)).append("\n");
    sb.append("    startIndex: ").append(toIndentedString(startIndex)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("code");
    openapiFields.add("endIndex");
    openapiFields.add("filePath");
    openapiFields.add("line");
    openapiFields.add("lineNumber");
    openapiFields.add("startIndex");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ObjParseError
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ObjParseError.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ObjParseError is not found in the empty JSON string", ObjParseError.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ObjParseError.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ObjParseError` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("code") != null && !jsonObj.get("code").isJsonNull()) && !jsonObj.get("code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("code").toString()));
      }
      // validate the optional field `code`
      if (jsonObj.get("code") != null && !jsonObj.get("code").isJsonNull()) {
        CodeEnum.validateJsonElement(jsonObj.get("code"));
      }
      if ((jsonObj.get("filePath") != null && !jsonObj.get("filePath").isJsonNull()) && !jsonObj.get("filePath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `filePath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("filePath").toString()));
      }
      if ((jsonObj.get("line") != null && !jsonObj.get("line").isJsonNull()) && !jsonObj.get("line").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `line` to be a primitive type in the JSON string but got `%s`", jsonObj.get("line").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ObjParseError.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ObjParseError' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ObjParseError> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ObjParseError.class));

       return (TypeAdapter<T>) new TypeAdapter<ObjParseError>() {
           @Override
           public void write(JsonWriter out, ObjParseError value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ObjParseError read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ObjParseError given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ObjParseError
   * @throws IOException if the JSON string is invalid with respect to ObjParseError
   */
  public static ObjParseError fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ObjParseError.class);
  }

  /**
   * Convert an instance of ObjParseError to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

