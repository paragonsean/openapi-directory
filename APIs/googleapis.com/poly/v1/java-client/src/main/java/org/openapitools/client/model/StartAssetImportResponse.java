/*
 * Poly API
 * The Poly API provides read access to assets hosted on poly.google.com to all, and upload access to poly.google.com for whitelisted accounts. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AssetImportMessage;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A response message from a request to startImport. This is returned in the response field of the Operation.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:29.616284-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class StartAssetImportResponse {
  public static final String SERIALIZED_NAME_ASSET_ID = "assetId";
  @SerializedName(SERIALIZED_NAME_ASSET_ID)
  private String assetId;

  public static final String SERIALIZED_NAME_ASSET_IMPORT_ID = "assetImportId";
  @SerializedName(SERIALIZED_NAME_ASSET_IMPORT_ID)
  private String assetImportId;

  public static final String SERIALIZED_NAME_ASSET_IMPORT_MESSAGES = "assetImportMessages";
  @SerializedName(SERIALIZED_NAME_ASSET_IMPORT_MESSAGES)
  private List<AssetImportMessage> assetImportMessages = new ArrayList<>();

  public static final String SERIALIZED_NAME_PUBLISH_URL = "publishUrl";
  @SerializedName(SERIALIZED_NAME_PUBLISH_URL)
  private String publishUrl;

  public StartAssetImportResponse() {
  }

  public StartAssetImportResponse assetId(String assetId) {
    this.assetId = assetId;
    return this;
  }

  /**
   * The id of newly created asset. If this is empty when the operation is complete it means the import failed. Please refer to the assetImportMessages field to understand what went wrong.
   * @return assetId
   */
  @javax.annotation.Nullable
  public String getAssetId() {
    return assetId;
  }

  public void setAssetId(String assetId) {
    this.assetId = assetId;
  }


  public StartAssetImportResponse assetImportId(String assetImportId) {
    this.assetImportId = assetImportId;
    return this;
  }

  /**
   * The id of the asset import.
   * @return assetImportId
   */
  @javax.annotation.Nullable
  public String getAssetImportId() {
    return assetImportId;
  }

  public void setAssetImportId(String assetImportId) {
    this.assetImportId = assetImportId;
  }


  public StartAssetImportResponse assetImportMessages(List<AssetImportMessage> assetImportMessages) {
    this.assetImportMessages = assetImportMessages;
    return this;
  }

  public StartAssetImportResponse addAssetImportMessagesItem(AssetImportMessage assetImportMessagesItem) {
    if (this.assetImportMessages == null) {
      this.assetImportMessages = new ArrayList<>();
    }
    this.assetImportMessages.add(assetImportMessagesItem);
    return this;
  }

  /**
   * The message from the asset import. This will contain any warnings (or - in the case of failure - errors) that occurred during import.
   * @return assetImportMessages
   */
  @javax.annotation.Nullable
  public List<AssetImportMessage> getAssetImportMessages() {
    return assetImportMessages;
  }

  public void setAssetImportMessages(List<AssetImportMessage> assetImportMessages) {
    this.assetImportMessages = assetImportMessages;
  }


  public StartAssetImportResponse publishUrl(String publishUrl) {
    this.publishUrl = publishUrl;
    return this;
  }

  /**
   * The publish URL for the asset.
   * @return publishUrl
   */
  @javax.annotation.Nullable
  public String getPublishUrl() {
    return publishUrl;
  }

  public void setPublishUrl(String publishUrl) {
    this.publishUrl = publishUrl;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StartAssetImportResponse startAssetImportResponse = (StartAssetImportResponse) o;
    return Objects.equals(this.assetId, startAssetImportResponse.assetId) &&
        Objects.equals(this.assetImportId, startAssetImportResponse.assetImportId) &&
        Objects.equals(this.assetImportMessages, startAssetImportResponse.assetImportMessages) &&
        Objects.equals(this.publishUrl, startAssetImportResponse.publishUrl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(assetId, assetImportId, assetImportMessages, publishUrl);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StartAssetImportResponse {\n");
    sb.append("    assetId: ").append(toIndentedString(assetId)).append("\n");
    sb.append("    assetImportId: ").append(toIndentedString(assetImportId)).append("\n");
    sb.append("    assetImportMessages: ").append(toIndentedString(assetImportMessages)).append("\n");
    sb.append("    publishUrl: ").append(toIndentedString(publishUrl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("assetId");
    openapiFields.add("assetImportId");
    openapiFields.add("assetImportMessages");
    openapiFields.add("publishUrl");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StartAssetImportResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StartAssetImportResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StartAssetImportResponse is not found in the empty JSON string", StartAssetImportResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StartAssetImportResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StartAssetImportResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("assetId") != null && !jsonObj.get("assetId").isJsonNull()) && !jsonObj.get("assetId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `assetId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("assetId").toString()));
      }
      if ((jsonObj.get("assetImportId") != null && !jsonObj.get("assetImportId").isJsonNull()) && !jsonObj.get("assetImportId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `assetImportId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("assetImportId").toString()));
      }
      if (jsonObj.get("assetImportMessages") != null && !jsonObj.get("assetImportMessages").isJsonNull()) {
        JsonArray jsonArrayassetImportMessages = jsonObj.getAsJsonArray("assetImportMessages");
        if (jsonArrayassetImportMessages != null) {
          // ensure the json data is an array
          if (!jsonObj.get("assetImportMessages").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `assetImportMessages` to be an array in the JSON string but got `%s`", jsonObj.get("assetImportMessages").toString()));
          }

          // validate the optional field `assetImportMessages` (array)
          for (int i = 0; i < jsonArrayassetImportMessages.size(); i++) {
            AssetImportMessage.validateJsonElement(jsonArrayassetImportMessages.get(i));
          };
        }
      }
      if ((jsonObj.get("publishUrl") != null && !jsonObj.get("publishUrl").isJsonNull()) && !jsonObj.get("publishUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `publishUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("publishUrl").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StartAssetImportResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StartAssetImportResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StartAssetImportResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StartAssetImportResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<StartAssetImportResponse>() {
           @Override
           public void write(JsonWriter out, StartAssetImportResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StartAssetImportResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StartAssetImportResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StartAssetImportResponse
   * @throws IOException if the JSON string is invalid with respect to StartAssetImportResponse
   */
  public static StartAssetImportResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StartAssetImportResponse.class);
  }

  /**
   * Convert an instance of StartAssetImportResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

