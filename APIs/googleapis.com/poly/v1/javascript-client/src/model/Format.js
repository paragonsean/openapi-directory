/**
 * Poly API
 * The Poly API provides read access to assets hosted on poly.google.com to all, and upload access to poly.google.com for whitelisted accounts. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FormatComplexity from './FormatComplexity';

/**
 * The Format model module.
 * @module model/Format
 * @version v1
 */
class Format {
    /**
     * Constructs a new <code>Format</code>.
     * The same asset can be represented in different formats, for example, a [WaveFront .obj](//en.wikipedia.org/wiki/Wavefront_.obj_file) file with its corresponding .mtl file or a [Khronos glTF](//www.khronos.org/gltf) file with its corresponding .glb binary data. A format refers to a specific representation of an asset and contains all information needed to retrieve and describe this representation.
     * @alias module:model/Format
     */
    constructor() { 
        
        Format.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Format</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Format} obj Optional instance to populate.
     * @return {module:model/Format} The populated <code>Format</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Format();

            if (data.hasOwnProperty('formatComplexity')) {
                obj['formatComplexity'] = FormatComplexity.constructFromObject(data['formatComplexity']);
            }
            if (data.hasOwnProperty('formatType')) {
                obj['formatType'] = ApiClient.convertToType(data['formatType'], 'String');
            }
            if (data.hasOwnProperty('resources')) {
                obj['resources'] = ApiClient.convertToType(data['resources'], [File]);
            }
            if (data.hasOwnProperty('root')) {
                obj['root'] = File.constructFromObject(data['root']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Format</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Format</code>.
     */
    static validateJSON(data) {
        // validate the optional field `formatComplexity`
        if (data['formatComplexity']) { // data not null
          FormatComplexity.validateJSON(data['formatComplexity']);
        }
        // ensure the json data is a string
        if (data['formatType'] && !(typeof data['formatType'] === 'string' || data['formatType'] instanceof String)) {
            throw new Error("Expected the field `formatType` to be a primitive type in the JSON string but got " + data['formatType']);
        }
        if (data['resources']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['resources'])) {
                throw new Error("Expected the field `resources` to be an array in the JSON data but got " + data['resources']);
            }
            // validate the optional field `resources` (array)
            for (const item of data['resources']) {
                File.validateJSON(item);
            };
        }
        // validate the optional field `root`
        if (data['root']) { // data not null
          File.validateJSON(data['root']);
        }

        return true;
    }


}



/**
 * @member {module:model/FormatComplexity} formatComplexity
 */
Format.prototype['formatComplexity'] = undefined;

/**
 * A short string that identifies the format type of this representation. Possible values are: `FBX`, `GLTF`, `GLTF2`, `OBJ`, and `TILT`.
 * @member {String} formatType
 */
Format.prototype['formatType'] = undefined;

/**
 * A list of dependencies of the root element. May include, but is not limited to, materials, textures, and shader programs.
 * @member {Array.<File>} resources
 */
Format.prototype['resources'] = undefined;

/**
 * @member {File} root
 */
Format.prototype['root'] = undefined;






export default Format;

