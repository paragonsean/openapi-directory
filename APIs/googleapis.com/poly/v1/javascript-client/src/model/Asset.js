/**
 * Poly API
 * The Poly API provides read access to assets hosted on poly.google.com to all, and upload access to poly.google.com for whitelisted accounts. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Format from './Format';
import PresentationParams from './PresentationParams';
import RemixInfo from './RemixInfo';

/**
 * The Asset model module.
 * @module model/Asset
 * @version v1
 */
class Asset {
    /**
     * Constructs a new <code>Asset</code>.
     * Represents and describes an asset in the Poly library. An asset is a 3D model or scene created using [Tilt Brush](//www.tiltbrush.com), [Blocks](//vr.google.com/blocks/), or any 3D program that produces a file that can be upload to Poly.
     * @alias module:model/Asset
     */
    constructor() { 
        
        Asset.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Asset</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Asset} obj Optional instance to populate.
     * @return {module:model/Asset} The populated <code>Asset</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Asset();

            if (data.hasOwnProperty('authorName')) {
                obj['authorName'] = ApiClient.convertToType(data['authorName'], 'String');
            }
            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('formats')) {
                obj['formats'] = ApiClient.convertToType(data['formats'], [Format]);
            }
            if (data.hasOwnProperty('isCurated')) {
                obj['isCurated'] = ApiClient.convertToType(data['isCurated'], 'Boolean');
            }
            if (data.hasOwnProperty('license')) {
                obj['license'] = ApiClient.convertToType(data['license'], 'String');
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ApiClient.convertToType(data['metadata'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('presentationParams')) {
                obj['presentationParams'] = PresentationParams.constructFromObject(data['presentationParams']);
            }
            if (data.hasOwnProperty('remixInfo')) {
                obj['remixInfo'] = RemixInfo.constructFromObject(data['remixInfo']);
            }
            if (data.hasOwnProperty('thumbnail')) {
                obj['thumbnail'] = File.constructFromObject(data['thumbnail']);
            }
            if (data.hasOwnProperty('updateTime')) {
                obj['updateTime'] = ApiClient.convertToType(data['updateTime'], 'String');
            }
            if (data.hasOwnProperty('visibility')) {
                obj['visibility'] = ApiClient.convertToType(data['visibility'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Asset</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Asset</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['authorName'] && !(typeof data['authorName'] === 'string' || data['authorName'] instanceof String)) {
            throw new Error("Expected the field `authorName` to be a primitive type in the JSON string but got " + data['authorName']);
        }
        // ensure the json data is a string
        if (data['createTime'] && !(typeof data['createTime'] === 'string' || data['createTime'] instanceof String)) {
            throw new Error("Expected the field `createTime` to be a primitive type in the JSON string but got " + data['createTime']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        if (data['formats']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['formats'])) {
                throw new Error("Expected the field `formats` to be an array in the JSON data but got " + data['formats']);
            }
            // validate the optional field `formats` (array)
            for (const item of data['formats']) {
                Format.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['license'] && !(typeof data['license'] === 'string' || data['license'] instanceof String)) {
            throw new Error("Expected the field `license` to be a primitive type in the JSON string but got " + data['license']);
        }
        // ensure the json data is a string
        if (data['metadata'] && !(typeof data['metadata'] === 'string' || data['metadata'] instanceof String)) {
            throw new Error("Expected the field `metadata` to be a primitive type in the JSON string but got " + data['metadata']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `presentationParams`
        if (data['presentationParams']) { // data not null
          PresentationParams.validateJSON(data['presentationParams']);
        }
        // validate the optional field `remixInfo`
        if (data['remixInfo']) { // data not null
          RemixInfo.validateJSON(data['remixInfo']);
        }
        // validate the optional field `thumbnail`
        if (data['thumbnail']) { // data not null
          File.validateJSON(data['thumbnail']);
        }
        // ensure the json data is a string
        if (data['updateTime'] && !(typeof data['updateTime'] === 'string' || data['updateTime'] instanceof String)) {
            throw new Error("Expected the field `updateTime` to be a primitive type in the JSON string but got " + data['updateTime']);
        }
        // ensure the json data is a string
        if (data['visibility'] && !(typeof data['visibility'] === 'string' || data['visibility'] instanceof String)) {
            throw new Error("Expected the field `visibility` to be a primitive type in the JSON string but got " + data['visibility']);
        }

        return true;
    }


}



/**
 * The author's publicly visible name. Use this name when giving credit to the author. For more information, see [Licensing](/poly/discover/licensing).
 * @member {String} authorName
 */
Asset.prototype['authorName'] = undefined;

/**
 * For published assets, the time when the asset was published. For unpublished assets, the time when the asset was created.
 * @member {String} createTime
 */
Asset.prototype['createTime'] = undefined;

/**
 * The human-readable description, set by the asset's author.
 * @member {String} description
 */
Asset.prototype['description'] = undefined;

/**
 * The human-readable name, set by the asset's author.
 * @member {String} displayName
 */
Asset.prototype['displayName'] = undefined;

/**
 * A list of Formats where each format describes one representation of the asset.
 * @member {Array.<module:model/Format>} formats
 */
Asset.prototype['formats'] = undefined;

/**
 * Whether this asset has been curated by the Poly team.
 * @member {Boolean} isCurated
 */
Asset.prototype['isCurated'] = undefined;

/**
 * The license under which the author has made the asset available for use, if any.
 * @member {module:model/Asset.LicenseEnum} license
 */
Asset.prototype['license'] = undefined;

/**
 * Application-defined opaque metadata for this asset. This field is only returned when querying for the signed-in user's own assets, not for public assets. This string is limited to 1K chars. It is up to the creator of the asset to define the format for this string (for example, JSON).
 * @member {String} metadata
 */
Asset.prototype['metadata'] = undefined;

/**
 * The unique identifier for the asset in the form: `assets/{ASSET_ID}`.
 * @member {String} name
 */
Asset.prototype['name'] = undefined;

/**
 * @member {module:model/PresentationParams} presentationParams
 */
Asset.prototype['presentationParams'] = undefined;

/**
 * @member {module:model/RemixInfo} remixInfo
 */
Asset.prototype['remixInfo'] = undefined;

/**
 * @member {File} thumbnail
 */
Asset.prototype['thumbnail'] = undefined;

/**
 * The time when the asset was last modified. For published assets, whose contents are immutable, the update time changes only when metadata properties, such as visibility, are updated.
 * @member {String} updateTime
 */
Asset.prototype['updateTime'] = undefined;

/**
 * The visibility of the asset and who can access it.
 * @member {module:model/Asset.VisibilityEnum} visibility
 */
Asset.prototype['visibility'] = undefined;





/**
 * Allowed values for the <code>license</code> property.
 * @enum {String}
 * @readonly
 */
Asset['LicenseEnum'] = {

    /**
     * value: "UNKNOWN"
     * @const
     */
    "UNKNOWN": "UNKNOWN",

    /**
     * value: "CREATIVE_COMMONS_BY"
     * @const
     */
    "CREATIVE_COMMONS_BY": "CREATIVE_COMMONS_BY",

    /**
     * value: "ALL_RIGHTS_RESERVED"
     * @const
     */
    "ALL_RIGHTS_RESERVED": "ALL_RIGHTS_RESERVED"
};


/**
 * Allowed values for the <code>visibility</code> property.
 * @enum {String}
 * @readonly
 */
Asset['VisibilityEnum'] = {

    /**
     * value: "VISIBILITY_UNSPECIFIED"
     * @const
     */
    "VISIBILITY_UNSPECIFIED": "VISIBILITY_UNSPECIFIED",

    /**
     * value: "PRIVATE"
     * @const
     */
    "PRIVATE": "PRIVATE",

    /**
     * value: "UNLISTED"
     * @const
     */
    "UNLISTED": "UNLISTED",

    /**
     * value: "PUBLIC"
     * @const
     */
    "PUBLIC": "PUBLIC"
};



export default Asset;

