/**
 * Poly API
 * The Poly API provides read access to assets hosted on poly.google.com to all, and upload access to poly.google.com for whitelisted accounts. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AssetImportMessage from './AssetImportMessage';

/**
 * The StartAssetImportResponse model module.
 * @module model/StartAssetImportResponse
 * @version v1
 */
class StartAssetImportResponse {
    /**
     * Constructs a new <code>StartAssetImportResponse</code>.
     * A response message from a request to startImport. This is returned in the response field of the Operation.
     * @alias module:model/StartAssetImportResponse
     */
    constructor() { 
        
        StartAssetImportResponse.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>StartAssetImportResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/StartAssetImportResponse} obj Optional instance to populate.
     * @return {module:model/StartAssetImportResponse} The populated <code>StartAssetImportResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new StartAssetImportResponse();

            if (data.hasOwnProperty('assetId')) {
                obj['assetId'] = ApiClient.convertToType(data['assetId'], 'String');
            }
            if (data.hasOwnProperty('assetImportId')) {
                obj['assetImportId'] = ApiClient.convertToType(data['assetImportId'], 'String');
            }
            if (data.hasOwnProperty('assetImportMessages')) {
                obj['assetImportMessages'] = ApiClient.convertToType(data['assetImportMessages'], [AssetImportMessage]);
            }
            if (data.hasOwnProperty('publishUrl')) {
                obj['publishUrl'] = ApiClient.convertToType(data['publishUrl'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>StartAssetImportResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>StartAssetImportResponse</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['assetId'] && !(typeof data['assetId'] === 'string' || data['assetId'] instanceof String)) {
            throw new Error("Expected the field `assetId` to be a primitive type in the JSON string but got " + data['assetId']);
        }
        // ensure the json data is a string
        if (data['assetImportId'] && !(typeof data['assetImportId'] === 'string' || data['assetImportId'] instanceof String)) {
            throw new Error("Expected the field `assetImportId` to be a primitive type in the JSON string but got " + data['assetImportId']);
        }
        if (data['assetImportMessages']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['assetImportMessages'])) {
                throw new Error("Expected the field `assetImportMessages` to be an array in the JSON data but got " + data['assetImportMessages']);
            }
            // validate the optional field `assetImportMessages` (array)
            for (const item of data['assetImportMessages']) {
                AssetImportMessage.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['publishUrl'] && !(typeof data['publishUrl'] === 'string' || data['publishUrl'] instanceof String)) {
            throw new Error("Expected the field `publishUrl` to be a primitive type in the JSON string but got " + data['publishUrl']);
        }

        return true;
    }


}



/**
 * The id of newly created asset. If this is empty when the operation is complete it means the import failed. Please refer to the assetImportMessages field to understand what went wrong.
 * @member {String} assetId
 */
StartAssetImportResponse.prototype['assetId'] = undefined;

/**
 * The id of the asset import.
 * @member {String} assetImportId
 */
StartAssetImportResponse.prototype['assetImportId'] = undefined;

/**
 * The message from the asset import. This will contain any warnings (or - in the case of failure - errors) that occurred during import.
 * @member {Array.<module:model/AssetImportMessage>} assetImportMessages
 */
StartAssetImportResponse.prototype['assetImportMessages'] = undefined;

/**
 * The publish URL for the asset.
 * @member {String} publishUrl
 */
StartAssetImportResponse.prototype['publishUrl'] = undefined;






export default StartAssetImportResponse;

