/**
 * Poly API
 * The Poly API provides read access to assets hosted on poly.google.com to all, and upload access to poly.google.com for whitelisted accounts. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Quaternion from './Quaternion';

/**
 * The PresentationParams model module.
 * @module model/PresentationParams
 * @version v1
 */
class PresentationParams {
    /**
     * Constructs a new <code>PresentationParams</code>.
     * Hints for displaying the asset, based on information available when the asset was uploaded.
     * @alias module:model/PresentationParams
     */
    constructor() { 
        
        PresentationParams.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PresentationParams</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PresentationParams} obj Optional instance to populate.
     * @return {module:model/PresentationParams} The populated <code>PresentationParams</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PresentationParams();

            if (data.hasOwnProperty('backgroundColor')) {
                obj['backgroundColor'] = ApiClient.convertToType(data['backgroundColor'], 'String');
            }
            if (data.hasOwnProperty('colorSpace')) {
                obj['colorSpace'] = ApiClient.convertToType(data['colorSpace'], 'String');
            }
            if (data.hasOwnProperty('orientingRotation')) {
                obj['orientingRotation'] = Quaternion.constructFromObject(data['orientingRotation']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PresentationParams</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PresentationParams</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['backgroundColor'] && !(typeof data['backgroundColor'] === 'string' || data['backgroundColor'] instanceof String)) {
            throw new Error("Expected the field `backgroundColor` to be a primitive type in the JSON string but got " + data['backgroundColor']);
        }
        // ensure the json data is a string
        if (data['colorSpace'] && !(typeof data['colorSpace'] === 'string' || data['colorSpace'] instanceof String)) {
            throw new Error("Expected the field `colorSpace` to be a primitive type in the JSON string but got " + data['colorSpace']);
        }
        // validate the optional field `orientingRotation`
        if (data['orientingRotation']) { // data not null
          Quaternion.validateJSON(data['orientingRotation']);
        }

        return true;
    }


}



/**
 * A background color which could be used for displaying the 3D asset in a 'thumbnail' or 'palette' style view. Authors have the option to set this background color when publishing or editing their asset. This is represented as a six-digit hexademical triplet specifying the RGB components of the background color, e.g. #FF0000 for Red.
 * @member {String} backgroundColor
 */
PresentationParams.prototype['backgroundColor'] = undefined;

/**
 * The materials' diffuse/albedo color. This does not apply to vertex colors or texture maps.
 * @member {module:model/PresentationParams.ColorSpaceEnum} colorSpace
 */
PresentationParams.prototype['colorSpace'] = undefined;

/**
 * @member {module:model/Quaternion} orientingRotation
 */
PresentationParams.prototype['orientingRotation'] = undefined;





/**
 * Allowed values for the <code>colorSpace</code> property.
 * @enum {String}
 * @readonly
 */
PresentationParams['ColorSpaceEnum'] = {

    /**
     * value: "UNKNOWN"
     * @const
     */
    "UNKNOWN": "UNKNOWN",

    /**
     * value: "LINEAR"
     * @const
     */
    "LINEAR": "LINEAR",

    /**
     * value: "GAMMA"
     * @const
     */
    "GAMMA": "GAMMA"
};



export default PresentationParams;

