/**
 * Poly API
 * The Poly API provides read access to assets hosted on poly.google.com to all, and upload access to poly.google.com for whitelisted accounts. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The RemixInfo model module.
 * @module model/RemixInfo
 * @version v1
 */
class RemixInfo {
    /**
     * Constructs a new <code>RemixInfo</code>.
     * Info about the sources of this asset (i.e. assets that were remixed to create this asset).
     * @alias module:model/RemixInfo
     */
    constructor() { 
        
        RemixInfo.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>RemixInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RemixInfo} obj Optional instance to populate.
     * @return {module:model/RemixInfo} The populated <code>RemixInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RemixInfo();

            if (data.hasOwnProperty('sourceAsset')) {
                obj['sourceAsset'] = ApiClient.convertToType(data['sourceAsset'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RemixInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RemixInfo</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['sourceAsset'])) {
            throw new Error("Expected the field `sourceAsset` to be an array in the JSON data but got " + data['sourceAsset']);
        }

        return true;
    }


}



/**
 * Resource ids for the sources of this remix, of the form: `assets/{ASSET_ID}`
 * @member {Array.<String>} sourceAsset
 */
RemixInfo.prototype['sourceAsset'] = undefined;






export default RemixInfo;

