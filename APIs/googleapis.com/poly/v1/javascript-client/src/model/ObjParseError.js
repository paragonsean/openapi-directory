/**
 * Poly API
 * The Poly API provides read access to assets hosted on poly.google.com to all, and upload access to poly.google.com for whitelisted accounts. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ObjParseError model module.
 * @module model/ObjParseError
 * @version v1
 */
class ObjParseError {
    /**
     * Constructs a new <code>ObjParseError</code>.
     * Details of an error resulting from parsing an OBJ file
     * @alias module:model/ObjParseError
     */
    constructor() { 
        
        ObjParseError.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ObjParseError</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ObjParseError} obj Optional instance to populate.
     * @return {module:model/ObjParseError} The populated <code>ObjParseError</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ObjParseError();

            if (data.hasOwnProperty('code')) {
                obj['code'] = ApiClient.convertToType(data['code'], 'String');
            }
            if (data.hasOwnProperty('endIndex')) {
                obj['endIndex'] = ApiClient.convertToType(data['endIndex'], 'Number');
            }
            if (data.hasOwnProperty('filePath')) {
                obj['filePath'] = ApiClient.convertToType(data['filePath'], 'String');
            }
            if (data.hasOwnProperty('line')) {
                obj['line'] = ApiClient.convertToType(data['line'], 'String');
            }
            if (data.hasOwnProperty('lineNumber')) {
                obj['lineNumber'] = ApiClient.convertToType(data['lineNumber'], 'Number');
            }
            if (data.hasOwnProperty('startIndex')) {
                obj['startIndex'] = ApiClient.convertToType(data['startIndex'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ObjParseError</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ObjParseError</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['code'] && !(typeof data['code'] === 'string' || data['code'] instanceof String)) {
            throw new Error("Expected the field `code` to be a primitive type in the JSON string but got " + data['code']);
        }
        // ensure the json data is a string
        if (data['filePath'] && !(typeof data['filePath'] === 'string' || data['filePath'] instanceof String)) {
            throw new Error("Expected the field `filePath` to be a primitive type in the JSON string but got " + data['filePath']);
        }
        // ensure the json data is a string
        if (data['line'] && !(typeof data['line'] === 'string' || data['line'] instanceof String)) {
            throw new Error("Expected the field `line` to be a primitive type in the JSON string but got " + data['line']);
        }

        return true;
    }


}



/**
 * The type of problem found (required).
 * @member {module:model/ObjParseError.CodeEnum} code
 */
ObjParseError.prototype['code'] = undefined;

/**
 * The ending character index at which the problem was found.
 * @member {Number} endIndex
 */
ObjParseError.prototype['endIndex'] = undefined;

/**
 * The file path in which the problem was found.
 * @member {String} filePath
 */
ObjParseError.prototype['filePath'] = undefined;

/**
 * The text of the line. Note that this may be truncated if the line was very long. This may not include the error if it occurs after line truncation.
 * @member {String} line
 */
ObjParseError.prototype['line'] = undefined;

/**
 * Line number at which the problem was found.
 * @member {Number} lineNumber
 */
ObjParseError.prototype['lineNumber'] = undefined;

/**
 * The starting character index at which the problem was found.
 * @member {Number} startIndex
 */
ObjParseError.prototype['startIndex'] = undefined;





/**
 * Allowed values for the <code>code</code> property.
 * @enum {String}
 * @readonly
 */
ObjParseError['CodeEnum'] = {

    /**
     * value: "CODE_UNSPECIFIED"
     * @const
     */
    "CODE_UNSPECIFIED": "CODE_UNSPECIFIED",

    /**
     * value: "INCONSISTENT_VERTEX_REFS"
     * @const
     */
    "INCONSISTENT_VERTEX_REFS": "INCONSISTENT_VERTEX_REFS",

    /**
     * value: "INVALID_COMMAND"
     * @const
     */
    "INVALID_COMMAND": "INVALID_COMMAND",

    /**
     * value: "INVALID_NUMBER"
     * @const
     */
    "INVALID_NUMBER": "INVALID_NUMBER",

    /**
     * value: "INVALID_VERTEX_REF"
     * @const
     */
    "INVALID_VERTEX_REF": "INVALID_VERTEX_REF",

    /**
     * value: "MISSING_GEOMETRIC_VERTEX"
     * @const
     */
    "MISSING_GEOMETRIC_VERTEX": "MISSING_GEOMETRIC_VERTEX",

    /**
     * value: "MISSING_TOKEN"
     * @const
     */
    "MISSING_TOKEN": "MISSING_TOKEN",

    /**
     * value: "TOO_FEW_DIMENSIONS"
     * @const
     */
    "TOO_FEW_DIMENSIONS": "TOO_FEW_DIMENSIONS",

    /**
     * value: "TOO_FEW_VERTICES"
     * @const
     */
    "TOO_FEW_VERTICES": "TOO_FEW_VERTICES",

    /**
     * value: "TOO_MANY_DIMENSIONS"
     * @const
     */
    "TOO_MANY_DIMENSIONS": "TOO_MANY_DIMENSIONS",

    /**
     * value: "UNSUPPORTED_COMMAND"
     * @const
     */
    "UNSUPPORTED_COMMAND": "UNSUPPORTED_COMMAND",

    /**
     * value: "UNUSED_TOKENS"
     * @const
     */
    "UNUSED_TOKENS": "UNUSED_TOKENS",

    /**
     * value: "VERTEX_NOT_FOUND"
     * @const
     */
    "VERTEX_NOT_FOUND": "VERTEX_NOT_FOUND",

    /**
     * value: "NUMBER_OUT_OF_RANGE"
     * @const
     */
    "NUMBER_OUT_OF_RANGE": "NUMBER_OUT_OF_RANGE",

    /**
     * value: "INVALID_VALUE"
     * @const
     */
    "INVALID_VALUE": "INVALID_VALUE",

    /**
     * value: "INVALID_TEXTURE_OPTION"
     * @const
     */
    "INVALID_TEXTURE_OPTION": "INVALID_TEXTURE_OPTION",

    /**
     * value: "TOO_MANY_PROBLEMS"
     * @const
     */
    "TOO_MANY_PROBLEMS": "TOO_MANY_PROBLEMS",

    /**
     * value: "MISSING_FILE_NAME"
     * @const
     */
    "MISSING_FILE_NAME": "MISSING_FILE_NAME",

    /**
     * value: "FILE_NOT_FOUND"
     * @const
     */
    "FILE_NOT_FOUND": "FILE_NOT_FOUND",

    /**
     * value: "UNKNOWN_MATERIAL"
     * @const
     */
    "UNKNOWN_MATERIAL": "UNKNOWN_MATERIAL",

    /**
     * value: "NO_MATERIAL_DEFINED"
     * @const
     */
    "NO_MATERIAL_DEFINED": "NO_MATERIAL_DEFINED",

    /**
     * value: "INVALID_SMOOTHING_GROUP"
     * @const
     */
    "INVALID_SMOOTHING_GROUP": "INVALID_SMOOTHING_GROUP",

    /**
     * value: "MISSING_VERTEX_COLORS"
     * @const
     */
    "MISSING_VERTEX_COLORS": "MISSING_VERTEX_COLORS",

    /**
     * value: "FILE_SUBSTITUTION"
     * @const
     */
    "FILE_SUBSTITUTION": "FILE_SUBSTITUTION",

    /**
     * value: "LINE_TOO_LONG"
     * @const
     */
    "LINE_TOO_LONG": "LINE_TOO_LONG",

    /**
     * value: "INVALID_FILE_PATH"
     * @const
     */
    "INVALID_FILE_PATH": "INVALID_FILE_PATH"
};



export default ObjParseError;

