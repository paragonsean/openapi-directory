/**
 * Poly API
 * The Poly API provides read access to assets hosted on poly.google.com to all, and upload access to poly.google.com for whitelisted accounts. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from './ApiClient';
import Asset from './model/Asset';
import AssetImportMessage from './model/AssetImportMessage';
import File from './model/File';
import Format from './model/Format';
import FormatComplexity from './model/FormatComplexity';
import ImageError from './model/ImageError';
import ListAssetsResponse from './model/ListAssetsResponse';
import ListLikedAssetsResponse from './model/ListLikedAssetsResponse';
import ListUserAssetsResponse from './model/ListUserAssetsResponse';
import ObjParseError from './model/ObjParseError';
import PresentationParams from './model/PresentationParams';
import Quaternion from './model/Quaternion';
import RemixInfo from './model/RemixInfo';
import StartAssetImportResponse from './model/StartAssetImportResponse';
import UserAsset from './model/UserAsset';
import AssetsApi from './api/AssetsApi';
import UsersApi from './api/UsersApi';


/**
* The Poly API provides read access to assets hosted on poly.google.com to all, and upload access to poly.google.com for whitelisted accounts. .<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var PolyApi = require('index'); // See note below*.
* var xxxSvc = new PolyApi.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new PolyApi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new PolyApi.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new PolyApi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version v1
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The Asset model constructor.
     * @property {module:model/Asset}
     */
    Asset,

    /**
     * The AssetImportMessage model constructor.
     * @property {module:model/AssetImportMessage}
     */
    AssetImportMessage,

    /**
     * The File model constructor.
     * @property {module:model/File}
     */
    File,

    /**
     * The Format model constructor.
     * @property {module:model/Format}
     */
    Format,

    /**
     * The FormatComplexity model constructor.
     * @property {module:model/FormatComplexity}
     */
    FormatComplexity,

    /**
     * The ImageError model constructor.
     * @property {module:model/ImageError}
     */
    ImageError,

    /**
     * The ListAssetsResponse model constructor.
     * @property {module:model/ListAssetsResponse}
     */
    ListAssetsResponse,

    /**
     * The ListLikedAssetsResponse model constructor.
     * @property {module:model/ListLikedAssetsResponse}
     */
    ListLikedAssetsResponse,

    /**
     * The ListUserAssetsResponse model constructor.
     * @property {module:model/ListUserAssetsResponse}
     */
    ListUserAssetsResponse,

    /**
     * The ObjParseError model constructor.
     * @property {module:model/ObjParseError}
     */
    ObjParseError,

    /**
     * The PresentationParams model constructor.
     * @property {module:model/PresentationParams}
     */
    PresentationParams,

    /**
     * The Quaternion model constructor.
     * @property {module:model/Quaternion}
     */
    Quaternion,

    /**
     * The RemixInfo model constructor.
     * @property {module:model/RemixInfo}
     */
    RemixInfo,

    /**
     * The StartAssetImportResponse model constructor.
     * @property {module:model/StartAssetImportResponse}
     */
    StartAssetImportResponse,

    /**
     * The UserAsset model constructor.
     * @property {module:model/UserAsset}
     */
    UserAsset,

    /**
    * The AssetsApi service constructor.
    * @property {module:api/AssetsApi}
    */
    AssetsApi,

    /**
    * The UsersApi service constructor.
    * @property {module:api/UsersApi}
    */
    UsersApi
};
