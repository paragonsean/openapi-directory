/**
 * Discovery Engine API
 * Discovery Engine API.
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudDiscoveryengineV1betaSearchRequestFacetSpecFacetKey.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudDiscoveryengineV1betaSearchRequestFacetSpecFacetKey::OAIGoogleCloudDiscoveryengineV1betaSearchRequestFacetSpecFacetKey(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudDiscoveryengineV1betaSearchRequestFacetSpecFacetKey::OAIGoogleCloudDiscoveryengineV1betaSearchRequestFacetSpecFacetKey() {
    this->initializeModel();
}

OAIGoogleCloudDiscoveryengineV1betaSearchRequestFacetSpecFacetKey::~OAIGoogleCloudDiscoveryengineV1betaSearchRequestFacetSpecFacetKey() {}

void OAIGoogleCloudDiscoveryengineV1betaSearchRequestFacetSpecFacetKey::initializeModel() {

    m_case_insensitive_isSet = false;
    m_case_insensitive_isValid = false;

    m_contains_isSet = false;
    m_contains_isValid = false;

    m_intervals_isSet = false;
    m_intervals_isValid = false;

    m_key_isSet = false;
    m_key_isValid = false;

    m_order_by_isSet = false;
    m_order_by_isValid = false;

    m_prefixes_isSet = false;
    m_prefixes_isValid = false;

    m_restricted_values_isSet = false;
    m_restricted_values_isValid = false;
}

void OAIGoogleCloudDiscoveryengineV1betaSearchRequestFacetSpecFacetKey::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudDiscoveryengineV1betaSearchRequestFacetSpecFacetKey::fromJsonObject(QJsonObject json) {

    m_case_insensitive_isValid = ::OpenAPI::fromJsonValue(m_case_insensitive, json[QString("caseInsensitive")]);
    m_case_insensitive_isSet = !json[QString("caseInsensitive")].isNull() && m_case_insensitive_isValid;

    m_contains_isValid = ::OpenAPI::fromJsonValue(m_contains, json[QString("contains")]);
    m_contains_isSet = !json[QString("contains")].isNull() && m_contains_isValid;

    m_intervals_isValid = ::OpenAPI::fromJsonValue(m_intervals, json[QString("intervals")]);
    m_intervals_isSet = !json[QString("intervals")].isNull() && m_intervals_isValid;

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("key")]);
    m_key_isSet = !json[QString("key")].isNull() && m_key_isValid;

    m_order_by_isValid = ::OpenAPI::fromJsonValue(m_order_by, json[QString("orderBy")]);
    m_order_by_isSet = !json[QString("orderBy")].isNull() && m_order_by_isValid;

    m_prefixes_isValid = ::OpenAPI::fromJsonValue(m_prefixes, json[QString("prefixes")]);
    m_prefixes_isSet = !json[QString("prefixes")].isNull() && m_prefixes_isValid;

    m_restricted_values_isValid = ::OpenAPI::fromJsonValue(m_restricted_values, json[QString("restrictedValues")]);
    m_restricted_values_isSet = !json[QString("restrictedValues")].isNull() && m_restricted_values_isValid;
}

QString OAIGoogleCloudDiscoveryengineV1betaSearchRequestFacetSpecFacetKey::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudDiscoveryengineV1betaSearchRequestFacetSpecFacetKey::asJsonObject() const {
    QJsonObject obj;
    if (m_case_insensitive_isSet) {
        obj.insert(QString("caseInsensitive"), ::OpenAPI::toJsonValue(m_case_insensitive));
    }
    if (m_contains.size() > 0) {
        obj.insert(QString("contains"), ::OpenAPI::toJsonValue(m_contains));
    }
    if (m_intervals.size() > 0) {
        obj.insert(QString("intervals"), ::OpenAPI::toJsonValue(m_intervals));
    }
    if (m_key_isSet) {
        obj.insert(QString("key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_order_by_isSet) {
        obj.insert(QString("orderBy"), ::OpenAPI::toJsonValue(m_order_by));
    }
    if (m_prefixes.size() > 0) {
        obj.insert(QString("prefixes"), ::OpenAPI::toJsonValue(m_prefixes));
    }
    if (m_restricted_values.size() > 0) {
        obj.insert(QString("restrictedValues"), ::OpenAPI::toJsonValue(m_restricted_values));
    }
    return obj;
}

bool OAIGoogleCloudDiscoveryengineV1betaSearchRequestFacetSpecFacetKey::isCaseInsensitive() const {
    return m_case_insensitive;
}
void OAIGoogleCloudDiscoveryengineV1betaSearchRequestFacetSpecFacetKey::setCaseInsensitive(const bool &case_insensitive) {
    m_case_insensitive = case_insensitive;
    m_case_insensitive_isSet = true;
}

bool OAIGoogleCloudDiscoveryengineV1betaSearchRequestFacetSpecFacetKey::is_case_insensitive_Set() const{
    return m_case_insensitive_isSet;
}

bool OAIGoogleCloudDiscoveryengineV1betaSearchRequestFacetSpecFacetKey::is_case_insensitive_Valid() const{
    return m_case_insensitive_isValid;
}

QList<QString> OAIGoogleCloudDiscoveryengineV1betaSearchRequestFacetSpecFacetKey::getContains() const {
    return m_contains;
}
void OAIGoogleCloudDiscoveryengineV1betaSearchRequestFacetSpecFacetKey::setContains(const QList<QString> &contains) {
    m_contains = contains;
    m_contains_isSet = true;
}

bool OAIGoogleCloudDiscoveryengineV1betaSearchRequestFacetSpecFacetKey::is_contains_Set() const{
    return m_contains_isSet;
}

bool OAIGoogleCloudDiscoveryengineV1betaSearchRequestFacetSpecFacetKey::is_contains_Valid() const{
    return m_contains_isValid;
}

QList<OAIGoogleCloudDiscoveryengineV1betaInterval> OAIGoogleCloudDiscoveryengineV1betaSearchRequestFacetSpecFacetKey::getIntervals() const {
    return m_intervals;
}
void OAIGoogleCloudDiscoveryengineV1betaSearchRequestFacetSpecFacetKey::setIntervals(const QList<OAIGoogleCloudDiscoveryengineV1betaInterval> &intervals) {
    m_intervals = intervals;
    m_intervals_isSet = true;
}

bool OAIGoogleCloudDiscoveryengineV1betaSearchRequestFacetSpecFacetKey::is_intervals_Set() const{
    return m_intervals_isSet;
}

bool OAIGoogleCloudDiscoveryengineV1betaSearchRequestFacetSpecFacetKey::is_intervals_Valid() const{
    return m_intervals_isValid;
}

QString OAIGoogleCloudDiscoveryengineV1betaSearchRequestFacetSpecFacetKey::getKey() const {
    return m_key;
}
void OAIGoogleCloudDiscoveryengineV1betaSearchRequestFacetSpecFacetKey::setKey(const QString &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAIGoogleCloudDiscoveryengineV1betaSearchRequestFacetSpecFacetKey::is_key_Set() const{
    return m_key_isSet;
}

bool OAIGoogleCloudDiscoveryengineV1betaSearchRequestFacetSpecFacetKey::is_key_Valid() const{
    return m_key_isValid;
}

QString OAIGoogleCloudDiscoveryengineV1betaSearchRequestFacetSpecFacetKey::getOrderBy() const {
    return m_order_by;
}
void OAIGoogleCloudDiscoveryengineV1betaSearchRequestFacetSpecFacetKey::setOrderBy(const QString &order_by) {
    m_order_by = order_by;
    m_order_by_isSet = true;
}

bool OAIGoogleCloudDiscoveryengineV1betaSearchRequestFacetSpecFacetKey::is_order_by_Set() const{
    return m_order_by_isSet;
}

bool OAIGoogleCloudDiscoveryengineV1betaSearchRequestFacetSpecFacetKey::is_order_by_Valid() const{
    return m_order_by_isValid;
}

QList<QString> OAIGoogleCloudDiscoveryengineV1betaSearchRequestFacetSpecFacetKey::getPrefixes() const {
    return m_prefixes;
}
void OAIGoogleCloudDiscoveryengineV1betaSearchRequestFacetSpecFacetKey::setPrefixes(const QList<QString> &prefixes) {
    m_prefixes = prefixes;
    m_prefixes_isSet = true;
}

bool OAIGoogleCloudDiscoveryengineV1betaSearchRequestFacetSpecFacetKey::is_prefixes_Set() const{
    return m_prefixes_isSet;
}

bool OAIGoogleCloudDiscoveryengineV1betaSearchRequestFacetSpecFacetKey::is_prefixes_Valid() const{
    return m_prefixes_isValid;
}

QList<QString> OAIGoogleCloudDiscoveryengineV1betaSearchRequestFacetSpecFacetKey::getRestrictedValues() const {
    return m_restricted_values;
}
void OAIGoogleCloudDiscoveryengineV1betaSearchRequestFacetSpecFacetKey::setRestrictedValues(const QList<QString> &restricted_values) {
    m_restricted_values = restricted_values;
    m_restricted_values_isSet = true;
}

bool OAIGoogleCloudDiscoveryengineV1betaSearchRequestFacetSpecFacetKey::is_restricted_values_Set() const{
    return m_restricted_values_isSet;
}

bool OAIGoogleCloudDiscoveryengineV1betaSearchRequestFacetSpecFacetKey::is_restricted_values_Valid() const{
    return m_restricted_values_isValid;
}

bool OAIGoogleCloudDiscoveryengineV1betaSearchRequestFacetSpecFacetKey::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_case_insensitive_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contains.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_intervals.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_prefixes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_restricted_values.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudDiscoveryengineV1betaSearchRequestFacetSpecFacetKey::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
