/**
 * Discovery Engine API
 * Discovery Engine API.
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudDiscoveryengineLoggingErrorContext.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudDiscoveryengineLoggingErrorContext::OAIGoogleCloudDiscoveryengineLoggingErrorContext(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudDiscoveryengineLoggingErrorContext::OAIGoogleCloudDiscoveryengineLoggingErrorContext() {
    this->initializeModel();
}

OAIGoogleCloudDiscoveryengineLoggingErrorContext::~OAIGoogleCloudDiscoveryengineLoggingErrorContext() {}

void OAIGoogleCloudDiscoveryengineLoggingErrorContext::initializeModel() {

    m_http_request_isSet = false;
    m_http_request_isValid = false;

    m_report_location_isSet = false;
    m_report_location_isValid = false;
}

void OAIGoogleCloudDiscoveryengineLoggingErrorContext::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudDiscoveryengineLoggingErrorContext::fromJsonObject(QJsonObject json) {

    m_http_request_isValid = ::OpenAPI::fromJsonValue(m_http_request, json[QString("httpRequest")]);
    m_http_request_isSet = !json[QString("httpRequest")].isNull() && m_http_request_isValid;

    m_report_location_isValid = ::OpenAPI::fromJsonValue(m_report_location, json[QString("reportLocation")]);
    m_report_location_isSet = !json[QString("reportLocation")].isNull() && m_report_location_isValid;
}

QString OAIGoogleCloudDiscoveryengineLoggingErrorContext::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudDiscoveryengineLoggingErrorContext::asJsonObject() const {
    QJsonObject obj;
    if (m_http_request.isSet()) {
        obj.insert(QString("httpRequest"), ::OpenAPI::toJsonValue(m_http_request));
    }
    if (m_report_location.isSet()) {
        obj.insert(QString("reportLocation"), ::OpenAPI::toJsonValue(m_report_location));
    }
    return obj;
}

OAIGoogleCloudDiscoveryengineLoggingHttpRequestContext OAIGoogleCloudDiscoveryengineLoggingErrorContext::getHttpRequest() const {
    return m_http_request;
}
void OAIGoogleCloudDiscoveryengineLoggingErrorContext::setHttpRequest(const OAIGoogleCloudDiscoveryengineLoggingHttpRequestContext &http_request) {
    m_http_request = http_request;
    m_http_request_isSet = true;
}

bool OAIGoogleCloudDiscoveryengineLoggingErrorContext::is_http_request_Set() const{
    return m_http_request_isSet;
}

bool OAIGoogleCloudDiscoveryengineLoggingErrorContext::is_http_request_Valid() const{
    return m_http_request_isValid;
}

OAIGoogleCloudDiscoveryengineLoggingSourceLocation OAIGoogleCloudDiscoveryengineLoggingErrorContext::getReportLocation() const {
    return m_report_location;
}
void OAIGoogleCloudDiscoveryengineLoggingErrorContext::setReportLocation(const OAIGoogleCloudDiscoveryengineLoggingSourceLocation &report_location) {
    m_report_location = report_location;
    m_report_location_isSet = true;
}

bool OAIGoogleCloudDiscoveryengineLoggingErrorContext::is_report_location_Set() const{
    return m_report_location_isSet;
}

bool OAIGoogleCloudDiscoveryengineLoggingErrorContext::is_report_location_Valid() const{
    return m_report_location_isValid;
}

bool OAIGoogleCloudDiscoveryengineLoggingErrorContext::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_http_request.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_report_location.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudDiscoveryengineLoggingErrorContext::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
