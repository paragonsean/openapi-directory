/**
 * Discovery Engine API
 * Discovery Engine API.
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudDiscoveryengineV1betaSearchRequestEmbeddingSpecEmbeddingVector.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudDiscoveryengineV1betaSearchRequestEmbeddingSpecEmbeddingVector::OAIGoogleCloudDiscoveryengineV1betaSearchRequestEmbeddingSpecEmbeddingVector(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudDiscoveryengineV1betaSearchRequestEmbeddingSpecEmbeddingVector::OAIGoogleCloudDiscoveryengineV1betaSearchRequestEmbeddingSpecEmbeddingVector() {
    this->initializeModel();
}

OAIGoogleCloudDiscoveryengineV1betaSearchRequestEmbeddingSpecEmbeddingVector::~OAIGoogleCloudDiscoveryengineV1betaSearchRequestEmbeddingSpecEmbeddingVector() {}

void OAIGoogleCloudDiscoveryengineV1betaSearchRequestEmbeddingSpecEmbeddingVector::initializeModel() {

    m_field_path_isSet = false;
    m_field_path_isValid = false;

    m_vector_isSet = false;
    m_vector_isValid = false;
}

void OAIGoogleCloudDiscoveryengineV1betaSearchRequestEmbeddingSpecEmbeddingVector::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudDiscoveryengineV1betaSearchRequestEmbeddingSpecEmbeddingVector::fromJsonObject(QJsonObject json) {

    m_field_path_isValid = ::OpenAPI::fromJsonValue(m_field_path, json[QString("fieldPath")]);
    m_field_path_isSet = !json[QString("fieldPath")].isNull() && m_field_path_isValid;

    m_vector_isValid = ::OpenAPI::fromJsonValue(m_vector, json[QString("vector")]);
    m_vector_isSet = !json[QString("vector")].isNull() && m_vector_isValid;
}

QString OAIGoogleCloudDiscoveryengineV1betaSearchRequestEmbeddingSpecEmbeddingVector::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudDiscoveryengineV1betaSearchRequestEmbeddingSpecEmbeddingVector::asJsonObject() const {
    QJsonObject obj;
    if (m_field_path_isSet) {
        obj.insert(QString("fieldPath"), ::OpenAPI::toJsonValue(m_field_path));
    }
    if (m_vector.size() > 0) {
        obj.insert(QString("vector"), ::OpenAPI::toJsonValue(m_vector));
    }
    return obj;
}

QString OAIGoogleCloudDiscoveryengineV1betaSearchRequestEmbeddingSpecEmbeddingVector::getFieldPath() const {
    return m_field_path;
}
void OAIGoogleCloudDiscoveryengineV1betaSearchRequestEmbeddingSpecEmbeddingVector::setFieldPath(const QString &field_path) {
    m_field_path = field_path;
    m_field_path_isSet = true;
}

bool OAIGoogleCloudDiscoveryengineV1betaSearchRequestEmbeddingSpecEmbeddingVector::is_field_path_Set() const{
    return m_field_path_isSet;
}

bool OAIGoogleCloudDiscoveryengineV1betaSearchRequestEmbeddingSpecEmbeddingVector::is_field_path_Valid() const{
    return m_field_path_isValid;
}

QList<float> OAIGoogleCloudDiscoveryengineV1betaSearchRequestEmbeddingSpecEmbeddingVector::getVector() const {
    return m_vector;
}
void OAIGoogleCloudDiscoveryengineV1betaSearchRequestEmbeddingSpecEmbeddingVector::setVector(const QList<float> &vector) {
    m_vector = vector;
    m_vector_isSet = true;
}

bool OAIGoogleCloudDiscoveryengineV1betaSearchRequestEmbeddingSpecEmbeddingVector::is_vector_Set() const{
    return m_vector_isSet;
}

bool OAIGoogleCloudDiscoveryengineV1betaSearchRequestEmbeddingSpecEmbeddingVector::is_vector_Valid() const{
    return m_vector_isValid;
}

bool OAIGoogleCloudDiscoveryengineV1betaSearchRequestEmbeddingSpecEmbeddingVector::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_field_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vector.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudDiscoveryengineV1betaSearchRequestEmbeddingSpecEmbeddingVector::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
