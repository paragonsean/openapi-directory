/**
 * Discovery Engine API
 * Discovery Engine API.
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudDiscoveryengineV1betaInterval.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudDiscoveryengineV1betaInterval::OAIGoogleCloudDiscoveryengineV1betaInterval(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudDiscoveryengineV1betaInterval::OAIGoogleCloudDiscoveryengineV1betaInterval() {
    this->initializeModel();
}

OAIGoogleCloudDiscoveryengineV1betaInterval::~OAIGoogleCloudDiscoveryengineV1betaInterval() {}

void OAIGoogleCloudDiscoveryengineV1betaInterval::initializeModel() {

    m_exclusive_maximum_isSet = false;
    m_exclusive_maximum_isValid = false;

    m_exclusive_minimum_isSet = false;
    m_exclusive_minimum_isValid = false;

    m_maximum_isSet = false;
    m_maximum_isValid = false;

    m_minimum_isSet = false;
    m_minimum_isValid = false;
}

void OAIGoogleCloudDiscoveryengineV1betaInterval::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudDiscoveryengineV1betaInterval::fromJsonObject(QJsonObject json) {

    m_exclusive_maximum_isValid = ::OpenAPI::fromJsonValue(m_exclusive_maximum, json[QString("exclusiveMaximum")]);
    m_exclusive_maximum_isSet = !json[QString("exclusiveMaximum")].isNull() && m_exclusive_maximum_isValid;

    m_exclusive_minimum_isValid = ::OpenAPI::fromJsonValue(m_exclusive_minimum, json[QString("exclusiveMinimum")]);
    m_exclusive_minimum_isSet = !json[QString("exclusiveMinimum")].isNull() && m_exclusive_minimum_isValid;

    m_maximum_isValid = ::OpenAPI::fromJsonValue(m_maximum, json[QString("maximum")]);
    m_maximum_isSet = !json[QString("maximum")].isNull() && m_maximum_isValid;

    m_minimum_isValid = ::OpenAPI::fromJsonValue(m_minimum, json[QString("minimum")]);
    m_minimum_isSet = !json[QString("minimum")].isNull() && m_minimum_isValid;
}

QString OAIGoogleCloudDiscoveryengineV1betaInterval::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudDiscoveryengineV1betaInterval::asJsonObject() const {
    QJsonObject obj;
    if (m_exclusive_maximum_isSet) {
        obj.insert(QString("exclusiveMaximum"), ::OpenAPI::toJsonValue(m_exclusive_maximum));
    }
    if (m_exclusive_minimum_isSet) {
        obj.insert(QString("exclusiveMinimum"), ::OpenAPI::toJsonValue(m_exclusive_minimum));
    }
    if (m_maximum_isSet) {
        obj.insert(QString("maximum"), ::OpenAPI::toJsonValue(m_maximum));
    }
    if (m_minimum_isSet) {
        obj.insert(QString("minimum"), ::OpenAPI::toJsonValue(m_minimum));
    }
    return obj;
}

double OAIGoogleCloudDiscoveryengineV1betaInterval::getExclusiveMaximum() const {
    return m_exclusive_maximum;
}
void OAIGoogleCloudDiscoveryengineV1betaInterval::setExclusiveMaximum(const double &exclusive_maximum) {
    m_exclusive_maximum = exclusive_maximum;
    m_exclusive_maximum_isSet = true;
}

bool OAIGoogleCloudDiscoveryengineV1betaInterval::is_exclusive_maximum_Set() const{
    return m_exclusive_maximum_isSet;
}

bool OAIGoogleCloudDiscoveryengineV1betaInterval::is_exclusive_maximum_Valid() const{
    return m_exclusive_maximum_isValid;
}

double OAIGoogleCloudDiscoveryengineV1betaInterval::getExclusiveMinimum() const {
    return m_exclusive_minimum;
}
void OAIGoogleCloudDiscoveryengineV1betaInterval::setExclusiveMinimum(const double &exclusive_minimum) {
    m_exclusive_minimum = exclusive_minimum;
    m_exclusive_minimum_isSet = true;
}

bool OAIGoogleCloudDiscoveryengineV1betaInterval::is_exclusive_minimum_Set() const{
    return m_exclusive_minimum_isSet;
}

bool OAIGoogleCloudDiscoveryengineV1betaInterval::is_exclusive_minimum_Valid() const{
    return m_exclusive_minimum_isValid;
}

double OAIGoogleCloudDiscoveryengineV1betaInterval::getMaximum() const {
    return m_maximum;
}
void OAIGoogleCloudDiscoveryengineV1betaInterval::setMaximum(const double &maximum) {
    m_maximum = maximum;
    m_maximum_isSet = true;
}

bool OAIGoogleCloudDiscoveryengineV1betaInterval::is_maximum_Set() const{
    return m_maximum_isSet;
}

bool OAIGoogleCloudDiscoveryengineV1betaInterval::is_maximum_Valid() const{
    return m_maximum_isValid;
}

double OAIGoogleCloudDiscoveryengineV1betaInterval::getMinimum() const {
    return m_minimum;
}
void OAIGoogleCloudDiscoveryengineV1betaInterval::setMinimum(const double &minimum) {
    m_minimum = minimum;
    m_minimum_isSet = true;
}

bool OAIGoogleCloudDiscoveryengineV1betaInterval::is_minimum_Set() const{
    return m_minimum_isSet;
}

bool OAIGoogleCloudDiscoveryengineV1betaInterval::is_minimum_Valid() const{
    return m_minimum_isValid;
}

bool OAIGoogleCloudDiscoveryengineV1betaInterval::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_exclusive_maximum_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exclusive_minimum_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_maximum_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_minimum_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudDiscoveryengineV1betaInterval::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
