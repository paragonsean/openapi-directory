/**
 * Discovery Engine API
 * Discovery Engine API.
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudDiscoveryengineV1betaPurgeSuggestionDenyListEntriesResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudDiscoveryengineV1betaPurgeSuggestionDenyListEntriesResponse::OAIGoogleCloudDiscoveryengineV1betaPurgeSuggestionDenyListEntriesResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudDiscoveryengineV1betaPurgeSuggestionDenyListEntriesResponse::OAIGoogleCloudDiscoveryengineV1betaPurgeSuggestionDenyListEntriesResponse() {
    this->initializeModel();
}

OAIGoogleCloudDiscoveryengineV1betaPurgeSuggestionDenyListEntriesResponse::~OAIGoogleCloudDiscoveryengineV1betaPurgeSuggestionDenyListEntriesResponse() {}

void OAIGoogleCloudDiscoveryengineV1betaPurgeSuggestionDenyListEntriesResponse::initializeModel() {

    m_error_samples_isSet = false;
    m_error_samples_isValid = false;

    m_purge_count_isSet = false;
    m_purge_count_isValid = false;
}

void OAIGoogleCloudDiscoveryengineV1betaPurgeSuggestionDenyListEntriesResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudDiscoveryengineV1betaPurgeSuggestionDenyListEntriesResponse::fromJsonObject(QJsonObject json) {

    m_error_samples_isValid = ::OpenAPI::fromJsonValue(m_error_samples, json[QString("errorSamples")]);
    m_error_samples_isSet = !json[QString("errorSamples")].isNull() && m_error_samples_isValid;

    m_purge_count_isValid = ::OpenAPI::fromJsonValue(m_purge_count, json[QString("purgeCount")]);
    m_purge_count_isSet = !json[QString("purgeCount")].isNull() && m_purge_count_isValid;
}

QString OAIGoogleCloudDiscoveryengineV1betaPurgeSuggestionDenyListEntriesResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudDiscoveryengineV1betaPurgeSuggestionDenyListEntriesResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_error_samples.size() > 0) {
        obj.insert(QString("errorSamples"), ::OpenAPI::toJsonValue(m_error_samples));
    }
    if (m_purge_count_isSet) {
        obj.insert(QString("purgeCount"), ::OpenAPI::toJsonValue(m_purge_count));
    }
    return obj;
}

QList<OAIGoogleRpcStatus> OAIGoogleCloudDiscoveryengineV1betaPurgeSuggestionDenyListEntriesResponse::getErrorSamples() const {
    return m_error_samples;
}
void OAIGoogleCloudDiscoveryengineV1betaPurgeSuggestionDenyListEntriesResponse::setErrorSamples(const QList<OAIGoogleRpcStatus> &error_samples) {
    m_error_samples = error_samples;
    m_error_samples_isSet = true;
}

bool OAIGoogleCloudDiscoveryengineV1betaPurgeSuggestionDenyListEntriesResponse::is_error_samples_Set() const{
    return m_error_samples_isSet;
}

bool OAIGoogleCloudDiscoveryengineV1betaPurgeSuggestionDenyListEntriesResponse::is_error_samples_Valid() const{
    return m_error_samples_isValid;
}

QString OAIGoogleCloudDiscoveryengineV1betaPurgeSuggestionDenyListEntriesResponse::getPurgeCount() const {
    return m_purge_count;
}
void OAIGoogleCloudDiscoveryengineV1betaPurgeSuggestionDenyListEntriesResponse::setPurgeCount(const QString &purge_count) {
    m_purge_count = purge_count;
    m_purge_count_isSet = true;
}

bool OAIGoogleCloudDiscoveryengineV1betaPurgeSuggestionDenyListEntriesResponse::is_purge_count_Set() const{
    return m_purge_count_isSet;
}

bool OAIGoogleCloudDiscoveryengineV1betaPurgeSuggestionDenyListEntriesResponse::is_purge_count_Valid() const{
    return m_purge_count_isValid;
}

bool OAIGoogleCloudDiscoveryengineV1betaPurgeSuggestionDenyListEntriesResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_error_samples.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_purge_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudDiscoveryengineV1betaPurgeSuggestionDenyListEntriesResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
