/**
 * Discovery Engine API
 * Discovery Engine API.
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudDiscoveryengineV1alphaRecrawlUrisResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudDiscoveryengineV1alphaRecrawlUrisResponse::OAIGoogleCloudDiscoveryengineV1alphaRecrawlUrisResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudDiscoveryengineV1alphaRecrawlUrisResponse::OAIGoogleCloudDiscoveryengineV1alphaRecrawlUrisResponse() {
    this->initializeModel();
}

OAIGoogleCloudDiscoveryengineV1alphaRecrawlUrisResponse::~OAIGoogleCloudDiscoveryengineV1alphaRecrawlUrisResponse() {}

void OAIGoogleCloudDiscoveryengineV1alphaRecrawlUrisResponse::initializeModel() {

    m_failed_uris_isSet = false;
    m_failed_uris_isValid = false;

    m_failure_samples_isSet = false;
    m_failure_samples_isValid = false;
}

void OAIGoogleCloudDiscoveryengineV1alphaRecrawlUrisResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudDiscoveryengineV1alphaRecrawlUrisResponse::fromJsonObject(QJsonObject json) {

    m_failed_uris_isValid = ::OpenAPI::fromJsonValue(m_failed_uris, json[QString("failedUris")]);
    m_failed_uris_isSet = !json[QString("failedUris")].isNull() && m_failed_uris_isValid;

    m_failure_samples_isValid = ::OpenAPI::fromJsonValue(m_failure_samples, json[QString("failureSamples")]);
    m_failure_samples_isSet = !json[QString("failureSamples")].isNull() && m_failure_samples_isValid;
}

QString OAIGoogleCloudDiscoveryengineV1alphaRecrawlUrisResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudDiscoveryengineV1alphaRecrawlUrisResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_failed_uris.size() > 0) {
        obj.insert(QString("failedUris"), ::OpenAPI::toJsonValue(m_failed_uris));
    }
    if (m_failure_samples.size() > 0) {
        obj.insert(QString("failureSamples"), ::OpenAPI::toJsonValue(m_failure_samples));
    }
    return obj;
}

QList<QString> OAIGoogleCloudDiscoveryengineV1alphaRecrawlUrisResponse::getFailedUris() const {
    return m_failed_uris;
}
void OAIGoogleCloudDiscoveryengineV1alphaRecrawlUrisResponse::setFailedUris(const QList<QString> &failed_uris) {
    m_failed_uris = failed_uris;
    m_failed_uris_isSet = true;
}

bool OAIGoogleCloudDiscoveryengineV1alphaRecrawlUrisResponse::is_failed_uris_Set() const{
    return m_failed_uris_isSet;
}

bool OAIGoogleCloudDiscoveryengineV1alphaRecrawlUrisResponse::is_failed_uris_Valid() const{
    return m_failed_uris_isValid;
}

QList<OAIGoogleCloudDiscoveryengineV1alphaRecrawlUrisResponseFailureInfo> OAIGoogleCloudDiscoveryengineV1alphaRecrawlUrisResponse::getFailureSamples() const {
    return m_failure_samples;
}
void OAIGoogleCloudDiscoveryengineV1alphaRecrawlUrisResponse::setFailureSamples(const QList<OAIGoogleCloudDiscoveryengineV1alphaRecrawlUrisResponseFailureInfo> &failure_samples) {
    m_failure_samples = failure_samples;
    m_failure_samples_isSet = true;
}

bool OAIGoogleCloudDiscoveryengineV1alphaRecrawlUrisResponse::is_failure_samples_Set() const{
    return m_failure_samples_isSet;
}

bool OAIGoogleCloudDiscoveryengineV1alphaRecrawlUrisResponse::is_failure_samples_Valid() const{
    return m_failure_samples_isValid;
}

bool OAIGoogleCloudDiscoveryengineV1alphaRecrawlUrisResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_failed_uris.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_failure_samples.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudDiscoveryengineV1alphaRecrawlUrisResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
