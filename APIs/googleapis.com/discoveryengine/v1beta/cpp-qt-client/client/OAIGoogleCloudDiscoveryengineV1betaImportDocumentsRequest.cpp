/**
 * Discovery Engine API
 * Discovery Engine API.
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudDiscoveryengineV1betaImportDocumentsRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudDiscoveryengineV1betaImportDocumentsRequest::OAIGoogleCloudDiscoveryengineV1betaImportDocumentsRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudDiscoveryengineV1betaImportDocumentsRequest::OAIGoogleCloudDiscoveryengineV1betaImportDocumentsRequest() {
    this->initializeModel();
}

OAIGoogleCloudDiscoveryengineV1betaImportDocumentsRequest::~OAIGoogleCloudDiscoveryengineV1betaImportDocumentsRequest() {}

void OAIGoogleCloudDiscoveryengineV1betaImportDocumentsRequest::initializeModel() {

    m_auto_generate_ids_isSet = false;
    m_auto_generate_ids_isValid = false;

    m_bigquery_source_isSet = false;
    m_bigquery_source_isValid = false;

    m_error_config_isSet = false;
    m_error_config_isValid = false;

    m_gcs_source_isSet = false;
    m_gcs_source_isValid = false;

    m_id_field_isSet = false;
    m_id_field_isValid = false;

    m_inline_source_isSet = false;
    m_inline_source_isValid = false;

    m_reconciliation_mode_isSet = false;
    m_reconciliation_mode_isValid = false;
}

void OAIGoogleCloudDiscoveryengineV1betaImportDocumentsRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudDiscoveryengineV1betaImportDocumentsRequest::fromJsonObject(QJsonObject json) {

    m_auto_generate_ids_isValid = ::OpenAPI::fromJsonValue(m_auto_generate_ids, json[QString("autoGenerateIds")]);
    m_auto_generate_ids_isSet = !json[QString("autoGenerateIds")].isNull() && m_auto_generate_ids_isValid;

    m_bigquery_source_isValid = ::OpenAPI::fromJsonValue(m_bigquery_source, json[QString("bigquerySource")]);
    m_bigquery_source_isSet = !json[QString("bigquerySource")].isNull() && m_bigquery_source_isValid;

    m_error_config_isValid = ::OpenAPI::fromJsonValue(m_error_config, json[QString("errorConfig")]);
    m_error_config_isSet = !json[QString("errorConfig")].isNull() && m_error_config_isValid;

    m_gcs_source_isValid = ::OpenAPI::fromJsonValue(m_gcs_source, json[QString("gcsSource")]);
    m_gcs_source_isSet = !json[QString("gcsSource")].isNull() && m_gcs_source_isValid;

    m_id_field_isValid = ::OpenAPI::fromJsonValue(m_id_field, json[QString("idField")]);
    m_id_field_isSet = !json[QString("idField")].isNull() && m_id_field_isValid;

    m_inline_source_isValid = ::OpenAPI::fromJsonValue(m_inline_source, json[QString("inlineSource")]);
    m_inline_source_isSet = !json[QString("inlineSource")].isNull() && m_inline_source_isValid;

    m_reconciliation_mode_isValid = ::OpenAPI::fromJsonValue(m_reconciliation_mode, json[QString("reconciliationMode")]);
    m_reconciliation_mode_isSet = !json[QString("reconciliationMode")].isNull() && m_reconciliation_mode_isValid;
}

QString OAIGoogleCloudDiscoveryengineV1betaImportDocumentsRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudDiscoveryengineV1betaImportDocumentsRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_auto_generate_ids_isSet) {
        obj.insert(QString("autoGenerateIds"), ::OpenAPI::toJsonValue(m_auto_generate_ids));
    }
    if (m_bigquery_source.isSet()) {
        obj.insert(QString("bigquerySource"), ::OpenAPI::toJsonValue(m_bigquery_source));
    }
    if (m_error_config.isSet()) {
        obj.insert(QString("errorConfig"), ::OpenAPI::toJsonValue(m_error_config));
    }
    if (m_gcs_source.isSet()) {
        obj.insert(QString("gcsSource"), ::OpenAPI::toJsonValue(m_gcs_source));
    }
    if (m_id_field_isSet) {
        obj.insert(QString("idField"), ::OpenAPI::toJsonValue(m_id_field));
    }
    if (m_inline_source.isSet()) {
        obj.insert(QString("inlineSource"), ::OpenAPI::toJsonValue(m_inline_source));
    }
    if (m_reconciliation_mode_isSet) {
        obj.insert(QString("reconciliationMode"), ::OpenAPI::toJsonValue(m_reconciliation_mode));
    }
    return obj;
}

bool OAIGoogleCloudDiscoveryengineV1betaImportDocumentsRequest::isAutoGenerateIds() const {
    return m_auto_generate_ids;
}
void OAIGoogleCloudDiscoveryengineV1betaImportDocumentsRequest::setAutoGenerateIds(const bool &auto_generate_ids) {
    m_auto_generate_ids = auto_generate_ids;
    m_auto_generate_ids_isSet = true;
}

bool OAIGoogleCloudDiscoveryengineV1betaImportDocumentsRequest::is_auto_generate_ids_Set() const{
    return m_auto_generate_ids_isSet;
}

bool OAIGoogleCloudDiscoveryengineV1betaImportDocumentsRequest::is_auto_generate_ids_Valid() const{
    return m_auto_generate_ids_isValid;
}

OAIGoogleCloudDiscoveryengineV1betaBigQuerySource OAIGoogleCloudDiscoveryengineV1betaImportDocumentsRequest::getBigquerySource() const {
    return m_bigquery_source;
}
void OAIGoogleCloudDiscoveryengineV1betaImportDocumentsRequest::setBigquerySource(const OAIGoogleCloudDiscoveryengineV1betaBigQuerySource &bigquery_source) {
    m_bigquery_source = bigquery_source;
    m_bigquery_source_isSet = true;
}

bool OAIGoogleCloudDiscoveryengineV1betaImportDocumentsRequest::is_bigquery_source_Set() const{
    return m_bigquery_source_isSet;
}

bool OAIGoogleCloudDiscoveryengineV1betaImportDocumentsRequest::is_bigquery_source_Valid() const{
    return m_bigquery_source_isValid;
}

OAIGoogleCloudDiscoveryengineV1betaImportErrorConfig OAIGoogleCloudDiscoveryengineV1betaImportDocumentsRequest::getErrorConfig() const {
    return m_error_config;
}
void OAIGoogleCloudDiscoveryengineV1betaImportDocumentsRequest::setErrorConfig(const OAIGoogleCloudDiscoveryengineV1betaImportErrorConfig &error_config) {
    m_error_config = error_config;
    m_error_config_isSet = true;
}

bool OAIGoogleCloudDiscoveryengineV1betaImportDocumentsRequest::is_error_config_Set() const{
    return m_error_config_isSet;
}

bool OAIGoogleCloudDiscoveryengineV1betaImportDocumentsRequest::is_error_config_Valid() const{
    return m_error_config_isValid;
}

OAIGoogleCloudDiscoveryengineV1betaGcsSource OAIGoogleCloudDiscoveryengineV1betaImportDocumentsRequest::getGcsSource() const {
    return m_gcs_source;
}
void OAIGoogleCloudDiscoveryengineV1betaImportDocumentsRequest::setGcsSource(const OAIGoogleCloudDiscoveryengineV1betaGcsSource &gcs_source) {
    m_gcs_source = gcs_source;
    m_gcs_source_isSet = true;
}

bool OAIGoogleCloudDiscoveryengineV1betaImportDocumentsRequest::is_gcs_source_Set() const{
    return m_gcs_source_isSet;
}

bool OAIGoogleCloudDiscoveryengineV1betaImportDocumentsRequest::is_gcs_source_Valid() const{
    return m_gcs_source_isValid;
}

QString OAIGoogleCloudDiscoveryengineV1betaImportDocumentsRequest::getIdField() const {
    return m_id_field;
}
void OAIGoogleCloudDiscoveryengineV1betaImportDocumentsRequest::setIdField(const QString &id_field) {
    m_id_field = id_field;
    m_id_field_isSet = true;
}

bool OAIGoogleCloudDiscoveryengineV1betaImportDocumentsRequest::is_id_field_Set() const{
    return m_id_field_isSet;
}

bool OAIGoogleCloudDiscoveryengineV1betaImportDocumentsRequest::is_id_field_Valid() const{
    return m_id_field_isValid;
}

OAIGoogleCloudDiscoveryengineV1betaImportDocumentsRequestInlineSource OAIGoogleCloudDiscoveryengineV1betaImportDocumentsRequest::getInlineSource() const {
    return m_inline_source;
}
void OAIGoogleCloudDiscoveryengineV1betaImportDocumentsRequest::setInlineSource(const OAIGoogleCloudDiscoveryengineV1betaImportDocumentsRequestInlineSource &inline_source) {
    m_inline_source = inline_source;
    m_inline_source_isSet = true;
}

bool OAIGoogleCloudDiscoveryengineV1betaImportDocumentsRequest::is_inline_source_Set() const{
    return m_inline_source_isSet;
}

bool OAIGoogleCloudDiscoveryengineV1betaImportDocumentsRequest::is_inline_source_Valid() const{
    return m_inline_source_isValid;
}

QString OAIGoogleCloudDiscoveryengineV1betaImportDocumentsRequest::getReconciliationMode() const {
    return m_reconciliation_mode;
}
void OAIGoogleCloudDiscoveryengineV1betaImportDocumentsRequest::setReconciliationMode(const QString &reconciliation_mode) {
    m_reconciliation_mode = reconciliation_mode;
    m_reconciliation_mode_isSet = true;
}

bool OAIGoogleCloudDiscoveryengineV1betaImportDocumentsRequest::is_reconciliation_mode_Set() const{
    return m_reconciliation_mode_isSet;
}

bool OAIGoogleCloudDiscoveryengineV1betaImportDocumentsRequest::is_reconciliation_mode_Valid() const{
    return m_reconciliation_mode_isValid;
}

bool OAIGoogleCloudDiscoveryengineV1betaImportDocumentsRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_auto_generate_ids_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bigquery_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_gcs_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_field_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inline_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_reconciliation_mode_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudDiscoveryengineV1betaImportDocumentsRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
