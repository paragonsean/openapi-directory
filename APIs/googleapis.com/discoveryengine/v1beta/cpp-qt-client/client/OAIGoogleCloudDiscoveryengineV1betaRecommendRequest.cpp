/**
 * Discovery Engine API
 * Discovery Engine API.
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudDiscoveryengineV1betaRecommendRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudDiscoveryengineV1betaRecommendRequest::OAIGoogleCloudDiscoveryengineV1betaRecommendRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudDiscoveryengineV1betaRecommendRequest::OAIGoogleCloudDiscoveryengineV1betaRecommendRequest() {
    this->initializeModel();
}

OAIGoogleCloudDiscoveryengineV1betaRecommendRequest::~OAIGoogleCloudDiscoveryengineV1betaRecommendRequest() {}

void OAIGoogleCloudDiscoveryengineV1betaRecommendRequest::initializeModel() {

    m_filter_isSet = false;
    m_filter_isValid = false;

    m_page_size_isSet = false;
    m_page_size_isValid = false;

    m_params_isSet = false;
    m_params_isValid = false;

    m_user_event_isSet = false;
    m_user_event_isValid = false;

    m_user_labels_isSet = false;
    m_user_labels_isValid = false;

    m_validate_only_isSet = false;
    m_validate_only_isValid = false;
}

void OAIGoogleCloudDiscoveryengineV1betaRecommendRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudDiscoveryengineV1betaRecommendRequest::fromJsonObject(QJsonObject json) {

    m_filter_isValid = ::OpenAPI::fromJsonValue(m_filter, json[QString("filter")]);
    m_filter_isSet = !json[QString("filter")].isNull() && m_filter_isValid;

    m_page_size_isValid = ::OpenAPI::fromJsonValue(m_page_size, json[QString("pageSize")]);
    m_page_size_isSet = !json[QString("pageSize")].isNull() && m_page_size_isValid;

    m_params_isValid = ::OpenAPI::fromJsonValue(m_params, json[QString("params")]);
    m_params_isSet = !json[QString("params")].isNull() && m_params_isValid;

    m_user_event_isValid = ::OpenAPI::fromJsonValue(m_user_event, json[QString("userEvent")]);
    m_user_event_isSet = !json[QString("userEvent")].isNull() && m_user_event_isValid;

    m_user_labels_isValid = ::OpenAPI::fromJsonValue(m_user_labels, json[QString("userLabels")]);
    m_user_labels_isSet = !json[QString("userLabels")].isNull() && m_user_labels_isValid;

    m_validate_only_isValid = ::OpenAPI::fromJsonValue(m_validate_only, json[QString("validateOnly")]);
    m_validate_only_isSet = !json[QString("validateOnly")].isNull() && m_validate_only_isValid;
}

QString OAIGoogleCloudDiscoveryengineV1betaRecommendRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudDiscoveryengineV1betaRecommendRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_filter_isSet) {
        obj.insert(QString("filter"), ::OpenAPI::toJsonValue(m_filter));
    }
    if (m_page_size_isSet) {
        obj.insert(QString("pageSize"), ::OpenAPI::toJsonValue(m_page_size));
    }
    if (m_params.size() > 0) {
        obj.insert(QString("params"), ::OpenAPI::toJsonValue(m_params));
    }
    if (m_user_event.isSet()) {
        obj.insert(QString("userEvent"), ::OpenAPI::toJsonValue(m_user_event));
    }
    if (m_user_labels.size() > 0) {
        obj.insert(QString("userLabels"), ::OpenAPI::toJsonValue(m_user_labels));
    }
    if (m_validate_only_isSet) {
        obj.insert(QString("validateOnly"), ::OpenAPI::toJsonValue(m_validate_only));
    }
    return obj;
}

QString OAIGoogleCloudDiscoveryengineV1betaRecommendRequest::getFilter() const {
    return m_filter;
}
void OAIGoogleCloudDiscoveryengineV1betaRecommendRequest::setFilter(const QString &filter) {
    m_filter = filter;
    m_filter_isSet = true;
}

bool OAIGoogleCloudDiscoveryengineV1betaRecommendRequest::is_filter_Set() const{
    return m_filter_isSet;
}

bool OAIGoogleCloudDiscoveryengineV1betaRecommendRequest::is_filter_Valid() const{
    return m_filter_isValid;
}

qint32 OAIGoogleCloudDiscoveryengineV1betaRecommendRequest::getPageSize() const {
    return m_page_size;
}
void OAIGoogleCloudDiscoveryengineV1betaRecommendRequest::setPageSize(const qint32 &page_size) {
    m_page_size = page_size;
    m_page_size_isSet = true;
}

bool OAIGoogleCloudDiscoveryengineV1betaRecommendRequest::is_page_size_Set() const{
    return m_page_size_isSet;
}

bool OAIGoogleCloudDiscoveryengineV1betaRecommendRequest::is_page_size_Valid() const{
    return m_page_size_isValid;
}

QMap<QString, QJsonValue> OAIGoogleCloudDiscoveryengineV1betaRecommendRequest::getParams() const {
    return m_params;
}
void OAIGoogleCloudDiscoveryengineV1betaRecommendRequest::setParams(const QMap<QString, QJsonValue> &params) {
    m_params = params;
    m_params_isSet = true;
}

bool OAIGoogleCloudDiscoveryengineV1betaRecommendRequest::is_params_Set() const{
    return m_params_isSet;
}

bool OAIGoogleCloudDiscoveryengineV1betaRecommendRequest::is_params_Valid() const{
    return m_params_isValid;
}

OAIGoogleCloudDiscoveryengineV1betaUserEvent OAIGoogleCloudDiscoveryengineV1betaRecommendRequest::getUserEvent() const {
    return m_user_event;
}
void OAIGoogleCloudDiscoveryengineV1betaRecommendRequest::setUserEvent(const OAIGoogleCloudDiscoveryengineV1betaUserEvent &user_event) {
    m_user_event = user_event;
    m_user_event_isSet = true;
}

bool OAIGoogleCloudDiscoveryengineV1betaRecommendRequest::is_user_event_Set() const{
    return m_user_event_isSet;
}

bool OAIGoogleCloudDiscoveryengineV1betaRecommendRequest::is_user_event_Valid() const{
    return m_user_event_isValid;
}

QMap<QString, QString> OAIGoogleCloudDiscoveryengineV1betaRecommendRequest::getUserLabels() const {
    return m_user_labels;
}
void OAIGoogleCloudDiscoveryengineV1betaRecommendRequest::setUserLabels(const QMap<QString, QString> &user_labels) {
    m_user_labels = user_labels;
    m_user_labels_isSet = true;
}

bool OAIGoogleCloudDiscoveryengineV1betaRecommendRequest::is_user_labels_Set() const{
    return m_user_labels_isSet;
}

bool OAIGoogleCloudDiscoveryengineV1betaRecommendRequest::is_user_labels_Valid() const{
    return m_user_labels_isValid;
}

bool OAIGoogleCloudDiscoveryengineV1betaRecommendRequest::isValidateOnly() const {
    return m_validate_only;
}
void OAIGoogleCloudDiscoveryengineV1betaRecommendRequest::setValidateOnly(const bool &validate_only) {
    m_validate_only = validate_only;
    m_validate_only_isSet = true;
}

bool OAIGoogleCloudDiscoveryengineV1betaRecommendRequest::is_validate_only_Set() const{
    return m_validate_only_isSet;
}

bool OAIGoogleCloudDiscoveryengineV1betaRecommendRequest::is_validate_only_Valid() const{
    return m_validate_only_isValid;
}

bool OAIGoogleCloudDiscoveryengineV1betaRecommendRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_filter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_params.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_event.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_validate_only_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudDiscoveryengineV1betaRecommendRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
