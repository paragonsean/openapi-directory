/**
 * Discovery Engine API
 * Discovery Engine API.
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudDiscoveryengineV1betaSearchRequestContentSearchSpecSnippetSpec.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudDiscoveryengineV1betaSearchRequestContentSearchSpecSnippetSpec::OAIGoogleCloudDiscoveryengineV1betaSearchRequestContentSearchSpecSnippetSpec(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudDiscoveryengineV1betaSearchRequestContentSearchSpecSnippetSpec::OAIGoogleCloudDiscoveryengineV1betaSearchRequestContentSearchSpecSnippetSpec() {
    this->initializeModel();
}

OAIGoogleCloudDiscoveryengineV1betaSearchRequestContentSearchSpecSnippetSpec::~OAIGoogleCloudDiscoveryengineV1betaSearchRequestContentSearchSpecSnippetSpec() {}

void OAIGoogleCloudDiscoveryengineV1betaSearchRequestContentSearchSpecSnippetSpec::initializeModel() {

    m_max_snippet_count_isSet = false;
    m_max_snippet_count_isValid = false;

    m_reference_only_isSet = false;
    m_reference_only_isValid = false;

    m_return_snippet_isSet = false;
    m_return_snippet_isValid = false;
}

void OAIGoogleCloudDiscoveryengineV1betaSearchRequestContentSearchSpecSnippetSpec::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudDiscoveryengineV1betaSearchRequestContentSearchSpecSnippetSpec::fromJsonObject(QJsonObject json) {

    m_max_snippet_count_isValid = ::OpenAPI::fromJsonValue(m_max_snippet_count, json[QString("maxSnippetCount")]);
    m_max_snippet_count_isSet = !json[QString("maxSnippetCount")].isNull() && m_max_snippet_count_isValid;

    m_reference_only_isValid = ::OpenAPI::fromJsonValue(m_reference_only, json[QString("referenceOnly")]);
    m_reference_only_isSet = !json[QString("referenceOnly")].isNull() && m_reference_only_isValid;

    m_return_snippet_isValid = ::OpenAPI::fromJsonValue(m_return_snippet, json[QString("returnSnippet")]);
    m_return_snippet_isSet = !json[QString("returnSnippet")].isNull() && m_return_snippet_isValid;
}

QString OAIGoogleCloudDiscoveryengineV1betaSearchRequestContentSearchSpecSnippetSpec::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudDiscoveryengineV1betaSearchRequestContentSearchSpecSnippetSpec::asJsonObject() const {
    QJsonObject obj;
    if (m_max_snippet_count_isSet) {
        obj.insert(QString("maxSnippetCount"), ::OpenAPI::toJsonValue(m_max_snippet_count));
    }
    if (m_reference_only_isSet) {
        obj.insert(QString("referenceOnly"), ::OpenAPI::toJsonValue(m_reference_only));
    }
    if (m_return_snippet_isSet) {
        obj.insert(QString("returnSnippet"), ::OpenAPI::toJsonValue(m_return_snippet));
    }
    return obj;
}

qint32 OAIGoogleCloudDiscoveryengineV1betaSearchRequestContentSearchSpecSnippetSpec::getMaxSnippetCount() const {
    return m_max_snippet_count;
}
void OAIGoogleCloudDiscoveryengineV1betaSearchRequestContentSearchSpecSnippetSpec::setMaxSnippetCount(const qint32 &max_snippet_count) {
    m_max_snippet_count = max_snippet_count;
    m_max_snippet_count_isSet = true;
}

bool OAIGoogleCloudDiscoveryengineV1betaSearchRequestContentSearchSpecSnippetSpec::is_max_snippet_count_Set() const{
    return m_max_snippet_count_isSet;
}

bool OAIGoogleCloudDiscoveryengineV1betaSearchRequestContentSearchSpecSnippetSpec::is_max_snippet_count_Valid() const{
    return m_max_snippet_count_isValid;
}

bool OAIGoogleCloudDiscoveryengineV1betaSearchRequestContentSearchSpecSnippetSpec::isReferenceOnly() const {
    return m_reference_only;
}
void OAIGoogleCloudDiscoveryengineV1betaSearchRequestContentSearchSpecSnippetSpec::setReferenceOnly(const bool &reference_only) {
    m_reference_only = reference_only;
    m_reference_only_isSet = true;
}

bool OAIGoogleCloudDiscoveryengineV1betaSearchRequestContentSearchSpecSnippetSpec::is_reference_only_Set() const{
    return m_reference_only_isSet;
}

bool OAIGoogleCloudDiscoveryengineV1betaSearchRequestContentSearchSpecSnippetSpec::is_reference_only_Valid() const{
    return m_reference_only_isValid;
}

bool OAIGoogleCloudDiscoveryengineV1betaSearchRequestContentSearchSpecSnippetSpec::isReturnSnippet() const {
    return m_return_snippet;
}
void OAIGoogleCloudDiscoveryengineV1betaSearchRequestContentSearchSpecSnippetSpec::setReturnSnippet(const bool &return_snippet) {
    m_return_snippet = return_snippet;
    m_return_snippet_isSet = true;
}

bool OAIGoogleCloudDiscoveryengineV1betaSearchRequestContentSearchSpecSnippetSpec::is_return_snippet_Set() const{
    return m_return_snippet_isSet;
}

bool OAIGoogleCloudDiscoveryengineV1betaSearchRequestContentSearchSpecSnippetSpec::is_return_snippet_Valid() const{
    return m_return_snippet_isValid;
}

bool OAIGoogleCloudDiscoveryengineV1betaSearchRequestContentSearchSpecSnippetSpec::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_max_snippet_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_only_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_return_snippet_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudDiscoveryengineV1betaSearchRequestContentSearchSpecSnippetSpec::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
