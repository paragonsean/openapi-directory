/**
 * Discovery Engine API
 * Discovery Engine API.
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudDiscoveryengineV1betaDocumentContent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudDiscoveryengineV1betaDocumentContent::OAIGoogleCloudDiscoveryengineV1betaDocumentContent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudDiscoveryengineV1betaDocumentContent::OAIGoogleCloudDiscoveryengineV1betaDocumentContent() {
    this->initializeModel();
}

OAIGoogleCloudDiscoveryengineV1betaDocumentContent::~OAIGoogleCloudDiscoveryengineV1betaDocumentContent() {}

void OAIGoogleCloudDiscoveryengineV1betaDocumentContent::initializeModel() {

    m_mime_type_isSet = false;
    m_mime_type_isValid = false;

    m_raw_bytes_isSet = false;
    m_raw_bytes_isValid = false;

    m_uri_isSet = false;
    m_uri_isValid = false;
}

void OAIGoogleCloudDiscoveryengineV1betaDocumentContent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudDiscoveryengineV1betaDocumentContent::fromJsonObject(QJsonObject json) {

    m_mime_type_isValid = ::OpenAPI::fromJsonValue(m_mime_type, json[QString("mimeType")]);
    m_mime_type_isSet = !json[QString("mimeType")].isNull() && m_mime_type_isValid;

    m_raw_bytes_isValid = ::OpenAPI::fromJsonValue(m_raw_bytes, json[QString("rawBytes")]);
    m_raw_bytes_isSet = !json[QString("rawBytes")].isNull() && m_raw_bytes_isValid;

    m_uri_isValid = ::OpenAPI::fromJsonValue(m_uri, json[QString("uri")]);
    m_uri_isSet = !json[QString("uri")].isNull() && m_uri_isValid;
}

QString OAIGoogleCloudDiscoveryengineV1betaDocumentContent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudDiscoveryengineV1betaDocumentContent::asJsonObject() const {
    QJsonObject obj;
    if (m_mime_type_isSet) {
        obj.insert(QString("mimeType"), ::OpenAPI::toJsonValue(m_mime_type));
    }
    if (m_raw_bytes_isSet) {
        obj.insert(QString("rawBytes"), ::OpenAPI::toJsonValue(m_raw_bytes));
    }
    if (m_uri_isSet) {
        obj.insert(QString("uri"), ::OpenAPI::toJsonValue(m_uri));
    }
    return obj;
}

QString OAIGoogleCloudDiscoveryengineV1betaDocumentContent::getMimeType() const {
    return m_mime_type;
}
void OAIGoogleCloudDiscoveryengineV1betaDocumentContent::setMimeType(const QString &mime_type) {
    m_mime_type = mime_type;
    m_mime_type_isSet = true;
}

bool OAIGoogleCloudDiscoveryengineV1betaDocumentContent::is_mime_type_Set() const{
    return m_mime_type_isSet;
}

bool OAIGoogleCloudDiscoveryengineV1betaDocumentContent::is_mime_type_Valid() const{
    return m_mime_type_isValid;
}

QByteArray OAIGoogleCloudDiscoveryengineV1betaDocumentContent::getRawBytes() const {
    return m_raw_bytes;
}
void OAIGoogleCloudDiscoveryengineV1betaDocumentContent::setRawBytes(const QByteArray &raw_bytes) {
    m_raw_bytes = raw_bytes;
    m_raw_bytes_isSet = true;
}

bool OAIGoogleCloudDiscoveryengineV1betaDocumentContent::is_raw_bytes_Set() const{
    return m_raw_bytes_isSet;
}

bool OAIGoogleCloudDiscoveryengineV1betaDocumentContent::is_raw_bytes_Valid() const{
    return m_raw_bytes_isValid;
}

QString OAIGoogleCloudDiscoveryengineV1betaDocumentContent::getUri() const {
    return m_uri;
}
void OAIGoogleCloudDiscoveryengineV1betaDocumentContent::setUri(const QString &uri) {
    m_uri = uri;
    m_uri_isSet = true;
}

bool OAIGoogleCloudDiscoveryengineV1betaDocumentContent::is_uri_Set() const{
    return m_uri_isSet;
}

bool OAIGoogleCloudDiscoveryengineV1betaDocumentContent::is_uri_Valid() const{
    return m_uri_isValid;
}

bool OAIGoogleCloudDiscoveryengineV1betaDocumentContent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_mime_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_raw_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uri_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudDiscoveryengineV1betaDocumentContent::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
