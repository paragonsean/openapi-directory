/**
 * Discovery Engine API
 * Discovery Engine API.
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudDiscoveryengineV1DataStore.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudDiscoveryengineV1DataStore::OAIGoogleCloudDiscoveryengineV1DataStore(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudDiscoveryengineV1DataStore::OAIGoogleCloudDiscoveryengineV1DataStore() {
    this->initializeModel();
}

OAIGoogleCloudDiscoveryengineV1DataStore::~OAIGoogleCloudDiscoveryengineV1DataStore() {}

void OAIGoogleCloudDiscoveryengineV1DataStore::initializeModel() {

    m_content_config_isSet = false;
    m_content_config_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_default_schema_id_isSet = false;
    m_default_schema_id_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_document_processing_config_isSet = false;
    m_document_processing_config_isValid = false;

    m_industry_vertical_isSet = false;
    m_industry_vertical_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_solution_types_isSet = false;
    m_solution_types_isValid = false;

    m_starting_schema_isSet = false;
    m_starting_schema_isValid = false;
}

void OAIGoogleCloudDiscoveryengineV1DataStore::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudDiscoveryengineV1DataStore::fromJsonObject(QJsonObject json) {

    m_content_config_isValid = ::OpenAPI::fromJsonValue(m_content_config, json[QString("contentConfig")]);
    m_content_config_isSet = !json[QString("contentConfig")].isNull() && m_content_config_isValid;

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_default_schema_id_isValid = ::OpenAPI::fromJsonValue(m_default_schema_id, json[QString("defaultSchemaId")]);
    m_default_schema_id_isSet = !json[QString("defaultSchemaId")].isNull() && m_default_schema_id_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_document_processing_config_isValid = ::OpenAPI::fromJsonValue(m_document_processing_config, json[QString("documentProcessingConfig")]);
    m_document_processing_config_isSet = !json[QString("documentProcessingConfig")].isNull() && m_document_processing_config_isValid;

    m_industry_vertical_isValid = ::OpenAPI::fromJsonValue(m_industry_vertical, json[QString("industryVertical")]);
    m_industry_vertical_isSet = !json[QString("industryVertical")].isNull() && m_industry_vertical_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_solution_types_isValid = ::OpenAPI::fromJsonValue(m_solution_types, json[QString("solutionTypes")]);
    m_solution_types_isSet = !json[QString("solutionTypes")].isNull() && m_solution_types_isValid;

    m_starting_schema_isValid = ::OpenAPI::fromJsonValue(m_starting_schema, json[QString("startingSchema")]);
    m_starting_schema_isSet = !json[QString("startingSchema")].isNull() && m_starting_schema_isValid;
}

QString OAIGoogleCloudDiscoveryengineV1DataStore::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudDiscoveryengineV1DataStore::asJsonObject() const {
    QJsonObject obj;
    if (m_content_config_isSet) {
        obj.insert(QString("contentConfig"), ::OpenAPI::toJsonValue(m_content_config));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_default_schema_id_isSet) {
        obj.insert(QString("defaultSchemaId"), ::OpenAPI::toJsonValue(m_default_schema_id));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_document_processing_config.isSet()) {
        obj.insert(QString("documentProcessingConfig"), ::OpenAPI::toJsonValue(m_document_processing_config));
    }
    if (m_industry_vertical_isSet) {
        obj.insert(QString("industryVertical"), ::OpenAPI::toJsonValue(m_industry_vertical));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_solution_types.size() > 0) {
        obj.insert(QString("solutionTypes"), ::OpenAPI::toJsonValue(m_solution_types));
    }
    if (m_starting_schema.isSet()) {
        obj.insert(QString("startingSchema"), ::OpenAPI::toJsonValue(m_starting_schema));
    }
    return obj;
}

QString OAIGoogleCloudDiscoveryengineV1DataStore::getContentConfig() const {
    return m_content_config;
}
void OAIGoogleCloudDiscoveryengineV1DataStore::setContentConfig(const QString &content_config) {
    m_content_config = content_config;
    m_content_config_isSet = true;
}

bool OAIGoogleCloudDiscoveryengineV1DataStore::is_content_config_Set() const{
    return m_content_config_isSet;
}

bool OAIGoogleCloudDiscoveryengineV1DataStore::is_content_config_Valid() const{
    return m_content_config_isValid;
}

QString OAIGoogleCloudDiscoveryengineV1DataStore::getCreateTime() const {
    return m_create_time;
}
void OAIGoogleCloudDiscoveryengineV1DataStore::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIGoogleCloudDiscoveryengineV1DataStore::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIGoogleCloudDiscoveryengineV1DataStore::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAIGoogleCloudDiscoveryengineV1DataStore::getDefaultSchemaId() const {
    return m_default_schema_id;
}
void OAIGoogleCloudDiscoveryengineV1DataStore::setDefaultSchemaId(const QString &default_schema_id) {
    m_default_schema_id = default_schema_id;
    m_default_schema_id_isSet = true;
}

bool OAIGoogleCloudDiscoveryengineV1DataStore::is_default_schema_id_Set() const{
    return m_default_schema_id_isSet;
}

bool OAIGoogleCloudDiscoveryengineV1DataStore::is_default_schema_id_Valid() const{
    return m_default_schema_id_isValid;
}

QString OAIGoogleCloudDiscoveryengineV1DataStore::getDisplayName() const {
    return m_display_name;
}
void OAIGoogleCloudDiscoveryengineV1DataStore::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIGoogleCloudDiscoveryengineV1DataStore::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIGoogleCloudDiscoveryengineV1DataStore::is_display_name_Valid() const{
    return m_display_name_isValid;
}

OAIGoogleCloudDiscoveryengineV1DocumentProcessingConfig OAIGoogleCloudDiscoveryengineV1DataStore::getDocumentProcessingConfig() const {
    return m_document_processing_config;
}
void OAIGoogleCloudDiscoveryengineV1DataStore::setDocumentProcessingConfig(const OAIGoogleCloudDiscoveryengineV1DocumentProcessingConfig &document_processing_config) {
    m_document_processing_config = document_processing_config;
    m_document_processing_config_isSet = true;
}

bool OAIGoogleCloudDiscoveryengineV1DataStore::is_document_processing_config_Set() const{
    return m_document_processing_config_isSet;
}

bool OAIGoogleCloudDiscoveryengineV1DataStore::is_document_processing_config_Valid() const{
    return m_document_processing_config_isValid;
}

QString OAIGoogleCloudDiscoveryengineV1DataStore::getIndustryVertical() const {
    return m_industry_vertical;
}
void OAIGoogleCloudDiscoveryengineV1DataStore::setIndustryVertical(const QString &industry_vertical) {
    m_industry_vertical = industry_vertical;
    m_industry_vertical_isSet = true;
}

bool OAIGoogleCloudDiscoveryengineV1DataStore::is_industry_vertical_Set() const{
    return m_industry_vertical_isSet;
}

bool OAIGoogleCloudDiscoveryengineV1DataStore::is_industry_vertical_Valid() const{
    return m_industry_vertical_isValid;
}

QString OAIGoogleCloudDiscoveryengineV1DataStore::getName() const {
    return m_name;
}
void OAIGoogleCloudDiscoveryengineV1DataStore::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGoogleCloudDiscoveryengineV1DataStore::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGoogleCloudDiscoveryengineV1DataStore::is_name_Valid() const{
    return m_name_isValid;
}

QList<QString> OAIGoogleCloudDiscoveryengineV1DataStore::getSolutionTypes() const {
    return m_solution_types;
}
void OAIGoogleCloudDiscoveryengineV1DataStore::setSolutionTypes(const QList<QString> &solution_types) {
    m_solution_types = solution_types;
    m_solution_types_isSet = true;
}

bool OAIGoogleCloudDiscoveryengineV1DataStore::is_solution_types_Set() const{
    return m_solution_types_isSet;
}

bool OAIGoogleCloudDiscoveryengineV1DataStore::is_solution_types_Valid() const{
    return m_solution_types_isValid;
}

OAIGoogleCloudDiscoveryengineV1Schema OAIGoogleCloudDiscoveryengineV1DataStore::getStartingSchema() const {
    return m_starting_schema;
}
void OAIGoogleCloudDiscoveryengineV1DataStore::setStartingSchema(const OAIGoogleCloudDiscoveryengineV1Schema &starting_schema) {
    m_starting_schema = starting_schema;
    m_starting_schema_isSet = true;
}

bool OAIGoogleCloudDiscoveryengineV1DataStore::is_starting_schema_Set() const{
    return m_starting_schema_isSet;
}

bool OAIGoogleCloudDiscoveryengineV1DataStore::is_starting_schema_Valid() const{
    return m_starting_schema_isValid;
}

bool OAIGoogleCloudDiscoveryengineV1DataStore::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_content_config_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_schema_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_document_processing_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_industry_vertical_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_solution_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_starting_schema.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudDiscoveryengineV1DataStore::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
