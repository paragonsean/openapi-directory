/*
 * Discovery Engine API
 * Discovery Engine API.
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.GoogleCloudDiscoveryengineV1betaUserEvent;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Request message for Recommend method.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:39:37.233219-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudDiscoveryengineV1betaRecommendRequest {
  public static final String SERIALIZED_NAME_FILTER = "filter";
  @SerializedName(SERIALIZED_NAME_FILTER)
  private String filter;

  public static final String SERIALIZED_NAME_PAGE_SIZE = "pageSize";
  @SerializedName(SERIALIZED_NAME_PAGE_SIZE)
  private Integer pageSize;

  public static final String SERIALIZED_NAME_PARAMS = "params";
  @SerializedName(SERIALIZED_NAME_PARAMS)
  private Map<String, Object> params = new HashMap<>();

  public static final String SERIALIZED_NAME_USER_EVENT = "userEvent";
  @SerializedName(SERIALIZED_NAME_USER_EVENT)
  private GoogleCloudDiscoveryengineV1betaUserEvent userEvent;

  public static final String SERIALIZED_NAME_USER_LABELS = "userLabels";
  @SerializedName(SERIALIZED_NAME_USER_LABELS)
  private Map<String, String> userLabels = new HashMap<>();

  public static final String SERIALIZED_NAME_VALIDATE_ONLY = "validateOnly";
  @SerializedName(SERIALIZED_NAME_VALIDATE_ONLY)
  private Boolean validateOnly;

  public GoogleCloudDiscoveryengineV1betaRecommendRequest() {
  }

  public GoogleCloudDiscoveryengineV1betaRecommendRequest filter(String filter) {
    this.filter = filter;
    return this;
  }

  /**
   * Filter for restricting recommendation results with a length limit of 5,000 characters. Currently, only filter expressions on the &#x60;filter_tags&#x60; attribute is supported. Examples: * &#x60;(filter_tags: ANY(\&quot;Red\&quot;, \&quot;Blue\&quot;) OR filter_tags: ANY(\&quot;Hot\&quot;, \&quot;Cold\&quot;))&#x60; * &#x60;(filter_tags: ANY(\&quot;Red\&quot;, \&quot;Blue\&quot;)) AND NOT (filter_tags: ANY(\&quot;Green\&quot;))&#x60; If &#x60;attributeFilteringSyntax&#x60; is set to true under the &#x60;params&#x60; field, then attribute-based expressions are expected instead of the above described tag-based syntax. Examples: * (launguage: ANY(\&quot;en\&quot;, \&quot;es\&quot;)) AND NOT (categories: ANY(\&quot;Movie\&quot;)) * (available: true) AND (launguage: ANY(\&quot;en\&quot;, \&quot;es\&quot;)) OR (categories: ANY(\&quot;Movie\&quot;)) If your filter blocks all results, the API will return generic (unfiltered) popular Documents. If you only want results strictly matching the filters, set &#x60;strictFiltering&#x60; to True in RecommendRequest.params to receive empty results instead. Note that the API will never return Documents with &#x60;storageStatus&#x60; of &#x60;EXPIRED&#x60; or &#x60;DELETED&#x60; regardless of filter choices.
   * @return filter
   */
  @javax.annotation.Nullable
  public String getFilter() {
    return filter;
  }

  public void setFilter(String filter) {
    this.filter = filter;
  }


  public GoogleCloudDiscoveryengineV1betaRecommendRequest pageSize(Integer pageSize) {
    this.pageSize = pageSize;
    return this;
  }

  /**
   * Maximum number of results to return. Set this property to the number of recommendation results needed. If zero, the service will choose a reasonable default. The maximum allowed value is 100. Values above 100 will be coerced to 100.
   * @return pageSize
   */
  @javax.annotation.Nullable
  public Integer getPageSize() {
    return pageSize;
  }

  public void setPageSize(Integer pageSize) {
    this.pageSize = pageSize;
  }


  public GoogleCloudDiscoveryengineV1betaRecommendRequest params(Map<String, Object> params) {
    this.params = params;
    return this;
  }

  public GoogleCloudDiscoveryengineV1betaRecommendRequest putParamsItem(String key, Object paramsItem) {
    if (this.params == null) {
      this.params = new HashMap<>();
    }
    this.params.put(key, paramsItem);
    return this;
  }

  /**
   * Additional domain specific parameters for the recommendations. Allowed values: * &#x60;returnDocument&#x60;: Boolean. If set to true, the associated Document object will be returned in RecommendResponse.RecommendationResult.document. * &#x60;returnScore&#x60;: Boolean. If set to true, the recommendation &#39;score&#39; corresponding to each returned Document will be set in RecommendResponse.RecommendationResult.metadata. The given &#39;score&#39; indicates the probability of a Document conversion given the user&#39;s context and history. * &#x60;strictFiltering&#x60;: Boolean. True by default. If set to false, the service will return generic (unfiltered) popular Documents instead of empty if your filter blocks all recommendation results. * &#x60;diversityLevel&#x60;: String. Default empty. If set to be non-empty, then it needs to be one of: * &#x60;no-diversity&#x60; * &#x60;low-diversity&#x60; * &#x60;medium-diversity&#x60; * &#x60;high-diversity&#x60; * &#x60;auto-diversity&#x60; This gives request-level control and adjusts recommendation results based on Document category. * &#x60;attributeFilteringSyntax&#x60;: Boolean. False by default. If set to true, the &#x60;filter&#x60; field is interpreted according to the new, attribute-based syntax.
   * @return params
   */
  @javax.annotation.Nullable
  public Map<String, Object> getParams() {
    return params;
  }

  public void setParams(Map<String, Object> params) {
    this.params = params;
  }


  public GoogleCloudDiscoveryengineV1betaRecommendRequest userEvent(GoogleCloudDiscoveryengineV1betaUserEvent userEvent) {
    this.userEvent = userEvent;
    return this;
  }

  /**
   * Get userEvent
   * @return userEvent
   */
  @javax.annotation.Nullable
  public GoogleCloudDiscoveryengineV1betaUserEvent getUserEvent() {
    return userEvent;
  }

  public void setUserEvent(GoogleCloudDiscoveryengineV1betaUserEvent userEvent) {
    this.userEvent = userEvent;
  }


  public GoogleCloudDiscoveryengineV1betaRecommendRequest userLabels(Map<String, String> userLabels) {
    this.userLabels = userLabels;
    return this;
  }

  public GoogleCloudDiscoveryengineV1betaRecommendRequest putUserLabelsItem(String key, String userLabelsItem) {
    if (this.userLabels == null) {
      this.userLabels = new HashMap<>();
    }
    this.userLabels.put(key, userLabelsItem);
    return this;
  }

  /**
   * The user labels applied to a resource must meet the following requirements: * Each resource can have multiple labels, up to a maximum of 64. * Each label must be a key-value pair. * Keys have a minimum length of 1 character and a maximum length of 63 characters and cannot be empty. Values can be empty and have a maximum length of 63 characters. * Keys and values can contain only lowercase letters, numeric characters, underscores, and dashes. All characters must use UTF-8 encoding, and international characters are allowed. * The key portion of a label must be unique. However, you can use the same key with multiple resources. * Keys must start with a lowercase letter or international character. See [Requirements for labels](https://cloud.google.com/resource-manager/docs/creating-managing-labels#requirements) for more details.
   * @return userLabels
   */
  @javax.annotation.Nullable
  public Map<String, String> getUserLabels() {
    return userLabels;
  }

  public void setUserLabels(Map<String, String> userLabels) {
    this.userLabels = userLabels;
  }


  public GoogleCloudDiscoveryengineV1betaRecommendRequest validateOnly(Boolean validateOnly) {
    this.validateOnly = validateOnly;
    return this;
  }

  /**
   * Use validate only mode for this recommendation query. If set to true, a fake model will be used that returns arbitrary Document IDs. Note that the validate only mode should only be used for testing the API, or if the model is not ready.
   * @return validateOnly
   */
  @javax.annotation.Nullable
  public Boolean getValidateOnly() {
    return validateOnly;
  }

  public void setValidateOnly(Boolean validateOnly) {
    this.validateOnly = validateOnly;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudDiscoveryengineV1betaRecommendRequest googleCloudDiscoveryengineV1betaRecommendRequest = (GoogleCloudDiscoveryengineV1betaRecommendRequest) o;
    return Objects.equals(this.filter, googleCloudDiscoveryengineV1betaRecommendRequest.filter) &&
        Objects.equals(this.pageSize, googleCloudDiscoveryengineV1betaRecommendRequest.pageSize) &&
        Objects.equals(this.params, googleCloudDiscoveryengineV1betaRecommendRequest.params) &&
        Objects.equals(this.userEvent, googleCloudDiscoveryengineV1betaRecommendRequest.userEvent) &&
        Objects.equals(this.userLabels, googleCloudDiscoveryengineV1betaRecommendRequest.userLabels) &&
        Objects.equals(this.validateOnly, googleCloudDiscoveryengineV1betaRecommendRequest.validateOnly);
  }

  @Override
  public int hashCode() {
    return Objects.hash(filter, pageSize, params, userEvent, userLabels, validateOnly);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudDiscoveryengineV1betaRecommendRequest {\n");
    sb.append("    filter: ").append(toIndentedString(filter)).append("\n");
    sb.append("    pageSize: ").append(toIndentedString(pageSize)).append("\n");
    sb.append("    params: ").append(toIndentedString(params)).append("\n");
    sb.append("    userEvent: ").append(toIndentedString(userEvent)).append("\n");
    sb.append("    userLabels: ").append(toIndentedString(userLabels)).append("\n");
    sb.append("    validateOnly: ").append(toIndentedString(validateOnly)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("filter");
    openapiFields.add("pageSize");
    openapiFields.add("params");
    openapiFields.add("userEvent");
    openapiFields.add("userLabels");
    openapiFields.add("validateOnly");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudDiscoveryengineV1betaRecommendRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudDiscoveryengineV1betaRecommendRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudDiscoveryengineV1betaRecommendRequest is not found in the empty JSON string", GoogleCloudDiscoveryengineV1betaRecommendRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudDiscoveryengineV1betaRecommendRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudDiscoveryengineV1betaRecommendRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("filter") != null && !jsonObj.get("filter").isJsonNull()) && !jsonObj.get("filter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `filter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("filter").toString()));
      }
      // validate the optional field `userEvent`
      if (jsonObj.get("userEvent") != null && !jsonObj.get("userEvent").isJsonNull()) {
        GoogleCloudDiscoveryengineV1betaUserEvent.validateJsonElement(jsonObj.get("userEvent"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudDiscoveryengineV1betaRecommendRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudDiscoveryengineV1betaRecommendRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudDiscoveryengineV1betaRecommendRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudDiscoveryengineV1betaRecommendRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudDiscoveryengineV1betaRecommendRequest>() {
           @Override
           public void write(JsonWriter out, GoogleCloudDiscoveryengineV1betaRecommendRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudDiscoveryengineV1betaRecommendRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudDiscoveryengineV1betaRecommendRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudDiscoveryengineV1betaRecommendRequest
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudDiscoveryengineV1betaRecommendRequest
   */
  public static GoogleCloudDiscoveryengineV1betaRecommendRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudDiscoveryengineV1betaRecommendRequest.class);
  }

  /**
   * Convert an instance of GoogleCloudDiscoveryengineV1betaRecommendRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

