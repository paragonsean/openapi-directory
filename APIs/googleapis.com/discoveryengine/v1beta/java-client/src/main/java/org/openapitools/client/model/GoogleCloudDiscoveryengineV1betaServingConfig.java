/*
 * Discovery Engine API
 * Discovery Engine API.
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GoogleCloudDiscoveryengineV1betaEmbeddingConfig;
import org.openapitools.client.model.GoogleCloudDiscoveryengineV1betaServingConfigGenericConfig;
import org.openapitools.client.model.GoogleCloudDiscoveryengineV1betaServingConfigMediaConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Configures metadata that is used to generate serving time results (e.g. search results or recommendation predictions). The ServingConfig is passed in the search and predict request and generates results.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:39:37.233219-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudDiscoveryengineV1betaServingConfig {
  public static final String SERIALIZED_NAME_BOOST_CONTROL_IDS = "boostControlIds";
  @SerializedName(SERIALIZED_NAME_BOOST_CONTROL_IDS)
  private List<String> boostControlIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private String createTime;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_DISSOCIATE_CONTROL_IDS = "dissociateControlIds";
  @SerializedName(SERIALIZED_NAME_DISSOCIATE_CONTROL_IDS)
  private List<String> dissociateControlIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_DIVERSITY_LEVEL = "diversityLevel";
  @SerializedName(SERIALIZED_NAME_DIVERSITY_LEVEL)
  private String diversityLevel;

  public static final String SERIALIZED_NAME_EMBEDDING_CONFIG = "embeddingConfig";
  @SerializedName(SERIALIZED_NAME_EMBEDDING_CONFIG)
  private GoogleCloudDiscoveryengineV1betaEmbeddingConfig embeddingConfig;

  public static final String SERIALIZED_NAME_FILTER_CONTROL_IDS = "filterControlIds";
  @SerializedName(SERIALIZED_NAME_FILTER_CONTROL_IDS)
  private List<String> filterControlIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_GENERIC_CONFIG = "genericConfig";
  @SerializedName(SERIALIZED_NAME_GENERIC_CONFIG)
  private GoogleCloudDiscoveryengineV1betaServingConfigGenericConfig genericConfig;

  public static final String SERIALIZED_NAME_IGNORE_CONTROL_IDS = "ignoreControlIds";
  @SerializedName(SERIALIZED_NAME_IGNORE_CONTROL_IDS)
  private List<String> ignoreControlIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_MEDIA_CONFIG = "mediaConfig";
  @SerializedName(SERIALIZED_NAME_MEDIA_CONFIG)
  private GoogleCloudDiscoveryengineV1betaServingConfigMediaConfig mediaConfig;

  public static final String SERIALIZED_NAME_MODEL_ID = "modelId";
  @SerializedName(SERIALIZED_NAME_MODEL_ID)
  private String modelId;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_ONEWAY_SYNONYMS_CONTROL_IDS = "onewaySynonymsControlIds";
  @SerializedName(SERIALIZED_NAME_ONEWAY_SYNONYMS_CONTROL_IDS)
  private List<String> onewaySynonymsControlIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_RANKING_EXPRESSION = "rankingExpression";
  @SerializedName(SERIALIZED_NAME_RANKING_EXPRESSION)
  private String rankingExpression;

  public static final String SERIALIZED_NAME_REDIRECT_CONTROL_IDS = "redirectControlIds";
  @SerializedName(SERIALIZED_NAME_REDIRECT_CONTROL_IDS)
  private List<String> redirectControlIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_REPLACEMENT_CONTROL_IDS = "replacementControlIds";
  @SerializedName(SERIALIZED_NAME_REPLACEMENT_CONTROL_IDS)
  private List<String> replacementControlIds = new ArrayList<>();

  /**
   * Required. Immutable. Specifies the solution type that a serving config can be associated with.
   */
  @JsonAdapter(SolutionTypeEnum.Adapter.class)
  public enum SolutionTypeEnum {
    UNSPECIFIED("SOLUTION_TYPE_UNSPECIFIED"),
    
    RECOMMENDATION("SOLUTION_TYPE_RECOMMENDATION"),
    
    SEARCH("SOLUTION_TYPE_SEARCH"),
    
    CHAT("SOLUTION_TYPE_CHAT");

    private String value;

    SolutionTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SolutionTypeEnum fromValue(String value) {
      for (SolutionTypeEnum b : SolutionTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SolutionTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SolutionTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SolutionTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SolutionTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SolutionTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SOLUTION_TYPE = "solutionType";
  @SerializedName(SERIALIZED_NAME_SOLUTION_TYPE)
  private SolutionTypeEnum solutionType;

  public static final String SERIALIZED_NAME_SYNONYMS_CONTROL_IDS = "synonymsControlIds";
  @SerializedName(SERIALIZED_NAME_SYNONYMS_CONTROL_IDS)
  private List<String> synonymsControlIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_UPDATE_TIME = "updateTime";
  @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
  private String updateTime;

  public GoogleCloudDiscoveryengineV1betaServingConfig() {
  }

  public GoogleCloudDiscoveryengineV1betaServingConfig(
     String createTime, 
     String updateTime
  ) {
    this();
    this.createTime = createTime;
    this.updateTime = updateTime;
  }

  public GoogleCloudDiscoveryengineV1betaServingConfig boostControlIds(List<String> boostControlIds) {
    this.boostControlIds = boostControlIds;
    return this;
  }

  public GoogleCloudDiscoveryengineV1betaServingConfig addBoostControlIdsItem(String boostControlIdsItem) {
    if (this.boostControlIds == null) {
      this.boostControlIds = new ArrayList<>();
    }
    this.boostControlIds.add(boostControlIdsItem);
    return this;
  }

  /**
   * Boost controls to use in serving path. All triggered boost controls will be applied. Boost controls must be in the same data store as the serving config. Maximum of 20 boost controls.
   * @return boostControlIds
   */
  @javax.annotation.Nullable
  public List<String> getBoostControlIds() {
    return boostControlIds;
  }

  public void setBoostControlIds(List<String> boostControlIds) {
    this.boostControlIds = boostControlIds;
  }


  /**
   * Output only. ServingConfig created timestamp.
   * @return createTime
   */
  @javax.annotation.Nullable
  public String getCreateTime() {
    return createTime;
  }



  public GoogleCloudDiscoveryengineV1betaServingConfig displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * Required. The human readable serving config display name. Used in Discovery UI. This field must be a UTF-8 encoded string with a length limit of 128 characters. Otherwise, an INVALID_ARGUMENT error is returned.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public GoogleCloudDiscoveryengineV1betaServingConfig dissociateControlIds(List<String> dissociateControlIds) {
    this.dissociateControlIds = dissociateControlIds;
    return this;
  }

  public GoogleCloudDiscoveryengineV1betaServingConfig addDissociateControlIdsItem(String dissociateControlIdsItem) {
    if (this.dissociateControlIds == null) {
      this.dissociateControlIds = new ArrayList<>();
    }
    this.dissociateControlIds.add(dissociateControlIdsItem);
    return this;
  }

  /**
   * Condition do not associate specifications. If multiple do not associate conditions match, all matching do not associate controls in the list will execute. Order does not matter. Maximum number of specifications is 100. Can only be set if SolutionType is SOLUTION_TYPE_SEARCH.
   * @return dissociateControlIds
   */
  @javax.annotation.Nullable
  public List<String> getDissociateControlIds() {
    return dissociateControlIds;
  }

  public void setDissociateControlIds(List<String> dissociateControlIds) {
    this.dissociateControlIds = dissociateControlIds;
  }


  public GoogleCloudDiscoveryengineV1betaServingConfig diversityLevel(String diversityLevel) {
    this.diversityLevel = diversityLevel;
    return this;
  }

  /**
   * How much diversity to use in recommendation model results e.g. &#x60;medium-diversity&#x60; or &#x60;high-diversity&#x60;. Currently supported values: * &#x60;no-diversity&#x60; * &#x60;low-diversity&#x60; * &#x60;medium-diversity&#x60; * &#x60;high-diversity&#x60; * &#x60;auto-diversity&#x60; If not specified, we choose default based on recommendation model type. Default value: &#x60;no-diversity&#x60;. Can only be set if SolutionType is SOLUTION_TYPE_RECOMMENDATION.
   * @return diversityLevel
   */
  @javax.annotation.Nullable
  public String getDiversityLevel() {
    return diversityLevel;
  }

  public void setDiversityLevel(String diversityLevel) {
    this.diversityLevel = diversityLevel;
  }


  public GoogleCloudDiscoveryengineV1betaServingConfig embeddingConfig(GoogleCloudDiscoveryengineV1betaEmbeddingConfig embeddingConfig) {
    this.embeddingConfig = embeddingConfig;
    return this;
  }

  /**
   * Get embeddingConfig
   * @return embeddingConfig
   */
  @javax.annotation.Nullable
  public GoogleCloudDiscoveryengineV1betaEmbeddingConfig getEmbeddingConfig() {
    return embeddingConfig;
  }

  public void setEmbeddingConfig(GoogleCloudDiscoveryengineV1betaEmbeddingConfig embeddingConfig) {
    this.embeddingConfig = embeddingConfig;
  }


  public GoogleCloudDiscoveryengineV1betaServingConfig filterControlIds(List<String> filterControlIds) {
    this.filterControlIds = filterControlIds;
    return this;
  }

  public GoogleCloudDiscoveryengineV1betaServingConfig addFilterControlIdsItem(String filterControlIdsItem) {
    if (this.filterControlIds == null) {
      this.filterControlIds = new ArrayList<>();
    }
    this.filterControlIds.add(filterControlIdsItem);
    return this;
  }

  /**
   * Filter controls to use in serving path. All triggered filter controls will be applied. Filter controls must be in the same data store as the serving config. Maximum of 20 filter controls.
   * @return filterControlIds
   */
  @javax.annotation.Nullable
  public List<String> getFilterControlIds() {
    return filterControlIds;
  }

  public void setFilterControlIds(List<String> filterControlIds) {
    this.filterControlIds = filterControlIds;
  }


  public GoogleCloudDiscoveryengineV1betaServingConfig genericConfig(GoogleCloudDiscoveryengineV1betaServingConfigGenericConfig genericConfig) {
    this.genericConfig = genericConfig;
    return this;
  }

  /**
   * Get genericConfig
   * @return genericConfig
   */
  @javax.annotation.Nullable
  public GoogleCloudDiscoveryengineV1betaServingConfigGenericConfig getGenericConfig() {
    return genericConfig;
  }

  public void setGenericConfig(GoogleCloudDiscoveryengineV1betaServingConfigGenericConfig genericConfig) {
    this.genericConfig = genericConfig;
  }


  public GoogleCloudDiscoveryengineV1betaServingConfig ignoreControlIds(List<String> ignoreControlIds) {
    this.ignoreControlIds = ignoreControlIds;
    return this;
  }

  public GoogleCloudDiscoveryengineV1betaServingConfig addIgnoreControlIdsItem(String ignoreControlIdsItem) {
    if (this.ignoreControlIds == null) {
      this.ignoreControlIds = new ArrayList<>();
    }
    this.ignoreControlIds.add(ignoreControlIdsItem);
    return this;
  }

  /**
   * Condition ignore specifications. If multiple ignore conditions match, all matching ignore controls in the list will execute. Order does not matter. Maximum number of specifications is 100.
   * @return ignoreControlIds
   */
  @javax.annotation.Nullable
  public List<String> getIgnoreControlIds() {
    return ignoreControlIds;
  }

  public void setIgnoreControlIds(List<String> ignoreControlIds) {
    this.ignoreControlIds = ignoreControlIds;
  }


  public GoogleCloudDiscoveryengineV1betaServingConfig mediaConfig(GoogleCloudDiscoveryengineV1betaServingConfigMediaConfig mediaConfig) {
    this.mediaConfig = mediaConfig;
    return this;
  }

  /**
   * Get mediaConfig
   * @return mediaConfig
   */
  @javax.annotation.Nullable
  public GoogleCloudDiscoveryengineV1betaServingConfigMediaConfig getMediaConfig() {
    return mediaConfig;
  }

  public void setMediaConfig(GoogleCloudDiscoveryengineV1betaServingConfigMediaConfig mediaConfig) {
    this.mediaConfig = mediaConfig;
  }


  public GoogleCloudDiscoveryengineV1betaServingConfig modelId(String modelId) {
    this.modelId = modelId;
    return this;
  }

  /**
   * The id of the model to use at serving time. Currently only RecommendationModels are supported. Can be changed but only to a compatible model (e.g. others-you-may-like CTR to others-you-may-like CVR). Required when SolutionType is SOLUTION_TYPE_RECOMMENDATION.
   * @return modelId
   */
  @javax.annotation.Nullable
  public String getModelId() {
    return modelId;
  }

  public void setModelId(String modelId) {
    this.modelId = modelId;
  }


  public GoogleCloudDiscoveryengineV1betaServingConfig name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Immutable. Fully qualified name &#x60;projects/{project}/locations/{location}/collections/{collection_id}/dataStores/{data_store_id}/servingConfigs/{serving_config_id}&#x60;
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public GoogleCloudDiscoveryengineV1betaServingConfig onewaySynonymsControlIds(List<String> onewaySynonymsControlIds) {
    this.onewaySynonymsControlIds = onewaySynonymsControlIds;
    return this;
  }

  public GoogleCloudDiscoveryengineV1betaServingConfig addOnewaySynonymsControlIdsItem(String onewaySynonymsControlIdsItem) {
    if (this.onewaySynonymsControlIds == null) {
      this.onewaySynonymsControlIds = new ArrayList<>();
    }
    this.onewaySynonymsControlIds.add(onewaySynonymsControlIdsItem);
    return this;
  }

  /**
   * Condition oneway synonyms specifications. If multiple oneway synonyms conditions match, all matching oneway synonyms controls in the list will execute. Maximum number of specifications is 100. Can only be set if SolutionType is SOLUTION_TYPE_SEARCH.
   * @return onewaySynonymsControlIds
   */
  @javax.annotation.Nullable
  public List<String> getOnewaySynonymsControlIds() {
    return onewaySynonymsControlIds;
  }

  public void setOnewaySynonymsControlIds(List<String> onewaySynonymsControlIds) {
    this.onewaySynonymsControlIds = onewaySynonymsControlIds;
  }


  public GoogleCloudDiscoveryengineV1betaServingConfig rankingExpression(String rankingExpression) {
    this.rankingExpression = rankingExpression;
    return this;
  }

  /**
   * The ranking expression controls the customized ranking on retrieval documents. To leverage this, document embedding is required. The ranking expression setting in ServingConfig applies to all search requests served by the serving config. However, if SearchRequest.ranking_expression is specified, it overrides the ServingConfig ranking expression. The ranking expression is a single function or multiple functions that are joined by \&quot;+\&quot;. * ranking_expression &#x3D; function, { \&quot; + \&quot;, function }; Supported functions: * double * relevance_score * double * dotProduct(embedding_field_path) Function variables: relevance_score: pre-defined keywords, used for measure relevance between query and document. embedding_field_path: the document embedding field used with query embedding vector. dotProduct: embedding function between embedding_field_path and query embedding vector. Example ranking expression: If document has an embedding field doc_embedding, the ranking expression could be 0.5 * relevance_score + 0.3 * dotProduct(doc_embedding).
   * @return rankingExpression
   */
  @javax.annotation.Nullable
  public String getRankingExpression() {
    return rankingExpression;
  }

  public void setRankingExpression(String rankingExpression) {
    this.rankingExpression = rankingExpression;
  }


  public GoogleCloudDiscoveryengineV1betaServingConfig redirectControlIds(List<String> redirectControlIds) {
    this.redirectControlIds = redirectControlIds;
    return this;
  }

  public GoogleCloudDiscoveryengineV1betaServingConfig addRedirectControlIdsItem(String redirectControlIdsItem) {
    if (this.redirectControlIds == null) {
      this.redirectControlIds = new ArrayList<>();
    }
    this.redirectControlIds.add(redirectControlIdsItem);
    return this;
  }

  /**
   * IDs of the redirect controls. Only the first triggered redirect action is applied, even if multiple apply. Maximum number of specifications is 100. Can only be set if SolutionType is SOLUTION_TYPE_SEARCH.
   * @return redirectControlIds
   */
  @javax.annotation.Nullable
  public List<String> getRedirectControlIds() {
    return redirectControlIds;
  }

  public void setRedirectControlIds(List<String> redirectControlIds) {
    this.redirectControlIds = redirectControlIds;
  }


  public GoogleCloudDiscoveryengineV1betaServingConfig replacementControlIds(List<String> replacementControlIds) {
    this.replacementControlIds = replacementControlIds;
    return this;
  }

  public GoogleCloudDiscoveryengineV1betaServingConfig addReplacementControlIdsItem(String replacementControlIdsItem) {
    if (this.replacementControlIds == null) {
      this.replacementControlIds = new ArrayList<>();
    }
    this.replacementControlIds.add(replacementControlIdsItem);
    return this;
  }

  /**
   * Condition replacement specifications. Applied according to the order in the list. A previously replaced term can not be re-replaced. Maximum number of specifications is 100. Can only be set if SolutionType is SOLUTION_TYPE_SEARCH.
   * @return replacementControlIds
   */
  @javax.annotation.Nullable
  public List<String> getReplacementControlIds() {
    return replacementControlIds;
  }

  public void setReplacementControlIds(List<String> replacementControlIds) {
    this.replacementControlIds = replacementControlIds;
  }


  public GoogleCloudDiscoveryengineV1betaServingConfig solutionType(SolutionTypeEnum solutionType) {
    this.solutionType = solutionType;
    return this;
  }

  /**
   * Required. Immutable. Specifies the solution type that a serving config can be associated with.
   * @return solutionType
   */
  @javax.annotation.Nullable
  public SolutionTypeEnum getSolutionType() {
    return solutionType;
  }

  public void setSolutionType(SolutionTypeEnum solutionType) {
    this.solutionType = solutionType;
  }


  public GoogleCloudDiscoveryengineV1betaServingConfig synonymsControlIds(List<String> synonymsControlIds) {
    this.synonymsControlIds = synonymsControlIds;
    return this;
  }

  public GoogleCloudDiscoveryengineV1betaServingConfig addSynonymsControlIdsItem(String synonymsControlIdsItem) {
    if (this.synonymsControlIds == null) {
      this.synonymsControlIds = new ArrayList<>();
    }
    this.synonymsControlIds.add(synonymsControlIdsItem);
    return this;
  }

  /**
   * Condition synonyms specifications. If multiple synonyms conditions match, all matching synonyms controls in the list will execute. Maximum number of specifications is 100. Can only be set if SolutionType is SOLUTION_TYPE_SEARCH.
   * @return synonymsControlIds
   */
  @javax.annotation.Nullable
  public List<String> getSynonymsControlIds() {
    return synonymsControlIds;
  }

  public void setSynonymsControlIds(List<String> synonymsControlIds) {
    this.synonymsControlIds = synonymsControlIds;
  }


  /**
   * Output only. ServingConfig updated timestamp.
   * @return updateTime
   */
  @javax.annotation.Nullable
  public String getUpdateTime() {
    return updateTime;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudDiscoveryengineV1betaServingConfig googleCloudDiscoveryengineV1betaServingConfig = (GoogleCloudDiscoveryengineV1betaServingConfig) o;
    return Objects.equals(this.boostControlIds, googleCloudDiscoveryengineV1betaServingConfig.boostControlIds) &&
        Objects.equals(this.createTime, googleCloudDiscoveryengineV1betaServingConfig.createTime) &&
        Objects.equals(this.displayName, googleCloudDiscoveryengineV1betaServingConfig.displayName) &&
        Objects.equals(this.dissociateControlIds, googleCloudDiscoveryengineV1betaServingConfig.dissociateControlIds) &&
        Objects.equals(this.diversityLevel, googleCloudDiscoveryengineV1betaServingConfig.diversityLevel) &&
        Objects.equals(this.embeddingConfig, googleCloudDiscoveryengineV1betaServingConfig.embeddingConfig) &&
        Objects.equals(this.filterControlIds, googleCloudDiscoveryengineV1betaServingConfig.filterControlIds) &&
        Objects.equals(this.genericConfig, googleCloudDiscoveryengineV1betaServingConfig.genericConfig) &&
        Objects.equals(this.ignoreControlIds, googleCloudDiscoveryengineV1betaServingConfig.ignoreControlIds) &&
        Objects.equals(this.mediaConfig, googleCloudDiscoveryengineV1betaServingConfig.mediaConfig) &&
        Objects.equals(this.modelId, googleCloudDiscoveryengineV1betaServingConfig.modelId) &&
        Objects.equals(this.name, googleCloudDiscoveryengineV1betaServingConfig.name) &&
        Objects.equals(this.onewaySynonymsControlIds, googleCloudDiscoveryengineV1betaServingConfig.onewaySynonymsControlIds) &&
        Objects.equals(this.rankingExpression, googleCloudDiscoveryengineV1betaServingConfig.rankingExpression) &&
        Objects.equals(this.redirectControlIds, googleCloudDiscoveryengineV1betaServingConfig.redirectControlIds) &&
        Objects.equals(this.replacementControlIds, googleCloudDiscoveryengineV1betaServingConfig.replacementControlIds) &&
        Objects.equals(this.solutionType, googleCloudDiscoveryengineV1betaServingConfig.solutionType) &&
        Objects.equals(this.synonymsControlIds, googleCloudDiscoveryengineV1betaServingConfig.synonymsControlIds) &&
        Objects.equals(this.updateTime, googleCloudDiscoveryengineV1betaServingConfig.updateTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(boostControlIds, createTime, displayName, dissociateControlIds, diversityLevel, embeddingConfig, filterControlIds, genericConfig, ignoreControlIds, mediaConfig, modelId, name, onewaySynonymsControlIds, rankingExpression, redirectControlIds, replacementControlIds, solutionType, synonymsControlIds, updateTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudDiscoveryengineV1betaServingConfig {\n");
    sb.append("    boostControlIds: ").append(toIndentedString(boostControlIds)).append("\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    dissociateControlIds: ").append(toIndentedString(dissociateControlIds)).append("\n");
    sb.append("    diversityLevel: ").append(toIndentedString(diversityLevel)).append("\n");
    sb.append("    embeddingConfig: ").append(toIndentedString(embeddingConfig)).append("\n");
    sb.append("    filterControlIds: ").append(toIndentedString(filterControlIds)).append("\n");
    sb.append("    genericConfig: ").append(toIndentedString(genericConfig)).append("\n");
    sb.append("    ignoreControlIds: ").append(toIndentedString(ignoreControlIds)).append("\n");
    sb.append("    mediaConfig: ").append(toIndentedString(mediaConfig)).append("\n");
    sb.append("    modelId: ").append(toIndentedString(modelId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    onewaySynonymsControlIds: ").append(toIndentedString(onewaySynonymsControlIds)).append("\n");
    sb.append("    rankingExpression: ").append(toIndentedString(rankingExpression)).append("\n");
    sb.append("    redirectControlIds: ").append(toIndentedString(redirectControlIds)).append("\n");
    sb.append("    replacementControlIds: ").append(toIndentedString(replacementControlIds)).append("\n");
    sb.append("    solutionType: ").append(toIndentedString(solutionType)).append("\n");
    sb.append("    synonymsControlIds: ").append(toIndentedString(synonymsControlIds)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("boostControlIds");
    openapiFields.add("createTime");
    openapiFields.add("displayName");
    openapiFields.add("dissociateControlIds");
    openapiFields.add("diversityLevel");
    openapiFields.add("embeddingConfig");
    openapiFields.add("filterControlIds");
    openapiFields.add("genericConfig");
    openapiFields.add("ignoreControlIds");
    openapiFields.add("mediaConfig");
    openapiFields.add("modelId");
    openapiFields.add("name");
    openapiFields.add("onewaySynonymsControlIds");
    openapiFields.add("rankingExpression");
    openapiFields.add("redirectControlIds");
    openapiFields.add("replacementControlIds");
    openapiFields.add("solutionType");
    openapiFields.add("synonymsControlIds");
    openapiFields.add("updateTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudDiscoveryengineV1betaServingConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudDiscoveryengineV1betaServingConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudDiscoveryengineV1betaServingConfig is not found in the empty JSON string", GoogleCloudDiscoveryengineV1betaServingConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudDiscoveryengineV1betaServingConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudDiscoveryengineV1betaServingConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("boostControlIds") != null && !jsonObj.get("boostControlIds").isJsonNull() && !jsonObj.get("boostControlIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `boostControlIds` to be an array in the JSON string but got `%s`", jsonObj.get("boostControlIds").toString()));
      }
      if ((jsonObj.get("createTime") != null && !jsonObj.get("createTime").isJsonNull()) && !jsonObj.get("createTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createTime").toString()));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("dissociateControlIds") != null && !jsonObj.get("dissociateControlIds").isJsonNull() && !jsonObj.get("dissociateControlIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `dissociateControlIds` to be an array in the JSON string but got `%s`", jsonObj.get("dissociateControlIds").toString()));
      }
      if ((jsonObj.get("diversityLevel") != null && !jsonObj.get("diversityLevel").isJsonNull()) && !jsonObj.get("diversityLevel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `diversityLevel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("diversityLevel").toString()));
      }
      // validate the optional field `embeddingConfig`
      if (jsonObj.get("embeddingConfig") != null && !jsonObj.get("embeddingConfig").isJsonNull()) {
        GoogleCloudDiscoveryengineV1betaEmbeddingConfig.validateJsonElement(jsonObj.get("embeddingConfig"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("filterControlIds") != null && !jsonObj.get("filterControlIds").isJsonNull() && !jsonObj.get("filterControlIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `filterControlIds` to be an array in the JSON string but got `%s`", jsonObj.get("filterControlIds").toString()));
      }
      // validate the optional field `genericConfig`
      if (jsonObj.get("genericConfig") != null && !jsonObj.get("genericConfig").isJsonNull()) {
        GoogleCloudDiscoveryengineV1betaServingConfigGenericConfig.validateJsonElement(jsonObj.get("genericConfig"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("ignoreControlIds") != null && !jsonObj.get("ignoreControlIds").isJsonNull() && !jsonObj.get("ignoreControlIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `ignoreControlIds` to be an array in the JSON string but got `%s`", jsonObj.get("ignoreControlIds").toString()));
      }
      // validate the optional field `mediaConfig`
      if (jsonObj.get("mediaConfig") != null && !jsonObj.get("mediaConfig").isJsonNull()) {
        GoogleCloudDiscoveryengineV1betaServingConfigMediaConfig.validateJsonElement(jsonObj.get("mediaConfig"));
      }
      if ((jsonObj.get("modelId") != null && !jsonObj.get("modelId").isJsonNull()) && !jsonObj.get("modelId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `modelId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("modelId").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("onewaySynonymsControlIds") != null && !jsonObj.get("onewaySynonymsControlIds").isJsonNull() && !jsonObj.get("onewaySynonymsControlIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `onewaySynonymsControlIds` to be an array in the JSON string but got `%s`", jsonObj.get("onewaySynonymsControlIds").toString()));
      }
      if ((jsonObj.get("rankingExpression") != null && !jsonObj.get("rankingExpression").isJsonNull()) && !jsonObj.get("rankingExpression").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rankingExpression` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rankingExpression").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("redirectControlIds") != null && !jsonObj.get("redirectControlIds").isJsonNull() && !jsonObj.get("redirectControlIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `redirectControlIds` to be an array in the JSON string but got `%s`", jsonObj.get("redirectControlIds").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("replacementControlIds") != null && !jsonObj.get("replacementControlIds").isJsonNull() && !jsonObj.get("replacementControlIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `replacementControlIds` to be an array in the JSON string but got `%s`", jsonObj.get("replacementControlIds").toString()));
      }
      if ((jsonObj.get("solutionType") != null && !jsonObj.get("solutionType").isJsonNull()) && !jsonObj.get("solutionType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `solutionType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("solutionType").toString()));
      }
      // validate the optional field `solutionType`
      if (jsonObj.get("solutionType") != null && !jsonObj.get("solutionType").isJsonNull()) {
        SolutionTypeEnum.validateJsonElement(jsonObj.get("solutionType"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("synonymsControlIds") != null && !jsonObj.get("synonymsControlIds").isJsonNull() && !jsonObj.get("synonymsControlIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `synonymsControlIds` to be an array in the JSON string but got `%s`", jsonObj.get("synonymsControlIds").toString()));
      }
      if ((jsonObj.get("updateTime") != null && !jsonObj.get("updateTime").isJsonNull()) && !jsonObj.get("updateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updateTime").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudDiscoveryengineV1betaServingConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudDiscoveryengineV1betaServingConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudDiscoveryengineV1betaServingConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudDiscoveryengineV1betaServingConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudDiscoveryengineV1betaServingConfig>() {
           @Override
           public void write(JsonWriter out, GoogleCloudDiscoveryengineV1betaServingConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudDiscoveryengineV1betaServingConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudDiscoveryengineV1betaServingConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudDiscoveryengineV1betaServingConfig
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudDiscoveryengineV1betaServingConfig
   */
  public static GoogleCloudDiscoveryengineV1betaServingConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudDiscoveryengineV1betaServingConfig.class);
  }

  /**
   * Convert an instance of GoogleCloudDiscoveryengineV1betaServingConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

