/*
 * Discovery Engine API
 * Discovery Engine API.
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GoogleCloudDiscoveryengineV1alphaDocumentProcessingConfig;
import org.openapitools.client.model.GoogleCloudDiscoveryengineV1alphaIdpConfig;
import org.openapitools.client.model.GoogleCloudDiscoveryengineV1alphaSchema;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DataStore captures global settings and configs at the DataStore level.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:39:37.233219-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudDiscoveryengineV1alphaDataStore {
  public static final String SERIALIZED_NAME_ACL_ENABLED = "aclEnabled";
  @SerializedName(SERIALIZED_NAME_ACL_ENABLED)
  private Boolean aclEnabled;

  /**
   * Immutable. The content config of the data store. If this field is unset, the server behavior defaults to ContentConfig.NO_CONTENT.
   */
  @JsonAdapter(ContentConfigEnum.Adapter.class)
  public enum ContentConfigEnum {
    CONTENT_CONFIG_UNSPECIFIED("CONTENT_CONFIG_UNSPECIFIED"),
    
    NO_CONTENT("NO_CONTENT"),
    
    CONTENT_REQUIRED("CONTENT_REQUIRED"),
    
    PUBLIC_WEBSITE("PUBLIC_WEBSITE");

    private String value;

    ContentConfigEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ContentConfigEnum fromValue(String value) {
      for (ContentConfigEnum b : ContentConfigEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ContentConfigEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ContentConfigEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ContentConfigEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ContentConfigEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ContentConfigEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CONTENT_CONFIG = "contentConfig";
  @SerializedName(SERIALIZED_NAME_CONTENT_CONFIG)
  private ContentConfigEnum contentConfig;

  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private String createTime;

  public static final String SERIALIZED_NAME_DEFAULT_SCHEMA_ID = "defaultSchemaId";
  @SerializedName(SERIALIZED_NAME_DEFAULT_SCHEMA_ID)
  private String defaultSchemaId;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_DOCUMENT_PROCESSING_CONFIG = "documentProcessingConfig";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_PROCESSING_CONFIG)
  private GoogleCloudDiscoveryengineV1alphaDocumentProcessingConfig documentProcessingConfig;

  public static final String SERIALIZED_NAME_IDP_CONFIG = "idpConfig";
  @SerializedName(SERIALIZED_NAME_IDP_CONFIG)
  private GoogleCloudDiscoveryengineV1alphaIdpConfig idpConfig;

  /**
   * Immutable. The industry vertical that the data store registers.
   */
  @JsonAdapter(IndustryVerticalEnum.Adapter.class)
  public enum IndustryVerticalEnum {
    INDUSTRY_VERTICAL_UNSPECIFIED("INDUSTRY_VERTICAL_UNSPECIFIED"),
    
    GENERIC("GENERIC"),
    
    MEDIA("MEDIA");

    private String value;

    IndustryVerticalEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static IndustryVerticalEnum fromValue(String value) {
      for (IndustryVerticalEnum b : IndustryVerticalEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<IndustryVerticalEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final IndustryVerticalEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public IndustryVerticalEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return IndustryVerticalEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      IndustryVerticalEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_INDUSTRY_VERTICAL = "industryVertical";
  @SerializedName(SERIALIZED_NAME_INDUSTRY_VERTICAL)
  private IndustryVerticalEnum industryVertical;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  /**
   * Gets or Sets solutionTypes
   */
  @JsonAdapter(SolutionTypesEnum.Adapter.class)
  public enum SolutionTypesEnum {
    UNSPECIFIED("SOLUTION_TYPE_UNSPECIFIED"),
    
    RECOMMENDATION("SOLUTION_TYPE_RECOMMENDATION"),
    
    SEARCH("SOLUTION_TYPE_SEARCH"),
    
    CHAT("SOLUTION_TYPE_CHAT");

    private String value;

    SolutionTypesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SolutionTypesEnum fromValue(String value) {
      for (SolutionTypesEnum b : SolutionTypesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SolutionTypesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SolutionTypesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SolutionTypesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SolutionTypesEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SolutionTypesEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SOLUTION_TYPES = "solutionTypes";
  @SerializedName(SERIALIZED_NAME_SOLUTION_TYPES)
  private List<SolutionTypesEnum> solutionTypes = new ArrayList<>();

  public static final String SERIALIZED_NAME_STARTING_SCHEMA = "startingSchema";
  @SerializedName(SERIALIZED_NAME_STARTING_SCHEMA)
  private GoogleCloudDiscoveryengineV1alphaSchema startingSchema;

  public GoogleCloudDiscoveryengineV1alphaDataStore() {
  }

  public GoogleCloudDiscoveryengineV1alphaDataStore(
     String createTime, 
     String defaultSchemaId
  ) {
    this();
    this.createTime = createTime;
    this.defaultSchemaId = defaultSchemaId;
  }

  public GoogleCloudDiscoveryengineV1alphaDataStore aclEnabled(Boolean aclEnabled) {
    this.aclEnabled = aclEnabled;
    return this;
  }

  /**
   * Immutable. Whether data in the DataStore has ACL information. If set to &#x60;true&#x60;, the source data must have ACL. ACL will be ingested when data is ingested by DocumentService.ImportDocuments methods. When ACL is enabled for the DataStore, Document can&#39;t be accessed by calling DocumentService.GetDocument or DocumentService.ListDocuments. Currently ACL is only supported in &#x60;GENERIC&#x60; industry vertical with non-&#x60;PUBLIC_WEBSITE&#x60; content config.
   * @return aclEnabled
   */
  @javax.annotation.Nullable
  public Boolean getAclEnabled() {
    return aclEnabled;
  }

  public void setAclEnabled(Boolean aclEnabled) {
    this.aclEnabled = aclEnabled;
  }


  public GoogleCloudDiscoveryengineV1alphaDataStore contentConfig(ContentConfigEnum contentConfig) {
    this.contentConfig = contentConfig;
    return this;
  }

  /**
   * Immutable. The content config of the data store. If this field is unset, the server behavior defaults to ContentConfig.NO_CONTENT.
   * @return contentConfig
   */
  @javax.annotation.Nullable
  public ContentConfigEnum getContentConfig() {
    return contentConfig;
  }

  public void setContentConfig(ContentConfigEnum contentConfig) {
    this.contentConfig = contentConfig;
  }


  /**
   * Output only. Timestamp the DataStore was created at.
   * @return createTime
   */
  @javax.annotation.Nullable
  public String getCreateTime() {
    return createTime;
  }



  /**
   * Output only. The id of the default Schema asscociated to this data store.
   * @return defaultSchemaId
   */
  @javax.annotation.Nullable
  public String getDefaultSchemaId() {
    return defaultSchemaId;
  }



  public GoogleCloudDiscoveryengineV1alphaDataStore displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * Required. The data store display name. This field must be a UTF-8 encoded string with a length limit of 128 characters. Otherwise, an INVALID_ARGUMENT error is returned.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public GoogleCloudDiscoveryengineV1alphaDataStore documentProcessingConfig(GoogleCloudDiscoveryengineV1alphaDocumentProcessingConfig documentProcessingConfig) {
    this.documentProcessingConfig = documentProcessingConfig;
    return this;
  }

  /**
   * Get documentProcessingConfig
   * @return documentProcessingConfig
   */
  @javax.annotation.Nullable
  public GoogleCloudDiscoveryengineV1alphaDocumentProcessingConfig getDocumentProcessingConfig() {
    return documentProcessingConfig;
  }

  public void setDocumentProcessingConfig(GoogleCloudDiscoveryengineV1alphaDocumentProcessingConfig documentProcessingConfig) {
    this.documentProcessingConfig = documentProcessingConfig;
  }


  public GoogleCloudDiscoveryengineV1alphaDataStore idpConfig(GoogleCloudDiscoveryengineV1alphaIdpConfig idpConfig) {
    this.idpConfig = idpConfig;
    return this;
  }

  /**
   * Get idpConfig
   * @return idpConfig
   */
  @javax.annotation.Nullable
  public GoogleCloudDiscoveryengineV1alphaIdpConfig getIdpConfig() {
    return idpConfig;
  }

  public void setIdpConfig(GoogleCloudDiscoveryengineV1alphaIdpConfig idpConfig) {
    this.idpConfig = idpConfig;
  }


  public GoogleCloudDiscoveryengineV1alphaDataStore industryVertical(IndustryVerticalEnum industryVertical) {
    this.industryVertical = industryVertical;
    return this;
  }

  /**
   * Immutable. The industry vertical that the data store registers.
   * @return industryVertical
   */
  @javax.annotation.Nullable
  public IndustryVerticalEnum getIndustryVertical() {
    return industryVertical;
  }

  public void setIndustryVertical(IndustryVerticalEnum industryVertical) {
    this.industryVertical = industryVertical;
  }


  public GoogleCloudDiscoveryengineV1alphaDataStore name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Immutable. The full resource name of the data store. Format: &#x60;projects/{project}/locations/{location}/collections/{collection_id}/dataStores/{data_store_id}&#x60;. This field must be a UTF-8 encoded string with a length limit of 1024 characters.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public GoogleCloudDiscoveryengineV1alphaDataStore solutionTypes(List<SolutionTypesEnum> solutionTypes) {
    this.solutionTypes = solutionTypes;
    return this;
  }

  public GoogleCloudDiscoveryengineV1alphaDataStore addSolutionTypesItem(SolutionTypesEnum solutionTypesItem) {
    if (this.solutionTypes == null) {
      this.solutionTypes = new ArrayList<>();
    }
    this.solutionTypes.add(solutionTypesItem);
    return this;
  }

  /**
   * The solutions that the data store enrolls. Available solutions for each industry_vertical: * &#x60;MEDIA&#x60;: &#x60;SOLUTION_TYPE_RECOMMENDATION&#x60; and &#x60;SOLUTION_TYPE_SEARCH&#x60;. * &#x60;SITE_SEARCH&#x60;: &#x60;SOLUTION_TYPE_SEARCH&#x60; is automatically enrolled. Other solutions cannot be enrolled.
   * @return solutionTypes
   */
  @javax.annotation.Nullable
  public List<SolutionTypesEnum> getSolutionTypes() {
    return solutionTypes;
  }

  public void setSolutionTypes(List<SolutionTypesEnum> solutionTypes) {
    this.solutionTypes = solutionTypes;
  }


  public GoogleCloudDiscoveryengineV1alphaDataStore startingSchema(GoogleCloudDiscoveryengineV1alphaSchema startingSchema) {
    this.startingSchema = startingSchema;
    return this;
  }

  /**
   * Get startingSchema
   * @return startingSchema
   */
  @javax.annotation.Nullable
  public GoogleCloudDiscoveryengineV1alphaSchema getStartingSchema() {
    return startingSchema;
  }

  public void setStartingSchema(GoogleCloudDiscoveryengineV1alphaSchema startingSchema) {
    this.startingSchema = startingSchema;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudDiscoveryengineV1alphaDataStore googleCloudDiscoveryengineV1alphaDataStore = (GoogleCloudDiscoveryengineV1alphaDataStore) o;
    return Objects.equals(this.aclEnabled, googleCloudDiscoveryengineV1alphaDataStore.aclEnabled) &&
        Objects.equals(this.contentConfig, googleCloudDiscoveryengineV1alphaDataStore.contentConfig) &&
        Objects.equals(this.createTime, googleCloudDiscoveryengineV1alphaDataStore.createTime) &&
        Objects.equals(this.defaultSchemaId, googleCloudDiscoveryengineV1alphaDataStore.defaultSchemaId) &&
        Objects.equals(this.displayName, googleCloudDiscoveryengineV1alphaDataStore.displayName) &&
        Objects.equals(this.documentProcessingConfig, googleCloudDiscoveryengineV1alphaDataStore.documentProcessingConfig) &&
        Objects.equals(this.idpConfig, googleCloudDiscoveryengineV1alphaDataStore.idpConfig) &&
        Objects.equals(this.industryVertical, googleCloudDiscoveryengineV1alphaDataStore.industryVertical) &&
        Objects.equals(this.name, googleCloudDiscoveryengineV1alphaDataStore.name) &&
        Objects.equals(this.solutionTypes, googleCloudDiscoveryengineV1alphaDataStore.solutionTypes) &&
        Objects.equals(this.startingSchema, googleCloudDiscoveryengineV1alphaDataStore.startingSchema);
  }

  @Override
  public int hashCode() {
    return Objects.hash(aclEnabled, contentConfig, createTime, defaultSchemaId, displayName, documentProcessingConfig, idpConfig, industryVertical, name, solutionTypes, startingSchema);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudDiscoveryengineV1alphaDataStore {\n");
    sb.append("    aclEnabled: ").append(toIndentedString(aclEnabled)).append("\n");
    sb.append("    contentConfig: ").append(toIndentedString(contentConfig)).append("\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    defaultSchemaId: ").append(toIndentedString(defaultSchemaId)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    documentProcessingConfig: ").append(toIndentedString(documentProcessingConfig)).append("\n");
    sb.append("    idpConfig: ").append(toIndentedString(idpConfig)).append("\n");
    sb.append("    industryVertical: ").append(toIndentedString(industryVertical)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    solutionTypes: ").append(toIndentedString(solutionTypes)).append("\n");
    sb.append("    startingSchema: ").append(toIndentedString(startingSchema)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("aclEnabled");
    openapiFields.add("contentConfig");
    openapiFields.add("createTime");
    openapiFields.add("defaultSchemaId");
    openapiFields.add("displayName");
    openapiFields.add("documentProcessingConfig");
    openapiFields.add("idpConfig");
    openapiFields.add("industryVertical");
    openapiFields.add("name");
    openapiFields.add("solutionTypes");
    openapiFields.add("startingSchema");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudDiscoveryengineV1alphaDataStore
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudDiscoveryengineV1alphaDataStore.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudDiscoveryengineV1alphaDataStore is not found in the empty JSON string", GoogleCloudDiscoveryengineV1alphaDataStore.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudDiscoveryengineV1alphaDataStore.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudDiscoveryengineV1alphaDataStore` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("contentConfig") != null && !jsonObj.get("contentConfig").isJsonNull()) && !jsonObj.get("contentConfig").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contentConfig` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contentConfig").toString()));
      }
      // validate the optional field `contentConfig`
      if (jsonObj.get("contentConfig") != null && !jsonObj.get("contentConfig").isJsonNull()) {
        ContentConfigEnum.validateJsonElement(jsonObj.get("contentConfig"));
      }
      if ((jsonObj.get("createTime") != null && !jsonObj.get("createTime").isJsonNull()) && !jsonObj.get("createTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createTime").toString()));
      }
      if ((jsonObj.get("defaultSchemaId") != null && !jsonObj.get("defaultSchemaId").isJsonNull()) && !jsonObj.get("defaultSchemaId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `defaultSchemaId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("defaultSchemaId").toString()));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      // validate the optional field `documentProcessingConfig`
      if (jsonObj.get("documentProcessingConfig") != null && !jsonObj.get("documentProcessingConfig").isJsonNull()) {
        GoogleCloudDiscoveryengineV1alphaDocumentProcessingConfig.validateJsonElement(jsonObj.get("documentProcessingConfig"));
      }
      // validate the optional field `idpConfig`
      if (jsonObj.get("idpConfig") != null && !jsonObj.get("idpConfig").isJsonNull()) {
        GoogleCloudDiscoveryengineV1alphaIdpConfig.validateJsonElement(jsonObj.get("idpConfig"));
      }
      if ((jsonObj.get("industryVertical") != null && !jsonObj.get("industryVertical").isJsonNull()) && !jsonObj.get("industryVertical").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `industryVertical` to be a primitive type in the JSON string but got `%s`", jsonObj.get("industryVertical").toString()));
      }
      // validate the optional field `industryVertical`
      if (jsonObj.get("industryVertical") != null && !jsonObj.get("industryVertical").isJsonNull()) {
        IndustryVerticalEnum.validateJsonElement(jsonObj.get("industryVertical"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("solutionTypes") != null && !jsonObj.get("solutionTypes").isJsonNull() && !jsonObj.get("solutionTypes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `solutionTypes` to be an array in the JSON string but got `%s`", jsonObj.get("solutionTypes").toString()));
      }
      // validate the optional field `startingSchema`
      if (jsonObj.get("startingSchema") != null && !jsonObj.get("startingSchema").isJsonNull()) {
        GoogleCloudDiscoveryengineV1alphaSchema.validateJsonElement(jsonObj.get("startingSchema"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudDiscoveryengineV1alphaDataStore.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudDiscoveryengineV1alphaDataStore' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudDiscoveryengineV1alphaDataStore> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudDiscoveryengineV1alphaDataStore.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudDiscoveryengineV1alphaDataStore>() {
           @Override
           public void write(JsonWriter out, GoogleCloudDiscoveryengineV1alphaDataStore value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudDiscoveryengineV1alphaDataStore read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudDiscoveryengineV1alphaDataStore given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudDiscoveryengineV1alphaDataStore
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudDiscoveryengineV1alphaDataStore
   */
  public static GoogleCloudDiscoveryengineV1alphaDataStore fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudDiscoveryengineV1alphaDataStore.class);
  }

  /**
   * Convert an instance of GoogleCloudDiscoveryengineV1alphaDataStore to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

