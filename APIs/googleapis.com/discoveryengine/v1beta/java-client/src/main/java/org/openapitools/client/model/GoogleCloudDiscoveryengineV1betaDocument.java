/*
 * Discovery Engine API
 * Discovery Engine API.
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.GoogleCloudDiscoveryengineV1betaDocumentContent;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Document captures all raw metadata information of items to be recommended or searched.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:39:37.233219-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudDiscoveryengineV1betaDocument {
  public static final String SERIALIZED_NAME_CONTENT = "content";
  @SerializedName(SERIALIZED_NAME_CONTENT)
  private GoogleCloudDiscoveryengineV1betaDocumentContent content;

  public static final String SERIALIZED_NAME_DERIVED_STRUCT_DATA = "derivedStructData";
  @SerializedName(SERIALIZED_NAME_DERIVED_STRUCT_DATA)
  private Map<String, Object> derivedStructData = new HashMap<>();

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_INDEX_TIME = "indexTime";
  @SerializedName(SERIALIZED_NAME_INDEX_TIME)
  private String indexTime;

  public static final String SERIALIZED_NAME_JSON_DATA = "jsonData";
  @SerializedName(SERIALIZED_NAME_JSON_DATA)
  private String jsonData;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PARENT_DOCUMENT_ID = "parentDocumentId";
  @SerializedName(SERIALIZED_NAME_PARENT_DOCUMENT_ID)
  private String parentDocumentId;

  public static final String SERIALIZED_NAME_SCHEMA_ID = "schemaId";
  @SerializedName(SERIALIZED_NAME_SCHEMA_ID)
  private String schemaId;

  public static final String SERIALIZED_NAME_STRUCT_DATA = "structData";
  @SerializedName(SERIALIZED_NAME_STRUCT_DATA)
  private Map<String, Object> structData = new HashMap<>();

  public GoogleCloudDiscoveryengineV1betaDocument() {
  }

  public GoogleCloudDiscoveryengineV1betaDocument(
     Map<String, Object> derivedStructData, 
     String indexTime
  ) {
    this();
    this.derivedStructData = derivedStructData;
    this.indexTime = indexTime;
  }

  public GoogleCloudDiscoveryengineV1betaDocument content(GoogleCloudDiscoveryengineV1betaDocumentContent content) {
    this.content = content;
    return this;
  }

  /**
   * Get content
   * @return content
   */
  @javax.annotation.Nullable
  public GoogleCloudDiscoveryengineV1betaDocumentContent getContent() {
    return content;
  }

  public void setContent(GoogleCloudDiscoveryengineV1betaDocumentContent content) {
    this.content = content;
  }


  /**
   * Output only. This field is OUTPUT_ONLY. It contains derived data that are not in the original input document.
   * @return derivedStructData
   */
  @javax.annotation.Nullable
  public Map<String, Object> getDerivedStructData() {
    return derivedStructData;
  }



  public GoogleCloudDiscoveryengineV1betaDocument id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Immutable. The identifier of the document. Id should conform to [RFC-1034](https://tools.ietf.org/html/rfc1034) standard with a length limit of 63 characters.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  /**
   * Output only. The last time the document was indexed. If this field is set, the document could be returned in search results. This field is OUTPUT_ONLY. If this field is not populated, it means the document has never been indexed.
   * @return indexTime
   */
  @javax.annotation.Nullable
  public String getIndexTime() {
    return indexTime;
  }



  public GoogleCloudDiscoveryengineV1betaDocument jsonData(String jsonData) {
    this.jsonData = jsonData;
    return this;
  }

  /**
   * The JSON string representation of the document. It should conform to the registered Schema or an &#x60;INVALID_ARGUMENT&#x60; error is thrown.
   * @return jsonData
   */
  @javax.annotation.Nullable
  public String getJsonData() {
    return jsonData;
  }

  public void setJsonData(String jsonData) {
    this.jsonData = jsonData;
  }


  public GoogleCloudDiscoveryengineV1betaDocument name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Immutable. The full resource name of the document. Format: &#x60;projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}/branches/{branch}/documents/{document_id}&#x60;. This field must be a UTF-8 encoded string with a length limit of 1024 characters.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public GoogleCloudDiscoveryengineV1betaDocument parentDocumentId(String parentDocumentId) {
    this.parentDocumentId = parentDocumentId;
    return this;
  }

  /**
   * The identifier of the parent document. Currently supports at most two level document hierarchy. Id should conform to [RFC-1034](https://tools.ietf.org/html/rfc1034) standard with a length limit of 63 characters.
   * @return parentDocumentId
   */
  @javax.annotation.Nullable
  public String getParentDocumentId() {
    return parentDocumentId;
  }

  public void setParentDocumentId(String parentDocumentId) {
    this.parentDocumentId = parentDocumentId;
  }


  public GoogleCloudDiscoveryengineV1betaDocument schemaId(String schemaId) {
    this.schemaId = schemaId;
    return this;
  }

  /**
   * The identifier of the schema located in the same data store.
   * @return schemaId
   */
  @javax.annotation.Nullable
  public String getSchemaId() {
    return schemaId;
  }

  public void setSchemaId(String schemaId) {
    this.schemaId = schemaId;
  }


  public GoogleCloudDiscoveryengineV1betaDocument structData(Map<String, Object> structData) {
    this.structData = structData;
    return this;
  }

  public GoogleCloudDiscoveryengineV1betaDocument putStructDataItem(String key, Object structDataItem) {
    if (this.structData == null) {
      this.structData = new HashMap<>();
    }
    this.structData.put(key, structDataItem);
    return this;
  }

  /**
   * The structured JSON data for the document. It should conform to the registered Schema or an &#x60;INVALID_ARGUMENT&#x60; error is thrown.
   * @return structData
   */
  @javax.annotation.Nullable
  public Map<String, Object> getStructData() {
    return structData;
  }

  public void setStructData(Map<String, Object> structData) {
    this.structData = structData;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudDiscoveryengineV1betaDocument googleCloudDiscoveryengineV1betaDocument = (GoogleCloudDiscoveryengineV1betaDocument) o;
    return Objects.equals(this.content, googleCloudDiscoveryengineV1betaDocument.content) &&
        Objects.equals(this.derivedStructData, googleCloudDiscoveryengineV1betaDocument.derivedStructData) &&
        Objects.equals(this.id, googleCloudDiscoveryengineV1betaDocument.id) &&
        Objects.equals(this.indexTime, googleCloudDiscoveryengineV1betaDocument.indexTime) &&
        Objects.equals(this.jsonData, googleCloudDiscoveryengineV1betaDocument.jsonData) &&
        Objects.equals(this.name, googleCloudDiscoveryengineV1betaDocument.name) &&
        Objects.equals(this.parentDocumentId, googleCloudDiscoveryengineV1betaDocument.parentDocumentId) &&
        Objects.equals(this.schemaId, googleCloudDiscoveryengineV1betaDocument.schemaId) &&
        Objects.equals(this.structData, googleCloudDiscoveryengineV1betaDocument.structData);
  }

  @Override
  public int hashCode() {
    return Objects.hash(content, derivedStructData, id, indexTime, jsonData, name, parentDocumentId, schemaId, structData);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudDiscoveryengineV1betaDocument {\n");
    sb.append("    content: ").append(toIndentedString(content)).append("\n");
    sb.append("    derivedStructData: ").append(toIndentedString(derivedStructData)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    indexTime: ").append(toIndentedString(indexTime)).append("\n");
    sb.append("    jsonData: ").append(toIndentedString(jsonData)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    parentDocumentId: ").append(toIndentedString(parentDocumentId)).append("\n");
    sb.append("    schemaId: ").append(toIndentedString(schemaId)).append("\n");
    sb.append("    structData: ").append(toIndentedString(structData)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("content");
    openapiFields.add("derivedStructData");
    openapiFields.add("id");
    openapiFields.add("indexTime");
    openapiFields.add("jsonData");
    openapiFields.add("name");
    openapiFields.add("parentDocumentId");
    openapiFields.add("schemaId");
    openapiFields.add("structData");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudDiscoveryengineV1betaDocument
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudDiscoveryengineV1betaDocument.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudDiscoveryengineV1betaDocument is not found in the empty JSON string", GoogleCloudDiscoveryengineV1betaDocument.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudDiscoveryengineV1betaDocument.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudDiscoveryengineV1betaDocument` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `content`
      if (jsonObj.get("content") != null && !jsonObj.get("content").isJsonNull()) {
        GoogleCloudDiscoveryengineV1betaDocumentContent.validateJsonElement(jsonObj.get("content"));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("indexTime") != null && !jsonObj.get("indexTime").isJsonNull()) && !jsonObj.get("indexTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `indexTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("indexTime").toString()));
      }
      if ((jsonObj.get("jsonData") != null && !jsonObj.get("jsonData").isJsonNull()) && !jsonObj.get("jsonData").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `jsonData` to be a primitive type in the JSON string but got `%s`", jsonObj.get("jsonData").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("parentDocumentId") != null && !jsonObj.get("parentDocumentId").isJsonNull()) && !jsonObj.get("parentDocumentId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parentDocumentId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parentDocumentId").toString()));
      }
      if ((jsonObj.get("schemaId") != null && !jsonObj.get("schemaId").isJsonNull()) && !jsonObj.get("schemaId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `schemaId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("schemaId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudDiscoveryengineV1betaDocument.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudDiscoveryengineV1betaDocument' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudDiscoveryengineV1betaDocument> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudDiscoveryengineV1betaDocument.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudDiscoveryengineV1betaDocument>() {
           @Override
           public void write(JsonWriter out, GoogleCloudDiscoveryengineV1betaDocument value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudDiscoveryengineV1betaDocument read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudDiscoveryengineV1betaDocument given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudDiscoveryengineV1betaDocument
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudDiscoveryengineV1betaDocument
   */
  public static GoogleCloudDiscoveryengineV1betaDocument fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudDiscoveryengineV1betaDocument.class);
  }

  /**
   * Convert an instance of GoogleCloudDiscoveryengineV1betaDocument to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

