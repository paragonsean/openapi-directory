/*
 * Discovery Engine API
 * Discovery Engine API.
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The error payload that is populated on LRO import APIs, including the following: * &#x60;google.cloud.discoveryengine.v1alpha.DocumentService.ImportDocuments&#x60; * &#x60;google.cloud.discoveryengine.v1alpha.UserEventService.ImportUserEvents&#x60;
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:39:37.233219-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudDiscoveryengineLoggingImportErrorContext {
  public static final String SERIALIZED_NAME_DOCUMENT = "document";
  @SerializedName(SERIALIZED_NAME_DOCUMENT)
  private String document;

  public static final String SERIALIZED_NAME_GCS_PATH = "gcsPath";
  @SerializedName(SERIALIZED_NAME_GCS_PATH)
  private String gcsPath;

  public static final String SERIALIZED_NAME_LINE_NUMBER = "lineNumber";
  @SerializedName(SERIALIZED_NAME_LINE_NUMBER)
  private String lineNumber;

  public static final String SERIALIZED_NAME_OPERATION = "operation";
  @SerializedName(SERIALIZED_NAME_OPERATION)
  private String operation;

  public static final String SERIALIZED_NAME_USER_EVENT = "userEvent";
  @SerializedName(SERIALIZED_NAME_USER_EVENT)
  private String userEvent;

  public GoogleCloudDiscoveryengineLoggingImportErrorContext() {
  }

  public GoogleCloudDiscoveryengineLoggingImportErrorContext document(String document) {
    this.document = document;
    return this;
  }

  /**
   * The detailed content which caused the error on importing a document.
   * @return document
   */
  @javax.annotation.Nullable
  public String getDocument() {
    return document;
  }

  public void setDocument(String document) {
    this.document = document;
  }


  public GoogleCloudDiscoveryengineLoggingImportErrorContext gcsPath(String gcsPath) {
    this.gcsPath = gcsPath;
    return this;
  }

  /**
   * Google Cloud Storage file path of the import source. Can be set for batch operation error.
   * @return gcsPath
   */
  @javax.annotation.Nullable
  public String getGcsPath() {
    return gcsPath;
  }

  public void setGcsPath(String gcsPath) {
    this.gcsPath = gcsPath;
  }


  public GoogleCloudDiscoveryengineLoggingImportErrorContext lineNumber(String lineNumber) {
    this.lineNumber = lineNumber;
    return this;
  }

  /**
   * Line number of the content in file. Should be empty for permission or batch operation error.
   * @return lineNumber
   */
  @javax.annotation.Nullable
  public String getLineNumber() {
    return lineNumber;
  }

  public void setLineNumber(String lineNumber) {
    this.lineNumber = lineNumber;
  }


  public GoogleCloudDiscoveryengineLoggingImportErrorContext operation(String operation) {
    this.operation = operation;
    return this;
  }

  /**
   * The operation resource name of the LRO.
   * @return operation
   */
  @javax.annotation.Nullable
  public String getOperation() {
    return operation;
  }

  public void setOperation(String operation) {
    this.operation = operation;
  }


  public GoogleCloudDiscoveryengineLoggingImportErrorContext userEvent(String userEvent) {
    this.userEvent = userEvent;
    return this;
  }

  /**
   * The detailed content which caused the error on importing a user event.
   * @return userEvent
   */
  @javax.annotation.Nullable
  public String getUserEvent() {
    return userEvent;
  }

  public void setUserEvent(String userEvent) {
    this.userEvent = userEvent;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudDiscoveryengineLoggingImportErrorContext googleCloudDiscoveryengineLoggingImportErrorContext = (GoogleCloudDiscoveryengineLoggingImportErrorContext) o;
    return Objects.equals(this.document, googleCloudDiscoveryengineLoggingImportErrorContext.document) &&
        Objects.equals(this.gcsPath, googleCloudDiscoveryengineLoggingImportErrorContext.gcsPath) &&
        Objects.equals(this.lineNumber, googleCloudDiscoveryengineLoggingImportErrorContext.lineNumber) &&
        Objects.equals(this.operation, googleCloudDiscoveryengineLoggingImportErrorContext.operation) &&
        Objects.equals(this.userEvent, googleCloudDiscoveryengineLoggingImportErrorContext.userEvent);
  }

  @Override
  public int hashCode() {
    return Objects.hash(document, gcsPath, lineNumber, operation, userEvent);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudDiscoveryengineLoggingImportErrorContext {\n");
    sb.append("    document: ").append(toIndentedString(document)).append("\n");
    sb.append("    gcsPath: ").append(toIndentedString(gcsPath)).append("\n");
    sb.append("    lineNumber: ").append(toIndentedString(lineNumber)).append("\n");
    sb.append("    operation: ").append(toIndentedString(operation)).append("\n");
    sb.append("    userEvent: ").append(toIndentedString(userEvent)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("document");
    openapiFields.add("gcsPath");
    openapiFields.add("lineNumber");
    openapiFields.add("operation");
    openapiFields.add("userEvent");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudDiscoveryengineLoggingImportErrorContext
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudDiscoveryengineLoggingImportErrorContext.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudDiscoveryengineLoggingImportErrorContext is not found in the empty JSON string", GoogleCloudDiscoveryengineLoggingImportErrorContext.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudDiscoveryengineLoggingImportErrorContext.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudDiscoveryengineLoggingImportErrorContext` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("document") != null && !jsonObj.get("document").isJsonNull()) && !jsonObj.get("document").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `document` to be a primitive type in the JSON string but got `%s`", jsonObj.get("document").toString()));
      }
      if ((jsonObj.get("gcsPath") != null && !jsonObj.get("gcsPath").isJsonNull()) && !jsonObj.get("gcsPath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gcsPath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gcsPath").toString()));
      }
      if ((jsonObj.get("lineNumber") != null && !jsonObj.get("lineNumber").isJsonNull()) && !jsonObj.get("lineNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lineNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lineNumber").toString()));
      }
      if ((jsonObj.get("operation") != null && !jsonObj.get("operation").isJsonNull()) && !jsonObj.get("operation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `operation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("operation").toString()));
      }
      if ((jsonObj.get("userEvent") != null && !jsonObj.get("userEvent").isJsonNull()) && !jsonObj.get("userEvent").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userEvent` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userEvent").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudDiscoveryengineLoggingImportErrorContext.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudDiscoveryengineLoggingImportErrorContext' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudDiscoveryengineLoggingImportErrorContext> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudDiscoveryengineLoggingImportErrorContext.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudDiscoveryengineLoggingImportErrorContext>() {
           @Override
           public void write(JsonWriter out, GoogleCloudDiscoveryengineLoggingImportErrorContext value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudDiscoveryengineLoggingImportErrorContext read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudDiscoveryengineLoggingImportErrorContext given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudDiscoveryengineLoggingImportErrorContext
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudDiscoveryengineLoggingImportErrorContext
   */
  public static GoogleCloudDiscoveryengineLoggingImportErrorContext fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudDiscoveryengineLoggingImportErrorContext.class);
  }

  /**
   * Convert an instance of GoogleCloudDiscoveryengineLoggingImportErrorContext to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

