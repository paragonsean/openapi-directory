/*
 * Discovery Engine API
 * Discovery Engine API.
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Additional information of a recommendation engine.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:39:37.233219-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudDiscoveryengineV1alphaEngineRecommendationMetadata {
  /**
   * Output only. The state of data requirements for this engine: &#x60;DATA_OK&#x60; and &#x60;DATA_ERROR&#x60;. Engine cannot be trained if the data is in &#x60;DATA_ERROR&#x60; state. Engine can have &#x60;DATA_ERROR&#x60; state even if serving state is &#x60;ACTIVE&#x60;: engines were trained successfully before, but cannot be refreshed because the underlying engine no longer has sufficient data for training.
   */
  @JsonAdapter(DataStateEnum.Adapter.class)
  public enum DataStateEnum {
    STATE_UNSPECIFIED("DATA_STATE_UNSPECIFIED"),
    
    OK("DATA_OK"),
    
    ERROR("DATA_ERROR");

    private String value;

    DataStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DataStateEnum fromValue(String value) {
      for (DataStateEnum b : DataStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DataStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DataStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DataStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DataStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DataStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DATA_STATE = "dataState";
  @SerializedName(SERIALIZED_NAME_DATA_STATE)
  private DataStateEnum dataState;

  public static final String SERIALIZED_NAME_LAST_TUNE_TIME = "lastTuneTime";
  @SerializedName(SERIALIZED_NAME_LAST_TUNE_TIME)
  private String lastTuneTime;

  /**
   * Output only. The serving state of the engine: &#x60;ACTIVE&#x60;, &#x60;NOT_ACTIVE&#x60;.
   */
  @JsonAdapter(ServingStateEnum.Adapter.class)
  public enum ServingStateEnum {
    SERVING_STATE_UNSPECIFIED("SERVING_STATE_UNSPECIFIED"),
    
    INACTIVE("INACTIVE"),
    
    ACTIVE("ACTIVE"),
    
    TUNED("TUNED");

    private String value;

    ServingStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ServingStateEnum fromValue(String value) {
      for (ServingStateEnum b : ServingStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ServingStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ServingStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ServingStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ServingStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ServingStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SERVING_STATE = "servingState";
  @SerializedName(SERIALIZED_NAME_SERVING_STATE)
  private ServingStateEnum servingState;

  public static final String SERIALIZED_NAME_TUNING_OPERATION = "tuningOperation";
  @SerializedName(SERIALIZED_NAME_TUNING_OPERATION)
  private String tuningOperation;

  public GoogleCloudDiscoveryengineV1alphaEngineRecommendationMetadata() {
  }

  public GoogleCloudDiscoveryengineV1alphaEngineRecommendationMetadata(
     DataStateEnum dataState, 
     String lastTuneTime, 
     ServingStateEnum servingState, 
     String tuningOperation
  ) {
    this();
    this.dataState = dataState;
    this.lastTuneTime = lastTuneTime;
    this.servingState = servingState;
    this.tuningOperation = tuningOperation;
  }

  /**
   * Output only. The state of data requirements for this engine: &#x60;DATA_OK&#x60; and &#x60;DATA_ERROR&#x60;. Engine cannot be trained if the data is in &#x60;DATA_ERROR&#x60; state. Engine can have &#x60;DATA_ERROR&#x60; state even if serving state is &#x60;ACTIVE&#x60;: engines were trained successfully before, but cannot be refreshed because the underlying engine no longer has sufficient data for training.
   * @return dataState
   */
  @javax.annotation.Nullable
  public DataStateEnum getDataState() {
    return dataState;
  }



  /**
   * Output only. The timestamp when the latest successful tune finished. Only applicable on Media Recommendation engines.
   * @return lastTuneTime
   */
  @javax.annotation.Nullable
  public String getLastTuneTime() {
    return lastTuneTime;
  }



  /**
   * Output only. The serving state of the engine: &#x60;ACTIVE&#x60;, &#x60;NOT_ACTIVE&#x60;.
   * @return servingState
   */
  @javax.annotation.Nullable
  public ServingStateEnum getServingState() {
    return servingState;
  }



  /**
   * Output only. The latest tune operation id associated with the engine. Only applicable on Media Recommendation engines. If present, this operation id can be used to determine if there is an ongoing tune for this engine. To check the operation status, send the GetOperation request with this operation id in the engine resource format. If no tuning has happened for this engine, the string is empty.
   * @return tuningOperation
   */
  @javax.annotation.Nullable
  public String getTuningOperation() {
    return tuningOperation;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudDiscoveryengineV1alphaEngineRecommendationMetadata googleCloudDiscoveryengineV1alphaEngineRecommendationMetadata = (GoogleCloudDiscoveryengineV1alphaEngineRecommendationMetadata) o;
    return Objects.equals(this.dataState, googleCloudDiscoveryengineV1alphaEngineRecommendationMetadata.dataState) &&
        Objects.equals(this.lastTuneTime, googleCloudDiscoveryengineV1alphaEngineRecommendationMetadata.lastTuneTime) &&
        Objects.equals(this.servingState, googleCloudDiscoveryengineV1alphaEngineRecommendationMetadata.servingState) &&
        Objects.equals(this.tuningOperation, googleCloudDiscoveryengineV1alphaEngineRecommendationMetadata.tuningOperation);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dataState, lastTuneTime, servingState, tuningOperation);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudDiscoveryengineV1alphaEngineRecommendationMetadata {\n");
    sb.append("    dataState: ").append(toIndentedString(dataState)).append("\n");
    sb.append("    lastTuneTime: ").append(toIndentedString(lastTuneTime)).append("\n");
    sb.append("    servingState: ").append(toIndentedString(servingState)).append("\n");
    sb.append("    tuningOperation: ").append(toIndentedString(tuningOperation)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dataState");
    openapiFields.add("lastTuneTime");
    openapiFields.add("servingState");
    openapiFields.add("tuningOperation");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudDiscoveryengineV1alphaEngineRecommendationMetadata
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudDiscoveryengineV1alphaEngineRecommendationMetadata.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudDiscoveryengineV1alphaEngineRecommendationMetadata is not found in the empty JSON string", GoogleCloudDiscoveryengineV1alphaEngineRecommendationMetadata.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudDiscoveryengineV1alphaEngineRecommendationMetadata.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudDiscoveryengineV1alphaEngineRecommendationMetadata` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("dataState") != null && !jsonObj.get("dataState").isJsonNull()) && !jsonObj.get("dataState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dataState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dataState").toString()));
      }
      // validate the optional field `dataState`
      if (jsonObj.get("dataState") != null && !jsonObj.get("dataState").isJsonNull()) {
        DataStateEnum.validateJsonElement(jsonObj.get("dataState"));
      }
      if ((jsonObj.get("lastTuneTime") != null && !jsonObj.get("lastTuneTime").isJsonNull()) && !jsonObj.get("lastTuneTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastTuneTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastTuneTime").toString()));
      }
      if ((jsonObj.get("servingState") != null && !jsonObj.get("servingState").isJsonNull()) && !jsonObj.get("servingState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `servingState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("servingState").toString()));
      }
      // validate the optional field `servingState`
      if (jsonObj.get("servingState") != null && !jsonObj.get("servingState").isJsonNull()) {
        ServingStateEnum.validateJsonElement(jsonObj.get("servingState"));
      }
      if ((jsonObj.get("tuningOperation") != null && !jsonObj.get("tuningOperation").isJsonNull()) && !jsonObj.get("tuningOperation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tuningOperation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tuningOperation").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudDiscoveryengineV1alphaEngineRecommendationMetadata.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudDiscoveryengineV1alphaEngineRecommendationMetadata' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudDiscoveryengineV1alphaEngineRecommendationMetadata> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudDiscoveryengineV1alphaEngineRecommendationMetadata.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudDiscoveryengineV1alphaEngineRecommendationMetadata>() {
           @Override
           public void write(JsonWriter out, GoogleCloudDiscoveryengineV1alphaEngineRecommendationMetadata value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudDiscoveryengineV1alphaEngineRecommendationMetadata read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudDiscoveryengineV1alphaEngineRecommendationMetadata given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudDiscoveryengineV1alphaEngineRecommendationMetadata
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudDiscoveryengineV1alphaEngineRecommendationMetadata
   */
  public static GoogleCloudDiscoveryengineV1alphaEngineRecommendationMetadata fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudDiscoveryengineV1alphaEngineRecommendationMetadata.class);
  }

  /**
   * Convert an instance of GoogleCloudDiscoveryengineV1alphaEngineRecommendationMetadata to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

