/**
 * Discovery Engine API
 * Discovery Engine API.
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GoogleCloudDiscoveryengineV1betaBigQuerySource from './GoogleCloudDiscoveryengineV1betaBigQuerySource';
import GoogleCloudDiscoveryengineV1betaGcsSource from './GoogleCloudDiscoveryengineV1betaGcsSource';
import GoogleCloudDiscoveryengineV1betaImportDocumentsRequestInlineSource from './GoogleCloudDiscoveryengineV1betaImportDocumentsRequestInlineSource';
import GoogleCloudDiscoveryengineV1betaImportErrorConfig from './GoogleCloudDiscoveryengineV1betaImportErrorConfig';

/**
 * The GoogleCloudDiscoveryengineV1betaImportDocumentsRequest model module.
 * @module model/GoogleCloudDiscoveryengineV1betaImportDocumentsRequest
 * @version v1beta
 */
class GoogleCloudDiscoveryengineV1betaImportDocumentsRequest {
    /**
     * Constructs a new <code>GoogleCloudDiscoveryengineV1betaImportDocumentsRequest</code>.
     * Request message for Import methods.
     * @alias module:model/GoogleCloudDiscoveryengineV1betaImportDocumentsRequest
     */
    constructor() { 
        
        GoogleCloudDiscoveryengineV1betaImportDocumentsRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleCloudDiscoveryengineV1betaImportDocumentsRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleCloudDiscoveryengineV1betaImportDocumentsRequest} obj Optional instance to populate.
     * @return {module:model/GoogleCloudDiscoveryengineV1betaImportDocumentsRequest} The populated <code>GoogleCloudDiscoveryengineV1betaImportDocumentsRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleCloudDiscoveryengineV1betaImportDocumentsRequest();

            if (data.hasOwnProperty('autoGenerateIds')) {
                obj['autoGenerateIds'] = ApiClient.convertToType(data['autoGenerateIds'], 'Boolean');
            }
            if (data.hasOwnProperty('bigquerySource')) {
                obj['bigquerySource'] = GoogleCloudDiscoveryengineV1betaBigQuerySource.constructFromObject(data['bigquerySource']);
            }
            if (data.hasOwnProperty('errorConfig')) {
                obj['errorConfig'] = GoogleCloudDiscoveryengineV1betaImportErrorConfig.constructFromObject(data['errorConfig']);
            }
            if (data.hasOwnProperty('gcsSource')) {
                obj['gcsSource'] = GoogleCloudDiscoveryengineV1betaGcsSource.constructFromObject(data['gcsSource']);
            }
            if (data.hasOwnProperty('idField')) {
                obj['idField'] = ApiClient.convertToType(data['idField'], 'String');
            }
            if (data.hasOwnProperty('inlineSource')) {
                obj['inlineSource'] = GoogleCloudDiscoveryengineV1betaImportDocumentsRequestInlineSource.constructFromObject(data['inlineSource']);
            }
            if (data.hasOwnProperty('reconciliationMode')) {
                obj['reconciliationMode'] = ApiClient.convertToType(data['reconciliationMode'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleCloudDiscoveryengineV1betaImportDocumentsRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleCloudDiscoveryengineV1betaImportDocumentsRequest</code>.
     */
    static validateJSON(data) {
        // validate the optional field `bigquerySource`
        if (data['bigquerySource']) { // data not null
          GoogleCloudDiscoveryengineV1betaBigQuerySource.validateJSON(data['bigquerySource']);
        }
        // validate the optional field `errorConfig`
        if (data['errorConfig']) { // data not null
          GoogleCloudDiscoveryengineV1betaImportErrorConfig.validateJSON(data['errorConfig']);
        }
        // validate the optional field `gcsSource`
        if (data['gcsSource']) { // data not null
          GoogleCloudDiscoveryengineV1betaGcsSource.validateJSON(data['gcsSource']);
        }
        // ensure the json data is a string
        if (data['idField'] && !(typeof data['idField'] === 'string' || data['idField'] instanceof String)) {
            throw new Error("Expected the field `idField` to be a primitive type in the JSON string but got " + data['idField']);
        }
        // validate the optional field `inlineSource`
        if (data['inlineSource']) { // data not null
          GoogleCloudDiscoveryengineV1betaImportDocumentsRequestInlineSource.validateJSON(data['inlineSource']);
        }
        // ensure the json data is a string
        if (data['reconciliationMode'] && !(typeof data['reconciliationMode'] === 'string' || data['reconciliationMode'] instanceof String)) {
            throw new Error("Expected the field `reconciliationMode` to be a primitive type in the JSON string but got " + data['reconciliationMode']);
        }

        return true;
    }


}



/**
 * Whether to automatically generate IDs for the documents if absent. If set to `true`, Document.ids are automatically generated based on the hash of the payload, where IDs may not be consistent during multiple imports. In which case ReconciliationMode.FULL is highly recommended to avoid duplicate contents. If unset or set to `false`, Document.ids have to be specified using id_field, otherwise, documents without IDs fail to be imported. Only set this field when using GcsSource or BigQuerySource, and when GcsSource.data_schema or BigQuerySource.data_schema is `custom` or `csv`. Otherwise, an INVALID_ARGUMENT error is thrown.
 * @member {Boolean} autoGenerateIds
 */
GoogleCloudDiscoveryengineV1betaImportDocumentsRequest.prototype['autoGenerateIds'] = undefined;

/**
 * @member {module:model/GoogleCloudDiscoveryengineV1betaBigQuerySource} bigquerySource
 */
GoogleCloudDiscoveryengineV1betaImportDocumentsRequest.prototype['bigquerySource'] = undefined;

/**
 * @member {module:model/GoogleCloudDiscoveryengineV1betaImportErrorConfig} errorConfig
 */
GoogleCloudDiscoveryengineV1betaImportDocumentsRequest.prototype['errorConfig'] = undefined;

/**
 * @member {module:model/GoogleCloudDiscoveryengineV1betaGcsSource} gcsSource
 */
GoogleCloudDiscoveryengineV1betaImportDocumentsRequest.prototype['gcsSource'] = undefined;

/**
 * The field in the Cloud Storage and BigQuery sources that indicates the unique IDs of the documents. For GcsSource it is the key of the JSON field. For instance, `my_id` for JSON `{\"my_id\": \"some_uuid\"}`. For BigQuerySource it is the column name of the BigQuery table where the unique ids are stored. The values of the JSON field or the BigQuery column are used as the Document.ids. The JSON field or the BigQuery column must be of string type, and the values must be set as valid strings conform to [RFC-1034](https://tools.ietf.org/html/rfc1034) with 1-63 characters. Otherwise, documents without valid IDs fail to be imported. Only set this field when using GcsSource or BigQuerySource, and when GcsSource.data_schema or BigQuerySource.data_schema is `custom`. And only set this field when auto_generate_ids is unset or set as `false`. Otherwise, an INVALID_ARGUMENT error is thrown. If it is unset, a default value `_id` is used when importing from the allowed data sources.
 * @member {String} idField
 */
GoogleCloudDiscoveryengineV1betaImportDocumentsRequest.prototype['idField'] = undefined;

/**
 * @member {module:model/GoogleCloudDiscoveryengineV1betaImportDocumentsRequestInlineSource} inlineSource
 */
GoogleCloudDiscoveryengineV1betaImportDocumentsRequest.prototype['inlineSource'] = undefined;

/**
 * The mode of reconciliation between existing documents and the documents to be imported. Defaults to ReconciliationMode.INCREMENTAL.
 * @member {module:model/GoogleCloudDiscoveryengineV1betaImportDocumentsRequest.ReconciliationModeEnum} reconciliationMode
 */
GoogleCloudDiscoveryengineV1betaImportDocumentsRequest.prototype['reconciliationMode'] = undefined;





/**
 * Allowed values for the <code>reconciliationMode</code> property.
 * @enum {String}
 * @readonly
 */
GoogleCloudDiscoveryengineV1betaImportDocumentsRequest['ReconciliationModeEnum'] = {

    /**
     * value: "RECONCILIATION_MODE_UNSPECIFIED"
     * @const
     */
    "RECONCILIATION_MODE_UNSPECIFIED": "RECONCILIATION_MODE_UNSPECIFIED",

    /**
     * value: "INCREMENTAL"
     * @const
     */
    "INCREMENTAL": "INCREMENTAL",

    /**
     * value: "FULL"
     * @const
     */
    "FULL": "FULL"
};



export default GoogleCloudDiscoveryengineV1betaImportDocumentsRequest;

