/**
 * Discovery Engine API
 * Discovery Engine API.
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GoogleCloudDiscoveryengineV1betaEmbeddingConfig from './GoogleCloudDiscoveryengineV1betaEmbeddingConfig';
import GoogleCloudDiscoveryengineV1betaServingConfigGenericConfig from './GoogleCloudDiscoveryengineV1betaServingConfigGenericConfig';
import GoogleCloudDiscoveryengineV1betaServingConfigMediaConfig from './GoogleCloudDiscoveryengineV1betaServingConfigMediaConfig';

/**
 * The GoogleCloudDiscoveryengineV1betaServingConfig model module.
 * @module model/GoogleCloudDiscoveryengineV1betaServingConfig
 * @version v1beta
 */
class GoogleCloudDiscoveryengineV1betaServingConfig {
    /**
     * Constructs a new <code>GoogleCloudDiscoveryengineV1betaServingConfig</code>.
     * Configures metadata that is used to generate serving time results (e.g. search results or recommendation predictions). The ServingConfig is passed in the search and predict request and generates results.
     * @alias module:model/GoogleCloudDiscoveryengineV1betaServingConfig
     */
    constructor() { 
        
        GoogleCloudDiscoveryengineV1betaServingConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleCloudDiscoveryengineV1betaServingConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleCloudDiscoveryengineV1betaServingConfig} obj Optional instance to populate.
     * @return {module:model/GoogleCloudDiscoveryengineV1betaServingConfig} The populated <code>GoogleCloudDiscoveryengineV1betaServingConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleCloudDiscoveryengineV1betaServingConfig();

            if (data.hasOwnProperty('boostControlIds')) {
                obj['boostControlIds'] = ApiClient.convertToType(data['boostControlIds'], ['String']);
            }
            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'String');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('dissociateControlIds')) {
                obj['dissociateControlIds'] = ApiClient.convertToType(data['dissociateControlIds'], ['String']);
            }
            if (data.hasOwnProperty('diversityLevel')) {
                obj['diversityLevel'] = ApiClient.convertToType(data['diversityLevel'], 'String');
            }
            if (data.hasOwnProperty('embeddingConfig')) {
                obj['embeddingConfig'] = GoogleCloudDiscoveryengineV1betaEmbeddingConfig.constructFromObject(data['embeddingConfig']);
            }
            if (data.hasOwnProperty('filterControlIds')) {
                obj['filterControlIds'] = ApiClient.convertToType(data['filterControlIds'], ['String']);
            }
            if (data.hasOwnProperty('genericConfig')) {
                obj['genericConfig'] = GoogleCloudDiscoveryengineV1betaServingConfigGenericConfig.constructFromObject(data['genericConfig']);
            }
            if (data.hasOwnProperty('ignoreControlIds')) {
                obj['ignoreControlIds'] = ApiClient.convertToType(data['ignoreControlIds'], ['String']);
            }
            if (data.hasOwnProperty('mediaConfig')) {
                obj['mediaConfig'] = GoogleCloudDiscoveryengineV1betaServingConfigMediaConfig.constructFromObject(data['mediaConfig']);
            }
            if (data.hasOwnProperty('modelId')) {
                obj['modelId'] = ApiClient.convertToType(data['modelId'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('onewaySynonymsControlIds')) {
                obj['onewaySynonymsControlIds'] = ApiClient.convertToType(data['onewaySynonymsControlIds'], ['String']);
            }
            if (data.hasOwnProperty('rankingExpression')) {
                obj['rankingExpression'] = ApiClient.convertToType(data['rankingExpression'], 'String');
            }
            if (data.hasOwnProperty('redirectControlIds')) {
                obj['redirectControlIds'] = ApiClient.convertToType(data['redirectControlIds'], ['String']);
            }
            if (data.hasOwnProperty('replacementControlIds')) {
                obj['replacementControlIds'] = ApiClient.convertToType(data['replacementControlIds'], ['String']);
            }
            if (data.hasOwnProperty('solutionType')) {
                obj['solutionType'] = ApiClient.convertToType(data['solutionType'], 'String');
            }
            if (data.hasOwnProperty('synonymsControlIds')) {
                obj['synonymsControlIds'] = ApiClient.convertToType(data['synonymsControlIds'], ['String']);
            }
            if (data.hasOwnProperty('updateTime')) {
                obj['updateTime'] = ApiClient.convertToType(data['updateTime'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleCloudDiscoveryengineV1betaServingConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleCloudDiscoveryengineV1betaServingConfig</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['boostControlIds'])) {
            throw new Error("Expected the field `boostControlIds` to be an array in the JSON data but got " + data['boostControlIds']);
        }
        // ensure the json data is a string
        if (data['createTime'] && !(typeof data['createTime'] === 'string' || data['createTime'] instanceof String)) {
            throw new Error("Expected the field `createTime` to be a primitive type in the JSON string but got " + data['createTime']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['dissociateControlIds'])) {
            throw new Error("Expected the field `dissociateControlIds` to be an array in the JSON data but got " + data['dissociateControlIds']);
        }
        // ensure the json data is a string
        if (data['diversityLevel'] && !(typeof data['diversityLevel'] === 'string' || data['diversityLevel'] instanceof String)) {
            throw new Error("Expected the field `diversityLevel` to be a primitive type in the JSON string but got " + data['diversityLevel']);
        }
        // validate the optional field `embeddingConfig`
        if (data['embeddingConfig']) { // data not null
          GoogleCloudDiscoveryengineV1betaEmbeddingConfig.validateJSON(data['embeddingConfig']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['filterControlIds'])) {
            throw new Error("Expected the field `filterControlIds` to be an array in the JSON data but got " + data['filterControlIds']);
        }
        // validate the optional field `genericConfig`
        if (data['genericConfig']) { // data not null
          GoogleCloudDiscoveryengineV1betaServingConfigGenericConfig.validateJSON(data['genericConfig']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['ignoreControlIds'])) {
            throw new Error("Expected the field `ignoreControlIds` to be an array in the JSON data but got " + data['ignoreControlIds']);
        }
        // validate the optional field `mediaConfig`
        if (data['mediaConfig']) { // data not null
          GoogleCloudDiscoveryengineV1betaServingConfigMediaConfig.validateJSON(data['mediaConfig']);
        }
        // ensure the json data is a string
        if (data['modelId'] && !(typeof data['modelId'] === 'string' || data['modelId'] instanceof String)) {
            throw new Error("Expected the field `modelId` to be a primitive type in the JSON string but got " + data['modelId']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['onewaySynonymsControlIds'])) {
            throw new Error("Expected the field `onewaySynonymsControlIds` to be an array in the JSON data but got " + data['onewaySynonymsControlIds']);
        }
        // ensure the json data is a string
        if (data['rankingExpression'] && !(typeof data['rankingExpression'] === 'string' || data['rankingExpression'] instanceof String)) {
            throw new Error("Expected the field `rankingExpression` to be a primitive type in the JSON string but got " + data['rankingExpression']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['redirectControlIds'])) {
            throw new Error("Expected the field `redirectControlIds` to be an array in the JSON data but got " + data['redirectControlIds']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['replacementControlIds'])) {
            throw new Error("Expected the field `replacementControlIds` to be an array in the JSON data but got " + data['replacementControlIds']);
        }
        // ensure the json data is a string
        if (data['solutionType'] && !(typeof data['solutionType'] === 'string' || data['solutionType'] instanceof String)) {
            throw new Error("Expected the field `solutionType` to be a primitive type in the JSON string but got " + data['solutionType']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['synonymsControlIds'])) {
            throw new Error("Expected the field `synonymsControlIds` to be an array in the JSON data but got " + data['synonymsControlIds']);
        }
        // ensure the json data is a string
        if (data['updateTime'] && !(typeof data['updateTime'] === 'string' || data['updateTime'] instanceof String)) {
            throw new Error("Expected the field `updateTime` to be a primitive type in the JSON string but got " + data['updateTime']);
        }

        return true;
    }


}



/**
 * Boost controls to use in serving path. All triggered boost controls will be applied. Boost controls must be in the same data store as the serving config. Maximum of 20 boost controls.
 * @member {Array.<String>} boostControlIds
 */
GoogleCloudDiscoveryengineV1betaServingConfig.prototype['boostControlIds'] = undefined;

/**
 * Output only. ServingConfig created timestamp.
 * @member {String} createTime
 */
GoogleCloudDiscoveryengineV1betaServingConfig.prototype['createTime'] = undefined;

/**
 * Required. The human readable serving config display name. Used in Discovery UI. This field must be a UTF-8 encoded string with a length limit of 128 characters. Otherwise, an INVALID_ARGUMENT error is returned.
 * @member {String} displayName
 */
GoogleCloudDiscoveryengineV1betaServingConfig.prototype['displayName'] = undefined;

/**
 * Condition do not associate specifications. If multiple do not associate conditions match, all matching do not associate controls in the list will execute. Order does not matter. Maximum number of specifications is 100. Can only be set if SolutionType is SOLUTION_TYPE_SEARCH.
 * @member {Array.<String>} dissociateControlIds
 */
GoogleCloudDiscoveryengineV1betaServingConfig.prototype['dissociateControlIds'] = undefined;

/**
 * How much diversity to use in recommendation model results e.g. `medium-diversity` or `high-diversity`. Currently supported values: * `no-diversity` * `low-diversity` * `medium-diversity` * `high-diversity` * `auto-diversity` If not specified, we choose default based on recommendation model type. Default value: `no-diversity`. Can only be set if SolutionType is SOLUTION_TYPE_RECOMMENDATION.
 * @member {String} diversityLevel
 */
GoogleCloudDiscoveryengineV1betaServingConfig.prototype['diversityLevel'] = undefined;

/**
 * @member {module:model/GoogleCloudDiscoveryengineV1betaEmbeddingConfig} embeddingConfig
 */
GoogleCloudDiscoveryengineV1betaServingConfig.prototype['embeddingConfig'] = undefined;

/**
 * Filter controls to use in serving path. All triggered filter controls will be applied. Filter controls must be in the same data store as the serving config. Maximum of 20 filter controls.
 * @member {Array.<String>} filterControlIds
 */
GoogleCloudDiscoveryengineV1betaServingConfig.prototype['filterControlIds'] = undefined;

/**
 * @member {module:model/GoogleCloudDiscoveryengineV1betaServingConfigGenericConfig} genericConfig
 */
GoogleCloudDiscoveryengineV1betaServingConfig.prototype['genericConfig'] = undefined;

/**
 * Condition ignore specifications. If multiple ignore conditions match, all matching ignore controls in the list will execute. Order does not matter. Maximum number of specifications is 100.
 * @member {Array.<String>} ignoreControlIds
 */
GoogleCloudDiscoveryengineV1betaServingConfig.prototype['ignoreControlIds'] = undefined;

/**
 * @member {module:model/GoogleCloudDiscoveryengineV1betaServingConfigMediaConfig} mediaConfig
 */
GoogleCloudDiscoveryengineV1betaServingConfig.prototype['mediaConfig'] = undefined;

/**
 * The id of the model to use at serving time. Currently only RecommendationModels are supported. Can be changed but only to a compatible model (e.g. others-you-may-like CTR to others-you-may-like CVR). Required when SolutionType is SOLUTION_TYPE_RECOMMENDATION.
 * @member {String} modelId
 */
GoogleCloudDiscoveryengineV1betaServingConfig.prototype['modelId'] = undefined;

/**
 * Immutable. Fully qualified name `projects/{project}/locations/{location}/collections/{collection_id}/dataStores/{data_store_id}/servingConfigs/{serving_config_id}`
 * @member {String} name
 */
GoogleCloudDiscoveryengineV1betaServingConfig.prototype['name'] = undefined;

/**
 * Condition oneway synonyms specifications. If multiple oneway synonyms conditions match, all matching oneway synonyms controls in the list will execute. Maximum number of specifications is 100. Can only be set if SolutionType is SOLUTION_TYPE_SEARCH.
 * @member {Array.<String>} onewaySynonymsControlIds
 */
GoogleCloudDiscoveryengineV1betaServingConfig.prototype['onewaySynonymsControlIds'] = undefined;

/**
 * The ranking expression controls the customized ranking on retrieval documents. To leverage this, document embedding is required. The ranking expression setting in ServingConfig applies to all search requests served by the serving config. However, if SearchRequest.ranking_expression is specified, it overrides the ServingConfig ranking expression. The ranking expression is a single function or multiple functions that are joined by \"+\". * ranking_expression = function, { \" + \", function }; Supported functions: * double * relevance_score * double * dotProduct(embedding_field_path) Function variables: relevance_score: pre-defined keywords, used for measure relevance between query and document. embedding_field_path: the document embedding field used with query embedding vector. dotProduct: embedding function between embedding_field_path and query embedding vector. Example ranking expression: If document has an embedding field doc_embedding, the ranking expression could be 0.5 * relevance_score + 0.3 * dotProduct(doc_embedding).
 * @member {String} rankingExpression
 */
GoogleCloudDiscoveryengineV1betaServingConfig.prototype['rankingExpression'] = undefined;

/**
 * IDs of the redirect controls. Only the first triggered redirect action is applied, even if multiple apply. Maximum number of specifications is 100. Can only be set if SolutionType is SOLUTION_TYPE_SEARCH.
 * @member {Array.<String>} redirectControlIds
 */
GoogleCloudDiscoveryengineV1betaServingConfig.prototype['redirectControlIds'] = undefined;

/**
 * Condition replacement specifications. Applied according to the order in the list. A previously replaced term can not be re-replaced. Maximum number of specifications is 100. Can only be set if SolutionType is SOLUTION_TYPE_SEARCH.
 * @member {Array.<String>} replacementControlIds
 */
GoogleCloudDiscoveryengineV1betaServingConfig.prototype['replacementControlIds'] = undefined;

/**
 * Required. Immutable. Specifies the solution type that a serving config can be associated with.
 * @member {module:model/GoogleCloudDiscoveryengineV1betaServingConfig.SolutionTypeEnum} solutionType
 */
GoogleCloudDiscoveryengineV1betaServingConfig.prototype['solutionType'] = undefined;

/**
 * Condition synonyms specifications. If multiple synonyms conditions match, all matching synonyms controls in the list will execute. Maximum number of specifications is 100. Can only be set if SolutionType is SOLUTION_TYPE_SEARCH.
 * @member {Array.<String>} synonymsControlIds
 */
GoogleCloudDiscoveryengineV1betaServingConfig.prototype['synonymsControlIds'] = undefined;

/**
 * Output only. ServingConfig updated timestamp.
 * @member {String} updateTime
 */
GoogleCloudDiscoveryengineV1betaServingConfig.prototype['updateTime'] = undefined;





/**
 * Allowed values for the <code>solutionType</code> property.
 * @enum {String}
 * @readonly
 */
GoogleCloudDiscoveryengineV1betaServingConfig['SolutionTypeEnum'] = {

    /**
     * value: "SOLUTION_TYPE_UNSPECIFIED"
     * @const
     */
    "UNSPECIFIED": "SOLUTION_TYPE_UNSPECIFIED",

    /**
     * value: "SOLUTION_TYPE_RECOMMENDATION"
     * @const
     */
    "RECOMMENDATION": "SOLUTION_TYPE_RECOMMENDATION",

    /**
     * value: "SOLUTION_TYPE_SEARCH"
     * @const
     */
    "SEARCH": "SOLUTION_TYPE_SEARCH",

    /**
     * value: "SOLUTION_TYPE_CHAT"
     * @const
     */
    "CHAT": "SOLUTION_TYPE_CHAT"
};



export default GoogleCloudDiscoveryengineV1betaServingConfig;

