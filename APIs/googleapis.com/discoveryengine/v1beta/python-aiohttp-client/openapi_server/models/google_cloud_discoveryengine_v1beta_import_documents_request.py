# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_discoveryengine_v1beta_big_query_source import GoogleCloudDiscoveryengineV1betaBigQuerySource
from openapi_server.models.google_cloud_discoveryengine_v1beta_gcs_source import GoogleCloudDiscoveryengineV1betaGcsSource
from openapi_server.models.google_cloud_discoveryengine_v1beta_import_documents_request_inline_source import GoogleCloudDiscoveryengineV1betaImportDocumentsRequestInlineSource
from openapi_server.models.google_cloud_discoveryengine_v1beta_import_error_config import GoogleCloudDiscoveryengineV1betaImportErrorConfig
from openapi_server import util


class GoogleCloudDiscoveryengineV1betaImportDocumentsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, auto_generate_ids: bool=None, bigquery_source: GoogleCloudDiscoveryengineV1betaBigQuerySource=None, error_config: GoogleCloudDiscoveryengineV1betaImportErrorConfig=None, gcs_source: GoogleCloudDiscoveryengineV1betaGcsSource=None, id_field: str=None, inline_source: GoogleCloudDiscoveryengineV1betaImportDocumentsRequestInlineSource=None, reconciliation_mode: str=None):
        """GoogleCloudDiscoveryengineV1betaImportDocumentsRequest - a model defined in OpenAPI

        :param auto_generate_ids: The auto_generate_ids of this GoogleCloudDiscoveryengineV1betaImportDocumentsRequest.
        :param bigquery_source: The bigquery_source of this GoogleCloudDiscoveryengineV1betaImportDocumentsRequest.
        :param error_config: The error_config of this GoogleCloudDiscoveryengineV1betaImportDocumentsRequest.
        :param gcs_source: The gcs_source of this GoogleCloudDiscoveryengineV1betaImportDocumentsRequest.
        :param id_field: The id_field of this GoogleCloudDiscoveryengineV1betaImportDocumentsRequest.
        :param inline_source: The inline_source of this GoogleCloudDiscoveryengineV1betaImportDocumentsRequest.
        :param reconciliation_mode: The reconciliation_mode of this GoogleCloudDiscoveryengineV1betaImportDocumentsRequest.
        """
        self.openapi_types = {
            'auto_generate_ids': bool,
            'bigquery_source': GoogleCloudDiscoveryengineV1betaBigQuerySource,
            'error_config': GoogleCloudDiscoveryengineV1betaImportErrorConfig,
            'gcs_source': GoogleCloudDiscoveryengineV1betaGcsSource,
            'id_field': str,
            'inline_source': GoogleCloudDiscoveryengineV1betaImportDocumentsRequestInlineSource,
            'reconciliation_mode': str
        }

        self.attribute_map = {
            'auto_generate_ids': 'autoGenerateIds',
            'bigquery_source': 'bigquerySource',
            'error_config': 'errorConfig',
            'gcs_source': 'gcsSource',
            'id_field': 'idField',
            'inline_source': 'inlineSource',
            'reconciliation_mode': 'reconciliationMode'
        }

        self._auto_generate_ids = auto_generate_ids
        self._bigquery_source = bigquery_source
        self._error_config = error_config
        self._gcs_source = gcs_source
        self._id_field = id_field
        self._inline_source = inline_source
        self._reconciliation_mode = reconciliation_mode

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudDiscoveryengineV1betaImportDocumentsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudDiscoveryengineV1betaImportDocumentsRequest of this GoogleCloudDiscoveryengineV1betaImportDocumentsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def auto_generate_ids(self):
        """Gets the auto_generate_ids of this GoogleCloudDiscoveryengineV1betaImportDocumentsRequest.

        Whether to automatically generate IDs for the documents if absent. If set to `true`, Document.ids are automatically generated based on the hash of the payload, where IDs may not be consistent during multiple imports. In which case ReconciliationMode.FULL is highly recommended to avoid duplicate contents. If unset or set to `false`, Document.ids have to be specified using id_field, otherwise, documents without IDs fail to be imported. Only set this field when using GcsSource or BigQuerySource, and when GcsSource.data_schema or BigQuerySource.data_schema is `custom` or `csv`. Otherwise, an INVALID_ARGUMENT error is thrown.

        :return: The auto_generate_ids of this GoogleCloudDiscoveryengineV1betaImportDocumentsRequest.
        :rtype: bool
        """
        return self._auto_generate_ids

    @auto_generate_ids.setter
    def auto_generate_ids(self, auto_generate_ids):
        """Sets the auto_generate_ids of this GoogleCloudDiscoveryengineV1betaImportDocumentsRequest.

        Whether to automatically generate IDs for the documents if absent. If set to `true`, Document.ids are automatically generated based on the hash of the payload, where IDs may not be consistent during multiple imports. In which case ReconciliationMode.FULL is highly recommended to avoid duplicate contents. If unset or set to `false`, Document.ids have to be specified using id_field, otherwise, documents without IDs fail to be imported. Only set this field when using GcsSource or BigQuerySource, and when GcsSource.data_schema or BigQuerySource.data_schema is `custom` or `csv`. Otherwise, an INVALID_ARGUMENT error is thrown.

        :param auto_generate_ids: The auto_generate_ids of this GoogleCloudDiscoveryengineV1betaImportDocumentsRequest.
        :type auto_generate_ids: bool
        """

        self._auto_generate_ids = auto_generate_ids

    @property
    def bigquery_source(self):
        """Gets the bigquery_source of this GoogleCloudDiscoveryengineV1betaImportDocumentsRequest.


        :return: The bigquery_source of this GoogleCloudDiscoveryengineV1betaImportDocumentsRequest.
        :rtype: GoogleCloudDiscoveryengineV1betaBigQuerySource
        """
        return self._bigquery_source

    @bigquery_source.setter
    def bigquery_source(self, bigquery_source):
        """Sets the bigquery_source of this GoogleCloudDiscoveryengineV1betaImportDocumentsRequest.


        :param bigquery_source: The bigquery_source of this GoogleCloudDiscoveryengineV1betaImportDocumentsRequest.
        :type bigquery_source: GoogleCloudDiscoveryengineV1betaBigQuerySource
        """

        self._bigquery_source = bigquery_source

    @property
    def error_config(self):
        """Gets the error_config of this GoogleCloudDiscoveryengineV1betaImportDocumentsRequest.


        :return: The error_config of this GoogleCloudDiscoveryengineV1betaImportDocumentsRequest.
        :rtype: GoogleCloudDiscoveryengineV1betaImportErrorConfig
        """
        return self._error_config

    @error_config.setter
    def error_config(self, error_config):
        """Sets the error_config of this GoogleCloudDiscoveryengineV1betaImportDocumentsRequest.


        :param error_config: The error_config of this GoogleCloudDiscoveryengineV1betaImportDocumentsRequest.
        :type error_config: GoogleCloudDiscoveryengineV1betaImportErrorConfig
        """

        self._error_config = error_config

    @property
    def gcs_source(self):
        """Gets the gcs_source of this GoogleCloudDiscoveryengineV1betaImportDocumentsRequest.


        :return: The gcs_source of this GoogleCloudDiscoveryengineV1betaImportDocumentsRequest.
        :rtype: GoogleCloudDiscoveryengineV1betaGcsSource
        """
        return self._gcs_source

    @gcs_source.setter
    def gcs_source(self, gcs_source):
        """Sets the gcs_source of this GoogleCloudDiscoveryengineV1betaImportDocumentsRequest.


        :param gcs_source: The gcs_source of this GoogleCloudDiscoveryengineV1betaImportDocumentsRequest.
        :type gcs_source: GoogleCloudDiscoveryengineV1betaGcsSource
        """

        self._gcs_source = gcs_source

    @property
    def id_field(self):
        """Gets the id_field of this GoogleCloudDiscoveryengineV1betaImportDocumentsRequest.

        The field in the Cloud Storage and BigQuery sources that indicates the unique IDs of the documents. For GcsSource it is the key of the JSON field. For instance, `my_id` for JSON `{\"my_id\": \"some_uuid\"}`. For BigQuerySource it is the column name of the BigQuery table where the unique ids are stored. The values of the JSON field or the BigQuery column are used as the Document.ids. The JSON field or the BigQuery column must be of string type, and the values must be set as valid strings conform to [RFC-1034](https://tools.ietf.org/html/rfc1034) with 1-63 characters. Otherwise, documents without valid IDs fail to be imported. Only set this field when using GcsSource or BigQuerySource, and when GcsSource.data_schema or BigQuerySource.data_schema is `custom`. And only set this field when auto_generate_ids is unset or set as `false`. Otherwise, an INVALID_ARGUMENT error is thrown. If it is unset, a default value `_id` is used when importing from the allowed data sources.

        :return: The id_field of this GoogleCloudDiscoveryengineV1betaImportDocumentsRequest.
        :rtype: str
        """
        return self._id_field

    @id_field.setter
    def id_field(self, id_field):
        """Sets the id_field of this GoogleCloudDiscoveryengineV1betaImportDocumentsRequest.

        The field in the Cloud Storage and BigQuery sources that indicates the unique IDs of the documents. For GcsSource it is the key of the JSON field. For instance, `my_id` for JSON `{\"my_id\": \"some_uuid\"}`. For BigQuerySource it is the column name of the BigQuery table where the unique ids are stored. The values of the JSON field or the BigQuery column are used as the Document.ids. The JSON field or the BigQuery column must be of string type, and the values must be set as valid strings conform to [RFC-1034](https://tools.ietf.org/html/rfc1034) with 1-63 characters. Otherwise, documents without valid IDs fail to be imported. Only set this field when using GcsSource or BigQuerySource, and when GcsSource.data_schema or BigQuerySource.data_schema is `custom`. And only set this field when auto_generate_ids is unset or set as `false`. Otherwise, an INVALID_ARGUMENT error is thrown. If it is unset, a default value `_id` is used when importing from the allowed data sources.

        :param id_field: The id_field of this GoogleCloudDiscoveryengineV1betaImportDocumentsRequest.
        :type id_field: str
        """

        self._id_field = id_field

    @property
    def inline_source(self):
        """Gets the inline_source of this GoogleCloudDiscoveryengineV1betaImportDocumentsRequest.


        :return: The inline_source of this GoogleCloudDiscoveryengineV1betaImportDocumentsRequest.
        :rtype: GoogleCloudDiscoveryengineV1betaImportDocumentsRequestInlineSource
        """
        return self._inline_source

    @inline_source.setter
    def inline_source(self, inline_source):
        """Sets the inline_source of this GoogleCloudDiscoveryengineV1betaImportDocumentsRequest.


        :param inline_source: The inline_source of this GoogleCloudDiscoveryengineV1betaImportDocumentsRequest.
        :type inline_source: GoogleCloudDiscoveryengineV1betaImportDocumentsRequestInlineSource
        """

        self._inline_source = inline_source

    @property
    def reconciliation_mode(self):
        """Gets the reconciliation_mode of this GoogleCloudDiscoveryengineV1betaImportDocumentsRequest.

        The mode of reconciliation between existing documents and the documents to be imported. Defaults to ReconciliationMode.INCREMENTAL.

        :return: The reconciliation_mode of this GoogleCloudDiscoveryengineV1betaImportDocumentsRequest.
        :rtype: str
        """
        return self._reconciliation_mode

    @reconciliation_mode.setter
    def reconciliation_mode(self, reconciliation_mode):
        """Sets the reconciliation_mode of this GoogleCloudDiscoveryengineV1betaImportDocumentsRequest.

        The mode of reconciliation between existing documents and the documents to be imported. Defaults to ReconciliationMode.INCREMENTAL.

        :param reconciliation_mode: The reconciliation_mode of this GoogleCloudDiscoveryengineV1betaImportDocumentsRequest.
        :type reconciliation_mode: str
        """
        allowed_values = ["RECONCILIATION_MODE_UNSPECIFIED", "INCREMENTAL", "FULL"]  # noqa: E501
        if reconciliation_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `reconciliation_mode` ({0}), must be one of {1}"
                .format(reconciliation_mode, allowed_values)
            )

        self._reconciliation_mode = reconciliation_mode
