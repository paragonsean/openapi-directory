# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_discoveryengine_v1beta_user_event import GoogleCloudDiscoveryengineV1betaUserEvent
from openapi_server import util


class GoogleCloudDiscoveryengineV1betaRecommendRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, filter: str=None, page_size: int=None, params: Dict[str, object]=None, user_event: GoogleCloudDiscoveryengineV1betaUserEvent=None, user_labels: Dict[str, str]=None, validate_only: bool=None):
        """GoogleCloudDiscoveryengineV1betaRecommendRequest - a model defined in OpenAPI

        :param filter: The filter of this GoogleCloudDiscoveryengineV1betaRecommendRequest.
        :param page_size: The page_size of this GoogleCloudDiscoveryengineV1betaRecommendRequest.
        :param params: The params of this GoogleCloudDiscoveryengineV1betaRecommendRequest.
        :param user_event: The user_event of this GoogleCloudDiscoveryengineV1betaRecommendRequest.
        :param user_labels: The user_labels of this GoogleCloudDiscoveryengineV1betaRecommendRequest.
        :param validate_only: The validate_only of this GoogleCloudDiscoveryengineV1betaRecommendRequest.
        """
        self.openapi_types = {
            'filter': str,
            'page_size': int,
            'params': Dict[str, object],
            'user_event': GoogleCloudDiscoveryengineV1betaUserEvent,
            'user_labels': Dict[str, str],
            'validate_only': bool
        }

        self.attribute_map = {
            'filter': 'filter',
            'page_size': 'pageSize',
            'params': 'params',
            'user_event': 'userEvent',
            'user_labels': 'userLabels',
            'validate_only': 'validateOnly'
        }

        self._filter = filter
        self._page_size = page_size
        self._params = params
        self._user_event = user_event
        self._user_labels = user_labels
        self._validate_only = validate_only

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudDiscoveryengineV1betaRecommendRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudDiscoveryengineV1betaRecommendRequest of this GoogleCloudDiscoveryengineV1betaRecommendRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def filter(self):
        """Gets the filter of this GoogleCloudDiscoveryengineV1betaRecommendRequest.

        Filter for restricting recommendation results with a length limit of 5,000 characters. Currently, only filter expressions on the `filter_tags` attribute is supported. Examples: * `(filter_tags: ANY(\"Red\", \"Blue\") OR filter_tags: ANY(\"Hot\", \"Cold\"))` * `(filter_tags: ANY(\"Red\", \"Blue\")) AND NOT (filter_tags: ANY(\"Green\"))` If `attributeFilteringSyntax` is set to true under the `params` field, then attribute-based expressions are expected instead of the above described tag-based syntax. Examples: * (launguage: ANY(\"en\", \"es\")) AND NOT (categories: ANY(\"Movie\")) * (available: true) AND (launguage: ANY(\"en\", \"es\")) OR (categories: ANY(\"Movie\")) If your filter blocks all results, the API will return generic (unfiltered) popular Documents. If you only want results strictly matching the filters, set `strictFiltering` to True in RecommendRequest.params to receive empty results instead. Note that the API will never return Documents with `storageStatus` of `EXPIRED` or `DELETED` regardless of filter choices.

        :return: The filter of this GoogleCloudDiscoveryengineV1betaRecommendRequest.
        :rtype: str
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this GoogleCloudDiscoveryengineV1betaRecommendRequest.

        Filter for restricting recommendation results with a length limit of 5,000 characters. Currently, only filter expressions on the `filter_tags` attribute is supported. Examples: * `(filter_tags: ANY(\"Red\", \"Blue\") OR filter_tags: ANY(\"Hot\", \"Cold\"))` * `(filter_tags: ANY(\"Red\", \"Blue\")) AND NOT (filter_tags: ANY(\"Green\"))` If `attributeFilteringSyntax` is set to true under the `params` field, then attribute-based expressions are expected instead of the above described tag-based syntax. Examples: * (launguage: ANY(\"en\", \"es\")) AND NOT (categories: ANY(\"Movie\")) * (available: true) AND (launguage: ANY(\"en\", \"es\")) OR (categories: ANY(\"Movie\")) If your filter blocks all results, the API will return generic (unfiltered) popular Documents. If you only want results strictly matching the filters, set `strictFiltering` to True in RecommendRequest.params to receive empty results instead. Note that the API will never return Documents with `storageStatus` of `EXPIRED` or `DELETED` regardless of filter choices.

        :param filter: The filter of this GoogleCloudDiscoveryengineV1betaRecommendRequest.
        :type filter: str
        """

        self._filter = filter

    @property
    def page_size(self):
        """Gets the page_size of this GoogleCloudDiscoveryengineV1betaRecommendRequest.

        Maximum number of results to return. Set this property to the number of recommendation results needed. If zero, the service will choose a reasonable default. The maximum allowed value is 100. Values above 100 will be coerced to 100.

        :return: The page_size of this GoogleCloudDiscoveryengineV1betaRecommendRequest.
        :rtype: int
        """
        return self._page_size

    @page_size.setter
    def page_size(self, page_size):
        """Sets the page_size of this GoogleCloudDiscoveryengineV1betaRecommendRequest.

        Maximum number of results to return. Set this property to the number of recommendation results needed. If zero, the service will choose a reasonable default. The maximum allowed value is 100. Values above 100 will be coerced to 100.

        :param page_size: The page_size of this GoogleCloudDiscoveryengineV1betaRecommendRequest.
        :type page_size: int
        """

        self._page_size = page_size

    @property
    def params(self):
        """Gets the params of this GoogleCloudDiscoveryengineV1betaRecommendRequest.

        Additional domain specific parameters for the recommendations. Allowed values: * `returnDocument`: Boolean. If set to true, the associated Document object will be returned in RecommendResponse.RecommendationResult.document. * `returnScore`: Boolean. If set to true, the recommendation 'score' corresponding to each returned Document will be set in RecommendResponse.RecommendationResult.metadata. The given 'score' indicates the probability of a Document conversion given the user's context and history. * `strictFiltering`: Boolean. True by default. If set to false, the service will return generic (unfiltered) popular Documents instead of empty if your filter blocks all recommendation results. * `diversityLevel`: String. Default empty. If set to be non-empty, then it needs to be one of: * `no-diversity` * `low-diversity` * `medium-diversity` * `high-diversity` * `auto-diversity` This gives request-level control and adjusts recommendation results based on Document category. * `attributeFilteringSyntax`: Boolean. False by default. If set to true, the `filter` field is interpreted according to the new, attribute-based syntax.

        :return: The params of this GoogleCloudDiscoveryengineV1betaRecommendRequest.
        :rtype: Dict[str, object]
        """
        return self._params

    @params.setter
    def params(self, params):
        """Sets the params of this GoogleCloudDiscoveryengineV1betaRecommendRequest.

        Additional domain specific parameters for the recommendations. Allowed values: * `returnDocument`: Boolean. If set to true, the associated Document object will be returned in RecommendResponse.RecommendationResult.document. * `returnScore`: Boolean. If set to true, the recommendation 'score' corresponding to each returned Document will be set in RecommendResponse.RecommendationResult.metadata. The given 'score' indicates the probability of a Document conversion given the user's context and history. * `strictFiltering`: Boolean. True by default. If set to false, the service will return generic (unfiltered) popular Documents instead of empty if your filter blocks all recommendation results. * `diversityLevel`: String. Default empty. If set to be non-empty, then it needs to be one of: * `no-diversity` * `low-diversity` * `medium-diversity` * `high-diversity` * `auto-diversity` This gives request-level control and adjusts recommendation results based on Document category. * `attributeFilteringSyntax`: Boolean. False by default. If set to true, the `filter` field is interpreted according to the new, attribute-based syntax.

        :param params: The params of this GoogleCloudDiscoveryengineV1betaRecommendRequest.
        :type params: Dict[str, object]
        """

        self._params = params

    @property
    def user_event(self):
        """Gets the user_event of this GoogleCloudDiscoveryengineV1betaRecommendRequest.


        :return: The user_event of this GoogleCloudDiscoveryengineV1betaRecommendRequest.
        :rtype: GoogleCloudDiscoveryengineV1betaUserEvent
        """
        return self._user_event

    @user_event.setter
    def user_event(self, user_event):
        """Sets the user_event of this GoogleCloudDiscoveryengineV1betaRecommendRequest.


        :param user_event: The user_event of this GoogleCloudDiscoveryengineV1betaRecommendRequest.
        :type user_event: GoogleCloudDiscoveryengineV1betaUserEvent
        """

        self._user_event = user_event

    @property
    def user_labels(self):
        """Gets the user_labels of this GoogleCloudDiscoveryengineV1betaRecommendRequest.

        The user labels applied to a resource must meet the following requirements: * Each resource can have multiple labels, up to a maximum of 64. * Each label must be a key-value pair. * Keys have a minimum length of 1 character and a maximum length of 63 characters and cannot be empty. Values can be empty and have a maximum length of 63 characters. * Keys and values can contain only lowercase letters, numeric characters, underscores, and dashes. All characters must use UTF-8 encoding, and international characters are allowed. * The key portion of a label must be unique. However, you can use the same key with multiple resources. * Keys must start with a lowercase letter or international character. See [Requirements for labels](https://cloud.google.com/resource-manager/docs/creating-managing-labels#requirements) for more details.

        :return: The user_labels of this GoogleCloudDiscoveryengineV1betaRecommendRequest.
        :rtype: Dict[str, str]
        """
        return self._user_labels

    @user_labels.setter
    def user_labels(self, user_labels):
        """Sets the user_labels of this GoogleCloudDiscoveryengineV1betaRecommendRequest.

        The user labels applied to a resource must meet the following requirements: * Each resource can have multiple labels, up to a maximum of 64. * Each label must be a key-value pair. * Keys have a minimum length of 1 character and a maximum length of 63 characters and cannot be empty. Values can be empty and have a maximum length of 63 characters. * Keys and values can contain only lowercase letters, numeric characters, underscores, and dashes. All characters must use UTF-8 encoding, and international characters are allowed. * The key portion of a label must be unique. However, you can use the same key with multiple resources. * Keys must start with a lowercase letter or international character. See [Requirements for labels](https://cloud.google.com/resource-manager/docs/creating-managing-labels#requirements) for more details.

        :param user_labels: The user_labels of this GoogleCloudDiscoveryengineV1betaRecommendRequest.
        :type user_labels: Dict[str, str]
        """

        self._user_labels = user_labels

    @property
    def validate_only(self):
        """Gets the validate_only of this GoogleCloudDiscoveryengineV1betaRecommendRequest.

        Use validate only mode for this recommendation query. If set to true, a fake model will be used that returns arbitrary Document IDs. Note that the validate only mode should only be used for testing the API, or if the model is not ready.

        :return: The validate_only of this GoogleCloudDiscoveryengineV1betaRecommendRequest.
        :rtype: bool
        """
        return self._validate_only

    @validate_only.setter
    def validate_only(self, validate_only):
        """Sets the validate_only of this GoogleCloudDiscoveryengineV1betaRecommendRequest.

        Use validate only mode for this recommendation query. If set to true, a fake model will be used that returns arbitrary Document IDs. Note that the validate only mode should only be used for testing the API, or if the model is not ready.

        :param validate_only: The validate_only of this GoogleCloudDiscoveryengineV1betaRecommendRequest.
        :type validate_only: bool
        """

        self._validate_only = validate_only
