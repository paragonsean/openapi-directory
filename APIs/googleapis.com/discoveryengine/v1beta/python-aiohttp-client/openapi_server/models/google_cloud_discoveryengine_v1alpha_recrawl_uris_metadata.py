# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleCloudDiscoveryengineV1alphaRecrawlUrisMetadata(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, create_time: str=None, invalid_uris: List[str]=None, pending_count: int=None, quota_exceeded_count: int=None, success_count: int=None, update_time: str=None, valid_uris_count: int=None):
        """GoogleCloudDiscoveryengineV1alphaRecrawlUrisMetadata - a model defined in OpenAPI

        :param create_time: The create_time of this GoogleCloudDiscoveryengineV1alphaRecrawlUrisMetadata.
        :param invalid_uris: The invalid_uris of this GoogleCloudDiscoveryengineV1alphaRecrawlUrisMetadata.
        :param pending_count: The pending_count of this GoogleCloudDiscoveryengineV1alphaRecrawlUrisMetadata.
        :param quota_exceeded_count: The quota_exceeded_count of this GoogleCloudDiscoveryengineV1alphaRecrawlUrisMetadata.
        :param success_count: The success_count of this GoogleCloudDiscoveryengineV1alphaRecrawlUrisMetadata.
        :param update_time: The update_time of this GoogleCloudDiscoveryengineV1alphaRecrawlUrisMetadata.
        :param valid_uris_count: The valid_uris_count of this GoogleCloudDiscoveryengineV1alphaRecrawlUrisMetadata.
        """
        self.openapi_types = {
            'create_time': str,
            'invalid_uris': List[str],
            'pending_count': int,
            'quota_exceeded_count': int,
            'success_count': int,
            'update_time': str,
            'valid_uris_count': int
        }

        self.attribute_map = {
            'create_time': 'createTime',
            'invalid_uris': 'invalidUris',
            'pending_count': 'pendingCount',
            'quota_exceeded_count': 'quotaExceededCount',
            'success_count': 'successCount',
            'update_time': 'updateTime',
            'valid_uris_count': 'validUrisCount'
        }

        self._create_time = create_time
        self._invalid_uris = invalid_uris
        self._pending_count = pending_count
        self._quota_exceeded_count = quota_exceeded_count
        self._success_count = success_count
        self._update_time = update_time
        self._valid_uris_count = valid_uris_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudDiscoveryengineV1alphaRecrawlUrisMetadata':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudDiscoveryengineV1alphaRecrawlUrisMetadata of this GoogleCloudDiscoveryengineV1alphaRecrawlUrisMetadata.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def create_time(self):
        """Gets the create_time of this GoogleCloudDiscoveryengineV1alphaRecrawlUrisMetadata.

        Operation create time.

        :return: The create_time of this GoogleCloudDiscoveryengineV1alphaRecrawlUrisMetadata.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this GoogleCloudDiscoveryengineV1alphaRecrawlUrisMetadata.

        Operation create time.

        :param create_time: The create_time of this GoogleCloudDiscoveryengineV1alphaRecrawlUrisMetadata.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def invalid_uris(self):
        """Gets the invalid_uris of this GoogleCloudDiscoveryengineV1alphaRecrawlUrisMetadata.

        Unique URIs in the request that don't match any TargetSite in the DataStore, only match TargetSites that haven't been fully indexed, or match a TargetSite with type EXCLUDE.

        :return: The invalid_uris of this GoogleCloudDiscoveryengineV1alphaRecrawlUrisMetadata.
        :rtype: List[str]
        """
        return self._invalid_uris

    @invalid_uris.setter
    def invalid_uris(self, invalid_uris):
        """Sets the invalid_uris of this GoogleCloudDiscoveryengineV1alphaRecrawlUrisMetadata.

        Unique URIs in the request that don't match any TargetSite in the DataStore, only match TargetSites that haven't been fully indexed, or match a TargetSite with type EXCLUDE.

        :param invalid_uris: The invalid_uris of this GoogleCloudDiscoveryengineV1alphaRecrawlUrisMetadata.
        :type invalid_uris: List[str]
        """

        self._invalid_uris = invalid_uris

    @property
    def pending_count(self):
        """Gets the pending_count of this GoogleCloudDiscoveryengineV1alphaRecrawlUrisMetadata.

        Total number of URIs that have yet to be crawled.

        :return: The pending_count of this GoogleCloudDiscoveryengineV1alphaRecrawlUrisMetadata.
        :rtype: int
        """
        return self._pending_count

    @pending_count.setter
    def pending_count(self, pending_count):
        """Sets the pending_count of this GoogleCloudDiscoveryengineV1alphaRecrawlUrisMetadata.

        Total number of URIs that have yet to be crawled.

        :param pending_count: The pending_count of this GoogleCloudDiscoveryengineV1alphaRecrawlUrisMetadata.
        :type pending_count: int
        """

        self._pending_count = pending_count

    @property
    def quota_exceeded_count(self):
        """Gets the quota_exceeded_count of this GoogleCloudDiscoveryengineV1alphaRecrawlUrisMetadata.

        Total number of URIs that were rejected due to insufficient indexing resources.

        :return: The quota_exceeded_count of this GoogleCloudDiscoveryengineV1alphaRecrawlUrisMetadata.
        :rtype: int
        """
        return self._quota_exceeded_count

    @quota_exceeded_count.setter
    def quota_exceeded_count(self, quota_exceeded_count):
        """Sets the quota_exceeded_count of this GoogleCloudDiscoveryengineV1alphaRecrawlUrisMetadata.

        Total number of URIs that were rejected due to insufficient indexing resources.

        :param quota_exceeded_count: The quota_exceeded_count of this GoogleCloudDiscoveryengineV1alphaRecrawlUrisMetadata.
        :type quota_exceeded_count: int
        """

        self._quota_exceeded_count = quota_exceeded_count

    @property
    def success_count(self):
        """Gets the success_count of this GoogleCloudDiscoveryengineV1alphaRecrawlUrisMetadata.

        Total number of URIs that have been crawled so far.

        :return: The success_count of this GoogleCloudDiscoveryengineV1alphaRecrawlUrisMetadata.
        :rtype: int
        """
        return self._success_count

    @success_count.setter
    def success_count(self, success_count):
        """Sets the success_count of this GoogleCloudDiscoveryengineV1alphaRecrawlUrisMetadata.

        Total number of URIs that have been crawled so far.

        :param success_count: The success_count of this GoogleCloudDiscoveryengineV1alphaRecrawlUrisMetadata.
        :type success_count: int
        """

        self._success_count = success_count

    @property
    def update_time(self):
        """Gets the update_time of this GoogleCloudDiscoveryengineV1alphaRecrawlUrisMetadata.

        Operation last update time. If the operation is done, this is also the finish time.

        :return: The update_time of this GoogleCloudDiscoveryengineV1alphaRecrawlUrisMetadata.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this GoogleCloudDiscoveryengineV1alphaRecrawlUrisMetadata.

        Operation last update time. If the operation is done, this is also the finish time.

        :param update_time: The update_time of this GoogleCloudDiscoveryengineV1alphaRecrawlUrisMetadata.
        :type update_time: str
        """

        self._update_time = update_time

    @property
    def valid_uris_count(self):
        """Gets the valid_uris_count of this GoogleCloudDiscoveryengineV1alphaRecrawlUrisMetadata.

        Total number of unique URIs in the request that are not in invalid_uris.

        :return: The valid_uris_count of this GoogleCloudDiscoveryengineV1alphaRecrawlUrisMetadata.
        :rtype: int
        """
        return self._valid_uris_count

    @valid_uris_count.setter
    def valid_uris_count(self, valid_uris_count):
        """Sets the valid_uris_count of this GoogleCloudDiscoveryengineV1alphaRecrawlUrisMetadata.

        Total number of unique URIs in the request that are not in invalid_uris.

        :param valid_uris_count: The valid_uris_count of this GoogleCloudDiscoveryengineV1alphaRecrawlUrisMetadata.
        :type valid_uris_count: int
        """

        self._valid_uris_count = valid_uris_count
