# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_discoveryengine_v1beta_document_content import GoogleCloudDiscoveryengineV1betaDocumentContent
from openapi_server import util


class GoogleCloudDiscoveryengineV1betaDocument(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, content: GoogleCloudDiscoveryengineV1betaDocumentContent=None, derived_struct_data: Dict[str, object]=None, id: str=None, index_time: str=None, json_data: str=None, name: str=None, parent_document_id: str=None, schema_id: str=None, struct_data: Dict[str, object]=None):
        """GoogleCloudDiscoveryengineV1betaDocument - a model defined in OpenAPI

        :param content: The content of this GoogleCloudDiscoveryengineV1betaDocument.
        :param derived_struct_data: The derived_struct_data of this GoogleCloudDiscoveryengineV1betaDocument.
        :param id: The id of this GoogleCloudDiscoveryengineV1betaDocument.
        :param index_time: The index_time of this GoogleCloudDiscoveryengineV1betaDocument.
        :param json_data: The json_data of this GoogleCloudDiscoveryengineV1betaDocument.
        :param name: The name of this GoogleCloudDiscoveryengineV1betaDocument.
        :param parent_document_id: The parent_document_id of this GoogleCloudDiscoveryengineV1betaDocument.
        :param schema_id: The schema_id of this GoogleCloudDiscoveryengineV1betaDocument.
        :param struct_data: The struct_data of this GoogleCloudDiscoveryengineV1betaDocument.
        """
        self.openapi_types = {
            'content': GoogleCloudDiscoveryengineV1betaDocumentContent,
            'derived_struct_data': Dict[str, object],
            'id': str,
            'index_time': str,
            'json_data': str,
            'name': str,
            'parent_document_id': str,
            'schema_id': str,
            'struct_data': Dict[str, object]
        }

        self.attribute_map = {
            'content': 'content',
            'derived_struct_data': 'derivedStructData',
            'id': 'id',
            'index_time': 'indexTime',
            'json_data': 'jsonData',
            'name': 'name',
            'parent_document_id': 'parentDocumentId',
            'schema_id': 'schemaId',
            'struct_data': 'structData'
        }

        self._content = content
        self._derived_struct_data = derived_struct_data
        self._id = id
        self._index_time = index_time
        self._json_data = json_data
        self._name = name
        self._parent_document_id = parent_document_id
        self._schema_id = schema_id
        self._struct_data = struct_data

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudDiscoveryengineV1betaDocument':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudDiscoveryengineV1betaDocument of this GoogleCloudDiscoveryengineV1betaDocument.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def content(self):
        """Gets the content of this GoogleCloudDiscoveryengineV1betaDocument.


        :return: The content of this GoogleCloudDiscoveryengineV1betaDocument.
        :rtype: GoogleCloudDiscoveryengineV1betaDocumentContent
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this GoogleCloudDiscoveryengineV1betaDocument.


        :param content: The content of this GoogleCloudDiscoveryengineV1betaDocument.
        :type content: GoogleCloudDiscoveryengineV1betaDocumentContent
        """

        self._content = content

    @property
    def derived_struct_data(self):
        """Gets the derived_struct_data of this GoogleCloudDiscoveryengineV1betaDocument.

        Output only. This field is OUTPUT_ONLY. It contains derived data that are not in the original input document.

        :return: The derived_struct_data of this GoogleCloudDiscoveryengineV1betaDocument.
        :rtype: Dict[str, object]
        """
        return self._derived_struct_data

    @derived_struct_data.setter
    def derived_struct_data(self, derived_struct_data):
        """Sets the derived_struct_data of this GoogleCloudDiscoveryengineV1betaDocument.

        Output only. This field is OUTPUT_ONLY. It contains derived data that are not in the original input document.

        :param derived_struct_data: The derived_struct_data of this GoogleCloudDiscoveryengineV1betaDocument.
        :type derived_struct_data: Dict[str, object]
        """

        self._derived_struct_data = derived_struct_data

    @property
    def id(self):
        """Gets the id of this GoogleCloudDiscoveryengineV1betaDocument.

        Immutable. The identifier of the document. Id should conform to [RFC-1034](https://tools.ietf.org/html/rfc1034) standard with a length limit of 63 characters.

        :return: The id of this GoogleCloudDiscoveryengineV1betaDocument.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GoogleCloudDiscoveryengineV1betaDocument.

        Immutable. The identifier of the document. Id should conform to [RFC-1034](https://tools.ietf.org/html/rfc1034) standard with a length limit of 63 characters.

        :param id: The id of this GoogleCloudDiscoveryengineV1betaDocument.
        :type id: str
        """

        self._id = id

    @property
    def index_time(self):
        """Gets the index_time of this GoogleCloudDiscoveryengineV1betaDocument.

        Output only. The last time the document was indexed. If this field is set, the document could be returned in search results. This field is OUTPUT_ONLY. If this field is not populated, it means the document has never been indexed.

        :return: The index_time of this GoogleCloudDiscoveryengineV1betaDocument.
        :rtype: str
        """
        return self._index_time

    @index_time.setter
    def index_time(self, index_time):
        """Sets the index_time of this GoogleCloudDiscoveryengineV1betaDocument.

        Output only. The last time the document was indexed. If this field is set, the document could be returned in search results. This field is OUTPUT_ONLY. If this field is not populated, it means the document has never been indexed.

        :param index_time: The index_time of this GoogleCloudDiscoveryengineV1betaDocument.
        :type index_time: str
        """

        self._index_time = index_time

    @property
    def json_data(self):
        """Gets the json_data of this GoogleCloudDiscoveryengineV1betaDocument.

        The JSON string representation of the document. It should conform to the registered Schema or an `INVALID_ARGUMENT` error is thrown.

        :return: The json_data of this GoogleCloudDiscoveryengineV1betaDocument.
        :rtype: str
        """
        return self._json_data

    @json_data.setter
    def json_data(self, json_data):
        """Sets the json_data of this GoogleCloudDiscoveryengineV1betaDocument.

        The JSON string representation of the document. It should conform to the registered Schema or an `INVALID_ARGUMENT` error is thrown.

        :param json_data: The json_data of this GoogleCloudDiscoveryengineV1betaDocument.
        :type json_data: str
        """

        self._json_data = json_data

    @property
    def name(self):
        """Gets the name of this GoogleCloudDiscoveryengineV1betaDocument.

        Immutable. The full resource name of the document. Format: `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}/branches/{branch}/documents/{document_id}`. This field must be a UTF-8 encoded string with a length limit of 1024 characters.

        :return: The name of this GoogleCloudDiscoveryengineV1betaDocument.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GoogleCloudDiscoveryengineV1betaDocument.

        Immutable. The full resource name of the document. Format: `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}/branches/{branch}/documents/{document_id}`. This field must be a UTF-8 encoded string with a length limit of 1024 characters.

        :param name: The name of this GoogleCloudDiscoveryengineV1betaDocument.
        :type name: str
        """

        self._name = name

    @property
    def parent_document_id(self):
        """Gets the parent_document_id of this GoogleCloudDiscoveryengineV1betaDocument.

        The identifier of the parent document. Currently supports at most two level document hierarchy. Id should conform to [RFC-1034](https://tools.ietf.org/html/rfc1034) standard with a length limit of 63 characters.

        :return: The parent_document_id of this GoogleCloudDiscoveryengineV1betaDocument.
        :rtype: str
        """
        return self._parent_document_id

    @parent_document_id.setter
    def parent_document_id(self, parent_document_id):
        """Sets the parent_document_id of this GoogleCloudDiscoveryengineV1betaDocument.

        The identifier of the parent document. Currently supports at most two level document hierarchy. Id should conform to [RFC-1034](https://tools.ietf.org/html/rfc1034) standard with a length limit of 63 characters.

        :param parent_document_id: The parent_document_id of this GoogleCloudDiscoveryengineV1betaDocument.
        :type parent_document_id: str
        """

        self._parent_document_id = parent_document_id

    @property
    def schema_id(self):
        """Gets the schema_id of this GoogleCloudDiscoveryengineV1betaDocument.

        The identifier of the schema located in the same data store.

        :return: The schema_id of this GoogleCloudDiscoveryengineV1betaDocument.
        :rtype: str
        """
        return self._schema_id

    @schema_id.setter
    def schema_id(self, schema_id):
        """Sets the schema_id of this GoogleCloudDiscoveryengineV1betaDocument.

        The identifier of the schema located in the same data store.

        :param schema_id: The schema_id of this GoogleCloudDiscoveryengineV1betaDocument.
        :type schema_id: str
        """

        self._schema_id = schema_id

    @property
    def struct_data(self):
        """Gets the struct_data of this GoogleCloudDiscoveryengineV1betaDocument.

        The structured JSON data for the document. It should conform to the registered Schema or an `INVALID_ARGUMENT` error is thrown.

        :return: The struct_data of this GoogleCloudDiscoveryengineV1betaDocument.
        :rtype: Dict[str, object]
        """
        return self._struct_data

    @struct_data.setter
    def struct_data(self, struct_data):
        """Sets the struct_data of this GoogleCloudDiscoveryengineV1betaDocument.

        The structured JSON data for the document. It should conform to the registered Schema or an `INVALID_ARGUMENT` error is thrown.

        :param struct_data: The struct_data of this GoogleCloudDiscoveryengineV1betaDocument.
        :type struct_data: Dict[str, object]
        """

        self._struct_data = struct_data
