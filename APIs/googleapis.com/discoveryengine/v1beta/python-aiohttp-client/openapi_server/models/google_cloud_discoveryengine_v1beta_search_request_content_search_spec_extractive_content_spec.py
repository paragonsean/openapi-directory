# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleCloudDiscoveryengineV1betaSearchRequestContentSearchSpecExtractiveContentSpec(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, max_extractive_answer_count: int=None, max_extractive_segment_count: int=None, num_next_segments: int=None, num_previous_segments: int=None):
        """GoogleCloudDiscoveryengineV1betaSearchRequestContentSearchSpecExtractiveContentSpec - a model defined in OpenAPI

        :param max_extractive_answer_count: The max_extractive_answer_count of this GoogleCloudDiscoveryengineV1betaSearchRequestContentSearchSpecExtractiveContentSpec.
        :param max_extractive_segment_count: The max_extractive_segment_count of this GoogleCloudDiscoveryengineV1betaSearchRequestContentSearchSpecExtractiveContentSpec.
        :param num_next_segments: The num_next_segments of this GoogleCloudDiscoveryengineV1betaSearchRequestContentSearchSpecExtractiveContentSpec.
        :param num_previous_segments: The num_previous_segments of this GoogleCloudDiscoveryengineV1betaSearchRequestContentSearchSpecExtractiveContentSpec.
        """
        self.openapi_types = {
            'max_extractive_answer_count': int,
            'max_extractive_segment_count': int,
            'num_next_segments': int,
            'num_previous_segments': int
        }

        self.attribute_map = {
            'max_extractive_answer_count': 'maxExtractiveAnswerCount',
            'max_extractive_segment_count': 'maxExtractiveSegmentCount',
            'num_next_segments': 'numNextSegments',
            'num_previous_segments': 'numPreviousSegments'
        }

        self._max_extractive_answer_count = max_extractive_answer_count
        self._max_extractive_segment_count = max_extractive_segment_count
        self._num_next_segments = num_next_segments
        self._num_previous_segments = num_previous_segments

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudDiscoveryengineV1betaSearchRequestContentSearchSpecExtractiveContentSpec':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudDiscoveryengineV1betaSearchRequestContentSearchSpecExtractiveContentSpec of this GoogleCloudDiscoveryengineV1betaSearchRequestContentSearchSpecExtractiveContentSpec.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def max_extractive_answer_count(self):
        """Gets the max_extractive_answer_count of this GoogleCloudDiscoveryengineV1betaSearchRequestContentSearchSpecExtractiveContentSpec.

        The maximum number of extractive answers returned in each search result. An extractive answer is a verbatim answer extracted from the original document, which provides a precise and contextually relevant answer to the search query. If the number of matching answers is less than the `max_extractive_answer_count`, return all of the answers. Otherwise, return the `max_extractive_answer_count`. At most five answers are returned for each SearchResult.

        :return: The max_extractive_answer_count of this GoogleCloudDiscoveryengineV1betaSearchRequestContentSearchSpecExtractiveContentSpec.
        :rtype: int
        """
        return self._max_extractive_answer_count

    @max_extractive_answer_count.setter
    def max_extractive_answer_count(self, max_extractive_answer_count):
        """Sets the max_extractive_answer_count of this GoogleCloudDiscoveryengineV1betaSearchRequestContentSearchSpecExtractiveContentSpec.

        The maximum number of extractive answers returned in each search result. An extractive answer is a verbatim answer extracted from the original document, which provides a precise and contextually relevant answer to the search query. If the number of matching answers is less than the `max_extractive_answer_count`, return all of the answers. Otherwise, return the `max_extractive_answer_count`. At most five answers are returned for each SearchResult.

        :param max_extractive_answer_count: The max_extractive_answer_count of this GoogleCloudDiscoveryengineV1betaSearchRequestContentSearchSpecExtractiveContentSpec.
        :type max_extractive_answer_count: int
        """

        self._max_extractive_answer_count = max_extractive_answer_count

    @property
    def max_extractive_segment_count(self):
        """Gets the max_extractive_segment_count of this GoogleCloudDiscoveryengineV1betaSearchRequestContentSearchSpecExtractiveContentSpec.

        The max number of extractive segments returned in each search result. Only applied if the DataStore is set to DataStore.ContentConfig.CONTENT_REQUIRED or DataStore.solution_types is SOLUTION_TYPE_CHAT. An extractive segment is a text segment extracted from the original document that is relevant to the search query, and, in general, more verbose than an extractive answer. The segment could then be used as input for LLMs to generate summaries and answers. If the number of matching segments is less than `max_extractive_segment_count`, return all of the segments. Otherwise, return the `max_extractive_segment_count`.

        :return: The max_extractive_segment_count of this GoogleCloudDiscoveryengineV1betaSearchRequestContentSearchSpecExtractiveContentSpec.
        :rtype: int
        """
        return self._max_extractive_segment_count

    @max_extractive_segment_count.setter
    def max_extractive_segment_count(self, max_extractive_segment_count):
        """Sets the max_extractive_segment_count of this GoogleCloudDiscoveryengineV1betaSearchRequestContentSearchSpecExtractiveContentSpec.

        The max number of extractive segments returned in each search result. Only applied if the DataStore is set to DataStore.ContentConfig.CONTENT_REQUIRED or DataStore.solution_types is SOLUTION_TYPE_CHAT. An extractive segment is a text segment extracted from the original document that is relevant to the search query, and, in general, more verbose than an extractive answer. The segment could then be used as input for LLMs to generate summaries and answers. If the number of matching segments is less than `max_extractive_segment_count`, return all of the segments. Otherwise, return the `max_extractive_segment_count`.

        :param max_extractive_segment_count: The max_extractive_segment_count of this GoogleCloudDiscoveryengineV1betaSearchRequestContentSearchSpecExtractiveContentSpec.
        :type max_extractive_segment_count: int
        """

        self._max_extractive_segment_count = max_extractive_segment_count

    @property
    def num_next_segments(self):
        """Gets the num_next_segments of this GoogleCloudDiscoveryengineV1betaSearchRequestContentSearchSpecExtractiveContentSpec.

        Return at most `num_next_segments` segments after each selected segments.

        :return: The num_next_segments of this GoogleCloudDiscoveryengineV1betaSearchRequestContentSearchSpecExtractiveContentSpec.
        :rtype: int
        """
        return self._num_next_segments

    @num_next_segments.setter
    def num_next_segments(self, num_next_segments):
        """Sets the num_next_segments of this GoogleCloudDiscoveryengineV1betaSearchRequestContentSearchSpecExtractiveContentSpec.

        Return at most `num_next_segments` segments after each selected segments.

        :param num_next_segments: The num_next_segments of this GoogleCloudDiscoveryengineV1betaSearchRequestContentSearchSpecExtractiveContentSpec.
        :type num_next_segments: int
        """

        self._num_next_segments = num_next_segments

    @property
    def num_previous_segments(self):
        """Gets the num_previous_segments of this GoogleCloudDiscoveryengineV1betaSearchRequestContentSearchSpecExtractiveContentSpec.

        Specifies whether to also include the adjacent from each selected segments. Return at most `num_previous_segments` segments before each selected segments.

        :return: The num_previous_segments of this GoogleCloudDiscoveryengineV1betaSearchRequestContentSearchSpecExtractiveContentSpec.
        :rtype: int
        """
        return self._num_previous_segments

    @num_previous_segments.setter
    def num_previous_segments(self, num_previous_segments):
        """Sets the num_previous_segments of this GoogleCloudDiscoveryengineV1betaSearchRequestContentSearchSpecExtractiveContentSpec.

        Specifies whether to also include the adjacent from each selected segments. Return at most `num_previous_segments` segments before each selected segments.

        :param num_previous_segments: The num_previous_segments of this GoogleCloudDiscoveryengineV1betaSearchRequestContentSearchSpecExtractiveContentSpec.
        :type num_previous_segments: int
        """

        self._num_previous_segments = num_previous_segments
