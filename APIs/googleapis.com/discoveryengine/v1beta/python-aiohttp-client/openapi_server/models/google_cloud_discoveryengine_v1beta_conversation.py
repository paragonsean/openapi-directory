# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_discoveryengine_v1beta_conversation_message import GoogleCloudDiscoveryengineV1betaConversationMessage
from openapi_server import util


class GoogleCloudDiscoveryengineV1betaConversation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, end_time: str=None, messages: List[GoogleCloudDiscoveryengineV1betaConversationMessage]=None, name: str=None, start_time: str=None, state: str=None, user_pseudo_id: str=None):
        """GoogleCloudDiscoveryengineV1betaConversation - a model defined in OpenAPI

        :param end_time: The end_time of this GoogleCloudDiscoveryengineV1betaConversation.
        :param messages: The messages of this GoogleCloudDiscoveryengineV1betaConversation.
        :param name: The name of this GoogleCloudDiscoveryengineV1betaConversation.
        :param start_time: The start_time of this GoogleCloudDiscoveryengineV1betaConversation.
        :param state: The state of this GoogleCloudDiscoveryengineV1betaConversation.
        :param user_pseudo_id: The user_pseudo_id of this GoogleCloudDiscoveryengineV1betaConversation.
        """
        self.openapi_types = {
            'end_time': str,
            'messages': List[GoogleCloudDiscoveryengineV1betaConversationMessage],
            'name': str,
            'start_time': str,
            'state': str,
            'user_pseudo_id': str
        }

        self.attribute_map = {
            'end_time': 'endTime',
            'messages': 'messages',
            'name': 'name',
            'start_time': 'startTime',
            'state': 'state',
            'user_pseudo_id': 'userPseudoId'
        }

        self._end_time = end_time
        self._messages = messages
        self._name = name
        self._start_time = start_time
        self._state = state
        self._user_pseudo_id = user_pseudo_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudDiscoveryengineV1betaConversation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudDiscoveryengineV1betaConversation of this GoogleCloudDiscoveryengineV1betaConversation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def end_time(self):
        """Gets the end_time of this GoogleCloudDiscoveryengineV1betaConversation.

        Output only. The time the conversation finished.

        :return: The end_time of this GoogleCloudDiscoveryengineV1betaConversation.
        :rtype: str
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this GoogleCloudDiscoveryengineV1betaConversation.

        Output only. The time the conversation finished.

        :param end_time: The end_time of this GoogleCloudDiscoveryengineV1betaConversation.
        :type end_time: str
        """

        self._end_time = end_time

    @property
    def messages(self):
        """Gets the messages of this GoogleCloudDiscoveryengineV1betaConversation.

        Conversation messages.

        :return: The messages of this GoogleCloudDiscoveryengineV1betaConversation.
        :rtype: List[GoogleCloudDiscoveryengineV1betaConversationMessage]
        """
        return self._messages

    @messages.setter
    def messages(self, messages):
        """Sets the messages of this GoogleCloudDiscoveryengineV1betaConversation.

        Conversation messages.

        :param messages: The messages of this GoogleCloudDiscoveryengineV1betaConversation.
        :type messages: List[GoogleCloudDiscoveryengineV1betaConversationMessage]
        """

        self._messages = messages

    @property
    def name(self):
        """Gets the name of this GoogleCloudDiscoveryengineV1betaConversation.

        Immutable. Fully qualified name `project/*/locations/global/collections/{collection}/dataStore/*/conversations/*` or `project/*/locations/global/collections/{collection}/engines/*/conversations/*`.

        :return: The name of this GoogleCloudDiscoveryengineV1betaConversation.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GoogleCloudDiscoveryengineV1betaConversation.

        Immutable. Fully qualified name `project/*/locations/global/collections/{collection}/dataStore/*/conversations/*` or `project/*/locations/global/collections/{collection}/engines/*/conversations/*`.

        :param name: The name of this GoogleCloudDiscoveryengineV1betaConversation.
        :type name: str
        """

        self._name = name

    @property
    def start_time(self):
        """Gets the start_time of this GoogleCloudDiscoveryengineV1betaConversation.

        Output only. The time the conversation started.

        :return: The start_time of this GoogleCloudDiscoveryengineV1betaConversation.
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this GoogleCloudDiscoveryengineV1betaConversation.

        Output only. The time the conversation started.

        :param start_time: The start_time of this GoogleCloudDiscoveryengineV1betaConversation.
        :type start_time: str
        """

        self._start_time = start_time

    @property
    def state(self):
        """Gets the state of this GoogleCloudDiscoveryengineV1betaConversation.

        The state of the Conversation.

        :return: The state of this GoogleCloudDiscoveryengineV1betaConversation.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this GoogleCloudDiscoveryengineV1betaConversation.

        The state of the Conversation.

        :param state: The state of this GoogleCloudDiscoveryengineV1betaConversation.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "IN_PROGRESS", "COMPLETED"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def user_pseudo_id(self):
        """Gets the user_pseudo_id of this GoogleCloudDiscoveryengineV1betaConversation.

        A unique identifier for tracking users.

        :return: The user_pseudo_id of this GoogleCloudDiscoveryengineV1betaConversation.
        :rtype: str
        """
        return self._user_pseudo_id

    @user_pseudo_id.setter
    def user_pseudo_id(self, user_pseudo_id):
        """Sets the user_pseudo_id of this GoogleCloudDiscoveryengineV1betaConversation.

        A unique identifier for tracking users.

        :param user_pseudo_id: The user_pseudo_id of this GoogleCloudDiscoveryengineV1betaConversation.
        :type user_pseudo_id: str
        """

        self._user_pseudo_id = user_pseudo_id
