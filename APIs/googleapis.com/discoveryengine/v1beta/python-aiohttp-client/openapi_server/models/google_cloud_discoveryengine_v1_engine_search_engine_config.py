# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleCloudDiscoveryengineV1EngineSearchEngineConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, search_add_ons: List[str]=None, search_tier: str=None):
        """GoogleCloudDiscoveryengineV1EngineSearchEngineConfig - a model defined in OpenAPI

        :param search_add_ons: The search_add_ons of this GoogleCloudDiscoveryengineV1EngineSearchEngineConfig.
        :param search_tier: The search_tier of this GoogleCloudDiscoveryengineV1EngineSearchEngineConfig.
        """
        self.openapi_types = {
            'search_add_ons': List[str],
            'search_tier': str
        }

        self.attribute_map = {
            'search_add_ons': 'searchAddOns',
            'search_tier': 'searchTier'
        }

        self._search_add_ons = search_add_ons
        self._search_tier = search_tier

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudDiscoveryengineV1EngineSearchEngineConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudDiscoveryengineV1EngineSearchEngineConfig of this GoogleCloudDiscoveryengineV1EngineSearchEngineConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def search_add_ons(self):
        """Gets the search_add_ons of this GoogleCloudDiscoveryengineV1EngineSearchEngineConfig.

        The add-on that this search engine enables.

        :return: The search_add_ons of this GoogleCloudDiscoveryengineV1EngineSearchEngineConfig.
        :rtype: List[str]
        """
        return self._search_add_ons

    @search_add_ons.setter
    def search_add_ons(self, search_add_ons):
        """Sets the search_add_ons of this GoogleCloudDiscoveryengineV1EngineSearchEngineConfig.

        The add-on that this search engine enables.

        :param search_add_ons: The search_add_ons of this GoogleCloudDiscoveryengineV1EngineSearchEngineConfig.
        :type search_add_ons: List[str]
        """
        allowed_values = ["SEARCH_ADD_ON_UNSPECIFIED", "SEARCH_ADD_ON_LLM"]  # noqa: E501
        if not set(search_add_ons).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `search_add_ons` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(search_add_ons) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._search_add_ons = search_add_ons

    @property
    def search_tier(self):
        """Gets the search_tier of this GoogleCloudDiscoveryengineV1EngineSearchEngineConfig.

        The search feature tier of this engine. Different tiers might have different pricing. To learn more, please check the pricing documentation. Defaults to SearchTier.SEARCH_TIER_STANDARD if not specified.

        :return: The search_tier of this GoogleCloudDiscoveryengineV1EngineSearchEngineConfig.
        :rtype: str
        """
        return self._search_tier

    @search_tier.setter
    def search_tier(self, search_tier):
        """Sets the search_tier of this GoogleCloudDiscoveryengineV1EngineSearchEngineConfig.

        The search feature tier of this engine. Different tiers might have different pricing. To learn more, please check the pricing documentation. Defaults to SearchTier.SEARCH_TIER_STANDARD if not specified.

        :param search_tier: The search_tier of this GoogleCloudDiscoveryengineV1EngineSearchEngineConfig.
        :type search_tier: str
        """
        allowed_values = ["SEARCH_TIER_UNSPECIFIED", "SEARCH_TIER_STANDARD", "SEARCH_TIER_ENTERPRISE"]  # noqa: E501
        if search_tier not in allowed_values:
            raise ValueError(
                "Invalid value for `search_tier` ({0}), must be one of {1}"
                .format(search_tier, allowed_values)
            )

        self._search_tier = search_tier
