# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_discoveryengine_v1beta_conversation import GoogleCloudDiscoveryengineV1betaConversation
from openapi_server.models.google_cloud_discoveryengine_v1beta_search_request_boost_spec import GoogleCloudDiscoveryengineV1betaSearchRequestBoostSpec
from openapi_server.models.google_cloud_discoveryengine_v1beta_search_request_content_search_spec_summary_spec import GoogleCloudDiscoveryengineV1betaSearchRequestContentSearchSpecSummarySpec
from openapi_server.models.google_cloud_discoveryengine_v1beta_text_input import GoogleCloudDiscoveryengineV1betaTextInput
from openapi_server import util


class GoogleCloudDiscoveryengineV1betaConverseConversationRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, boost_spec: GoogleCloudDiscoveryengineV1betaSearchRequestBoostSpec=None, conversation: GoogleCloudDiscoveryengineV1betaConversation=None, filter: str=None, query: GoogleCloudDiscoveryengineV1betaTextInput=None, safe_search: bool=None, serving_config: str=None, summary_spec: GoogleCloudDiscoveryengineV1betaSearchRequestContentSearchSpecSummarySpec=None, user_labels: Dict[str, str]=None):
        """GoogleCloudDiscoveryengineV1betaConverseConversationRequest - a model defined in OpenAPI

        :param boost_spec: The boost_spec of this GoogleCloudDiscoveryengineV1betaConverseConversationRequest.
        :param conversation: The conversation of this GoogleCloudDiscoveryengineV1betaConverseConversationRequest.
        :param filter: The filter of this GoogleCloudDiscoveryengineV1betaConverseConversationRequest.
        :param query: The query of this GoogleCloudDiscoveryengineV1betaConverseConversationRequest.
        :param safe_search: The safe_search of this GoogleCloudDiscoveryengineV1betaConverseConversationRequest.
        :param serving_config: The serving_config of this GoogleCloudDiscoveryengineV1betaConverseConversationRequest.
        :param summary_spec: The summary_spec of this GoogleCloudDiscoveryengineV1betaConverseConversationRequest.
        :param user_labels: The user_labels of this GoogleCloudDiscoveryengineV1betaConverseConversationRequest.
        """
        self.openapi_types = {
            'boost_spec': GoogleCloudDiscoveryengineV1betaSearchRequestBoostSpec,
            'conversation': GoogleCloudDiscoveryengineV1betaConversation,
            'filter': str,
            'query': GoogleCloudDiscoveryengineV1betaTextInput,
            'safe_search': bool,
            'serving_config': str,
            'summary_spec': GoogleCloudDiscoveryengineV1betaSearchRequestContentSearchSpecSummarySpec,
            'user_labels': Dict[str, str]
        }

        self.attribute_map = {
            'boost_spec': 'boostSpec',
            'conversation': 'conversation',
            'filter': 'filter',
            'query': 'query',
            'safe_search': 'safeSearch',
            'serving_config': 'servingConfig',
            'summary_spec': 'summarySpec',
            'user_labels': 'userLabels'
        }

        self._boost_spec = boost_spec
        self._conversation = conversation
        self._filter = filter
        self._query = query
        self._safe_search = safe_search
        self._serving_config = serving_config
        self._summary_spec = summary_spec
        self._user_labels = user_labels

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudDiscoveryengineV1betaConverseConversationRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudDiscoveryengineV1betaConverseConversationRequest of this GoogleCloudDiscoveryengineV1betaConverseConversationRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def boost_spec(self):
        """Gets the boost_spec of this GoogleCloudDiscoveryengineV1betaConverseConversationRequest.


        :return: The boost_spec of this GoogleCloudDiscoveryengineV1betaConverseConversationRequest.
        :rtype: GoogleCloudDiscoveryengineV1betaSearchRequestBoostSpec
        """
        return self._boost_spec

    @boost_spec.setter
    def boost_spec(self, boost_spec):
        """Sets the boost_spec of this GoogleCloudDiscoveryengineV1betaConverseConversationRequest.


        :param boost_spec: The boost_spec of this GoogleCloudDiscoveryengineV1betaConverseConversationRequest.
        :type boost_spec: GoogleCloudDiscoveryengineV1betaSearchRequestBoostSpec
        """

        self._boost_spec = boost_spec

    @property
    def conversation(self):
        """Gets the conversation of this GoogleCloudDiscoveryengineV1betaConverseConversationRequest.


        :return: The conversation of this GoogleCloudDiscoveryengineV1betaConverseConversationRequest.
        :rtype: GoogleCloudDiscoveryengineV1betaConversation
        """
        return self._conversation

    @conversation.setter
    def conversation(self, conversation):
        """Sets the conversation of this GoogleCloudDiscoveryengineV1betaConverseConversationRequest.


        :param conversation: The conversation of this GoogleCloudDiscoveryengineV1betaConverseConversationRequest.
        :type conversation: GoogleCloudDiscoveryengineV1betaConversation
        """

        self._conversation = conversation

    @property
    def filter(self):
        """Gets the filter of this GoogleCloudDiscoveryengineV1betaConverseConversationRequest.

        The filter syntax consists of an expression language for constructing a predicate from one or more fields of the documents being filtered. Filter expression is case-sensitive. This will be used to filter search results which may affect the summary response. If this field is unrecognizable, an `INVALID_ARGUMENT` is returned. Filtering in Vertex AI Search is done by mapping the LHS filter key to a key property defined in the Vertex AI Search backend -- this mapping is defined by the customer in their schema. For example a media customer might have a field 'name' in their schema. In this case the filter would look like this: filter --> name:'ANY(\"king kong\")' For more information about filtering including syntax and filter operators, see [Filter](https://cloud.google.com/generative-ai-app-builder/docs/filter-search-metadata)

        :return: The filter of this GoogleCloudDiscoveryengineV1betaConverseConversationRequest.
        :rtype: str
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this GoogleCloudDiscoveryengineV1betaConverseConversationRequest.

        The filter syntax consists of an expression language for constructing a predicate from one or more fields of the documents being filtered. Filter expression is case-sensitive. This will be used to filter search results which may affect the summary response. If this field is unrecognizable, an `INVALID_ARGUMENT` is returned. Filtering in Vertex AI Search is done by mapping the LHS filter key to a key property defined in the Vertex AI Search backend -- this mapping is defined by the customer in their schema. For example a media customer might have a field 'name' in their schema. In this case the filter would look like this: filter --> name:'ANY(\"king kong\")' For more information about filtering including syntax and filter operators, see [Filter](https://cloud.google.com/generative-ai-app-builder/docs/filter-search-metadata)

        :param filter: The filter of this GoogleCloudDiscoveryengineV1betaConverseConversationRequest.
        :type filter: str
        """

        self._filter = filter

    @property
    def query(self):
        """Gets the query of this GoogleCloudDiscoveryengineV1betaConverseConversationRequest.


        :return: The query of this GoogleCloudDiscoveryengineV1betaConverseConversationRequest.
        :rtype: GoogleCloudDiscoveryengineV1betaTextInput
        """
        return self._query

    @query.setter
    def query(self, query):
        """Sets the query of this GoogleCloudDiscoveryengineV1betaConverseConversationRequest.


        :param query: The query of this GoogleCloudDiscoveryengineV1betaConverseConversationRequest.
        :type query: GoogleCloudDiscoveryengineV1betaTextInput
        """

        self._query = query

    @property
    def safe_search(self):
        """Gets the safe_search of this GoogleCloudDiscoveryengineV1betaConverseConversationRequest.

        Whether to turn on safe search.

        :return: The safe_search of this GoogleCloudDiscoveryengineV1betaConverseConversationRequest.
        :rtype: bool
        """
        return self._safe_search

    @safe_search.setter
    def safe_search(self, safe_search):
        """Sets the safe_search of this GoogleCloudDiscoveryengineV1betaConverseConversationRequest.

        Whether to turn on safe search.

        :param safe_search: The safe_search of this GoogleCloudDiscoveryengineV1betaConverseConversationRequest.
        :type safe_search: bool
        """

        self._safe_search = safe_search

    @property
    def serving_config(self):
        """Gets the serving_config of this GoogleCloudDiscoveryengineV1betaConverseConversationRequest.

        The resource name of the Serving Config to use. Format: `projects/{project_number}/locations/{location_id}/collections/{collection}/dataStores/{data_store_id}/servingConfigs/{serving_config_id}` If this is not set, the default serving config will be used.

        :return: The serving_config of this GoogleCloudDiscoveryengineV1betaConverseConversationRequest.
        :rtype: str
        """
        return self._serving_config

    @serving_config.setter
    def serving_config(self, serving_config):
        """Sets the serving_config of this GoogleCloudDiscoveryengineV1betaConverseConversationRequest.

        The resource name of the Serving Config to use. Format: `projects/{project_number}/locations/{location_id}/collections/{collection}/dataStores/{data_store_id}/servingConfigs/{serving_config_id}` If this is not set, the default serving config will be used.

        :param serving_config: The serving_config of this GoogleCloudDiscoveryengineV1betaConverseConversationRequest.
        :type serving_config: str
        """

        self._serving_config = serving_config

    @property
    def summary_spec(self):
        """Gets the summary_spec of this GoogleCloudDiscoveryengineV1betaConverseConversationRequest.


        :return: The summary_spec of this GoogleCloudDiscoveryengineV1betaConverseConversationRequest.
        :rtype: GoogleCloudDiscoveryengineV1betaSearchRequestContentSearchSpecSummarySpec
        """
        return self._summary_spec

    @summary_spec.setter
    def summary_spec(self, summary_spec):
        """Sets the summary_spec of this GoogleCloudDiscoveryengineV1betaConverseConversationRequest.


        :param summary_spec: The summary_spec of this GoogleCloudDiscoveryengineV1betaConverseConversationRequest.
        :type summary_spec: GoogleCloudDiscoveryengineV1betaSearchRequestContentSearchSpecSummarySpec
        """

        self._summary_spec = summary_spec

    @property
    def user_labels(self):
        """Gets the user_labels of this GoogleCloudDiscoveryengineV1betaConverseConversationRequest.

        The user labels applied to a resource must meet the following requirements: * Each resource can have multiple labels, up to a maximum of 64. * Each label must be a key-value pair. * Keys have a minimum length of 1 character and a maximum length of 63 characters and cannot be empty. Values can be empty and have a maximum length of 63 characters. * Keys and values can contain only lowercase letters, numeric characters, underscores, and dashes. All characters must use UTF-8 encoding, and international characters are allowed. * The key portion of a label must be unique. However, you can use the same key with multiple resources. * Keys must start with a lowercase letter or international character. See [Google Cloud Document](https://cloud.google.com/resource-manager/docs/creating-managing-labels#requirements) for more details.

        :return: The user_labels of this GoogleCloudDiscoveryengineV1betaConverseConversationRequest.
        :rtype: Dict[str, str]
        """
        return self._user_labels

    @user_labels.setter
    def user_labels(self, user_labels):
        """Sets the user_labels of this GoogleCloudDiscoveryengineV1betaConverseConversationRequest.

        The user labels applied to a resource must meet the following requirements: * Each resource can have multiple labels, up to a maximum of 64. * Each label must be a key-value pair. * Keys have a minimum length of 1 character and a maximum length of 63 characters and cannot be empty. Values can be empty and have a maximum length of 63 characters. * Keys and values can contain only lowercase letters, numeric characters, underscores, and dashes. All characters must use UTF-8 encoding, and international characters are allowed. * The key portion of a label must be unique. However, you can use the same key with multiple resources. * Keys must start with a lowercase letter or international character. See [Google Cloud Document](https://cloud.google.com/resource-manager/docs/creating-managing-labels#requirements) for more details.

        :param user_labels: The user_labels of this GoogleCloudDiscoveryengineV1betaConverseConversationRequest.
        :type user_labels: Dict[str, str]
        """

        self._user_labels = user_labels
