# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_discoveryengine_v1beta_completion_info import GoogleCloudDiscoveryengineV1betaCompletionInfo
from openapi_server.models.google_cloud_discoveryengine_v1beta_custom_attribute import GoogleCloudDiscoveryengineV1betaCustomAttribute
from openapi_server.models.google_cloud_discoveryengine_v1beta_document_info import GoogleCloudDiscoveryengineV1betaDocumentInfo
from openapi_server.models.google_cloud_discoveryengine_v1beta_media_info import GoogleCloudDiscoveryengineV1betaMediaInfo
from openapi_server.models.google_cloud_discoveryengine_v1beta_page_info import GoogleCloudDiscoveryengineV1betaPageInfo
from openapi_server.models.google_cloud_discoveryengine_v1beta_panel_info import GoogleCloudDiscoveryengineV1betaPanelInfo
from openapi_server.models.google_cloud_discoveryengine_v1beta_search_info import GoogleCloudDiscoveryengineV1betaSearchInfo
from openapi_server.models.google_cloud_discoveryengine_v1beta_transaction_info import GoogleCloudDiscoveryengineV1betaTransactionInfo
from openapi_server.models.google_cloud_discoveryengine_v1beta_user_info import GoogleCloudDiscoveryengineV1betaUserInfo
from openapi_server import util


class GoogleCloudDiscoveryengineV1betaUserEvent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attributes: Dict[str, GoogleCloudDiscoveryengineV1betaCustomAttribute]=None, attribution_token: str=None, completion_info: GoogleCloudDiscoveryengineV1betaCompletionInfo=None, direct_user_request: bool=None, documents: List[GoogleCloudDiscoveryengineV1betaDocumentInfo]=None, event_time: str=None, event_type: str=None, filter: str=None, media_info: GoogleCloudDiscoveryengineV1betaMediaInfo=None, page_info: GoogleCloudDiscoveryengineV1betaPageInfo=None, panel: GoogleCloudDiscoveryengineV1betaPanelInfo=None, promotion_ids: List[str]=None, search_info: GoogleCloudDiscoveryengineV1betaSearchInfo=None, session_id: str=None, tag_ids: List[str]=None, transaction_info: GoogleCloudDiscoveryengineV1betaTransactionInfo=None, user_info: GoogleCloudDiscoveryengineV1betaUserInfo=None, user_pseudo_id: str=None):
        """GoogleCloudDiscoveryengineV1betaUserEvent - a model defined in OpenAPI

        :param attributes: The attributes of this GoogleCloudDiscoveryengineV1betaUserEvent.
        :param attribution_token: The attribution_token of this GoogleCloudDiscoveryengineV1betaUserEvent.
        :param completion_info: The completion_info of this GoogleCloudDiscoveryengineV1betaUserEvent.
        :param direct_user_request: The direct_user_request of this GoogleCloudDiscoveryengineV1betaUserEvent.
        :param documents: The documents of this GoogleCloudDiscoveryengineV1betaUserEvent.
        :param event_time: The event_time of this GoogleCloudDiscoveryengineV1betaUserEvent.
        :param event_type: The event_type of this GoogleCloudDiscoveryengineV1betaUserEvent.
        :param filter: The filter of this GoogleCloudDiscoveryengineV1betaUserEvent.
        :param media_info: The media_info of this GoogleCloudDiscoveryengineV1betaUserEvent.
        :param page_info: The page_info of this GoogleCloudDiscoveryengineV1betaUserEvent.
        :param panel: The panel of this GoogleCloudDiscoveryengineV1betaUserEvent.
        :param promotion_ids: The promotion_ids of this GoogleCloudDiscoveryengineV1betaUserEvent.
        :param search_info: The search_info of this GoogleCloudDiscoveryengineV1betaUserEvent.
        :param session_id: The session_id of this GoogleCloudDiscoveryengineV1betaUserEvent.
        :param tag_ids: The tag_ids of this GoogleCloudDiscoveryengineV1betaUserEvent.
        :param transaction_info: The transaction_info of this GoogleCloudDiscoveryengineV1betaUserEvent.
        :param user_info: The user_info of this GoogleCloudDiscoveryengineV1betaUserEvent.
        :param user_pseudo_id: The user_pseudo_id of this GoogleCloudDiscoveryengineV1betaUserEvent.
        """
        self.openapi_types = {
            'attributes': Dict[str, GoogleCloudDiscoveryengineV1betaCustomAttribute],
            'attribution_token': str,
            'completion_info': GoogleCloudDiscoveryengineV1betaCompletionInfo,
            'direct_user_request': bool,
            'documents': List[GoogleCloudDiscoveryengineV1betaDocumentInfo],
            'event_time': str,
            'event_type': str,
            'filter': str,
            'media_info': GoogleCloudDiscoveryengineV1betaMediaInfo,
            'page_info': GoogleCloudDiscoveryengineV1betaPageInfo,
            'panel': GoogleCloudDiscoveryengineV1betaPanelInfo,
            'promotion_ids': List[str],
            'search_info': GoogleCloudDiscoveryengineV1betaSearchInfo,
            'session_id': str,
            'tag_ids': List[str],
            'transaction_info': GoogleCloudDiscoveryengineV1betaTransactionInfo,
            'user_info': GoogleCloudDiscoveryengineV1betaUserInfo,
            'user_pseudo_id': str
        }

        self.attribute_map = {
            'attributes': 'attributes',
            'attribution_token': 'attributionToken',
            'completion_info': 'completionInfo',
            'direct_user_request': 'directUserRequest',
            'documents': 'documents',
            'event_time': 'eventTime',
            'event_type': 'eventType',
            'filter': 'filter',
            'media_info': 'mediaInfo',
            'page_info': 'pageInfo',
            'panel': 'panel',
            'promotion_ids': 'promotionIds',
            'search_info': 'searchInfo',
            'session_id': 'sessionId',
            'tag_ids': 'tagIds',
            'transaction_info': 'transactionInfo',
            'user_info': 'userInfo',
            'user_pseudo_id': 'userPseudoId'
        }

        self._attributes = attributes
        self._attribution_token = attribution_token
        self._completion_info = completion_info
        self._direct_user_request = direct_user_request
        self._documents = documents
        self._event_time = event_time
        self._event_type = event_type
        self._filter = filter
        self._media_info = media_info
        self._page_info = page_info
        self._panel = panel
        self._promotion_ids = promotion_ids
        self._search_info = search_info
        self._session_id = session_id
        self._tag_ids = tag_ids
        self._transaction_info = transaction_info
        self._user_info = user_info
        self._user_pseudo_id = user_pseudo_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudDiscoveryengineV1betaUserEvent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudDiscoveryengineV1betaUserEvent of this GoogleCloudDiscoveryengineV1betaUserEvent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attributes(self):
        """Gets the attributes of this GoogleCloudDiscoveryengineV1betaUserEvent.

        Extra user event features to include in the recommendation model. These attributes must NOT contain data that needs to be parsed or processed further, e.g. JSON or other encodings. If you provide custom attributes for ingested user events, also include them in the user events that you associate with prediction requests. Custom attribute formatting must be consistent between imported events and events provided with prediction requests. This lets the Discovery Engine API use those custom attributes when training models and serving predictions, which helps improve recommendation quality. This field needs to pass all below criteria, otherwise an `INVALID_ARGUMENT` error is returned: * The key must be a UTF-8 encoded string with a length limit of 5,000 characters. * For text attributes, at most 400 values are allowed. Empty values are not allowed. Each value must be a UTF-8 encoded string with a length limit of 256 characters. * For number attributes, at most 400 values are allowed. For product recommendations, an example of extra user information is `traffic_channel`, which is how a user arrives at the site. Users can arrive at the site by coming to the site directly, coming through Google search, or in other ways.

        :return: The attributes of this GoogleCloudDiscoveryengineV1betaUserEvent.
        :rtype: Dict[str, GoogleCloudDiscoveryengineV1betaCustomAttribute]
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this GoogleCloudDiscoveryengineV1betaUserEvent.

        Extra user event features to include in the recommendation model. These attributes must NOT contain data that needs to be parsed or processed further, e.g. JSON or other encodings. If you provide custom attributes for ingested user events, also include them in the user events that you associate with prediction requests. Custom attribute formatting must be consistent between imported events and events provided with prediction requests. This lets the Discovery Engine API use those custom attributes when training models and serving predictions, which helps improve recommendation quality. This field needs to pass all below criteria, otherwise an `INVALID_ARGUMENT` error is returned: * The key must be a UTF-8 encoded string with a length limit of 5,000 characters. * For text attributes, at most 400 values are allowed. Empty values are not allowed. Each value must be a UTF-8 encoded string with a length limit of 256 characters. * For number attributes, at most 400 values are allowed. For product recommendations, an example of extra user information is `traffic_channel`, which is how a user arrives at the site. Users can arrive at the site by coming to the site directly, coming through Google search, or in other ways.

        :param attributes: The attributes of this GoogleCloudDiscoveryengineV1betaUserEvent.
        :type attributes: Dict[str, GoogleCloudDiscoveryengineV1betaCustomAttribute]
        """

        self._attributes = attributes

    @property
    def attribution_token(self):
        """Gets the attribution_token of this GoogleCloudDiscoveryengineV1betaUserEvent.

        Token to attribute an API response to user action(s) to trigger the event. Highly recommended for user events that are the result of RecommendationService.Recommend. This field enables accurate attribution of recommendation model performance. The value must be one of: * RecommendResponse.attribution_token for events that are the result of RecommendationService.Recommend. * SearchResponse.attribution_token for events that are the result of SearchService.Search. This token enables us to accurately attribute page view or conversion completion back to the event and the particular predict response containing this clicked/purchased product. If user clicks on product K in the recommendation results, pass RecommendResponse.attribution_token as a URL parameter to product K's page. When recording events on product K's page, log the RecommendResponse.attribution_token to this field.

        :return: The attribution_token of this GoogleCloudDiscoveryengineV1betaUserEvent.
        :rtype: str
        """
        return self._attribution_token

    @attribution_token.setter
    def attribution_token(self, attribution_token):
        """Sets the attribution_token of this GoogleCloudDiscoveryengineV1betaUserEvent.

        Token to attribute an API response to user action(s) to trigger the event. Highly recommended for user events that are the result of RecommendationService.Recommend. This field enables accurate attribution of recommendation model performance. The value must be one of: * RecommendResponse.attribution_token for events that are the result of RecommendationService.Recommend. * SearchResponse.attribution_token for events that are the result of SearchService.Search. This token enables us to accurately attribute page view or conversion completion back to the event and the particular predict response containing this clicked/purchased product. If user clicks on product K in the recommendation results, pass RecommendResponse.attribution_token as a URL parameter to product K's page. When recording events on product K's page, log the RecommendResponse.attribution_token to this field.

        :param attribution_token: The attribution_token of this GoogleCloudDiscoveryengineV1betaUserEvent.
        :type attribution_token: str
        """

        self._attribution_token = attribution_token

    @property
    def completion_info(self):
        """Gets the completion_info of this GoogleCloudDiscoveryengineV1betaUserEvent.


        :return: The completion_info of this GoogleCloudDiscoveryengineV1betaUserEvent.
        :rtype: GoogleCloudDiscoveryengineV1betaCompletionInfo
        """
        return self._completion_info

    @completion_info.setter
    def completion_info(self, completion_info):
        """Sets the completion_info of this GoogleCloudDiscoveryengineV1betaUserEvent.


        :param completion_info: The completion_info of this GoogleCloudDiscoveryengineV1betaUserEvent.
        :type completion_info: GoogleCloudDiscoveryengineV1betaCompletionInfo
        """

        self._completion_info = completion_info

    @property
    def direct_user_request(self):
        """Gets the direct_user_request of this GoogleCloudDiscoveryengineV1betaUserEvent.

        Should set to true if the request is made directly from the end user, in which case the UserEvent.user_info.user_agent can be populated from the HTTP request. This flag should be set only if the API request is made directly from the end user such as a mobile app (and not if a gateway or a server is processing and pushing the user events). This should not be set when using the JavaScript tag in UserEventService.CollectUserEvent.

        :return: The direct_user_request of this GoogleCloudDiscoveryengineV1betaUserEvent.
        :rtype: bool
        """
        return self._direct_user_request

    @direct_user_request.setter
    def direct_user_request(self, direct_user_request):
        """Sets the direct_user_request of this GoogleCloudDiscoveryengineV1betaUserEvent.

        Should set to true if the request is made directly from the end user, in which case the UserEvent.user_info.user_agent can be populated from the HTTP request. This flag should be set only if the API request is made directly from the end user such as a mobile app (and not if a gateway or a server is processing and pushing the user events). This should not be set when using the JavaScript tag in UserEventService.CollectUserEvent.

        :param direct_user_request: The direct_user_request of this GoogleCloudDiscoveryengineV1betaUserEvent.
        :type direct_user_request: bool
        """

        self._direct_user_request = direct_user_request

    @property
    def documents(self):
        """Gets the documents of this GoogleCloudDiscoveryengineV1betaUserEvent.

        List of Documents associated with this user event. This field is optional except for the following event types: * `view-item` * `add-to-cart` * `purchase` * `media-play` * `media-complete` In a `search` event, this field represents the documents returned to the end user on the current page (the end user may have not finished browsing the whole page yet). When a new page is returned to the end user, after pagination/filtering/ordering even for the same query, a new `search` event with different UserEvent.documents is desired.

        :return: The documents of this GoogleCloudDiscoveryengineV1betaUserEvent.
        :rtype: List[GoogleCloudDiscoveryengineV1betaDocumentInfo]
        """
        return self._documents

    @documents.setter
    def documents(self, documents):
        """Sets the documents of this GoogleCloudDiscoveryengineV1betaUserEvent.

        List of Documents associated with this user event. This field is optional except for the following event types: * `view-item` * `add-to-cart` * `purchase` * `media-play` * `media-complete` In a `search` event, this field represents the documents returned to the end user on the current page (the end user may have not finished browsing the whole page yet). When a new page is returned to the end user, after pagination/filtering/ordering even for the same query, a new `search` event with different UserEvent.documents is desired.

        :param documents: The documents of this GoogleCloudDiscoveryengineV1betaUserEvent.
        :type documents: List[GoogleCloudDiscoveryengineV1betaDocumentInfo]
        """

        self._documents = documents

    @property
    def event_time(self):
        """Gets the event_time of this GoogleCloudDiscoveryengineV1betaUserEvent.

        Only required for UserEventService.ImportUserEvents method. Timestamp of when the user event happened.

        :return: The event_time of this GoogleCloudDiscoveryengineV1betaUserEvent.
        :rtype: str
        """
        return self._event_time

    @event_time.setter
    def event_time(self, event_time):
        """Sets the event_time of this GoogleCloudDiscoveryengineV1betaUserEvent.

        Only required for UserEventService.ImportUserEvents method. Timestamp of when the user event happened.

        :param event_time: The event_time of this GoogleCloudDiscoveryengineV1betaUserEvent.
        :type event_time: str
        """

        self._event_time = event_time

    @property
    def event_type(self):
        """Gets the event_type of this GoogleCloudDiscoveryengineV1betaUserEvent.

        Required. User event type. Allowed values are: Generic values: * `search`: Search for Documents. * `view-item`: Detailed page view of a Document. * `view-item-list`: View of a panel or ordered list of Documents. * `view-home-page`: View of the home page. * `view-category-page`: View of a category page, e.g. Home > Men > Jeans Retail-related values: * `add-to-cart`: Add an item(s) to cart, e.g. in Retail online shopping * `purchase`: Purchase an item(s) Media-related values: * `media-play`: Start/resume watching a video, playing a song, etc. * `media-complete`: Finished or stopped midway through a video, song, etc.

        :return: The event_type of this GoogleCloudDiscoveryengineV1betaUserEvent.
        :rtype: str
        """
        return self._event_type

    @event_type.setter
    def event_type(self, event_type):
        """Sets the event_type of this GoogleCloudDiscoveryengineV1betaUserEvent.

        Required. User event type. Allowed values are: Generic values: * `search`: Search for Documents. * `view-item`: Detailed page view of a Document. * `view-item-list`: View of a panel or ordered list of Documents. * `view-home-page`: View of the home page. * `view-category-page`: View of a category page, e.g. Home > Men > Jeans Retail-related values: * `add-to-cart`: Add an item(s) to cart, e.g. in Retail online shopping * `purchase`: Purchase an item(s) Media-related values: * `media-play`: Start/resume watching a video, playing a song, etc. * `media-complete`: Finished or stopped midway through a video, song, etc.

        :param event_type: The event_type of this GoogleCloudDiscoveryengineV1betaUserEvent.
        :type event_type: str
        """

        self._event_type = event_type

    @property
    def filter(self):
        """Gets the filter of this GoogleCloudDiscoveryengineV1betaUserEvent.

        The filter syntax consists of an expression language for constructing a predicate from one or more fields of the documents being filtered. One example is for `search` events, the associated SearchRequest may contain a filter expression in SearchRequest.filter conforming to https://google.aip.dev/160#filtering. Similarly, for `view-item-list` events that are generated from a RecommendRequest, this field may be populated directly from RecommendRequest.filter conforming to https://google.aip.dev/160#filtering. The value must be a UTF-8 encoded string with a length limit of 1,000 characters. Otherwise, an `INVALID_ARGUMENT` error is returned.

        :return: The filter of this GoogleCloudDiscoveryengineV1betaUserEvent.
        :rtype: str
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this GoogleCloudDiscoveryengineV1betaUserEvent.

        The filter syntax consists of an expression language for constructing a predicate from one or more fields of the documents being filtered. One example is for `search` events, the associated SearchRequest may contain a filter expression in SearchRequest.filter conforming to https://google.aip.dev/160#filtering. Similarly, for `view-item-list` events that are generated from a RecommendRequest, this field may be populated directly from RecommendRequest.filter conforming to https://google.aip.dev/160#filtering. The value must be a UTF-8 encoded string with a length limit of 1,000 characters. Otherwise, an `INVALID_ARGUMENT` error is returned.

        :param filter: The filter of this GoogleCloudDiscoveryengineV1betaUserEvent.
        :type filter: str
        """

        self._filter = filter

    @property
    def media_info(self):
        """Gets the media_info of this GoogleCloudDiscoveryengineV1betaUserEvent.


        :return: The media_info of this GoogleCloudDiscoveryengineV1betaUserEvent.
        :rtype: GoogleCloudDiscoveryengineV1betaMediaInfo
        """
        return self._media_info

    @media_info.setter
    def media_info(self, media_info):
        """Sets the media_info of this GoogleCloudDiscoveryengineV1betaUserEvent.


        :param media_info: The media_info of this GoogleCloudDiscoveryengineV1betaUserEvent.
        :type media_info: GoogleCloudDiscoveryengineV1betaMediaInfo
        """

        self._media_info = media_info

    @property
    def page_info(self):
        """Gets the page_info of this GoogleCloudDiscoveryengineV1betaUserEvent.


        :return: The page_info of this GoogleCloudDiscoveryengineV1betaUserEvent.
        :rtype: GoogleCloudDiscoveryengineV1betaPageInfo
        """
        return self._page_info

    @page_info.setter
    def page_info(self, page_info):
        """Sets the page_info of this GoogleCloudDiscoveryengineV1betaUserEvent.


        :param page_info: The page_info of this GoogleCloudDiscoveryengineV1betaUserEvent.
        :type page_info: GoogleCloudDiscoveryengineV1betaPageInfo
        """

        self._page_info = page_info

    @property
    def panel(self):
        """Gets the panel of this GoogleCloudDiscoveryengineV1betaUserEvent.


        :return: The panel of this GoogleCloudDiscoveryengineV1betaUserEvent.
        :rtype: GoogleCloudDiscoveryengineV1betaPanelInfo
        """
        return self._panel

    @panel.setter
    def panel(self, panel):
        """Sets the panel of this GoogleCloudDiscoveryengineV1betaUserEvent.


        :param panel: The panel of this GoogleCloudDiscoveryengineV1betaUserEvent.
        :type panel: GoogleCloudDiscoveryengineV1betaPanelInfo
        """

        self._panel = panel

    @property
    def promotion_ids(self):
        """Gets the promotion_ids of this GoogleCloudDiscoveryengineV1betaUserEvent.

        The promotion IDs if this is an event associated with promotions. Currently, this field is restricted to at most one ID.

        :return: The promotion_ids of this GoogleCloudDiscoveryengineV1betaUserEvent.
        :rtype: List[str]
        """
        return self._promotion_ids

    @promotion_ids.setter
    def promotion_ids(self, promotion_ids):
        """Sets the promotion_ids of this GoogleCloudDiscoveryengineV1betaUserEvent.

        The promotion IDs if this is an event associated with promotions. Currently, this field is restricted to at most one ID.

        :param promotion_ids: The promotion_ids of this GoogleCloudDiscoveryengineV1betaUserEvent.
        :type promotion_ids: List[str]
        """

        self._promotion_ids = promotion_ids

    @property
    def search_info(self):
        """Gets the search_info of this GoogleCloudDiscoveryengineV1betaUserEvent.


        :return: The search_info of this GoogleCloudDiscoveryengineV1betaUserEvent.
        :rtype: GoogleCloudDiscoveryengineV1betaSearchInfo
        """
        return self._search_info

    @search_info.setter
    def search_info(self, search_info):
        """Sets the search_info of this GoogleCloudDiscoveryengineV1betaUserEvent.


        :param search_info: The search_info of this GoogleCloudDiscoveryengineV1betaUserEvent.
        :type search_info: GoogleCloudDiscoveryengineV1betaSearchInfo
        """

        self._search_info = search_info

    @property
    def session_id(self):
        """Gets the session_id of this GoogleCloudDiscoveryengineV1betaUserEvent.

        A unique identifier for tracking a visitor session with a length limit of 128 bytes. A session is an aggregation of an end user behavior in a time span. A general guideline to populate the session_id: 1. If user has no activity for 30 min, a new session_id should be assigned. 2. The session_id should be unique across users, suggest use uuid or add UserEvent.user_pseudo_id as prefix.

        :return: The session_id of this GoogleCloudDiscoveryengineV1betaUserEvent.
        :rtype: str
        """
        return self._session_id

    @session_id.setter
    def session_id(self, session_id):
        """Sets the session_id of this GoogleCloudDiscoveryengineV1betaUserEvent.

        A unique identifier for tracking a visitor session with a length limit of 128 bytes. A session is an aggregation of an end user behavior in a time span. A general guideline to populate the session_id: 1. If user has no activity for 30 min, a new session_id should be assigned. 2. The session_id should be unique across users, suggest use uuid or add UserEvent.user_pseudo_id as prefix.

        :param session_id: The session_id of this GoogleCloudDiscoveryengineV1betaUserEvent.
        :type session_id: str
        """

        self._session_id = session_id

    @property
    def tag_ids(self):
        """Gets the tag_ids of this GoogleCloudDiscoveryengineV1betaUserEvent.

        A list of identifiers for the independent experiment groups this user event belongs to. This is used to distinguish between user events associated with different experiment setups on the customer end.

        :return: The tag_ids of this GoogleCloudDiscoveryengineV1betaUserEvent.
        :rtype: List[str]
        """
        return self._tag_ids

    @tag_ids.setter
    def tag_ids(self, tag_ids):
        """Sets the tag_ids of this GoogleCloudDiscoveryengineV1betaUserEvent.

        A list of identifiers for the independent experiment groups this user event belongs to. This is used to distinguish between user events associated with different experiment setups on the customer end.

        :param tag_ids: The tag_ids of this GoogleCloudDiscoveryengineV1betaUserEvent.
        :type tag_ids: List[str]
        """

        self._tag_ids = tag_ids

    @property
    def transaction_info(self):
        """Gets the transaction_info of this GoogleCloudDiscoveryengineV1betaUserEvent.


        :return: The transaction_info of this GoogleCloudDiscoveryengineV1betaUserEvent.
        :rtype: GoogleCloudDiscoveryengineV1betaTransactionInfo
        """
        return self._transaction_info

    @transaction_info.setter
    def transaction_info(self, transaction_info):
        """Sets the transaction_info of this GoogleCloudDiscoveryengineV1betaUserEvent.


        :param transaction_info: The transaction_info of this GoogleCloudDiscoveryengineV1betaUserEvent.
        :type transaction_info: GoogleCloudDiscoveryengineV1betaTransactionInfo
        """

        self._transaction_info = transaction_info

    @property
    def user_info(self):
        """Gets the user_info of this GoogleCloudDiscoveryengineV1betaUserEvent.


        :return: The user_info of this GoogleCloudDiscoveryengineV1betaUserEvent.
        :rtype: GoogleCloudDiscoveryengineV1betaUserInfo
        """
        return self._user_info

    @user_info.setter
    def user_info(self, user_info):
        """Sets the user_info of this GoogleCloudDiscoveryengineV1betaUserEvent.


        :param user_info: The user_info of this GoogleCloudDiscoveryengineV1betaUserEvent.
        :type user_info: GoogleCloudDiscoveryengineV1betaUserInfo
        """

        self._user_info = user_info

    @property
    def user_pseudo_id(self):
        """Gets the user_pseudo_id of this GoogleCloudDiscoveryengineV1betaUserEvent.

        Required. A unique identifier for tracking visitors. For example, this could be implemented with an HTTP cookie, which should be able to uniquely identify a visitor on a single device. This unique identifier should not change if the visitor log in/out of the website. Do not set the field to the same fixed ID for different users. This mixes the event history of those users together, which results in degraded model quality. The field must be a UTF-8 encoded string with a length limit of 128 characters. Otherwise, an `INVALID_ARGUMENT` error is returned. The field should not contain PII or user-data. We recommend to use Google Analytics [Client ID](https://developers.google.com/analytics/devguides/collection/analyticsjs/field-reference#clientId) for this field.

        :return: The user_pseudo_id of this GoogleCloudDiscoveryengineV1betaUserEvent.
        :rtype: str
        """
        return self._user_pseudo_id

    @user_pseudo_id.setter
    def user_pseudo_id(self, user_pseudo_id):
        """Sets the user_pseudo_id of this GoogleCloudDiscoveryengineV1betaUserEvent.

        Required. A unique identifier for tracking visitors. For example, this could be implemented with an HTTP cookie, which should be able to uniquely identify a visitor on a single device. This unique identifier should not change if the visitor log in/out of the website. Do not set the field to the same fixed ID for different users. This mixes the event history of those users together, which results in degraded model quality. The field must be a UTF-8 encoded string with a length limit of 128 characters. Otherwise, an `INVALID_ARGUMENT` error is returned. The field should not contain PII or user-data. We recommend to use Google Analytics [Client ID](https://developers.google.com/analytics/devguides/collection/analyticsjs/field-reference#clientId) for this field.

        :param user_pseudo_id: The user_pseudo_id of this GoogleCloudDiscoveryengineV1betaUserEvent.
        :type user_pseudo_id: str
        """

        self._user_pseudo_id = user_pseudo_id
