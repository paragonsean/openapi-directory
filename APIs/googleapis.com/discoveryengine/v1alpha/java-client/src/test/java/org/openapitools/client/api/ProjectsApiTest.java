/*
 * Discovery Engine API
 * Discovery Engine API.
 *
 * The version of the OpenAPI document: v1alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.GoogleApiHttpBody;
import org.openapitools.client.model.GoogleCloudDiscoveryengineV1alphaBatchCreateTargetSitesRequest;
import org.openapitools.client.model.GoogleCloudDiscoveryengineV1alphaCompleteQueryResponse;
import org.openapitools.client.model.GoogleCloudDiscoveryengineV1alphaConversation;
import org.openapitools.client.model.GoogleCloudDiscoveryengineV1alphaConverseConversationRequest;
import org.openapitools.client.model.GoogleCloudDiscoveryengineV1alphaConverseConversationResponse;
import org.openapitools.client.model.GoogleCloudDiscoveryengineV1alphaDataStore;
import org.openapitools.client.model.GoogleCloudDiscoveryengineV1alphaDocument;
import org.openapitools.client.model.GoogleCloudDiscoveryengineV1alphaEngine;
import org.openapitools.client.model.GoogleCloudDiscoveryengineV1alphaEstimateDataSizeRequest;
import org.openapitools.client.model.GoogleCloudDiscoveryengineV1alphaFetchDomainVerificationStatusResponse;
import org.openapitools.client.model.GoogleCloudDiscoveryengineV1alphaImportDocumentsRequest;
import org.openapitools.client.model.GoogleCloudDiscoveryengineV1alphaImportSuggestionDenyListEntriesRequest;
import org.openapitools.client.model.GoogleCloudDiscoveryengineV1alphaImportUserEventsRequest;
import org.openapitools.client.model.GoogleCloudDiscoveryengineV1alphaListConversationsResponse;
import org.openapitools.client.model.GoogleCloudDiscoveryengineV1alphaListDataStoresResponse;
import org.openapitools.client.model.GoogleCloudDiscoveryengineV1alphaListDocumentsResponse;
import org.openapitools.client.model.GoogleCloudDiscoveryengineV1alphaListEnginesResponse;
import org.openapitools.client.model.GoogleCloudDiscoveryengineV1alphaListSchemasResponse;
import org.openapitools.client.model.GoogleCloudDiscoveryengineV1alphaListServingConfigsResponse;
import org.openapitools.client.model.GoogleCloudDiscoveryengineV1alphaListTargetSitesResponse;
import org.openapitools.client.model.GoogleCloudDiscoveryengineV1alphaPurgeDocumentsRequest;
import org.openapitools.client.model.GoogleCloudDiscoveryengineV1alphaPurgeUserEventsRequest;
import org.openapitools.client.model.GoogleCloudDiscoveryengineV1alphaRecommendRequest;
import org.openapitools.client.model.GoogleCloudDiscoveryengineV1alphaRecommendResponse;
import org.openapitools.client.model.GoogleCloudDiscoveryengineV1alphaRecrawlUrisRequest;
import org.openapitools.client.model.GoogleCloudDiscoveryengineV1alphaSchema;
import org.openapitools.client.model.GoogleCloudDiscoveryengineV1alphaSearchRequest;
import org.openapitools.client.model.GoogleCloudDiscoveryengineV1alphaSearchResponse;
import org.openapitools.client.model.GoogleCloudDiscoveryengineV1alphaTargetSite;
import org.openapitools.client.model.GoogleCloudDiscoveryengineV1alphaTrainCustomModelRequest;
import org.openapitools.client.model.GoogleCloudDiscoveryengineV1alphaUserEvent;
import org.openapitools.client.model.GoogleLongrunningListOperationsResponse;
import org.openapitools.client.model.GoogleLongrunningOperation;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProjectsApi
 */
@Disabled
public class ProjectsApiTest {

    private final ProjectsApi api = new ProjectsApi();

    /**
     * Verify target sites&#39; ownership and validity. This API sends all the target sites under site search engine for verification.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void discoveryengineProjectsLocationsCollectionsDataStoresSiteSearchEngineBatchVerifyTargetSitesTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object body = null;
        GoogleLongrunningOperation response = api.discoveryengineProjectsLocationsCollectionsDataStoresSiteSearchEngineBatchVerifyTargetSites(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, body);
        // TODO: test validations
    }

    /**
     * Returns list of target sites with its domain verification status. This method can only be called under data store with BASIC_SITE_SEARCH state at the moment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void discoveryengineProjectsLocationsCollectionsDataStoresSiteSearchEngineFetchDomainVerificationStatusTest() throws ApiException {
        String siteSearchEngine = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        GoogleCloudDiscoveryengineV1alphaFetchDomainVerificationStatusResponse response = api.discoveryengineProjectsLocationsCollectionsDataStoresSiteSearchEngineFetchDomainVerificationStatus(siteSearchEngine, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Trains a custom model.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void discoveryengineProjectsLocationsCollectionsDataStoresTrainCustomModelTest() throws ApiException {
        String dataStore = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleCloudDiscoveryengineV1alphaTrainCustomModelRequest googleCloudDiscoveryengineV1alphaTrainCustomModelRequest = null;
        GoogleLongrunningOperation response = api.discoveryengineProjectsLocationsCollectionsDataStoresTrainCustomModel(dataStore, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleCloudDiscoveryengineV1alphaTrainCustomModelRequest);
        // TODO: test validations
    }

    /**
     * Creates a Engine.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void discoveryengineProjectsLocationsCollectionsEnginesCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String engineId = null;
        GoogleCloudDiscoveryengineV1alphaEngine googleCloudDiscoveryengineV1alphaEngine = null;
        GoogleLongrunningOperation response = api.discoveryengineProjectsLocationsCollectionsEnginesCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, engineId, googleCloudDiscoveryengineV1alphaEngine);
        // TODO: test validations
    }

    /**
     * Lists all the Engines associated with the project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void discoveryengineProjectsLocationsCollectionsEnginesListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        Integer pageSize = null;
        String pageToken = null;
        GoogleCloudDiscoveryengineV1alphaListEnginesResponse response = api.discoveryengineProjectsLocationsCollectionsEnginesList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Pauses the training of an existing engine. Only applicable if SolutionType is SOLUTION_TYPE_RECOMMENDATION.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void discoveryengineProjectsLocationsCollectionsEnginesPauseTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object body = null;
        GoogleCloudDiscoveryengineV1alphaEngine response = api.discoveryengineProjectsLocationsCollectionsEnginesPause(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, body);
        // TODO: test validations
    }

    /**
     * Resumes the training of an existing engine. Only applicable if SolutionType is SOLUTION_TYPE_RECOMMENDATION.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void discoveryengineProjectsLocationsCollectionsEnginesResumeTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object body = null;
        GoogleCloudDiscoveryengineV1alphaEngine response = api.discoveryengineProjectsLocationsCollectionsEnginesResume(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, body);
        // TODO: test validations
    }

    /**
     * Tunes an existing engine. Only applicable if SolutionType is SOLUTION_TYPE_RECOMMENDATION.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void discoveryengineProjectsLocationsCollectionsEnginesTuneTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object body = null;
        GoogleLongrunningOperation response = api.discoveryengineProjectsLocationsCollectionsEnginesTune(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, body);
        // TODO: test validations
    }

    /**
     * Creates a Document.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void discoveryengineProjectsLocationsDataStoresBranchesDocumentsCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String documentId = null;
        GoogleCloudDiscoveryengineV1alphaDocument googleCloudDiscoveryengineV1alphaDocument = null;
        GoogleCloudDiscoveryengineV1alphaDocument response = api.discoveryengineProjectsLocationsDataStoresBranchesDocumentsCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, documentId, googleCloudDiscoveryengineV1alphaDocument);
        // TODO: test validations
    }

    /**
     * Bulk import of multiple Documents. Request processing may be synchronous. Non-existing items will be created. Note: It is possible for a subset of the Documents to be successfully updated.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void discoveryengineProjectsLocationsDataStoresBranchesDocumentsImportTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleCloudDiscoveryengineV1alphaImportDocumentsRequest googleCloudDiscoveryengineV1alphaImportDocumentsRequest = null;
        GoogleLongrunningOperation response = api.discoveryengineProjectsLocationsDataStoresBranchesDocumentsImport(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleCloudDiscoveryengineV1alphaImportDocumentsRequest);
        // TODO: test validations
    }

    /**
     * Gets a list of Documents.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void discoveryengineProjectsLocationsDataStoresBranchesDocumentsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        GoogleCloudDiscoveryengineV1alphaListDocumentsResponse response = api.discoveryengineProjectsLocationsDataStoresBranchesDocumentsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Permanently deletes all selected Documents in a branch. This process is asynchronous. Depending on the number of Documents to be deleted, this operation can take hours to complete. Before the delete operation completes, some Documents might still be returned by DocumentService.GetDocument or DocumentService.ListDocuments. To get a list of the Documents to be deleted, set PurgeDocumentsRequest.force to false.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void discoveryengineProjectsLocationsDataStoresBranchesDocumentsPurgeTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleCloudDiscoveryengineV1alphaPurgeDocumentsRequest googleCloudDiscoveryengineV1alphaPurgeDocumentsRequest = null;
        GoogleLongrunningOperation response = api.discoveryengineProjectsLocationsDataStoresBranchesDocumentsPurge(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleCloudDiscoveryengineV1alphaPurgeDocumentsRequest);
        // TODO: test validations
    }

    /**
     * Completes the specified user input with keyword suggestions.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void discoveryengineProjectsLocationsDataStoresCompleteQueryTest() throws ApiException {
        String dataStore = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Boolean includeTailSuggestions = null;
        String query = null;
        String queryModel = null;
        String userPseudoId = null;
        GoogleCloudDiscoveryengineV1alphaCompleteQueryResponse response = api.discoveryengineProjectsLocationsDataStoresCompleteQuery(dataStore, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, includeTailSuggestions, query, queryModel, userPseudoId);
        // TODO: test validations
    }

    /**
     * Converses a conversation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void discoveryengineProjectsLocationsDataStoresConversationsConverseTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleCloudDiscoveryengineV1alphaConverseConversationRequest googleCloudDiscoveryengineV1alphaConverseConversationRequest = null;
        GoogleCloudDiscoveryengineV1alphaConverseConversationResponse response = api.discoveryengineProjectsLocationsDataStoresConversationsConverse(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleCloudDiscoveryengineV1alphaConverseConversationRequest);
        // TODO: test validations
    }

    /**
     * Creates a Conversation. If the Conversation to create already exists, an ALREADY_EXISTS error is returned.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void discoveryengineProjectsLocationsDataStoresConversationsCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleCloudDiscoveryengineV1alphaConversation googleCloudDiscoveryengineV1alphaConversation = null;
        GoogleCloudDiscoveryengineV1alphaConversation response = api.discoveryengineProjectsLocationsDataStoresConversationsCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleCloudDiscoveryengineV1alphaConversation);
        // TODO: test validations
    }

    /**
     * Lists all Conversations by their parent DataStore.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void discoveryengineProjectsLocationsDataStoresConversationsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        String orderBy = null;
        Integer pageSize = null;
        String pageToken = null;
        GoogleCloudDiscoveryengineV1alphaListConversationsResponse response = api.discoveryengineProjectsLocationsDataStoresConversationsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, orderBy, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Creates a DataStore. DataStore is for storing Documents. To serve these documents for Search, or Recommendation use case, an Engine needs to be created separately.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void discoveryengineProjectsLocationsDataStoresCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Boolean createAdvancedSiteSearch = null;
        String dataStoreId = null;
        GoogleCloudDiscoveryengineV1alphaDataStore googleCloudDiscoveryengineV1alphaDataStore = null;
        GoogleLongrunningOperation response = api.discoveryengineProjectsLocationsDataStoresCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, createAdvancedSiteSearch, dataStoreId, googleCloudDiscoveryengineV1alphaDataStore);
        // TODO: test validations
    }

    /**
     * Lists all the DataStores associated with the project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void discoveryengineProjectsLocationsDataStoresListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        Integer pageSize = null;
        String pageToken = null;
        GoogleCloudDiscoveryengineV1alphaListDataStoresResponse response = api.discoveryengineProjectsLocationsDataStoresList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Creates a Schema.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void discoveryengineProjectsLocationsDataStoresSchemasCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String schemaId = null;
        GoogleCloudDiscoveryengineV1alphaSchema googleCloudDiscoveryengineV1alphaSchema = null;
        GoogleLongrunningOperation response = api.discoveryengineProjectsLocationsDataStoresSchemasCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, schemaId, googleCloudDiscoveryengineV1alphaSchema);
        // TODO: test validations
    }

    /**
     * Gets a list of Schemas.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void discoveryengineProjectsLocationsDataStoresSchemasListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        GoogleCloudDiscoveryengineV1alphaListSchemasResponse response = api.discoveryengineProjectsLocationsDataStoresSchemasList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Lists all ServingConfigs linked to this dataStore.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void discoveryengineProjectsLocationsDataStoresServingConfigsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        GoogleCloudDiscoveryengineV1alphaListServingConfigsResponse response = api.discoveryengineProjectsLocationsDataStoresServingConfigsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Makes a recommendation, which requires a contextual user event.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void discoveryengineProjectsLocationsDataStoresServingConfigsRecommendTest() throws ApiException {
        String servingConfig = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleCloudDiscoveryengineV1alphaRecommendRequest googleCloudDiscoveryengineV1alphaRecommendRequest = null;
        GoogleCloudDiscoveryengineV1alphaRecommendResponse response = api.discoveryengineProjectsLocationsDataStoresServingConfigsRecommend(servingConfig, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleCloudDiscoveryengineV1alphaRecommendRequest);
        // TODO: test validations
    }

    /**
     * Performs a search.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void discoveryengineProjectsLocationsDataStoresServingConfigsSearchTest() throws ApiException {
        String servingConfig = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleCloudDiscoveryengineV1alphaSearchRequest googleCloudDiscoveryengineV1alphaSearchRequest = null;
        GoogleCloudDiscoveryengineV1alphaSearchResponse response = api.discoveryengineProjectsLocationsDataStoresServingConfigsSearch(servingConfig, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleCloudDiscoveryengineV1alphaSearchRequest);
        // TODO: test validations
    }

    /**
     * Downgrade from advanced site search to basic site search.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void discoveryengineProjectsLocationsDataStoresSiteSearchEngineDisableAdvancedSiteSearchTest() throws ApiException {
        String siteSearchEngine = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object body = null;
        GoogleLongrunningOperation response = api.discoveryengineProjectsLocationsDataStoresSiteSearchEngineDisableAdvancedSiteSearch(siteSearchEngine, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, body);
        // TODO: test validations
    }

    /**
     * Upgrade from basic site search to advanced site search.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void discoveryengineProjectsLocationsDataStoresSiteSearchEngineEnableAdvancedSiteSearchTest() throws ApiException {
        String siteSearchEngine = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object body = null;
        GoogleLongrunningOperation response = api.discoveryengineProjectsLocationsDataStoresSiteSearchEngineEnableAdvancedSiteSearch(siteSearchEngine, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, body);
        // TODO: test validations
    }

    /**
     * Request on-demand recrawl for a list of URIs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void discoveryengineProjectsLocationsDataStoresSiteSearchEngineRecrawlUrisTest() throws ApiException {
        String siteSearchEngine = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleCloudDiscoveryengineV1alphaRecrawlUrisRequest googleCloudDiscoveryengineV1alphaRecrawlUrisRequest = null;
        GoogleLongrunningOperation response = api.discoveryengineProjectsLocationsDataStoresSiteSearchEngineRecrawlUris(siteSearchEngine, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleCloudDiscoveryengineV1alphaRecrawlUrisRequest);
        // TODO: test validations
    }

    /**
     * Creates TargetSite in a batch.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void discoveryengineProjectsLocationsDataStoresSiteSearchEngineTargetSitesBatchCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleCloudDiscoveryengineV1alphaBatchCreateTargetSitesRequest googleCloudDiscoveryengineV1alphaBatchCreateTargetSitesRequest = null;
        GoogleLongrunningOperation response = api.discoveryengineProjectsLocationsDataStoresSiteSearchEngineTargetSitesBatchCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleCloudDiscoveryengineV1alphaBatchCreateTargetSitesRequest);
        // TODO: test validations
    }

    /**
     * Creates a TargetSite.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void discoveryengineProjectsLocationsDataStoresSiteSearchEngineTargetSitesCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleCloudDiscoveryengineV1alphaTargetSite googleCloudDiscoveryengineV1alphaTargetSite = null;
        GoogleLongrunningOperation response = api.discoveryengineProjectsLocationsDataStoresSiteSearchEngineTargetSitesCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleCloudDiscoveryengineV1alphaTargetSite);
        // TODO: test validations
    }

    /**
     * Deletes a TargetSite.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void discoveryengineProjectsLocationsDataStoresSiteSearchEngineTargetSitesDeleteTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleLongrunningOperation response = api.discoveryengineProjectsLocationsDataStoresSiteSearchEngineTargetSitesDelete(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Gets a list of TargetSites.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void discoveryengineProjectsLocationsDataStoresSiteSearchEngineTargetSitesListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        GoogleCloudDiscoveryengineV1alphaListTargetSitesResponse response = api.discoveryengineProjectsLocationsDataStoresSiteSearchEngineTargetSitesList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Updates a TargetSite.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void discoveryengineProjectsLocationsDataStoresSiteSearchEngineTargetSitesPatchTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String updateMask = null;
        GoogleCloudDiscoveryengineV1alphaTargetSite googleCloudDiscoveryengineV1alphaTargetSite = null;
        GoogleLongrunningOperation response = api.discoveryengineProjectsLocationsDataStoresSiteSearchEngineTargetSitesPatch(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, updateMask, googleCloudDiscoveryengineV1alphaTargetSite);
        // TODO: test validations
    }

    /**
     * Imports all SuggestionDenyListEntry for a DataStore.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void discoveryengineProjectsLocationsDataStoresSuggestionDenyListEntriesImportTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleCloudDiscoveryengineV1alphaImportSuggestionDenyListEntriesRequest googleCloudDiscoveryengineV1alphaImportSuggestionDenyListEntriesRequest = null;
        GoogleLongrunningOperation response = api.discoveryengineProjectsLocationsDataStoresSuggestionDenyListEntriesImport(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleCloudDiscoveryengineV1alphaImportSuggestionDenyListEntriesRequest);
        // TODO: test validations
    }

    /**
     * Permanently deletes all SuggestionDenyListEntry for a DataStore.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void discoveryengineProjectsLocationsDataStoresSuggestionDenyListEntriesPurgeTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object body = null;
        GoogleLongrunningOperation response = api.discoveryengineProjectsLocationsDataStoresSuggestionDenyListEntriesPurge(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, body);
        // TODO: test validations
    }

    /**
     * Writes a single user event from the browser. This uses a GET request to due to browser restriction of POST-ing to a third-party domain. This method is used only by the Discovery Engine API JavaScript pixel and Google Tag Manager. Users should not call this method directly.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void discoveryengineProjectsLocationsDataStoresUserEventsCollectTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String ets = null;
        String uri = null;
        String userEvent = null;
        GoogleApiHttpBody response = api.discoveryengineProjectsLocationsDataStoresUserEventsCollect(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, ets, uri, userEvent);
        // TODO: test validations
    }

    /**
     * Bulk import of User events. Request processing might be synchronous. Events that already exist are skipped. Use this method for backfilling historical user events. Operation.response is of type ImportResponse. Note that it is possible for a subset of the items to be successfully inserted. Operation.metadata is of type ImportMetadata.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void discoveryengineProjectsLocationsDataStoresUserEventsImportTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleCloudDiscoveryengineV1alphaImportUserEventsRequest googleCloudDiscoveryengineV1alphaImportUserEventsRequest = null;
        GoogleLongrunningOperation response = api.discoveryengineProjectsLocationsDataStoresUserEventsImport(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleCloudDiscoveryengineV1alphaImportUserEventsRequest);
        // TODO: test validations
    }

    /**
     * Deletes permanently all user events specified by the filter provided. Depending on the number of events specified by the filter, this operation could take hours or days to complete. To test a filter, use the list command first.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void discoveryengineProjectsLocationsDataStoresUserEventsPurgeTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleCloudDiscoveryengineV1alphaPurgeUserEventsRequest googleCloudDiscoveryengineV1alphaPurgeUserEventsRequest = null;
        GoogleLongrunningOperation response = api.discoveryengineProjectsLocationsDataStoresUserEventsPurge(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleCloudDiscoveryengineV1alphaPurgeUserEventsRequest);
        // TODO: test validations
    }

    /**
     * Writes a single user event.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void discoveryengineProjectsLocationsDataStoresUserEventsWriteTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleCloudDiscoveryengineV1alphaUserEvent googleCloudDiscoveryengineV1alphaUserEvent = null;
        GoogleCloudDiscoveryengineV1alphaUserEvent response = api.discoveryengineProjectsLocationsDataStoresUserEventsWrite(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleCloudDiscoveryengineV1alphaUserEvent);
        // TODO: test validations
    }

    /**
     * Estimates the data size to be used by a customer.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void discoveryengineProjectsLocationsEstimateDataSizeTest() throws ApiException {
        String location = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleCloudDiscoveryengineV1alphaEstimateDataSizeRequest googleCloudDiscoveryengineV1alphaEstimateDataSizeRequest = null;
        GoogleLongrunningOperation response = api.discoveryengineProjectsLocationsEstimateDataSize(location, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleCloudDiscoveryengineV1alphaEstimateDataSizeRequest);
        // TODO: test validations
    }

    /**
     * Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void discoveryengineProjectsOperationsGetTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleLongrunningOperation response = api.discoveryengineProjectsOperationsGet(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Lists operations that match the specified filter in the request. If the server doesn&#39;t support this method, it returns &#x60;UNIMPLEMENTED&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void discoveryengineProjectsOperationsListTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        Integer pageSize = null;
        String pageToken = null;
        GoogleLongrunningListOperationsResponse response = api.discoveryengineProjectsOperationsList(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, pageSize, pageToken);
        // TODO: test validations
    }

}
