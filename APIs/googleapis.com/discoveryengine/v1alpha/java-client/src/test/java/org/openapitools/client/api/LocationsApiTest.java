/*
 * Discovery Engine API
 * Discovery Engine API.
 *
 * The version of the OpenAPI document: v1alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.GoogleCloudDiscoveryengineV1alphaLookupWidgetConfigRequest;
import org.openapitools.client.model.GoogleCloudDiscoveryengineV1alphaLookupWidgetConfigResponse;
import org.openapitools.client.model.GoogleCloudDiscoveryengineV1alphaWidgetCompleteQueryRequest;
import org.openapitools.client.model.GoogleCloudDiscoveryengineV1alphaWidgetCompleteQueryResponse;
import org.openapitools.client.model.GoogleCloudDiscoveryengineV1alphaWidgetConverseConversationRequest;
import org.openapitools.client.model.GoogleCloudDiscoveryengineV1alphaWidgetConverseConversationResponse;
import org.openapitools.client.model.GoogleCloudDiscoveryengineV1alphaWidgetSearchRequest;
import org.openapitools.client.model.GoogleCloudDiscoveryengineV1alphaWidgetSearchResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for LocationsApi
 */
@Disabled
public class LocationsApiTest {

    private final LocationsApi api = new LocationsApi();

    /**
     * Gets the Widget Config using the uuid.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void discoveryengineLocationsLookupWidgetConfigTest() throws ApiException {
        String location = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleCloudDiscoveryengineV1alphaLookupWidgetConfigRequest googleCloudDiscoveryengineV1alphaLookupWidgetConfigRequest = null;
        GoogleCloudDiscoveryengineV1alphaLookupWidgetConfigResponse response = api.discoveryengineLocationsLookupWidgetConfig(location, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleCloudDiscoveryengineV1alphaLookupWidgetConfigRequest);
        // TODO: test validations
    }

    /**
     * Performs a user input completion with keyword suggestion. Similar to the CompletionService.CompleteQuery method, but a widget version that allows CompleteQuery without API Key. It supports CompleteQuery with or without JWT token.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void discoveryengineLocationsWidgetCompleteQueryTest() throws ApiException {
        String location = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleCloudDiscoveryengineV1alphaWidgetCompleteQueryRequest googleCloudDiscoveryengineV1alphaWidgetCompleteQueryRequest = null;
        GoogleCloudDiscoveryengineV1alphaWidgetCompleteQueryResponse response = api.discoveryengineLocationsWidgetCompleteQuery(location, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleCloudDiscoveryengineV1alphaWidgetCompleteQueryRequest);
        // TODO: test validations
    }

    /**
     * Converse a conversation with Widget.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void discoveryengineLocationsWidgetConverseConversationTest() throws ApiException {
        String location = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleCloudDiscoveryengineV1alphaWidgetConverseConversationRequest googleCloudDiscoveryengineV1alphaWidgetConverseConversationRequest = null;
        GoogleCloudDiscoveryengineV1alphaWidgetConverseConversationResponse response = api.discoveryengineLocationsWidgetConverseConversation(location, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleCloudDiscoveryengineV1alphaWidgetConverseConversationRequest);
        // TODO: test validations
    }

    /**
     * Performs a search. Similar to the SearchService.Search method, but a widget version that allows search without API Key. It supports search with or without JWT token.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void discoveryengineLocationsWidgetSearchTest() throws ApiException {
        String location = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleCloudDiscoveryengineV1alphaWidgetSearchRequest googleCloudDiscoveryengineV1alphaWidgetSearchRequest = null;
        GoogleCloudDiscoveryengineV1alphaWidgetSearchResponse response = api.discoveryengineLocationsWidgetSearch(location, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleCloudDiscoveryengineV1alphaWidgetSearchRequest);
        // TODO: test validations
    }

}
