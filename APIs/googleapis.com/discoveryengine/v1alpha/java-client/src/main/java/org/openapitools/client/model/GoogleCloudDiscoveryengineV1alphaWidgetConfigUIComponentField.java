/*
 * Discovery Engine API
 * Discovery Engine API.
 *
 * The version of the OpenAPI document: v1alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Facet field that maps to a UI Component.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:39:39.358631-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudDiscoveryengineV1alphaWidgetConfigUIComponentField {
  /**
   * Gets or Sets deviceVisibility
   */
  @JsonAdapter(DeviceVisibilityEnum.Adapter.class)
  public enum DeviceVisibilityEnum {
    DEVICE_VISIBILITY_UNSPECIFIED("DEVICE_VISIBILITY_UNSPECIFIED"),
    
    MOBILE("MOBILE"),
    
    DESKTOP("DESKTOP");

    private String value;

    DeviceVisibilityEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DeviceVisibilityEnum fromValue(String value) {
      for (DeviceVisibilityEnum b : DeviceVisibilityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DeviceVisibilityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DeviceVisibilityEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DeviceVisibilityEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DeviceVisibilityEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DeviceVisibilityEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DEVICE_VISIBILITY = "deviceVisibility";
  @SerializedName(SERIALIZED_NAME_DEVICE_VISIBILITY)
  private List<DeviceVisibilityEnum> deviceVisibility = new ArrayList<>();

  public static final String SERIALIZED_NAME_DISPLAY_TEMPLATE = "displayTemplate";
  @SerializedName(SERIALIZED_NAME_DISPLAY_TEMPLATE)
  private String displayTemplate;

  public static final String SERIALIZED_NAME_FIELD = "field";
  @SerializedName(SERIALIZED_NAME_FIELD)
  private String field;

  public GoogleCloudDiscoveryengineV1alphaWidgetConfigUIComponentField() {
  }

  public GoogleCloudDiscoveryengineV1alphaWidgetConfigUIComponentField deviceVisibility(List<DeviceVisibilityEnum> deviceVisibility) {
    this.deviceVisibility = deviceVisibility;
    return this;
  }

  public GoogleCloudDiscoveryengineV1alphaWidgetConfigUIComponentField addDeviceVisibilityItem(DeviceVisibilityEnum deviceVisibilityItem) {
    if (this.deviceVisibility == null) {
      this.deviceVisibility = new ArrayList<>();
    }
    this.deviceVisibility.add(deviceVisibilityItem);
    return this;
  }

  /**
   * The field visibility on different types of devices.
   * @return deviceVisibility
   */
  @javax.annotation.Nullable
  public List<DeviceVisibilityEnum> getDeviceVisibility() {
    return deviceVisibility;
  }

  public void setDeviceVisibility(List<DeviceVisibilityEnum> deviceVisibility) {
    this.deviceVisibility = deviceVisibility;
  }


  public GoogleCloudDiscoveryengineV1alphaWidgetConfigUIComponentField displayTemplate(String displayTemplate) {
    this.displayTemplate = displayTemplate;
    return this;
  }

  /**
   * The template to customize how the field is displayed. An example value would be a string that looks like: \&quot;Price: {value}\&quot;.
   * @return displayTemplate
   */
  @javax.annotation.Nullable
  public String getDisplayTemplate() {
    return displayTemplate;
  }

  public void setDisplayTemplate(String displayTemplate) {
    this.displayTemplate = displayTemplate;
  }


  public GoogleCloudDiscoveryengineV1alphaWidgetConfigUIComponentField field(String field) {
    this.field = field;
    return this;
  }

  /**
   * Required. Registered field name. The format is &#x60;field.abc&#x60;.
   * @return field
   */
  @javax.annotation.Nullable
  public String getField() {
    return field;
  }

  public void setField(String field) {
    this.field = field;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudDiscoveryengineV1alphaWidgetConfigUIComponentField googleCloudDiscoveryengineV1alphaWidgetConfigUIComponentField = (GoogleCloudDiscoveryengineV1alphaWidgetConfigUIComponentField) o;
    return Objects.equals(this.deviceVisibility, googleCloudDiscoveryengineV1alphaWidgetConfigUIComponentField.deviceVisibility) &&
        Objects.equals(this.displayTemplate, googleCloudDiscoveryengineV1alphaWidgetConfigUIComponentField.displayTemplate) &&
        Objects.equals(this.field, googleCloudDiscoveryengineV1alphaWidgetConfigUIComponentField.field);
  }

  @Override
  public int hashCode() {
    return Objects.hash(deviceVisibility, displayTemplate, field);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudDiscoveryengineV1alphaWidgetConfigUIComponentField {\n");
    sb.append("    deviceVisibility: ").append(toIndentedString(deviceVisibility)).append("\n");
    sb.append("    displayTemplate: ").append(toIndentedString(displayTemplate)).append("\n");
    sb.append("    field: ").append(toIndentedString(field)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("deviceVisibility");
    openapiFields.add("displayTemplate");
    openapiFields.add("field");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudDiscoveryengineV1alphaWidgetConfigUIComponentField
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudDiscoveryengineV1alphaWidgetConfigUIComponentField.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudDiscoveryengineV1alphaWidgetConfigUIComponentField is not found in the empty JSON string", GoogleCloudDiscoveryengineV1alphaWidgetConfigUIComponentField.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudDiscoveryengineV1alphaWidgetConfigUIComponentField.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudDiscoveryengineV1alphaWidgetConfigUIComponentField` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("deviceVisibility") != null && !jsonObj.get("deviceVisibility").isJsonNull() && !jsonObj.get("deviceVisibility").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `deviceVisibility` to be an array in the JSON string but got `%s`", jsonObj.get("deviceVisibility").toString()));
      }
      if ((jsonObj.get("displayTemplate") != null && !jsonObj.get("displayTemplate").isJsonNull()) && !jsonObj.get("displayTemplate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayTemplate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayTemplate").toString()));
      }
      if ((jsonObj.get("field") != null && !jsonObj.get("field").isJsonNull()) && !jsonObj.get("field").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `field` to be a primitive type in the JSON string but got `%s`", jsonObj.get("field").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudDiscoveryengineV1alphaWidgetConfigUIComponentField.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudDiscoveryengineV1alphaWidgetConfigUIComponentField' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudDiscoveryengineV1alphaWidgetConfigUIComponentField> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudDiscoveryengineV1alphaWidgetConfigUIComponentField.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudDiscoveryengineV1alphaWidgetConfigUIComponentField>() {
           @Override
           public void write(JsonWriter out, GoogleCloudDiscoveryengineV1alphaWidgetConfigUIComponentField value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudDiscoveryengineV1alphaWidgetConfigUIComponentField read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudDiscoveryengineV1alphaWidgetConfigUIComponentField given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudDiscoveryengineV1alphaWidgetConfigUIComponentField
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudDiscoveryengineV1alphaWidgetConfigUIComponentField
   */
  public static GoogleCloudDiscoveryengineV1alphaWidgetConfigUIComponentField fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudDiscoveryengineV1alphaWidgetConfigUIComponentField.class);
  }

  /**
   * Convert an instance of GoogleCloudDiscoveryengineV1alphaWidgetConfigUIComponentField to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

