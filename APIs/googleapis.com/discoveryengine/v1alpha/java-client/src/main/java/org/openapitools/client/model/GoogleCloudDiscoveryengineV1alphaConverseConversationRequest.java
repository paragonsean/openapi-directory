/*
 * Discovery Engine API
 * Discovery Engine API.
 *
 * The version of the OpenAPI document: v1alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.GoogleCloudDiscoveryengineV1alphaConversation;
import org.openapitools.client.model.GoogleCloudDiscoveryengineV1alphaSearchRequestBoostSpec;
import org.openapitools.client.model.GoogleCloudDiscoveryengineV1alphaSearchRequestContentSearchSpecSummarySpec;
import org.openapitools.client.model.GoogleCloudDiscoveryengineV1alphaTextInput;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Request message for ConversationalSearchService.ConverseConversation method.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:39:39.358631-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudDiscoveryengineV1alphaConverseConversationRequest {
  public static final String SERIALIZED_NAME_BOOST_SPEC = "boostSpec";
  @SerializedName(SERIALIZED_NAME_BOOST_SPEC)
  private GoogleCloudDiscoveryengineV1alphaSearchRequestBoostSpec boostSpec;

  public static final String SERIALIZED_NAME_CONVERSATION = "conversation";
  @SerializedName(SERIALIZED_NAME_CONVERSATION)
  private GoogleCloudDiscoveryengineV1alphaConversation conversation;

  public static final String SERIALIZED_NAME_FILTER = "filter";
  @SerializedName(SERIALIZED_NAME_FILTER)
  private String filter;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_QUERY = "query";
  @SerializedName(SERIALIZED_NAME_QUERY)
  private GoogleCloudDiscoveryengineV1alphaTextInput query;

  public static final String SERIALIZED_NAME_SAFE_SEARCH = "safeSearch";
  @SerializedName(SERIALIZED_NAME_SAFE_SEARCH)
  private Boolean safeSearch;

  public static final String SERIALIZED_NAME_SERVING_CONFIG = "servingConfig";
  @SerializedName(SERIALIZED_NAME_SERVING_CONFIG)
  private String servingConfig;

  public static final String SERIALIZED_NAME_SUMMARY_SPEC = "summarySpec";
  @SerializedName(SERIALIZED_NAME_SUMMARY_SPEC)
  private GoogleCloudDiscoveryengineV1alphaSearchRequestContentSearchSpecSummarySpec summarySpec;

  public static final String SERIALIZED_NAME_USER_LABELS = "userLabels";
  @SerializedName(SERIALIZED_NAME_USER_LABELS)
  private Map<String, String> userLabels = new HashMap<>();

  public GoogleCloudDiscoveryengineV1alphaConverseConversationRequest() {
  }

  public GoogleCloudDiscoveryengineV1alphaConverseConversationRequest boostSpec(GoogleCloudDiscoveryengineV1alphaSearchRequestBoostSpec boostSpec) {
    this.boostSpec = boostSpec;
    return this;
  }

  /**
   * Get boostSpec
   * @return boostSpec
   */
  @javax.annotation.Nullable
  public GoogleCloudDiscoveryengineV1alphaSearchRequestBoostSpec getBoostSpec() {
    return boostSpec;
  }

  public void setBoostSpec(GoogleCloudDiscoveryengineV1alphaSearchRequestBoostSpec boostSpec) {
    this.boostSpec = boostSpec;
  }


  public GoogleCloudDiscoveryengineV1alphaConverseConversationRequest conversation(GoogleCloudDiscoveryengineV1alphaConversation conversation) {
    this.conversation = conversation;
    return this;
  }

  /**
   * Get conversation
   * @return conversation
   */
  @javax.annotation.Nullable
  public GoogleCloudDiscoveryengineV1alphaConversation getConversation() {
    return conversation;
  }

  public void setConversation(GoogleCloudDiscoveryengineV1alphaConversation conversation) {
    this.conversation = conversation;
  }


  public GoogleCloudDiscoveryengineV1alphaConverseConversationRequest filter(String filter) {
    this.filter = filter;
    return this;
  }

  /**
   * The filter syntax consists of an expression language for constructing a predicate from one or more fields of the documents being filtered. Filter expression is case-sensitive. This will be used to filter search results which may affect the summary response. If this field is unrecognizable, an &#x60;INVALID_ARGUMENT&#x60; is returned. Filtering in Vertex AI Search is done by mapping the LHS filter key to a key property defined in the Vertex AI Search backend -- this mapping is defined by the customer in their schema. For example a media customer might have a field &#39;name&#39; in their schema. In this case the filter would look like this: filter --&gt; name:&#39;ANY(\&quot;king kong\&quot;)&#39; For more information about filtering including syntax and filter operators, see [Filter](https://cloud.google.com/generative-ai-app-builder/docs/filter-search-metadata)
   * @return filter
   */
  @javax.annotation.Nullable
  public String getFilter() {
    return filter;
  }

  public void setFilter(String filter) {
    this.filter = filter;
  }


  public GoogleCloudDiscoveryengineV1alphaConverseConversationRequest name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Required. The resource name of the Conversation to get. Format: &#x60;projects/{project_number}/locations/{location_id}/collections/{collection}/dataStores/{data_store_id}/conversations/{conversation_id}&#x60;. Use &#x60;projects/{project_number}/locations/{location_id}/collections/{collection}/dataStores/{data_store_id}/conversations/-&#x60; to activate auto session mode, which automatically creates a new conversation inside a ConverseConversation session.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public GoogleCloudDiscoveryengineV1alphaConverseConversationRequest query(GoogleCloudDiscoveryengineV1alphaTextInput query) {
    this.query = query;
    return this;
  }

  /**
   * Get query
   * @return query
   */
  @javax.annotation.Nullable
  public GoogleCloudDiscoveryengineV1alphaTextInput getQuery() {
    return query;
  }

  public void setQuery(GoogleCloudDiscoveryengineV1alphaTextInput query) {
    this.query = query;
  }


  public GoogleCloudDiscoveryengineV1alphaConverseConversationRequest safeSearch(Boolean safeSearch) {
    this.safeSearch = safeSearch;
    return this;
  }

  /**
   * Whether to turn on safe search.
   * @return safeSearch
   */
  @javax.annotation.Nullable
  public Boolean getSafeSearch() {
    return safeSearch;
  }

  public void setSafeSearch(Boolean safeSearch) {
    this.safeSearch = safeSearch;
  }


  public GoogleCloudDiscoveryengineV1alphaConverseConversationRequest servingConfig(String servingConfig) {
    this.servingConfig = servingConfig;
    return this;
  }

  /**
   * The resource name of the Serving Config to use. Format: &#x60;projects/{project_number}/locations/{location_id}/collections/{collection}/dataStores/{data_store_id}/servingConfigs/{serving_config_id}&#x60; If this is not set, the default serving config will be used.
   * @return servingConfig
   */
  @javax.annotation.Nullable
  public String getServingConfig() {
    return servingConfig;
  }

  public void setServingConfig(String servingConfig) {
    this.servingConfig = servingConfig;
  }


  public GoogleCloudDiscoveryengineV1alphaConverseConversationRequest summarySpec(GoogleCloudDiscoveryengineV1alphaSearchRequestContentSearchSpecSummarySpec summarySpec) {
    this.summarySpec = summarySpec;
    return this;
  }

  /**
   * Get summarySpec
   * @return summarySpec
   */
  @javax.annotation.Nullable
  public GoogleCloudDiscoveryengineV1alphaSearchRequestContentSearchSpecSummarySpec getSummarySpec() {
    return summarySpec;
  }

  public void setSummarySpec(GoogleCloudDiscoveryengineV1alphaSearchRequestContentSearchSpecSummarySpec summarySpec) {
    this.summarySpec = summarySpec;
  }


  public GoogleCloudDiscoveryengineV1alphaConverseConversationRequest userLabels(Map<String, String> userLabels) {
    this.userLabels = userLabels;
    return this;
  }

  public GoogleCloudDiscoveryengineV1alphaConverseConversationRequest putUserLabelsItem(String key, String userLabelsItem) {
    if (this.userLabels == null) {
      this.userLabels = new HashMap<>();
    }
    this.userLabels.put(key, userLabelsItem);
    return this;
  }

  /**
   * The user labels applied to a resource must meet the following requirements: * Each resource can have multiple labels, up to a maximum of 64. * Each label must be a key-value pair. * Keys have a minimum length of 1 character and a maximum length of 63 characters and cannot be empty. Values can be empty and have a maximum length of 63 characters. * Keys and values can contain only lowercase letters, numeric characters, underscores, and dashes. All characters must use UTF-8 encoding, and international characters are allowed. * The key portion of a label must be unique. However, you can use the same key with multiple resources. * Keys must start with a lowercase letter or international character. See [Google Cloud Document](https://cloud.google.com/resource-manager/docs/creating-managing-labels#requirements) for more details.
   * @return userLabels
   */
  @javax.annotation.Nullable
  public Map<String, String> getUserLabels() {
    return userLabels;
  }

  public void setUserLabels(Map<String, String> userLabels) {
    this.userLabels = userLabels;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudDiscoveryengineV1alphaConverseConversationRequest googleCloudDiscoveryengineV1alphaConverseConversationRequest = (GoogleCloudDiscoveryengineV1alphaConverseConversationRequest) o;
    return Objects.equals(this.boostSpec, googleCloudDiscoveryengineV1alphaConverseConversationRequest.boostSpec) &&
        Objects.equals(this.conversation, googleCloudDiscoveryengineV1alphaConverseConversationRequest.conversation) &&
        Objects.equals(this.filter, googleCloudDiscoveryengineV1alphaConverseConversationRequest.filter) &&
        Objects.equals(this.name, googleCloudDiscoveryengineV1alphaConverseConversationRequest.name) &&
        Objects.equals(this.query, googleCloudDiscoveryengineV1alphaConverseConversationRequest.query) &&
        Objects.equals(this.safeSearch, googleCloudDiscoveryengineV1alphaConverseConversationRequest.safeSearch) &&
        Objects.equals(this.servingConfig, googleCloudDiscoveryengineV1alphaConverseConversationRequest.servingConfig) &&
        Objects.equals(this.summarySpec, googleCloudDiscoveryengineV1alphaConverseConversationRequest.summarySpec) &&
        Objects.equals(this.userLabels, googleCloudDiscoveryengineV1alphaConverseConversationRequest.userLabels);
  }

  @Override
  public int hashCode() {
    return Objects.hash(boostSpec, conversation, filter, name, query, safeSearch, servingConfig, summarySpec, userLabels);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudDiscoveryengineV1alphaConverseConversationRequest {\n");
    sb.append("    boostSpec: ").append(toIndentedString(boostSpec)).append("\n");
    sb.append("    conversation: ").append(toIndentedString(conversation)).append("\n");
    sb.append("    filter: ").append(toIndentedString(filter)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    query: ").append(toIndentedString(query)).append("\n");
    sb.append("    safeSearch: ").append(toIndentedString(safeSearch)).append("\n");
    sb.append("    servingConfig: ").append(toIndentedString(servingConfig)).append("\n");
    sb.append("    summarySpec: ").append(toIndentedString(summarySpec)).append("\n");
    sb.append("    userLabels: ").append(toIndentedString(userLabels)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("boostSpec");
    openapiFields.add("conversation");
    openapiFields.add("filter");
    openapiFields.add("name");
    openapiFields.add("query");
    openapiFields.add("safeSearch");
    openapiFields.add("servingConfig");
    openapiFields.add("summarySpec");
    openapiFields.add("userLabels");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudDiscoveryengineV1alphaConverseConversationRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudDiscoveryengineV1alphaConverseConversationRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudDiscoveryengineV1alphaConverseConversationRequest is not found in the empty JSON string", GoogleCloudDiscoveryengineV1alphaConverseConversationRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudDiscoveryengineV1alphaConverseConversationRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudDiscoveryengineV1alphaConverseConversationRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `boostSpec`
      if (jsonObj.get("boostSpec") != null && !jsonObj.get("boostSpec").isJsonNull()) {
        GoogleCloudDiscoveryengineV1alphaSearchRequestBoostSpec.validateJsonElement(jsonObj.get("boostSpec"));
      }
      // validate the optional field `conversation`
      if (jsonObj.get("conversation") != null && !jsonObj.get("conversation").isJsonNull()) {
        GoogleCloudDiscoveryengineV1alphaConversation.validateJsonElement(jsonObj.get("conversation"));
      }
      if ((jsonObj.get("filter") != null && !jsonObj.get("filter").isJsonNull()) && !jsonObj.get("filter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `filter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("filter").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `query`
      if (jsonObj.get("query") != null && !jsonObj.get("query").isJsonNull()) {
        GoogleCloudDiscoveryengineV1alphaTextInput.validateJsonElement(jsonObj.get("query"));
      }
      if ((jsonObj.get("servingConfig") != null && !jsonObj.get("servingConfig").isJsonNull()) && !jsonObj.get("servingConfig").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `servingConfig` to be a primitive type in the JSON string but got `%s`", jsonObj.get("servingConfig").toString()));
      }
      // validate the optional field `summarySpec`
      if (jsonObj.get("summarySpec") != null && !jsonObj.get("summarySpec").isJsonNull()) {
        GoogleCloudDiscoveryengineV1alphaSearchRequestContentSearchSpecSummarySpec.validateJsonElement(jsonObj.get("summarySpec"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudDiscoveryengineV1alphaConverseConversationRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudDiscoveryengineV1alphaConverseConversationRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudDiscoveryengineV1alphaConverseConversationRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudDiscoveryengineV1alphaConverseConversationRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudDiscoveryengineV1alphaConverseConversationRequest>() {
           @Override
           public void write(JsonWriter out, GoogleCloudDiscoveryengineV1alphaConverseConversationRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudDiscoveryengineV1alphaConverseConversationRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudDiscoveryengineV1alphaConverseConversationRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudDiscoveryengineV1alphaConverseConversationRequest
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudDiscoveryengineV1alphaConverseConversationRequest
   */
  public static GoogleCloudDiscoveryengineV1alphaConverseConversationRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudDiscoveryengineV1alphaConverseConversationRequest.class);
  }

  /**
   * Convert an instance of GoogleCloudDiscoveryengineV1alphaConverseConversationRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

