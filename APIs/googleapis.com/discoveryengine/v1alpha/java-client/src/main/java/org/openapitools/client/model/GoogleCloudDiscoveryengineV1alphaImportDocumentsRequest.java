/*
 * Discovery Engine API
 * Discovery Engine API.
 *
 * The version of the OpenAPI document: v1alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.GoogleCloudDiscoveryengineV1alphaBigQuerySource;
import org.openapitools.client.model.GoogleCloudDiscoveryengineV1alphaGcsSource;
import org.openapitools.client.model.GoogleCloudDiscoveryengineV1alphaImportDocumentsRequestInlineSource;
import org.openapitools.client.model.GoogleCloudDiscoveryengineV1alphaImportErrorConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Request message for Import methods.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:39:39.358631-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudDiscoveryengineV1alphaImportDocumentsRequest {
  public static final String SERIALIZED_NAME_AUTO_GENERATE_IDS = "autoGenerateIds";
  @SerializedName(SERIALIZED_NAME_AUTO_GENERATE_IDS)
  private Boolean autoGenerateIds;

  public static final String SERIALIZED_NAME_BIGQUERY_SOURCE = "bigquerySource";
  @SerializedName(SERIALIZED_NAME_BIGQUERY_SOURCE)
  private GoogleCloudDiscoveryengineV1alphaBigQuerySource bigquerySource;

  public static final String SERIALIZED_NAME_ERROR_CONFIG = "errorConfig";
  @SerializedName(SERIALIZED_NAME_ERROR_CONFIG)
  private GoogleCloudDiscoveryengineV1alphaImportErrorConfig errorConfig;

  public static final String SERIALIZED_NAME_GCS_SOURCE = "gcsSource";
  @SerializedName(SERIALIZED_NAME_GCS_SOURCE)
  private GoogleCloudDiscoveryengineV1alphaGcsSource gcsSource;

  public static final String SERIALIZED_NAME_ID_FIELD = "idField";
  @SerializedName(SERIALIZED_NAME_ID_FIELD)
  private String idField;

  public static final String SERIALIZED_NAME_INLINE_SOURCE = "inlineSource";
  @SerializedName(SERIALIZED_NAME_INLINE_SOURCE)
  private GoogleCloudDiscoveryengineV1alphaImportDocumentsRequestInlineSource inlineSource;

  /**
   * The mode of reconciliation between existing documents and the documents to be imported. Defaults to ReconciliationMode.INCREMENTAL.
   */
  @JsonAdapter(ReconciliationModeEnum.Adapter.class)
  public enum ReconciliationModeEnum {
    RECONCILIATION_MODE_UNSPECIFIED("RECONCILIATION_MODE_UNSPECIFIED"),
    
    INCREMENTAL("INCREMENTAL"),
    
    FULL("FULL");

    private String value;

    ReconciliationModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ReconciliationModeEnum fromValue(String value) {
      for (ReconciliationModeEnum b : ReconciliationModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ReconciliationModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ReconciliationModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ReconciliationModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ReconciliationModeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ReconciliationModeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RECONCILIATION_MODE = "reconciliationMode";
  @SerializedName(SERIALIZED_NAME_RECONCILIATION_MODE)
  private ReconciliationModeEnum reconciliationMode;

  public GoogleCloudDiscoveryengineV1alphaImportDocumentsRequest() {
  }

  public GoogleCloudDiscoveryengineV1alphaImportDocumentsRequest autoGenerateIds(Boolean autoGenerateIds) {
    this.autoGenerateIds = autoGenerateIds;
    return this;
  }

  /**
   * Whether to automatically generate IDs for the documents if absent. If set to &#x60;true&#x60;, Document.ids are automatically generated based on the hash of the payload, where IDs may not be consistent during multiple imports. In which case ReconciliationMode.FULL is highly recommended to avoid duplicate contents. If unset or set to &#x60;false&#x60;, Document.ids have to be specified using id_field, otherwise, documents without IDs fail to be imported. Only set this field when using GcsSource or BigQuerySource, and when GcsSource.data_schema or BigQuerySource.data_schema is &#x60;custom&#x60; or &#x60;csv&#x60;. Otherwise, an INVALID_ARGUMENT error is thrown.
   * @return autoGenerateIds
   */
  @javax.annotation.Nullable
  public Boolean getAutoGenerateIds() {
    return autoGenerateIds;
  }

  public void setAutoGenerateIds(Boolean autoGenerateIds) {
    this.autoGenerateIds = autoGenerateIds;
  }


  public GoogleCloudDiscoveryengineV1alphaImportDocumentsRequest bigquerySource(GoogleCloudDiscoveryengineV1alphaBigQuerySource bigquerySource) {
    this.bigquerySource = bigquerySource;
    return this;
  }

  /**
   * Get bigquerySource
   * @return bigquerySource
   */
  @javax.annotation.Nullable
  public GoogleCloudDiscoveryengineV1alphaBigQuerySource getBigquerySource() {
    return bigquerySource;
  }

  public void setBigquerySource(GoogleCloudDiscoveryengineV1alphaBigQuerySource bigquerySource) {
    this.bigquerySource = bigquerySource;
  }


  public GoogleCloudDiscoveryengineV1alphaImportDocumentsRequest errorConfig(GoogleCloudDiscoveryengineV1alphaImportErrorConfig errorConfig) {
    this.errorConfig = errorConfig;
    return this;
  }

  /**
   * Get errorConfig
   * @return errorConfig
   */
  @javax.annotation.Nullable
  public GoogleCloudDiscoveryengineV1alphaImportErrorConfig getErrorConfig() {
    return errorConfig;
  }

  public void setErrorConfig(GoogleCloudDiscoveryengineV1alphaImportErrorConfig errorConfig) {
    this.errorConfig = errorConfig;
  }


  public GoogleCloudDiscoveryengineV1alphaImportDocumentsRequest gcsSource(GoogleCloudDiscoveryengineV1alphaGcsSource gcsSource) {
    this.gcsSource = gcsSource;
    return this;
  }

  /**
   * Get gcsSource
   * @return gcsSource
   */
  @javax.annotation.Nullable
  public GoogleCloudDiscoveryengineV1alphaGcsSource getGcsSource() {
    return gcsSource;
  }

  public void setGcsSource(GoogleCloudDiscoveryengineV1alphaGcsSource gcsSource) {
    this.gcsSource = gcsSource;
  }


  public GoogleCloudDiscoveryengineV1alphaImportDocumentsRequest idField(String idField) {
    this.idField = idField;
    return this;
  }

  /**
   * The field in the Cloud Storage and BigQuery sources that indicates the unique IDs of the documents. For GcsSource it is the key of the JSON field. For instance, &#x60;my_id&#x60; for JSON &#x60;{\&quot;my_id\&quot;: \&quot;some_uuid\&quot;}&#x60;. For BigQuerySource it is the column name of the BigQuery table where the unique ids are stored. The values of the JSON field or the BigQuery column are used as the Document.ids. The JSON field or the BigQuery column must be of string type, and the values must be set as valid strings conform to [RFC-1034](https://tools.ietf.org/html/rfc1034) with 1-63 characters. Otherwise, documents without valid IDs fail to be imported. Only set this field when using GcsSource or BigQuerySource, and when GcsSource.data_schema or BigQuerySource.data_schema is &#x60;custom&#x60;. And only set this field when auto_generate_ids is unset or set as &#x60;false&#x60;. Otherwise, an INVALID_ARGUMENT error is thrown. If it is unset, a default value &#x60;_id&#x60; is used when importing from the allowed data sources.
   * @return idField
   */
  @javax.annotation.Nullable
  public String getIdField() {
    return idField;
  }

  public void setIdField(String idField) {
    this.idField = idField;
  }


  public GoogleCloudDiscoveryengineV1alphaImportDocumentsRequest inlineSource(GoogleCloudDiscoveryengineV1alphaImportDocumentsRequestInlineSource inlineSource) {
    this.inlineSource = inlineSource;
    return this;
  }

  /**
   * Get inlineSource
   * @return inlineSource
   */
  @javax.annotation.Nullable
  public GoogleCloudDiscoveryengineV1alphaImportDocumentsRequestInlineSource getInlineSource() {
    return inlineSource;
  }

  public void setInlineSource(GoogleCloudDiscoveryengineV1alphaImportDocumentsRequestInlineSource inlineSource) {
    this.inlineSource = inlineSource;
  }


  public GoogleCloudDiscoveryengineV1alphaImportDocumentsRequest reconciliationMode(ReconciliationModeEnum reconciliationMode) {
    this.reconciliationMode = reconciliationMode;
    return this;
  }

  /**
   * The mode of reconciliation between existing documents and the documents to be imported. Defaults to ReconciliationMode.INCREMENTAL.
   * @return reconciliationMode
   */
  @javax.annotation.Nullable
  public ReconciliationModeEnum getReconciliationMode() {
    return reconciliationMode;
  }

  public void setReconciliationMode(ReconciliationModeEnum reconciliationMode) {
    this.reconciliationMode = reconciliationMode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudDiscoveryengineV1alphaImportDocumentsRequest googleCloudDiscoveryengineV1alphaImportDocumentsRequest = (GoogleCloudDiscoveryengineV1alphaImportDocumentsRequest) o;
    return Objects.equals(this.autoGenerateIds, googleCloudDiscoveryengineV1alphaImportDocumentsRequest.autoGenerateIds) &&
        Objects.equals(this.bigquerySource, googleCloudDiscoveryengineV1alphaImportDocumentsRequest.bigquerySource) &&
        Objects.equals(this.errorConfig, googleCloudDiscoveryengineV1alphaImportDocumentsRequest.errorConfig) &&
        Objects.equals(this.gcsSource, googleCloudDiscoveryengineV1alphaImportDocumentsRequest.gcsSource) &&
        Objects.equals(this.idField, googleCloudDiscoveryengineV1alphaImportDocumentsRequest.idField) &&
        Objects.equals(this.inlineSource, googleCloudDiscoveryengineV1alphaImportDocumentsRequest.inlineSource) &&
        Objects.equals(this.reconciliationMode, googleCloudDiscoveryengineV1alphaImportDocumentsRequest.reconciliationMode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(autoGenerateIds, bigquerySource, errorConfig, gcsSource, idField, inlineSource, reconciliationMode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudDiscoveryengineV1alphaImportDocumentsRequest {\n");
    sb.append("    autoGenerateIds: ").append(toIndentedString(autoGenerateIds)).append("\n");
    sb.append("    bigquerySource: ").append(toIndentedString(bigquerySource)).append("\n");
    sb.append("    errorConfig: ").append(toIndentedString(errorConfig)).append("\n");
    sb.append("    gcsSource: ").append(toIndentedString(gcsSource)).append("\n");
    sb.append("    idField: ").append(toIndentedString(idField)).append("\n");
    sb.append("    inlineSource: ").append(toIndentedString(inlineSource)).append("\n");
    sb.append("    reconciliationMode: ").append(toIndentedString(reconciliationMode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("autoGenerateIds");
    openapiFields.add("bigquerySource");
    openapiFields.add("errorConfig");
    openapiFields.add("gcsSource");
    openapiFields.add("idField");
    openapiFields.add("inlineSource");
    openapiFields.add("reconciliationMode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudDiscoveryengineV1alphaImportDocumentsRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudDiscoveryengineV1alphaImportDocumentsRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudDiscoveryengineV1alphaImportDocumentsRequest is not found in the empty JSON string", GoogleCloudDiscoveryengineV1alphaImportDocumentsRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudDiscoveryengineV1alphaImportDocumentsRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudDiscoveryengineV1alphaImportDocumentsRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `bigquerySource`
      if (jsonObj.get("bigquerySource") != null && !jsonObj.get("bigquerySource").isJsonNull()) {
        GoogleCloudDiscoveryengineV1alphaBigQuerySource.validateJsonElement(jsonObj.get("bigquerySource"));
      }
      // validate the optional field `errorConfig`
      if (jsonObj.get("errorConfig") != null && !jsonObj.get("errorConfig").isJsonNull()) {
        GoogleCloudDiscoveryengineV1alphaImportErrorConfig.validateJsonElement(jsonObj.get("errorConfig"));
      }
      // validate the optional field `gcsSource`
      if (jsonObj.get("gcsSource") != null && !jsonObj.get("gcsSource").isJsonNull()) {
        GoogleCloudDiscoveryengineV1alphaGcsSource.validateJsonElement(jsonObj.get("gcsSource"));
      }
      if ((jsonObj.get("idField") != null && !jsonObj.get("idField").isJsonNull()) && !jsonObj.get("idField").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `idField` to be a primitive type in the JSON string but got `%s`", jsonObj.get("idField").toString()));
      }
      // validate the optional field `inlineSource`
      if (jsonObj.get("inlineSource") != null && !jsonObj.get("inlineSource").isJsonNull()) {
        GoogleCloudDiscoveryengineV1alphaImportDocumentsRequestInlineSource.validateJsonElement(jsonObj.get("inlineSource"));
      }
      if ((jsonObj.get("reconciliationMode") != null && !jsonObj.get("reconciliationMode").isJsonNull()) && !jsonObj.get("reconciliationMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reconciliationMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reconciliationMode").toString()));
      }
      // validate the optional field `reconciliationMode`
      if (jsonObj.get("reconciliationMode") != null && !jsonObj.get("reconciliationMode").isJsonNull()) {
        ReconciliationModeEnum.validateJsonElement(jsonObj.get("reconciliationMode"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudDiscoveryengineV1alphaImportDocumentsRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudDiscoveryengineV1alphaImportDocumentsRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudDiscoveryengineV1alphaImportDocumentsRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudDiscoveryengineV1alphaImportDocumentsRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudDiscoveryengineV1alphaImportDocumentsRequest>() {
           @Override
           public void write(JsonWriter out, GoogleCloudDiscoveryengineV1alphaImportDocumentsRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudDiscoveryengineV1alphaImportDocumentsRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudDiscoveryengineV1alphaImportDocumentsRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudDiscoveryengineV1alphaImportDocumentsRequest
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudDiscoveryengineV1alphaImportDocumentsRequest
   */
  public static GoogleCloudDiscoveryengineV1alphaImportDocumentsRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudDiscoveryengineV1alphaImportDocumentsRequest.class);
  }

  /**
   * Convert an instance of GoogleCloudDiscoveryengineV1alphaImportDocumentsRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

