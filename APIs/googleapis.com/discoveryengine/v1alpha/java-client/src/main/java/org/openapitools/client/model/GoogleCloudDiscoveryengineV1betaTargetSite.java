/*
 * Discovery Engine API
 * Discovery Engine API.
 *
 * The version of the OpenAPI document: v1alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.GoogleCloudDiscoveryengineV1betaSiteVerificationInfo;
import org.openapitools.client.model.GoogleCloudDiscoveryengineV1betaTargetSiteFailureReason;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A target site for the SiteSearchEngine.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:39:39.358631-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudDiscoveryengineV1betaTargetSite {
  public static final String SERIALIZED_NAME_EXACT_MATCH = "exactMatch";
  @SerializedName(SERIALIZED_NAME_EXACT_MATCH)
  private Boolean exactMatch;

  public static final String SERIALIZED_NAME_FAILURE_REASON = "failureReason";
  @SerializedName(SERIALIZED_NAME_FAILURE_REASON)
  private GoogleCloudDiscoveryengineV1betaTargetSiteFailureReason failureReason;

  public static final String SERIALIZED_NAME_GENERATED_URI_PATTERN = "generatedUriPattern";
  @SerializedName(SERIALIZED_NAME_GENERATED_URI_PATTERN)
  private String generatedUriPattern;

  /**
   * Output only. Indexing status.
   */
  @JsonAdapter(IndexingStatusEnum.Adapter.class)
  public enum IndexingStatusEnum {
    INDEXING_STATUS_UNSPECIFIED("INDEXING_STATUS_UNSPECIFIED"),
    
    PENDING("PENDING"),
    
    FAILED("FAILED"),
    
    SUCCEEDED("SUCCEEDED"),
    
    DELETING("DELETING");

    private String value;

    IndexingStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static IndexingStatusEnum fromValue(String value) {
      for (IndexingStatusEnum b : IndexingStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<IndexingStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final IndexingStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public IndexingStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return IndexingStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      IndexingStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_INDEXING_STATUS = "indexingStatus";
  @SerializedName(SERIALIZED_NAME_INDEXING_STATUS)
  private IndexingStatusEnum indexingStatus;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PROVIDED_URI_PATTERN = "providedUriPattern";
  @SerializedName(SERIALIZED_NAME_PROVIDED_URI_PATTERN)
  private String providedUriPattern;

  public static final String SERIALIZED_NAME_SITE_VERIFICATION_INFO = "siteVerificationInfo";
  @SerializedName(SERIALIZED_NAME_SITE_VERIFICATION_INFO)
  private GoogleCloudDiscoveryengineV1betaSiteVerificationInfo siteVerificationInfo;

  /**
   * The type of the target site, e.g., whether the site is to be included or excluded.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    TYPE_UNSPECIFIED("TYPE_UNSPECIFIED"),
    
    INCLUDE("INCLUDE"),
    
    EXCLUDE("EXCLUDE");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_UPDATE_TIME = "updateTime";
  @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
  private String updateTime;

  public GoogleCloudDiscoveryengineV1betaTargetSite() {
  }

  public GoogleCloudDiscoveryengineV1betaTargetSite(
     String generatedUriPattern, 
     IndexingStatusEnum indexingStatus, 
     String name, 
     String updateTime
  ) {
    this();
    this.generatedUriPattern = generatedUriPattern;
    this.indexingStatus = indexingStatus;
    this.name = name;
    this.updateTime = updateTime;
  }

  public GoogleCloudDiscoveryengineV1betaTargetSite exactMatch(Boolean exactMatch) {
    this.exactMatch = exactMatch;
    return this;
  }

  /**
   * Input only. If set to false, a uri_pattern is generated to include all pages whose address contains the provided_uri_pattern. If set to true, an uri_pattern is generated to try to be an exact match of the provided_uri_pattern or just the specific page if the provided_uri_pattern is a specific one. provided_uri_pattern is always normalized to generate the URI pattern to be used by the search engine.
   * @return exactMatch
   */
  @javax.annotation.Nullable
  public Boolean getExactMatch() {
    return exactMatch;
  }

  public void setExactMatch(Boolean exactMatch) {
    this.exactMatch = exactMatch;
  }


  public GoogleCloudDiscoveryengineV1betaTargetSite failureReason(GoogleCloudDiscoveryengineV1betaTargetSiteFailureReason failureReason) {
    this.failureReason = failureReason;
    return this;
  }

  /**
   * Get failureReason
   * @return failureReason
   */
  @javax.annotation.Nullable
  public GoogleCloudDiscoveryengineV1betaTargetSiteFailureReason getFailureReason() {
    return failureReason;
  }

  public void setFailureReason(GoogleCloudDiscoveryengineV1betaTargetSiteFailureReason failureReason) {
    this.failureReason = failureReason;
  }


  /**
   * Output only. This is system-generated based on the provided_uri_pattern.
   * @return generatedUriPattern
   */
  @javax.annotation.Nullable
  public String getGeneratedUriPattern() {
    return generatedUriPattern;
  }



  /**
   * Output only. Indexing status.
   * @return indexingStatus
   */
  @javax.annotation.Nullable
  public IndexingStatusEnum getIndexingStatus() {
    return indexingStatus;
  }



  /**
   * Output only. The fully qualified resource name of the target site. &#x60;projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}/siteSearchEngine/targetSites/{target_site}&#x60; The &#x60;target_site_id&#x60; is system-generated.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }



  public GoogleCloudDiscoveryengineV1betaTargetSite providedUriPattern(String providedUriPattern) {
    this.providedUriPattern = providedUriPattern;
    return this;
  }

  /**
   * Required. Input only. The user provided URI pattern from which the &#x60;generated_uri_pattern&#x60; is generated.
   * @return providedUriPattern
   */
  @javax.annotation.Nullable
  public String getProvidedUriPattern() {
    return providedUriPattern;
  }

  public void setProvidedUriPattern(String providedUriPattern) {
    this.providedUriPattern = providedUriPattern;
  }


  public GoogleCloudDiscoveryengineV1betaTargetSite siteVerificationInfo(GoogleCloudDiscoveryengineV1betaSiteVerificationInfo siteVerificationInfo) {
    this.siteVerificationInfo = siteVerificationInfo;
    return this;
  }

  /**
   * Get siteVerificationInfo
   * @return siteVerificationInfo
   */
  @javax.annotation.Nullable
  public GoogleCloudDiscoveryengineV1betaSiteVerificationInfo getSiteVerificationInfo() {
    return siteVerificationInfo;
  }

  public void setSiteVerificationInfo(GoogleCloudDiscoveryengineV1betaSiteVerificationInfo siteVerificationInfo) {
    this.siteVerificationInfo = siteVerificationInfo;
  }


  public GoogleCloudDiscoveryengineV1betaTargetSite type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * The type of the target site, e.g., whether the site is to be included or excluded.
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }


  /**
   * Output only. The target site&#39;s last updated time.
   * @return updateTime
   */
  @javax.annotation.Nullable
  public String getUpdateTime() {
    return updateTime;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudDiscoveryengineV1betaTargetSite googleCloudDiscoveryengineV1betaTargetSite = (GoogleCloudDiscoveryengineV1betaTargetSite) o;
    return Objects.equals(this.exactMatch, googleCloudDiscoveryengineV1betaTargetSite.exactMatch) &&
        Objects.equals(this.failureReason, googleCloudDiscoveryengineV1betaTargetSite.failureReason) &&
        Objects.equals(this.generatedUriPattern, googleCloudDiscoveryengineV1betaTargetSite.generatedUriPattern) &&
        Objects.equals(this.indexingStatus, googleCloudDiscoveryengineV1betaTargetSite.indexingStatus) &&
        Objects.equals(this.name, googleCloudDiscoveryengineV1betaTargetSite.name) &&
        Objects.equals(this.providedUriPattern, googleCloudDiscoveryengineV1betaTargetSite.providedUriPattern) &&
        Objects.equals(this.siteVerificationInfo, googleCloudDiscoveryengineV1betaTargetSite.siteVerificationInfo) &&
        Objects.equals(this.type, googleCloudDiscoveryengineV1betaTargetSite.type) &&
        Objects.equals(this.updateTime, googleCloudDiscoveryengineV1betaTargetSite.updateTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(exactMatch, failureReason, generatedUriPattern, indexingStatus, name, providedUriPattern, siteVerificationInfo, type, updateTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudDiscoveryengineV1betaTargetSite {\n");
    sb.append("    exactMatch: ").append(toIndentedString(exactMatch)).append("\n");
    sb.append("    failureReason: ").append(toIndentedString(failureReason)).append("\n");
    sb.append("    generatedUriPattern: ").append(toIndentedString(generatedUriPattern)).append("\n");
    sb.append("    indexingStatus: ").append(toIndentedString(indexingStatus)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    providedUriPattern: ").append(toIndentedString(providedUriPattern)).append("\n");
    sb.append("    siteVerificationInfo: ").append(toIndentedString(siteVerificationInfo)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("exactMatch");
    openapiFields.add("failureReason");
    openapiFields.add("generatedUriPattern");
    openapiFields.add("indexingStatus");
    openapiFields.add("name");
    openapiFields.add("providedUriPattern");
    openapiFields.add("siteVerificationInfo");
    openapiFields.add("type");
    openapiFields.add("updateTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudDiscoveryengineV1betaTargetSite
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudDiscoveryengineV1betaTargetSite.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudDiscoveryengineV1betaTargetSite is not found in the empty JSON string", GoogleCloudDiscoveryengineV1betaTargetSite.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudDiscoveryengineV1betaTargetSite.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudDiscoveryengineV1betaTargetSite` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `failureReason`
      if (jsonObj.get("failureReason") != null && !jsonObj.get("failureReason").isJsonNull()) {
        GoogleCloudDiscoveryengineV1betaTargetSiteFailureReason.validateJsonElement(jsonObj.get("failureReason"));
      }
      if ((jsonObj.get("generatedUriPattern") != null && !jsonObj.get("generatedUriPattern").isJsonNull()) && !jsonObj.get("generatedUriPattern").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `generatedUriPattern` to be a primitive type in the JSON string but got `%s`", jsonObj.get("generatedUriPattern").toString()));
      }
      if ((jsonObj.get("indexingStatus") != null && !jsonObj.get("indexingStatus").isJsonNull()) && !jsonObj.get("indexingStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `indexingStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("indexingStatus").toString()));
      }
      // validate the optional field `indexingStatus`
      if (jsonObj.get("indexingStatus") != null && !jsonObj.get("indexingStatus").isJsonNull()) {
        IndexingStatusEnum.validateJsonElement(jsonObj.get("indexingStatus"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("providedUriPattern") != null && !jsonObj.get("providedUriPattern").isJsonNull()) && !jsonObj.get("providedUriPattern").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `providedUriPattern` to be a primitive type in the JSON string but got `%s`", jsonObj.get("providedUriPattern").toString()));
      }
      // validate the optional field `siteVerificationInfo`
      if (jsonObj.get("siteVerificationInfo") != null && !jsonObj.get("siteVerificationInfo").isJsonNull()) {
        GoogleCloudDiscoveryengineV1betaSiteVerificationInfo.validateJsonElement(jsonObj.get("siteVerificationInfo"));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
      if ((jsonObj.get("updateTime") != null && !jsonObj.get("updateTime").isJsonNull()) && !jsonObj.get("updateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updateTime").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudDiscoveryengineV1betaTargetSite.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudDiscoveryengineV1betaTargetSite' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudDiscoveryengineV1betaTargetSite> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudDiscoveryengineV1betaTargetSite.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudDiscoveryengineV1betaTargetSite>() {
           @Override
           public void write(JsonWriter out, GoogleCloudDiscoveryengineV1betaTargetSite value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudDiscoveryengineV1betaTargetSite read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudDiscoveryengineV1betaTargetSite given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudDiscoveryengineV1betaTargetSite
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudDiscoveryengineV1betaTargetSite
   */
  public static GoogleCloudDiscoveryengineV1betaTargetSite fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudDiscoveryengineV1betaTargetSite.class);
  }

  /**
   * Convert an instance of GoogleCloudDiscoveryengineV1betaTargetSite to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

