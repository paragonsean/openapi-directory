/*
 * Discovery Engine API
 * Discovery Engine API.
 *
 * The version of the OpenAPI document: v1alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.GoogleCloudDiscoveryengineLoggingHttpRequestContext;
import org.openapitools.client.model.GoogleCloudDiscoveryengineLoggingSourceLocation;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A description of the context in which an error occurred.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:39:39.358631-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudDiscoveryengineLoggingErrorContext {
  public static final String SERIALIZED_NAME_HTTP_REQUEST = "httpRequest";
  @SerializedName(SERIALIZED_NAME_HTTP_REQUEST)
  private GoogleCloudDiscoveryengineLoggingHttpRequestContext httpRequest;

  public static final String SERIALIZED_NAME_REPORT_LOCATION = "reportLocation";
  @SerializedName(SERIALIZED_NAME_REPORT_LOCATION)
  private GoogleCloudDiscoveryengineLoggingSourceLocation reportLocation;

  public GoogleCloudDiscoveryengineLoggingErrorContext() {
  }

  public GoogleCloudDiscoveryengineLoggingErrorContext httpRequest(GoogleCloudDiscoveryengineLoggingHttpRequestContext httpRequest) {
    this.httpRequest = httpRequest;
    return this;
  }

  /**
   * Get httpRequest
   * @return httpRequest
   */
  @javax.annotation.Nullable
  public GoogleCloudDiscoveryengineLoggingHttpRequestContext getHttpRequest() {
    return httpRequest;
  }

  public void setHttpRequest(GoogleCloudDiscoveryengineLoggingHttpRequestContext httpRequest) {
    this.httpRequest = httpRequest;
  }


  public GoogleCloudDiscoveryengineLoggingErrorContext reportLocation(GoogleCloudDiscoveryengineLoggingSourceLocation reportLocation) {
    this.reportLocation = reportLocation;
    return this;
  }

  /**
   * Get reportLocation
   * @return reportLocation
   */
  @javax.annotation.Nullable
  public GoogleCloudDiscoveryengineLoggingSourceLocation getReportLocation() {
    return reportLocation;
  }

  public void setReportLocation(GoogleCloudDiscoveryengineLoggingSourceLocation reportLocation) {
    this.reportLocation = reportLocation;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudDiscoveryengineLoggingErrorContext googleCloudDiscoveryengineLoggingErrorContext = (GoogleCloudDiscoveryengineLoggingErrorContext) o;
    return Objects.equals(this.httpRequest, googleCloudDiscoveryengineLoggingErrorContext.httpRequest) &&
        Objects.equals(this.reportLocation, googleCloudDiscoveryengineLoggingErrorContext.reportLocation);
  }

  @Override
  public int hashCode() {
    return Objects.hash(httpRequest, reportLocation);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudDiscoveryengineLoggingErrorContext {\n");
    sb.append("    httpRequest: ").append(toIndentedString(httpRequest)).append("\n");
    sb.append("    reportLocation: ").append(toIndentedString(reportLocation)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("httpRequest");
    openapiFields.add("reportLocation");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudDiscoveryengineLoggingErrorContext
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudDiscoveryengineLoggingErrorContext.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudDiscoveryengineLoggingErrorContext is not found in the empty JSON string", GoogleCloudDiscoveryengineLoggingErrorContext.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudDiscoveryengineLoggingErrorContext.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudDiscoveryengineLoggingErrorContext` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `httpRequest`
      if (jsonObj.get("httpRequest") != null && !jsonObj.get("httpRequest").isJsonNull()) {
        GoogleCloudDiscoveryengineLoggingHttpRequestContext.validateJsonElement(jsonObj.get("httpRequest"));
      }
      // validate the optional field `reportLocation`
      if (jsonObj.get("reportLocation") != null && !jsonObj.get("reportLocation").isJsonNull()) {
        GoogleCloudDiscoveryengineLoggingSourceLocation.validateJsonElement(jsonObj.get("reportLocation"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudDiscoveryengineLoggingErrorContext.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudDiscoveryengineLoggingErrorContext' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudDiscoveryengineLoggingErrorContext> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudDiscoveryengineLoggingErrorContext.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudDiscoveryengineLoggingErrorContext>() {
           @Override
           public void write(JsonWriter out, GoogleCloudDiscoveryengineLoggingErrorContext value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudDiscoveryengineLoggingErrorContext read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudDiscoveryengineLoggingErrorContext given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudDiscoveryengineLoggingErrorContext
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudDiscoveryengineLoggingErrorContext
   */
  public static GoogleCloudDiscoveryengineLoggingErrorContext fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudDiscoveryengineLoggingErrorContext.class);
  }

  /**
   * Convert an instance of GoogleCloudDiscoveryengineLoggingErrorContext to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

