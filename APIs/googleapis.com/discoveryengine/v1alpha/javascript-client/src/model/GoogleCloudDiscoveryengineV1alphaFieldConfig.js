/**
 * Discovery Engine API
 * Discovery Engine API.
 *
 * The version of the OpenAPI document: v1alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The GoogleCloudDiscoveryengineV1alphaFieldConfig model module.
 * @module model/GoogleCloudDiscoveryengineV1alphaFieldConfig
 * @version v1alpha
 */
class GoogleCloudDiscoveryengineV1alphaFieldConfig {
    /**
     * Constructs a new <code>GoogleCloudDiscoveryengineV1alphaFieldConfig</code>.
     * Configurations for fields of a schema. For example, configuring a field is indexable, or searchable.
     * @alias module:model/GoogleCloudDiscoveryengineV1alphaFieldConfig
     */
    constructor() { 
        
        GoogleCloudDiscoveryengineV1alphaFieldConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleCloudDiscoveryengineV1alphaFieldConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleCloudDiscoveryengineV1alphaFieldConfig} obj Optional instance to populate.
     * @return {module:model/GoogleCloudDiscoveryengineV1alphaFieldConfig} The populated <code>GoogleCloudDiscoveryengineV1alphaFieldConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleCloudDiscoveryengineV1alphaFieldConfig();

            if (data.hasOwnProperty('completableOption')) {
                obj['completableOption'] = ApiClient.convertToType(data['completableOption'], 'String');
            }
            if (data.hasOwnProperty('dynamicFacetableOption')) {
                obj['dynamicFacetableOption'] = ApiClient.convertToType(data['dynamicFacetableOption'], 'String');
            }
            if (data.hasOwnProperty('fieldPath')) {
                obj['fieldPath'] = ApiClient.convertToType(data['fieldPath'], 'String');
            }
            if (data.hasOwnProperty('fieldType')) {
                obj['fieldType'] = ApiClient.convertToType(data['fieldType'], 'String');
            }
            if (data.hasOwnProperty('indexableOption')) {
                obj['indexableOption'] = ApiClient.convertToType(data['indexableOption'], 'String');
            }
            if (data.hasOwnProperty('keyPropertyType')) {
                obj['keyPropertyType'] = ApiClient.convertToType(data['keyPropertyType'], 'String');
            }
            if (data.hasOwnProperty('recsFilterableOption')) {
                obj['recsFilterableOption'] = ApiClient.convertToType(data['recsFilterableOption'], 'String');
            }
            if (data.hasOwnProperty('retrievableOption')) {
                obj['retrievableOption'] = ApiClient.convertToType(data['retrievableOption'], 'String');
            }
            if (data.hasOwnProperty('searchableOption')) {
                obj['searchableOption'] = ApiClient.convertToType(data['searchableOption'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleCloudDiscoveryengineV1alphaFieldConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleCloudDiscoveryengineV1alphaFieldConfig</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['completableOption'] && !(typeof data['completableOption'] === 'string' || data['completableOption'] instanceof String)) {
            throw new Error("Expected the field `completableOption` to be a primitive type in the JSON string but got " + data['completableOption']);
        }
        // ensure the json data is a string
        if (data['dynamicFacetableOption'] && !(typeof data['dynamicFacetableOption'] === 'string' || data['dynamicFacetableOption'] instanceof String)) {
            throw new Error("Expected the field `dynamicFacetableOption` to be a primitive type in the JSON string but got " + data['dynamicFacetableOption']);
        }
        // ensure the json data is a string
        if (data['fieldPath'] && !(typeof data['fieldPath'] === 'string' || data['fieldPath'] instanceof String)) {
            throw new Error("Expected the field `fieldPath` to be a primitive type in the JSON string but got " + data['fieldPath']);
        }
        // ensure the json data is a string
        if (data['fieldType'] && !(typeof data['fieldType'] === 'string' || data['fieldType'] instanceof String)) {
            throw new Error("Expected the field `fieldType` to be a primitive type in the JSON string but got " + data['fieldType']);
        }
        // ensure the json data is a string
        if (data['indexableOption'] && !(typeof data['indexableOption'] === 'string' || data['indexableOption'] instanceof String)) {
            throw new Error("Expected the field `indexableOption` to be a primitive type in the JSON string but got " + data['indexableOption']);
        }
        // ensure the json data is a string
        if (data['keyPropertyType'] && !(typeof data['keyPropertyType'] === 'string' || data['keyPropertyType'] instanceof String)) {
            throw new Error("Expected the field `keyPropertyType` to be a primitive type in the JSON string but got " + data['keyPropertyType']);
        }
        // ensure the json data is a string
        if (data['recsFilterableOption'] && !(typeof data['recsFilterableOption'] === 'string' || data['recsFilterableOption'] instanceof String)) {
            throw new Error("Expected the field `recsFilterableOption` to be a primitive type in the JSON string but got " + data['recsFilterableOption']);
        }
        // ensure the json data is a string
        if (data['retrievableOption'] && !(typeof data['retrievableOption'] === 'string' || data['retrievableOption'] instanceof String)) {
            throw new Error("Expected the field `retrievableOption` to be a primitive type in the JSON string but got " + data['retrievableOption']);
        }
        // ensure the json data is a string
        if (data['searchableOption'] && !(typeof data['searchableOption'] === 'string' || data['searchableOption'] instanceof String)) {
            throw new Error("Expected the field `searchableOption` to be a primitive type in the JSON string but got " + data['searchableOption']);
        }

        return true;
    }


}



/**
 * If completable_option is COMPLETABLE_ENABLED, field values are directly used and returned as suggestions for Autocomplete in CompletionService.CompleteQuery. If completable_option is unset, the server behavior defaults to COMPLETABLE_DISABLED for fields that support setting completable options, which are just `string` fields. For those fields that do not support setting completable options, the server will skip completable option setting, and setting completable_option for those fields will throw `INVALID_ARGUMENT` error.
 * @member {module:model/GoogleCloudDiscoveryengineV1alphaFieldConfig.CompletableOptionEnum} completableOption
 */
GoogleCloudDiscoveryengineV1alphaFieldConfig.prototype['completableOption'] = undefined;

/**
 * If dynamic_facetable_option is DYNAMIC_FACETABLE_ENABLED, field values are available for dynamic facet. Could only be DYNAMIC_FACETABLE_DISABLED if FieldConfig.indexable_option is INDEXABLE_DISABLED. Otherwise, an `INVALID_ARGUMENT` error will be returned. If dynamic_facetable_option is unset, the server behavior defaults to DYNAMIC_FACETABLE_DISABLED for fields that support setting dynamic facetable options. For those fields that do not support setting dynamic facetable options, such as `object` and `boolean`, the server will skip dynamic facetable option setting, and setting dynamic_facetable_option for those fields will throw `INVALID_ARGUMENT` error.
 * @member {module:model/GoogleCloudDiscoveryengineV1alphaFieldConfig.DynamicFacetableOptionEnum} dynamicFacetableOption
 */
GoogleCloudDiscoveryengineV1alphaFieldConfig.prototype['dynamicFacetableOption'] = undefined;

/**
 * Required. Field path of the schema field. For example: `title`, `description`, `release_info.release_year`.
 * @member {String} fieldPath
 */
GoogleCloudDiscoveryengineV1alphaFieldConfig.prototype['fieldPath'] = undefined;

/**
 * Output only. Raw type of the field.
 * @member {module:model/GoogleCloudDiscoveryengineV1alphaFieldConfig.FieldTypeEnum} fieldType
 */
GoogleCloudDiscoveryengineV1alphaFieldConfig.prototype['fieldType'] = undefined;

/**
 * If indexable_option is INDEXABLE_ENABLED, field values are indexed so that it can be filtered or faceted in SearchService.Search. If indexable_option is unset, the server behavior defaults to INDEXABLE_DISABLED for fields that support setting indexable options. For those fields that do not support setting indexable options, such as `object` and `boolean` and key properties, the server will skip indexable_option setting, and setting indexable_option for those fields will throw `INVALID_ARGUMENT` error.
 * @member {module:model/GoogleCloudDiscoveryengineV1alphaFieldConfig.IndexableOptionEnum} indexableOption
 */
GoogleCloudDiscoveryengineV1alphaFieldConfig.prototype['indexableOption'] = undefined;

/**
 * Output only. Type of the key property that this field is mapped to. Empty string if this is not annotated as mapped to a key property. Example types are `title`, `description`. Full list is defined by `keyPropertyMapping` in the schema field annotation. If the schema field has a `KeyPropertyMapping` annotation, `indexable_option` and `searchable_option` of this field cannot be modified.
 * @member {String} keyPropertyType
 */
GoogleCloudDiscoveryengineV1alphaFieldConfig.prototype['keyPropertyType'] = undefined;

/**
 * If recs_filterable_option is FILTERABLE_ENABLED, field values are filterable by filter expression in RecommendationService.Recommend. If FILTERABLE_ENABLED but the field type is numerical, field values are not filterable by text queries in RecommendationService.Recommend. Only textual fields are supported. If recs_filterable_option is unset, the default setting is FILTERABLE_DISABLED for fields that support setting filterable options. When a field set to [FILTERABLE_DISABLED] is filtered, a warning is generated and an empty result is returned.
 * @member {module:model/GoogleCloudDiscoveryengineV1alphaFieldConfig.RecsFilterableOptionEnum} recsFilterableOption
 */
GoogleCloudDiscoveryengineV1alphaFieldConfig.prototype['recsFilterableOption'] = undefined;

/**
 * If retrievable_option is RETRIEVABLE_ENABLED, field values are included in the search results. If retrievable_option is unset, the server behavior defaults to RETRIEVABLE_DISABLED for fields that support setting retrievable options. For those fields that do not support setting retrievable options, such as `object` and `boolean`, the server will skip retrievable option setting, and setting retrievable_option for those fields will throw `INVALID_ARGUMENT` error.
 * @member {module:model/GoogleCloudDiscoveryengineV1alphaFieldConfig.RetrievableOptionEnum} retrievableOption
 */
GoogleCloudDiscoveryengineV1alphaFieldConfig.prototype['retrievableOption'] = undefined;

/**
 * If searchable_option is SEARCHABLE_ENABLED, field values are searchable by text queries in SearchService.Search. If SEARCHABLE_ENABLED but field type is numerical, field values will not be searchable by text queries in SearchService.Search, as there are no text values associated to numerical fields. If searchable_option is unset, the server behavior defaults to SEARCHABLE_DISABLED for fields that support setting searchable options. Only `string` fields that have no key property mapping support setting searchable_option. For those fields that do not support setting searchable options, the server will skip searchable option setting, and setting searchable_option for those fields will throw `INVALID_ARGUMENT` error.
 * @member {module:model/GoogleCloudDiscoveryengineV1alphaFieldConfig.SearchableOptionEnum} searchableOption
 */
GoogleCloudDiscoveryengineV1alphaFieldConfig.prototype['searchableOption'] = undefined;





/**
 * Allowed values for the <code>completableOption</code> property.
 * @enum {String}
 * @readonly
 */
GoogleCloudDiscoveryengineV1alphaFieldConfig['CompletableOptionEnum'] = {

    /**
     * value: "COMPLETABLE_OPTION_UNSPECIFIED"
     * @const
     */
    "OPTION_UNSPECIFIED": "COMPLETABLE_OPTION_UNSPECIFIED",

    /**
     * value: "COMPLETABLE_ENABLED"
     * @const
     */
    "ENABLED": "COMPLETABLE_ENABLED",

    /**
     * value: "COMPLETABLE_DISABLED"
     * @const
     */
    "DISABLED": "COMPLETABLE_DISABLED"
};


/**
 * Allowed values for the <code>dynamicFacetableOption</code> property.
 * @enum {String}
 * @readonly
 */
GoogleCloudDiscoveryengineV1alphaFieldConfig['DynamicFacetableOptionEnum'] = {

    /**
     * value: "DYNAMIC_FACETABLE_OPTION_UNSPECIFIED"
     * @const
     */
    "OPTION_UNSPECIFIED": "DYNAMIC_FACETABLE_OPTION_UNSPECIFIED",

    /**
     * value: "DYNAMIC_FACETABLE_ENABLED"
     * @const
     */
    "ENABLED": "DYNAMIC_FACETABLE_ENABLED",

    /**
     * value: "DYNAMIC_FACETABLE_DISABLED"
     * @const
     */
    "DISABLED": "DYNAMIC_FACETABLE_DISABLED"
};


/**
 * Allowed values for the <code>fieldType</code> property.
 * @enum {String}
 * @readonly
 */
GoogleCloudDiscoveryengineV1alphaFieldConfig['FieldTypeEnum'] = {

    /**
     * value: "FIELD_TYPE_UNSPECIFIED"
     * @const
     */
    "FIELD_TYPE_UNSPECIFIED": "FIELD_TYPE_UNSPECIFIED",

    /**
     * value: "OBJECT"
     * @const
     */
    "OBJECT": "OBJECT",

    /**
     * value: "STRING"
     * @const
     */
    "STRING": "STRING",

    /**
     * value: "NUMBER"
     * @const
     */
    "NUMBER": "NUMBER",

    /**
     * value: "INTEGER"
     * @const
     */
    "INTEGER": "INTEGER",

    /**
     * value: "BOOLEAN"
     * @const
     */
    "BOOLEAN": "BOOLEAN",

    /**
     * value: "GEOLOCATION"
     * @const
     */
    "GEOLOCATION": "GEOLOCATION",

    /**
     * value: "DATETIME"
     * @const
     */
    "DATETIME": "DATETIME"
};


/**
 * Allowed values for the <code>indexableOption</code> property.
 * @enum {String}
 * @readonly
 */
GoogleCloudDiscoveryengineV1alphaFieldConfig['IndexableOptionEnum'] = {

    /**
     * value: "INDEXABLE_OPTION_UNSPECIFIED"
     * @const
     */
    "OPTION_UNSPECIFIED": "INDEXABLE_OPTION_UNSPECIFIED",

    /**
     * value: "INDEXABLE_ENABLED"
     * @const
     */
    "ENABLED": "INDEXABLE_ENABLED",

    /**
     * value: "INDEXABLE_DISABLED"
     * @const
     */
    "DISABLED": "INDEXABLE_DISABLED"
};


/**
 * Allowed values for the <code>recsFilterableOption</code> property.
 * @enum {String}
 * @readonly
 */
GoogleCloudDiscoveryengineV1alphaFieldConfig['RecsFilterableOptionEnum'] = {

    /**
     * value: "FILTERABLE_OPTION_UNSPECIFIED"
     * @const
     */
    "OPTION_UNSPECIFIED": "FILTERABLE_OPTION_UNSPECIFIED",

    /**
     * value: "FILTERABLE_ENABLED"
     * @const
     */
    "ENABLED": "FILTERABLE_ENABLED",

    /**
     * value: "FILTERABLE_DISABLED"
     * @const
     */
    "DISABLED": "FILTERABLE_DISABLED"
};


/**
 * Allowed values for the <code>retrievableOption</code> property.
 * @enum {String}
 * @readonly
 */
GoogleCloudDiscoveryengineV1alphaFieldConfig['RetrievableOptionEnum'] = {

    /**
     * value: "RETRIEVABLE_OPTION_UNSPECIFIED"
     * @const
     */
    "OPTION_UNSPECIFIED": "RETRIEVABLE_OPTION_UNSPECIFIED",

    /**
     * value: "RETRIEVABLE_ENABLED"
     * @const
     */
    "ENABLED": "RETRIEVABLE_ENABLED",

    /**
     * value: "RETRIEVABLE_DISABLED"
     * @const
     */
    "DISABLED": "RETRIEVABLE_DISABLED"
};


/**
 * Allowed values for the <code>searchableOption</code> property.
 * @enum {String}
 * @readonly
 */
GoogleCloudDiscoveryengineV1alphaFieldConfig['SearchableOptionEnum'] = {

    /**
     * value: "SEARCHABLE_OPTION_UNSPECIFIED"
     * @const
     */
    "OPTION_UNSPECIFIED": "SEARCHABLE_OPTION_UNSPECIFIED",

    /**
     * value: "SEARCHABLE_ENABLED"
     * @const
     */
    "ENABLED": "SEARCHABLE_ENABLED",

    /**
     * value: "SEARCHABLE_DISABLED"
     * @const
     */
    "DISABLED": "SEARCHABLE_DISABLED"
};



export default GoogleCloudDiscoveryengineV1alphaFieldConfig;

