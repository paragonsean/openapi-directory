/**
 * Discovery Engine API
 * Discovery Engine API.
 *
 * The version of the OpenAPI document: v1alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GoogleTypeDate from './GoogleTypeDate';

/**
 * The GoogleCloudDiscoveryengineV1alphaBigQuerySource model module.
 * @module model/GoogleCloudDiscoveryengineV1alphaBigQuerySource
 * @version v1alpha
 */
class GoogleCloudDiscoveryengineV1alphaBigQuerySource {
    /**
     * Constructs a new <code>GoogleCloudDiscoveryengineV1alphaBigQuerySource</code>.
     * BigQuery source import data from.
     * @alias module:model/GoogleCloudDiscoveryengineV1alphaBigQuerySource
     */
    constructor() { 
        
        GoogleCloudDiscoveryengineV1alphaBigQuerySource.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleCloudDiscoveryengineV1alphaBigQuerySource</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleCloudDiscoveryengineV1alphaBigQuerySource} obj Optional instance to populate.
     * @return {module:model/GoogleCloudDiscoveryengineV1alphaBigQuerySource} The populated <code>GoogleCloudDiscoveryengineV1alphaBigQuerySource</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleCloudDiscoveryengineV1alphaBigQuerySource();

            if (data.hasOwnProperty('dataSchema')) {
                obj['dataSchema'] = ApiClient.convertToType(data['dataSchema'], 'String');
            }
            if (data.hasOwnProperty('datasetId')) {
                obj['datasetId'] = ApiClient.convertToType(data['datasetId'], 'String');
            }
            if (data.hasOwnProperty('gcsStagingDir')) {
                obj['gcsStagingDir'] = ApiClient.convertToType(data['gcsStagingDir'], 'String');
            }
            if (data.hasOwnProperty('partitionDate')) {
                obj['partitionDate'] = GoogleTypeDate.constructFromObject(data['partitionDate']);
            }
            if (data.hasOwnProperty('projectId')) {
                obj['projectId'] = ApiClient.convertToType(data['projectId'], 'String');
            }
            if (data.hasOwnProperty('tableId')) {
                obj['tableId'] = ApiClient.convertToType(data['tableId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleCloudDiscoveryengineV1alphaBigQuerySource</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleCloudDiscoveryengineV1alphaBigQuerySource</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['dataSchema'] && !(typeof data['dataSchema'] === 'string' || data['dataSchema'] instanceof String)) {
            throw new Error("Expected the field `dataSchema` to be a primitive type in the JSON string but got " + data['dataSchema']);
        }
        // ensure the json data is a string
        if (data['datasetId'] && !(typeof data['datasetId'] === 'string' || data['datasetId'] instanceof String)) {
            throw new Error("Expected the field `datasetId` to be a primitive type in the JSON string but got " + data['datasetId']);
        }
        // ensure the json data is a string
        if (data['gcsStagingDir'] && !(typeof data['gcsStagingDir'] === 'string' || data['gcsStagingDir'] instanceof String)) {
            throw new Error("Expected the field `gcsStagingDir` to be a primitive type in the JSON string but got " + data['gcsStagingDir']);
        }
        // validate the optional field `partitionDate`
        if (data['partitionDate']) { // data not null
          GoogleTypeDate.validateJSON(data['partitionDate']);
        }
        // ensure the json data is a string
        if (data['projectId'] && !(typeof data['projectId'] === 'string' || data['projectId'] instanceof String)) {
            throw new Error("Expected the field `projectId` to be a primitive type in the JSON string but got " + data['projectId']);
        }
        // ensure the json data is a string
        if (data['tableId'] && !(typeof data['tableId'] === 'string' || data['tableId'] instanceof String)) {
            throw new Error("Expected the field `tableId` to be a primitive type in the JSON string but got " + data['tableId']);
        }

        return true;
    }


}



/**
 * The schema to use when parsing the data from the source. Supported values for user event imports: * `user_event` (default): One UserEvent per row. Supported values for document imports: * `document` (default): One Document format per row. Each document must have a valid Document.id and one of Document.json_data or Document.struct_data. * `custom`: One custom data per row in arbitrary format that conforms to the defined Schema of the data store. This can only be used by Gen App Builder.
 * @member {String} dataSchema
 */
GoogleCloudDiscoveryengineV1alphaBigQuerySource.prototype['dataSchema'] = undefined;

/**
 * Required. The BigQuery data set to copy the data from with a length limit of 1,024 characters.
 * @member {String} datasetId
 */
GoogleCloudDiscoveryengineV1alphaBigQuerySource.prototype['datasetId'] = undefined;

/**
 * Intermediate Cloud Storage directory used for the import with a length limit of 2,000 characters. Can be specified if one wants to have the BigQuery export to a specific Cloud Storage directory.
 * @member {String} gcsStagingDir
 */
GoogleCloudDiscoveryengineV1alphaBigQuerySource.prototype['gcsStagingDir'] = undefined;

/**
 * @member {module:model/GoogleTypeDate} partitionDate
 */
GoogleCloudDiscoveryengineV1alphaBigQuerySource.prototype['partitionDate'] = undefined;

/**
 * The project ID (can be project # or ID) that the BigQuery source is in with a length limit of 128 characters. If not specified, inherits the project ID from the parent request.
 * @member {String} projectId
 */
GoogleCloudDiscoveryengineV1alphaBigQuerySource.prototype['projectId'] = undefined;

/**
 * Required. The BigQuery table to copy the data from with a length limit of 1,024 characters.
 * @member {String} tableId
 */
GoogleCloudDiscoveryengineV1alphaBigQuerySource.prototype['tableId'] = undefined;






export default GoogleCloudDiscoveryengineV1alphaBigQuerySource;

