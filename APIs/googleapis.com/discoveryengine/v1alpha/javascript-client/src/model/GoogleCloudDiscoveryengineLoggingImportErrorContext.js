/**
 * Discovery Engine API
 * Discovery Engine API.
 *
 * The version of the OpenAPI document: v1alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The GoogleCloudDiscoveryengineLoggingImportErrorContext model module.
 * @module model/GoogleCloudDiscoveryengineLoggingImportErrorContext
 * @version v1alpha
 */
class GoogleCloudDiscoveryengineLoggingImportErrorContext {
    /**
     * Constructs a new <code>GoogleCloudDiscoveryengineLoggingImportErrorContext</code>.
     * The error payload that is populated on LRO import APIs, including the following: * &#x60;google.cloud.discoveryengine.v1alpha.DocumentService.ImportDocuments&#x60; * &#x60;google.cloud.discoveryengine.v1alpha.UserEventService.ImportUserEvents&#x60;
     * @alias module:model/GoogleCloudDiscoveryengineLoggingImportErrorContext
     */
    constructor() { 
        
        GoogleCloudDiscoveryengineLoggingImportErrorContext.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleCloudDiscoveryengineLoggingImportErrorContext</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleCloudDiscoveryengineLoggingImportErrorContext} obj Optional instance to populate.
     * @return {module:model/GoogleCloudDiscoveryengineLoggingImportErrorContext} The populated <code>GoogleCloudDiscoveryengineLoggingImportErrorContext</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleCloudDiscoveryengineLoggingImportErrorContext();

            if (data.hasOwnProperty('document')) {
                obj['document'] = ApiClient.convertToType(data['document'], 'String');
            }
            if (data.hasOwnProperty('gcsPath')) {
                obj['gcsPath'] = ApiClient.convertToType(data['gcsPath'], 'String');
            }
            if (data.hasOwnProperty('lineNumber')) {
                obj['lineNumber'] = ApiClient.convertToType(data['lineNumber'], 'String');
            }
            if (data.hasOwnProperty('operation')) {
                obj['operation'] = ApiClient.convertToType(data['operation'], 'String');
            }
            if (data.hasOwnProperty('userEvent')) {
                obj['userEvent'] = ApiClient.convertToType(data['userEvent'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleCloudDiscoveryengineLoggingImportErrorContext</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleCloudDiscoveryengineLoggingImportErrorContext</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['document'] && !(typeof data['document'] === 'string' || data['document'] instanceof String)) {
            throw new Error("Expected the field `document` to be a primitive type in the JSON string but got " + data['document']);
        }
        // ensure the json data is a string
        if (data['gcsPath'] && !(typeof data['gcsPath'] === 'string' || data['gcsPath'] instanceof String)) {
            throw new Error("Expected the field `gcsPath` to be a primitive type in the JSON string but got " + data['gcsPath']);
        }
        // ensure the json data is a string
        if (data['lineNumber'] && !(typeof data['lineNumber'] === 'string' || data['lineNumber'] instanceof String)) {
            throw new Error("Expected the field `lineNumber` to be a primitive type in the JSON string but got " + data['lineNumber']);
        }
        // ensure the json data is a string
        if (data['operation'] && !(typeof data['operation'] === 'string' || data['operation'] instanceof String)) {
            throw new Error("Expected the field `operation` to be a primitive type in the JSON string but got " + data['operation']);
        }
        // ensure the json data is a string
        if (data['userEvent'] && !(typeof data['userEvent'] === 'string' || data['userEvent'] instanceof String)) {
            throw new Error("Expected the field `userEvent` to be a primitive type in the JSON string but got " + data['userEvent']);
        }

        return true;
    }


}



/**
 * The detailed content which caused the error on importing a document.
 * @member {String} document
 */
GoogleCloudDiscoveryengineLoggingImportErrorContext.prototype['document'] = undefined;

/**
 * Google Cloud Storage file path of the import source. Can be set for batch operation error.
 * @member {String} gcsPath
 */
GoogleCloudDiscoveryengineLoggingImportErrorContext.prototype['gcsPath'] = undefined;

/**
 * Line number of the content in file. Should be empty for permission or batch operation error.
 * @member {String} lineNumber
 */
GoogleCloudDiscoveryengineLoggingImportErrorContext.prototype['lineNumber'] = undefined;

/**
 * The operation resource name of the LRO.
 * @member {String} operation
 */
GoogleCloudDiscoveryengineLoggingImportErrorContext.prototype['operation'] = undefined;

/**
 * The detailed content which caused the error on importing a user event.
 * @member {String} userEvent
 */
GoogleCloudDiscoveryengineLoggingImportErrorContext.prototype['userEvent'] = undefined;






export default GoogleCloudDiscoveryengineLoggingImportErrorContext;

