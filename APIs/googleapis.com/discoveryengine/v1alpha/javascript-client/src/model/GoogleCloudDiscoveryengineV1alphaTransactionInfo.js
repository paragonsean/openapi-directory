/**
 * Discovery Engine API
 * Discovery Engine API.
 *
 * The version of the OpenAPI document: v1alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The GoogleCloudDiscoveryengineV1alphaTransactionInfo model module.
 * @module model/GoogleCloudDiscoveryengineV1alphaTransactionInfo
 * @version v1alpha
 */
class GoogleCloudDiscoveryengineV1alphaTransactionInfo {
    /**
     * Constructs a new <code>GoogleCloudDiscoveryengineV1alphaTransactionInfo</code>.
     * A transaction represents the entire purchase transaction.
     * @alias module:model/GoogleCloudDiscoveryengineV1alphaTransactionInfo
     */
    constructor() { 
        
        GoogleCloudDiscoveryengineV1alphaTransactionInfo.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleCloudDiscoveryengineV1alphaTransactionInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleCloudDiscoveryengineV1alphaTransactionInfo} obj Optional instance to populate.
     * @return {module:model/GoogleCloudDiscoveryengineV1alphaTransactionInfo} The populated <code>GoogleCloudDiscoveryengineV1alphaTransactionInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleCloudDiscoveryengineV1alphaTransactionInfo();

            if (data.hasOwnProperty('cost')) {
                obj['cost'] = ApiClient.convertToType(data['cost'], 'Number');
            }
            if (data.hasOwnProperty('currency')) {
                obj['currency'] = ApiClient.convertToType(data['currency'], 'String');
            }
            if (data.hasOwnProperty('discountValue')) {
                obj['discountValue'] = ApiClient.convertToType(data['discountValue'], 'Number');
            }
            if (data.hasOwnProperty('tax')) {
                obj['tax'] = ApiClient.convertToType(data['tax'], 'Number');
            }
            if (data.hasOwnProperty('transactionId')) {
                obj['transactionId'] = ApiClient.convertToType(data['transactionId'], 'String');
            }
            if (data.hasOwnProperty('value')) {
                obj['value'] = ApiClient.convertToType(data['value'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleCloudDiscoveryengineV1alphaTransactionInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleCloudDiscoveryengineV1alphaTransactionInfo</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['currency'] && !(typeof data['currency'] === 'string' || data['currency'] instanceof String)) {
            throw new Error("Expected the field `currency` to be a primitive type in the JSON string but got " + data['currency']);
        }
        // ensure the json data is a string
        if (data['transactionId'] && !(typeof data['transactionId'] === 'string' || data['transactionId'] instanceof String)) {
            throw new Error("Expected the field `transactionId` to be a primitive type in the JSON string but got " + data['transactionId']);
        }

        return true;
    }


}



/**
 * All the costs associated with the products. These can be manufacturing costs, shipping expenses not borne by the end user, or any other costs, such that: * Profit = value - tax - cost
 * @member {Number} cost
 */
GoogleCloudDiscoveryengineV1alphaTransactionInfo.prototype['cost'] = undefined;

/**
 * Required. Currency code. Use three-character ISO-4217 code.
 * @member {String} currency
 */
GoogleCloudDiscoveryengineV1alphaTransactionInfo.prototype['currency'] = undefined;

/**
 * The total discount(s) value applied to this transaction. This figure should be excluded from TransactionInfo.value For example, if a user paid TransactionInfo.value amount, then nominal (pre-discount) value of the transaction is the sum of TransactionInfo.value and TransactionInfo.discount_value This means that profit is calculated the same way, regardless of the discount value, and that TransactionInfo.discount_value can be larger than TransactionInfo.value: * Profit = value - tax - cost
 * @member {Number} discountValue
 */
GoogleCloudDiscoveryengineV1alphaTransactionInfo.prototype['discountValue'] = undefined;

/**
 * All the taxes associated with the transaction.
 * @member {Number} tax
 */
GoogleCloudDiscoveryengineV1alphaTransactionInfo.prototype['tax'] = undefined;

/**
 * The transaction ID with a length limit of 128 characters.
 * @member {String} transactionId
 */
GoogleCloudDiscoveryengineV1alphaTransactionInfo.prototype['transactionId'] = undefined;

/**
 * Required. Total non-zero value associated with the transaction. This value may include shipping, tax, or other adjustments to the total value that you want to include.
 * @member {Number} value
 */
GoogleCloudDiscoveryengineV1alphaTransactionInfo.prototype['value'] = undefined;






export default GoogleCloudDiscoveryengineV1alphaTransactionInfo;

