/**
 * Discovery Engine API
 * Discovery Engine API.
 *
 * The version of the OpenAPI document: v1alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The GoogleCloudDiscoveryengineV1alphaCompleteQueryRequest model module.
 * @module model/GoogleCloudDiscoveryengineV1alphaCompleteQueryRequest
 * @version v1alpha
 */
class GoogleCloudDiscoveryengineV1alphaCompleteQueryRequest {
    /**
     * Constructs a new <code>GoogleCloudDiscoveryengineV1alphaCompleteQueryRequest</code>.
     * Request message for CompletionService.CompleteQuery method.
     * @alias module:model/GoogleCloudDiscoveryengineV1alphaCompleteQueryRequest
     */
    constructor() { 
        
        GoogleCloudDiscoveryengineV1alphaCompleteQueryRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleCloudDiscoveryengineV1alphaCompleteQueryRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleCloudDiscoveryengineV1alphaCompleteQueryRequest} obj Optional instance to populate.
     * @return {module:model/GoogleCloudDiscoveryengineV1alphaCompleteQueryRequest} The populated <code>GoogleCloudDiscoveryengineV1alphaCompleteQueryRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleCloudDiscoveryengineV1alphaCompleteQueryRequest();

            if (data.hasOwnProperty('dataStore')) {
                obj['dataStore'] = ApiClient.convertToType(data['dataStore'], 'String');
            }
            if (data.hasOwnProperty('includeTailSuggestions')) {
                obj['includeTailSuggestions'] = ApiClient.convertToType(data['includeTailSuggestions'], 'Boolean');
            }
            if (data.hasOwnProperty('query')) {
                obj['query'] = ApiClient.convertToType(data['query'], 'String');
            }
            if (data.hasOwnProperty('queryModel')) {
                obj['queryModel'] = ApiClient.convertToType(data['queryModel'], 'String');
            }
            if (data.hasOwnProperty('userPseudoId')) {
                obj['userPseudoId'] = ApiClient.convertToType(data['userPseudoId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleCloudDiscoveryengineV1alphaCompleteQueryRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleCloudDiscoveryengineV1alphaCompleteQueryRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['dataStore'] && !(typeof data['dataStore'] === 'string' || data['dataStore'] instanceof String)) {
            throw new Error("Expected the field `dataStore` to be a primitive type in the JSON string but got " + data['dataStore']);
        }
        // ensure the json data is a string
        if (data['query'] && !(typeof data['query'] === 'string' || data['query'] instanceof String)) {
            throw new Error("Expected the field `query` to be a primitive type in the JSON string but got " + data['query']);
        }
        // ensure the json data is a string
        if (data['queryModel'] && !(typeof data['queryModel'] === 'string' || data['queryModel'] instanceof String)) {
            throw new Error("Expected the field `queryModel` to be a primitive type in the JSON string but got " + data['queryModel']);
        }
        // ensure the json data is a string
        if (data['userPseudoId'] && !(typeof data['userPseudoId'] === 'string' || data['userPseudoId'] instanceof String)) {
            throw new Error("Expected the field `userPseudoId` to be a primitive type in the JSON string but got " + data['userPseudoId']);
        }

        return true;
    }


}



/**
 * Required. The parent data store resource name for which the completion is performed, such as `projects/_*_/locations/global/collections/default_collection/dataStores/default_data_store`.
 * @member {String} dataStore
 */
GoogleCloudDiscoveryengineV1alphaCompleteQueryRequest.prototype['dataStore'] = undefined;

/**
 * Indicates if tail suggestions should be returned if there are no suggestions that match the full query. Even if set to true, if there are suggestions that match the full query, those are returned and no tail suggestions are returned.
 * @member {Boolean} includeTailSuggestions
 */
GoogleCloudDiscoveryengineV1alphaCompleteQueryRequest.prototype['includeTailSuggestions'] = undefined;

/**
 * Required. The typeahead input used to fetch suggestions. Maximum length is 128 characters.
 * @member {String} query
 */
GoogleCloudDiscoveryengineV1alphaCompleteQueryRequest.prototype['query'] = undefined;

/**
 * Specifies the autocomplete data model. This overrides any model specified in the Configuration > Autocomplete section of the Cloud console. Currently supported values: * `document` - Using suggestions generated from user-imported documents. * `search-history` - Using suggestions generated from the past history of SearchService.Search API calls. Do not use it when there is no traffic for Search API. * `user-event` - Using suggestions generated from user-imported search events. * `document-completable` - Using suggestions taken directly from user-imported document fields marked as completable. Default values: * `document` is the default model for regular dataStores. * `search-history` is the default model for site search dataStores.
 * @member {String} queryModel
 */
GoogleCloudDiscoveryengineV1alphaCompleteQueryRequest.prototype['queryModel'] = undefined;

/**
 * A unique identifier for tracking visitors. For example, this could be implemented with an HTTP cookie, which should be able to uniquely identify a visitor on a single device. This unique identifier should not change if the visitor logs in or out of the website. This field should NOT have a fixed value such as `unknown_visitor`. This should be the same identifier as UserEvent.user_pseudo_id and SearchRequest.user_pseudo_id. The field must be a UTF-8 encoded string with a length limit of 128 characters. Otherwise, an `INVALID_ARGUMENT` error is returned.
 * @member {String} userPseudoId
 */
GoogleCloudDiscoveryengineV1alphaCompleteQueryRequest.prototype['userPseudoId'] = undefined;






export default GoogleCloudDiscoveryengineV1alphaCompleteQueryRequest;

