/**
 * Discovery Engine API
 * Discovery Engine API.
 *
 * The version of the OpenAPI document: v1alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import GoogleCloudDiscoveryengineV1alphaLookupWidgetConfigRequest from '../model/GoogleCloudDiscoveryengineV1alphaLookupWidgetConfigRequest';
import GoogleCloudDiscoveryengineV1alphaLookupWidgetConfigResponse from '../model/GoogleCloudDiscoveryengineV1alphaLookupWidgetConfigResponse';
import GoogleCloudDiscoveryengineV1alphaWidgetCompleteQueryRequest from '../model/GoogleCloudDiscoveryengineV1alphaWidgetCompleteQueryRequest';
import GoogleCloudDiscoveryengineV1alphaWidgetCompleteQueryResponse from '../model/GoogleCloudDiscoveryengineV1alphaWidgetCompleteQueryResponse';
import GoogleCloudDiscoveryengineV1alphaWidgetConverseConversationRequest from '../model/GoogleCloudDiscoveryengineV1alphaWidgetConverseConversationRequest';
import GoogleCloudDiscoveryengineV1alphaWidgetConverseConversationResponse from '../model/GoogleCloudDiscoveryengineV1alphaWidgetConverseConversationResponse';
import GoogleCloudDiscoveryengineV1alphaWidgetSearchRequest from '../model/GoogleCloudDiscoveryengineV1alphaWidgetSearchRequest';
import GoogleCloudDiscoveryengineV1alphaWidgetSearchResponse from '../model/GoogleCloudDiscoveryengineV1alphaWidgetSearchResponse';

/**
* Locations service.
* @module api/LocationsApi
* @version v1alpha
*/
export default class LocationsApi {

    /**
    * Constructs a new LocationsApi. 
    * @alias module:api/LocationsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the discoveryengineLocationsLookupWidgetConfig operation.
     * @callback module:api/LocationsApi~discoveryengineLocationsLookupWidgetConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GoogleCloudDiscoveryengineV1alphaLookupWidgetConfigResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the Widget Config using the uuid.
     * @param {String} location Required. The location resource where lookup widget will be performed. Format: `locations/{location}`
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/GoogleCloudDiscoveryengineV1alphaLookupWidgetConfigRequest} [googleCloudDiscoveryengineV1alphaLookupWidgetConfigRequest] 
     * @param {module:api/LocationsApi~discoveryengineLocationsLookupWidgetConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GoogleCloudDiscoveryengineV1alphaLookupWidgetConfigResponse}
     */
    discoveryengineLocationsLookupWidgetConfig(location, opts, callback) {
      opts = opts || {};
      let postBody = opts['googleCloudDiscoveryengineV1alphaLookupWidgetConfigRequest'];
      // verify the required parameter 'location' is set
      if (location === undefined || location === null) {
        throw new Error("Missing the required parameter 'location' when calling discoveryengineLocationsLookupWidgetConfig");
      }

      let pathParams = {
        'location': location
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GoogleCloudDiscoveryengineV1alphaLookupWidgetConfigResponse;
      return this.apiClient.callApi(
        '/v1alpha/{location}/lookupWidgetConfig', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the discoveryengineLocationsWidgetCompleteQuery operation.
     * @callback module:api/LocationsApi~discoveryengineLocationsWidgetCompleteQueryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GoogleCloudDiscoveryengineV1alphaWidgetCompleteQueryResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Performs a user input completion with keyword suggestion. Similar to the CompletionService.CompleteQuery method, but a widget version that allows CompleteQuery without API Key. It supports CompleteQuery with or without JWT token.
     * @param {String} location Required. The location resource where widget complete query will be performed. Format: `locations/{location}`
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/GoogleCloudDiscoveryengineV1alphaWidgetCompleteQueryRequest} [googleCloudDiscoveryengineV1alphaWidgetCompleteQueryRequest] 
     * @param {module:api/LocationsApi~discoveryengineLocationsWidgetCompleteQueryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GoogleCloudDiscoveryengineV1alphaWidgetCompleteQueryResponse}
     */
    discoveryengineLocationsWidgetCompleteQuery(location, opts, callback) {
      opts = opts || {};
      let postBody = opts['googleCloudDiscoveryengineV1alphaWidgetCompleteQueryRequest'];
      // verify the required parameter 'location' is set
      if (location === undefined || location === null) {
        throw new Error("Missing the required parameter 'location' when calling discoveryengineLocationsWidgetCompleteQuery");
      }

      let pathParams = {
        'location': location
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GoogleCloudDiscoveryengineV1alphaWidgetCompleteQueryResponse;
      return this.apiClient.callApi(
        '/v1alpha/{location}/widgetCompleteQuery', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the discoveryengineLocationsWidgetConverseConversation operation.
     * @callback module:api/LocationsApi~discoveryengineLocationsWidgetConverseConversationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GoogleCloudDiscoveryengineV1alphaWidgetConverseConversationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Converse a conversation with Widget.
     * @param {String} location Required. The location resource where widget converse conversation will be performed. Format: `locations/{location}`
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/GoogleCloudDiscoveryengineV1alphaWidgetConverseConversationRequest} [googleCloudDiscoveryengineV1alphaWidgetConverseConversationRequest] 
     * @param {module:api/LocationsApi~discoveryengineLocationsWidgetConverseConversationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GoogleCloudDiscoveryengineV1alphaWidgetConverseConversationResponse}
     */
    discoveryengineLocationsWidgetConverseConversation(location, opts, callback) {
      opts = opts || {};
      let postBody = opts['googleCloudDiscoveryengineV1alphaWidgetConverseConversationRequest'];
      // verify the required parameter 'location' is set
      if (location === undefined || location === null) {
        throw new Error("Missing the required parameter 'location' when calling discoveryengineLocationsWidgetConverseConversation");
      }

      let pathParams = {
        'location': location
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GoogleCloudDiscoveryengineV1alphaWidgetConverseConversationResponse;
      return this.apiClient.callApi(
        '/v1alpha/{location}/widgetConverseConversation', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the discoveryengineLocationsWidgetSearch operation.
     * @callback module:api/LocationsApi~discoveryengineLocationsWidgetSearchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GoogleCloudDiscoveryengineV1alphaWidgetSearchResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Performs a search. Similar to the SearchService.Search method, but a widget version that allows search without API Key. It supports search with or without JWT token.
     * @param {String} location Required. The location resource where widget search will be performed. Format: `locations/{location}`
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/GoogleCloudDiscoveryengineV1alphaWidgetSearchRequest} [googleCloudDiscoveryengineV1alphaWidgetSearchRequest] 
     * @param {module:api/LocationsApi~discoveryengineLocationsWidgetSearchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GoogleCloudDiscoveryengineV1alphaWidgetSearchResponse}
     */
    discoveryengineLocationsWidgetSearch(location, opts, callback) {
      opts = opts || {};
      let postBody = opts['googleCloudDiscoveryengineV1alphaWidgetSearchRequest'];
      // verify the required parameter 'location' is set
      if (location === undefined || location === null) {
        throw new Error("Missing the required parameter 'location' when calling discoveryengineLocationsWidgetSearch");
      }

      let pathParams = {
        'location': location
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GoogleCloudDiscoveryengineV1alphaWidgetSearchResponse;
      return this.apiClient.callApi(
        '/v1alpha/{location}/widgetSearch', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
