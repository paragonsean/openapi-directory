# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_discoveryengine_v1alpha_custom_fine_tuning_spec import GoogleCloudDiscoveryengineV1alphaCustomFineTuningSpec
from openapi_server.models.google_cloud_discoveryengine_v1alpha_search_request_boost_spec import GoogleCloudDiscoveryengineV1alphaSearchRequestBoostSpec
from openapi_server.models.google_cloud_discoveryengine_v1alpha_search_request_content_search_spec import GoogleCloudDiscoveryengineV1alphaSearchRequestContentSearchSpec
from openapi_server.models.google_cloud_discoveryengine_v1alpha_search_request_embedding_spec import GoogleCloudDiscoveryengineV1alphaSearchRequestEmbeddingSpec
from openapi_server.models.google_cloud_discoveryengine_v1alpha_search_request_facet_spec import GoogleCloudDiscoveryengineV1alphaSearchRequestFacetSpec
from openapi_server.models.google_cloud_discoveryengine_v1alpha_search_request_image_query import GoogleCloudDiscoveryengineV1alphaSearchRequestImageQuery
from openapi_server.models.google_cloud_discoveryengine_v1alpha_search_request_query_expansion_spec import GoogleCloudDiscoveryengineV1alphaSearchRequestQueryExpansionSpec
from openapi_server.models.google_cloud_discoveryengine_v1alpha_search_request_spell_correction_spec import GoogleCloudDiscoveryengineV1alphaSearchRequestSpellCorrectionSpec
from openapi_server.models.google_cloud_discoveryengine_v1alpha_user_info import GoogleCloudDiscoveryengineV1alphaUserInfo
from openapi_server import util


class GoogleCloudDiscoveryengineV1alphaSearchRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, boost_spec: GoogleCloudDiscoveryengineV1alphaSearchRequestBoostSpec=None, branch: str=None, canonical_filter: str=None, content_search_spec: GoogleCloudDiscoveryengineV1alphaSearchRequestContentSearchSpec=None, custom_fine_tuning_spec: GoogleCloudDiscoveryengineV1alphaCustomFineTuningSpec=None, embedding_spec: GoogleCloudDiscoveryengineV1alphaSearchRequestEmbeddingSpec=None, facet_specs: List[GoogleCloudDiscoveryengineV1alphaSearchRequestFacetSpec]=None, filter: str=None, image_query: GoogleCloudDiscoveryengineV1alphaSearchRequestImageQuery=None, offset: int=None, order_by: str=None, page_size: int=None, page_token: str=None, params: Dict[str, object]=None, query: str=None, query_expansion_spec: GoogleCloudDiscoveryengineV1alphaSearchRequestQueryExpansionSpec=None, ranking_expression: str=None, safe_search: bool=None, serving_config: str=None, spell_correction_spec: GoogleCloudDiscoveryengineV1alphaSearchRequestSpellCorrectionSpec=None, user_info: GoogleCloudDiscoveryengineV1alphaUserInfo=None, user_labels: Dict[str, str]=None, user_pseudo_id: str=None):
        """GoogleCloudDiscoveryengineV1alphaSearchRequest - a model defined in OpenAPI

        :param boost_spec: The boost_spec of this GoogleCloudDiscoveryengineV1alphaSearchRequest.
        :param branch: The branch of this GoogleCloudDiscoveryengineV1alphaSearchRequest.
        :param canonical_filter: The canonical_filter of this GoogleCloudDiscoveryengineV1alphaSearchRequest.
        :param content_search_spec: The content_search_spec of this GoogleCloudDiscoveryengineV1alphaSearchRequest.
        :param custom_fine_tuning_spec: The custom_fine_tuning_spec of this GoogleCloudDiscoveryengineV1alphaSearchRequest.
        :param embedding_spec: The embedding_spec of this GoogleCloudDiscoveryengineV1alphaSearchRequest.
        :param facet_specs: The facet_specs of this GoogleCloudDiscoveryengineV1alphaSearchRequest.
        :param filter: The filter of this GoogleCloudDiscoveryengineV1alphaSearchRequest.
        :param image_query: The image_query of this GoogleCloudDiscoveryengineV1alphaSearchRequest.
        :param offset: The offset of this GoogleCloudDiscoveryengineV1alphaSearchRequest.
        :param order_by: The order_by of this GoogleCloudDiscoveryengineV1alphaSearchRequest.
        :param page_size: The page_size of this GoogleCloudDiscoveryengineV1alphaSearchRequest.
        :param page_token: The page_token of this GoogleCloudDiscoveryengineV1alphaSearchRequest.
        :param params: The params of this GoogleCloudDiscoveryengineV1alphaSearchRequest.
        :param query: The query of this GoogleCloudDiscoveryengineV1alphaSearchRequest.
        :param query_expansion_spec: The query_expansion_spec of this GoogleCloudDiscoveryengineV1alphaSearchRequest.
        :param ranking_expression: The ranking_expression of this GoogleCloudDiscoveryengineV1alphaSearchRequest.
        :param safe_search: The safe_search of this GoogleCloudDiscoveryengineV1alphaSearchRequest.
        :param serving_config: The serving_config of this GoogleCloudDiscoveryengineV1alphaSearchRequest.
        :param spell_correction_spec: The spell_correction_spec of this GoogleCloudDiscoveryengineV1alphaSearchRequest.
        :param user_info: The user_info of this GoogleCloudDiscoveryengineV1alphaSearchRequest.
        :param user_labels: The user_labels of this GoogleCloudDiscoveryengineV1alphaSearchRequest.
        :param user_pseudo_id: The user_pseudo_id of this GoogleCloudDiscoveryengineV1alphaSearchRequest.
        """
        self.openapi_types = {
            'boost_spec': GoogleCloudDiscoveryengineV1alphaSearchRequestBoostSpec,
            'branch': str,
            'canonical_filter': str,
            'content_search_spec': GoogleCloudDiscoveryengineV1alphaSearchRequestContentSearchSpec,
            'custom_fine_tuning_spec': GoogleCloudDiscoveryengineV1alphaCustomFineTuningSpec,
            'embedding_spec': GoogleCloudDiscoveryengineV1alphaSearchRequestEmbeddingSpec,
            'facet_specs': List[GoogleCloudDiscoveryengineV1alphaSearchRequestFacetSpec],
            'filter': str,
            'image_query': GoogleCloudDiscoveryengineV1alphaSearchRequestImageQuery,
            'offset': int,
            'order_by': str,
            'page_size': int,
            'page_token': str,
            'params': Dict[str, object],
            'query': str,
            'query_expansion_spec': GoogleCloudDiscoveryengineV1alphaSearchRequestQueryExpansionSpec,
            'ranking_expression': str,
            'safe_search': bool,
            'serving_config': str,
            'spell_correction_spec': GoogleCloudDiscoveryengineV1alphaSearchRequestSpellCorrectionSpec,
            'user_info': GoogleCloudDiscoveryengineV1alphaUserInfo,
            'user_labels': Dict[str, str],
            'user_pseudo_id': str
        }

        self.attribute_map = {
            'boost_spec': 'boostSpec',
            'branch': 'branch',
            'canonical_filter': 'canonicalFilter',
            'content_search_spec': 'contentSearchSpec',
            'custom_fine_tuning_spec': 'customFineTuningSpec',
            'embedding_spec': 'embeddingSpec',
            'facet_specs': 'facetSpecs',
            'filter': 'filter',
            'image_query': 'imageQuery',
            'offset': 'offset',
            'order_by': 'orderBy',
            'page_size': 'pageSize',
            'page_token': 'pageToken',
            'params': 'params',
            'query': 'query',
            'query_expansion_spec': 'queryExpansionSpec',
            'ranking_expression': 'rankingExpression',
            'safe_search': 'safeSearch',
            'serving_config': 'servingConfig',
            'spell_correction_spec': 'spellCorrectionSpec',
            'user_info': 'userInfo',
            'user_labels': 'userLabels',
            'user_pseudo_id': 'userPseudoId'
        }

        self._boost_spec = boost_spec
        self._branch = branch
        self._canonical_filter = canonical_filter
        self._content_search_spec = content_search_spec
        self._custom_fine_tuning_spec = custom_fine_tuning_spec
        self._embedding_spec = embedding_spec
        self._facet_specs = facet_specs
        self._filter = filter
        self._image_query = image_query
        self._offset = offset
        self._order_by = order_by
        self._page_size = page_size
        self._page_token = page_token
        self._params = params
        self._query = query
        self._query_expansion_spec = query_expansion_spec
        self._ranking_expression = ranking_expression
        self._safe_search = safe_search
        self._serving_config = serving_config
        self._spell_correction_spec = spell_correction_spec
        self._user_info = user_info
        self._user_labels = user_labels
        self._user_pseudo_id = user_pseudo_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudDiscoveryengineV1alphaSearchRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudDiscoveryengineV1alphaSearchRequest of this GoogleCloudDiscoveryengineV1alphaSearchRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def boost_spec(self):
        """Gets the boost_spec of this GoogleCloudDiscoveryengineV1alphaSearchRequest.


        :return: The boost_spec of this GoogleCloudDiscoveryengineV1alphaSearchRequest.
        :rtype: GoogleCloudDiscoveryengineV1alphaSearchRequestBoostSpec
        """
        return self._boost_spec

    @boost_spec.setter
    def boost_spec(self, boost_spec):
        """Sets the boost_spec of this GoogleCloudDiscoveryengineV1alphaSearchRequest.


        :param boost_spec: The boost_spec of this GoogleCloudDiscoveryengineV1alphaSearchRequest.
        :type boost_spec: GoogleCloudDiscoveryengineV1alphaSearchRequestBoostSpec
        """

        self._boost_spec = boost_spec

    @property
    def branch(self):
        """Gets the branch of this GoogleCloudDiscoveryengineV1alphaSearchRequest.

        The branch resource name, such as `projects/*/locations/global/collections/default_collection/dataStores/default_data_store/branches/0`. Use `default_branch` as the branch ID or leave this field empty, to search documents under the default branch.

        :return: The branch of this GoogleCloudDiscoveryengineV1alphaSearchRequest.
        :rtype: str
        """
        return self._branch

    @branch.setter
    def branch(self, branch):
        """Sets the branch of this GoogleCloudDiscoveryengineV1alphaSearchRequest.

        The branch resource name, such as `projects/*/locations/global/collections/default_collection/dataStores/default_data_store/branches/0`. Use `default_branch` as the branch ID or leave this field empty, to search documents under the default branch.

        :param branch: The branch of this GoogleCloudDiscoveryengineV1alphaSearchRequest.
        :type branch: str
        """

        self._branch = branch

    @property
    def canonical_filter(self):
        """Gets the canonical_filter of this GoogleCloudDiscoveryengineV1alphaSearchRequest.

        The default filter that is applied when a user performs a search without checking any filters on the search page. The filter applied to every search request when quality improvement such as query expansion is needed. In the case a query does not have a sufficient amount of results this filter will be used to determine whether or not to enable the query expansion flow. The original filter will still be used for the query expanded search. This field is strongly recommended to achieve high search quality. For more information about filter syntax, see SearchRequest.filter.

        :return: The canonical_filter of this GoogleCloudDiscoveryengineV1alphaSearchRequest.
        :rtype: str
        """
        return self._canonical_filter

    @canonical_filter.setter
    def canonical_filter(self, canonical_filter):
        """Sets the canonical_filter of this GoogleCloudDiscoveryengineV1alphaSearchRequest.

        The default filter that is applied when a user performs a search without checking any filters on the search page. The filter applied to every search request when quality improvement such as query expansion is needed. In the case a query does not have a sufficient amount of results this filter will be used to determine whether or not to enable the query expansion flow. The original filter will still be used for the query expanded search. This field is strongly recommended to achieve high search quality. For more information about filter syntax, see SearchRequest.filter.

        :param canonical_filter: The canonical_filter of this GoogleCloudDiscoveryengineV1alphaSearchRequest.
        :type canonical_filter: str
        """

        self._canonical_filter = canonical_filter

    @property
    def content_search_spec(self):
        """Gets the content_search_spec of this GoogleCloudDiscoveryengineV1alphaSearchRequest.


        :return: The content_search_spec of this GoogleCloudDiscoveryengineV1alphaSearchRequest.
        :rtype: GoogleCloudDiscoveryengineV1alphaSearchRequestContentSearchSpec
        """
        return self._content_search_spec

    @content_search_spec.setter
    def content_search_spec(self, content_search_spec):
        """Sets the content_search_spec of this GoogleCloudDiscoveryengineV1alphaSearchRequest.


        :param content_search_spec: The content_search_spec of this GoogleCloudDiscoveryengineV1alphaSearchRequest.
        :type content_search_spec: GoogleCloudDiscoveryengineV1alphaSearchRequestContentSearchSpec
        """

        self._content_search_spec = content_search_spec

    @property
    def custom_fine_tuning_spec(self):
        """Gets the custom_fine_tuning_spec of this GoogleCloudDiscoveryengineV1alphaSearchRequest.


        :return: The custom_fine_tuning_spec of this GoogleCloudDiscoveryengineV1alphaSearchRequest.
        :rtype: GoogleCloudDiscoveryengineV1alphaCustomFineTuningSpec
        """
        return self._custom_fine_tuning_spec

    @custom_fine_tuning_spec.setter
    def custom_fine_tuning_spec(self, custom_fine_tuning_spec):
        """Sets the custom_fine_tuning_spec of this GoogleCloudDiscoveryengineV1alphaSearchRequest.


        :param custom_fine_tuning_spec: The custom_fine_tuning_spec of this GoogleCloudDiscoveryengineV1alphaSearchRequest.
        :type custom_fine_tuning_spec: GoogleCloudDiscoveryengineV1alphaCustomFineTuningSpec
        """

        self._custom_fine_tuning_spec = custom_fine_tuning_spec

    @property
    def embedding_spec(self):
        """Gets the embedding_spec of this GoogleCloudDiscoveryengineV1alphaSearchRequest.


        :return: The embedding_spec of this GoogleCloudDiscoveryengineV1alphaSearchRequest.
        :rtype: GoogleCloudDiscoveryengineV1alphaSearchRequestEmbeddingSpec
        """
        return self._embedding_spec

    @embedding_spec.setter
    def embedding_spec(self, embedding_spec):
        """Sets the embedding_spec of this GoogleCloudDiscoveryengineV1alphaSearchRequest.


        :param embedding_spec: The embedding_spec of this GoogleCloudDiscoveryengineV1alphaSearchRequest.
        :type embedding_spec: GoogleCloudDiscoveryengineV1alphaSearchRequestEmbeddingSpec
        """

        self._embedding_spec = embedding_spec

    @property
    def facet_specs(self):
        """Gets the facet_specs of this GoogleCloudDiscoveryengineV1alphaSearchRequest.

        Facet specifications for faceted search. If empty, no facets are returned. A maximum of 100 values are allowed. Otherwise, an `INVALID_ARGUMENT` error is returned.

        :return: The facet_specs of this GoogleCloudDiscoveryengineV1alphaSearchRequest.
        :rtype: List[GoogleCloudDiscoveryengineV1alphaSearchRequestFacetSpec]
        """
        return self._facet_specs

    @facet_specs.setter
    def facet_specs(self, facet_specs):
        """Sets the facet_specs of this GoogleCloudDiscoveryengineV1alphaSearchRequest.

        Facet specifications for faceted search. If empty, no facets are returned. A maximum of 100 values are allowed. Otherwise, an `INVALID_ARGUMENT` error is returned.

        :param facet_specs: The facet_specs of this GoogleCloudDiscoveryengineV1alphaSearchRequest.
        :type facet_specs: List[GoogleCloudDiscoveryengineV1alphaSearchRequestFacetSpec]
        """

        self._facet_specs = facet_specs

    @property
    def filter(self):
        """Gets the filter of this GoogleCloudDiscoveryengineV1alphaSearchRequest.

        The filter syntax consists of an expression language for constructing a predicate from one or more fields of the documents being filtered. Filter expression is case-sensitive. If this field is unrecognizable, an `INVALID_ARGUMENT` is returned. Filtering in Vertex AI Search is done by mapping the LHS filter key to a key property defined in the Vertex AI Search backend -- this mapping is defined by the customer in their schema. For example a media customer might have a field 'name' in their schema. In this case the filter would look like this: filter --> name:'ANY(\"king kong\")' For more information about filtering including syntax and filter operators, see [Filter](https://cloud.google.com/generative-ai-app-builder/docs/filter-search-metadata)

        :return: The filter of this GoogleCloudDiscoveryengineV1alphaSearchRequest.
        :rtype: str
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this GoogleCloudDiscoveryengineV1alphaSearchRequest.

        The filter syntax consists of an expression language for constructing a predicate from one or more fields of the documents being filtered. Filter expression is case-sensitive. If this field is unrecognizable, an `INVALID_ARGUMENT` is returned. Filtering in Vertex AI Search is done by mapping the LHS filter key to a key property defined in the Vertex AI Search backend -- this mapping is defined by the customer in their schema. For example a media customer might have a field 'name' in their schema. In this case the filter would look like this: filter --> name:'ANY(\"king kong\")' For more information about filtering including syntax and filter operators, see [Filter](https://cloud.google.com/generative-ai-app-builder/docs/filter-search-metadata)

        :param filter: The filter of this GoogleCloudDiscoveryengineV1alphaSearchRequest.
        :type filter: str
        """

        self._filter = filter

    @property
    def image_query(self):
        """Gets the image_query of this GoogleCloudDiscoveryengineV1alphaSearchRequest.


        :return: The image_query of this GoogleCloudDiscoveryengineV1alphaSearchRequest.
        :rtype: GoogleCloudDiscoveryengineV1alphaSearchRequestImageQuery
        """
        return self._image_query

    @image_query.setter
    def image_query(self, image_query):
        """Sets the image_query of this GoogleCloudDiscoveryengineV1alphaSearchRequest.


        :param image_query: The image_query of this GoogleCloudDiscoveryengineV1alphaSearchRequest.
        :type image_query: GoogleCloudDiscoveryengineV1alphaSearchRequestImageQuery
        """

        self._image_query = image_query

    @property
    def offset(self):
        """Gets the offset of this GoogleCloudDiscoveryengineV1alphaSearchRequest.

        A 0-indexed integer that specifies the current offset (that is, starting result location, amongst the Documents deemed by the API as relevant) in search results. This field is only considered if page_token is unset. If this field is negative, an `INVALID_ARGUMENT` is returned.

        :return: The offset of this GoogleCloudDiscoveryengineV1alphaSearchRequest.
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this GoogleCloudDiscoveryengineV1alphaSearchRequest.

        A 0-indexed integer that specifies the current offset (that is, starting result location, amongst the Documents deemed by the API as relevant) in search results. This field is only considered if page_token is unset. If this field is negative, an `INVALID_ARGUMENT` is returned.

        :param offset: The offset of this GoogleCloudDiscoveryengineV1alphaSearchRequest.
        :type offset: int
        """

        self._offset = offset

    @property
    def order_by(self):
        """Gets the order_by of this GoogleCloudDiscoveryengineV1alphaSearchRequest.

        The order in which documents are returned. Documents can be ordered by a field in an Document object. Leave it unset if ordered by relevance. `order_by` expression is case-sensitive. For more information on ordering, see [Ordering](https://cloud.google.com/retail/docs/filter-and-order#order) If this field is unrecognizable, an `INVALID_ARGUMENT` is returned.

        :return: The order_by of this GoogleCloudDiscoveryengineV1alphaSearchRequest.
        :rtype: str
        """
        return self._order_by

    @order_by.setter
    def order_by(self, order_by):
        """Sets the order_by of this GoogleCloudDiscoveryengineV1alphaSearchRequest.

        The order in which documents are returned. Documents can be ordered by a field in an Document object. Leave it unset if ordered by relevance. `order_by` expression is case-sensitive. For more information on ordering, see [Ordering](https://cloud.google.com/retail/docs/filter-and-order#order) If this field is unrecognizable, an `INVALID_ARGUMENT` is returned.

        :param order_by: The order_by of this GoogleCloudDiscoveryengineV1alphaSearchRequest.
        :type order_by: str
        """

        self._order_by = order_by

    @property
    def page_size(self):
        """Gets the page_size of this GoogleCloudDiscoveryengineV1alphaSearchRequest.

        Maximum number of Documents to return. If unspecified, defaults to a reasonable value. The maximum allowed value is 100. Values above 100 are coerced to 100. If this field is negative, an `INVALID_ARGUMENT` is returned.

        :return: The page_size of this GoogleCloudDiscoveryengineV1alphaSearchRequest.
        :rtype: int
        """
        return self._page_size

    @page_size.setter
    def page_size(self, page_size):
        """Sets the page_size of this GoogleCloudDiscoveryengineV1alphaSearchRequest.

        Maximum number of Documents to return. If unspecified, defaults to a reasonable value. The maximum allowed value is 100. Values above 100 are coerced to 100. If this field is negative, an `INVALID_ARGUMENT` is returned.

        :param page_size: The page_size of this GoogleCloudDiscoveryengineV1alphaSearchRequest.
        :type page_size: int
        """

        self._page_size = page_size

    @property
    def page_token(self):
        """Gets the page_token of this GoogleCloudDiscoveryengineV1alphaSearchRequest.

        A page token received from a previous SearchService.Search call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to SearchService.Search must match the call that provided the page token. Otherwise, an `INVALID_ARGUMENT` error is returned.

        :return: The page_token of this GoogleCloudDiscoveryengineV1alphaSearchRequest.
        :rtype: str
        """
        return self._page_token

    @page_token.setter
    def page_token(self, page_token):
        """Sets the page_token of this GoogleCloudDiscoveryengineV1alphaSearchRequest.

        A page token received from a previous SearchService.Search call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to SearchService.Search must match the call that provided the page token. Otherwise, an `INVALID_ARGUMENT` error is returned.

        :param page_token: The page_token of this GoogleCloudDiscoveryengineV1alphaSearchRequest.
        :type page_token: str
        """

        self._page_token = page_token

    @property
    def params(self):
        """Gets the params of this GoogleCloudDiscoveryengineV1alphaSearchRequest.

        Additional search parameters. For public website search only, supported values are: * `user_country_code`: string. Default empty. If set to non-empty, results are restricted or boosted based on the location provided. Example: user_country_code: \"au\" For available codes see [Country Codes](https://developers.google.com/custom-search/docs/json_api_reference#countryCodes) * `search_type`: double. Default empty. Enables non-webpage searching depending on the value. The only valid non-default value is 1, which enables image searching. Example: search_type: 1

        :return: The params of this GoogleCloudDiscoveryengineV1alphaSearchRequest.
        :rtype: Dict[str, object]
        """
        return self._params

    @params.setter
    def params(self, params):
        """Sets the params of this GoogleCloudDiscoveryengineV1alphaSearchRequest.

        Additional search parameters. For public website search only, supported values are: * `user_country_code`: string. Default empty. If set to non-empty, results are restricted or boosted based on the location provided. Example: user_country_code: \"au\" For available codes see [Country Codes](https://developers.google.com/custom-search/docs/json_api_reference#countryCodes) * `search_type`: double. Default empty. Enables non-webpage searching depending on the value. The only valid non-default value is 1, which enables image searching. Example: search_type: 1

        :param params: The params of this GoogleCloudDiscoveryengineV1alphaSearchRequest.
        :type params: Dict[str, object]
        """

        self._params = params

    @property
    def query(self):
        """Gets the query of this GoogleCloudDiscoveryengineV1alphaSearchRequest.

        Raw search query.

        :return: The query of this GoogleCloudDiscoveryengineV1alphaSearchRequest.
        :rtype: str
        """
        return self._query

    @query.setter
    def query(self, query):
        """Sets the query of this GoogleCloudDiscoveryengineV1alphaSearchRequest.

        Raw search query.

        :param query: The query of this GoogleCloudDiscoveryengineV1alphaSearchRequest.
        :type query: str
        """

        self._query = query

    @property
    def query_expansion_spec(self):
        """Gets the query_expansion_spec of this GoogleCloudDiscoveryengineV1alphaSearchRequest.


        :return: The query_expansion_spec of this GoogleCloudDiscoveryengineV1alphaSearchRequest.
        :rtype: GoogleCloudDiscoveryengineV1alphaSearchRequestQueryExpansionSpec
        """
        return self._query_expansion_spec

    @query_expansion_spec.setter
    def query_expansion_spec(self, query_expansion_spec):
        """Sets the query_expansion_spec of this GoogleCloudDiscoveryengineV1alphaSearchRequest.


        :param query_expansion_spec: The query_expansion_spec of this GoogleCloudDiscoveryengineV1alphaSearchRequest.
        :type query_expansion_spec: GoogleCloudDiscoveryengineV1alphaSearchRequestQueryExpansionSpec
        """

        self._query_expansion_spec = query_expansion_spec

    @property
    def ranking_expression(self):
        """Gets the ranking_expression of this GoogleCloudDiscoveryengineV1alphaSearchRequest.

        The ranking expression controls the customized ranking on retrieval documents. This overrides ServingConfig.ranking_expression. The ranking expression is a single function or multiple functions that are joint by \"+\". * ranking_expression = function, { \" + \", function }; Supported functions: * double * relevance_score * double * dotProduct(embedding_field_path) Function variables: `relevance_score`: pre-defined keywords, used for measure relevance between query and document. `embedding_field_path`: the document embedding field used with query embedding vector. `dotProduct`: embedding function between embedding_field_path and query embedding vector. Example ranking expression: If document has an embedding field doc_embedding, the ranking expression could be `0.5 * relevance_score + 0.3 * dotProduct(doc_embedding)`.

        :return: The ranking_expression of this GoogleCloudDiscoveryengineV1alphaSearchRequest.
        :rtype: str
        """
        return self._ranking_expression

    @ranking_expression.setter
    def ranking_expression(self, ranking_expression):
        """Sets the ranking_expression of this GoogleCloudDiscoveryengineV1alphaSearchRequest.

        The ranking expression controls the customized ranking on retrieval documents. This overrides ServingConfig.ranking_expression. The ranking expression is a single function or multiple functions that are joint by \"+\". * ranking_expression = function, { \" + \", function }; Supported functions: * double * relevance_score * double * dotProduct(embedding_field_path) Function variables: `relevance_score`: pre-defined keywords, used for measure relevance between query and document. `embedding_field_path`: the document embedding field used with query embedding vector. `dotProduct`: embedding function between embedding_field_path and query embedding vector. Example ranking expression: If document has an embedding field doc_embedding, the ranking expression could be `0.5 * relevance_score + 0.3 * dotProduct(doc_embedding)`.

        :param ranking_expression: The ranking_expression of this GoogleCloudDiscoveryengineV1alphaSearchRequest.
        :type ranking_expression: str
        """

        self._ranking_expression = ranking_expression

    @property
    def safe_search(self):
        """Gets the safe_search of this GoogleCloudDiscoveryengineV1alphaSearchRequest.

        Whether to turn on safe search. This is only supported for website search.

        :return: The safe_search of this GoogleCloudDiscoveryengineV1alphaSearchRequest.
        :rtype: bool
        """
        return self._safe_search

    @safe_search.setter
    def safe_search(self, safe_search):
        """Sets the safe_search of this GoogleCloudDiscoveryengineV1alphaSearchRequest.

        Whether to turn on safe search. This is only supported for website search.

        :param safe_search: The safe_search of this GoogleCloudDiscoveryengineV1alphaSearchRequest.
        :type safe_search: bool
        """

        self._safe_search = safe_search

    @property
    def serving_config(self):
        """Gets the serving_config of this GoogleCloudDiscoveryengineV1alphaSearchRequest.

        Required. The resource name of the Search serving config, such as `projects/*/locations/global/collections/default_collection/engines/*/servingConfigs/default_serving_config`, or `projects/*/locations/global/collections/default_collection/dataStores/default_data_store/servingConfigs/default_serving_config`. This field is used to identify the serving configuration name, set of models used to make the search.

        :return: The serving_config of this GoogleCloudDiscoveryengineV1alphaSearchRequest.
        :rtype: str
        """
        return self._serving_config

    @serving_config.setter
    def serving_config(self, serving_config):
        """Sets the serving_config of this GoogleCloudDiscoveryengineV1alphaSearchRequest.

        Required. The resource name of the Search serving config, such as `projects/*/locations/global/collections/default_collection/engines/*/servingConfigs/default_serving_config`, or `projects/*/locations/global/collections/default_collection/dataStores/default_data_store/servingConfigs/default_serving_config`. This field is used to identify the serving configuration name, set of models used to make the search.

        :param serving_config: The serving_config of this GoogleCloudDiscoveryengineV1alphaSearchRequest.
        :type serving_config: str
        """

        self._serving_config = serving_config

    @property
    def spell_correction_spec(self):
        """Gets the spell_correction_spec of this GoogleCloudDiscoveryengineV1alphaSearchRequest.


        :return: The spell_correction_spec of this GoogleCloudDiscoveryengineV1alphaSearchRequest.
        :rtype: GoogleCloudDiscoveryengineV1alphaSearchRequestSpellCorrectionSpec
        """
        return self._spell_correction_spec

    @spell_correction_spec.setter
    def spell_correction_spec(self, spell_correction_spec):
        """Sets the spell_correction_spec of this GoogleCloudDiscoveryengineV1alphaSearchRequest.


        :param spell_correction_spec: The spell_correction_spec of this GoogleCloudDiscoveryengineV1alphaSearchRequest.
        :type spell_correction_spec: GoogleCloudDiscoveryengineV1alphaSearchRequestSpellCorrectionSpec
        """

        self._spell_correction_spec = spell_correction_spec

    @property
    def user_info(self):
        """Gets the user_info of this GoogleCloudDiscoveryengineV1alphaSearchRequest.


        :return: The user_info of this GoogleCloudDiscoveryengineV1alphaSearchRequest.
        :rtype: GoogleCloudDiscoveryengineV1alphaUserInfo
        """
        return self._user_info

    @user_info.setter
    def user_info(self, user_info):
        """Sets the user_info of this GoogleCloudDiscoveryengineV1alphaSearchRequest.


        :param user_info: The user_info of this GoogleCloudDiscoveryengineV1alphaSearchRequest.
        :type user_info: GoogleCloudDiscoveryengineV1alphaUserInfo
        """

        self._user_info = user_info

    @property
    def user_labels(self):
        """Gets the user_labels of this GoogleCloudDiscoveryengineV1alphaSearchRequest.

        The user labels applied to a resource must meet the following requirements: * Each resource can have multiple labels, up to a maximum of 64. * Each label must be a key-value pair. * Keys have a minimum length of 1 character and a maximum length of 63 characters and cannot be empty. Values can be empty and have a maximum length of 63 characters. * Keys and values can contain only lowercase letters, numeric characters, underscores, and dashes. All characters must use UTF-8 encoding, and international characters are allowed. * The key portion of a label must be unique. However, you can use the same key with multiple resources. * Keys must start with a lowercase letter or international character. See [Google Cloud Document](https://cloud.google.com/resource-manager/docs/creating-managing-labels#requirements) for more details.

        :return: The user_labels of this GoogleCloudDiscoveryengineV1alphaSearchRequest.
        :rtype: Dict[str, str]
        """
        return self._user_labels

    @user_labels.setter
    def user_labels(self, user_labels):
        """Sets the user_labels of this GoogleCloudDiscoveryengineV1alphaSearchRequest.

        The user labels applied to a resource must meet the following requirements: * Each resource can have multiple labels, up to a maximum of 64. * Each label must be a key-value pair. * Keys have a minimum length of 1 character and a maximum length of 63 characters and cannot be empty. Values can be empty and have a maximum length of 63 characters. * Keys and values can contain only lowercase letters, numeric characters, underscores, and dashes. All characters must use UTF-8 encoding, and international characters are allowed. * The key portion of a label must be unique. However, you can use the same key with multiple resources. * Keys must start with a lowercase letter or international character. See [Google Cloud Document](https://cloud.google.com/resource-manager/docs/creating-managing-labels#requirements) for more details.

        :param user_labels: The user_labels of this GoogleCloudDiscoveryengineV1alphaSearchRequest.
        :type user_labels: Dict[str, str]
        """

        self._user_labels = user_labels

    @property
    def user_pseudo_id(self):
        """Gets the user_pseudo_id of this GoogleCloudDiscoveryengineV1alphaSearchRequest.

        A unique identifier for tracking visitors. For example, this could be implemented with an HTTP cookie, which should be able to uniquely identify a visitor on a single device. This unique identifier should not change if the visitor logs in or out of the website. This field should NOT have a fixed value such as `unknown_visitor`. This should be the same identifier as UserEvent.user_pseudo_id and CompleteQueryRequest.user_pseudo_id The field must be a UTF-8 encoded string with a length limit of 128 characters. Otherwise, an `INVALID_ARGUMENT` error is returned.

        :return: The user_pseudo_id of this GoogleCloudDiscoveryengineV1alphaSearchRequest.
        :rtype: str
        """
        return self._user_pseudo_id

    @user_pseudo_id.setter
    def user_pseudo_id(self, user_pseudo_id):
        """Sets the user_pseudo_id of this GoogleCloudDiscoveryengineV1alphaSearchRequest.

        A unique identifier for tracking visitors. For example, this could be implemented with an HTTP cookie, which should be able to uniquely identify a visitor on a single device. This unique identifier should not change if the visitor logs in or out of the website. This field should NOT have a fixed value such as `unknown_visitor`. This should be the same identifier as UserEvent.user_pseudo_id and CompleteQueryRequest.user_pseudo_id The field must be a UTF-8 encoded string with a length limit of 128 characters. Otherwise, an `INVALID_ARGUMENT` error is returned.

        :param user_pseudo_id: The user_pseudo_id of this GoogleCloudDiscoveryengineV1alphaSearchRequest.
        :type user_pseudo_id: str
        """

        self._user_pseudo_id = user_pseudo_id
