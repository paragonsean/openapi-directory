# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_discoveryengine_v1alpha_search_request_content_search_spec import GoogleCloudDiscoveryengineV1alphaSearchRequestContentSearchSpec
from openapi_server.models.google_cloud_discoveryengine_v1alpha_widget_config_facet_field import GoogleCloudDiscoveryengineV1alphaWidgetConfigFacetField
from openapi_server.models.google_cloud_discoveryengine_v1alpha_widget_config_ui_component_field import GoogleCloudDiscoveryengineV1alphaWidgetConfigUIComponentField
from openapi_server import util


class GoogleCloudDiscoveryengineV1alphaWidgetConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allow_public_access: bool=None, allowlisted_domains: List[str]=None, config_id: str=None, content_search_spec: GoogleCloudDiscoveryengineV1alphaSearchRequestContentSearchSpec=None, create_time: str=None, data_store_type: str=None, display_name: str=None, enable_autocomplete: bool=None, enable_conversational_search: bool=None, enable_quality_feedback: bool=None, enable_result_score: bool=None, enable_safe_search: bool=None, enable_snippet_result_summary: bool=None, enable_summarization: bool=None, enable_web_app: bool=None, facet_field: List[GoogleCloudDiscoveryengineV1alphaWidgetConfigFacetField]=None, fields_ui_components_map: Dict[str, GoogleCloudDiscoveryengineV1alphaWidgetConfigUIComponentField]=None, industry_vertical: str=None, llm_enabled: bool=None, minimum_data_term_accepted: bool=None, name: str=None, result_display_type: str=None, solution_type: str=None, update_time: str=None):
        """GoogleCloudDiscoveryengineV1alphaWidgetConfig - a model defined in OpenAPI

        :param allow_public_access: The allow_public_access of this GoogleCloudDiscoveryengineV1alphaWidgetConfig.
        :param allowlisted_domains: The allowlisted_domains of this GoogleCloudDiscoveryengineV1alphaWidgetConfig.
        :param config_id: The config_id of this GoogleCloudDiscoveryengineV1alphaWidgetConfig.
        :param content_search_spec: The content_search_spec of this GoogleCloudDiscoveryengineV1alphaWidgetConfig.
        :param create_time: The create_time of this GoogleCloudDiscoveryengineV1alphaWidgetConfig.
        :param data_store_type: The data_store_type of this GoogleCloudDiscoveryengineV1alphaWidgetConfig.
        :param display_name: The display_name of this GoogleCloudDiscoveryengineV1alphaWidgetConfig.
        :param enable_autocomplete: The enable_autocomplete of this GoogleCloudDiscoveryengineV1alphaWidgetConfig.
        :param enable_conversational_search: The enable_conversational_search of this GoogleCloudDiscoveryengineV1alphaWidgetConfig.
        :param enable_quality_feedback: The enable_quality_feedback of this GoogleCloudDiscoveryengineV1alphaWidgetConfig.
        :param enable_result_score: The enable_result_score of this GoogleCloudDiscoveryengineV1alphaWidgetConfig.
        :param enable_safe_search: The enable_safe_search of this GoogleCloudDiscoveryengineV1alphaWidgetConfig.
        :param enable_snippet_result_summary: The enable_snippet_result_summary of this GoogleCloudDiscoveryengineV1alphaWidgetConfig.
        :param enable_summarization: The enable_summarization of this GoogleCloudDiscoveryengineV1alphaWidgetConfig.
        :param enable_web_app: The enable_web_app of this GoogleCloudDiscoveryengineV1alphaWidgetConfig.
        :param facet_field: The facet_field of this GoogleCloudDiscoveryengineV1alphaWidgetConfig.
        :param fields_ui_components_map: The fields_ui_components_map of this GoogleCloudDiscoveryengineV1alphaWidgetConfig.
        :param industry_vertical: The industry_vertical of this GoogleCloudDiscoveryengineV1alphaWidgetConfig.
        :param llm_enabled: The llm_enabled of this GoogleCloudDiscoveryengineV1alphaWidgetConfig.
        :param minimum_data_term_accepted: The minimum_data_term_accepted of this GoogleCloudDiscoveryengineV1alphaWidgetConfig.
        :param name: The name of this GoogleCloudDiscoveryengineV1alphaWidgetConfig.
        :param result_display_type: The result_display_type of this GoogleCloudDiscoveryengineV1alphaWidgetConfig.
        :param solution_type: The solution_type of this GoogleCloudDiscoveryengineV1alphaWidgetConfig.
        :param update_time: The update_time of this GoogleCloudDiscoveryengineV1alphaWidgetConfig.
        """
        self.openapi_types = {
            'allow_public_access': bool,
            'allowlisted_domains': List[str],
            'config_id': str,
            'content_search_spec': GoogleCloudDiscoveryengineV1alphaSearchRequestContentSearchSpec,
            'create_time': str,
            'data_store_type': str,
            'display_name': str,
            'enable_autocomplete': bool,
            'enable_conversational_search': bool,
            'enable_quality_feedback': bool,
            'enable_result_score': bool,
            'enable_safe_search': bool,
            'enable_snippet_result_summary': bool,
            'enable_summarization': bool,
            'enable_web_app': bool,
            'facet_field': List[GoogleCloudDiscoveryengineV1alphaWidgetConfigFacetField],
            'fields_ui_components_map': Dict[str, GoogleCloudDiscoveryengineV1alphaWidgetConfigUIComponentField],
            'industry_vertical': str,
            'llm_enabled': bool,
            'minimum_data_term_accepted': bool,
            'name': str,
            'result_display_type': str,
            'solution_type': str,
            'update_time': str
        }

        self.attribute_map = {
            'allow_public_access': 'allowPublicAccess',
            'allowlisted_domains': 'allowlistedDomains',
            'config_id': 'configId',
            'content_search_spec': 'contentSearchSpec',
            'create_time': 'createTime',
            'data_store_type': 'dataStoreType',
            'display_name': 'displayName',
            'enable_autocomplete': 'enableAutocomplete',
            'enable_conversational_search': 'enableConversationalSearch',
            'enable_quality_feedback': 'enableQualityFeedback',
            'enable_result_score': 'enableResultScore',
            'enable_safe_search': 'enableSafeSearch',
            'enable_snippet_result_summary': 'enableSnippetResultSummary',
            'enable_summarization': 'enableSummarization',
            'enable_web_app': 'enableWebApp',
            'facet_field': 'facetField',
            'fields_ui_components_map': 'fieldsUiComponentsMap',
            'industry_vertical': 'industryVertical',
            'llm_enabled': 'llmEnabled',
            'minimum_data_term_accepted': 'minimumDataTermAccepted',
            'name': 'name',
            'result_display_type': 'resultDisplayType',
            'solution_type': 'solutionType',
            'update_time': 'updateTime'
        }

        self._allow_public_access = allow_public_access
        self._allowlisted_domains = allowlisted_domains
        self._config_id = config_id
        self._content_search_spec = content_search_spec
        self._create_time = create_time
        self._data_store_type = data_store_type
        self._display_name = display_name
        self._enable_autocomplete = enable_autocomplete
        self._enable_conversational_search = enable_conversational_search
        self._enable_quality_feedback = enable_quality_feedback
        self._enable_result_score = enable_result_score
        self._enable_safe_search = enable_safe_search
        self._enable_snippet_result_summary = enable_snippet_result_summary
        self._enable_summarization = enable_summarization
        self._enable_web_app = enable_web_app
        self._facet_field = facet_field
        self._fields_ui_components_map = fields_ui_components_map
        self._industry_vertical = industry_vertical
        self._llm_enabled = llm_enabled
        self._minimum_data_term_accepted = minimum_data_term_accepted
        self._name = name
        self._result_display_type = result_display_type
        self._solution_type = solution_type
        self._update_time = update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudDiscoveryengineV1alphaWidgetConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudDiscoveryengineV1alphaWidgetConfig of this GoogleCloudDiscoveryengineV1alphaWidgetConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allow_public_access(self):
        """Gets the allow_public_access of this GoogleCloudDiscoveryengineV1alphaWidgetConfig.

        Whether allow no-auth integration with widget. If set true, public access to search or other solutions from widget is allowed without authenication token provided by customer hosted backend server.

        :return: The allow_public_access of this GoogleCloudDiscoveryengineV1alphaWidgetConfig.
        :rtype: bool
        """
        return self._allow_public_access

    @allow_public_access.setter
    def allow_public_access(self, allow_public_access):
        """Sets the allow_public_access of this GoogleCloudDiscoveryengineV1alphaWidgetConfig.

        Whether allow no-auth integration with widget. If set true, public access to search or other solutions from widget is allowed without authenication token provided by customer hosted backend server.

        :param allow_public_access: The allow_public_access of this GoogleCloudDiscoveryengineV1alphaWidgetConfig.
        :type allow_public_access: bool
        """

        self._allow_public_access = allow_public_access

    @property
    def allowlisted_domains(self):
        """Gets the allowlisted_domains of this GoogleCloudDiscoveryengineV1alphaWidgetConfig.

        Allowlisted domains that can load this widget.

        :return: The allowlisted_domains of this GoogleCloudDiscoveryengineV1alphaWidgetConfig.
        :rtype: List[str]
        """
        return self._allowlisted_domains

    @allowlisted_domains.setter
    def allowlisted_domains(self, allowlisted_domains):
        """Sets the allowlisted_domains of this GoogleCloudDiscoveryengineV1alphaWidgetConfig.

        Allowlisted domains that can load this widget.

        :param allowlisted_domains: The allowlisted_domains of this GoogleCloudDiscoveryengineV1alphaWidgetConfig.
        :type allowlisted_domains: List[str]
        """

        self._allowlisted_domains = allowlisted_domains

    @property
    def config_id(self):
        """Gets the config_id of this GoogleCloudDiscoveryengineV1alphaWidgetConfig.

        Output only. Unique obfuscated identifier of a WidgetConfig.

        :return: The config_id of this GoogleCloudDiscoveryengineV1alphaWidgetConfig.
        :rtype: str
        """
        return self._config_id

    @config_id.setter
    def config_id(self, config_id):
        """Sets the config_id of this GoogleCloudDiscoveryengineV1alphaWidgetConfig.

        Output only. Unique obfuscated identifier of a WidgetConfig.

        :param config_id: The config_id of this GoogleCloudDiscoveryengineV1alphaWidgetConfig.
        :type config_id: str
        """

        self._config_id = config_id

    @property
    def content_search_spec(self):
        """Gets the content_search_spec of this GoogleCloudDiscoveryengineV1alphaWidgetConfig.


        :return: The content_search_spec of this GoogleCloudDiscoveryengineV1alphaWidgetConfig.
        :rtype: GoogleCloudDiscoveryengineV1alphaSearchRequestContentSearchSpec
        """
        return self._content_search_spec

    @content_search_spec.setter
    def content_search_spec(self, content_search_spec):
        """Sets the content_search_spec of this GoogleCloudDiscoveryengineV1alphaWidgetConfig.


        :param content_search_spec: The content_search_spec of this GoogleCloudDiscoveryengineV1alphaWidgetConfig.
        :type content_search_spec: GoogleCloudDiscoveryengineV1alphaSearchRequestContentSearchSpec
        """

        self._content_search_spec = content_search_spec

    @property
    def create_time(self):
        """Gets the create_time of this GoogleCloudDiscoveryengineV1alphaWidgetConfig.

        Output only. Timestamp the WidgetConfig was created.

        :return: The create_time of this GoogleCloudDiscoveryengineV1alphaWidgetConfig.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this GoogleCloudDiscoveryengineV1alphaWidgetConfig.

        Output only. Timestamp the WidgetConfig was created.

        :param create_time: The create_time of this GoogleCloudDiscoveryengineV1alphaWidgetConfig.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def data_store_type(self):
        """Gets the data_store_type of this GoogleCloudDiscoveryengineV1alphaWidgetConfig.

        Output only. The type of the parent data store.

        :return: The data_store_type of this GoogleCloudDiscoveryengineV1alphaWidgetConfig.
        :rtype: str
        """
        return self._data_store_type

    @data_store_type.setter
    def data_store_type(self, data_store_type):
        """Sets the data_store_type of this GoogleCloudDiscoveryengineV1alphaWidgetConfig.

        Output only. The type of the parent data store.

        :param data_store_type: The data_store_type of this GoogleCloudDiscoveryengineV1alphaWidgetConfig.
        :type data_store_type: str
        """
        allowed_values = ["DATA_STORE_TYPE_UNSPECIFIED", "SITE_SEARCH", "STRUCTURED", "UNSTRUCTURED", "BLENDED"]  # noqa: E501
        if data_store_type not in allowed_values:
            raise ValueError(
                "Invalid value for `data_store_type` ({0}), must be one of {1}"
                .format(data_store_type, allowed_values)
            )

        self._data_store_type = data_store_type

    @property
    def display_name(self):
        """Gets the display_name of this GoogleCloudDiscoveryengineV1alphaWidgetConfig.

        Required. The human readable widget config display name. Used in Discovery UI. This field must be a UTF-8 encoded string with a length limit of 128 characters. Otherwise, an INVALID_ARGUMENT error is returned.

        :return: The display_name of this GoogleCloudDiscoveryengineV1alphaWidgetConfig.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this GoogleCloudDiscoveryengineV1alphaWidgetConfig.

        Required. The human readable widget config display name. Used in Discovery UI. This field must be a UTF-8 encoded string with a length limit of 128 characters. Otherwise, an INVALID_ARGUMENT error is returned.

        :param display_name: The display_name of this GoogleCloudDiscoveryengineV1alphaWidgetConfig.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def enable_autocomplete(self):
        """Gets the enable_autocomplete of this GoogleCloudDiscoveryengineV1alphaWidgetConfig.

        Whether or not to enable autocomplete.

        :return: The enable_autocomplete of this GoogleCloudDiscoveryengineV1alphaWidgetConfig.
        :rtype: bool
        """
        return self._enable_autocomplete

    @enable_autocomplete.setter
    def enable_autocomplete(self, enable_autocomplete):
        """Sets the enable_autocomplete of this GoogleCloudDiscoveryengineV1alphaWidgetConfig.

        Whether or not to enable autocomplete.

        :param enable_autocomplete: The enable_autocomplete of this GoogleCloudDiscoveryengineV1alphaWidgetConfig.
        :type enable_autocomplete: bool
        """

        self._enable_autocomplete = enable_autocomplete

    @property
    def enable_conversational_search(self):
        """Gets the enable_conversational_search of this GoogleCloudDiscoveryengineV1alphaWidgetConfig.

        Whether to allow conversational search (LLM, multi-turn) or not (non-LLM, single-turn).

        :return: The enable_conversational_search of this GoogleCloudDiscoveryengineV1alphaWidgetConfig.
        :rtype: bool
        """
        return self._enable_conversational_search

    @enable_conversational_search.setter
    def enable_conversational_search(self, enable_conversational_search):
        """Sets the enable_conversational_search of this GoogleCloudDiscoveryengineV1alphaWidgetConfig.

        Whether to allow conversational search (LLM, multi-turn) or not (non-LLM, single-turn).

        :param enable_conversational_search: The enable_conversational_search of this GoogleCloudDiscoveryengineV1alphaWidgetConfig.
        :type enable_conversational_search: bool
        """

        self._enable_conversational_search = enable_conversational_search

    @property
    def enable_quality_feedback(self):
        """Gets the enable_quality_feedback of this GoogleCloudDiscoveryengineV1alphaWidgetConfig.

        Turn on or off collecting the search result quality feedback from end users.

        :return: The enable_quality_feedback of this GoogleCloudDiscoveryengineV1alphaWidgetConfig.
        :rtype: bool
        """
        return self._enable_quality_feedback

    @enable_quality_feedback.setter
    def enable_quality_feedback(self, enable_quality_feedback):
        """Sets the enable_quality_feedback of this GoogleCloudDiscoveryengineV1alphaWidgetConfig.

        Turn on or off collecting the search result quality feedback from end users.

        :param enable_quality_feedback: The enable_quality_feedback of this GoogleCloudDiscoveryengineV1alphaWidgetConfig.
        :type enable_quality_feedback: bool
        """

        self._enable_quality_feedback = enable_quality_feedback

    @property
    def enable_result_score(self):
        """Gets the enable_result_score of this GoogleCloudDiscoveryengineV1alphaWidgetConfig.

        Whether to show the result score.

        :return: The enable_result_score of this GoogleCloudDiscoveryengineV1alphaWidgetConfig.
        :rtype: bool
        """
        return self._enable_result_score

    @enable_result_score.setter
    def enable_result_score(self, enable_result_score):
        """Sets the enable_result_score of this GoogleCloudDiscoveryengineV1alphaWidgetConfig.

        Whether to show the result score.

        :param enable_result_score: The enable_result_score of this GoogleCloudDiscoveryengineV1alphaWidgetConfig.
        :type enable_result_score: bool
        """

        self._enable_result_score = enable_result_score

    @property
    def enable_safe_search(self):
        """Gets the enable_safe_search of this GoogleCloudDiscoveryengineV1alphaWidgetConfig.

        Whether to enable safe search.

        :return: The enable_safe_search of this GoogleCloudDiscoveryengineV1alphaWidgetConfig.
        :rtype: bool
        """
        return self._enable_safe_search

    @enable_safe_search.setter
    def enable_safe_search(self, enable_safe_search):
        """Sets the enable_safe_search of this GoogleCloudDiscoveryengineV1alphaWidgetConfig.

        Whether to enable safe search.

        :param enable_safe_search: The enable_safe_search of this GoogleCloudDiscoveryengineV1alphaWidgetConfig.
        :type enable_safe_search: bool
        """

        self._enable_safe_search = enable_safe_search

    @property
    def enable_snippet_result_summary(self):
        """Gets the enable_snippet_result_summary of this GoogleCloudDiscoveryengineV1alphaWidgetConfig.

        Turn on or off summary for each snippets result.

        :return: The enable_snippet_result_summary of this GoogleCloudDiscoveryengineV1alphaWidgetConfig.
        :rtype: bool
        """
        return self._enable_snippet_result_summary

    @enable_snippet_result_summary.setter
    def enable_snippet_result_summary(self, enable_snippet_result_summary):
        """Sets the enable_snippet_result_summary of this GoogleCloudDiscoveryengineV1alphaWidgetConfig.

        Turn on or off summary for each snippets result.

        :param enable_snippet_result_summary: The enable_snippet_result_summary of this GoogleCloudDiscoveryengineV1alphaWidgetConfig.
        :type enable_snippet_result_summary: bool
        """

        self._enable_snippet_result_summary = enable_snippet_result_summary

    @property
    def enable_summarization(self):
        """Gets the enable_summarization of this GoogleCloudDiscoveryengineV1alphaWidgetConfig.

        Turn on or off summarization for the search response.

        :return: The enable_summarization of this GoogleCloudDiscoveryengineV1alphaWidgetConfig.
        :rtype: bool
        """
        return self._enable_summarization

    @enable_summarization.setter
    def enable_summarization(self, enable_summarization):
        """Sets the enable_summarization of this GoogleCloudDiscoveryengineV1alphaWidgetConfig.

        Turn on or off summarization for the search response.

        :param enable_summarization: The enable_summarization of this GoogleCloudDiscoveryengineV1alphaWidgetConfig.
        :type enable_summarization: bool
        """

        self._enable_summarization = enable_summarization

    @property
    def enable_web_app(self):
        """Gets the enable_web_app of this GoogleCloudDiscoveryengineV1alphaWidgetConfig.

        Whether to enable standalone web app.

        :return: The enable_web_app of this GoogleCloudDiscoveryengineV1alphaWidgetConfig.
        :rtype: bool
        """
        return self._enable_web_app

    @enable_web_app.setter
    def enable_web_app(self, enable_web_app):
        """Sets the enable_web_app of this GoogleCloudDiscoveryengineV1alphaWidgetConfig.

        Whether to enable standalone web app.

        :param enable_web_app: The enable_web_app of this GoogleCloudDiscoveryengineV1alphaWidgetConfig.
        :type enable_web_app: bool
        """

        self._enable_web_app = enable_web_app

    @property
    def facet_field(self):
        """Gets the facet_field of this GoogleCloudDiscoveryengineV1alphaWidgetConfig.

        The configuration and appearance of facets in the end user view.

        :return: The facet_field of this GoogleCloudDiscoveryengineV1alphaWidgetConfig.
        :rtype: List[GoogleCloudDiscoveryengineV1alphaWidgetConfigFacetField]
        """
        return self._facet_field

    @facet_field.setter
    def facet_field(self, facet_field):
        """Sets the facet_field of this GoogleCloudDiscoveryengineV1alphaWidgetConfig.

        The configuration and appearance of facets in the end user view.

        :param facet_field: The facet_field of this GoogleCloudDiscoveryengineV1alphaWidgetConfig.
        :type facet_field: List[GoogleCloudDiscoveryengineV1alphaWidgetConfigFacetField]
        """

        self._facet_field = facet_field

    @property
    def fields_ui_components_map(self):
        """Gets the fields_ui_components_map of this GoogleCloudDiscoveryengineV1alphaWidgetConfig.

        The key is the UI component. Mock. Currently supported `title`, `thumbnail`, `url`, `custom1`, `custom2`, `custom3`. The value is the name of the field along with its device visibility. The 3 custom fields are optional and can be added or removed. `title`, `thumbnail`, `url` are required UI components that cannot be removed.

        :return: The fields_ui_components_map of this GoogleCloudDiscoveryengineV1alphaWidgetConfig.
        :rtype: Dict[str, GoogleCloudDiscoveryengineV1alphaWidgetConfigUIComponentField]
        """
        return self._fields_ui_components_map

    @fields_ui_components_map.setter
    def fields_ui_components_map(self, fields_ui_components_map):
        """Sets the fields_ui_components_map of this GoogleCloudDiscoveryengineV1alphaWidgetConfig.

        The key is the UI component. Mock. Currently supported `title`, `thumbnail`, `url`, `custom1`, `custom2`, `custom3`. The value is the name of the field along with its device visibility. The 3 custom fields are optional and can be added or removed. `title`, `thumbnail`, `url` are required UI components that cannot be removed.

        :param fields_ui_components_map: The fields_ui_components_map of this GoogleCloudDiscoveryengineV1alphaWidgetConfig.
        :type fields_ui_components_map: Dict[str, GoogleCloudDiscoveryengineV1alphaWidgetConfigUIComponentField]
        """

        self._fields_ui_components_map = fields_ui_components_map

    @property
    def industry_vertical(self):
        """Gets the industry_vertical of this GoogleCloudDiscoveryengineV1alphaWidgetConfig.

        Output only. The industry vertical that the WidgetConfig registers. The WidgetConfig industry vertical is based on the associated Engine.

        :return: The industry_vertical of this GoogleCloudDiscoveryengineV1alphaWidgetConfig.
        :rtype: str
        """
        return self._industry_vertical

    @industry_vertical.setter
    def industry_vertical(self, industry_vertical):
        """Sets the industry_vertical of this GoogleCloudDiscoveryengineV1alphaWidgetConfig.

        Output only. The industry vertical that the WidgetConfig registers. The WidgetConfig industry vertical is based on the associated Engine.

        :param industry_vertical: The industry_vertical of this GoogleCloudDiscoveryengineV1alphaWidgetConfig.
        :type industry_vertical: str
        """
        allowed_values = ["INDUSTRY_VERTICAL_UNSPECIFIED", "GENERIC", "MEDIA"]  # noqa: E501
        if industry_vertical not in allowed_values:
            raise ValueError(
                "Invalid value for `industry_vertical` ({0}), must be one of {1}"
                .format(industry_vertical, allowed_values)
            )

        self._industry_vertical = industry_vertical

    @property
    def llm_enabled(self):
        """Gets the llm_enabled of this GoogleCloudDiscoveryengineV1alphaWidgetConfig.

        Output only. Whether LLM is enabled in the corresponding data store.

        :return: The llm_enabled of this GoogleCloudDiscoveryengineV1alphaWidgetConfig.
        :rtype: bool
        """
        return self._llm_enabled

    @llm_enabled.setter
    def llm_enabled(self, llm_enabled):
        """Sets the llm_enabled of this GoogleCloudDiscoveryengineV1alphaWidgetConfig.

        Output only. Whether LLM is enabled in the corresponding data store.

        :param llm_enabled: The llm_enabled of this GoogleCloudDiscoveryengineV1alphaWidgetConfig.
        :type llm_enabled: bool
        """

        self._llm_enabled = llm_enabled

    @property
    def minimum_data_term_accepted(self):
        """Gets the minimum_data_term_accepted of this GoogleCloudDiscoveryengineV1alphaWidgetConfig.

        Output only. Whether the customer accepted data use terms.

        :return: The minimum_data_term_accepted of this GoogleCloudDiscoveryengineV1alphaWidgetConfig.
        :rtype: bool
        """
        return self._minimum_data_term_accepted

    @minimum_data_term_accepted.setter
    def minimum_data_term_accepted(self, minimum_data_term_accepted):
        """Sets the minimum_data_term_accepted of this GoogleCloudDiscoveryengineV1alphaWidgetConfig.

        Output only. Whether the customer accepted data use terms.

        :param minimum_data_term_accepted: The minimum_data_term_accepted of this GoogleCloudDiscoveryengineV1alphaWidgetConfig.
        :type minimum_data_term_accepted: bool
        """

        self._minimum_data_term_accepted = minimum_data_term_accepted

    @property
    def name(self):
        """Gets the name of this GoogleCloudDiscoveryengineV1alphaWidgetConfig.

        Immutable. The full resource name of the widget config. Format: `projects/{project}/locations/{location}/collections/{collection_id}/dataStores/{data_store_id}/widgetConfigs/{widget_config_id}`. This field must be a UTF-8 encoded string with a length limit of 1024 characters.

        :return: The name of this GoogleCloudDiscoveryengineV1alphaWidgetConfig.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GoogleCloudDiscoveryengineV1alphaWidgetConfig.

        Immutable. The full resource name of the widget config. Format: `projects/{project}/locations/{location}/collections/{collection_id}/dataStores/{data_store_id}/widgetConfigs/{widget_config_id}`. This field must be a UTF-8 encoded string with a length limit of 1024 characters.

        :param name: The name of this GoogleCloudDiscoveryengineV1alphaWidgetConfig.
        :type name: str
        """

        self._name = name

    @property
    def result_display_type(self):
        """Gets the result_display_type of this GoogleCloudDiscoveryengineV1alphaWidgetConfig.

        The type of snippet to display in UCS widget. - RESULT_DISPLAY_TYPE_UNSPECIFIED for existing users. - SNIPPET for new non-enterprise search users. - EXTRACTIVE_ANSWER for new enterprise search users.

        :return: The result_display_type of this GoogleCloudDiscoveryengineV1alphaWidgetConfig.
        :rtype: str
        """
        return self._result_display_type

    @result_display_type.setter
    def result_display_type(self, result_display_type):
        """Sets the result_display_type of this GoogleCloudDiscoveryengineV1alphaWidgetConfig.

        The type of snippet to display in UCS widget. - RESULT_DISPLAY_TYPE_UNSPECIFIED for existing users. - SNIPPET for new non-enterprise search users. - EXTRACTIVE_ANSWER for new enterprise search users.

        :param result_display_type: The result_display_type of this GoogleCloudDiscoveryengineV1alphaWidgetConfig.
        :type result_display_type: str
        """
        allowed_values = ["RESULT_DISPLAY_TYPE_UNSPECIFIED", "SNIPPET", "EXTRACTIVE_ANSWER"]  # noqa: E501
        if result_display_type not in allowed_values:
            raise ValueError(
                "Invalid value for `result_display_type` ({0}), must be one of {1}"
                .format(result_display_type, allowed_values)
            )

        self._result_display_type = result_display_type

    @property
    def solution_type(self):
        """Gets the solution_type of this GoogleCloudDiscoveryengineV1alphaWidgetConfig.

        Required. Immutable. Specifies the solution type that this WidgetConfig can be used for.

        :return: The solution_type of this GoogleCloudDiscoveryengineV1alphaWidgetConfig.
        :rtype: str
        """
        return self._solution_type

    @solution_type.setter
    def solution_type(self, solution_type):
        """Sets the solution_type of this GoogleCloudDiscoveryengineV1alphaWidgetConfig.

        Required. Immutable. Specifies the solution type that this WidgetConfig can be used for.

        :param solution_type: The solution_type of this GoogleCloudDiscoveryengineV1alphaWidgetConfig.
        :type solution_type: str
        """
        allowed_values = ["SOLUTION_TYPE_UNSPECIFIED", "SOLUTION_TYPE_RECOMMENDATION", "SOLUTION_TYPE_SEARCH", "SOLUTION_TYPE_CHAT"]  # noqa: E501
        if solution_type not in allowed_values:
            raise ValueError(
                "Invalid value for `solution_type` ({0}), must be one of {1}"
                .format(solution_type, allowed_values)
            )

        self._solution_type = solution_type

    @property
    def update_time(self):
        """Gets the update_time of this GoogleCloudDiscoveryengineV1alphaWidgetConfig.

        Output only. Timestamp the WidgetConfig was updated.

        :return: The update_time of this GoogleCloudDiscoveryengineV1alphaWidgetConfig.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this GoogleCloudDiscoveryengineV1alphaWidgetConfig.

        Output only. Timestamp the WidgetConfig was updated.

        :param update_time: The update_time of this GoogleCloudDiscoveryengineV1alphaWidgetConfig.
        :type update_time: str
        """

        self._update_time = update_time
