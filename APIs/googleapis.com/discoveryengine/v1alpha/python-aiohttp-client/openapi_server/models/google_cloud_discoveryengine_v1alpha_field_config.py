# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleCloudDiscoveryengineV1alphaFieldConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, completable_option: str=None, dynamic_facetable_option: str=None, field_path: str=None, field_type: str=None, indexable_option: str=None, key_property_type: str=None, recs_filterable_option: str=None, retrievable_option: str=None, searchable_option: str=None):
        """GoogleCloudDiscoveryengineV1alphaFieldConfig - a model defined in OpenAPI

        :param completable_option: The completable_option of this GoogleCloudDiscoveryengineV1alphaFieldConfig.
        :param dynamic_facetable_option: The dynamic_facetable_option of this GoogleCloudDiscoveryengineV1alphaFieldConfig.
        :param field_path: The field_path of this GoogleCloudDiscoveryengineV1alphaFieldConfig.
        :param field_type: The field_type of this GoogleCloudDiscoveryengineV1alphaFieldConfig.
        :param indexable_option: The indexable_option of this GoogleCloudDiscoveryengineV1alphaFieldConfig.
        :param key_property_type: The key_property_type of this GoogleCloudDiscoveryengineV1alphaFieldConfig.
        :param recs_filterable_option: The recs_filterable_option of this GoogleCloudDiscoveryengineV1alphaFieldConfig.
        :param retrievable_option: The retrievable_option of this GoogleCloudDiscoveryengineV1alphaFieldConfig.
        :param searchable_option: The searchable_option of this GoogleCloudDiscoveryengineV1alphaFieldConfig.
        """
        self.openapi_types = {
            'completable_option': str,
            'dynamic_facetable_option': str,
            'field_path': str,
            'field_type': str,
            'indexable_option': str,
            'key_property_type': str,
            'recs_filterable_option': str,
            'retrievable_option': str,
            'searchable_option': str
        }

        self.attribute_map = {
            'completable_option': 'completableOption',
            'dynamic_facetable_option': 'dynamicFacetableOption',
            'field_path': 'fieldPath',
            'field_type': 'fieldType',
            'indexable_option': 'indexableOption',
            'key_property_type': 'keyPropertyType',
            'recs_filterable_option': 'recsFilterableOption',
            'retrievable_option': 'retrievableOption',
            'searchable_option': 'searchableOption'
        }

        self._completable_option = completable_option
        self._dynamic_facetable_option = dynamic_facetable_option
        self._field_path = field_path
        self._field_type = field_type
        self._indexable_option = indexable_option
        self._key_property_type = key_property_type
        self._recs_filterable_option = recs_filterable_option
        self._retrievable_option = retrievable_option
        self._searchable_option = searchable_option

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudDiscoveryengineV1alphaFieldConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudDiscoveryengineV1alphaFieldConfig of this GoogleCloudDiscoveryengineV1alphaFieldConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def completable_option(self):
        """Gets the completable_option of this GoogleCloudDiscoveryengineV1alphaFieldConfig.

        If completable_option is COMPLETABLE_ENABLED, field values are directly used and returned as suggestions for Autocomplete in CompletionService.CompleteQuery. If completable_option is unset, the server behavior defaults to COMPLETABLE_DISABLED for fields that support setting completable options, which are just `string` fields. For those fields that do not support setting completable options, the server will skip completable option setting, and setting completable_option for those fields will throw `INVALID_ARGUMENT` error.

        :return: The completable_option of this GoogleCloudDiscoveryengineV1alphaFieldConfig.
        :rtype: str
        """
        return self._completable_option

    @completable_option.setter
    def completable_option(self, completable_option):
        """Sets the completable_option of this GoogleCloudDiscoveryengineV1alphaFieldConfig.

        If completable_option is COMPLETABLE_ENABLED, field values are directly used and returned as suggestions for Autocomplete in CompletionService.CompleteQuery. If completable_option is unset, the server behavior defaults to COMPLETABLE_DISABLED for fields that support setting completable options, which are just `string` fields. For those fields that do not support setting completable options, the server will skip completable option setting, and setting completable_option for those fields will throw `INVALID_ARGUMENT` error.

        :param completable_option: The completable_option of this GoogleCloudDiscoveryengineV1alphaFieldConfig.
        :type completable_option: str
        """
        allowed_values = ["COMPLETABLE_OPTION_UNSPECIFIED", "COMPLETABLE_ENABLED", "COMPLETABLE_DISABLED"]  # noqa: E501
        if completable_option not in allowed_values:
            raise ValueError(
                "Invalid value for `completable_option` ({0}), must be one of {1}"
                .format(completable_option, allowed_values)
            )

        self._completable_option = completable_option

    @property
    def dynamic_facetable_option(self):
        """Gets the dynamic_facetable_option of this GoogleCloudDiscoveryengineV1alphaFieldConfig.

        If dynamic_facetable_option is DYNAMIC_FACETABLE_ENABLED, field values are available for dynamic facet. Could only be DYNAMIC_FACETABLE_DISABLED if FieldConfig.indexable_option is INDEXABLE_DISABLED. Otherwise, an `INVALID_ARGUMENT` error will be returned. If dynamic_facetable_option is unset, the server behavior defaults to DYNAMIC_FACETABLE_DISABLED for fields that support setting dynamic facetable options. For those fields that do not support setting dynamic facetable options, such as `object` and `boolean`, the server will skip dynamic facetable option setting, and setting dynamic_facetable_option for those fields will throw `INVALID_ARGUMENT` error.

        :return: The dynamic_facetable_option of this GoogleCloudDiscoveryengineV1alphaFieldConfig.
        :rtype: str
        """
        return self._dynamic_facetable_option

    @dynamic_facetable_option.setter
    def dynamic_facetable_option(self, dynamic_facetable_option):
        """Sets the dynamic_facetable_option of this GoogleCloudDiscoveryengineV1alphaFieldConfig.

        If dynamic_facetable_option is DYNAMIC_FACETABLE_ENABLED, field values are available for dynamic facet. Could only be DYNAMIC_FACETABLE_DISABLED if FieldConfig.indexable_option is INDEXABLE_DISABLED. Otherwise, an `INVALID_ARGUMENT` error will be returned. If dynamic_facetable_option is unset, the server behavior defaults to DYNAMIC_FACETABLE_DISABLED for fields that support setting dynamic facetable options. For those fields that do not support setting dynamic facetable options, such as `object` and `boolean`, the server will skip dynamic facetable option setting, and setting dynamic_facetable_option for those fields will throw `INVALID_ARGUMENT` error.

        :param dynamic_facetable_option: The dynamic_facetable_option of this GoogleCloudDiscoveryengineV1alphaFieldConfig.
        :type dynamic_facetable_option: str
        """
        allowed_values = ["DYNAMIC_FACETABLE_OPTION_UNSPECIFIED", "DYNAMIC_FACETABLE_ENABLED", "DYNAMIC_FACETABLE_DISABLED"]  # noqa: E501
        if dynamic_facetable_option not in allowed_values:
            raise ValueError(
                "Invalid value for `dynamic_facetable_option` ({0}), must be one of {1}"
                .format(dynamic_facetable_option, allowed_values)
            )

        self._dynamic_facetable_option = dynamic_facetable_option

    @property
    def field_path(self):
        """Gets the field_path of this GoogleCloudDiscoveryengineV1alphaFieldConfig.

        Required. Field path of the schema field. For example: `title`, `description`, `release_info.release_year`.

        :return: The field_path of this GoogleCloudDiscoveryengineV1alphaFieldConfig.
        :rtype: str
        """
        return self._field_path

    @field_path.setter
    def field_path(self, field_path):
        """Sets the field_path of this GoogleCloudDiscoveryengineV1alphaFieldConfig.

        Required. Field path of the schema field. For example: `title`, `description`, `release_info.release_year`.

        :param field_path: The field_path of this GoogleCloudDiscoveryengineV1alphaFieldConfig.
        :type field_path: str
        """

        self._field_path = field_path

    @property
    def field_type(self):
        """Gets the field_type of this GoogleCloudDiscoveryengineV1alphaFieldConfig.

        Output only. Raw type of the field.

        :return: The field_type of this GoogleCloudDiscoveryengineV1alphaFieldConfig.
        :rtype: str
        """
        return self._field_type

    @field_type.setter
    def field_type(self, field_type):
        """Sets the field_type of this GoogleCloudDiscoveryengineV1alphaFieldConfig.

        Output only. Raw type of the field.

        :param field_type: The field_type of this GoogleCloudDiscoveryengineV1alphaFieldConfig.
        :type field_type: str
        """
        allowed_values = ["FIELD_TYPE_UNSPECIFIED", "OBJECT", "STRING", "NUMBER", "INTEGER", "BOOLEAN", "GEOLOCATION", "DATETIME"]  # noqa: E501
        if field_type not in allowed_values:
            raise ValueError(
                "Invalid value for `field_type` ({0}), must be one of {1}"
                .format(field_type, allowed_values)
            )

        self._field_type = field_type

    @property
    def indexable_option(self):
        """Gets the indexable_option of this GoogleCloudDiscoveryengineV1alphaFieldConfig.

        If indexable_option is INDEXABLE_ENABLED, field values are indexed so that it can be filtered or faceted in SearchService.Search. If indexable_option is unset, the server behavior defaults to INDEXABLE_DISABLED for fields that support setting indexable options. For those fields that do not support setting indexable options, such as `object` and `boolean` and key properties, the server will skip indexable_option setting, and setting indexable_option for those fields will throw `INVALID_ARGUMENT` error.

        :return: The indexable_option of this GoogleCloudDiscoveryengineV1alphaFieldConfig.
        :rtype: str
        """
        return self._indexable_option

    @indexable_option.setter
    def indexable_option(self, indexable_option):
        """Sets the indexable_option of this GoogleCloudDiscoveryengineV1alphaFieldConfig.

        If indexable_option is INDEXABLE_ENABLED, field values are indexed so that it can be filtered or faceted in SearchService.Search. If indexable_option is unset, the server behavior defaults to INDEXABLE_DISABLED for fields that support setting indexable options. For those fields that do not support setting indexable options, such as `object` and `boolean` and key properties, the server will skip indexable_option setting, and setting indexable_option for those fields will throw `INVALID_ARGUMENT` error.

        :param indexable_option: The indexable_option of this GoogleCloudDiscoveryengineV1alphaFieldConfig.
        :type indexable_option: str
        """
        allowed_values = ["INDEXABLE_OPTION_UNSPECIFIED", "INDEXABLE_ENABLED", "INDEXABLE_DISABLED"]  # noqa: E501
        if indexable_option not in allowed_values:
            raise ValueError(
                "Invalid value for `indexable_option` ({0}), must be one of {1}"
                .format(indexable_option, allowed_values)
            )

        self._indexable_option = indexable_option

    @property
    def key_property_type(self):
        """Gets the key_property_type of this GoogleCloudDiscoveryengineV1alphaFieldConfig.

        Output only. Type of the key property that this field is mapped to. Empty string if this is not annotated as mapped to a key property. Example types are `title`, `description`. Full list is defined by `keyPropertyMapping` in the schema field annotation. If the schema field has a `KeyPropertyMapping` annotation, `indexable_option` and `searchable_option` of this field cannot be modified.

        :return: The key_property_type of this GoogleCloudDiscoveryengineV1alphaFieldConfig.
        :rtype: str
        """
        return self._key_property_type

    @key_property_type.setter
    def key_property_type(self, key_property_type):
        """Sets the key_property_type of this GoogleCloudDiscoveryengineV1alphaFieldConfig.

        Output only. Type of the key property that this field is mapped to. Empty string if this is not annotated as mapped to a key property. Example types are `title`, `description`. Full list is defined by `keyPropertyMapping` in the schema field annotation. If the schema field has a `KeyPropertyMapping` annotation, `indexable_option` and `searchable_option` of this field cannot be modified.

        :param key_property_type: The key_property_type of this GoogleCloudDiscoveryengineV1alphaFieldConfig.
        :type key_property_type: str
        """

        self._key_property_type = key_property_type

    @property
    def recs_filterable_option(self):
        """Gets the recs_filterable_option of this GoogleCloudDiscoveryengineV1alphaFieldConfig.

        If recs_filterable_option is FILTERABLE_ENABLED, field values are filterable by filter expression in RecommendationService.Recommend. If FILTERABLE_ENABLED but the field type is numerical, field values are not filterable by text queries in RecommendationService.Recommend. Only textual fields are supported. If recs_filterable_option is unset, the default setting is FILTERABLE_DISABLED for fields that support setting filterable options. When a field set to [FILTERABLE_DISABLED] is filtered, a warning is generated and an empty result is returned.

        :return: The recs_filterable_option of this GoogleCloudDiscoveryengineV1alphaFieldConfig.
        :rtype: str
        """
        return self._recs_filterable_option

    @recs_filterable_option.setter
    def recs_filterable_option(self, recs_filterable_option):
        """Sets the recs_filterable_option of this GoogleCloudDiscoveryengineV1alphaFieldConfig.

        If recs_filterable_option is FILTERABLE_ENABLED, field values are filterable by filter expression in RecommendationService.Recommend. If FILTERABLE_ENABLED but the field type is numerical, field values are not filterable by text queries in RecommendationService.Recommend. Only textual fields are supported. If recs_filterable_option is unset, the default setting is FILTERABLE_DISABLED for fields that support setting filterable options. When a field set to [FILTERABLE_DISABLED] is filtered, a warning is generated and an empty result is returned.

        :param recs_filterable_option: The recs_filterable_option of this GoogleCloudDiscoveryengineV1alphaFieldConfig.
        :type recs_filterable_option: str
        """
        allowed_values = ["FILTERABLE_OPTION_UNSPECIFIED", "FILTERABLE_ENABLED", "FILTERABLE_DISABLED"]  # noqa: E501
        if recs_filterable_option not in allowed_values:
            raise ValueError(
                "Invalid value for `recs_filterable_option` ({0}), must be one of {1}"
                .format(recs_filterable_option, allowed_values)
            )

        self._recs_filterable_option = recs_filterable_option

    @property
    def retrievable_option(self):
        """Gets the retrievable_option of this GoogleCloudDiscoveryengineV1alphaFieldConfig.

        If retrievable_option is RETRIEVABLE_ENABLED, field values are included in the search results. If retrievable_option is unset, the server behavior defaults to RETRIEVABLE_DISABLED for fields that support setting retrievable options. For those fields that do not support setting retrievable options, such as `object` and `boolean`, the server will skip retrievable option setting, and setting retrievable_option for those fields will throw `INVALID_ARGUMENT` error.

        :return: The retrievable_option of this GoogleCloudDiscoveryengineV1alphaFieldConfig.
        :rtype: str
        """
        return self._retrievable_option

    @retrievable_option.setter
    def retrievable_option(self, retrievable_option):
        """Sets the retrievable_option of this GoogleCloudDiscoveryengineV1alphaFieldConfig.

        If retrievable_option is RETRIEVABLE_ENABLED, field values are included in the search results. If retrievable_option is unset, the server behavior defaults to RETRIEVABLE_DISABLED for fields that support setting retrievable options. For those fields that do not support setting retrievable options, such as `object` and `boolean`, the server will skip retrievable option setting, and setting retrievable_option for those fields will throw `INVALID_ARGUMENT` error.

        :param retrievable_option: The retrievable_option of this GoogleCloudDiscoveryengineV1alphaFieldConfig.
        :type retrievable_option: str
        """
        allowed_values = ["RETRIEVABLE_OPTION_UNSPECIFIED", "RETRIEVABLE_ENABLED", "RETRIEVABLE_DISABLED"]  # noqa: E501
        if retrievable_option not in allowed_values:
            raise ValueError(
                "Invalid value for `retrievable_option` ({0}), must be one of {1}"
                .format(retrievable_option, allowed_values)
            )

        self._retrievable_option = retrievable_option

    @property
    def searchable_option(self):
        """Gets the searchable_option of this GoogleCloudDiscoveryengineV1alphaFieldConfig.

        If searchable_option is SEARCHABLE_ENABLED, field values are searchable by text queries in SearchService.Search. If SEARCHABLE_ENABLED but field type is numerical, field values will not be searchable by text queries in SearchService.Search, as there are no text values associated to numerical fields. If searchable_option is unset, the server behavior defaults to SEARCHABLE_DISABLED for fields that support setting searchable options. Only `string` fields that have no key property mapping support setting searchable_option. For those fields that do not support setting searchable options, the server will skip searchable option setting, and setting searchable_option for those fields will throw `INVALID_ARGUMENT` error.

        :return: The searchable_option of this GoogleCloudDiscoveryengineV1alphaFieldConfig.
        :rtype: str
        """
        return self._searchable_option

    @searchable_option.setter
    def searchable_option(self, searchable_option):
        """Sets the searchable_option of this GoogleCloudDiscoveryengineV1alphaFieldConfig.

        If searchable_option is SEARCHABLE_ENABLED, field values are searchable by text queries in SearchService.Search. If SEARCHABLE_ENABLED but field type is numerical, field values will not be searchable by text queries in SearchService.Search, as there are no text values associated to numerical fields. If searchable_option is unset, the server behavior defaults to SEARCHABLE_DISABLED for fields that support setting searchable options. Only `string` fields that have no key property mapping support setting searchable_option. For those fields that do not support setting searchable options, the server will skip searchable option setting, and setting searchable_option for those fields will throw `INVALID_ARGUMENT` error.

        :param searchable_option: The searchable_option of this GoogleCloudDiscoveryengineV1alphaFieldConfig.
        :type searchable_option: str
        """
        allowed_values = ["SEARCHABLE_OPTION_UNSPECIFIED", "SEARCHABLE_ENABLED", "SEARCHABLE_DISABLED"]  # noqa: E501
        if searchable_option not in allowed_values:
            raise ValueError(
                "Invalid value for `searchable_option` ({0}), must be one of {1}"
                .format(searchable_option, allowed_values)
            )

        self._searchable_option = searchable_option
