# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_discoveryengine_v1alpha_idp_config_external_idp_config import GoogleCloudDiscoveryengineV1alphaIdpConfigExternalIdpConfig
from openapi_server import util


class GoogleCloudDiscoveryengineV1alphaIdpConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, external_idp_config: GoogleCloudDiscoveryengineV1alphaIdpConfigExternalIdpConfig=None, idp_type: str=None):
        """GoogleCloudDiscoveryengineV1alphaIdpConfig - a model defined in OpenAPI

        :param external_idp_config: The external_idp_config of this GoogleCloudDiscoveryengineV1alphaIdpConfig.
        :param idp_type: The idp_type of this GoogleCloudDiscoveryengineV1alphaIdpConfig.
        """
        self.openapi_types = {
            'external_idp_config': GoogleCloudDiscoveryengineV1alphaIdpConfigExternalIdpConfig,
            'idp_type': str
        }

        self.attribute_map = {
            'external_idp_config': 'externalIdpConfig',
            'idp_type': 'idpType'
        }

        self._external_idp_config = external_idp_config
        self._idp_type = idp_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudDiscoveryengineV1alphaIdpConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudDiscoveryengineV1alphaIdpConfig of this GoogleCloudDiscoveryengineV1alphaIdpConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def external_idp_config(self):
        """Gets the external_idp_config of this GoogleCloudDiscoveryengineV1alphaIdpConfig.


        :return: The external_idp_config of this GoogleCloudDiscoveryengineV1alphaIdpConfig.
        :rtype: GoogleCloudDiscoveryengineV1alphaIdpConfigExternalIdpConfig
        """
        return self._external_idp_config

    @external_idp_config.setter
    def external_idp_config(self, external_idp_config):
        """Sets the external_idp_config of this GoogleCloudDiscoveryengineV1alphaIdpConfig.


        :param external_idp_config: The external_idp_config of this GoogleCloudDiscoveryengineV1alphaIdpConfig.
        :type external_idp_config: GoogleCloudDiscoveryengineV1alphaIdpConfigExternalIdpConfig
        """

        self._external_idp_config = external_idp_config

    @property
    def idp_type(self):
        """Gets the idp_type of this GoogleCloudDiscoveryengineV1alphaIdpConfig.

        Identity provider type configured.

        :return: The idp_type of this GoogleCloudDiscoveryengineV1alphaIdpConfig.
        :rtype: str
        """
        return self._idp_type

    @idp_type.setter
    def idp_type(self, idp_type):
        """Sets the idp_type of this GoogleCloudDiscoveryengineV1alphaIdpConfig.

        Identity provider type configured.

        :param idp_type: The idp_type of this GoogleCloudDiscoveryengineV1alphaIdpConfig.
        :type idp_type: str
        """
        allowed_values = ["IDP_TYPE_UNSPECIFIED", "GSUITE", "THIRD_PARTY"]  # noqa: E501
        if idp_type not in allowed_values:
            raise ValueError(
                "Invalid value for `idp_type` ({0}), must be one of {1}"
                .format(idp_type, allowed_values)
            )

        self._idp_type = idp_type
