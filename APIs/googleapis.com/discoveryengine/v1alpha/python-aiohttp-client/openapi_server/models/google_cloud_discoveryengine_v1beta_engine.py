# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_discoveryengine_v1beta_engine_chat_engine_config import GoogleCloudDiscoveryengineV1betaEngineChatEngineConfig
from openapi_server.models.google_cloud_discoveryengine_v1beta_engine_chat_engine_metadata import GoogleCloudDiscoveryengineV1betaEngineChatEngineMetadata
from openapi_server.models.google_cloud_discoveryengine_v1beta_engine_common_config import GoogleCloudDiscoveryengineV1betaEngineCommonConfig
from openapi_server.models.google_cloud_discoveryengine_v1beta_engine_search_engine_config import GoogleCloudDiscoveryengineV1betaEngineSearchEngineConfig
from openapi_server import util


class GoogleCloudDiscoveryengineV1betaEngine(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, chat_engine_config: GoogleCloudDiscoveryengineV1betaEngineChatEngineConfig=None, chat_engine_metadata: GoogleCloudDiscoveryengineV1betaEngineChatEngineMetadata=None, common_config: GoogleCloudDiscoveryengineV1betaEngineCommonConfig=None, create_time: str=None, data_store_ids: List[str]=None, display_name: str=None, industry_vertical: str=None, name: str=None, search_engine_config: GoogleCloudDiscoveryengineV1betaEngineSearchEngineConfig=None, solution_type: str=None, update_time: str=None):
        """GoogleCloudDiscoveryengineV1betaEngine - a model defined in OpenAPI

        :param chat_engine_config: The chat_engine_config of this GoogleCloudDiscoveryengineV1betaEngine.
        :param chat_engine_metadata: The chat_engine_metadata of this GoogleCloudDiscoveryengineV1betaEngine.
        :param common_config: The common_config of this GoogleCloudDiscoveryengineV1betaEngine.
        :param create_time: The create_time of this GoogleCloudDiscoveryengineV1betaEngine.
        :param data_store_ids: The data_store_ids of this GoogleCloudDiscoveryengineV1betaEngine.
        :param display_name: The display_name of this GoogleCloudDiscoveryengineV1betaEngine.
        :param industry_vertical: The industry_vertical of this GoogleCloudDiscoveryengineV1betaEngine.
        :param name: The name of this GoogleCloudDiscoveryengineV1betaEngine.
        :param search_engine_config: The search_engine_config of this GoogleCloudDiscoveryengineV1betaEngine.
        :param solution_type: The solution_type of this GoogleCloudDiscoveryengineV1betaEngine.
        :param update_time: The update_time of this GoogleCloudDiscoveryengineV1betaEngine.
        """
        self.openapi_types = {
            'chat_engine_config': GoogleCloudDiscoveryengineV1betaEngineChatEngineConfig,
            'chat_engine_metadata': GoogleCloudDiscoveryengineV1betaEngineChatEngineMetadata,
            'common_config': GoogleCloudDiscoveryengineV1betaEngineCommonConfig,
            'create_time': str,
            'data_store_ids': List[str],
            'display_name': str,
            'industry_vertical': str,
            'name': str,
            'search_engine_config': GoogleCloudDiscoveryengineV1betaEngineSearchEngineConfig,
            'solution_type': str,
            'update_time': str
        }

        self.attribute_map = {
            'chat_engine_config': 'chatEngineConfig',
            'chat_engine_metadata': 'chatEngineMetadata',
            'common_config': 'commonConfig',
            'create_time': 'createTime',
            'data_store_ids': 'dataStoreIds',
            'display_name': 'displayName',
            'industry_vertical': 'industryVertical',
            'name': 'name',
            'search_engine_config': 'searchEngineConfig',
            'solution_type': 'solutionType',
            'update_time': 'updateTime'
        }

        self._chat_engine_config = chat_engine_config
        self._chat_engine_metadata = chat_engine_metadata
        self._common_config = common_config
        self._create_time = create_time
        self._data_store_ids = data_store_ids
        self._display_name = display_name
        self._industry_vertical = industry_vertical
        self._name = name
        self._search_engine_config = search_engine_config
        self._solution_type = solution_type
        self._update_time = update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudDiscoveryengineV1betaEngine':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudDiscoveryengineV1betaEngine of this GoogleCloudDiscoveryengineV1betaEngine.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def chat_engine_config(self):
        """Gets the chat_engine_config of this GoogleCloudDiscoveryengineV1betaEngine.


        :return: The chat_engine_config of this GoogleCloudDiscoveryengineV1betaEngine.
        :rtype: GoogleCloudDiscoveryengineV1betaEngineChatEngineConfig
        """
        return self._chat_engine_config

    @chat_engine_config.setter
    def chat_engine_config(self, chat_engine_config):
        """Sets the chat_engine_config of this GoogleCloudDiscoveryengineV1betaEngine.


        :param chat_engine_config: The chat_engine_config of this GoogleCloudDiscoveryengineV1betaEngine.
        :type chat_engine_config: GoogleCloudDiscoveryengineV1betaEngineChatEngineConfig
        """

        self._chat_engine_config = chat_engine_config

    @property
    def chat_engine_metadata(self):
        """Gets the chat_engine_metadata of this GoogleCloudDiscoveryengineV1betaEngine.


        :return: The chat_engine_metadata of this GoogleCloudDiscoveryengineV1betaEngine.
        :rtype: GoogleCloudDiscoveryengineV1betaEngineChatEngineMetadata
        """
        return self._chat_engine_metadata

    @chat_engine_metadata.setter
    def chat_engine_metadata(self, chat_engine_metadata):
        """Sets the chat_engine_metadata of this GoogleCloudDiscoveryengineV1betaEngine.


        :param chat_engine_metadata: The chat_engine_metadata of this GoogleCloudDiscoveryengineV1betaEngine.
        :type chat_engine_metadata: GoogleCloudDiscoveryengineV1betaEngineChatEngineMetadata
        """

        self._chat_engine_metadata = chat_engine_metadata

    @property
    def common_config(self):
        """Gets the common_config of this GoogleCloudDiscoveryengineV1betaEngine.


        :return: The common_config of this GoogleCloudDiscoveryengineV1betaEngine.
        :rtype: GoogleCloudDiscoveryengineV1betaEngineCommonConfig
        """
        return self._common_config

    @common_config.setter
    def common_config(self, common_config):
        """Sets the common_config of this GoogleCloudDiscoveryengineV1betaEngine.


        :param common_config: The common_config of this GoogleCloudDiscoveryengineV1betaEngine.
        :type common_config: GoogleCloudDiscoveryengineV1betaEngineCommonConfig
        """

        self._common_config = common_config

    @property
    def create_time(self):
        """Gets the create_time of this GoogleCloudDiscoveryengineV1betaEngine.

        Output only. Timestamp the Recommendation Engine was created at.

        :return: The create_time of this GoogleCloudDiscoveryengineV1betaEngine.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this GoogleCloudDiscoveryengineV1betaEngine.

        Output only. Timestamp the Recommendation Engine was created at.

        :param create_time: The create_time of this GoogleCloudDiscoveryengineV1betaEngine.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def data_store_ids(self):
        """Gets the data_store_ids of this GoogleCloudDiscoveryengineV1betaEngine.

        The data stores associated with this engine. For SOLUTION_TYPE_SEARCH and SOLUTION_TYPE_RECOMMENDATION type of engines, they can only associate with at most one data store. If solution_type is SOLUTION_TYPE_CHAT, multiple DataStores in the same Collection can be associated here. Note that when used in CreateEngineRequest, one DataStore id must be provided as the system will use it for necessary initializations.

        :return: The data_store_ids of this GoogleCloudDiscoveryengineV1betaEngine.
        :rtype: List[str]
        """
        return self._data_store_ids

    @data_store_ids.setter
    def data_store_ids(self, data_store_ids):
        """Sets the data_store_ids of this GoogleCloudDiscoveryengineV1betaEngine.

        The data stores associated with this engine. For SOLUTION_TYPE_SEARCH and SOLUTION_TYPE_RECOMMENDATION type of engines, they can only associate with at most one data store. If solution_type is SOLUTION_TYPE_CHAT, multiple DataStores in the same Collection can be associated here. Note that when used in CreateEngineRequest, one DataStore id must be provided as the system will use it for necessary initializations.

        :param data_store_ids: The data_store_ids of this GoogleCloudDiscoveryengineV1betaEngine.
        :type data_store_ids: List[str]
        """

        self._data_store_ids = data_store_ids

    @property
    def display_name(self):
        """Gets the display_name of this GoogleCloudDiscoveryengineV1betaEngine.

        Required. The display name of the engine. Should be human readable. UTF-8 encoded string with limit of 1024 characters.

        :return: The display_name of this GoogleCloudDiscoveryengineV1betaEngine.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this GoogleCloudDiscoveryengineV1betaEngine.

        Required. The display name of the engine. Should be human readable. UTF-8 encoded string with limit of 1024 characters.

        :param display_name: The display_name of this GoogleCloudDiscoveryengineV1betaEngine.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def industry_vertical(self):
        """Gets the industry_vertical of this GoogleCloudDiscoveryengineV1betaEngine.

        The industry vertical that the engine registers. The restriction of the Engine industry vertical is based on DataStore: If unspecified, default to `GENERIC`. Vertical on Engine has to match vertical of the DataStore liniked to the engine.

        :return: The industry_vertical of this GoogleCloudDiscoveryengineV1betaEngine.
        :rtype: str
        """
        return self._industry_vertical

    @industry_vertical.setter
    def industry_vertical(self, industry_vertical):
        """Sets the industry_vertical of this GoogleCloudDiscoveryengineV1betaEngine.

        The industry vertical that the engine registers. The restriction of the Engine industry vertical is based on DataStore: If unspecified, default to `GENERIC`. Vertical on Engine has to match vertical of the DataStore liniked to the engine.

        :param industry_vertical: The industry_vertical of this GoogleCloudDiscoveryengineV1betaEngine.
        :type industry_vertical: str
        """
        allowed_values = ["INDUSTRY_VERTICAL_UNSPECIFIED", "GENERIC", "MEDIA"]  # noqa: E501
        if industry_vertical not in allowed_values:
            raise ValueError(
                "Invalid value for `industry_vertical` ({0}), must be one of {1}"
                .format(industry_vertical, allowed_values)
            )

        self._industry_vertical = industry_vertical

    @property
    def name(self):
        """Gets the name of this GoogleCloudDiscoveryengineV1betaEngine.

        Immutable. The fully qualified resource name of the engine. This field must be a UTF-8 encoded string with a length limit of 1024 characters. Format: `projects/{project_number}/locations/{location}/collections/{collection}/engines/{engine}` engine should be 1-63 characters, and valid characters are /a-z0-9*/. Otherwise, an INVALID_ARGUMENT error is returned.

        :return: The name of this GoogleCloudDiscoveryengineV1betaEngine.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GoogleCloudDiscoveryengineV1betaEngine.

        Immutable. The fully qualified resource name of the engine. This field must be a UTF-8 encoded string with a length limit of 1024 characters. Format: `projects/{project_number}/locations/{location}/collections/{collection}/engines/{engine}` engine should be 1-63 characters, and valid characters are /a-z0-9*/. Otherwise, an INVALID_ARGUMENT error is returned.

        :param name: The name of this GoogleCloudDiscoveryengineV1betaEngine.
        :type name: str
        """

        self._name = name

    @property
    def search_engine_config(self):
        """Gets the search_engine_config of this GoogleCloudDiscoveryengineV1betaEngine.


        :return: The search_engine_config of this GoogleCloudDiscoveryengineV1betaEngine.
        :rtype: GoogleCloudDiscoveryengineV1betaEngineSearchEngineConfig
        """
        return self._search_engine_config

    @search_engine_config.setter
    def search_engine_config(self, search_engine_config):
        """Sets the search_engine_config of this GoogleCloudDiscoveryengineV1betaEngine.


        :param search_engine_config: The search_engine_config of this GoogleCloudDiscoveryengineV1betaEngine.
        :type search_engine_config: GoogleCloudDiscoveryengineV1betaEngineSearchEngineConfig
        """

        self._search_engine_config = search_engine_config

    @property
    def solution_type(self):
        """Gets the solution_type of this GoogleCloudDiscoveryengineV1betaEngine.

        Required. The solutions of the engine.

        :return: The solution_type of this GoogleCloudDiscoveryengineV1betaEngine.
        :rtype: str
        """
        return self._solution_type

    @solution_type.setter
    def solution_type(self, solution_type):
        """Sets the solution_type of this GoogleCloudDiscoveryengineV1betaEngine.

        Required. The solutions of the engine.

        :param solution_type: The solution_type of this GoogleCloudDiscoveryengineV1betaEngine.
        :type solution_type: str
        """
        allowed_values = ["SOLUTION_TYPE_UNSPECIFIED", "SOLUTION_TYPE_RECOMMENDATION", "SOLUTION_TYPE_SEARCH", "SOLUTION_TYPE_CHAT"]  # noqa: E501
        if solution_type not in allowed_values:
            raise ValueError(
                "Invalid value for `solution_type` ({0}), must be one of {1}"
                .format(solution_type, allowed_values)
            )

        self._solution_type = solution_type

    @property
    def update_time(self):
        """Gets the update_time of this GoogleCloudDiscoveryengineV1betaEngine.

        Output only. Timestamp the Recommendation Engine was last updated.

        :return: The update_time of this GoogleCloudDiscoveryengineV1betaEngine.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this GoogleCloudDiscoveryengineV1betaEngine.

        Output only. Timestamp the Recommendation Engine was last updated.

        :param update_time: The update_time of this GoogleCloudDiscoveryengineV1betaEngine.
        :type update_time: str
        """

        self._update_time = update_time
