# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_discoveryengine_v1alpha_gcs_source import GoogleCloudDiscoveryengineV1alphaGcsSource
from openapi_server.models.google_cloud_discoveryengine_v1alpha_purge_error_config import GoogleCloudDiscoveryengineV1alphaPurgeErrorConfig
from openapi_server import util


class GoogleCloudDiscoveryengineV1alphaPurgeDocumentsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, error_config: GoogleCloudDiscoveryengineV1alphaPurgeErrorConfig=None, filter: str=None, force: bool=None, gcs_source: GoogleCloudDiscoveryengineV1alphaGcsSource=None):
        """GoogleCloudDiscoveryengineV1alphaPurgeDocumentsRequest - a model defined in OpenAPI

        :param error_config: The error_config of this GoogleCloudDiscoveryengineV1alphaPurgeDocumentsRequest.
        :param filter: The filter of this GoogleCloudDiscoveryengineV1alphaPurgeDocumentsRequest.
        :param force: The force of this GoogleCloudDiscoveryengineV1alphaPurgeDocumentsRequest.
        :param gcs_source: The gcs_source of this GoogleCloudDiscoveryengineV1alphaPurgeDocumentsRequest.
        """
        self.openapi_types = {
            'error_config': GoogleCloudDiscoveryengineV1alphaPurgeErrorConfig,
            'filter': str,
            'force': bool,
            'gcs_source': GoogleCloudDiscoveryengineV1alphaGcsSource
        }

        self.attribute_map = {
            'error_config': 'errorConfig',
            'filter': 'filter',
            'force': 'force',
            'gcs_source': 'gcsSource'
        }

        self._error_config = error_config
        self._filter = filter
        self._force = force
        self._gcs_source = gcs_source

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudDiscoveryengineV1alphaPurgeDocumentsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudDiscoveryengineV1alphaPurgeDocumentsRequest of this GoogleCloudDiscoveryengineV1alphaPurgeDocumentsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def error_config(self):
        """Gets the error_config of this GoogleCloudDiscoveryengineV1alphaPurgeDocumentsRequest.


        :return: The error_config of this GoogleCloudDiscoveryengineV1alphaPurgeDocumentsRequest.
        :rtype: GoogleCloudDiscoveryengineV1alphaPurgeErrorConfig
        """
        return self._error_config

    @error_config.setter
    def error_config(self, error_config):
        """Sets the error_config of this GoogleCloudDiscoveryengineV1alphaPurgeDocumentsRequest.


        :param error_config: The error_config of this GoogleCloudDiscoveryengineV1alphaPurgeDocumentsRequest.
        :type error_config: GoogleCloudDiscoveryengineV1alphaPurgeErrorConfig
        """

        self._error_config = error_config

    @property
    def filter(self):
        """Gets the filter of this GoogleCloudDiscoveryengineV1alphaPurgeDocumentsRequest.

        Required. Filter matching documents to purge. Only currently supported value is `*` (all items).

        :return: The filter of this GoogleCloudDiscoveryengineV1alphaPurgeDocumentsRequest.
        :rtype: str
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this GoogleCloudDiscoveryengineV1alphaPurgeDocumentsRequest.

        Required. Filter matching documents to purge. Only currently supported value is `*` (all items).

        :param filter: The filter of this GoogleCloudDiscoveryengineV1alphaPurgeDocumentsRequest.
        :type filter: str
        """

        self._filter = filter

    @property
    def force(self):
        """Gets the force of this GoogleCloudDiscoveryengineV1alphaPurgeDocumentsRequest.

        Actually performs the purge. If `force` is set to false, return the expected purge count without deleting any documents.

        :return: The force of this GoogleCloudDiscoveryengineV1alphaPurgeDocumentsRequest.
        :rtype: bool
        """
        return self._force

    @force.setter
    def force(self, force):
        """Sets the force of this GoogleCloudDiscoveryengineV1alphaPurgeDocumentsRequest.

        Actually performs the purge. If `force` is set to false, return the expected purge count without deleting any documents.

        :param force: The force of this GoogleCloudDiscoveryengineV1alphaPurgeDocumentsRequest.
        :type force: bool
        """

        self._force = force

    @property
    def gcs_source(self):
        """Gets the gcs_source of this GoogleCloudDiscoveryengineV1alphaPurgeDocumentsRequest.


        :return: The gcs_source of this GoogleCloudDiscoveryengineV1alphaPurgeDocumentsRequest.
        :rtype: GoogleCloudDiscoveryengineV1alphaGcsSource
        """
        return self._gcs_source

    @gcs_source.setter
    def gcs_source(self, gcs_source):
        """Sets the gcs_source of this GoogleCloudDiscoveryengineV1alphaPurgeDocumentsRequest.


        :param gcs_source: The gcs_source of this GoogleCloudDiscoveryengineV1alphaPurgeDocumentsRequest.
        :type gcs_source: GoogleCloudDiscoveryengineV1alphaGcsSource
        """

        self._gcs_source = gcs_source
