# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_discoveryengine_v1alpha_interval import GoogleCloudDiscoveryengineV1alphaInterval
from openapi_server import util


class GoogleCloudDiscoveryengineV1alphaSearchRequestFacetSpecFacetKey(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, case_insensitive: bool=None, contains: List[str]=None, intervals: List[GoogleCloudDiscoveryengineV1alphaInterval]=None, key: str=None, order_by: str=None, prefixes: List[str]=None, restricted_values: List[str]=None):
        """GoogleCloudDiscoveryengineV1alphaSearchRequestFacetSpecFacetKey - a model defined in OpenAPI

        :param case_insensitive: The case_insensitive of this GoogleCloudDiscoveryengineV1alphaSearchRequestFacetSpecFacetKey.
        :param contains: The contains of this GoogleCloudDiscoveryengineV1alphaSearchRequestFacetSpecFacetKey.
        :param intervals: The intervals of this GoogleCloudDiscoveryengineV1alphaSearchRequestFacetSpecFacetKey.
        :param key: The key of this GoogleCloudDiscoveryengineV1alphaSearchRequestFacetSpecFacetKey.
        :param order_by: The order_by of this GoogleCloudDiscoveryengineV1alphaSearchRequestFacetSpecFacetKey.
        :param prefixes: The prefixes of this GoogleCloudDiscoveryengineV1alphaSearchRequestFacetSpecFacetKey.
        :param restricted_values: The restricted_values of this GoogleCloudDiscoveryengineV1alphaSearchRequestFacetSpecFacetKey.
        """
        self.openapi_types = {
            'case_insensitive': bool,
            'contains': List[str],
            'intervals': List[GoogleCloudDiscoveryengineV1alphaInterval],
            'key': str,
            'order_by': str,
            'prefixes': List[str],
            'restricted_values': List[str]
        }

        self.attribute_map = {
            'case_insensitive': 'caseInsensitive',
            'contains': 'contains',
            'intervals': 'intervals',
            'key': 'key',
            'order_by': 'orderBy',
            'prefixes': 'prefixes',
            'restricted_values': 'restrictedValues'
        }

        self._case_insensitive = case_insensitive
        self._contains = contains
        self._intervals = intervals
        self._key = key
        self._order_by = order_by
        self._prefixes = prefixes
        self._restricted_values = restricted_values

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudDiscoveryengineV1alphaSearchRequestFacetSpecFacetKey':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudDiscoveryengineV1alphaSearchRequestFacetSpecFacetKey of this GoogleCloudDiscoveryengineV1alphaSearchRequestFacetSpecFacetKey.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def case_insensitive(self):
        """Gets the case_insensitive of this GoogleCloudDiscoveryengineV1alphaSearchRequestFacetSpecFacetKey.

        True to make facet keys case insensitive when getting faceting values with prefixes or contains; false otherwise.

        :return: The case_insensitive of this GoogleCloudDiscoveryengineV1alphaSearchRequestFacetSpecFacetKey.
        :rtype: bool
        """
        return self._case_insensitive

    @case_insensitive.setter
    def case_insensitive(self, case_insensitive):
        """Sets the case_insensitive of this GoogleCloudDiscoveryengineV1alphaSearchRequestFacetSpecFacetKey.

        True to make facet keys case insensitive when getting faceting values with prefixes or contains; false otherwise.

        :param case_insensitive: The case_insensitive of this GoogleCloudDiscoveryengineV1alphaSearchRequestFacetSpecFacetKey.
        :type case_insensitive: bool
        """

        self._case_insensitive = case_insensitive

    @property
    def contains(self):
        """Gets the contains of this GoogleCloudDiscoveryengineV1alphaSearchRequestFacetSpecFacetKey.

        Only get facet values that contains the given strings. For example, suppose \"category\" has three values \"Action > 2022\", \"Action > 2021\" and \"Sci-Fi > 2022\". If set \"contains\" to \"2022\", the \"category\" facet only contains \"Action > 2022\" and \"Sci-Fi > 2022\". Only supported on textual fields. Maximum is 10.

        :return: The contains of this GoogleCloudDiscoveryengineV1alphaSearchRequestFacetSpecFacetKey.
        :rtype: List[str]
        """
        return self._contains

    @contains.setter
    def contains(self, contains):
        """Sets the contains of this GoogleCloudDiscoveryengineV1alphaSearchRequestFacetSpecFacetKey.

        Only get facet values that contains the given strings. For example, suppose \"category\" has three values \"Action > 2022\", \"Action > 2021\" and \"Sci-Fi > 2022\". If set \"contains\" to \"2022\", the \"category\" facet only contains \"Action > 2022\" and \"Sci-Fi > 2022\". Only supported on textual fields. Maximum is 10.

        :param contains: The contains of this GoogleCloudDiscoveryengineV1alphaSearchRequestFacetSpecFacetKey.
        :type contains: List[str]
        """

        self._contains = contains

    @property
    def intervals(self):
        """Gets the intervals of this GoogleCloudDiscoveryengineV1alphaSearchRequestFacetSpecFacetKey.

        Set only if values should be bucketed into intervals. Must be set for facets with numerical values. Must not be set for facet with text values. Maximum number of intervals is 30.

        :return: The intervals of this GoogleCloudDiscoveryengineV1alphaSearchRequestFacetSpecFacetKey.
        :rtype: List[GoogleCloudDiscoveryengineV1alphaInterval]
        """
        return self._intervals

    @intervals.setter
    def intervals(self, intervals):
        """Sets the intervals of this GoogleCloudDiscoveryengineV1alphaSearchRequestFacetSpecFacetKey.

        Set only if values should be bucketed into intervals. Must be set for facets with numerical values. Must not be set for facet with text values. Maximum number of intervals is 30.

        :param intervals: The intervals of this GoogleCloudDiscoveryengineV1alphaSearchRequestFacetSpecFacetKey.
        :type intervals: List[GoogleCloudDiscoveryengineV1alphaInterval]
        """

        self._intervals = intervals

    @property
    def key(self):
        """Gets the key of this GoogleCloudDiscoveryengineV1alphaSearchRequestFacetSpecFacetKey.

        Required. Supported textual and numerical facet keys in Document object, over which the facet values are computed. Facet key is case-sensitive.

        :return: The key of this GoogleCloudDiscoveryengineV1alphaSearchRequestFacetSpecFacetKey.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this GoogleCloudDiscoveryengineV1alphaSearchRequestFacetSpecFacetKey.

        Required. Supported textual and numerical facet keys in Document object, over which the facet values are computed. Facet key is case-sensitive.

        :param key: The key of this GoogleCloudDiscoveryengineV1alphaSearchRequestFacetSpecFacetKey.
        :type key: str
        """

        self._key = key

    @property
    def order_by(self):
        """Gets the order_by of this GoogleCloudDiscoveryengineV1alphaSearchRequestFacetSpecFacetKey.

        The order in which documents are returned. Allowed values are: * \"count desc\", which means order by SearchResponse.Facet.values.count descending. * \"value desc\", which means order by SearchResponse.Facet.values.value descending. Only applies to textual facets. If not set, textual values are sorted in [natural order](https://en.wikipedia.org/wiki/Natural_sort_order); numerical intervals are sorted in the order given by FacetSpec.FacetKey.intervals.

        :return: The order_by of this GoogleCloudDiscoveryengineV1alphaSearchRequestFacetSpecFacetKey.
        :rtype: str
        """
        return self._order_by

    @order_by.setter
    def order_by(self, order_by):
        """Sets the order_by of this GoogleCloudDiscoveryengineV1alphaSearchRequestFacetSpecFacetKey.

        The order in which documents are returned. Allowed values are: * \"count desc\", which means order by SearchResponse.Facet.values.count descending. * \"value desc\", which means order by SearchResponse.Facet.values.value descending. Only applies to textual facets. If not set, textual values are sorted in [natural order](https://en.wikipedia.org/wiki/Natural_sort_order); numerical intervals are sorted in the order given by FacetSpec.FacetKey.intervals.

        :param order_by: The order_by of this GoogleCloudDiscoveryengineV1alphaSearchRequestFacetSpecFacetKey.
        :type order_by: str
        """

        self._order_by = order_by

    @property
    def prefixes(self):
        """Gets the prefixes of this GoogleCloudDiscoveryengineV1alphaSearchRequestFacetSpecFacetKey.

        Only get facet values that start with the given string prefix. For example, suppose \"category\" has three values \"Action > 2022\", \"Action > 2021\" and \"Sci-Fi > 2022\". If set \"prefixes\" to \"Action\", the \"category\" facet only contains \"Action > 2022\" and \"Action > 2021\". Only supported on textual fields. Maximum is 10.

        :return: The prefixes of this GoogleCloudDiscoveryengineV1alphaSearchRequestFacetSpecFacetKey.
        :rtype: List[str]
        """
        return self._prefixes

    @prefixes.setter
    def prefixes(self, prefixes):
        """Sets the prefixes of this GoogleCloudDiscoveryengineV1alphaSearchRequestFacetSpecFacetKey.

        Only get facet values that start with the given string prefix. For example, suppose \"category\" has three values \"Action > 2022\", \"Action > 2021\" and \"Sci-Fi > 2022\". If set \"prefixes\" to \"Action\", the \"category\" facet only contains \"Action > 2022\" and \"Action > 2021\". Only supported on textual fields. Maximum is 10.

        :param prefixes: The prefixes of this GoogleCloudDiscoveryengineV1alphaSearchRequestFacetSpecFacetKey.
        :type prefixes: List[str]
        """

        self._prefixes = prefixes

    @property
    def restricted_values(self):
        """Gets the restricted_values of this GoogleCloudDiscoveryengineV1alphaSearchRequestFacetSpecFacetKey.

        Only get facet for the given restricted values. Only supported on textual fields. For example, suppose \"category\" has three values \"Action > 2022\", \"Action > 2021\" and \"Sci-Fi > 2022\". If set \"restricted_values\" to \"Action > 2022\", the \"category\" facet only contains \"Action > 2022\". Only supported on textual fields. Maximum is 10.

        :return: The restricted_values of this GoogleCloudDiscoveryengineV1alphaSearchRequestFacetSpecFacetKey.
        :rtype: List[str]
        """
        return self._restricted_values

    @restricted_values.setter
    def restricted_values(self, restricted_values):
        """Sets the restricted_values of this GoogleCloudDiscoveryengineV1alphaSearchRequestFacetSpecFacetKey.

        Only get facet for the given restricted values. Only supported on textual fields. For example, suppose \"category\" has three values \"Action > 2022\", \"Action > 2021\" and \"Sci-Fi > 2022\". If set \"restricted_values\" to \"Action > 2022\", the \"category\" facet only contains \"Action > 2022\". Only supported on textual fields. Maximum is 10.

        :param restricted_values: The restricted_values of this GoogleCloudDiscoveryengineV1alphaSearchRequestFacetSpecFacetKey.
        :type restricted_values: List[str]
        """

        self._restricted_values = restricted_values
