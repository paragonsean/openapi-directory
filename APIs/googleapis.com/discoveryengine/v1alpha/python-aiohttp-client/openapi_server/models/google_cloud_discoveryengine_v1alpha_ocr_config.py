# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleCloudDiscoveryengineV1alphaOcrConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, enabled: bool=None, enhanced_document_elements: List[str]=None, use_native_text: bool=None):
        """GoogleCloudDiscoveryengineV1alphaOcrConfig - a model defined in OpenAPI

        :param enabled: The enabled of this GoogleCloudDiscoveryengineV1alphaOcrConfig.
        :param enhanced_document_elements: The enhanced_document_elements of this GoogleCloudDiscoveryengineV1alphaOcrConfig.
        :param use_native_text: The use_native_text of this GoogleCloudDiscoveryengineV1alphaOcrConfig.
        """
        self.openapi_types = {
            'enabled': bool,
            'enhanced_document_elements': List[str],
            'use_native_text': bool
        }

        self.attribute_map = {
            'enabled': 'enabled',
            'enhanced_document_elements': 'enhancedDocumentElements',
            'use_native_text': 'useNativeText'
        }

        self._enabled = enabled
        self._enhanced_document_elements = enhanced_document_elements
        self._use_native_text = use_native_text

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudDiscoveryengineV1alphaOcrConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudDiscoveryengineV1alphaOcrConfig of this GoogleCloudDiscoveryengineV1alphaOcrConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def enabled(self):
        """Gets the enabled of this GoogleCloudDiscoveryengineV1alphaOcrConfig.

        Required. If OCR is enabled or not. OCR must be enabled for other OcrConfig options to apply. We will only perform OCR on the first 80 pages of the PDF files.

        :return: The enabled of this GoogleCloudDiscoveryengineV1alphaOcrConfig.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this GoogleCloudDiscoveryengineV1alphaOcrConfig.

        Required. If OCR is enabled or not. OCR must be enabled for other OcrConfig options to apply. We will only perform OCR on the first 80 pages of the PDF files.

        :param enabled: The enabled of this GoogleCloudDiscoveryengineV1alphaOcrConfig.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def enhanced_document_elements(self):
        """Gets the enhanced_document_elements of this GoogleCloudDiscoveryengineV1alphaOcrConfig.

        Apply additional enhanced OCR processing to a list of document elements. Supported values: * `table`: advanced table parsing model.

        :return: The enhanced_document_elements of this GoogleCloudDiscoveryengineV1alphaOcrConfig.
        :rtype: List[str]
        """
        return self._enhanced_document_elements

    @enhanced_document_elements.setter
    def enhanced_document_elements(self, enhanced_document_elements):
        """Sets the enhanced_document_elements of this GoogleCloudDiscoveryengineV1alphaOcrConfig.

        Apply additional enhanced OCR processing to a list of document elements. Supported values: * `table`: advanced table parsing model.

        :param enhanced_document_elements: The enhanced_document_elements of this GoogleCloudDiscoveryengineV1alphaOcrConfig.
        :type enhanced_document_elements: List[str]
        """

        self._enhanced_document_elements = enhanced_document_elements

    @property
    def use_native_text(self):
        """Gets the use_native_text of this GoogleCloudDiscoveryengineV1alphaOcrConfig.

        If true, will use native text instead of OCR text on pages containing native text.

        :return: The use_native_text of this GoogleCloudDiscoveryengineV1alphaOcrConfig.
        :rtype: bool
        """
        return self._use_native_text

    @use_native_text.setter
    def use_native_text(self, use_native_text):
        """Sets the use_native_text of this GoogleCloudDiscoveryengineV1alphaOcrConfig.

        If true, will use native text instead of OCR text on pages containing native text.

        :param use_native_text: The use_native_text of this GoogleCloudDiscoveryengineV1alphaOcrConfig.
        :type use_native_text: bool
        """

        self._use_native_text = use_native_text
