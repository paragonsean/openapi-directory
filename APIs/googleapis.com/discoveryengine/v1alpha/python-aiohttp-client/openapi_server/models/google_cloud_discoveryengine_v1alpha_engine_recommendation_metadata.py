# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleCloudDiscoveryengineV1alphaEngineRecommendationMetadata(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data_state: str=None, last_tune_time: str=None, serving_state: str=None, tuning_operation: str=None):
        """GoogleCloudDiscoveryengineV1alphaEngineRecommendationMetadata - a model defined in OpenAPI

        :param data_state: The data_state of this GoogleCloudDiscoveryengineV1alphaEngineRecommendationMetadata.
        :param last_tune_time: The last_tune_time of this GoogleCloudDiscoveryengineV1alphaEngineRecommendationMetadata.
        :param serving_state: The serving_state of this GoogleCloudDiscoveryengineV1alphaEngineRecommendationMetadata.
        :param tuning_operation: The tuning_operation of this GoogleCloudDiscoveryengineV1alphaEngineRecommendationMetadata.
        """
        self.openapi_types = {
            'data_state': str,
            'last_tune_time': str,
            'serving_state': str,
            'tuning_operation': str
        }

        self.attribute_map = {
            'data_state': 'dataState',
            'last_tune_time': 'lastTuneTime',
            'serving_state': 'servingState',
            'tuning_operation': 'tuningOperation'
        }

        self._data_state = data_state
        self._last_tune_time = last_tune_time
        self._serving_state = serving_state
        self._tuning_operation = tuning_operation

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudDiscoveryengineV1alphaEngineRecommendationMetadata':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudDiscoveryengineV1alphaEngineRecommendationMetadata of this GoogleCloudDiscoveryengineV1alphaEngineRecommendationMetadata.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data_state(self):
        """Gets the data_state of this GoogleCloudDiscoveryengineV1alphaEngineRecommendationMetadata.

        Output only. The state of data requirements for this engine: `DATA_OK` and `DATA_ERROR`. Engine cannot be trained if the data is in `DATA_ERROR` state. Engine can have `DATA_ERROR` state even if serving state is `ACTIVE`: engines were trained successfully before, but cannot be refreshed because the underlying engine no longer has sufficient data for training.

        :return: The data_state of this GoogleCloudDiscoveryengineV1alphaEngineRecommendationMetadata.
        :rtype: str
        """
        return self._data_state

    @data_state.setter
    def data_state(self, data_state):
        """Sets the data_state of this GoogleCloudDiscoveryengineV1alphaEngineRecommendationMetadata.

        Output only. The state of data requirements for this engine: `DATA_OK` and `DATA_ERROR`. Engine cannot be trained if the data is in `DATA_ERROR` state. Engine can have `DATA_ERROR` state even if serving state is `ACTIVE`: engines were trained successfully before, but cannot be refreshed because the underlying engine no longer has sufficient data for training.

        :param data_state: The data_state of this GoogleCloudDiscoveryengineV1alphaEngineRecommendationMetadata.
        :type data_state: str
        """
        allowed_values = ["DATA_STATE_UNSPECIFIED", "DATA_OK", "DATA_ERROR"]  # noqa: E501
        if data_state not in allowed_values:
            raise ValueError(
                "Invalid value for `data_state` ({0}), must be one of {1}"
                .format(data_state, allowed_values)
            )

        self._data_state = data_state

    @property
    def last_tune_time(self):
        """Gets the last_tune_time of this GoogleCloudDiscoveryengineV1alphaEngineRecommendationMetadata.

        Output only. The timestamp when the latest successful tune finished. Only applicable on Media Recommendation engines.

        :return: The last_tune_time of this GoogleCloudDiscoveryengineV1alphaEngineRecommendationMetadata.
        :rtype: str
        """
        return self._last_tune_time

    @last_tune_time.setter
    def last_tune_time(self, last_tune_time):
        """Sets the last_tune_time of this GoogleCloudDiscoveryengineV1alphaEngineRecommendationMetadata.

        Output only. The timestamp when the latest successful tune finished. Only applicable on Media Recommendation engines.

        :param last_tune_time: The last_tune_time of this GoogleCloudDiscoveryengineV1alphaEngineRecommendationMetadata.
        :type last_tune_time: str
        """

        self._last_tune_time = last_tune_time

    @property
    def serving_state(self):
        """Gets the serving_state of this GoogleCloudDiscoveryengineV1alphaEngineRecommendationMetadata.

        Output only. The serving state of the engine: `ACTIVE`, `NOT_ACTIVE`.

        :return: The serving_state of this GoogleCloudDiscoveryengineV1alphaEngineRecommendationMetadata.
        :rtype: str
        """
        return self._serving_state

    @serving_state.setter
    def serving_state(self, serving_state):
        """Sets the serving_state of this GoogleCloudDiscoveryengineV1alphaEngineRecommendationMetadata.

        Output only. The serving state of the engine: `ACTIVE`, `NOT_ACTIVE`.

        :param serving_state: The serving_state of this GoogleCloudDiscoveryengineV1alphaEngineRecommendationMetadata.
        :type serving_state: str
        """
        allowed_values = ["SERVING_STATE_UNSPECIFIED", "INACTIVE", "ACTIVE", "TUNED"]  # noqa: E501
        if serving_state not in allowed_values:
            raise ValueError(
                "Invalid value for `serving_state` ({0}), must be one of {1}"
                .format(serving_state, allowed_values)
            )

        self._serving_state = serving_state

    @property
    def tuning_operation(self):
        """Gets the tuning_operation of this GoogleCloudDiscoveryengineV1alphaEngineRecommendationMetadata.

        Output only. The latest tune operation id associated with the engine. Only applicable on Media Recommendation engines. If present, this operation id can be used to determine if there is an ongoing tune for this engine. To check the operation status, send the GetOperation request with this operation id in the engine resource format. If no tuning has happened for this engine, the string is empty.

        :return: The tuning_operation of this GoogleCloudDiscoveryengineV1alphaEngineRecommendationMetadata.
        :rtype: str
        """
        return self._tuning_operation

    @tuning_operation.setter
    def tuning_operation(self, tuning_operation):
        """Sets the tuning_operation of this GoogleCloudDiscoveryengineV1alphaEngineRecommendationMetadata.

        Output only. The latest tune operation id associated with the engine. Only applicable on Media Recommendation engines. If present, this operation id can be used to determine if there is an ongoing tune for this engine. To check the operation status, send the GetOperation request with this operation id in the engine resource format. If no tuning has happened for this engine, the string is empty.

        :param tuning_operation: The tuning_operation of this GoogleCloudDiscoveryengineV1alphaEngineRecommendationMetadata.
        :type tuning_operation: str
        """

        self._tuning_operation = tuning_operation
