# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleCloudDiscoveryengineV1alphaUserInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, user_agent: str=None, user_id: str=None):
        """GoogleCloudDiscoveryengineV1alphaUserInfo - a model defined in OpenAPI

        :param user_agent: The user_agent of this GoogleCloudDiscoveryengineV1alphaUserInfo.
        :param user_id: The user_id of this GoogleCloudDiscoveryengineV1alphaUserInfo.
        """
        self.openapi_types = {
            'user_agent': str,
            'user_id': str
        }

        self.attribute_map = {
            'user_agent': 'userAgent',
            'user_id': 'userId'
        }

        self._user_agent = user_agent
        self._user_id = user_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudDiscoveryengineV1alphaUserInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudDiscoveryengineV1alphaUserInfo of this GoogleCloudDiscoveryengineV1alphaUserInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def user_agent(self):
        """Gets the user_agent of this GoogleCloudDiscoveryengineV1alphaUserInfo.

        User agent as included in the HTTP header. The field must be a UTF-8 encoded string with a length limit of 1,000 characters. Otherwise, an `INVALID_ARGUMENT` error is returned. This should not be set when using the client side event reporting with GTM or JavaScript tag in UserEventService.CollectUserEvent or if UserEvent.direct_user_request is set.

        :return: The user_agent of this GoogleCloudDiscoveryengineV1alphaUserInfo.
        :rtype: str
        """
        return self._user_agent

    @user_agent.setter
    def user_agent(self, user_agent):
        """Sets the user_agent of this GoogleCloudDiscoveryengineV1alphaUserInfo.

        User agent as included in the HTTP header. The field must be a UTF-8 encoded string with a length limit of 1,000 characters. Otherwise, an `INVALID_ARGUMENT` error is returned. This should not be set when using the client side event reporting with GTM or JavaScript tag in UserEventService.CollectUserEvent or if UserEvent.direct_user_request is set.

        :param user_agent: The user_agent of this GoogleCloudDiscoveryengineV1alphaUserInfo.
        :type user_agent: str
        """

        self._user_agent = user_agent

    @property
    def user_id(self):
        """Gets the user_id of this GoogleCloudDiscoveryengineV1alphaUserInfo.

        Highly recommended for logged-in users. Unique identifier for logged-in user, such as a user name. Don't set for anonymous users. Always use a hashed value for this ID. Don't set the field to the same fixed ID for different users. This mixes the event history of those users together, which results in degraded model quality. The field must be a UTF-8 encoded string with a length limit of 128 characters. Otherwise, an `INVALID_ARGUMENT` error is returned.

        :return: The user_id of this GoogleCloudDiscoveryengineV1alphaUserInfo.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this GoogleCloudDiscoveryengineV1alphaUserInfo.

        Highly recommended for logged-in users. Unique identifier for logged-in user, such as a user name. Don't set for anonymous users. Always use a hashed value for this ID. Don't set the field to the same fixed ID for different users. This mixes the event history of those users together, which results in degraded model quality. The field must be a UTF-8 encoded string with a length limit of 128 characters. Otherwise, an `INVALID_ARGUMENT` error is returned.

        :param user_id: The user_id of this GoogleCloudDiscoveryengineV1alphaUserInfo.
        :type user_id: str
        """

        self._user_id = user_id
