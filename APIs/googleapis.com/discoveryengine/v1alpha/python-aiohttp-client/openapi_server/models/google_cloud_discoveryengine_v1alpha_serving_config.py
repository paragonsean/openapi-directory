# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_discoveryengine_v1alpha_custom_fine_tuning_spec import GoogleCloudDiscoveryengineV1alphaCustomFineTuningSpec
from openapi_server.models.google_cloud_discoveryengine_v1alpha_embedding_config import GoogleCloudDiscoveryengineV1alphaEmbeddingConfig
from openapi_server.models.google_cloud_discoveryengine_v1alpha_guided_search_spec import GoogleCloudDiscoveryengineV1alphaGuidedSearchSpec
from openapi_server.models.google_cloud_discoveryengine_v1alpha_serving_config_generic_config import GoogleCloudDiscoveryengineV1alphaServingConfigGenericConfig
from openapi_server.models.google_cloud_discoveryengine_v1alpha_serving_config_media_config import GoogleCloudDiscoveryengineV1alphaServingConfigMediaConfig
from openapi_server import util


class GoogleCloudDiscoveryengineV1alphaServingConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, boost_control_ids: List[str]=None, create_time: str=None, custom_fine_tuning_spec: GoogleCloudDiscoveryengineV1alphaCustomFineTuningSpec=None, display_name: str=None, dissociate_control_ids: List[str]=None, diversity_level: str=None, embedding_config: GoogleCloudDiscoveryengineV1alphaEmbeddingConfig=None, filter_control_ids: List[str]=None, generic_config: GoogleCloudDiscoveryengineV1alphaServingConfigGenericConfig=None, guided_search_spec: GoogleCloudDiscoveryengineV1alphaGuidedSearchSpec=None, ignore_control_ids: List[str]=None, media_config: GoogleCloudDiscoveryengineV1alphaServingConfigMediaConfig=None, model_id: str=None, name: str=None, oneway_synonyms_control_ids: List[str]=None, ranking_expression: str=None, redirect_control_ids: List[str]=None, replacement_control_ids: List[str]=None, solution_type: str=None, synonyms_control_ids: List[str]=None, update_time: str=None):
        """GoogleCloudDiscoveryengineV1alphaServingConfig - a model defined in OpenAPI

        :param boost_control_ids: The boost_control_ids of this GoogleCloudDiscoveryengineV1alphaServingConfig.
        :param create_time: The create_time of this GoogleCloudDiscoveryengineV1alphaServingConfig.
        :param custom_fine_tuning_spec: The custom_fine_tuning_spec of this GoogleCloudDiscoveryengineV1alphaServingConfig.
        :param display_name: The display_name of this GoogleCloudDiscoveryengineV1alphaServingConfig.
        :param dissociate_control_ids: The dissociate_control_ids of this GoogleCloudDiscoveryengineV1alphaServingConfig.
        :param diversity_level: The diversity_level of this GoogleCloudDiscoveryengineV1alphaServingConfig.
        :param embedding_config: The embedding_config of this GoogleCloudDiscoveryengineV1alphaServingConfig.
        :param filter_control_ids: The filter_control_ids of this GoogleCloudDiscoveryengineV1alphaServingConfig.
        :param generic_config: The generic_config of this GoogleCloudDiscoveryengineV1alphaServingConfig.
        :param guided_search_spec: The guided_search_spec of this GoogleCloudDiscoveryengineV1alphaServingConfig.
        :param ignore_control_ids: The ignore_control_ids of this GoogleCloudDiscoveryengineV1alphaServingConfig.
        :param media_config: The media_config of this GoogleCloudDiscoveryengineV1alphaServingConfig.
        :param model_id: The model_id of this GoogleCloudDiscoveryengineV1alphaServingConfig.
        :param name: The name of this GoogleCloudDiscoveryengineV1alphaServingConfig.
        :param oneway_synonyms_control_ids: The oneway_synonyms_control_ids of this GoogleCloudDiscoveryengineV1alphaServingConfig.
        :param ranking_expression: The ranking_expression of this GoogleCloudDiscoveryengineV1alphaServingConfig.
        :param redirect_control_ids: The redirect_control_ids of this GoogleCloudDiscoveryengineV1alphaServingConfig.
        :param replacement_control_ids: The replacement_control_ids of this GoogleCloudDiscoveryengineV1alphaServingConfig.
        :param solution_type: The solution_type of this GoogleCloudDiscoveryengineV1alphaServingConfig.
        :param synonyms_control_ids: The synonyms_control_ids of this GoogleCloudDiscoveryengineV1alphaServingConfig.
        :param update_time: The update_time of this GoogleCloudDiscoveryengineV1alphaServingConfig.
        """
        self.openapi_types = {
            'boost_control_ids': List[str],
            'create_time': str,
            'custom_fine_tuning_spec': GoogleCloudDiscoveryengineV1alphaCustomFineTuningSpec,
            'display_name': str,
            'dissociate_control_ids': List[str],
            'diversity_level': str,
            'embedding_config': GoogleCloudDiscoveryengineV1alphaEmbeddingConfig,
            'filter_control_ids': List[str],
            'generic_config': GoogleCloudDiscoveryengineV1alphaServingConfigGenericConfig,
            'guided_search_spec': GoogleCloudDiscoveryengineV1alphaGuidedSearchSpec,
            'ignore_control_ids': List[str],
            'media_config': GoogleCloudDiscoveryengineV1alphaServingConfigMediaConfig,
            'model_id': str,
            'name': str,
            'oneway_synonyms_control_ids': List[str],
            'ranking_expression': str,
            'redirect_control_ids': List[str],
            'replacement_control_ids': List[str],
            'solution_type': str,
            'synonyms_control_ids': List[str],
            'update_time': str
        }

        self.attribute_map = {
            'boost_control_ids': 'boostControlIds',
            'create_time': 'createTime',
            'custom_fine_tuning_spec': 'customFineTuningSpec',
            'display_name': 'displayName',
            'dissociate_control_ids': 'dissociateControlIds',
            'diversity_level': 'diversityLevel',
            'embedding_config': 'embeddingConfig',
            'filter_control_ids': 'filterControlIds',
            'generic_config': 'genericConfig',
            'guided_search_spec': 'guidedSearchSpec',
            'ignore_control_ids': 'ignoreControlIds',
            'media_config': 'mediaConfig',
            'model_id': 'modelId',
            'name': 'name',
            'oneway_synonyms_control_ids': 'onewaySynonymsControlIds',
            'ranking_expression': 'rankingExpression',
            'redirect_control_ids': 'redirectControlIds',
            'replacement_control_ids': 'replacementControlIds',
            'solution_type': 'solutionType',
            'synonyms_control_ids': 'synonymsControlIds',
            'update_time': 'updateTime'
        }

        self._boost_control_ids = boost_control_ids
        self._create_time = create_time
        self._custom_fine_tuning_spec = custom_fine_tuning_spec
        self._display_name = display_name
        self._dissociate_control_ids = dissociate_control_ids
        self._diversity_level = diversity_level
        self._embedding_config = embedding_config
        self._filter_control_ids = filter_control_ids
        self._generic_config = generic_config
        self._guided_search_spec = guided_search_spec
        self._ignore_control_ids = ignore_control_ids
        self._media_config = media_config
        self._model_id = model_id
        self._name = name
        self._oneway_synonyms_control_ids = oneway_synonyms_control_ids
        self._ranking_expression = ranking_expression
        self._redirect_control_ids = redirect_control_ids
        self._replacement_control_ids = replacement_control_ids
        self._solution_type = solution_type
        self._synonyms_control_ids = synonyms_control_ids
        self._update_time = update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudDiscoveryengineV1alphaServingConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudDiscoveryengineV1alphaServingConfig of this GoogleCloudDiscoveryengineV1alphaServingConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def boost_control_ids(self):
        """Gets the boost_control_ids of this GoogleCloudDiscoveryengineV1alphaServingConfig.

        Boost controls to use in serving path. All triggered boost controls will be applied. Boost controls must be in the same data store as the serving config. Maximum of 20 boost controls.

        :return: The boost_control_ids of this GoogleCloudDiscoveryengineV1alphaServingConfig.
        :rtype: List[str]
        """
        return self._boost_control_ids

    @boost_control_ids.setter
    def boost_control_ids(self, boost_control_ids):
        """Sets the boost_control_ids of this GoogleCloudDiscoveryengineV1alphaServingConfig.

        Boost controls to use in serving path. All triggered boost controls will be applied. Boost controls must be in the same data store as the serving config. Maximum of 20 boost controls.

        :param boost_control_ids: The boost_control_ids of this GoogleCloudDiscoveryengineV1alphaServingConfig.
        :type boost_control_ids: List[str]
        """

        self._boost_control_ids = boost_control_ids

    @property
    def create_time(self):
        """Gets the create_time of this GoogleCloudDiscoveryengineV1alphaServingConfig.

        Output only. ServingConfig created timestamp.

        :return: The create_time of this GoogleCloudDiscoveryengineV1alphaServingConfig.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this GoogleCloudDiscoveryengineV1alphaServingConfig.

        Output only. ServingConfig created timestamp.

        :param create_time: The create_time of this GoogleCloudDiscoveryengineV1alphaServingConfig.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def custom_fine_tuning_spec(self):
        """Gets the custom_fine_tuning_spec of this GoogleCloudDiscoveryengineV1alphaServingConfig.


        :return: The custom_fine_tuning_spec of this GoogleCloudDiscoveryengineV1alphaServingConfig.
        :rtype: GoogleCloudDiscoveryengineV1alphaCustomFineTuningSpec
        """
        return self._custom_fine_tuning_spec

    @custom_fine_tuning_spec.setter
    def custom_fine_tuning_spec(self, custom_fine_tuning_spec):
        """Sets the custom_fine_tuning_spec of this GoogleCloudDiscoveryengineV1alphaServingConfig.


        :param custom_fine_tuning_spec: The custom_fine_tuning_spec of this GoogleCloudDiscoveryengineV1alphaServingConfig.
        :type custom_fine_tuning_spec: GoogleCloudDiscoveryengineV1alphaCustomFineTuningSpec
        """

        self._custom_fine_tuning_spec = custom_fine_tuning_spec

    @property
    def display_name(self):
        """Gets the display_name of this GoogleCloudDiscoveryengineV1alphaServingConfig.

        Required. The human readable serving config display name. Used in Discovery UI. This field must be a UTF-8 encoded string with a length limit of 128 characters. Otherwise, an INVALID_ARGUMENT error is returned.

        :return: The display_name of this GoogleCloudDiscoveryengineV1alphaServingConfig.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this GoogleCloudDiscoveryengineV1alphaServingConfig.

        Required. The human readable serving config display name. Used in Discovery UI. This field must be a UTF-8 encoded string with a length limit of 128 characters. Otherwise, an INVALID_ARGUMENT error is returned.

        :param display_name: The display_name of this GoogleCloudDiscoveryengineV1alphaServingConfig.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def dissociate_control_ids(self):
        """Gets the dissociate_control_ids of this GoogleCloudDiscoveryengineV1alphaServingConfig.

        Condition do not associate specifications. If multiple do not associate conditions match, all matching do not associate controls in the list will execute. Order does not matter. Maximum number of specifications is 100. Can only be set if SolutionType is SOLUTION_TYPE_SEARCH.

        :return: The dissociate_control_ids of this GoogleCloudDiscoveryengineV1alphaServingConfig.
        :rtype: List[str]
        """
        return self._dissociate_control_ids

    @dissociate_control_ids.setter
    def dissociate_control_ids(self, dissociate_control_ids):
        """Sets the dissociate_control_ids of this GoogleCloudDiscoveryengineV1alphaServingConfig.

        Condition do not associate specifications. If multiple do not associate conditions match, all matching do not associate controls in the list will execute. Order does not matter. Maximum number of specifications is 100. Can only be set if SolutionType is SOLUTION_TYPE_SEARCH.

        :param dissociate_control_ids: The dissociate_control_ids of this GoogleCloudDiscoveryengineV1alphaServingConfig.
        :type dissociate_control_ids: List[str]
        """

        self._dissociate_control_ids = dissociate_control_ids

    @property
    def diversity_level(self):
        """Gets the diversity_level of this GoogleCloudDiscoveryengineV1alphaServingConfig.

        How much diversity to use in recommendation model results e.g. `medium-diversity` or `high-diversity`. Currently supported values: * `no-diversity` * `low-diversity` * `medium-diversity` * `high-diversity` * `auto-diversity` If not specified, we choose default based on recommendation model type. Default value: `no-diversity`. Can only be set if SolutionType is SOLUTION_TYPE_RECOMMENDATION.

        :return: The diversity_level of this GoogleCloudDiscoveryengineV1alphaServingConfig.
        :rtype: str
        """
        return self._diversity_level

    @diversity_level.setter
    def diversity_level(self, diversity_level):
        """Sets the diversity_level of this GoogleCloudDiscoveryengineV1alphaServingConfig.

        How much diversity to use in recommendation model results e.g. `medium-diversity` or `high-diversity`. Currently supported values: * `no-diversity` * `low-diversity` * `medium-diversity` * `high-diversity` * `auto-diversity` If not specified, we choose default based on recommendation model type. Default value: `no-diversity`. Can only be set if SolutionType is SOLUTION_TYPE_RECOMMENDATION.

        :param diversity_level: The diversity_level of this GoogleCloudDiscoveryengineV1alphaServingConfig.
        :type diversity_level: str
        """

        self._diversity_level = diversity_level

    @property
    def embedding_config(self):
        """Gets the embedding_config of this GoogleCloudDiscoveryengineV1alphaServingConfig.


        :return: The embedding_config of this GoogleCloudDiscoveryengineV1alphaServingConfig.
        :rtype: GoogleCloudDiscoveryengineV1alphaEmbeddingConfig
        """
        return self._embedding_config

    @embedding_config.setter
    def embedding_config(self, embedding_config):
        """Sets the embedding_config of this GoogleCloudDiscoveryengineV1alphaServingConfig.


        :param embedding_config: The embedding_config of this GoogleCloudDiscoveryengineV1alphaServingConfig.
        :type embedding_config: GoogleCloudDiscoveryengineV1alphaEmbeddingConfig
        """

        self._embedding_config = embedding_config

    @property
    def filter_control_ids(self):
        """Gets the filter_control_ids of this GoogleCloudDiscoveryengineV1alphaServingConfig.

        Filter controls to use in serving path. All triggered filter controls will be applied. Filter controls must be in the same data store as the serving config. Maximum of 20 filter controls.

        :return: The filter_control_ids of this GoogleCloudDiscoveryengineV1alphaServingConfig.
        :rtype: List[str]
        """
        return self._filter_control_ids

    @filter_control_ids.setter
    def filter_control_ids(self, filter_control_ids):
        """Sets the filter_control_ids of this GoogleCloudDiscoveryengineV1alphaServingConfig.

        Filter controls to use in serving path. All triggered filter controls will be applied. Filter controls must be in the same data store as the serving config. Maximum of 20 filter controls.

        :param filter_control_ids: The filter_control_ids of this GoogleCloudDiscoveryengineV1alphaServingConfig.
        :type filter_control_ids: List[str]
        """

        self._filter_control_ids = filter_control_ids

    @property
    def generic_config(self):
        """Gets the generic_config of this GoogleCloudDiscoveryengineV1alphaServingConfig.


        :return: The generic_config of this GoogleCloudDiscoveryengineV1alphaServingConfig.
        :rtype: GoogleCloudDiscoveryengineV1alphaServingConfigGenericConfig
        """
        return self._generic_config

    @generic_config.setter
    def generic_config(self, generic_config):
        """Sets the generic_config of this GoogleCloudDiscoveryengineV1alphaServingConfig.


        :param generic_config: The generic_config of this GoogleCloudDiscoveryengineV1alphaServingConfig.
        :type generic_config: GoogleCloudDiscoveryengineV1alphaServingConfigGenericConfig
        """

        self._generic_config = generic_config

    @property
    def guided_search_spec(self):
        """Gets the guided_search_spec of this GoogleCloudDiscoveryengineV1alphaServingConfig.


        :return: The guided_search_spec of this GoogleCloudDiscoveryengineV1alphaServingConfig.
        :rtype: GoogleCloudDiscoveryengineV1alphaGuidedSearchSpec
        """
        return self._guided_search_spec

    @guided_search_spec.setter
    def guided_search_spec(self, guided_search_spec):
        """Sets the guided_search_spec of this GoogleCloudDiscoveryengineV1alphaServingConfig.


        :param guided_search_spec: The guided_search_spec of this GoogleCloudDiscoveryengineV1alphaServingConfig.
        :type guided_search_spec: GoogleCloudDiscoveryengineV1alphaGuidedSearchSpec
        """

        self._guided_search_spec = guided_search_spec

    @property
    def ignore_control_ids(self):
        """Gets the ignore_control_ids of this GoogleCloudDiscoveryengineV1alphaServingConfig.

        Condition ignore specifications. If multiple ignore conditions match, all matching ignore controls in the list will execute. Order does not matter. Maximum number of specifications is 100.

        :return: The ignore_control_ids of this GoogleCloudDiscoveryengineV1alphaServingConfig.
        :rtype: List[str]
        """
        return self._ignore_control_ids

    @ignore_control_ids.setter
    def ignore_control_ids(self, ignore_control_ids):
        """Sets the ignore_control_ids of this GoogleCloudDiscoveryengineV1alphaServingConfig.

        Condition ignore specifications. If multiple ignore conditions match, all matching ignore controls in the list will execute. Order does not matter. Maximum number of specifications is 100.

        :param ignore_control_ids: The ignore_control_ids of this GoogleCloudDiscoveryengineV1alphaServingConfig.
        :type ignore_control_ids: List[str]
        """

        self._ignore_control_ids = ignore_control_ids

    @property
    def media_config(self):
        """Gets the media_config of this GoogleCloudDiscoveryengineV1alphaServingConfig.


        :return: The media_config of this GoogleCloudDiscoveryengineV1alphaServingConfig.
        :rtype: GoogleCloudDiscoveryengineV1alphaServingConfigMediaConfig
        """
        return self._media_config

    @media_config.setter
    def media_config(self, media_config):
        """Sets the media_config of this GoogleCloudDiscoveryengineV1alphaServingConfig.


        :param media_config: The media_config of this GoogleCloudDiscoveryengineV1alphaServingConfig.
        :type media_config: GoogleCloudDiscoveryengineV1alphaServingConfigMediaConfig
        """

        self._media_config = media_config

    @property
    def model_id(self):
        """Gets the model_id of this GoogleCloudDiscoveryengineV1alphaServingConfig.

        The id of the model to use at serving time. Currently only RecommendationModels are supported. Can be changed but only to a compatible model (e.g. others-you-may-like CTR to others-you-may-like CVR). Required when SolutionType is SOLUTION_TYPE_RECOMMENDATION.

        :return: The model_id of this GoogleCloudDiscoveryengineV1alphaServingConfig.
        :rtype: str
        """
        return self._model_id

    @model_id.setter
    def model_id(self, model_id):
        """Sets the model_id of this GoogleCloudDiscoveryengineV1alphaServingConfig.

        The id of the model to use at serving time. Currently only RecommendationModels are supported. Can be changed but only to a compatible model (e.g. others-you-may-like CTR to others-you-may-like CVR). Required when SolutionType is SOLUTION_TYPE_RECOMMENDATION.

        :param model_id: The model_id of this GoogleCloudDiscoveryengineV1alphaServingConfig.
        :type model_id: str
        """

        self._model_id = model_id

    @property
    def name(self):
        """Gets the name of this GoogleCloudDiscoveryengineV1alphaServingConfig.

        Immutable. Fully qualified name `projects/{project}/locations/{location}/collections/{collection_id}/dataStores/{data_store_id}/servingConfigs/{serving_config_id}`

        :return: The name of this GoogleCloudDiscoveryengineV1alphaServingConfig.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GoogleCloudDiscoveryengineV1alphaServingConfig.

        Immutable. Fully qualified name `projects/{project}/locations/{location}/collections/{collection_id}/dataStores/{data_store_id}/servingConfigs/{serving_config_id}`

        :param name: The name of this GoogleCloudDiscoveryengineV1alphaServingConfig.
        :type name: str
        """

        self._name = name

    @property
    def oneway_synonyms_control_ids(self):
        """Gets the oneway_synonyms_control_ids of this GoogleCloudDiscoveryengineV1alphaServingConfig.

        Condition oneway synonyms specifications. If multiple oneway synonyms conditions match, all matching oneway synonyms controls in the list will execute. Maximum number of specifications is 100. Can only be set if SolutionType is SOLUTION_TYPE_SEARCH.

        :return: The oneway_synonyms_control_ids of this GoogleCloudDiscoveryengineV1alphaServingConfig.
        :rtype: List[str]
        """
        return self._oneway_synonyms_control_ids

    @oneway_synonyms_control_ids.setter
    def oneway_synonyms_control_ids(self, oneway_synonyms_control_ids):
        """Sets the oneway_synonyms_control_ids of this GoogleCloudDiscoveryengineV1alphaServingConfig.

        Condition oneway synonyms specifications. If multiple oneway synonyms conditions match, all matching oneway synonyms controls in the list will execute. Maximum number of specifications is 100. Can only be set if SolutionType is SOLUTION_TYPE_SEARCH.

        :param oneway_synonyms_control_ids: The oneway_synonyms_control_ids of this GoogleCloudDiscoveryengineV1alphaServingConfig.
        :type oneway_synonyms_control_ids: List[str]
        """

        self._oneway_synonyms_control_ids = oneway_synonyms_control_ids

    @property
    def ranking_expression(self):
        """Gets the ranking_expression of this GoogleCloudDiscoveryengineV1alphaServingConfig.

        The ranking expression controls the customized ranking on retrieval documents. To leverage this, document embedding is required. The ranking expression setting in ServingConfig applies to all search requests served by the serving config. However, if SearchRequest.ranking_expression is specified, it overrides the ServingConfig ranking expression. The ranking expression is a single function or multiple functions that are joined by \"+\". * ranking_expression = function, { \" + \", function }; Supported functions: * double * relevance_score * double * dotProduct(embedding_field_path) Function variables: relevance_score: pre-defined keywords, used for measure relevance between query and document. embedding_field_path: the document embedding field used with query embedding vector. dotProduct: embedding function between embedding_field_path and query embedding vector. Example ranking expression: If document has an embedding field doc_embedding, the ranking expression could be 0.5 * relevance_score + 0.3 * dotProduct(doc_embedding).

        :return: The ranking_expression of this GoogleCloudDiscoveryengineV1alphaServingConfig.
        :rtype: str
        """
        return self._ranking_expression

    @ranking_expression.setter
    def ranking_expression(self, ranking_expression):
        """Sets the ranking_expression of this GoogleCloudDiscoveryengineV1alphaServingConfig.

        The ranking expression controls the customized ranking on retrieval documents. To leverage this, document embedding is required. The ranking expression setting in ServingConfig applies to all search requests served by the serving config. However, if SearchRequest.ranking_expression is specified, it overrides the ServingConfig ranking expression. The ranking expression is a single function or multiple functions that are joined by \"+\". * ranking_expression = function, { \" + \", function }; Supported functions: * double * relevance_score * double * dotProduct(embedding_field_path) Function variables: relevance_score: pre-defined keywords, used for measure relevance between query and document. embedding_field_path: the document embedding field used with query embedding vector. dotProduct: embedding function between embedding_field_path and query embedding vector. Example ranking expression: If document has an embedding field doc_embedding, the ranking expression could be 0.5 * relevance_score + 0.3 * dotProduct(doc_embedding).

        :param ranking_expression: The ranking_expression of this GoogleCloudDiscoveryengineV1alphaServingConfig.
        :type ranking_expression: str
        """

        self._ranking_expression = ranking_expression

    @property
    def redirect_control_ids(self):
        """Gets the redirect_control_ids of this GoogleCloudDiscoveryengineV1alphaServingConfig.

        IDs of the redirect controls. Only the first triggered redirect action is applied, even if multiple apply. Maximum number of specifications is 100. Can only be set if SolutionType is SOLUTION_TYPE_SEARCH.

        :return: The redirect_control_ids of this GoogleCloudDiscoveryengineV1alphaServingConfig.
        :rtype: List[str]
        """
        return self._redirect_control_ids

    @redirect_control_ids.setter
    def redirect_control_ids(self, redirect_control_ids):
        """Sets the redirect_control_ids of this GoogleCloudDiscoveryengineV1alphaServingConfig.

        IDs of the redirect controls. Only the first triggered redirect action is applied, even if multiple apply. Maximum number of specifications is 100. Can only be set if SolutionType is SOLUTION_TYPE_SEARCH.

        :param redirect_control_ids: The redirect_control_ids of this GoogleCloudDiscoveryengineV1alphaServingConfig.
        :type redirect_control_ids: List[str]
        """

        self._redirect_control_ids = redirect_control_ids

    @property
    def replacement_control_ids(self):
        """Gets the replacement_control_ids of this GoogleCloudDiscoveryengineV1alphaServingConfig.

        Condition replacement specifications. Applied according to the order in the list. A previously replaced term can not be re-replaced. Maximum number of specifications is 100. Can only be set if SolutionType is SOLUTION_TYPE_SEARCH.

        :return: The replacement_control_ids of this GoogleCloudDiscoveryengineV1alphaServingConfig.
        :rtype: List[str]
        """
        return self._replacement_control_ids

    @replacement_control_ids.setter
    def replacement_control_ids(self, replacement_control_ids):
        """Sets the replacement_control_ids of this GoogleCloudDiscoveryengineV1alphaServingConfig.

        Condition replacement specifications. Applied according to the order in the list. A previously replaced term can not be re-replaced. Maximum number of specifications is 100. Can only be set if SolutionType is SOLUTION_TYPE_SEARCH.

        :param replacement_control_ids: The replacement_control_ids of this GoogleCloudDiscoveryengineV1alphaServingConfig.
        :type replacement_control_ids: List[str]
        """

        self._replacement_control_ids = replacement_control_ids

    @property
    def solution_type(self):
        """Gets the solution_type of this GoogleCloudDiscoveryengineV1alphaServingConfig.

        Required. Immutable. Specifies the solution type that a serving config can be associated with.

        :return: The solution_type of this GoogleCloudDiscoveryengineV1alphaServingConfig.
        :rtype: str
        """
        return self._solution_type

    @solution_type.setter
    def solution_type(self, solution_type):
        """Sets the solution_type of this GoogleCloudDiscoveryengineV1alphaServingConfig.

        Required. Immutable. Specifies the solution type that a serving config can be associated with.

        :param solution_type: The solution_type of this GoogleCloudDiscoveryengineV1alphaServingConfig.
        :type solution_type: str
        """
        allowed_values = ["SOLUTION_TYPE_UNSPECIFIED", "SOLUTION_TYPE_RECOMMENDATION", "SOLUTION_TYPE_SEARCH", "SOLUTION_TYPE_CHAT"]  # noqa: E501
        if solution_type not in allowed_values:
            raise ValueError(
                "Invalid value for `solution_type` ({0}), must be one of {1}"
                .format(solution_type, allowed_values)
            )

        self._solution_type = solution_type

    @property
    def synonyms_control_ids(self):
        """Gets the synonyms_control_ids of this GoogleCloudDiscoveryengineV1alphaServingConfig.

        Condition synonyms specifications. If multiple synonyms conditions match, all matching synonyms controls in the list will execute. Maximum number of specifications is 100. Can only be set if SolutionType is SOLUTION_TYPE_SEARCH.

        :return: The synonyms_control_ids of this GoogleCloudDiscoveryengineV1alphaServingConfig.
        :rtype: List[str]
        """
        return self._synonyms_control_ids

    @synonyms_control_ids.setter
    def synonyms_control_ids(self, synonyms_control_ids):
        """Sets the synonyms_control_ids of this GoogleCloudDiscoveryengineV1alphaServingConfig.

        Condition synonyms specifications. If multiple synonyms conditions match, all matching synonyms controls in the list will execute. Maximum number of specifications is 100. Can only be set if SolutionType is SOLUTION_TYPE_SEARCH.

        :param synonyms_control_ids: The synonyms_control_ids of this GoogleCloudDiscoveryengineV1alphaServingConfig.
        :type synonyms_control_ids: List[str]
        """

        self._synonyms_control_ids = synonyms_control_ids

    @property
    def update_time(self):
        """Gets the update_time of this GoogleCloudDiscoveryengineV1alphaServingConfig.

        Output only. ServingConfig updated timestamp.

        :return: The update_time of this GoogleCloudDiscoveryengineV1alphaServingConfig.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this GoogleCloudDiscoveryengineV1alphaServingConfig.

        Output only. ServingConfig updated timestamp.

        :param update_time: The update_time of this GoogleCloudDiscoveryengineV1alphaServingConfig.
        :type update_time: str
        """

        self._update_time = update_time
