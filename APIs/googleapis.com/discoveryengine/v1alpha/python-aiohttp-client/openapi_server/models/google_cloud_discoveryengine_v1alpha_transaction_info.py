# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleCloudDiscoveryengineV1alphaTransactionInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cost: float=None, currency: str=None, discount_value: float=None, tax: float=None, transaction_id: str=None, value: float=None):
        """GoogleCloudDiscoveryengineV1alphaTransactionInfo - a model defined in OpenAPI

        :param cost: The cost of this GoogleCloudDiscoveryengineV1alphaTransactionInfo.
        :param currency: The currency of this GoogleCloudDiscoveryengineV1alphaTransactionInfo.
        :param discount_value: The discount_value of this GoogleCloudDiscoveryengineV1alphaTransactionInfo.
        :param tax: The tax of this GoogleCloudDiscoveryengineV1alphaTransactionInfo.
        :param transaction_id: The transaction_id of this GoogleCloudDiscoveryengineV1alphaTransactionInfo.
        :param value: The value of this GoogleCloudDiscoveryengineV1alphaTransactionInfo.
        """
        self.openapi_types = {
            'cost': float,
            'currency': str,
            'discount_value': float,
            'tax': float,
            'transaction_id': str,
            'value': float
        }

        self.attribute_map = {
            'cost': 'cost',
            'currency': 'currency',
            'discount_value': 'discountValue',
            'tax': 'tax',
            'transaction_id': 'transactionId',
            'value': 'value'
        }

        self._cost = cost
        self._currency = currency
        self._discount_value = discount_value
        self._tax = tax
        self._transaction_id = transaction_id
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudDiscoveryengineV1alphaTransactionInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudDiscoveryengineV1alphaTransactionInfo of this GoogleCloudDiscoveryengineV1alphaTransactionInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cost(self):
        """Gets the cost of this GoogleCloudDiscoveryengineV1alphaTransactionInfo.

        All the costs associated with the products. These can be manufacturing costs, shipping expenses not borne by the end user, or any other costs, such that: * Profit = value - tax - cost

        :return: The cost of this GoogleCloudDiscoveryengineV1alphaTransactionInfo.
        :rtype: float
        """
        return self._cost

    @cost.setter
    def cost(self, cost):
        """Sets the cost of this GoogleCloudDiscoveryengineV1alphaTransactionInfo.

        All the costs associated with the products. These can be manufacturing costs, shipping expenses not borne by the end user, or any other costs, such that: * Profit = value - tax - cost

        :param cost: The cost of this GoogleCloudDiscoveryengineV1alphaTransactionInfo.
        :type cost: float
        """

        self._cost = cost

    @property
    def currency(self):
        """Gets the currency of this GoogleCloudDiscoveryengineV1alphaTransactionInfo.

        Required. Currency code. Use three-character ISO-4217 code.

        :return: The currency of this GoogleCloudDiscoveryengineV1alphaTransactionInfo.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this GoogleCloudDiscoveryengineV1alphaTransactionInfo.

        Required. Currency code. Use three-character ISO-4217 code.

        :param currency: The currency of this GoogleCloudDiscoveryengineV1alphaTransactionInfo.
        :type currency: str
        """

        self._currency = currency

    @property
    def discount_value(self):
        """Gets the discount_value of this GoogleCloudDiscoveryengineV1alphaTransactionInfo.

        The total discount(s) value applied to this transaction. This figure should be excluded from TransactionInfo.value For example, if a user paid TransactionInfo.value amount, then nominal (pre-discount) value of the transaction is the sum of TransactionInfo.value and TransactionInfo.discount_value This means that profit is calculated the same way, regardless of the discount value, and that TransactionInfo.discount_value can be larger than TransactionInfo.value: * Profit = value - tax - cost

        :return: The discount_value of this GoogleCloudDiscoveryengineV1alphaTransactionInfo.
        :rtype: float
        """
        return self._discount_value

    @discount_value.setter
    def discount_value(self, discount_value):
        """Sets the discount_value of this GoogleCloudDiscoveryengineV1alphaTransactionInfo.

        The total discount(s) value applied to this transaction. This figure should be excluded from TransactionInfo.value For example, if a user paid TransactionInfo.value amount, then nominal (pre-discount) value of the transaction is the sum of TransactionInfo.value and TransactionInfo.discount_value This means that profit is calculated the same way, regardless of the discount value, and that TransactionInfo.discount_value can be larger than TransactionInfo.value: * Profit = value - tax - cost

        :param discount_value: The discount_value of this GoogleCloudDiscoveryengineV1alphaTransactionInfo.
        :type discount_value: float
        """

        self._discount_value = discount_value

    @property
    def tax(self):
        """Gets the tax of this GoogleCloudDiscoveryengineV1alphaTransactionInfo.

        All the taxes associated with the transaction.

        :return: The tax of this GoogleCloudDiscoveryengineV1alphaTransactionInfo.
        :rtype: float
        """
        return self._tax

    @tax.setter
    def tax(self, tax):
        """Sets the tax of this GoogleCloudDiscoveryengineV1alphaTransactionInfo.

        All the taxes associated with the transaction.

        :param tax: The tax of this GoogleCloudDiscoveryengineV1alphaTransactionInfo.
        :type tax: float
        """

        self._tax = tax

    @property
    def transaction_id(self):
        """Gets the transaction_id of this GoogleCloudDiscoveryengineV1alphaTransactionInfo.

        The transaction ID with a length limit of 128 characters.

        :return: The transaction_id of this GoogleCloudDiscoveryengineV1alphaTransactionInfo.
        :rtype: str
        """
        return self._transaction_id

    @transaction_id.setter
    def transaction_id(self, transaction_id):
        """Sets the transaction_id of this GoogleCloudDiscoveryengineV1alphaTransactionInfo.

        The transaction ID with a length limit of 128 characters.

        :param transaction_id: The transaction_id of this GoogleCloudDiscoveryengineV1alphaTransactionInfo.
        :type transaction_id: str
        """

        self._transaction_id = transaction_id

    @property
    def value(self):
        """Gets the value of this GoogleCloudDiscoveryengineV1alphaTransactionInfo.

        Required. Total non-zero value associated with the transaction. This value may include shipping, tax, or other adjustments to the total value that you want to include.

        :return: The value of this GoogleCloudDiscoveryengineV1alphaTransactionInfo.
        :rtype: float
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this GoogleCloudDiscoveryengineV1alphaTransactionInfo.

        Required. Total non-zero value associated with the transaction. This value may include shipping, tax, or other adjustments to the total value that you want to include.

        :param value: The value of this GoogleCloudDiscoveryengineV1alphaTransactionInfo.
        :type value: float
        """

        self._value = value
