# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_discoveryengine_logging_error_context import GoogleCloudDiscoveryengineLoggingErrorContext
from openapi_server.models.google_cloud_discoveryengine_logging_import_error_context import GoogleCloudDiscoveryengineLoggingImportErrorContext
from openapi_server.models.google_cloud_discoveryengine_logging_service_context import GoogleCloudDiscoveryengineLoggingServiceContext
from openapi_server.models.google_rpc_status import GoogleRpcStatus
from openapi_server import util


class GoogleCloudDiscoveryengineLoggingErrorLog(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, context: GoogleCloudDiscoveryengineLoggingErrorContext=None, import_payload: GoogleCloudDiscoveryengineLoggingImportErrorContext=None, message: str=None, request_payload: Dict[str, object]=None, response_payload: Dict[str, object]=None, service_context: GoogleCloudDiscoveryengineLoggingServiceContext=None, status: GoogleRpcStatus=None):
        """GoogleCloudDiscoveryengineLoggingErrorLog - a model defined in OpenAPI

        :param context: The context of this GoogleCloudDiscoveryengineLoggingErrorLog.
        :param import_payload: The import_payload of this GoogleCloudDiscoveryengineLoggingErrorLog.
        :param message: The message of this GoogleCloudDiscoveryengineLoggingErrorLog.
        :param request_payload: The request_payload of this GoogleCloudDiscoveryengineLoggingErrorLog.
        :param response_payload: The response_payload of this GoogleCloudDiscoveryengineLoggingErrorLog.
        :param service_context: The service_context of this GoogleCloudDiscoveryengineLoggingErrorLog.
        :param status: The status of this GoogleCloudDiscoveryengineLoggingErrorLog.
        """
        self.openapi_types = {
            'context': GoogleCloudDiscoveryengineLoggingErrorContext,
            'import_payload': GoogleCloudDiscoveryengineLoggingImportErrorContext,
            'message': str,
            'request_payload': Dict[str, object],
            'response_payload': Dict[str, object],
            'service_context': GoogleCloudDiscoveryengineLoggingServiceContext,
            'status': GoogleRpcStatus
        }

        self.attribute_map = {
            'context': 'context',
            'import_payload': 'importPayload',
            'message': 'message',
            'request_payload': 'requestPayload',
            'response_payload': 'responsePayload',
            'service_context': 'serviceContext',
            'status': 'status'
        }

        self._context = context
        self._import_payload = import_payload
        self._message = message
        self._request_payload = request_payload
        self._response_payload = response_payload
        self._service_context = service_context
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudDiscoveryengineLoggingErrorLog':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudDiscoveryengineLoggingErrorLog of this GoogleCloudDiscoveryengineLoggingErrorLog.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def context(self):
        """Gets the context of this GoogleCloudDiscoveryengineLoggingErrorLog.


        :return: The context of this GoogleCloudDiscoveryengineLoggingErrorLog.
        :rtype: GoogleCloudDiscoveryengineLoggingErrorContext
        """
        return self._context

    @context.setter
    def context(self, context):
        """Sets the context of this GoogleCloudDiscoveryengineLoggingErrorLog.


        :param context: The context of this GoogleCloudDiscoveryengineLoggingErrorLog.
        :type context: GoogleCloudDiscoveryengineLoggingErrorContext
        """

        self._context = context

    @property
    def import_payload(self):
        """Gets the import_payload of this GoogleCloudDiscoveryengineLoggingErrorLog.


        :return: The import_payload of this GoogleCloudDiscoveryengineLoggingErrorLog.
        :rtype: GoogleCloudDiscoveryengineLoggingImportErrorContext
        """
        return self._import_payload

    @import_payload.setter
    def import_payload(self, import_payload):
        """Sets the import_payload of this GoogleCloudDiscoveryengineLoggingErrorLog.


        :param import_payload: The import_payload of this GoogleCloudDiscoveryengineLoggingErrorLog.
        :type import_payload: GoogleCloudDiscoveryengineLoggingImportErrorContext
        """

        self._import_payload = import_payload

    @property
    def message(self):
        """Gets the message of this GoogleCloudDiscoveryengineLoggingErrorLog.

        A message describing the error.

        :return: The message of this GoogleCloudDiscoveryengineLoggingErrorLog.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this GoogleCloudDiscoveryengineLoggingErrorLog.

        A message describing the error.

        :param message: The message of this GoogleCloudDiscoveryengineLoggingErrorLog.
        :type message: str
        """

        self._message = message

    @property
    def request_payload(self):
        """Gets the request_payload of this GoogleCloudDiscoveryengineLoggingErrorLog.

        The API request payload, represented as a protocol buffer. Most API request types are supported—for example: * `type.googleapis.com/google.cloud.discoveryengine.v1alpha.DocumentService.CreateDocumentRequest` * `type.googleapis.com/google.cloud.discoveryengine.v1alpha.UserEventService.WriteUserEventRequest`

        :return: The request_payload of this GoogleCloudDiscoveryengineLoggingErrorLog.
        :rtype: Dict[str, object]
        """
        return self._request_payload

    @request_payload.setter
    def request_payload(self, request_payload):
        """Sets the request_payload of this GoogleCloudDiscoveryengineLoggingErrorLog.

        The API request payload, represented as a protocol buffer. Most API request types are supported—for example: * `type.googleapis.com/google.cloud.discoveryengine.v1alpha.DocumentService.CreateDocumentRequest` * `type.googleapis.com/google.cloud.discoveryengine.v1alpha.UserEventService.WriteUserEventRequest`

        :param request_payload: The request_payload of this GoogleCloudDiscoveryengineLoggingErrorLog.
        :type request_payload: Dict[str, object]
        """

        self._request_payload = request_payload

    @property
    def response_payload(self):
        """Gets the response_payload of this GoogleCloudDiscoveryengineLoggingErrorLog.

        The API response payload, represented as a protocol buffer. This is used to log some \"soft errors\", where the response is valid but we consider there are some quality issues like unjoined events. The following API responses are supported, and no PII is included: * `google.cloud.discoveryengine.v1alpha.RecommendationService.Recommend` * `google.cloud.discoveryengine.v1alpha.UserEventService.WriteUserEvent` * `google.cloud.discoveryengine.v1alpha.UserEventService.CollectUserEvent`

        :return: The response_payload of this GoogleCloudDiscoveryengineLoggingErrorLog.
        :rtype: Dict[str, object]
        """
        return self._response_payload

    @response_payload.setter
    def response_payload(self, response_payload):
        """Sets the response_payload of this GoogleCloudDiscoveryengineLoggingErrorLog.

        The API response payload, represented as a protocol buffer. This is used to log some \"soft errors\", where the response is valid but we consider there are some quality issues like unjoined events. The following API responses are supported, and no PII is included: * `google.cloud.discoveryengine.v1alpha.RecommendationService.Recommend` * `google.cloud.discoveryengine.v1alpha.UserEventService.WriteUserEvent` * `google.cloud.discoveryengine.v1alpha.UserEventService.CollectUserEvent`

        :param response_payload: The response_payload of this GoogleCloudDiscoveryengineLoggingErrorLog.
        :type response_payload: Dict[str, object]
        """

        self._response_payload = response_payload

    @property
    def service_context(self):
        """Gets the service_context of this GoogleCloudDiscoveryengineLoggingErrorLog.


        :return: The service_context of this GoogleCloudDiscoveryengineLoggingErrorLog.
        :rtype: GoogleCloudDiscoveryengineLoggingServiceContext
        """
        return self._service_context

    @service_context.setter
    def service_context(self, service_context):
        """Sets the service_context of this GoogleCloudDiscoveryengineLoggingErrorLog.


        :param service_context: The service_context of this GoogleCloudDiscoveryengineLoggingErrorLog.
        :type service_context: GoogleCloudDiscoveryengineLoggingServiceContext
        """

        self._service_context = service_context

    @property
    def status(self):
        """Gets the status of this GoogleCloudDiscoveryengineLoggingErrorLog.


        :return: The status of this GoogleCloudDiscoveryengineLoggingErrorLog.
        :rtype: GoogleRpcStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this GoogleCloudDiscoveryengineLoggingErrorLog.


        :param status: The status of this GoogleCloudDiscoveryengineLoggingErrorLog.
        :type status: GoogleRpcStatus
        """

        self._status = status
