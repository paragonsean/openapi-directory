# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_discoveryengine_v1beta_document_processing_config import GoogleCloudDiscoveryengineV1betaDocumentProcessingConfig
from openapi_server.models.google_cloud_discoveryengine_v1beta_schema import GoogleCloudDiscoveryengineV1betaSchema
from openapi_server import util


class GoogleCloudDiscoveryengineV1betaDataStore(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, content_config: str=None, create_time: str=None, default_schema_id: str=None, display_name: str=None, document_processing_config: GoogleCloudDiscoveryengineV1betaDocumentProcessingConfig=None, industry_vertical: str=None, name: str=None, solution_types: List[str]=None, starting_schema: GoogleCloudDiscoveryengineV1betaSchema=None):
        """GoogleCloudDiscoveryengineV1betaDataStore - a model defined in OpenAPI

        :param content_config: The content_config of this GoogleCloudDiscoveryengineV1betaDataStore.
        :param create_time: The create_time of this GoogleCloudDiscoveryengineV1betaDataStore.
        :param default_schema_id: The default_schema_id of this GoogleCloudDiscoveryengineV1betaDataStore.
        :param display_name: The display_name of this GoogleCloudDiscoveryengineV1betaDataStore.
        :param document_processing_config: The document_processing_config of this GoogleCloudDiscoveryengineV1betaDataStore.
        :param industry_vertical: The industry_vertical of this GoogleCloudDiscoveryengineV1betaDataStore.
        :param name: The name of this GoogleCloudDiscoveryengineV1betaDataStore.
        :param solution_types: The solution_types of this GoogleCloudDiscoveryengineV1betaDataStore.
        :param starting_schema: The starting_schema of this GoogleCloudDiscoveryengineV1betaDataStore.
        """
        self.openapi_types = {
            'content_config': str,
            'create_time': str,
            'default_schema_id': str,
            'display_name': str,
            'document_processing_config': GoogleCloudDiscoveryengineV1betaDocumentProcessingConfig,
            'industry_vertical': str,
            'name': str,
            'solution_types': List[str],
            'starting_schema': GoogleCloudDiscoveryengineV1betaSchema
        }

        self.attribute_map = {
            'content_config': 'contentConfig',
            'create_time': 'createTime',
            'default_schema_id': 'defaultSchemaId',
            'display_name': 'displayName',
            'document_processing_config': 'documentProcessingConfig',
            'industry_vertical': 'industryVertical',
            'name': 'name',
            'solution_types': 'solutionTypes',
            'starting_schema': 'startingSchema'
        }

        self._content_config = content_config
        self._create_time = create_time
        self._default_schema_id = default_schema_id
        self._display_name = display_name
        self._document_processing_config = document_processing_config
        self._industry_vertical = industry_vertical
        self._name = name
        self._solution_types = solution_types
        self._starting_schema = starting_schema

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudDiscoveryengineV1betaDataStore':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudDiscoveryengineV1betaDataStore of this GoogleCloudDiscoveryengineV1betaDataStore.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def content_config(self):
        """Gets the content_config of this GoogleCloudDiscoveryengineV1betaDataStore.

        Immutable. The content config of the data store. If this field is unset, the server behavior defaults to ContentConfig.NO_CONTENT.

        :return: The content_config of this GoogleCloudDiscoveryengineV1betaDataStore.
        :rtype: str
        """
        return self._content_config

    @content_config.setter
    def content_config(self, content_config):
        """Sets the content_config of this GoogleCloudDiscoveryengineV1betaDataStore.

        Immutable. The content config of the data store. If this field is unset, the server behavior defaults to ContentConfig.NO_CONTENT.

        :param content_config: The content_config of this GoogleCloudDiscoveryengineV1betaDataStore.
        :type content_config: str
        """
        allowed_values = ["CONTENT_CONFIG_UNSPECIFIED", "NO_CONTENT", "CONTENT_REQUIRED", "PUBLIC_WEBSITE"]  # noqa: E501
        if content_config not in allowed_values:
            raise ValueError(
                "Invalid value for `content_config` ({0}), must be one of {1}"
                .format(content_config, allowed_values)
            )

        self._content_config = content_config

    @property
    def create_time(self):
        """Gets the create_time of this GoogleCloudDiscoveryengineV1betaDataStore.

        Output only. Timestamp the DataStore was created at.

        :return: The create_time of this GoogleCloudDiscoveryengineV1betaDataStore.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this GoogleCloudDiscoveryengineV1betaDataStore.

        Output only. Timestamp the DataStore was created at.

        :param create_time: The create_time of this GoogleCloudDiscoveryengineV1betaDataStore.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def default_schema_id(self):
        """Gets the default_schema_id of this GoogleCloudDiscoveryengineV1betaDataStore.

        Output only. The id of the default Schema asscociated to this data store.

        :return: The default_schema_id of this GoogleCloudDiscoveryengineV1betaDataStore.
        :rtype: str
        """
        return self._default_schema_id

    @default_schema_id.setter
    def default_schema_id(self, default_schema_id):
        """Sets the default_schema_id of this GoogleCloudDiscoveryengineV1betaDataStore.

        Output only. The id of the default Schema asscociated to this data store.

        :param default_schema_id: The default_schema_id of this GoogleCloudDiscoveryengineV1betaDataStore.
        :type default_schema_id: str
        """

        self._default_schema_id = default_schema_id

    @property
    def display_name(self):
        """Gets the display_name of this GoogleCloudDiscoveryengineV1betaDataStore.

        Required. The data store display name. This field must be a UTF-8 encoded string with a length limit of 128 characters. Otherwise, an INVALID_ARGUMENT error is returned.

        :return: The display_name of this GoogleCloudDiscoveryengineV1betaDataStore.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this GoogleCloudDiscoveryengineV1betaDataStore.

        Required. The data store display name. This field must be a UTF-8 encoded string with a length limit of 128 characters. Otherwise, an INVALID_ARGUMENT error is returned.

        :param display_name: The display_name of this GoogleCloudDiscoveryengineV1betaDataStore.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def document_processing_config(self):
        """Gets the document_processing_config of this GoogleCloudDiscoveryengineV1betaDataStore.


        :return: The document_processing_config of this GoogleCloudDiscoveryengineV1betaDataStore.
        :rtype: GoogleCloudDiscoveryengineV1betaDocumentProcessingConfig
        """
        return self._document_processing_config

    @document_processing_config.setter
    def document_processing_config(self, document_processing_config):
        """Sets the document_processing_config of this GoogleCloudDiscoveryengineV1betaDataStore.


        :param document_processing_config: The document_processing_config of this GoogleCloudDiscoveryengineV1betaDataStore.
        :type document_processing_config: GoogleCloudDiscoveryengineV1betaDocumentProcessingConfig
        """

        self._document_processing_config = document_processing_config

    @property
    def industry_vertical(self):
        """Gets the industry_vertical of this GoogleCloudDiscoveryengineV1betaDataStore.

        Immutable. The industry vertical that the data store registers.

        :return: The industry_vertical of this GoogleCloudDiscoveryengineV1betaDataStore.
        :rtype: str
        """
        return self._industry_vertical

    @industry_vertical.setter
    def industry_vertical(self, industry_vertical):
        """Sets the industry_vertical of this GoogleCloudDiscoveryengineV1betaDataStore.

        Immutable. The industry vertical that the data store registers.

        :param industry_vertical: The industry_vertical of this GoogleCloudDiscoveryengineV1betaDataStore.
        :type industry_vertical: str
        """
        allowed_values = ["INDUSTRY_VERTICAL_UNSPECIFIED", "GENERIC", "MEDIA"]  # noqa: E501
        if industry_vertical not in allowed_values:
            raise ValueError(
                "Invalid value for `industry_vertical` ({0}), must be one of {1}"
                .format(industry_vertical, allowed_values)
            )

        self._industry_vertical = industry_vertical

    @property
    def name(self):
        """Gets the name of this GoogleCloudDiscoveryengineV1betaDataStore.

        Immutable. The full resource name of the data store. Format: `projects/{project}/locations/{location}/collections/{collection_id}/dataStores/{data_store_id}`. This field must be a UTF-8 encoded string with a length limit of 1024 characters.

        :return: The name of this GoogleCloudDiscoveryengineV1betaDataStore.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GoogleCloudDiscoveryengineV1betaDataStore.

        Immutable. The full resource name of the data store. Format: `projects/{project}/locations/{location}/collections/{collection_id}/dataStores/{data_store_id}`. This field must be a UTF-8 encoded string with a length limit of 1024 characters.

        :param name: The name of this GoogleCloudDiscoveryengineV1betaDataStore.
        :type name: str
        """

        self._name = name

    @property
    def solution_types(self):
        """Gets the solution_types of this GoogleCloudDiscoveryengineV1betaDataStore.

        The solutions that the data store enrolls. Available solutions for each industry_vertical: * `MEDIA`: `SOLUTION_TYPE_RECOMMENDATION` and `SOLUTION_TYPE_SEARCH`. * `SITE_SEARCH`: `SOLUTION_TYPE_SEARCH` is automatically enrolled. Other solutions cannot be enrolled.

        :return: The solution_types of this GoogleCloudDiscoveryengineV1betaDataStore.
        :rtype: List[str]
        """
        return self._solution_types

    @solution_types.setter
    def solution_types(self, solution_types):
        """Sets the solution_types of this GoogleCloudDiscoveryengineV1betaDataStore.

        The solutions that the data store enrolls. Available solutions for each industry_vertical: * `MEDIA`: `SOLUTION_TYPE_RECOMMENDATION` and `SOLUTION_TYPE_SEARCH`. * `SITE_SEARCH`: `SOLUTION_TYPE_SEARCH` is automatically enrolled. Other solutions cannot be enrolled.

        :param solution_types: The solution_types of this GoogleCloudDiscoveryengineV1betaDataStore.
        :type solution_types: List[str]
        """
        allowed_values = ["SOLUTION_TYPE_UNSPECIFIED", "SOLUTION_TYPE_RECOMMENDATION", "SOLUTION_TYPE_SEARCH", "SOLUTION_TYPE_CHAT"]  # noqa: E501
        if not set(solution_types).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `solution_types` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(solution_types) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._solution_types = solution_types

    @property
    def starting_schema(self):
        """Gets the starting_schema of this GoogleCloudDiscoveryengineV1betaDataStore.


        :return: The starting_schema of this GoogleCloudDiscoveryengineV1betaDataStore.
        :rtype: GoogleCloudDiscoveryengineV1betaSchema
        """
        return self._starting_schema

    @starting_schema.setter
    def starting_schema(self, starting_schema):
        """Sets the starting_schema of this GoogleCloudDiscoveryengineV1betaDataStore.


        :param starting_schema: The starting_schema of this GoogleCloudDiscoveryengineV1betaDataStore.
        :type starting_schema: GoogleCloudDiscoveryengineV1betaSchema
        """

        self._starting_schema = starting_schema
