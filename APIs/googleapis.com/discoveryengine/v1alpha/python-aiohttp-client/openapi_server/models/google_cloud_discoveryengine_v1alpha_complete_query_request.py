# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleCloudDiscoveryengineV1alphaCompleteQueryRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data_store: str=None, include_tail_suggestions: bool=None, query: str=None, query_model: str=None, user_pseudo_id: str=None):
        """GoogleCloudDiscoveryengineV1alphaCompleteQueryRequest - a model defined in OpenAPI

        :param data_store: The data_store of this GoogleCloudDiscoveryengineV1alphaCompleteQueryRequest.
        :param include_tail_suggestions: The include_tail_suggestions of this GoogleCloudDiscoveryengineV1alphaCompleteQueryRequest.
        :param query: The query of this GoogleCloudDiscoveryengineV1alphaCompleteQueryRequest.
        :param query_model: The query_model of this GoogleCloudDiscoveryengineV1alphaCompleteQueryRequest.
        :param user_pseudo_id: The user_pseudo_id of this GoogleCloudDiscoveryengineV1alphaCompleteQueryRequest.
        """
        self.openapi_types = {
            'data_store': str,
            'include_tail_suggestions': bool,
            'query': str,
            'query_model': str,
            'user_pseudo_id': str
        }

        self.attribute_map = {
            'data_store': 'dataStore',
            'include_tail_suggestions': 'includeTailSuggestions',
            'query': 'query',
            'query_model': 'queryModel',
            'user_pseudo_id': 'userPseudoId'
        }

        self._data_store = data_store
        self._include_tail_suggestions = include_tail_suggestions
        self._query = query
        self._query_model = query_model
        self._user_pseudo_id = user_pseudo_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudDiscoveryengineV1alphaCompleteQueryRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudDiscoveryengineV1alphaCompleteQueryRequest of this GoogleCloudDiscoveryengineV1alphaCompleteQueryRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data_store(self):
        """Gets the data_store of this GoogleCloudDiscoveryengineV1alphaCompleteQueryRequest.

        Required. The parent data store resource name for which the completion is performed, such as `projects/*/locations/global/collections/default_collection/dataStores/default_data_store`.

        :return: The data_store of this GoogleCloudDiscoveryengineV1alphaCompleteQueryRequest.
        :rtype: str
        """
        return self._data_store

    @data_store.setter
    def data_store(self, data_store):
        """Sets the data_store of this GoogleCloudDiscoveryengineV1alphaCompleteQueryRequest.

        Required. The parent data store resource name for which the completion is performed, such as `projects/*/locations/global/collections/default_collection/dataStores/default_data_store`.

        :param data_store: The data_store of this GoogleCloudDiscoveryengineV1alphaCompleteQueryRequest.
        :type data_store: str
        """

        self._data_store = data_store

    @property
    def include_tail_suggestions(self):
        """Gets the include_tail_suggestions of this GoogleCloudDiscoveryengineV1alphaCompleteQueryRequest.

        Indicates if tail suggestions should be returned if there are no suggestions that match the full query. Even if set to true, if there are suggestions that match the full query, those are returned and no tail suggestions are returned.

        :return: The include_tail_suggestions of this GoogleCloudDiscoveryengineV1alphaCompleteQueryRequest.
        :rtype: bool
        """
        return self._include_tail_suggestions

    @include_tail_suggestions.setter
    def include_tail_suggestions(self, include_tail_suggestions):
        """Sets the include_tail_suggestions of this GoogleCloudDiscoveryengineV1alphaCompleteQueryRequest.

        Indicates if tail suggestions should be returned if there are no suggestions that match the full query. Even if set to true, if there are suggestions that match the full query, those are returned and no tail suggestions are returned.

        :param include_tail_suggestions: The include_tail_suggestions of this GoogleCloudDiscoveryengineV1alphaCompleteQueryRequest.
        :type include_tail_suggestions: bool
        """

        self._include_tail_suggestions = include_tail_suggestions

    @property
    def query(self):
        """Gets the query of this GoogleCloudDiscoveryengineV1alphaCompleteQueryRequest.

        Required. The typeahead input used to fetch suggestions. Maximum length is 128 characters.

        :return: The query of this GoogleCloudDiscoveryengineV1alphaCompleteQueryRequest.
        :rtype: str
        """
        return self._query

    @query.setter
    def query(self, query):
        """Sets the query of this GoogleCloudDiscoveryengineV1alphaCompleteQueryRequest.

        Required. The typeahead input used to fetch suggestions. Maximum length is 128 characters.

        :param query: The query of this GoogleCloudDiscoveryengineV1alphaCompleteQueryRequest.
        :type query: str
        """

        self._query = query

    @property
    def query_model(self):
        """Gets the query_model of this GoogleCloudDiscoveryengineV1alphaCompleteQueryRequest.

        Specifies the autocomplete data model. This overrides any model specified in the Configuration > Autocomplete section of the Cloud console. Currently supported values: * `document` - Using suggestions generated from user-imported documents. * `search-history` - Using suggestions generated from the past history of SearchService.Search API calls. Do not use it when there is no traffic for Search API. * `user-event` - Using suggestions generated from user-imported search events. * `document-completable` - Using suggestions taken directly from user-imported document fields marked as completable. Default values: * `document` is the default model for regular dataStores. * `search-history` is the default model for site search dataStores.

        :return: The query_model of this GoogleCloudDiscoveryengineV1alphaCompleteQueryRequest.
        :rtype: str
        """
        return self._query_model

    @query_model.setter
    def query_model(self, query_model):
        """Sets the query_model of this GoogleCloudDiscoveryengineV1alphaCompleteQueryRequest.

        Specifies the autocomplete data model. This overrides any model specified in the Configuration > Autocomplete section of the Cloud console. Currently supported values: * `document` - Using suggestions generated from user-imported documents. * `search-history` - Using suggestions generated from the past history of SearchService.Search API calls. Do not use it when there is no traffic for Search API. * `user-event` - Using suggestions generated from user-imported search events. * `document-completable` - Using suggestions taken directly from user-imported document fields marked as completable. Default values: * `document` is the default model for regular dataStores. * `search-history` is the default model for site search dataStores.

        :param query_model: The query_model of this GoogleCloudDiscoveryengineV1alphaCompleteQueryRequest.
        :type query_model: str
        """

        self._query_model = query_model

    @property
    def user_pseudo_id(self):
        """Gets the user_pseudo_id of this GoogleCloudDiscoveryengineV1alphaCompleteQueryRequest.

        A unique identifier for tracking visitors. For example, this could be implemented with an HTTP cookie, which should be able to uniquely identify a visitor on a single device. This unique identifier should not change if the visitor logs in or out of the website. This field should NOT have a fixed value such as `unknown_visitor`. This should be the same identifier as UserEvent.user_pseudo_id and SearchRequest.user_pseudo_id. The field must be a UTF-8 encoded string with a length limit of 128 characters. Otherwise, an `INVALID_ARGUMENT` error is returned.

        :return: The user_pseudo_id of this GoogleCloudDiscoveryengineV1alphaCompleteQueryRequest.
        :rtype: str
        """
        return self._user_pseudo_id

    @user_pseudo_id.setter
    def user_pseudo_id(self, user_pseudo_id):
        """Sets the user_pseudo_id of this GoogleCloudDiscoveryengineV1alphaCompleteQueryRequest.

        A unique identifier for tracking visitors. For example, this could be implemented with an HTTP cookie, which should be able to uniquely identify a visitor on a single device. This unique identifier should not change if the visitor logs in or out of the website. This field should NOT have a fixed value such as `unknown_visitor`. This should be the same identifier as UserEvent.user_pseudo_id and SearchRequest.user_pseudo_id. The field must be a UTF-8 encoded string with a length limit of 128 characters. Otherwise, an `INVALID_ARGUMENT` error is returned.

        :param user_pseudo_id: The user_pseudo_id of this GoogleCloudDiscoveryengineV1alphaCompleteQueryRequest.
        :type user_pseudo_id: str
        """

        self._user_pseudo_id = user_pseudo_id
