# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_discoveryengine_v1alpha_engine_chat_engine_config import GoogleCloudDiscoveryengineV1alphaEngineChatEngineConfig
from openapi_server.models.google_cloud_discoveryengine_v1alpha_engine_chat_engine_metadata import GoogleCloudDiscoveryengineV1alphaEngineChatEngineMetadata
from openapi_server.models.google_cloud_discoveryengine_v1alpha_engine_common_config import GoogleCloudDiscoveryengineV1alphaEngineCommonConfig
from openapi_server.models.google_cloud_discoveryengine_v1alpha_engine_media_recommendation_engine_config import GoogleCloudDiscoveryengineV1alphaEngineMediaRecommendationEngineConfig
from openapi_server.models.google_cloud_discoveryengine_v1alpha_engine_recommendation_metadata import GoogleCloudDiscoveryengineV1alphaEngineRecommendationMetadata
from openapi_server.models.google_cloud_discoveryengine_v1alpha_engine_search_engine_config import GoogleCloudDiscoveryengineV1alphaEngineSearchEngineConfig
from openapi_server import util


class GoogleCloudDiscoveryengineV1alphaEngine(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allow_multiple_data_stores_search_engine: bool=None, chat_engine_config: GoogleCloudDiscoveryengineV1alphaEngineChatEngineConfig=None, chat_engine_metadata: GoogleCloudDiscoveryengineV1alphaEngineChatEngineMetadata=None, common_config: GoogleCloudDiscoveryengineV1alphaEngineCommonConfig=None, create_time: str=None, data_store_ids: List[str]=None, display_name: str=None, industry_vertical: str=None, media_recommendation_engine_config: GoogleCloudDiscoveryengineV1alphaEngineMediaRecommendationEngineConfig=None, name: str=None, recommendation_metadata: GoogleCloudDiscoveryengineV1alphaEngineRecommendationMetadata=None, search_engine_config: GoogleCloudDiscoveryengineV1alphaEngineSearchEngineConfig=None, similar_documents_config: object=None, solution_type: str=None, update_time: str=None):
        """GoogleCloudDiscoveryengineV1alphaEngine - a model defined in OpenAPI

        :param allow_multiple_data_stores_search_engine: The allow_multiple_data_stores_search_engine of this GoogleCloudDiscoveryengineV1alphaEngine.
        :param chat_engine_config: The chat_engine_config of this GoogleCloudDiscoveryengineV1alphaEngine.
        :param chat_engine_metadata: The chat_engine_metadata of this GoogleCloudDiscoveryengineV1alphaEngine.
        :param common_config: The common_config of this GoogleCloudDiscoveryengineV1alphaEngine.
        :param create_time: The create_time of this GoogleCloudDiscoveryengineV1alphaEngine.
        :param data_store_ids: The data_store_ids of this GoogleCloudDiscoveryengineV1alphaEngine.
        :param display_name: The display_name of this GoogleCloudDiscoveryengineV1alphaEngine.
        :param industry_vertical: The industry_vertical of this GoogleCloudDiscoveryengineV1alphaEngine.
        :param media_recommendation_engine_config: The media_recommendation_engine_config of this GoogleCloudDiscoveryengineV1alphaEngine.
        :param name: The name of this GoogleCloudDiscoveryengineV1alphaEngine.
        :param recommendation_metadata: The recommendation_metadata of this GoogleCloudDiscoveryengineV1alphaEngine.
        :param search_engine_config: The search_engine_config of this GoogleCloudDiscoveryengineV1alphaEngine.
        :param similar_documents_config: The similar_documents_config of this GoogleCloudDiscoveryengineV1alphaEngine.
        :param solution_type: The solution_type of this GoogleCloudDiscoveryengineV1alphaEngine.
        :param update_time: The update_time of this GoogleCloudDiscoveryengineV1alphaEngine.
        """
        self.openapi_types = {
            'allow_multiple_data_stores_search_engine': bool,
            'chat_engine_config': GoogleCloudDiscoveryengineV1alphaEngineChatEngineConfig,
            'chat_engine_metadata': GoogleCloudDiscoveryengineV1alphaEngineChatEngineMetadata,
            'common_config': GoogleCloudDiscoveryengineV1alphaEngineCommonConfig,
            'create_time': str,
            'data_store_ids': List[str],
            'display_name': str,
            'industry_vertical': str,
            'media_recommendation_engine_config': GoogleCloudDiscoveryengineV1alphaEngineMediaRecommendationEngineConfig,
            'name': str,
            'recommendation_metadata': GoogleCloudDiscoveryengineV1alphaEngineRecommendationMetadata,
            'search_engine_config': GoogleCloudDiscoveryengineV1alphaEngineSearchEngineConfig,
            'similar_documents_config': object,
            'solution_type': str,
            'update_time': str
        }

        self.attribute_map = {
            'allow_multiple_data_stores_search_engine': 'allowMultipleDataStoresSearchEngine',
            'chat_engine_config': 'chatEngineConfig',
            'chat_engine_metadata': 'chatEngineMetadata',
            'common_config': 'commonConfig',
            'create_time': 'createTime',
            'data_store_ids': 'dataStoreIds',
            'display_name': 'displayName',
            'industry_vertical': 'industryVertical',
            'media_recommendation_engine_config': 'mediaRecommendationEngineConfig',
            'name': 'name',
            'recommendation_metadata': 'recommendationMetadata',
            'search_engine_config': 'searchEngineConfig',
            'similar_documents_config': 'similarDocumentsConfig',
            'solution_type': 'solutionType',
            'update_time': 'updateTime'
        }

        self._allow_multiple_data_stores_search_engine = allow_multiple_data_stores_search_engine
        self._chat_engine_config = chat_engine_config
        self._chat_engine_metadata = chat_engine_metadata
        self._common_config = common_config
        self._create_time = create_time
        self._data_store_ids = data_store_ids
        self._display_name = display_name
        self._industry_vertical = industry_vertical
        self._media_recommendation_engine_config = media_recommendation_engine_config
        self._name = name
        self._recommendation_metadata = recommendation_metadata
        self._search_engine_config = search_engine_config
        self._similar_documents_config = similar_documents_config
        self._solution_type = solution_type
        self._update_time = update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudDiscoveryengineV1alphaEngine':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudDiscoveryengineV1alphaEngine of this GoogleCloudDiscoveryengineV1alphaEngine.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allow_multiple_data_stores_search_engine(self):
        """Gets the allow_multiple_data_stores_search_engine of this GoogleCloudDiscoveryengineV1alphaEngine.

        Whether the search engine can associate with multiple data stores. If true, the generic search engine can associate with one or more data stores. This is an input-only field.

        :return: The allow_multiple_data_stores_search_engine of this GoogleCloudDiscoveryengineV1alphaEngine.
        :rtype: bool
        """
        return self._allow_multiple_data_stores_search_engine

    @allow_multiple_data_stores_search_engine.setter
    def allow_multiple_data_stores_search_engine(self, allow_multiple_data_stores_search_engine):
        """Sets the allow_multiple_data_stores_search_engine of this GoogleCloudDiscoveryengineV1alphaEngine.

        Whether the search engine can associate with multiple data stores. If true, the generic search engine can associate with one or more data stores. This is an input-only field.

        :param allow_multiple_data_stores_search_engine: The allow_multiple_data_stores_search_engine of this GoogleCloudDiscoveryengineV1alphaEngine.
        :type allow_multiple_data_stores_search_engine: bool
        """

        self._allow_multiple_data_stores_search_engine = allow_multiple_data_stores_search_engine

    @property
    def chat_engine_config(self):
        """Gets the chat_engine_config of this GoogleCloudDiscoveryengineV1alphaEngine.


        :return: The chat_engine_config of this GoogleCloudDiscoveryengineV1alphaEngine.
        :rtype: GoogleCloudDiscoveryengineV1alphaEngineChatEngineConfig
        """
        return self._chat_engine_config

    @chat_engine_config.setter
    def chat_engine_config(self, chat_engine_config):
        """Sets the chat_engine_config of this GoogleCloudDiscoveryengineV1alphaEngine.


        :param chat_engine_config: The chat_engine_config of this GoogleCloudDiscoveryengineV1alphaEngine.
        :type chat_engine_config: GoogleCloudDiscoveryengineV1alphaEngineChatEngineConfig
        """

        self._chat_engine_config = chat_engine_config

    @property
    def chat_engine_metadata(self):
        """Gets the chat_engine_metadata of this GoogleCloudDiscoveryengineV1alphaEngine.


        :return: The chat_engine_metadata of this GoogleCloudDiscoveryengineV1alphaEngine.
        :rtype: GoogleCloudDiscoveryengineV1alphaEngineChatEngineMetadata
        """
        return self._chat_engine_metadata

    @chat_engine_metadata.setter
    def chat_engine_metadata(self, chat_engine_metadata):
        """Sets the chat_engine_metadata of this GoogleCloudDiscoveryengineV1alphaEngine.


        :param chat_engine_metadata: The chat_engine_metadata of this GoogleCloudDiscoveryengineV1alphaEngine.
        :type chat_engine_metadata: GoogleCloudDiscoveryengineV1alphaEngineChatEngineMetadata
        """

        self._chat_engine_metadata = chat_engine_metadata

    @property
    def common_config(self):
        """Gets the common_config of this GoogleCloudDiscoveryengineV1alphaEngine.


        :return: The common_config of this GoogleCloudDiscoveryengineV1alphaEngine.
        :rtype: GoogleCloudDiscoveryengineV1alphaEngineCommonConfig
        """
        return self._common_config

    @common_config.setter
    def common_config(self, common_config):
        """Sets the common_config of this GoogleCloudDiscoveryengineV1alphaEngine.


        :param common_config: The common_config of this GoogleCloudDiscoveryengineV1alphaEngine.
        :type common_config: GoogleCloudDiscoveryengineV1alphaEngineCommonConfig
        """

        self._common_config = common_config

    @property
    def create_time(self):
        """Gets the create_time of this GoogleCloudDiscoveryengineV1alphaEngine.

        Output only. Timestamp the Recommendation Engine was created at.

        :return: The create_time of this GoogleCloudDiscoveryengineV1alphaEngine.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this GoogleCloudDiscoveryengineV1alphaEngine.

        Output only. Timestamp the Recommendation Engine was created at.

        :param create_time: The create_time of this GoogleCloudDiscoveryengineV1alphaEngine.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def data_store_ids(self):
        """Gets the data_store_ids of this GoogleCloudDiscoveryengineV1alphaEngine.

        The data stores associated with this engine. For SOLUTION_TYPE_SEARCH and SOLUTION_TYPE_RECOMMENDATION type of engines, they can only associate with at most one data store. If solution_type is SOLUTION_TYPE_CHAT, multiple DataStores in the same Collection can be associated here. Note that when used in CreateEngineRequest, one DataStore id must be provided as the system will use it for necessary initializations.

        :return: The data_store_ids of this GoogleCloudDiscoveryengineV1alphaEngine.
        :rtype: List[str]
        """
        return self._data_store_ids

    @data_store_ids.setter
    def data_store_ids(self, data_store_ids):
        """Sets the data_store_ids of this GoogleCloudDiscoveryengineV1alphaEngine.

        The data stores associated with this engine. For SOLUTION_TYPE_SEARCH and SOLUTION_TYPE_RECOMMENDATION type of engines, they can only associate with at most one data store. If solution_type is SOLUTION_TYPE_CHAT, multiple DataStores in the same Collection can be associated here. Note that when used in CreateEngineRequest, one DataStore id must be provided as the system will use it for necessary initializations.

        :param data_store_ids: The data_store_ids of this GoogleCloudDiscoveryengineV1alphaEngine.
        :type data_store_ids: List[str]
        """

        self._data_store_ids = data_store_ids

    @property
    def display_name(self):
        """Gets the display_name of this GoogleCloudDiscoveryengineV1alphaEngine.

        Required. The display name of the engine. Should be human readable. UTF-8 encoded string with limit of 1024 characters.

        :return: The display_name of this GoogleCloudDiscoveryengineV1alphaEngine.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this GoogleCloudDiscoveryengineV1alphaEngine.

        Required. The display name of the engine. Should be human readable. UTF-8 encoded string with limit of 1024 characters.

        :param display_name: The display_name of this GoogleCloudDiscoveryengineV1alphaEngine.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def industry_vertical(self):
        """Gets the industry_vertical of this GoogleCloudDiscoveryengineV1alphaEngine.

        The industry vertical that the engine registers. The restriction of the Engine industry vertical is based on DataStore: If unspecified, default to `GENERIC`. Vertical on Engine has to match vertical of the DataStore liniked to the engine.

        :return: The industry_vertical of this GoogleCloudDiscoveryengineV1alphaEngine.
        :rtype: str
        """
        return self._industry_vertical

    @industry_vertical.setter
    def industry_vertical(self, industry_vertical):
        """Sets the industry_vertical of this GoogleCloudDiscoveryengineV1alphaEngine.

        The industry vertical that the engine registers. The restriction of the Engine industry vertical is based on DataStore: If unspecified, default to `GENERIC`. Vertical on Engine has to match vertical of the DataStore liniked to the engine.

        :param industry_vertical: The industry_vertical of this GoogleCloudDiscoveryengineV1alphaEngine.
        :type industry_vertical: str
        """
        allowed_values = ["INDUSTRY_VERTICAL_UNSPECIFIED", "GENERIC", "MEDIA"]  # noqa: E501
        if industry_vertical not in allowed_values:
            raise ValueError(
                "Invalid value for `industry_vertical` ({0}), must be one of {1}"
                .format(industry_vertical, allowed_values)
            )

        self._industry_vertical = industry_vertical

    @property
    def media_recommendation_engine_config(self):
        """Gets the media_recommendation_engine_config of this GoogleCloudDiscoveryengineV1alphaEngine.


        :return: The media_recommendation_engine_config of this GoogleCloudDiscoveryengineV1alphaEngine.
        :rtype: GoogleCloudDiscoveryengineV1alphaEngineMediaRecommendationEngineConfig
        """
        return self._media_recommendation_engine_config

    @media_recommendation_engine_config.setter
    def media_recommendation_engine_config(self, media_recommendation_engine_config):
        """Sets the media_recommendation_engine_config of this GoogleCloudDiscoveryengineV1alphaEngine.


        :param media_recommendation_engine_config: The media_recommendation_engine_config of this GoogleCloudDiscoveryengineV1alphaEngine.
        :type media_recommendation_engine_config: GoogleCloudDiscoveryengineV1alphaEngineMediaRecommendationEngineConfig
        """

        self._media_recommendation_engine_config = media_recommendation_engine_config

    @property
    def name(self):
        """Gets the name of this GoogleCloudDiscoveryengineV1alphaEngine.

        Immutable. The fully qualified resource name of the engine. This field must be a UTF-8 encoded string with a length limit of 1024 characters. Format: `projects/{project_number}/locations/{location}/collections/{collection}/engines/{engine}` engine should be 1-63 characters, and valid characters are /a-z0-9*/. Otherwise, an INVALID_ARGUMENT error is returned.

        :return: The name of this GoogleCloudDiscoveryengineV1alphaEngine.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GoogleCloudDiscoveryengineV1alphaEngine.

        Immutable. The fully qualified resource name of the engine. This field must be a UTF-8 encoded string with a length limit of 1024 characters. Format: `projects/{project_number}/locations/{location}/collections/{collection}/engines/{engine}` engine should be 1-63 characters, and valid characters are /a-z0-9*/. Otherwise, an INVALID_ARGUMENT error is returned.

        :param name: The name of this GoogleCloudDiscoveryengineV1alphaEngine.
        :type name: str
        """

        self._name = name

    @property
    def recommendation_metadata(self):
        """Gets the recommendation_metadata of this GoogleCloudDiscoveryengineV1alphaEngine.


        :return: The recommendation_metadata of this GoogleCloudDiscoveryengineV1alphaEngine.
        :rtype: GoogleCloudDiscoveryengineV1alphaEngineRecommendationMetadata
        """
        return self._recommendation_metadata

    @recommendation_metadata.setter
    def recommendation_metadata(self, recommendation_metadata):
        """Sets the recommendation_metadata of this GoogleCloudDiscoveryengineV1alphaEngine.


        :param recommendation_metadata: The recommendation_metadata of this GoogleCloudDiscoveryengineV1alphaEngine.
        :type recommendation_metadata: GoogleCloudDiscoveryengineV1alphaEngineRecommendationMetadata
        """

        self._recommendation_metadata = recommendation_metadata

    @property
    def search_engine_config(self):
        """Gets the search_engine_config of this GoogleCloudDiscoveryengineV1alphaEngine.


        :return: The search_engine_config of this GoogleCloudDiscoveryengineV1alphaEngine.
        :rtype: GoogleCloudDiscoveryengineV1alphaEngineSearchEngineConfig
        """
        return self._search_engine_config

    @search_engine_config.setter
    def search_engine_config(self, search_engine_config):
        """Sets the search_engine_config of this GoogleCloudDiscoveryengineV1alphaEngine.


        :param search_engine_config: The search_engine_config of this GoogleCloudDiscoveryengineV1alphaEngine.
        :type search_engine_config: GoogleCloudDiscoveryengineV1alphaEngineSearchEngineConfig
        """

        self._search_engine_config = search_engine_config

    @property
    def similar_documents_config(self):
        """Gets the similar_documents_config of this GoogleCloudDiscoveryengineV1alphaEngine.

        Additional config specs for a `similar-items` engine.

        :return: The similar_documents_config of this GoogleCloudDiscoveryengineV1alphaEngine.
        :rtype: object
        """
        return self._similar_documents_config

    @similar_documents_config.setter
    def similar_documents_config(self, similar_documents_config):
        """Sets the similar_documents_config of this GoogleCloudDiscoveryengineV1alphaEngine.

        Additional config specs for a `similar-items` engine.

        :param similar_documents_config: The similar_documents_config of this GoogleCloudDiscoveryengineV1alphaEngine.
        :type similar_documents_config: object
        """

        self._similar_documents_config = similar_documents_config

    @property
    def solution_type(self):
        """Gets the solution_type of this GoogleCloudDiscoveryengineV1alphaEngine.

        Required. The solutions of the engine.

        :return: The solution_type of this GoogleCloudDiscoveryengineV1alphaEngine.
        :rtype: str
        """
        return self._solution_type

    @solution_type.setter
    def solution_type(self, solution_type):
        """Sets the solution_type of this GoogleCloudDiscoveryengineV1alphaEngine.

        Required. The solutions of the engine.

        :param solution_type: The solution_type of this GoogleCloudDiscoveryengineV1alphaEngine.
        :type solution_type: str
        """
        allowed_values = ["SOLUTION_TYPE_UNSPECIFIED", "SOLUTION_TYPE_RECOMMENDATION", "SOLUTION_TYPE_SEARCH", "SOLUTION_TYPE_CHAT"]  # noqa: E501
        if solution_type not in allowed_values:
            raise ValueError(
                "Invalid value for `solution_type` ({0}), must be one of {1}"
                .format(solution_type, allowed_values)
            )

        self._solution_type = solution_type

    @property
    def update_time(self):
        """Gets the update_time of this GoogleCloudDiscoveryengineV1alphaEngine.

        Output only. Timestamp the Recommendation Engine was last updated.

        :return: The update_time of this GoogleCloudDiscoveryengineV1alphaEngine.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this GoogleCloudDiscoveryengineV1alphaEngine.

        Output only. Timestamp the Recommendation Engine was last updated.

        :param update_time: The update_time of this GoogleCloudDiscoveryengineV1alphaEngine.
        :type update_time: str
        """

        self._update_time = update_time
