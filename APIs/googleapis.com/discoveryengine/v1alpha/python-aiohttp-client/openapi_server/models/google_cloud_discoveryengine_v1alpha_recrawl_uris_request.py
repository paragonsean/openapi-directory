# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleCloudDiscoveryengineV1alphaRecrawlUrisRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, uris: List[str]=None):
        """GoogleCloudDiscoveryengineV1alphaRecrawlUrisRequest - a model defined in OpenAPI

        :param uris: The uris of this GoogleCloudDiscoveryengineV1alphaRecrawlUrisRequest.
        """
        self.openapi_types = {
            'uris': List[str]
        }

        self.attribute_map = {
            'uris': 'uris'
        }

        self._uris = uris

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudDiscoveryengineV1alphaRecrawlUrisRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudDiscoveryengineV1alphaRecrawlUrisRequest of this GoogleCloudDiscoveryengineV1alphaRecrawlUrisRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def uris(self):
        """Gets the uris of this GoogleCloudDiscoveryengineV1alphaRecrawlUrisRequest.

        Required. List of URIs to crawl. At most 10K URIs are supported, otherwise an INVALID_ARGUMENT error is thrown. Each URI should match at least one TargetSite in `site_search_engine`.

        :return: The uris of this GoogleCloudDiscoveryengineV1alphaRecrawlUrisRequest.
        :rtype: List[str]
        """
        return self._uris

    @uris.setter
    def uris(self, uris):
        """Sets the uris of this GoogleCloudDiscoveryengineV1alphaRecrawlUrisRequest.

        Required. List of URIs to crawl. At most 10K URIs are supported, otherwise an INVALID_ARGUMENT error is thrown. Each URI should match at least one TargetSite in `site_search_engine`.

        :param uris: The uris of this GoogleCloudDiscoveryengineV1alphaRecrawlUrisRequest.
        :type uris: List[str]
        """

        self._uris = uris
