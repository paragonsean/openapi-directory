# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_discoveryengine_v1alpha_document_processing_config import GoogleCloudDiscoveryengineV1alphaDocumentProcessingConfig
from openapi_server.models.google_cloud_discoveryengine_v1alpha_idp_config import GoogleCloudDiscoveryengineV1alphaIdpConfig
from openapi_server.models.google_cloud_discoveryengine_v1alpha_schema import GoogleCloudDiscoveryengineV1alphaSchema
from openapi_server import util


class GoogleCloudDiscoveryengineV1alphaDataStore(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, acl_enabled: bool=None, content_config: str=None, create_time: str=None, default_schema_id: str=None, display_name: str=None, document_processing_config: GoogleCloudDiscoveryengineV1alphaDocumentProcessingConfig=None, idp_config: GoogleCloudDiscoveryengineV1alphaIdpConfig=None, industry_vertical: str=None, name: str=None, solution_types: List[str]=None, starting_schema: GoogleCloudDiscoveryengineV1alphaSchema=None):
        """GoogleCloudDiscoveryengineV1alphaDataStore - a model defined in OpenAPI

        :param acl_enabled: The acl_enabled of this GoogleCloudDiscoveryengineV1alphaDataStore.
        :param content_config: The content_config of this GoogleCloudDiscoveryengineV1alphaDataStore.
        :param create_time: The create_time of this GoogleCloudDiscoveryengineV1alphaDataStore.
        :param default_schema_id: The default_schema_id of this GoogleCloudDiscoveryengineV1alphaDataStore.
        :param display_name: The display_name of this GoogleCloudDiscoveryengineV1alphaDataStore.
        :param document_processing_config: The document_processing_config of this GoogleCloudDiscoveryengineV1alphaDataStore.
        :param idp_config: The idp_config of this GoogleCloudDiscoveryengineV1alphaDataStore.
        :param industry_vertical: The industry_vertical of this GoogleCloudDiscoveryengineV1alphaDataStore.
        :param name: The name of this GoogleCloudDiscoveryengineV1alphaDataStore.
        :param solution_types: The solution_types of this GoogleCloudDiscoveryengineV1alphaDataStore.
        :param starting_schema: The starting_schema of this GoogleCloudDiscoveryengineV1alphaDataStore.
        """
        self.openapi_types = {
            'acl_enabled': bool,
            'content_config': str,
            'create_time': str,
            'default_schema_id': str,
            'display_name': str,
            'document_processing_config': GoogleCloudDiscoveryengineV1alphaDocumentProcessingConfig,
            'idp_config': GoogleCloudDiscoveryengineV1alphaIdpConfig,
            'industry_vertical': str,
            'name': str,
            'solution_types': List[str],
            'starting_schema': GoogleCloudDiscoveryengineV1alphaSchema
        }

        self.attribute_map = {
            'acl_enabled': 'aclEnabled',
            'content_config': 'contentConfig',
            'create_time': 'createTime',
            'default_schema_id': 'defaultSchemaId',
            'display_name': 'displayName',
            'document_processing_config': 'documentProcessingConfig',
            'idp_config': 'idpConfig',
            'industry_vertical': 'industryVertical',
            'name': 'name',
            'solution_types': 'solutionTypes',
            'starting_schema': 'startingSchema'
        }

        self._acl_enabled = acl_enabled
        self._content_config = content_config
        self._create_time = create_time
        self._default_schema_id = default_schema_id
        self._display_name = display_name
        self._document_processing_config = document_processing_config
        self._idp_config = idp_config
        self._industry_vertical = industry_vertical
        self._name = name
        self._solution_types = solution_types
        self._starting_schema = starting_schema

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudDiscoveryengineV1alphaDataStore':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudDiscoveryengineV1alphaDataStore of this GoogleCloudDiscoveryengineV1alphaDataStore.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def acl_enabled(self):
        """Gets the acl_enabled of this GoogleCloudDiscoveryengineV1alphaDataStore.

        Immutable. Whether data in the DataStore has ACL information. If set to `true`, the source data must have ACL. ACL will be ingested when data is ingested by DocumentService.ImportDocuments methods. When ACL is enabled for the DataStore, Document can't be accessed by calling DocumentService.GetDocument or DocumentService.ListDocuments. Currently ACL is only supported in `GENERIC` industry vertical with non-`PUBLIC_WEBSITE` content config.

        :return: The acl_enabled of this GoogleCloudDiscoveryengineV1alphaDataStore.
        :rtype: bool
        """
        return self._acl_enabled

    @acl_enabled.setter
    def acl_enabled(self, acl_enabled):
        """Sets the acl_enabled of this GoogleCloudDiscoveryengineV1alphaDataStore.

        Immutable. Whether data in the DataStore has ACL information. If set to `true`, the source data must have ACL. ACL will be ingested when data is ingested by DocumentService.ImportDocuments methods. When ACL is enabled for the DataStore, Document can't be accessed by calling DocumentService.GetDocument or DocumentService.ListDocuments. Currently ACL is only supported in `GENERIC` industry vertical with non-`PUBLIC_WEBSITE` content config.

        :param acl_enabled: The acl_enabled of this GoogleCloudDiscoveryengineV1alphaDataStore.
        :type acl_enabled: bool
        """

        self._acl_enabled = acl_enabled

    @property
    def content_config(self):
        """Gets the content_config of this GoogleCloudDiscoveryengineV1alphaDataStore.

        Immutable. The content config of the data store. If this field is unset, the server behavior defaults to ContentConfig.NO_CONTENT.

        :return: The content_config of this GoogleCloudDiscoveryengineV1alphaDataStore.
        :rtype: str
        """
        return self._content_config

    @content_config.setter
    def content_config(self, content_config):
        """Sets the content_config of this GoogleCloudDiscoveryengineV1alphaDataStore.

        Immutable. The content config of the data store. If this field is unset, the server behavior defaults to ContentConfig.NO_CONTENT.

        :param content_config: The content_config of this GoogleCloudDiscoveryengineV1alphaDataStore.
        :type content_config: str
        """
        allowed_values = ["CONTENT_CONFIG_UNSPECIFIED", "NO_CONTENT", "CONTENT_REQUIRED", "PUBLIC_WEBSITE"]  # noqa: E501
        if content_config not in allowed_values:
            raise ValueError(
                "Invalid value for `content_config` ({0}), must be one of {1}"
                .format(content_config, allowed_values)
            )

        self._content_config = content_config

    @property
    def create_time(self):
        """Gets the create_time of this GoogleCloudDiscoveryengineV1alphaDataStore.

        Output only. Timestamp the DataStore was created at.

        :return: The create_time of this GoogleCloudDiscoveryengineV1alphaDataStore.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this GoogleCloudDiscoveryengineV1alphaDataStore.

        Output only. Timestamp the DataStore was created at.

        :param create_time: The create_time of this GoogleCloudDiscoveryengineV1alphaDataStore.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def default_schema_id(self):
        """Gets the default_schema_id of this GoogleCloudDiscoveryengineV1alphaDataStore.

        Output only. The id of the default Schema asscociated to this data store.

        :return: The default_schema_id of this GoogleCloudDiscoveryengineV1alphaDataStore.
        :rtype: str
        """
        return self._default_schema_id

    @default_schema_id.setter
    def default_schema_id(self, default_schema_id):
        """Sets the default_schema_id of this GoogleCloudDiscoveryengineV1alphaDataStore.

        Output only. The id of the default Schema asscociated to this data store.

        :param default_schema_id: The default_schema_id of this GoogleCloudDiscoveryengineV1alphaDataStore.
        :type default_schema_id: str
        """

        self._default_schema_id = default_schema_id

    @property
    def display_name(self):
        """Gets the display_name of this GoogleCloudDiscoveryengineV1alphaDataStore.

        Required. The data store display name. This field must be a UTF-8 encoded string with a length limit of 128 characters. Otherwise, an INVALID_ARGUMENT error is returned.

        :return: The display_name of this GoogleCloudDiscoveryengineV1alphaDataStore.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this GoogleCloudDiscoveryengineV1alphaDataStore.

        Required. The data store display name. This field must be a UTF-8 encoded string with a length limit of 128 characters. Otherwise, an INVALID_ARGUMENT error is returned.

        :param display_name: The display_name of this GoogleCloudDiscoveryengineV1alphaDataStore.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def document_processing_config(self):
        """Gets the document_processing_config of this GoogleCloudDiscoveryengineV1alphaDataStore.


        :return: The document_processing_config of this GoogleCloudDiscoveryengineV1alphaDataStore.
        :rtype: GoogleCloudDiscoveryengineV1alphaDocumentProcessingConfig
        """
        return self._document_processing_config

    @document_processing_config.setter
    def document_processing_config(self, document_processing_config):
        """Sets the document_processing_config of this GoogleCloudDiscoveryengineV1alphaDataStore.


        :param document_processing_config: The document_processing_config of this GoogleCloudDiscoveryengineV1alphaDataStore.
        :type document_processing_config: GoogleCloudDiscoveryengineV1alphaDocumentProcessingConfig
        """

        self._document_processing_config = document_processing_config

    @property
    def idp_config(self):
        """Gets the idp_config of this GoogleCloudDiscoveryengineV1alphaDataStore.


        :return: The idp_config of this GoogleCloudDiscoveryengineV1alphaDataStore.
        :rtype: GoogleCloudDiscoveryengineV1alphaIdpConfig
        """
        return self._idp_config

    @idp_config.setter
    def idp_config(self, idp_config):
        """Sets the idp_config of this GoogleCloudDiscoveryengineV1alphaDataStore.


        :param idp_config: The idp_config of this GoogleCloudDiscoveryengineV1alphaDataStore.
        :type idp_config: GoogleCloudDiscoveryengineV1alphaIdpConfig
        """

        self._idp_config = idp_config

    @property
    def industry_vertical(self):
        """Gets the industry_vertical of this GoogleCloudDiscoveryengineV1alphaDataStore.

        Immutable. The industry vertical that the data store registers.

        :return: The industry_vertical of this GoogleCloudDiscoveryengineV1alphaDataStore.
        :rtype: str
        """
        return self._industry_vertical

    @industry_vertical.setter
    def industry_vertical(self, industry_vertical):
        """Sets the industry_vertical of this GoogleCloudDiscoveryengineV1alphaDataStore.

        Immutable. The industry vertical that the data store registers.

        :param industry_vertical: The industry_vertical of this GoogleCloudDiscoveryengineV1alphaDataStore.
        :type industry_vertical: str
        """
        allowed_values = ["INDUSTRY_VERTICAL_UNSPECIFIED", "GENERIC", "MEDIA"]  # noqa: E501
        if industry_vertical not in allowed_values:
            raise ValueError(
                "Invalid value for `industry_vertical` ({0}), must be one of {1}"
                .format(industry_vertical, allowed_values)
            )

        self._industry_vertical = industry_vertical

    @property
    def name(self):
        """Gets the name of this GoogleCloudDiscoveryengineV1alphaDataStore.

        Immutable. The full resource name of the data store. Format: `projects/{project}/locations/{location}/collections/{collection_id}/dataStores/{data_store_id}`. This field must be a UTF-8 encoded string with a length limit of 1024 characters.

        :return: The name of this GoogleCloudDiscoveryengineV1alphaDataStore.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GoogleCloudDiscoveryengineV1alphaDataStore.

        Immutable. The full resource name of the data store. Format: `projects/{project}/locations/{location}/collections/{collection_id}/dataStores/{data_store_id}`. This field must be a UTF-8 encoded string with a length limit of 1024 characters.

        :param name: The name of this GoogleCloudDiscoveryengineV1alphaDataStore.
        :type name: str
        """

        self._name = name

    @property
    def solution_types(self):
        """Gets the solution_types of this GoogleCloudDiscoveryengineV1alphaDataStore.

        The solutions that the data store enrolls. Available solutions for each industry_vertical: * `MEDIA`: `SOLUTION_TYPE_RECOMMENDATION` and `SOLUTION_TYPE_SEARCH`. * `SITE_SEARCH`: `SOLUTION_TYPE_SEARCH` is automatically enrolled. Other solutions cannot be enrolled.

        :return: The solution_types of this GoogleCloudDiscoveryengineV1alphaDataStore.
        :rtype: List[str]
        """
        return self._solution_types

    @solution_types.setter
    def solution_types(self, solution_types):
        """Sets the solution_types of this GoogleCloudDiscoveryengineV1alphaDataStore.

        The solutions that the data store enrolls. Available solutions for each industry_vertical: * `MEDIA`: `SOLUTION_TYPE_RECOMMENDATION` and `SOLUTION_TYPE_SEARCH`. * `SITE_SEARCH`: `SOLUTION_TYPE_SEARCH` is automatically enrolled. Other solutions cannot be enrolled.

        :param solution_types: The solution_types of this GoogleCloudDiscoveryengineV1alphaDataStore.
        :type solution_types: List[str]
        """
        allowed_values = ["SOLUTION_TYPE_UNSPECIFIED", "SOLUTION_TYPE_RECOMMENDATION", "SOLUTION_TYPE_SEARCH", "SOLUTION_TYPE_CHAT"]  # noqa: E501
        if not set(solution_types).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `solution_types` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(solution_types) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._solution_types = solution_types

    @property
    def starting_schema(self):
        """Gets the starting_schema of this GoogleCloudDiscoveryengineV1alphaDataStore.


        :return: The starting_schema of this GoogleCloudDiscoveryengineV1alphaDataStore.
        :rtype: GoogleCloudDiscoveryengineV1alphaSchema
        """
        return self._starting_schema

    @starting_schema.setter
    def starting_schema(self, starting_schema):
        """Sets the starting_schema of this GoogleCloudDiscoveryengineV1alphaDataStore.


        :param starting_schema: The starting_schema of this GoogleCloudDiscoveryengineV1alphaDataStore.
        :type starting_schema: GoogleCloudDiscoveryengineV1alphaSchema
        """

        self._starting_schema = starting_schema
