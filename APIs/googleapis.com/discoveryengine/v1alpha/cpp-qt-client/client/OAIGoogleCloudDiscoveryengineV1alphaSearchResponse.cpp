/**
 * Discovery Engine API
 * Discovery Engine API.
 *
 * The version of the OpenAPI document: v1alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudDiscoveryengineV1alphaSearchResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudDiscoveryengineV1alphaSearchResponse::OAIGoogleCloudDiscoveryengineV1alphaSearchResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudDiscoveryengineV1alphaSearchResponse::OAIGoogleCloudDiscoveryengineV1alphaSearchResponse() {
    this->initializeModel();
}

OAIGoogleCloudDiscoveryengineV1alphaSearchResponse::~OAIGoogleCloudDiscoveryengineV1alphaSearchResponse() {}

void OAIGoogleCloudDiscoveryengineV1alphaSearchResponse::initializeModel() {

    m_applied_controls_isSet = false;
    m_applied_controls_isValid = false;

    m_attribution_token_isSet = false;
    m_attribution_token_isValid = false;

    m_corrected_query_isSet = false;
    m_corrected_query_isValid = false;

    m_facets_isSet = false;
    m_facets_isValid = false;

    m_geo_search_debug_info_isSet = false;
    m_geo_search_debug_info_isValid = false;

    m_guided_search_result_isSet = false;
    m_guided_search_result_isValid = false;

    m_next_page_token_isSet = false;
    m_next_page_token_isValid = false;

    m_query_expansion_info_isSet = false;
    m_query_expansion_info_isValid = false;

    m_redirect_uri_isSet = false;
    m_redirect_uri_isValid = false;

    m_results_isSet = false;
    m_results_isValid = false;

    m_summary_isSet = false;
    m_summary_isValid = false;

    m_total_size_isSet = false;
    m_total_size_isValid = false;
}

void OAIGoogleCloudDiscoveryengineV1alphaSearchResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudDiscoveryengineV1alphaSearchResponse::fromJsonObject(QJsonObject json) {

    m_applied_controls_isValid = ::OpenAPI::fromJsonValue(m_applied_controls, json[QString("appliedControls")]);
    m_applied_controls_isSet = !json[QString("appliedControls")].isNull() && m_applied_controls_isValid;

    m_attribution_token_isValid = ::OpenAPI::fromJsonValue(m_attribution_token, json[QString("attributionToken")]);
    m_attribution_token_isSet = !json[QString("attributionToken")].isNull() && m_attribution_token_isValid;

    m_corrected_query_isValid = ::OpenAPI::fromJsonValue(m_corrected_query, json[QString("correctedQuery")]);
    m_corrected_query_isSet = !json[QString("correctedQuery")].isNull() && m_corrected_query_isValid;

    m_facets_isValid = ::OpenAPI::fromJsonValue(m_facets, json[QString("facets")]);
    m_facets_isSet = !json[QString("facets")].isNull() && m_facets_isValid;

    m_geo_search_debug_info_isValid = ::OpenAPI::fromJsonValue(m_geo_search_debug_info, json[QString("geoSearchDebugInfo")]);
    m_geo_search_debug_info_isSet = !json[QString("geoSearchDebugInfo")].isNull() && m_geo_search_debug_info_isValid;

    m_guided_search_result_isValid = ::OpenAPI::fromJsonValue(m_guided_search_result, json[QString("guidedSearchResult")]);
    m_guided_search_result_isSet = !json[QString("guidedSearchResult")].isNull() && m_guided_search_result_isValid;

    m_next_page_token_isValid = ::OpenAPI::fromJsonValue(m_next_page_token, json[QString("nextPageToken")]);
    m_next_page_token_isSet = !json[QString("nextPageToken")].isNull() && m_next_page_token_isValid;

    m_query_expansion_info_isValid = ::OpenAPI::fromJsonValue(m_query_expansion_info, json[QString("queryExpansionInfo")]);
    m_query_expansion_info_isSet = !json[QString("queryExpansionInfo")].isNull() && m_query_expansion_info_isValid;

    m_redirect_uri_isValid = ::OpenAPI::fromJsonValue(m_redirect_uri, json[QString("redirectUri")]);
    m_redirect_uri_isSet = !json[QString("redirectUri")].isNull() && m_redirect_uri_isValid;

    m_results_isValid = ::OpenAPI::fromJsonValue(m_results, json[QString("results")]);
    m_results_isSet = !json[QString("results")].isNull() && m_results_isValid;

    m_summary_isValid = ::OpenAPI::fromJsonValue(m_summary, json[QString("summary")]);
    m_summary_isSet = !json[QString("summary")].isNull() && m_summary_isValid;

    m_total_size_isValid = ::OpenAPI::fromJsonValue(m_total_size, json[QString("totalSize")]);
    m_total_size_isSet = !json[QString("totalSize")].isNull() && m_total_size_isValid;
}

QString OAIGoogleCloudDiscoveryengineV1alphaSearchResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudDiscoveryengineV1alphaSearchResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_applied_controls.size() > 0) {
        obj.insert(QString("appliedControls"), ::OpenAPI::toJsonValue(m_applied_controls));
    }
    if (m_attribution_token_isSet) {
        obj.insert(QString("attributionToken"), ::OpenAPI::toJsonValue(m_attribution_token));
    }
    if (m_corrected_query_isSet) {
        obj.insert(QString("correctedQuery"), ::OpenAPI::toJsonValue(m_corrected_query));
    }
    if (m_facets.size() > 0) {
        obj.insert(QString("facets"), ::OpenAPI::toJsonValue(m_facets));
    }
    if (m_geo_search_debug_info.size() > 0) {
        obj.insert(QString("geoSearchDebugInfo"), ::OpenAPI::toJsonValue(m_geo_search_debug_info));
    }
    if (m_guided_search_result.isSet()) {
        obj.insert(QString("guidedSearchResult"), ::OpenAPI::toJsonValue(m_guided_search_result));
    }
    if (m_next_page_token_isSet) {
        obj.insert(QString("nextPageToken"), ::OpenAPI::toJsonValue(m_next_page_token));
    }
    if (m_query_expansion_info.isSet()) {
        obj.insert(QString("queryExpansionInfo"), ::OpenAPI::toJsonValue(m_query_expansion_info));
    }
    if (m_redirect_uri_isSet) {
        obj.insert(QString("redirectUri"), ::OpenAPI::toJsonValue(m_redirect_uri));
    }
    if (m_results.size() > 0) {
        obj.insert(QString("results"), ::OpenAPI::toJsonValue(m_results));
    }
    if (m_summary.isSet()) {
        obj.insert(QString("summary"), ::OpenAPI::toJsonValue(m_summary));
    }
    if (m_total_size_isSet) {
        obj.insert(QString("totalSize"), ::OpenAPI::toJsonValue(m_total_size));
    }
    return obj;
}

QList<QString> OAIGoogleCloudDiscoveryengineV1alphaSearchResponse::getAppliedControls() const {
    return m_applied_controls;
}
void OAIGoogleCloudDiscoveryengineV1alphaSearchResponse::setAppliedControls(const QList<QString> &applied_controls) {
    m_applied_controls = applied_controls;
    m_applied_controls_isSet = true;
}

bool OAIGoogleCloudDiscoveryengineV1alphaSearchResponse::is_applied_controls_Set() const{
    return m_applied_controls_isSet;
}

bool OAIGoogleCloudDiscoveryengineV1alphaSearchResponse::is_applied_controls_Valid() const{
    return m_applied_controls_isValid;
}

QString OAIGoogleCloudDiscoveryengineV1alphaSearchResponse::getAttributionToken() const {
    return m_attribution_token;
}
void OAIGoogleCloudDiscoveryengineV1alphaSearchResponse::setAttributionToken(const QString &attribution_token) {
    m_attribution_token = attribution_token;
    m_attribution_token_isSet = true;
}

bool OAIGoogleCloudDiscoveryengineV1alphaSearchResponse::is_attribution_token_Set() const{
    return m_attribution_token_isSet;
}

bool OAIGoogleCloudDiscoveryengineV1alphaSearchResponse::is_attribution_token_Valid() const{
    return m_attribution_token_isValid;
}

QString OAIGoogleCloudDiscoveryengineV1alphaSearchResponse::getCorrectedQuery() const {
    return m_corrected_query;
}
void OAIGoogleCloudDiscoveryengineV1alphaSearchResponse::setCorrectedQuery(const QString &corrected_query) {
    m_corrected_query = corrected_query;
    m_corrected_query_isSet = true;
}

bool OAIGoogleCloudDiscoveryengineV1alphaSearchResponse::is_corrected_query_Set() const{
    return m_corrected_query_isSet;
}

bool OAIGoogleCloudDiscoveryengineV1alphaSearchResponse::is_corrected_query_Valid() const{
    return m_corrected_query_isValid;
}

QList<OAIGoogleCloudDiscoveryengineV1alphaSearchResponseFacet> OAIGoogleCloudDiscoveryengineV1alphaSearchResponse::getFacets() const {
    return m_facets;
}
void OAIGoogleCloudDiscoveryengineV1alphaSearchResponse::setFacets(const QList<OAIGoogleCloudDiscoveryengineV1alphaSearchResponseFacet> &facets) {
    m_facets = facets;
    m_facets_isSet = true;
}

bool OAIGoogleCloudDiscoveryengineV1alphaSearchResponse::is_facets_Set() const{
    return m_facets_isSet;
}

bool OAIGoogleCloudDiscoveryengineV1alphaSearchResponse::is_facets_Valid() const{
    return m_facets_isValid;
}

QList<OAIGoogleCloudDiscoveryengineV1alphaSearchResponseGeoSearchDebugInfo> OAIGoogleCloudDiscoveryengineV1alphaSearchResponse::getGeoSearchDebugInfo() const {
    return m_geo_search_debug_info;
}
void OAIGoogleCloudDiscoveryengineV1alphaSearchResponse::setGeoSearchDebugInfo(const QList<OAIGoogleCloudDiscoveryengineV1alphaSearchResponseGeoSearchDebugInfo> &geo_search_debug_info) {
    m_geo_search_debug_info = geo_search_debug_info;
    m_geo_search_debug_info_isSet = true;
}

bool OAIGoogleCloudDiscoveryengineV1alphaSearchResponse::is_geo_search_debug_info_Set() const{
    return m_geo_search_debug_info_isSet;
}

bool OAIGoogleCloudDiscoveryengineV1alphaSearchResponse::is_geo_search_debug_info_Valid() const{
    return m_geo_search_debug_info_isValid;
}

OAIGoogleCloudDiscoveryengineV1alphaSearchResponseGuidedSearchResult OAIGoogleCloudDiscoveryengineV1alphaSearchResponse::getGuidedSearchResult() const {
    return m_guided_search_result;
}
void OAIGoogleCloudDiscoveryengineV1alphaSearchResponse::setGuidedSearchResult(const OAIGoogleCloudDiscoveryengineV1alphaSearchResponseGuidedSearchResult &guided_search_result) {
    m_guided_search_result = guided_search_result;
    m_guided_search_result_isSet = true;
}

bool OAIGoogleCloudDiscoveryengineV1alphaSearchResponse::is_guided_search_result_Set() const{
    return m_guided_search_result_isSet;
}

bool OAIGoogleCloudDiscoveryengineV1alphaSearchResponse::is_guided_search_result_Valid() const{
    return m_guided_search_result_isValid;
}

QString OAIGoogleCloudDiscoveryengineV1alphaSearchResponse::getNextPageToken() const {
    return m_next_page_token;
}
void OAIGoogleCloudDiscoveryengineV1alphaSearchResponse::setNextPageToken(const QString &next_page_token) {
    m_next_page_token = next_page_token;
    m_next_page_token_isSet = true;
}

bool OAIGoogleCloudDiscoveryengineV1alphaSearchResponse::is_next_page_token_Set() const{
    return m_next_page_token_isSet;
}

bool OAIGoogleCloudDiscoveryengineV1alphaSearchResponse::is_next_page_token_Valid() const{
    return m_next_page_token_isValid;
}

OAIGoogleCloudDiscoveryengineV1alphaSearchResponseQueryExpansionInfo OAIGoogleCloudDiscoveryengineV1alphaSearchResponse::getQueryExpansionInfo() const {
    return m_query_expansion_info;
}
void OAIGoogleCloudDiscoveryengineV1alphaSearchResponse::setQueryExpansionInfo(const OAIGoogleCloudDiscoveryengineV1alphaSearchResponseQueryExpansionInfo &query_expansion_info) {
    m_query_expansion_info = query_expansion_info;
    m_query_expansion_info_isSet = true;
}

bool OAIGoogleCloudDiscoveryengineV1alphaSearchResponse::is_query_expansion_info_Set() const{
    return m_query_expansion_info_isSet;
}

bool OAIGoogleCloudDiscoveryengineV1alphaSearchResponse::is_query_expansion_info_Valid() const{
    return m_query_expansion_info_isValid;
}

QString OAIGoogleCloudDiscoveryengineV1alphaSearchResponse::getRedirectUri() const {
    return m_redirect_uri;
}
void OAIGoogleCloudDiscoveryengineV1alphaSearchResponse::setRedirectUri(const QString &redirect_uri) {
    m_redirect_uri = redirect_uri;
    m_redirect_uri_isSet = true;
}

bool OAIGoogleCloudDiscoveryengineV1alphaSearchResponse::is_redirect_uri_Set() const{
    return m_redirect_uri_isSet;
}

bool OAIGoogleCloudDiscoveryengineV1alphaSearchResponse::is_redirect_uri_Valid() const{
    return m_redirect_uri_isValid;
}

QList<OAIGoogleCloudDiscoveryengineV1alphaSearchResponseSearchResult> OAIGoogleCloudDiscoveryengineV1alphaSearchResponse::getResults() const {
    return m_results;
}
void OAIGoogleCloudDiscoveryengineV1alphaSearchResponse::setResults(const QList<OAIGoogleCloudDiscoveryengineV1alphaSearchResponseSearchResult> &results) {
    m_results = results;
    m_results_isSet = true;
}

bool OAIGoogleCloudDiscoveryengineV1alphaSearchResponse::is_results_Set() const{
    return m_results_isSet;
}

bool OAIGoogleCloudDiscoveryengineV1alphaSearchResponse::is_results_Valid() const{
    return m_results_isValid;
}

OAIGoogleCloudDiscoveryengineV1alphaSearchResponseSummary OAIGoogleCloudDiscoveryengineV1alphaSearchResponse::getSummary() const {
    return m_summary;
}
void OAIGoogleCloudDiscoveryengineV1alphaSearchResponse::setSummary(const OAIGoogleCloudDiscoveryengineV1alphaSearchResponseSummary &summary) {
    m_summary = summary;
    m_summary_isSet = true;
}

bool OAIGoogleCloudDiscoveryengineV1alphaSearchResponse::is_summary_Set() const{
    return m_summary_isSet;
}

bool OAIGoogleCloudDiscoveryengineV1alphaSearchResponse::is_summary_Valid() const{
    return m_summary_isValid;
}

qint32 OAIGoogleCloudDiscoveryengineV1alphaSearchResponse::getTotalSize() const {
    return m_total_size;
}
void OAIGoogleCloudDiscoveryengineV1alphaSearchResponse::setTotalSize(const qint32 &total_size) {
    m_total_size = total_size;
    m_total_size_isSet = true;
}

bool OAIGoogleCloudDiscoveryengineV1alphaSearchResponse::is_total_size_Set() const{
    return m_total_size_isSet;
}

bool OAIGoogleCloudDiscoveryengineV1alphaSearchResponse::is_total_size_Valid() const{
    return m_total_size_isValid;
}

bool OAIGoogleCloudDiscoveryengineV1alphaSearchResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_applied_controls.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_attribution_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_corrected_query_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_facets.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_geo_search_debug_info.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_guided_search_result.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_page_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_expansion_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_redirect_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_results.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_summary.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_size_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudDiscoveryengineV1alphaSearchResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
