/**
 * Discovery Engine API
 * Discovery Engine API.
 *
 * The version of the OpenAPI document: v1alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudDiscoveryengineV1alphaWidgetConverseConversationResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudDiscoveryengineV1alphaWidgetConverseConversationResponse::OAIGoogleCloudDiscoveryengineV1alphaWidgetConverseConversationResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudDiscoveryengineV1alphaWidgetConverseConversationResponse::OAIGoogleCloudDiscoveryengineV1alphaWidgetConverseConversationResponse() {
    this->initializeModel();
}

OAIGoogleCloudDiscoveryengineV1alphaWidgetConverseConversationResponse::~OAIGoogleCloudDiscoveryengineV1alphaWidgetConverseConversationResponse() {}

void OAIGoogleCloudDiscoveryengineV1alphaWidgetConverseConversationResponse::initializeModel() {

    m_conversation_id_isSet = false;
    m_conversation_id_isValid = false;

    m_converse_conversation_response_isSet = false;
    m_converse_conversation_response_isValid = false;

    m_u_token_isSet = false;
    m_u_token_isValid = false;
}

void OAIGoogleCloudDiscoveryengineV1alphaWidgetConverseConversationResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudDiscoveryengineV1alphaWidgetConverseConversationResponse::fromJsonObject(QJsonObject json) {

    m_conversation_id_isValid = ::OpenAPI::fromJsonValue(m_conversation_id, json[QString("conversationId")]);
    m_conversation_id_isSet = !json[QString("conversationId")].isNull() && m_conversation_id_isValid;

    m_converse_conversation_response_isValid = ::OpenAPI::fromJsonValue(m_converse_conversation_response, json[QString("converseConversationResponse")]);
    m_converse_conversation_response_isSet = !json[QString("converseConversationResponse")].isNull() && m_converse_conversation_response_isValid;

    m_u_token_isValid = ::OpenAPI::fromJsonValue(m_u_token, json[QString("uToken")]);
    m_u_token_isSet = !json[QString("uToken")].isNull() && m_u_token_isValid;
}

QString OAIGoogleCloudDiscoveryengineV1alphaWidgetConverseConversationResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudDiscoveryengineV1alphaWidgetConverseConversationResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_conversation_id_isSet) {
        obj.insert(QString("conversationId"), ::OpenAPI::toJsonValue(m_conversation_id));
    }
    if (m_converse_conversation_response.isSet()) {
        obj.insert(QString("converseConversationResponse"), ::OpenAPI::toJsonValue(m_converse_conversation_response));
    }
    if (m_u_token_isSet) {
        obj.insert(QString("uToken"), ::OpenAPI::toJsonValue(m_u_token));
    }
    return obj;
}

QString OAIGoogleCloudDiscoveryengineV1alphaWidgetConverseConversationResponse::getConversationId() const {
    return m_conversation_id;
}
void OAIGoogleCloudDiscoveryengineV1alphaWidgetConverseConversationResponse::setConversationId(const QString &conversation_id) {
    m_conversation_id = conversation_id;
    m_conversation_id_isSet = true;
}

bool OAIGoogleCloudDiscoveryengineV1alphaWidgetConverseConversationResponse::is_conversation_id_Set() const{
    return m_conversation_id_isSet;
}

bool OAIGoogleCloudDiscoveryengineV1alphaWidgetConverseConversationResponse::is_conversation_id_Valid() const{
    return m_conversation_id_isValid;
}

OAIGoogleCloudDiscoveryengineV1alphaConverseConversationResponse OAIGoogleCloudDiscoveryengineV1alphaWidgetConverseConversationResponse::getConverseConversationResponse() const {
    return m_converse_conversation_response;
}
void OAIGoogleCloudDiscoveryengineV1alphaWidgetConverseConversationResponse::setConverseConversationResponse(const OAIGoogleCloudDiscoveryengineV1alphaConverseConversationResponse &converse_conversation_response) {
    m_converse_conversation_response = converse_conversation_response;
    m_converse_conversation_response_isSet = true;
}

bool OAIGoogleCloudDiscoveryengineV1alphaWidgetConverseConversationResponse::is_converse_conversation_response_Set() const{
    return m_converse_conversation_response_isSet;
}

bool OAIGoogleCloudDiscoveryengineV1alphaWidgetConverseConversationResponse::is_converse_conversation_response_Valid() const{
    return m_converse_conversation_response_isValid;
}

QString OAIGoogleCloudDiscoveryengineV1alphaWidgetConverseConversationResponse::getUToken() const {
    return m_u_token;
}
void OAIGoogleCloudDiscoveryengineV1alphaWidgetConverseConversationResponse::setUToken(const QString &u_token) {
    m_u_token = u_token;
    m_u_token_isSet = true;
}

bool OAIGoogleCloudDiscoveryengineV1alphaWidgetConverseConversationResponse::is_u_token_Set() const{
    return m_u_token_isSet;
}

bool OAIGoogleCloudDiscoveryengineV1alphaWidgetConverseConversationResponse::is_u_token_Valid() const{
    return m_u_token_isValid;
}

bool OAIGoogleCloudDiscoveryengineV1alphaWidgetConverseConversationResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_conversation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_converse_conversation_response.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_u_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudDiscoveryengineV1alphaWidgetConverseConversationResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
