/**
 * Discovery Engine API
 * Discovery Engine API.
 *
 * The version of the OpenAPI document: v1alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudDiscoveryengineV1alphaFetchDomainVerificationStatusResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudDiscoveryengineV1alphaFetchDomainVerificationStatusResponse::OAIGoogleCloudDiscoveryengineV1alphaFetchDomainVerificationStatusResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudDiscoveryengineV1alphaFetchDomainVerificationStatusResponse::OAIGoogleCloudDiscoveryengineV1alphaFetchDomainVerificationStatusResponse() {
    this->initializeModel();
}

OAIGoogleCloudDiscoveryengineV1alphaFetchDomainVerificationStatusResponse::~OAIGoogleCloudDiscoveryengineV1alphaFetchDomainVerificationStatusResponse() {}

void OAIGoogleCloudDiscoveryengineV1alphaFetchDomainVerificationStatusResponse::initializeModel() {

    m_next_page_token_isSet = false;
    m_next_page_token_isValid = false;

    m_target_sites_isSet = false;
    m_target_sites_isValid = false;

    m_total_size_isSet = false;
    m_total_size_isValid = false;
}

void OAIGoogleCloudDiscoveryengineV1alphaFetchDomainVerificationStatusResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudDiscoveryengineV1alphaFetchDomainVerificationStatusResponse::fromJsonObject(QJsonObject json) {

    m_next_page_token_isValid = ::OpenAPI::fromJsonValue(m_next_page_token, json[QString("nextPageToken")]);
    m_next_page_token_isSet = !json[QString("nextPageToken")].isNull() && m_next_page_token_isValid;

    m_target_sites_isValid = ::OpenAPI::fromJsonValue(m_target_sites, json[QString("targetSites")]);
    m_target_sites_isSet = !json[QString("targetSites")].isNull() && m_target_sites_isValid;

    m_total_size_isValid = ::OpenAPI::fromJsonValue(m_total_size, json[QString("totalSize")]);
    m_total_size_isSet = !json[QString("totalSize")].isNull() && m_total_size_isValid;
}

QString OAIGoogleCloudDiscoveryengineV1alphaFetchDomainVerificationStatusResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudDiscoveryengineV1alphaFetchDomainVerificationStatusResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_next_page_token_isSet) {
        obj.insert(QString("nextPageToken"), ::OpenAPI::toJsonValue(m_next_page_token));
    }
    if (m_target_sites.size() > 0) {
        obj.insert(QString("targetSites"), ::OpenAPI::toJsonValue(m_target_sites));
    }
    if (m_total_size_isSet) {
        obj.insert(QString("totalSize"), ::OpenAPI::toJsonValue(m_total_size));
    }
    return obj;
}

QString OAIGoogleCloudDiscoveryengineV1alphaFetchDomainVerificationStatusResponse::getNextPageToken() const {
    return m_next_page_token;
}
void OAIGoogleCloudDiscoveryengineV1alphaFetchDomainVerificationStatusResponse::setNextPageToken(const QString &next_page_token) {
    m_next_page_token = next_page_token;
    m_next_page_token_isSet = true;
}

bool OAIGoogleCloudDiscoveryengineV1alphaFetchDomainVerificationStatusResponse::is_next_page_token_Set() const{
    return m_next_page_token_isSet;
}

bool OAIGoogleCloudDiscoveryengineV1alphaFetchDomainVerificationStatusResponse::is_next_page_token_Valid() const{
    return m_next_page_token_isValid;
}

QList<OAIGoogleCloudDiscoveryengineV1alphaTargetSite> OAIGoogleCloudDiscoveryengineV1alphaFetchDomainVerificationStatusResponse::getTargetSites() const {
    return m_target_sites;
}
void OAIGoogleCloudDiscoveryengineV1alphaFetchDomainVerificationStatusResponse::setTargetSites(const QList<OAIGoogleCloudDiscoveryengineV1alphaTargetSite> &target_sites) {
    m_target_sites = target_sites;
    m_target_sites_isSet = true;
}

bool OAIGoogleCloudDiscoveryengineV1alphaFetchDomainVerificationStatusResponse::is_target_sites_Set() const{
    return m_target_sites_isSet;
}

bool OAIGoogleCloudDiscoveryengineV1alphaFetchDomainVerificationStatusResponse::is_target_sites_Valid() const{
    return m_target_sites_isValid;
}

qint32 OAIGoogleCloudDiscoveryengineV1alphaFetchDomainVerificationStatusResponse::getTotalSize() const {
    return m_total_size;
}
void OAIGoogleCloudDiscoveryengineV1alphaFetchDomainVerificationStatusResponse::setTotalSize(const qint32 &total_size) {
    m_total_size = total_size;
    m_total_size_isSet = true;
}

bool OAIGoogleCloudDiscoveryengineV1alphaFetchDomainVerificationStatusResponse::is_total_size_Set() const{
    return m_total_size_isSet;
}

bool OAIGoogleCloudDiscoveryengineV1alphaFetchDomainVerificationStatusResponse::is_total_size_Valid() const{
    return m_total_size_isValid;
}

bool OAIGoogleCloudDiscoveryengineV1alphaFetchDomainVerificationStatusResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_next_page_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_sites.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_size_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudDiscoveryengineV1alphaFetchDomainVerificationStatusResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
