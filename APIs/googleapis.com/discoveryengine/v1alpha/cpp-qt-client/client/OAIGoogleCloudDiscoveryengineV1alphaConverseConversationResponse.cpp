/**
 * Discovery Engine API
 * Discovery Engine API.
 *
 * The version of the OpenAPI document: v1alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudDiscoveryengineV1alphaConverseConversationResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudDiscoveryengineV1alphaConverseConversationResponse::OAIGoogleCloudDiscoveryengineV1alphaConverseConversationResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudDiscoveryengineV1alphaConverseConversationResponse::OAIGoogleCloudDiscoveryengineV1alphaConverseConversationResponse() {
    this->initializeModel();
}

OAIGoogleCloudDiscoveryengineV1alphaConverseConversationResponse::~OAIGoogleCloudDiscoveryengineV1alphaConverseConversationResponse() {}

void OAIGoogleCloudDiscoveryengineV1alphaConverseConversationResponse::initializeModel() {

    m_conversation_isSet = false;
    m_conversation_isValid = false;

    m_related_questions_isSet = false;
    m_related_questions_isValid = false;

    m_reply_isSet = false;
    m_reply_isValid = false;

    m_search_results_isSet = false;
    m_search_results_isValid = false;
}

void OAIGoogleCloudDiscoveryengineV1alphaConverseConversationResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudDiscoveryengineV1alphaConverseConversationResponse::fromJsonObject(QJsonObject json) {

    m_conversation_isValid = ::OpenAPI::fromJsonValue(m_conversation, json[QString("conversation")]);
    m_conversation_isSet = !json[QString("conversation")].isNull() && m_conversation_isValid;

    m_related_questions_isValid = ::OpenAPI::fromJsonValue(m_related_questions, json[QString("relatedQuestions")]);
    m_related_questions_isSet = !json[QString("relatedQuestions")].isNull() && m_related_questions_isValid;

    m_reply_isValid = ::OpenAPI::fromJsonValue(m_reply, json[QString("reply")]);
    m_reply_isSet = !json[QString("reply")].isNull() && m_reply_isValid;

    m_search_results_isValid = ::OpenAPI::fromJsonValue(m_search_results, json[QString("searchResults")]);
    m_search_results_isSet = !json[QString("searchResults")].isNull() && m_search_results_isValid;
}

QString OAIGoogleCloudDiscoveryengineV1alphaConverseConversationResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudDiscoveryengineV1alphaConverseConversationResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_conversation.isSet()) {
        obj.insert(QString("conversation"), ::OpenAPI::toJsonValue(m_conversation));
    }
    if (m_related_questions.size() > 0) {
        obj.insert(QString("relatedQuestions"), ::OpenAPI::toJsonValue(m_related_questions));
    }
    if (m_reply.isSet()) {
        obj.insert(QString("reply"), ::OpenAPI::toJsonValue(m_reply));
    }
    if (m_search_results.size() > 0) {
        obj.insert(QString("searchResults"), ::OpenAPI::toJsonValue(m_search_results));
    }
    return obj;
}

OAIGoogleCloudDiscoveryengineV1alphaConversation OAIGoogleCloudDiscoveryengineV1alphaConverseConversationResponse::getConversation() const {
    return m_conversation;
}
void OAIGoogleCloudDiscoveryengineV1alphaConverseConversationResponse::setConversation(const OAIGoogleCloudDiscoveryengineV1alphaConversation &conversation) {
    m_conversation = conversation;
    m_conversation_isSet = true;
}

bool OAIGoogleCloudDiscoveryengineV1alphaConverseConversationResponse::is_conversation_Set() const{
    return m_conversation_isSet;
}

bool OAIGoogleCloudDiscoveryengineV1alphaConverseConversationResponse::is_conversation_Valid() const{
    return m_conversation_isValid;
}

QList<QString> OAIGoogleCloudDiscoveryengineV1alphaConverseConversationResponse::getRelatedQuestions() const {
    return m_related_questions;
}
void OAIGoogleCloudDiscoveryengineV1alphaConverseConversationResponse::setRelatedQuestions(const QList<QString> &related_questions) {
    m_related_questions = related_questions;
    m_related_questions_isSet = true;
}

bool OAIGoogleCloudDiscoveryengineV1alphaConverseConversationResponse::is_related_questions_Set() const{
    return m_related_questions_isSet;
}

bool OAIGoogleCloudDiscoveryengineV1alphaConverseConversationResponse::is_related_questions_Valid() const{
    return m_related_questions_isValid;
}

OAIGoogleCloudDiscoveryengineV1alphaReply OAIGoogleCloudDiscoveryengineV1alphaConverseConversationResponse::getReply() const {
    return m_reply;
}
void OAIGoogleCloudDiscoveryengineV1alphaConverseConversationResponse::setReply(const OAIGoogleCloudDiscoveryengineV1alphaReply &reply) {
    m_reply = reply;
    m_reply_isSet = true;
}

bool OAIGoogleCloudDiscoveryengineV1alphaConverseConversationResponse::is_reply_Set() const{
    return m_reply_isSet;
}

bool OAIGoogleCloudDiscoveryengineV1alphaConverseConversationResponse::is_reply_Valid() const{
    return m_reply_isValid;
}

QList<OAIGoogleCloudDiscoveryengineV1alphaSearchResponseSearchResult> OAIGoogleCloudDiscoveryengineV1alphaConverseConversationResponse::getSearchResults() const {
    return m_search_results;
}
void OAIGoogleCloudDiscoveryengineV1alphaConverseConversationResponse::setSearchResults(const QList<OAIGoogleCloudDiscoveryengineV1alphaSearchResponseSearchResult> &search_results) {
    m_search_results = search_results;
    m_search_results_isSet = true;
}

bool OAIGoogleCloudDiscoveryengineV1alphaConverseConversationResponse::is_search_results_Set() const{
    return m_search_results_isSet;
}

bool OAIGoogleCloudDiscoveryengineV1alphaConverseConversationResponse::is_search_results_Valid() const{
    return m_search_results_isValid;
}

bool OAIGoogleCloudDiscoveryengineV1alphaConverseConversationResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_conversation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_related_questions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_reply.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_search_results.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudDiscoveryengineV1alphaConverseConversationResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
