/**
 * Discovery Engine API
 * Discovery Engine API.
 *
 * The version of the OpenAPI document: v1alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudDiscoveryengineV1ImportUserEventsMetadata.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudDiscoveryengineV1ImportUserEventsMetadata::OAIGoogleCloudDiscoveryengineV1ImportUserEventsMetadata(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudDiscoveryengineV1ImportUserEventsMetadata::OAIGoogleCloudDiscoveryengineV1ImportUserEventsMetadata() {
    this->initializeModel();
}

OAIGoogleCloudDiscoveryengineV1ImportUserEventsMetadata::~OAIGoogleCloudDiscoveryengineV1ImportUserEventsMetadata() {}

void OAIGoogleCloudDiscoveryengineV1ImportUserEventsMetadata::initializeModel() {

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_failure_count_isSet = false;
    m_failure_count_isValid = false;

    m_success_count_isSet = false;
    m_success_count_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;
}

void OAIGoogleCloudDiscoveryengineV1ImportUserEventsMetadata::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudDiscoveryengineV1ImportUserEventsMetadata::fromJsonObject(QJsonObject json) {

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_failure_count_isValid = ::OpenAPI::fromJsonValue(m_failure_count, json[QString("failureCount")]);
    m_failure_count_isSet = !json[QString("failureCount")].isNull() && m_failure_count_isValid;

    m_success_count_isValid = ::OpenAPI::fromJsonValue(m_success_count, json[QString("successCount")]);
    m_success_count_isSet = !json[QString("successCount")].isNull() && m_success_count_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;
}

QString OAIGoogleCloudDiscoveryengineV1ImportUserEventsMetadata::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudDiscoveryengineV1ImportUserEventsMetadata::asJsonObject() const {
    QJsonObject obj;
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_failure_count_isSet) {
        obj.insert(QString("failureCount"), ::OpenAPI::toJsonValue(m_failure_count));
    }
    if (m_success_count_isSet) {
        obj.insert(QString("successCount"), ::OpenAPI::toJsonValue(m_success_count));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    return obj;
}

QString OAIGoogleCloudDiscoveryengineV1ImportUserEventsMetadata::getCreateTime() const {
    return m_create_time;
}
void OAIGoogleCloudDiscoveryengineV1ImportUserEventsMetadata::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIGoogleCloudDiscoveryengineV1ImportUserEventsMetadata::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIGoogleCloudDiscoveryengineV1ImportUserEventsMetadata::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAIGoogleCloudDiscoveryengineV1ImportUserEventsMetadata::getFailureCount() const {
    return m_failure_count;
}
void OAIGoogleCloudDiscoveryengineV1ImportUserEventsMetadata::setFailureCount(const QString &failure_count) {
    m_failure_count = failure_count;
    m_failure_count_isSet = true;
}

bool OAIGoogleCloudDiscoveryengineV1ImportUserEventsMetadata::is_failure_count_Set() const{
    return m_failure_count_isSet;
}

bool OAIGoogleCloudDiscoveryengineV1ImportUserEventsMetadata::is_failure_count_Valid() const{
    return m_failure_count_isValid;
}

QString OAIGoogleCloudDiscoveryengineV1ImportUserEventsMetadata::getSuccessCount() const {
    return m_success_count;
}
void OAIGoogleCloudDiscoveryengineV1ImportUserEventsMetadata::setSuccessCount(const QString &success_count) {
    m_success_count = success_count;
    m_success_count_isSet = true;
}

bool OAIGoogleCloudDiscoveryengineV1ImportUserEventsMetadata::is_success_count_Set() const{
    return m_success_count_isSet;
}

bool OAIGoogleCloudDiscoveryengineV1ImportUserEventsMetadata::is_success_count_Valid() const{
    return m_success_count_isValid;
}

QString OAIGoogleCloudDiscoveryengineV1ImportUserEventsMetadata::getUpdateTime() const {
    return m_update_time;
}
void OAIGoogleCloudDiscoveryengineV1ImportUserEventsMetadata::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAIGoogleCloudDiscoveryengineV1ImportUserEventsMetadata::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAIGoogleCloudDiscoveryengineV1ImportUserEventsMetadata::is_update_time_Valid() const{
    return m_update_time_isValid;
}

bool OAIGoogleCloudDiscoveryengineV1ImportUserEventsMetadata::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_failure_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_success_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudDiscoveryengineV1ImportUserEventsMetadata::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
