/**
 * Discovery Engine API
 * Discovery Engine API.
 *
 * The version of the OpenAPI document: v1alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudDiscoveryengineV1alphaSearchRequestFacetSpec.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudDiscoveryengineV1alphaSearchRequestFacetSpec::OAIGoogleCloudDiscoveryengineV1alphaSearchRequestFacetSpec(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudDiscoveryengineV1alphaSearchRequestFacetSpec::OAIGoogleCloudDiscoveryengineV1alphaSearchRequestFacetSpec() {
    this->initializeModel();
}

OAIGoogleCloudDiscoveryengineV1alphaSearchRequestFacetSpec::~OAIGoogleCloudDiscoveryengineV1alphaSearchRequestFacetSpec() {}

void OAIGoogleCloudDiscoveryengineV1alphaSearchRequestFacetSpec::initializeModel() {

    m_enable_dynamic_position_isSet = false;
    m_enable_dynamic_position_isValid = false;

    m_excluded_filter_keys_isSet = false;
    m_excluded_filter_keys_isValid = false;

    m_facet_key_isSet = false;
    m_facet_key_isValid = false;

    m_limit_isSet = false;
    m_limit_isValid = false;
}

void OAIGoogleCloudDiscoveryengineV1alphaSearchRequestFacetSpec::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudDiscoveryengineV1alphaSearchRequestFacetSpec::fromJsonObject(QJsonObject json) {

    m_enable_dynamic_position_isValid = ::OpenAPI::fromJsonValue(m_enable_dynamic_position, json[QString("enableDynamicPosition")]);
    m_enable_dynamic_position_isSet = !json[QString("enableDynamicPosition")].isNull() && m_enable_dynamic_position_isValid;

    m_excluded_filter_keys_isValid = ::OpenAPI::fromJsonValue(m_excluded_filter_keys, json[QString("excludedFilterKeys")]);
    m_excluded_filter_keys_isSet = !json[QString("excludedFilterKeys")].isNull() && m_excluded_filter_keys_isValid;

    m_facet_key_isValid = ::OpenAPI::fromJsonValue(m_facet_key, json[QString("facetKey")]);
    m_facet_key_isSet = !json[QString("facetKey")].isNull() && m_facet_key_isValid;

    m_limit_isValid = ::OpenAPI::fromJsonValue(m_limit, json[QString("limit")]);
    m_limit_isSet = !json[QString("limit")].isNull() && m_limit_isValid;
}

QString OAIGoogleCloudDiscoveryengineV1alphaSearchRequestFacetSpec::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudDiscoveryengineV1alphaSearchRequestFacetSpec::asJsonObject() const {
    QJsonObject obj;
    if (m_enable_dynamic_position_isSet) {
        obj.insert(QString("enableDynamicPosition"), ::OpenAPI::toJsonValue(m_enable_dynamic_position));
    }
    if (m_excluded_filter_keys.size() > 0) {
        obj.insert(QString("excludedFilterKeys"), ::OpenAPI::toJsonValue(m_excluded_filter_keys));
    }
    if (m_facet_key.isSet()) {
        obj.insert(QString("facetKey"), ::OpenAPI::toJsonValue(m_facet_key));
    }
    if (m_limit_isSet) {
        obj.insert(QString("limit"), ::OpenAPI::toJsonValue(m_limit));
    }
    return obj;
}

bool OAIGoogleCloudDiscoveryengineV1alphaSearchRequestFacetSpec::isEnableDynamicPosition() const {
    return m_enable_dynamic_position;
}
void OAIGoogleCloudDiscoveryengineV1alphaSearchRequestFacetSpec::setEnableDynamicPosition(const bool &enable_dynamic_position) {
    m_enable_dynamic_position = enable_dynamic_position;
    m_enable_dynamic_position_isSet = true;
}

bool OAIGoogleCloudDiscoveryengineV1alphaSearchRequestFacetSpec::is_enable_dynamic_position_Set() const{
    return m_enable_dynamic_position_isSet;
}

bool OAIGoogleCloudDiscoveryengineV1alphaSearchRequestFacetSpec::is_enable_dynamic_position_Valid() const{
    return m_enable_dynamic_position_isValid;
}

QList<QString> OAIGoogleCloudDiscoveryengineV1alphaSearchRequestFacetSpec::getExcludedFilterKeys() const {
    return m_excluded_filter_keys;
}
void OAIGoogleCloudDiscoveryengineV1alphaSearchRequestFacetSpec::setExcludedFilterKeys(const QList<QString> &excluded_filter_keys) {
    m_excluded_filter_keys = excluded_filter_keys;
    m_excluded_filter_keys_isSet = true;
}

bool OAIGoogleCloudDiscoveryengineV1alphaSearchRequestFacetSpec::is_excluded_filter_keys_Set() const{
    return m_excluded_filter_keys_isSet;
}

bool OAIGoogleCloudDiscoveryengineV1alphaSearchRequestFacetSpec::is_excluded_filter_keys_Valid() const{
    return m_excluded_filter_keys_isValid;
}

OAIGoogleCloudDiscoveryengineV1alphaSearchRequestFacetSpecFacetKey OAIGoogleCloudDiscoveryengineV1alphaSearchRequestFacetSpec::getFacetKey() const {
    return m_facet_key;
}
void OAIGoogleCloudDiscoveryengineV1alphaSearchRequestFacetSpec::setFacetKey(const OAIGoogleCloudDiscoveryengineV1alphaSearchRequestFacetSpecFacetKey &facet_key) {
    m_facet_key = facet_key;
    m_facet_key_isSet = true;
}

bool OAIGoogleCloudDiscoveryengineV1alphaSearchRequestFacetSpec::is_facet_key_Set() const{
    return m_facet_key_isSet;
}

bool OAIGoogleCloudDiscoveryengineV1alphaSearchRequestFacetSpec::is_facet_key_Valid() const{
    return m_facet_key_isValid;
}

qint32 OAIGoogleCloudDiscoveryengineV1alphaSearchRequestFacetSpec::getLimit() const {
    return m_limit;
}
void OAIGoogleCloudDiscoveryengineV1alphaSearchRequestFacetSpec::setLimit(const qint32 &limit) {
    m_limit = limit;
    m_limit_isSet = true;
}

bool OAIGoogleCloudDiscoveryengineV1alphaSearchRequestFacetSpec::is_limit_Set() const{
    return m_limit_isSet;
}

bool OAIGoogleCloudDiscoveryengineV1alphaSearchRequestFacetSpec::is_limit_Valid() const{
    return m_limit_isValid;
}

bool OAIGoogleCloudDiscoveryengineV1alphaSearchRequestFacetSpec::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_enable_dynamic_position_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_excluded_filter_keys.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_facet_key.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_limit_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudDiscoveryengineV1alphaSearchRequestFacetSpec::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
