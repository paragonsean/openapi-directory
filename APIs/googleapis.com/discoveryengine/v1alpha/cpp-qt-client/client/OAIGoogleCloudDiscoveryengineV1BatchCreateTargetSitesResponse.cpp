/**
 * Discovery Engine API
 * Discovery Engine API.
 *
 * The version of the OpenAPI document: v1alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudDiscoveryengineV1BatchCreateTargetSitesResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudDiscoveryengineV1BatchCreateTargetSitesResponse::OAIGoogleCloudDiscoveryengineV1BatchCreateTargetSitesResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudDiscoveryengineV1BatchCreateTargetSitesResponse::OAIGoogleCloudDiscoveryengineV1BatchCreateTargetSitesResponse() {
    this->initializeModel();
}

OAIGoogleCloudDiscoveryengineV1BatchCreateTargetSitesResponse::~OAIGoogleCloudDiscoveryengineV1BatchCreateTargetSitesResponse() {}

void OAIGoogleCloudDiscoveryengineV1BatchCreateTargetSitesResponse::initializeModel() {

    m_target_sites_isSet = false;
    m_target_sites_isValid = false;
}

void OAIGoogleCloudDiscoveryengineV1BatchCreateTargetSitesResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudDiscoveryengineV1BatchCreateTargetSitesResponse::fromJsonObject(QJsonObject json) {

    m_target_sites_isValid = ::OpenAPI::fromJsonValue(m_target_sites, json[QString("targetSites")]);
    m_target_sites_isSet = !json[QString("targetSites")].isNull() && m_target_sites_isValid;
}

QString OAIGoogleCloudDiscoveryengineV1BatchCreateTargetSitesResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudDiscoveryengineV1BatchCreateTargetSitesResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_target_sites.size() > 0) {
        obj.insert(QString("targetSites"), ::OpenAPI::toJsonValue(m_target_sites));
    }
    return obj;
}

QList<OAIGoogleCloudDiscoveryengineV1TargetSite> OAIGoogleCloudDiscoveryengineV1BatchCreateTargetSitesResponse::getTargetSites() const {
    return m_target_sites;
}
void OAIGoogleCloudDiscoveryengineV1BatchCreateTargetSitesResponse::setTargetSites(const QList<OAIGoogleCloudDiscoveryengineV1TargetSite> &target_sites) {
    m_target_sites = target_sites;
    m_target_sites_isSet = true;
}

bool OAIGoogleCloudDiscoveryengineV1BatchCreateTargetSitesResponse::is_target_sites_Set() const{
    return m_target_sites_isSet;
}

bool OAIGoogleCloudDiscoveryengineV1BatchCreateTargetSitesResponse::is_target_sites_Valid() const{
    return m_target_sites_isValid;
}

bool OAIGoogleCloudDiscoveryengineV1BatchCreateTargetSitesResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_target_sites.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudDiscoveryengineV1BatchCreateTargetSitesResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
