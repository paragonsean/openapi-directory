/**
 * Discovery Engine API
 * Discovery Engine API.
 *
 * The version of the OpenAPI document: v1alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudDiscoveryengineV1alphaImportUserEventsRequestInlineSource.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudDiscoveryengineV1alphaImportUserEventsRequestInlineSource::OAIGoogleCloudDiscoveryengineV1alphaImportUserEventsRequestInlineSource(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudDiscoveryengineV1alphaImportUserEventsRequestInlineSource::OAIGoogleCloudDiscoveryengineV1alphaImportUserEventsRequestInlineSource() {
    this->initializeModel();
}

OAIGoogleCloudDiscoveryengineV1alphaImportUserEventsRequestInlineSource::~OAIGoogleCloudDiscoveryengineV1alphaImportUserEventsRequestInlineSource() {}

void OAIGoogleCloudDiscoveryengineV1alphaImportUserEventsRequestInlineSource::initializeModel() {

    m_user_events_isSet = false;
    m_user_events_isValid = false;
}

void OAIGoogleCloudDiscoveryengineV1alphaImportUserEventsRequestInlineSource::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudDiscoveryengineV1alphaImportUserEventsRequestInlineSource::fromJsonObject(QJsonObject json) {

    m_user_events_isValid = ::OpenAPI::fromJsonValue(m_user_events, json[QString("userEvents")]);
    m_user_events_isSet = !json[QString("userEvents")].isNull() && m_user_events_isValid;
}

QString OAIGoogleCloudDiscoveryengineV1alphaImportUserEventsRequestInlineSource::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudDiscoveryengineV1alphaImportUserEventsRequestInlineSource::asJsonObject() const {
    QJsonObject obj;
    if (m_user_events.size() > 0) {
        obj.insert(QString("userEvents"), ::OpenAPI::toJsonValue(m_user_events));
    }
    return obj;
}

QList<OAIGoogleCloudDiscoveryengineV1alphaUserEvent> OAIGoogleCloudDiscoveryengineV1alphaImportUserEventsRequestInlineSource::getUserEvents() const {
    return m_user_events;
}
void OAIGoogleCloudDiscoveryengineV1alphaImportUserEventsRequestInlineSource::setUserEvents(const QList<OAIGoogleCloudDiscoveryengineV1alphaUserEvent> &user_events) {
    m_user_events = user_events;
    m_user_events_isSet = true;
}

bool OAIGoogleCloudDiscoveryengineV1alphaImportUserEventsRequestInlineSource::is_user_events_Set() const{
    return m_user_events_isSet;
}

bool OAIGoogleCloudDiscoveryengineV1alphaImportUserEventsRequestInlineSource::is_user_events_Valid() const{
    return m_user_events_isValid;
}

bool OAIGoogleCloudDiscoveryengineV1alphaImportUserEventsRequestInlineSource::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_user_events.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudDiscoveryengineV1alphaImportUserEventsRequestInlineSource::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
