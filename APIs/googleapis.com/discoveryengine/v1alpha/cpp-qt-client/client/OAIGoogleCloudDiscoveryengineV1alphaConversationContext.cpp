/**
 * Discovery Engine API
 * Discovery Engine API.
 *
 * The version of the OpenAPI document: v1alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudDiscoveryengineV1alphaConversationContext.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudDiscoveryengineV1alphaConversationContext::OAIGoogleCloudDiscoveryengineV1alphaConversationContext(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudDiscoveryengineV1alphaConversationContext::OAIGoogleCloudDiscoveryengineV1alphaConversationContext() {
    this->initializeModel();
}

OAIGoogleCloudDiscoveryengineV1alphaConversationContext::~OAIGoogleCloudDiscoveryengineV1alphaConversationContext() {}

void OAIGoogleCloudDiscoveryengineV1alphaConversationContext::initializeModel() {

    m_active_document_isSet = false;
    m_active_document_isValid = false;

    m_context_documents_isSet = false;
    m_context_documents_isValid = false;
}

void OAIGoogleCloudDiscoveryengineV1alphaConversationContext::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudDiscoveryengineV1alphaConversationContext::fromJsonObject(QJsonObject json) {

    m_active_document_isValid = ::OpenAPI::fromJsonValue(m_active_document, json[QString("activeDocument")]);
    m_active_document_isSet = !json[QString("activeDocument")].isNull() && m_active_document_isValid;

    m_context_documents_isValid = ::OpenAPI::fromJsonValue(m_context_documents, json[QString("contextDocuments")]);
    m_context_documents_isSet = !json[QString("contextDocuments")].isNull() && m_context_documents_isValid;
}

QString OAIGoogleCloudDiscoveryengineV1alphaConversationContext::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudDiscoveryengineV1alphaConversationContext::asJsonObject() const {
    QJsonObject obj;
    if (m_active_document_isSet) {
        obj.insert(QString("activeDocument"), ::OpenAPI::toJsonValue(m_active_document));
    }
    if (m_context_documents.size() > 0) {
        obj.insert(QString("contextDocuments"), ::OpenAPI::toJsonValue(m_context_documents));
    }
    return obj;
}

QString OAIGoogleCloudDiscoveryengineV1alphaConversationContext::getActiveDocument() const {
    return m_active_document;
}
void OAIGoogleCloudDiscoveryengineV1alphaConversationContext::setActiveDocument(const QString &active_document) {
    m_active_document = active_document;
    m_active_document_isSet = true;
}

bool OAIGoogleCloudDiscoveryengineV1alphaConversationContext::is_active_document_Set() const{
    return m_active_document_isSet;
}

bool OAIGoogleCloudDiscoveryengineV1alphaConversationContext::is_active_document_Valid() const{
    return m_active_document_isValid;
}

QList<QString> OAIGoogleCloudDiscoveryengineV1alphaConversationContext::getContextDocuments() const {
    return m_context_documents;
}
void OAIGoogleCloudDiscoveryengineV1alphaConversationContext::setContextDocuments(const QList<QString> &context_documents) {
    m_context_documents = context_documents;
    m_context_documents_isSet = true;
}

bool OAIGoogleCloudDiscoveryengineV1alphaConversationContext::is_context_documents_Set() const{
    return m_context_documents_isSet;
}

bool OAIGoogleCloudDiscoveryengineV1alphaConversationContext::is_context_documents_Valid() const{
    return m_context_documents_isValid;
}

bool OAIGoogleCloudDiscoveryengineV1alphaConversationContext::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active_document_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_context_documents.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudDiscoveryengineV1alphaConversationContext::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
