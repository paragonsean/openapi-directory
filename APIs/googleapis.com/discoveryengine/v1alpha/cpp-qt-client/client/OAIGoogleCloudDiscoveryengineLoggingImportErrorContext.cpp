/**
 * Discovery Engine API
 * Discovery Engine API.
 *
 * The version of the OpenAPI document: v1alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudDiscoveryengineLoggingImportErrorContext.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudDiscoveryengineLoggingImportErrorContext::OAIGoogleCloudDiscoveryengineLoggingImportErrorContext(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudDiscoveryengineLoggingImportErrorContext::OAIGoogleCloudDiscoveryengineLoggingImportErrorContext() {
    this->initializeModel();
}

OAIGoogleCloudDiscoveryengineLoggingImportErrorContext::~OAIGoogleCloudDiscoveryengineLoggingImportErrorContext() {}

void OAIGoogleCloudDiscoveryengineLoggingImportErrorContext::initializeModel() {

    m_document_isSet = false;
    m_document_isValid = false;

    m_gcs_path_isSet = false;
    m_gcs_path_isValid = false;

    m_line_number_isSet = false;
    m_line_number_isValid = false;

    m_operation_isSet = false;
    m_operation_isValid = false;

    m_user_event_isSet = false;
    m_user_event_isValid = false;
}

void OAIGoogleCloudDiscoveryengineLoggingImportErrorContext::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudDiscoveryengineLoggingImportErrorContext::fromJsonObject(QJsonObject json) {

    m_document_isValid = ::OpenAPI::fromJsonValue(m_document, json[QString("document")]);
    m_document_isSet = !json[QString("document")].isNull() && m_document_isValid;

    m_gcs_path_isValid = ::OpenAPI::fromJsonValue(m_gcs_path, json[QString("gcsPath")]);
    m_gcs_path_isSet = !json[QString("gcsPath")].isNull() && m_gcs_path_isValid;

    m_line_number_isValid = ::OpenAPI::fromJsonValue(m_line_number, json[QString("lineNumber")]);
    m_line_number_isSet = !json[QString("lineNumber")].isNull() && m_line_number_isValid;

    m_operation_isValid = ::OpenAPI::fromJsonValue(m_operation, json[QString("operation")]);
    m_operation_isSet = !json[QString("operation")].isNull() && m_operation_isValid;

    m_user_event_isValid = ::OpenAPI::fromJsonValue(m_user_event, json[QString("userEvent")]);
    m_user_event_isSet = !json[QString("userEvent")].isNull() && m_user_event_isValid;
}

QString OAIGoogleCloudDiscoveryengineLoggingImportErrorContext::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudDiscoveryengineLoggingImportErrorContext::asJsonObject() const {
    QJsonObject obj;
    if (m_document_isSet) {
        obj.insert(QString("document"), ::OpenAPI::toJsonValue(m_document));
    }
    if (m_gcs_path_isSet) {
        obj.insert(QString("gcsPath"), ::OpenAPI::toJsonValue(m_gcs_path));
    }
    if (m_line_number_isSet) {
        obj.insert(QString("lineNumber"), ::OpenAPI::toJsonValue(m_line_number));
    }
    if (m_operation_isSet) {
        obj.insert(QString("operation"), ::OpenAPI::toJsonValue(m_operation));
    }
    if (m_user_event_isSet) {
        obj.insert(QString("userEvent"), ::OpenAPI::toJsonValue(m_user_event));
    }
    return obj;
}

QString OAIGoogleCloudDiscoveryengineLoggingImportErrorContext::getDocument() const {
    return m_document;
}
void OAIGoogleCloudDiscoveryengineLoggingImportErrorContext::setDocument(const QString &document) {
    m_document = document;
    m_document_isSet = true;
}

bool OAIGoogleCloudDiscoveryengineLoggingImportErrorContext::is_document_Set() const{
    return m_document_isSet;
}

bool OAIGoogleCloudDiscoveryengineLoggingImportErrorContext::is_document_Valid() const{
    return m_document_isValid;
}

QString OAIGoogleCloudDiscoveryengineLoggingImportErrorContext::getGcsPath() const {
    return m_gcs_path;
}
void OAIGoogleCloudDiscoveryengineLoggingImportErrorContext::setGcsPath(const QString &gcs_path) {
    m_gcs_path = gcs_path;
    m_gcs_path_isSet = true;
}

bool OAIGoogleCloudDiscoveryengineLoggingImportErrorContext::is_gcs_path_Set() const{
    return m_gcs_path_isSet;
}

bool OAIGoogleCloudDiscoveryengineLoggingImportErrorContext::is_gcs_path_Valid() const{
    return m_gcs_path_isValid;
}

QString OAIGoogleCloudDiscoveryengineLoggingImportErrorContext::getLineNumber() const {
    return m_line_number;
}
void OAIGoogleCloudDiscoveryengineLoggingImportErrorContext::setLineNumber(const QString &line_number) {
    m_line_number = line_number;
    m_line_number_isSet = true;
}

bool OAIGoogleCloudDiscoveryengineLoggingImportErrorContext::is_line_number_Set() const{
    return m_line_number_isSet;
}

bool OAIGoogleCloudDiscoveryengineLoggingImportErrorContext::is_line_number_Valid() const{
    return m_line_number_isValid;
}

QString OAIGoogleCloudDiscoveryengineLoggingImportErrorContext::getOperation() const {
    return m_operation;
}
void OAIGoogleCloudDiscoveryengineLoggingImportErrorContext::setOperation(const QString &operation) {
    m_operation = operation;
    m_operation_isSet = true;
}

bool OAIGoogleCloudDiscoveryengineLoggingImportErrorContext::is_operation_Set() const{
    return m_operation_isSet;
}

bool OAIGoogleCloudDiscoveryengineLoggingImportErrorContext::is_operation_Valid() const{
    return m_operation_isValid;
}

QString OAIGoogleCloudDiscoveryengineLoggingImportErrorContext::getUserEvent() const {
    return m_user_event;
}
void OAIGoogleCloudDiscoveryengineLoggingImportErrorContext::setUserEvent(const QString &user_event) {
    m_user_event = user_event;
    m_user_event_isSet = true;
}

bool OAIGoogleCloudDiscoveryengineLoggingImportErrorContext::is_user_event_Set() const{
    return m_user_event_isSet;
}

bool OAIGoogleCloudDiscoveryengineLoggingImportErrorContext::is_user_event_Valid() const{
    return m_user_event_isValid;
}

bool OAIGoogleCloudDiscoveryengineLoggingImportErrorContext::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_document_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gcs_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_operation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_event_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudDiscoveryengineLoggingImportErrorContext::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
