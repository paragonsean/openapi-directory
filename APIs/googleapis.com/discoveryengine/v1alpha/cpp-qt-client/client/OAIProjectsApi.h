/**
 * Discovery Engine API
 * Discovery Engine API.
 *
 * The version of the OpenAPI document: v1alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIProjectsApi_H
#define OAI_OAIProjectsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIGoogleApiHttpBody.h"
#include "OAIGoogleCloudDiscoveryengineV1alphaBatchCreateTargetSitesRequest.h"
#include "OAIGoogleCloudDiscoveryengineV1alphaCompleteQueryResponse.h"
#include "OAIGoogleCloudDiscoveryengineV1alphaConversation.h"
#include "OAIGoogleCloudDiscoveryengineV1alphaConverseConversationRequest.h"
#include "OAIGoogleCloudDiscoveryengineV1alphaConverseConversationResponse.h"
#include "OAIGoogleCloudDiscoveryengineV1alphaDataStore.h"
#include "OAIGoogleCloudDiscoveryengineV1alphaDocument.h"
#include "OAIGoogleCloudDiscoveryengineV1alphaEngine.h"
#include "OAIGoogleCloudDiscoveryengineV1alphaEstimateDataSizeRequest.h"
#include "OAIGoogleCloudDiscoveryengineV1alphaFetchDomainVerificationStatusResponse.h"
#include "OAIGoogleCloudDiscoveryengineV1alphaImportDocumentsRequest.h"
#include "OAIGoogleCloudDiscoveryengineV1alphaImportSuggestionDenyListEntriesRequest.h"
#include "OAIGoogleCloudDiscoveryengineV1alphaImportUserEventsRequest.h"
#include "OAIGoogleCloudDiscoveryengineV1alphaListConversationsResponse.h"
#include "OAIGoogleCloudDiscoveryengineV1alphaListDataStoresResponse.h"
#include "OAIGoogleCloudDiscoveryengineV1alphaListDocumentsResponse.h"
#include "OAIGoogleCloudDiscoveryengineV1alphaListEnginesResponse.h"
#include "OAIGoogleCloudDiscoveryengineV1alphaListSchemasResponse.h"
#include "OAIGoogleCloudDiscoveryengineV1alphaListServingConfigsResponse.h"
#include "OAIGoogleCloudDiscoveryengineV1alphaListTargetSitesResponse.h"
#include "OAIGoogleCloudDiscoveryengineV1alphaPurgeDocumentsRequest.h"
#include "OAIGoogleCloudDiscoveryengineV1alphaPurgeUserEventsRequest.h"
#include "OAIGoogleCloudDiscoveryengineV1alphaRecommendRequest.h"
#include "OAIGoogleCloudDiscoveryengineV1alphaRecommendResponse.h"
#include "OAIGoogleCloudDiscoveryengineV1alphaRecrawlUrisRequest.h"
#include "OAIGoogleCloudDiscoveryengineV1alphaSchema.h"
#include "OAIGoogleCloudDiscoveryengineV1alphaSearchRequest.h"
#include "OAIGoogleCloudDiscoveryengineV1alphaSearchResponse.h"
#include "OAIGoogleCloudDiscoveryengineV1alphaTargetSite.h"
#include "OAIGoogleCloudDiscoveryengineV1alphaTrainCustomModelRequest.h"
#include "OAIGoogleCloudDiscoveryengineV1alphaUserEvent.h"
#include "OAIGoogleLongrunningListOperationsResponse.h"
#include "OAIGoogleLongrunningOperation.h"
#include "OAIObject.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIProjectsApi : public QObject {
    Q_OBJECT

public:
    OAIProjectsApi(const int timeOut = 0);
    ~OAIProjectsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  body OAIObject [optional]
    */
    virtual void discoveryengine_projects_locations_collections_dataStores_siteSearchEngine_batchVerifyTargetSites(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIObject> &body = ::OpenAPI::OptionalParam<OAIObject>());

    /**
    * @param[in]  site_search_engine QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void discoveryengine_projects_locations_collections_dataStores_siteSearchEngine_fetchDomainVerificationStatus(const QString &site_search_engine, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  data_store QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_discoveryengine_v1alpha_train_custom_model_request OAIGoogleCloudDiscoveryengineV1alphaTrainCustomModelRequest [optional]
    */
    virtual void discoveryengine_projects_locations_collections_dataStores_trainCustomModel(const QString &data_store, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudDiscoveryengineV1alphaTrainCustomModelRequest> &oai_google_cloud_discoveryengine_v1alpha_train_custom_model_request = ::OpenAPI::OptionalParam<OAIGoogleCloudDiscoveryengineV1alphaTrainCustomModelRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  engine_id QString [optional]
    * @param[in]  oai_google_cloud_discoveryengine_v1alpha_engine OAIGoogleCloudDiscoveryengineV1alphaEngine [optional]
    */
    virtual void discoveryengine_projects_locations_collections_engines_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &engine_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudDiscoveryengineV1alphaEngine> &oai_google_cloud_discoveryengine_v1alpha_engine = ::OpenAPI::OptionalParam<OAIGoogleCloudDiscoveryengineV1alphaEngine>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void discoveryengine_projects_locations_collections_engines_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  body OAIObject [optional]
    */
    virtual void discoveryengine_projects_locations_collections_engines_pause(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIObject> &body = ::OpenAPI::OptionalParam<OAIObject>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  body OAIObject [optional]
    */
    virtual void discoveryengine_projects_locations_collections_engines_resume(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIObject> &body = ::OpenAPI::OptionalParam<OAIObject>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  body OAIObject [optional]
    */
    virtual void discoveryengine_projects_locations_collections_engines_tune(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIObject> &body = ::OpenAPI::OptionalParam<OAIObject>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  document_id QString [optional]
    * @param[in]  oai_google_cloud_discoveryengine_v1alpha_document OAIGoogleCloudDiscoveryengineV1alphaDocument [optional]
    */
    virtual void discoveryengine_projects_locations_dataStores_branches_documents_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &document_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudDiscoveryengineV1alphaDocument> &oai_google_cloud_discoveryengine_v1alpha_document = ::OpenAPI::OptionalParam<OAIGoogleCloudDiscoveryengineV1alphaDocument>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_discoveryengine_v1alpha_import_documents_request OAIGoogleCloudDiscoveryengineV1alphaImportDocumentsRequest [optional]
    */
    virtual void discoveryengine_projects_locations_dataStores_branches_documents_import(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudDiscoveryengineV1alphaImportDocumentsRequest> &oai_google_cloud_discoveryengine_v1alpha_import_documents_request = ::OpenAPI::OptionalParam<OAIGoogleCloudDiscoveryengineV1alphaImportDocumentsRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void discoveryengine_projects_locations_dataStores_branches_documents_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_discoveryengine_v1alpha_purge_documents_request OAIGoogleCloudDiscoveryengineV1alphaPurgeDocumentsRequest [optional]
    */
    virtual void discoveryengine_projects_locations_dataStores_branches_documents_purge(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudDiscoveryengineV1alphaPurgeDocumentsRequest> &oai_google_cloud_discoveryengine_v1alpha_purge_documents_request = ::OpenAPI::OptionalParam<OAIGoogleCloudDiscoveryengineV1alphaPurgeDocumentsRequest>());

    /**
    * @param[in]  data_store QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  include_tail_suggestions bool [optional]
    * @param[in]  query QString [optional]
    * @param[in]  query_model QString [optional]
    * @param[in]  user_pseudo_id QString [optional]
    */
    virtual void discoveryengine_projects_locations_dataStores_completeQuery(const QString &data_store, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &include_tail_suggestions = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &query = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &query_model = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_pseudo_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_discoveryengine_v1alpha_converse_conversation_request OAIGoogleCloudDiscoveryengineV1alphaConverseConversationRequest [optional]
    */
    virtual void discoveryengine_projects_locations_dataStores_conversations_converse(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudDiscoveryengineV1alphaConverseConversationRequest> &oai_google_cloud_discoveryengine_v1alpha_converse_conversation_request = ::OpenAPI::OptionalParam<OAIGoogleCloudDiscoveryengineV1alphaConverseConversationRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_discoveryengine_v1alpha_conversation OAIGoogleCloudDiscoveryengineV1alphaConversation [optional]
    */
    virtual void discoveryengine_projects_locations_dataStores_conversations_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudDiscoveryengineV1alphaConversation> &oai_google_cloud_discoveryengine_v1alpha_conversation = ::OpenAPI::OptionalParam<OAIGoogleCloudDiscoveryengineV1alphaConversation>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  order_by QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void discoveryengine_projects_locations_dataStores_conversations_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  create_advanced_site_search bool [optional]
    * @param[in]  data_store_id QString [optional]
    * @param[in]  oai_google_cloud_discoveryengine_v1alpha_data_store OAIGoogleCloudDiscoveryengineV1alphaDataStore [optional]
    */
    virtual void discoveryengine_projects_locations_dataStores_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &create_advanced_site_search = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &data_store_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudDiscoveryengineV1alphaDataStore> &oai_google_cloud_discoveryengine_v1alpha_data_store = ::OpenAPI::OptionalParam<OAIGoogleCloudDiscoveryengineV1alphaDataStore>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void discoveryengine_projects_locations_dataStores_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  schema_id QString [optional]
    * @param[in]  oai_google_cloud_discoveryengine_v1alpha_schema OAIGoogleCloudDiscoveryengineV1alphaSchema [optional]
    */
    virtual void discoveryengine_projects_locations_dataStores_schemas_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &schema_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudDiscoveryengineV1alphaSchema> &oai_google_cloud_discoveryengine_v1alpha_schema = ::OpenAPI::OptionalParam<OAIGoogleCloudDiscoveryengineV1alphaSchema>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void discoveryengine_projects_locations_dataStores_schemas_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void discoveryengine_projects_locations_dataStores_servingConfigs_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  serving_config QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_discoveryengine_v1alpha_recommend_request OAIGoogleCloudDiscoveryengineV1alphaRecommendRequest [optional]
    */
    virtual void discoveryengine_projects_locations_dataStores_servingConfigs_recommend(const QString &serving_config, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudDiscoveryengineV1alphaRecommendRequest> &oai_google_cloud_discoveryengine_v1alpha_recommend_request = ::OpenAPI::OptionalParam<OAIGoogleCloudDiscoveryengineV1alphaRecommendRequest>());

    /**
    * @param[in]  serving_config QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_discoveryengine_v1alpha_search_request OAIGoogleCloudDiscoveryengineV1alphaSearchRequest [optional]
    */
    virtual void discoveryengine_projects_locations_dataStores_servingConfigs_search(const QString &serving_config, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudDiscoveryengineV1alphaSearchRequest> &oai_google_cloud_discoveryengine_v1alpha_search_request = ::OpenAPI::OptionalParam<OAIGoogleCloudDiscoveryengineV1alphaSearchRequest>());

    /**
    * @param[in]  site_search_engine QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  body OAIObject [optional]
    */
    virtual void discoveryengine_projects_locations_dataStores_siteSearchEngine_disableAdvancedSiteSearch(const QString &site_search_engine, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIObject> &body = ::OpenAPI::OptionalParam<OAIObject>());

    /**
    * @param[in]  site_search_engine QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  body OAIObject [optional]
    */
    virtual void discoveryengine_projects_locations_dataStores_siteSearchEngine_enableAdvancedSiteSearch(const QString &site_search_engine, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIObject> &body = ::OpenAPI::OptionalParam<OAIObject>());

    /**
    * @param[in]  site_search_engine QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_discoveryengine_v1alpha_recrawl_uris_request OAIGoogleCloudDiscoveryengineV1alphaRecrawlUrisRequest [optional]
    */
    virtual void discoveryengine_projects_locations_dataStores_siteSearchEngine_recrawlUris(const QString &site_search_engine, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudDiscoveryengineV1alphaRecrawlUrisRequest> &oai_google_cloud_discoveryengine_v1alpha_recrawl_uris_request = ::OpenAPI::OptionalParam<OAIGoogleCloudDiscoveryengineV1alphaRecrawlUrisRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_discoveryengine_v1alpha_batch_create_target_sites_request OAIGoogleCloudDiscoveryengineV1alphaBatchCreateTargetSitesRequest [optional]
    */
    virtual void discoveryengine_projects_locations_dataStores_siteSearchEngine_targetSites_batchCreate(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudDiscoveryengineV1alphaBatchCreateTargetSitesRequest> &oai_google_cloud_discoveryengine_v1alpha_batch_create_target_sites_request = ::OpenAPI::OptionalParam<OAIGoogleCloudDiscoveryengineV1alphaBatchCreateTargetSitesRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_discoveryengine_v1alpha_target_site OAIGoogleCloudDiscoveryengineV1alphaTargetSite [optional]
    */
    virtual void discoveryengine_projects_locations_dataStores_siteSearchEngine_targetSites_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudDiscoveryengineV1alphaTargetSite> &oai_google_cloud_discoveryengine_v1alpha_target_site = ::OpenAPI::OptionalParam<OAIGoogleCloudDiscoveryengineV1alphaTargetSite>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    */
    virtual void discoveryengine_projects_locations_dataStores_siteSearchEngine_targetSites_delete(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void discoveryengine_projects_locations_dataStores_siteSearchEngine_targetSites_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  update_mask QString [optional]
    * @param[in]  oai_google_cloud_discoveryengine_v1alpha_target_site OAIGoogleCloudDiscoveryengineV1alphaTargetSite [optional]
    */
    virtual void discoveryengine_projects_locations_dataStores_siteSearchEngine_targetSites_patch(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &update_mask = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudDiscoveryengineV1alphaTargetSite> &oai_google_cloud_discoveryengine_v1alpha_target_site = ::OpenAPI::OptionalParam<OAIGoogleCloudDiscoveryengineV1alphaTargetSite>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_discoveryengine_v1alpha_import_suggestion_deny_list_entries_request OAIGoogleCloudDiscoveryengineV1alphaImportSuggestionDenyListEntriesRequest [optional]
    */
    virtual void discoveryengine_projects_locations_dataStores_suggestionDenyListEntries_import(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudDiscoveryengineV1alphaImportSuggestionDenyListEntriesRequest> &oai_google_cloud_discoveryengine_v1alpha_import_suggestion_deny_list_entries_request = ::OpenAPI::OptionalParam<OAIGoogleCloudDiscoveryengineV1alphaImportSuggestionDenyListEntriesRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  body OAIObject [optional]
    */
    virtual void discoveryengine_projects_locations_dataStores_suggestionDenyListEntries_purge(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIObject> &body = ::OpenAPI::OptionalParam<OAIObject>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  ets QString [optional]
    * @param[in]  uri QString [optional]
    * @param[in]  user_event QString [optional]
    */
    virtual void discoveryengine_projects_locations_dataStores_userEvents_collect(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ets = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &uri = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_event = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_discoveryengine_v1alpha_import_user_events_request OAIGoogleCloudDiscoveryengineV1alphaImportUserEventsRequest [optional]
    */
    virtual void discoveryengine_projects_locations_dataStores_userEvents_import(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudDiscoveryengineV1alphaImportUserEventsRequest> &oai_google_cloud_discoveryengine_v1alpha_import_user_events_request = ::OpenAPI::OptionalParam<OAIGoogleCloudDiscoveryengineV1alphaImportUserEventsRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_discoveryengine_v1alpha_purge_user_events_request OAIGoogleCloudDiscoveryengineV1alphaPurgeUserEventsRequest [optional]
    */
    virtual void discoveryengine_projects_locations_dataStores_userEvents_purge(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudDiscoveryengineV1alphaPurgeUserEventsRequest> &oai_google_cloud_discoveryengine_v1alpha_purge_user_events_request = ::OpenAPI::OptionalParam<OAIGoogleCloudDiscoveryengineV1alphaPurgeUserEventsRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_discoveryengine_v1alpha_user_event OAIGoogleCloudDiscoveryengineV1alphaUserEvent [optional]
    */
    virtual void discoveryengine_projects_locations_dataStores_userEvents_write(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudDiscoveryengineV1alphaUserEvent> &oai_google_cloud_discoveryengine_v1alpha_user_event = ::OpenAPI::OptionalParam<OAIGoogleCloudDiscoveryengineV1alphaUserEvent>());

    /**
    * @param[in]  location QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_discoveryengine_v1alpha_estimate_data_size_request OAIGoogleCloudDiscoveryengineV1alphaEstimateDataSizeRequest [optional]
    */
    virtual void discoveryengine_projects_locations_estimateDataSize(const QString &location, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudDiscoveryengineV1alphaEstimateDataSizeRequest> &oai_google_cloud_discoveryengine_v1alpha_estimate_data_size_request = ::OpenAPI::OptionalParam<OAIGoogleCloudDiscoveryengineV1alphaEstimateDataSizeRequest>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    */
    virtual void discoveryengine_projects_operations_get(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void discoveryengine_projects_operations_list(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void discoveryengine_projects_locations_collections_dataStores_siteSearchEngine_batchVerifyTargetSitesCallback(OAIHttpRequestWorker *worker);
    void discoveryengine_projects_locations_collections_dataStores_siteSearchEngine_fetchDomainVerificationStatusCallback(OAIHttpRequestWorker *worker);
    void discoveryengine_projects_locations_collections_dataStores_trainCustomModelCallback(OAIHttpRequestWorker *worker);
    void discoveryengine_projects_locations_collections_engines_createCallback(OAIHttpRequestWorker *worker);
    void discoveryengine_projects_locations_collections_engines_listCallback(OAIHttpRequestWorker *worker);
    void discoveryengine_projects_locations_collections_engines_pauseCallback(OAIHttpRequestWorker *worker);
    void discoveryengine_projects_locations_collections_engines_resumeCallback(OAIHttpRequestWorker *worker);
    void discoveryengine_projects_locations_collections_engines_tuneCallback(OAIHttpRequestWorker *worker);
    void discoveryengine_projects_locations_dataStores_branches_documents_createCallback(OAIHttpRequestWorker *worker);
    void discoveryengine_projects_locations_dataStores_branches_documents_importCallback(OAIHttpRequestWorker *worker);
    void discoveryengine_projects_locations_dataStores_branches_documents_listCallback(OAIHttpRequestWorker *worker);
    void discoveryengine_projects_locations_dataStores_branches_documents_purgeCallback(OAIHttpRequestWorker *worker);
    void discoveryengine_projects_locations_dataStores_completeQueryCallback(OAIHttpRequestWorker *worker);
    void discoveryengine_projects_locations_dataStores_conversations_converseCallback(OAIHttpRequestWorker *worker);
    void discoveryengine_projects_locations_dataStores_conversations_createCallback(OAIHttpRequestWorker *worker);
    void discoveryengine_projects_locations_dataStores_conversations_listCallback(OAIHttpRequestWorker *worker);
    void discoveryengine_projects_locations_dataStores_createCallback(OAIHttpRequestWorker *worker);
    void discoveryengine_projects_locations_dataStores_listCallback(OAIHttpRequestWorker *worker);
    void discoveryengine_projects_locations_dataStores_schemas_createCallback(OAIHttpRequestWorker *worker);
    void discoveryengine_projects_locations_dataStores_schemas_listCallback(OAIHttpRequestWorker *worker);
    void discoveryengine_projects_locations_dataStores_servingConfigs_listCallback(OAIHttpRequestWorker *worker);
    void discoveryengine_projects_locations_dataStores_servingConfigs_recommendCallback(OAIHttpRequestWorker *worker);
    void discoveryengine_projects_locations_dataStores_servingConfigs_searchCallback(OAIHttpRequestWorker *worker);
    void discoveryengine_projects_locations_dataStores_siteSearchEngine_disableAdvancedSiteSearchCallback(OAIHttpRequestWorker *worker);
    void discoveryengine_projects_locations_dataStores_siteSearchEngine_enableAdvancedSiteSearchCallback(OAIHttpRequestWorker *worker);
    void discoveryengine_projects_locations_dataStores_siteSearchEngine_recrawlUrisCallback(OAIHttpRequestWorker *worker);
    void discoveryengine_projects_locations_dataStores_siteSearchEngine_targetSites_batchCreateCallback(OAIHttpRequestWorker *worker);
    void discoveryengine_projects_locations_dataStores_siteSearchEngine_targetSites_createCallback(OAIHttpRequestWorker *worker);
    void discoveryengine_projects_locations_dataStores_siteSearchEngine_targetSites_deleteCallback(OAIHttpRequestWorker *worker);
    void discoveryengine_projects_locations_dataStores_siteSearchEngine_targetSites_listCallback(OAIHttpRequestWorker *worker);
    void discoveryengine_projects_locations_dataStores_siteSearchEngine_targetSites_patchCallback(OAIHttpRequestWorker *worker);
    void discoveryengine_projects_locations_dataStores_suggestionDenyListEntries_importCallback(OAIHttpRequestWorker *worker);
    void discoveryengine_projects_locations_dataStores_suggestionDenyListEntries_purgeCallback(OAIHttpRequestWorker *worker);
    void discoveryengine_projects_locations_dataStores_userEvents_collectCallback(OAIHttpRequestWorker *worker);
    void discoveryengine_projects_locations_dataStores_userEvents_importCallback(OAIHttpRequestWorker *worker);
    void discoveryengine_projects_locations_dataStores_userEvents_purgeCallback(OAIHttpRequestWorker *worker);
    void discoveryengine_projects_locations_dataStores_userEvents_writeCallback(OAIHttpRequestWorker *worker);
    void discoveryengine_projects_locations_estimateDataSizeCallback(OAIHttpRequestWorker *worker);
    void discoveryengine_projects_operations_getCallback(OAIHttpRequestWorker *worker);
    void discoveryengine_projects_operations_listCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void discoveryengine_projects_locations_collections_dataStores_siteSearchEngine_batchVerifyTargetSitesSignal(OAIGoogleLongrunningOperation summary);
    void discoveryengine_projects_locations_collections_dataStores_siteSearchEngine_fetchDomainVerificationStatusSignal(OAIGoogleCloudDiscoveryengineV1alphaFetchDomainVerificationStatusResponse summary);
    void discoveryengine_projects_locations_collections_dataStores_trainCustomModelSignal(OAIGoogleLongrunningOperation summary);
    void discoveryengine_projects_locations_collections_engines_createSignal(OAIGoogleLongrunningOperation summary);
    void discoveryengine_projects_locations_collections_engines_listSignal(OAIGoogleCloudDiscoveryengineV1alphaListEnginesResponse summary);
    void discoveryengine_projects_locations_collections_engines_pauseSignal(OAIGoogleCloudDiscoveryengineV1alphaEngine summary);
    void discoveryengine_projects_locations_collections_engines_resumeSignal(OAIGoogleCloudDiscoveryengineV1alphaEngine summary);
    void discoveryengine_projects_locations_collections_engines_tuneSignal(OAIGoogleLongrunningOperation summary);
    void discoveryengine_projects_locations_dataStores_branches_documents_createSignal(OAIGoogleCloudDiscoveryengineV1alphaDocument summary);
    void discoveryengine_projects_locations_dataStores_branches_documents_importSignal(OAIGoogleLongrunningOperation summary);
    void discoveryengine_projects_locations_dataStores_branches_documents_listSignal(OAIGoogleCloudDiscoveryengineV1alphaListDocumentsResponse summary);
    void discoveryengine_projects_locations_dataStores_branches_documents_purgeSignal(OAIGoogleLongrunningOperation summary);
    void discoveryengine_projects_locations_dataStores_completeQuerySignal(OAIGoogleCloudDiscoveryengineV1alphaCompleteQueryResponse summary);
    void discoveryengine_projects_locations_dataStores_conversations_converseSignal(OAIGoogleCloudDiscoveryengineV1alphaConverseConversationResponse summary);
    void discoveryengine_projects_locations_dataStores_conversations_createSignal(OAIGoogleCloudDiscoveryengineV1alphaConversation summary);
    void discoveryengine_projects_locations_dataStores_conversations_listSignal(OAIGoogleCloudDiscoveryengineV1alphaListConversationsResponse summary);
    void discoveryengine_projects_locations_dataStores_createSignal(OAIGoogleLongrunningOperation summary);
    void discoveryengine_projects_locations_dataStores_listSignal(OAIGoogleCloudDiscoveryengineV1alphaListDataStoresResponse summary);
    void discoveryengine_projects_locations_dataStores_schemas_createSignal(OAIGoogleLongrunningOperation summary);
    void discoveryengine_projects_locations_dataStores_schemas_listSignal(OAIGoogleCloudDiscoveryengineV1alphaListSchemasResponse summary);
    void discoveryengine_projects_locations_dataStores_servingConfigs_listSignal(OAIGoogleCloudDiscoveryengineV1alphaListServingConfigsResponse summary);
    void discoveryengine_projects_locations_dataStores_servingConfigs_recommendSignal(OAIGoogleCloudDiscoveryengineV1alphaRecommendResponse summary);
    void discoveryengine_projects_locations_dataStores_servingConfigs_searchSignal(OAIGoogleCloudDiscoveryengineV1alphaSearchResponse summary);
    void discoveryengine_projects_locations_dataStores_siteSearchEngine_disableAdvancedSiteSearchSignal(OAIGoogleLongrunningOperation summary);
    void discoveryengine_projects_locations_dataStores_siteSearchEngine_enableAdvancedSiteSearchSignal(OAIGoogleLongrunningOperation summary);
    void discoveryengine_projects_locations_dataStores_siteSearchEngine_recrawlUrisSignal(OAIGoogleLongrunningOperation summary);
    void discoveryengine_projects_locations_dataStores_siteSearchEngine_targetSites_batchCreateSignal(OAIGoogleLongrunningOperation summary);
    void discoveryengine_projects_locations_dataStores_siteSearchEngine_targetSites_createSignal(OAIGoogleLongrunningOperation summary);
    void discoveryengine_projects_locations_dataStores_siteSearchEngine_targetSites_deleteSignal(OAIGoogleLongrunningOperation summary);
    void discoveryengine_projects_locations_dataStores_siteSearchEngine_targetSites_listSignal(OAIGoogleCloudDiscoveryengineV1alphaListTargetSitesResponse summary);
    void discoveryengine_projects_locations_dataStores_siteSearchEngine_targetSites_patchSignal(OAIGoogleLongrunningOperation summary);
    void discoveryengine_projects_locations_dataStores_suggestionDenyListEntries_importSignal(OAIGoogleLongrunningOperation summary);
    void discoveryengine_projects_locations_dataStores_suggestionDenyListEntries_purgeSignal(OAIGoogleLongrunningOperation summary);
    void discoveryengine_projects_locations_dataStores_userEvents_collectSignal(OAIGoogleApiHttpBody summary);
    void discoveryengine_projects_locations_dataStores_userEvents_importSignal(OAIGoogleLongrunningOperation summary);
    void discoveryengine_projects_locations_dataStores_userEvents_purgeSignal(OAIGoogleLongrunningOperation summary);
    void discoveryengine_projects_locations_dataStores_userEvents_writeSignal(OAIGoogleCloudDiscoveryengineV1alphaUserEvent summary);
    void discoveryengine_projects_locations_estimateDataSizeSignal(OAIGoogleLongrunningOperation summary);
    void discoveryengine_projects_operations_getSignal(OAIGoogleLongrunningOperation summary);
    void discoveryengine_projects_operations_listSignal(OAIGoogleLongrunningListOperationsResponse summary);


    void discoveryengine_projects_locations_collections_dataStores_siteSearchEngine_batchVerifyTargetSitesSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void discoveryengine_projects_locations_collections_dataStores_siteSearchEngine_fetchDomainVerificationStatusSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudDiscoveryengineV1alphaFetchDomainVerificationStatusResponse summary);
    void discoveryengine_projects_locations_collections_dataStores_trainCustomModelSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void discoveryengine_projects_locations_collections_engines_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void discoveryengine_projects_locations_collections_engines_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudDiscoveryengineV1alphaListEnginesResponse summary);
    void discoveryengine_projects_locations_collections_engines_pauseSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudDiscoveryengineV1alphaEngine summary);
    void discoveryengine_projects_locations_collections_engines_resumeSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudDiscoveryengineV1alphaEngine summary);
    void discoveryengine_projects_locations_collections_engines_tuneSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void discoveryengine_projects_locations_dataStores_branches_documents_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudDiscoveryengineV1alphaDocument summary);
    void discoveryengine_projects_locations_dataStores_branches_documents_importSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void discoveryengine_projects_locations_dataStores_branches_documents_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudDiscoveryengineV1alphaListDocumentsResponse summary);
    void discoveryengine_projects_locations_dataStores_branches_documents_purgeSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void discoveryengine_projects_locations_dataStores_completeQuerySignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudDiscoveryengineV1alphaCompleteQueryResponse summary);
    void discoveryengine_projects_locations_dataStores_conversations_converseSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudDiscoveryengineV1alphaConverseConversationResponse summary);
    void discoveryengine_projects_locations_dataStores_conversations_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudDiscoveryengineV1alphaConversation summary);
    void discoveryengine_projects_locations_dataStores_conversations_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudDiscoveryengineV1alphaListConversationsResponse summary);
    void discoveryengine_projects_locations_dataStores_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void discoveryengine_projects_locations_dataStores_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudDiscoveryengineV1alphaListDataStoresResponse summary);
    void discoveryengine_projects_locations_dataStores_schemas_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void discoveryengine_projects_locations_dataStores_schemas_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudDiscoveryengineV1alphaListSchemasResponse summary);
    void discoveryengine_projects_locations_dataStores_servingConfigs_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudDiscoveryengineV1alphaListServingConfigsResponse summary);
    void discoveryengine_projects_locations_dataStores_servingConfigs_recommendSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudDiscoveryengineV1alphaRecommendResponse summary);
    void discoveryengine_projects_locations_dataStores_servingConfigs_searchSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudDiscoveryengineV1alphaSearchResponse summary);
    void discoveryengine_projects_locations_dataStores_siteSearchEngine_disableAdvancedSiteSearchSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void discoveryengine_projects_locations_dataStores_siteSearchEngine_enableAdvancedSiteSearchSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void discoveryengine_projects_locations_dataStores_siteSearchEngine_recrawlUrisSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void discoveryengine_projects_locations_dataStores_siteSearchEngine_targetSites_batchCreateSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void discoveryengine_projects_locations_dataStores_siteSearchEngine_targetSites_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void discoveryengine_projects_locations_dataStores_siteSearchEngine_targetSites_deleteSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void discoveryengine_projects_locations_dataStores_siteSearchEngine_targetSites_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudDiscoveryengineV1alphaListTargetSitesResponse summary);
    void discoveryengine_projects_locations_dataStores_siteSearchEngine_targetSites_patchSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void discoveryengine_projects_locations_dataStores_suggestionDenyListEntries_importSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void discoveryengine_projects_locations_dataStores_suggestionDenyListEntries_purgeSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void discoveryengine_projects_locations_dataStores_userEvents_collectSignalFull(OAIHttpRequestWorker *worker, OAIGoogleApiHttpBody summary);
    void discoveryengine_projects_locations_dataStores_userEvents_importSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void discoveryengine_projects_locations_dataStores_userEvents_purgeSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void discoveryengine_projects_locations_dataStores_userEvents_writeSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudDiscoveryengineV1alphaUserEvent summary);
    void discoveryengine_projects_locations_estimateDataSizeSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void discoveryengine_projects_operations_getSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void discoveryengine_projects_operations_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningListOperationsResponse summary);

    Q_DECL_DEPRECATED_X("Use discoveryengine_projects_locations_collections_dataStores_siteSearchEngine_batchVerifyTargetSitesSignalError() instead")
    void discoveryengine_projects_locations_collections_dataStores_siteSearchEngine_batchVerifyTargetSitesSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void discoveryengine_projects_locations_collections_dataStores_siteSearchEngine_batchVerifyTargetSitesSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use discoveryengine_projects_locations_collections_dataStores_siteSearchEngine_fetchDomainVerificationStatusSignalError() instead")
    void discoveryengine_projects_locations_collections_dataStores_siteSearchEngine_fetchDomainVerificationStatusSignalE(OAIGoogleCloudDiscoveryengineV1alphaFetchDomainVerificationStatusResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void discoveryengine_projects_locations_collections_dataStores_siteSearchEngine_fetchDomainVerificationStatusSignalError(OAIGoogleCloudDiscoveryengineV1alphaFetchDomainVerificationStatusResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use discoveryengine_projects_locations_collections_dataStores_trainCustomModelSignalError() instead")
    void discoveryengine_projects_locations_collections_dataStores_trainCustomModelSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void discoveryengine_projects_locations_collections_dataStores_trainCustomModelSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use discoveryengine_projects_locations_collections_engines_createSignalError() instead")
    void discoveryengine_projects_locations_collections_engines_createSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void discoveryengine_projects_locations_collections_engines_createSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use discoveryengine_projects_locations_collections_engines_listSignalError() instead")
    void discoveryengine_projects_locations_collections_engines_listSignalE(OAIGoogleCloudDiscoveryengineV1alphaListEnginesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void discoveryengine_projects_locations_collections_engines_listSignalError(OAIGoogleCloudDiscoveryengineV1alphaListEnginesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use discoveryengine_projects_locations_collections_engines_pauseSignalError() instead")
    void discoveryengine_projects_locations_collections_engines_pauseSignalE(OAIGoogleCloudDiscoveryengineV1alphaEngine summary, QNetworkReply::NetworkError error_type, QString error_str);
    void discoveryengine_projects_locations_collections_engines_pauseSignalError(OAIGoogleCloudDiscoveryengineV1alphaEngine summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use discoveryengine_projects_locations_collections_engines_resumeSignalError() instead")
    void discoveryengine_projects_locations_collections_engines_resumeSignalE(OAIGoogleCloudDiscoveryengineV1alphaEngine summary, QNetworkReply::NetworkError error_type, QString error_str);
    void discoveryengine_projects_locations_collections_engines_resumeSignalError(OAIGoogleCloudDiscoveryengineV1alphaEngine summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use discoveryengine_projects_locations_collections_engines_tuneSignalError() instead")
    void discoveryengine_projects_locations_collections_engines_tuneSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void discoveryengine_projects_locations_collections_engines_tuneSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use discoveryengine_projects_locations_dataStores_branches_documents_createSignalError() instead")
    void discoveryengine_projects_locations_dataStores_branches_documents_createSignalE(OAIGoogleCloudDiscoveryengineV1alphaDocument summary, QNetworkReply::NetworkError error_type, QString error_str);
    void discoveryengine_projects_locations_dataStores_branches_documents_createSignalError(OAIGoogleCloudDiscoveryengineV1alphaDocument summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use discoveryengine_projects_locations_dataStores_branches_documents_importSignalError() instead")
    void discoveryengine_projects_locations_dataStores_branches_documents_importSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void discoveryengine_projects_locations_dataStores_branches_documents_importSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use discoveryengine_projects_locations_dataStores_branches_documents_listSignalError() instead")
    void discoveryengine_projects_locations_dataStores_branches_documents_listSignalE(OAIGoogleCloudDiscoveryengineV1alphaListDocumentsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void discoveryengine_projects_locations_dataStores_branches_documents_listSignalError(OAIGoogleCloudDiscoveryengineV1alphaListDocumentsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use discoveryengine_projects_locations_dataStores_branches_documents_purgeSignalError() instead")
    void discoveryengine_projects_locations_dataStores_branches_documents_purgeSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void discoveryengine_projects_locations_dataStores_branches_documents_purgeSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use discoveryengine_projects_locations_dataStores_completeQuerySignalError() instead")
    void discoveryengine_projects_locations_dataStores_completeQuerySignalE(OAIGoogleCloudDiscoveryengineV1alphaCompleteQueryResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void discoveryengine_projects_locations_dataStores_completeQuerySignalError(OAIGoogleCloudDiscoveryengineV1alphaCompleteQueryResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use discoveryengine_projects_locations_dataStores_conversations_converseSignalError() instead")
    void discoveryengine_projects_locations_dataStores_conversations_converseSignalE(OAIGoogleCloudDiscoveryengineV1alphaConverseConversationResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void discoveryengine_projects_locations_dataStores_conversations_converseSignalError(OAIGoogleCloudDiscoveryengineV1alphaConverseConversationResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use discoveryengine_projects_locations_dataStores_conversations_createSignalError() instead")
    void discoveryengine_projects_locations_dataStores_conversations_createSignalE(OAIGoogleCloudDiscoveryengineV1alphaConversation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void discoveryengine_projects_locations_dataStores_conversations_createSignalError(OAIGoogleCloudDiscoveryengineV1alphaConversation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use discoveryengine_projects_locations_dataStores_conversations_listSignalError() instead")
    void discoveryengine_projects_locations_dataStores_conversations_listSignalE(OAIGoogleCloudDiscoveryengineV1alphaListConversationsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void discoveryengine_projects_locations_dataStores_conversations_listSignalError(OAIGoogleCloudDiscoveryengineV1alphaListConversationsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use discoveryengine_projects_locations_dataStores_createSignalError() instead")
    void discoveryengine_projects_locations_dataStores_createSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void discoveryengine_projects_locations_dataStores_createSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use discoveryengine_projects_locations_dataStores_listSignalError() instead")
    void discoveryengine_projects_locations_dataStores_listSignalE(OAIGoogleCloudDiscoveryengineV1alphaListDataStoresResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void discoveryengine_projects_locations_dataStores_listSignalError(OAIGoogleCloudDiscoveryengineV1alphaListDataStoresResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use discoveryengine_projects_locations_dataStores_schemas_createSignalError() instead")
    void discoveryengine_projects_locations_dataStores_schemas_createSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void discoveryengine_projects_locations_dataStores_schemas_createSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use discoveryengine_projects_locations_dataStores_schemas_listSignalError() instead")
    void discoveryengine_projects_locations_dataStores_schemas_listSignalE(OAIGoogleCloudDiscoveryengineV1alphaListSchemasResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void discoveryengine_projects_locations_dataStores_schemas_listSignalError(OAIGoogleCloudDiscoveryengineV1alphaListSchemasResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use discoveryengine_projects_locations_dataStores_servingConfigs_listSignalError() instead")
    void discoveryengine_projects_locations_dataStores_servingConfigs_listSignalE(OAIGoogleCloudDiscoveryengineV1alphaListServingConfigsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void discoveryengine_projects_locations_dataStores_servingConfigs_listSignalError(OAIGoogleCloudDiscoveryengineV1alphaListServingConfigsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use discoveryengine_projects_locations_dataStores_servingConfigs_recommendSignalError() instead")
    void discoveryengine_projects_locations_dataStores_servingConfigs_recommendSignalE(OAIGoogleCloudDiscoveryengineV1alphaRecommendResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void discoveryengine_projects_locations_dataStores_servingConfigs_recommendSignalError(OAIGoogleCloudDiscoveryengineV1alphaRecommendResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use discoveryengine_projects_locations_dataStores_servingConfigs_searchSignalError() instead")
    void discoveryengine_projects_locations_dataStores_servingConfigs_searchSignalE(OAIGoogleCloudDiscoveryengineV1alphaSearchResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void discoveryengine_projects_locations_dataStores_servingConfigs_searchSignalError(OAIGoogleCloudDiscoveryengineV1alphaSearchResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use discoveryengine_projects_locations_dataStores_siteSearchEngine_disableAdvancedSiteSearchSignalError() instead")
    void discoveryengine_projects_locations_dataStores_siteSearchEngine_disableAdvancedSiteSearchSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void discoveryengine_projects_locations_dataStores_siteSearchEngine_disableAdvancedSiteSearchSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use discoveryengine_projects_locations_dataStores_siteSearchEngine_enableAdvancedSiteSearchSignalError() instead")
    void discoveryengine_projects_locations_dataStores_siteSearchEngine_enableAdvancedSiteSearchSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void discoveryengine_projects_locations_dataStores_siteSearchEngine_enableAdvancedSiteSearchSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use discoveryengine_projects_locations_dataStores_siteSearchEngine_recrawlUrisSignalError() instead")
    void discoveryengine_projects_locations_dataStores_siteSearchEngine_recrawlUrisSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void discoveryengine_projects_locations_dataStores_siteSearchEngine_recrawlUrisSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use discoveryengine_projects_locations_dataStores_siteSearchEngine_targetSites_batchCreateSignalError() instead")
    void discoveryengine_projects_locations_dataStores_siteSearchEngine_targetSites_batchCreateSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void discoveryengine_projects_locations_dataStores_siteSearchEngine_targetSites_batchCreateSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use discoveryengine_projects_locations_dataStores_siteSearchEngine_targetSites_createSignalError() instead")
    void discoveryengine_projects_locations_dataStores_siteSearchEngine_targetSites_createSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void discoveryengine_projects_locations_dataStores_siteSearchEngine_targetSites_createSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use discoveryengine_projects_locations_dataStores_siteSearchEngine_targetSites_deleteSignalError() instead")
    void discoveryengine_projects_locations_dataStores_siteSearchEngine_targetSites_deleteSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void discoveryengine_projects_locations_dataStores_siteSearchEngine_targetSites_deleteSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use discoveryengine_projects_locations_dataStores_siteSearchEngine_targetSites_listSignalError() instead")
    void discoveryengine_projects_locations_dataStores_siteSearchEngine_targetSites_listSignalE(OAIGoogleCloudDiscoveryengineV1alphaListTargetSitesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void discoveryengine_projects_locations_dataStores_siteSearchEngine_targetSites_listSignalError(OAIGoogleCloudDiscoveryengineV1alphaListTargetSitesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use discoveryengine_projects_locations_dataStores_siteSearchEngine_targetSites_patchSignalError() instead")
    void discoveryengine_projects_locations_dataStores_siteSearchEngine_targetSites_patchSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void discoveryengine_projects_locations_dataStores_siteSearchEngine_targetSites_patchSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use discoveryengine_projects_locations_dataStores_suggestionDenyListEntries_importSignalError() instead")
    void discoveryengine_projects_locations_dataStores_suggestionDenyListEntries_importSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void discoveryengine_projects_locations_dataStores_suggestionDenyListEntries_importSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use discoveryengine_projects_locations_dataStores_suggestionDenyListEntries_purgeSignalError() instead")
    void discoveryengine_projects_locations_dataStores_suggestionDenyListEntries_purgeSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void discoveryengine_projects_locations_dataStores_suggestionDenyListEntries_purgeSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use discoveryengine_projects_locations_dataStores_userEvents_collectSignalError() instead")
    void discoveryengine_projects_locations_dataStores_userEvents_collectSignalE(OAIGoogleApiHttpBody summary, QNetworkReply::NetworkError error_type, QString error_str);
    void discoveryengine_projects_locations_dataStores_userEvents_collectSignalError(OAIGoogleApiHttpBody summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use discoveryengine_projects_locations_dataStores_userEvents_importSignalError() instead")
    void discoveryengine_projects_locations_dataStores_userEvents_importSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void discoveryengine_projects_locations_dataStores_userEvents_importSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use discoveryengine_projects_locations_dataStores_userEvents_purgeSignalError() instead")
    void discoveryengine_projects_locations_dataStores_userEvents_purgeSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void discoveryengine_projects_locations_dataStores_userEvents_purgeSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use discoveryengine_projects_locations_dataStores_userEvents_writeSignalError() instead")
    void discoveryengine_projects_locations_dataStores_userEvents_writeSignalE(OAIGoogleCloudDiscoveryengineV1alphaUserEvent summary, QNetworkReply::NetworkError error_type, QString error_str);
    void discoveryengine_projects_locations_dataStores_userEvents_writeSignalError(OAIGoogleCloudDiscoveryengineV1alphaUserEvent summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use discoveryengine_projects_locations_estimateDataSizeSignalError() instead")
    void discoveryengine_projects_locations_estimateDataSizeSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void discoveryengine_projects_locations_estimateDataSizeSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use discoveryengine_projects_operations_getSignalError() instead")
    void discoveryengine_projects_operations_getSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void discoveryengine_projects_operations_getSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use discoveryengine_projects_operations_listSignalError() instead")
    void discoveryengine_projects_operations_listSignalE(OAIGoogleLongrunningListOperationsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void discoveryengine_projects_operations_listSignalError(OAIGoogleLongrunningListOperationsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use discoveryengine_projects_locations_collections_dataStores_siteSearchEngine_batchVerifyTargetSitesSignalErrorFull() instead")
    void discoveryengine_projects_locations_collections_dataStores_siteSearchEngine_batchVerifyTargetSitesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void discoveryengine_projects_locations_collections_dataStores_siteSearchEngine_batchVerifyTargetSitesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use discoveryengine_projects_locations_collections_dataStores_siteSearchEngine_fetchDomainVerificationStatusSignalErrorFull() instead")
    void discoveryengine_projects_locations_collections_dataStores_siteSearchEngine_fetchDomainVerificationStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void discoveryengine_projects_locations_collections_dataStores_siteSearchEngine_fetchDomainVerificationStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use discoveryengine_projects_locations_collections_dataStores_trainCustomModelSignalErrorFull() instead")
    void discoveryengine_projects_locations_collections_dataStores_trainCustomModelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void discoveryengine_projects_locations_collections_dataStores_trainCustomModelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use discoveryengine_projects_locations_collections_engines_createSignalErrorFull() instead")
    void discoveryengine_projects_locations_collections_engines_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void discoveryengine_projects_locations_collections_engines_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use discoveryengine_projects_locations_collections_engines_listSignalErrorFull() instead")
    void discoveryengine_projects_locations_collections_engines_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void discoveryengine_projects_locations_collections_engines_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use discoveryengine_projects_locations_collections_engines_pauseSignalErrorFull() instead")
    void discoveryengine_projects_locations_collections_engines_pauseSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void discoveryengine_projects_locations_collections_engines_pauseSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use discoveryengine_projects_locations_collections_engines_resumeSignalErrorFull() instead")
    void discoveryengine_projects_locations_collections_engines_resumeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void discoveryengine_projects_locations_collections_engines_resumeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use discoveryengine_projects_locations_collections_engines_tuneSignalErrorFull() instead")
    void discoveryengine_projects_locations_collections_engines_tuneSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void discoveryengine_projects_locations_collections_engines_tuneSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use discoveryengine_projects_locations_dataStores_branches_documents_createSignalErrorFull() instead")
    void discoveryengine_projects_locations_dataStores_branches_documents_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void discoveryengine_projects_locations_dataStores_branches_documents_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use discoveryengine_projects_locations_dataStores_branches_documents_importSignalErrorFull() instead")
    void discoveryengine_projects_locations_dataStores_branches_documents_importSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void discoveryengine_projects_locations_dataStores_branches_documents_importSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use discoveryengine_projects_locations_dataStores_branches_documents_listSignalErrorFull() instead")
    void discoveryengine_projects_locations_dataStores_branches_documents_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void discoveryengine_projects_locations_dataStores_branches_documents_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use discoveryengine_projects_locations_dataStores_branches_documents_purgeSignalErrorFull() instead")
    void discoveryengine_projects_locations_dataStores_branches_documents_purgeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void discoveryengine_projects_locations_dataStores_branches_documents_purgeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use discoveryengine_projects_locations_dataStores_completeQuerySignalErrorFull() instead")
    void discoveryengine_projects_locations_dataStores_completeQuerySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void discoveryengine_projects_locations_dataStores_completeQuerySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use discoveryengine_projects_locations_dataStores_conversations_converseSignalErrorFull() instead")
    void discoveryengine_projects_locations_dataStores_conversations_converseSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void discoveryengine_projects_locations_dataStores_conversations_converseSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use discoveryengine_projects_locations_dataStores_conversations_createSignalErrorFull() instead")
    void discoveryengine_projects_locations_dataStores_conversations_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void discoveryengine_projects_locations_dataStores_conversations_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use discoveryengine_projects_locations_dataStores_conversations_listSignalErrorFull() instead")
    void discoveryengine_projects_locations_dataStores_conversations_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void discoveryengine_projects_locations_dataStores_conversations_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use discoveryengine_projects_locations_dataStores_createSignalErrorFull() instead")
    void discoveryengine_projects_locations_dataStores_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void discoveryengine_projects_locations_dataStores_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use discoveryengine_projects_locations_dataStores_listSignalErrorFull() instead")
    void discoveryengine_projects_locations_dataStores_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void discoveryengine_projects_locations_dataStores_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use discoveryengine_projects_locations_dataStores_schemas_createSignalErrorFull() instead")
    void discoveryengine_projects_locations_dataStores_schemas_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void discoveryengine_projects_locations_dataStores_schemas_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use discoveryengine_projects_locations_dataStores_schemas_listSignalErrorFull() instead")
    void discoveryengine_projects_locations_dataStores_schemas_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void discoveryengine_projects_locations_dataStores_schemas_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use discoveryengine_projects_locations_dataStores_servingConfigs_listSignalErrorFull() instead")
    void discoveryengine_projects_locations_dataStores_servingConfigs_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void discoveryengine_projects_locations_dataStores_servingConfigs_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use discoveryengine_projects_locations_dataStores_servingConfigs_recommendSignalErrorFull() instead")
    void discoveryengine_projects_locations_dataStores_servingConfigs_recommendSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void discoveryengine_projects_locations_dataStores_servingConfigs_recommendSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use discoveryengine_projects_locations_dataStores_servingConfigs_searchSignalErrorFull() instead")
    void discoveryengine_projects_locations_dataStores_servingConfigs_searchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void discoveryengine_projects_locations_dataStores_servingConfigs_searchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use discoveryengine_projects_locations_dataStores_siteSearchEngine_disableAdvancedSiteSearchSignalErrorFull() instead")
    void discoveryengine_projects_locations_dataStores_siteSearchEngine_disableAdvancedSiteSearchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void discoveryengine_projects_locations_dataStores_siteSearchEngine_disableAdvancedSiteSearchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use discoveryengine_projects_locations_dataStores_siteSearchEngine_enableAdvancedSiteSearchSignalErrorFull() instead")
    void discoveryengine_projects_locations_dataStores_siteSearchEngine_enableAdvancedSiteSearchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void discoveryengine_projects_locations_dataStores_siteSearchEngine_enableAdvancedSiteSearchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use discoveryengine_projects_locations_dataStores_siteSearchEngine_recrawlUrisSignalErrorFull() instead")
    void discoveryengine_projects_locations_dataStores_siteSearchEngine_recrawlUrisSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void discoveryengine_projects_locations_dataStores_siteSearchEngine_recrawlUrisSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use discoveryengine_projects_locations_dataStores_siteSearchEngine_targetSites_batchCreateSignalErrorFull() instead")
    void discoveryengine_projects_locations_dataStores_siteSearchEngine_targetSites_batchCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void discoveryengine_projects_locations_dataStores_siteSearchEngine_targetSites_batchCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use discoveryengine_projects_locations_dataStores_siteSearchEngine_targetSites_createSignalErrorFull() instead")
    void discoveryengine_projects_locations_dataStores_siteSearchEngine_targetSites_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void discoveryengine_projects_locations_dataStores_siteSearchEngine_targetSites_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use discoveryengine_projects_locations_dataStores_siteSearchEngine_targetSites_deleteSignalErrorFull() instead")
    void discoveryengine_projects_locations_dataStores_siteSearchEngine_targetSites_deleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void discoveryengine_projects_locations_dataStores_siteSearchEngine_targetSites_deleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use discoveryengine_projects_locations_dataStores_siteSearchEngine_targetSites_listSignalErrorFull() instead")
    void discoveryengine_projects_locations_dataStores_siteSearchEngine_targetSites_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void discoveryengine_projects_locations_dataStores_siteSearchEngine_targetSites_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use discoveryengine_projects_locations_dataStores_siteSearchEngine_targetSites_patchSignalErrorFull() instead")
    void discoveryengine_projects_locations_dataStores_siteSearchEngine_targetSites_patchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void discoveryengine_projects_locations_dataStores_siteSearchEngine_targetSites_patchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use discoveryengine_projects_locations_dataStores_suggestionDenyListEntries_importSignalErrorFull() instead")
    void discoveryengine_projects_locations_dataStores_suggestionDenyListEntries_importSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void discoveryengine_projects_locations_dataStores_suggestionDenyListEntries_importSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use discoveryengine_projects_locations_dataStores_suggestionDenyListEntries_purgeSignalErrorFull() instead")
    void discoveryengine_projects_locations_dataStores_suggestionDenyListEntries_purgeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void discoveryengine_projects_locations_dataStores_suggestionDenyListEntries_purgeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use discoveryengine_projects_locations_dataStores_userEvents_collectSignalErrorFull() instead")
    void discoveryengine_projects_locations_dataStores_userEvents_collectSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void discoveryengine_projects_locations_dataStores_userEvents_collectSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use discoveryengine_projects_locations_dataStores_userEvents_importSignalErrorFull() instead")
    void discoveryengine_projects_locations_dataStores_userEvents_importSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void discoveryengine_projects_locations_dataStores_userEvents_importSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use discoveryengine_projects_locations_dataStores_userEvents_purgeSignalErrorFull() instead")
    void discoveryengine_projects_locations_dataStores_userEvents_purgeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void discoveryengine_projects_locations_dataStores_userEvents_purgeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use discoveryengine_projects_locations_dataStores_userEvents_writeSignalErrorFull() instead")
    void discoveryengine_projects_locations_dataStores_userEvents_writeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void discoveryengine_projects_locations_dataStores_userEvents_writeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use discoveryengine_projects_locations_estimateDataSizeSignalErrorFull() instead")
    void discoveryengine_projects_locations_estimateDataSizeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void discoveryengine_projects_locations_estimateDataSizeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use discoveryengine_projects_operations_getSignalErrorFull() instead")
    void discoveryengine_projects_operations_getSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void discoveryengine_projects_operations_getSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use discoveryengine_projects_operations_listSignalErrorFull() instead")
    void discoveryengine_projects_operations_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void discoveryengine_projects_operations_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
