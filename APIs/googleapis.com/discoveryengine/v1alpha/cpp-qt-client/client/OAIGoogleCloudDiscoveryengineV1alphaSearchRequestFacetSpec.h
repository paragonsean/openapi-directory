/**
 * Discovery Engine API
 * Discovery Engine API.
 *
 * The version of the OpenAPI document: v1alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGoogleCloudDiscoveryengineV1alphaSearchRequestFacetSpec.h
 *
 * A facet specification to perform faceted search.
 */

#ifndef OAIGoogleCloudDiscoveryengineV1alphaSearchRequestFacetSpec_H
#define OAIGoogleCloudDiscoveryengineV1alphaSearchRequestFacetSpec_H

#include <QJsonObject>

#include "OAIGoogleCloudDiscoveryengineV1alphaSearchRequestFacetSpecFacetKey.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIGoogleCloudDiscoveryengineV1alphaSearchRequestFacetSpecFacetKey;

class OAIGoogleCloudDiscoveryengineV1alphaSearchRequestFacetSpec : public OAIObject {
public:
    OAIGoogleCloudDiscoveryengineV1alphaSearchRequestFacetSpec();
    OAIGoogleCloudDiscoveryengineV1alphaSearchRequestFacetSpec(QString json);
    ~OAIGoogleCloudDiscoveryengineV1alphaSearchRequestFacetSpec() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isEnableDynamicPosition() const;
    void setEnableDynamicPosition(const bool &enable_dynamic_position);
    bool is_enable_dynamic_position_Set() const;
    bool is_enable_dynamic_position_Valid() const;

    QList<QString> getExcludedFilterKeys() const;
    void setExcludedFilterKeys(const QList<QString> &excluded_filter_keys);
    bool is_excluded_filter_keys_Set() const;
    bool is_excluded_filter_keys_Valid() const;

    OAIGoogleCloudDiscoveryengineV1alphaSearchRequestFacetSpecFacetKey getFacetKey() const;
    void setFacetKey(const OAIGoogleCloudDiscoveryengineV1alphaSearchRequestFacetSpecFacetKey &facet_key);
    bool is_facet_key_Set() const;
    bool is_facet_key_Valid() const;

    qint32 getLimit() const;
    void setLimit(const qint32 &limit);
    bool is_limit_Set() const;
    bool is_limit_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_enable_dynamic_position;
    bool m_enable_dynamic_position_isSet;
    bool m_enable_dynamic_position_isValid;

    QList<QString> m_excluded_filter_keys;
    bool m_excluded_filter_keys_isSet;
    bool m_excluded_filter_keys_isValid;

    OAIGoogleCloudDiscoveryengineV1alphaSearchRequestFacetSpecFacetKey m_facet_key;
    bool m_facet_key_isSet;
    bool m_facet_key_isValid;

    qint32 m_limit;
    bool m_limit_isSet;
    bool m_limit_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGoogleCloudDiscoveryengineV1alphaSearchRequestFacetSpec)

#endif // OAIGoogleCloudDiscoveryengineV1alphaSearchRequestFacetSpec_H
