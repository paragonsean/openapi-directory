/**
 * Discovery Engine API
 * Discovery Engine API.
 *
 * The version of the OpenAPI document: v1alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudDiscoveryengineV1alphaCompleteQueryRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudDiscoveryengineV1alphaCompleteQueryRequest::OAIGoogleCloudDiscoveryengineV1alphaCompleteQueryRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudDiscoveryengineV1alphaCompleteQueryRequest::OAIGoogleCloudDiscoveryengineV1alphaCompleteQueryRequest() {
    this->initializeModel();
}

OAIGoogleCloudDiscoveryengineV1alphaCompleteQueryRequest::~OAIGoogleCloudDiscoveryengineV1alphaCompleteQueryRequest() {}

void OAIGoogleCloudDiscoveryengineV1alphaCompleteQueryRequest::initializeModel() {

    m_data_store_isSet = false;
    m_data_store_isValid = false;

    m_include_tail_suggestions_isSet = false;
    m_include_tail_suggestions_isValid = false;

    m_query_isSet = false;
    m_query_isValid = false;

    m_query_model_isSet = false;
    m_query_model_isValid = false;

    m_user_pseudo_id_isSet = false;
    m_user_pseudo_id_isValid = false;
}

void OAIGoogleCloudDiscoveryengineV1alphaCompleteQueryRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudDiscoveryengineV1alphaCompleteQueryRequest::fromJsonObject(QJsonObject json) {

    m_data_store_isValid = ::OpenAPI::fromJsonValue(m_data_store, json[QString("dataStore")]);
    m_data_store_isSet = !json[QString("dataStore")].isNull() && m_data_store_isValid;

    m_include_tail_suggestions_isValid = ::OpenAPI::fromJsonValue(m_include_tail_suggestions, json[QString("includeTailSuggestions")]);
    m_include_tail_suggestions_isSet = !json[QString("includeTailSuggestions")].isNull() && m_include_tail_suggestions_isValid;

    m_query_isValid = ::OpenAPI::fromJsonValue(m_query, json[QString("query")]);
    m_query_isSet = !json[QString("query")].isNull() && m_query_isValid;

    m_query_model_isValid = ::OpenAPI::fromJsonValue(m_query_model, json[QString("queryModel")]);
    m_query_model_isSet = !json[QString("queryModel")].isNull() && m_query_model_isValid;

    m_user_pseudo_id_isValid = ::OpenAPI::fromJsonValue(m_user_pseudo_id, json[QString("userPseudoId")]);
    m_user_pseudo_id_isSet = !json[QString("userPseudoId")].isNull() && m_user_pseudo_id_isValid;
}

QString OAIGoogleCloudDiscoveryengineV1alphaCompleteQueryRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudDiscoveryengineV1alphaCompleteQueryRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_data_store_isSet) {
        obj.insert(QString("dataStore"), ::OpenAPI::toJsonValue(m_data_store));
    }
    if (m_include_tail_suggestions_isSet) {
        obj.insert(QString("includeTailSuggestions"), ::OpenAPI::toJsonValue(m_include_tail_suggestions));
    }
    if (m_query_isSet) {
        obj.insert(QString("query"), ::OpenAPI::toJsonValue(m_query));
    }
    if (m_query_model_isSet) {
        obj.insert(QString("queryModel"), ::OpenAPI::toJsonValue(m_query_model));
    }
    if (m_user_pseudo_id_isSet) {
        obj.insert(QString("userPseudoId"), ::OpenAPI::toJsonValue(m_user_pseudo_id));
    }
    return obj;
}

QString OAIGoogleCloudDiscoveryengineV1alphaCompleteQueryRequest::getDataStore() const {
    return m_data_store;
}
void OAIGoogleCloudDiscoveryengineV1alphaCompleteQueryRequest::setDataStore(const QString &data_store) {
    m_data_store = data_store;
    m_data_store_isSet = true;
}

bool OAIGoogleCloudDiscoveryengineV1alphaCompleteQueryRequest::is_data_store_Set() const{
    return m_data_store_isSet;
}

bool OAIGoogleCloudDiscoveryengineV1alphaCompleteQueryRequest::is_data_store_Valid() const{
    return m_data_store_isValid;
}

bool OAIGoogleCloudDiscoveryengineV1alphaCompleteQueryRequest::isIncludeTailSuggestions() const {
    return m_include_tail_suggestions;
}
void OAIGoogleCloudDiscoveryengineV1alphaCompleteQueryRequest::setIncludeTailSuggestions(const bool &include_tail_suggestions) {
    m_include_tail_suggestions = include_tail_suggestions;
    m_include_tail_suggestions_isSet = true;
}

bool OAIGoogleCloudDiscoveryengineV1alphaCompleteQueryRequest::is_include_tail_suggestions_Set() const{
    return m_include_tail_suggestions_isSet;
}

bool OAIGoogleCloudDiscoveryengineV1alphaCompleteQueryRequest::is_include_tail_suggestions_Valid() const{
    return m_include_tail_suggestions_isValid;
}

QString OAIGoogleCloudDiscoveryengineV1alphaCompleteQueryRequest::getQuery() const {
    return m_query;
}
void OAIGoogleCloudDiscoveryengineV1alphaCompleteQueryRequest::setQuery(const QString &query) {
    m_query = query;
    m_query_isSet = true;
}

bool OAIGoogleCloudDiscoveryengineV1alphaCompleteQueryRequest::is_query_Set() const{
    return m_query_isSet;
}

bool OAIGoogleCloudDiscoveryengineV1alphaCompleteQueryRequest::is_query_Valid() const{
    return m_query_isValid;
}

QString OAIGoogleCloudDiscoveryengineV1alphaCompleteQueryRequest::getQueryModel() const {
    return m_query_model;
}
void OAIGoogleCloudDiscoveryengineV1alphaCompleteQueryRequest::setQueryModel(const QString &query_model) {
    m_query_model = query_model;
    m_query_model_isSet = true;
}

bool OAIGoogleCloudDiscoveryengineV1alphaCompleteQueryRequest::is_query_model_Set() const{
    return m_query_model_isSet;
}

bool OAIGoogleCloudDiscoveryengineV1alphaCompleteQueryRequest::is_query_model_Valid() const{
    return m_query_model_isValid;
}

QString OAIGoogleCloudDiscoveryengineV1alphaCompleteQueryRequest::getUserPseudoId() const {
    return m_user_pseudo_id;
}
void OAIGoogleCloudDiscoveryengineV1alphaCompleteQueryRequest::setUserPseudoId(const QString &user_pseudo_id) {
    m_user_pseudo_id = user_pseudo_id;
    m_user_pseudo_id_isSet = true;
}

bool OAIGoogleCloudDiscoveryengineV1alphaCompleteQueryRequest::is_user_pseudo_id_Set() const{
    return m_user_pseudo_id_isSet;
}

bool OAIGoogleCloudDiscoveryengineV1alphaCompleteQueryRequest::is_user_pseudo_id_Valid() const{
    return m_user_pseudo_id_isValid;
}

bool OAIGoogleCloudDiscoveryengineV1alphaCompleteQueryRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_store_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_include_tail_suggestions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_model_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_pseudo_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudDiscoveryengineV1alphaCompleteQueryRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
