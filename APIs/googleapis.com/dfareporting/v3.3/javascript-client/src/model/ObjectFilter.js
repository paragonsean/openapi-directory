/**
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ObjectFilter model module.
 * @module model/ObjectFilter
 * @version v3.3
 */
class ObjectFilter {
    /**
     * Constructs a new <code>ObjectFilter</code>.
     * Object Filter.
     * @alias module:model/ObjectFilter
     */
    constructor() { 
        
        ObjectFilter.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ObjectFilter</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ObjectFilter} obj Optional instance to populate.
     * @return {module:model/ObjectFilter} The populated <code>ObjectFilter</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ObjectFilter();

            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('objectIds')) {
                obj['objectIds'] = ApiClient.convertToType(data['objectIds'], ['String']);
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ObjectFilter</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ObjectFilter</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['objectIds'])) {
            throw new Error("Expected the field `objectIds` to be an array in the JSON data but got " + data['objectIds']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }

        return true;
    }


}



/**
 * Identifies what kind of resource this is. Value: the fixed string \"dfareporting#objectFilter\".
 * @member {String} kind
 */
ObjectFilter.prototype['kind'] = undefined;

/**
 * Applicable when status is ASSIGNED. The user has access to objects with these object IDs.
 * @member {Array.<String>} objectIds
 */
ObjectFilter.prototype['objectIds'] = undefined;

/**
 * Status of the filter. NONE means the user has access to none of the objects. ALL means the user has access to all objects. ASSIGNED means the user has access to the objects with IDs in the objectIds list.
 * @member {module:model/ObjectFilter.StatusEnum} status
 */
ObjectFilter.prototype['status'] = undefined;





/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
ObjectFilter['StatusEnum'] = {

    /**
     * value: "NONE"
     * @const
     */
    "NONE": "NONE",

    /**
     * value: "ASSIGNED"
     * @const
     */
    "ASSIGNED": "ASSIGNED",

    /**
     * value: "ALL"
     * @const
     */
    "ALL": "ALL"
};



export default ObjectFilter;

