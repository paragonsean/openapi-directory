/**
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DimensionValue from './DimensionValue';
import FloodlightActivityDynamicTag from './FloodlightActivityDynamicTag';
import FloodlightActivityPublisherDynamicTag from './FloodlightActivityPublisherDynamicTag';

/**
 * The FloodlightActivity model module.
 * @module model/FloodlightActivity
 * @version v3.3
 */
class FloodlightActivity {
    /**
     * Constructs a new <code>FloodlightActivity</code>.
     * Contains properties of a Floodlight activity.
     * @alias module:model/FloodlightActivity
     */
    constructor() { 
        
        FloodlightActivity.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>FloodlightActivity</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FloodlightActivity} obj Optional instance to populate.
     * @return {module:model/FloodlightActivity} The populated <code>FloodlightActivity</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FloodlightActivity();

            if (data.hasOwnProperty('accountId')) {
                obj['accountId'] = ApiClient.convertToType(data['accountId'], 'String');
            }
            if (data.hasOwnProperty('advertiserId')) {
                obj['advertiserId'] = ApiClient.convertToType(data['advertiserId'], 'String');
            }
            if (data.hasOwnProperty('advertiserIdDimensionValue')) {
                obj['advertiserIdDimensionValue'] = DimensionValue.constructFromObject(data['advertiserIdDimensionValue']);
            }
            if (data.hasOwnProperty('cacheBustingType')) {
                obj['cacheBustingType'] = ApiClient.convertToType(data['cacheBustingType'], 'String');
            }
            if (data.hasOwnProperty('countingMethod')) {
                obj['countingMethod'] = ApiClient.convertToType(data['countingMethod'], 'String');
            }
            if (data.hasOwnProperty('defaultTags')) {
                obj['defaultTags'] = ApiClient.convertToType(data['defaultTags'], [FloodlightActivityDynamicTag]);
            }
            if (data.hasOwnProperty('expectedUrl')) {
                obj['expectedUrl'] = ApiClient.convertToType(data['expectedUrl'], 'String');
            }
            if (data.hasOwnProperty('floodlightActivityGroupId')) {
                obj['floodlightActivityGroupId'] = ApiClient.convertToType(data['floodlightActivityGroupId'], 'String');
            }
            if (data.hasOwnProperty('floodlightActivityGroupName')) {
                obj['floodlightActivityGroupName'] = ApiClient.convertToType(data['floodlightActivityGroupName'], 'String');
            }
            if (data.hasOwnProperty('floodlightActivityGroupTagString')) {
                obj['floodlightActivityGroupTagString'] = ApiClient.convertToType(data['floodlightActivityGroupTagString'], 'String');
            }
            if (data.hasOwnProperty('floodlightActivityGroupType')) {
                obj['floodlightActivityGroupType'] = ApiClient.convertToType(data['floodlightActivityGroupType'], 'String');
            }
            if (data.hasOwnProperty('floodlightConfigurationId')) {
                obj['floodlightConfigurationId'] = ApiClient.convertToType(data['floodlightConfigurationId'], 'String');
            }
            if (data.hasOwnProperty('floodlightConfigurationIdDimensionValue')) {
                obj['floodlightConfigurationIdDimensionValue'] = DimensionValue.constructFromObject(data['floodlightConfigurationIdDimensionValue']);
            }
            if (data.hasOwnProperty('floodlightTagType')) {
                obj['floodlightTagType'] = ApiClient.convertToType(data['floodlightTagType'], 'String');
            }
            if (data.hasOwnProperty('hidden')) {
                obj['hidden'] = ApiClient.convertToType(data['hidden'], 'Boolean');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('idDimensionValue')) {
                obj['idDimensionValue'] = DimensionValue.constructFromObject(data['idDimensionValue']);
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('notes')) {
                obj['notes'] = ApiClient.convertToType(data['notes'], 'String');
            }
            if (data.hasOwnProperty('publisherTags')) {
                obj['publisherTags'] = ApiClient.convertToType(data['publisherTags'], [FloodlightActivityPublisherDynamicTag]);
            }
            if (data.hasOwnProperty('secure')) {
                obj['secure'] = ApiClient.convertToType(data['secure'], 'Boolean');
            }
            if (data.hasOwnProperty('sslCompliant')) {
                obj['sslCompliant'] = ApiClient.convertToType(data['sslCompliant'], 'Boolean');
            }
            if (data.hasOwnProperty('sslRequired')) {
                obj['sslRequired'] = ApiClient.convertToType(data['sslRequired'], 'Boolean');
            }
            if (data.hasOwnProperty('subaccountId')) {
                obj['subaccountId'] = ApiClient.convertToType(data['subaccountId'], 'String');
            }
            if (data.hasOwnProperty('tagFormat')) {
                obj['tagFormat'] = ApiClient.convertToType(data['tagFormat'], 'String');
            }
            if (data.hasOwnProperty('tagString')) {
                obj['tagString'] = ApiClient.convertToType(data['tagString'], 'String');
            }
            if (data.hasOwnProperty('userDefinedVariableTypes')) {
                obj['userDefinedVariableTypes'] = ApiClient.convertToType(data['userDefinedVariableTypes'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FloodlightActivity</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FloodlightActivity</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['accountId'] && !(typeof data['accountId'] === 'string' || data['accountId'] instanceof String)) {
            throw new Error("Expected the field `accountId` to be a primitive type in the JSON string but got " + data['accountId']);
        }
        // ensure the json data is a string
        if (data['advertiserId'] && !(typeof data['advertiserId'] === 'string' || data['advertiserId'] instanceof String)) {
            throw new Error("Expected the field `advertiserId` to be a primitive type in the JSON string but got " + data['advertiserId']);
        }
        // validate the optional field `advertiserIdDimensionValue`
        if (data['advertiserIdDimensionValue']) { // data not null
          DimensionValue.validateJSON(data['advertiserIdDimensionValue']);
        }
        // ensure the json data is a string
        if (data['cacheBustingType'] && !(typeof data['cacheBustingType'] === 'string' || data['cacheBustingType'] instanceof String)) {
            throw new Error("Expected the field `cacheBustingType` to be a primitive type in the JSON string but got " + data['cacheBustingType']);
        }
        // ensure the json data is a string
        if (data['countingMethod'] && !(typeof data['countingMethod'] === 'string' || data['countingMethod'] instanceof String)) {
            throw new Error("Expected the field `countingMethod` to be a primitive type in the JSON string but got " + data['countingMethod']);
        }
        if (data['defaultTags']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['defaultTags'])) {
                throw new Error("Expected the field `defaultTags` to be an array in the JSON data but got " + data['defaultTags']);
            }
            // validate the optional field `defaultTags` (array)
            for (const item of data['defaultTags']) {
                FloodlightActivityDynamicTag.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['expectedUrl'] && !(typeof data['expectedUrl'] === 'string' || data['expectedUrl'] instanceof String)) {
            throw new Error("Expected the field `expectedUrl` to be a primitive type in the JSON string but got " + data['expectedUrl']);
        }
        // ensure the json data is a string
        if (data['floodlightActivityGroupId'] && !(typeof data['floodlightActivityGroupId'] === 'string' || data['floodlightActivityGroupId'] instanceof String)) {
            throw new Error("Expected the field `floodlightActivityGroupId` to be a primitive type in the JSON string but got " + data['floodlightActivityGroupId']);
        }
        // ensure the json data is a string
        if (data['floodlightActivityGroupName'] && !(typeof data['floodlightActivityGroupName'] === 'string' || data['floodlightActivityGroupName'] instanceof String)) {
            throw new Error("Expected the field `floodlightActivityGroupName` to be a primitive type in the JSON string but got " + data['floodlightActivityGroupName']);
        }
        // ensure the json data is a string
        if (data['floodlightActivityGroupTagString'] && !(typeof data['floodlightActivityGroupTagString'] === 'string' || data['floodlightActivityGroupTagString'] instanceof String)) {
            throw new Error("Expected the field `floodlightActivityGroupTagString` to be a primitive type in the JSON string but got " + data['floodlightActivityGroupTagString']);
        }
        // ensure the json data is a string
        if (data['floodlightActivityGroupType'] && !(typeof data['floodlightActivityGroupType'] === 'string' || data['floodlightActivityGroupType'] instanceof String)) {
            throw new Error("Expected the field `floodlightActivityGroupType` to be a primitive type in the JSON string but got " + data['floodlightActivityGroupType']);
        }
        // ensure the json data is a string
        if (data['floodlightConfigurationId'] && !(typeof data['floodlightConfigurationId'] === 'string' || data['floodlightConfigurationId'] instanceof String)) {
            throw new Error("Expected the field `floodlightConfigurationId` to be a primitive type in the JSON string but got " + data['floodlightConfigurationId']);
        }
        // validate the optional field `floodlightConfigurationIdDimensionValue`
        if (data['floodlightConfigurationIdDimensionValue']) { // data not null
          DimensionValue.validateJSON(data['floodlightConfigurationIdDimensionValue']);
        }
        // ensure the json data is a string
        if (data['floodlightTagType'] && !(typeof data['floodlightTagType'] === 'string' || data['floodlightTagType'] instanceof String)) {
            throw new Error("Expected the field `floodlightTagType` to be a primitive type in the JSON string but got " + data['floodlightTagType']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // validate the optional field `idDimensionValue`
        if (data['idDimensionValue']) { // data not null
          DimensionValue.validateJSON(data['idDimensionValue']);
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['notes'] && !(typeof data['notes'] === 'string' || data['notes'] instanceof String)) {
            throw new Error("Expected the field `notes` to be a primitive type in the JSON string but got " + data['notes']);
        }
        if (data['publisherTags']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['publisherTags'])) {
                throw new Error("Expected the field `publisherTags` to be an array in the JSON data but got " + data['publisherTags']);
            }
            // validate the optional field `publisherTags` (array)
            for (const item of data['publisherTags']) {
                FloodlightActivityPublisherDynamicTag.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['subaccountId'] && !(typeof data['subaccountId'] === 'string' || data['subaccountId'] instanceof String)) {
            throw new Error("Expected the field `subaccountId` to be a primitive type in the JSON string but got " + data['subaccountId']);
        }
        // ensure the json data is a string
        if (data['tagFormat'] && !(typeof data['tagFormat'] === 'string' || data['tagFormat'] instanceof String)) {
            throw new Error("Expected the field `tagFormat` to be a primitive type in the JSON string but got " + data['tagFormat']);
        }
        // ensure the json data is a string
        if (data['tagString'] && !(typeof data['tagString'] === 'string' || data['tagString'] instanceof String)) {
            throw new Error("Expected the field `tagString` to be a primitive type in the JSON string but got " + data['tagString']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['userDefinedVariableTypes'])) {
            throw new Error("Expected the field `userDefinedVariableTypes` to be an array in the JSON data but got " + data['userDefinedVariableTypes']);
        }

        return true;
    }


}



/**
 * Account ID of this floodlight activity. This is a read-only field that can be left blank.
 * @member {String} accountId
 */
FloodlightActivity.prototype['accountId'] = undefined;

/**
 * Advertiser ID of this floodlight activity. If this field is left blank, the value will be copied over either from the activity group's advertiser or the existing activity's advertiser.
 * @member {String} advertiserId
 */
FloodlightActivity.prototype['advertiserId'] = undefined;

/**
 * @member {module:model/DimensionValue} advertiserIdDimensionValue
 */
FloodlightActivity.prototype['advertiserIdDimensionValue'] = undefined;

/**
 * Code type used for cache busting in the generated tag. Applicable only when floodlightActivityGroupType is COUNTER and countingMethod is STANDARD_COUNTING or UNIQUE_COUNTING.
 * @member {module:model/FloodlightActivity.CacheBustingTypeEnum} cacheBustingType
 */
FloodlightActivity.prototype['cacheBustingType'] = undefined;

/**
 * Counting method for conversions for this floodlight activity. This is a required field.
 * @member {module:model/FloodlightActivity.CountingMethodEnum} countingMethod
 */
FloodlightActivity.prototype['countingMethod'] = undefined;

/**
 * Dynamic floodlight tags.
 * @member {Array.<module:model/FloodlightActivityDynamicTag>} defaultTags
 */
FloodlightActivity.prototype['defaultTags'] = undefined;

/**
 * URL where this tag will be deployed. If specified, must be less than 256 characters long.
 * @member {String} expectedUrl
 */
FloodlightActivity.prototype['expectedUrl'] = undefined;

/**
 * Floodlight activity group ID of this floodlight activity. This is a required field.
 * @member {String} floodlightActivityGroupId
 */
FloodlightActivity.prototype['floodlightActivityGroupId'] = undefined;

/**
 * Name of the associated floodlight activity group. This is a read-only field.
 * @member {String} floodlightActivityGroupName
 */
FloodlightActivity.prototype['floodlightActivityGroupName'] = undefined;

/**
 * Tag string of the associated floodlight activity group. This is a read-only field.
 * @member {String} floodlightActivityGroupTagString
 */
FloodlightActivity.prototype['floodlightActivityGroupTagString'] = undefined;

/**
 * Type of the associated floodlight activity group. This is a read-only field.
 * @member {module:model/FloodlightActivity.FloodlightActivityGroupTypeEnum} floodlightActivityGroupType
 */
FloodlightActivity.prototype['floodlightActivityGroupType'] = undefined;

/**
 * Floodlight configuration ID of this floodlight activity. If this field is left blank, the value will be copied over either from the activity group's floodlight configuration or from the existing activity's floodlight configuration.
 * @member {String} floodlightConfigurationId
 */
FloodlightActivity.prototype['floodlightConfigurationId'] = undefined;

/**
 * @member {module:model/DimensionValue} floodlightConfigurationIdDimensionValue
 */
FloodlightActivity.prototype['floodlightConfigurationIdDimensionValue'] = undefined;

/**
 * The type of Floodlight tag this activity will generate. This is a required field.
 * @member {module:model/FloodlightActivity.FloodlightTagTypeEnum} floodlightTagType
 */
FloodlightActivity.prototype['floodlightTagType'] = undefined;

/**
 * Whether this activity is archived.
 * @member {Boolean} hidden
 */
FloodlightActivity.prototype['hidden'] = undefined;

/**
 * ID of this floodlight activity. This is a read-only, auto-generated field.
 * @member {String} id
 */
FloodlightActivity.prototype['id'] = undefined;

/**
 * @member {module:model/DimensionValue} idDimensionValue
 */
FloodlightActivity.prototype['idDimensionValue'] = undefined;

/**
 * Identifies what kind of resource this is. Value: the fixed string \"dfareporting#floodlightActivity\".
 * @member {String} kind
 */
FloodlightActivity.prototype['kind'] = undefined;

/**
 * Name of this floodlight activity. This is a required field. Must be less than 129 characters long and cannot contain quotes.
 * @member {String} name
 */
FloodlightActivity.prototype['name'] = undefined;

/**
 * General notes or implementation instructions for the tag.
 * @member {String} notes
 */
FloodlightActivity.prototype['notes'] = undefined;

/**
 * Publisher dynamic floodlight tags.
 * @member {Array.<module:model/FloodlightActivityPublisherDynamicTag>} publisherTags
 */
FloodlightActivity.prototype['publisherTags'] = undefined;

/**
 * Whether this tag should use SSL.
 * @member {Boolean} secure
 */
FloodlightActivity.prototype['secure'] = undefined;

/**
 * Whether the floodlight activity is SSL-compliant. This is a read-only field, its value detected by the system from the floodlight tags.
 * @member {Boolean} sslCompliant
 */
FloodlightActivity.prototype['sslCompliant'] = undefined;

/**
 * Whether this floodlight activity must be SSL-compliant.
 * @member {Boolean} sslRequired
 */
FloodlightActivity.prototype['sslRequired'] = undefined;

/**
 * Subaccount ID of this floodlight activity. This is a read-only field that can be left blank.
 * @member {String} subaccountId
 */
FloodlightActivity.prototype['subaccountId'] = undefined;

/**
 * Tag format type for the floodlight activity. If left blank, the tag format will default to HTML.
 * @member {module:model/FloodlightActivity.TagFormatEnum} tagFormat
 */
FloodlightActivity.prototype['tagFormat'] = undefined;

/**
 * Value of the cat= parameter in the floodlight tag, which the ad servers use to identify the activity. This is optional: if empty, a new tag string will be generated for you. This string must be 1 to 8 characters long, with valid characters being a-z0-9[ _ ]. This tag string must also be unique among activities of the same activity group. This field is read-only after insertion.
 * @member {String} tagString
 */
FloodlightActivity.prototype['tagString'] = undefined;

/**
 * List of the user-defined variables used by this conversion tag. These map to the \"u[1-100]=\" in the tags. Each of these can have a user defined type. Acceptable values are U1 to U100, inclusive. 
 * @member {Array.<module:model/FloodlightActivity.UserDefinedVariableTypesEnum>} userDefinedVariableTypes
 */
FloodlightActivity.prototype['userDefinedVariableTypes'] = undefined;





/**
 * Allowed values for the <code>cacheBustingType</code> property.
 * @enum {String}
 * @readonly
 */
FloodlightActivity['CacheBustingTypeEnum'] = {

    /**
     * value: "JAVASCRIPT"
     * @const
     */
    "JAVASCRIPT": "JAVASCRIPT",

    /**
     * value: "ACTIVE_SERVER_PAGE"
     * @const
     */
    "ACTIVE_SERVER_PAGE": "ACTIVE_SERVER_PAGE",

    /**
     * value: "JSP"
     * @const
     */
    "JSP": "JSP",

    /**
     * value: "PHP"
     * @const
     */
    "PHP": "PHP",

    /**
     * value: "COLD_FUSION"
     * @const
     */
    "COLD_FUSION": "COLD_FUSION"
};


/**
 * Allowed values for the <code>countingMethod</code> property.
 * @enum {String}
 * @readonly
 */
FloodlightActivity['CountingMethodEnum'] = {

    /**
     * value: "STANDARD_COUNTING"
     * @const
     */
    "STANDARD_COUNTING": "STANDARD_COUNTING",

    /**
     * value: "UNIQUE_COUNTING"
     * @const
     */
    "UNIQUE_COUNTING": "UNIQUE_COUNTING",

    /**
     * value: "SESSION_COUNTING"
     * @const
     */
    "SESSION_COUNTING": "SESSION_COUNTING",

    /**
     * value: "TRANSACTIONS_COUNTING"
     * @const
     */
    "TRANSACTIONS_COUNTING": "TRANSACTIONS_COUNTING",

    /**
     * value: "ITEMS_SOLD_COUNTING"
     * @const
     */
    "ITEMS_SOLD_COUNTING": "ITEMS_SOLD_COUNTING"
};


/**
 * Allowed values for the <code>floodlightActivityGroupType</code> property.
 * @enum {String}
 * @readonly
 */
FloodlightActivity['FloodlightActivityGroupTypeEnum'] = {

    /**
     * value: "COUNTER"
     * @const
     */
    "COUNTER": "COUNTER",

    /**
     * value: "SALE"
     * @const
     */
    "SALE": "SALE"
};


/**
 * Allowed values for the <code>floodlightTagType</code> property.
 * @enum {String}
 * @readonly
 */
FloodlightActivity['FloodlightTagTypeEnum'] = {

    /**
     * value: "IFRAME"
     * @const
     */
    "IFRAME": "IFRAME",

    /**
     * value: "IMAGE"
     * @const
     */
    "IMAGE": "IMAGE",

    /**
     * value: "GLOBAL_SITE_TAG"
     * @const
     */
    "GLOBAL_SITE_TAG": "GLOBAL_SITE_TAG"
};


/**
 * Allowed values for the <code>tagFormat</code> property.
 * @enum {String}
 * @readonly
 */
FloodlightActivity['TagFormatEnum'] = {

    /**
     * value: "HTML"
     * @const
     */
    "HTML": "HTML",

    /**
     * value: "XHTML"
     * @const
     */
    "XHTML": "XHTML"
};


/**
 * Allowed values for the <code>userDefinedVariableTypes</code> property.
 * @enum {String}
 * @readonly
 */
FloodlightActivity['UserDefinedVariableTypesEnum'] = {

    /**
     * value: "U1"
     * @const
     */
    "U1": "U1",

    /**
     * value: "U2"
     * @const
     */
    "U2": "U2",

    /**
     * value: "U3"
     * @const
     */
    "U3": "U3",

    /**
     * value: "U4"
     * @const
     */
    "U4": "U4",

    /**
     * value: "U5"
     * @const
     */
    "U5": "U5",

    /**
     * value: "U6"
     * @const
     */
    "U6": "U6",

    /**
     * value: "U7"
     * @const
     */
    "U7": "U7",

    /**
     * value: "U8"
     * @const
     */
    "U8": "U8",

    /**
     * value: "U9"
     * @const
     */
    "U9": "U9",

    /**
     * value: "U10"
     * @const
     */
    "U10": "U10",

    /**
     * value: "U11"
     * @const
     */
    "U11": "U11",

    /**
     * value: "U12"
     * @const
     */
    "U12": "U12",

    /**
     * value: "U13"
     * @const
     */
    "U13": "U13",

    /**
     * value: "U14"
     * @const
     */
    "U14": "U14",

    /**
     * value: "U15"
     * @const
     */
    "U15": "U15",

    /**
     * value: "U16"
     * @const
     */
    "U16": "U16",

    /**
     * value: "U17"
     * @const
     */
    "U17": "U17",

    /**
     * value: "U18"
     * @const
     */
    "U18": "U18",

    /**
     * value: "U19"
     * @const
     */
    "U19": "U19",

    /**
     * value: "U20"
     * @const
     */
    "U20": "U20",

    /**
     * value: "U21"
     * @const
     */
    "U21": "U21",

    /**
     * value: "U22"
     * @const
     */
    "U22": "U22",

    /**
     * value: "U23"
     * @const
     */
    "U23": "U23",

    /**
     * value: "U24"
     * @const
     */
    "U24": "U24",

    /**
     * value: "U25"
     * @const
     */
    "U25": "U25",

    /**
     * value: "U26"
     * @const
     */
    "U26": "U26",

    /**
     * value: "U27"
     * @const
     */
    "U27": "U27",

    /**
     * value: "U28"
     * @const
     */
    "U28": "U28",

    /**
     * value: "U29"
     * @const
     */
    "U29": "U29",

    /**
     * value: "U30"
     * @const
     */
    "U30": "U30",

    /**
     * value: "U31"
     * @const
     */
    "U31": "U31",

    /**
     * value: "U32"
     * @const
     */
    "U32": "U32",

    /**
     * value: "U33"
     * @const
     */
    "U33": "U33",

    /**
     * value: "U34"
     * @const
     */
    "U34": "U34",

    /**
     * value: "U35"
     * @const
     */
    "U35": "U35",

    /**
     * value: "U36"
     * @const
     */
    "U36": "U36",

    /**
     * value: "U37"
     * @const
     */
    "U37": "U37",

    /**
     * value: "U38"
     * @const
     */
    "U38": "U38",

    /**
     * value: "U39"
     * @const
     */
    "U39": "U39",

    /**
     * value: "U40"
     * @const
     */
    "U40": "U40",

    /**
     * value: "U41"
     * @const
     */
    "U41": "U41",

    /**
     * value: "U42"
     * @const
     */
    "U42": "U42",

    /**
     * value: "U43"
     * @const
     */
    "U43": "U43",

    /**
     * value: "U44"
     * @const
     */
    "U44": "U44",

    /**
     * value: "U45"
     * @const
     */
    "U45": "U45",

    /**
     * value: "U46"
     * @const
     */
    "U46": "U46",

    /**
     * value: "U47"
     * @const
     */
    "U47": "U47",

    /**
     * value: "U48"
     * @const
     */
    "U48": "U48",

    /**
     * value: "U49"
     * @const
     */
    "U49": "U49",

    /**
     * value: "U50"
     * @const
     */
    "U50": "U50",

    /**
     * value: "U51"
     * @const
     */
    "U51": "U51",

    /**
     * value: "U52"
     * @const
     */
    "U52": "U52",

    /**
     * value: "U53"
     * @const
     */
    "U53": "U53",

    /**
     * value: "U54"
     * @const
     */
    "U54": "U54",

    /**
     * value: "U55"
     * @const
     */
    "U55": "U55",

    /**
     * value: "U56"
     * @const
     */
    "U56": "U56",

    /**
     * value: "U57"
     * @const
     */
    "U57": "U57",

    /**
     * value: "U58"
     * @const
     */
    "U58": "U58",

    /**
     * value: "U59"
     * @const
     */
    "U59": "U59",

    /**
     * value: "U60"
     * @const
     */
    "U60": "U60",

    /**
     * value: "U61"
     * @const
     */
    "U61": "U61",

    /**
     * value: "U62"
     * @const
     */
    "U62": "U62",

    /**
     * value: "U63"
     * @const
     */
    "U63": "U63",

    /**
     * value: "U64"
     * @const
     */
    "U64": "U64",

    /**
     * value: "U65"
     * @const
     */
    "U65": "U65",

    /**
     * value: "U66"
     * @const
     */
    "U66": "U66",

    /**
     * value: "U67"
     * @const
     */
    "U67": "U67",

    /**
     * value: "U68"
     * @const
     */
    "U68": "U68",

    /**
     * value: "U69"
     * @const
     */
    "U69": "U69",

    /**
     * value: "U70"
     * @const
     */
    "U70": "U70",

    /**
     * value: "U71"
     * @const
     */
    "U71": "U71",

    /**
     * value: "U72"
     * @const
     */
    "U72": "U72",

    /**
     * value: "U73"
     * @const
     */
    "U73": "U73",

    /**
     * value: "U74"
     * @const
     */
    "U74": "U74",

    /**
     * value: "U75"
     * @const
     */
    "U75": "U75",

    /**
     * value: "U76"
     * @const
     */
    "U76": "U76",

    /**
     * value: "U77"
     * @const
     */
    "U77": "U77",

    /**
     * value: "U78"
     * @const
     */
    "U78": "U78",

    /**
     * value: "U79"
     * @const
     */
    "U79": "U79",

    /**
     * value: "U80"
     * @const
     */
    "U80": "U80",

    /**
     * value: "U81"
     * @const
     */
    "U81": "U81",

    /**
     * value: "U82"
     * @const
     */
    "U82": "U82",

    /**
     * value: "U83"
     * @const
     */
    "U83": "U83",

    /**
     * value: "U84"
     * @const
     */
    "U84": "U84",

    /**
     * value: "U85"
     * @const
     */
    "U85": "U85",

    /**
     * value: "U86"
     * @const
     */
    "U86": "U86",

    /**
     * value: "U87"
     * @const
     */
    "U87": "U87",

    /**
     * value: "U88"
     * @const
     */
    "U88": "U88",

    /**
     * value: "U89"
     * @const
     */
    "U89": "U89",

    /**
     * value: "U90"
     * @const
     */
    "U90": "U90",

    /**
     * value: "U91"
     * @const
     */
    "U91": "U91",

    /**
     * value: "U92"
     * @const
     */
    "U92": "U92",

    /**
     * value: "U93"
     * @const
     */
    "U93": "U93",

    /**
     * value: "U94"
     * @const
     */
    "U94": "U94",

    /**
     * value: "U95"
     * @const
     */
    "U95": "U95",

    /**
     * value: "U96"
     * @const
     */
    "U96": "U96",

    /**
     * value: "U97"
     * @const
     */
    "U97": "U97",

    /**
     * value: "U98"
     * @const
     */
    "U98": "U98",

    /**
     * value: "U99"
     * @const
     */
    "U99": "U99",

    /**
     * value: "U100"
     * @const
     */
    "U100": "U100"
};



export default FloodlightActivity;

