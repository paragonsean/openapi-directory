/**
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import City from './City';
import Country from './Country';
import Metro from './Metro';
import PostalCode from './PostalCode';
import Region from './Region';

/**
 * The GeoTargeting model module.
 * @module model/GeoTargeting
 * @version v3.3
 */
class GeoTargeting {
    /**
     * Constructs a new <code>GeoTargeting</code>.
     * Geographical Targeting.
     * @alias module:model/GeoTargeting
     */
    constructor() { 
        
        GeoTargeting.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GeoTargeting</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GeoTargeting} obj Optional instance to populate.
     * @return {module:model/GeoTargeting} The populated <code>GeoTargeting</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GeoTargeting();

            if (data.hasOwnProperty('cities')) {
                obj['cities'] = ApiClient.convertToType(data['cities'], [City]);
            }
            if (data.hasOwnProperty('countries')) {
                obj['countries'] = ApiClient.convertToType(data['countries'], [Country]);
            }
            if (data.hasOwnProperty('excludeCountries')) {
                obj['excludeCountries'] = ApiClient.convertToType(data['excludeCountries'], 'Boolean');
            }
            if (data.hasOwnProperty('metros')) {
                obj['metros'] = ApiClient.convertToType(data['metros'], [Metro]);
            }
            if (data.hasOwnProperty('postalCodes')) {
                obj['postalCodes'] = ApiClient.convertToType(data['postalCodes'], [PostalCode]);
            }
            if (data.hasOwnProperty('regions')) {
                obj['regions'] = ApiClient.convertToType(data['regions'], [Region]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GeoTargeting</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GeoTargeting</code>.
     */
    static validateJSON(data) {
        if (data['cities']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['cities'])) {
                throw new Error("Expected the field `cities` to be an array in the JSON data but got " + data['cities']);
            }
            // validate the optional field `cities` (array)
            for (const item of data['cities']) {
                City.validateJSON(item);
            };
        }
        if (data['countries']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['countries'])) {
                throw new Error("Expected the field `countries` to be an array in the JSON data but got " + data['countries']);
            }
            // validate the optional field `countries` (array)
            for (const item of data['countries']) {
                Country.validateJSON(item);
            };
        }
        if (data['metros']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['metros'])) {
                throw new Error("Expected the field `metros` to be an array in the JSON data but got " + data['metros']);
            }
            // validate the optional field `metros` (array)
            for (const item of data['metros']) {
                Metro.validateJSON(item);
            };
        }
        if (data['postalCodes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['postalCodes'])) {
                throw new Error("Expected the field `postalCodes` to be an array in the JSON data but got " + data['postalCodes']);
            }
            // validate the optional field `postalCodes` (array)
            for (const item of data['postalCodes']) {
                PostalCode.validateJSON(item);
            };
        }
        if (data['regions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['regions'])) {
                throw new Error("Expected the field `regions` to be an array in the JSON data but got " + data['regions']);
            }
            // validate the optional field `regions` (array)
            for (const item of data['regions']) {
                Region.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Cities to be targeted. For each city only dartId is required. The other fields are populated automatically when the ad is inserted or updated. If targeting a city, do not target or exclude the country of the city, and do not target the metro or region of the city.
 * @member {Array.<module:model/City>} cities
 */
GeoTargeting.prototype['cities'] = undefined;

/**
 * Countries to be targeted or excluded from targeting, depending on the setting of the excludeCountries field. For each country only dartId is required. The other fields are populated automatically when the ad is inserted or updated. If targeting or excluding a country, do not target regions, cities, metros, or postal codes in the same country.
 * @member {Array.<module:model/Country>} countries
 */
GeoTargeting.prototype['countries'] = undefined;

/**
 * Whether or not to exclude the countries in the countries field from targeting. If false, the countries field refers to countries which will be targeted by the ad.
 * @member {Boolean} excludeCountries
 */
GeoTargeting.prototype['excludeCountries'] = undefined;

/**
 * Metros to be targeted. For each metro only dmaId is required. The other fields are populated automatically when the ad is inserted or updated. If targeting a metro, do not target or exclude the country of the metro.
 * @member {Array.<module:model/Metro>} metros
 */
GeoTargeting.prototype['metros'] = undefined;

/**
 * Postal codes to be targeted. For each postal code only id is required. The other fields are populated automatically when the ad is inserted or updated. If targeting a postal code, do not target or exclude the country of the postal code.
 * @member {Array.<module:model/PostalCode>} postalCodes
 */
GeoTargeting.prototype['postalCodes'] = undefined;

/**
 * Regions to be targeted. For each region only dartId is required. The other fields are populated automatically when the ad is inserted or updated. If targeting a region, do not target or exclude the country of the region.
 * @member {Array.<module:model/Region>} regions
 */
GeoTargeting.prototype['regions'] = undefined;






export default GeoTargeting;

