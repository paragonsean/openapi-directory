/**
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ChangeLog model module.
 * @module model/ChangeLog
 * @version v3.3
 */
class ChangeLog {
    /**
     * Constructs a new <code>ChangeLog</code>.
     * Describes a change that a user has made to a resource.
     * @alias module:model/ChangeLog
     */
    constructor() { 
        
        ChangeLog.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ChangeLog</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ChangeLog} obj Optional instance to populate.
     * @return {module:model/ChangeLog} The populated <code>ChangeLog</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ChangeLog();

            if (data.hasOwnProperty('accountId')) {
                obj['accountId'] = ApiClient.convertToType(data['accountId'], 'String');
            }
            if (data.hasOwnProperty('action')) {
                obj['action'] = ApiClient.convertToType(data['action'], 'String');
            }
            if (data.hasOwnProperty('changeTime')) {
                obj['changeTime'] = ApiClient.convertToType(data['changeTime'], 'Date');
            }
            if (data.hasOwnProperty('fieldName')) {
                obj['fieldName'] = ApiClient.convertToType(data['fieldName'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('newValue')) {
                obj['newValue'] = ApiClient.convertToType(data['newValue'], 'String');
            }
            if (data.hasOwnProperty('objectId')) {
                obj['objectId'] = ApiClient.convertToType(data['objectId'], 'String');
            }
            if (data.hasOwnProperty('objectType')) {
                obj['objectType'] = ApiClient.convertToType(data['objectType'], 'String');
            }
            if (data.hasOwnProperty('oldValue')) {
                obj['oldValue'] = ApiClient.convertToType(data['oldValue'], 'String');
            }
            if (data.hasOwnProperty('subaccountId')) {
                obj['subaccountId'] = ApiClient.convertToType(data['subaccountId'], 'String');
            }
            if (data.hasOwnProperty('transactionId')) {
                obj['transactionId'] = ApiClient.convertToType(data['transactionId'], 'String');
            }
            if (data.hasOwnProperty('userProfileId')) {
                obj['userProfileId'] = ApiClient.convertToType(data['userProfileId'], 'String');
            }
            if (data.hasOwnProperty('userProfileName')) {
                obj['userProfileName'] = ApiClient.convertToType(data['userProfileName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ChangeLog</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ChangeLog</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['accountId'] && !(typeof data['accountId'] === 'string' || data['accountId'] instanceof String)) {
            throw new Error("Expected the field `accountId` to be a primitive type in the JSON string but got " + data['accountId']);
        }
        // ensure the json data is a string
        if (data['action'] && !(typeof data['action'] === 'string' || data['action'] instanceof String)) {
            throw new Error("Expected the field `action` to be a primitive type in the JSON string but got " + data['action']);
        }
        // ensure the json data is a string
        if (data['fieldName'] && !(typeof data['fieldName'] === 'string' || data['fieldName'] instanceof String)) {
            throw new Error("Expected the field `fieldName` to be a primitive type in the JSON string but got " + data['fieldName']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // ensure the json data is a string
        if (data['newValue'] && !(typeof data['newValue'] === 'string' || data['newValue'] instanceof String)) {
            throw new Error("Expected the field `newValue` to be a primitive type in the JSON string but got " + data['newValue']);
        }
        // ensure the json data is a string
        if (data['objectId'] && !(typeof data['objectId'] === 'string' || data['objectId'] instanceof String)) {
            throw new Error("Expected the field `objectId` to be a primitive type in the JSON string but got " + data['objectId']);
        }
        // ensure the json data is a string
        if (data['objectType'] && !(typeof data['objectType'] === 'string' || data['objectType'] instanceof String)) {
            throw new Error("Expected the field `objectType` to be a primitive type in the JSON string but got " + data['objectType']);
        }
        // ensure the json data is a string
        if (data['oldValue'] && !(typeof data['oldValue'] === 'string' || data['oldValue'] instanceof String)) {
            throw new Error("Expected the field `oldValue` to be a primitive type in the JSON string but got " + data['oldValue']);
        }
        // ensure the json data is a string
        if (data['subaccountId'] && !(typeof data['subaccountId'] === 'string' || data['subaccountId'] instanceof String)) {
            throw new Error("Expected the field `subaccountId` to be a primitive type in the JSON string but got " + data['subaccountId']);
        }
        // ensure the json data is a string
        if (data['transactionId'] && !(typeof data['transactionId'] === 'string' || data['transactionId'] instanceof String)) {
            throw new Error("Expected the field `transactionId` to be a primitive type in the JSON string but got " + data['transactionId']);
        }
        // ensure the json data is a string
        if (data['userProfileId'] && !(typeof data['userProfileId'] === 'string' || data['userProfileId'] instanceof String)) {
            throw new Error("Expected the field `userProfileId` to be a primitive type in the JSON string but got " + data['userProfileId']);
        }
        // ensure the json data is a string
        if (data['userProfileName'] && !(typeof data['userProfileName'] === 'string' || data['userProfileName'] instanceof String)) {
            throw new Error("Expected the field `userProfileName` to be a primitive type in the JSON string but got " + data['userProfileName']);
        }

        return true;
    }


}



/**
 * Account ID of the modified object.
 * @member {String} accountId
 */
ChangeLog.prototype['accountId'] = undefined;

/**
 * Action which caused the change.
 * @member {String} action
 */
ChangeLog.prototype['action'] = undefined;

/**
 * @member {Date} changeTime
 */
ChangeLog.prototype['changeTime'] = undefined;

/**
 * Field name of the object which changed.
 * @member {String} fieldName
 */
ChangeLog.prototype['fieldName'] = undefined;

/**
 * ID of this change log.
 * @member {String} id
 */
ChangeLog.prototype['id'] = undefined;

/**
 * Identifies what kind of resource this is. Value: the fixed string \"dfareporting#changeLog\".
 * @member {String} kind
 */
ChangeLog.prototype['kind'] = undefined;

/**
 * New value of the object field.
 * @member {String} newValue
 */
ChangeLog.prototype['newValue'] = undefined;

/**
 * ID of the object of this change log. The object could be a campaign, placement, ad, or other type.
 * @member {String} objectId
 */
ChangeLog.prototype['objectId'] = undefined;

/**
 * Object type of the change log.
 * @member {String} objectType
 */
ChangeLog.prototype['objectType'] = undefined;

/**
 * Old value of the object field.
 * @member {String} oldValue
 */
ChangeLog.prototype['oldValue'] = undefined;

/**
 * Subaccount ID of the modified object.
 * @member {String} subaccountId
 */
ChangeLog.prototype['subaccountId'] = undefined;

/**
 * Transaction ID of this change log. When a single API call results in many changes, each change will have a separate ID in the change log but will share the same transactionId.
 * @member {String} transactionId
 */
ChangeLog.prototype['transactionId'] = undefined;

/**
 * ID of the user who modified the object.
 * @member {String} userProfileId
 */
ChangeLog.prototype['userProfileId'] = undefined;

/**
 * User profile name of the user who modified the object.
 * @member {String} userProfileName
 */
ChangeLog.prototype['userProfileName'] = undefined;






export default ChangeLog;

