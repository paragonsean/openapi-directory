/**
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The TagSetting model module.
 * @module model/TagSetting
 * @version v3.3
 */
class TagSetting {
    /**
     * Constructs a new <code>TagSetting</code>.
     * Tag Settings
     * @alias module:model/TagSetting
     */
    constructor() { 
        
        TagSetting.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TagSetting</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TagSetting} obj Optional instance to populate.
     * @return {module:model/TagSetting} The populated <code>TagSetting</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TagSetting();

            if (data.hasOwnProperty('additionalKeyValues')) {
                obj['additionalKeyValues'] = ApiClient.convertToType(data['additionalKeyValues'], 'String');
            }
            if (data.hasOwnProperty('includeClickThroughUrls')) {
                obj['includeClickThroughUrls'] = ApiClient.convertToType(data['includeClickThroughUrls'], 'Boolean');
            }
            if (data.hasOwnProperty('includeClickTracking')) {
                obj['includeClickTracking'] = ApiClient.convertToType(data['includeClickTracking'], 'Boolean');
            }
            if (data.hasOwnProperty('keywordOption')) {
                obj['keywordOption'] = ApiClient.convertToType(data['keywordOption'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TagSetting</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TagSetting</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['additionalKeyValues'] && !(typeof data['additionalKeyValues'] === 'string' || data['additionalKeyValues'] instanceof String)) {
            throw new Error("Expected the field `additionalKeyValues` to be a primitive type in the JSON string but got " + data['additionalKeyValues']);
        }
        // ensure the json data is a string
        if (data['keywordOption'] && !(typeof data['keywordOption'] === 'string' || data['keywordOption'] instanceof String)) {
            throw new Error("Expected the field `keywordOption` to be a primitive type in the JSON string but got " + data['keywordOption']);
        }

        return true;
    }


}



/**
 * Additional key-values to be included in tags. Each key-value pair must be of the form key=value, and pairs must be separated by a semicolon (;). Keys and values must not contain commas. For example, id=2;color=red is a valid value for this field.
 * @member {String} additionalKeyValues
 */
TagSetting.prototype['additionalKeyValues'] = undefined;

/**
 * Whether static landing page URLs should be included in the tags. This setting applies only to placements.
 * @member {Boolean} includeClickThroughUrls
 */
TagSetting.prototype['includeClickThroughUrls'] = undefined;

/**
 * Whether click-tracking string should be included in the tags.
 * @member {Boolean} includeClickTracking
 */
TagSetting.prototype['includeClickTracking'] = undefined;

/**
 * Option specifying how keywords are embedded in ad tags. This setting can be used to specify whether keyword placeholders are inserted in placement tags for this site. Publishers can then add keywords to those placeholders.
 * @member {module:model/TagSetting.KeywordOptionEnum} keywordOption
 */
TagSetting.prototype['keywordOption'] = undefined;





/**
 * Allowed values for the <code>keywordOption</code> property.
 * @enum {String}
 * @readonly
 */
TagSetting['KeywordOptionEnum'] = {

    /**
     * value: "PLACEHOLDER_WITH_LIST_OF_KEYWORDS"
     * @const
     */
    "PLACEHOLDER_WITH_LIST_OF_KEYWORDS": "PLACEHOLDER_WITH_LIST_OF_KEYWORDS",

    /**
     * value: "IGNORE"
     * @const
     */
    "IGNORE": "IGNORE",

    /**
     * value: "GENERATE_SEPARATE_TAG_FOR_EACH_KEYWORD"
     * @const
     */
    "GENERATE_SEPARATE_TAG_FOR_EACH_KEYWORD": "GENERATE_SEPARATE_TAG_FOR_EACH_KEYWORD"
};



export default TagSetting;

