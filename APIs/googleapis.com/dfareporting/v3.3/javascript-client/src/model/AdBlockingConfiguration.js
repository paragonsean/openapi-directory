/**
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AdBlockingConfiguration model module.
 * @module model/AdBlockingConfiguration
 * @version v3.3
 */
class AdBlockingConfiguration {
    /**
     * Constructs a new <code>AdBlockingConfiguration</code>.
     * Campaign ad blocking settings.
     * @alias module:model/AdBlockingConfiguration
     */
    constructor() { 
        
        AdBlockingConfiguration.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AdBlockingConfiguration</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AdBlockingConfiguration} obj Optional instance to populate.
     * @return {module:model/AdBlockingConfiguration} The populated <code>AdBlockingConfiguration</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AdBlockingConfiguration();

            if (data.hasOwnProperty('clickThroughUrl')) {
                obj['clickThroughUrl'] = ApiClient.convertToType(data['clickThroughUrl'], 'String');
            }
            if (data.hasOwnProperty('creativeBundleId')) {
                obj['creativeBundleId'] = ApiClient.convertToType(data['creativeBundleId'], 'String');
            }
            if (data.hasOwnProperty('enabled')) {
                obj['enabled'] = ApiClient.convertToType(data['enabled'], 'Boolean');
            }
            if (data.hasOwnProperty('overrideClickThroughUrl')) {
                obj['overrideClickThroughUrl'] = ApiClient.convertToType(data['overrideClickThroughUrl'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AdBlockingConfiguration</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AdBlockingConfiguration</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['clickThroughUrl'] && !(typeof data['clickThroughUrl'] === 'string' || data['clickThroughUrl'] instanceof String)) {
            throw new Error("Expected the field `clickThroughUrl` to be a primitive type in the JSON string but got " + data['clickThroughUrl']);
        }
        // ensure the json data is a string
        if (data['creativeBundleId'] && !(typeof data['creativeBundleId'] === 'string' || data['creativeBundleId'] instanceof String)) {
            throw new Error("Expected the field `creativeBundleId` to be a primitive type in the JSON string but got " + data['creativeBundleId']);
        }

        return true;
    }


}



/**
 * Click-through URL used by brand-neutral ads. This is a required field when overrideClickThroughUrl is set to true.
 * @member {String} clickThroughUrl
 */
AdBlockingConfiguration.prototype['clickThroughUrl'] = undefined;

/**
 * ID of a creative bundle to use for this campaign. If set, brand-neutral ads will select creatives from this bundle. Otherwise, a default transparent pixel will be used.
 * @member {String} creativeBundleId
 */
AdBlockingConfiguration.prototype['creativeBundleId'] = undefined;

/**
 * Whether this campaign has enabled ad blocking. When true, ad blocking is enabled for placements in the campaign, but this may be overridden by site and placement settings. When false, ad blocking is disabled for all placements under the campaign, regardless of site and placement settings.
 * @member {Boolean} enabled
 */
AdBlockingConfiguration.prototype['enabled'] = undefined;

/**
 * Whether the brand-neutral ad's click-through URL comes from the campaign's creative bundle or the override URL. Must be set to true if ad blocking is enabled and no creative bundle is configured.
 * @member {Boolean} overrideClickThroughUrl
 */
AdBlockingConfiguration.prototype['overrideClickThroughUrl'] = undefined;






export default AdBlockingConfiguration;

