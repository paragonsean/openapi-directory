/**
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Dimension from './Dimension';
import Metric from './Metric';

/**
 * The ReachReportCompatibleFields model module.
 * @module model/ReachReportCompatibleFields
 * @version v3.3
 */
class ReachReportCompatibleFields {
    /**
     * Constructs a new <code>ReachReportCompatibleFields</code>.
     * Represents fields that are compatible to be selected for a report of type \&quot;REACH\&quot;.
     * @alias module:model/ReachReportCompatibleFields
     */
    constructor() { 
        
        ReachReportCompatibleFields.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ReachReportCompatibleFields</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ReachReportCompatibleFields} obj Optional instance to populate.
     * @return {module:model/ReachReportCompatibleFields} The populated <code>ReachReportCompatibleFields</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ReachReportCompatibleFields();

            if (data.hasOwnProperty('dimensionFilters')) {
                obj['dimensionFilters'] = ApiClient.convertToType(data['dimensionFilters'], [Dimension]);
            }
            if (data.hasOwnProperty('dimensions')) {
                obj['dimensions'] = ApiClient.convertToType(data['dimensions'], [Dimension]);
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('metrics')) {
                obj['metrics'] = ApiClient.convertToType(data['metrics'], [Metric]);
            }
            if (data.hasOwnProperty('pivotedActivityMetrics')) {
                obj['pivotedActivityMetrics'] = ApiClient.convertToType(data['pivotedActivityMetrics'], [Metric]);
            }
            if (data.hasOwnProperty('reachByFrequencyMetrics')) {
                obj['reachByFrequencyMetrics'] = ApiClient.convertToType(data['reachByFrequencyMetrics'], [Metric]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ReachReportCompatibleFields</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ReachReportCompatibleFields</code>.
     */
    static validateJSON(data) {
        if (data['dimensionFilters']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['dimensionFilters'])) {
                throw new Error("Expected the field `dimensionFilters` to be an array in the JSON data but got " + data['dimensionFilters']);
            }
            // validate the optional field `dimensionFilters` (array)
            for (const item of data['dimensionFilters']) {
                Dimension.validateJSON(item);
            };
        }
        if (data['dimensions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['dimensions'])) {
                throw new Error("Expected the field `dimensions` to be an array in the JSON data but got " + data['dimensions']);
            }
            // validate the optional field `dimensions` (array)
            for (const item of data['dimensions']) {
                Dimension.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        if (data['metrics']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['metrics'])) {
                throw new Error("Expected the field `metrics` to be an array in the JSON data but got " + data['metrics']);
            }
            // validate the optional field `metrics` (array)
            for (const item of data['metrics']) {
                Metric.validateJSON(item);
            };
        }
        if (data['pivotedActivityMetrics']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['pivotedActivityMetrics'])) {
                throw new Error("Expected the field `pivotedActivityMetrics` to be an array in the JSON data but got " + data['pivotedActivityMetrics']);
            }
            // validate the optional field `pivotedActivityMetrics` (array)
            for (const item of data['pivotedActivityMetrics']) {
                Metric.validateJSON(item);
            };
        }
        if (data['reachByFrequencyMetrics']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['reachByFrequencyMetrics'])) {
                throw new Error("Expected the field `reachByFrequencyMetrics` to be an array in the JSON data but got " + data['reachByFrequencyMetrics']);
            }
            // validate the optional field `reachByFrequencyMetrics` (array)
            for (const item of data['reachByFrequencyMetrics']) {
                Metric.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Dimensions which are compatible to be selected in the \"dimensionFilters\" section of the report.
 * @member {Array.<module:model/Dimension>} dimensionFilters
 */
ReachReportCompatibleFields.prototype['dimensionFilters'] = undefined;

/**
 * Dimensions which are compatible to be selected in the \"dimensions\" section of the report.
 * @member {Array.<module:model/Dimension>} dimensions
 */
ReachReportCompatibleFields.prototype['dimensions'] = undefined;

/**
 * The kind of resource this is, in this case dfareporting#reachReportCompatibleFields.
 * @member {String} kind
 */
ReachReportCompatibleFields.prototype['kind'] = undefined;

/**
 * Metrics which are compatible to be selected in the \"metricNames\" section of the report.
 * @member {Array.<module:model/Metric>} metrics
 */
ReachReportCompatibleFields.prototype['metrics'] = undefined;

/**
 * Metrics which are compatible to be selected as activity metrics to pivot on in the \"activities\" section of the report.
 * @member {Array.<module:model/Metric>} pivotedActivityMetrics
 */
ReachReportCompatibleFields.prototype['pivotedActivityMetrics'] = undefined;

/**
 * Metrics which are compatible to be selected in the \"reachByFrequencyMetricNames\" section of the report.
 * @member {Array.<module:model/Metric>} reachByFrequencyMetrics
 */
ReachReportCompatibleFields.prototype['reachByFrequencyMetrics'] = undefined;






export default ReachReportCompatibleFields;

