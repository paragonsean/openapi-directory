/**
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DimensionValue from './DimensionValue';

/**
 * The EventTag model module.
 * @module model/EventTag
 * @version v3.3
 */
class EventTag {
    /**
     * Constructs a new <code>EventTag</code>.
     * Contains properties of an event tag.
     * @alias module:model/EventTag
     */
    constructor() { 
        
        EventTag.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>EventTag</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EventTag} obj Optional instance to populate.
     * @return {module:model/EventTag} The populated <code>EventTag</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EventTag();

            if (data.hasOwnProperty('accountId')) {
                obj['accountId'] = ApiClient.convertToType(data['accountId'], 'String');
            }
            if (data.hasOwnProperty('advertiserId')) {
                obj['advertiserId'] = ApiClient.convertToType(data['advertiserId'], 'String');
            }
            if (data.hasOwnProperty('advertiserIdDimensionValue')) {
                obj['advertiserIdDimensionValue'] = DimensionValue.constructFromObject(data['advertiserIdDimensionValue']);
            }
            if (data.hasOwnProperty('campaignId')) {
                obj['campaignId'] = ApiClient.convertToType(data['campaignId'], 'String');
            }
            if (data.hasOwnProperty('campaignIdDimensionValue')) {
                obj['campaignIdDimensionValue'] = DimensionValue.constructFromObject(data['campaignIdDimensionValue']);
            }
            if (data.hasOwnProperty('enabledByDefault')) {
                obj['enabledByDefault'] = ApiClient.convertToType(data['enabledByDefault'], 'Boolean');
            }
            if (data.hasOwnProperty('excludeFromAdxRequests')) {
                obj['excludeFromAdxRequests'] = ApiClient.convertToType(data['excludeFromAdxRequests'], 'Boolean');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('siteFilterType')) {
                obj['siteFilterType'] = ApiClient.convertToType(data['siteFilterType'], 'String');
            }
            if (data.hasOwnProperty('siteIds')) {
                obj['siteIds'] = ApiClient.convertToType(data['siteIds'], ['String']);
            }
            if (data.hasOwnProperty('sslCompliant')) {
                obj['sslCompliant'] = ApiClient.convertToType(data['sslCompliant'], 'Boolean');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('subaccountId')) {
                obj['subaccountId'] = ApiClient.convertToType(data['subaccountId'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('urlEscapeLevels')) {
                obj['urlEscapeLevels'] = ApiClient.convertToType(data['urlEscapeLevels'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EventTag</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EventTag</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['accountId'] && !(typeof data['accountId'] === 'string' || data['accountId'] instanceof String)) {
            throw new Error("Expected the field `accountId` to be a primitive type in the JSON string but got " + data['accountId']);
        }
        // ensure the json data is a string
        if (data['advertiserId'] && !(typeof data['advertiserId'] === 'string' || data['advertiserId'] instanceof String)) {
            throw new Error("Expected the field `advertiserId` to be a primitive type in the JSON string but got " + data['advertiserId']);
        }
        // validate the optional field `advertiserIdDimensionValue`
        if (data['advertiserIdDimensionValue']) { // data not null
          DimensionValue.validateJSON(data['advertiserIdDimensionValue']);
        }
        // ensure the json data is a string
        if (data['campaignId'] && !(typeof data['campaignId'] === 'string' || data['campaignId'] instanceof String)) {
            throw new Error("Expected the field `campaignId` to be a primitive type in the JSON string but got " + data['campaignId']);
        }
        // validate the optional field `campaignIdDimensionValue`
        if (data['campaignIdDimensionValue']) { // data not null
          DimensionValue.validateJSON(data['campaignIdDimensionValue']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['siteFilterType'] && !(typeof data['siteFilterType'] === 'string' || data['siteFilterType'] instanceof String)) {
            throw new Error("Expected the field `siteFilterType` to be a primitive type in the JSON string but got " + data['siteFilterType']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['siteIds'])) {
            throw new Error("Expected the field `siteIds` to be an array in the JSON data but got " + data['siteIds']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['subaccountId'] && !(typeof data['subaccountId'] === 'string' || data['subaccountId'] instanceof String)) {
            throw new Error("Expected the field `subaccountId` to be a primitive type in the JSON string but got " + data['subaccountId']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }

        return true;
    }


}



/**
 * Account ID of this event tag. This is a read-only field that can be left blank.
 * @member {String} accountId
 */
EventTag.prototype['accountId'] = undefined;

/**
 * Advertiser ID of this event tag. This field or the campaignId field is required on insertion.
 * @member {String} advertiserId
 */
EventTag.prototype['advertiserId'] = undefined;

/**
 * @member {module:model/DimensionValue} advertiserIdDimensionValue
 */
EventTag.prototype['advertiserIdDimensionValue'] = undefined;

/**
 * Campaign ID of this event tag. This field or the advertiserId field is required on insertion.
 * @member {String} campaignId
 */
EventTag.prototype['campaignId'] = undefined;

/**
 * @member {module:model/DimensionValue} campaignIdDimensionValue
 */
EventTag.prototype['campaignIdDimensionValue'] = undefined;

/**
 * Whether this event tag should be automatically enabled for all of the advertiser's campaigns and ads.
 * @member {Boolean} enabledByDefault
 */
EventTag.prototype['enabledByDefault'] = undefined;

/**
 * Whether to remove this event tag from ads that are trafficked through Display & Video 360 to Ad Exchange. This may be useful if the event tag uses a pixel that is unapproved for Ad Exchange bids on one or more networks, such as the Google Display Network.
 * @member {Boolean} excludeFromAdxRequests
 */
EventTag.prototype['excludeFromAdxRequests'] = undefined;

/**
 * ID of this event tag. This is a read-only, auto-generated field.
 * @member {String} id
 */
EventTag.prototype['id'] = undefined;

/**
 * Identifies what kind of resource this is. Value: the fixed string \"dfareporting#eventTag\".
 * @member {String} kind
 */
EventTag.prototype['kind'] = undefined;

/**
 * Name of this event tag. This is a required field and must be less than 256 characters long.
 * @member {String} name
 */
EventTag.prototype['name'] = undefined;

/**
 * Site filter type for this event tag. If no type is specified then the event tag will be applied to all sites.
 * @member {module:model/EventTag.SiteFilterTypeEnum} siteFilterType
 */
EventTag.prototype['siteFilterType'] = undefined;

/**
 * Filter list of site IDs associated with this event tag. The siteFilterType determines whether this is a allowlist or blocklist filter.
 * @member {Array.<String>} siteIds
 */
EventTag.prototype['siteIds'] = undefined;

/**
 * Whether this tag is SSL-compliant or not. This is a read-only field.
 * @member {Boolean} sslCompliant
 */
EventTag.prototype['sslCompliant'] = undefined;

/**
 * Status of this event tag. Must be ENABLED for this event tag to fire. This is a required field.
 * @member {module:model/EventTag.StatusEnum} status
 */
EventTag.prototype['status'] = undefined;

/**
 * Subaccount ID of this event tag. This is a read-only field that can be left blank.
 * @member {String} subaccountId
 */
EventTag.prototype['subaccountId'] = undefined;

/**
 * Event tag type. Can be used to specify whether to use a third-party pixel, a third-party JavaScript URL, or a third-party click-through URL for either impression or click tracking. This is a required field.
 * @member {module:model/EventTag.TypeEnum} type
 */
EventTag.prototype['type'] = undefined;

/**
 * Payload URL for this event tag. The URL on a click-through event tag should have a landing page URL appended to the end of it. This field is required on insertion.
 * @member {String} url
 */
EventTag.prototype['url'] = undefined;

/**
 * Number of times the landing page URL should be URL-escaped before being appended to the click-through event tag URL. Only applies to click-through event tags as specified by the event tag type.
 * @member {Number} urlEscapeLevels
 */
EventTag.prototype['urlEscapeLevels'] = undefined;





/**
 * Allowed values for the <code>siteFilterType</code> property.
 * @enum {String}
 * @readonly
 */
EventTag['SiteFilterTypeEnum'] = {

    /**
     * value: "WHITELIST"
     * @const
     */
    "WHITELIST": "WHITELIST",

    /**
     * value: "BLACKLIST"
     * @const
     */
    "BLACKLIST": "BLACKLIST"
};


/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
EventTag['StatusEnum'] = {

    /**
     * value: "ENABLED"
     * @const
     */
    "ENABLED": "ENABLED",

    /**
     * value: "DISABLED"
     * @const
     */
    "DISABLED": "DISABLED"
};


/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
EventTag['TypeEnum'] = {

    /**
     * value: "IMPRESSION_IMAGE_EVENT_TAG"
     * @const
     */
    "IMPRESSION_IMAGE_EVENT_TAG": "IMPRESSION_IMAGE_EVENT_TAG",

    /**
     * value: "IMPRESSION_JAVASCRIPT_EVENT_TAG"
     * @const
     */
    "IMPRESSION_JAVASCRIPT_EVENT_TAG": "IMPRESSION_JAVASCRIPT_EVENT_TAG",

    /**
     * value: "CLICK_THROUGH_EVENT_TAG"
     * @const
     */
    "CLICK_THROUGH_EVENT_TAG": "CLICK_THROUGH_EVENT_TAG"
};



export default EventTag;

