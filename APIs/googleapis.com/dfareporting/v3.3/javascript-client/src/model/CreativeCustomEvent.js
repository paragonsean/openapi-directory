/**
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CreativeClickThroughUrl from './CreativeClickThroughUrl';
import PopupWindowProperties from './PopupWindowProperties';

/**
 * The CreativeCustomEvent model module.
 * @module model/CreativeCustomEvent
 * @version v3.3
 */
class CreativeCustomEvent {
    /**
     * Constructs a new <code>CreativeCustomEvent</code>.
     * Creative Custom Event.
     * @alias module:model/CreativeCustomEvent
     */
    constructor() { 
        
        CreativeCustomEvent.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CreativeCustomEvent</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreativeCustomEvent} obj Optional instance to populate.
     * @return {module:model/CreativeCustomEvent} The populated <code>CreativeCustomEvent</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreativeCustomEvent();

            if (data.hasOwnProperty('advertiserCustomEventId')) {
                obj['advertiserCustomEventId'] = ApiClient.convertToType(data['advertiserCustomEventId'], 'String');
            }
            if (data.hasOwnProperty('advertiserCustomEventName')) {
                obj['advertiserCustomEventName'] = ApiClient.convertToType(data['advertiserCustomEventName'], 'String');
            }
            if (data.hasOwnProperty('advertiserCustomEventType')) {
                obj['advertiserCustomEventType'] = ApiClient.convertToType(data['advertiserCustomEventType'], 'String');
            }
            if (data.hasOwnProperty('artworkLabel')) {
                obj['artworkLabel'] = ApiClient.convertToType(data['artworkLabel'], 'String');
            }
            if (data.hasOwnProperty('artworkType')) {
                obj['artworkType'] = ApiClient.convertToType(data['artworkType'], 'String');
            }
            if (data.hasOwnProperty('exitClickThroughUrl')) {
                obj['exitClickThroughUrl'] = CreativeClickThroughUrl.constructFromObject(data['exitClickThroughUrl']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('popupWindowProperties')) {
                obj['popupWindowProperties'] = PopupWindowProperties.constructFromObject(data['popupWindowProperties']);
            }
            if (data.hasOwnProperty('targetType')) {
                obj['targetType'] = ApiClient.convertToType(data['targetType'], 'String');
            }
            if (data.hasOwnProperty('videoReportingId')) {
                obj['videoReportingId'] = ApiClient.convertToType(data['videoReportingId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreativeCustomEvent</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreativeCustomEvent</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['advertiserCustomEventId'] && !(typeof data['advertiserCustomEventId'] === 'string' || data['advertiserCustomEventId'] instanceof String)) {
            throw new Error("Expected the field `advertiserCustomEventId` to be a primitive type in the JSON string but got " + data['advertiserCustomEventId']);
        }
        // ensure the json data is a string
        if (data['advertiserCustomEventName'] && !(typeof data['advertiserCustomEventName'] === 'string' || data['advertiserCustomEventName'] instanceof String)) {
            throw new Error("Expected the field `advertiserCustomEventName` to be a primitive type in the JSON string but got " + data['advertiserCustomEventName']);
        }
        // ensure the json data is a string
        if (data['advertiserCustomEventType'] && !(typeof data['advertiserCustomEventType'] === 'string' || data['advertiserCustomEventType'] instanceof String)) {
            throw new Error("Expected the field `advertiserCustomEventType` to be a primitive type in the JSON string but got " + data['advertiserCustomEventType']);
        }
        // ensure the json data is a string
        if (data['artworkLabel'] && !(typeof data['artworkLabel'] === 'string' || data['artworkLabel'] instanceof String)) {
            throw new Error("Expected the field `artworkLabel` to be a primitive type in the JSON string but got " + data['artworkLabel']);
        }
        // ensure the json data is a string
        if (data['artworkType'] && !(typeof data['artworkType'] === 'string' || data['artworkType'] instanceof String)) {
            throw new Error("Expected the field `artworkType` to be a primitive type in the JSON string but got " + data['artworkType']);
        }
        // validate the optional field `exitClickThroughUrl`
        if (data['exitClickThroughUrl']) { // data not null
          CreativeClickThroughUrl.validateJSON(data['exitClickThroughUrl']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // validate the optional field `popupWindowProperties`
        if (data['popupWindowProperties']) { // data not null
          PopupWindowProperties.validateJSON(data['popupWindowProperties']);
        }
        // ensure the json data is a string
        if (data['targetType'] && !(typeof data['targetType'] === 'string' || data['targetType'] instanceof String)) {
            throw new Error("Expected the field `targetType` to be a primitive type in the JSON string but got " + data['targetType']);
        }
        // ensure the json data is a string
        if (data['videoReportingId'] && !(typeof data['videoReportingId'] === 'string' || data['videoReportingId'] instanceof String)) {
            throw new Error("Expected the field `videoReportingId` to be a primitive type in the JSON string but got " + data['videoReportingId']);
        }

        return true;
    }


}



/**
 * Unique ID of this event used by Reporting and Data Transfer. This is a read-only field.
 * @member {String} advertiserCustomEventId
 */
CreativeCustomEvent.prototype['advertiserCustomEventId'] = undefined;

/**
 * User-entered name for the event.
 * @member {String} advertiserCustomEventName
 */
CreativeCustomEvent.prototype['advertiserCustomEventName'] = undefined;

/**
 * Type of the event. This is a read-only field.
 * @member {module:model/CreativeCustomEvent.AdvertiserCustomEventTypeEnum} advertiserCustomEventType
 */
CreativeCustomEvent.prototype['advertiserCustomEventType'] = undefined;

/**
 * Artwork label column, used to link events in Campaign Manager back to events in Studio. This is a required field and should not be modified after insertion.
 * @member {String} artworkLabel
 */
CreativeCustomEvent.prototype['artworkLabel'] = undefined;

/**
 * Artwork type used by the creative.This is a read-only field.
 * @member {module:model/CreativeCustomEvent.ArtworkTypeEnum} artworkType
 */
CreativeCustomEvent.prototype['artworkType'] = undefined;

/**
 * @member {module:model/CreativeClickThroughUrl} exitClickThroughUrl
 */
CreativeCustomEvent.prototype['exitClickThroughUrl'] = undefined;

/**
 * ID of this event. This is a required field and should not be modified after insertion.
 * @member {String} id
 */
CreativeCustomEvent.prototype['id'] = undefined;

/**
 * @member {module:model/PopupWindowProperties} popupWindowProperties
 */
CreativeCustomEvent.prototype['popupWindowProperties'] = undefined;

/**
 * Target type used by the event.
 * @member {module:model/CreativeCustomEvent.TargetTypeEnum} targetType
 */
CreativeCustomEvent.prototype['targetType'] = undefined;

/**
 * Video reporting ID, used to differentiate multiple videos in a single creative. This is a read-only field.
 * @member {String} videoReportingId
 */
CreativeCustomEvent.prototype['videoReportingId'] = undefined;





/**
 * Allowed values for the <code>advertiserCustomEventType</code> property.
 * @enum {String}
 * @readonly
 */
CreativeCustomEvent['AdvertiserCustomEventTypeEnum'] = {

    /**
     * value: "ADVERTISER_EVENT_TIMER"
     * @const
     */
    "TIMER": "ADVERTISER_EVENT_TIMER",

    /**
     * value: "ADVERTISER_EVENT_EXIT"
     * @const
     */
    "EXIT": "ADVERTISER_EVENT_EXIT",

    /**
     * value: "ADVERTISER_EVENT_COUNTER"
     * @const
     */
    "COUNTER": "ADVERTISER_EVENT_COUNTER"
};


/**
 * Allowed values for the <code>artworkType</code> property.
 * @enum {String}
 * @readonly
 */
CreativeCustomEvent['ArtworkTypeEnum'] = {

    /**
     * value: "ARTWORK_TYPE_FLASH"
     * @const
     */
    "FLASH": "ARTWORK_TYPE_FLASH",

    /**
     * value: "ARTWORK_TYPE_HTML5"
     * @const
     */
    "HTML5": "ARTWORK_TYPE_HTML5",

    /**
     * value: "ARTWORK_TYPE_MIXED"
     * @const
     */
    "MIXED": "ARTWORK_TYPE_MIXED",

    /**
     * value: "ARTWORK_TYPE_IMAGE"
     * @const
     */
    "IMAGE": "ARTWORK_TYPE_IMAGE"
};


/**
 * Allowed values for the <code>targetType</code> property.
 * @enum {String}
 * @readonly
 */
CreativeCustomEvent['TargetTypeEnum'] = {

    /**
     * value: "TARGET_BLANK"
     * @const
     */
    "BLANK": "TARGET_BLANK",

    /**
     * value: "TARGET_TOP"
     * @const
     */
    "TOP": "TARGET_TOP",

    /**
     * value: "TARGET_SELF"
     * @const
     */
    "SELF": "TARGET_SELF",

    /**
     * value: "TARGET_PARENT"
     * @const
     */
    "PARENT": "TARGET_PARENT",

    /**
     * value: "TARGET_POPUP"
     * @const
     */
    "POPUP": "TARGET_POPUP"
};



export default CreativeCustomEvent;

