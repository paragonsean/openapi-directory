/**
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AccountPermission model module.
 * @module model/AccountPermission
 * @version v3.3
 */
class AccountPermission {
    /**
     * Constructs a new <code>AccountPermission</code>.
     * AccountPermissions contains information about a particular account permission. Some features of Campaign Manager require an account permission to be present in the account.
     * @alias module:model/AccountPermission
     */
    constructor() { 
        
        AccountPermission.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AccountPermission</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AccountPermission} obj Optional instance to populate.
     * @return {module:model/AccountPermission} The populated <code>AccountPermission</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AccountPermission();

            if (data.hasOwnProperty('accountProfiles')) {
                obj['accountProfiles'] = ApiClient.convertToType(data['accountProfiles'], ['String']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('level')) {
                obj['level'] = ApiClient.convertToType(data['level'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('permissionGroupId')) {
                obj['permissionGroupId'] = ApiClient.convertToType(data['permissionGroupId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AccountPermission</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AccountPermission</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['accountProfiles'])) {
            throw new Error("Expected the field `accountProfiles` to be an array in the JSON data but got " + data['accountProfiles']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // ensure the json data is a string
        if (data['level'] && !(typeof data['level'] === 'string' || data['level'] instanceof String)) {
            throw new Error("Expected the field `level` to be a primitive type in the JSON string but got " + data['level']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['permissionGroupId'] && !(typeof data['permissionGroupId'] === 'string' || data['permissionGroupId'] instanceof String)) {
            throw new Error("Expected the field `permissionGroupId` to be a primitive type in the JSON string but got " + data['permissionGroupId']);
        }

        return true;
    }


}



/**
 * Account profiles associated with this account permission. Possible values are: - \"ACCOUNT_PROFILE_BASIC\" - \"ACCOUNT_PROFILE_STANDARD\" 
 * @member {Array.<module:model/AccountPermission.AccountProfilesEnum>} accountProfiles
 */
AccountPermission.prototype['accountProfiles'] = undefined;

/**
 * ID of this account permission.
 * @member {String} id
 */
AccountPermission.prototype['id'] = undefined;

/**
 * Identifies what kind of resource this is. Value: the fixed string \"dfareporting#accountPermission\".
 * @member {String} kind
 */
AccountPermission.prototype['kind'] = undefined;

/**
 * Administrative level required to enable this account permission.
 * @member {module:model/AccountPermission.LevelEnum} level
 */
AccountPermission.prototype['level'] = undefined;

/**
 * Name of this account permission.
 * @member {String} name
 */
AccountPermission.prototype['name'] = undefined;

/**
 * Permission group of this account permission.
 * @member {String} permissionGroupId
 */
AccountPermission.prototype['permissionGroupId'] = undefined;





/**
 * Allowed values for the <code>accountProfiles</code> property.
 * @enum {String}
 * @readonly
 */
AccountPermission['AccountProfilesEnum'] = {

    /**
     * value: "ACCOUNT_PROFILE_BASIC"
     * @const
     */
    "BASIC": "ACCOUNT_PROFILE_BASIC",

    /**
     * value: "ACCOUNT_PROFILE_STANDARD"
     * @const
     */
    "STANDARD": "ACCOUNT_PROFILE_STANDARD"
};


/**
 * Allowed values for the <code>level</code> property.
 * @enum {String}
 * @readonly
 */
AccountPermission['LevelEnum'] = {

    /**
     * value: "USER"
     * @const
     */
    "USER": "USER",

    /**
     * value: "ADMINISTRATOR"
     * @const
     */
    "ADMINISTRATOR": "ADMINISTRATOR"
};



export default AccountPermission;

