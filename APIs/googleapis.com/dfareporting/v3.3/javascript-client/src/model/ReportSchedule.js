/**
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ReportSchedule model module.
 * @module model/ReportSchedule
 * @version v3.3
 */
class ReportSchedule {
    /**
     * Constructs a new <code>ReportSchedule</code>.
     * The report&#39;s schedule. Can only be set if the report&#39;s &#39;dateRange&#39; is a relative date range and the relative date range is not \&quot;TODAY\&quot;.
     * @alias module:model/ReportSchedule
     */
    constructor() { 
        
        ReportSchedule.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ReportSchedule</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ReportSchedule} obj Optional instance to populate.
     * @return {module:model/ReportSchedule} The populated <code>ReportSchedule</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ReportSchedule();

            if (data.hasOwnProperty('active')) {
                obj['active'] = ApiClient.convertToType(data['active'], 'Boolean');
            }
            if (data.hasOwnProperty('every')) {
                obj['every'] = ApiClient.convertToType(data['every'], 'Number');
            }
            if (data.hasOwnProperty('expirationDate')) {
                obj['expirationDate'] = ApiClient.convertToType(data['expirationDate'], 'Date');
            }
            if (data.hasOwnProperty('repeats')) {
                obj['repeats'] = ApiClient.convertToType(data['repeats'], 'String');
            }
            if (data.hasOwnProperty('repeatsOnWeekDays')) {
                obj['repeatsOnWeekDays'] = ApiClient.convertToType(data['repeatsOnWeekDays'], ['String']);
            }
            if (data.hasOwnProperty('runsOnDayOfMonth')) {
                obj['runsOnDayOfMonth'] = ApiClient.convertToType(data['runsOnDayOfMonth'], 'String');
            }
            if (data.hasOwnProperty('startDate')) {
                obj['startDate'] = ApiClient.convertToType(data['startDate'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ReportSchedule</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ReportSchedule</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['repeats'] && !(typeof data['repeats'] === 'string' || data['repeats'] instanceof String)) {
            throw new Error("Expected the field `repeats` to be a primitive type in the JSON string but got " + data['repeats']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['repeatsOnWeekDays'])) {
            throw new Error("Expected the field `repeatsOnWeekDays` to be an array in the JSON data but got " + data['repeatsOnWeekDays']);
        }
        // ensure the json data is a string
        if (data['runsOnDayOfMonth'] && !(typeof data['runsOnDayOfMonth'] === 'string' || data['runsOnDayOfMonth'] instanceof String)) {
            throw new Error("Expected the field `runsOnDayOfMonth` to be a primitive type in the JSON string but got " + data['runsOnDayOfMonth']);
        }

        return true;
    }


}



/**
 * Whether the schedule is active or not. Must be set to either true or false.
 * @member {Boolean} active
 */
ReportSchedule.prototype['active'] = undefined;

/**
 * Defines every how many days, weeks or months the report should be run. Needs to be set when \"repeats\" is either \"DAILY\", \"WEEKLY\" or \"MONTHLY\".
 * @member {Number} every
 */
ReportSchedule.prototype['every'] = undefined;

/**
 * @member {Date} expirationDate
 */
ReportSchedule.prototype['expirationDate'] = undefined;

/**
 * The interval for which the report is repeated. Note: - \"DAILY\" also requires field \"every\" to be set. - \"WEEKLY\" also requires fields \"every\" and \"repeatsOnWeekDays\" to be set. - \"MONTHLY\" also requires fields \"every\" and \"runsOnDayOfMonth\" to be set. 
 * @member {String} repeats
 */
ReportSchedule.prototype['repeats'] = undefined;

/**
 * List of week days \"WEEKLY\" on which scheduled reports should run.
 * @member {Array.<module:model/ReportSchedule.RepeatsOnWeekDaysEnum>} repeatsOnWeekDays
 */
ReportSchedule.prototype['repeatsOnWeekDays'] = undefined;

/**
 * Enum to define for \"MONTHLY\" scheduled reports whether reports should be repeated on the same day of the month as \"startDate\" or the same day of the week of the month. Example: If 'startDate' is Monday, April 2nd 2012 (2012-04-02), \"DAY_OF_MONTH\" would run subsequent reports on the 2nd of every Month, and \"WEEK_OF_MONTH\" would run subsequent reports on the first Monday of the month.
 * @member {module:model/ReportSchedule.RunsOnDayOfMonthEnum} runsOnDayOfMonth
 */
ReportSchedule.prototype['runsOnDayOfMonth'] = undefined;

/**
 * @member {Date} startDate
 */
ReportSchedule.prototype['startDate'] = undefined;





/**
 * Allowed values for the <code>repeatsOnWeekDays</code> property.
 * @enum {String}
 * @readonly
 */
ReportSchedule['RepeatsOnWeekDaysEnum'] = {

    /**
     * value: "SUNDAY"
     * @const
     */
    "SUNDAY": "SUNDAY",

    /**
     * value: "MONDAY"
     * @const
     */
    "MONDAY": "MONDAY",

    /**
     * value: "TUESDAY"
     * @const
     */
    "TUESDAY": "TUESDAY",

    /**
     * value: "WEDNESDAY"
     * @const
     */
    "WEDNESDAY": "WEDNESDAY",

    /**
     * value: "THURSDAY"
     * @const
     */
    "THURSDAY": "THURSDAY",

    /**
     * value: "FRIDAY"
     * @const
     */
    "FRIDAY": "FRIDAY",

    /**
     * value: "SATURDAY"
     * @const
     */
    "SATURDAY": "SATURDAY"
};


/**
 * Allowed values for the <code>runsOnDayOfMonth</code> property.
 * @enum {String}
 * @readonly
 */
ReportSchedule['RunsOnDayOfMonthEnum'] = {

    /**
     * value: "DAY_OF_MONTH"
     * @const
     */
    "DAY_OF_MONTH": "DAY_OF_MONTH",

    /**
     * value: "WEEK_OF_MONTH"
     * @const
     */
    "WEEK_OF_MONTH": "WEEK_OF_MONTH"
};



export default ReportSchedule;

