/**
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Browser model module.
 * @module model/Browser
 * @version v3.3
 */
class Browser {
    /**
     * Constructs a new <code>Browser</code>.
     * Contains information about a browser that can be targeted by ads.
     * @alias module:model/Browser
     */
    constructor() { 
        
        Browser.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Browser</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Browser} obj Optional instance to populate.
     * @return {module:model/Browser} The populated <code>Browser</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Browser();

            if (data.hasOwnProperty('browserVersionId')) {
                obj['browserVersionId'] = ApiClient.convertToType(data['browserVersionId'], 'String');
            }
            if (data.hasOwnProperty('dartId')) {
                obj['dartId'] = ApiClient.convertToType(data['dartId'], 'String');
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('majorVersion')) {
                obj['majorVersion'] = ApiClient.convertToType(data['majorVersion'], 'String');
            }
            if (data.hasOwnProperty('minorVersion')) {
                obj['minorVersion'] = ApiClient.convertToType(data['minorVersion'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Browser</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Browser</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['browserVersionId'] && !(typeof data['browserVersionId'] === 'string' || data['browserVersionId'] instanceof String)) {
            throw new Error("Expected the field `browserVersionId` to be a primitive type in the JSON string but got " + data['browserVersionId']);
        }
        // ensure the json data is a string
        if (data['dartId'] && !(typeof data['dartId'] === 'string' || data['dartId'] instanceof String)) {
            throw new Error("Expected the field `dartId` to be a primitive type in the JSON string but got " + data['dartId']);
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // ensure the json data is a string
        if (data['majorVersion'] && !(typeof data['majorVersion'] === 'string' || data['majorVersion'] instanceof String)) {
            throw new Error("Expected the field `majorVersion` to be a primitive type in the JSON string but got " + data['majorVersion']);
        }
        // ensure the json data is a string
        if (data['minorVersion'] && !(typeof data['minorVersion'] === 'string' || data['minorVersion'] instanceof String)) {
            throw new Error("Expected the field `minorVersion` to be a primitive type in the JSON string but got " + data['minorVersion']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }

        return true;
    }


}



/**
 * ID referring to this grouping of browser and version numbers. This is the ID used for targeting.
 * @member {String} browserVersionId
 */
Browser.prototype['browserVersionId'] = undefined;

/**
 * DART ID of this browser. This is the ID used when generating reports.
 * @member {String} dartId
 */
Browser.prototype['dartId'] = undefined;

/**
 * Identifies what kind of resource this is. Value: the fixed string \"dfareporting#browser\".
 * @member {String} kind
 */
Browser.prototype['kind'] = undefined;

/**
 * Major version number (leftmost number) of this browser. For example, for Chrome 5.0.376.86 beta, this field should be set to 5. An asterisk (*) may be used to target any version number, and a question mark (?) may be used to target cases where the version number cannot be identified. For example, Chrome *.* targets any version of Chrome: 1.2, 2.5, 3.5, and so on. Chrome 3.* targets Chrome 3.1, 3.5, but not 4.0. Firefox ?.? targets cases where the ad server knows the browser is Firefox but can't tell which version it is.
 * @member {String} majorVersion
 */
Browser.prototype['majorVersion'] = undefined;

/**
 * Minor version number (number after first dot on left) of this browser. For example, for Chrome 5.0.375.86 beta, this field should be set to 0. An asterisk (*) may be used to target any version number, and a question mark (?) may be used to target cases where the version number cannot be identified. For example, Chrome *.* targets any version of Chrome: 1.2, 2.5, 3.5, and so on. Chrome 3.* targets Chrome 3.1, 3.5, but not 4.0. Firefox ?.? targets cases where the ad server knows the browser is Firefox but can't tell which version it is.
 * @member {String} minorVersion
 */
Browser.prototype['minorVersion'] = undefined;

/**
 * Name of this browser.
 * @member {String} name
 */
Browser.prototype['name'] = undefined;






export default Browser;

