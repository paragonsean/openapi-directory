/**
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import LastModifiedInfo from './LastModifiedInfo';
import OrderContact from './OrderContact';

/**
 * The Order model module.
 * @module model/Order
 * @version v3.3
 */
class Order {
    /**
     * Constructs a new <code>Order</code>.
     * Describes properties of a Planning order.
     * @alias module:model/Order
     */
    constructor() { 
        
        Order.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Order</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Order} obj Optional instance to populate.
     * @return {module:model/Order} The populated <code>Order</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Order();

            if (data.hasOwnProperty('accountId')) {
                obj['accountId'] = ApiClient.convertToType(data['accountId'], 'String');
            }
            if (data.hasOwnProperty('advertiserId')) {
                obj['advertiserId'] = ApiClient.convertToType(data['advertiserId'], 'String');
            }
            if (data.hasOwnProperty('approverUserProfileIds')) {
                obj['approverUserProfileIds'] = ApiClient.convertToType(data['approverUserProfileIds'], ['String']);
            }
            if (data.hasOwnProperty('buyerInvoiceId')) {
                obj['buyerInvoiceId'] = ApiClient.convertToType(data['buyerInvoiceId'], 'String');
            }
            if (data.hasOwnProperty('buyerOrganizationName')) {
                obj['buyerOrganizationName'] = ApiClient.convertToType(data['buyerOrganizationName'], 'String');
            }
            if (data.hasOwnProperty('comments')) {
                obj['comments'] = ApiClient.convertToType(data['comments'], 'String');
            }
            if (data.hasOwnProperty('contacts')) {
                obj['contacts'] = ApiClient.convertToType(data['contacts'], [OrderContact]);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('lastModifiedInfo')) {
                obj['lastModifiedInfo'] = LastModifiedInfo.constructFromObject(data['lastModifiedInfo']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('notes')) {
                obj['notes'] = ApiClient.convertToType(data['notes'], 'String');
            }
            if (data.hasOwnProperty('planningTermId')) {
                obj['planningTermId'] = ApiClient.convertToType(data['planningTermId'], 'String');
            }
            if (data.hasOwnProperty('projectId')) {
                obj['projectId'] = ApiClient.convertToType(data['projectId'], 'String');
            }
            if (data.hasOwnProperty('sellerOrderId')) {
                obj['sellerOrderId'] = ApiClient.convertToType(data['sellerOrderId'], 'String');
            }
            if (data.hasOwnProperty('sellerOrganizationName')) {
                obj['sellerOrganizationName'] = ApiClient.convertToType(data['sellerOrganizationName'], 'String');
            }
            if (data.hasOwnProperty('siteId')) {
                obj['siteId'] = ApiClient.convertToType(data['siteId'], ['String']);
            }
            if (data.hasOwnProperty('siteNames')) {
                obj['siteNames'] = ApiClient.convertToType(data['siteNames'], ['String']);
            }
            if (data.hasOwnProperty('subaccountId')) {
                obj['subaccountId'] = ApiClient.convertToType(data['subaccountId'], 'String');
            }
            if (data.hasOwnProperty('termsAndConditions')) {
                obj['termsAndConditions'] = ApiClient.convertToType(data['termsAndConditions'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Order</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Order</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['accountId'] && !(typeof data['accountId'] === 'string' || data['accountId'] instanceof String)) {
            throw new Error("Expected the field `accountId` to be a primitive type in the JSON string but got " + data['accountId']);
        }
        // ensure the json data is a string
        if (data['advertiserId'] && !(typeof data['advertiserId'] === 'string' || data['advertiserId'] instanceof String)) {
            throw new Error("Expected the field `advertiserId` to be a primitive type in the JSON string but got " + data['advertiserId']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['approverUserProfileIds'])) {
            throw new Error("Expected the field `approverUserProfileIds` to be an array in the JSON data but got " + data['approverUserProfileIds']);
        }
        // ensure the json data is a string
        if (data['buyerInvoiceId'] && !(typeof data['buyerInvoiceId'] === 'string' || data['buyerInvoiceId'] instanceof String)) {
            throw new Error("Expected the field `buyerInvoiceId` to be a primitive type in the JSON string but got " + data['buyerInvoiceId']);
        }
        // ensure the json data is a string
        if (data['buyerOrganizationName'] && !(typeof data['buyerOrganizationName'] === 'string' || data['buyerOrganizationName'] instanceof String)) {
            throw new Error("Expected the field `buyerOrganizationName` to be a primitive type in the JSON string but got " + data['buyerOrganizationName']);
        }
        // ensure the json data is a string
        if (data['comments'] && !(typeof data['comments'] === 'string' || data['comments'] instanceof String)) {
            throw new Error("Expected the field `comments` to be a primitive type in the JSON string but got " + data['comments']);
        }
        if (data['contacts']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['contacts'])) {
                throw new Error("Expected the field `contacts` to be an array in the JSON data but got " + data['contacts']);
            }
            // validate the optional field `contacts` (array)
            for (const item of data['contacts']) {
                OrderContact.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // validate the optional field `lastModifiedInfo`
        if (data['lastModifiedInfo']) { // data not null
          LastModifiedInfo.validateJSON(data['lastModifiedInfo']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['notes'] && !(typeof data['notes'] === 'string' || data['notes'] instanceof String)) {
            throw new Error("Expected the field `notes` to be a primitive type in the JSON string but got " + data['notes']);
        }
        // ensure the json data is a string
        if (data['planningTermId'] && !(typeof data['planningTermId'] === 'string' || data['planningTermId'] instanceof String)) {
            throw new Error("Expected the field `planningTermId` to be a primitive type in the JSON string but got " + data['planningTermId']);
        }
        // ensure the json data is a string
        if (data['projectId'] && !(typeof data['projectId'] === 'string' || data['projectId'] instanceof String)) {
            throw new Error("Expected the field `projectId` to be a primitive type in the JSON string but got " + data['projectId']);
        }
        // ensure the json data is a string
        if (data['sellerOrderId'] && !(typeof data['sellerOrderId'] === 'string' || data['sellerOrderId'] instanceof String)) {
            throw new Error("Expected the field `sellerOrderId` to be a primitive type in the JSON string but got " + data['sellerOrderId']);
        }
        // ensure the json data is a string
        if (data['sellerOrganizationName'] && !(typeof data['sellerOrganizationName'] === 'string' || data['sellerOrganizationName'] instanceof String)) {
            throw new Error("Expected the field `sellerOrganizationName` to be a primitive type in the JSON string but got " + data['sellerOrganizationName']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['siteId'])) {
            throw new Error("Expected the field `siteId` to be an array in the JSON data but got " + data['siteId']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['siteNames'])) {
            throw new Error("Expected the field `siteNames` to be an array in the JSON data but got " + data['siteNames']);
        }
        // ensure the json data is a string
        if (data['subaccountId'] && !(typeof data['subaccountId'] === 'string' || data['subaccountId'] instanceof String)) {
            throw new Error("Expected the field `subaccountId` to be a primitive type in the JSON string but got " + data['subaccountId']);
        }
        // ensure the json data is a string
        if (data['termsAndConditions'] && !(typeof data['termsAndConditions'] === 'string' || data['termsAndConditions'] instanceof String)) {
            throw new Error("Expected the field `termsAndConditions` to be a primitive type in the JSON string but got " + data['termsAndConditions']);
        }

        return true;
    }


}



/**
 * Account ID of this order.
 * @member {String} accountId
 */
Order.prototype['accountId'] = undefined;

/**
 * Advertiser ID of this order.
 * @member {String} advertiserId
 */
Order.prototype['advertiserId'] = undefined;

/**
 * IDs for users that have to approve documents created for this order.
 * @member {Array.<String>} approverUserProfileIds
 */
Order.prototype['approverUserProfileIds'] = undefined;

/**
 * Buyer invoice ID associated with this order.
 * @member {String} buyerInvoiceId
 */
Order.prototype['buyerInvoiceId'] = undefined;

/**
 * Name of the buyer organization.
 * @member {String} buyerOrganizationName
 */
Order.prototype['buyerOrganizationName'] = undefined;

/**
 * Comments in this order.
 * @member {String} comments
 */
Order.prototype['comments'] = undefined;

/**
 * Contacts for this order.
 * @member {Array.<module:model/OrderContact>} contacts
 */
Order.prototype['contacts'] = undefined;

/**
 * ID of this order. This is a read-only, auto-generated field.
 * @member {String} id
 */
Order.prototype['id'] = undefined;

/**
 * Identifies what kind of resource this is. Value: the fixed string \"dfareporting#order\".
 * @member {String} kind
 */
Order.prototype['kind'] = undefined;

/**
 * @member {module:model/LastModifiedInfo} lastModifiedInfo
 */
Order.prototype['lastModifiedInfo'] = undefined;

/**
 * Name of this order.
 * @member {String} name
 */
Order.prototype['name'] = undefined;

/**
 * Notes of this order.
 * @member {String} notes
 */
Order.prototype['notes'] = undefined;

/**
 * ID of the terms and conditions template used in this order.
 * @member {String} planningTermId
 */
Order.prototype['planningTermId'] = undefined;

/**
 * Project ID of this order.
 * @member {String} projectId
 */
Order.prototype['projectId'] = undefined;

/**
 * Seller order ID associated with this order.
 * @member {String} sellerOrderId
 */
Order.prototype['sellerOrderId'] = undefined;

/**
 * Name of the seller organization.
 * @member {String} sellerOrganizationName
 */
Order.prototype['sellerOrganizationName'] = undefined;

/**
 * Site IDs this order is associated with.
 * @member {Array.<String>} siteId
 */
Order.prototype['siteId'] = undefined;

/**
 * Free-form site names this order is associated with.
 * @member {Array.<String>} siteNames
 */
Order.prototype['siteNames'] = undefined;

/**
 * Subaccount ID of this order.
 * @member {String} subaccountId
 */
Order.prototype['subaccountId'] = undefined;

/**
 * Terms and conditions of this order.
 * @member {String} termsAndConditions
 */
Order.prototype['termsAndConditions'] = undefined;






export default Order;

