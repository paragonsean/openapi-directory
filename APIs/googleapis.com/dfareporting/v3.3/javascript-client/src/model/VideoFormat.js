/**
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Size from './Size';

/**
 * The VideoFormat model module.
 * @module model/VideoFormat
 * @version v3.3
 */
class VideoFormat {
    /**
     * Constructs a new <code>VideoFormat</code>.
     * Contains information about supported video formats.
     * @alias module:model/VideoFormat
     */
    constructor() { 
        
        VideoFormat.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>VideoFormat</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VideoFormat} obj Optional instance to populate.
     * @return {module:model/VideoFormat} The populated <code>VideoFormat</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VideoFormat();

            if (data.hasOwnProperty('fileType')) {
                obj['fileType'] = ApiClient.convertToType(data['fileType'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('resolution')) {
                obj['resolution'] = Size.constructFromObject(data['resolution']);
            }
            if (data.hasOwnProperty('targetBitRate')) {
                obj['targetBitRate'] = ApiClient.convertToType(data['targetBitRate'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>VideoFormat</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>VideoFormat</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['fileType'] && !(typeof data['fileType'] === 'string' || data['fileType'] instanceof String)) {
            throw new Error("Expected the field `fileType` to be a primitive type in the JSON string but got " + data['fileType']);
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // validate the optional field `resolution`
        if (data['resolution']) { // data not null
          Size.validateJSON(data['resolution']);
        }

        return true;
    }


}



/**
 * File type of the video format.
 * @member {module:model/VideoFormat.FileTypeEnum} fileType
 */
VideoFormat.prototype['fileType'] = undefined;

/**
 * ID of the video format.
 * @member {Number} id
 */
VideoFormat.prototype['id'] = undefined;

/**
 * Identifies what kind of resource this is. Value: the fixed string \"dfareporting#videoFormat\".
 * @member {String} kind
 */
VideoFormat.prototype['kind'] = undefined;

/**
 * @member {module:model/Size} resolution
 */
VideoFormat.prototype['resolution'] = undefined;

/**
 * The target bit rate of this video format.
 * @member {Number} targetBitRate
 */
VideoFormat.prototype['targetBitRate'] = undefined;





/**
 * Allowed values for the <code>fileType</code> property.
 * @enum {String}
 * @readonly
 */
VideoFormat['FileTypeEnum'] = {

    /**
     * value: "FLV"
     * @const
     */
    "FLV": "FLV",

    /**
     * value: "THREEGPP"
     * @const
     */
    "THREEGPP": "THREEGPP",

    /**
     * value: "MP4"
     * @const
     */
    "MP4": "MP4",

    /**
     * value: "WEBM"
     * @const
     */
    "WEBM": "WEBM",

    /**
     * value: "M3U8"
     * @const
     */
    "M3U8": "M3U8"
};



export default VideoFormat;

