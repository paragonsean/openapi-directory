/**
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CustomFloodlightVariable from './CustomFloodlightVariable';

/**
 * The Conversion model module.
 * @module model/Conversion
 * @version v3.3
 */
class Conversion {
    /**
     * Constructs a new <code>Conversion</code>.
     * A Conversion represents when a user successfully performs a desired action after seeing an ad.
     * @alias module:model/Conversion
     */
    constructor() { 
        
        Conversion.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Conversion</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Conversion} obj Optional instance to populate.
     * @return {module:model/Conversion} The populated <code>Conversion</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Conversion();

            if (data.hasOwnProperty('childDirectedTreatment')) {
                obj['childDirectedTreatment'] = ApiClient.convertToType(data['childDirectedTreatment'], 'Boolean');
            }
            if (data.hasOwnProperty('customVariables')) {
                obj['customVariables'] = ApiClient.convertToType(data['customVariables'], [CustomFloodlightVariable]);
            }
            if (data.hasOwnProperty('encryptedUserId')) {
                obj['encryptedUserId'] = ApiClient.convertToType(data['encryptedUserId'], 'String');
            }
            if (data.hasOwnProperty('encryptedUserIdCandidates')) {
                obj['encryptedUserIdCandidates'] = ApiClient.convertToType(data['encryptedUserIdCandidates'], ['String']);
            }
            if (data.hasOwnProperty('floodlightActivityId')) {
                obj['floodlightActivityId'] = ApiClient.convertToType(data['floodlightActivityId'], 'String');
            }
            if (data.hasOwnProperty('floodlightConfigurationId')) {
                obj['floodlightConfigurationId'] = ApiClient.convertToType(data['floodlightConfigurationId'], 'String');
            }
            if (data.hasOwnProperty('gclid')) {
                obj['gclid'] = ApiClient.convertToType(data['gclid'], 'String');
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('limitAdTracking')) {
                obj['limitAdTracking'] = ApiClient.convertToType(data['limitAdTracking'], 'Boolean');
            }
            if (data.hasOwnProperty('matchId')) {
                obj['matchId'] = ApiClient.convertToType(data['matchId'], 'String');
            }
            if (data.hasOwnProperty('mobileDeviceId')) {
                obj['mobileDeviceId'] = ApiClient.convertToType(data['mobileDeviceId'], 'String');
            }
            if (data.hasOwnProperty('nonPersonalizedAd')) {
                obj['nonPersonalizedAd'] = ApiClient.convertToType(data['nonPersonalizedAd'], 'Boolean');
            }
            if (data.hasOwnProperty('ordinal')) {
                obj['ordinal'] = ApiClient.convertToType(data['ordinal'], 'String');
            }
            if (data.hasOwnProperty('quantity')) {
                obj['quantity'] = ApiClient.convertToType(data['quantity'], 'String');
            }
            if (data.hasOwnProperty('timestampMicros')) {
                obj['timestampMicros'] = ApiClient.convertToType(data['timestampMicros'], 'String');
            }
            if (data.hasOwnProperty('treatmentForUnderage')) {
                obj['treatmentForUnderage'] = ApiClient.convertToType(data['treatmentForUnderage'], 'Boolean');
            }
            if (data.hasOwnProperty('value')) {
                obj['value'] = ApiClient.convertToType(data['value'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Conversion</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Conversion</code>.
     */
    static validateJSON(data) {
        if (data['customVariables']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['customVariables'])) {
                throw new Error("Expected the field `customVariables` to be an array in the JSON data but got " + data['customVariables']);
            }
            // validate the optional field `customVariables` (array)
            for (const item of data['customVariables']) {
                CustomFloodlightVariable.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['encryptedUserId'] && !(typeof data['encryptedUserId'] === 'string' || data['encryptedUserId'] instanceof String)) {
            throw new Error("Expected the field `encryptedUserId` to be a primitive type in the JSON string but got " + data['encryptedUserId']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['encryptedUserIdCandidates'])) {
            throw new Error("Expected the field `encryptedUserIdCandidates` to be an array in the JSON data but got " + data['encryptedUserIdCandidates']);
        }
        // ensure the json data is a string
        if (data['floodlightActivityId'] && !(typeof data['floodlightActivityId'] === 'string' || data['floodlightActivityId'] instanceof String)) {
            throw new Error("Expected the field `floodlightActivityId` to be a primitive type in the JSON string but got " + data['floodlightActivityId']);
        }
        // ensure the json data is a string
        if (data['floodlightConfigurationId'] && !(typeof data['floodlightConfigurationId'] === 'string' || data['floodlightConfigurationId'] instanceof String)) {
            throw new Error("Expected the field `floodlightConfigurationId` to be a primitive type in the JSON string but got " + data['floodlightConfigurationId']);
        }
        // ensure the json data is a string
        if (data['gclid'] && !(typeof data['gclid'] === 'string' || data['gclid'] instanceof String)) {
            throw new Error("Expected the field `gclid` to be a primitive type in the JSON string but got " + data['gclid']);
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // ensure the json data is a string
        if (data['matchId'] && !(typeof data['matchId'] === 'string' || data['matchId'] instanceof String)) {
            throw new Error("Expected the field `matchId` to be a primitive type in the JSON string but got " + data['matchId']);
        }
        // ensure the json data is a string
        if (data['mobileDeviceId'] && !(typeof data['mobileDeviceId'] === 'string' || data['mobileDeviceId'] instanceof String)) {
            throw new Error("Expected the field `mobileDeviceId` to be a primitive type in the JSON string but got " + data['mobileDeviceId']);
        }
        // ensure the json data is a string
        if (data['ordinal'] && !(typeof data['ordinal'] === 'string' || data['ordinal'] instanceof String)) {
            throw new Error("Expected the field `ordinal` to be a primitive type in the JSON string but got " + data['ordinal']);
        }
        // ensure the json data is a string
        if (data['quantity'] && !(typeof data['quantity'] === 'string' || data['quantity'] instanceof String)) {
            throw new Error("Expected the field `quantity` to be a primitive type in the JSON string but got " + data['quantity']);
        }
        // ensure the json data is a string
        if (data['timestampMicros'] && !(typeof data['timestampMicros'] === 'string' || data['timestampMicros'] instanceof String)) {
            throw new Error("Expected the field `timestampMicros` to be a primitive type in the JSON string but got " + data['timestampMicros']);
        }

        return true;
    }


}



/**
 * Whether this particular request may come from a user under the age of 13, under COPPA compliance.
 * @member {Boolean} childDirectedTreatment
 */
Conversion.prototype['childDirectedTreatment'] = undefined;

/**
 * Custom floodlight variables. This field may only be used when calling batchinsert; it is not supported by batchupdate.
 * @member {Array.<module:model/CustomFloodlightVariable>} customVariables
 */
Conversion.prototype['customVariables'] = undefined;

/**
 * The alphanumeric encrypted user ID. When set, encryptionInfo should also be specified. This field is mutually exclusive with encryptedUserIdCandidates[], matchId, mobileDeviceId and gclid. This or encryptedUserIdCandidates[] or matchId or mobileDeviceId or gclid is a required field.
 * @member {String} encryptedUserId
 */
Conversion.prototype['encryptedUserId'] = undefined;

/**
 * A list of the alphanumeric encrypted user IDs. Any user ID with exposure prior to the conversion timestamp will be used in the inserted conversion. If no such user ID is found then the conversion will be rejected with INVALID_ARGUMENT error. When set, encryptionInfo should also be specified. This field may only be used when calling batchinsert; it is not supported by batchupdate. This field is mutually exclusive with encryptedUserId, matchId, mobileDeviceId and gclid. This or encryptedUserId or matchId or mobileDeviceId or gclid is a required field.
 * @member {Array.<String>} encryptedUserIdCandidates
 */
Conversion.prototype['encryptedUserIdCandidates'] = undefined;

/**
 * Floodlight Activity ID of this conversion. This is a required field.
 * @member {String} floodlightActivityId
 */
Conversion.prototype['floodlightActivityId'] = undefined;

/**
 * Floodlight Configuration ID of this conversion. This is a required field.
 * @member {String} floodlightConfigurationId
 */
Conversion.prototype['floodlightConfigurationId'] = undefined;

/**
 * The Google click ID. This field is mutually exclusive with encryptedUserId, encryptedUserIdCandidates[], matchId and mobileDeviceId. This or encryptedUserId or encryptedUserIdCandidates[] or matchId or mobileDeviceId is a required field.
 * @member {String} gclid
 */
Conversion.prototype['gclid'] = undefined;

/**
 * Identifies what kind of resource this is. Value: the fixed string \"dfareporting#conversion\".
 * @member {String} kind
 */
Conversion.prototype['kind'] = undefined;

/**
 * Whether Limit Ad Tracking is enabled. When set to true, the conversion will be used for reporting but not targeting. This will prevent remarketing.
 * @member {Boolean} limitAdTracking
 */
Conversion.prototype['limitAdTracking'] = undefined;

/**
 * The match ID field. A match ID is your own first-party identifier that has been synced with Google using the match ID feature in Floodlight. This field is mutually exclusive with encryptedUserId, encryptedUserIdCandidates[],mobileDeviceId and gclid. This or encryptedUserId or encryptedUserIdCandidates[] or mobileDeviceId or gclid is a required field.
 * @member {String} matchId
 */
Conversion.prototype['matchId'] = undefined;

/**
 * The mobile device ID. This field is mutually exclusive with encryptedUserId, encryptedUserIdCandidates[], matchId and gclid. This or encryptedUserId or encryptedUserIdCandidates[] or matchId or gclid is a required field.
 * @member {String} mobileDeviceId
 */
Conversion.prototype['mobileDeviceId'] = undefined;

/**
 * Whether the conversion was for a non personalized ad.
 * @member {Boolean} nonPersonalizedAd
 */
Conversion.prototype['nonPersonalizedAd'] = undefined;

/**
 * The ordinal of the conversion. Use this field to control how conversions of the same user and day are de-duplicated. This is a required field.
 * @member {String} ordinal
 */
Conversion.prototype['ordinal'] = undefined;

/**
 * The quantity of the conversion.
 * @member {String} quantity
 */
Conversion.prototype['quantity'] = undefined;

/**
 * The timestamp of conversion, in Unix epoch micros. This is a required field.
 * @member {String} timestampMicros
 */
Conversion.prototype['timestampMicros'] = undefined;

/**
 * Whether this particular request may come from a user under the age of 16 (may differ by country), under compliance with the European Union's General Data Protection Regulation (GDPR).
 * @member {Boolean} treatmentForUnderage
 */
Conversion.prototype['treatmentForUnderage'] = undefined;

/**
 * The value of the conversion.
 * @member {Number} value
 */
Conversion.prototype['value'] = undefined;






export default Conversion;

