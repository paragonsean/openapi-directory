/**
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Flight from './Flight';

/**
 * The Pricing model module.
 * @module model/Pricing
 * @version v3.3
 */
class Pricing {
    /**
     * Constructs a new <code>Pricing</code>.
     * Pricing Information
     * @alias module:model/Pricing
     */
    constructor() { 
        
        Pricing.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Pricing</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Pricing} obj Optional instance to populate.
     * @return {module:model/Pricing} The populated <code>Pricing</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Pricing();

            if (data.hasOwnProperty('capCostType')) {
                obj['capCostType'] = ApiClient.convertToType(data['capCostType'], 'String');
            }
            if (data.hasOwnProperty('endDate')) {
                obj['endDate'] = ApiClient.convertToType(data['endDate'], 'Date');
            }
            if (data.hasOwnProperty('flights')) {
                obj['flights'] = ApiClient.convertToType(data['flights'], [Flight]);
            }
            if (data.hasOwnProperty('groupType')) {
                obj['groupType'] = ApiClient.convertToType(data['groupType'], 'String');
            }
            if (data.hasOwnProperty('pricingType')) {
                obj['pricingType'] = ApiClient.convertToType(data['pricingType'], 'String');
            }
            if (data.hasOwnProperty('startDate')) {
                obj['startDate'] = ApiClient.convertToType(data['startDate'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Pricing</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Pricing</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['capCostType'] && !(typeof data['capCostType'] === 'string' || data['capCostType'] instanceof String)) {
            throw new Error("Expected the field `capCostType` to be a primitive type in the JSON string but got " + data['capCostType']);
        }
        if (data['flights']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['flights'])) {
                throw new Error("Expected the field `flights` to be an array in the JSON data but got " + data['flights']);
            }
            // validate the optional field `flights` (array)
            for (const item of data['flights']) {
                Flight.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['groupType'] && !(typeof data['groupType'] === 'string' || data['groupType'] instanceof String)) {
            throw new Error("Expected the field `groupType` to be a primitive type in the JSON string but got " + data['groupType']);
        }
        // ensure the json data is a string
        if (data['pricingType'] && !(typeof data['pricingType'] === 'string' || data['pricingType'] instanceof String)) {
            throw new Error("Expected the field `pricingType` to be a primitive type in the JSON string but got " + data['pricingType']);
        }

        return true;
    }


}



/**
 * Cap cost type of this inventory item.
 * @member {module:model/Pricing.CapCostTypeEnum} capCostType
 */
Pricing.prototype['capCostType'] = undefined;

/**
 * @member {Date} endDate
 */
Pricing.prototype['endDate'] = undefined;

/**
 * Flights of this inventory item. A flight (a.k.a. pricing period) represents the inventory item pricing information for a specific period of time.
 * @member {Array.<module:model/Flight>} flights
 */
Pricing.prototype['flights'] = undefined;

/**
 * Group type of this inventory item if it represents a placement group. Is null otherwise. There are two type of placement groups: PLANNING_PLACEMENT_GROUP_TYPE_PACKAGE is a simple group of inventory items that acts as a single pricing point for a group of tags. PLANNING_PLACEMENT_GROUP_TYPE_ROADBLOCK is a group of inventory items that not only acts as a single pricing point, but also assumes that all the tags in it will be served at the same time. A roadblock requires one of its assigned inventory items to be marked as primary.
 * @member {module:model/Pricing.GroupTypeEnum} groupType
 */
Pricing.prototype['groupType'] = undefined;

/**
 * Pricing type of this inventory item.
 * @member {module:model/Pricing.PricingTypeEnum} pricingType
 */
Pricing.prototype['pricingType'] = undefined;

/**
 * @member {Date} startDate
 */
Pricing.prototype['startDate'] = undefined;





/**
 * Allowed values for the <code>capCostType</code> property.
 * @enum {String}
 * @readonly
 */
Pricing['CapCostTypeEnum'] = {

    /**
     * value: "PLANNING_PLACEMENT_CAP_COST_TYPE_NONE"
     * @const
     */
    "NONE": "PLANNING_PLACEMENT_CAP_COST_TYPE_NONE",

    /**
     * value: "PLANNING_PLACEMENT_CAP_COST_TYPE_MONTHLY"
     * @const
     */
    "MONTHLY": "PLANNING_PLACEMENT_CAP_COST_TYPE_MONTHLY",

    /**
     * value: "PLANNING_PLACEMENT_CAP_COST_TYPE_CUMULATIVE"
     * @const
     */
    "CUMULATIVE": "PLANNING_PLACEMENT_CAP_COST_TYPE_CUMULATIVE"
};


/**
 * Allowed values for the <code>groupType</code> property.
 * @enum {String}
 * @readonly
 */
Pricing['GroupTypeEnum'] = {

    /**
     * value: "PLANNING_PLACEMENT_GROUP_TYPE_PACKAGE"
     * @const
     */
    "PACKAGE": "PLANNING_PLACEMENT_GROUP_TYPE_PACKAGE",

    /**
     * value: "PLANNING_PLACEMENT_GROUP_TYPE_ROADBLOCK"
     * @const
     */
    "ROADBLOCK": "PLANNING_PLACEMENT_GROUP_TYPE_ROADBLOCK"
};


/**
 * Allowed values for the <code>pricingType</code> property.
 * @enum {String}
 * @readonly
 */
Pricing['PricingTypeEnum'] = {

    /**
     * value: "PLANNING_PLACEMENT_PRICING_TYPE_IMPRESSIONS"
     * @const
     */
    "IMPRESSIONS": "PLANNING_PLACEMENT_PRICING_TYPE_IMPRESSIONS",

    /**
     * value: "PLANNING_PLACEMENT_PRICING_TYPE_CPM"
     * @const
     */
    "CPM": "PLANNING_PLACEMENT_PRICING_TYPE_CPM",

    /**
     * value: "PLANNING_PLACEMENT_PRICING_TYPE_CLICKS"
     * @const
     */
    "CLICKS": "PLANNING_PLACEMENT_PRICING_TYPE_CLICKS",

    /**
     * value: "PLANNING_PLACEMENT_PRICING_TYPE_CPC"
     * @const
     */
    "CPC": "PLANNING_PLACEMENT_PRICING_TYPE_CPC",

    /**
     * value: "PLANNING_PLACEMENT_PRICING_TYPE_CPA"
     * @const
     */
    "CPA": "PLANNING_PLACEMENT_PRICING_TYPE_CPA",

    /**
     * value: "PLANNING_PLACEMENT_PRICING_TYPE_FLAT_RATE_IMPRESSIONS"
     * @const
     */
    "FLAT_RATE_IMPRESSIONS": "PLANNING_PLACEMENT_PRICING_TYPE_FLAT_RATE_IMPRESSIONS",

    /**
     * value: "PLANNING_PLACEMENT_PRICING_TYPE_FLAT_RATE_CLICKS"
     * @const
     */
    "FLAT_RATE_CLICKS": "PLANNING_PLACEMENT_PRICING_TYPE_FLAT_RATE_CLICKS",

    /**
     * value: "PLANNING_PLACEMENT_PRICING_TYPE_CPM_ACTIVEVIEW"
     * @const
     */
    "CPM_ACTIVEVIEW": "PLANNING_PLACEMENT_PRICING_TYPE_CPM_ACTIVEVIEW"
};



export default Pricing;

