/**
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CustomViewabilityMetric from './CustomViewabilityMetric';
import DimensionValue from './DimensionValue';
import LookbackConfiguration from './LookbackConfiguration';
import OmnitureSettings from './OmnitureSettings';
import TagSettings from './TagSettings';
import ThirdPartyAuthenticationToken from './ThirdPartyAuthenticationToken';
import UserDefinedVariableConfiguration from './UserDefinedVariableConfiguration';

/**
 * The FloodlightConfiguration model module.
 * @module model/FloodlightConfiguration
 * @version v3.3
 */
class FloodlightConfiguration {
    /**
     * Constructs a new <code>FloodlightConfiguration</code>.
     * Contains properties of a Floodlight configuration.
     * @alias module:model/FloodlightConfiguration
     */
    constructor() { 
        
        FloodlightConfiguration.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>FloodlightConfiguration</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FloodlightConfiguration} obj Optional instance to populate.
     * @return {module:model/FloodlightConfiguration} The populated <code>FloodlightConfiguration</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FloodlightConfiguration();

            if (data.hasOwnProperty('accountId')) {
                obj['accountId'] = ApiClient.convertToType(data['accountId'], 'String');
            }
            if (data.hasOwnProperty('advertiserId')) {
                obj['advertiserId'] = ApiClient.convertToType(data['advertiserId'], 'String');
            }
            if (data.hasOwnProperty('advertiserIdDimensionValue')) {
                obj['advertiserIdDimensionValue'] = DimensionValue.constructFromObject(data['advertiserIdDimensionValue']);
            }
            if (data.hasOwnProperty('analyticsDataSharingEnabled')) {
                obj['analyticsDataSharingEnabled'] = ApiClient.convertToType(data['analyticsDataSharingEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('customViewabilityMetric')) {
                obj['customViewabilityMetric'] = CustomViewabilityMetric.constructFromObject(data['customViewabilityMetric']);
            }
            if (data.hasOwnProperty('exposureToConversionEnabled')) {
                obj['exposureToConversionEnabled'] = ApiClient.convertToType(data['exposureToConversionEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('firstDayOfWeek')) {
                obj['firstDayOfWeek'] = ApiClient.convertToType(data['firstDayOfWeek'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('idDimensionValue')) {
                obj['idDimensionValue'] = DimensionValue.constructFromObject(data['idDimensionValue']);
            }
            if (data.hasOwnProperty('inAppAttributionTrackingEnabled')) {
                obj['inAppAttributionTrackingEnabled'] = ApiClient.convertToType(data['inAppAttributionTrackingEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('lookbackConfiguration')) {
                obj['lookbackConfiguration'] = LookbackConfiguration.constructFromObject(data['lookbackConfiguration']);
            }
            if (data.hasOwnProperty('naturalSearchConversionAttributionOption')) {
                obj['naturalSearchConversionAttributionOption'] = ApiClient.convertToType(data['naturalSearchConversionAttributionOption'], 'String');
            }
            if (data.hasOwnProperty('omnitureSettings')) {
                obj['omnitureSettings'] = OmnitureSettings.constructFromObject(data['omnitureSettings']);
            }
            if (data.hasOwnProperty('subaccountId')) {
                obj['subaccountId'] = ApiClient.convertToType(data['subaccountId'], 'String');
            }
            if (data.hasOwnProperty('tagSettings')) {
                obj['tagSettings'] = TagSettings.constructFromObject(data['tagSettings']);
            }
            if (data.hasOwnProperty('thirdPartyAuthenticationTokens')) {
                obj['thirdPartyAuthenticationTokens'] = ApiClient.convertToType(data['thirdPartyAuthenticationTokens'], [ThirdPartyAuthenticationToken]);
            }
            if (data.hasOwnProperty('userDefinedVariableConfigurations')) {
                obj['userDefinedVariableConfigurations'] = ApiClient.convertToType(data['userDefinedVariableConfigurations'], [UserDefinedVariableConfiguration]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FloodlightConfiguration</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FloodlightConfiguration</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['accountId'] && !(typeof data['accountId'] === 'string' || data['accountId'] instanceof String)) {
            throw new Error("Expected the field `accountId` to be a primitive type in the JSON string but got " + data['accountId']);
        }
        // ensure the json data is a string
        if (data['advertiserId'] && !(typeof data['advertiserId'] === 'string' || data['advertiserId'] instanceof String)) {
            throw new Error("Expected the field `advertiserId` to be a primitive type in the JSON string but got " + data['advertiserId']);
        }
        // validate the optional field `advertiserIdDimensionValue`
        if (data['advertiserIdDimensionValue']) { // data not null
          DimensionValue.validateJSON(data['advertiserIdDimensionValue']);
        }
        // validate the optional field `customViewabilityMetric`
        if (data['customViewabilityMetric']) { // data not null
          CustomViewabilityMetric.validateJSON(data['customViewabilityMetric']);
        }
        // ensure the json data is a string
        if (data['firstDayOfWeek'] && !(typeof data['firstDayOfWeek'] === 'string' || data['firstDayOfWeek'] instanceof String)) {
            throw new Error("Expected the field `firstDayOfWeek` to be a primitive type in the JSON string but got " + data['firstDayOfWeek']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // validate the optional field `idDimensionValue`
        if (data['idDimensionValue']) { // data not null
          DimensionValue.validateJSON(data['idDimensionValue']);
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // validate the optional field `lookbackConfiguration`
        if (data['lookbackConfiguration']) { // data not null
          LookbackConfiguration.validateJSON(data['lookbackConfiguration']);
        }
        // ensure the json data is a string
        if (data['naturalSearchConversionAttributionOption'] && !(typeof data['naturalSearchConversionAttributionOption'] === 'string' || data['naturalSearchConversionAttributionOption'] instanceof String)) {
            throw new Error("Expected the field `naturalSearchConversionAttributionOption` to be a primitive type in the JSON string but got " + data['naturalSearchConversionAttributionOption']);
        }
        // validate the optional field `omnitureSettings`
        if (data['omnitureSettings']) { // data not null
          OmnitureSettings.validateJSON(data['omnitureSettings']);
        }
        // ensure the json data is a string
        if (data['subaccountId'] && !(typeof data['subaccountId'] === 'string' || data['subaccountId'] instanceof String)) {
            throw new Error("Expected the field `subaccountId` to be a primitive type in the JSON string but got " + data['subaccountId']);
        }
        // validate the optional field `tagSettings`
        if (data['tagSettings']) { // data not null
          TagSettings.validateJSON(data['tagSettings']);
        }
        if (data['thirdPartyAuthenticationTokens']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['thirdPartyAuthenticationTokens'])) {
                throw new Error("Expected the field `thirdPartyAuthenticationTokens` to be an array in the JSON data but got " + data['thirdPartyAuthenticationTokens']);
            }
            // validate the optional field `thirdPartyAuthenticationTokens` (array)
            for (const item of data['thirdPartyAuthenticationTokens']) {
                ThirdPartyAuthenticationToken.validateJSON(item);
            };
        }
        if (data['userDefinedVariableConfigurations']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['userDefinedVariableConfigurations'])) {
                throw new Error("Expected the field `userDefinedVariableConfigurations` to be an array in the JSON data but got " + data['userDefinedVariableConfigurations']);
            }
            // validate the optional field `userDefinedVariableConfigurations` (array)
            for (const item of data['userDefinedVariableConfigurations']) {
                UserDefinedVariableConfiguration.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Account ID of this floodlight configuration. This is a read-only field that can be left blank.
 * @member {String} accountId
 */
FloodlightConfiguration.prototype['accountId'] = undefined;

/**
 * Advertiser ID of the parent advertiser of this floodlight configuration.
 * @member {String} advertiserId
 */
FloodlightConfiguration.prototype['advertiserId'] = undefined;

/**
 * @member {module:model/DimensionValue} advertiserIdDimensionValue
 */
FloodlightConfiguration.prototype['advertiserIdDimensionValue'] = undefined;

/**
 * Whether advertiser data is shared with Google Analytics.
 * @member {Boolean} analyticsDataSharingEnabled
 */
FloodlightConfiguration.prototype['analyticsDataSharingEnabled'] = undefined;

/**
 * @member {module:model/CustomViewabilityMetric} customViewabilityMetric
 */
FloodlightConfiguration.prototype['customViewabilityMetric'] = undefined;

/**
 * Whether the exposure-to-conversion report is enabled. This report shows detailed pathway information on up to 10 of the most recent ad exposures seen by a user before converting.
 * @member {Boolean} exposureToConversionEnabled
 */
FloodlightConfiguration.prototype['exposureToConversionEnabled'] = undefined;

/**
 * Day that will be counted as the first day of the week in reports. This is a required field.
 * @member {module:model/FloodlightConfiguration.FirstDayOfWeekEnum} firstDayOfWeek
 */
FloodlightConfiguration.prototype['firstDayOfWeek'] = undefined;

/**
 * ID of this floodlight configuration. This is a read-only, auto-generated field.
 * @member {String} id
 */
FloodlightConfiguration.prototype['id'] = undefined;

/**
 * @member {module:model/DimensionValue} idDimensionValue
 */
FloodlightConfiguration.prototype['idDimensionValue'] = undefined;

/**
 * Whether in-app attribution tracking is enabled.
 * @member {Boolean} inAppAttributionTrackingEnabled
 */
FloodlightConfiguration.prototype['inAppAttributionTrackingEnabled'] = undefined;

/**
 * Identifies what kind of resource this is. Value: the fixed string \"dfareporting#floodlightConfiguration\".
 * @member {String} kind
 */
FloodlightConfiguration.prototype['kind'] = undefined;

/**
 * @member {module:model/LookbackConfiguration} lookbackConfiguration
 */
FloodlightConfiguration.prototype['lookbackConfiguration'] = undefined;

/**
 * Types of attribution options for natural search conversions.
 * @member {module:model/FloodlightConfiguration.NaturalSearchConversionAttributionOptionEnum} naturalSearchConversionAttributionOption
 */
FloodlightConfiguration.prototype['naturalSearchConversionAttributionOption'] = undefined;

/**
 * @member {module:model/OmnitureSettings} omnitureSettings
 */
FloodlightConfiguration.prototype['omnitureSettings'] = undefined;

/**
 * Subaccount ID of this floodlight configuration. This is a read-only field that can be left blank.
 * @member {String} subaccountId
 */
FloodlightConfiguration.prototype['subaccountId'] = undefined;

/**
 * @member {module:model/TagSettings} tagSettings
 */
FloodlightConfiguration.prototype['tagSettings'] = undefined;

/**
 * List of third-party authentication tokens enabled for this configuration.
 * @member {Array.<module:model/ThirdPartyAuthenticationToken>} thirdPartyAuthenticationTokens
 */
FloodlightConfiguration.prototype['thirdPartyAuthenticationTokens'] = undefined;

/**
 * List of user defined variables enabled for this configuration.
 * @member {Array.<module:model/UserDefinedVariableConfiguration>} userDefinedVariableConfigurations
 */
FloodlightConfiguration.prototype['userDefinedVariableConfigurations'] = undefined;





/**
 * Allowed values for the <code>firstDayOfWeek</code> property.
 * @enum {String}
 * @readonly
 */
FloodlightConfiguration['FirstDayOfWeekEnum'] = {

    /**
     * value: "MONDAY"
     * @const
     */
    "MONDAY": "MONDAY",

    /**
     * value: "SUNDAY"
     * @const
     */
    "SUNDAY": "SUNDAY"
};


/**
 * Allowed values for the <code>naturalSearchConversionAttributionOption</code> property.
 * @enum {String}
 * @readonly
 */
FloodlightConfiguration['NaturalSearchConversionAttributionOptionEnum'] = {

    /**
     * value: "EXCLUDE_NATURAL_SEARCH_CONVERSION_ATTRIBUTION"
     * @const
     */
    "EXCLUDE_NATURAL_SEARCH_CONVERSION_ATTRIBUTION": "EXCLUDE_NATURAL_SEARCH_CONVERSION_ATTRIBUTION",

    /**
     * value: "INCLUDE_NATURAL_SEARCH_CONVERSION_ATTRIBUTION"
     * @const
     */
    "INCLUDE_NATURAL_SEARCH_CONVERSION_ATTRIBUTION": "INCLUDE_NATURAL_SEARCH_CONVERSION_ATTRIBUTION",

    /**
     * value: "INCLUDE_NATURAL_SEARCH_TIERED_CONVERSION_ATTRIBUTION"
     * @const
     */
    "INCLUDE_NATURAL_SEARCH_TIERED_CONVERSION_ATTRIBUTION": "INCLUDE_NATURAL_SEARCH_TIERED_CONVERSION_ATTRIBUTION"
};



export default FloodlightConfiguration;

