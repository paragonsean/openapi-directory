# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PricingSchedulePricingPeriod(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, end_date: date=None, pricing_comment: str=None, rate_or_cost_nanos: str=None, start_date: date=None, units: str=None):
        """PricingSchedulePricingPeriod - a model defined in OpenAPI

        :param end_date: The end_date of this PricingSchedulePricingPeriod.
        :param pricing_comment: The pricing_comment of this PricingSchedulePricingPeriod.
        :param rate_or_cost_nanos: The rate_or_cost_nanos of this PricingSchedulePricingPeriod.
        :param start_date: The start_date of this PricingSchedulePricingPeriod.
        :param units: The units of this PricingSchedulePricingPeriod.
        """
        self.openapi_types = {
            'end_date': date,
            'pricing_comment': str,
            'rate_or_cost_nanos': str,
            'start_date': date,
            'units': str
        }

        self.attribute_map = {
            'end_date': 'endDate',
            'pricing_comment': 'pricingComment',
            'rate_or_cost_nanos': 'rateOrCostNanos',
            'start_date': 'startDate',
            'units': 'units'
        }

        self._end_date = end_date
        self._pricing_comment = pricing_comment
        self._rate_or_cost_nanos = rate_or_cost_nanos
        self._start_date = start_date
        self._units = units

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PricingSchedulePricingPeriod':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PricingSchedulePricingPeriod of this PricingSchedulePricingPeriod.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def end_date(self):
        """Gets the end_date of this PricingSchedulePricingPeriod.


        :return: The end_date of this PricingSchedulePricingPeriod.
        :rtype: date
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this PricingSchedulePricingPeriod.


        :param end_date: The end_date of this PricingSchedulePricingPeriod.
        :type end_date: date
        """

        self._end_date = end_date

    @property
    def pricing_comment(self):
        """Gets the pricing_comment of this PricingSchedulePricingPeriod.

        Comments for this pricing period.

        :return: The pricing_comment of this PricingSchedulePricingPeriod.
        :rtype: str
        """
        return self._pricing_comment

    @pricing_comment.setter
    def pricing_comment(self, pricing_comment):
        """Sets the pricing_comment of this PricingSchedulePricingPeriod.

        Comments for this pricing period.

        :param pricing_comment: The pricing_comment of this PricingSchedulePricingPeriod.
        :type pricing_comment: str
        """

        self._pricing_comment = pricing_comment

    @property
    def rate_or_cost_nanos(self):
        """Gets the rate_or_cost_nanos of this PricingSchedulePricingPeriod.

        Rate or cost of this pricing period in nanos (i.e., multipled by 1000000000). Acceptable values are 0 to 1000000000000000000, inclusive.

        :return: The rate_or_cost_nanos of this PricingSchedulePricingPeriod.
        :rtype: str
        """
        return self._rate_or_cost_nanos

    @rate_or_cost_nanos.setter
    def rate_or_cost_nanos(self, rate_or_cost_nanos):
        """Sets the rate_or_cost_nanos of this PricingSchedulePricingPeriod.

        Rate or cost of this pricing period in nanos (i.e., multipled by 1000000000). Acceptable values are 0 to 1000000000000000000, inclusive.

        :param rate_or_cost_nanos: The rate_or_cost_nanos of this PricingSchedulePricingPeriod.
        :type rate_or_cost_nanos: str
        """

        self._rate_or_cost_nanos = rate_or_cost_nanos

    @property
    def start_date(self):
        """Gets the start_date of this PricingSchedulePricingPeriod.


        :return: The start_date of this PricingSchedulePricingPeriod.
        :rtype: date
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this PricingSchedulePricingPeriod.


        :param start_date: The start_date of this PricingSchedulePricingPeriod.
        :type start_date: date
        """

        self._start_date = start_date

    @property
    def units(self):
        """Gets the units of this PricingSchedulePricingPeriod.

        Units of this pricing period. Acceptable values are 0 to 10000000000, inclusive.

        :return: The units of this PricingSchedulePricingPeriod.
        :rtype: str
        """
        return self._units

    @units.setter
    def units(self, units):
        """Sets the units of this PricingSchedulePricingPeriod.

        Units of this pricing period. Acceptable values are 0 to 10000000000, inclusive.

        :param units: The units of this PricingSchedulePricingPeriod.
        :type units: str
        """

        self._units = units
