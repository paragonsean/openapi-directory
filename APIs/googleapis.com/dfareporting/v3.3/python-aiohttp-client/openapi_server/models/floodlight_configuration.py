# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.custom_viewability_metric import CustomViewabilityMetric
from openapi_server.models.dimension_value import DimensionValue
from openapi_server.models.lookback_configuration import LookbackConfiguration
from openapi_server.models.omniture_settings import OmnitureSettings
from openapi_server.models.tag_settings import TagSettings
from openapi_server.models.third_party_authentication_token import ThirdPartyAuthenticationToken
from openapi_server.models.user_defined_variable_configuration import UserDefinedVariableConfiguration
from openapi_server import util


class FloodlightConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_id: str=None, advertiser_id: str=None, advertiser_id_dimension_value: DimensionValue=None, analytics_data_sharing_enabled: bool=None, custom_viewability_metric: CustomViewabilityMetric=None, exposure_to_conversion_enabled: bool=None, first_day_of_week: str=None, id: str=None, id_dimension_value: DimensionValue=None, in_app_attribution_tracking_enabled: bool=None, kind: str=None, lookback_configuration: LookbackConfiguration=None, natural_search_conversion_attribution_option: str=None, omniture_settings: OmnitureSettings=None, subaccount_id: str=None, tag_settings: TagSettings=None, third_party_authentication_tokens: List[ThirdPartyAuthenticationToken]=None, user_defined_variable_configurations: List[UserDefinedVariableConfiguration]=None):
        """FloodlightConfiguration - a model defined in OpenAPI

        :param account_id: The account_id of this FloodlightConfiguration.
        :param advertiser_id: The advertiser_id of this FloodlightConfiguration.
        :param advertiser_id_dimension_value: The advertiser_id_dimension_value of this FloodlightConfiguration.
        :param analytics_data_sharing_enabled: The analytics_data_sharing_enabled of this FloodlightConfiguration.
        :param custom_viewability_metric: The custom_viewability_metric of this FloodlightConfiguration.
        :param exposure_to_conversion_enabled: The exposure_to_conversion_enabled of this FloodlightConfiguration.
        :param first_day_of_week: The first_day_of_week of this FloodlightConfiguration.
        :param id: The id of this FloodlightConfiguration.
        :param id_dimension_value: The id_dimension_value of this FloodlightConfiguration.
        :param in_app_attribution_tracking_enabled: The in_app_attribution_tracking_enabled of this FloodlightConfiguration.
        :param kind: The kind of this FloodlightConfiguration.
        :param lookback_configuration: The lookback_configuration of this FloodlightConfiguration.
        :param natural_search_conversion_attribution_option: The natural_search_conversion_attribution_option of this FloodlightConfiguration.
        :param omniture_settings: The omniture_settings of this FloodlightConfiguration.
        :param subaccount_id: The subaccount_id of this FloodlightConfiguration.
        :param tag_settings: The tag_settings of this FloodlightConfiguration.
        :param third_party_authentication_tokens: The third_party_authentication_tokens of this FloodlightConfiguration.
        :param user_defined_variable_configurations: The user_defined_variable_configurations of this FloodlightConfiguration.
        """
        self.openapi_types = {
            'account_id': str,
            'advertiser_id': str,
            'advertiser_id_dimension_value': DimensionValue,
            'analytics_data_sharing_enabled': bool,
            'custom_viewability_metric': CustomViewabilityMetric,
            'exposure_to_conversion_enabled': bool,
            'first_day_of_week': str,
            'id': str,
            'id_dimension_value': DimensionValue,
            'in_app_attribution_tracking_enabled': bool,
            'kind': str,
            'lookback_configuration': LookbackConfiguration,
            'natural_search_conversion_attribution_option': str,
            'omniture_settings': OmnitureSettings,
            'subaccount_id': str,
            'tag_settings': TagSettings,
            'third_party_authentication_tokens': List[ThirdPartyAuthenticationToken],
            'user_defined_variable_configurations': List[UserDefinedVariableConfiguration]
        }

        self.attribute_map = {
            'account_id': 'accountId',
            'advertiser_id': 'advertiserId',
            'advertiser_id_dimension_value': 'advertiserIdDimensionValue',
            'analytics_data_sharing_enabled': 'analyticsDataSharingEnabled',
            'custom_viewability_metric': 'customViewabilityMetric',
            'exposure_to_conversion_enabled': 'exposureToConversionEnabled',
            'first_day_of_week': 'firstDayOfWeek',
            'id': 'id',
            'id_dimension_value': 'idDimensionValue',
            'in_app_attribution_tracking_enabled': 'inAppAttributionTrackingEnabled',
            'kind': 'kind',
            'lookback_configuration': 'lookbackConfiguration',
            'natural_search_conversion_attribution_option': 'naturalSearchConversionAttributionOption',
            'omniture_settings': 'omnitureSettings',
            'subaccount_id': 'subaccountId',
            'tag_settings': 'tagSettings',
            'third_party_authentication_tokens': 'thirdPartyAuthenticationTokens',
            'user_defined_variable_configurations': 'userDefinedVariableConfigurations'
        }

        self._account_id = account_id
        self._advertiser_id = advertiser_id
        self._advertiser_id_dimension_value = advertiser_id_dimension_value
        self._analytics_data_sharing_enabled = analytics_data_sharing_enabled
        self._custom_viewability_metric = custom_viewability_metric
        self._exposure_to_conversion_enabled = exposure_to_conversion_enabled
        self._first_day_of_week = first_day_of_week
        self._id = id
        self._id_dimension_value = id_dimension_value
        self._in_app_attribution_tracking_enabled = in_app_attribution_tracking_enabled
        self._kind = kind
        self._lookback_configuration = lookback_configuration
        self._natural_search_conversion_attribution_option = natural_search_conversion_attribution_option
        self._omniture_settings = omniture_settings
        self._subaccount_id = subaccount_id
        self._tag_settings = tag_settings
        self._third_party_authentication_tokens = third_party_authentication_tokens
        self._user_defined_variable_configurations = user_defined_variable_configurations

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FloodlightConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FloodlightConfiguration of this FloodlightConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id(self):
        """Gets the account_id of this FloodlightConfiguration.

        Account ID of this floodlight configuration. This is a read-only field that can be left blank.

        :return: The account_id of this FloodlightConfiguration.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this FloodlightConfiguration.

        Account ID of this floodlight configuration. This is a read-only field that can be left blank.

        :param account_id: The account_id of this FloodlightConfiguration.
        :type account_id: str
        """

        self._account_id = account_id

    @property
    def advertiser_id(self):
        """Gets the advertiser_id of this FloodlightConfiguration.

        Advertiser ID of the parent advertiser of this floodlight configuration.

        :return: The advertiser_id of this FloodlightConfiguration.
        :rtype: str
        """
        return self._advertiser_id

    @advertiser_id.setter
    def advertiser_id(self, advertiser_id):
        """Sets the advertiser_id of this FloodlightConfiguration.

        Advertiser ID of the parent advertiser of this floodlight configuration.

        :param advertiser_id: The advertiser_id of this FloodlightConfiguration.
        :type advertiser_id: str
        """

        self._advertiser_id = advertiser_id

    @property
    def advertiser_id_dimension_value(self):
        """Gets the advertiser_id_dimension_value of this FloodlightConfiguration.


        :return: The advertiser_id_dimension_value of this FloodlightConfiguration.
        :rtype: DimensionValue
        """
        return self._advertiser_id_dimension_value

    @advertiser_id_dimension_value.setter
    def advertiser_id_dimension_value(self, advertiser_id_dimension_value):
        """Sets the advertiser_id_dimension_value of this FloodlightConfiguration.


        :param advertiser_id_dimension_value: The advertiser_id_dimension_value of this FloodlightConfiguration.
        :type advertiser_id_dimension_value: DimensionValue
        """

        self._advertiser_id_dimension_value = advertiser_id_dimension_value

    @property
    def analytics_data_sharing_enabled(self):
        """Gets the analytics_data_sharing_enabled of this FloodlightConfiguration.

        Whether advertiser data is shared with Google Analytics.

        :return: The analytics_data_sharing_enabled of this FloodlightConfiguration.
        :rtype: bool
        """
        return self._analytics_data_sharing_enabled

    @analytics_data_sharing_enabled.setter
    def analytics_data_sharing_enabled(self, analytics_data_sharing_enabled):
        """Sets the analytics_data_sharing_enabled of this FloodlightConfiguration.

        Whether advertiser data is shared with Google Analytics.

        :param analytics_data_sharing_enabled: The analytics_data_sharing_enabled of this FloodlightConfiguration.
        :type analytics_data_sharing_enabled: bool
        """

        self._analytics_data_sharing_enabled = analytics_data_sharing_enabled

    @property
    def custom_viewability_metric(self):
        """Gets the custom_viewability_metric of this FloodlightConfiguration.


        :return: The custom_viewability_metric of this FloodlightConfiguration.
        :rtype: CustomViewabilityMetric
        """
        return self._custom_viewability_metric

    @custom_viewability_metric.setter
    def custom_viewability_metric(self, custom_viewability_metric):
        """Sets the custom_viewability_metric of this FloodlightConfiguration.


        :param custom_viewability_metric: The custom_viewability_metric of this FloodlightConfiguration.
        :type custom_viewability_metric: CustomViewabilityMetric
        """

        self._custom_viewability_metric = custom_viewability_metric

    @property
    def exposure_to_conversion_enabled(self):
        """Gets the exposure_to_conversion_enabled of this FloodlightConfiguration.

        Whether the exposure-to-conversion report is enabled. This report shows detailed pathway information on up to 10 of the most recent ad exposures seen by a user before converting.

        :return: The exposure_to_conversion_enabled of this FloodlightConfiguration.
        :rtype: bool
        """
        return self._exposure_to_conversion_enabled

    @exposure_to_conversion_enabled.setter
    def exposure_to_conversion_enabled(self, exposure_to_conversion_enabled):
        """Sets the exposure_to_conversion_enabled of this FloodlightConfiguration.

        Whether the exposure-to-conversion report is enabled. This report shows detailed pathway information on up to 10 of the most recent ad exposures seen by a user before converting.

        :param exposure_to_conversion_enabled: The exposure_to_conversion_enabled of this FloodlightConfiguration.
        :type exposure_to_conversion_enabled: bool
        """

        self._exposure_to_conversion_enabled = exposure_to_conversion_enabled

    @property
    def first_day_of_week(self):
        """Gets the first_day_of_week of this FloodlightConfiguration.

        Day that will be counted as the first day of the week in reports. This is a required field.

        :return: The first_day_of_week of this FloodlightConfiguration.
        :rtype: str
        """
        return self._first_day_of_week

    @first_day_of_week.setter
    def first_day_of_week(self, first_day_of_week):
        """Sets the first_day_of_week of this FloodlightConfiguration.

        Day that will be counted as the first day of the week in reports. This is a required field.

        :param first_day_of_week: The first_day_of_week of this FloodlightConfiguration.
        :type first_day_of_week: str
        """
        allowed_values = ["MONDAY", "SUNDAY"]  # noqa: E501
        if first_day_of_week not in allowed_values:
            raise ValueError(
                "Invalid value for `first_day_of_week` ({0}), must be one of {1}"
                .format(first_day_of_week, allowed_values)
            )

        self._first_day_of_week = first_day_of_week

    @property
    def id(self):
        """Gets the id of this FloodlightConfiguration.

        ID of this floodlight configuration. This is a read-only, auto-generated field.

        :return: The id of this FloodlightConfiguration.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this FloodlightConfiguration.

        ID of this floodlight configuration. This is a read-only, auto-generated field.

        :param id: The id of this FloodlightConfiguration.
        :type id: str
        """

        self._id = id

    @property
    def id_dimension_value(self):
        """Gets the id_dimension_value of this FloodlightConfiguration.


        :return: The id_dimension_value of this FloodlightConfiguration.
        :rtype: DimensionValue
        """
        return self._id_dimension_value

    @id_dimension_value.setter
    def id_dimension_value(self, id_dimension_value):
        """Sets the id_dimension_value of this FloodlightConfiguration.


        :param id_dimension_value: The id_dimension_value of this FloodlightConfiguration.
        :type id_dimension_value: DimensionValue
        """

        self._id_dimension_value = id_dimension_value

    @property
    def in_app_attribution_tracking_enabled(self):
        """Gets the in_app_attribution_tracking_enabled of this FloodlightConfiguration.

        Whether in-app attribution tracking is enabled.

        :return: The in_app_attribution_tracking_enabled of this FloodlightConfiguration.
        :rtype: bool
        """
        return self._in_app_attribution_tracking_enabled

    @in_app_attribution_tracking_enabled.setter
    def in_app_attribution_tracking_enabled(self, in_app_attribution_tracking_enabled):
        """Sets the in_app_attribution_tracking_enabled of this FloodlightConfiguration.

        Whether in-app attribution tracking is enabled.

        :param in_app_attribution_tracking_enabled: The in_app_attribution_tracking_enabled of this FloodlightConfiguration.
        :type in_app_attribution_tracking_enabled: bool
        """

        self._in_app_attribution_tracking_enabled = in_app_attribution_tracking_enabled

    @property
    def kind(self):
        """Gets the kind of this FloodlightConfiguration.

        Identifies what kind of resource this is. Value: the fixed string \"dfareporting#floodlightConfiguration\".

        :return: The kind of this FloodlightConfiguration.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this FloodlightConfiguration.

        Identifies what kind of resource this is. Value: the fixed string \"dfareporting#floodlightConfiguration\".

        :param kind: The kind of this FloodlightConfiguration.
        :type kind: str
        """

        self._kind = kind

    @property
    def lookback_configuration(self):
        """Gets the lookback_configuration of this FloodlightConfiguration.


        :return: The lookback_configuration of this FloodlightConfiguration.
        :rtype: LookbackConfiguration
        """
        return self._lookback_configuration

    @lookback_configuration.setter
    def lookback_configuration(self, lookback_configuration):
        """Sets the lookback_configuration of this FloodlightConfiguration.


        :param lookback_configuration: The lookback_configuration of this FloodlightConfiguration.
        :type lookback_configuration: LookbackConfiguration
        """

        self._lookback_configuration = lookback_configuration

    @property
    def natural_search_conversion_attribution_option(self):
        """Gets the natural_search_conversion_attribution_option of this FloodlightConfiguration.

        Types of attribution options for natural search conversions.

        :return: The natural_search_conversion_attribution_option of this FloodlightConfiguration.
        :rtype: str
        """
        return self._natural_search_conversion_attribution_option

    @natural_search_conversion_attribution_option.setter
    def natural_search_conversion_attribution_option(self, natural_search_conversion_attribution_option):
        """Sets the natural_search_conversion_attribution_option of this FloodlightConfiguration.

        Types of attribution options for natural search conversions.

        :param natural_search_conversion_attribution_option: The natural_search_conversion_attribution_option of this FloodlightConfiguration.
        :type natural_search_conversion_attribution_option: str
        """
        allowed_values = ["EXCLUDE_NATURAL_SEARCH_CONVERSION_ATTRIBUTION", "INCLUDE_NATURAL_SEARCH_CONVERSION_ATTRIBUTION", "INCLUDE_NATURAL_SEARCH_TIERED_CONVERSION_ATTRIBUTION"]  # noqa: E501
        if natural_search_conversion_attribution_option not in allowed_values:
            raise ValueError(
                "Invalid value for `natural_search_conversion_attribution_option` ({0}), must be one of {1}"
                .format(natural_search_conversion_attribution_option, allowed_values)
            )

        self._natural_search_conversion_attribution_option = natural_search_conversion_attribution_option

    @property
    def omniture_settings(self):
        """Gets the omniture_settings of this FloodlightConfiguration.


        :return: The omniture_settings of this FloodlightConfiguration.
        :rtype: OmnitureSettings
        """
        return self._omniture_settings

    @omniture_settings.setter
    def omniture_settings(self, omniture_settings):
        """Sets the omniture_settings of this FloodlightConfiguration.


        :param omniture_settings: The omniture_settings of this FloodlightConfiguration.
        :type omniture_settings: OmnitureSettings
        """

        self._omniture_settings = omniture_settings

    @property
    def subaccount_id(self):
        """Gets the subaccount_id of this FloodlightConfiguration.

        Subaccount ID of this floodlight configuration. This is a read-only field that can be left blank.

        :return: The subaccount_id of this FloodlightConfiguration.
        :rtype: str
        """
        return self._subaccount_id

    @subaccount_id.setter
    def subaccount_id(self, subaccount_id):
        """Sets the subaccount_id of this FloodlightConfiguration.

        Subaccount ID of this floodlight configuration. This is a read-only field that can be left blank.

        :param subaccount_id: The subaccount_id of this FloodlightConfiguration.
        :type subaccount_id: str
        """

        self._subaccount_id = subaccount_id

    @property
    def tag_settings(self):
        """Gets the tag_settings of this FloodlightConfiguration.


        :return: The tag_settings of this FloodlightConfiguration.
        :rtype: TagSettings
        """
        return self._tag_settings

    @tag_settings.setter
    def tag_settings(self, tag_settings):
        """Sets the tag_settings of this FloodlightConfiguration.


        :param tag_settings: The tag_settings of this FloodlightConfiguration.
        :type tag_settings: TagSettings
        """

        self._tag_settings = tag_settings

    @property
    def third_party_authentication_tokens(self):
        """Gets the third_party_authentication_tokens of this FloodlightConfiguration.

        List of third-party authentication tokens enabled for this configuration.

        :return: The third_party_authentication_tokens of this FloodlightConfiguration.
        :rtype: List[ThirdPartyAuthenticationToken]
        """
        return self._third_party_authentication_tokens

    @third_party_authentication_tokens.setter
    def third_party_authentication_tokens(self, third_party_authentication_tokens):
        """Sets the third_party_authentication_tokens of this FloodlightConfiguration.

        List of third-party authentication tokens enabled for this configuration.

        :param third_party_authentication_tokens: The third_party_authentication_tokens of this FloodlightConfiguration.
        :type third_party_authentication_tokens: List[ThirdPartyAuthenticationToken]
        """

        self._third_party_authentication_tokens = third_party_authentication_tokens

    @property
    def user_defined_variable_configurations(self):
        """Gets the user_defined_variable_configurations of this FloodlightConfiguration.

        List of user defined variables enabled for this configuration.

        :return: The user_defined_variable_configurations of this FloodlightConfiguration.
        :rtype: List[UserDefinedVariableConfiguration]
        """
        return self._user_defined_variable_configurations

    @user_defined_variable_configurations.setter
    def user_defined_variable_configurations(self, user_defined_variable_configurations):
        """Sets the user_defined_variable_configurations of this FloodlightConfiguration.

        List of user defined variables enabled for this configuration.

        :param user_defined_variable_configurations: The user_defined_variable_configurations of this FloodlightConfiguration.
        :type user_defined_variable_configurations: List[UserDefinedVariableConfiguration]
        """

        self._user_defined_variable_configurations = user_defined_variable_configurations
