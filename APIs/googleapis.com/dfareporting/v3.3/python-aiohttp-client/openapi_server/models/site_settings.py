# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.tag_setting import TagSetting
from openapi_server import util


class SiteSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, active_view_opt_out: bool=None, ad_blocking_opt_out: bool=None, disable_new_cookie: bool=None, tag_setting: TagSetting=None, video_active_view_opt_out_template: bool=None, vpaid_adapter_choice_template: str=None):
        """SiteSettings - a model defined in OpenAPI

        :param active_view_opt_out: The active_view_opt_out of this SiteSettings.
        :param ad_blocking_opt_out: The ad_blocking_opt_out of this SiteSettings.
        :param disable_new_cookie: The disable_new_cookie of this SiteSettings.
        :param tag_setting: The tag_setting of this SiteSettings.
        :param video_active_view_opt_out_template: The video_active_view_opt_out_template of this SiteSettings.
        :param vpaid_adapter_choice_template: The vpaid_adapter_choice_template of this SiteSettings.
        """
        self.openapi_types = {
            'active_view_opt_out': bool,
            'ad_blocking_opt_out': bool,
            'disable_new_cookie': bool,
            'tag_setting': TagSetting,
            'video_active_view_opt_out_template': bool,
            'vpaid_adapter_choice_template': str
        }

        self.attribute_map = {
            'active_view_opt_out': 'activeViewOptOut',
            'ad_blocking_opt_out': 'adBlockingOptOut',
            'disable_new_cookie': 'disableNewCookie',
            'tag_setting': 'tagSetting',
            'video_active_view_opt_out_template': 'videoActiveViewOptOutTemplate',
            'vpaid_adapter_choice_template': 'vpaidAdapterChoiceTemplate'
        }

        self._active_view_opt_out = active_view_opt_out
        self._ad_blocking_opt_out = ad_blocking_opt_out
        self._disable_new_cookie = disable_new_cookie
        self._tag_setting = tag_setting
        self._video_active_view_opt_out_template = video_active_view_opt_out_template
        self._vpaid_adapter_choice_template = vpaid_adapter_choice_template

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SiteSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SiteSettings of this SiteSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def active_view_opt_out(self):
        """Gets the active_view_opt_out of this SiteSettings.

        Whether active view creatives are disabled for this site.

        :return: The active_view_opt_out of this SiteSettings.
        :rtype: bool
        """
        return self._active_view_opt_out

    @active_view_opt_out.setter
    def active_view_opt_out(self, active_view_opt_out):
        """Sets the active_view_opt_out of this SiteSettings.

        Whether active view creatives are disabled for this site.

        :param active_view_opt_out: The active_view_opt_out of this SiteSettings.
        :type active_view_opt_out: bool
        """

        self._active_view_opt_out = active_view_opt_out

    @property
    def ad_blocking_opt_out(self):
        """Gets the ad_blocking_opt_out of this SiteSettings.

        Whether this site opts out of ad blocking. When true, ad blocking is disabled for all placements under the site, regardless of the individual placement settings. When false, the campaign and placement settings take effect.

        :return: The ad_blocking_opt_out of this SiteSettings.
        :rtype: bool
        """
        return self._ad_blocking_opt_out

    @ad_blocking_opt_out.setter
    def ad_blocking_opt_out(self, ad_blocking_opt_out):
        """Sets the ad_blocking_opt_out of this SiteSettings.

        Whether this site opts out of ad blocking. When true, ad blocking is disabled for all placements under the site, regardless of the individual placement settings. When false, the campaign and placement settings take effect.

        :param ad_blocking_opt_out: The ad_blocking_opt_out of this SiteSettings.
        :type ad_blocking_opt_out: bool
        """

        self._ad_blocking_opt_out = ad_blocking_opt_out

    @property
    def disable_new_cookie(self):
        """Gets the disable_new_cookie of this SiteSettings.

        Whether new cookies are disabled for this site.

        :return: The disable_new_cookie of this SiteSettings.
        :rtype: bool
        """
        return self._disable_new_cookie

    @disable_new_cookie.setter
    def disable_new_cookie(self, disable_new_cookie):
        """Sets the disable_new_cookie of this SiteSettings.

        Whether new cookies are disabled for this site.

        :param disable_new_cookie: The disable_new_cookie of this SiteSettings.
        :type disable_new_cookie: bool
        """

        self._disable_new_cookie = disable_new_cookie

    @property
    def tag_setting(self):
        """Gets the tag_setting of this SiteSettings.


        :return: The tag_setting of this SiteSettings.
        :rtype: TagSetting
        """
        return self._tag_setting

    @tag_setting.setter
    def tag_setting(self, tag_setting):
        """Sets the tag_setting of this SiteSettings.


        :param tag_setting: The tag_setting of this SiteSettings.
        :type tag_setting: TagSetting
        """

        self._tag_setting = tag_setting

    @property
    def video_active_view_opt_out_template(self):
        """Gets the video_active_view_opt_out_template of this SiteSettings.

        Whether Verification and ActiveView for in-stream video creatives are disabled by default for new placements created under this site. This value will be used to populate the placement.videoActiveViewOptOut field, when no value is specified for the new placement.

        :return: The video_active_view_opt_out_template of this SiteSettings.
        :rtype: bool
        """
        return self._video_active_view_opt_out_template

    @video_active_view_opt_out_template.setter
    def video_active_view_opt_out_template(self, video_active_view_opt_out_template):
        """Sets the video_active_view_opt_out_template of this SiteSettings.

        Whether Verification and ActiveView for in-stream video creatives are disabled by default for new placements created under this site. This value will be used to populate the placement.videoActiveViewOptOut field, when no value is specified for the new placement.

        :param video_active_view_opt_out_template: The video_active_view_opt_out_template of this SiteSettings.
        :type video_active_view_opt_out_template: bool
        """

        self._video_active_view_opt_out_template = video_active_view_opt_out_template

    @property
    def vpaid_adapter_choice_template(self):
        """Gets the vpaid_adapter_choice_template of this SiteSettings.

        Default VPAID adapter setting for new placements created under this site. This value will be used to populate the placements.vpaidAdapterChoice field, when no value is specified for the new placement. Controls which VPAID format the measurement adapter will use for in-stream video creatives assigned to the placement. The publisher's specifications will typically determine this setting. For VPAID creatives, the adapter format will match the VPAID format (HTML5 VPAID creatives use the HTML5 adapter). *Note:* Flash is no longer supported. This field now defaults to HTML5 when the following values are provided: FLASH, BOTH.

        :return: The vpaid_adapter_choice_template of this SiteSettings.
        :rtype: str
        """
        return self._vpaid_adapter_choice_template

    @vpaid_adapter_choice_template.setter
    def vpaid_adapter_choice_template(self, vpaid_adapter_choice_template):
        """Sets the vpaid_adapter_choice_template of this SiteSettings.

        Default VPAID adapter setting for new placements created under this site. This value will be used to populate the placements.vpaidAdapterChoice field, when no value is specified for the new placement. Controls which VPAID format the measurement adapter will use for in-stream video creatives assigned to the placement. The publisher's specifications will typically determine this setting. For VPAID creatives, the adapter format will match the VPAID format (HTML5 VPAID creatives use the HTML5 adapter). *Note:* Flash is no longer supported. This field now defaults to HTML5 when the following values are provided: FLASH, BOTH.

        :param vpaid_adapter_choice_template: The vpaid_adapter_choice_template of this SiteSettings.
        :type vpaid_adapter_choice_template: str
        """
        allowed_values = ["DEFAULT", "FLASH", "HTML5", "BOTH"]  # noqa: E501
        if vpaid_adapter_choice_template not in allowed_values:
            raise ValueError(
                "Invalid value for `vpaid_adapter_choice_template` ({0}), must be one of {1}"
                .format(vpaid_adapter_choice_template, allowed_values)
            )

        self._vpaid_adapter_choice_template = vpaid_adapter_choice_template
