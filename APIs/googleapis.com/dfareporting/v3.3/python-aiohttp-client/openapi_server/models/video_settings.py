# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.companion_setting import CompanionSetting
from openapi_server.models.skippable_setting import SkippableSetting
from openapi_server.models.transcode_setting import TranscodeSetting
from openapi_server import util


class VideoSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, companion_settings: CompanionSetting=None, kind: str=None, orientation: str=None, skippable_settings: SkippableSetting=None, transcode_settings: TranscodeSetting=None):
        """VideoSettings - a model defined in OpenAPI

        :param companion_settings: The companion_settings of this VideoSettings.
        :param kind: The kind of this VideoSettings.
        :param orientation: The orientation of this VideoSettings.
        :param skippable_settings: The skippable_settings of this VideoSettings.
        :param transcode_settings: The transcode_settings of this VideoSettings.
        """
        self.openapi_types = {
            'companion_settings': CompanionSetting,
            'kind': str,
            'orientation': str,
            'skippable_settings': SkippableSetting,
            'transcode_settings': TranscodeSetting
        }

        self.attribute_map = {
            'companion_settings': 'companionSettings',
            'kind': 'kind',
            'orientation': 'orientation',
            'skippable_settings': 'skippableSettings',
            'transcode_settings': 'transcodeSettings'
        }

        self._companion_settings = companion_settings
        self._kind = kind
        self._orientation = orientation
        self._skippable_settings = skippable_settings
        self._transcode_settings = transcode_settings

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VideoSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VideoSettings of this VideoSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def companion_settings(self):
        """Gets the companion_settings of this VideoSettings.


        :return: The companion_settings of this VideoSettings.
        :rtype: CompanionSetting
        """
        return self._companion_settings

    @companion_settings.setter
    def companion_settings(self, companion_settings):
        """Sets the companion_settings of this VideoSettings.


        :param companion_settings: The companion_settings of this VideoSettings.
        :type companion_settings: CompanionSetting
        """

        self._companion_settings = companion_settings

    @property
    def kind(self):
        """Gets the kind of this VideoSettings.

        Identifies what kind of resource this is. Value: the fixed string \"dfareporting#videoSettings\".

        :return: The kind of this VideoSettings.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this VideoSettings.

        Identifies what kind of resource this is. Value: the fixed string \"dfareporting#videoSettings\".

        :param kind: The kind of this VideoSettings.
        :type kind: str
        """

        self._kind = kind

    @property
    def orientation(self):
        """Gets the orientation of this VideoSettings.

        Orientation of a video placement. If this value is set, placement will return assets matching the specified orientation.

        :return: The orientation of this VideoSettings.
        :rtype: str
        """
        return self._orientation

    @orientation.setter
    def orientation(self, orientation):
        """Sets the orientation of this VideoSettings.

        Orientation of a video placement. If this value is set, placement will return assets matching the specified orientation.

        :param orientation: The orientation of this VideoSettings.
        :type orientation: str
        """
        allowed_values = ["ANY", "LANDSCAPE", "PORTRAIT"]  # noqa: E501
        if orientation not in allowed_values:
            raise ValueError(
                "Invalid value for `orientation` ({0}), must be one of {1}"
                .format(orientation, allowed_values)
            )

        self._orientation = orientation

    @property
    def skippable_settings(self):
        """Gets the skippable_settings of this VideoSettings.


        :return: The skippable_settings of this VideoSettings.
        :rtype: SkippableSetting
        """
        return self._skippable_settings

    @skippable_settings.setter
    def skippable_settings(self, skippable_settings):
        """Sets the skippable_settings of this VideoSettings.


        :param skippable_settings: The skippable_settings of this VideoSettings.
        :type skippable_settings: SkippableSetting
        """

        self._skippable_settings = skippable_settings

    @property
    def transcode_settings(self):
        """Gets the transcode_settings of this VideoSettings.


        :return: The transcode_settings of this VideoSettings.
        :rtype: TranscodeSetting
        """
        return self._transcode_settings

    @transcode_settings.setter
    def transcode_settings(self, transcode_settings):
        """Sets the transcode_settings of this VideoSettings.


        :param transcode_settings: The transcode_settings of this VideoSettings.
        :type transcode_settings: TranscodeSetting
        """

        self._transcode_settings = transcode_settings
