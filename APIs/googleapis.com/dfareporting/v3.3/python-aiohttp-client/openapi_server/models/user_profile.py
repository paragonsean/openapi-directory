# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UserProfile(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_id: str=None, account_name: str=None, etag: str=None, kind: str=None, profile_id: str=None, sub_account_id: str=None, sub_account_name: str=None, user_name: str=None):
        """UserProfile - a model defined in OpenAPI

        :param account_id: The account_id of this UserProfile.
        :param account_name: The account_name of this UserProfile.
        :param etag: The etag of this UserProfile.
        :param kind: The kind of this UserProfile.
        :param profile_id: The profile_id of this UserProfile.
        :param sub_account_id: The sub_account_id of this UserProfile.
        :param sub_account_name: The sub_account_name of this UserProfile.
        :param user_name: The user_name of this UserProfile.
        """
        self.openapi_types = {
            'account_id': str,
            'account_name': str,
            'etag': str,
            'kind': str,
            'profile_id': str,
            'sub_account_id': str,
            'sub_account_name': str,
            'user_name': str
        }

        self.attribute_map = {
            'account_id': 'accountId',
            'account_name': 'accountName',
            'etag': 'etag',
            'kind': 'kind',
            'profile_id': 'profileId',
            'sub_account_id': 'subAccountId',
            'sub_account_name': 'subAccountName',
            'user_name': 'userName'
        }

        self._account_id = account_id
        self._account_name = account_name
        self._etag = etag
        self._kind = kind
        self._profile_id = profile_id
        self._sub_account_id = sub_account_id
        self._sub_account_name = sub_account_name
        self._user_name = user_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UserProfile':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UserProfile of this UserProfile.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id(self):
        """Gets the account_id of this UserProfile.

        The account ID to which this profile belongs.

        :return: The account_id of this UserProfile.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this UserProfile.

        The account ID to which this profile belongs.

        :param account_id: The account_id of this UserProfile.
        :type account_id: str
        """

        self._account_id = account_id

    @property
    def account_name(self):
        """Gets the account_name of this UserProfile.

        The account name this profile belongs to.

        :return: The account_name of this UserProfile.
        :rtype: str
        """
        return self._account_name

    @account_name.setter
    def account_name(self, account_name):
        """Sets the account_name of this UserProfile.

        The account name this profile belongs to.

        :param account_name: The account_name of this UserProfile.
        :type account_name: str
        """

        self._account_name = account_name

    @property
    def etag(self):
        """Gets the etag of this UserProfile.

        Etag of this resource.

        :return: The etag of this UserProfile.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this UserProfile.

        Etag of this resource.

        :param etag: The etag of this UserProfile.
        :type etag: str
        """

        self._etag = etag

    @property
    def kind(self):
        """Gets the kind of this UserProfile.

        Identifies what kind of resource this is. Value: the fixed string \"dfareporting#userProfile\".

        :return: The kind of this UserProfile.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this UserProfile.

        Identifies what kind of resource this is. Value: the fixed string \"dfareporting#userProfile\".

        :param kind: The kind of this UserProfile.
        :type kind: str
        """

        self._kind = kind

    @property
    def profile_id(self):
        """Gets the profile_id of this UserProfile.

        The unique ID of the user profile.

        :return: The profile_id of this UserProfile.
        :rtype: str
        """
        return self._profile_id

    @profile_id.setter
    def profile_id(self, profile_id):
        """Sets the profile_id of this UserProfile.

        The unique ID of the user profile.

        :param profile_id: The profile_id of this UserProfile.
        :type profile_id: str
        """

        self._profile_id = profile_id

    @property
    def sub_account_id(self):
        """Gets the sub_account_id of this UserProfile.

        The sub account ID this profile belongs to if applicable.

        :return: The sub_account_id of this UserProfile.
        :rtype: str
        """
        return self._sub_account_id

    @sub_account_id.setter
    def sub_account_id(self, sub_account_id):
        """Sets the sub_account_id of this UserProfile.

        The sub account ID this profile belongs to if applicable.

        :param sub_account_id: The sub_account_id of this UserProfile.
        :type sub_account_id: str
        """

        self._sub_account_id = sub_account_id

    @property
    def sub_account_name(self):
        """Gets the sub_account_name of this UserProfile.

        The sub account name this profile belongs to if applicable.

        :return: The sub_account_name of this UserProfile.
        :rtype: str
        """
        return self._sub_account_name

    @sub_account_name.setter
    def sub_account_name(self, sub_account_name):
        """Sets the sub_account_name of this UserProfile.

        The sub account name this profile belongs to if applicable.

        :param sub_account_name: The sub_account_name of this UserProfile.
        :type sub_account_name: str
        """

        self._sub_account_name = sub_account_name

    @property
    def user_name(self):
        """Gets the user_name of this UserProfile.

        The user name.

        :return: The user_name of this UserProfile.
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this UserProfile.

        The user name.

        :param user_name: The user_name of this UserProfile.
        :type user_name: str
        """

        self._user_name = user_name
