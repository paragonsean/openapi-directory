# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class FsCommand(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, left: int=None, position_option: str=None, top: int=None, window_height: int=None, window_width: int=None):
        """FsCommand - a model defined in OpenAPI

        :param left: The left of this FsCommand.
        :param position_option: The position_option of this FsCommand.
        :param top: The top of this FsCommand.
        :param window_height: The window_height of this FsCommand.
        :param window_width: The window_width of this FsCommand.
        """
        self.openapi_types = {
            'left': int,
            'position_option': str,
            'top': int,
            'window_height': int,
            'window_width': int
        }

        self.attribute_map = {
            'left': 'left',
            'position_option': 'positionOption',
            'top': 'top',
            'window_height': 'windowHeight',
            'window_width': 'windowWidth'
        }

        self._left = left
        self._position_option = position_option
        self._top = top
        self._window_height = window_height
        self._window_width = window_width

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FsCommand':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FsCommand of this FsCommand.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def left(self):
        """Gets the left of this FsCommand.

        Distance from the left of the browser.Applicable when positionOption is DISTANCE_FROM_TOP_LEFT_CORNER.

        :return: The left of this FsCommand.
        :rtype: int
        """
        return self._left

    @left.setter
    def left(self, left):
        """Sets the left of this FsCommand.

        Distance from the left of the browser.Applicable when positionOption is DISTANCE_FROM_TOP_LEFT_CORNER.

        :param left: The left of this FsCommand.
        :type left: int
        """

        self._left = left

    @property
    def position_option(self):
        """Gets the position_option of this FsCommand.

        Position in the browser where the window will open.

        :return: The position_option of this FsCommand.
        :rtype: str
        """
        return self._position_option

    @position_option.setter
    def position_option(self, position_option):
        """Sets the position_option of this FsCommand.

        Position in the browser where the window will open.

        :param position_option: The position_option of this FsCommand.
        :type position_option: str
        """
        allowed_values = ["CENTERED", "DISTANCE_FROM_TOP_LEFT_CORNER"]  # noqa: E501
        if position_option not in allowed_values:
            raise ValueError(
                "Invalid value for `position_option` ({0}), must be one of {1}"
                .format(position_option, allowed_values)
            )

        self._position_option = position_option

    @property
    def top(self):
        """Gets the top of this FsCommand.

        Distance from the top of the browser. Applicable when positionOption is DISTANCE_FROM_TOP_LEFT_CORNER.

        :return: The top of this FsCommand.
        :rtype: int
        """
        return self._top

    @top.setter
    def top(self, top):
        """Sets the top of this FsCommand.

        Distance from the top of the browser. Applicable when positionOption is DISTANCE_FROM_TOP_LEFT_CORNER.

        :param top: The top of this FsCommand.
        :type top: int
        """

        self._top = top

    @property
    def window_height(self):
        """Gets the window_height of this FsCommand.

        Height of the window.

        :return: The window_height of this FsCommand.
        :rtype: int
        """
        return self._window_height

    @window_height.setter
    def window_height(self, window_height):
        """Sets the window_height of this FsCommand.

        Height of the window.

        :param window_height: The window_height of this FsCommand.
        :type window_height: int
        """

        self._window_height = window_height

    @property
    def window_width(self):
        """Gets the window_width of this FsCommand.

        Width of the window.

        :return: The window_width of this FsCommand.
        :rtype: int
        """
        return self._window_width

    @window_width.setter
    def window_width(self, window_width):
        """Sets the window_width of this FsCommand.

        Width of the window.

        :param window_width: The window_width of this FsCommand.
        :type window_width: int
        """

        self._window_width = window_width
