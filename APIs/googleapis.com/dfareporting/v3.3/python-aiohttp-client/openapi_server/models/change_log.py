# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ChangeLog(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_id: str=None, action: str=None, change_time: datetime=None, field_name: str=None, id: str=None, kind: str=None, new_value: str=None, object_id: str=None, object_type: str=None, old_value: str=None, subaccount_id: str=None, transaction_id: str=None, user_profile_id: str=None, user_profile_name: str=None):
        """ChangeLog - a model defined in OpenAPI

        :param account_id: The account_id of this ChangeLog.
        :param action: The action of this ChangeLog.
        :param change_time: The change_time of this ChangeLog.
        :param field_name: The field_name of this ChangeLog.
        :param id: The id of this ChangeLog.
        :param kind: The kind of this ChangeLog.
        :param new_value: The new_value of this ChangeLog.
        :param object_id: The object_id of this ChangeLog.
        :param object_type: The object_type of this ChangeLog.
        :param old_value: The old_value of this ChangeLog.
        :param subaccount_id: The subaccount_id of this ChangeLog.
        :param transaction_id: The transaction_id of this ChangeLog.
        :param user_profile_id: The user_profile_id of this ChangeLog.
        :param user_profile_name: The user_profile_name of this ChangeLog.
        """
        self.openapi_types = {
            'account_id': str,
            'action': str,
            'change_time': datetime,
            'field_name': str,
            'id': str,
            'kind': str,
            'new_value': str,
            'object_id': str,
            'object_type': str,
            'old_value': str,
            'subaccount_id': str,
            'transaction_id': str,
            'user_profile_id': str,
            'user_profile_name': str
        }

        self.attribute_map = {
            'account_id': 'accountId',
            'action': 'action',
            'change_time': 'changeTime',
            'field_name': 'fieldName',
            'id': 'id',
            'kind': 'kind',
            'new_value': 'newValue',
            'object_id': 'objectId',
            'object_type': 'objectType',
            'old_value': 'oldValue',
            'subaccount_id': 'subaccountId',
            'transaction_id': 'transactionId',
            'user_profile_id': 'userProfileId',
            'user_profile_name': 'userProfileName'
        }

        self._account_id = account_id
        self._action = action
        self._change_time = change_time
        self._field_name = field_name
        self._id = id
        self._kind = kind
        self._new_value = new_value
        self._object_id = object_id
        self._object_type = object_type
        self._old_value = old_value
        self._subaccount_id = subaccount_id
        self._transaction_id = transaction_id
        self._user_profile_id = user_profile_id
        self._user_profile_name = user_profile_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ChangeLog':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ChangeLog of this ChangeLog.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id(self):
        """Gets the account_id of this ChangeLog.

        Account ID of the modified object.

        :return: The account_id of this ChangeLog.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this ChangeLog.

        Account ID of the modified object.

        :param account_id: The account_id of this ChangeLog.
        :type account_id: str
        """

        self._account_id = account_id

    @property
    def action(self):
        """Gets the action of this ChangeLog.

        Action which caused the change.

        :return: The action of this ChangeLog.
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this ChangeLog.

        Action which caused the change.

        :param action: The action of this ChangeLog.
        :type action: str
        """

        self._action = action

    @property
    def change_time(self):
        """Gets the change_time of this ChangeLog.


        :return: The change_time of this ChangeLog.
        :rtype: datetime
        """
        return self._change_time

    @change_time.setter
    def change_time(self, change_time):
        """Sets the change_time of this ChangeLog.


        :param change_time: The change_time of this ChangeLog.
        :type change_time: datetime
        """

        self._change_time = change_time

    @property
    def field_name(self):
        """Gets the field_name of this ChangeLog.

        Field name of the object which changed.

        :return: The field_name of this ChangeLog.
        :rtype: str
        """
        return self._field_name

    @field_name.setter
    def field_name(self, field_name):
        """Sets the field_name of this ChangeLog.

        Field name of the object which changed.

        :param field_name: The field_name of this ChangeLog.
        :type field_name: str
        """

        self._field_name = field_name

    @property
    def id(self):
        """Gets the id of this ChangeLog.

        ID of this change log.

        :return: The id of this ChangeLog.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ChangeLog.

        ID of this change log.

        :param id: The id of this ChangeLog.
        :type id: str
        """

        self._id = id

    @property
    def kind(self):
        """Gets the kind of this ChangeLog.

        Identifies what kind of resource this is. Value: the fixed string \"dfareporting#changeLog\".

        :return: The kind of this ChangeLog.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this ChangeLog.

        Identifies what kind of resource this is. Value: the fixed string \"dfareporting#changeLog\".

        :param kind: The kind of this ChangeLog.
        :type kind: str
        """

        self._kind = kind

    @property
    def new_value(self):
        """Gets the new_value of this ChangeLog.

        New value of the object field.

        :return: The new_value of this ChangeLog.
        :rtype: str
        """
        return self._new_value

    @new_value.setter
    def new_value(self, new_value):
        """Sets the new_value of this ChangeLog.

        New value of the object field.

        :param new_value: The new_value of this ChangeLog.
        :type new_value: str
        """

        self._new_value = new_value

    @property
    def object_id(self):
        """Gets the object_id of this ChangeLog.

        ID of the object of this change log. The object could be a campaign, placement, ad, or other type.

        :return: The object_id of this ChangeLog.
        :rtype: str
        """
        return self._object_id

    @object_id.setter
    def object_id(self, object_id):
        """Sets the object_id of this ChangeLog.

        ID of the object of this change log. The object could be a campaign, placement, ad, or other type.

        :param object_id: The object_id of this ChangeLog.
        :type object_id: str
        """

        self._object_id = object_id

    @property
    def object_type(self):
        """Gets the object_type of this ChangeLog.

        Object type of the change log.

        :return: The object_type of this ChangeLog.
        :rtype: str
        """
        return self._object_type

    @object_type.setter
    def object_type(self, object_type):
        """Sets the object_type of this ChangeLog.

        Object type of the change log.

        :param object_type: The object_type of this ChangeLog.
        :type object_type: str
        """

        self._object_type = object_type

    @property
    def old_value(self):
        """Gets the old_value of this ChangeLog.

        Old value of the object field.

        :return: The old_value of this ChangeLog.
        :rtype: str
        """
        return self._old_value

    @old_value.setter
    def old_value(self, old_value):
        """Sets the old_value of this ChangeLog.

        Old value of the object field.

        :param old_value: The old_value of this ChangeLog.
        :type old_value: str
        """

        self._old_value = old_value

    @property
    def subaccount_id(self):
        """Gets the subaccount_id of this ChangeLog.

        Subaccount ID of the modified object.

        :return: The subaccount_id of this ChangeLog.
        :rtype: str
        """
        return self._subaccount_id

    @subaccount_id.setter
    def subaccount_id(self, subaccount_id):
        """Sets the subaccount_id of this ChangeLog.

        Subaccount ID of the modified object.

        :param subaccount_id: The subaccount_id of this ChangeLog.
        :type subaccount_id: str
        """

        self._subaccount_id = subaccount_id

    @property
    def transaction_id(self):
        """Gets the transaction_id of this ChangeLog.

        Transaction ID of this change log. When a single API call results in many changes, each change will have a separate ID in the change log but will share the same transactionId.

        :return: The transaction_id of this ChangeLog.
        :rtype: str
        """
        return self._transaction_id

    @transaction_id.setter
    def transaction_id(self, transaction_id):
        """Sets the transaction_id of this ChangeLog.

        Transaction ID of this change log. When a single API call results in many changes, each change will have a separate ID in the change log but will share the same transactionId.

        :param transaction_id: The transaction_id of this ChangeLog.
        :type transaction_id: str
        """

        self._transaction_id = transaction_id

    @property
    def user_profile_id(self):
        """Gets the user_profile_id of this ChangeLog.

        ID of the user who modified the object.

        :return: The user_profile_id of this ChangeLog.
        :rtype: str
        """
        return self._user_profile_id

    @user_profile_id.setter
    def user_profile_id(self, user_profile_id):
        """Sets the user_profile_id of this ChangeLog.

        ID of the user who modified the object.

        :param user_profile_id: The user_profile_id of this ChangeLog.
        :type user_profile_id: str
        """

        self._user_profile_id = user_profile_id

    @property
    def user_profile_name(self):
        """Gets the user_profile_name of this ChangeLog.

        User profile name of the user who modified the object.

        :return: The user_profile_name of this ChangeLog.
        :rtype: str
        """
        return self._user_profile_name

    @user_profile_name.setter
    def user_profile_name(self, user_profile_name):
        """Sets the user_profile_name of this ChangeLog.

        User profile name of the user who modified the object.

        :param user_profile_name: The user_profile_name of this ChangeLog.
        :type user_profile_name: str
        """

        self._user_profile_name = user_profile_name
