# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.city import City
from openapi_server.models.country import Country
from openapi_server.models.metro import Metro
from openapi_server.models.postal_code import PostalCode
from openapi_server.models.region import Region
from openapi_server import util


class GeoTargeting(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cities: List[City]=None, countries: List[Country]=None, exclude_countries: bool=None, metros: List[Metro]=None, postal_codes: List[PostalCode]=None, regions: List[Region]=None):
        """GeoTargeting - a model defined in OpenAPI

        :param cities: The cities of this GeoTargeting.
        :param countries: The countries of this GeoTargeting.
        :param exclude_countries: The exclude_countries of this GeoTargeting.
        :param metros: The metros of this GeoTargeting.
        :param postal_codes: The postal_codes of this GeoTargeting.
        :param regions: The regions of this GeoTargeting.
        """
        self.openapi_types = {
            'cities': List[City],
            'countries': List[Country],
            'exclude_countries': bool,
            'metros': List[Metro],
            'postal_codes': List[PostalCode],
            'regions': List[Region]
        }

        self.attribute_map = {
            'cities': 'cities',
            'countries': 'countries',
            'exclude_countries': 'excludeCountries',
            'metros': 'metros',
            'postal_codes': 'postalCodes',
            'regions': 'regions'
        }

        self._cities = cities
        self._countries = countries
        self._exclude_countries = exclude_countries
        self._metros = metros
        self._postal_codes = postal_codes
        self._regions = regions

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GeoTargeting':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GeoTargeting of this GeoTargeting.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cities(self):
        """Gets the cities of this GeoTargeting.

        Cities to be targeted. For each city only dartId is required. The other fields are populated automatically when the ad is inserted or updated. If targeting a city, do not target or exclude the country of the city, and do not target the metro or region of the city.

        :return: The cities of this GeoTargeting.
        :rtype: List[City]
        """
        return self._cities

    @cities.setter
    def cities(self, cities):
        """Sets the cities of this GeoTargeting.

        Cities to be targeted. For each city only dartId is required. The other fields are populated automatically when the ad is inserted or updated. If targeting a city, do not target or exclude the country of the city, and do not target the metro or region of the city.

        :param cities: The cities of this GeoTargeting.
        :type cities: List[City]
        """

        self._cities = cities

    @property
    def countries(self):
        """Gets the countries of this GeoTargeting.

        Countries to be targeted or excluded from targeting, depending on the setting of the excludeCountries field. For each country only dartId is required. The other fields are populated automatically when the ad is inserted or updated. If targeting or excluding a country, do not target regions, cities, metros, or postal codes in the same country.

        :return: The countries of this GeoTargeting.
        :rtype: List[Country]
        """
        return self._countries

    @countries.setter
    def countries(self, countries):
        """Sets the countries of this GeoTargeting.

        Countries to be targeted or excluded from targeting, depending on the setting of the excludeCountries field. For each country only dartId is required. The other fields are populated automatically when the ad is inserted or updated. If targeting or excluding a country, do not target regions, cities, metros, or postal codes in the same country.

        :param countries: The countries of this GeoTargeting.
        :type countries: List[Country]
        """

        self._countries = countries

    @property
    def exclude_countries(self):
        """Gets the exclude_countries of this GeoTargeting.

        Whether or not to exclude the countries in the countries field from targeting. If false, the countries field refers to countries which will be targeted by the ad.

        :return: The exclude_countries of this GeoTargeting.
        :rtype: bool
        """
        return self._exclude_countries

    @exclude_countries.setter
    def exclude_countries(self, exclude_countries):
        """Sets the exclude_countries of this GeoTargeting.

        Whether or not to exclude the countries in the countries field from targeting. If false, the countries field refers to countries which will be targeted by the ad.

        :param exclude_countries: The exclude_countries of this GeoTargeting.
        :type exclude_countries: bool
        """

        self._exclude_countries = exclude_countries

    @property
    def metros(self):
        """Gets the metros of this GeoTargeting.

        Metros to be targeted. For each metro only dmaId is required. The other fields are populated automatically when the ad is inserted or updated. If targeting a metro, do not target or exclude the country of the metro.

        :return: The metros of this GeoTargeting.
        :rtype: List[Metro]
        """
        return self._metros

    @metros.setter
    def metros(self, metros):
        """Sets the metros of this GeoTargeting.

        Metros to be targeted. For each metro only dmaId is required. The other fields are populated automatically when the ad is inserted or updated. If targeting a metro, do not target or exclude the country of the metro.

        :param metros: The metros of this GeoTargeting.
        :type metros: List[Metro]
        """

        self._metros = metros

    @property
    def postal_codes(self):
        """Gets the postal_codes of this GeoTargeting.

        Postal codes to be targeted. For each postal code only id is required. The other fields are populated automatically when the ad is inserted or updated. If targeting a postal code, do not target or exclude the country of the postal code.

        :return: The postal_codes of this GeoTargeting.
        :rtype: List[PostalCode]
        """
        return self._postal_codes

    @postal_codes.setter
    def postal_codes(self, postal_codes):
        """Sets the postal_codes of this GeoTargeting.

        Postal codes to be targeted. For each postal code only id is required. The other fields are populated automatically when the ad is inserted or updated. If targeting a postal code, do not target or exclude the country of the postal code.

        :param postal_codes: The postal_codes of this GeoTargeting.
        :type postal_codes: List[PostalCode]
        """

        self._postal_codes = postal_codes

    @property
    def regions(self):
        """Gets the regions of this GeoTargeting.

        Regions to be targeted. For each region only dartId is required. The other fields are populated automatically when the ad is inserted or updated. If targeting a region, do not target or exclude the country of the region.

        :return: The regions of this GeoTargeting.
        :rtype: List[Region]
        """
        return self._regions

    @regions.setter
    def regions(self, regions):
        """Sets the regions of this GeoTargeting.

        Regions to be targeted. For each region only dartId is required. The other fields are populated automatically when the ad is inserted or updated. If targeting a region, do not target or exclude the country of the region.

        :param regions: The regions of this GeoTargeting.
        :type regions: List[Region]
        """

        self._regions = regions
