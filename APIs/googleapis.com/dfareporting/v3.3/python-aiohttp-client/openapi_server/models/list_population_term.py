# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ListPopulationTerm(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, contains: bool=None, negation: bool=None, operator: str=None, remarketing_list_id: str=None, type: str=None, value: str=None, variable_friendly_name: str=None, variable_name: str=None):
        """ListPopulationTerm - a model defined in OpenAPI

        :param contains: The contains of this ListPopulationTerm.
        :param negation: The negation of this ListPopulationTerm.
        :param operator: The operator of this ListPopulationTerm.
        :param remarketing_list_id: The remarketing_list_id of this ListPopulationTerm.
        :param type: The type of this ListPopulationTerm.
        :param value: The value of this ListPopulationTerm.
        :param variable_friendly_name: The variable_friendly_name of this ListPopulationTerm.
        :param variable_name: The variable_name of this ListPopulationTerm.
        """
        self.openapi_types = {
            'contains': bool,
            'negation': bool,
            'operator': str,
            'remarketing_list_id': str,
            'type': str,
            'value': str,
            'variable_friendly_name': str,
            'variable_name': str
        }

        self.attribute_map = {
            'contains': 'contains',
            'negation': 'negation',
            'operator': 'operator',
            'remarketing_list_id': 'remarketingListId',
            'type': 'type',
            'value': 'value',
            'variable_friendly_name': 'variableFriendlyName',
            'variable_name': 'variableName'
        }

        self._contains = contains
        self._negation = negation
        self._operator = operator
        self._remarketing_list_id = remarketing_list_id
        self._type = type
        self._value = value
        self._variable_friendly_name = variable_friendly_name
        self._variable_name = variable_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListPopulationTerm':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ListPopulationTerm of this ListPopulationTerm.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def contains(self):
        """Gets the contains of this ListPopulationTerm.

        Will be true if the term should check if the user is in the list and false if the term should check if the user is not in the list. This field is only relevant when type is set to LIST_MEMBERSHIP_TERM. False by default.

        :return: The contains of this ListPopulationTerm.
        :rtype: bool
        """
        return self._contains

    @contains.setter
    def contains(self, contains):
        """Sets the contains of this ListPopulationTerm.

        Will be true if the term should check if the user is in the list and false if the term should check if the user is not in the list. This field is only relevant when type is set to LIST_MEMBERSHIP_TERM. False by default.

        :param contains: The contains of this ListPopulationTerm.
        :type contains: bool
        """

        self._contains = contains

    @property
    def negation(self):
        """Gets the negation of this ListPopulationTerm.

        Whether to negate the comparison result of this term during rule evaluation. This field is only relevant when type is left unset or set to CUSTOM_VARIABLE_TERM or REFERRER_TERM.

        :return: The negation of this ListPopulationTerm.
        :rtype: bool
        """
        return self._negation

    @negation.setter
    def negation(self, negation):
        """Sets the negation of this ListPopulationTerm.

        Whether to negate the comparison result of this term during rule evaluation. This field is only relevant when type is left unset or set to CUSTOM_VARIABLE_TERM or REFERRER_TERM.

        :param negation: The negation of this ListPopulationTerm.
        :type negation: bool
        """

        self._negation = negation

    @property
    def operator(self):
        """Gets the operator of this ListPopulationTerm.

        Comparison operator of this term. This field is only relevant when type is left unset or set to CUSTOM_VARIABLE_TERM or REFERRER_TERM.

        :return: The operator of this ListPopulationTerm.
        :rtype: str
        """
        return self._operator

    @operator.setter
    def operator(self, operator):
        """Sets the operator of this ListPopulationTerm.

        Comparison operator of this term. This field is only relevant when type is left unset or set to CUSTOM_VARIABLE_TERM or REFERRER_TERM.

        :param operator: The operator of this ListPopulationTerm.
        :type operator: str
        """
        allowed_values = ["NUM_EQUALS", "NUM_LESS_THAN", "NUM_LESS_THAN_EQUAL", "NUM_GREATER_THAN", "NUM_GREATER_THAN_EQUAL", "STRING_EQUALS", "STRING_CONTAINS"]  # noqa: E501
        if operator not in allowed_values:
            raise ValueError(
                "Invalid value for `operator` ({0}), must be one of {1}"
                .format(operator, allowed_values)
            )

        self._operator = operator

    @property
    def remarketing_list_id(self):
        """Gets the remarketing_list_id of this ListPopulationTerm.

        ID of the list in question. This field is only relevant when type is set to LIST_MEMBERSHIP_TERM.

        :return: The remarketing_list_id of this ListPopulationTerm.
        :rtype: str
        """
        return self._remarketing_list_id

    @remarketing_list_id.setter
    def remarketing_list_id(self, remarketing_list_id):
        """Sets the remarketing_list_id of this ListPopulationTerm.

        ID of the list in question. This field is only relevant when type is set to LIST_MEMBERSHIP_TERM.

        :param remarketing_list_id: The remarketing_list_id of this ListPopulationTerm.
        :type remarketing_list_id: str
        """

        self._remarketing_list_id = remarketing_list_id

    @property
    def type(self):
        """Gets the type of this ListPopulationTerm.

        List population term type determines the applicable fields in this object. If left unset or set to CUSTOM_VARIABLE_TERM, then variableName, variableFriendlyName, operator, value, and negation are applicable. If set to LIST_MEMBERSHIP_TERM then remarketingListId and contains are applicable. If set to REFERRER_TERM then operator, value, and negation are applicable.

        :return: The type of this ListPopulationTerm.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ListPopulationTerm.

        List population term type determines the applicable fields in this object. If left unset or set to CUSTOM_VARIABLE_TERM, then variableName, variableFriendlyName, operator, value, and negation are applicable. If set to LIST_MEMBERSHIP_TERM then remarketingListId and contains are applicable. If set to REFERRER_TERM then operator, value, and negation are applicable.

        :param type: The type of this ListPopulationTerm.
        :type type: str
        """
        allowed_values = ["CUSTOM_VARIABLE_TERM", "LIST_MEMBERSHIP_TERM", "REFERRER_TERM"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def value(self):
        """Gets the value of this ListPopulationTerm.

        Literal to compare the variable to. This field is only relevant when type is left unset or set to CUSTOM_VARIABLE_TERM or REFERRER_TERM.

        :return: The value of this ListPopulationTerm.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this ListPopulationTerm.

        Literal to compare the variable to. This field is only relevant when type is left unset or set to CUSTOM_VARIABLE_TERM or REFERRER_TERM.

        :param value: The value of this ListPopulationTerm.
        :type value: str
        """

        self._value = value

    @property
    def variable_friendly_name(self):
        """Gets the variable_friendly_name of this ListPopulationTerm.

        Friendly name of this term's variable. This is a read-only, auto-generated field. This field is only relevant when type is left unset or set to CUSTOM_VARIABLE_TERM.

        :return: The variable_friendly_name of this ListPopulationTerm.
        :rtype: str
        """
        return self._variable_friendly_name

    @variable_friendly_name.setter
    def variable_friendly_name(self, variable_friendly_name):
        """Sets the variable_friendly_name of this ListPopulationTerm.

        Friendly name of this term's variable. This is a read-only, auto-generated field. This field is only relevant when type is left unset or set to CUSTOM_VARIABLE_TERM.

        :param variable_friendly_name: The variable_friendly_name of this ListPopulationTerm.
        :type variable_friendly_name: str
        """

        self._variable_friendly_name = variable_friendly_name

    @property
    def variable_name(self):
        """Gets the variable_name of this ListPopulationTerm.

        Name of the variable (U1, U2, etc.) being compared in this term. This field is only relevant when type is set to null, CUSTOM_VARIABLE_TERM or REFERRER_TERM.

        :return: The variable_name of this ListPopulationTerm.
        :rtype: str
        """
        return self._variable_name

    @variable_name.setter
    def variable_name(self, variable_name):
        """Sets the variable_name of this ListPopulationTerm.

        Name of the variable (U1, U2, etc.) being compared in this term. This field is only relevant when type is set to null, CUSTOM_VARIABLE_TERM or REFERRER_TERM.

        :param variable_name: The variable_name of this ListPopulationTerm.
        :type variable_name: str
        """

        self._variable_name = variable_name
