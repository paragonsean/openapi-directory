# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.creative_asset_id import CreativeAssetId
from openapi_server.models.creative_custom_event import CreativeCustomEvent
from openapi_server.models.dimension_value import DimensionValue
from openapi_server.models.offset_position import OffsetPosition
from openapi_server.models.size import Size
from openapi_server import util


class CreativeAsset(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action_script3: bool=None, active: bool=None, additional_sizes: List[Size]=None, alignment: str=None, artwork_type: str=None, asset_identifier: CreativeAssetId=None, audio_bit_rate: int=None, audio_sample_rate: int=None, backup_image_exit: CreativeCustomEvent=None, bit_rate: int=None, child_asset_type: str=None, collapsed_size: Size=None, companion_creative_ids: List[str]=None, custom_start_time_value: int=None, detected_features: List[str]=None, display_type: str=None, duration: int=None, duration_type: str=None, expanded_dimension: Size=None, file_size: str=None, flash_version: int=None, frame_rate: float=None, hide_flash_objects: bool=None, hide_selection_boxes: bool=None, horizontally_locked: bool=None, id: str=None, id_dimension_value: DimensionValue=None, media_duration: float=None, mime_type: str=None, offset: OffsetPosition=None, orientation: str=None, original_backup: bool=None, polite_load: bool=None, position: OffsetPosition=None, position_left_unit: str=None, position_top_unit: str=None, progressive_serving_url: str=None, pushdown: bool=None, pushdown_duration: float=None, role: str=None, size: Size=None, ssl_compliant: bool=None, start_time_type: str=None, streaming_serving_url: str=None, transparency: bool=None, vertically_locked: bool=None, window_mode: str=None, z_index: int=None, zip_filename: str=None, zip_filesize: str=None):
        """CreativeAsset - a model defined in OpenAPI

        :param action_script3: The action_script3 of this CreativeAsset.
        :param active: The active of this CreativeAsset.
        :param additional_sizes: The additional_sizes of this CreativeAsset.
        :param alignment: The alignment of this CreativeAsset.
        :param artwork_type: The artwork_type of this CreativeAsset.
        :param asset_identifier: The asset_identifier of this CreativeAsset.
        :param audio_bit_rate: The audio_bit_rate of this CreativeAsset.
        :param audio_sample_rate: The audio_sample_rate of this CreativeAsset.
        :param backup_image_exit: The backup_image_exit of this CreativeAsset.
        :param bit_rate: The bit_rate of this CreativeAsset.
        :param child_asset_type: The child_asset_type of this CreativeAsset.
        :param collapsed_size: The collapsed_size of this CreativeAsset.
        :param companion_creative_ids: The companion_creative_ids of this CreativeAsset.
        :param custom_start_time_value: The custom_start_time_value of this CreativeAsset.
        :param detected_features: The detected_features of this CreativeAsset.
        :param display_type: The display_type of this CreativeAsset.
        :param duration: The duration of this CreativeAsset.
        :param duration_type: The duration_type of this CreativeAsset.
        :param expanded_dimension: The expanded_dimension of this CreativeAsset.
        :param file_size: The file_size of this CreativeAsset.
        :param flash_version: The flash_version of this CreativeAsset.
        :param frame_rate: The frame_rate of this CreativeAsset.
        :param hide_flash_objects: The hide_flash_objects of this CreativeAsset.
        :param hide_selection_boxes: The hide_selection_boxes of this CreativeAsset.
        :param horizontally_locked: The horizontally_locked of this CreativeAsset.
        :param id: The id of this CreativeAsset.
        :param id_dimension_value: The id_dimension_value of this CreativeAsset.
        :param media_duration: The media_duration of this CreativeAsset.
        :param mime_type: The mime_type of this CreativeAsset.
        :param offset: The offset of this CreativeAsset.
        :param orientation: The orientation of this CreativeAsset.
        :param original_backup: The original_backup of this CreativeAsset.
        :param polite_load: The polite_load of this CreativeAsset.
        :param position: The position of this CreativeAsset.
        :param position_left_unit: The position_left_unit of this CreativeAsset.
        :param position_top_unit: The position_top_unit of this CreativeAsset.
        :param progressive_serving_url: The progressive_serving_url of this CreativeAsset.
        :param pushdown: The pushdown of this CreativeAsset.
        :param pushdown_duration: The pushdown_duration of this CreativeAsset.
        :param role: The role of this CreativeAsset.
        :param size: The size of this CreativeAsset.
        :param ssl_compliant: The ssl_compliant of this CreativeAsset.
        :param start_time_type: The start_time_type of this CreativeAsset.
        :param streaming_serving_url: The streaming_serving_url of this CreativeAsset.
        :param transparency: The transparency of this CreativeAsset.
        :param vertically_locked: The vertically_locked of this CreativeAsset.
        :param window_mode: The window_mode of this CreativeAsset.
        :param z_index: The z_index of this CreativeAsset.
        :param zip_filename: The zip_filename of this CreativeAsset.
        :param zip_filesize: The zip_filesize of this CreativeAsset.
        """
        self.openapi_types = {
            'action_script3': bool,
            'active': bool,
            'additional_sizes': List[Size],
            'alignment': str,
            'artwork_type': str,
            'asset_identifier': CreativeAssetId,
            'audio_bit_rate': int,
            'audio_sample_rate': int,
            'backup_image_exit': CreativeCustomEvent,
            'bit_rate': int,
            'child_asset_type': str,
            'collapsed_size': Size,
            'companion_creative_ids': List[str],
            'custom_start_time_value': int,
            'detected_features': List[str],
            'display_type': str,
            'duration': int,
            'duration_type': str,
            'expanded_dimension': Size,
            'file_size': str,
            'flash_version': int,
            'frame_rate': float,
            'hide_flash_objects': bool,
            'hide_selection_boxes': bool,
            'horizontally_locked': bool,
            'id': str,
            'id_dimension_value': DimensionValue,
            'media_duration': float,
            'mime_type': str,
            'offset': OffsetPosition,
            'orientation': str,
            'original_backup': bool,
            'polite_load': bool,
            'position': OffsetPosition,
            'position_left_unit': str,
            'position_top_unit': str,
            'progressive_serving_url': str,
            'pushdown': bool,
            'pushdown_duration': float,
            'role': str,
            'size': Size,
            'ssl_compliant': bool,
            'start_time_type': str,
            'streaming_serving_url': str,
            'transparency': bool,
            'vertically_locked': bool,
            'window_mode': str,
            'z_index': int,
            'zip_filename': str,
            'zip_filesize': str
        }

        self.attribute_map = {
            'action_script3': 'actionScript3',
            'active': 'active',
            'additional_sizes': 'additionalSizes',
            'alignment': 'alignment',
            'artwork_type': 'artworkType',
            'asset_identifier': 'assetIdentifier',
            'audio_bit_rate': 'audioBitRate',
            'audio_sample_rate': 'audioSampleRate',
            'backup_image_exit': 'backupImageExit',
            'bit_rate': 'bitRate',
            'child_asset_type': 'childAssetType',
            'collapsed_size': 'collapsedSize',
            'companion_creative_ids': 'companionCreativeIds',
            'custom_start_time_value': 'customStartTimeValue',
            'detected_features': 'detectedFeatures',
            'display_type': 'displayType',
            'duration': 'duration',
            'duration_type': 'durationType',
            'expanded_dimension': 'expandedDimension',
            'file_size': 'fileSize',
            'flash_version': 'flashVersion',
            'frame_rate': 'frameRate',
            'hide_flash_objects': 'hideFlashObjects',
            'hide_selection_boxes': 'hideSelectionBoxes',
            'horizontally_locked': 'horizontallyLocked',
            'id': 'id',
            'id_dimension_value': 'idDimensionValue',
            'media_duration': 'mediaDuration',
            'mime_type': 'mimeType',
            'offset': 'offset',
            'orientation': 'orientation',
            'original_backup': 'originalBackup',
            'polite_load': 'politeLoad',
            'position': 'position',
            'position_left_unit': 'positionLeftUnit',
            'position_top_unit': 'positionTopUnit',
            'progressive_serving_url': 'progressiveServingUrl',
            'pushdown': 'pushdown',
            'pushdown_duration': 'pushdownDuration',
            'role': 'role',
            'size': 'size',
            'ssl_compliant': 'sslCompliant',
            'start_time_type': 'startTimeType',
            'streaming_serving_url': 'streamingServingUrl',
            'transparency': 'transparency',
            'vertically_locked': 'verticallyLocked',
            'window_mode': 'windowMode',
            'z_index': 'zIndex',
            'zip_filename': 'zipFilename',
            'zip_filesize': 'zipFilesize'
        }

        self._action_script3 = action_script3
        self._active = active
        self._additional_sizes = additional_sizes
        self._alignment = alignment
        self._artwork_type = artwork_type
        self._asset_identifier = asset_identifier
        self._audio_bit_rate = audio_bit_rate
        self._audio_sample_rate = audio_sample_rate
        self._backup_image_exit = backup_image_exit
        self._bit_rate = bit_rate
        self._child_asset_type = child_asset_type
        self._collapsed_size = collapsed_size
        self._companion_creative_ids = companion_creative_ids
        self._custom_start_time_value = custom_start_time_value
        self._detected_features = detected_features
        self._display_type = display_type
        self._duration = duration
        self._duration_type = duration_type
        self._expanded_dimension = expanded_dimension
        self._file_size = file_size
        self._flash_version = flash_version
        self._frame_rate = frame_rate
        self._hide_flash_objects = hide_flash_objects
        self._hide_selection_boxes = hide_selection_boxes
        self._horizontally_locked = horizontally_locked
        self._id = id
        self._id_dimension_value = id_dimension_value
        self._media_duration = media_duration
        self._mime_type = mime_type
        self._offset = offset
        self._orientation = orientation
        self._original_backup = original_backup
        self._polite_load = polite_load
        self._position = position
        self._position_left_unit = position_left_unit
        self._position_top_unit = position_top_unit
        self._progressive_serving_url = progressive_serving_url
        self._pushdown = pushdown
        self._pushdown_duration = pushdown_duration
        self._role = role
        self._size = size
        self._ssl_compliant = ssl_compliant
        self._start_time_type = start_time_type
        self._streaming_serving_url = streaming_serving_url
        self._transparency = transparency
        self._vertically_locked = vertically_locked
        self._window_mode = window_mode
        self._z_index = z_index
        self._zip_filename = zip_filename
        self._zip_filesize = zip_filesize

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreativeAsset':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreativeAsset of this CreativeAsset.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action_script3(self):
        """Gets the action_script3 of this CreativeAsset.

        Whether ActionScript3 is enabled for the flash asset. This is a read-only field. Applicable to the following creative type: FLASH_INPAGE. Applicable to DISPLAY when the primary asset type is not HTML_IMAGE.

        :return: The action_script3 of this CreativeAsset.
        :rtype: bool
        """
        return self._action_script3

    @action_script3.setter
    def action_script3(self, action_script3):
        """Sets the action_script3 of this CreativeAsset.

        Whether ActionScript3 is enabled for the flash asset. This is a read-only field. Applicable to the following creative type: FLASH_INPAGE. Applicable to DISPLAY when the primary asset type is not HTML_IMAGE.

        :param action_script3: The action_script3 of this CreativeAsset.
        :type action_script3: bool
        """

        self._action_script3 = action_script3

    @property
    def active(self):
        """Gets the active of this CreativeAsset.

        Whether the video or audio asset is active. This is a read-only field for VPAID_NON_LINEAR_VIDEO assets. Applicable to the following creative types: INSTREAM_AUDIO, INSTREAM_VIDEO and all VPAID.

        :return: The active of this CreativeAsset.
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this CreativeAsset.

        Whether the video or audio asset is active. This is a read-only field for VPAID_NON_LINEAR_VIDEO assets. Applicable to the following creative types: INSTREAM_AUDIO, INSTREAM_VIDEO and all VPAID.

        :param active: The active of this CreativeAsset.
        :type active: bool
        """

        self._active = active

    @property
    def additional_sizes(self):
        """Gets the additional_sizes of this CreativeAsset.

        Additional sizes associated with this creative asset. HTML5 asset generated by compatible software such as GWD will be able to support more sizes this creative asset can render.

        :return: The additional_sizes of this CreativeAsset.
        :rtype: List[Size]
        """
        return self._additional_sizes

    @additional_sizes.setter
    def additional_sizes(self, additional_sizes):
        """Sets the additional_sizes of this CreativeAsset.

        Additional sizes associated with this creative asset. HTML5 asset generated by compatible software such as GWD will be able to support more sizes this creative asset can render.

        :param additional_sizes: The additional_sizes of this CreativeAsset.
        :type additional_sizes: List[Size]
        """

        self._additional_sizes = additional_sizes

    @property
    def alignment(self):
        """Gets the alignment of this CreativeAsset.

        Possible alignments for an asset. This is a read-only field. Applicable to the following creative types: RICH_MEDIA_DISPLAY_MULTI_FLOATING_INTERSTITIAL .

        :return: The alignment of this CreativeAsset.
        :rtype: str
        """
        return self._alignment

    @alignment.setter
    def alignment(self, alignment):
        """Sets the alignment of this CreativeAsset.

        Possible alignments for an asset. This is a read-only field. Applicable to the following creative types: RICH_MEDIA_DISPLAY_MULTI_FLOATING_INTERSTITIAL .

        :param alignment: The alignment of this CreativeAsset.
        :type alignment: str
        """
        allowed_values = ["ALIGNMENT_TOP", "ALIGNMENT_RIGHT", "ALIGNMENT_BOTTOM", "ALIGNMENT_LEFT"]  # noqa: E501
        if alignment not in allowed_values:
            raise ValueError(
                "Invalid value for `alignment` ({0}), must be one of {1}"
                .format(alignment, allowed_values)
            )

        self._alignment = alignment

    @property
    def artwork_type(self):
        """Gets the artwork_type of this CreativeAsset.

        Artwork type of rich media creative. This is a read-only field. Applicable to the following creative types: all RICH_MEDIA.

        :return: The artwork_type of this CreativeAsset.
        :rtype: str
        """
        return self._artwork_type

    @artwork_type.setter
    def artwork_type(self, artwork_type):
        """Sets the artwork_type of this CreativeAsset.

        Artwork type of rich media creative. This is a read-only field. Applicable to the following creative types: all RICH_MEDIA.

        :param artwork_type: The artwork_type of this CreativeAsset.
        :type artwork_type: str
        """
        allowed_values = ["ARTWORK_TYPE_FLASH", "ARTWORK_TYPE_HTML5", "ARTWORK_TYPE_MIXED", "ARTWORK_TYPE_IMAGE"]  # noqa: E501
        if artwork_type not in allowed_values:
            raise ValueError(
                "Invalid value for `artwork_type` ({0}), must be one of {1}"
                .format(artwork_type, allowed_values)
            )

        self._artwork_type = artwork_type

    @property
    def asset_identifier(self):
        """Gets the asset_identifier of this CreativeAsset.


        :return: The asset_identifier of this CreativeAsset.
        :rtype: CreativeAssetId
        """
        return self._asset_identifier

    @asset_identifier.setter
    def asset_identifier(self, asset_identifier):
        """Sets the asset_identifier of this CreativeAsset.


        :param asset_identifier: The asset_identifier of this CreativeAsset.
        :type asset_identifier: CreativeAssetId
        """

        self._asset_identifier = asset_identifier

    @property
    def audio_bit_rate(self):
        """Gets the audio_bit_rate of this CreativeAsset.

        Audio stream bit rate in kbps. This is a read-only field. Applicable to the following creative types: INSTREAM_AUDIO, INSTREAM_VIDEO and all VPAID.

        :return: The audio_bit_rate of this CreativeAsset.
        :rtype: int
        """
        return self._audio_bit_rate

    @audio_bit_rate.setter
    def audio_bit_rate(self, audio_bit_rate):
        """Sets the audio_bit_rate of this CreativeAsset.

        Audio stream bit rate in kbps. This is a read-only field. Applicable to the following creative types: INSTREAM_AUDIO, INSTREAM_VIDEO and all VPAID.

        :param audio_bit_rate: The audio_bit_rate of this CreativeAsset.
        :type audio_bit_rate: int
        """

        self._audio_bit_rate = audio_bit_rate

    @property
    def audio_sample_rate(self):
        """Gets the audio_sample_rate of this CreativeAsset.

        Audio sample bit rate in hertz. This is a read-only field. Applicable to the following creative types: INSTREAM_AUDIO, INSTREAM_VIDEO and all VPAID.

        :return: The audio_sample_rate of this CreativeAsset.
        :rtype: int
        """
        return self._audio_sample_rate

    @audio_sample_rate.setter
    def audio_sample_rate(self, audio_sample_rate):
        """Sets the audio_sample_rate of this CreativeAsset.

        Audio sample bit rate in hertz. This is a read-only field. Applicable to the following creative types: INSTREAM_AUDIO, INSTREAM_VIDEO and all VPAID.

        :param audio_sample_rate: The audio_sample_rate of this CreativeAsset.
        :type audio_sample_rate: int
        """

        self._audio_sample_rate = audio_sample_rate

    @property
    def backup_image_exit(self):
        """Gets the backup_image_exit of this CreativeAsset.


        :return: The backup_image_exit of this CreativeAsset.
        :rtype: CreativeCustomEvent
        """
        return self._backup_image_exit

    @backup_image_exit.setter
    def backup_image_exit(self, backup_image_exit):
        """Sets the backup_image_exit of this CreativeAsset.


        :param backup_image_exit: The backup_image_exit of this CreativeAsset.
        :type backup_image_exit: CreativeCustomEvent
        """

        self._backup_image_exit = backup_image_exit

    @property
    def bit_rate(self):
        """Gets the bit_rate of this CreativeAsset.

        Detected bit-rate for audio or video asset. This is a read-only field. Applicable to the following creative types: INSTREAM_AUDIO, INSTREAM_VIDEO and all VPAID.

        :return: The bit_rate of this CreativeAsset.
        :rtype: int
        """
        return self._bit_rate

    @bit_rate.setter
    def bit_rate(self, bit_rate):
        """Sets the bit_rate of this CreativeAsset.

        Detected bit-rate for audio or video asset. This is a read-only field. Applicable to the following creative types: INSTREAM_AUDIO, INSTREAM_VIDEO and all VPAID.

        :param bit_rate: The bit_rate of this CreativeAsset.
        :type bit_rate: int
        """

        self._bit_rate = bit_rate

    @property
    def child_asset_type(self):
        """Gets the child_asset_type of this CreativeAsset.

        Rich media child asset type. This is a read-only field. Applicable to the following creative types: all VPAID.

        :return: The child_asset_type of this CreativeAsset.
        :rtype: str
        """
        return self._child_asset_type

    @child_asset_type.setter
    def child_asset_type(self, child_asset_type):
        """Sets the child_asset_type of this CreativeAsset.

        Rich media child asset type. This is a read-only field. Applicable to the following creative types: all VPAID.

        :param child_asset_type: The child_asset_type of this CreativeAsset.
        :type child_asset_type: str
        """
        allowed_values = ["CHILD_ASSET_TYPE_FLASH", "CHILD_ASSET_TYPE_VIDEO", "CHILD_ASSET_TYPE_IMAGE", "CHILD_ASSET_TYPE_DATA"]  # noqa: E501
        if child_asset_type not in allowed_values:
            raise ValueError(
                "Invalid value for `child_asset_type` ({0}), must be one of {1}"
                .format(child_asset_type, allowed_values)
            )

        self._child_asset_type = child_asset_type

    @property
    def collapsed_size(self):
        """Gets the collapsed_size of this CreativeAsset.


        :return: The collapsed_size of this CreativeAsset.
        :rtype: Size
        """
        return self._collapsed_size

    @collapsed_size.setter
    def collapsed_size(self, collapsed_size):
        """Sets the collapsed_size of this CreativeAsset.


        :param collapsed_size: The collapsed_size of this CreativeAsset.
        :type collapsed_size: Size
        """

        self._collapsed_size = collapsed_size

    @property
    def companion_creative_ids(self):
        """Gets the companion_creative_ids of this CreativeAsset.

        List of companion creatives assigned to an in-stream video creative asset. Acceptable values include IDs of existing flash and image creatives. Applicable to INSTREAM_VIDEO creative type with dynamicAssetSelection set to true.

        :return: The companion_creative_ids of this CreativeAsset.
        :rtype: List[str]
        """
        return self._companion_creative_ids

    @companion_creative_ids.setter
    def companion_creative_ids(self, companion_creative_ids):
        """Sets the companion_creative_ids of this CreativeAsset.

        List of companion creatives assigned to an in-stream video creative asset. Acceptable values include IDs of existing flash and image creatives. Applicable to INSTREAM_VIDEO creative type with dynamicAssetSelection set to true.

        :param companion_creative_ids: The companion_creative_ids of this CreativeAsset.
        :type companion_creative_ids: List[str]
        """

        self._companion_creative_ids = companion_creative_ids

    @property
    def custom_start_time_value(self):
        """Gets the custom_start_time_value of this CreativeAsset.

        Custom start time in seconds for making the asset visible. Applicable to the following creative types: all RICH_MEDIA. Value must be greater than or equal to 0.

        :return: The custom_start_time_value of this CreativeAsset.
        :rtype: int
        """
        return self._custom_start_time_value

    @custom_start_time_value.setter
    def custom_start_time_value(self, custom_start_time_value):
        """Sets the custom_start_time_value of this CreativeAsset.

        Custom start time in seconds for making the asset visible. Applicable to the following creative types: all RICH_MEDIA. Value must be greater than or equal to 0.

        :param custom_start_time_value: The custom_start_time_value of this CreativeAsset.
        :type custom_start_time_value: int
        """

        self._custom_start_time_value = custom_start_time_value

    @property
    def detected_features(self):
        """Gets the detected_features of this CreativeAsset.

        List of feature dependencies for the creative asset that are detected by Campaign Manager. Feature dependencies are features that a browser must be able to support in order to render your HTML5 creative correctly. This is a read-only, auto-generated field. Applicable to the following creative types: HTML5_BANNER. Applicable to DISPLAY when the primary asset type is not HTML_IMAGE.

        :return: The detected_features of this CreativeAsset.
        :rtype: List[str]
        """
        return self._detected_features

    @detected_features.setter
    def detected_features(self, detected_features):
        """Sets the detected_features of this CreativeAsset.

        List of feature dependencies for the creative asset that are detected by Campaign Manager. Feature dependencies are features that a browser must be able to support in order to render your HTML5 creative correctly. This is a read-only, auto-generated field. Applicable to the following creative types: HTML5_BANNER. Applicable to DISPLAY when the primary asset type is not HTML_IMAGE.

        :param detected_features: The detected_features of this CreativeAsset.
        :type detected_features: List[str]
        """
        allowed_values = ["CSS_FONT_FACE", "CSS_BACKGROUND_SIZE", "CSS_BORDER_IMAGE", "CSS_BORDER_RADIUS", "CSS_BOX_SHADOW", "CSS_FLEX_BOX", "CSS_HSLA", "CSS_MULTIPLE_BGS", "CSS_OPACITY", "CSS_RGBA", "CSS_TEXT_SHADOW", "CSS_ANIMATIONS", "CSS_COLUMNS", "CSS_GENERATED_CONTENT", "CSS_GRADIENTS", "CSS_REFLECTIONS", "CSS_TRANSFORMS", "CSS_TRANSFORMS3D", "CSS_TRANSITIONS", "APPLICATION_CACHE", "CANVAS", "CANVAS_TEXT", "DRAG_AND_DROP", "HASH_CHANGE", "HISTORY", "AUDIO", "VIDEO", "INDEXED_DB", "INPUT_ATTR_AUTOCOMPLETE", "INPUT_ATTR_AUTOFOCUS", "INPUT_ATTR_LIST", "INPUT_ATTR_PLACEHOLDER", "INPUT_ATTR_MAX", "INPUT_ATTR_MIN", "INPUT_ATTR_MULTIPLE", "INPUT_ATTR_PATTERN", "INPUT_ATTR_REQUIRED", "INPUT_ATTR_STEP", "INPUT_TYPE_SEARCH", "INPUT_TYPE_TEL", "INPUT_TYPE_URL", "INPUT_TYPE_EMAIL", "INPUT_TYPE_DATETIME", "INPUT_TYPE_DATE", "INPUT_TYPE_MONTH", "INPUT_TYPE_WEEK", "INPUT_TYPE_TIME", "INPUT_TYPE_DATETIME_LOCAL", "INPUT_TYPE_NUMBER", "INPUT_TYPE_RANGE", "INPUT_TYPE_COLOR", "LOCAL_STORAGE", "POST_MESSAGE", "SESSION_STORAGE", "WEB_SOCKETS", "WEB_SQL_DATABASE", "WEB_WORKERS", "GEO_LOCATION", "INLINE_SVG", "SMIL", "SVG_HREF", "SVG_CLIP_PATHS", "TOUCH", "WEBGL", "SVG_FILTERS", "SVG_FE_IMAGE"]  # noqa: E501
        if not set(detected_features).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `detected_features` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(detected_features) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._detected_features = detected_features

    @property
    def display_type(self):
        """Gets the display_type of this CreativeAsset.

        Type of rich media asset. This is a read-only field. Applicable to the following creative types: all RICH_MEDIA.

        :return: The display_type of this CreativeAsset.
        :rtype: str
        """
        return self._display_type

    @display_type.setter
    def display_type(self, display_type):
        """Sets the display_type of this CreativeAsset.

        Type of rich media asset. This is a read-only field. Applicable to the following creative types: all RICH_MEDIA.

        :param display_type: The display_type of this CreativeAsset.
        :type display_type: str
        """
        allowed_values = ["ASSET_DISPLAY_TYPE_INPAGE", "ASSET_DISPLAY_TYPE_FLOATING", "ASSET_DISPLAY_TYPE_OVERLAY", "ASSET_DISPLAY_TYPE_EXPANDING", "ASSET_DISPLAY_TYPE_FLASH_IN_FLASH", "ASSET_DISPLAY_TYPE_FLASH_IN_FLASH_EXPANDING", "ASSET_DISPLAY_TYPE_PEEL_DOWN", "ASSET_DISPLAY_TYPE_VPAID_LINEAR", "ASSET_DISPLAY_TYPE_VPAID_NON_LINEAR", "ASSET_DISPLAY_TYPE_BACKDROP"]  # noqa: E501
        if display_type not in allowed_values:
            raise ValueError(
                "Invalid value for `display_type` ({0}), must be one of {1}"
                .format(display_type, allowed_values)
            )

        self._display_type = display_type

    @property
    def duration(self):
        """Gets the duration of this CreativeAsset.

        Duration in seconds for which an asset will be displayed. Applicable to the following creative types: INSTREAM_AUDIO, INSTREAM_VIDEO and VPAID_LINEAR_VIDEO. Value must be greater than or equal to 1.

        :return: The duration of this CreativeAsset.
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this CreativeAsset.

        Duration in seconds for which an asset will be displayed. Applicable to the following creative types: INSTREAM_AUDIO, INSTREAM_VIDEO and VPAID_LINEAR_VIDEO. Value must be greater than or equal to 1.

        :param duration: The duration of this CreativeAsset.
        :type duration: int
        """

        self._duration = duration

    @property
    def duration_type(self):
        """Gets the duration_type of this CreativeAsset.

        Duration type for which an asset will be displayed. Applicable to the following creative types: all RICH_MEDIA.

        :return: The duration_type of this CreativeAsset.
        :rtype: str
        """
        return self._duration_type

    @duration_type.setter
    def duration_type(self, duration_type):
        """Sets the duration_type of this CreativeAsset.

        Duration type for which an asset will be displayed. Applicable to the following creative types: all RICH_MEDIA.

        :param duration_type: The duration_type of this CreativeAsset.
        :type duration_type: str
        """
        allowed_values = ["ASSET_DURATION_TYPE_AUTO", "ASSET_DURATION_TYPE_NONE", "ASSET_DURATION_TYPE_CUSTOM"]  # noqa: E501
        if duration_type not in allowed_values:
            raise ValueError(
                "Invalid value for `duration_type` ({0}), must be one of {1}"
                .format(duration_type, allowed_values)
            )

        self._duration_type = duration_type

    @property
    def expanded_dimension(self):
        """Gets the expanded_dimension of this CreativeAsset.


        :return: The expanded_dimension of this CreativeAsset.
        :rtype: Size
        """
        return self._expanded_dimension

    @expanded_dimension.setter
    def expanded_dimension(self, expanded_dimension):
        """Sets the expanded_dimension of this CreativeAsset.


        :param expanded_dimension: The expanded_dimension of this CreativeAsset.
        :type expanded_dimension: Size
        """

        self._expanded_dimension = expanded_dimension

    @property
    def file_size(self):
        """Gets the file_size of this CreativeAsset.

        File size associated with this creative asset. This is a read-only field. Applicable to all but the following creative types: all REDIRECT and TRACKING_TEXT.

        :return: The file_size of this CreativeAsset.
        :rtype: str
        """
        return self._file_size

    @file_size.setter
    def file_size(self, file_size):
        """Sets the file_size of this CreativeAsset.

        File size associated with this creative asset. This is a read-only field. Applicable to all but the following creative types: all REDIRECT and TRACKING_TEXT.

        :param file_size: The file_size of this CreativeAsset.
        :type file_size: str
        """

        self._file_size = file_size

    @property
    def flash_version(self):
        """Gets the flash_version of this CreativeAsset.

        Flash version of the asset. This is a read-only field. Applicable to the following creative types: FLASH_INPAGE, all RICH_MEDIA, and all VPAID. Applicable to DISPLAY when the primary asset type is not HTML_IMAGE.

        :return: The flash_version of this CreativeAsset.
        :rtype: int
        """
        return self._flash_version

    @flash_version.setter
    def flash_version(self, flash_version):
        """Sets the flash_version of this CreativeAsset.

        Flash version of the asset. This is a read-only field. Applicable to the following creative types: FLASH_INPAGE, all RICH_MEDIA, and all VPAID. Applicable to DISPLAY when the primary asset type is not HTML_IMAGE.

        :param flash_version: The flash_version of this CreativeAsset.
        :type flash_version: int
        """

        self._flash_version = flash_version

    @property
    def frame_rate(self):
        """Gets the frame_rate of this CreativeAsset.

        Video frame rate for video asset in frames per second. This is a read-only field. Applicable to the following creative types: INSTREAM_VIDEO and all VPAID.

        :return: The frame_rate of this CreativeAsset.
        :rtype: float
        """
        return self._frame_rate

    @frame_rate.setter
    def frame_rate(self, frame_rate):
        """Sets the frame_rate of this CreativeAsset.

        Video frame rate for video asset in frames per second. This is a read-only field. Applicable to the following creative types: INSTREAM_VIDEO and all VPAID.

        :param frame_rate: The frame_rate of this CreativeAsset.
        :type frame_rate: float
        """

        self._frame_rate = frame_rate

    @property
    def hide_flash_objects(self):
        """Gets the hide_flash_objects of this CreativeAsset.

        Whether to hide Flash objects flag for an asset. Applicable to the following creative types: all RICH_MEDIA.

        :return: The hide_flash_objects of this CreativeAsset.
        :rtype: bool
        """
        return self._hide_flash_objects

    @hide_flash_objects.setter
    def hide_flash_objects(self, hide_flash_objects):
        """Sets the hide_flash_objects of this CreativeAsset.

        Whether to hide Flash objects flag for an asset. Applicable to the following creative types: all RICH_MEDIA.

        :param hide_flash_objects: The hide_flash_objects of this CreativeAsset.
        :type hide_flash_objects: bool
        """

        self._hide_flash_objects = hide_flash_objects

    @property
    def hide_selection_boxes(self):
        """Gets the hide_selection_boxes of this CreativeAsset.

        Whether to hide selection boxes flag for an asset. Applicable to the following creative types: all RICH_MEDIA.

        :return: The hide_selection_boxes of this CreativeAsset.
        :rtype: bool
        """
        return self._hide_selection_boxes

    @hide_selection_boxes.setter
    def hide_selection_boxes(self, hide_selection_boxes):
        """Sets the hide_selection_boxes of this CreativeAsset.

        Whether to hide selection boxes flag for an asset. Applicable to the following creative types: all RICH_MEDIA.

        :param hide_selection_boxes: The hide_selection_boxes of this CreativeAsset.
        :type hide_selection_boxes: bool
        """

        self._hide_selection_boxes = hide_selection_boxes

    @property
    def horizontally_locked(self):
        """Gets the horizontally_locked of this CreativeAsset.

        Whether the asset is horizontally locked. This is a read-only field. Applicable to the following creative types: all RICH_MEDIA.

        :return: The horizontally_locked of this CreativeAsset.
        :rtype: bool
        """
        return self._horizontally_locked

    @horizontally_locked.setter
    def horizontally_locked(self, horizontally_locked):
        """Sets the horizontally_locked of this CreativeAsset.

        Whether the asset is horizontally locked. This is a read-only field. Applicable to the following creative types: all RICH_MEDIA.

        :param horizontally_locked: The horizontally_locked of this CreativeAsset.
        :type horizontally_locked: bool
        """

        self._horizontally_locked = horizontally_locked

    @property
    def id(self):
        """Gets the id of this CreativeAsset.

        Numeric ID of this creative asset. This is a required field and should not be modified. Applicable to all but the following creative types: all REDIRECT and TRACKING_TEXT.

        :return: The id of this CreativeAsset.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CreativeAsset.

        Numeric ID of this creative asset. This is a required field and should not be modified. Applicable to all but the following creative types: all REDIRECT and TRACKING_TEXT.

        :param id: The id of this CreativeAsset.
        :type id: str
        """

        self._id = id

    @property
    def id_dimension_value(self):
        """Gets the id_dimension_value of this CreativeAsset.


        :return: The id_dimension_value of this CreativeAsset.
        :rtype: DimensionValue
        """
        return self._id_dimension_value

    @id_dimension_value.setter
    def id_dimension_value(self, id_dimension_value):
        """Sets the id_dimension_value of this CreativeAsset.


        :param id_dimension_value: The id_dimension_value of this CreativeAsset.
        :type id_dimension_value: DimensionValue
        """

        self._id_dimension_value = id_dimension_value

    @property
    def media_duration(self):
        """Gets the media_duration of this CreativeAsset.

        Detected duration for audio or video asset. This is a read-only field. Applicable to the following creative types: INSTREAM_AUDIO, INSTREAM_VIDEO and all VPAID.

        :return: The media_duration of this CreativeAsset.
        :rtype: float
        """
        return self._media_duration

    @media_duration.setter
    def media_duration(self, media_duration):
        """Sets the media_duration of this CreativeAsset.

        Detected duration for audio or video asset. This is a read-only field. Applicable to the following creative types: INSTREAM_AUDIO, INSTREAM_VIDEO and all VPAID.

        :param media_duration: The media_duration of this CreativeAsset.
        :type media_duration: float
        """

        self._media_duration = media_duration

    @property
    def mime_type(self):
        """Gets the mime_type of this CreativeAsset.

        Detected MIME type for audio or video asset. This is a read-only field. Applicable to the following creative types: INSTREAM_AUDIO, INSTREAM_VIDEO and all VPAID.

        :return: The mime_type of this CreativeAsset.
        :rtype: str
        """
        return self._mime_type

    @mime_type.setter
    def mime_type(self, mime_type):
        """Sets the mime_type of this CreativeAsset.

        Detected MIME type for audio or video asset. This is a read-only field. Applicable to the following creative types: INSTREAM_AUDIO, INSTREAM_VIDEO and all VPAID.

        :param mime_type: The mime_type of this CreativeAsset.
        :type mime_type: str
        """

        self._mime_type = mime_type

    @property
    def offset(self):
        """Gets the offset of this CreativeAsset.


        :return: The offset of this CreativeAsset.
        :rtype: OffsetPosition
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this CreativeAsset.


        :param offset: The offset of this CreativeAsset.
        :type offset: OffsetPosition
        """

        self._offset = offset

    @property
    def orientation(self):
        """Gets the orientation of this CreativeAsset.

        Orientation of video asset. This is a read-only, auto-generated field.

        :return: The orientation of this CreativeAsset.
        :rtype: str
        """
        return self._orientation

    @orientation.setter
    def orientation(self, orientation):
        """Sets the orientation of this CreativeAsset.

        Orientation of video asset. This is a read-only, auto-generated field.

        :param orientation: The orientation of this CreativeAsset.
        :type orientation: str
        """
        allowed_values = ["LANDSCAPE", "PORTRAIT", "SQUARE"]  # noqa: E501
        if orientation not in allowed_values:
            raise ValueError(
                "Invalid value for `orientation` ({0}), must be one of {1}"
                .format(orientation, allowed_values)
            )

        self._orientation = orientation

    @property
    def original_backup(self):
        """Gets the original_backup of this CreativeAsset.

        Whether the backup asset is original or changed by the user in Campaign Manager. Applicable to the following creative types: all RICH_MEDIA.

        :return: The original_backup of this CreativeAsset.
        :rtype: bool
        """
        return self._original_backup

    @original_backup.setter
    def original_backup(self, original_backup):
        """Sets the original_backup of this CreativeAsset.

        Whether the backup asset is original or changed by the user in Campaign Manager. Applicable to the following creative types: all RICH_MEDIA.

        :param original_backup: The original_backup of this CreativeAsset.
        :type original_backup: bool
        """

        self._original_backup = original_backup

    @property
    def polite_load(self):
        """Gets the polite_load of this CreativeAsset.

        Whether this asset is used as a polite load asset.

        :return: The polite_load of this CreativeAsset.
        :rtype: bool
        """
        return self._polite_load

    @polite_load.setter
    def polite_load(self, polite_load):
        """Sets the polite_load of this CreativeAsset.

        Whether this asset is used as a polite load asset.

        :param polite_load: The polite_load of this CreativeAsset.
        :type polite_load: bool
        """

        self._polite_load = polite_load

    @property
    def position(self):
        """Gets the position of this CreativeAsset.


        :return: The position of this CreativeAsset.
        :rtype: OffsetPosition
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this CreativeAsset.


        :param position: The position of this CreativeAsset.
        :type position: OffsetPosition
        """

        self._position = position

    @property
    def position_left_unit(self):
        """Gets the position_left_unit of this CreativeAsset.

        Offset left unit for an asset. This is a read-only field. Applicable to the following creative types: all RICH_MEDIA.

        :return: The position_left_unit of this CreativeAsset.
        :rtype: str
        """
        return self._position_left_unit

    @position_left_unit.setter
    def position_left_unit(self, position_left_unit):
        """Sets the position_left_unit of this CreativeAsset.

        Offset left unit for an asset. This is a read-only field. Applicable to the following creative types: all RICH_MEDIA.

        :param position_left_unit: The position_left_unit of this CreativeAsset.
        :type position_left_unit: str
        """
        allowed_values = ["OFFSET_UNIT_PIXEL", "OFFSET_UNIT_PERCENT", "OFFSET_UNIT_PIXEL_FROM_CENTER"]  # noqa: E501
        if position_left_unit not in allowed_values:
            raise ValueError(
                "Invalid value for `position_left_unit` ({0}), must be one of {1}"
                .format(position_left_unit, allowed_values)
            )

        self._position_left_unit = position_left_unit

    @property
    def position_top_unit(self):
        """Gets the position_top_unit of this CreativeAsset.

        Offset top unit for an asset. This is a read-only field if the asset displayType is ASSET_DISPLAY_TYPE_OVERLAY. Applicable to the following creative types: all RICH_MEDIA.

        :return: The position_top_unit of this CreativeAsset.
        :rtype: str
        """
        return self._position_top_unit

    @position_top_unit.setter
    def position_top_unit(self, position_top_unit):
        """Sets the position_top_unit of this CreativeAsset.

        Offset top unit for an asset. This is a read-only field if the asset displayType is ASSET_DISPLAY_TYPE_OVERLAY. Applicable to the following creative types: all RICH_MEDIA.

        :param position_top_unit: The position_top_unit of this CreativeAsset.
        :type position_top_unit: str
        """
        allowed_values = ["OFFSET_UNIT_PIXEL", "OFFSET_UNIT_PERCENT", "OFFSET_UNIT_PIXEL_FROM_CENTER"]  # noqa: E501
        if position_top_unit not in allowed_values:
            raise ValueError(
                "Invalid value for `position_top_unit` ({0}), must be one of {1}"
                .format(position_top_unit, allowed_values)
            )

        self._position_top_unit = position_top_unit

    @property
    def progressive_serving_url(self):
        """Gets the progressive_serving_url of this CreativeAsset.

        Progressive URL for video asset. This is a read-only field. Applicable to the following creative types: INSTREAM_VIDEO and all VPAID.

        :return: The progressive_serving_url of this CreativeAsset.
        :rtype: str
        """
        return self._progressive_serving_url

    @progressive_serving_url.setter
    def progressive_serving_url(self, progressive_serving_url):
        """Sets the progressive_serving_url of this CreativeAsset.

        Progressive URL for video asset. This is a read-only field. Applicable to the following creative types: INSTREAM_VIDEO and all VPAID.

        :param progressive_serving_url: The progressive_serving_url of this CreativeAsset.
        :type progressive_serving_url: str
        """

        self._progressive_serving_url = progressive_serving_url

    @property
    def pushdown(self):
        """Gets the pushdown of this CreativeAsset.

        Whether the asset pushes down other content. Applicable to the following creative types: all RICH_MEDIA. Additionally, only applicable when the asset offsets are 0, the collapsedSize.width matches size.width, and the collapsedSize.height is less than size.height.

        :return: The pushdown of this CreativeAsset.
        :rtype: bool
        """
        return self._pushdown

    @pushdown.setter
    def pushdown(self, pushdown):
        """Sets the pushdown of this CreativeAsset.

        Whether the asset pushes down other content. Applicable to the following creative types: all RICH_MEDIA. Additionally, only applicable when the asset offsets are 0, the collapsedSize.width matches size.width, and the collapsedSize.height is less than size.height.

        :param pushdown: The pushdown of this CreativeAsset.
        :type pushdown: bool
        """

        self._pushdown = pushdown

    @property
    def pushdown_duration(self):
        """Gets the pushdown_duration of this CreativeAsset.

        Pushdown duration in seconds for an asset. Applicable to the following creative types: all RICH_MEDIA.Additionally, only applicable when the asset pushdown field is true, the offsets are 0, the collapsedSize.width matches size.width, and the collapsedSize.height is less than size.height. Acceptable values are 0 to 9.99, inclusive.

        :return: The pushdown_duration of this CreativeAsset.
        :rtype: float
        """
        return self._pushdown_duration

    @pushdown_duration.setter
    def pushdown_duration(self, pushdown_duration):
        """Sets the pushdown_duration of this CreativeAsset.

        Pushdown duration in seconds for an asset. Applicable to the following creative types: all RICH_MEDIA.Additionally, only applicable when the asset pushdown field is true, the offsets are 0, the collapsedSize.width matches size.width, and the collapsedSize.height is less than size.height. Acceptable values are 0 to 9.99, inclusive.

        :param pushdown_duration: The pushdown_duration of this CreativeAsset.
        :type pushdown_duration: float
        """

        self._pushdown_duration = pushdown_duration

    @property
    def role(self):
        """Gets the role of this CreativeAsset.

        Role of the asset in relation to creative. Applicable to all but the following creative types: all REDIRECT and TRACKING_TEXT. This is a required field. PRIMARY applies to DISPLAY, FLASH_INPAGE, HTML5_BANNER, IMAGE, DISPLAY_IMAGE_GALLERY, all RICH_MEDIA (which may contain multiple primary assets), and all VPAID creatives. BACKUP_IMAGE applies to FLASH_INPAGE, HTML5_BANNER, all RICH_MEDIA, and all VPAID creatives. Applicable to DISPLAY when the primary asset type is not HTML_IMAGE. ADDITIONAL_IMAGE and ADDITIONAL_FLASH apply to FLASH_INPAGE creatives. OTHER refers to assets from sources other than Campaign Manager, such as Studio uploaded assets, applicable to all RICH_MEDIA and all VPAID creatives. PARENT_VIDEO refers to videos uploaded by the user in Campaign Manager and is applicable to INSTREAM_VIDEO and VPAID_LINEAR_VIDEO creatives. TRANSCODED_VIDEO refers to videos transcoded by Campaign Manager from PARENT_VIDEO assets and is applicable to INSTREAM_VIDEO and VPAID_LINEAR_VIDEO creatives. ALTERNATE_VIDEO refers to the Campaign Manager representation of child asset videos from Studio, and is applicable to VPAID_LINEAR_VIDEO creatives. These cannot be added or removed within Campaign Manager. For VPAID_LINEAR_VIDEO creatives, PARENT_VIDEO, TRANSCODED_VIDEO and ALTERNATE_VIDEO assets that are marked active serve as backup in case the VPAID creative cannot be served. Only PARENT_VIDEO assets can be added or removed for an INSTREAM_VIDEO or VPAID_LINEAR_VIDEO creative. PARENT_AUDIO refers to audios uploaded by the user in Campaign Manager and is applicable to INSTREAM_AUDIO creatives. TRANSCODED_AUDIO refers to audios transcoded by Campaign Manager from PARENT_AUDIO assets and is applicable to INSTREAM_AUDIO creatives. 

        :return: The role of this CreativeAsset.
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this CreativeAsset.

        Role of the asset in relation to creative. Applicable to all but the following creative types: all REDIRECT and TRACKING_TEXT. This is a required field. PRIMARY applies to DISPLAY, FLASH_INPAGE, HTML5_BANNER, IMAGE, DISPLAY_IMAGE_GALLERY, all RICH_MEDIA (which may contain multiple primary assets), and all VPAID creatives. BACKUP_IMAGE applies to FLASH_INPAGE, HTML5_BANNER, all RICH_MEDIA, and all VPAID creatives. Applicable to DISPLAY when the primary asset type is not HTML_IMAGE. ADDITIONAL_IMAGE and ADDITIONAL_FLASH apply to FLASH_INPAGE creatives. OTHER refers to assets from sources other than Campaign Manager, such as Studio uploaded assets, applicable to all RICH_MEDIA and all VPAID creatives. PARENT_VIDEO refers to videos uploaded by the user in Campaign Manager and is applicable to INSTREAM_VIDEO and VPAID_LINEAR_VIDEO creatives. TRANSCODED_VIDEO refers to videos transcoded by Campaign Manager from PARENT_VIDEO assets and is applicable to INSTREAM_VIDEO and VPAID_LINEAR_VIDEO creatives. ALTERNATE_VIDEO refers to the Campaign Manager representation of child asset videos from Studio, and is applicable to VPAID_LINEAR_VIDEO creatives. These cannot be added or removed within Campaign Manager. For VPAID_LINEAR_VIDEO creatives, PARENT_VIDEO, TRANSCODED_VIDEO and ALTERNATE_VIDEO assets that are marked active serve as backup in case the VPAID creative cannot be served. Only PARENT_VIDEO assets can be added or removed for an INSTREAM_VIDEO or VPAID_LINEAR_VIDEO creative. PARENT_AUDIO refers to audios uploaded by the user in Campaign Manager and is applicable to INSTREAM_AUDIO creatives. TRANSCODED_AUDIO refers to audios transcoded by Campaign Manager from PARENT_AUDIO assets and is applicable to INSTREAM_AUDIO creatives. 

        :param role: The role of this CreativeAsset.
        :type role: str
        """
        allowed_values = ["PRIMARY", "BACKUP_IMAGE", "ADDITIONAL_IMAGE", "ADDITIONAL_FLASH", "PARENT_VIDEO", "TRANSCODED_VIDEO", "OTHER", "ALTERNATE_VIDEO", "PARENT_AUDIO", "TRANSCODED_AUDIO"]  # noqa: E501
        if role not in allowed_values:
            raise ValueError(
                "Invalid value for `role` ({0}), must be one of {1}"
                .format(role, allowed_values)
            )

        self._role = role

    @property
    def size(self):
        """Gets the size of this CreativeAsset.


        :return: The size of this CreativeAsset.
        :rtype: Size
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this CreativeAsset.


        :param size: The size of this CreativeAsset.
        :type size: Size
        """

        self._size = size

    @property
    def ssl_compliant(self):
        """Gets the ssl_compliant of this CreativeAsset.

        Whether the asset is SSL-compliant. This is a read-only field. Applicable to all but the following creative types: all REDIRECT and TRACKING_TEXT.

        :return: The ssl_compliant of this CreativeAsset.
        :rtype: bool
        """
        return self._ssl_compliant

    @ssl_compliant.setter
    def ssl_compliant(self, ssl_compliant):
        """Sets the ssl_compliant of this CreativeAsset.

        Whether the asset is SSL-compliant. This is a read-only field. Applicable to all but the following creative types: all REDIRECT and TRACKING_TEXT.

        :param ssl_compliant: The ssl_compliant of this CreativeAsset.
        :type ssl_compliant: bool
        """

        self._ssl_compliant = ssl_compliant

    @property
    def start_time_type(self):
        """Gets the start_time_type of this CreativeAsset.

        Initial wait time type before making the asset visible. Applicable to the following creative types: all RICH_MEDIA.

        :return: The start_time_type of this CreativeAsset.
        :rtype: str
        """
        return self._start_time_type

    @start_time_type.setter
    def start_time_type(self, start_time_type):
        """Sets the start_time_type of this CreativeAsset.

        Initial wait time type before making the asset visible. Applicable to the following creative types: all RICH_MEDIA.

        :param start_time_type: The start_time_type of this CreativeAsset.
        :type start_time_type: str
        """
        allowed_values = ["ASSET_START_TIME_TYPE_NONE", "ASSET_START_TIME_TYPE_CUSTOM"]  # noqa: E501
        if start_time_type not in allowed_values:
            raise ValueError(
                "Invalid value for `start_time_type` ({0}), must be one of {1}"
                .format(start_time_type, allowed_values)
            )

        self._start_time_type = start_time_type

    @property
    def streaming_serving_url(self):
        """Gets the streaming_serving_url of this CreativeAsset.

        Streaming URL for video asset. This is a read-only field. Applicable to the following creative types: INSTREAM_VIDEO and all VPAID.

        :return: The streaming_serving_url of this CreativeAsset.
        :rtype: str
        """
        return self._streaming_serving_url

    @streaming_serving_url.setter
    def streaming_serving_url(self, streaming_serving_url):
        """Sets the streaming_serving_url of this CreativeAsset.

        Streaming URL for video asset. This is a read-only field. Applicable to the following creative types: INSTREAM_VIDEO and all VPAID.

        :param streaming_serving_url: The streaming_serving_url of this CreativeAsset.
        :type streaming_serving_url: str
        """

        self._streaming_serving_url = streaming_serving_url

    @property
    def transparency(self):
        """Gets the transparency of this CreativeAsset.

        Whether the asset is transparent. Applicable to the following creative types: all RICH_MEDIA. Additionally, only applicable to HTML5 assets.

        :return: The transparency of this CreativeAsset.
        :rtype: bool
        """
        return self._transparency

    @transparency.setter
    def transparency(self, transparency):
        """Sets the transparency of this CreativeAsset.

        Whether the asset is transparent. Applicable to the following creative types: all RICH_MEDIA. Additionally, only applicable to HTML5 assets.

        :param transparency: The transparency of this CreativeAsset.
        :type transparency: bool
        """

        self._transparency = transparency

    @property
    def vertically_locked(self):
        """Gets the vertically_locked of this CreativeAsset.

        Whether the asset is vertically locked. This is a read-only field. Applicable to the following creative types: all RICH_MEDIA.

        :return: The vertically_locked of this CreativeAsset.
        :rtype: bool
        """
        return self._vertically_locked

    @vertically_locked.setter
    def vertically_locked(self, vertically_locked):
        """Sets the vertically_locked of this CreativeAsset.

        Whether the asset is vertically locked. This is a read-only field. Applicable to the following creative types: all RICH_MEDIA.

        :param vertically_locked: The vertically_locked of this CreativeAsset.
        :type vertically_locked: bool
        """

        self._vertically_locked = vertically_locked

    @property
    def window_mode(self):
        """Gets the window_mode of this CreativeAsset.

        Window mode options for flash assets. Applicable to the following creative types: FLASH_INPAGE, RICH_MEDIA_DISPLAY_EXPANDING, RICH_MEDIA_IM_EXPAND, RICH_MEDIA_DISPLAY_BANNER, and RICH_MEDIA_INPAGE_FLOATING.

        :return: The window_mode of this CreativeAsset.
        :rtype: str
        """
        return self._window_mode

    @window_mode.setter
    def window_mode(self, window_mode):
        """Sets the window_mode of this CreativeAsset.

        Window mode options for flash assets. Applicable to the following creative types: FLASH_INPAGE, RICH_MEDIA_DISPLAY_EXPANDING, RICH_MEDIA_IM_EXPAND, RICH_MEDIA_DISPLAY_BANNER, and RICH_MEDIA_INPAGE_FLOATING.

        :param window_mode: The window_mode of this CreativeAsset.
        :type window_mode: str
        """
        allowed_values = ["OPAQUE", "WINDOW", "TRANSPARENT"]  # noqa: E501
        if window_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `window_mode` ({0}), must be one of {1}"
                .format(window_mode, allowed_values)
            )

        self._window_mode = window_mode

    @property
    def z_index(self):
        """Gets the z_index of this CreativeAsset.

        zIndex value of an asset. Applicable to the following creative types: all RICH_MEDIA.Additionally, only applicable to assets whose displayType is NOT one of the following types: ASSET_DISPLAY_TYPE_INPAGE or ASSET_DISPLAY_TYPE_OVERLAY. Acceptable values are -999999999 to 999999999, inclusive.

        :return: The z_index of this CreativeAsset.
        :rtype: int
        """
        return self._z_index

    @z_index.setter
    def z_index(self, z_index):
        """Sets the z_index of this CreativeAsset.

        zIndex value of an asset. Applicable to the following creative types: all RICH_MEDIA.Additionally, only applicable to assets whose displayType is NOT one of the following types: ASSET_DISPLAY_TYPE_INPAGE or ASSET_DISPLAY_TYPE_OVERLAY. Acceptable values are -999999999 to 999999999, inclusive.

        :param z_index: The z_index of this CreativeAsset.
        :type z_index: int
        """

        self._z_index = z_index

    @property
    def zip_filename(self):
        """Gets the zip_filename of this CreativeAsset.

        File name of zip file. This is a read-only field. Applicable to the following creative types: HTML5_BANNER.

        :return: The zip_filename of this CreativeAsset.
        :rtype: str
        """
        return self._zip_filename

    @zip_filename.setter
    def zip_filename(self, zip_filename):
        """Sets the zip_filename of this CreativeAsset.

        File name of zip file. This is a read-only field. Applicable to the following creative types: HTML5_BANNER.

        :param zip_filename: The zip_filename of this CreativeAsset.
        :type zip_filename: str
        """

        self._zip_filename = zip_filename

    @property
    def zip_filesize(self):
        """Gets the zip_filesize of this CreativeAsset.

        Size of zip file. This is a read-only field. Applicable to the following creative types: HTML5_BANNER.

        :return: The zip_filesize of this CreativeAsset.
        :rtype: str
        """
        return self._zip_filesize

    @zip_filesize.setter
    def zip_filesize(self, zip_filesize):
        """Sets the zip_filesize of this CreativeAsset.

        Size of zip file. This is a read-only field. Applicable to the following creative types: HTML5_BANNER.

        :param zip_filesize: The zip_filesize of this CreativeAsset.
        :type zip_filesize: str
        """

        self._zip_filesize = zip_filesize
