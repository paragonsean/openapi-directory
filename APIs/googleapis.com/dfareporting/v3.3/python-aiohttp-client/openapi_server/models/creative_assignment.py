# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.click_through_url import ClickThroughUrl
from openapi_server.models.companion_click_through_override import CompanionClickThroughOverride
from openapi_server.models.creative_group_assignment import CreativeGroupAssignment
from openapi_server.models.dimension_value import DimensionValue
from openapi_server.models.rich_media_exit_override import RichMediaExitOverride
from openapi_server import util


class CreativeAssignment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, active: bool=None, apply_event_tags: bool=None, click_through_url: ClickThroughUrl=None, companion_creative_overrides: List[CompanionClickThroughOverride]=None, creative_group_assignments: List[CreativeGroupAssignment]=None, creative_id: str=None, creative_id_dimension_value: DimensionValue=None, end_time: datetime=None, rich_media_exit_overrides: List[RichMediaExitOverride]=None, sequence: int=None, ssl_compliant: bool=None, start_time: datetime=None, weight: int=None):
        """CreativeAssignment - a model defined in OpenAPI

        :param active: The active of this CreativeAssignment.
        :param apply_event_tags: The apply_event_tags of this CreativeAssignment.
        :param click_through_url: The click_through_url of this CreativeAssignment.
        :param companion_creative_overrides: The companion_creative_overrides of this CreativeAssignment.
        :param creative_group_assignments: The creative_group_assignments of this CreativeAssignment.
        :param creative_id: The creative_id of this CreativeAssignment.
        :param creative_id_dimension_value: The creative_id_dimension_value of this CreativeAssignment.
        :param end_time: The end_time of this CreativeAssignment.
        :param rich_media_exit_overrides: The rich_media_exit_overrides of this CreativeAssignment.
        :param sequence: The sequence of this CreativeAssignment.
        :param ssl_compliant: The ssl_compliant of this CreativeAssignment.
        :param start_time: The start_time of this CreativeAssignment.
        :param weight: The weight of this CreativeAssignment.
        """
        self.openapi_types = {
            'active': bool,
            'apply_event_tags': bool,
            'click_through_url': ClickThroughUrl,
            'companion_creative_overrides': List[CompanionClickThroughOverride],
            'creative_group_assignments': List[CreativeGroupAssignment],
            'creative_id': str,
            'creative_id_dimension_value': DimensionValue,
            'end_time': datetime,
            'rich_media_exit_overrides': List[RichMediaExitOverride],
            'sequence': int,
            'ssl_compliant': bool,
            'start_time': datetime,
            'weight': int
        }

        self.attribute_map = {
            'active': 'active',
            'apply_event_tags': 'applyEventTags',
            'click_through_url': 'clickThroughUrl',
            'companion_creative_overrides': 'companionCreativeOverrides',
            'creative_group_assignments': 'creativeGroupAssignments',
            'creative_id': 'creativeId',
            'creative_id_dimension_value': 'creativeIdDimensionValue',
            'end_time': 'endTime',
            'rich_media_exit_overrides': 'richMediaExitOverrides',
            'sequence': 'sequence',
            'ssl_compliant': 'sslCompliant',
            'start_time': 'startTime',
            'weight': 'weight'
        }

        self._active = active
        self._apply_event_tags = apply_event_tags
        self._click_through_url = click_through_url
        self._companion_creative_overrides = companion_creative_overrides
        self._creative_group_assignments = creative_group_assignments
        self._creative_id = creative_id
        self._creative_id_dimension_value = creative_id_dimension_value
        self._end_time = end_time
        self._rich_media_exit_overrides = rich_media_exit_overrides
        self._sequence = sequence
        self._ssl_compliant = ssl_compliant
        self._start_time = start_time
        self._weight = weight

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreativeAssignment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreativeAssignment of this CreativeAssignment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def active(self):
        """Gets the active of this CreativeAssignment.

        Whether this creative assignment is active. When true, the creative will be included in the ad's rotation.

        :return: The active of this CreativeAssignment.
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this CreativeAssignment.

        Whether this creative assignment is active. When true, the creative will be included in the ad's rotation.

        :param active: The active of this CreativeAssignment.
        :type active: bool
        """

        self._active = active

    @property
    def apply_event_tags(self):
        """Gets the apply_event_tags of this CreativeAssignment.

        Whether applicable event tags should fire when this creative assignment is rendered. If this value is unset when the ad is inserted or updated, it will default to true for all creative types EXCEPT for INTERNAL_REDIRECT, INTERSTITIAL_INTERNAL_REDIRECT, and INSTREAM_VIDEO.

        :return: The apply_event_tags of this CreativeAssignment.
        :rtype: bool
        """
        return self._apply_event_tags

    @apply_event_tags.setter
    def apply_event_tags(self, apply_event_tags):
        """Sets the apply_event_tags of this CreativeAssignment.

        Whether applicable event tags should fire when this creative assignment is rendered. If this value is unset when the ad is inserted or updated, it will default to true for all creative types EXCEPT for INTERNAL_REDIRECT, INTERSTITIAL_INTERNAL_REDIRECT, and INSTREAM_VIDEO.

        :param apply_event_tags: The apply_event_tags of this CreativeAssignment.
        :type apply_event_tags: bool
        """

        self._apply_event_tags = apply_event_tags

    @property
    def click_through_url(self):
        """Gets the click_through_url of this CreativeAssignment.


        :return: The click_through_url of this CreativeAssignment.
        :rtype: ClickThroughUrl
        """
        return self._click_through_url

    @click_through_url.setter
    def click_through_url(self, click_through_url):
        """Sets the click_through_url of this CreativeAssignment.


        :param click_through_url: The click_through_url of this CreativeAssignment.
        :type click_through_url: ClickThroughUrl
        """

        self._click_through_url = click_through_url

    @property
    def companion_creative_overrides(self):
        """Gets the companion_creative_overrides of this CreativeAssignment.

        Companion creative overrides for this creative assignment. Applicable to video ads.

        :return: The companion_creative_overrides of this CreativeAssignment.
        :rtype: List[CompanionClickThroughOverride]
        """
        return self._companion_creative_overrides

    @companion_creative_overrides.setter
    def companion_creative_overrides(self, companion_creative_overrides):
        """Sets the companion_creative_overrides of this CreativeAssignment.

        Companion creative overrides for this creative assignment. Applicable to video ads.

        :param companion_creative_overrides: The companion_creative_overrides of this CreativeAssignment.
        :type companion_creative_overrides: List[CompanionClickThroughOverride]
        """

        self._companion_creative_overrides = companion_creative_overrides

    @property
    def creative_group_assignments(self):
        """Gets the creative_group_assignments of this CreativeAssignment.

        Creative group assignments for this creative assignment. Only one assignment per creative group number is allowed for a maximum of two assignments.

        :return: The creative_group_assignments of this CreativeAssignment.
        :rtype: List[CreativeGroupAssignment]
        """
        return self._creative_group_assignments

    @creative_group_assignments.setter
    def creative_group_assignments(self, creative_group_assignments):
        """Sets the creative_group_assignments of this CreativeAssignment.

        Creative group assignments for this creative assignment. Only one assignment per creative group number is allowed for a maximum of two assignments.

        :param creative_group_assignments: The creative_group_assignments of this CreativeAssignment.
        :type creative_group_assignments: List[CreativeGroupAssignment]
        """

        self._creative_group_assignments = creative_group_assignments

    @property
    def creative_id(self):
        """Gets the creative_id of this CreativeAssignment.

        ID of the creative to be assigned. This is a required field.

        :return: The creative_id of this CreativeAssignment.
        :rtype: str
        """
        return self._creative_id

    @creative_id.setter
    def creative_id(self, creative_id):
        """Sets the creative_id of this CreativeAssignment.

        ID of the creative to be assigned. This is a required field.

        :param creative_id: The creative_id of this CreativeAssignment.
        :type creative_id: str
        """

        self._creative_id = creative_id

    @property
    def creative_id_dimension_value(self):
        """Gets the creative_id_dimension_value of this CreativeAssignment.


        :return: The creative_id_dimension_value of this CreativeAssignment.
        :rtype: DimensionValue
        """
        return self._creative_id_dimension_value

    @creative_id_dimension_value.setter
    def creative_id_dimension_value(self, creative_id_dimension_value):
        """Sets the creative_id_dimension_value of this CreativeAssignment.


        :param creative_id_dimension_value: The creative_id_dimension_value of this CreativeAssignment.
        :type creative_id_dimension_value: DimensionValue
        """

        self._creative_id_dimension_value = creative_id_dimension_value

    @property
    def end_time(self):
        """Gets the end_time of this CreativeAssignment.


        :return: The end_time of this CreativeAssignment.
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this CreativeAssignment.


        :param end_time: The end_time of this CreativeAssignment.
        :type end_time: datetime
        """

        self._end_time = end_time

    @property
    def rich_media_exit_overrides(self):
        """Gets the rich_media_exit_overrides of this CreativeAssignment.

        Rich media exit overrides for this creative assignment. Applicable when the creative type is any of the following: - DISPLAY - RICH_MEDIA_INPAGE - RICH_MEDIA_INPAGE_FLOATING - RICH_MEDIA_IM_EXPAND - RICH_MEDIA_EXPANDING - RICH_MEDIA_INTERSTITIAL_FLOAT - RICH_MEDIA_MOBILE_IN_APP - RICH_MEDIA_MULTI_FLOATING - RICH_MEDIA_PEEL_DOWN - VPAID_LINEAR - VPAID_NON_LINEAR 

        :return: The rich_media_exit_overrides of this CreativeAssignment.
        :rtype: List[RichMediaExitOverride]
        """
        return self._rich_media_exit_overrides

    @rich_media_exit_overrides.setter
    def rich_media_exit_overrides(self, rich_media_exit_overrides):
        """Sets the rich_media_exit_overrides of this CreativeAssignment.

        Rich media exit overrides for this creative assignment. Applicable when the creative type is any of the following: - DISPLAY - RICH_MEDIA_INPAGE - RICH_MEDIA_INPAGE_FLOATING - RICH_MEDIA_IM_EXPAND - RICH_MEDIA_EXPANDING - RICH_MEDIA_INTERSTITIAL_FLOAT - RICH_MEDIA_MOBILE_IN_APP - RICH_MEDIA_MULTI_FLOATING - RICH_MEDIA_PEEL_DOWN - VPAID_LINEAR - VPAID_NON_LINEAR 

        :param rich_media_exit_overrides: The rich_media_exit_overrides of this CreativeAssignment.
        :type rich_media_exit_overrides: List[RichMediaExitOverride]
        """

        self._rich_media_exit_overrides = rich_media_exit_overrides

    @property
    def sequence(self):
        """Gets the sequence of this CreativeAssignment.

        Sequence number of the creative assignment, applicable when the rotation type is CREATIVE_ROTATION_TYPE_SEQUENTIAL. Acceptable values are 1 to 65535, inclusive.

        :return: The sequence of this CreativeAssignment.
        :rtype: int
        """
        return self._sequence

    @sequence.setter
    def sequence(self, sequence):
        """Sets the sequence of this CreativeAssignment.

        Sequence number of the creative assignment, applicable when the rotation type is CREATIVE_ROTATION_TYPE_SEQUENTIAL. Acceptable values are 1 to 65535, inclusive.

        :param sequence: The sequence of this CreativeAssignment.
        :type sequence: int
        """

        self._sequence = sequence

    @property
    def ssl_compliant(self):
        """Gets the ssl_compliant of this CreativeAssignment.

        Whether the creative to be assigned is SSL-compliant. This is a read-only field that is auto-generated when the ad is inserted or updated.

        :return: The ssl_compliant of this CreativeAssignment.
        :rtype: bool
        """
        return self._ssl_compliant

    @ssl_compliant.setter
    def ssl_compliant(self, ssl_compliant):
        """Sets the ssl_compliant of this CreativeAssignment.

        Whether the creative to be assigned is SSL-compliant. This is a read-only field that is auto-generated when the ad is inserted or updated.

        :param ssl_compliant: The ssl_compliant of this CreativeAssignment.
        :type ssl_compliant: bool
        """

        self._ssl_compliant = ssl_compliant

    @property
    def start_time(self):
        """Gets the start_time of this CreativeAssignment.


        :return: The start_time of this CreativeAssignment.
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this CreativeAssignment.


        :param start_time: The start_time of this CreativeAssignment.
        :type start_time: datetime
        """

        self._start_time = start_time

    @property
    def weight(self):
        """Gets the weight of this CreativeAssignment.

        Weight of the creative assignment, applicable when the rotation type is CREATIVE_ROTATION_TYPE_RANDOM. Value must be greater than or equal to 1.

        :return: The weight of this CreativeAssignment.
        :rtype: int
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this CreativeAssignment.

        Weight of the creative assignment, applicable when the rotation type is CREATIVE_ROTATION_TYPE_RANDOM. Value must be greater than or equal to 1.

        :param weight: The weight of this CreativeAssignment.
        :type weight: int
        """

        self._weight = weight
