# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.click_tag import ClickTag
from openapi_server.models.creative_asset_id import CreativeAssetId
from openapi_server.models.dimension_value import DimensionValue
from openapi_server import util


class CreativeAssetMetadata(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, asset_identifier: CreativeAssetId=None, click_tags: List[ClickTag]=None, detected_features: List[str]=None, id: str=None, id_dimension_value: DimensionValue=None, kind: str=None, warned_validation_rules: List[str]=None):
        """CreativeAssetMetadata - a model defined in OpenAPI

        :param asset_identifier: The asset_identifier of this CreativeAssetMetadata.
        :param click_tags: The click_tags of this CreativeAssetMetadata.
        :param detected_features: The detected_features of this CreativeAssetMetadata.
        :param id: The id of this CreativeAssetMetadata.
        :param id_dimension_value: The id_dimension_value of this CreativeAssetMetadata.
        :param kind: The kind of this CreativeAssetMetadata.
        :param warned_validation_rules: The warned_validation_rules of this CreativeAssetMetadata.
        """
        self.openapi_types = {
            'asset_identifier': CreativeAssetId,
            'click_tags': List[ClickTag],
            'detected_features': List[str],
            'id': str,
            'id_dimension_value': DimensionValue,
            'kind': str,
            'warned_validation_rules': List[str]
        }

        self.attribute_map = {
            'asset_identifier': 'assetIdentifier',
            'click_tags': 'clickTags',
            'detected_features': 'detectedFeatures',
            'id': 'id',
            'id_dimension_value': 'idDimensionValue',
            'kind': 'kind',
            'warned_validation_rules': 'warnedValidationRules'
        }

        self._asset_identifier = asset_identifier
        self._click_tags = click_tags
        self._detected_features = detected_features
        self._id = id
        self._id_dimension_value = id_dimension_value
        self._kind = kind
        self._warned_validation_rules = warned_validation_rules

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreativeAssetMetadata':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreativeAssetMetadata of this CreativeAssetMetadata.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def asset_identifier(self):
        """Gets the asset_identifier of this CreativeAssetMetadata.


        :return: The asset_identifier of this CreativeAssetMetadata.
        :rtype: CreativeAssetId
        """
        return self._asset_identifier

    @asset_identifier.setter
    def asset_identifier(self, asset_identifier):
        """Sets the asset_identifier of this CreativeAssetMetadata.


        :param asset_identifier: The asset_identifier of this CreativeAssetMetadata.
        :type asset_identifier: CreativeAssetId
        """

        self._asset_identifier = asset_identifier

    @property
    def click_tags(self):
        """Gets the click_tags of this CreativeAssetMetadata.

        List of detected click tags for assets. This is a read-only, auto-generated field. This field is empty for a rich media asset.

        :return: The click_tags of this CreativeAssetMetadata.
        :rtype: List[ClickTag]
        """
        return self._click_tags

    @click_tags.setter
    def click_tags(self, click_tags):
        """Sets the click_tags of this CreativeAssetMetadata.

        List of detected click tags for assets. This is a read-only, auto-generated field. This field is empty for a rich media asset.

        :param click_tags: The click_tags of this CreativeAssetMetadata.
        :type click_tags: List[ClickTag]
        """

        self._click_tags = click_tags

    @property
    def detected_features(self):
        """Gets the detected_features of this CreativeAssetMetadata.

        List of feature dependencies for the creative asset that are detected by Campaign Manager. Feature dependencies are features that a browser must be able to support in order to render your HTML5 creative correctly. This is a read-only, auto-generated field.

        :return: The detected_features of this CreativeAssetMetadata.
        :rtype: List[str]
        """
        return self._detected_features

    @detected_features.setter
    def detected_features(self, detected_features):
        """Sets the detected_features of this CreativeAssetMetadata.

        List of feature dependencies for the creative asset that are detected by Campaign Manager. Feature dependencies are features that a browser must be able to support in order to render your HTML5 creative correctly. This is a read-only, auto-generated field.

        :param detected_features: The detected_features of this CreativeAssetMetadata.
        :type detected_features: List[str]
        """
        allowed_values = ["CSS_FONT_FACE", "CSS_BACKGROUND_SIZE", "CSS_BORDER_IMAGE", "CSS_BORDER_RADIUS", "CSS_BOX_SHADOW", "CSS_FLEX_BOX", "CSS_HSLA", "CSS_MULTIPLE_BGS", "CSS_OPACITY", "CSS_RGBA", "CSS_TEXT_SHADOW", "CSS_ANIMATIONS", "CSS_COLUMNS", "CSS_GENERATED_CONTENT", "CSS_GRADIENTS", "CSS_REFLECTIONS", "CSS_TRANSFORMS", "CSS_TRANSFORMS3D", "CSS_TRANSITIONS", "APPLICATION_CACHE", "CANVAS", "CANVAS_TEXT", "DRAG_AND_DROP", "HASH_CHANGE", "HISTORY", "AUDIO", "VIDEO", "INDEXED_DB", "INPUT_ATTR_AUTOCOMPLETE", "INPUT_ATTR_AUTOFOCUS", "INPUT_ATTR_LIST", "INPUT_ATTR_PLACEHOLDER", "INPUT_ATTR_MAX", "INPUT_ATTR_MIN", "INPUT_ATTR_MULTIPLE", "INPUT_ATTR_PATTERN", "INPUT_ATTR_REQUIRED", "INPUT_ATTR_STEP", "INPUT_TYPE_SEARCH", "INPUT_TYPE_TEL", "INPUT_TYPE_URL", "INPUT_TYPE_EMAIL", "INPUT_TYPE_DATETIME", "INPUT_TYPE_DATE", "INPUT_TYPE_MONTH", "INPUT_TYPE_WEEK", "INPUT_TYPE_TIME", "INPUT_TYPE_DATETIME_LOCAL", "INPUT_TYPE_NUMBER", "INPUT_TYPE_RANGE", "INPUT_TYPE_COLOR", "LOCAL_STORAGE", "POST_MESSAGE", "SESSION_STORAGE", "WEB_SOCKETS", "WEB_SQL_DATABASE", "WEB_WORKERS", "GEO_LOCATION", "INLINE_SVG", "SMIL", "SVG_HREF", "SVG_CLIP_PATHS", "TOUCH", "WEBGL", "SVG_FILTERS", "SVG_FE_IMAGE"]  # noqa: E501
        if not set(detected_features).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `detected_features` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(detected_features) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._detected_features = detected_features

    @property
    def id(self):
        """Gets the id of this CreativeAssetMetadata.

        Numeric ID of the asset. This is a read-only, auto-generated field.

        :return: The id of this CreativeAssetMetadata.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CreativeAssetMetadata.

        Numeric ID of the asset. This is a read-only, auto-generated field.

        :param id: The id of this CreativeAssetMetadata.
        :type id: str
        """

        self._id = id

    @property
    def id_dimension_value(self):
        """Gets the id_dimension_value of this CreativeAssetMetadata.


        :return: The id_dimension_value of this CreativeAssetMetadata.
        :rtype: DimensionValue
        """
        return self._id_dimension_value

    @id_dimension_value.setter
    def id_dimension_value(self, id_dimension_value):
        """Sets the id_dimension_value of this CreativeAssetMetadata.


        :param id_dimension_value: The id_dimension_value of this CreativeAssetMetadata.
        :type id_dimension_value: DimensionValue
        """

        self._id_dimension_value = id_dimension_value

    @property
    def kind(self):
        """Gets the kind of this CreativeAssetMetadata.

        Identifies what kind of resource this is. Value: the fixed string \"dfareporting#creativeAssetMetadata\".

        :return: The kind of this CreativeAssetMetadata.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this CreativeAssetMetadata.

        Identifies what kind of resource this is. Value: the fixed string \"dfareporting#creativeAssetMetadata\".

        :param kind: The kind of this CreativeAssetMetadata.
        :type kind: str
        """

        self._kind = kind

    @property
    def warned_validation_rules(self):
        """Gets the warned_validation_rules of this CreativeAssetMetadata.

        Rules validated during code generation that generated a warning. This is a read-only, auto-generated field. Possible values are: - \"ADMOB_REFERENCED\" - \"ASSET_FORMAT_UNSUPPORTED_DCM\" - \"ASSET_INVALID\" - \"CLICK_TAG_HARD_CODED\" - \"CLICK_TAG_INVALID\" - \"CLICK_TAG_IN_GWD\" - \"CLICK_TAG_MISSING\" - \"CLICK_TAG_MORE_THAN_ONE\" - \"CLICK_TAG_NON_TOP_LEVEL\" - \"COMPONENT_UNSUPPORTED_DCM\" - \"ENABLER_UNSUPPORTED_METHOD_DCM\" - \"EXTERNAL_FILE_REFERENCED\" - \"FILE_DETAIL_EMPTY\" - \"FILE_TYPE_INVALID\" - \"GWD_PROPERTIES_INVALID\" - \"HTML5_FEATURE_UNSUPPORTED\" - \"LINKED_FILE_NOT_FOUND\" - \"MAX_FLASH_VERSION_11\" - \"MRAID_REFERENCED\" - \"NOT_SSL_COMPLIANT\" - \"ORPHANED_ASSET\" - \"PRIMARY_HTML_MISSING\" - \"SVG_INVALID\" - \"ZIP_INVALID\" 

        :return: The warned_validation_rules of this CreativeAssetMetadata.
        :rtype: List[str]
        """
        return self._warned_validation_rules

    @warned_validation_rules.setter
    def warned_validation_rules(self, warned_validation_rules):
        """Sets the warned_validation_rules of this CreativeAssetMetadata.

        Rules validated during code generation that generated a warning. This is a read-only, auto-generated field. Possible values are: - \"ADMOB_REFERENCED\" - \"ASSET_FORMAT_UNSUPPORTED_DCM\" - \"ASSET_INVALID\" - \"CLICK_TAG_HARD_CODED\" - \"CLICK_TAG_INVALID\" - \"CLICK_TAG_IN_GWD\" - \"CLICK_TAG_MISSING\" - \"CLICK_TAG_MORE_THAN_ONE\" - \"CLICK_TAG_NON_TOP_LEVEL\" - \"COMPONENT_UNSUPPORTED_DCM\" - \"ENABLER_UNSUPPORTED_METHOD_DCM\" - \"EXTERNAL_FILE_REFERENCED\" - \"FILE_DETAIL_EMPTY\" - \"FILE_TYPE_INVALID\" - \"GWD_PROPERTIES_INVALID\" - \"HTML5_FEATURE_UNSUPPORTED\" - \"LINKED_FILE_NOT_FOUND\" - \"MAX_FLASH_VERSION_11\" - \"MRAID_REFERENCED\" - \"NOT_SSL_COMPLIANT\" - \"ORPHANED_ASSET\" - \"PRIMARY_HTML_MISSING\" - \"SVG_INVALID\" - \"ZIP_INVALID\" 

        :param warned_validation_rules: The warned_validation_rules of this CreativeAssetMetadata.
        :type warned_validation_rules: List[str]
        """
        allowed_values = ["CLICK_TAG_NON_TOP_LEVEL", "CLICK_TAG_MISSING", "CLICK_TAG_MORE_THAN_ONE", "CLICK_TAG_INVALID", "ORPHANED_ASSET", "PRIMARY_HTML_MISSING", "EXTERNAL_FILE_REFERENCED", "MRAID_REFERENCED", "ADMOB_REFERENCED", "FILE_TYPE_INVALID", "ZIP_INVALID", "LINKED_FILE_NOT_FOUND", "MAX_FLASH_VERSION_11", "NOT_SSL_COMPLIANT", "FILE_DETAIL_EMPTY", "ASSET_INVALID", "GWD_PROPERTIES_INVALID", "ENABLER_UNSUPPORTED_METHOD_DCM", "ASSET_FORMAT_UNSUPPORTED_DCM", "COMPONENT_UNSUPPORTED_DCM", "HTML5_FEATURE_UNSUPPORTED", "CLICK_TAG_IN_GWD", "CLICK_TAG_HARD_CODED", "SVG_INVALID", "CLICK_TAG_IN_RICH_MEDIA"]  # noqa: E501
        if not set(warned_validation_rules).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `warned_validation_rules` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(warned_validation_rules) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._warned_validation_rules = warned_validation_rules
