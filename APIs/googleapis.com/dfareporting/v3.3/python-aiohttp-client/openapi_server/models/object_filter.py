# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ObjectFilter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, kind: str=None, object_ids: List[str]=None, status: str=None):
        """ObjectFilter - a model defined in OpenAPI

        :param kind: The kind of this ObjectFilter.
        :param object_ids: The object_ids of this ObjectFilter.
        :param status: The status of this ObjectFilter.
        """
        self.openapi_types = {
            'kind': str,
            'object_ids': List[str],
            'status': str
        }

        self.attribute_map = {
            'kind': 'kind',
            'object_ids': 'objectIds',
            'status': 'status'
        }

        self._kind = kind
        self._object_ids = object_ids
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ObjectFilter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ObjectFilter of this ObjectFilter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def kind(self):
        """Gets the kind of this ObjectFilter.

        Identifies what kind of resource this is. Value: the fixed string \"dfareporting#objectFilter\".

        :return: The kind of this ObjectFilter.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this ObjectFilter.

        Identifies what kind of resource this is. Value: the fixed string \"dfareporting#objectFilter\".

        :param kind: The kind of this ObjectFilter.
        :type kind: str
        """

        self._kind = kind

    @property
    def object_ids(self):
        """Gets the object_ids of this ObjectFilter.

        Applicable when status is ASSIGNED. The user has access to objects with these object IDs.

        :return: The object_ids of this ObjectFilter.
        :rtype: List[str]
        """
        return self._object_ids

    @object_ids.setter
    def object_ids(self, object_ids):
        """Sets the object_ids of this ObjectFilter.

        Applicable when status is ASSIGNED. The user has access to objects with these object IDs.

        :param object_ids: The object_ids of this ObjectFilter.
        :type object_ids: List[str]
        """

        self._object_ids = object_ids

    @property
    def status(self):
        """Gets the status of this ObjectFilter.

        Status of the filter. NONE means the user has access to none of the objects. ALL means the user has access to all objects. ASSIGNED means the user has access to the objects with IDs in the objectIds list.

        :return: The status of this ObjectFilter.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ObjectFilter.

        Status of the filter. NONE means the user has access to none of the objects. ALL means the user has access to all objects. ASSIGNED means the user has access to the objects with IDs in the objectIds list.

        :param status: The status of this ObjectFilter.
        :type status: str
        """
        allowed_values = ["NONE", "ASSIGNED", "ALL"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status
