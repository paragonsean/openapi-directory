# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AdBlockingConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, click_through_url: str=None, creative_bundle_id: str=None, enabled: bool=None, override_click_through_url: bool=None):
        """AdBlockingConfiguration - a model defined in OpenAPI

        :param click_through_url: The click_through_url of this AdBlockingConfiguration.
        :param creative_bundle_id: The creative_bundle_id of this AdBlockingConfiguration.
        :param enabled: The enabled of this AdBlockingConfiguration.
        :param override_click_through_url: The override_click_through_url of this AdBlockingConfiguration.
        """
        self.openapi_types = {
            'click_through_url': str,
            'creative_bundle_id': str,
            'enabled': bool,
            'override_click_through_url': bool
        }

        self.attribute_map = {
            'click_through_url': 'clickThroughUrl',
            'creative_bundle_id': 'creativeBundleId',
            'enabled': 'enabled',
            'override_click_through_url': 'overrideClickThroughUrl'
        }

        self._click_through_url = click_through_url
        self._creative_bundle_id = creative_bundle_id
        self._enabled = enabled
        self._override_click_through_url = override_click_through_url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AdBlockingConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AdBlockingConfiguration of this AdBlockingConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def click_through_url(self):
        """Gets the click_through_url of this AdBlockingConfiguration.

        Click-through URL used by brand-neutral ads. This is a required field when overrideClickThroughUrl is set to true.

        :return: The click_through_url of this AdBlockingConfiguration.
        :rtype: str
        """
        return self._click_through_url

    @click_through_url.setter
    def click_through_url(self, click_through_url):
        """Sets the click_through_url of this AdBlockingConfiguration.

        Click-through URL used by brand-neutral ads. This is a required field when overrideClickThroughUrl is set to true.

        :param click_through_url: The click_through_url of this AdBlockingConfiguration.
        :type click_through_url: str
        """

        self._click_through_url = click_through_url

    @property
    def creative_bundle_id(self):
        """Gets the creative_bundle_id of this AdBlockingConfiguration.

        ID of a creative bundle to use for this campaign. If set, brand-neutral ads will select creatives from this bundle. Otherwise, a default transparent pixel will be used.

        :return: The creative_bundle_id of this AdBlockingConfiguration.
        :rtype: str
        """
        return self._creative_bundle_id

    @creative_bundle_id.setter
    def creative_bundle_id(self, creative_bundle_id):
        """Sets the creative_bundle_id of this AdBlockingConfiguration.

        ID of a creative bundle to use for this campaign. If set, brand-neutral ads will select creatives from this bundle. Otherwise, a default transparent pixel will be used.

        :param creative_bundle_id: The creative_bundle_id of this AdBlockingConfiguration.
        :type creative_bundle_id: str
        """

        self._creative_bundle_id = creative_bundle_id

    @property
    def enabled(self):
        """Gets the enabled of this AdBlockingConfiguration.

        Whether this campaign has enabled ad blocking. When true, ad blocking is enabled for placements in the campaign, but this may be overridden by site and placement settings. When false, ad blocking is disabled for all placements under the campaign, regardless of site and placement settings.

        :return: The enabled of this AdBlockingConfiguration.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this AdBlockingConfiguration.

        Whether this campaign has enabled ad blocking. When true, ad blocking is enabled for placements in the campaign, but this may be overridden by site and placement settings. When false, ad blocking is disabled for all placements under the campaign, regardless of site and placement settings.

        :param enabled: The enabled of this AdBlockingConfiguration.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def override_click_through_url(self):
        """Gets the override_click_through_url of this AdBlockingConfiguration.

        Whether the brand-neutral ad's click-through URL comes from the campaign's creative bundle or the override URL. Must be set to true if ad blocking is enabled and no creative bundle is configured.

        :return: The override_click_through_url of this AdBlockingConfiguration.
        :rtype: bool
        """
        return self._override_click_through_url

    @override_click_through_url.setter
    def override_click_through_url(self, override_click_through_url):
        """Sets the override_click_through_url of this AdBlockingConfiguration.

        Whether the brand-neutral ad's click-through URL comes from the campaign's creative bundle or the override URL. Must be set to true if ad blocking is enabled and no creative bundle is configured.

        :param override_click_through_url: The override_click_through_url of this AdBlockingConfiguration.
        :type override_click_through_url: bool
        """

        self._override_click_through_url = override_click_through_url
