# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.dimension_value import DimensionValue
from openapi_server.models.floodlight_activity_dynamic_tag import FloodlightActivityDynamicTag
from openapi_server.models.floodlight_activity_publisher_dynamic_tag import FloodlightActivityPublisherDynamicTag
from openapi_server import util


class FloodlightActivity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_id: str=None, advertiser_id: str=None, advertiser_id_dimension_value: DimensionValue=None, cache_busting_type: str=None, counting_method: str=None, default_tags: List[FloodlightActivityDynamicTag]=None, expected_url: str=None, floodlight_activity_group_id: str=None, floodlight_activity_group_name: str=None, floodlight_activity_group_tag_string: str=None, floodlight_activity_group_type: str=None, floodlight_configuration_id: str=None, floodlight_configuration_id_dimension_value: DimensionValue=None, floodlight_tag_type: str=None, hidden: bool=None, id: str=None, id_dimension_value: DimensionValue=None, kind: str=None, name: str=None, notes: str=None, publisher_tags: List[FloodlightActivityPublisherDynamicTag]=None, secure: bool=None, ssl_compliant: bool=None, ssl_required: bool=None, subaccount_id: str=None, tag_format: str=None, tag_string: str=None, user_defined_variable_types: List[str]=None):
        """FloodlightActivity - a model defined in OpenAPI

        :param account_id: The account_id of this FloodlightActivity.
        :param advertiser_id: The advertiser_id of this FloodlightActivity.
        :param advertiser_id_dimension_value: The advertiser_id_dimension_value of this FloodlightActivity.
        :param cache_busting_type: The cache_busting_type of this FloodlightActivity.
        :param counting_method: The counting_method of this FloodlightActivity.
        :param default_tags: The default_tags of this FloodlightActivity.
        :param expected_url: The expected_url of this FloodlightActivity.
        :param floodlight_activity_group_id: The floodlight_activity_group_id of this FloodlightActivity.
        :param floodlight_activity_group_name: The floodlight_activity_group_name of this FloodlightActivity.
        :param floodlight_activity_group_tag_string: The floodlight_activity_group_tag_string of this FloodlightActivity.
        :param floodlight_activity_group_type: The floodlight_activity_group_type of this FloodlightActivity.
        :param floodlight_configuration_id: The floodlight_configuration_id of this FloodlightActivity.
        :param floodlight_configuration_id_dimension_value: The floodlight_configuration_id_dimension_value of this FloodlightActivity.
        :param floodlight_tag_type: The floodlight_tag_type of this FloodlightActivity.
        :param hidden: The hidden of this FloodlightActivity.
        :param id: The id of this FloodlightActivity.
        :param id_dimension_value: The id_dimension_value of this FloodlightActivity.
        :param kind: The kind of this FloodlightActivity.
        :param name: The name of this FloodlightActivity.
        :param notes: The notes of this FloodlightActivity.
        :param publisher_tags: The publisher_tags of this FloodlightActivity.
        :param secure: The secure of this FloodlightActivity.
        :param ssl_compliant: The ssl_compliant of this FloodlightActivity.
        :param ssl_required: The ssl_required of this FloodlightActivity.
        :param subaccount_id: The subaccount_id of this FloodlightActivity.
        :param tag_format: The tag_format of this FloodlightActivity.
        :param tag_string: The tag_string of this FloodlightActivity.
        :param user_defined_variable_types: The user_defined_variable_types of this FloodlightActivity.
        """
        self.openapi_types = {
            'account_id': str,
            'advertiser_id': str,
            'advertiser_id_dimension_value': DimensionValue,
            'cache_busting_type': str,
            'counting_method': str,
            'default_tags': List[FloodlightActivityDynamicTag],
            'expected_url': str,
            'floodlight_activity_group_id': str,
            'floodlight_activity_group_name': str,
            'floodlight_activity_group_tag_string': str,
            'floodlight_activity_group_type': str,
            'floodlight_configuration_id': str,
            'floodlight_configuration_id_dimension_value': DimensionValue,
            'floodlight_tag_type': str,
            'hidden': bool,
            'id': str,
            'id_dimension_value': DimensionValue,
            'kind': str,
            'name': str,
            'notes': str,
            'publisher_tags': List[FloodlightActivityPublisherDynamicTag],
            'secure': bool,
            'ssl_compliant': bool,
            'ssl_required': bool,
            'subaccount_id': str,
            'tag_format': str,
            'tag_string': str,
            'user_defined_variable_types': List[str]
        }

        self.attribute_map = {
            'account_id': 'accountId',
            'advertiser_id': 'advertiserId',
            'advertiser_id_dimension_value': 'advertiserIdDimensionValue',
            'cache_busting_type': 'cacheBustingType',
            'counting_method': 'countingMethod',
            'default_tags': 'defaultTags',
            'expected_url': 'expectedUrl',
            'floodlight_activity_group_id': 'floodlightActivityGroupId',
            'floodlight_activity_group_name': 'floodlightActivityGroupName',
            'floodlight_activity_group_tag_string': 'floodlightActivityGroupTagString',
            'floodlight_activity_group_type': 'floodlightActivityGroupType',
            'floodlight_configuration_id': 'floodlightConfigurationId',
            'floodlight_configuration_id_dimension_value': 'floodlightConfigurationIdDimensionValue',
            'floodlight_tag_type': 'floodlightTagType',
            'hidden': 'hidden',
            'id': 'id',
            'id_dimension_value': 'idDimensionValue',
            'kind': 'kind',
            'name': 'name',
            'notes': 'notes',
            'publisher_tags': 'publisherTags',
            'secure': 'secure',
            'ssl_compliant': 'sslCompliant',
            'ssl_required': 'sslRequired',
            'subaccount_id': 'subaccountId',
            'tag_format': 'tagFormat',
            'tag_string': 'tagString',
            'user_defined_variable_types': 'userDefinedVariableTypes'
        }

        self._account_id = account_id
        self._advertiser_id = advertiser_id
        self._advertiser_id_dimension_value = advertiser_id_dimension_value
        self._cache_busting_type = cache_busting_type
        self._counting_method = counting_method
        self._default_tags = default_tags
        self._expected_url = expected_url
        self._floodlight_activity_group_id = floodlight_activity_group_id
        self._floodlight_activity_group_name = floodlight_activity_group_name
        self._floodlight_activity_group_tag_string = floodlight_activity_group_tag_string
        self._floodlight_activity_group_type = floodlight_activity_group_type
        self._floodlight_configuration_id = floodlight_configuration_id
        self._floodlight_configuration_id_dimension_value = floodlight_configuration_id_dimension_value
        self._floodlight_tag_type = floodlight_tag_type
        self._hidden = hidden
        self._id = id
        self._id_dimension_value = id_dimension_value
        self._kind = kind
        self._name = name
        self._notes = notes
        self._publisher_tags = publisher_tags
        self._secure = secure
        self._ssl_compliant = ssl_compliant
        self._ssl_required = ssl_required
        self._subaccount_id = subaccount_id
        self._tag_format = tag_format
        self._tag_string = tag_string
        self._user_defined_variable_types = user_defined_variable_types

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FloodlightActivity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FloodlightActivity of this FloodlightActivity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id(self):
        """Gets the account_id of this FloodlightActivity.

        Account ID of this floodlight activity. This is a read-only field that can be left blank.

        :return: The account_id of this FloodlightActivity.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this FloodlightActivity.

        Account ID of this floodlight activity. This is a read-only field that can be left blank.

        :param account_id: The account_id of this FloodlightActivity.
        :type account_id: str
        """

        self._account_id = account_id

    @property
    def advertiser_id(self):
        """Gets the advertiser_id of this FloodlightActivity.

        Advertiser ID of this floodlight activity. If this field is left blank, the value will be copied over either from the activity group's advertiser or the existing activity's advertiser.

        :return: The advertiser_id of this FloodlightActivity.
        :rtype: str
        """
        return self._advertiser_id

    @advertiser_id.setter
    def advertiser_id(self, advertiser_id):
        """Sets the advertiser_id of this FloodlightActivity.

        Advertiser ID of this floodlight activity. If this field is left blank, the value will be copied over either from the activity group's advertiser or the existing activity's advertiser.

        :param advertiser_id: The advertiser_id of this FloodlightActivity.
        :type advertiser_id: str
        """

        self._advertiser_id = advertiser_id

    @property
    def advertiser_id_dimension_value(self):
        """Gets the advertiser_id_dimension_value of this FloodlightActivity.


        :return: The advertiser_id_dimension_value of this FloodlightActivity.
        :rtype: DimensionValue
        """
        return self._advertiser_id_dimension_value

    @advertiser_id_dimension_value.setter
    def advertiser_id_dimension_value(self, advertiser_id_dimension_value):
        """Sets the advertiser_id_dimension_value of this FloodlightActivity.


        :param advertiser_id_dimension_value: The advertiser_id_dimension_value of this FloodlightActivity.
        :type advertiser_id_dimension_value: DimensionValue
        """

        self._advertiser_id_dimension_value = advertiser_id_dimension_value

    @property
    def cache_busting_type(self):
        """Gets the cache_busting_type of this FloodlightActivity.

        Code type used for cache busting in the generated tag. Applicable only when floodlightActivityGroupType is COUNTER and countingMethod is STANDARD_COUNTING or UNIQUE_COUNTING.

        :return: The cache_busting_type of this FloodlightActivity.
        :rtype: str
        """
        return self._cache_busting_type

    @cache_busting_type.setter
    def cache_busting_type(self, cache_busting_type):
        """Sets the cache_busting_type of this FloodlightActivity.

        Code type used for cache busting in the generated tag. Applicable only when floodlightActivityGroupType is COUNTER and countingMethod is STANDARD_COUNTING or UNIQUE_COUNTING.

        :param cache_busting_type: The cache_busting_type of this FloodlightActivity.
        :type cache_busting_type: str
        """
        allowed_values = ["JAVASCRIPT", "ACTIVE_SERVER_PAGE", "JSP", "PHP", "COLD_FUSION"]  # noqa: E501
        if cache_busting_type not in allowed_values:
            raise ValueError(
                "Invalid value for `cache_busting_type` ({0}), must be one of {1}"
                .format(cache_busting_type, allowed_values)
            )

        self._cache_busting_type = cache_busting_type

    @property
    def counting_method(self):
        """Gets the counting_method of this FloodlightActivity.

        Counting method for conversions for this floodlight activity. This is a required field.

        :return: The counting_method of this FloodlightActivity.
        :rtype: str
        """
        return self._counting_method

    @counting_method.setter
    def counting_method(self, counting_method):
        """Sets the counting_method of this FloodlightActivity.

        Counting method for conversions for this floodlight activity. This is a required field.

        :param counting_method: The counting_method of this FloodlightActivity.
        :type counting_method: str
        """
        allowed_values = ["STANDARD_COUNTING", "UNIQUE_COUNTING", "SESSION_COUNTING", "TRANSACTIONS_COUNTING", "ITEMS_SOLD_COUNTING"]  # noqa: E501
        if counting_method not in allowed_values:
            raise ValueError(
                "Invalid value for `counting_method` ({0}), must be one of {1}"
                .format(counting_method, allowed_values)
            )

        self._counting_method = counting_method

    @property
    def default_tags(self):
        """Gets the default_tags of this FloodlightActivity.

        Dynamic floodlight tags.

        :return: The default_tags of this FloodlightActivity.
        :rtype: List[FloodlightActivityDynamicTag]
        """
        return self._default_tags

    @default_tags.setter
    def default_tags(self, default_tags):
        """Sets the default_tags of this FloodlightActivity.

        Dynamic floodlight tags.

        :param default_tags: The default_tags of this FloodlightActivity.
        :type default_tags: List[FloodlightActivityDynamicTag]
        """

        self._default_tags = default_tags

    @property
    def expected_url(self):
        """Gets the expected_url of this FloodlightActivity.

        URL where this tag will be deployed. If specified, must be less than 256 characters long.

        :return: The expected_url of this FloodlightActivity.
        :rtype: str
        """
        return self._expected_url

    @expected_url.setter
    def expected_url(self, expected_url):
        """Sets the expected_url of this FloodlightActivity.

        URL where this tag will be deployed. If specified, must be less than 256 characters long.

        :param expected_url: The expected_url of this FloodlightActivity.
        :type expected_url: str
        """

        self._expected_url = expected_url

    @property
    def floodlight_activity_group_id(self):
        """Gets the floodlight_activity_group_id of this FloodlightActivity.

        Floodlight activity group ID of this floodlight activity. This is a required field.

        :return: The floodlight_activity_group_id of this FloodlightActivity.
        :rtype: str
        """
        return self._floodlight_activity_group_id

    @floodlight_activity_group_id.setter
    def floodlight_activity_group_id(self, floodlight_activity_group_id):
        """Sets the floodlight_activity_group_id of this FloodlightActivity.

        Floodlight activity group ID of this floodlight activity. This is a required field.

        :param floodlight_activity_group_id: The floodlight_activity_group_id of this FloodlightActivity.
        :type floodlight_activity_group_id: str
        """

        self._floodlight_activity_group_id = floodlight_activity_group_id

    @property
    def floodlight_activity_group_name(self):
        """Gets the floodlight_activity_group_name of this FloodlightActivity.

        Name of the associated floodlight activity group. This is a read-only field.

        :return: The floodlight_activity_group_name of this FloodlightActivity.
        :rtype: str
        """
        return self._floodlight_activity_group_name

    @floodlight_activity_group_name.setter
    def floodlight_activity_group_name(self, floodlight_activity_group_name):
        """Sets the floodlight_activity_group_name of this FloodlightActivity.

        Name of the associated floodlight activity group. This is a read-only field.

        :param floodlight_activity_group_name: The floodlight_activity_group_name of this FloodlightActivity.
        :type floodlight_activity_group_name: str
        """

        self._floodlight_activity_group_name = floodlight_activity_group_name

    @property
    def floodlight_activity_group_tag_string(self):
        """Gets the floodlight_activity_group_tag_string of this FloodlightActivity.

        Tag string of the associated floodlight activity group. This is a read-only field.

        :return: The floodlight_activity_group_tag_string of this FloodlightActivity.
        :rtype: str
        """
        return self._floodlight_activity_group_tag_string

    @floodlight_activity_group_tag_string.setter
    def floodlight_activity_group_tag_string(self, floodlight_activity_group_tag_string):
        """Sets the floodlight_activity_group_tag_string of this FloodlightActivity.

        Tag string of the associated floodlight activity group. This is a read-only field.

        :param floodlight_activity_group_tag_string: The floodlight_activity_group_tag_string of this FloodlightActivity.
        :type floodlight_activity_group_tag_string: str
        """

        self._floodlight_activity_group_tag_string = floodlight_activity_group_tag_string

    @property
    def floodlight_activity_group_type(self):
        """Gets the floodlight_activity_group_type of this FloodlightActivity.

        Type of the associated floodlight activity group. This is a read-only field.

        :return: The floodlight_activity_group_type of this FloodlightActivity.
        :rtype: str
        """
        return self._floodlight_activity_group_type

    @floodlight_activity_group_type.setter
    def floodlight_activity_group_type(self, floodlight_activity_group_type):
        """Sets the floodlight_activity_group_type of this FloodlightActivity.

        Type of the associated floodlight activity group. This is a read-only field.

        :param floodlight_activity_group_type: The floodlight_activity_group_type of this FloodlightActivity.
        :type floodlight_activity_group_type: str
        """
        allowed_values = ["COUNTER", "SALE"]  # noqa: E501
        if floodlight_activity_group_type not in allowed_values:
            raise ValueError(
                "Invalid value for `floodlight_activity_group_type` ({0}), must be one of {1}"
                .format(floodlight_activity_group_type, allowed_values)
            )

        self._floodlight_activity_group_type = floodlight_activity_group_type

    @property
    def floodlight_configuration_id(self):
        """Gets the floodlight_configuration_id of this FloodlightActivity.

        Floodlight configuration ID of this floodlight activity. If this field is left blank, the value will be copied over either from the activity group's floodlight configuration or from the existing activity's floodlight configuration.

        :return: The floodlight_configuration_id of this FloodlightActivity.
        :rtype: str
        """
        return self._floodlight_configuration_id

    @floodlight_configuration_id.setter
    def floodlight_configuration_id(self, floodlight_configuration_id):
        """Sets the floodlight_configuration_id of this FloodlightActivity.

        Floodlight configuration ID of this floodlight activity. If this field is left blank, the value will be copied over either from the activity group's floodlight configuration or from the existing activity's floodlight configuration.

        :param floodlight_configuration_id: The floodlight_configuration_id of this FloodlightActivity.
        :type floodlight_configuration_id: str
        """

        self._floodlight_configuration_id = floodlight_configuration_id

    @property
    def floodlight_configuration_id_dimension_value(self):
        """Gets the floodlight_configuration_id_dimension_value of this FloodlightActivity.


        :return: The floodlight_configuration_id_dimension_value of this FloodlightActivity.
        :rtype: DimensionValue
        """
        return self._floodlight_configuration_id_dimension_value

    @floodlight_configuration_id_dimension_value.setter
    def floodlight_configuration_id_dimension_value(self, floodlight_configuration_id_dimension_value):
        """Sets the floodlight_configuration_id_dimension_value of this FloodlightActivity.


        :param floodlight_configuration_id_dimension_value: The floodlight_configuration_id_dimension_value of this FloodlightActivity.
        :type floodlight_configuration_id_dimension_value: DimensionValue
        """

        self._floodlight_configuration_id_dimension_value = floodlight_configuration_id_dimension_value

    @property
    def floodlight_tag_type(self):
        """Gets the floodlight_tag_type of this FloodlightActivity.

        The type of Floodlight tag this activity will generate. This is a required field.

        :return: The floodlight_tag_type of this FloodlightActivity.
        :rtype: str
        """
        return self._floodlight_tag_type

    @floodlight_tag_type.setter
    def floodlight_tag_type(self, floodlight_tag_type):
        """Sets the floodlight_tag_type of this FloodlightActivity.

        The type of Floodlight tag this activity will generate. This is a required field.

        :param floodlight_tag_type: The floodlight_tag_type of this FloodlightActivity.
        :type floodlight_tag_type: str
        """
        allowed_values = ["IFRAME", "IMAGE", "GLOBAL_SITE_TAG"]  # noqa: E501
        if floodlight_tag_type not in allowed_values:
            raise ValueError(
                "Invalid value for `floodlight_tag_type` ({0}), must be one of {1}"
                .format(floodlight_tag_type, allowed_values)
            )

        self._floodlight_tag_type = floodlight_tag_type

    @property
    def hidden(self):
        """Gets the hidden of this FloodlightActivity.

        Whether this activity is archived.

        :return: The hidden of this FloodlightActivity.
        :rtype: bool
        """
        return self._hidden

    @hidden.setter
    def hidden(self, hidden):
        """Sets the hidden of this FloodlightActivity.

        Whether this activity is archived.

        :param hidden: The hidden of this FloodlightActivity.
        :type hidden: bool
        """

        self._hidden = hidden

    @property
    def id(self):
        """Gets the id of this FloodlightActivity.

        ID of this floodlight activity. This is a read-only, auto-generated field.

        :return: The id of this FloodlightActivity.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this FloodlightActivity.

        ID of this floodlight activity. This is a read-only, auto-generated field.

        :param id: The id of this FloodlightActivity.
        :type id: str
        """

        self._id = id

    @property
    def id_dimension_value(self):
        """Gets the id_dimension_value of this FloodlightActivity.


        :return: The id_dimension_value of this FloodlightActivity.
        :rtype: DimensionValue
        """
        return self._id_dimension_value

    @id_dimension_value.setter
    def id_dimension_value(self, id_dimension_value):
        """Sets the id_dimension_value of this FloodlightActivity.


        :param id_dimension_value: The id_dimension_value of this FloodlightActivity.
        :type id_dimension_value: DimensionValue
        """

        self._id_dimension_value = id_dimension_value

    @property
    def kind(self):
        """Gets the kind of this FloodlightActivity.

        Identifies what kind of resource this is. Value: the fixed string \"dfareporting#floodlightActivity\".

        :return: The kind of this FloodlightActivity.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this FloodlightActivity.

        Identifies what kind of resource this is. Value: the fixed string \"dfareporting#floodlightActivity\".

        :param kind: The kind of this FloodlightActivity.
        :type kind: str
        """

        self._kind = kind

    @property
    def name(self):
        """Gets the name of this FloodlightActivity.

        Name of this floodlight activity. This is a required field. Must be less than 129 characters long and cannot contain quotes.

        :return: The name of this FloodlightActivity.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FloodlightActivity.

        Name of this floodlight activity. This is a required field. Must be less than 129 characters long and cannot contain quotes.

        :param name: The name of this FloodlightActivity.
        :type name: str
        """

        self._name = name

    @property
    def notes(self):
        """Gets the notes of this FloodlightActivity.

        General notes or implementation instructions for the tag.

        :return: The notes of this FloodlightActivity.
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this FloodlightActivity.

        General notes or implementation instructions for the tag.

        :param notes: The notes of this FloodlightActivity.
        :type notes: str
        """

        self._notes = notes

    @property
    def publisher_tags(self):
        """Gets the publisher_tags of this FloodlightActivity.

        Publisher dynamic floodlight tags.

        :return: The publisher_tags of this FloodlightActivity.
        :rtype: List[FloodlightActivityPublisherDynamicTag]
        """
        return self._publisher_tags

    @publisher_tags.setter
    def publisher_tags(self, publisher_tags):
        """Sets the publisher_tags of this FloodlightActivity.

        Publisher dynamic floodlight tags.

        :param publisher_tags: The publisher_tags of this FloodlightActivity.
        :type publisher_tags: List[FloodlightActivityPublisherDynamicTag]
        """

        self._publisher_tags = publisher_tags

    @property
    def secure(self):
        """Gets the secure of this FloodlightActivity.

        Whether this tag should use SSL.

        :return: The secure of this FloodlightActivity.
        :rtype: bool
        """
        return self._secure

    @secure.setter
    def secure(self, secure):
        """Sets the secure of this FloodlightActivity.

        Whether this tag should use SSL.

        :param secure: The secure of this FloodlightActivity.
        :type secure: bool
        """

        self._secure = secure

    @property
    def ssl_compliant(self):
        """Gets the ssl_compliant of this FloodlightActivity.

        Whether the floodlight activity is SSL-compliant. This is a read-only field, its value detected by the system from the floodlight tags.

        :return: The ssl_compliant of this FloodlightActivity.
        :rtype: bool
        """
        return self._ssl_compliant

    @ssl_compliant.setter
    def ssl_compliant(self, ssl_compliant):
        """Sets the ssl_compliant of this FloodlightActivity.

        Whether the floodlight activity is SSL-compliant. This is a read-only field, its value detected by the system from the floodlight tags.

        :param ssl_compliant: The ssl_compliant of this FloodlightActivity.
        :type ssl_compliant: bool
        """

        self._ssl_compliant = ssl_compliant

    @property
    def ssl_required(self):
        """Gets the ssl_required of this FloodlightActivity.

        Whether this floodlight activity must be SSL-compliant.

        :return: The ssl_required of this FloodlightActivity.
        :rtype: bool
        """
        return self._ssl_required

    @ssl_required.setter
    def ssl_required(self, ssl_required):
        """Sets the ssl_required of this FloodlightActivity.

        Whether this floodlight activity must be SSL-compliant.

        :param ssl_required: The ssl_required of this FloodlightActivity.
        :type ssl_required: bool
        """

        self._ssl_required = ssl_required

    @property
    def subaccount_id(self):
        """Gets the subaccount_id of this FloodlightActivity.

        Subaccount ID of this floodlight activity. This is a read-only field that can be left blank.

        :return: The subaccount_id of this FloodlightActivity.
        :rtype: str
        """
        return self._subaccount_id

    @subaccount_id.setter
    def subaccount_id(self, subaccount_id):
        """Sets the subaccount_id of this FloodlightActivity.

        Subaccount ID of this floodlight activity. This is a read-only field that can be left blank.

        :param subaccount_id: The subaccount_id of this FloodlightActivity.
        :type subaccount_id: str
        """

        self._subaccount_id = subaccount_id

    @property
    def tag_format(self):
        """Gets the tag_format of this FloodlightActivity.

        Tag format type for the floodlight activity. If left blank, the tag format will default to HTML.

        :return: The tag_format of this FloodlightActivity.
        :rtype: str
        """
        return self._tag_format

    @tag_format.setter
    def tag_format(self, tag_format):
        """Sets the tag_format of this FloodlightActivity.

        Tag format type for the floodlight activity. If left blank, the tag format will default to HTML.

        :param tag_format: The tag_format of this FloodlightActivity.
        :type tag_format: str
        """
        allowed_values = ["HTML", "XHTML"]  # noqa: E501
        if tag_format not in allowed_values:
            raise ValueError(
                "Invalid value for `tag_format` ({0}), must be one of {1}"
                .format(tag_format, allowed_values)
            )

        self._tag_format = tag_format

    @property
    def tag_string(self):
        """Gets the tag_string of this FloodlightActivity.

        Value of the cat= parameter in the floodlight tag, which the ad servers use to identify the activity. This is optional: if empty, a new tag string will be generated for you. This string must be 1 to 8 characters long, with valid characters being a-z0-9[ _ ]. This tag string must also be unique among activities of the same activity group. This field is read-only after insertion.

        :return: The tag_string of this FloodlightActivity.
        :rtype: str
        """
        return self._tag_string

    @tag_string.setter
    def tag_string(self, tag_string):
        """Sets the tag_string of this FloodlightActivity.

        Value of the cat= parameter in the floodlight tag, which the ad servers use to identify the activity. This is optional: if empty, a new tag string will be generated for you. This string must be 1 to 8 characters long, with valid characters being a-z0-9[ _ ]. This tag string must also be unique among activities of the same activity group. This field is read-only after insertion.

        :param tag_string: The tag_string of this FloodlightActivity.
        :type tag_string: str
        """

        self._tag_string = tag_string

    @property
    def user_defined_variable_types(self):
        """Gets the user_defined_variable_types of this FloodlightActivity.

        List of the user-defined variables used by this conversion tag. These map to the \"u[1-100]=\" in the tags. Each of these can have a user defined type. Acceptable values are U1 to U100, inclusive. 

        :return: The user_defined_variable_types of this FloodlightActivity.
        :rtype: List[str]
        """
        return self._user_defined_variable_types

    @user_defined_variable_types.setter
    def user_defined_variable_types(self, user_defined_variable_types):
        """Sets the user_defined_variable_types of this FloodlightActivity.

        List of the user-defined variables used by this conversion tag. These map to the \"u[1-100]=\" in the tags. Each of these can have a user defined type. Acceptable values are U1 to U100, inclusive. 

        :param user_defined_variable_types: The user_defined_variable_types of this FloodlightActivity.
        :type user_defined_variable_types: List[str]
        """
        allowed_values = ["U1", "U2", "U3", "U4", "U5", "U6", "U7", "U8", "U9", "U10", "U11", "U12", "U13", "U14", "U15", "U16", "U17", "U18", "U19", "U20", "U21", "U22", "U23", "U24", "U25", "U26", "U27", "U28", "U29", "U30", "U31", "U32", "U33", "U34", "U35", "U36", "U37", "U38", "U39", "U40", "U41", "U42", "U43", "U44", "U45", "U46", "U47", "U48", "U49", "U50", "U51", "U52", "U53", "U54", "U55", "U56", "U57", "U58", "U59", "U60", "U61", "U62", "U63", "U64", "U65", "U66", "U67", "U68", "U69", "U70", "U71", "U72", "U73", "U74", "U75", "U76", "U77", "U78", "U79", "U80", "U81", "U82", "U83", "U84", "U85", "U86", "U87", "U88", "U89", "U90", "U91", "U92", "U93", "U94", "U95", "U96", "U97", "U98", "U99", "U100"]  # noqa: E501
        if not set(user_defined_variable_types).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `user_defined_variable_types` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(user_defined_variable_types) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._user_defined_variable_types = user_defined_variable_types
