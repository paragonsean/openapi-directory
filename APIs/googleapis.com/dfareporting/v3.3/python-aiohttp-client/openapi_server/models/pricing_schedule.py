# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.pricing_schedule_pricing_period import PricingSchedulePricingPeriod
from openapi_server import util


class PricingSchedule(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cap_cost_option: str=None, disregard_overdelivery: bool=None, end_date: date=None, flighted: bool=None, floodlight_activity_id: str=None, pricing_periods: List[PricingSchedulePricingPeriod]=None, pricing_type: str=None, start_date: date=None, testing_start_date: date=None):
        """PricingSchedule - a model defined in OpenAPI

        :param cap_cost_option: The cap_cost_option of this PricingSchedule.
        :param disregard_overdelivery: The disregard_overdelivery of this PricingSchedule.
        :param end_date: The end_date of this PricingSchedule.
        :param flighted: The flighted of this PricingSchedule.
        :param floodlight_activity_id: The floodlight_activity_id of this PricingSchedule.
        :param pricing_periods: The pricing_periods of this PricingSchedule.
        :param pricing_type: The pricing_type of this PricingSchedule.
        :param start_date: The start_date of this PricingSchedule.
        :param testing_start_date: The testing_start_date of this PricingSchedule.
        """
        self.openapi_types = {
            'cap_cost_option': str,
            'disregard_overdelivery': bool,
            'end_date': date,
            'flighted': bool,
            'floodlight_activity_id': str,
            'pricing_periods': List[PricingSchedulePricingPeriod],
            'pricing_type': str,
            'start_date': date,
            'testing_start_date': date
        }

        self.attribute_map = {
            'cap_cost_option': 'capCostOption',
            'disregard_overdelivery': 'disregardOverdelivery',
            'end_date': 'endDate',
            'flighted': 'flighted',
            'floodlight_activity_id': 'floodlightActivityId',
            'pricing_periods': 'pricingPeriods',
            'pricing_type': 'pricingType',
            'start_date': 'startDate',
            'testing_start_date': 'testingStartDate'
        }

        self._cap_cost_option = cap_cost_option
        self._disregard_overdelivery = disregard_overdelivery
        self._end_date = end_date
        self._flighted = flighted
        self._floodlight_activity_id = floodlight_activity_id
        self._pricing_periods = pricing_periods
        self._pricing_type = pricing_type
        self._start_date = start_date
        self._testing_start_date = testing_start_date

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PricingSchedule':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PricingSchedule of this PricingSchedule.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cap_cost_option(self):
        """Gets the cap_cost_option of this PricingSchedule.

        Placement cap cost option.

        :return: The cap_cost_option of this PricingSchedule.
        :rtype: str
        """
        return self._cap_cost_option

    @cap_cost_option.setter
    def cap_cost_option(self, cap_cost_option):
        """Sets the cap_cost_option of this PricingSchedule.

        Placement cap cost option.

        :param cap_cost_option: The cap_cost_option of this PricingSchedule.
        :type cap_cost_option: str
        """
        allowed_values = ["CAP_COST_NONE", "CAP_COST_MONTHLY", "CAP_COST_CUMULATIVE"]  # noqa: E501
        if cap_cost_option not in allowed_values:
            raise ValueError(
                "Invalid value for `cap_cost_option` ({0}), must be one of {1}"
                .format(cap_cost_option, allowed_values)
            )

        self._cap_cost_option = cap_cost_option

    @property
    def disregard_overdelivery(self):
        """Gets the disregard_overdelivery of this PricingSchedule.

        Whether cap costs are ignored by ad serving.

        :return: The disregard_overdelivery of this PricingSchedule.
        :rtype: bool
        """
        return self._disregard_overdelivery

    @disregard_overdelivery.setter
    def disregard_overdelivery(self, disregard_overdelivery):
        """Sets the disregard_overdelivery of this PricingSchedule.

        Whether cap costs are ignored by ad serving.

        :param disregard_overdelivery: The disregard_overdelivery of this PricingSchedule.
        :type disregard_overdelivery: bool
        """

        self._disregard_overdelivery = disregard_overdelivery

    @property
    def end_date(self):
        """Gets the end_date of this PricingSchedule.


        :return: The end_date of this PricingSchedule.
        :rtype: date
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this PricingSchedule.


        :param end_date: The end_date of this PricingSchedule.
        :type end_date: date
        """

        self._end_date = end_date

    @property
    def flighted(self):
        """Gets the flighted of this PricingSchedule.

        Whether this placement is flighted. If true, pricing periods will be computed automatically.

        :return: The flighted of this PricingSchedule.
        :rtype: bool
        """
        return self._flighted

    @flighted.setter
    def flighted(self, flighted):
        """Sets the flighted of this PricingSchedule.

        Whether this placement is flighted. If true, pricing periods will be computed automatically.

        :param flighted: The flighted of this PricingSchedule.
        :type flighted: bool
        """

        self._flighted = flighted

    @property
    def floodlight_activity_id(self):
        """Gets the floodlight_activity_id of this PricingSchedule.

        Floodlight activity ID associated with this placement. This field should be set when placement pricing type is set to PRICING_TYPE_CPA.

        :return: The floodlight_activity_id of this PricingSchedule.
        :rtype: str
        """
        return self._floodlight_activity_id

    @floodlight_activity_id.setter
    def floodlight_activity_id(self, floodlight_activity_id):
        """Sets the floodlight_activity_id of this PricingSchedule.

        Floodlight activity ID associated with this placement. This field should be set when placement pricing type is set to PRICING_TYPE_CPA.

        :param floodlight_activity_id: The floodlight_activity_id of this PricingSchedule.
        :type floodlight_activity_id: str
        """

        self._floodlight_activity_id = floodlight_activity_id

    @property
    def pricing_periods(self):
        """Gets the pricing_periods of this PricingSchedule.

        Pricing periods for this placement.

        :return: The pricing_periods of this PricingSchedule.
        :rtype: List[PricingSchedulePricingPeriod]
        """
        return self._pricing_periods

    @pricing_periods.setter
    def pricing_periods(self, pricing_periods):
        """Sets the pricing_periods of this PricingSchedule.

        Pricing periods for this placement.

        :param pricing_periods: The pricing_periods of this PricingSchedule.
        :type pricing_periods: List[PricingSchedulePricingPeriod]
        """

        self._pricing_periods = pricing_periods

    @property
    def pricing_type(self):
        """Gets the pricing_type of this PricingSchedule.

        Placement pricing type. This field is required on insertion.

        :return: The pricing_type of this PricingSchedule.
        :rtype: str
        """
        return self._pricing_type

    @pricing_type.setter
    def pricing_type(self, pricing_type):
        """Sets the pricing_type of this PricingSchedule.

        Placement pricing type. This field is required on insertion.

        :param pricing_type: The pricing_type of this PricingSchedule.
        :type pricing_type: str
        """
        allowed_values = ["PRICING_TYPE_CPM", "PRICING_TYPE_CPC", "PRICING_TYPE_CPA", "PRICING_TYPE_FLAT_RATE_IMPRESSIONS", "PRICING_TYPE_FLAT_RATE_CLICKS", "PRICING_TYPE_CPM_ACTIVEVIEW"]  # noqa: E501
        if pricing_type not in allowed_values:
            raise ValueError(
                "Invalid value for `pricing_type` ({0}), must be one of {1}"
                .format(pricing_type, allowed_values)
            )

        self._pricing_type = pricing_type

    @property
    def start_date(self):
        """Gets the start_date of this PricingSchedule.


        :return: The start_date of this PricingSchedule.
        :rtype: date
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this PricingSchedule.


        :param start_date: The start_date of this PricingSchedule.
        :type start_date: date
        """

        self._start_date = start_date

    @property
    def testing_start_date(self):
        """Gets the testing_start_date of this PricingSchedule.


        :return: The testing_start_date of this PricingSchedule.
        :rtype: date
        """
        return self._testing_start_date

    @testing_start_date.setter
    def testing_start_date(self, testing_start_date):
        """Sets the testing_start_date of this PricingSchedule.


        :param testing_start_date: The testing_start_date of this PricingSchedule.
        :type testing_start_date: date
        """

        self._testing_start_date = testing_start_date
