# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ReportSchedule(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, active: bool=None, every: int=None, expiration_date: date=None, repeats: str=None, repeats_on_week_days: List[str]=None, runs_on_day_of_month: str=None, start_date: date=None):
        """ReportSchedule - a model defined in OpenAPI

        :param active: The active of this ReportSchedule.
        :param every: The every of this ReportSchedule.
        :param expiration_date: The expiration_date of this ReportSchedule.
        :param repeats: The repeats of this ReportSchedule.
        :param repeats_on_week_days: The repeats_on_week_days of this ReportSchedule.
        :param runs_on_day_of_month: The runs_on_day_of_month of this ReportSchedule.
        :param start_date: The start_date of this ReportSchedule.
        """
        self.openapi_types = {
            'active': bool,
            'every': int,
            'expiration_date': date,
            'repeats': str,
            'repeats_on_week_days': List[str],
            'runs_on_day_of_month': str,
            'start_date': date
        }

        self.attribute_map = {
            'active': 'active',
            'every': 'every',
            'expiration_date': 'expirationDate',
            'repeats': 'repeats',
            'repeats_on_week_days': 'repeatsOnWeekDays',
            'runs_on_day_of_month': 'runsOnDayOfMonth',
            'start_date': 'startDate'
        }

        self._active = active
        self._every = every
        self._expiration_date = expiration_date
        self._repeats = repeats
        self._repeats_on_week_days = repeats_on_week_days
        self._runs_on_day_of_month = runs_on_day_of_month
        self._start_date = start_date

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReportSchedule':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Report_schedule of this ReportSchedule.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def active(self):
        """Gets the active of this ReportSchedule.

        Whether the schedule is active or not. Must be set to either true or false.

        :return: The active of this ReportSchedule.
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this ReportSchedule.

        Whether the schedule is active or not. Must be set to either true or false.

        :param active: The active of this ReportSchedule.
        :type active: bool
        """

        self._active = active

    @property
    def every(self):
        """Gets the every of this ReportSchedule.

        Defines every how many days, weeks or months the report should be run. Needs to be set when \"repeats\" is either \"DAILY\", \"WEEKLY\" or \"MONTHLY\".

        :return: The every of this ReportSchedule.
        :rtype: int
        """
        return self._every

    @every.setter
    def every(self, every):
        """Sets the every of this ReportSchedule.

        Defines every how many days, weeks or months the report should be run. Needs to be set when \"repeats\" is either \"DAILY\", \"WEEKLY\" or \"MONTHLY\".

        :param every: The every of this ReportSchedule.
        :type every: int
        """

        self._every = every

    @property
    def expiration_date(self):
        """Gets the expiration_date of this ReportSchedule.


        :return: The expiration_date of this ReportSchedule.
        :rtype: date
        """
        return self._expiration_date

    @expiration_date.setter
    def expiration_date(self, expiration_date):
        """Sets the expiration_date of this ReportSchedule.


        :param expiration_date: The expiration_date of this ReportSchedule.
        :type expiration_date: date
        """

        self._expiration_date = expiration_date

    @property
    def repeats(self):
        """Gets the repeats of this ReportSchedule.

        The interval for which the report is repeated. Note: - \"DAILY\" also requires field \"every\" to be set. - \"WEEKLY\" also requires fields \"every\" and \"repeatsOnWeekDays\" to be set. - \"MONTHLY\" also requires fields \"every\" and \"runsOnDayOfMonth\" to be set. 

        :return: The repeats of this ReportSchedule.
        :rtype: str
        """
        return self._repeats

    @repeats.setter
    def repeats(self, repeats):
        """Sets the repeats of this ReportSchedule.

        The interval for which the report is repeated. Note: - \"DAILY\" also requires field \"every\" to be set. - \"WEEKLY\" also requires fields \"every\" and \"repeatsOnWeekDays\" to be set. - \"MONTHLY\" also requires fields \"every\" and \"runsOnDayOfMonth\" to be set. 

        :param repeats: The repeats of this ReportSchedule.
        :type repeats: str
        """

        self._repeats = repeats

    @property
    def repeats_on_week_days(self):
        """Gets the repeats_on_week_days of this ReportSchedule.

        List of week days \"WEEKLY\" on which scheduled reports should run.

        :return: The repeats_on_week_days of this ReportSchedule.
        :rtype: List[str]
        """
        return self._repeats_on_week_days

    @repeats_on_week_days.setter
    def repeats_on_week_days(self, repeats_on_week_days):
        """Sets the repeats_on_week_days of this ReportSchedule.

        List of week days \"WEEKLY\" on which scheduled reports should run.

        :param repeats_on_week_days: The repeats_on_week_days of this ReportSchedule.
        :type repeats_on_week_days: List[str]
        """
        allowed_values = ["SUNDAY", "MONDAY", "TUESDAY", "WEDNESDAY", "THURSDAY", "FRIDAY", "SATURDAY"]  # noqa: E501
        if not set(repeats_on_week_days).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `repeats_on_week_days` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(repeats_on_week_days) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._repeats_on_week_days = repeats_on_week_days

    @property
    def runs_on_day_of_month(self):
        """Gets the runs_on_day_of_month of this ReportSchedule.

        Enum to define for \"MONTHLY\" scheduled reports whether reports should be repeated on the same day of the month as \"startDate\" or the same day of the week of the month. Example: If 'startDate' is Monday, April 2nd 2012 (2012-04-02), \"DAY_OF_MONTH\" would run subsequent reports on the 2nd of every Month, and \"WEEK_OF_MONTH\" would run subsequent reports on the first Monday of the month.

        :return: The runs_on_day_of_month of this ReportSchedule.
        :rtype: str
        """
        return self._runs_on_day_of_month

    @runs_on_day_of_month.setter
    def runs_on_day_of_month(self, runs_on_day_of_month):
        """Sets the runs_on_day_of_month of this ReportSchedule.

        Enum to define for \"MONTHLY\" scheduled reports whether reports should be repeated on the same day of the month as \"startDate\" or the same day of the week of the month. Example: If 'startDate' is Monday, April 2nd 2012 (2012-04-02), \"DAY_OF_MONTH\" would run subsequent reports on the 2nd of every Month, and \"WEEK_OF_MONTH\" would run subsequent reports on the first Monday of the month.

        :param runs_on_day_of_month: The runs_on_day_of_month of this ReportSchedule.
        :type runs_on_day_of_month: str
        """
        allowed_values = ["DAY_OF_MONTH", "WEEK_OF_MONTH"]  # noqa: E501
        if runs_on_day_of_month not in allowed_values:
            raise ValueError(
                "Invalid value for `runs_on_day_of_month` ({0}), must be one of {1}"
                .format(runs_on_day_of_month, allowed_values)
            )

        self._runs_on_day_of_month = runs_on_day_of_month

    @property
    def start_date(self):
        """Gets the start_date of this ReportSchedule.


        :return: The start_date of this ReportSchedule.
        :rtype: date
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this ReportSchedule.


        :param start_date: The start_date of this ReportSchedule.
        :type start_date: date
        """

        self._start_date = start_date
