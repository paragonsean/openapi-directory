# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class OmnitureSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, omniture_cost_data_enabled: bool=None, omniture_integration_enabled: bool=None):
        """OmnitureSettings - a model defined in OpenAPI

        :param omniture_cost_data_enabled: The omniture_cost_data_enabled of this OmnitureSettings.
        :param omniture_integration_enabled: The omniture_integration_enabled of this OmnitureSettings.
        """
        self.openapi_types = {
            'omniture_cost_data_enabled': bool,
            'omniture_integration_enabled': bool
        }

        self.attribute_map = {
            'omniture_cost_data_enabled': 'omnitureCostDataEnabled',
            'omniture_integration_enabled': 'omnitureIntegrationEnabled'
        }

        self._omniture_cost_data_enabled = omniture_cost_data_enabled
        self._omniture_integration_enabled = omniture_integration_enabled

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OmnitureSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OmnitureSettings of this OmnitureSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def omniture_cost_data_enabled(self):
        """Gets the omniture_cost_data_enabled of this OmnitureSettings.

        Whether placement cost data will be sent to Omniture. This property can be enabled only if omnitureIntegrationEnabled is true.

        :return: The omniture_cost_data_enabled of this OmnitureSettings.
        :rtype: bool
        """
        return self._omniture_cost_data_enabled

    @omniture_cost_data_enabled.setter
    def omniture_cost_data_enabled(self, omniture_cost_data_enabled):
        """Sets the omniture_cost_data_enabled of this OmnitureSettings.

        Whether placement cost data will be sent to Omniture. This property can be enabled only if omnitureIntegrationEnabled is true.

        :param omniture_cost_data_enabled: The omniture_cost_data_enabled of this OmnitureSettings.
        :type omniture_cost_data_enabled: bool
        """

        self._omniture_cost_data_enabled = omniture_cost_data_enabled

    @property
    def omniture_integration_enabled(self):
        """Gets the omniture_integration_enabled of this OmnitureSettings.

        Whether Omniture integration is enabled. This property can be enabled only when the \"Advanced Ad Serving\" account setting is enabled.

        :return: The omniture_integration_enabled of this OmnitureSettings.
        :rtype: bool
        """
        return self._omniture_integration_enabled

    @omniture_integration_enabled.setter
    def omniture_integration_enabled(self, omniture_integration_enabled):
        """Sets the omniture_integration_enabled of this OmnitureSettings.

        Whether Omniture integration is enabled. This property can be enabled only when the \"Advanced Ad Serving\" account setting is enabled.

        :param omniture_integration_enabled: The omniture_integration_enabled of this OmnitureSettings.
        :type omniture_integration_enabled: bool
        """

        self._omniture_integration_enabled = omniture_integration_enabled
