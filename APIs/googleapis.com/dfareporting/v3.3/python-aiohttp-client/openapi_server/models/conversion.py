# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.custom_floodlight_variable import CustomFloodlightVariable
from openapi_server import util


class Conversion(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, child_directed_treatment: bool=None, custom_variables: List[CustomFloodlightVariable]=None, encrypted_user_id: str=None, encrypted_user_id_candidates: List[str]=None, floodlight_activity_id: str=None, floodlight_configuration_id: str=None, gclid: str=None, kind: str=None, limit_ad_tracking: bool=None, match_id: str=None, mobile_device_id: str=None, non_personalized_ad: bool=None, ordinal: str=None, quantity: str=None, timestamp_micros: str=None, treatment_for_underage: bool=None, value: float=None):
        """Conversion - a model defined in OpenAPI

        :param child_directed_treatment: The child_directed_treatment of this Conversion.
        :param custom_variables: The custom_variables of this Conversion.
        :param encrypted_user_id: The encrypted_user_id of this Conversion.
        :param encrypted_user_id_candidates: The encrypted_user_id_candidates of this Conversion.
        :param floodlight_activity_id: The floodlight_activity_id of this Conversion.
        :param floodlight_configuration_id: The floodlight_configuration_id of this Conversion.
        :param gclid: The gclid of this Conversion.
        :param kind: The kind of this Conversion.
        :param limit_ad_tracking: The limit_ad_tracking of this Conversion.
        :param match_id: The match_id of this Conversion.
        :param mobile_device_id: The mobile_device_id of this Conversion.
        :param non_personalized_ad: The non_personalized_ad of this Conversion.
        :param ordinal: The ordinal of this Conversion.
        :param quantity: The quantity of this Conversion.
        :param timestamp_micros: The timestamp_micros of this Conversion.
        :param treatment_for_underage: The treatment_for_underage of this Conversion.
        :param value: The value of this Conversion.
        """
        self.openapi_types = {
            'child_directed_treatment': bool,
            'custom_variables': List[CustomFloodlightVariable],
            'encrypted_user_id': str,
            'encrypted_user_id_candidates': List[str],
            'floodlight_activity_id': str,
            'floodlight_configuration_id': str,
            'gclid': str,
            'kind': str,
            'limit_ad_tracking': bool,
            'match_id': str,
            'mobile_device_id': str,
            'non_personalized_ad': bool,
            'ordinal': str,
            'quantity': str,
            'timestamp_micros': str,
            'treatment_for_underage': bool,
            'value': float
        }

        self.attribute_map = {
            'child_directed_treatment': 'childDirectedTreatment',
            'custom_variables': 'customVariables',
            'encrypted_user_id': 'encryptedUserId',
            'encrypted_user_id_candidates': 'encryptedUserIdCandidates',
            'floodlight_activity_id': 'floodlightActivityId',
            'floodlight_configuration_id': 'floodlightConfigurationId',
            'gclid': 'gclid',
            'kind': 'kind',
            'limit_ad_tracking': 'limitAdTracking',
            'match_id': 'matchId',
            'mobile_device_id': 'mobileDeviceId',
            'non_personalized_ad': 'nonPersonalizedAd',
            'ordinal': 'ordinal',
            'quantity': 'quantity',
            'timestamp_micros': 'timestampMicros',
            'treatment_for_underage': 'treatmentForUnderage',
            'value': 'value'
        }

        self._child_directed_treatment = child_directed_treatment
        self._custom_variables = custom_variables
        self._encrypted_user_id = encrypted_user_id
        self._encrypted_user_id_candidates = encrypted_user_id_candidates
        self._floodlight_activity_id = floodlight_activity_id
        self._floodlight_configuration_id = floodlight_configuration_id
        self._gclid = gclid
        self._kind = kind
        self._limit_ad_tracking = limit_ad_tracking
        self._match_id = match_id
        self._mobile_device_id = mobile_device_id
        self._non_personalized_ad = non_personalized_ad
        self._ordinal = ordinal
        self._quantity = quantity
        self._timestamp_micros = timestamp_micros
        self._treatment_for_underage = treatment_for_underage
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Conversion':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Conversion of this Conversion.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def child_directed_treatment(self):
        """Gets the child_directed_treatment of this Conversion.

        Whether this particular request may come from a user under the age of 13, under COPPA compliance.

        :return: The child_directed_treatment of this Conversion.
        :rtype: bool
        """
        return self._child_directed_treatment

    @child_directed_treatment.setter
    def child_directed_treatment(self, child_directed_treatment):
        """Sets the child_directed_treatment of this Conversion.

        Whether this particular request may come from a user under the age of 13, under COPPA compliance.

        :param child_directed_treatment: The child_directed_treatment of this Conversion.
        :type child_directed_treatment: bool
        """

        self._child_directed_treatment = child_directed_treatment

    @property
    def custom_variables(self):
        """Gets the custom_variables of this Conversion.

        Custom floodlight variables. This field may only be used when calling batchinsert; it is not supported by batchupdate.

        :return: The custom_variables of this Conversion.
        :rtype: List[CustomFloodlightVariable]
        """
        return self._custom_variables

    @custom_variables.setter
    def custom_variables(self, custom_variables):
        """Sets the custom_variables of this Conversion.

        Custom floodlight variables. This field may only be used when calling batchinsert; it is not supported by batchupdate.

        :param custom_variables: The custom_variables of this Conversion.
        :type custom_variables: List[CustomFloodlightVariable]
        """

        self._custom_variables = custom_variables

    @property
    def encrypted_user_id(self):
        """Gets the encrypted_user_id of this Conversion.

        The alphanumeric encrypted user ID. When set, encryptionInfo should also be specified. This field is mutually exclusive with encryptedUserIdCandidates[], matchId, mobileDeviceId and gclid. This or encryptedUserIdCandidates[] or matchId or mobileDeviceId or gclid is a required field.

        :return: The encrypted_user_id of this Conversion.
        :rtype: str
        """
        return self._encrypted_user_id

    @encrypted_user_id.setter
    def encrypted_user_id(self, encrypted_user_id):
        """Sets the encrypted_user_id of this Conversion.

        The alphanumeric encrypted user ID. When set, encryptionInfo should also be specified. This field is mutually exclusive with encryptedUserIdCandidates[], matchId, mobileDeviceId and gclid. This or encryptedUserIdCandidates[] or matchId or mobileDeviceId or gclid is a required field.

        :param encrypted_user_id: The encrypted_user_id of this Conversion.
        :type encrypted_user_id: str
        """

        self._encrypted_user_id = encrypted_user_id

    @property
    def encrypted_user_id_candidates(self):
        """Gets the encrypted_user_id_candidates of this Conversion.

        A list of the alphanumeric encrypted user IDs. Any user ID with exposure prior to the conversion timestamp will be used in the inserted conversion. If no such user ID is found then the conversion will be rejected with INVALID_ARGUMENT error. When set, encryptionInfo should also be specified. This field may only be used when calling batchinsert; it is not supported by batchupdate. This field is mutually exclusive with encryptedUserId, matchId, mobileDeviceId and gclid. This or encryptedUserId or matchId or mobileDeviceId or gclid is a required field.

        :return: The encrypted_user_id_candidates of this Conversion.
        :rtype: List[str]
        """
        return self._encrypted_user_id_candidates

    @encrypted_user_id_candidates.setter
    def encrypted_user_id_candidates(self, encrypted_user_id_candidates):
        """Sets the encrypted_user_id_candidates of this Conversion.

        A list of the alphanumeric encrypted user IDs. Any user ID with exposure prior to the conversion timestamp will be used in the inserted conversion. If no such user ID is found then the conversion will be rejected with INVALID_ARGUMENT error. When set, encryptionInfo should also be specified. This field may only be used when calling batchinsert; it is not supported by batchupdate. This field is mutually exclusive with encryptedUserId, matchId, mobileDeviceId and gclid. This or encryptedUserId or matchId or mobileDeviceId or gclid is a required field.

        :param encrypted_user_id_candidates: The encrypted_user_id_candidates of this Conversion.
        :type encrypted_user_id_candidates: List[str]
        """

        self._encrypted_user_id_candidates = encrypted_user_id_candidates

    @property
    def floodlight_activity_id(self):
        """Gets the floodlight_activity_id of this Conversion.

        Floodlight Activity ID of this conversion. This is a required field.

        :return: The floodlight_activity_id of this Conversion.
        :rtype: str
        """
        return self._floodlight_activity_id

    @floodlight_activity_id.setter
    def floodlight_activity_id(self, floodlight_activity_id):
        """Sets the floodlight_activity_id of this Conversion.

        Floodlight Activity ID of this conversion. This is a required field.

        :param floodlight_activity_id: The floodlight_activity_id of this Conversion.
        :type floodlight_activity_id: str
        """

        self._floodlight_activity_id = floodlight_activity_id

    @property
    def floodlight_configuration_id(self):
        """Gets the floodlight_configuration_id of this Conversion.

        Floodlight Configuration ID of this conversion. This is a required field.

        :return: The floodlight_configuration_id of this Conversion.
        :rtype: str
        """
        return self._floodlight_configuration_id

    @floodlight_configuration_id.setter
    def floodlight_configuration_id(self, floodlight_configuration_id):
        """Sets the floodlight_configuration_id of this Conversion.

        Floodlight Configuration ID of this conversion. This is a required field.

        :param floodlight_configuration_id: The floodlight_configuration_id of this Conversion.
        :type floodlight_configuration_id: str
        """

        self._floodlight_configuration_id = floodlight_configuration_id

    @property
    def gclid(self):
        """Gets the gclid of this Conversion.

        The Google click ID. This field is mutually exclusive with encryptedUserId, encryptedUserIdCandidates[], matchId and mobileDeviceId. This or encryptedUserId or encryptedUserIdCandidates[] or matchId or mobileDeviceId is a required field.

        :return: The gclid of this Conversion.
        :rtype: str
        """
        return self._gclid

    @gclid.setter
    def gclid(self, gclid):
        """Sets the gclid of this Conversion.

        The Google click ID. This field is mutually exclusive with encryptedUserId, encryptedUserIdCandidates[], matchId and mobileDeviceId. This or encryptedUserId or encryptedUserIdCandidates[] or matchId or mobileDeviceId is a required field.

        :param gclid: The gclid of this Conversion.
        :type gclid: str
        """

        self._gclid = gclid

    @property
    def kind(self):
        """Gets the kind of this Conversion.

        Identifies what kind of resource this is. Value: the fixed string \"dfareporting#conversion\".

        :return: The kind of this Conversion.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this Conversion.

        Identifies what kind of resource this is. Value: the fixed string \"dfareporting#conversion\".

        :param kind: The kind of this Conversion.
        :type kind: str
        """

        self._kind = kind

    @property
    def limit_ad_tracking(self):
        """Gets the limit_ad_tracking of this Conversion.

        Whether Limit Ad Tracking is enabled. When set to true, the conversion will be used for reporting but not targeting. This will prevent remarketing.

        :return: The limit_ad_tracking of this Conversion.
        :rtype: bool
        """
        return self._limit_ad_tracking

    @limit_ad_tracking.setter
    def limit_ad_tracking(self, limit_ad_tracking):
        """Sets the limit_ad_tracking of this Conversion.

        Whether Limit Ad Tracking is enabled. When set to true, the conversion will be used for reporting but not targeting. This will prevent remarketing.

        :param limit_ad_tracking: The limit_ad_tracking of this Conversion.
        :type limit_ad_tracking: bool
        """

        self._limit_ad_tracking = limit_ad_tracking

    @property
    def match_id(self):
        """Gets the match_id of this Conversion.

        The match ID field. A match ID is your own first-party identifier that has been synced with Google using the match ID feature in Floodlight. This field is mutually exclusive with encryptedUserId, encryptedUserIdCandidates[],mobileDeviceId and gclid. This or encryptedUserId or encryptedUserIdCandidates[] or mobileDeviceId or gclid is a required field.

        :return: The match_id of this Conversion.
        :rtype: str
        """
        return self._match_id

    @match_id.setter
    def match_id(self, match_id):
        """Sets the match_id of this Conversion.

        The match ID field. A match ID is your own first-party identifier that has been synced with Google using the match ID feature in Floodlight. This field is mutually exclusive with encryptedUserId, encryptedUserIdCandidates[],mobileDeviceId and gclid. This or encryptedUserId or encryptedUserIdCandidates[] or mobileDeviceId or gclid is a required field.

        :param match_id: The match_id of this Conversion.
        :type match_id: str
        """

        self._match_id = match_id

    @property
    def mobile_device_id(self):
        """Gets the mobile_device_id of this Conversion.

        The mobile device ID. This field is mutually exclusive with encryptedUserId, encryptedUserIdCandidates[], matchId and gclid. This or encryptedUserId or encryptedUserIdCandidates[] or matchId or gclid is a required field.

        :return: The mobile_device_id of this Conversion.
        :rtype: str
        """
        return self._mobile_device_id

    @mobile_device_id.setter
    def mobile_device_id(self, mobile_device_id):
        """Sets the mobile_device_id of this Conversion.

        The mobile device ID. This field is mutually exclusive with encryptedUserId, encryptedUserIdCandidates[], matchId and gclid. This or encryptedUserId or encryptedUserIdCandidates[] or matchId or gclid is a required field.

        :param mobile_device_id: The mobile_device_id of this Conversion.
        :type mobile_device_id: str
        """

        self._mobile_device_id = mobile_device_id

    @property
    def non_personalized_ad(self):
        """Gets the non_personalized_ad of this Conversion.

        Whether the conversion was for a non personalized ad.

        :return: The non_personalized_ad of this Conversion.
        :rtype: bool
        """
        return self._non_personalized_ad

    @non_personalized_ad.setter
    def non_personalized_ad(self, non_personalized_ad):
        """Sets the non_personalized_ad of this Conversion.

        Whether the conversion was for a non personalized ad.

        :param non_personalized_ad: The non_personalized_ad of this Conversion.
        :type non_personalized_ad: bool
        """

        self._non_personalized_ad = non_personalized_ad

    @property
    def ordinal(self):
        """Gets the ordinal of this Conversion.

        The ordinal of the conversion. Use this field to control how conversions of the same user and day are de-duplicated. This is a required field.

        :return: The ordinal of this Conversion.
        :rtype: str
        """
        return self._ordinal

    @ordinal.setter
    def ordinal(self, ordinal):
        """Sets the ordinal of this Conversion.

        The ordinal of the conversion. Use this field to control how conversions of the same user and day are de-duplicated. This is a required field.

        :param ordinal: The ordinal of this Conversion.
        :type ordinal: str
        """

        self._ordinal = ordinal

    @property
    def quantity(self):
        """Gets the quantity of this Conversion.

        The quantity of the conversion.

        :return: The quantity of this Conversion.
        :rtype: str
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this Conversion.

        The quantity of the conversion.

        :param quantity: The quantity of this Conversion.
        :type quantity: str
        """

        self._quantity = quantity

    @property
    def timestamp_micros(self):
        """Gets the timestamp_micros of this Conversion.

        The timestamp of conversion, in Unix epoch micros. This is a required field.

        :return: The timestamp_micros of this Conversion.
        :rtype: str
        """
        return self._timestamp_micros

    @timestamp_micros.setter
    def timestamp_micros(self, timestamp_micros):
        """Sets the timestamp_micros of this Conversion.

        The timestamp of conversion, in Unix epoch micros. This is a required field.

        :param timestamp_micros: The timestamp_micros of this Conversion.
        :type timestamp_micros: str
        """

        self._timestamp_micros = timestamp_micros

    @property
    def treatment_for_underage(self):
        """Gets the treatment_for_underage of this Conversion.

        Whether this particular request may come from a user under the age of 16 (may differ by country), under compliance with the European Union's General Data Protection Regulation (GDPR).

        :return: The treatment_for_underage of this Conversion.
        :rtype: bool
        """
        return self._treatment_for_underage

    @treatment_for_underage.setter
    def treatment_for_underage(self, treatment_for_underage):
        """Sets the treatment_for_underage of this Conversion.

        Whether this particular request may come from a user under the age of 16 (may differ by country), under compliance with the European Union's General Data Protection Regulation (GDPR).

        :param treatment_for_underage: The treatment_for_underage of this Conversion.
        :type treatment_for_underage: bool
        """

        self._treatment_for_underage = treatment_for_underage

    @property
    def value(self):
        """Gets the value of this Conversion.

        The value of the conversion.

        :return: The value of this Conversion.
        :rtype: float
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this Conversion.

        The value of the conversion.

        :param value: The value of this Conversion.
        :type value: float
        """

        self._value = value
