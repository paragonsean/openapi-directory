# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.date_range import DateRange
from openapi_server.models.dimension_value import DimensionValue
from openapi_server.models.sorted_dimension import SortedDimension
from openapi_server import util


class ReportCrossDimensionReachCriteria(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, breakdown: List[SortedDimension]=None, date_range: DateRange=None, dimension: str=None, dimension_filters: List[DimensionValue]=None, metric_names: List[str]=None, overlap_metric_names: List[str]=None, pivoted: bool=None):
        """ReportCrossDimensionReachCriteria - a model defined in OpenAPI

        :param breakdown: The breakdown of this ReportCrossDimensionReachCriteria.
        :param date_range: The date_range of this ReportCrossDimensionReachCriteria.
        :param dimension: The dimension of this ReportCrossDimensionReachCriteria.
        :param dimension_filters: The dimension_filters of this ReportCrossDimensionReachCriteria.
        :param metric_names: The metric_names of this ReportCrossDimensionReachCriteria.
        :param overlap_metric_names: The overlap_metric_names of this ReportCrossDimensionReachCriteria.
        :param pivoted: The pivoted of this ReportCrossDimensionReachCriteria.
        """
        self.openapi_types = {
            'breakdown': List[SortedDimension],
            'date_range': DateRange,
            'dimension': str,
            'dimension_filters': List[DimensionValue],
            'metric_names': List[str],
            'overlap_metric_names': List[str],
            'pivoted': bool
        }

        self.attribute_map = {
            'breakdown': 'breakdown',
            'date_range': 'dateRange',
            'dimension': 'dimension',
            'dimension_filters': 'dimensionFilters',
            'metric_names': 'metricNames',
            'overlap_metric_names': 'overlapMetricNames',
            'pivoted': 'pivoted'
        }

        self._breakdown = breakdown
        self._date_range = date_range
        self._dimension = dimension
        self._dimension_filters = dimension_filters
        self._metric_names = metric_names
        self._overlap_metric_names = overlap_metric_names
        self._pivoted = pivoted

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReportCrossDimensionReachCriteria':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Report_crossDimensionReachCriteria of this ReportCrossDimensionReachCriteria.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def breakdown(self):
        """Gets the breakdown of this ReportCrossDimensionReachCriteria.

        The list of dimensions the report should include.

        :return: The breakdown of this ReportCrossDimensionReachCriteria.
        :rtype: List[SortedDimension]
        """
        return self._breakdown

    @breakdown.setter
    def breakdown(self, breakdown):
        """Sets the breakdown of this ReportCrossDimensionReachCriteria.

        The list of dimensions the report should include.

        :param breakdown: The breakdown of this ReportCrossDimensionReachCriteria.
        :type breakdown: List[SortedDimension]
        """

        self._breakdown = breakdown

    @property
    def date_range(self):
        """Gets the date_range of this ReportCrossDimensionReachCriteria.


        :return: The date_range of this ReportCrossDimensionReachCriteria.
        :rtype: DateRange
        """
        return self._date_range

    @date_range.setter
    def date_range(self, date_range):
        """Sets the date_range of this ReportCrossDimensionReachCriteria.


        :param date_range: The date_range of this ReportCrossDimensionReachCriteria.
        :type date_range: DateRange
        """

        self._date_range = date_range

    @property
    def dimension(self):
        """Gets the dimension of this ReportCrossDimensionReachCriteria.

        The dimension option.

        :return: The dimension of this ReportCrossDimensionReachCriteria.
        :rtype: str
        """
        return self._dimension

    @dimension.setter
    def dimension(self, dimension):
        """Sets the dimension of this ReportCrossDimensionReachCriteria.

        The dimension option.

        :param dimension: The dimension of this ReportCrossDimensionReachCriteria.
        :type dimension: str
        """
        allowed_values = ["ADVERTISER", "CAMPAIGN", "SITE_BY_ADVERTISER", "SITE_BY_CAMPAIGN"]  # noqa: E501
        if dimension not in allowed_values:
            raise ValueError(
                "Invalid value for `dimension` ({0}), must be one of {1}"
                .format(dimension, allowed_values)
            )

        self._dimension = dimension

    @property
    def dimension_filters(self):
        """Gets the dimension_filters of this ReportCrossDimensionReachCriteria.

        The list of filters on which dimensions are filtered.

        :return: The dimension_filters of this ReportCrossDimensionReachCriteria.
        :rtype: List[DimensionValue]
        """
        return self._dimension_filters

    @dimension_filters.setter
    def dimension_filters(self, dimension_filters):
        """Sets the dimension_filters of this ReportCrossDimensionReachCriteria.

        The list of filters on which dimensions are filtered.

        :param dimension_filters: The dimension_filters of this ReportCrossDimensionReachCriteria.
        :type dimension_filters: List[DimensionValue]
        """

        self._dimension_filters = dimension_filters

    @property
    def metric_names(self):
        """Gets the metric_names of this ReportCrossDimensionReachCriteria.

        The list of names of metrics the report should include.

        :return: The metric_names of this ReportCrossDimensionReachCriteria.
        :rtype: List[str]
        """
        return self._metric_names

    @metric_names.setter
    def metric_names(self, metric_names):
        """Sets the metric_names of this ReportCrossDimensionReachCriteria.

        The list of names of metrics the report should include.

        :param metric_names: The metric_names of this ReportCrossDimensionReachCriteria.
        :type metric_names: List[str]
        """

        self._metric_names = metric_names

    @property
    def overlap_metric_names(self):
        """Gets the overlap_metric_names of this ReportCrossDimensionReachCriteria.

        The list of names of overlap metrics the report should include.

        :return: The overlap_metric_names of this ReportCrossDimensionReachCriteria.
        :rtype: List[str]
        """
        return self._overlap_metric_names

    @overlap_metric_names.setter
    def overlap_metric_names(self, overlap_metric_names):
        """Sets the overlap_metric_names of this ReportCrossDimensionReachCriteria.

        The list of names of overlap metrics the report should include.

        :param overlap_metric_names: The overlap_metric_names of this ReportCrossDimensionReachCriteria.
        :type overlap_metric_names: List[str]
        """

        self._overlap_metric_names = overlap_metric_names

    @property
    def pivoted(self):
        """Gets the pivoted of this ReportCrossDimensionReachCriteria.

        Whether the report is pivoted or not. Defaults to true.

        :return: The pivoted of this ReportCrossDimensionReachCriteria.
        :rtype: bool
        """
        return self._pivoted

    @pivoted.setter
    def pivoted(self, pivoted):
        """Sets the pivoted of this ReportCrossDimensionReachCriteria.

        Whether the report is pivoted or not. Defaults to true.

        :param pivoted: The pivoted of this ReportCrossDimensionReachCriteria.
        :type pivoted: bool
        """

        self._pivoted = pivoted
