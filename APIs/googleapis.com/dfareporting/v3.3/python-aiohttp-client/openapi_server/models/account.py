# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.reports_configuration import ReportsConfiguration
from openapi_server import util


class Account(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_permission_ids: List[str]=None, account_profile: str=None, active: bool=None, active_ads_limit_tier: str=None, active_view_opt_out: bool=None, available_permission_ids: List[str]=None, country_id: str=None, currency_id: str=None, default_creative_size_id: str=None, description: str=None, id: str=None, kind: str=None, locale: str=None, maximum_image_size: str=None, name: str=None, nielsen_ocr_enabled: bool=None, reports_configuration: ReportsConfiguration=None, share_reports_with_twitter: bool=None, teaser_size_limit: str=None):
        """Account - a model defined in OpenAPI

        :param account_permission_ids: The account_permission_ids of this Account.
        :param account_profile: The account_profile of this Account.
        :param active: The active of this Account.
        :param active_ads_limit_tier: The active_ads_limit_tier of this Account.
        :param active_view_opt_out: The active_view_opt_out of this Account.
        :param available_permission_ids: The available_permission_ids of this Account.
        :param country_id: The country_id of this Account.
        :param currency_id: The currency_id of this Account.
        :param default_creative_size_id: The default_creative_size_id of this Account.
        :param description: The description of this Account.
        :param id: The id of this Account.
        :param kind: The kind of this Account.
        :param locale: The locale of this Account.
        :param maximum_image_size: The maximum_image_size of this Account.
        :param name: The name of this Account.
        :param nielsen_ocr_enabled: The nielsen_ocr_enabled of this Account.
        :param reports_configuration: The reports_configuration of this Account.
        :param share_reports_with_twitter: The share_reports_with_twitter of this Account.
        :param teaser_size_limit: The teaser_size_limit of this Account.
        """
        self.openapi_types = {
            'account_permission_ids': List[str],
            'account_profile': str,
            'active': bool,
            'active_ads_limit_tier': str,
            'active_view_opt_out': bool,
            'available_permission_ids': List[str],
            'country_id': str,
            'currency_id': str,
            'default_creative_size_id': str,
            'description': str,
            'id': str,
            'kind': str,
            'locale': str,
            'maximum_image_size': str,
            'name': str,
            'nielsen_ocr_enabled': bool,
            'reports_configuration': ReportsConfiguration,
            'share_reports_with_twitter': bool,
            'teaser_size_limit': str
        }

        self.attribute_map = {
            'account_permission_ids': 'accountPermissionIds',
            'account_profile': 'accountProfile',
            'active': 'active',
            'active_ads_limit_tier': 'activeAdsLimitTier',
            'active_view_opt_out': 'activeViewOptOut',
            'available_permission_ids': 'availablePermissionIds',
            'country_id': 'countryId',
            'currency_id': 'currencyId',
            'default_creative_size_id': 'defaultCreativeSizeId',
            'description': 'description',
            'id': 'id',
            'kind': 'kind',
            'locale': 'locale',
            'maximum_image_size': 'maximumImageSize',
            'name': 'name',
            'nielsen_ocr_enabled': 'nielsenOcrEnabled',
            'reports_configuration': 'reportsConfiguration',
            'share_reports_with_twitter': 'shareReportsWithTwitter',
            'teaser_size_limit': 'teaserSizeLimit'
        }

        self._account_permission_ids = account_permission_ids
        self._account_profile = account_profile
        self._active = active
        self._active_ads_limit_tier = active_ads_limit_tier
        self._active_view_opt_out = active_view_opt_out
        self._available_permission_ids = available_permission_ids
        self._country_id = country_id
        self._currency_id = currency_id
        self._default_creative_size_id = default_creative_size_id
        self._description = description
        self._id = id
        self._kind = kind
        self._locale = locale
        self._maximum_image_size = maximum_image_size
        self._name = name
        self._nielsen_ocr_enabled = nielsen_ocr_enabled
        self._reports_configuration = reports_configuration
        self._share_reports_with_twitter = share_reports_with_twitter
        self._teaser_size_limit = teaser_size_limit

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Account':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Account of this Account.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_permission_ids(self):
        """Gets the account_permission_ids of this Account.

        Account permissions assigned to this account.

        :return: The account_permission_ids of this Account.
        :rtype: List[str]
        """
        return self._account_permission_ids

    @account_permission_ids.setter
    def account_permission_ids(self, account_permission_ids):
        """Sets the account_permission_ids of this Account.

        Account permissions assigned to this account.

        :param account_permission_ids: The account_permission_ids of this Account.
        :type account_permission_ids: List[str]
        """

        self._account_permission_ids = account_permission_ids

    @property
    def account_profile(self):
        """Gets the account_profile of this Account.

        Profile for this account. This is a read-only field that can be left blank.

        :return: The account_profile of this Account.
        :rtype: str
        """
        return self._account_profile

    @account_profile.setter
    def account_profile(self, account_profile):
        """Sets the account_profile of this Account.

        Profile for this account. This is a read-only field that can be left blank.

        :param account_profile: The account_profile of this Account.
        :type account_profile: str
        """
        allowed_values = ["ACCOUNT_PROFILE_BASIC", "ACCOUNT_PROFILE_STANDARD"]  # noqa: E501
        if account_profile not in allowed_values:
            raise ValueError(
                "Invalid value for `account_profile` ({0}), must be one of {1}"
                .format(account_profile, allowed_values)
            )

        self._account_profile = account_profile

    @property
    def active(self):
        """Gets the active of this Account.

        Whether this account is active.

        :return: The active of this Account.
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this Account.

        Whether this account is active.

        :param active: The active of this Account.
        :type active: bool
        """

        self._active = active

    @property
    def active_ads_limit_tier(self):
        """Gets the active_ads_limit_tier of this Account.

        Maximum number of active ads allowed for this account.

        :return: The active_ads_limit_tier of this Account.
        :rtype: str
        """
        return self._active_ads_limit_tier

    @active_ads_limit_tier.setter
    def active_ads_limit_tier(self, active_ads_limit_tier):
        """Sets the active_ads_limit_tier of this Account.

        Maximum number of active ads allowed for this account.

        :param active_ads_limit_tier: The active_ads_limit_tier of this Account.
        :type active_ads_limit_tier: str
        """
        allowed_values = ["ACTIVE_ADS_TIER_40K", "ACTIVE_ADS_TIER_75K", "ACTIVE_ADS_TIER_100K", "ACTIVE_ADS_TIER_200K", "ACTIVE_ADS_TIER_300K", "ACTIVE_ADS_TIER_500K", "ACTIVE_ADS_TIER_750K", "ACTIVE_ADS_TIER_1M"]  # noqa: E501
        if active_ads_limit_tier not in allowed_values:
            raise ValueError(
                "Invalid value for `active_ads_limit_tier` ({0}), must be one of {1}"
                .format(active_ads_limit_tier, allowed_values)
            )

        self._active_ads_limit_tier = active_ads_limit_tier

    @property
    def active_view_opt_out(self):
        """Gets the active_view_opt_out of this Account.

        Whether to serve creatives with Active View tags. If disabled, viewability data will not be available for any impressions.

        :return: The active_view_opt_out of this Account.
        :rtype: bool
        """
        return self._active_view_opt_out

    @active_view_opt_out.setter
    def active_view_opt_out(self, active_view_opt_out):
        """Sets the active_view_opt_out of this Account.

        Whether to serve creatives with Active View tags. If disabled, viewability data will not be available for any impressions.

        :param active_view_opt_out: The active_view_opt_out of this Account.
        :type active_view_opt_out: bool
        """

        self._active_view_opt_out = active_view_opt_out

    @property
    def available_permission_ids(self):
        """Gets the available_permission_ids of this Account.

        User role permissions available to the user roles of this account.

        :return: The available_permission_ids of this Account.
        :rtype: List[str]
        """
        return self._available_permission_ids

    @available_permission_ids.setter
    def available_permission_ids(self, available_permission_ids):
        """Sets the available_permission_ids of this Account.

        User role permissions available to the user roles of this account.

        :param available_permission_ids: The available_permission_ids of this Account.
        :type available_permission_ids: List[str]
        """

        self._available_permission_ids = available_permission_ids

    @property
    def country_id(self):
        """Gets the country_id of this Account.

        ID of the country associated with this account.

        :return: The country_id of this Account.
        :rtype: str
        """
        return self._country_id

    @country_id.setter
    def country_id(self, country_id):
        """Sets the country_id of this Account.

        ID of the country associated with this account.

        :param country_id: The country_id of this Account.
        :type country_id: str
        """

        self._country_id = country_id

    @property
    def currency_id(self):
        """Gets the currency_id of this Account.

        ID of currency associated with this account. This is a required field. Acceptable values are: - \"1\" for USD - \"2\" for GBP - \"3\" for ESP - \"4\" for SEK - \"5\" for CAD - \"6\" for JPY - \"7\" for DEM - \"8\" for AUD - \"9\" for FRF - \"10\" for ITL - \"11\" for DKK - \"12\" for NOK - \"13\" for FIM - \"14\" for ZAR - \"15\" for IEP - \"16\" for NLG - \"17\" for EUR - \"18\" for KRW - \"19\" for TWD - \"20\" for SGD - \"21\" for CNY - \"22\" for HKD - \"23\" for NZD - \"24\" for MYR - \"25\" for BRL - \"26\" for PTE - \"28\" for CLP - \"29\" for TRY - \"30\" for ARS - \"31\" for PEN - \"32\" for ILS - \"33\" for CHF - \"34\" for VEF - \"35\" for COP - \"36\" for GTQ - \"37\" for PLN - \"39\" for INR - \"40\" for THB - \"41\" for IDR - \"42\" for CZK - \"43\" for RON - \"44\" for HUF - \"45\" for RUB - \"46\" for AED - \"47\" for BGN - \"48\" for HRK - \"49\" for MXN - \"50\" for NGN - \"51\" for EGP 

        :return: The currency_id of this Account.
        :rtype: str
        """
        return self._currency_id

    @currency_id.setter
    def currency_id(self, currency_id):
        """Sets the currency_id of this Account.

        ID of currency associated with this account. This is a required field. Acceptable values are: - \"1\" for USD - \"2\" for GBP - \"3\" for ESP - \"4\" for SEK - \"5\" for CAD - \"6\" for JPY - \"7\" for DEM - \"8\" for AUD - \"9\" for FRF - \"10\" for ITL - \"11\" for DKK - \"12\" for NOK - \"13\" for FIM - \"14\" for ZAR - \"15\" for IEP - \"16\" for NLG - \"17\" for EUR - \"18\" for KRW - \"19\" for TWD - \"20\" for SGD - \"21\" for CNY - \"22\" for HKD - \"23\" for NZD - \"24\" for MYR - \"25\" for BRL - \"26\" for PTE - \"28\" for CLP - \"29\" for TRY - \"30\" for ARS - \"31\" for PEN - \"32\" for ILS - \"33\" for CHF - \"34\" for VEF - \"35\" for COP - \"36\" for GTQ - \"37\" for PLN - \"39\" for INR - \"40\" for THB - \"41\" for IDR - \"42\" for CZK - \"43\" for RON - \"44\" for HUF - \"45\" for RUB - \"46\" for AED - \"47\" for BGN - \"48\" for HRK - \"49\" for MXN - \"50\" for NGN - \"51\" for EGP 

        :param currency_id: The currency_id of this Account.
        :type currency_id: str
        """

        self._currency_id = currency_id

    @property
    def default_creative_size_id(self):
        """Gets the default_creative_size_id of this Account.

        Default placement dimensions for this account.

        :return: The default_creative_size_id of this Account.
        :rtype: str
        """
        return self._default_creative_size_id

    @default_creative_size_id.setter
    def default_creative_size_id(self, default_creative_size_id):
        """Sets the default_creative_size_id of this Account.

        Default placement dimensions for this account.

        :param default_creative_size_id: The default_creative_size_id of this Account.
        :type default_creative_size_id: str
        """

        self._default_creative_size_id = default_creative_size_id

    @property
    def description(self):
        """Gets the description of this Account.

        Description of this account.

        :return: The description of this Account.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Account.

        Description of this account.

        :param description: The description of this Account.
        :type description: str
        """

        self._description = description

    @property
    def id(self):
        """Gets the id of this Account.

        ID of this account. This is a read-only, auto-generated field.

        :return: The id of this Account.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Account.

        ID of this account. This is a read-only, auto-generated field.

        :param id: The id of this Account.
        :type id: str
        """

        self._id = id

    @property
    def kind(self):
        """Gets the kind of this Account.

        Identifies what kind of resource this is. Value: the fixed string \"dfareporting#account\".

        :return: The kind of this Account.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this Account.

        Identifies what kind of resource this is. Value: the fixed string \"dfareporting#account\".

        :param kind: The kind of this Account.
        :type kind: str
        """

        self._kind = kind

    @property
    def locale(self):
        """Gets the locale of this Account.

        Locale of this account. Acceptable values are: - \"cs\" (Czech) - \"de\" (German) - \"en\" (English) - \"en-GB\" (English United Kingdom) - \"es\" (Spanish) - \"fr\" (French) - \"it\" (Italian) - \"ja\" (Japanese) - \"ko\" (Korean) - \"pl\" (Polish) - \"pt-BR\" (Portuguese Brazil) - \"ru\" (Russian) - \"sv\" (Swedish) - \"tr\" (Turkish) - \"zh-CN\" (Chinese Simplified) - \"zh-TW\" (Chinese Traditional) 

        :return: The locale of this Account.
        :rtype: str
        """
        return self._locale

    @locale.setter
    def locale(self, locale):
        """Sets the locale of this Account.

        Locale of this account. Acceptable values are: - \"cs\" (Czech) - \"de\" (German) - \"en\" (English) - \"en-GB\" (English United Kingdom) - \"es\" (Spanish) - \"fr\" (French) - \"it\" (Italian) - \"ja\" (Japanese) - \"ko\" (Korean) - \"pl\" (Polish) - \"pt-BR\" (Portuguese Brazil) - \"ru\" (Russian) - \"sv\" (Swedish) - \"tr\" (Turkish) - \"zh-CN\" (Chinese Simplified) - \"zh-TW\" (Chinese Traditional) 

        :param locale: The locale of this Account.
        :type locale: str
        """

        self._locale = locale

    @property
    def maximum_image_size(self):
        """Gets the maximum_image_size of this Account.

        Maximum image size allowed for this account, in kilobytes. Value must be greater than or equal to 1.

        :return: The maximum_image_size of this Account.
        :rtype: str
        """
        return self._maximum_image_size

    @maximum_image_size.setter
    def maximum_image_size(self, maximum_image_size):
        """Sets the maximum_image_size of this Account.

        Maximum image size allowed for this account, in kilobytes. Value must be greater than or equal to 1.

        :param maximum_image_size: The maximum_image_size of this Account.
        :type maximum_image_size: str
        """

        self._maximum_image_size = maximum_image_size

    @property
    def name(self):
        """Gets the name of this Account.

        Name of this account. This is a required field, and must be less than 128 characters long and be globally unique.

        :return: The name of this Account.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Account.

        Name of this account. This is a required field, and must be less than 128 characters long and be globally unique.

        :param name: The name of this Account.
        :type name: str
        """

        self._name = name

    @property
    def nielsen_ocr_enabled(self):
        """Gets the nielsen_ocr_enabled of this Account.

        Whether campaigns created in this account will be enabled for Nielsen OCR reach ratings by default.

        :return: The nielsen_ocr_enabled of this Account.
        :rtype: bool
        """
        return self._nielsen_ocr_enabled

    @nielsen_ocr_enabled.setter
    def nielsen_ocr_enabled(self, nielsen_ocr_enabled):
        """Sets the nielsen_ocr_enabled of this Account.

        Whether campaigns created in this account will be enabled for Nielsen OCR reach ratings by default.

        :param nielsen_ocr_enabled: The nielsen_ocr_enabled of this Account.
        :type nielsen_ocr_enabled: bool
        """

        self._nielsen_ocr_enabled = nielsen_ocr_enabled

    @property
    def reports_configuration(self):
        """Gets the reports_configuration of this Account.


        :return: The reports_configuration of this Account.
        :rtype: ReportsConfiguration
        """
        return self._reports_configuration

    @reports_configuration.setter
    def reports_configuration(self, reports_configuration):
        """Sets the reports_configuration of this Account.


        :param reports_configuration: The reports_configuration of this Account.
        :type reports_configuration: ReportsConfiguration
        """

        self._reports_configuration = reports_configuration

    @property
    def share_reports_with_twitter(self):
        """Gets the share_reports_with_twitter of this Account.

        Share Path to Conversion reports with Twitter.

        :return: The share_reports_with_twitter of this Account.
        :rtype: bool
        """
        return self._share_reports_with_twitter

    @share_reports_with_twitter.setter
    def share_reports_with_twitter(self, share_reports_with_twitter):
        """Sets the share_reports_with_twitter of this Account.

        Share Path to Conversion reports with Twitter.

        :param share_reports_with_twitter: The share_reports_with_twitter of this Account.
        :type share_reports_with_twitter: bool
        """

        self._share_reports_with_twitter = share_reports_with_twitter

    @property
    def teaser_size_limit(self):
        """Gets the teaser_size_limit of this Account.

        File size limit in kilobytes of Rich Media teaser creatives. Acceptable values are 1 to 10240, inclusive.

        :return: The teaser_size_limit of this Account.
        :rtype: str
        """
        return self._teaser_size_limit

    @teaser_size_limit.setter
    def teaser_size_limit(self, teaser_size_limit):
        """Sets the teaser_size_limit of this Account.

        File size limit in kilobytes of Rich Media teaser creatives. Acceptable values are 1 to 10240, inclusive.

        :param teaser_size_limit: The teaser_size_limit of this Account.
        :type teaser_size_limit: str
        """

        self._teaser_size_limit = teaser_size_limit
