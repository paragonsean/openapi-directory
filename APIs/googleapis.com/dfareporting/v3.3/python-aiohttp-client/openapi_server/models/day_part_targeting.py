# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DayPartTargeting(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, days_of_week: List[str]=None, hours_of_day: List[int]=None, user_local_time: bool=None):
        """DayPartTargeting - a model defined in OpenAPI

        :param days_of_week: The days_of_week of this DayPartTargeting.
        :param hours_of_day: The hours_of_day of this DayPartTargeting.
        :param user_local_time: The user_local_time of this DayPartTargeting.
        """
        self.openapi_types = {
            'days_of_week': List[str],
            'hours_of_day': List[int],
            'user_local_time': bool
        }

        self.attribute_map = {
            'days_of_week': 'daysOfWeek',
            'hours_of_day': 'hoursOfDay',
            'user_local_time': 'userLocalTime'
        }

        self._days_of_week = days_of_week
        self._hours_of_day = hours_of_day
        self._user_local_time = user_local_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DayPartTargeting':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DayPartTargeting of this DayPartTargeting.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def days_of_week(self):
        """Gets the days_of_week of this DayPartTargeting.

        Days of the week when the ad will serve. Acceptable values are: - \"SUNDAY\" - \"MONDAY\" - \"TUESDAY\" - \"WEDNESDAY\" - \"THURSDAY\" - \"FRIDAY\" - \"SATURDAY\" 

        :return: The days_of_week of this DayPartTargeting.
        :rtype: List[str]
        """
        return self._days_of_week

    @days_of_week.setter
    def days_of_week(self, days_of_week):
        """Sets the days_of_week of this DayPartTargeting.

        Days of the week when the ad will serve. Acceptable values are: - \"SUNDAY\" - \"MONDAY\" - \"TUESDAY\" - \"WEDNESDAY\" - \"THURSDAY\" - \"FRIDAY\" - \"SATURDAY\" 

        :param days_of_week: The days_of_week of this DayPartTargeting.
        :type days_of_week: List[str]
        """
        allowed_values = ["MONDAY", "TUESDAY", "WEDNESDAY", "THURSDAY", "FRIDAY", "SATURDAY", "SUNDAY"]  # noqa: E501
        if not set(days_of_week).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `days_of_week` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(days_of_week) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._days_of_week = days_of_week

    @property
    def hours_of_day(self):
        """Gets the hours_of_day of this DayPartTargeting.

        Hours of the day when the ad will serve, where 0 is midnight to 1 AM and 23 is 11 PM to midnight. Can be specified with days of week, in which case the ad would serve during these hours on the specified days. For example if Monday, Wednesday, Friday are the days of week specified and 9-10am, 3-5pm (hours 9, 15, and 16) is specified, the ad would serve Monday, Wednesdays, and Fridays at 9-10am and 3-5pm. Acceptable values are 0 to 23, inclusive.

        :return: The hours_of_day of this DayPartTargeting.
        :rtype: List[int]
        """
        return self._hours_of_day

    @hours_of_day.setter
    def hours_of_day(self, hours_of_day):
        """Sets the hours_of_day of this DayPartTargeting.

        Hours of the day when the ad will serve, where 0 is midnight to 1 AM and 23 is 11 PM to midnight. Can be specified with days of week, in which case the ad would serve during these hours on the specified days. For example if Monday, Wednesday, Friday are the days of week specified and 9-10am, 3-5pm (hours 9, 15, and 16) is specified, the ad would serve Monday, Wednesdays, and Fridays at 9-10am and 3-5pm. Acceptable values are 0 to 23, inclusive.

        :param hours_of_day: The hours_of_day of this DayPartTargeting.
        :type hours_of_day: List[int]
        """

        self._hours_of_day = hours_of_day

    @property
    def user_local_time(self):
        """Gets the user_local_time of this DayPartTargeting.

        Whether or not to use the user's local time. If false, the America/New York time zone applies.

        :return: The user_local_time of this DayPartTargeting.
        :rtype: bool
        """
        return self._user_local_time

    @user_local_time.setter
    def user_local_time(self, user_local_time):
        """Sets the user_local_time of this DayPartTargeting.

        Whether or not to use the user's local time. If false, the America/New York time zone applies.

        :param user_local_time: The user_local_time of this DayPartTargeting.
        :type user_local_time: bool
        """

        self._user_local_time = user_local_time
