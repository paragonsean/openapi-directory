# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UserDefinedVariableConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data_type: str=None, report_name: str=None, variable_type: str=None):
        """UserDefinedVariableConfiguration - a model defined in OpenAPI

        :param data_type: The data_type of this UserDefinedVariableConfiguration.
        :param report_name: The report_name of this UserDefinedVariableConfiguration.
        :param variable_type: The variable_type of this UserDefinedVariableConfiguration.
        """
        self.openapi_types = {
            'data_type': str,
            'report_name': str,
            'variable_type': str
        }

        self.attribute_map = {
            'data_type': 'dataType',
            'report_name': 'reportName',
            'variable_type': 'variableType'
        }

        self._data_type = data_type
        self._report_name = report_name
        self._variable_type = variable_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UserDefinedVariableConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UserDefinedVariableConfiguration of this UserDefinedVariableConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data_type(self):
        """Gets the data_type of this UserDefinedVariableConfiguration.

        Data type for the variable. This is a required field.

        :return: The data_type of this UserDefinedVariableConfiguration.
        :rtype: str
        """
        return self._data_type

    @data_type.setter
    def data_type(self, data_type):
        """Sets the data_type of this UserDefinedVariableConfiguration.

        Data type for the variable. This is a required field.

        :param data_type: The data_type of this UserDefinedVariableConfiguration.
        :type data_type: str
        """
        allowed_values = ["STRING", "NUMBER"]  # noqa: E501
        if data_type not in allowed_values:
            raise ValueError(
                "Invalid value for `data_type` ({0}), must be one of {1}"
                .format(data_type, allowed_values)
            )

        self._data_type = data_type

    @property
    def report_name(self):
        """Gets the report_name of this UserDefinedVariableConfiguration.

        User-friendly name for the variable which will appear in reports. This is a required field, must be less than 64 characters long, and cannot contain the following characters: \"\"<>\".

        :return: The report_name of this UserDefinedVariableConfiguration.
        :rtype: str
        """
        return self._report_name

    @report_name.setter
    def report_name(self, report_name):
        """Sets the report_name of this UserDefinedVariableConfiguration.

        User-friendly name for the variable which will appear in reports. This is a required field, must be less than 64 characters long, and cannot contain the following characters: \"\"<>\".

        :param report_name: The report_name of this UserDefinedVariableConfiguration.
        :type report_name: str
        """

        self._report_name = report_name

    @property
    def variable_type(self):
        """Gets the variable_type of this UserDefinedVariableConfiguration.

        Variable name in the tag. This is a required field.

        :return: The variable_type of this UserDefinedVariableConfiguration.
        :rtype: str
        """
        return self._variable_type

    @variable_type.setter
    def variable_type(self, variable_type):
        """Sets the variable_type of this UserDefinedVariableConfiguration.

        Variable name in the tag. This is a required field.

        :param variable_type: The variable_type of this UserDefinedVariableConfiguration.
        :type variable_type: str
        """
        allowed_values = ["U1", "U2", "U3", "U4", "U5", "U6", "U7", "U8", "U9", "U10", "U11", "U12", "U13", "U14", "U15", "U16", "U17", "U18", "U19", "U20", "U21", "U22", "U23", "U24", "U25", "U26", "U27", "U28", "U29", "U30", "U31", "U32", "U33", "U34", "U35", "U36", "U37", "U38", "U39", "U40", "U41", "U42", "U43", "U44", "U45", "U46", "U47", "U48", "U49", "U50", "U51", "U52", "U53", "U54", "U55", "U56", "U57", "U58", "U59", "U60", "U61", "U62", "U63", "U64", "U65", "U66", "U67", "U68", "U69", "U70", "U71", "U72", "U73", "U74", "U75", "U76", "U77", "U78", "U79", "U80", "U81", "U82", "U83", "U84", "U85", "U86", "U87", "U88", "U89", "U90", "U91", "U92", "U93", "U94", "U95", "U96", "U97", "U98", "U99", "U100"]  # noqa: E501
        if variable_type not in allowed_values:
            raise ValueError(
                "Invalid value for `variable_type` ({0}), must be one of {1}"
                .format(variable_type, allowed_values)
            )

        self._variable_type = variable_type
