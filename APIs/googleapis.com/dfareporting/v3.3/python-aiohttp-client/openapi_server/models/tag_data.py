# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TagData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ad_id: str=None, click_tag: str=None, creative_id: str=None, format: str=None, impression_tag: str=None):
        """TagData - a model defined in OpenAPI

        :param ad_id: The ad_id of this TagData.
        :param click_tag: The click_tag of this TagData.
        :param creative_id: The creative_id of this TagData.
        :param format: The format of this TagData.
        :param impression_tag: The impression_tag of this TagData.
        """
        self.openapi_types = {
            'ad_id': str,
            'click_tag': str,
            'creative_id': str,
            'format': str,
            'impression_tag': str
        }

        self.attribute_map = {
            'ad_id': 'adId',
            'click_tag': 'clickTag',
            'creative_id': 'creativeId',
            'format': 'format',
            'impression_tag': 'impressionTag'
        }

        self._ad_id = ad_id
        self._click_tag = click_tag
        self._creative_id = creative_id
        self._format = format
        self._impression_tag = impression_tag

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TagData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TagData of this TagData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ad_id(self):
        """Gets the ad_id of this TagData.

        Ad associated with this placement tag. Applicable only when format is PLACEMENT_TAG_TRACKING.

        :return: The ad_id of this TagData.
        :rtype: str
        """
        return self._ad_id

    @ad_id.setter
    def ad_id(self, ad_id):
        """Sets the ad_id of this TagData.

        Ad associated with this placement tag. Applicable only when format is PLACEMENT_TAG_TRACKING.

        :param ad_id: The ad_id of this TagData.
        :type ad_id: str
        """

        self._ad_id = ad_id

    @property
    def click_tag(self):
        """Gets the click_tag of this TagData.

        Tag string to record a click.

        :return: The click_tag of this TagData.
        :rtype: str
        """
        return self._click_tag

    @click_tag.setter
    def click_tag(self, click_tag):
        """Sets the click_tag of this TagData.

        Tag string to record a click.

        :param click_tag: The click_tag of this TagData.
        :type click_tag: str
        """

        self._click_tag = click_tag

    @property
    def creative_id(self):
        """Gets the creative_id of this TagData.

        Creative associated with this placement tag. Applicable only when format is PLACEMENT_TAG_TRACKING.

        :return: The creative_id of this TagData.
        :rtype: str
        """
        return self._creative_id

    @creative_id.setter
    def creative_id(self, creative_id):
        """Sets the creative_id of this TagData.

        Creative associated with this placement tag. Applicable only when format is PLACEMENT_TAG_TRACKING.

        :param creative_id: The creative_id of this TagData.
        :type creative_id: str
        """

        self._creative_id = creative_id

    @property
    def format(self):
        """Gets the format of this TagData.

        TagData tag format of this tag.

        :return: The format of this TagData.
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this TagData.

        TagData tag format of this tag.

        :param format: The format of this TagData.
        :type format: str
        """
        allowed_values = ["PLACEMENT_TAG_STANDARD", "PLACEMENT_TAG_IFRAME_JAVASCRIPT", "PLACEMENT_TAG_IFRAME_ILAYER", "PLACEMENT_TAG_INTERNAL_REDIRECT", "PLACEMENT_TAG_JAVASCRIPT", "PLACEMENT_TAG_INTERSTITIAL_IFRAME_JAVASCRIPT", "PLACEMENT_TAG_INTERSTITIAL_INTERNAL_REDIRECT", "PLACEMENT_TAG_INTERSTITIAL_JAVASCRIPT", "PLACEMENT_TAG_CLICK_COMMANDS", "PLACEMENT_TAG_INSTREAM_VIDEO_PREFETCH", "PLACEMENT_TAG_TRACKING", "PLACEMENT_TAG_TRACKING_IFRAME", "PLACEMENT_TAG_TRACKING_JAVASCRIPT", "PLACEMENT_TAG_INSTREAM_VIDEO_PREFETCH_VAST_3", "PLACEMENT_TAG_IFRAME_JAVASCRIPT_LEGACY", "PLACEMENT_TAG_JAVASCRIPT_LEGACY", "PLACEMENT_TAG_INTERSTITIAL_IFRAME_JAVASCRIPT_LEGACY", "PLACEMENT_TAG_INTERSTITIAL_JAVASCRIPT_LEGACY", "PLACEMENT_TAG_INSTREAM_VIDEO_PREFETCH_VAST_4", "PLACEMENT_TAG_TRACKING_THIRD_PARTY_MEASUREMENT"]  # noqa: E501
        if format not in allowed_values:
            raise ValueError(
                "Invalid value for `format` ({0}), must be one of {1}"
                .format(format, allowed_values)
            )

        self._format = format

    @property
    def impression_tag(self):
        """Gets the impression_tag of this TagData.

        Tag string for serving an ad.

        :return: The impression_tag of this TagData.
        :rtype: str
        """
        return self._impression_tag

    @impression_tag.setter
    def impression_tag(self, impression_tag):
        """Sets the impression_tag of this TagData.

        Tag string for serving an ad.

        :param impression_tag: The impression_tag of this TagData.
        :type impression_tag: str
        """

        self._impression_tag = impression_tag
