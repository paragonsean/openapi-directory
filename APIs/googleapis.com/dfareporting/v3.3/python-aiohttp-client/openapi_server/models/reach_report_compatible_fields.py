# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.dimension import Dimension
from openapi_server.models.metric import Metric
from openapi_server import util


class ReachReportCompatibleFields(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dimension_filters: List[Dimension]=None, dimensions: List[Dimension]=None, kind: str=None, metrics: List[Metric]=None, pivoted_activity_metrics: List[Metric]=None, reach_by_frequency_metrics: List[Metric]=None):
        """ReachReportCompatibleFields - a model defined in OpenAPI

        :param dimension_filters: The dimension_filters of this ReachReportCompatibleFields.
        :param dimensions: The dimensions of this ReachReportCompatibleFields.
        :param kind: The kind of this ReachReportCompatibleFields.
        :param metrics: The metrics of this ReachReportCompatibleFields.
        :param pivoted_activity_metrics: The pivoted_activity_metrics of this ReachReportCompatibleFields.
        :param reach_by_frequency_metrics: The reach_by_frequency_metrics of this ReachReportCompatibleFields.
        """
        self.openapi_types = {
            'dimension_filters': List[Dimension],
            'dimensions': List[Dimension],
            'kind': str,
            'metrics': List[Metric],
            'pivoted_activity_metrics': List[Metric],
            'reach_by_frequency_metrics': List[Metric]
        }

        self.attribute_map = {
            'dimension_filters': 'dimensionFilters',
            'dimensions': 'dimensions',
            'kind': 'kind',
            'metrics': 'metrics',
            'pivoted_activity_metrics': 'pivotedActivityMetrics',
            'reach_by_frequency_metrics': 'reachByFrequencyMetrics'
        }

        self._dimension_filters = dimension_filters
        self._dimensions = dimensions
        self._kind = kind
        self._metrics = metrics
        self._pivoted_activity_metrics = pivoted_activity_metrics
        self._reach_by_frequency_metrics = reach_by_frequency_metrics

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReachReportCompatibleFields':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ReachReportCompatibleFields of this ReachReportCompatibleFields.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dimension_filters(self):
        """Gets the dimension_filters of this ReachReportCompatibleFields.

        Dimensions which are compatible to be selected in the \"dimensionFilters\" section of the report.

        :return: The dimension_filters of this ReachReportCompatibleFields.
        :rtype: List[Dimension]
        """
        return self._dimension_filters

    @dimension_filters.setter
    def dimension_filters(self, dimension_filters):
        """Sets the dimension_filters of this ReachReportCompatibleFields.

        Dimensions which are compatible to be selected in the \"dimensionFilters\" section of the report.

        :param dimension_filters: The dimension_filters of this ReachReportCompatibleFields.
        :type dimension_filters: List[Dimension]
        """

        self._dimension_filters = dimension_filters

    @property
    def dimensions(self):
        """Gets the dimensions of this ReachReportCompatibleFields.

        Dimensions which are compatible to be selected in the \"dimensions\" section of the report.

        :return: The dimensions of this ReachReportCompatibleFields.
        :rtype: List[Dimension]
        """
        return self._dimensions

    @dimensions.setter
    def dimensions(self, dimensions):
        """Sets the dimensions of this ReachReportCompatibleFields.

        Dimensions which are compatible to be selected in the \"dimensions\" section of the report.

        :param dimensions: The dimensions of this ReachReportCompatibleFields.
        :type dimensions: List[Dimension]
        """

        self._dimensions = dimensions

    @property
    def kind(self):
        """Gets the kind of this ReachReportCompatibleFields.

        The kind of resource this is, in this case dfareporting#reachReportCompatibleFields.

        :return: The kind of this ReachReportCompatibleFields.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this ReachReportCompatibleFields.

        The kind of resource this is, in this case dfareporting#reachReportCompatibleFields.

        :param kind: The kind of this ReachReportCompatibleFields.
        :type kind: str
        """

        self._kind = kind

    @property
    def metrics(self):
        """Gets the metrics of this ReachReportCompatibleFields.

        Metrics which are compatible to be selected in the \"metricNames\" section of the report.

        :return: The metrics of this ReachReportCompatibleFields.
        :rtype: List[Metric]
        """
        return self._metrics

    @metrics.setter
    def metrics(self, metrics):
        """Sets the metrics of this ReachReportCompatibleFields.

        Metrics which are compatible to be selected in the \"metricNames\" section of the report.

        :param metrics: The metrics of this ReachReportCompatibleFields.
        :type metrics: List[Metric]
        """

        self._metrics = metrics

    @property
    def pivoted_activity_metrics(self):
        """Gets the pivoted_activity_metrics of this ReachReportCompatibleFields.

        Metrics which are compatible to be selected as activity metrics to pivot on in the \"activities\" section of the report.

        :return: The pivoted_activity_metrics of this ReachReportCompatibleFields.
        :rtype: List[Metric]
        """
        return self._pivoted_activity_metrics

    @pivoted_activity_metrics.setter
    def pivoted_activity_metrics(self, pivoted_activity_metrics):
        """Sets the pivoted_activity_metrics of this ReachReportCompatibleFields.

        Metrics which are compatible to be selected as activity metrics to pivot on in the \"activities\" section of the report.

        :param pivoted_activity_metrics: The pivoted_activity_metrics of this ReachReportCompatibleFields.
        :type pivoted_activity_metrics: List[Metric]
        """

        self._pivoted_activity_metrics = pivoted_activity_metrics

    @property
    def reach_by_frequency_metrics(self):
        """Gets the reach_by_frequency_metrics of this ReachReportCompatibleFields.

        Metrics which are compatible to be selected in the \"reachByFrequencyMetricNames\" section of the report.

        :return: The reach_by_frequency_metrics of this ReachReportCompatibleFields.
        :rtype: List[Metric]
        """
        return self._reach_by_frequency_metrics

    @reach_by_frequency_metrics.setter
    def reach_by_frequency_metrics(self, reach_by_frequency_metrics):
        """Sets the reach_by_frequency_metrics of this ReachReportCompatibleFields.

        Metrics which are compatible to be selected in the \"reachByFrequencyMetricNames\" section of the report.

        :param reach_by_frequency_metrics: The reach_by_frequency_metrics of this ReachReportCompatibleFields.
        :type reach_by_frequency_metrics: List[Metric]
        """

        self._reach_by_frequency_metrics = reach_by_frequency_metrics
