# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UserRolePermission(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, availability: str=None, id: str=None, kind: str=None, name: str=None, permission_group_id: str=None):
        """UserRolePermission - a model defined in OpenAPI

        :param availability: The availability of this UserRolePermission.
        :param id: The id of this UserRolePermission.
        :param kind: The kind of this UserRolePermission.
        :param name: The name of this UserRolePermission.
        :param permission_group_id: The permission_group_id of this UserRolePermission.
        """
        self.openapi_types = {
            'availability': str,
            'id': str,
            'kind': str,
            'name': str,
            'permission_group_id': str
        }

        self.attribute_map = {
            'availability': 'availability',
            'id': 'id',
            'kind': 'kind',
            'name': 'name',
            'permission_group_id': 'permissionGroupId'
        }

        self._availability = availability
        self._id = id
        self._kind = kind
        self._name = name
        self._permission_group_id = permission_group_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UserRolePermission':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UserRolePermission of this UserRolePermission.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def availability(self):
        """Gets the availability of this UserRolePermission.

        Levels of availability for a user role permission.

        :return: The availability of this UserRolePermission.
        :rtype: str
        """
        return self._availability

    @availability.setter
    def availability(self, availability):
        """Sets the availability of this UserRolePermission.

        Levels of availability for a user role permission.

        :param availability: The availability of this UserRolePermission.
        :type availability: str
        """
        allowed_values = ["NOT_AVAILABLE_BY_DEFAULT", "ACCOUNT_BY_DEFAULT", "SUBACCOUNT_AND_ACCOUNT_BY_DEFAULT", "ACCOUNT_ALWAYS", "SUBACCOUNT_AND_ACCOUNT_ALWAYS", "USER_PROFILE_ONLY"]  # noqa: E501
        if availability not in allowed_values:
            raise ValueError(
                "Invalid value for `availability` ({0}), must be one of {1}"
                .format(availability, allowed_values)
            )

        self._availability = availability

    @property
    def id(self):
        """Gets the id of this UserRolePermission.

        ID of this user role permission.

        :return: The id of this UserRolePermission.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UserRolePermission.

        ID of this user role permission.

        :param id: The id of this UserRolePermission.
        :type id: str
        """

        self._id = id

    @property
    def kind(self):
        """Gets the kind of this UserRolePermission.

        Identifies what kind of resource this is. Value: the fixed string \"dfareporting#userRolePermission\".

        :return: The kind of this UserRolePermission.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this UserRolePermission.

        Identifies what kind of resource this is. Value: the fixed string \"dfareporting#userRolePermission\".

        :param kind: The kind of this UserRolePermission.
        :type kind: str
        """

        self._kind = kind

    @property
    def name(self):
        """Gets the name of this UserRolePermission.

        Name of this user role permission.

        :return: The name of this UserRolePermission.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UserRolePermission.

        Name of this user role permission.

        :param name: The name of this UserRolePermission.
        :type name: str
        """

        self._name = name

    @property
    def permission_group_id(self):
        """Gets the permission_group_id of this UserRolePermission.

        ID of the permission group that this user role permission belongs to.

        :return: The permission_group_id of this UserRolePermission.
        :rtype: str
        """
        return self._permission_group_id

    @permission_group_id.setter
    def permission_group_id(self, permission_group_id):
        """Sets the permission_group_id of this UserRolePermission.

        ID of the permission group that this user role permission belongs to.

        :param permission_group_id: The permission_group_id of this UserRolePermission.
        :type permission_group_id: str
        """

        self._permission_group_id = permission_group_id
