# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SortedDimension(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, kind: str=None, name: str=None, sort_order: str=None):
        """SortedDimension - a model defined in OpenAPI

        :param kind: The kind of this SortedDimension.
        :param name: The name of this SortedDimension.
        :param sort_order: The sort_order of this SortedDimension.
        """
        self.openapi_types = {
            'kind': str,
            'name': str,
            'sort_order': str
        }

        self.attribute_map = {
            'kind': 'kind',
            'name': 'name',
            'sort_order': 'sortOrder'
        }

        self._kind = kind
        self._name = name
        self._sort_order = sort_order

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SortedDimension':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SortedDimension of this SortedDimension.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def kind(self):
        """Gets the kind of this SortedDimension.

        The kind of resource this is, in this case dfareporting#sortedDimension.

        :return: The kind of this SortedDimension.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this SortedDimension.

        The kind of resource this is, in this case dfareporting#sortedDimension.

        :param kind: The kind of this SortedDimension.
        :type kind: str
        """

        self._kind = kind

    @property
    def name(self):
        """Gets the name of this SortedDimension.

        The name of the dimension.

        :return: The name of this SortedDimension.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SortedDimension.

        The name of the dimension.

        :param name: The name of this SortedDimension.
        :type name: str
        """

        self._name = name

    @property
    def sort_order(self):
        """Gets the sort_order of this SortedDimension.

        An optional sort order for the dimension column.

        :return: The sort_order of this SortedDimension.
        :rtype: str
        """
        return self._sort_order

    @sort_order.setter
    def sort_order(self, sort_order):
        """Sets the sort_order of this SortedDimension.

        An optional sort order for the dimension column.

        :param sort_order: The sort_order of this SortedDimension.
        :type sort_order: str
        """
        allowed_values = ["ASCENDING", "DESCENDING"]  # noqa: E501
        if sort_order not in allowed_values:
            raise ValueError(
                "Invalid value for `sort_order` ({0}), must be one of {1}"
                .format(sort_order, allowed_values)
            )

        self._sort_order = sort_order
